
ElectrifyEverything.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009d24  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00009d24  00009d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000000fc  20000000  00009d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000027c  200000fc  00009e28  000200fc  2**2
                  ALLOC
  4 .stack        00002000  20000378  0000a0a4  000200fc  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
  7 .debug_info   000401a2  00000000  00000000  0002017d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000465e  00000000  00000000  0006031f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003806  00000000  00000000  0006497d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ac8  00000000  00000000  00068183  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000918  00000000  00000000  00068c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001de07  00000000  00000000  00069563  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013ddd  00000000  00000000  0008736a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008a3ce  00000000  00000000  0009b147  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002b64  00000000  00000000  00125518  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002378 	.word	0x20002378
       4:	00005dc1 	.word	0x00005dc1
       8:	00005eb9 	.word	0x00005eb9
       c:	00005eb9 	.word	0x00005eb9
	...
      2c:	00005eb9 	.word	0x00005eb9
	...
      38:	00005eb9 	.word	0x00005eb9
      3c:	00005eb9 	.word	0x00005eb9
      40:	00005eb9 	.word	0x00005eb9
      44:	00005eb9 	.word	0x00005eb9
      48:	00001d61 	.word	0x00001d61
      4c:	00005eb9 	.word	0x00005eb9
      50:	00000a29 	.word	0x00000a29
      54:	00005eb9 	.word	0x00005eb9
      58:	00005eb9 	.word	0x00005eb9
      5c:	00005eb9 	.word	0x00005eb9
      60:	00005eb9 	.word	0x00005eb9
      64:	00005eb9 	.word	0x00005eb9
      68:	00005eb9 	.word	0x00005eb9
      6c:	00002085 	.word	0x00002085
      70:	00005eb9 	.word	0x00005eb9
      74:	00005eb9 	.word	0x00005eb9
      78:	00005eb9 	.word	0x00005eb9
      7c:	00005eb9 	.word	0x00005eb9
      80:	00005eb9 	.word	0x00005eb9
      84:	00005eb9 	.word	0x00005eb9
      88:	00004995 	.word	0x00004995
      8c:	00005eb9 	.word	0x00005eb9
      90:	00005eb9 	.word	0x00005eb9
	...
      9c:	00005eb9 	.word	0x00005eb9
      a0:	00005eb9 	.word	0x00005eb9
      a4:	00005eb9 	.word	0x00005eb9
      a8:	00005eb9 	.word	0x00005eb9
      ac:	00005eb9 	.word	0x00005eb9
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000fc 	.word	0x200000fc
      d4:	00000000 	.word	0x00000000
      d8:	00009d2c 	.word	0x00009d2c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000100 	.word	0x20000100
     108:	00009d2c 	.word	0x00009d2c
     10c:	00009d2c 	.word	0x00009d2c
     110:	00000000 	.word	0x00000000

00000114 <wdt_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void wdt_get_config_defaults(
		struct wdt_conf *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
     122:	687b      	ldr	r3, [r7, #4]
     124:	2201      	movs	r2, #1
     126:	705a      	strb	r2, [r3, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21) && !(SAMR30)
	config->clock_source         = GCLK_GENERATOR_4;
     128:	687b      	ldr	r3, [r7, #4]
     12a:	2204      	movs	r2, #4
     12c:	709a      	strb	r2, [r3, #2]
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
     12e:	687b      	ldr	r3, [r7, #4]
     130:	220c      	movs	r2, #12
     132:	70da      	strb	r2, [r3, #3]
	config->window_period        = WDT_PERIOD_NONE;
     134:	687b      	ldr	r3, [r7, #4]
     136:	2200      	movs	r2, #0
     138:	711a      	strb	r2, [r3, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
     13a:	687b      	ldr	r3, [r7, #4]
     13c:	2200      	movs	r2, #0
     13e:	715a      	strb	r2, [r3, #5]
}
     140:	46c0      	nop			; (mov r8, r8)
     142:	46bd      	mov	sp, r7
     144:	b002      	add	sp, #8
     146:	bd80      	pop	{r7, pc}

00000148 <wdt_init>:
 *  Author: Andreas
 */ 
#include "wdt.h"

void wdt_init()
{
     148:	b580      	push	{r7, lr}
     14a:	b082      	sub	sp, #8
     14c:	af00      	add	r7, sp, #0
	struct wdt_conf config_wdt;
	wdt_get_config_defaults(&config_wdt);
     14e:	003b      	movs	r3, r7
     150:	0018      	movs	r0, r3
     152:	4b09      	ldr	r3, [pc, #36]	; (178 <wdt_init+0x30>)
     154:	4798      	blx	r3
	
	config_wdt.always_on = false;
     156:	003b      	movs	r3, r7
     158:	2200      	movs	r2, #0
     15a:	701a      	strb	r2, [r3, #0]
	config_wdt.timeout_period = WDT_PERIOD_4096CLK;
     15c:	003b      	movs	r3, r7
     15e:	220a      	movs	r2, #10
     160:	70da      	strb	r2, [r3, #3]
	config_wdt.early_warning_period = WDT_PERIOD_2048CLK;
     162:	003b      	movs	r3, r7
     164:	2209      	movs	r2, #9
     166:	715a      	strb	r2, [r3, #5]
	
	wdt_set_config(&config_wdt);
     168:	003b      	movs	r3, r7
     16a:	0018      	movs	r0, r3
     16c:	4b03      	ldr	r3, [pc, #12]	; (17c <wdt_init+0x34>)
     16e:	4798      	blx	r3
	//wdt_init_cb();
}
     170:	46c0      	nop			; (mov r8, r8)
     172:	46bd      	mov	sp, r7
     174:	b002      	add	sp, #8
     176:	bd80      	pop	{r7, pc}
     178:	00000115 	.word	0x00000115
     17c:	00001bcd 	.word	0x00001bcd

00000180 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
     180:	b580      	push	{r7, lr}
     182:	af00      	add	r7, sp, #0
}
     184:	46c0      	nop			; (mov r8, r8)
     186:	46bd      	mov	sp, r7
     188:	bd80      	pop	{r7, pc}
     18a:	46c0      	nop			; (mov r8, r8)

0000018c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     18c:	b580      	push	{r7, lr}
     18e:	b082      	sub	sp, #8
     190:	af00      	add	r7, sp, #0
     192:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     194:	687b      	ldr	r3, [r7, #4]
     196:	2200      	movs	r2, #0
     198:	701a      	strb	r2, [r3, #0]
}
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	46bd      	mov	sp, r7
     19e:	b002      	add	sp, #8
     1a0:	bd80      	pop	{r7, pc}
     1a2:	46c0      	nop			; (mov r8, r8)

000001a4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     1a4:	b580      	push	{r7, lr}
     1a6:	b082      	sub	sp, #8
     1a8:	af00      	add	r7, sp, #0
     1aa:	0002      	movs	r2, r0
     1ac:	6039      	str	r1, [r7, #0]
     1ae:	1dfb      	adds	r3, r7, #7
     1b0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     1b2:	1dfb      	adds	r3, r7, #7
     1b4:	781b      	ldrb	r3, [r3, #0]
     1b6:	2b01      	cmp	r3, #1
     1b8:	d00a      	beq.n	1d0 <system_apb_clock_set_mask+0x2c>
     1ba:	2b02      	cmp	r3, #2
     1bc:	d00f      	beq.n	1de <system_apb_clock_set_mask+0x3a>
     1be:	2b00      	cmp	r3, #0
     1c0:	d114      	bne.n	1ec <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     1c2:	4b0e      	ldr	r3, [pc, #56]	; (1fc <system_apb_clock_set_mask+0x58>)
     1c4:	4a0d      	ldr	r2, [pc, #52]	; (1fc <system_apb_clock_set_mask+0x58>)
     1c6:	6991      	ldr	r1, [r2, #24]
     1c8:	683a      	ldr	r2, [r7, #0]
     1ca:	430a      	orrs	r2, r1
     1cc:	619a      	str	r2, [r3, #24]
			break;
     1ce:	e00f      	b.n	1f0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     1d0:	4b0a      	ldr	r3, [pc, #40]	; (1fc <system_apb_clock_set_mask+0x58>)
     1d2:	4a0a      	ldr	r2, [pc, #40]	; (1fc <system_apb_clock_set_mask+0x58>)
     1d4:	69d1      	ldr	r1, [r2, #28]
     1d6:	683a      	ldr	r2, [r7, #0]
     1d8:	430a      	orrs	r2, r1
     1da:	61da      	str	r2, [r3, #28]
			break;
     1dc:	e008      	b.n	1f0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1de:	4b07      	ldr	r3, [pc, #28]	; (1fc <system_apb_clock_set_mask+0x58>)
     1e0:	4a06      	ldr	r2, [pc, #24]	; (1fc <system_apb_clock_set_mask+0x58>)
     1e2:	6a11      	ldr	r1, [r2, #32]
     1e4:	683a      	ldr	r2, [r7, #0]
     1e6:	430a      	orrs	r2, r1
     1e8:	621a      	str	r2, [r3, #32]
			break;
     1ea:	e001      	b.n	1f0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     1ec:	2317      	movs	r3, #23
     1ee:	e000      	b.n	1f2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     1f0:	2300      	movs	r3, #0
}
     1f2:	0018      	movs	r0, r3
     1f4:	46bd      	mov	sp, r7
     1f6:	b002      	add	sp, #8
     1f8:	bd80      	pop	{r7, pc}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	40000400 	.word	0x40000400

00000200 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     200:	b580      	push	{r7, lr}
     202:	b082      	sub	sp, #8
     204:	af00      	add	r7, sp, #0
     206:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     208:	687b      	ldr	r3, [r7, #4]
     20a:	2280      	movs	r2, #128	; 0x80
     20c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     20e:	687b      	ldr	r3, [r7, #4]
     210:	2200      	movs	r2, #0
     212:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     214:	687b      	ldr	r3, [r7, #4]
     216:	2201      	movs	r2, #1
     218:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     21a:	687b      	ldr	r3, [r7, #4]
     21c:	2200      	movs	r2, #0
     21e:	70da      	strb	r2, [r3, #3]
}
     220:	46c0      	nop			; (mov r8, r8)
     222:	46bd      	mov	sp, r7
     224:	b002      	add	sp, #8
     226:	bd80      	pop	{r7, pc}

00000228 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     228:	b580      	push	{r7, lr}
     22a:	b082      	sub	sp, #8
     22c:	af00      	add	r7, sp, #0
     22e:	0002      	movs	r2, r0
     230:	1dfb      	adds	r3, r7, #7
     232:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     234:	1dfb      	adds	r3, r7, #7
     236:	781b      	ldrb	r3, [r3, #0]
     238:	2b00      	cmp	r3, #0
     23a:	d002      	beq.n	242 <system_voltage_reference_enable+0x1a>
     23c:	2b01      	cmp	r3, #1
     23e:	d007      	beq.n	250 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
     240:	e00d      	b.n	25e <system_voltage_reference_enable+0x36>
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     242:	4b08      	ldr	r3, [pc, #32]	; (264 <system_voltage_reference_enable+0x3c>)
     244:	4a07      	ldr	r2, [pc, #28]	; (264 <system_voltage_reference_enable+0x3c>)
     246:	6c12      	ldr	r2, [r2, #64]	; 0x40
     248:	2102      	movs	r1, #2
     24a:	430a      	orrs	r2, r1
     24c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     24e:	e006      	b.n	25e <system_voltage_reference_enable+0x36>

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     250:	4b04      	ldr	r3, [pc, #16]	; (264 <system_voltage_reference_enable+0x3c>)
     252:	4a04      	ldr	r2, [pc, #16]	; (264 <system_voltage_reference_enable+0x3c>)
     254:	6c12      	ldr	r2, [r2, #64]	; 0x40
     256:	2104      	movs	r1, #4
     258:	430a      	orrs	r2, r1
     25a:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     25c:	46c0      	nop			; (mov r8, r8)

		default:
			Assert(false);
			return;
	}
}
     25e:	46bd      	mov	sp, r7
     260:	b002      	add	sp, #8
     262:	bd80      	pop	{r7, pc}
     264:	40000800 	.word	0x40000800

00000268 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     268:	b580      	push	{r7, lr}
     26a:	b084      	sub	sp, #16
     26c:	af00      	add	r7, sp, #0
     26e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     270:	687b      	ldr	r3, [r7, #4]
     272:	681b      	ldr	r3, [r3, #0]
     274:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     276:	68fb      	ldr	r3, [r7, #12]
     278:	7e5b      	ldrb	r3, [r3, #25]
     27a:	b2db      	uxtb	r3, r3
     27c:	b25b      	sxtb	r3, r3
     27e:	2b00      	cmp	r3, #0
     280:	da01      	bge.n	286 <adc_is_syncing+0x1e>
		return true;
     282:	2301      	movs	r3, #1
     284:	e000      	b.n	288 <adc_is_syncing+0x20>
	}

	return false;
     286:	2300      	movs	r3, #0
}
     288:	0018      	movs	r0, r3
     28a:	46bd      	mov	sp, r7
     28c:	b004      	add	sp, #16
     28e:	bd80      	pop	{r7, pc}

00000290 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     290:	b580      	push	{r7, lr}
     292:	b082      	sub	sp, #8
     294:	af00      	add	r7, sp, #0
     296:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     298:	687b      	ldr	r3, [r7, #4]
     29a:	2200      	movs	r2, #0
     29c:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     29e:	687b      	ldr	r3, [r7, #4]
     2a0:	2200      	movs	r2, #0
     2a2:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     2a4:	687b      	ldr	r3, [r7, #4]
     2a6:	2200      	movs	r2, #0
     2a8:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	2200      	movs	r2, #0
     2ae:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     2b0:	687b      	ldr	r3, [r7, #4]
     2b2:	2200      	movs	r2, #0
     2b4:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     2b6:	687b      	ldr	r3, [r7, #4]
     2b8:	2200      	movs	r2, #0
     2ba:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     2bc:	687b      	ldr	r3, [r7, #4]
     2be:	2200      	movs	r2, #0
     2c0:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     2c2:	687b      	ldr	r3, [r7, #4]
     2c4:	2200      	movs	r2, #0
     2c6:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     2c8:	687b      	ldr	r3, [r7, #4]
     2ca:	2200      	movs	r2, #0
     2cc:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     2ce:	687b      	ldr	r3, [r7, #4]
     2d0:	22c0      	movs	r2, #192	; 0xc0
     2d2:	0152      	lsls	r2, r2, #5
     2d4:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     2d6:	687b      	ldr	r3, [r7, #4]
     2d8:	2200      	movs	r2, #0
     2da:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     2dc:	687b      	ldr	r3, [r7, #4]
     2de:	2200      	movs	r2, #0
     2e0:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
     2e2:	687b      	ldr	r3, [r7, #4]
     2e4:	2200      	movs	r2, #0
     2e6:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	2200      	movs	r2, #0
     2ec:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
     2ee:	687b      	ldr	r3, [r7, #4]
     2f0:	2200      	movs	r2, #0
     2f2:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     2f4:	687b      	ldr	r3, [r7, #4]
     2f6:	222a      	movs	r2, #42	; 0x2a
     2f8:	2100      	movs	r1, #0
     2fa:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	2200      	movs	r2, #0
     300:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
     302:	687b      	ldr	r3, [r7, #4]
     304:	2200      	movs	r2, #0
     306:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
     308:	687b      	ldr	r3, [r7, #4]
     30a:	2224      	movs	r2, #36	; 0x24
     30c:	2100      	movs	r1, #0
     30e:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     310:	687b      	ldr	r3, [r7, #4]
     312:	2200      	movs	r2, #0
     314:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     316:	687b      	ldr	r3, [r7, #4]
     318:	2200      	movs	r2, #0
     31a:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	2200      	movs	r2, #0
     320:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
     322:	687b      	ldr	r3, [r7, #4]
     324:	222b      	movs	r2, #43	; 0x2b
     326:	2100      	movs	r1, #0
     328:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
     32a:	687b      	ldr	r3, [r7, #4]
     32c:	222c      	movs	r2, #44	; 0x2c
     32e:	2100      	movs	r1, #0
     330:	5499      	strb	r1, [r3, r2]
}
     332:	46c0      	nop			; (mov r8, r8)
     334:	46bd      	mov	sp, r7
     336:	b002      	add	sp, #8
     338:	bd80      	pop	{r7, pc}
     33a:	46c0      	nop			; (mov r8, r8)

0000033c <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     33c:	b580      	push	{r7, lr}
     33e:	b098      	sub	sp, #96	; 0x60
     340:	af00      	add	r7, sp, #0
     342:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     344:	230c      	movs	r3, #12
     346:	18fa      	adds	r2, r7, r3
     348:	4b15      	ldr	r3, [pc, #84]	; (3a0 <_adc_configure_ain_pin+0x64>)
     34a:	0010      	movs	r0, r2
     34c:	0019      	movs	r1, r3
     34e:	2350      	movs	r3, #80	; 0x50
     350:	001a      	movs	r2, r3
     352:	4b14      	ldr	r3, [pc, #80]	; (3a4 <_adc_configure_ain_pin+0x68>)
     354:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     356:	4b14      	ldr	r3, [pc, #80]	; (3a8 <_adc_configure_ain_pin+0x6c>)
     358:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	2b13      	cmp	r3, #19
     35e:	d81a      	bhi.n	396 <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     360:	230c      	movs	r3, #12
     362:	18fb      	adds	r3, r7, r3
     364:	687a      	ldr	r2, [r7, #4]
     366:	0092      	lsls	r2, r2, #2
     368:	58d3      	ldr	r3, [r2, r3]
     36a:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     36c:	2308      	movs	r3, #8
     36e:	18fb      	adds	r3, r7, r3
     370:	0018      	movs	r0, r3
     372:	4b0e      	ldr	r3, [pc, #56]	; (3ac <_adc_configure_ain_pin+0x70>)
     374:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     376:	2308      	movs	r3, #8
     378:	18fb      	adds	r3, r7, r3
     37a:	2200      	movs	r2, #0
     37c:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     37e:	2308      	movs	r3, #8
     380:	18fb      	adds	r3, r7, r3
     382:	2201      	movs	r2, #1
     384:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     388:	b2db      	uxtb	r3, r3
     38a:	2208      	movs	r2, #8
     38c:	18ba      	adds	r2, r7, r2
     38e:	0011      	movs	r1, r2
     390:	0018      	movs	r0, r3
     392:	4b07      	ldr	r3, [pc, #28]	; (3b0 <_adc_configure_ain_pin+0x74>)
     394:	4798      	blx	r3
	}
}
     396:	46c0      	nop			; (mov r8, r8)
     398:	46bd      	mov	sp, r7
     39a:	b018      	add	sp, #96	; 0x60
     39c:	bd80      	pop	{r7, pc}
     39e:	46c0      	nop			; (mov r8, r8)
     3a0:	000094f8 	.word	0x000094f8
     3a4:	000082b5 	.word	0x000082b5
     3a8:	0000ffff 	.word	0x0000ffff
     3ac:	00000201 	.word	0x00000201
     3b0:	00005d39 	.word	0x00005d39

000003b4 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b6:	b089      	sub	sp, #36	; 0x24
     3b8:	af00      	add	r7, sp, #0
     3ba:	6078      	str	r0, [r7, #4]
     3bc:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
     3be:	231f      	movs	r3, #31
     3c0:	18fb      	adds	r3, r7, r3
     3c2:	2200      	movs	r2, #0
     3c4:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     3c6:	2310      	movs	r3, #16
     3c8:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3ca:	2317      	movs	r3, #23
     3cc:	18fb      	adds	r3, r7, r3
     3ce:	2200      	movs	r2, #0
     3d0:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     3d2:	687b      	ldr	r3, [r7, #4]
     3d4:	681b      	ldr	r3, [r3, #0]
     3d6:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     3d8:	230c      	movs	r3, #12
     3da:	18fb      	adds	r3, r7, r3
     3dc:	0018      	movs	r0, r3
     3de:	4bce      	ldr	r3, [pc, #824]	; (718 <_adc_set_config+0x364>)
     3e0:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     3e2:	683b      	ldr	r3, [r7, #0]
     3e4:	781a      	ldrb	r2, [r3, #0]
     3e6:	230c      	movs	r3, #12
     3e8:	18fb      	adds	r3, r7, r3
     3ea:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     3ec:	230c      	movs	r3, #12
     3ee:	18fb      	adds	r3, r7, r3
     3f0:	0019      	movs	r1, r3
     3f2:	201e      	movs	r0, #30
     3f4:	4bc9      	ldr	r3, [pc, #804]	; (71c <_adc_set_config+0x368>)
     3f6:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     3f8:	201e      	movs	r0, #30
     3fa:	4bc9      	ldr	r3, [pc, #804]	; (720 <_adc_set_config+0x36c>)
     3fc:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     3fe:	683b      	ldr	r3, [r7, #0]
     400:	222c      	movs	r2, #44	; 0x2c
     402:	5c9b      	ldrb	r3, [r3, r2]
     404:	2b00      	cmp	r3, #0
     406:	d040      	beq.n	48a <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
     408:	2316      	movs	r3, #22
     40a:	18fb      	adds	r3, r7, r3
     40c:	683a      	ldr	r2, [r7, #0]
     40e:	212b      	movs	r1, #43	; 0x2b
     410:	5c52      	ldrb	r2, [r2, r1]
     412:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     414:	683b      	ldr	r3, [r7, #0]
     416:	7b19      	ldrb	r1, [r3, #12]
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     418:	2315      	movs	r3, #21
     41a:	18fb      	adds	r3, r7, r3
     41c:	2216      	movs	r2, #22
     41e:	18ba      	adds	r2, r7, r2
     420:	7812      	ldrb	r2, [r2, #0]
     422:	188a      	adds	r2, r1, r2
     424:	701a      	strb	r2, [r3, #0]
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
     426:	683b      	ldr	r3, [r7, #0]
     428:	222c      	movs	r2, #44	; 0x2c
     42a:	5c99      	ldrb	r1, [r3, r2]
	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     42c:	230f      	movs	r3, #15
     42e:	18fb      	adds	r3, r7, r3
     430:	2215      	movs	r2, #21
     432:	18ba      	adds	r2, r7, r2
     434:	7812      	ldrb	r2, [r2, #0]
     436:	188a      	adds	r2, r1, r2
     438:	701a      	strb	r2, [r3, #0]
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     43a:	e018      	b.n	46e <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     43c:	2316      	movs	r3, #22
     43e:	18fb      	adds	r3, r7, r3
     440:	781b      	ldrb	r3, [r3, #0]
     442:	220f      	movs	r2, #15
     444:	4013      	ands	r3, r2
     446:	683a      	ldr	r2, [r7, #0]
     448:	7b12      	ldrb	r2, [r2, #12]
     44a:	189b      	adds	r3, r3, r2
     44c:	0018      	movs	r0, r3
     44e:	4bb5      	ldr	r3, [pc, #724]	; (724 <_adc_set_config+0x370>)
     450:	4798      	blx	r3
			start_pin++;
     452:	2315      	movs	r3, #21
     454:	18fb      	adds	r3, r7, r3
     456:	781a      	ldrb	r2, [r3, #0]
     458:	2315      	movs	r3, #21
     45a:	18fb      	adds	r3, r7, r3
     45c:	3201      	adds	r2, #1
     45e:	701a      	strb	r2, [r3, #0]
			offset++;
     460:	2316      	movs	r3, #22
     462:	18fb      	adds	r3, r7, r3
     464:	781a      	ldrb	r2, [r3, #0]
     466:	2316      	movs	r3, #22
     468:	18fb      	adds	r3, r7, r3
     46a:	3201      	adds	r2, #1
     46c:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     46e:	2315      	movs	r3, #21
     470:	18fa      	adds	r2, r7, r3
     472:	230f      	movs	r3, #15
     474:	18fb      	adds	r3, r7, r3
     476:	7812      	ldrb	r2, [r2, #0]
     478:	781b      	ldrb	r3, [r3, #0]
     47a:	429a      	cmp	r2, r3
     47c:	d3de      	bcc.n	43c <_adc_set_config+0x88>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     47e:	683b      	ldr	r3, [r7, #0]
     480:	89db      	ldrh	r3, [r3, #14]
     482:	0018      	movs	r0, r3
     484:	4ba7      	ldr	r3, [pc, #668]	; (724 <_adc_set_config+0x370>)
     486:	4798      	blx	r3
     488:	e009      	b.n	49e <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
     48a:	683b      	ldr	r3, [r7, #0]
     48c:	7b1b      	ldrb	r3, [r3, #12]
     48e:	0018      	movs	r0, r3
     490:	4ba4      	ldr	r3, [pc, #656]	; (724 <_adc_set_config+0x370>)
     492:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
     494:	683b      	ldr	r3, [r7, #0]
     496:	89db      	ldrh	r3, [r3, #14]
     498:	0018      	movs	r0, r3
     49a:	4ba2      	ldr	r3, [pc, #648]	; (724 <_adc_set_config+0x370>)
     49c:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     49e:	683b      	ldr	r3, [r7, #0]
     4a0:	7d5b      	ldrb	r3, [r3, #21]
     4a2:	009b      	lsls	r3, r3, #2
     4a4:	b2da      	uxtb	r2, r3
     4a6:	693b      	ldr	r3, [r7, #16]
     4a8:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     4aa:	683b      	ldr	r3, [r7, #0]
     4ac:	7d9b      	ldrb	r3, [r3, #22]
     4ae:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     4b0:	b25a      	sxtb	r2, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);
     4b2:	683b      	ldr	r3, [r7, #0]
     4b4:	785b      	ldrb	r3, [r3, #1]

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     4b6:	b25b      	sxtb	r3, r3
     4b8:	4313      	orrs	r3, r2
     4ba:	b25b      	sxtb	r3, r3
     4bc:	b2da      	uxtb	r2, r3
     4be:	693b      	ldr	r3, [r7, #16]
     4c0:	705a      	strb	r2, [r3, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     4c2:	683b      	ldr	r3, [r7, #0]
     4c4:	791b      	ldrb	r3, [r3, #4]
     4c6:	2b34      	cmp	r3, #52	; 0x34
     4c8:	d846      	bhi.n	558 <_adc_set_config+0x1a4>
     4ca:	009a      	lsls	r2, r3, #2
     4cc:	4b96      	ldr	r3, [pc, #600]	; (728 <_adc_set_config+0x374>)
     4ce:	18d3      	adds	r3, r2, r3
     4d0:	681b      	ldr	r3, [r3, #0]
     4d2:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     4d4:	231f      	movs	r3, #31
     4d6:	18fb      	adds	r3, r7, r3
     4d8:	683a      	ldr	r2, [r7, #0]
     4da:	7c52      	ldrb	r2, [r2, #17]
     4dc:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     4de:	2317      	movs	r3, #23
     4e0:	18fb      	adds	r3, r7, r3
     4e2:	683a      	ldr	r2, [r7, #0]
     4e4:	7c12      	ldrb	r2, [r2, #16]
     4e6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4e8:	2310      	movs	r3, #16
     4ea:	61bb      	str	r3, [r7, #24]
		break;
     4ec:	e036      	b.n	55c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     4ee:	231f      	movs	r3, #31
     4f0:	18fb      	adds	r3, r7, r3
     4f2:	2201      	movs	r2, #1
     4f4:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     4f6:	2317      	movs	r3, #23
     4f8:	18fb      	adds	r3, r7, r3
     4fa:	2202      	movs	r2, #2
     4fc:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4fe:	2310      	movs	r3, #16
     500:	61bb      	str	r3, [r7, #24]
		break;
     502:	e02b      	b.n	55c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     504:	231f      	movs	r3, #31
     506:	18fb      	adds	r3, r7, r3
     508:	2202      	movs	r2, #2
     50a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     50c:	2317      	movs	r3, #23
     50e:	18fb      	adds	r3, r7, r3
     510:	2204      	movs	r2, #4
     512:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     514:	2310      	movs	r3, #16
     516:	61bb      	str	r3, [r7, #24]
		break;
     518:	e020      	b.n	55c <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     51a:	231f      	movs	r3, #31
     51c:	18fb      	adds	r3, r7, r3
     51e:	2201      	movs	r2, #1
     520:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     522:	2317      	movs	r3, #23
     524:	18fb      	adds	r3, r7, r3
     526:	2206      	movs	r2, #6
     528:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     52a:	2310      	movs	r3, #16
     52c:	61bb      	str	r3, [r7, #24]
		break;
     52e:	e015      	b.n	55c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     530:	231f      	movs	r3, #31
     532:	18fb      	adds	r3, r7, r3
     534:	2200      	movs	r2, #0
     536:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     538:	2317      	movs	r3, #23
     53a:	18fb      	adds	r3, r7, r3
     53c:	2208      	movs	r2, #8
     53e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     540:	2310      	movs	r3, #16
     542:	61bb      	str	r3, [r7, #24]
		break;
     544:	e00a      	b.n	55c <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     546:	2330      	movs	r3, #48	; 0x30
     548:	61bb      	str	r3, [r7, #24]
		break;
     54a:	e007      	b.n	55c <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     54c:	2320      	movs	r3, #32
     54e:	61bb      	str	r3, [r7, #24]
		break;
     550:	e004      	b.n	55c <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     552:	2300      	movs	r3, #0
     554:	61bb      	str	r3, [r7, #24]
		break;
     556:	e001      	b.n	55c <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     558:	2317      	movs	r3, #23
     55a:	e1ae      	b.n	8ba <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     55c:	231f      	movs	r3, #31
     55e:	18fb      	adds	r3, r7, r3
     560:	781b      	ldrb	r3, [r3, #0]
     562:	011b      	lsls	r3, r3, #4
     564:	b2db      	uxtb	r3, r3
     566:	2270      	movs	r2, #112	; 0x70
     568:	4013      	ands	r3, r2
     56a:	b2da      	uxtb	r2, r3
     56c:	2317      	movs	r3, #23
     56e:	18fb      	adds	r3, r7, r3
     570:	781b      	ldrb	r3, [r3, #0]
     572:	4313      	orrs	r3, r2
     574:	b2da      	uxtb	r2, r3
     576:	693b      	ldr	r3, [r7, #16]
     578:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     57a:	683b      	ldr	r3, [r7, #0]
     57c:	7ddb      	ldrb	r3, [r3, #23]
     57e:	2b3f      	cmp	r3, #63	; 0x3f
     580:	d901      	bls.n	586 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
     582:	2317      	movs	r3, #23
     584:	e199      	b.n	8ba <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
     586:	683b      	ldr	r3, [r7, #0]
     588:	7dda      	ldrb	r2, [r3, #23]
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     58a:	693b      	ldr	r3, [r7, #16]
     58c:	70da      	strb	r2, [r3, #3]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     58e:	46c0      	nop			; (mov r8, r8)
     590:	687b      	ldr	r3, [r7, #4]
     592:	0018      	movs	r0, r3
     594:	4b65      	ldr	r3, [pc, #404]	; (72c <_adc_set_config+0x378>)
     596:	4798      	blx	r3
     598:	1e03      	subs	r3, r0, #0
     59a:	d1f9      	bne.n	590 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
     59c:	683b      	ldr	r3, [r7, #0]
     59e:	885a      	ldrh	r2, [r3, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     5a0:	69bb      	ldr	r3, [r7, #24]
     5a2:	b29b      	uxth	r3, r3
     5a4:	4313      	orrs	r3, r2
     5a6:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     5a8:	683b      	ldr	r3, [r7, #0]
     5aa:	2124      	movs	r1, #36	; 0x24
     5ac:	5c5b      	ldrb	r3, [r3, r1]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     5ae:	b29b      	uxth	r3, r3
     5b0:	00db      	lsls	r3, r3, #3
     5b2:	b29b      	uxth	r3, r3
     5b4:	4313      	orrs	r3, r2
     5b6:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     5b8:	683b      	ldr	r3, [r7, #0]
     5ba:	7d1b      	ldrb	r3, [r3, #20]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     5bc:	b29b      	uxth	r3, r3
     5be:	009b      	lsls	r3, r3, #2
     5c0:	b29b      	uxth	r3, r3
     5c2:	4313      	orrs	r3, r2
     5c4:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     5c6:	683b      	ldr	r3, [r7, #0]
     5c8:	7c9b      	ldrb	r3, [r3, #18]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     5ca:	b29b      	uxth	r3, r3
     5cc:	18db      	adds	r3, r3, r3
     5ce:	b29b      	uxth	r3, r3
     5d0:	4313      	orrs	r3, r2
     5d2:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     5d4:	683b      	ldr	r3, [r7, #0]
     5d6:	7cdb      	ldrb	r3, [r3, #19]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     5d8:	b29b      	uxth	r3, r3
     5da:	4313      	orrs	r3, r2
     5dc:	b29a      	uxth	r2, r3
     5de:	693b      	ldr	r3, [r7, #16]
     5e0:	809a      	strh	r2, [r3, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     5e2:	683b      	ldr	r3, [r7, #0]
     5e4:	7e1b      	ldrb	r3, [r3, #24]
     5e6:	2b00      	cmp	r3, #0
     5e8:	d100      	bne.n	5ec <_adc_set_config+0x238>
     5ea:	e0c4      	b.n	776 <_adc_set_config+0x3c2>
		switch (resolution) {
     5ec:	69bb      	ldr	r3, [r7, #24]
     5ee:	2b10      	cmp	r3, #16
     5f0:	d100      	bne.n	5f4 <_adc_set_config+0x240>
     5f2:	e076      	b.n	6e2 <_adc_set_config+0x32e>
     5f4:	d802      	bhi.n	5fc <_adc_set_config+0x248>
     5f6:	2b00      	cmp	r3, #0
     5f8:	d04d      	beq.n	696 <_adc_set_config+0x2e2>
     5fa:	e0bc      	b.n	776 <_adc_set_config+0x3c2>
     5fc:	2b20      	cmp	r3, #32
     5fe:	d023      	beq.n	648 <_adc_set_config+0x294>
     600:	2b30      	cmp	r3, #48	; 0x30
     602:	d000      	beq.n	606 <_adc_set_config+0x252>
     604:	e0b7      	b.n	776 <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     606:	683b      	ldr	r3, [r7, #0]
     608:	7cdb      	ldrb	r3, [r3, #19]
     60a:	2b00      	cmp	r3, #0
     60c:	d011      	beq.n	632 <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
     60e:	683b      	ldr	r3, [r7, #0]
     610:	69db      	ldr	r3, [r3, #28]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     612:	2b7f      	cmp	r3, #127	; 0x7f
     614:	dc0b      	bgt.n	62e <_adc_set_config+0x27a>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     616:	683b      	ldr	r3, [r7, #0]
     618:	69db      	ldr	r3, [r3, #28]
	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
     61a:	3380      	adds	r3, #128	; 0x80
     61c:	db07      	blt.n	62e <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
     61e:	683b      	ldr	r3, [r7, #0]
     620:	6a1b      	ldr	r3, [r3, #32]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     622:	2b7f      	cmp	r3, #127	; 0x7f
     624:	dc03      	bgt.n	62e <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
     626:	683b      	ldr	r3, [r7, #0]
     628:	6a1b      	ldr	r3, [r3, #32]
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
     62a:	3380      	adds	r3, #128	; 0x80
     62c:	da01      	bge.n	632 <_adc_set_config+0x27e>
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     62e:	2317      	movs	r3, #23
     630:	e143      	b.n	8ba <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
     632:	683b      	ldr	r3, [r7, #0]
     634:	69db      	ldr	r3, [r3, #28]
     636:	2bff      	cmp	r3, #255	; 0xff
     638:	dc04      	bgt.n	644 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
     63a:	683b      	ldr	r3, [r7, #0]
     63c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     63e:	2bff      	cmp	r3, #255	; 0xff
     640:	dc00      	bgt.n	644 <_adc_set_config+0x290>
     642:	e091      	b.n	768 <_adc_set_config+0x3b4>
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     644:	2317      	movs	r3, #23
     646:	e138      	b.n	8ba <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     648:	683b      	ldr	r3, [r7, #0]
     64a:	7cdb      	ldrb	r3, [r3, #19]
     64c:	2b00      	cmp	r3, #0
     64e:	d015      	beq.n	67c <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
     650:	683b      	ldr	r3, [r7, #0]
     652:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     654:	4a36      	ldr	r2, [pc, #216]	; (730 <_adc_set_config+0x37c>)
     656:	4293      	cmp	r3, r2
     658:	dc0e      	bgt.n	678 <_adc_set_config+0x2c4>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     65a:	683b      	ldr	r3, [r7, #0]
     65c:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
     65e:	4a35      	ldr	r2, [pc, #212]	; (734 <_adc_set_config+0x380>)
     660:	4293      	cmp	r3, r2
     662:	db09      	blt.n	678 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     664:	683b      	ldr	r3, [r7, #0]
     666:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     668:	4a31      	ldr	r2, [pc, #196]	; (730 <_adc_set_config+0x37c>)
     66a:	4293      	cmp	r3, r2
     66c:	dc04      	bgt.n	678 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
     66e:	683b      	ldr	r3, [r7, #0]
     670:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     672:	4a30      	ldr	r2, [pc, #192]	; (734 <_adc_set_config+0x380>)
     674:	4293      	cmp	r3, r2
     676:	da01      	bge.n	67c <_adc_set_config+0x2c8>
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     678:	2317      	movs	r3, #23
     67a:	e11e      	b.n	8ba <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
     67c:	683b      	ldr	r3, [r7, #0]
     67e:	69db      	ldr	r3, [r3, #28]
     680:	4a2d      	ldr	r2, [pc, #180]	; (738 <_adc_set_config+0x384>)
     682:	4293      	cmp	r3, r2
     684:	dc05      	bgt.n	692 <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
     686:	683b      	ldr	r3, [r7, #0]
     688:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     68a:	4a2b      	ldr	r2, [pc, #172]	; (738 <_adc_set_config+0x384>)
     68c:	4293      	cmp	r3, r2
     68e:	dc00      	bgt.n	692 <_adc_set_config+0x2de>
     690:	e06c      	b.n	76c <_adc_set_config+0x3b8>
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     692:	2317      	movs	r3, #23
     694:	e111      	b.n	8ba <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     696:	683b      	ldr	r3, [r7, #0]
     698:	7cdb      	ldrb	r3, [r3, #19]
     69a:	2b00      	cmp	r3, #0
     69c:	d015      	beq.n	6ca <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
     69e:	683b      	ldr	r3, [r7, #0]
     6a0:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     6a2:	4a26      	ldr	r2, [pc, #152]	; (73c <_adc_set_config+0x388>)
     6a4:	4293      	cmp	r3, r2
     6a6:	dc0e      	bgt.n	6c6 <_adc_set_config+0x312>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     6a8:	683b      	ldr	r3, [r7, #0]
     6aa:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
     6ac:	4a24      	ldr	r2, [pc, #144]	; (740 <_adc_set_config+0x38c>)
     6ae:	4293      	cmp	r3, r2
     6b0:	db09      	blt.n	6c6 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
     6b2:	683b      	ldr	r3, [r7, #0]
     6b4:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     6b6:	4a21      	ldr	r2, [pc, #132]	; (73c <_adc_set_config+0x388>)
     6b8:	4293      	cmp	r3, r2
     6ba:	dc04      	bgt.n	6c6 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
     6bc:	683b      	ldr	r3, [r7, #0]
     6be:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
     6c0:	4a1f      	ldr	r2, [pc, #124]	; (740 <_adc_set_config+0x38c>)
     6c2:	4293      	cmp	r3, r2
     6c4:	da01      	bge.n	6ca <_adc_set_config+0x316>
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6c6:	2317      	movs	r3, #23
     6c8:	e0f7      	b.n	8ba <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
     6ca:	683b      	ldr	r3, [r7, #0]
     6cc:	69db      	ldr	r3, [r3, #28]
     6ce:	4a1d      	ldr	r2, [pc, #116]	; (744 <_adc_set_config+0x390>)
     6d0:	4293      	cmp	r3, r2
     6d2:	dc04      	bgt.n	6de <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
     6d4:	683b      	ldr	r3, [r7, #0]
     6d6:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     6d8:	4a1a      	ldr	r2, [pc, #104]	; (744 <_adc_set_config+0x390>)
     6da:	4293      	cmp	r3, r2
     6dc:	dd48      	ble.n	770 <_adc_set_config+0x3bc>
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6de:	2317      	movs	r3, #23
     6e0:	e0eb      	b.n	8ba <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     6e2:	683b      	ldr	r3, [r7, #0]
     6e4:	7cdb      	ldrb	r3, [r3, #19]
     6e6:	2b00      	cmp	r3, #0
     6e8:	d032      	beq.n	750 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
     6ea:	683b      	ldr	r3, [r7, #0]
     6ec:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     6ee:	4a16      	ldr	r2, [pc, #88]	; (748 <_adc_set_config+0x394>)
     6f0:	4293      	cmp	r3, r2
     6f2:	dc0e      	bgt.n	712 <_adc_set_config+0x35e>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     6f4:	683b      	ldr	r3, [r7, #0]
     6f6:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
     6f8:	4a14      	ldr	r2, [pc, #80]	; (74c <_adc_set_config+0x398>)
     6fa:	4293      	cmp	r3, r2
     6fc:	db09      	blt.n	712 <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
     6fe:	683b      	ldr	r3, [r7, #0]
     700:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     702:	4a11      	ldr	r2, [pc, #68]	; (748 <_adc_set_config+0x394>)
     704:	4293      	cmp	r3, r2
     706:	dc04      	bgt.n	712 <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
     708:	683b      	ldr	r3, [r7, #0]
     70a:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
     70c:	4a0f      	ldr	r2, [pc, #60]	; (74c <_adc_set_config+0x398>)
     70e:	4293      	cmp	r3, r2
     710:	da1e      	bge.n	750 <_adc_set_config+0x39c>
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     712:	2317      	movs	r3, #23
     714:	e0d1      	b.n	8ba <_adc_set_config+0x506>
     716:	46c0      	nop			; (mov r8, r8)
     718:	0000018d 	.word	0x0000018d
     71c:	00005a05 	.word	0x00005a05
     720:	00005a49 	.word	0x00005a49
     724:	0000033d 	.word	0x0000033d
     728:	00009548 	.word	0x00009548
     72c:	00000269 	.word	0x00000269
     730:	000001ff 	.word	0x000001ff
     734:	fffffe00 	.word	0xfffffe00
     738:	000003ff 	.word	0x000003ff
     73c:	000007ff 	.word	0x000007ff
     740:	fffff800 	.word	0xfffff800
     744:	00000fff 	.word	0x00000fff
     748:	00007fff 	.word	0x00007fff
     74c:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
     750:	683b      	ldr	r3, [r7, #0]
     752:	69db      	ldr	r3, [r3, #28]
     754:	4a5b      	ldr	r2, [pc, #364]	; (8c4 <_adc_set_config+0x510>)
     756:	4293      	cmp	r3, r2
     758:	dc04      	bgt.n	764 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
     75a:	683b      	ldr	r3, [r7, #0]
     75c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     75e:	4a59      	ldr	r2, [pc, #356]	; (8c4 <_adc_set_config+0x510>)
     760:	4293      	cmp	r3, r2
     762:	dd07      	ble.n	774 <_adc_set_config+0x3c0>
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     764:	2317      	movs	r3, #23
     766:	e0a8      	b.n	8ba <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
     768:	46c0      	nop			; (mov r8, r8)
     76a:	e004      	b.n	776 <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
     76c:	46c0      	nop			; (mov r8, r8)
     76e:	e002      	b.n	776 <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
     770:	46c0      	nop			; (mov r8, r8)
     772:	e000      	b.n	776 <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
     774:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
     776:	46c0      	nop			; (mov r8, r8)
     778:	687b      	ldr	r3, [r7, #4]
     77a:	0018      	movs	r0, r3
     77c:	4b52      	ldr	r3, [pc, #328]	; (8c8 <_adc_set_config+0x514>)
     77e:	4798      	blx	r3
     780:	1e03      	subs	r3, r0, #0
     782:	d1f9      	bne.n	778 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     784:	683b      	ldr	r3, [r7, #0]
     786:	7e1a      	ldrb	r2, [r3, #24]
     788:	693b      	ldr	r3, [r7, #16]
     78a:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     78c:	46c0      	nop			; (mov r8, r8)
     78e:	687b      	ldr	r3, [r7, #4]
     790:	0018      	movs	r0, r3
     792:	4b4d      	ldr	r3, [pc, #308]	; (8c8 <_adc_set_config+0x514>)
     794:	4798      	blx	r3
     796:	1e03      	subs	r3, r0, #0
     798:	d1f9      	bne.n	78e <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     79a:	683b      	ldr	r3, [r7, #0]
     79c:	69db      	ldr	r3, [r3, #28]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     79e:	b29a      	uxth	r2, r3
     7a0:	693b      	ldr	r3, [r7, #16]
     7a2:	839a      	strh	r2, [r3, #28]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
     7a4:	46c0      	nop			; (mov r8, r8)
     7a6:	687b      	ldr	r3, [r7, #4]
     7a8:	0018      	movs	r0, r3
     7aa:	4b47      	ldr	r3, [pc, #284]	; (8c8 <_adc_set_config+0x514>)
     7ac:	4798      	blx	r3
     7ae:	1e03      	subs	r3, r0, #0
     7b0:	d1f9      	bne.n	7a6 <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     7b2:	683b      	ldr	r3, [r7, #0]
     7b4:	6a1b      	ldr	r3, [r3, #32]
     7b6:	b29a      	uxth	r2, r3
     7b8:	693b      	ldr	r3, [r7, #16]
     7ba:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     7bc:	2314      	movs	r3, #20
     7be:	18fb      	adds	r3, r7, r3
     7c0:	683a      	ldr	r2, [r7, #0]
     7c2:	212c      	movs	r1, #44	; 0x2c
     7c4:	5c52      	ldrb	r2, [r2, r1]
     7c6:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
     7c8:	2314      	movs	r3, #20
     7ca:	18fb      	adds	r3, r7, r3
     7cc:	781b      	ldrb	r3, [r3, #0]
     7ce:	2b00      	cmp	r3, #0
     7d0:	d006      	beq.n	7e0 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     7d2:	2314      	movs	r3, #20
     7d4:	18fb      	adds	r3, r7, r3
     7d6:	781a      	ldrb	r2, [r3, #0]
     7d8:	2314      	movs	r3, #20
     7da:	18fb      	adds	r3, r7, r3
     7dc:	3a01      	subs	r2, #1
     7de:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     7e0:	2314      	movs	r3, #20
     7e2:	18fb      	adds	r3, r7, r3
     7e4:	781b      	ldrb	r3, [r3, #0]
     7e6:	2b0f      	cmp	r3, #15
     7e8:	d804      	bhi.n	7f4 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     7ea:	683b      	ldr	r3, [r7, #0]
     7ec:	222b      	movs	r2, #43	; 0x2b
     7ee:	5c9b      	ldrb	r3, [r3, r2]
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     7f0:	2b0f      	cmp	r3, #15
     7f2:	d901      	bls.n	7f8 <_adc_set_config+0x444>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     7f4:	2317      	movs	r3, #23
     7f6:	e060      	b.n	8ba <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
     7f8:	46c0      	nop			; (mov r8, r8)
     7fa:	687b      	ldr	r3, [r7, #4]
     7fc:	0018      	movs	r0, r3
     7fe:	4b32      	ldr	r3, [pc, #200]	; (8c8 <_adc_set_config+0x514>)
     800:	4798      	blx	r3
     802:	1e03      	subs	r3, r0, #0
     804:	d1f9      	bne.n	7fa <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     806:	683b      	ldr	r3, [r7, #0]
     808:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
     80a:	683a      	ldr	r2, [r7, #0]
     80c:	212b      	movs	r1, #43	; 0x2b
     80e:	5c52      	ldrb	r2, [r2, r1]
     810:	0512      	lsls	r2, r2, #20
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     812:	4313      	orrs	r3, r2
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     814:	2214      	movs	r2, #20
     816:	18ba      	adds	r2, r7, r2
     818:	7812      	ldrb	r2, [r2, #0]
     81a:	0412      	lsls	r2, r2, #16

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     81c:	4313      	orrs	r3, r2
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
     81e:	683a      	ldr	r2, [r7, #0]
     820:	89d2      	ldrh	r2, [r2, #14]
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     822:	4313      	orrs	r3, r2
			config->negative_input |
			config->positive_input;
     824:	683a      	ldr	r2, [r7, #0]
     826:	7b12      	ldrb	r2, [r2, #12]
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
     828:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     82a:	693b      	ldr	r3, [r7, #16]
     82c:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     82e:	683b      	ldr	r3, [r7, #0]
     830:	222a      	movs	r2, #42	; 0x2a
     832:	5c9a      	ldrb	r2, [r3, r2]
     834:	693b      	ldr	r3, [r7, #16]
     836:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     838:	693b      	ldr	r3, [r7, #16]
     83a:	220f      	movs	r2, #15
     83c:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     83e:	683b      	ldr	r3, [r7, #0]
     840:	2224      	movs	r2, #36	; 0x24
     842:	5c9b      	ldrb	r3, [r3, r2]
     844:	2b00      	cmp	r3, #0
     846:	d01e      	beq.n	886 <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     848:	683b      	ldr	r3, [r7, #0]
     84a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     84c:	4a1f      	ldr	r2, [pc, #124]	; (8cc <_adc_set_config+0x518>)
     84e:	4293      	cmp	r3, r2
     850:	d901      	bls.n	856 <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
     852:	2317      	movs	r3, #23
     854:	e031      	b.n	8ba <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     856:	683b      	ldr	r3, [r7, #0]
     858:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     85a:	693b      	ldr	r3, [r7, #16]
     85c:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     85e:	683b      	ldr	r3, [r7, #0]
     860:	2228      	movs	r2, #40	; 0x28
     862:	5e9b      	ldrsh	r3, [r3, r2]
     864:	4a1a      	ldr	r2, [pc, #104]	; (8d0 <_adc_set_config+0x51c>)
     866:	4293      	cmp	r3, r2
     868:	dc05      	bgt.n	876 <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
     86a:	683b      	ldr	r3, [r7, #0]
     86c:	2228      	movs	r2, #40	; 0x28
     86e:	5e9b      	ldrsh	r3, [r3, r2]
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     870:	4a18      	ldr	r2, [pc, #96]	; (8d4 <_adc_set_config+0x520>)
     872:	4293      	cmp	r3, r2
     874:	da01      	bge.n	87a <_adc_set_config+0x4c6>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
     876:	2317      	movs	r3, #23
     878:	e01f      	b.n	8ba <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     87a:	683b      	ldr	r3, [r7, #0]
     87c:	2228      	movs	r2, #40	; 0x28
     87e:	5e9b      	ldrsh	r3, [r3, r2]
     880:	b29a      	uxth	r2, r3
     882:	693b      	ldr	r3, [r7, #16]
     884:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     886:	4b14      	ldr	r3, [pc, #80]	; (8d8 <_adc_set_config+0x524>)
     888:	681b      	ldr	r3, [r3, #0]
     88a:	08db      	lsrs	r3, r3, #3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     88c:	b29b      	uxth	r3, r3
     88e:	021b      	lsls	r3, r3, #8
     890:	b29a      	uxth	r2, r3
     892:	23e0      	movs	r3, #224	; 0xe0
     894:	00db      	lsls	r3, r3, #3
     896:	4013      	ands	r3, r2
     898:	b29a      	uxth	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     89a:	4b10      	ldr	r3, [pc, #64]	; (8dc <_adc_set_config+0x528>)
     89c:	685c      	ldr	r4, [r3, #4]
     89e:	681b      	ldr	r3, [r3, #0]
     8a0:	0161      	lsls	r1, r4, #5
     8a2:	0edd      	lsrs	r5, r3, #27
     8a4:	430d      	orrs	r5, r1
     8a6:	0ee6      	lsrs	r6, r4, #27
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     8a8:	b2ab      	uxth	r3, r5
     8aa:	21ff      	movs	r1, #255	; 0xff
     8ac:	400b      	ands	r3, r1
     8ae:	b29b      	uxth	r3, r3
     8b0:	4313      	orrs	r3, r2
     8b2:	b29a      	uxth	r2, r3
     8b4:	693b      	ldr	r3, [r7, #16]
     8b6:	851a      	strh	r2, [r3, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     8b8:	2300      	movs	r3, #0
}
     8ba:	0018      	movs	r0, r3
     8bc:	46bd      	mov	sp, r7
     8be:	b009      	add	sp, #36	; 0x24
     8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	0000ffff 	.word	0x0000ffff
     8c8:	00000269 	.word	0x00000269
     8cc:	00000fff 	.word	0x00000fff
     8d0:	000007ff 	.word	0x000007ff
     8d4:	fffff800 	.word	0xfffff800
     8d8:	00806024 	.word	0x00806024
     8dc:	00806020 	.word	0x00806020

000008e0 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     8e0:	b580      	push	{r7, lr}
     8e2:	b084      	sub	sp, #16
     8e4:	af00      	add	r7, sp, #0
     8e6:	60f8      	str	r0, [r7, #12]
     8e8:	60b9      	str	r1, [r7, #8]
     8ea:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     8ec:	68fb      	ldr	r3, [r7, #12]
     8ee:	68ba      	ldr	r2, [r7, #8]
     8f0:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
     8f2:	2380      	movs	r3, #128	; 0x80
     8f4:	025b      	lsls	r3, r3, #9
     8f6:	0019      	movs	r1, r3
     8f8:	2002      	movs	r0, #2
     8fa:	4b15      	ldr	r3, [pc, #84]	; (950 <adc_init+0x70>)
     8fc:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     8fe:	68bb      	ldr	r3, [r7, #8]
     900:	781b      	ldrb	r3, [r3, #0]
     902:	b2db      	uxtb	r3, r3
     904:	001a      	movs	r2, r3
     906:	2301      	movs	r3, #1
     908:	4013      	ands	r3, r2
     90a:	d001      	beq.n	910 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     90c:	2305      	movs	r3, #5
     90e:	e01a      	b.n	946 <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     910:	68bb      	ldr	r3, [r7, #8]
     912:	781b      	ldrb	r3, [r3, #0]
     914:	b2db      	uxtb	r3, r3
     916:	001a      	movs	r2, r3
     918:	2302      	movs	r3, #2
     91a:	4013      	ands	r3, r2
     91c:	d001      	beq.n	922 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     91e:	231c      	movs	r3, #28
     920:	e011      	b.n	946 <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     922:	687b      	ldr	r3, [r7, #4]
     924:	785a      	ldrb	r2, [r3, #1]
     926:	68fb      	ldr	r3, [r7, #12]
     928:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     92a:	68fb      	ldr	r3, [r7, #12]
     92c:	791b      	ldrb	r3, [r3, #4]
     92e:	2b00      	cmp	r3, #0
     930:	d102      	bne.n	938 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
     932:	2001      	movs	r0, #1
     934:	4b07      	ldr	r3, [pc, #28]	; (954 <adc_init+0x74>)
     936:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     938:	687a      	ldr	r2, [r7, #4]
     93a:	68fb      	ldr	r3, [r7, #12]
     93c:	0011      	movs	r1, r2
     93e:	0018      	movs	r0, r3
     940:	4b05      	ldr	r3, [pc, #20]	; (958 <adc_init+0x78>)
     942:	4798      	blx	r3
     944:	0003      	movs	r3, r0
}
     946:	0018      	movs	r0, r3
     948:	46bd      	mov	sp, r7
     94a:	b004      	add	sp, #16
     94c:	bd80      	pop	{r7, pc}
     94e:	46c0      	nop			; (mov r8, r8)
     950:	000001a5 	.word	0x000001a5
     954:	00000229 	.word	0x00000229
     958:	000003b5 	.word	0x000003b5

0000095c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     95c:	b580      	push	{r7, lr}
     95e:	b084      	sub	sp, #16
     960:	af00      	add	r7, sp, #0
     962:	0002      	movs	r2, r0
     964:	1dfb      	adds	r3, r7, #7
     966:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     968:	230f      	movs	r3, #15
     96a:	18fb      	adds	r3, r7, r3
     96c:	1dfa      	adds	r2, r7, #7
     96e:	7812      	ldrb	r2, [r2, #0]
     970:	0952      	lsrs	r2, r2, #5
     972:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     974:	230f      	movs	r3, #15
     976:	18fb      	adds	r3, r7, r3
     978:	781b      	ldrb	r3, [r3, #0]
     97a:	2b00      	cmp	r3, #0
     97c:	d10c      	bne.n	998 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     97e:	4b09      	ldr	r3, [pc, #36]	; (9a4 <_extint_get_eic_from_channel+0x48>)
     980:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     982:	230f      	movs	r3, #15
     984:	18fb      	adds	r3, r7, r3
     986:	781b      	ldrb	r3, [r3, #0]
     988:	009b      	lsls	r3, r3, #2
     98a:	2210      	movs	r2, #16
     98c:	4694      	mov	ip, r2
     98e:	44bc      	add	ip, r7
     990:	4463      	add	r3, ip
     992:	3b08      	subs	r3, #8
     994:	681b      	ldr	r3, [r3, #0]
     996:	e000      	b.n	99a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     998:	2300      	movs	r3, #0
	}
}
     99a:	0018      	movs	r0, r3
     99c:	46bd      	mov	sp, r7
     99e:	b004      	add	sp, #16
     9a0:	bd80      	pop	{r7, pc}
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	40001800 	.word	0x40001800

000009a8 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     9a8:	b580      	push	{r7, lr}
     9aa:	b084      	sub	sp, #16
     9ac:	af00      	add	r7, sp, #0
     9ae:	0002      	movs	r2, r0
     9b0:	1dfb      	adds	r3, r7, #7
     9b2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     9b4:	1dfb      	adds	r3, r7, #7
     9b6:	781b      	ldrb	r3, [r3, #0]
     9b8:	0018      	movs	r0, r3
     9ba:	4b0b      	ldr	r3, [pc, #44]	; (9e8 <extint_chan_is_detected+0x40>)
     9bc:	4798      	blx	r3
     9be:	0003      	movs	r3, r0
     9c0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     9c2:	1dfb      	adds	r3, r7, #7
     9c4:	781b      	ldrb	r3, [r3, #0]
     9c6:	221f      	movs	r2, #31
     9c8:	4013      	ands	r3, r2
     9ca:	2201      	movs	r2, #1
     9cc:	409a      	lsls	r2, r3
     9ce:	0013      	movs	r3, r2
     9d0:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     9d2:	68fb      	ldr	r3, [r7, #12]
     9d4:	691b      	ldr	r3, [r3, #16]
     9d6:	68ba      	ldr	r2, [r7, #8]
     9d8:	4013      	ands	r3, r2
     9da:	1e5a      	subs	r2, r3, #1
     9dc:	4193      	sbcs	r3, r2
     9de:	b2db      	uxtb	r3, r3
}
     9e0:	0018      	movs	r0, r3
     9e2:	46bd      	mov	sp, r7
     9e4:	b004      	add	sp, #16
     9e6:	bd80      	pop	{r7, pc}
     9e8:	0000095d 	.word	0x0000095d

000009ec <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     9ec:	b580      	push	{r7, lr}
     9ee:	b084      	sub	sp, #16
     9f0:	af00      	add	r7, sp, #0
     9f2:	0002      	movs	r2, r0
     9f4:	1dfb      	adds	r3, r7, #7
     9f6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     9f8:	1dfb      	adds	r3, r7, #7
     9fa:	781b      	ldrb	r3, [r3, #0]
     9fc:	0018      	movs	r0, r3
     9fe:	4b09      	ldr	r3, [pc, #36]	; (a24 <extint_chan_clear_detected+0x38>)
     a00:	4798      	blx	r3
     a02:	0003      	movs	r3, r0
     a04:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     a06:	1dfb      	adds	r3, r7, #7
     a08:	781b      	ldrb	r3, [r3, #0]
     a0a:	221f      	movs	r2, #31
     a0c:	4013      	ands	r3, r2
     a0e:	2201      	movs	r2, #1
     a10:	409a      	lsls	r2, r3
     a12:	0013      	movs	r3, r2
     a14:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     a16:	68fb      	ldr	r3, [r7, #12]
     a18:	68ba      	ldr	r2, [r7, #8]
     a1a:	611a      	str	r2, [r3, #16]
}
     a1c:	46c0      	nop			; (mov r8, r8)
     a1e:	46bd      	mov	sp, r7
     a20:	b004      	add	sp, #16
     a22:	bd80      	pop	{r7, pc}
     a24:	0000095d 	.word	0x0000095d

00000a28 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     a28:	b580      	push	{r7, lr}
     a2a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     a2c:	4b15      	ldr	r3, [pc, #84]	; (a84 <EIC_Handler+0x5c>)
     a2e:	2200      	movs	r2, #0
     a30:	701a      	strb	r2, [r3, #0]
     a32:	e020      	b.n	a76 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     a34:	4b13      	ldr	r3, [pc, #76]	; (a84 <EIC_Handler+0x5c>)
     a36:	781b      	ldrb	r3, [r3, #0]
     a38:	0018      	movs	r0, r3
     a3a:	4b13      	ldr	r3, [pc, #76]	; (a88 <EIC_Handler+0x60>)
     a3c:	4798      	blx	r3
     a3e:	1e03      	subs	r3, r0, #0
     a40:	d013      	beq.n	a6a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     a42:	4b10      	ldr	r3, [pc, #64]	; (a84 <EIC_Handler+0x5c>)
     a44:	781b      	ldrb	r3, [r3, #0]
     a46:	0018      	movs	r0, r3
     a48:	4b10      	ldr	r3, [pc, #64]	; (a8c <EIC_Handler+0x64>)
     a4a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     a4c:	4b0d      	ldr	r3, [pc, #52]	; (a84 <EIC_Handler+0x5c>)
     a4e:	781b      	ldrb	r3, [r3, #0]
     a50:	001a      	movs	r2, r3
     a52:	4b0f      	ldr	r3, [pc, #60]	; (a90 <EIC_Handler+0x68>)
     a54:	0092      	lsls	r2, r2, #2
     a56:	58d3      	ldr	r3, [r2, r3]
     a58:	2b00      	cmp	r3, #0
     a5a:	d006      	beq.n	a6a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     a5c:	4b09      	ldr	r3, [pc, #36]	; (a84 <EIC_Handler+0x5c>)
     a5e:	781b      	ldrb	r3, [r3, #0]
     a60:	001a      	movs	r2, r3
     a62:	4b0b      	ldr	r3, [pc, #44]	; (a90 <EIC_Handler+0x68>)
     a64:	0092      	lsls	r2, r2, #2
     a66:	58d3      	ldr	r3, [r2, r3]
     a68:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     a6a:	4b06      	ldr	r3, [pc, #24]	; (a84 <EIC_Handler+0x5c>)
     a6c:	781b      	ldrb	r3, [r3, #0]
     a6e:	3301      	adds	r3, #1
     a70:	b2da      	uxtb	r2, r3
     a72:	4b04      	ldr	r3, [pc, #16]	; (a84 <EIC_Handler+0x5c>)
     a74:	701a      	strb	r2, [r3, #0]
     a76:	4b03      	ldr	r3, [pc, #12]	; (a84 <EIC_Handler+0x5c>)
     a78:	781b      	ldrb	r3, [r3, #0]
     a7a:	2b0f      	cmp	r3, #15
     a7c:	d9da      	bls.n	a34 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     a7e:	46c0      	nop			; (mov r8, r8)
     a80:	46bd      	mov	sp, r7
     a82:	bd80      	pop	{r7, pc}
     a84:	20000150 	.word	0x20000150
     a88:	000009a9 	.word	0x000009a9
     a8c:	000009ed 	.word	0x000009ed
     a90:	20000154 	.word	0x20000154

00000a94 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     a94:	b580      	push	{r7, lr}
     a96:	b082      	sub	sp, #8
     a98:	af00      	add	r7, sp, #0
     a9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     a9c:	687b      	ldr	r3, [r7, #4]
     a9e:	2200      	movs	r2, #0
     aa0:	701a      	strb	r2, [r3, #0]
}
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	46bd      	mov	sp, r7
     aa6:	b002      	add	sp, #8
     aa8:	bd80      	pop	{r7, pc}
     aaa:	46c0      	nop			; (mov r8, r8)

00000aac <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     aac:	b580      	push	{r7, lr}
     aae:	b082      	sub	sp, #8
     ab0:	af00      	add	r7, sp, #0
     ab2:	0002      	movs	r2, r0
     ab4:	6039      	str	r1, [r7, #0]
     ab6:	1dfb      	adds	r3, r7, #7
     ab8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     aba:	1dfb      	adds	r3, r7, #7
     abc:	781b      	ldrb	r3, [r3, #0]
     abe:	2b01      	cmp	r3, #1
     ac0:	d00a      	beq.n	ad8 <system_apb_clock_set_mask+0x2c>
     ac2:	2b02      	cmp	r3, #2
     ac4:	d00f      	beq.n	ae6 <system_apb_clock_set_mask+0x3a>
     ac6:	2b00      	cmp	r3, #0
     ac8:	d114      	bne.n	af4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     aca:	4b0e      	ldr	r3, [pc, #56]	; (b04 <system_apb_clock_set_mask+0x58>)
     acc:	4a0d      	ldr	r2, [pc, #52]	; (b04 <system_apb_clock_set_mask+0x58>)
     ace:	6991      	ldr	r1, [r2, #24]
     ad0:	683a      	ldr	r2, [r7, #0]
     ad2:	430a      	orrs	r2, r1
     ad4:	619a      	str	r2, [r3, #24]
			break;
     ad6:	e00f      	b.n	af8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     ad8:	4b0a      	ldr	r3, [pc, #40]	; (b04 <system_apb_clock_set_mask+0x58>)
     ada:	4a0a      	ldr	r2, [pc, #40]	; (b04 <system_apb_clock_set_mask+0x58>)
     adc:	69d1      	ldr	r1, [r2, #28]
     ade:	683a      	ldr	r2, [r7, #0]
     ae0:	430a      	orrs	r2, r1
     ae2:	61da      	str	r2, [r3, #28]
			break;
     ae4:	e008      	b.n	af8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     ae6:	4b07      	ldr	r3, [pc, #28]	; (b04 <system_apb_clock_set_mask+0x58>)
     ae8:	4a06      	ldr	r2, [pc, #24]	; (b04 <system_apb_clock_set_mask+0x58>)
     aea:	6a11      	ldr	r1, [r2, #32]
     aec:	683a      	ldr	r2, [r7, #0]
     aee:	430a      	orrs	r2, r1
     af0:	621a      	str	r2, [r3, #32]
			break;
     af2:	e001      	b.n	af8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     af4:	2317      	movs	r3, #23
     af6:	e000      	b.n	afa <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     af8:	2300      	movs	r3, #0
}
     afa:	0018      	movs	r0, r3
     afc:	46bd      	mov	sp, r7
     afe:	b002      	add	sp, #8
     b00:	bd80      	pop	{r7, pc}
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	40000400 	.word	0x40000400

00000b08 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     b08:	b580      	push	{r7, lr}
     b0a:	b082      	sub	sp, #8
     b0c:	af00      	add	r7, sp, #0
     b0e:	0002      	movs	r2, r0
     b10:	1dfb      	adds	r3, r7, #7
     b12:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     b14:	4b06      	ldr	r3, [pc, #24]	; (b30 <system_interrupt_enable+0x28>)
     b16:	1dfa      	adds	r2, r7, #7
     b18:	7812      	ldrb	r2, [r2, #0]
     b1a:	0011      	movs	r1, r2
     b1c:	221f      	movs	r2, #31
     b1e:	400a      	ands	r2, r1
     b20:	2101      	movs	r1, #1
     b22:	4091      	lsls	r1, r2
     b24:	000a      	movs	r2, r1
     b26:	601a      	str	r2, [r3, #0]
}
     b28:	46c0      	nop			; (mov r8, r8)
     b2a:	46bd      	mov	sp, r7
     b2c:	b002      	add	sp, #8
     b2e:	bd80      	pop	{r7, pc}
     b30:	e000e100 	.word	0xe000e100

00000b34 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     b34:	b580      	push	{r7, lr}
     b36:	b082      	sub	sp, #8
     b38:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     b3a:	4b0f      	ldr	r3, [pc, #60]	; (b78 <extint_is_syncing+0x44>)
     b3c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     b3e:	2300      	movs	r3, #0
     b40:	607b      	str	r3, [r7, #4]
     b42:	e011      	b.n	b68 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     b44:	687b      	ldr	r3, [r7, #4]
     b46:	009b      	lsls	r3, r3, #2
     b48:	2208      	movs	r2, #8
     b4a:	4694      	mov	ip, r2
     b4c:	44bc      	add	ip, r7
     b4e:	4463      	add	r3, ip
     b50:	3b08      	subs	r3, #8
     b52:	681b      	ldr	r3, [r3, #0]
     b54:	785b      	ldrb	r3, [r3, #1]
     b56:	b2db      	uxtb	r3, r3
     b58:	b25b      	sxtb	r3, r3
     b5a:	2b00      	cmp	r3, #0
     b5c:	da01      	bge.n	b62 <extint_is_syncing+0x2e>
			return true;
     b5e:	2301      	movs	r3, #1
     b60:	e006      	b.n	b70 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     b62:	687b      	ldr	r3, [r7, #4]
     b64:	3301      	adds	r3, #1
     b66:	607b      	str	r3, [r7, #4]
     b68:	687b      	ldr	r3, [r7, #4]
     b6a:	2b00      	cmp	r3, #0
     b6c:	d0ea      	beq.n	b44 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
     b6e:	2300      	movs	r3, #0
}
     b70:	0018      	movs	r0, r3
     b72:	46bd      	mov	sp, r7
     b74:	b002      	add	sp, #8
     b76:	bd80      	pop	{r7, pc}
     b78:	40001800 	.word	0x40001800

00000b7c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     b7c:	b580      	push	{r7, lr}
     b7e:	b084      	sub	sp, #16
     b80:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     b82:	4b2d      	ldr	r3, [pc, #180]	; (c38 <_system_extint_init+0xbc>)
     b84:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     b86:	2140      	movs	r1, #64	; 0x40
     b88:	2000      	movs	r0, #0
     b8a:	4b2c      	ldr	r3, [pc, #176]	; (c3c <_system_extint_init+0xc0>)
     b8c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     b8e:	003b      	movs	r3, r7
     b90:	0018      	movs	r0, r3
     b92:	4b2b      	ldr	r3, [pc, #172]	; (c40 <_system_extint_init+0xc4>)
     b94:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     b96:	003b      	movs	r3, r7
     b98:	2200      	movs	r2, #0
     b9a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     b9c:	003b      	movs	r3, r7
     b9e:	0019      	movs	r1, r3
     ba0:	2005      	movs	r0, #5
     ba2:	4b28      	ldr	r3, [pc, #160]	; (c44 <_system_extint_init+0xc8>)
     ba4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     ba6:	2005      	movs	r0, #5
     ba8:	4b27      	ldr	r3, [pc, #156]	; (c48 <_system_extint_init+0xcc>)
     baa:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     bac:	2300      	movs	r3, #0
     bae:	60fb      	str	r3, [r7, #12]
     bb0:	e018      	b.n	be4 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     bb2:	68fb      	ldr	r3, [r7, #12]
     bb4:	009b      	lsls	r3, r3, #2
     bb6:	2210      	movs	r2, #16
     bb8:	4694      	mov	ip, r2
     bba:	44bc      	add	ip, r7
     bbc:	4463      	add	r3, ip
     bbe:	3b0c      	subs	r3, #12
     bc0:	681a      	ldr	r2, [r3, #0]
     bc2:	68fb      	ldr	r3, [r7, #12]
     bc4:	009b      	lsls	r3, r3, #2
     bc6:	2110      	movs	r1, #16
     bc8:	468c      	mov	ip, r1
     bca:	44bc      	add	ip, r7
     bcc:	4463      	add	r3, ip
     bce:	3b0c      	subs	r3, #12
     bd0:	681b      	ldr	r3, [r3, #0]
     bd2:	781b      	ldrb	r3, [r3, #0]
     bd4:	b2db      	uxtb	r3, r3
     bd6:	2101      	movs	r1, #1
     bd8:	430b      	orrs	r3, r1
     bda:	b2db      	uxtb	r3, r3
     bdc:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     bde:	68fb      	ldr	r3, [r7, #12]
     be0:	3301      	adds	r3, #1
     be2:	60fb      	str	r3, [r7, #12]
     be4:	68fb      	ldr	r3, [r7, #12]
     be6:	2b00      	cmp	r3, #0
     be8:	d0e3      	beq.n	bb2 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	4b17      	ldr	r3, [pc, #92]	; (c4c <_system_extint_init+0xd0>)
     bee:	4798      	blx	r3
     bf0:	1e03      	subs	r3, r0, #0
     bf2:	d1fb      	bne.n	bec <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     bf4:	230b      	movs	r3, #11
     bf6:	18fb      	adds	r3, r7, r3
     bf8:	2200      	movs	r2, #0
     bfa:	701a      	strb	r2, [r3, #0]
     bfc:	e00d      	b.n	c1a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     bfe:	230b      	movs	r3, #11
     c00:	18fb      	adds	r3, r7, r3
     c02:	781a      	ldrb	r2, [r3, #0]
     c04:	4b12      	ldr	r3, [pc, #72]	; (c50 <_system_extint_init+0xd4>)
     c06:	0092      	lsls	r2, r2, #2
     c08:	2100      	movs	r1, #0
     c0a:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     c0c:	230b      	movs	r3, #11
     c0e:	18fb      	adds	r3, r7, r3
     c10:	781a      	ldrb	r2, [r3, #0]
     c12:	230b      	movs	r3, #11
     c14:	18fb      	adds	r3, r7, r3
     c16:	3201      	adds	r2, #1
     c18:	701a      	strb	r2, [r3, #0]
     c1a:	230b      	movs	r3, #11
     c1c:	18fb      	adds	r3, r7, r3
     c1e:	781b      	ldrb	r3, [r3, #0]
     c20:	2b0f      	cmp	r3, #15
     c22:	d9ec      	bls.n	bfe <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     c24:	2004      	movs	r0, #4
     c26:	4b0b      	ldr	r3, [pc, #44]	; (c54 <_system_extint_init+0xd8>)
     c28:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     c2a:	4b0b      	ldr	r3, [pc, #44]	; (c58 <_system_extint_init+0xdc>)
     c2c:	4798      	blx	r3
}
     c2e:	46c0      	nop			; (mov r8, r8)
     c30:	46bd      	mov	sp, r7
     c32:	b004      	add	sp, #16
     c34:	bd80      	pop	{r7, pc}
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	40001800 	.word	0x40001800
     c3c:	00000aad 	.word	0x00000aad
     c40:	00000a95 	.word	0x00000a95
     c44:	00005a05 	.word	0x00005a05
     c48:	00005a49 	.word	0x00005a49
     c4c:	00000b35 	.word	0x00000b35
     c50:	20000154 	.word	0x20000154
     c54:	00000b09 	.word	0x00000b09
     c58:	00000c5d 	.word	0x00000c5d

00000c5c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     c5c:	b580      	push	{r7, lr}
     c5e:	b082      	sub	sp, #8
     c60:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     c62:	4b15      	ldr	r3, [pc, #84]	; (cb8 <_extint_enable+0x5c>)
     c64:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     c66:	2300      	movs	r3, #0
     c68:	607b      	str	r3, [r7, #4]
     c6a:	e018      	b.n	c9e <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     c6c:	687b      	ldr	r3, [r7, #4]
     c6e:	009b      	lsls	r3, r3, #2
     c70:	2208      	movs	r2, #8
     c72:	4694      	mov	ip, r2
     c74:	44bc      	add	ip, r7
     c76:	4463      	add	r3, ip
     c78:	3b08      	subs	r3, #8
     c7a:	681a      	ldr	r2, [r3, #0]
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	009b      	lsls	r3, r3, #2
     c80:	2108      	movs	r1, #8
     c82:	468c      	mov	ip, r1
     c84:	44bc      	add	ip, r7
     c86:	4463      	add	r3, ip
     c88:	3b08      	subs	r3, #8
     c8a:	681b      	ldr	r3, [r3, #0]
     c8c:	781b      	ldrb	r3, [r3, #0]
     c8e:	b2db      	uxtb	r3, r3
     c90:	2102      	movs	r1, #2
     c92:	430b      	orrs	r3, r1
     c94:	b2db      	uxtb	r3, r3
     c96:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     c98:	687b      	ldr	r3, [r7, #4]
     c9a:	3301      	adds	r3, #1
     c9c:	607b      	str	r3, [r7, #4]
     c9e:	687b      	ldr	r3, [r7, #4]
     ca0:	2b00      	cmp	r3, #0
     ca2:	d0e3      	beq.n	c6c <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     ca4:	46c0      	nop			; (mov r8, r8)
     ca6:	4b05      	ldr	r3, [pc, #20]	; (cbc <_extint_enable+0x60>)
     ca8:	4798      	blx	r3
     caa:	1e03      	subs	r3, r0, #0
     cac:	d1fb      	bne.n	ca6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     cae:	46c0      	nop			; (mov r8, r8)
     cb0:	46bd      	mov	sp, r7
     cb2:	b002      	add	sp, #8
     cb4:	bd80      	pop	{r7, pc}
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	40001800 	.word	0x40001800
     cbc:	00000b35 	.word	0x00000b35

00000cc0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     cc0:	b580      	push	{r7, lr}
     cc2:	b082      	sub	sp, #8
     cc4:	af00      	add	r7, sp, #0
     cc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     cc8:	687b      	ldr	r3, [r7, #4]
     cca:	2280      	movs	r2, #128	; 0x80
     ccc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     cce:	687b      	ldr	r3, [r7, #4]
     cd0:	2200      	movs	r2, #0
     cd2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     cd4:	687b      	ldr	r3, [r7, #4]
     cd6:	2201      	movs	r2, #1
     cd8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     cda:	687b      	ldr	r3, [r7, #4]
     cdc:	2200      	movs	r2, #0
     cde:	70da      	strb	r2, [r3, #3]
}
     ce0:	46c0      	nop			; (mov r8, r8)
     ce2:	46bd      	mov	sp, r7
     ce4:	b002      	add	sp, #8
     ce6:	bd80      	pop	{r7, pc}

00000ce8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     ce8:	b580      	push	{r7, lr}
     cea:	b084      	sub	sp, #16
     cec:	af00      	add	r7, sp, #0
     cee:	0002      	movs	r2, r0
     cf0:	6039      	str	r1, [r7, #0]
     cf2:	1dfb      	adds	r3, r7, #7
     cf4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     cf6:	230c      	movs	r3, #12
     cf8:	18fb      	adds	r3, r7, r3
     cfa:	0018      	movs	r0, r3
     cfc:	4b10      	ldr	r3, [pc, #64]	; (d40 <port_pin_set_config+0x58>)
     cfe:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     d00:	230c      	movs	r3, #12
     d02:	18fb      	adds	r3, r7, r3
     d04:	2280      	movs	r2, #128	; 0x80
     d06:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     d08:	683b      	ldr	r3, [r7, #0]
     d0a:	781a      	ldrb	r2, [r3, #0]
     d0c:	230c      	movs	r3, #12
     d0e:	18fb      	adds	r3, r7, r3
     d10:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     d12:	683b      	ldr	r3, [r7, #0]
     d14:	785a      	ldrb	r2, [r3, #1]
     d16:	230c      	movs	r3, #12
     d18:	18fb      	adds	r3, r7, r3
     d1a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     d1c:	683b      	ldr	r3, [r7, #0]
     d1e:	789a      	ldrb	r2, [r3, #2]
     d20:	230c      	movs	r3, #12
     d22:	18fb      	adds	r3, r7, r3
     d24:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     d26:	230c      	movs	r3, #12
     d28:	18fa      	adds	r2, r7, r3
     d2a:	1dfb      	adds	r3, r7, #7
     d2c:	781b      	ldrb	r3, [r3, #0]
     d2e:	0011      	movs	r1, r2
     d30:	0018      	movs	r0, r3
     d32:	4b04      	ldr	r3, [pc, #16]	; (d44 <port_pin_set_config+0x5c>)
     d34:	4798      	blx	r3
}
     d36:	46c0      	nop			; (mov r8, r8)
     d38:	46bd      	mov	sp, r7
     d3a:	b004      	add	sp, #16
     d3c:	bd80      	pop	{r7, pc}
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	00000cc1 	.word	0x00000cc1
     d44:	00005d39 	.word	0x00005d39

00000d48 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     d48:	b580      	push	{r7, lr}
     d4a:	b082      	sub	sp, #8
     d4c:	af00      	add	r7, sp, #0
     d4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     d50:	687b      	ldr	r3, [r7, #4]
     d52:	2200      	movs	r2, #0
     d54:	701a      	strb	r2, [r3, #0]
}
     d56:	46c0      	nop			; (mov r8, r8)
     d58:	46bd      	mov	sp, r7
     d5a:	b002      	add	sp, #8
     d5c:	bd80      	pop	{r7, pc}
     d5e:	46c0      	nop			; (mov r8, r8)

00000d60 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     d60:	b580      	push	{r7, lr}
     d62:	b082      	sub	sp, #8
     d64:	af00      	add	r7, sp, #0
     d66:	0002      	movs	r2, r0
     d68:	6039      	str	r1, [r7, #0]
     d6a:	1dfb      	adds	r3, r7, #7
     d6c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     d6e:	1dfb      	adds	r3, r7, #7
     d70:	781b      	ldrb	r3, [r3, #0]
     d72:	2b01      	cmp	r3, #1
     d74:	d00a      	beq.n	d8c <system_apb_clock_set_mask+0x2c>
     d76:	2b02      	cmp	r3, #2
     d78:	d00f      	beq.n	d9a <system_apb_clock_set_mask+0x3a>
     d7a:	2b00      	cmp	r3, #0
     d7c:	d114      	bne.n	da8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     d7e:	4b0e      	ldr	r3, [pc, #56]	; (db8 <system_apb_clock_set_mask+0x58>)
     d80:	4a0d      	ldr	r2, [pc, #52]	; (db8 <system_apb_clock_set_mask+0x58>)
     d82:	6991      	ldr	r1, [r2, #24]
     d84:	683a      	ldr	r2, [r7, #0]
     d86:	430a      	orrs	r2, r1
     d88:	619a      	str	r2, [r3, #24]
			break;
     d8a:	e00f      	b.n	dac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     d8c:	4b0a      	ldr	r3, [pc, #40]	; (db8 <system_apb_clock_set_mask+0x58>)
     d8e:	4a0a      	ldr	r2, [pc, #40]	; (db8 <system_apb_clock_set_mask+0x58>)
     d90:	69d1      	ldr	r1, [r2, #28]
     d92:	683a      	ldr	r2, [r7, #0]
     d94:	430a      	orrs	r2, r1
     d96:	61da      	str	r2, [r3, #28]
			break;
     d98:	e008      	b.n	dac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     d9a:	4b07      	ldr	r3, [pc, #28]	; (db8 <system_apb_clock_set_mask+0x58>)
     d9c:	4a06      	ldr	r2, [pc, #24]	; (db8 <system_apb_clock_set_mask+0x58>)
     d9e:	6a11      	ldr	r1, [r2, #32]
     da0:	683a      	ldr	r2, [r7, #0]
     da2:	430a      	orrs	r2, r1
     da4:	621a      	str	r2, [r3, #32]
			break;
     da6:	e001      	b.n	dac <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     da8:	2317      	movs	r3, #23
     daa:	e000      	b.n	dae <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     dac:	2300      	movs	r3, #0
}
     dae:	0018      	movs	r0, r3
     db0:	46bd      	mov	sp, r7
     db2:	b002      	add	sp, #8
     db4:	bd80      	pop	{r7, pc}
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	40000400 	.word	0x40000400

00000dbc <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     dbc:	b580      	push	{r7, lr}
     dbe:	b082      	sub	sp, #8
     dc0:	af00      	add	r7, sp, #0
     dc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     dc4:	687b      	ldr	r3, [r7, #4]
     dc6:	2280      	movs	r2, #128	; 0x80
     dc8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     dca:	687b      	ldr	r3, [r7, #4]
     dcc:	2200      	movs	r2, #0
     dce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     dd0:	687b      	ldr	r3, [r7, #4]
     dd2:	2201      	movs	r2, #1
     dd4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     dd6:	687b      	ldr	r3, [r7, #4]
     dd8:	2200      	movs	r2, #0
     dda:	70da      	strb	r2, [r3, #3]
}
     ddc:	46c0      	nop			; (mov r8, r8)
     dde:	46bd      	mov	sp, r7
     de0:	b002      	add	sp, #8
     de2:	bd80      	pop	{r7, pc}

00000de4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     de4:	b580      	push	{r7, lr}
     de6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     de8:	4b05      	ldr	r3, [pc, #20]	; (e00 <system_is_debugger_present+0x1c>)
     dea:	789b      	ldrb	r3, [r3, #2]
     dec:	b2db      	uxtb	r3, r3
     dee:	001a      	movs	r2, r3
     df0:	2302      	movs	r3, #2
     df2:	4013      	ands	r3, r2
     df4:	1e5a      	subs	r2, r3, #1
     df6:	4193      	sbcs	r3, r2
     df8:	b2db      	uxtb	r3, r3
}
     dfa:	0018      	movs	r0, r3
     dfc:	46bd      	mov	sp, r7
     dfe:	bd80      	pop	{r7, pc}
     e00:	41002000 	.word	0x41002000

00000e04 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     e04:	b580      	push	{r7, lr}
     e06:	b084      	sub	sp, #16
     e08:	af00      	add	r7, sp, #0
     e0a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     e0c:	687b      	ldr	r3, [r7, #4]
     e0e:	681b      	ldr	r3, [r3, #0]
     e10:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     e12:	68fb      	ldr	r3, [r7, #12]
     e14:	69db      	ldr	r3, [r3, #28]
     e16:	2207      	movs	r2, #7
     e18:	4013      	ands	r3, r2
     e1a:	1e5a      	subs	r2, r3, #1
     e1c:	4193      	sbcs	r3, r2
     e1e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     e20:	0018      	movs	r0, r3
     e22:	46bd      	mov	sp, r7
     e24:	b004      	add	sp, #16
     e26:	bd80      	pop	{r7, pc}

00000e28 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     e28:	b580      	push	{r7, lr}
     e2a:	b082      	sub	sp, #8
     e2c:	af00      	add	r7, sp, #0
     e2e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     e30:	46c0      	nop			; (mov r8, r8)
     e32:	687b      	ldr	r3, [r7, #4]
     e34:	0018      	movs	r0, r3
     e36:	4b04      	ldr	r3, [pc, #16]	; (e48 <_i2c_master_wait_for_sync+0x20>)
     e38:	4798      	blx	r3
     e3a:	1e03      	subs	r3, r0, #0
     e3c:	d1f9      	bne.n	e32 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     e3e:	46c0      	nop			; (mov r8, r8)
     e40:	46bd      	mov	sp, r7
     e42:	b002      	add	sp, #8
     e44:	bd80      	pop	{r7, pc}
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	00000e05 	.word	0x00000e05

00000e4c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
     e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e4e:	b095      	sub	sp, #84	; 0x54
     e50:	af00      	add	r7, sp, #0
     e52:	60f8      	str	r0, [r7, #12]
     e54:	60b9      	str	r1, [r7, #8]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
     e56:	2300      	movs	r3, #0
     e58:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t tmp_baud_hs = 0;
     e5a:	2300      	movs	r3, #0
     e5c:	64bb      	str	r3, [r7, #72]	; 0x48
	int32_t tmp_baudlow_hs = 0;
     e5e:	2300      	movs	r3, #0
     e60:	647b      	str	r3, [r7, #68]	; 0x44
	enum status_code tmp_status_code = STATUS_OK;
     e62:	233b      	movs	r3, #59	; 0x3b
     e64:	2208      	movs	r2, #8
     e66:	4694      	mov	ip, r2
     e68:	44bc      	add	ip, r7
     e6a:	4463      	add	r3, ip
     e6c:	2200      	movs	r2, #0
     e6e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     e70:	68fb      	ldr	r3, [r7, #12]
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	633b      	str	r3, [r7, #48]	; 0x30
	Sercom *const sercom_hw = module->hw;
     e76:	68fb      	ldr	r3, [r7, #12]
     e78:	681b      	ldr	r3, [r3, #0]
     e7a:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     e7c:	2323      	movs	r3, #35	; 0x23
     e7e:	2208      	movs	r2, #8
     e80:	18ba      	adds	r2, r7, r2
     e82:	18d4      	adds	r4, r2, r3
     e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e86:	0018      	movs	r0, r3
     e88:	4bdb      	ldr	r3, [pc, #876]	; (11f8 <_i2c_master_set_config+0x3ac>)
     e8a:	4798      	blx	r3
     e8c:	0003      	movs	r3, r0
     e8e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     e90:	230c      	movs	r3, #12
     e92:	2208      	movs	r2, #8
     e94:	4694      	mov	ip, r2
     e96:	44bc      	add	ip, r7
     e98:	4463      	add	r3, ip
     e9a:	0018      	movs	r0, r3
     e9c:	4bd7      	ldr	r3, [pc, #860]	; (11fc <_i2c_master_set_config+0x3b0>)
     e9e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
     ea0:	68bb      	ldr	r3, [r7, #8]
     ea2:	69db      	ldr	r3, [r3, #28]
     ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pad1 = config->pinmux_pad1;
     ea6:	68bb      	ldr	r3, [r7, #8]
     ea8:	6a1b      	ldr	r3, [r3, #32]
     eaa:	63bb      	str	r3, [r7, #56]	; 0x38

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     eae:	2b00      	cmp	r3, #0
     eb0:	d106      	bne.n	ec0 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     eb4:	2100      	movs	r1, #0
     eb6:	0018      	movs	r0, r3
     eb8:	4bd1      	ldr	r3, [pc, #836]	; (1200 <_i2c_master_set_config+0x3b4>)
     eba:	4798      	blx	r3
     ebc:	0003      	movs	r3, r0
     ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ec2:	b2da      	uxtb	r2, r3
     ec4:	230c      	movs	r3, #12
     ec6:	2108      	movs	r1, #8
     ec8:	468c      	mov	ip, r1
     eca:	44bc      	add	ip, r7
     ecc:	4463      	add	r3, ip
     ece:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     ed0:	230c      	movs	r3, #12
     ed2:	2208      	movs	r2, #8
     ed4:	4694      	mov	ip, r2
     ed6:	44bc      	add	ip, r7
     ed8:	4463      	add	r3, ip
     eda:	2202      	movs	r2, #2
     edc:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ee0:	0c1b      	lsrs	r3, r3, #16
     ee2:	b2db      	uxtb	r3, r3
     ee4:	220c      	movs	r2, #12
     ee6:	2108      	movs	r1, #8
     ee8:	468c      	mov	ip, r1
     eea:	44bc      	add	ip, r7
     eec:	4462      	add	r2, ip
     eee:	0011      	movs	r1, r2
     ef0:	0018      	movs	r0, r3
     ef2:	4bc4      	ldr	r3, [pc, #784]	; (1204 <_i2c_master_set_config+0x3b8>)
     ef4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ef8:	2b00      	cmp	r3, #0
     efa:	d106      	bne.n	f0a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     efe:	2101      	movs	r1, #1
     f00:	0018      	movs	r0, r3
     f02:	4bbf      	ldr	r3, [pc, #764]	; (1200 <_i2c_master_set_config+0x3b4>)
     f04:	4798      	blx	r3
     f06:	0003      	movs	r3, r0
     f08:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f0c:	b2da      	uxtb	r2, r3
     f0e:	230c      	movs	r3, #12
     f10:	2108      	movs	r1, #8
     f12:	468c      	mov	ip, r1
     f14:	44bc      	add	ip, r7
     f16:	4463      	add	r3, ip
     f18:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     f1a:	230c      	movs	r3, #12
     f1c:	2208      	movs	r2, #8
     f1e:	4694      	mov	ip, r2
     f20:	44bc      	add	ip, r7
     f22:	4463      	add	r3, ip
     f24:	2202      	movs	r2, #2
     f26:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f2a:	0c1b      	lsrs	r3, r3, #16
     f2c:	b2db      	uxtb	r3, r3
     f2e:	220c      	movs	r2, #12
     f30:	2108      	movs	r1, #8
     f32:	468c      	mov	ip, r1
     f34:	44bc      	add	ip, r7
     f36:	4462      	add	r2, ip
     f38:	0011      	movs	r1, r2
     f3a:	0018      	movs	r0, r3
     f3c:	4bb1      	ldr	r3, [pc, #708]	; (1204 <_i2c_master_set_config+0x3b8>)
     f3e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     f40:	68bb      	ldr	r3, [r7, #8]
     f42:	8a9a      	ldrh	r2, [r3, #20]
     f44:	68fb      	ldr	r3, [r7, #12]
     f46:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     f48:	68bb      	ldr	r3, [r7, #8]
     f4a:	8ada      	ldrh	r2, [r3, #22]
     f4c:	68fb      	ldr	r3, [r7, #12]
     f4e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     f50:	68bb      	ldr	r3, [r7, #8]
     f52:	7e1b      	ldrb	r3, [r3, #24]
     f54:	2b00      	cmp	r3, #0
     f56:	d103      	bne.n	f60 <_i2c_master_set_config+0x114>
     f58:	4bab      	ldr	r3, [pc, #684]	; (1208 <_i2c_master_set_config+0x3bc>)
     f5a:	4798      	blx	r3
     f5c:	1e03      	subs	r3, r0, #0
     f5e:	d002      	beq.n	f66 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     f60:	2380      	movs	r3, #128	; 0x80
     f62:	64fb      	str	r3, [r7, #76]	; 0x4c
     f64:	e001      	b.n	f6a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
     f66:	2300      	movs	r3, #0
     f68:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     f6a:	68bb      	ldr	r3, [r7, #8]
     f6c:	691b      	ldr	r3, [r3, #16]
     f6e:	2b00      	cmp	r3, #0
     f70:	d004      	beq.n	f7c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
     f72:	68bb      	ldr	r3, [r7, #8]
     f74:	691b      	ldr	r3, [r3, #16]
     f76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f78:	4313      	orrs	r3, r2
     f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     f7c:	68bb      	ldr	r3, [r7, #8]
     f7e:	689b      	ldr	r3, [r3, #8]
     f80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f82:	4313      	orrs	r3, r2
     f84:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     f86:	68bb      	ldr	r3, [r7, #8]
     f88:	2224      	movs	r2, #36	; 0x24
     f8a:	5c9b      	ldrb	r3, [r3, r2]
     f8c:	2b00      	cmp	r3, #0
     f8e:	d004      	beq.n	f9a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f92:	2280      	movs	r2, #128	; 0x80
     f94:	05d2      	lsls	r2, r2, #23
     f96:	4313      	orrs	r3, r2
     f98:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     f9a:	68bb      	ldr	r3, [r7, #8]
     f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f9e:	2b00      	cmp	r3, #0
     fa0:	d004      	beq.n	fac <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
     fa2:	68bb      	ldr	r3, [r7, #8]
     fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     fa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     fa8:	4313      	orrs	r3, r2
     faa:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     fac:	68bb      	ldr	r3, [r7, #8]
     fae:	222c      	movs	r2, #44	; 0x2c
     fb0:	5c9b      	ldrb	r3, [r3, r2]
     fb2:	2b00      	cmp	r3, #0
     fb4:	d105      	bne.n	fc2 <_i2c_master_set_config+0x176>
     fb6:	68bb      	ldr	r3, [r7, #8]
     fb8:	689a      	ldr	r2, [r3, #8]
     fba:	2380      	movs	r3, #128	; 0x80
     fbc:	049b      	lsls	r3, r3, #18
     fbe:	429a      	cmp	r2, r3
     fc0:	d104      	bne.n	fcc <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     fc4:	2280      	movs	r2, #128	; 0x80
     fc6:	0512      	lsls	r2, r2, #20
     fc8:	4313      	orrs	r3, r2
     fca:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     fcc:	68bb      	ldr	r3, [r7, #8]
     fce:	222d      	movs	r2, #45	; 0x2d
     fd0:	5c9b      	ldrb	r3, [r3, r2]
     fd2:	2b00      	cmp	r3, #0
     fd4:	d004      	beq.n	fe0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     fd8:	2280      	movs	r2, #128	; 0x80
     fda:	0412      	lsls	r2, r2, #16
     fdc:	4313      	orrs	r3, r2
     fde:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     fe0:	68bb      	ldr	r3, [r7, #8]
     fe2:	222e      	movs	r2, #46	; 0x2e
     fe4:	5c9b      	ldrb	r3, [r3, r2]
     fe6:	2b00      	cmp	r3, #0
     fe8:	d004      	beq.n	ff4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     fec:	2280      	movs	r2, #128	; 0x80
     fee:	03d2      	lsls	r2, r2, #15
     ff0:	4313      	orrs	r3, r2
     ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ff6:	681a      	ldr	r2, [r3, #0]
     ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     ffa:	431a      	orrs	r2, r3
     ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ffe:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    1000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1002:	2280      	movs	r2, #128	; 0x80
    1004:	0052      	lsls	r2, r2, #1
    1006:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    1008:	2323      	movs	r3, #35	; 0x23
    100a:	2208      	movs	r2, #8
    100c:	4694      	mov	ip, r2
    100e:	44bc      	add	ip, r7
    1010:	4463      	add	r3, ip
    1012:	781b      	ldrb	r3, [r3, #0]
    1014:	3314      	adds	r3, #20
    1016:	b2db      	uxtb	r3, r3
    1018:	0018      	movs	r0, r3
    101a:	4b7c      	ldr	r3, [pc, #496]	; (120c <_i2c_master_set_config+0x3c0>)
    101c:	4798      	blx	r3
    101e:	0003      	movs	r3, r0
    1020:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fscl        = 1000 * config->baud_rate;
    1022:	68bb      	ldr	r3, [r7, #8]
    1024:	681b      	ldr	r3, [r3, #0]
    1026:	22fa      	movs	r2, #250	; 0xfa
    1028:	0092      	lsls	r2, r2, #2
    102a:	4353      	muls	r3, r2
    102c:	623b      	str	r3, [r7, #32]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    102e:	68bb      	ldr	r3, [r7, #8]
    1030:	685b      	ldr	r3, [r3, #4]
    1032:	22fa      	movs	r2, #250	; 0xfa
    1034:	0092      	lsls	r2, r2, #2
    1036:	4353      	muls	r3, r2
    1038:	61fb      	str	r3, [r7, #28]
	uint32_t trise       = config->sda_scl_rise_time_ns;
    103a:	68bb      	ldr	r3, [r7, #8]
    103c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    103e:	61bb      	str	r3, [r7, #24]
	
	tmp_baud = (int32_t)(div_ceil(
    1040:	4b73      	ldr	r3, [pc, #460]	; (1210 <_i2c_master_set_config+0x3c4>)
    1042:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1044:	4798      	blx	r3
    1046:	0005      	movs	r5, r0
    1048:	000e      	movs	r6, r1
    104a:	4b71      	ldr	r3, [pc, #452]	; (1210 <_i2c_master_set_config+0x3c4>)
    104c:	6a38      	ldr	r0, [r7, #32]
    104e:	4798      	blx	r3
    1050:	6038      	str	r0, [r7, #0]
    1052:	6079      	str	r1, [r7, #4]
    1054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1056:	69ba      	ldr	r2, [r7, #24]
    1058:	435a      	muls	r2, r3
    105a:	4b6d      	ldr	r3, [pc, #436]	; (1210 <_i2c_master_set_config+0x3c4>)
    105c:	0010      	movs	r0, r2
    105e:	4798      	blx	r3
    1060:	4c6c      	ldr	r4, [pc, #432]	; (1214 <_i2c_master_set_config+0x3c8>)
    1062:	4a6d      	ldr	r2, [pc, #436]	; (1218 <_i2c_master_set_config+0x3cc>)
    1064:	4b6d      	ldr	r3, [pc, #436]	; (121c <_i2c_master_set_config+0x3d0>)
    1066:	47a0      	blx	r4
    1068:	0003      	movs	r3, r0
    106a:	000c      	movs	r4, r1
    106c:	0018      	movs	r0, r3
    106e:	0021      	movs	r1, r4
    1070:	4c6b      	ldr	r4, [pc, #428]	; (1220 <_i2c_master_set_config+0x3d4>)
    1072:	2200      	movs	r2, #0
    1074:	4b6b      	ldr	r3, [pc, #428]	; (1224 <_i2c_master_set_config+0x3d8>)
    1076:	47a0      	blx	r4
    1078:	0003      	movs	r3, r0
    107a:	000c      	movs	r4, r1
    107c:	001a      	movs	r2, r3
    107e:	0023      	movs	r3, r4
    1080:	4c64      	ldr	r4, [pc, #400]	; (1214 <_i2c_master_set_config+0x3c8>)
    1082:	6838      	ldr	r0, [r7, #0]
    1084:	6879      	ldr	r1, [r7, #4]
    1086:	47a0      	blx	r4
    1088:	0003      	movs	r3, r0
    108a:	000c      	movs	r4, r1
    108c:	001a      	movs	r2, r3
    108e:	0023      	movs	r3, r4
    1090:	4c65      	ldr	r4, [pc, #404]	; (1228 <_i2c_master_set_config+0x3dc>)
    1092:	0028      	movs	r0, r5
    1094:	0031      	movs	r1, r6
    1096:	47a0      	blx	r4
    1098:	0003      	movs	r3, r0
    109a:	000c      	movs	r4, r1
    109c:	001d      	movs	r5, r3
    109e:	0026      	movs	r6, r4
    10a0:	6a3b      	ldr	r3, [r7, #32]
    10a2:	005a      	lsls	r2, r3, #1
    10a4:	4b5a      	ldr	r3, [pc, #360]	; (1210 <_i2c_master_set_config+0x3c4>)
    10a6:	0010      	movs	r0, r2
    10a8:	4798      	blx	r3
    10aa:	0002      	movs	r2, r0
    10ac:	000b      	movs	r3, r1
    10ae:	4c5c      	ldr	r4, [pc, #368]	; (1220 <_i2c_master_set_config+0x3d4>)
    10b0:	0028      	movs	r0, r5
    10b2:	0031      	movs	r1, r6
    10b4:	47a0      	blx	r4
    10b6:	0003      	movs	r3, r0
    10b8:	000c      	movs	r4, r1
    10ba:	0018      	movs	r0, r3
    10bc:	0021      	movs	r1, r4
    10be:	4c5a      	ldr	r4, [pc, #360]	; (1228 <_i2c_master_set_config+0x3dc>)
    10c0:	2200      	movs	r2, #0
    10c2:	4b5a      	ldr	r3, [pc, #360]	; (122c <_i2c_master_set_config+0x3e0>)
    10c4:	47a0      	blx	r4
    10c6:	0003      	movs	r3, r0
    10c8:	000c      	movs	r4, r1
    10ca:	001d      	movs	r5, r3
    10cc:	0026      	movs	r6, r4
    10ce:	6a3b      	ldr	r3, [r7, #32]
    10d0:	005a      	lsls	r2, r3, #1
    10d2:	4b4f      	ldr	r3, [pc, #316]	; (1210 <_i2c_master_set_config+0x3c4>)
    10d4:	0010      	movs	r0, r2
    10d6:	4798      	blx	r3
    10d8:	0002      	movs	r2, r0
    10da:	000b      	movs	r3, r1
    10dc:	4c54      	ldr	r4, [pc, #336]	; (1230 <_i2c_master_set_config+0x3e4>)
    10de:	0028      	movs	r0, r5
    10e0:	0031      	movs	r1, r6
    10e2:	47a0      	blx	r4
    10e4:	0003      	movs	r3, r0
    10e6:	000c      	movs	r4, r1
    10e8:	0019      	movs	r1, r3
    10ea:	0022      	movs	r2, r4
    10ec:	4b51      	ldr	r3, [pc, #324]	; (1234 <_i2c_master_set_config+0x3e8>)
    10ee:	0008      	movs	r0, r1
    10f0:	0011      	movs	r1, r2
    10f2:	4798      	blx	r3
    10f4:	0003      	movs	r3, r0
    10f6:	637b      	str	r3, [r7, #52]	; 0x34
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    10f8:	68bb      	ldr	r3, [r7, #8]
    10fa:	689a      	ldr	r2, [r3, #8]
    10fc:	2380      	movs	r3, #128	; 0x80
    10fe:	049b      	lsls	r3, r3, #18
    1100:	429a      	cmp	r2, r3
    1102:	d145      	bne.n	1190 <_i2c_master_set_config+0x344>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    1104:	4b42      	ldr	r3, [pc, #264]	; (1210 <_i2c_master_set_config+0x3c4>)
    1106:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1108:	4798      	blx	r3
    110a:	4c45      	ldr	r4, [pc, #276]	; (1220 <_i2c_master_set_config+0x3d4>)
    110c:	0002      	movs	r2, r0
    110e:	000b      	movs	r3, r1
    1110:	47a0      	blx	r4
    1112:	0003      	movs	r3, r0
    1114:	000c      	movs	r4, r1
    1116:	001d      	movs	r5, r3
    1118:	0026      	movs	r6, r4
    111a:	4b3d      	ldr	r3, [pc, #244]	; (1210 <_i2c_master_set_config+0x3c4>)
    111c:	69f8      	ldr	r0, [r7, #28]
    111e:	4798      	blx	r3
    1120:	4c3c      	ldr	r4, [pc, #240]	; (1214 <_i2c_master_set_config+0x3c8>)
    1122:	2200      	movs	r2, #0
    1124:	4b44      	ldr	r3, [pc, #272]	; (1238 <_i2c_master_set_config+0x3ec>)
    1126:	47a0      	blx	r4
    1128:	0003      	movs	r3, r0
    112a:	000c      	movs	r4, r1
    112c:	001a      	movs	r2, r3
    112e:	0023      	movs	r3, r4
    1130:	4c3f      	ldr	r4, [pc, #252]	; (1230 <_i2c_master_set_config+0x3e4>)
    1132:	0028      	movs	r0, r5
    1134:	0031      	movs	r1, r6
    1136:	47a0      	blx	r4
    1138:	0003      	movs	r3, r0
    113a:	000c      	movs	r4, r1
    113c:	0018      	movs	r0, r3
    113e:	0021      	movs	r1, r4
    1140:	4c39      	ldr	r4, [pc, #228]	; (1228 <_i2c_master_set_config+0x3dc>)
    1142:	2200      	movs	r2, #0
    1144:	4b39      	ldr	r3, [pc, #228]	; (122c <_i2c_master_set_config+0x3e0>)
    1146:	47a0      	blx	r4
    1148:	0003      	movs	r3, r0
    114a:	000c      	movs	r4, r1
    114c:	0019      	movs	r1, r3
    114e:	0022      	movs	r2, r4
    1150:	4b38      	ldr	r3, [pc, #224]	; (1234 <_i2c_master_set_config+0x3e8>)
    1152:	0008      	movs	r0, r1
    1154:	0011      	movs	r1, r2
    1156:	4798      	blx	r3
    1158:	0003      	movs	r3, r0
    115a:	647b      	str	r3, [r7, #68]	; 0x44
		if (tmp_baudlow_hs) {
    115c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    115e:	2b00      	cmp	r3, #0
    1160:	d009      	beq.n	1176 <_i2c_master_set_config+0x32a>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    1162:	4b36      	ldr	r3, [pc, #216]	; (123c <_i2c_master_set_config+0x3f0>)
    1164:	69f9      	ldr	r1, [r7, #28]
    1166:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1168:	4798      	blx	r3
    116a:	0003      	movs	r3, r0
    116c:	1e9a      	subs	r2, r3, #2
    116e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1170:	1ad3      	subs	r3, r2, r3
    1172:	64bb      	str	r3, [r7, #72]	; 0x48
    1174:	e00c      	b.n	1190 <_i2c_master_set_config+0x344>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    1176:	69fb      	ldr	r3, [r7, #28]
    1178:	005a      	lsls	r2, r3, #1
    117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    117c:	18d3      	adds	r3, r2, r3
    117e:	1e5a      	subs	r2, r3, #1
    1180:	69fb      	ldr	r3, [r7, #28]
    1182:	0059      	lsls	r1, r3, #1
    1184:	4b2d      	ldr	r3, [pc, #180]	; (123c <_i2c_master_set_config+0x3f0>)
    1186:	0010      	movs	r0, r2
    1188:	4798      	blx	r3
    118a:	0003      	movs	r3, r0
    118c:	3b01      	subs	r3, #1
    118e:	64bb      	str	r3, [r7, #72]	; 0x48
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1192:	2bff      	cmp	r3, #255	; 0xff
    1194:	dc08      	bgt.n	11a8 <_i2c_master_set_config+0x35c>
    1196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1198:	2b00      	cmp	r3, #0
    119a:	db05      	blt.n	11a8 <_i2c_master_set_config+0x35c>
    119c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    119e:	2bff      	cmp	r3, #255	; 0xff
    11a0:	dc02      	bgt.n	11a8 <_i2c_master_set_config+0x35c>
    11a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    11a4:	2b00      	cmp	r3, #0
    11a6:	da06      	bge.n	11b6 <_i2c_master_set_config+0x36a>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    11a8:	233b      	movs	r3, #59	; 0x3b
    11aa:	2208      	movs	r2, #8
    11ac:	4694      	mov	ip, r2
    11ae:	44bc      	add	ip, r7
    11b0:	4463      	add	r3, ip
    11b2:	2240      	movs	r2, #64	; 0x40
    11b4:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    11b6:	233b      	movs	r3, #59	; 0x3b
    11b8:	2208      	movs	r2, #8
    11ba:	4694      	mov	ip, r2
    11bc:	44bc      	add	ip, r7
    11be:	4463      	add	r3, ip
    11c0:	781b      	ldrb	r3, [r3, #0]
    11c2:	2b40      	cmp	r3, #64	; 0x40
    11c4:	d00e      	beq.n	11e4 <_i2c_master_set_config+0x398>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    11c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11c8:	22ff      	movs	r2, #255	; 0xff
    11ca:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    11cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    11ce:	041b      	lsls	r3, r3, #16
    11d0:	0019      	movs	r1, r3
    11d2:	23ff      	movs	r3, #255	; 0xff
    11d4:	041b      	lsls	r3, r3, #16
    11d6:	400b      	ands	r3, r1
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    11d8:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    11da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    11dc:	0612      	lsls	r2, r2, #24
    11de:	431a      	orrs	r2, r3
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    11e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11e2:	60da      	str	r2, [r3, #12]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
	}

	return tmp_status_code;
    11e4:	233b      	movs	r3, #59	; 0x3b
    11e6:	2208      	movs	r2, #8
    11e8:	4694      	mov	ip, r2
    11ea:	44bc      	add	ip, r7
    11ec:	4463      	add	r3, ip
    11ee:	781b      	ldrb	r3, [r3, #0]
}
    11f0:	0018      	movs	r0, r3
    11f2:	46bd      	mov	sp, r7
    11f4:	b015      	add	sp, #84	; 0x54
    11f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11f8:	00001ad1 	.word	0x00001ad1
    11fc:	00000dbd 	.word	0x00000dbd
    1200:	00001915 	.word	0x00001915
    1204:	00005d39 	.word	0x00005d39
    1208:	00000de5 	.word	0x00000de5
    120c:	00005b71 	.word	0x00005b71
    1210:	000081a5 	.word	0x000081a5
    1214:	0000759d 	.word	0x0000759d
    1218:	e826d695 	.word	0xe826d695
    121c:	3e112e0b 	.word	0x3e112e0b
    1220:	00006919 	.word	0x00006919
    1224:	40240000 	.word	0x40240000
    1228:	00007a91 	.word	0x00007a91
    122c:	3ff00000 	.word	0x3ff00000
    1230:	00006f71 	.word	0x00006f71
    1234:	00008139 	.word	0x00008139
    1238:	40080000 	.word	0x40080000
    123c:	00006415 	.word	0x00006415

00001240 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1240:	b580      	push	{r7, lr}
    1242:	b08a      	sub	sp, #40	; 0x28
    1244:	af00      	add	r7, sp, #0
    1246:	60f8      	str	r0, [r7, #12]
    1248:	60b9      	str	r1, [r7, #8]
    124a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    124c:	68fb      	ldr	r3, [r7, #12]
    124e:	68ba      	ldr	r2, [r7, #8]
    1250:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1252:	68fb      	ldr	r3, [r7, #12]
    1254:	681b      	ldr	r3, [r3, #0]
    1256:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1258:	68fb      	ldr	r3, [r7, #12]
    125a:	681b      	ldr	r3, [r3, #0]
    125c:	0018      	movs	r0, r3
    125e:	4b25      	ldr	r3, [pc, #148]	; (12f4 <i2c_master_init+0xb4>)
    1260:	4798      	blx	r3
    1262:	0003      	movs	r3, r0
    1264:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1266:	6a3b      	ldr	r3, [r7, #32]
    1268:	3302      	adds	r3, #2
    126a:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    126c:	6a3b      	ldr	r3, [r7, #32]
    126e:	3314      	adds	r3, #20
    1270:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1272:	2201      	movs	r2, #1
    1274:	69fb      	ldr	r3, [r7, #28]
    1276:	409a      	lsls	r2, r3
    1278:	0013      	movs	r3, r2
    127a:	0019      	movs	r1, r3
    127c:	2002      	movs	r0, #2
    127e:	4b1e      	ldr	r3, [pc, #120]	; (12f8 <i2c_master_init+0xb8>)
    1280:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1282:	2314      	movs	r3, #20
    1284:	18fb      	adds	r3, r7, r3
    1286:	0018      	movs	r0, r3
    1288:	4b1c      	ldr	r3, [pc, #112]	; (12fc <i2c_master_init+0xbc>)
    128a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    128c:	687b      	ldr	r3, [r7, #4]
    128e:	7b1a      	ldrb	r2, [r3, #12]
    1290:	2314      	movs	r3, #20
    1292:	18fb      	adds	r3, r7, r3
    1294:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1296:	69bb      	ldr	r3, [r7, #24]
    1298:	b2db      	uxtb	r3, r3
    129a:	2214      	movs	r2, #20
    129c:	18ba      	adds	r2, r7, r2
    129e:	0011      	movs	r1, r2
    12a0:	0018      	movs	r0, r3
    12a2:	4b17      	ldr	r3, [pc, #92]	; (1300 <i2c_master_init+0xc0>)
    12a4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    12a6:	69bb      	ldr	r3, [r7, #24]
    12a8:	b2db      	uxtb	r3, r3
    12aa:	0018      	movs	r0, r3
    12ac:	4b15      	ldr	r3, [pc, #84]	; (1304 <i2c_master_init+0xc4>)
    12ae:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    12b0:	687b      	ldr	r3, [r7, #4]
    12b2:	7b1b      	ldrb	r3, [r3, #12]
    12b4:	2100      	movs	r1, #0
    12b6:	0018      	movs	r0, r3
    12b8:	4b13      	ldr	r3, [pc, #76]	; (1308 <i2c_master_init+0xc8>)
    12ba:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    12bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12be:	681b      	ldr	r3, [r3, #0]
    12c0:	2202      	movs	r2, #2
    12c2:	4013      	ands	r3, r2
    12c4:	d001      	beq.n	12ca <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    12c6:	231c      	movs	r3, #28
    12c8:	e010      	b.n	12ec <i2c_master_init+0xac>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    12ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12cc:	681b      	ldr	r3, [r3, #0]
    12ce:	2201      	movs	r2, #1
    12d0:	4013      	ands	r3, r2
    12d2:	d001      	beq.n	12d8 <i2c_master_init+0x98>
		return STATUS_BUSY;
    12d4:	2305      	movs	r3, #5
    12d6:	e009      	b.n	12ec <i2c_master_init+0xac>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    12d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12da:	2214      	movs	r2, #20
    12dc:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    12de:	687a      	ldr	r2, [r7, #4]
    12e0:	68fb      	ldr	r3, [r7, #12]
    12e2:	0011      	movs	r1, r2
    12e4:	0018      	movs	r0, r3
    12e6:	4b09      	ldr	r3, [pc, #36]	; (130c <i2c_master_init+0xcc>)
    12e8:	4798      	blx	r3
    12ea:	0003      	movs	r3, r0
}
    12ec:	0018      	movs	r0, r3
    12ee:	46bd      	mov	sp, r7
    12f0:	b00a      	add	sp, #40	; 0x28
    12f2:	bd80      	pop	{r7, pc}
    12f4:	00001ad1 	.word	0x00001ad1
    12f8:	00000d61 	.word	0x00000d61
    12fc:	00000d49 	.word	0x00000d49
    1300:	00005a05 	.word	0x00005a05
    1304:	00005a49 	.word	0x00005a49
    1308:	00001889 	.word	0x00001889
    130c:	00000e4d 	.word	0x00000e4d

00001310 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    1310:	b580      	push	{r7, lr}
    1312:	b084      	sub	sp, #16
    1314:	af00      	add	r7, sp, #0
    1316:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	681b      	ldr	r3, [r3, #0]
    131c:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    131e:	68fb      	ldr	r3, [r7, #12]
    1320:	7e1b      	ldrb	r3, [r3, #24]
    1322:	b2db      	uxtb	r3, r3
    1324:	001a      	movs	r2, r3
    1326:	2302      	movs	r3, #2
    1328:	4013      	ands	r3, r2
    132a:	d00b      	beq.n	1344 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    132c:	68fb      	ldr	r3, [r7, #12]
    132e:	2202      	movs	r2, #2
    1330:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1332:	68fb      	ldr	r3, [r7, #12]
    1334:	8b5b      	ldrh	r3, [r3, #26]
    1336:	b29b      	uxth	r3, r3
    1338:	001a      	movs	r2, r3
    133a:	2302      	movs	r3, #2
    133c:	4013      	ands	r3, r2
    133e:	d011      	beq.n	1364 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1340:	2341      	movs	r3, #65	; 0x41
    1342:	e010      	b.n	1366 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1344:	68fb      	ldr	r3, [r7, #12]
    1346:	8b5b      	ldrh	r3, [r3, #26]
    1348:	b29b      	uxth	r3, r3
    134a:	001a      	movs	r2, r3
    134c:	2304      	movs	r3, #4
    134e:	4013      	ands	r3, r2
    1350:	d008      	beq.n	1364 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1352:	68fb      	ldr	r3, [r7, #12]
    1354:	685b      	ldr	r3, [r3, #4]
    1356:	22c0      	movs	r2, #192	; 0xc0
    1358:	0292      	lsls	r2, r2, #10
    135a:	431a      	orrs	r2, r3
    135c:	68fb      	ldr	r3, [r7, #12]
    135e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    1360:	2318      	movs	r3, #24
    1362:	e000      	b.n	1366 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    1364:	2300      	movs	r3, #0
}
    1366:	0018      	movs	r0, r3
    1368:	46bd      	mov	sp, r7
    136a:	b004      	add	sp, #16
    136c:	bd80      	pop	{r7, pc}
    136e:	46c0      	nop			; (mov r8, r8)

00001370 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1370:	b580      	push	{r7, lr}
    1372:	b084      	sub	sp, #16
    1374:	af00      	add	r7, sp, #0
    1376:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1378:	687b      	ldr	r3, [r7, #4]
    137a:	681b      	ldr	r3, [r3, #0]
    137c:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    137e:	230e      	movs	r3, #14
    1380:	18fb      	adds	r3, r7, r3
    1382:	2200      	movs	r2, #0
    1384:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1386:	e00f      	b.n	13a8 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    1388:	230e      	movs	r3, #14
    138a:	18fb      	adds	r3, r7, r3
    138c:	220e      	movs	r2, #14
    138e:	18ba      	adds	r2, r7, r2
    1390:	8812      	ldrh	r2, [r2, #0]
    1392:	3201      	adds	r2, #1
    1394:	801a      	strh	r2, [r3, #0]
    1396:	687b      	ldr	r3, [r7, #4]
    1398:	891b      	ldrh	r3, [r3, #8]
    139a:	220e      	movs	r2, #14
    139c:	18ba      	adds	r2, r7, r2
    139e:	8812      	ldrh	r2, [r2, #0]
    13a0:	429a      	cmp	r2, r3
    13a2:	d301      	bcc.n	13a8 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    13a4:	2312      	movs	r3, #18
    13a6:	e00e      	b.n	13c6 <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    13a8:	68bb      	ldr	r3, [r7, #8]
    13aa:	7e1b      	ldrb	r3, [r3, #24]
    13ac:	b2db      	uxtb	r3, r3
    13ae:	001a      	movs	r2, r3
    13b0:	2301      	movs	r3, #1
    13b2:	4013      	ands	r3, r2
    13b4:	d106      	bne.n	13c4 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    13b6:	68bb      	ldr	r3, [r7, #8]
    13b8:	7e1b      	ldrb	r3, [r3, #24]
    13ba:	b2db      	uxtb	r3, r3
    13bc:	001a      	movs	r2, r3
    13be:	2302      	movs	r3, #2
    13c0:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    13c2:	d0e1      	beq.n	1388 <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    13c4:	2300      	movs	r3, #0
}
    13c6:	0018      	movs	r0, r3
    13c8:	46bd      	mov	sp, r7
    13ca:	b004      	add	sp, #16
    13cc:	bd80      	pop	{r7, pc}
    13ce:	46c0      	nop			; (mov r8, r8)

000013d0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    13d0:	b590      	push	{r4, r7, lr}
    13d2:	b085      	sub	sp, #20
    13d4:	af00      	add	r7, sp, #0
    13d6:	6078      	str	r0, [r7, #4]
    13d8:	000a      	movs	r2, r1
    13da:	1cfb      	adds	r3, r7, #3
    13dc:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13de:	687b      	ldr	r3, [r7, #4]
    13e0:	681b      	ldr	r3, [r3, #0]
    13e2:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    13e4:	68fb      	ldr	r3, [r7, #12]
    13e6:	685b      	ldr	r3, [r3, #4]
    13e8:	2280      	movs	r2, #128	; 0x80
    13ea:	02d2      	lsls	r2, r2, #11
    13ec:	431a      	orrs	r2, r3
    13ee:	68fb      	ldr	r3, [r7, #12]
    13f0:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    13f2:	1cfb      	adds	r3, r7, #3
    13f4:	781a      	ldrb	r2, [r3, #0]
    13f6:	68fb      	ldr	r3, [r7, #12]
    13f8:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    13fa:	230b      	movs	r3, #11
    13fc:	18fc      	adds	r4, r7, r3
    13fe:	687b      	ldr	r3, [r7, #4]
    1400:	0018      	movs	r0, r3
    1402:	4b07      	ldr	r3, [pc, #28]	; (1420 <_i2c_master_send_hs_master_code+0x50>)
    1404:	4798      	blx	r3
    1406:	0003      	movs	r3, r0
    1408:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    140a:	68fb      	ldr	r3, [r7, #12]
    140c:	2201      	movs	r2, #1
    140e:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    1410:	230b      	movs	r3, #11
    1412:	18fb      	adds	r3, r7, r3
    1414:	781b      	ldrb	r3, [r3, #0]
}
    1416:	0018      	movs	r0, r3
    1418:	46bd      	mov	sp, r7
    141a:	b005      	add	sp, #20
    141c:	bd90      	pop	{r4, r7, pc}
    141e:	46c0      	nop			; (mov r8, r8)
    1420:	00001371 	.word	0x00001371

00001424 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1424:	b590      	push	{r4, r7, lr}
    1426:	b087      	sub	sp, #28
    1428:	af00      	add	r7, sp, #0
    142a:	6078      	str	r0, [r7, #4]
    142c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    142e:	687b      	ldr	r3, [r7, #4]
    1430:	681b      	ldr	r3, [r3, #0]
    1432:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1434:	2314      	movs	r3, #20
    1436:	18fb      	adds	r3, r7, r3
    1438:	683a      	ldr	r2, [r7, #0]
    143a:	8852      	ldrh	r2, [r2, #2]
    143c:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    143e:	2312      	movs	r3, #18
    1440:	18fb      	adds	r3, r7, r3
    1442:	2200      	movs	r2, #0
    1444:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1446:	68fb      	ldr	r3, [r7, #12]
    1448:	681b      	ldr	r3, [r3, #0]
    144a:	011b      	lsls	r3, r3, #4
    144c:	0fdb      	lsrs	r3, r3, #31
    144e:	b2db      	uxtb	r3, r3
    1450:	001a      	movs	r2, r3
    1452:	230b      	movs	r3, #11
    1454:	18fb      	adds	r3, r7, r3
    1456:	1e51      	subs	r1, r2, #1
    1458:	418a      	sbcs	r2, r1
    145a:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    145c:	683b      	ldr	r3, [r7, #0]
    145e:	7a5b      	ldrb	r3, [r3, #9]
    1460:	2b00      	cmp	r3, #0
    1462:	d006      	beq.n	1472 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1464:	683b      	ldr	r3, [r7, #0]
    1466:	7a9a      	ldrb	r2, [r3, #10]
    1468:	687b      	ldr	r3, [r7, #4]
    146a:	0011      	movs	r1, r2
    146c:	0018      	movs	r0, r3
    146e:	4b85      	ldr	r3, [pc, #532]	; (1684 <_i2c_master_read_packet+0x260>)
    1470:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1472:	68fb      	ldr	r3, [r7, #12]
    1474:	685b      	ldr	r3, [r3, #4]
    1476:	4a84      	ldr	r2, [pc, #528]	; (1688 <_i2c_master_read_packet+0x264>)
    1478:	401a      	ands	r2, r3
    147a:	68fb      	ldr	r3, [r7, #12]
    147c:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    147e:	683b      	ldr	r3, [r7, #0]
    1480:	7a1b      	ldrb	r3, [r3, #8]
    1482:	2b00      	cmp	r3, #0
    1484:	d042      	beq.n	150c <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1486:	683b      	ldr	r3, [r7, #0]
    1488:	881b      	ldrh	r3, [r3, #0]
    148a:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    148c:	683b      	ldr	r3, [r7, #0]
    148e:	7a5b      	ldrb	r3, [r3, #9]
    1490:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1492:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1494:	001a      	movs	r2, r3
    1496:	2380      	movs	r3, #128	; 0x80
    1498:	021b      	lsls	r3, r3, #8
    149a:	431a      	orrs	r2, r3
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    149c:	68fb      	ldr	r3, [r7, #12]
    149e:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    14a0:	2317      	movs	r3, #23
    14a2:	18fc      	adds	r4, r7, r3
    14a4:	687b      	ldr	r3, [r7, #4]
    14a6:	0018      	movs	r0, r3
    14a8:	4b78      	ldr	r3, [pc, #480]	; (168c <_i2c_master_read_packet+0x268>)
    14aa:	4798      	blx	r3
    14ac:	0003      	movs	r3, r0
    14ae:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    14b0:	68fb      	ldr	r3, [r7, #12]
    14b2:	685b      	ldr	r3, [r3, #4]
    14b4:	4a74      	ldr	r2, [pc, #464]	; (1688 <_i2c_master_read_packet+0x264>)
    14b6:	401a      	ands	r2, r3
    14b8:	68fb      	ldr	r3, [r7, #12]
    14ba:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    14bc:	2317      	movs	r3, #23
    14be:	18fb      	adds	r3, r7, r3
    14c0:	781b      	ldrb	r3, [r3, #0]
    14c2:	2b00      	cmp	r3, #0
    14c4:	d107      	bne.n	14d6 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    14c6:	2317      	movs	r3, #23
    14c8:	18fc      	adds	r4, r7, r3
    14ca:	687b      	ldr	r3, [r7, #4]
    14cc:	0018      	movs	r0, r3
    14ce:	4b70      	ldr	r3, [pc, #448]	; (1690 <_i2c_master_read_packet+0x26c>)
    14d0:	4798      	blx	r3
    14d2:	0003      	movs	r3, r0
    14d4:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    14d6:	2317      	movs	r3, #23
    14d8:	18fb      	adds	r3, r7, r3
    14da:	781b      	ldrb	r3, [r3, #0]
    14dc:	2b00      	cmp	r3, #0
    14de:	d111      	bne.n	1504 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    14e0:	683b      	ldr	r3, [r7, #0]
    14e2:	881b      	ldrh	r3, [r3, #0]
    14e4:	0a1b      	lsrs	r3, r3, #8
    14e6:	b29b      	uxth	r3, r3
    14e8:	2278      	movs	r2, #120	; 0x78
    14ea:	4313      	orrs	r3, r2
    14ec:	b29b      	uxth	r3, r3
    14ee:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    14f0:	683b      	ldr	r3, [r7, #0]
    14f2:	7a5b      	ldrb	r3, [r3, #9]
    14f4:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    14f6:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    14f8:	2201      	movs	r2, #1
    14fa:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    14fc:	001a      	movs	r2, r3
    14fe:	68fb      	ldr	r3, [r7, #12]
    1500:	625a      	str	r2, [r3, #36]	; 0x24
    1502:	e00f      	b.n	1524 <_i2c_master_read_packet+0x100>
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    1504:	2317      	movs	r3, #23
    1506:	18fb      	adds	r3, r7, r3
    1508:	781b      	ldrb	r3, [r3, #0]
    150a:	e0b6      	b.n	167a <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    150c:	683b      	ldr	r3, [r7, #0]
    150e:	881b      	ldrh	r3, [r3, #0]
    1510:	005b      	lsls	r3, r3, #1
    1512:	2201      	movs	r2, #1
    1514:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1516:	683b      	ldr	r3, [r7, #0]
    1518:	7a5b      	ldrb	r3, [r3, #9]
    151a:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    151c:	4313      	orrs	r3, r2
    151e:	001a      	movs	r2, r3
    1520:	68fb      	ldr	r3, [r7, #12]
    1522:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1524:	2317      	movs	r3, #23
    1526:	18fc      	adds	r4, r7, r3
    1528:	687b      	ldr	r3, [r7, #4]
    152a:	0018      	movs	r0, r3
    152c:	4b57      	ldr	r3, [pc, #348]	; (168c <_i2c_master_read_packet+0x268>)
    152e:	4798      	blx	r3
    1530:	0003      	movs	r3, r0
    1532:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1534:	230b      	movs	r3, #11
    1536:	18fb      	adds	r3, r7, r3
    1538:	781b      	ldrb	r3, [r3, #0]
    153a:	2b00      	cmp	r3, #0
    153c:	d00b      	beq.n	1556 <_i2c_master_read_packet+0x132>
    153e:	683b      	ldr	r3, [r7, #0]
    1540:	885b      	ldrh	r3, [r3, #2]
    1542:	2b01      	cmp	r3, #1
    1544:	d107      	bne.n	1556 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1546:	68fb      	ldr	r3, [r7, #12]
    1548:	685b      	ldr	r3, [r3, #4]
    154a:	2280      	movs	r2, #128	; 0x80
    154c:	02d2      	lsls	r2, r2, #11
    154e:	431a      	orrs	r2, r3
    1550:	68fb      	ldr	r3, [r7, #12]
    1552:	605a      	str	r2, [r3, #4]
    1554:	e005      	b.n	1562 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    1556:	68fb      	ldr	r3, [r7, #12]
    1558:	685b      	ldr	r3, [r3, #4]
    155a:	4a4b      	ldr	r2, [pc, #300]	; (1688 <_i2c_master_read_packet+0x264>)
    155c:	401a      	ands	r2, r3
    155e:	68fb      	ldr	r3, [r7, #12]
    1560:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1562:	2317      	movs	r3, #23
    1564:	18fb      	adds	r3, r7, r3
    1566:	781b      	ldrb	r3, [r3, #0]
    1568:	2b00      	cmp	r3, #0
    156a:	d107      	bne.n	157c <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    156c:	2317      	movs	r3, #23
    156e:	18fc      	adds	r4, r7, r3
    1570:	687b      	ldr	r3, [r7, #4]
    1572:	0018      	movs	r0, r3
    1574:	4b46      	ldr	r3, [pc, #280]	; (1690 <_i2c_master_read_packet+0x26c>)
    1576:	4798      	blx	r3
    1578:	0003      	movs	r3, r0
    157a:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    157c:	2317      	movs	r3, #23
    157e:	18fb      	adds	r3, r7, r3
    1580:	781b      	ldrb	r3, [r3, #0]
    1582:	2b00      	cmp	r3, #0
    1584:	d000      	beq.n	1588 <_i2c_master_read_packet+0x164>
    1586:	e075      	b.n	1674 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    1588:	e04b      	b.n	1622 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    158a:	68fb      	ldr	r3, [r7, #12]
    158c:	8b5b      	ldrh	r3, [r3, #26]
    158e:	b29b      	uxth	r3, r3
    1590:	001a      	movs	r2, r3
    1592:	2320      	movs	r3, #32
    1594:	4013      	ands	r3, r2
    1596:	d101      	bne.n	159c <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    1598:	2341      	movs	r3, #65	; 0x41
    159a:	e06e      	b.n	167a <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    159c:	687b      	ldr	r3, [r7, #4]
    159e:	7adb      	ldrb	r3, [r3, #11]
    15a0:	2b00      	cmp	r3, #0
    15a2:	d01e      	beq.n	15e2 <_i2c_master_read_packet+0x1be>
    15a4:	230b      	movs	r3, #11
    15a6:	18fb      	adds	r3, r7, r3
    15a8:	781b      	ldrb	r3, [r3, #0]
    15aa:	2201      	movs	r2, #1
    15ac:	4053      	eors	r3, r2
    15ae:	b2db      	uxtb	r3, r3
    15b0:	2b00      	cmp	r3, #0
    15b2:	d004      	beq.n	15be <_i2c_master_read_packet+0x19a>
    15b4:	2314      	movs	r3, #20
    15b6:	18fb      	adds	r3, r7, r3
    15b8:	881b      	ldrh	r3, [r3, #0]
    15ba:	2b00      	cmp	r3, #0
    15bc:	d009      	beq.n	15d2 <_i2c_master_read_packet+0x1ae>
    15be:	230b      	movs	r3, #11
    15c0:	18fb      	adds	r3, r7, r3
    15c2:	781b      	ldrb	r3, [r3, #0]
    15c4:	2b00      	cmp	r3, #0
    15c6:	d00c      	beq.n	15e2 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    15c8:	2314      	movs	r3, #20
    15ca:	18fb      	adds	r3, r7, r3
    15cc:	881b      	ldrh	r3, [r3, #0]
    15ce:	2b01      	cmp	r3, #1
    15d0:	d107      	bne.n	15e2 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    15d2:	68fb      	ldr	r3, [r7, #12]
    15d4:	685b      	ldr	r3, [r3, #4]
    15d6:	2280      	movs	r2, #128	; 0x80
    15d8:	02d2      	lsls	r2, r2, #11
    15da:	431a      	orrs	r2, r3
    15dc:	68fb      	ldr	r3, [r7, #12]
    15de:	605a      	str	r2, [r3, #4]
    15e0:	e01a      	b.n	1618 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    15e2:	687b      	ldr	r3, [r7, #4]
    15e4:	0018      	movs	r0, r3
    15e6:	4b2b      	ldr	r3, [pc, #172]	; (1694 <_i2c_master_read_packet+0x270>)
    15e8:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    15ea:	683b      	ldr	r3, [r7, #0]
    15ec:	685a      	ldr	r2, [r3, #4]
    15ee:	2312      	movs	r3, #18
    15f0:	18fb      	adds	r3, r7, r3
    15f2:	881b      	ldrh	r3, [r3, #0]
    15f4:	2112      	movs	r1, #18
    15f6:	1879      	adds	r1, r7, r1
    15f8:	1c58      	adds	r0, r3, #1
    15fa:	8008      	strh	r0, [r1, #0]
    15fc:	18d3      	adds	r3, r2, r3
    15fe:	68fa      	ldr	r2, [r7, #12]
    1600:	2128      	movs	r1, #40	; 0x28
    1602:	5c52      	ldrb	r2, [r2, r1]
    1604:	b2d2      	uxtb	r2, r2
    1606:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    1608:	2317      	movs	r3, #23
    160a:	18fc      	adds	r4, r7, r3
    160c:	687b      	ldr	r3, [r7, #4]
    160e:	0018      	movs	r0, r3
    1610:	4b1e      	ldr	r3, [pc, #120]	; (168c <_i2c_master_read_packet+0x268>)
    1612:	4798      	blx	r3
    1614:	0003      	movs	r3, r0
    1616:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1618:	2317      	movs	r3, #23
    161a:	18fb      	adds	r3, r7, r3
    161c:	781b      	ldrb	r3, [r3, #0]
    161e:	2b00      	cmp	r3, #0
    1620:	d109      	bne.n	1636 <_i2c_master_read_packet+0x212>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
    1622:	2314      	movs	r3, #20
    1624:	18fb      	adds	r3, r7, r3
    1626:	881b      	ldrh	r3, [r3, #0]
    1628:	2214      	movs	r2, #20
    162a:	18ba      	adds	r2, r7, r2
    162c:	1e59      	subs	r1, r3, #1
    162e:	8011      	strh	r1, [r2, #0]
    1630:	2b00      	cmp	r3, #0
    1632:	d1aa      	bne.n	158a <_i2c_master_read_packet+0x166>
    1634:	e000      	b.n	1638 <_i2c_master_read_packet+0x214>
				tmp_status = _i2c_master_wait_for_bus(module);
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    1636:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    1638:	687b      	ldr	r3, [r7, #4]
    163a:	7a9b      	ldrb	r3, [r3, #10]
    163c:	2b00      	cmp	r3, #0
    163e:	d00a      	beq.n	1656 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    1640:	687b      	ldr	r3, [r7, #4]
    1642:	0018      	movs	r0, r3
    1644:	4b13      	ldr	r3, [pc, #76]	; (1694 <_i2c_master_read_packet+0x270>)
    1646:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1648:	68fb      	ldr	r3, [r7, #12]
    164a:	685b      	ldr	r3, [r3, #4]
    164c:	22c0      	movs	r2, #192	; 0xc0
    164e:	0292      	lsls	r2, r2, #10
    1650:	431a      	orrs	r2, r3
    1652:	68fb      	ldr	r3, [r7, #12]
    1654:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    1656:	687b      	ldr	r3, [r7, #4]
    1658:	0018      	movs	r0, r3
    165a:	4b0e      	ldr	r3, [pc, #56]	; (1694 <_i2c_master_read_packet+0x270>)
    165c:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    165e:	683b      	ldr	r3, [r7, #0]
    1660:	685a      	ldr	r2, [r3, #4]
    1662:	2312      	movs	r3, #18
    1664:	18fb      	adds	r3, r7, r3
    1666:	881b      	ldrh	r3, [r3, #0]
    1668:	18d3      	adds	r3, r2, r3
    166a:	68fa      	ldr	r2, [r7, #12]
    166c:	2128      	movs	r1, #40	; 0x28
    166e:	5c52      	ldrb	r2, [r2, r1]
    1670:	b2d2      	uxtb	r2, r2
    1672:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    1674:	2317      	movs	r3, #23
    1676:	18fb      	adds	r3, r7, r3
    1678:	781b      	ldrb	r3, [r3, #0]
}
    167a:	0018      	movs	r0, r3
    167c:	46bd      	mov	sp, r7
    167e:	b007      	add	sp, #28
    1680:	bd90      	pop	{r4, r7, pc}
    1682:	46c0      	nop			; (mov r8, r8)
    1684:	000013d1 	.word	0x000013d1
    1688:	fffbffff 	.word	0xfffbffff
    168c:	00001371 	.word	0x00001371
    1690:	00001311 	.word	0x00001311
    1694:	00000e29 	.word	0x00000e29

00001698 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1698:	b580      	push	{r7, lr}
    169a:	b082      	sub	sp, #8
    169c:	af00      	add	r7, sp, #0
    169e:	6078      	str	r0, [r7, #4]
    16a0:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    16a2:	687b      	ldr	r3, [r7, #4]
    16a4:	2201      	movs	r2, #1
    16a6:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	2201      	movs	r2, #1
    16ac:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    16ae:	683a      	ldr	r2, [r7, #0]
    16b0:	687b      	ldr	r3, [r7, #4]
    16b2:	0011      	movs	r1, r2
    16b4:	0018      	movs	r0, r3
    16b6:	4b03      	ldr	r3, [pc, #12]	; (16c4 <i2c_master_read_packet_wait+0x2c>)
    16b8:	4798      	blx	r3
    16ba:	0003      	movs	r3, r0
}
    16bc:	0018      	movs	r0, r3
    16be:	46bd      	mov	sp, r7
    16c0:	b002      	add	sp, #8
    16c2:	bd80      	pop	{r7, pc}
    16c4:	00001425 	.word	0x00001425

000016c8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    16c8:	b590      	push	{r4, r7, lr}
    16ca:	b087      	sub	sp, #28
    16cc:	af00      	add	r7, sp, #0
    16ce:	6078      	str	r0, [r7, #4]
    16d0:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16d2:	687b      	ldr	r3, [r7, #4]
    16d4:	681b      	ldr	r3, [r3, #0]
    16d6:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    16d8:	2314      	movs	r3, #20
    16da:	18fb      	adds	r3, r7, r3
    16dc:	683a      	ldr	r2, [r7, #0]
    16de:	8852      	ldrh	r2, [r2, #2]
    16e0:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	0018      	movs	r0, r3
    16e6:	4b51      	ldr	r3, [pc, #324]	; (182c <_i2c_master_write_packet+0x164>)
    16e8:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    16ea:	683b      	ldr	r3, [r7, #0]
    16ec:	7a5b      	ldrb	r3, [r3, #9]
    16ee:	2b00      	cmp	r3, #0
    16f0:	d006      	beq.n	1700 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    16f2:	683b      	ldr	r3, [r7, #0]
    16f4:	7a9a      	ldrb	r2, [r3, #10]
    16f6:	687b      	ldr	r3, [r7, #4]
    16f8:	0011      	movs	r1, r2
    16fa:	0018      	movs	r0, r3
    16fc:	4b4c      	ldr	r3, [pc, #304]	; (1830 <_i2c_master_write_packet+0x168>)
    16fe:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1700:	68fb      	ldr	r3, [r7, #12]
    1702:	685b      	ldr	r3, [r3, #4]
    1704:	4a4b      	ldr	r2, [pc, #300]	; (1834 <_i2c_master_write_packet+0x16c>)
    1706:	401a      	ands	r2, r3
    1708:	68fb      	ldr	r3, [r7, #12]
    170a:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    170c:	683b      	ldr	r3, [r7, #0]
    170e:	7a1b      	ldrb	r3, [r3, #8]
    1710:	2b00      	cmp	r3, #0
    1712:	d00d      	beq.n	1730 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1714:	683b      	ldr	r3, [r7, #0]
    1716:	881b      	ldrh	r3, [r3, #0]
    1718:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    171a:	683b      	ldr	r3, [r7, #0]
    171c:	7a5b      	ldrb	r3, [r3, #9]
    171e:	039b      	lsls	r3, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1720:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1722:	001a      	movs	r2, r3
    1724:	2380      	movs	r3, #128	; 0x80
    1726:	021b      	lsls	r3, r3, #8
    1728:	431a      	orrs	r2, r3
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    172a:	68fb      	ldr	r3, [r7, #12]
    172c:	625a      	str	r2, [r3, #36]	; 0x24
    172e:	e009      	b.n	1744 <_i2c_master_write_packet+0x7c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1730:	683b      	ldr	r3, [r7, #0]
    1732:	881b      	ldrh	r3, [r3, #0]
    1734:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1736:	683b      	ldr	r3, [r7, #0]
    1738:	7a5b      	ldrb	r3, [r3, #9]
    173a:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    173c:	4313      	orrs	r3, r2
    173e:	001a      	movs	r2, r3
    1740:	68fb      	ldr	r3, [r7, #12]
    1742:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1744:	2317      	movs	r3, #23
    1746:	18fc      	adds	r4, r7, r3
    1748:	687b      	ldr	r3, [r7, #4]
    174a:	0018      	movs	r0, r3
    174c:	4b3a      	ldr	r3, [pc, #232]	; (1838 <_i2c_master_write_packet+0x170>)
    174e:	4798      	blx	r3
    1750:	0003      	movs	r3, r0
    1752:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1754:	2317      	movs	r3, #23
    1756:	18fb      	adds	r3, r7, r3
    1758:	781b      	ldrb	r3, [r3, #0]
    175a:	2b00      	cmp	r3, #0
    175c:	d107      	bne.n	176e <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    175e:	2317      	movs	r3, #23
    1760:	18fc      	adds	r4, r7, r3
    1762:	687b      	ldr	r3, [r7, #4]
    1764:	0018      	movs	r0, r3
    1766:	4b35      	ldr	r3, [pc, #212]	; (183c <_i2c_master_write_packet+0x174>)
    1768:	4798      	blx	r3
    176a:	0003      	movs	r3, r0
    176c:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    176e:	2317      	movs	r3, #23
    1770:	18fb      	adds	r3, r7, r3
    1772:	781b      	ldrb	r3, [r3, #0]
    1774:	2b00      	cmp	r3, #0
    1776:	d152      	bne.n	181e <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    1778:	2312      	movs	r3, #18
    177a:	18fb      	adds	r3, r7, r3
    177c:	2200      	movs	r2, #0
    177e:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    1780:	e033      	b.n	17ea <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1782:	68fb      	ldr	r3, [r7, #12]
    1784:	8b5b      	ldrh	r3, [r3, #26]
    1786:	b29b      	uxth	r3, r3
    1788:	001a      	movs	r2, r3
    178a:	2320      	movs	r3, #32
    178c:	4013      	ands	r3, r2
    178e:	d101      	bne.n	1794 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    1790:	2341      	movs	r3, #65	; 0x41
    1792:	e047      	b.n	1824 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    1794:	687b      	ldr	r3, [r7, #4]
    1796:	0018      	movs	r0, r3
    1798:	4b24      	ldr	r3, [pc, #144]	; (182c <_i2c_master_write_packet+0x164>)
    179a:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	685a      	ldr	r2, [r3, #4]
    17a0:	2312      	movs	r3, #18
    17a2:	18fb      	adds	r3, r7, r3
    17a4:	881b      	ldrh	r3, [r3, #0]
    17a6:	2112      	movs	r1, #18
    17a8:	1879      	adds	r1, r7, r1
    17aa:	1c58      	adds	r0, r3, #1
    17ac:	8008      	strh	r0, [r1, #0]
    17ae:	18d3      	adds	r3, r2, r3
    17b0:	7819      	ldrb	r1, [r3, #0]
    17b2:	68fb      	ldr	r3, [r7, #12]
    17b4:	2228      	movs	r2, #40	; 0x28
    17b6:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    17b8:	2317      	movs	r3, #23
    17ba:	18fc      	adds	r4, r7, r3
    17bc:	687b      	ldr	r3, [r7, #4]
    17be:	0018      	movs	r0, r3
    17c0:	4b1d      	ldr	r3, [pc, #116]	; (1838 <_i2c_master_write_packet+0x170>)
    17c2:	4798      	blx	r3
    17c4:	0003      	movs	r3, r0
    17c6:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    17c8:	2317      	movs	r3, #23
    17ca:	18fb      	adds	r3, r7, r3
    17cc:	781b      	ldrb	r3, [r3, #0]
    17ce:	2b00      	cmp	r3, #0
    17d0:	d115      	bne.n	17fe <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    17d2:	68fb      	ldr	r3, [r7, #12]
    17d4:	8b5b      	ldrh	r3, [r3, #26]
    17d6:	b29b      	uxth	r3, r3
    17d8:	001a      	movs	r2, r3
    17da:	2304      	movs	r3, #4
    17dc:	4013      	ands	r3, r2
    17de:	d004      	beq.n	17ea <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    17e0:	2317      	movs	r3, #23
    17e2:	18fb      	adds	r3, r7, r3
    17e4:	221e      	movs	r2, #30
    17e6:	701a      	strb	r2, [r3, #0]
				break;
    17e8:	e00a      	b.n	1800 <_i2c_master_write_packet+0x138>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    17ea:	2314      	movs	r3, #20
    17ec:	18fb      	adds	r3, r7, r3
    17ee:	881b      	ldrh	r3, [r3, #0]
    17f0:	2214      	movs	r2, #20
    17f2:	18ba      	adds	r2, r7, r2
    17f4:	1e59      	subs	r1, r3, #1
    17f6:	8011      	strh	r1, [r2, #0]
    17f8:	2b00      	cmp	r3, #0
    17fa:	d1c2      	bne.n	1782 <_i2c_master_write_packet+0xba>
    17fc:	e000      	b.n	1800 <_i2c_master_write_packet+0x138>
			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    17fe:	46c0      	nop			; (mov r8, r8)
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
    1800:	687b      	ldr	r3, [r7, #4]
    1802:	7a9b      	ldrb	r3, [r3, #10]
    1804:	2b00      	cmp	r3, #0
    1806:	d00a      	beq.n	181e <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    1808:	687b      	ldr	r3, [r7, #4]
    180a:	0018      	movs	r0, r3
    180c:	4b07      	ldr	r3, [pc, #28]	; (182c <_i2c_master_write_packet+0x164>)
    180e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1810:	68fb      	ldr	r3, [r7, #12]
    1812:	685b      	ldr	r3, [r3, #4]
    1814:	22c0      	movs	r2, #192	; 0xc0
    1816:	0292      	lsls	r2, r2, #10
    1818:	431a      	orrs	r2, r3
    181a:	68fb      	ldr	r3, [r7, #12]
    181c:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    181e:	2317      	movs	r3, #23
    1820:	18fb      	adds	r3, r7, r3
    1822:	781b      	ldrb	r3, [r3, #0]
}
    1824:	0018      	movs	r0, r3
    1826:	46bd      	mov	sp, r7
    1828:	b007      	add	sp, #28
    182a:	bd90      	pop	{r4, r7, pc}
    182c:	00000e29 	.word	0x00000e29
    1830:	000013d1 	.word	0x000013d1
    1834:	fffbffff 	.word	0xfffbffff
    1838:	00001371 	.word	0x00001371
    183c:	00001311 	.word	0x00001311

00001840 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1840:	b580      	push	{r7, lr}
    1842:	b082      	sub	sp, #8
    1844:	af00      	add	r7, sp, #0
    1846:	6078      	str	r0, [r7, #4]
    1848:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    184a:	687b      	ldr	r3, [r7, #4]
    184c:	2201      	movs	r2, #1
    184e:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1850:	687b      	ldr	r3, [r7, #4]
    1852:	2201      	movs	r2, #1
    1854:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    1856:	683a      	ldr	r2, [r7, #0]
    1858:	687b      	ldr	r3, [r7, #4]
    185a:	0011      	movs	r1, r2
    185c:	0018      	movs	r0, r3
    185e:	4b03      	ldr	r3, [pc, #12]	; (186c <i2c_master_write_packet_wait+0x2c>)
    1860:	4798      	blx	r3
    1862:	0003      	movs	r3, r0
}
    1864:	0018      	movs	r0, r3
    1866:	46bd      	mov	sp, r7
    1868:	b002      	add	sp, #8
    186a:	bd80      	pop	{r7, pc}
    186c:	000016c9 	.word	0x000016c9

00001870 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1870:	b580      	push	{r7, lr}
    1872:	b082      	sub	sp, #8
    1874:	af00      	add	r7, sp, #0
    1876:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1878:	687b      	ldr	r3, [r7, #4]
    187a:	2200      	movs	r2, #0
    187c:	701a      	strb	r2, [r3, #0]
}
    187e:	46c0      	nop			; (mov r8, r8)
    1880:	46bd      	mov	sp, r7
    1882:	b002      	add	sp, #8
    1884:	bd80      	pop	{r7, pc}
    1886:	46c0      	nop			; (mov r8, r8)

00001888 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1888:	b580      	push	{r7, lr}
    188a:	b084      	sub	sp, #16
    188c:	af00      	add	r7, sp, #0
    188e:	0002      	movs	r2, r0
    1890:	1dfb      	adds	r3, r7, #7
    1892:	701a      	strb	r2, [r3, #0]
    1894:	1dbb      	adds	r3, r7, #6
    1896:	1c0a      	adds	r2, r1, #0
    1898:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    189a:	4b1a      	ldr	r3, [pc, #104]	; (1904 <sercom_set_gclk_generator+0x7c>)
    189c:	781b      	ldrb	r3, [r3, #0]
    189e:	2201      	movs	r2, #1
    18a0:	4053      	eors	r3, r2
    18a2:	b2db      	uxtb	r3, r3
    18a4:	2b00      	cmp	r3, #0
    18a6:	d103      	bne.n	18b0 <sercom_set_gclk_generator+0x28>
    18a8:	1dbb      	adds	r3, r7, #6
    18aa:	781b      	ldrb	r3, [r3, #0]
    18ac:	2b00      	cmp	r3, #0
    18ae:	d01b      	beq.n	18e8 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    18b0:	230c      	movs	r3, #12
    18b2:	18fb      	adds	r3, r7, r3
    18b4:	0018      	movs	r0, r3
    18b6:	4b14      	ldr	r3, [pc, #80]	; (1908 <sercom_set_gclk_generator+0x80>)
    18b8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    18ba:	230c      	movs	r3, #12
    18bc:	18fb      	adds	r3, r7, r3
    18be:	1dfa      	adds	r2, r7, #7
    18c0:	7812      	ldrb	r2, [r2, #0]
    18c2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    18c4:	230c      	movs	r3, #12
    18c6:	18fb      	adds	r3, r7, r3
    18c8:	0019      	movs	r1, r3
    18ca:	2013      	movs	r0, #19
    18cc:	4b0f      	ldr	r3, [pc, #60]	; (190c <sercom_set_gclk_generator+0x84>)
    18ce:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    18d0:	2013      	movs	r0, #19
    18d2:	4b0f      	ldr	r3, [pc, #60]	; (1910 <sercom_set_gclk_generator+0x88>)
    18d4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    18d6:	4b0b      	ldr	r3, [pc, #44]	; (1904 <sercom_set_gclk_generator+0x7c>)
    18d8:	1dfa      	adds	r2, r7, #7
    18da:	7812      	ldrb	r2, [r2, #0]
    18dc:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    18de:	4b09      	ldr	r3, [pc, #36]	; (1904 <sercom_set_gclk_generator+0x7c>)
    18e0:	2201      	movs	r2, #1
    18e2:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    18e4:	2300      	movs	r3, #0
    18e6:	e008      	b.n	18fa <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    18e8:	4b06      	ldr	r3, [pc, #24]	; (1904 <sercom_set_gclk_generator+0x7c>)
    18ea:	785b      	ldrb	r3, [r3, #1]
    18ec:	1dfa      	adds	r2, r7, #7
    18ee:	7812      	ldrb	r2, [r2, #0]
    18f0:	429a      	cmp	r2, r3
    18f2:	d101      	bne.n	18f8 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    18f4:	2300      	movs	r3, #0
    18f6:	e000      	b.n	18fa <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    18f8:	231d      	movs	r3, #29
}
    18fa:	0018      	movs	r0, r3
    18fc:	46bd      	mov	sp, r7
    18fe:	b004      	add	sp, #16
    1900:	bd80      	pop	{r7, pc}
    1902:	46c0      	nop			; (mov r8, r8)
    1904:	20000118 	.word	0x20000118
    1908:	00001871 	.word	0x00001871
    190c:	00005a05 	.word	0x00005a05
    1910:	00005a49 	.word	0x00005a49

00001914 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    1914:	b580      	push	{r7, lr}
    1916:	b082      	sub	sp, #8
    1918:	af00      	add	r7, sp, #0
    191a:	6078      	str	r0, [r7, #4]
    191c:	000a      	movs	r2, r1
    191e:	1cfb      	adds	r3, r7, #3
    1920:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    1922:	687b      	ldr	r3, [r7, #4]
    1924:	4a4d      	ldr	r2, [pc, #308]	; (1a5c <_sercom_get_default_pad+0x148>)
    1926:	4293      	cmp	r3, r2
    1928:	d03f      	beq.n	19aa <_sercom_get_default_pad+0x96>
    192a:	4a4c      	ldr	r2, [pc, #304]	; (1a5c <_sercom_get_default_pad+0x148>)
    192c:	4293      	cmp	r3, r2
    192e:	d806      	bhi.n	193e <_sercom_get_default_pad+0x2a>
    1930:	4a4b      	ldr	r2, [pc, #300]	; (1a60 <_sercom_get_default_pad+0x14c>)
    1932:	4293      	cmp	r3, r2
    1934:	d00f      	beq.n	1956 <_sercom_get_default_pad+0x42>
    1936:	4a4b      	ldr	r2, [pc, #300]	; (1a64 <_sercom_get_default_pad+0x150>)
    1938:	4293      	cmp	r3, r2
    193a:	d021      	beq.n	1980 <_sercom_get_default_pad+0x6c>
    193c:	e089      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    193e:	4a4a      	ldr	r2, [pc, #296]	; (1a68 <_sercom_get_default_pad+0x154>)
    1940:	4293      	cmp	r3, r2
    1942:	d100      	bne.n	1946 <_sercom_get_default_pad+0x32>
    1944:	e05b      	b.n	19fe <_sercom_get_default_pad+0xea>
    1946:	4a49      	ldr	r2, [pc, #292]	; (1a6c <_sercom_get_default_pad+0x158>)
    1948:	4293      	cmp	r3, r2
    194a:	d100      	bne.n	194e <_sercom_get_default_pad+0x3a>
    194c:	e06c      	b.n	1a28 <_sercom_get_default_pad+0x114>
    194e:	4a48      	ldr	r2, [pc, #288]	; (1a70 <_sercom_get_default_pad+0x15c>)
    1950:	4293      	cmp	r3, r2
    1952:	d03f      	beq.n	19d4 <_sercom_get_default_pad+0xc0>
    1954:	e07d      	b.n	1a52 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1956:	1cfb      	adds	r3, r7, #3
    1958:	781b      	ldrb	r3, [r3, #0]
    195a:	2b01      	cmp	r3, #1
    195c:	d00a      	beq.n	1974 <_sercom_get_default_pad+0x60>
    195e:	dc02      	bgt.n	1966 <_sercom_get_default_pad+0x52>
    1960:	2b00      	cmp	r3, #0
    1962:	d005      	beq.n	1970 <_sercom_get_default_pad+0x5c>
    1964:	e075      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    1966:	2b02      	cmp	r3, #2
    1968:	d006      	beq.n	1978 <_sercom_get_default_pad+0x64>
    196a:	2b03      	cmp	r3, #3
    196c:	d006      	beq.n	197c <_sercom_get_default_pad+0x68>
    196e:	e070      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    1970:	4b40      	ldr	r3, [pc, #256]	; (1a74 <_sercom_get_default_pad+0x160>)
    1972:	e06f      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1974:	4b40      	ldr	r3, [pc, #256]	; (1a78 <_sercom_get_default_pad+0x164>)
    1976:	e06d      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1978:	4b40      	ldr	r3, [pc, #256]	; (1a7c <_sercom_get_default_pad+0x168>)
    197a:	e06b      	b.n	1a54 <_sercom_get_default_pad+0x140>
    197c:	4b40      	ldr	r3, [pc, #256]	; (1a80 <_sercom_get_default_pad+0x16c>)
    197e:	e069      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1980:	1cfb      	adds	r3, r7, #3
    1982:	781b      	ldrb	r3, [r3, #0]
    1984:	2b01      	cmp	r3, #1
    1986:	d00a      	beq.n	199e <_sercom_get_default_pad+0x8a>
    1988:	dc02      	bgt.n	1990 <_sercom_get_default_pad+0x7c>
    198a:	2b00      	cmp	r3, #0
    198c:	d005      	beq.n	199a <_sercom_get_default_pad+0x86>
    198e:	e060      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    1990:	2b02      	cmp	r3, #2
    1992:	d006      	beq.n	19a2 <_sercom_get_default_pad+0x8e>
    1994:	2b03      	cmp	r3, #3
    1996:	d006      	beq.n	19a6 <_sercom_get_default_pad+0x92>
    1998:	e05b      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    199a:	2303      	movs	r3, #3
    199c:	e05a      	b.n	1a54 <_sercom_get_default_pad+0x140>
    199e:	4b39      	ldr	r3, [pc, #228]	; (1a84 <_sercom_get_default_pad+0x170>)
    19a0:	e058      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19a2:	4b39      	ldr	r3, [pc, #228]	; (1a88 <_sercom_get_default_pad+0x174>)
    19a4:	e056      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19a6:	4b39      	ldr	r3, [pc, #228]	; (1a8c <_sercom_get_default_pad+0x178>)
    19a8:	e054      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19aa:	1cfb      	adds	r3, r7, #3
    19ac:	781b      	ldrb	r3, [r3, #0]
    19ae:	2b01      	cmp	r3, #1
    19b0:	d00a      	beq.n	19c8 <_sercom_get_default_pad+0xb4>
    19b2:	dc02      	bgt.n	19ba <_sercom_get_default_pad+0xa6>
    19b4:	2b00      	cmp	r3, #0
    19b6:	d005      	beq.n	19c4 <_sercom_get_default_pad+0xb0>
    19b8:	e04b      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    19ba:	2b02      	cmp	r3, #2
    19bc:	d006      	beq.n	19cc <_sercom_get_default_pad+0xb8>
    19be:	2b03      	cmp	r3, #3
    19c0:	d006      	beq.n	19d0 <_sercom_get_default_pad+0xbc>
    19c2:	e046      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    19c4:	4b32      	ldr	r3, [pc, #200]	; (1a90 <_sercom_get_default_pad+0x17c>)
    19c6:	e045      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19c8:	4b32      	ldr	r3, [pc, #200]	; (1a94 <_sercom_get_default_pad+0x180>)
    19ca:	e043      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19cc:	4b32      	ldr	r3, [pc, #200]	; (1a98 <_sercom_get_default_pad+0x184>)
    19ce:	e041      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19d0:	4b32      	ldr	r3, [pc, #200]	; (1a9c <_sercom_get_default_pad+0x188>)
    19d2:	e03f      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19d4:	1cfb      	adds	r3, r7, #3
    19d6:	781b      	ldrb	r3, [r3, #0]
    19d8:	2b01      	cmp	r3, #1
    19da:	d00a      	beq.n	19f2 <_sercom_get_default_pad+0xde>
    19dc:	dc02      	bgt.n	19e4 <_sercom_get_default_pad+0xd0>
    19de:	2b00      	cmp	r3, #0
    19e0:	d005      	beq.n	19ee <_sercom_get_default_pad+0xda>
    19e2:	e036      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    19e4:	2b02      	cmp	r3, #2
    19e6:	d006      	beq.n	19f6 <_sercom_get_default_pad+0xe2>
    19e8:	2b03      	cmp	r3, #3
    19ea:	d006      	beq.n	19fa <_sercom_get_default_pad+0xe6>
    19ec:	e031      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    19ee:	4b2c      	ldr	r3, [pc, #176]	; (1aa0 <_sercom_get_default_pad+0x18c>)
    19f0:	e030      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19f2:	4b2c      	ldr	r3, [pc, #176]	; (1aa4 <_sercom_get_default_pad+0x190>)
    19f4:	e02e      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19f6:	4b2c      	ldr	r3, [pc, #176]	; (1aa8 <_sercom_get_default_pad+0x194>)
    19f8:	e02c      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19fa:	4b2c      	ldr	r3, [pc, #176]	; (1aac <_sercom_get_default_pad+0x198>)
    19fc:	e02a      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19fe:	1cfb      	adds	r3, r7, #3
    1a00:	781b      	ldrb	r3, [r3, #0]
    1a02:	2b01      	cmp	r3, #1
    1a04:	d00a      	beq.n	1a1c <_sercom_get_default_pad+0x108>
    1a06:	dc02      	bgt.n	1a0e <_sercom_get_default_pad+0xfa>
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d005      	beq.n	1a18 <_sercom_get_default_pad+0x104>
    1a0c:	e021      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    1a0e:	2b02      	cmp	r3, #2
    1a10:	d006      	beq.n	1a20 <_sercom_get_default_pad+0x10c>
    1a12:	2b03      	cmp	r3, #3
    1a14:	d006      	beq.n	1a24 <_sercom_get_default_pad+0x110>
    1a16:	e01c      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    1a18:	4b25      	ldr	r3, [pc, #148]	; (1ab0 <_sercom_get_default_pad+0x19c>)
    1a1a:	e01b      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1a1c:	4b25      	ldr	r3, [pc, #148]	; (1ab4 <_sercom_get_default_pad+0x1a0>)
    1a1e:	e019      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1a20:	4b25      	ldr	r3, [pc, #148]	; (1ab8 <_sercom_get_default_pad+0x1a4>)
    1a22:	e017      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1a24:	4b25      	ldr	r3, [pc, #148]	; (1abc <_sercom_get_default_pad+0x1a8>)
    1a26:	e015      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1a28:	1cfb      	adds	r3, r7, #3
    1a2a:	781b      	ldrb	r3, [r3, #0]
    1a2c:	2b01      	cmp	r3, #1
    1a2e:	d00a      	beq.n	1a46 <_sercom_get_default_pad+0x132>
    1a30:	dc02      	bgt.n	1a38 <_sercom_get_default_pad+0x124>
    1a32:	2b00      	cmp	r3, #0
    1a34:	d005      	beq.n	1a42 <_sercom_get_default_pad+0x12e>
    1a36:	e00c      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    1a38:	2b02      	cmp	r3, #2
    1a3a:	d006      	beq.n	1a4a <_sercom_get_default_pad+0x136>
    1a3c:	2b03      	cmp	r3, #3
    1a3e:	d006      	beq.n	1a4e <_sercom_get_default_pad+0x13a>
    1a40:	e007      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    1a42:	4b1f      	ldr	r3, [pc, #124]	; (1ac0 <_sercom_get_default_pad+0x1ac>)
    1a44:	e006      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1a46:	4b1f      	ldr	r3, [pc, #124]	; (1ac4 <_sercom_get_default_pad+0x1b0>)
    1a48:	e004      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1a4a:	4b1f      	ldr	r3, [pc, #124]	; (1ac8 <_sercom_get_default_pad+0x1b4>)
    1a4c:	e002      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1a4e:	4b1f      	ldr	r3, [pc, #124]	; (1acc <_sercom_get_default_pad+0x1b8>)
    1a50:	e000      	b.n	1a54 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    1a52:	2300      	movs	r3, #0
}
    1a54:	0018      	movs	r0, r3
    1a56:	46bd      	mov	sp, r7
    1a58:	b002      	add	sp, #8
    1a5a:	bd80      	pop	{r7, pc}
    1a5c:	42001000 	.word	0x42001000
    1a60:	42000800 	.word	0x42000800
    1a64:	42000c00 	.word	0x42000c00
    1a68:	42001800 	.word	0x42001800
    1a6c:	42001c00 	.word	0x42001c00
    1a70:	42001400 	.word	0x42001400
    1a74:	00040003 	.word	0x00040003
    1a78:	00050003 	.word	0x00050003
    1a7c:	00060003 	.word	0x00060003
    1a80:	00070003 	.word	0x00070003
    1a84:	00010003 	.word	0x00010003
    1a88:	001e0003 	.word	0x001e0003
    1a8c:	001f0003 	.word	0x001f0003
    1a90:	00080003 	.word	0x00080003
    1a94:	00090003 	.word	0x00090003
    1a98:	000a0003 	.word	0x000a0003
    1a9c:	000b0003 	.word	0x000b0003
    1aa0:	00100003 	.word	0x00100003
    1aa4:	00110003 	.word	0x00110003
    1aa8:	00120003 	.word	0x00120003
    1aac:	00130003 	.word	0x00130003
    1ab0:	000c0003 	.word	0x000c0003
    1ab4:	000d0003 	.word	0x000d0003
    1ab8:	000e0003 	.word	0x000e0003
    1abc:	000f0003 	.word	0x000f0003
    1ac0:	00160003 	.word	0x00160003
    1ac4:	00170003 	.word	0x00170003
    1ac8:	00180003 	.word	0x00180003
    1acc:	00190003 	.word	0x00190003

00001ad0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1ad0:	b590      	push	{r4, r7, lr}
    1ad2:	b08b      	sub	sp, #44	; 0x2c
    1ad4:	af00      	add	r7, sp, #0
    1ad6:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1ad8:	230c      	movs	r3, #12
    1ada:	18fb      	adds	r3, r7, r3
    1adc:	4a0f      	ldr	r2, [pc, #60]	; (1b1c <_sercom_get_sercom_inst_index+0x4c>)
    1ade:	ca13      	ldmia	r2!, {r0, r1, r4}
    1ae0:	c313      	stmia	r3!, {r0, r1, r4}
    1ae2:	ca13      	ldmia	r2!, {r0, r1, r4}
    1ae4:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1ae6:	2300      	movs	r3, #0
    1ae8:	627b      	str	r3, [r7, #36]	; 0x24
    1aea:	e00e      	b.n	1b0a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1aec:	230c      	movs	r3, #12
    1aee:	18fb      	adds	r3, r7, r3
    1af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1af2:	0092      	lsls	r2, r2, #2
    1af4:	58d3      	ldr	r3, [r2, r3]
    1af6:	1e1a      	subs	r2, r3, #0
    1af8:	687b      	ldr	r3, [r7, #4]
    1afa:	429a      	cmp	r2, r3
    1afc:	d102      	bne.n	1b04 <_sercom_get_sercom_inst_index+0x34>
			return i;
    1afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b00:	b2db      	uxtb	r3, r3
    1b02:	e006      	b.n	1b12 <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b06:	3301      	adds	r3, #1
    1b08:	627b      	str	r3, [r7, #36]	; 0x24
    1b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b0c:	2b05      	cmp	r3, #5
    1b0e:	d9ed      	bls.n	1aec <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1b10:	2300      	movs	r3, #0
}
    1b12:	0018      	movs	r0, r3
    1b14:	46bd      	mov	sp, r7
    1b16:	b00b      	add	sp, #44	; 0x2c
    1b18:	bd90      	pop	{r4, r7, pc}
    1b1a:	46c0      	nop			; (mov r8, r8)
    1b1c:	0000961c 	.word	0x0000961c

00001b20 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1b20:	b580      	push	{r7, lr}
    1b22:	b082      	sub	sp, #8
    1b24:	af00      	add	r7, sp, #0
    1b26:	0002      	movs	r2, r0
    1b28:	6039      	str	r1, [r7, #0]
    1b2a:	1dfb      	adds	r3, r7, #7
    1b2c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1b2e:	1dfb      	adds	r3, r7, #7
    1b30:	781b      	ldrb	r3, [r3, #0]
    1b32:	2b01      	cmp	r3, #1
    1b34:	d00a      	beq.n	1b4c <system_apb_clock_set_mask+0x2c>
    1b36:	2b02      	cmp	r3, #2
    1b38:	d00f      	beq.n	1b5a <system_apb_clock_set_mask+0x3a>
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d114      	bne.n	1b68 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1b3e:	4b0e      	ldr	r3, [pc, #56]	; (1b78 <system_apb_clock_set_mask+0x58>)
    1b40:	4a0d      	ldr	r2, [pc, #52]	; (1b78 <system_apb_clock_set_mask+0x58>)
    1b42:	6991      	ldr	r1, [r2, #24]
    1b44:	683a      	ldr	r2, [r7, #0]
    1b46:	430a      	orrs	r2, r1
    1b48:	619a      	str	r2, [r3, #24]
			break;
    1b4a:	e00f      	b.n	1b6c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1b4c:	4b0a      	ldr	r3, [pc, #40]	; (1b78 <system_apb_clock_set_mask+0x58>)
    1b4e:	4a0a      	ldr	r2, [pc, #40]	; (1b78 <system_apb_clock_set_mask+0x58>)
    1b50:	69d1      	ldr	r1, [r2, #28]
    1b52:	683a      	ldr	r2, [r7, #0]
    1b54:	430a      	orrs	r2, r1
    1b56:	61da      	str	r2, [r3, #28]
			break;
    1b58:	e008      	b.n	1b6c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1b5a:	4b07      	ldr	r3, [pc, #28]	; (1b78 <system_apb_clock_set_mask+0x58>)
    1b5c:	4a06      	ldr	r2, [pc, #24]	; (1b78 <system_apb_clock_set_mask+0x58>)
    1b5e:	6a11      	ldr	r1, [r2, #32]
    1b60:	683a      	ldr	r2, [r7, #0]
    1b62:	430a      	orrs	r2, r1
    1b64:	621a      	str	r2, [r3, #32]
			break;
    1b66:	e001      	b.n	1b6c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1b68:	2317      	movs	r3, #23
    1b6a:	e000      	b.n	1b6e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1b6c:	2300      	movs	r3, #0
}
    1b6e:	0018      	movs	r0, r3
    1b70:	46bd      	mov	sp, r7
    1b72:	b002      	add	sp, #8
    1b74:	bd80      	pop	{r7, pc}
    1b76:	46c0      	nop			; (mov r8, r8)
    1b78:	40000400 	.word	0x40000400

00001b7c <wdt_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool wdt_is_syncing(void)
{
    1b7c:	b580      	push	{r7, lr}
    1b7e:	b082      	sub	sp, #8
    1b80:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1b82:	4b07      	ldr	r3, [pc, #28]	; (1ba0 <wdt_is_syncing+0x24>)
    1b84:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	79db      	ldrb	r3, [r3, #7]
    1b8a:	b2db      	uxtb	r3, r3
    1b8c:	b25b      	sxtb	r3, r3
    1b8e:	2b00      	cmp	r3, #0
    1b90:	da01      	bge.n	1b96 <wdt_is_syncing+0x1a>
#endif
		return true;
    1b92:	2301      	movs	r3, #1
    1b94:	e000      	b.n	1b98 <wdt_is_syncing+0x1c>
	}

	return false;
    1b96:	2300      	movs	r3, #0
}
    1b98:	0018      	movs	r0, r3
    1b9a:	46bd      	mov	sp, r7
    1b9c:	b002      	add	sp, #8
    1b9e:	bd80      	pop	{r7, pc}
    1ba0:	40001000 	.word	0x40001000

00001ba4 <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
    1ba4:	b580      	push	{r7, lr}
    1ba6:	b082      	sub	sp, #8
    1ba8:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1baa:	4b07      	ldr	r3, [pc, #28]	; (1bc8 <wdt_is_locked+0x24>)
    1bac:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    1bae:	687b      	ldr	r3, [r7, #4]
    1bb0:	781b      	ldrb	r3, [r3, #0]
    1bb2:	b2db      	uxtb	r3, r3
    1bb4:	001a      	movs	r2, r3
    1bb6:	2380      	movs	r3, #128	; 0x80
    1bb8:	4013      	ands	r3, r2
    1bba:	1e5a      	subs	r2, r3, #1
    1bbc:	4193      	sbcs	r3, r2
    1bbe:	b2db      	uxtb	r3, r3
#endif
}
    1bc0:	0018      	movs	r0, r3
    1bc2:	46bd      	mov	sp, r7
    1bc4:	b002      	add	sp, #8
    1bc6:	bd80      	pop	{r7, pc}
    1bc8:	40001000 	.word	0x40001000

00001bcc <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    1bcc:	b580      	push	{r7, lr}
    1bce:	b086      	sub	sp, #24
    1bd0:	af00      	add	r7, sp, #0
    1bd2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
    1bd4:	4b54      	ldr	r3, [pc, #336]	; (1d28 <wdt_set_config+0x15c>)
    1bd6:	613b      	str	r3, [r7, #16]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);
    1bd8:	2110      	movs	r1, #16
    1bda:	2000      	movs	r0, #0
    1bdc:	4b53      	ldr	r3, [pc, #332]	; (1d2c <wdt_set_config+0x160>)
    1bde:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    1be0:	4b53      	ldr	r3, [pc, #332]	; (1d30 <wdt_set_config+0x164>)
    1be2:	4798      	blx	r3
    1be4:	1e03      	subs	r3, r0, #0
    1be6:	d001      	beq.n	1bec <wdt_set_config+0x20>
		return STATUS_ERR_IO;
    1be8:	2310      	movs	r3, #16
    1bea:	e098      	b.n	1d1e <wdt_set_config+0x152>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    1bec:	687b      	ldr	r3, [r7, #4]
    1bee:	78db      	ldrb	r3, [r3, #3]
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d101      	bne.n	1bf8 <wdt_set_config+0x2c>
		return STATUS_ERR_INVALID_ARG;
    1bf4:	2317      	movs	r3, #23
    1bf6:	e092      	b.n	1d1e <wdt_set_config+0x152>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	78da      	ldrb	r2, [r3, #3]
    1bfc:	687b      	ldr	r3, [r7, #4]
    1bfe:	791b      	ldrb	r3, [r3, #4]
    1c00:	429a      	cmp	r2, r3
    1c02:	d305      	bcc.n	1c10 <wdt_set_config+0x44>
			(config->timeout_period < config->early_warning_period)) {
    1c04:	687b      	ldr	r3, [r7, #4]
    1c06:	78da      	ldrb	r2, [r3, #3]
    1c08:	687b      	ldr	r3, [r7, #4]
    1c0a:	795b      	ldrb	r3, [r3, #5]
		return STATUS_ERR_INVALID_ARG;
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    1c0c:	429a      	cmp	r2, r3
    1c0e:	d201      	bcs.n	1c14 <wdt_set_config+0x48>
			(config->timeout_period < config->early_warning_period)) {
		return STATUS_ERR_INVALID_ARG;
    1c10:	2317      	movs	r3, #23
    1c12:	e084      	b.n	1d1e <wdt_set_config+0x152>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    1c14:	693b      	ldr	r3, [r7, #16]
    1c16:	781b      	ldrb	r3, [r3, #0]
    1c18:	b2db      	uxtb	r3, r3
    1c1a:	2202      	movs	r2, #2
    1c1c:	4393      	bics	r3, r2
    1c1e:	b2da      	uxtb	r2, r3
    1c20:	693b      	ldr	r3, [r7, #16]
    1c22:	701a      	strb	r2, [r3, #0]

	while (wdt_is_syncing()) {
    1c24:	46c0      	nop			; (mov r8, r8)
    1c26:	4b43      	ldr	r3, [pc, #268]	; (1d34 <wdt_set_config+0x168>)
    1c28:	4798      	blx	r3
    1c2a:	1e03      	subs	r3, r0, #0
    1c2c:	d1fb      	bne.n	1c26 <wdt_set_config+0x5a>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
    1c2e:	687b      	ldr	r3, [r7, #4]
    1c30:	785b      	ldrb	r3, [r3, #1]
    1c32:	2201      	movs	r2, #1
    1c34:	4053      	eors	r3, r2
    1c36:	b2db      	uxtb	r3, r3
    1c38:	2b00      	cmp	r3, #0
    1c3a:	d001      	beq.n	1c40 <wdt_set_config+0x74>
		return STATUS_OK;
    1c3c:	2300      	movs	r3, #0
    1c3e:	e06e      	b.n	1d1e <wdt_set_config+0x152>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
    1c40:	687b      	ldr	r3, [r7, #4]
    1c42:	789a      	ldrb	r2, [r3, #2]
    1c44:	230c      	movs	r3, #12
    1c46:	18fb      	adds	r3, r7, r3
    1c48:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    1c4a:	230c      	movs	r3, #12
    1c4c:	18fb      	adds	r3, r7, r3
    1c4e:	0019      	movs	r1, r3
    1c50:	2003      	movs	r0, #3
    1c52:	4b39      	ldr	r3, [pc, #228]	; (1d38 <wdt_set_config+0x16c>)
    1c54:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    1c56:	2003      	movs	r0, #3
    1c58:	4b38      	ldr	r3, [pc, #224]	; (1d3c <wdt_set_config+0x170>)
    1c5a:	4798      	blx	r3
	if (config->always_on) {
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	781b      	ldrb	r3, [r3, #0]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d002      	beq.n	1c6a <wdt_set_config+0x9e>
		system_gclk_chan_lock(WDT_GCLK_ID);
    1c64:	2003      	movs	r0, #3
    1c66:	4b36      	ldr	r3, [pc, #216]	; (1d40 <wdt_set_config+0x174>)
    1c68:	4798      	blx	r3
	}

	uint32_t new_config = 0;
    1c6a:	2300      	movs	r3, #0
    1c6c:	617b      	str	r3, [r7, #20]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    1c6e:	687b      	ldr	r3, [r7, #4]
    1c70:	78db      	ldrb	r3, [r3, #3]
    1c72:	3b01      	subs	r3, #1
    1c74:	001a      	movs	r2, r3
    1c76:	697b      	ldr	r3, [r7, #20]
    1c78:	4313      	orrs	r3, r2
    1c7a:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
    1c7c:	687b      	ldr	r3, [r7, #4]
    1c7e:	791b      	ldrb	r3, [r3, #4]
    1c80:	2b00      	cmp	r3, #0
    1c82:	d010      	beq.n	1ca6 <wdt_set_config+0xda>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    1c84:	693b      	ldr	r3, [r7, #16]
    1c86:	781b      	ldrb	r3, [r3, #0]
    1c88:	b2db      	uxtb	r3, r3
    1c8a:	2204      	movs	r2, #4
    1c8c:	4313      	orrs	r3, r2
    1c8e:	b2da      	uxtb	r2, r3
    1c90:	693b      	ldr	r3, [r7, #16]
    1c92:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	791b      	ldrb	r3, [r3, #4]
    1c98:	3b01      	subs	r3, #1
    1c9a:	011b      	lsls	r3, r3, #4
    1c9c:	001a      	movs	r2, r3
    1c9e:	697b      	ldr	r3, [r7, #20]
    1ca0:	4313      	orrs	r3, r2
    1ca2:	617b      	str	r3, [r7, #20]
    1ca4:	e007      	b.n	1cb6 <wdt_set_config+0xea>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    1ca6:	693b      	ldr	r3, [r7, #16]
    1ca8:	781b      	ldrb	r3, [r3, #0]
    1caa:	b2db      	uxtb	r3, r3
    1cac:	2204      	movs	r2, #4
    1cae:	4393      	bics	r3, r2
    1cb0:	b2da      	uxtb	r2, r3
    1cb2:	693b      	ldr	r3, [r7, #16]
    1cb4:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    1cb6:	46c0      	nop			; (mov r8, r8)
    1cb8:	4b1e      	ldr	r3, [pc, #120]	; (1d34 <wdt_set_config+0x168>)
    1cba:	4798      	blx	r3
    1cbc:	1e03      	subs	r3, r0, #0
    1cbe:	d1fb      	bne.n	1cb8 <wdt_set_config+0xec>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
    1cc0:	697b      	ldr	r3, [r7, #20]
    1cc2:	b2da      	uxtb	r2, r3
    1cc4:	693b      	ldr	r3, [r7, #16]
    1cc6:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    1cc8:	687b      	ldr	r3, [r7, #4]
    1cca:	795b      	ldrb	r3, [r3, #5]
    1ccc:	2b00      	cmp	r3, #0
    1cce:	d00a      	beq.n	1ce6 <wdt_set_config+0x11a>
		while (wdt_is_syncing()) {
    1cd0:	46c0      	nop			; (mov r8, r8)
    1cd2:	4b18      	ldr	r3, [pc, #96]	; (1d34 <wdt_set_config+0x168>)
    1cd4:	4798      	blx	r3
    1cd6:	1e03      	subs	r3, r0, #0
    1cd8:	d1fb      	bne.n	1cd2 <wdt_set_config+0x106>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    1cda:	687b      	ldr	r3, [r7, #4]
    1cdc:	795b      	ldrb	r3, [r3, #5]
    1cde:	3b01      	subs	r3, #1
    1ce0:	b2da      	uxtb	r2, r3
    1ce2:	693b      	ldr	r3, [r7, #16]
    1ce4:	709a      	strb	r2, [r3, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
    1ce6:	687b      	ldr	r3, [r7, #4]
    1ce8:	781b      	ldrb	r3, [r3, #0]
    1cea:	2b00      	cmp	r3, #0
    1cec:	d009      	beq.n	1d02 <wdt_set_config+0x136>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    1cee:	693b      	ldr	r3, [r7, #16]
    1cf0:	781b      	ldrb	r3, [r3, #0]
    1cf2:	b2db      	uxtb	r3, r3
    1cf4:	2280      	movs	r2, #128	; 0x80
    1cf6:	4252      	negs	r2, r2
    1cf8:	4313      	orrs	r3, r2
    1cfa:	b2da      	uxtb	r2, r3
    1cfc:	693b      	ldr	r3, [r7, #16]
    1cfe:	701a      	strb	r2, [r3, #0]
    1d00:	e007      	b.n	1d12 <wdt_set_config+0x146>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    1d02:	693b      	ldr	r3, [r7, #16]
    1d04:	781b      	ldrb	r3, [r3, #0]
    1d06:	b2db      	uxtb	r3, r3
    1d08:	2202      	movs	r2, #2
    1d0a:	4313      	orrs	r3, r2
    1d0c:	b2da      	uxtb	r2, r3
    1d0e:	693b      	ldr	r3, [r7, #16]
    1d10:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    1d12:	46c0      	nop			; (mov r8, r8)
    1d14:	4b07      	ldr	r3, [pc, #28]	; (1d34 <wdt_set_config+0x168>)
    1d16:	4798      	blx	r3
    1d18:	1e03      	subs	r3, r0, #0
    1d1a:	d1fb      	bne.n	1d14 <wdt_set_config+0x148>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
    1d1c:	2300      	movs	r3, #0
}
    1d1e:	0018      	movs	r0, r3
    1d20:	46bd      	mov	sp, r7
    1d22:	b006      	add	sp, #24
    1d24:	bd80      	pop	{r7, pc}
    1d26:	46c0      	nop			; (mov r8, r8)
    1d28:	40001000 	.word	0x40001000
    1d2c:	00001b21 	.word	0x00001b21
    1d30:	00001ba5 	.word	0x00001ba5
    1d34:	00001b7d 	.word	0x00001b7d
    1d38:	00005a05 	.word	0x00005a05
    1d3c:	00005a49 	.word	0x00005a49
    1d40:	00005b29 	.word	0x00005b29

00001d44 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    1d44:	b580      	push	{r7, lr}
    1d46:	b082      	sub	sp, #8
    1d48:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1d4a:	4b04      	ldr	r3, [pc, #16]	; (1d5c <wdt_clear_early_warning+0x18>)
    1d4c:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    1d4e:	687b      	ldr	r3, [r7, #4]
    1d50:	2201      	movs	r2, #1
    1d52:	719a      	strb	r2, [r3, #6]
}
    1d54:	46c0      	nop			; (mov r8, r8)
    1d56:	46bd      	mov	sp, r7
    1d58:	b002      	add	sp, #8
    1d5a:	bd80      	pop	{r7, pc}
    1d5c:	40001000 	.word	0x40001000

00001d60 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    1d60:	b580      	push	{r7, lr}
    1d62:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    1d64:	4b05      	ldr	r3, [pc, #20]	; (1d7c <WDT_Handler+0x1c>)
    1d66:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    1d68:	4b05      	ldr	r3, [pc, #20]	; (1d80 <WDT_Handler+0x20>)
    1d6a:	681b      	ldr	r3, [r3, #0]
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	d002      	beq.n	1d76 <WDT_Handler+0x16>
		wdt_early_warning_callback();
    1d70:	4b03      	ldr	r3, [pc, #12]	; (1d80 <WDT_Handler+0x20>)
    1d72:	681b      	ldr	r3, [r3, #0]
    1d74:	4798      	blx	r3
	}
}
    1d76:	46c0      	nop			; (mov r8, r8)
    1d78:	46bd      	mov	sp, r7
    1d7a:	bd80      	pop	{r7, pc}
    1d7c:	00001d45 	.word	0x00001d45
    1d80:	20000194 	.word	0x20000194

00001d84 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1d84:	b580      	push	{r7, lr}
    1d86:	b082      	sub	sp, #8
    1d88:	af00      	add	r7, sp, #0
    1d8a:	0002      	movs	r2, r0
    1d8c:	1dfb      	adds	r3, r7, #7
    1d8e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1d90:	4b06      	ldr	r3, [pc, #24]	; (1dac <NVIC_EnableIRQ+0x28>)
    1d92:	1dfa      	adds	r2, r7, #7
    1d94:	7812      	ldrb	r2, [r2, #0]
    1d96:	0011      	movs	r1, r2
    1d98:	221f      	movs	r2, #31
    1d9a:	400a      	ands	r2, r1
    1d9c:	2101      	movs	r1, #1
    1d9e:	4091      	lsls	r1, r2
    1da0:	000a      	movs	r2, r1
    1da2:	601a      	str	r2, [r3, #0]
}
    1da4:	46c0      	nop			; (mov r8, r8)
    1da6:	46bd      	mov	sp, r7
    1da8:	b002      	add	sp, #8
    1daa:	bd80      	pop	{r7, pc}
    1dac:	e000e100 	.word	0xe000e100

00001db0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1db0:	b5b0      	push	{r4, r5, r7, lr}
    1db2:	b082      	sub	sp, #8
    1db4:	af00      	add	r7, sp, #0
    1db6:	0002      	movs	r2, r0
    1db8:	6039      	str	r1, [r7, #0]
    1dba:	1dfb      	adds	r3, r7, #7
    1dbc:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    1dbe:	1dfb      	adds	r3, r7, #7
    1dc0:	781b      	ldrb	r3, [r3, #0]
    1dc2:	2b7f      	cmp	r3, #127	; 0x7f
    1dc4:	d932      	bls.n	1e2c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1dc6:	4c2f      	ldr	r4, [pc, #188]	; (1e84 <NVIC_SetPriority+0xd4>)
    1dc8:	1dfb      	adds	r3, r7, #7
    1dca:	781b      	ldrb	r3, [r3, #0]
    1dcc:	001a      	movs	r2, r3
    1dce:	230f      	movs	r3, #15
    1dd0:	4013      	ands	r3, r2
    1dd2:	3b08      	subs	r3, #8
    1dd4:	0899      	lsrs	r1, r3, #2
    1dd6:	4a2b      	ldr	r2, [pc, #172]	; (1e84 <NVIC_SetPriority+0xd4>)
    1dd8:	1dfb      	adds	r3, r7, #7
    1dda:	781b      	ldrb	r3, [r3, #0]
    1ddc:	0018      	movs	r0, r3
    1dde:	230f      	movs	r3, #15
    1de0:	4003      	ands	r3, r0
    1de2:	3b08      	subs	r3, #8
    1de4:	089b      	lsrs	r3, r3, #2
    1de6:	3306      	adds	r3, #6
    1de8:	009b      	lsls	r3, r3, #2
    1dea:	18d3      	adds	r3, r2, r3
    1dec:	3304      	adds	r3, #4
    1dee:	681b      	ldr	r3, [r3, #0]
    1df0:	1dfa      	adds	r2, r7, #7
    1df2:	7812      	ldrb	r2, [r2, #0]
    1df4:	0010      	movs	r0, r2
    1df6:	2203      	movs	r2, #3
    1df8:	4002      	ands	r2, r0
    1dfa:	00d2      	lsls	r2, r2, #3
    1dfc:	20ff      	movs	r0, #255	; 0xff
    1dfe:	4090      	lsls	r0, r2
    1e00:	0002      	movs	r2, r0
    1e02:	43d2      	mvns	r2, r2
    1e04:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    1e06:	683b      	ldr	r3, [r7, #0]
    1e08:	019b      	lsls	r3, r3, #6
    1e0a:	20ff      	movs	r0, #255	; 0xff
    1e0c:	4018      	ands	r0, r3
    1e0e:	1dfb      	adds	r3, r7, #7
    1e10:	781b      	ldrb	r3, [r3, #0]
    1e12:	001d      	movs	r5, r3
    1e14:	2303      	movs	r3, #3
    1e16:	402b      	ands	r3, r5
    1e18:	00db      	lsls	r3, r3, #3
    1e1a:	4098      	lsls	r0, r3
    1e1c:	0003      	movs	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1e1e:	431a      	orrs	r2, r3
    1e20:	1d8b      	adds	r3, r1, #6
    1e22:	009b      	lsls	r3, r3, #2
    1e24:	18e3      	adds	r3, r4, r3
    1e26:	3304      	adds	r3, #4
    1e28:	601a      	str	r2, [r3, #0]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    1e2a:	e027      	b.n	1e7c <NVIC_SetPriority+0xcc>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1e2c:	4c16      	ldr	r4, [pc, #88]	; (1e88 <NVIC_SetPriority+0xd8>)
    1e2e:	1dfb      	adds	r3, r7, #7
    1e30:	781b      	ldrb	r3, [r3, #0]
    1e32:	b25b      	sxtb	r3, r3
    1e34:	089b      	lsrs	r3, r3, #2
    1e36:	4914      	ldr	r1, [pc, #80]	; (1e88 <NVIC_SetPriority+0xd8>)
    1e38:	1dfa      	adds	r2, r7, #7
    1e3a:	7812      	ldrb	r2, [r2, #0]
    1e3c:	b252      	sxtb	r2, r2
    1e3e:	0892      	lsrs	r2, r2, #2
    1e40:	32c0      	adds	r2, #192	; 0xc0
    1e42:	0092      	lsls	r2, r2, #2
    1e44:	5852      	ldr	r2, [r2, r1]
    1e46:	1df9      	adds	r1, r7, #7
    1e48:	7809      	ldrb	r1, [r1, #0]
    1e4a:	0008      	movs	r0, r1
    1e4c:	2103      	movs	r1, #3
    1e4e:	4001      	ands	r1, r0
    1e50:	00c9      	lsls	r1, r1, #3
    1e52:	20ff      	movs	r0, #255	; 0xff
    1e54:	4088      	lsls	r0, r1
    1e56:	0001      	movs	r1, r0
    1e58:	43c9      	mvns	r1, r1
    1e5a:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    1e5c:	683a      	ldr	r2, [r7, #0]
    1e5e:	0192      	lsls	r2, r2, #6
    1e60:	20ff      	movs	r0, #255	; 0xff
    1e62:	4010      	ands	r0, r2
    1e64:	1dfa      	adds	r2, r7, #7
    1e66:	7812      	ldrb	r2, [r2, #0]
    1e68:	0015      	movs	r5, r2
    1e6a:	2203      	movs	r2, #3
    1e6c:	402a      	ands	r2, r5
    1e6e:	00d2      	lsls	r2, r2, #3
    1e70:	4090      	lsls	r0, r2
    1e72:	0002      	movs	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1e74:	430a      	orrs	r2, r1
    1e76:	33c0      	adds	r3, #192	; 0xc0
    1e78:	009b      	lsls	r3, r3, #2
    1e7a:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    1e7c:	46c0      	nop			; (mov r8, r8)
    1e7e:	46bd      	mov	sp, r7
    1e80:	b002      	add	sp, #8
    1e82:	bdb0      	pop	{r4, r5, r7, pc}
    1e84:	e000ed00 	.word	0xe000ed00
    1e88:	e000e100 	.word	0xe000e100

00001e8c <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    1e8c:	b580      	push	{r7, lr}
    1e8e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    1e90:	4b04      	ldr	r3, [pc, #16]	; (1ea4 <system_interrupt_enable_global+0x18>)
    1e92:	2201      	movs	r2, #1
    1e94:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1e96:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1e9a:	b662      	cpsie	i
}
    1e9c:	46c0      	nop			; (mov r8, r8)
    1e9e:	46bd      	mov	sp, r7
    1ea0:	bd80      	pop	{r7, pc}
    1ea2:	46c0      	nop			; (mov r8, r8)
    1ea4:	20000091 	.word	0x20000091

00001ea8 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    1ea8:	b580      	push	{r7, lr}
    1eaa:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1eac:	b672      	cpsid	i
    1eae:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1eb2:	4b03      	ldr	r3, [pc, #12]	; (1ec0 <system_interrupt_disable_global+0x18>)
    1eb4:	2200      	movs	r2, #0
    1eb6:	701a      	strb	r2, [r3, #0]
}
    1eb8:	46c0      	nop			; (mov r8, r8)
    1eba:	46bd      	mov	sp, r7
    1ebc:	bd80      	pop	{r7, pc}
    1ebe:	46c0      	nop			; (mov r8, r8)
    1ec0:	20000091 	.word	0x20000091

00001ec4 <uart_clk_init>:
	SERCOM_RX_PAD_3
} SercomRXPad;


void uart_clk_init(void)
{
    1ec4:	b580      	push	{r7, lr}
    1ec6:	af00      	add	r7, sp, #0
	// Start the Software Reset and wait for it to finish
	BLE_UART_SERCOM->USART.CTRLA.bit.SWRST = 1 ;
    1ec8:	4a13      	ldr	r2, [pc, #76]	; (1f18 <uart_clk_init+0x54>)
    1eca:	6813      	ldr	r3, [r2, #0]
    1ecc:	2101      	movs	r1, #1
    1ece:	430b      	orrs	r3, r1
    1ed0:	6013      	str	r3, [r2, #0]
	while ( BLE_UART_SERCOM->USART.CTRLA.bit.SWRST || BLE_UART_SERCOM->USART.SYNCBUSY.bit.SWRST );
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	4b10      	ldr	r3, [pc, #64]	; (1f18 <uart_clk_init+0x54>)
    1ed6:	681b      	ldr	r3, [r3, #0]
    1ed8:	07db      	lsls	r3, r3, #31
    1eda:	0fdb      	lsrs	r3, r3, #31
    1edc:	b2db      	uxtb	r3, r3
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d1f8      	bne.n	1ed4 <uart_clk_init+0x10>
    1ee2:	4b0d      	ldr	r3, [pc, #52]	; (1f18 <uart_clk_init+0x54>)
    1ee4:	69db      	ldr	r3, [r3, #28]
    1ee6:	07db      	lsls	r3, r3, #31
    1ee8:	0fdb      	lsrs	r3, r3, #31
    1eea:	b2db      	uxtb	r3, r3
    1eec:	2b00      	cmp	r3, #0
    1eee:	d1f1      	bne.n	1ed4 <uart_clk_init+0x10>
	
	// Turn on peripheral clock for SERCOM being used
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM2;
    1ef0:	4b0a      	ldr	r3, [pc, #40]	; (1f1c <uart_clk_init+0x58>)
    1ef2:	4a0a      	ldr	r2, [pc, #40]	; (1f1c <uart_clk_init+0x58>)
    1ef4:	6a12      	ldr	r2, [r2, #32]
    1ef6:	2110      	movs	r1, #16
    1ef8:	430a      	orrs	r2, r1
    1efa:	621a      	str	r2, [r3, #32]

	//Setting clock
	GCLK->CLKCTRL.reg =
    1efc:	4b08      	ldr	r3, [pc, #32]	; (1f20 <uart_clk_init+0x5c>)
    1efe:	4a09      	ldr	r2, [pc, #36]	; (1f24 <uart_clk_init+0x60>)
    1f00:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID( GCM_SERCOM2_CORE )	|	// connected  SERCOMx to
	GCLK_CLKCTRL_GEN_GCLK0		|	// generic Clock Generator 0
	GCLK_CLKCTRL_CLKEN;			// and enable it

	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY ); // Wait for synchronization
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	4b06      	ldr	r3, [pc, #24]	; (1f20 <uart_clk_init+0x5c>)
    1f06:	785b      	ldrb	r3, [r3, #1]
    1f08:	b2db      	uxtb	r3, r3
    1f0a:	b25b      	sxtb	r3, r3
    1f0c:	2b00      	cmp	r3, #0
    1f0e:	dbf9      	blt.n	1f04 <uart_clk_init+0x40>
}
    1f10:	46c0      	nop			; (mov r8, r8)
    1f12:	46bd      	mov	sp, r7
    1f14:	bd80      	pop	{r7, pc}
    1f16:	46c0      	nop			; (mov r8, r8)
    1f18:	42001000 	.word	0x42001000
    1f1c:	40000400 	.word	0x40000400
    1f20:	40000c00 	.word	0x40000c00
    1f24:	00004016 	.word	0x00004016

00001f28 <uart_pin_init>:

void uart_pin_init(void)
{
    1f28:	b580      	push	{r7, lr}
    1f2a:	b082      	sub	sp, #8
    1f2c:	af00      	add	r7, sp, #0
	PORT->Group[PORTGROUP_A].DIRCLR.reg = PORT_PA08;	// RX as input
    1f2e:	4b1c      	ldr	r3, [pc, #112]	; (1fa0 <uart_pin_init+0x78>)
    1f30:	2280      	movs	r2, #128	; 0x80
    1f32:	0052      	lsls	r2, r2, #1
    1f34:	605a      	str	r2, [r3, #4]
	
	PORT->Group[PORTGROUP_A].DIRSET.reg = PORT_PA10;	// TX as output
    1f36:	4b1a      	ldr	r3, [pc, #104]	; (1fa0 <uart_pin_init+0x78>)
    1f38:	2280      	movs	r2, #128	; 0x80
    1f3a:	00d2      	lsls	r2, r2, #3
    1f3c:	609a      	str	r2, [r3, #8]
	PORT->Group[PORTGROUP_A].OUTSET.reg = PORT_PA10;	// TX idle state is high
    1f3e:	4b18      	ldr	r3, [pc, #96]	; (1fa0 <uart_pin_init+0x78>)
    1f40:	2280      	movs	r2, #128	; 0x80
    1f42:	00d2      	lsls	r2, r2, #3
    1f44:	619a      	str	r2, [r3, #24]

	// set port multiplexer for peripheral TX
	// =======================================
	uint32_t temp = (PORT->Group[PORTGROUP_A].PMUX[TX_PIN>>1].reg) & PORT_PMUX_PMUXO( GPIO_SERCOM_ALT_D );
    1f46:	4a16      	ldr	r2, [pc, #88]	; (1fa0 <uart_pin_init+0x78>)
    1f48:	2335      	movs	r3, #53	; 0x35
    1f4a:	5cd3      	ldrb	r3, [r2, r3]
    1f4c:	b2db      	uxtb	r3, r3
    1f4e:	001a      	movs	r2, r3
    1f50:	2330      	movs	r3, #48	; 0x30
    1f52:	4013      	ands	r3, r2
    1f54:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[TX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( GPIO_SERCOM_ALT_D );
    1f56:	4a12      	ldr	r2, [pc, #72]	; (1fa0 <uart_pin_init+0x78>)
    1f58:	687b      	ldr	r3, [r7, #4]
    1f5a:	b2db      	uxtb	r3, r3
    1f5c:	2103      	movs	r1, #3
    1f5e:	430b      	orrs	r3, r1
    1f60:	b2d9      	uxtb	r1, r3
    1f62:	2335      	movs	r3, #53	; 0x35
    1f64:	54d1      	strb	r1, [r2, r3]
	
	PORT->Group[PORTGROUP_A].PINCFG[TX_PIN].reg = PORT_PINCFG_PMUXEN ; // Enable port mux
    1f66:	4a0e      	ldr	r2, [pc, #56]	; (1fa0 <uart_pin_init+0x78>)
    1f68:	234a      	movs	r3, #74	; 0x4a
    1f6a:	2101      	movs	r1, #1
    1f6c:	54d1      	strb	r1, [r2, r3]
	temp = (PORT->Group[PORTGROUP_A].PMUX[RX_PIN>>1].reg) & PORT_PMUX_PMUXO( GPIO_SERCOM_ALT_D );
    1f6e:	4a0c      	ldr	r2, [pc, #48]	; (1fa0 <uart_pin_init+0x78>)
    1f70:	2334      	movs	r3, #52	; 0x34
    1f72:	5cd3      	ldrb	r3, [r2, r3]
    1f74:	b2db      	uxtb	r3, r3
    1f76:	001a      	movs	r2, r3
    1f78:	2330      	movs	r3, #48	; 0x30
    1f7a:	4013      	ands	r3, r2
    1f7c:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[RX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( GPIO_SERCOM_ALT_D );
    1f7e:	4a08      	ldr	r2, [pc, #32]	; (1fa0 <uart_pin_init+0x78>)
    1f80:	687b      	ldr	r3, [r7, #4]
    1f82:	b2db      	uxtb	r3, r3
    1f84:	2103      	movs	r1, #3
    1f86:	430b      	orrs	r3, r1
    1f88:	b2d9      	uxtb	r1, r3
    1f8a:	2334      	movs	r3, #52	; 0x34
    1f8c:	54d1      	strb	r1, [r2, r3]
	PORT->Group[PORTGROUP_A].PINCFG[RX_PIN].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN; // Enable port mux
    1f8e:	4a04      	ldr	r2, [pc, #16]	; (1fa0 <uart_pin_init+0x78>)
    1f90:	2348      	movs	r3, #72	; 0x48
    1f92:	2103      	movs	r1, #3
    1f94:	54d1      	strb	r1, [r2, r3]
}
    1f96:	46c0      	nop			; (mov r8, r8)
    1f98:	46bd      	mov	sp, r7
    1f9a:	b002      	add	sp, #8
    1f9c:	bd80      	pop	{r7, pc}
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	41004400 	.word	0x41004400

00001fa4 <ble_uart_init>:

void ble_uart_init(void)
{	
    1fa4:	b580      	push	{r7, lr}
    1fa6:	af00      	add	r7, sp, #0
	uart_clk_init();
    1fa8:	4b18      	ldr	r3, [pc, #96]	; (200c <STACK_SIZE+0xc>)
    1faa:	4798      	blx	r3
	uart_pin_init();
    1fac:	4b18      	ldr	r3, [pc, #96]	; (2010 <STACK_SIZE+0x10>)
    1fae:	4798      	blx	r3
	
	
	
	BLE_UART_SERCOM->USART.CTRLA.reg =
    1fb0:	4b18      	ldr	r3, [pc, #96]	; (2014 <STACK_SIZE+0x14>)
    1fb2:	4a19      	ldr	r2, [pc, #100]	; (2018 <STACK_SIZE+0x18>)
    1fb4:	601a      	str	r2, [r3, #0]
	
	
	// Asynchronous arithmetic mode
	// 65535 * ( 1 - sampleRateValue * baudrate / SystemCoreClock);
	// 65535 - 65535 * (sampleRateValue * baudrate / SystemCoreClock));
	BLE_UART_SERCOM->USART.BAUD.reg = 65535.0f * ( 1.0f - (16.0 * (float)(BAUDRATE)) / (float)(SYSTEM_CLK));
    1fb6:	4b17      	ldr	r3, [pc, #92]	; (2014 <STACK_SIZE+0x14>)
    1fb8:	4a18      	ldr	r2, [pc, #96]	; (201c <STACK_SIZE+0x1c>)
    1fba:	819a      	strh	r2, [r3, #12]
	//BLE_UART_SERCOM->USART.BAUD.bit.BAUD = 9600;
	
	BLE_UART_SERCOM->USART.CTRLB.reg =
    1fbc:	4b15      	ldr	r3, [pc, #84]	; (2014 <STACK_SIZE+0x14>)
    1fbe:	22c0      	movs	r2, #192	; 0xc0
    1fc0:	0292      	lsls	r2, r2, #10
    1fc2:	605a      	str	r2, [r3, #4]
	SERCOM_USART_CTRLB_CHSIZE(0)	|	// 8 bit character size
	SERCOM_USART_CTRLB_TXEN			|	// Enable Transmit
	SERCOM_USART_CTRLB_RXEN;			// Enable Receive

	// Get Synced
	while (BLE_UART_SERCOM->USART.SYNCBUSY.bit.CTRLB);
    1fc4:	46c0      	nop			; (mov r8, r8)
    1fc6:	4b13      	ldr	r3, [pc, #76]	; (2014 <STACK_SIZE+0x14>)
    1fc8:	69db      	ldr	r3, [r3, #28]
    1fca:	075b      	lsls	r3, r3, #29
    1fcc:	0fdb      	lsrs	r3, r3, #31
    1fce:	b2db      	uxtb	r3, r3
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	d1f8      	bne.n	1fc6 <ble_uart_init+0x22>

	//Set the Interrupt to use
	BLE_UART_SERCOM->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;	// Interrupt on received complete
    1fd4:	4b0f      	ldr	r3, [pc, #60]	; (2014 <STACK_SIZE+0x14>)
    1fd6:	2204      	movs	r2, #4
    1fd8:	759a      	strb	r2, [r3, #22]
	
	// Enable interrupts
	NVIC_EnableIRQ(SERCOM2_IRQn);
    1fda:	200b      	movs	r0, #11
    1fdc:	4b10      	ldr	r3, [pc, #64]	; (2020 <STACK_SIZE+0x20>)
    1fde:	4798      	blx	r3
	NVIC_SetPriority(SERCOM2_IRQn,1);
    1fe0:	2101      	movs	r1, #1
    1fe2:	200b      	movs	r0, #11
    1fe4:	4b0f      	ldr	r3, [pc, #60]	; (2024 <STACK_SIZE+0x24>)
    1fe6:	4798      	blx	r3
	
	// enable the peripheral block
	BLE_UART_SERCOM->USART.CTRLA.bit.ENABLE = 0x1u;
    1fe8:	4a0a      	ldr	r2, [pc, #40]	; (2014 <STACK_SIZE+0x14>)
    1fea:	6813      	ldr	r3, [r2, #0]
    1fec:	2102      	movs	r1, #2
    1fee:	430b      	orrs	r3, r1
    1ff0:	6013      	str	r3, [r2, #0]
	
	// Wait for sercom to enable
	while(BLE_UART_SERCOM->USART.SYNCBUSY.bit.ENABLE);
    1ff2:	46c0      	nop			; (mov r8, r8)
    1ff4:	4b07      	ldr	r3, [pc, #28]	; (2014 <STACK_SIZE+0x14>)
    1ff6:	69db      	ldr	r3, [r3, #28]
    1ff8:	079b      	lsls	r3, r3, #30
    1ffa:	0fdb      	lsrs	r3, r3, #31
    1ffc:	b2db      	uxtb	r3, r3
    1ffe:	2b00      	cmp	r3, #0
    2000:	d1f8      	bne.n	1ff4 <ble_uart_init+0x50>
	
	reset_buffers();
    2002:	4b09      	ldr	r3, [pc, #36]	; (2028 <STACK_SIZE+0x28>)
    2004:	4798      	blx	r3
}
    2006:	46c0      	nop			; (mov r8, r8)
    2008:	46bd      	mov	sp, r7
    200a:	bd80      	pop	{r7, pc}
    200c:	00001ec5 	.word	0x00001ec5
    2010:	00001f29 	.word	0x00001f29
    2014:	42001000 	.word	0x42001000
    2018:	40010084 	.word	0x40010084
    201c:	fffffb14 	.word	0xfffffb14
    2020:	00001d85 	.word	0x00001d85
    2024:	00001db1 	.word	0x00001db1
    2028:	000020e1 	.word	0x000020e1

0000202c <ble_uart_write>:

void ble_uart_write(char buffer[])
{
    202c:	b580      	push	{r7, lr}
    202e:	b084      	sub	sp, #16
    2030:	af00      	add	r7, sp, #0
    2032:	6078      	str	r0, [r7, #4]
	system_interrupt_disable_global();
    2034:	4b10      	ldr	r3, [pc, #64]	; (2078 <ble_uart_write+0x4c>)
    2036:	4798      	blx	r3
	uint32_t i = 0;
    2038:	2300      	movs	r3, #0
    203a:	60fb      	str	r3, [r7, #12]
	while(buffer[i] != '\0')
    203c:	e00f      	b.n	205e <ble_uart_write+0x32>
	{
		if(BLE_UART_SERCOM->USART.INTFLAG.bit.DRE == 1)
    203e:	4b0f      	ldr	r3, [pc, #60]	; (207c <ble_uart_write+0x50>)
    2040:	7e1b      	ldrb	r3, [r3, #24]
    2042:	07db      	lsls	r3, r3, #31
    2044:	0fdb      	lsrs	r3, r3, #31
    2046:	b2db      	uxtb	r3, r3
    2048:	2b01      	cmp	r3, #1
    204a:	d108      	bne.n	205e <ble_uart_write+0x32>
		{
			BLE_UART_SERCOM->USART.DATA.reg = (uint16_t)buffer[i++];
    204c:	490b      	ldr	r1, [pc, #44]	; (207c <ble_uart_write+0x50>)
    204e:	68fb      	ldr	r3, [r7, #12]
    2050:	1c5a      	adds	r2, r3, #1
    2052:	60fa      	str	r2, [r7, #12]
    2054:	687a      	ldr	r2, [r7, #4]
    2056:	18d3      	adds	r3, r2, r3
    2058:	781b      	ldrb	r3, [r3, #0]
    205a:	b29b      	uxth	r3, r3
    205c:	850b      	strh	r3, [r1, #40]	; 0x28

void ble_uart_write(char buffer[])
{
	system_interrupt_disable_global();
	uint32_t i = 0;
	while(buffer[i] != '\0')
    205e:	687a      	ldr	r2, [r7, #4]
    2060:	68fb      	ldr	r3, [r7, #12]
    2062:	18d3      	adds	r3, r2, r3
    2064:	781b      	ldrb	r3, [r3, #0]
    2066:	2b00      	cmp	r3, #0
    2068:	d1e9      	bne.n	203e <ble_uart_write+0x12>
		if(BLE_UART_SERCOM->USART.INTFLAG.bit.DRE == 1)
		{
			BLE_UART_SERCOM->USART.DATA.reg = (uint16_t)buffer[i++];
		}
	}
	system_interrupt_enable_global();
    206a:	4b05      	ldr	r3, [pc, #20]	; (2080 <ble_uart_write+0x54>)
    206c:	4798      	blx	r3
}
    206e:	46c0      	nop			; (mov r8, r8)
    2070:	46bd      	mov	sp, r7
    2072:	b004      	add	sp, #16
    2074:	bd80      	pop	{r7, pc}
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	00001ea9 	.word	0x00001ea9
    207c:	42001000 	.word	0x42001000
    2080:	00001e8d 	.word	0x00001e8d

00002084 <SERCOM2_Handler>:
	BLE_UART_SERCOM->USART.DATA.reg = data;
}


void SERCOM2_Handler()
{
    2084:	b580      	push	{r7, lr}
    2086:	af00      	add	r7, sp, #0
	if (BLE_UART_SERCOM->USART.INTFLAG.bit.RXC)
    2088:	4b12      	ldr	r3, [pc, #72]	; (20d4 <SERCOM2_Handler+0x50>)
    208a:	7e1b      	ldrb	r3, [r3, #24]
    208c:	075b      	lsls	r3, r3, #29
    208e:	0fdb      	lsrs	r3, r3, #31
    2090:	b2db      	uxtb	r3, r3
    2092:	2b00      	cmp	r3, #0
    2094:	d01a      	beq.n	20cc <SERCOM2_Handler+0x48>
	{
		//while (BLE_UART_SERCOM->USART.INTFLAG.bit.DRE != 0 )
		//{
			// Got a character
			if (buff_count > 127)
    2096:	4b10      	ldr	r3, [pc, #64]	; (20d8 <SERCOM2_Handler+0x54>)
    2098:	681b      	ldr	r3, [r3, #0]
    209a:	2b7f      	cmp	r3, #127	; 0x7f
    209c:	dd0b      	ble.n	20b6 <SERCOM2_Handler+0x32>
			{
				buff_count = 0;
    209e:	4b0e      	ldr	r3, [pc, #56]	; (20d8 <SERCOM2_Handler+0x54>)
    20a0:	2200      	movs	r2, #0
    20a2:	601a      	str	r2, [r3, #0]
				rx_buffer_array[buff_count] = (uint8_t) BLE_UART_SERCOM->USART.DATA.reg;
    20a4:	4b0c      	ldr	r3, [pc, #48]	; (20d8 <SERCOM2_Handler+0x54>)
    20a6:	681b      	ldr	r3, [r3, #0]
    20a8:	4a0a      	ldr	r2, [pc, #40]	; (20d4 <SERCOM2_Handler+0x50>)
    20aa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    20ac:	b292      	uxth	r2, r2
    20ae:	b2d1      	uxtb	r1, r2
    20b0:	4a0a      	ldr	r2, [pc, #40]	; (20dc <SERCOM2_Handler+0x58>)
    20b2:	54d1      	strb	r1, [r2, r3]
				rx_buffer_array[buff_count++] = (uint8_t)BLE_UART_SERCOM->USART.DATA.reg;
			}
		//}

	}
}
    20b4:	e00a      	b.n	20cc <SERCOM2_Handler+0x48>
				buff_count = 0;
				rx_buffer_array[buff_count] = (uint8_t) BLE_UART_SERCOM->USART.DATA.reg;
			}
			else
			{
				rx_buffer_array[buff_count++] = (uint8_t)BLE_UART_SERCOM->USART.DATA.reg;
    20b6:	4b08      	ldr	r3, [pc, #32]	; (20d8 <SERCOM2_Handler+0x54>)
    20b8:	681b      	ldr	r3, [r3, #0]
    20ba:	1c59      	adds	r1, r3, #1
    20bc:	4a06      	ldr	r2, [pc, #24]	; (20d8 <SERCOM2_Handler+0x54>)
    20be:	6011      	str	r1, [r2, #0]
    20c0:	4a04      	ldr	r2, [pc, #16]	; (20d4 <SERCOM2_Handler+0x50>)
    20c2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    20c4:	b292      	uxth	r2, r2
    20c6:	b2d1      	uxtb	r1, r2
    20c8:	4a04      	ldr	r2, [pc, #16]	; (20dc <SERCOM2_Handler+0x58>)
    20ca:	54d1      	strb	r1, [r2, r3]
			}
		//}

	}
}
    20cc:	46c0      	nop			; (mov r8, r8)
    20ce:	46bd      	mov	sp, r7
    20d0:	bd80      	pop	{r7, pc}
    20d2:	46c0      	nop			; (mov r8, r8)
    20d4:	42001000 	.word	0x42001000
    20d8:	2000011c 	.word	0x2000011c
    20dc:	200001c4 	.word	0x200001c4

000020e0 <reset_buffers>:

void reset_buffers()
{
    20e0:	b580      	push	{r7, lr}
    20e2:	b082      	sub	sp, #8
    20e4:	af00      	add	r7, sp, #0
	for (uint8_t k=0;k<sizeof(rx_buffer_array);k++)
    20e6:	1dfb      	adds	r3, r7, #7
    20e8:	2200      	movs	r2, #0
    20ea:	701a      	strb	r2, [r3, #0]
    20ec:	e009      	b.n	2102 <reset_buffers+0x22>
	{
		rx_buffer_array[k] = 0;
    20ee:	1dfb      	adds	r3, r7, #7
    20f0:	781b      	ldrb	r3, [r3, #0]
    20f2:	4a0a      	ldr	r2, [pc, #40]	; (211c <reset_buffers+0x3c>)
    20f4:	2100      	movs	r1, #0
    20f6:	54d1      	strb	r1, [r2, r3]
	}
}

void reset_buffers()
{
	for (uint8_t k=0;k<sizeof(rx_buffer_array);k++)
    20f8:	1dfb      	adds	r3, r7, #7
    20fa:	781a      	ldrb	r2, [r3, #0]
    20fc:	1dfb      	adds	r3, r7, #7
    20fe:	3201      	adds	r2, #1
    2100:	701a      	strb	r2, [r3, #0]
    2102:	1dfb      	adds	r3, r7, #7
    2104:	781b      	ldrb	r3, [r3, #0]
    2106:	b25b      	sxtb	r3, r3
    2108:	2b00      	cmp	r3, #0
    210a:	daf0      	bge.n	20ee <reset_buffers+0xe>
	{
		rx_buffer_array[k] = 0;
	}
	buff_count = 0;
    210c:	4b04      	ldr	r3, [pc, #16]	; (2120 <reset_buffers+0x40>)
    210e:	2200      	movs	r2, #0
    2110:	601a      	str	r2, [r3, #0]
}
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	46bd      	mov	sp, r7
    2116:	b002      	add	sp, #8
    2118:	bd80      	pop	{r7, pc}
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	200001c4 	.word	0x200001c4
    2120:	2000011c 	.word	0x2000011c

00002124 <data_handler>:




void data_handler(char buffer[])
{
    2124:	b5f0      	push	{r4, r5, r6, r7, lr}
    2126:	b097      	sub	sp, #92	; 0x5c
    2128:	af00      	add	r7, sp, #0
    212a:	60f8      	str	r0, [r7, #12]
	int buf_s = strlen(buffer);
    212c:	68fb      	ldr	r3, [r7, #12]
    212e:	0018      	movs	r0, r3
    2130:	4be4      	ldr	r3, [pc, #912]	; (24c4 <data_handler+0x3a0>)
    2132:	4798      	blx	r3
    2134:	0003      	movs	r3, r0
    2136:	657b      	str	r3, [r7, #84]	; 0x54
	if (strncmp(buffer,test_bob,3) == 0)
    2138:	49e3      	ldr	r1, [pc, #908]	; (24c8 <data_handler+0x3a4>)
    213a:	68fb      	ldr	r3, [r7, #12]
    213c:	2203      	movs	r2, #3
    213e:	0018      	movs	r0, r3
    2140:	4be2      	ldr	r3, [pc, #904]	; (24cc <data_handler+0x3a8>)
    2142:	4798      	blx	r3
    2144:	1e03      	subs	r3, r0, #0
    2146:	d132      	bne.n	21ae <data_handler+0x8a>
	{
		ble_uart_write("bob was found");
    2148:	4be1      	ldr	r3, [pc, #900]	; (24d0 <data_handler+0x3ac>)
    214a:	0018      	movs	r0, r3
    214c:	4be1      	ldr	r3, [pc, #900]	; (24d4 <data_handler+0x3b0>)
    214e:	4798      	blx	r3
		
		if (strlen(buffer) > strlen(test_bob))
    2150:	68fb      	ldr	r3, [r7, #12]
    2152:	0018      	movs	r0, r3
    2154:	4bdb      	ldr	r3, [pc, #876]	; (24c4 <data_handler+0x3a0>)
    2156:	4798      	blx	r3
    2158:	0004      	movs	r4, r0
    215a:	4bdb      	ldr	r3, [pc, #876]	; (24c8 <data_handler+0x3a4>)
    215c:	0018      	movs	r0, r3
    215e:	4bd9      	ldr	r3, [pc, #868]	; (24c4 <data_handler+0x3a0>)
    2160:	4798      	blx	r3
    2162:	0003      	movs	r3, r0
    2164:	429c      	cmp	r4, r3
    2166:	d922      	bls.n	21ae <data_handler+0x8a>
		{
			int arg1;
			sscanf(buffer,"PWM %d",&arg1);
    2168:	2348      	movs	r3, #72	; 0x48
    216a:	2208      	movs	r2, #8
    216c:	18ba      	adds	r2, r7, r2
    216e:	18d2      	adds	r2, r2, r3
    2170:	49d9      	ldr	r1, [pc, #868]	; (24d8 <data_handler+0x3b4>)
    2172:	68fb      	ldr	r3, [r7, #12]
    2174:	0018      	movs	r0, r3
    2176:	4bd9      	ldr	r3, [pc, #868]	; (24dc <data_handler+0x3b8>)
    2178:	4798      	blx	r3
			//arg1 = buffer[4]-'0';
			if (arg1 < 1)
    217a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    217c:	2b00      	cmp	r3, #0
    217e:	dc01      	bgt.n	2184 <data_handler+0x60>
			{
				arg1 = 1;
    2180:	2301      	movs	r3, #1
    2182:	653b      	str	r3, [r7, #80]	; 0x50
			}
			pwm_bob = arg1;
    2184:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2186:	4bd6      	ldr	r3, [pc, #856]	; (24e0 <data_handler+0x3bc>)
    2188:	601a      	str	r2, [r3, #0]
			char string_buffer[32];
			sprintf(string_buffer,": %d",arg1);
    218a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    218c:	49d5      	ldr	r1, [pc, #852]	; (24e4 <data_handler+0x3c0>)
    218e:	2308      	movs	r3, #8
    2190:	2008      	movs	r0, #8
    2192:	4684      	mov	ip, r0
    2194:	44bc      	add	ip, r7
    2196:	4463      	add	r3, ip
    2198:	0018      	movs	r0, r3
    219a:	4bd3      	ldr	r3, [pc, #844]	; (24e8 <data_handler+0x3c4>)
    219c:	4798      	blx	r3
			ble_uart_write(string_buffer);
    219e:	2308      	movs	r3, #8
    21a0:	2208      	movs	r2, #8
    21a2:	4694      	mov	ip, r2
    21a4:	44bc      	add	ip, r7
    21a6:	4463      	add	r3, ip
    21a8:	0018      	movs	r0, r3
    21aa:	4bca      	ldr	r3, [pc, #808]	; (24d4 <data_handler+0x3b0>)
    21ac:	4798      	blx	r3
		}
	}


	if(strncmp(buffer,FLASH_ALL_ON,4) == 0)
    21ae:	49cf      	ldr	r1, [pc, #828]	; (24ec <data_handler+0x3c8>)
    21b0:	68fb      	ldr	r3, [r7, #12]
    21b2:	2204      	movs	r2, #4
    21b4:	0018      	movs	r0, r3
    21b6:	4bc5      	ldr	r3, [pc, #788]	; (24cc <data_handler+0x3a8>)
    21b8:	4798      	blx	r3
    21ba:	1e03      	subs	r3, r0, #0
    21bc:	d17c      	bne.n	22b8 <data_handler+0x194>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    21be:	2301      	movs	r3, #1
    21c0:	2200      	movs	r2, #0
    21c2:	2101      	movs	r1, #1
    21c4:	2000      	movs	r0, #0
    21c6:	4cca      	ldr	r4, [pc, #808]	; (24f0 <data_handler+0x3cc>)
    21c8:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    21ca:	2301      	movs	r3, #1
    21cc:	2200      	movs	r2, #0
    21ce:	2102      	movs	r1, #2
    21d0:	2000      	movs	r0, #0
    21d2:	4cc7      	ldr	r4, [pc, #796]	; (24f0 <data_handler+0x3cc>)
    21d4:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    21d6:	2301      	movs	r3, #1
    21d8:	2200      	movs	r2, #0
    21da:	2103      	movs	r1, #3
    21dc:	2000      	movs	r0, #0
    21de:	4cc4      	ldr	r4, [pc, #784]	; (24f0 <data_handler+0x3cc>)
    21e0:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    21e2:	2301      	movs	r3, #1
    21e4:	2200      	movs	r2, #0
    21e6:	2104      	movs	r1, #4
    21e8:	2000      	movs	r0, #0
    21ea:	4cc1      	ldr	r4, [pc, #772]	; (24f0 <data_handler+0x3cc>)
    21ec:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,true);
    21ee:	2301      	movs	r3, #1
    21f0:	2201      	movs	r2, #1
    21f2:	2102      	movs	r1, #2
    21f4:	2000      	movs	r0, #0
    21f6:	4cbe      	ldr	r4, [pc, #760]	; (24f0 <data_handler+0x3cc>)
    21f8:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,true);
    21fa:	2301      	movs	r3, #1
    21fc:	2201      	movs	r2, #1
    21fe:	2101      	movs	r1, #1
    2200:	2000      	movs	r0, #0
    2202:	4cbb      	ldr	r4, [pc, #748]	; (24f0 <data_handler+0x3cc>)
    2204:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,true);
    2206:	2301      	movs	r3, #1
    2208:	2202      	movs	r2, #2
    220a:	2102      	movs	r1, #2
    220c:	2000      	movs	r0, #0
    220e:	4cb8      	ldr	r4, [pc, #736]	; (24f0 <data_handler+0x3cc>)
    2210:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,true);
    2212:	2301      	movs	r3, #1
    2214:	2202      	movs	r2, #2
    2216:	2101      	movs	r1, #1
    2218:	2000      	movs	r0, #0
    221a:	4cb5      	ldr	r4, [pc, #724]	; (24f0 <data_handler+0x3cc>)
    221c:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,true);
    221e:	2301      	movs	r3, #1
    2220:	2202      	movs	r2, #2
    2222:	2104      	movs	r1, #4
    2224:	2000      	movs	r0, #0
    2226:	4cb2      	ldr	r4, [pc, #712]	; (24f0 <data_handler+0x3cc>)
    2228:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,true);
    222a:	2301      	movs	r3, #1
    222c:	2202      	movs	r2, #2
    222e:	2103      	movs	r1, #3
    2230:	2000      	movs	r0, #0
    2232:	4caf      	ldr	r4, [pc, #700]	; (24f0 <data_handler+0x3cc>)
    2234:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,true);
    2236:	2301      	movs	r3, #1
    2238:	2201      	movs	r2, #1
    223a:	2103      	movs	r1, #3
    223c:	2000      	movs	r0, #0
    223e:	4cac      	ldr	r4, [pc, #688]	; (24f0 <data_handler+0x3cc>)
    2240:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,true);
    2242:	2301      	movs	r3, #1
    2244:	2201      	movs	r2, #1
    2246:	2104      	movs	r1, #4
    2248:	2000      	movs	r0, #0
    224a:	4ca9      	ldr	r4, [pc, #676]	; (24f0 <data_handler+0x3cc>)
    224c:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,true);
    224e:	2301      	movs	r3, #1
    2250:	2203      	movs	r2, #3
    2252:	2102      	movs	r1, #2
    2254:	2000      	movs	r0, #0
    2256:	4ca6      	ldr	r4, [pc, #664]	; (24f0 <data_handler+0x3cc>)
    2258:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,true);
    225a:	2301      	movs	r3, #1
    225c:	2203      	movs	r2, #3
    225e:	2101      	movs	r1, #1
    2260:	2000      	movs	r0, #0
    2262:	4ca3      	ldr	r4, [pc, #652]	; (24f0 <data_handler+0x3cc>)
    2264:	47a0      	blx	r4
		
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR, SUB_LEFT_PIN,true);
    2266:	2301      	movs	r3, #1
    2268:	2203      	movs	r2, #3
    226a:	2103      	movs	r1, #3
    226c:	2000      	movs	r0, #0
    226e:	4ca0      	ldr	r4, [pc, #640]	; (24f0 <data_handler+0x3cc>)
    2270:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR, SUB_RIGHT_PIN,true);
    2272:	2301      	movs	r3, #1
    2274:	2204      	movs	r2, #4
    2276:	2103      	movs	r1, #3
    2278:	2000      	movs	r0, #0
    227a:	4c9d      	ldr	r4, [pc, #628]	; (24f0 <data_handler+0x3cc>)
    227c:	47a0      	blx	r4
		
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,true);
    227e:	2301      	movs	r3, #1
    2280:	2204      	movs	r2, #4
    2282:	2101      	movs	r1, #1
    2284:	2000      	movs	r0, #0
    2286:	4c9a      	ldr	r4, [pc, #616]	; (24f0 <data_handler+0x3cc>)
    2288:	47a0      	blx	r4
		
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,true);
    228a:	2301      	movs	r3, #1
    228c:	2203      	movs	r2, #3
    228e:	2105      	movs	r1, #5
    2290:	2000      	movs	r0, #0
    2292:	4c97      	ldr	r4, [pc, #604]	; (24f0 <data_handler+0x3cc>)
    2294:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,true);
    2296:	2301      	movs	r3, #1
    2298:	2202      	movs	r2, #2
    229a:	2105      	movs	r1, #5
    229c:	2000      	movs	r0, #0
    229e:	4c94      	ldr	r4, [pc, #592]	; (24f0 <data_handler+0x3cc>)
    22a0:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,true);
    22a2:	2301      	movs	r3, #1
    22a4:	2204      	movs	r2, #4
    22a6:	2105      	movs	r1, #5
    22a8:	2000      	movs	r0, #0
    22aa:	4c91      	ldr	r4, [pc, #580]	; (24f0 <data_handler+0x3cc>)
    22ac:	47a0      	blx	r4
		
		flash_all = true;
    22ae:	4b91      	ldr	r3, [pc, #580]	; (24f4 <data_handler+0x3d0>)
    22b0:	2201      	movs	r2, #1
    22b2:	701a      	strb	r2, [r3, #0]
    22b4:	f000 fe13 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,FLASH_ALL_OFF,4) == 0)
    22b8:	498f      	ldr	r1, [pc, #572]	; (24f8 <data_handler+0x3d4>)
    22ba:	68fb      	ldr	r3, [r7, #12]
    22bc:	2204      	movs	r2, #4
    22be:	0018      	movs	r0, r3
    22c0:	4b82      	ldr	r3, [pc, #520]	; (24cc <data_handler+0x3a8>)
    22c2:	4798      	blx	r3
    22c4:	1e03      	subs	r3, r0, #0
    22c6:	d17c      	bne.n	23c2 <data_handler+0x29e>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    22c8:	2300      	movs	r3, #0
    22ca:	2200      	movs	r2, #0
    22cc:	2101      	movs	r1, #1
    22ce:	2000      	movs	r0, #0
    22d0:	4c87      	ldr	r4, [pc, #540]	; (24f0 <data_handler+0x3cc>)
    22d2:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    22d4:	2300      	movs	r3, #0
    22d6:	2200      	movs	r2, #0
    22d8:	2102      	movs	r1, #2
    22da:	2000      	movs	r0, #0
    22dc:	4c84      	ldr	r4, [pc, #528]	; (24f0 <data_handler+0x3cc>)
    22de:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    22e0:	2300      	movs	r3, #0
    22e2:	2200      	movs	r2, #0
    22e4:	2103      	movs	r1, #3
    22e6:	2000      	movs	r0, #0
    22e8:	4c81      	ldr	r4, [pc, #516]	; (24f0 <data_handler+0x3cc>)
    22ea:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    22ec:	2300      	movs	r3, #0
    22ee:	2200      	movs	r2, #0
    22f0:	2104      	movs	r1, #4
    22f2:	2000      	movs	r0, #0
    22f4:	4c7e      	ldr	r4, [pc, #504]	; (24f0 <data_handler+0x3cc>)
    22f6:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,false);
    22f8:	2300      	movs	r3, #0
    22fa:	2201      	movs	r2, #1
    22fc:	2102      	movs	r1, #2
    22fe:	2000      	movs	r0, #0
    2300:	4c7b      	ldr	r4, [pc, #492]	; (24f0 <data_handler+0x3cc>)
    2302:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,false);
    2304:	2300      	movs	r3, #0
    2306:	2201      	movs	r2, #1
    2308:	2101      	movs	r1, #1
    230a:	2000      	movs	r0, #0
    230c:	4c78      	ldr	r4, [pc, #480]	; (24f0 <data_handler+0x3cc>)
    230e:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,false);
    2310:	2300      	movs	r3, #0
    2312:	2202      	movs	r2, #2
    2314:	2102      	movs	r1, #2
    2316:	2000      	movs	r0, #0
    2318:	4c75      	ldr	r4, [pc, #468]	; (24f0 <data_handler+0x3cc>)
    231a:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,false);
    231c:	2300      	movs	r3, #0
    231e:	2202      	movs	r2, #2
    2320:	2101      	movs	r1, #1
    2322:	2000      	movs	r0, #0
    2324:	4c72      	ldr	r4, [pc, #456]	; (24f0 <data_handler+0x3cc>)
    2326:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,false);
    2328:	2300      	movs	r3, #0
    232a:	2202      	movs	r2, #2
    232c:	2104      	movs	r1, #4
    232e:	2000      	movs	r0, #0
    2330:	4c6f      	ldr	r4, [pc, #444]	; (24f0 <data_handler+0x3cc>)
    2332:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,false);
    2334:	2300      	movs	r3, #0
    2336:	2202      	movs	r2, #2
    2338:	2103      	movs	r1, #3
    233a:	2000      	movs	r0, #0
    233c:	4c6c      	ldr	r4, [pc, #432]	; (24f0 <data_handler+0x3cc>)
    233e:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,false);
    2340:	2300      	movs	r3, #0
    2342:	2201      	movs	r2, #1
    2344:	2103      	movs	r1, #3
    2346:	2000      	movs	r0, #0
    2348:	4c69      	ldr	r4, [pc, #420]	; (24f0 <data_handler+0x3cc>)
    234a:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,false);
    234c:	2300      	movs	r3, #0
    234e:	2201      	movs	r2, #1
    2350:	2104      	movs	r1, #4
    2352:	2000      	movs	r0, #0
    2354:	4c66      	ldr	r4, [pc, #408]	; (24f0 <data_handler+0x3cc>)
    2356:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,false);
    2358:	2300      	movs	r3, #0
    235a:	2203      	movs	r2, #3
    235c:	2102      	movs	r1, #2
    235e:	2000      	movs	r0, #0
    2360:	4c63      	ldr	r4, [pc, #396]	; (24f0 <data_handler+0x3cc>)
    2362:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,false);
    2364:	2300      	movs	r3, #0
    2366:	2203      	movs	r2, #3
    2368:	2101      	movs	r1, #1
    236a:	2000      	movs	r0, #0
    236c:	4c60      	ldr	r4, [pc, #384]	; (24f0 <data_handler+0x3cc>)
    236e:	47a0      	blx	r4
		
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR,SUB_LEFT_PIN,false);
    2370:	2300      	movs	r3, #0
    2372:	2203      	movs	r2, #3
    2374:	2103      	movs	r1, #3
    2376:	2000      	movs	r0, #0
    2378:	4c5d      	ldr	r4, [pc, #372]	; (24f0 <data_handler+0x3cc>)
    237a:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR,SUB_RIGHT_PIN,false);
    237c:	2300      	movs	r3, #0
    237e:	2204      	movs	r2, #4
    2380:	2103      	movs	r1, #3
    2382:	2000      	movs	r0, #0
    2384:	4c5a      	ldr	r4, [pc, #360]	; (24f0 <data_handler+0x3cc>)
    2386:	47a0      	blx	r4
		
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,false);
    2388:	2300      	movs	r3, #0
    238a:	2204      	movs	r2, #4
    238c:	2101      	movs	r1, #1
    238e:	2000      	movs	r0, #0
    2390:	4c57      	ldr	r4, [pc, #348]	; (24f0 <data_handler+0x3cc>)
    2392:	47a0      	blx	r4
		
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,false);
    2394:	2300      	movs	r3, #0
    2396:	2203      	movs	r2, #3
    2398:	2105      	movs	r1, #5
    239a:	2000      	movs	r0, #0
    239c:	4c54      	ldr	r4, [pc, #336]	; (24f0 <data_handler+0x3cc>)
    239e:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,false);
    23a0:	2300      	movs	r3, #0
    23a2:	2202      	movs	r2, #2
    23a4:	2105      	movs	r1, #5
    23a6:	2000      	movs	r0, #0
    23a8:	4c51      	ldr	r4, [pc, #324]	; (24f0 <data_handler+0x3cc>)
    23aa:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,false);
    23ac:	2300      	movs	r3, #0
    23ae:	2204      	movs	r2, #4
    23b0:	2105      	movs	r1, #5
    23b2:	2000      	movs	r0, #0
    23b4:	4c4e      	ldr	r4, [pc, #312]	; (24f0 <data_handler+0x3cc>)
    23b6:	47a0      	blx	r4
		
		flash_all = false;
    23b8:	4b4e      	ldr	r3, [pc, #312]	; (24f4 <data_handler+0x3d0>)
    23ba:	2200      	movs	r2, #0
    23bc:	701a      	strb	r2, [r3, #0]
    23be:	f000 fd8e 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,BLINK_ALL_ON,5) == 0)
    23c2:	494e      	ldr	r1, [pc, #312]	; (24fc <data_handler+0x3d8>)
    23c4:	68fb      	ldr	r3, [r7, #12]
    23c6:	2205      	movs	r2, #5
    23c8:	0018      	movs	r0, r3
    23ca:	4b40      	ldr	r3, [pc, #256]	; (24cc <data_handler+0x3a8>)
    23cc:	4798      	blx	r3
    23ce:	1e03      	subs	r3, r0, #0
    23d0:	d10a      	bne.n	23e8 <data_handler+0x2c4>
	{
		blink_left = true;
    23d2:	4b4b      	ldr	r3, [pc, #300]	; (2500 <data_handler+0x3dc>)
    23d4:	2201      	movs	r2, #1
    23d6:	701a      	strb	r2, [r3, #0]
		blink_right = true;
    23d8:	4b4a      	ldr	r3, [pc, #296]	; (2504 <data_handler+0x3e0>)
    23da:	2201      	movs	r2, #1
    23dc:	701a      	strb	r2, [r3, #0]
		blink_all = true;
    23de:	4b4a      	ldr	r3, [pc, #296]	; (2508 <data_handler+0x3e4>)
    23e0:	2201      	movs	r2, #1
    23e2:	701a      	strb	r2, [r3, #0]
    23e4:	f000 fd7b 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,BLINK_ALL_OFF,5) == 0)
    23e8:	4948      	ldr	r1, [pc, #288]	; (250c <data_handler+0x3e8>)
    23ea:	68fb      	ldr	r3, [r7, #12]
    23ec:	2205      	movs	r2, #5
    23ee:	0018      	movs	r0, r3
    23f0:	4b36      	ldr	r3, [pc, #216]	; (24cc <data_handler+0x3a8>)
    23f2:	4798      	blx	r3
    23f4:	1e03      	subs	r3, r0, #0
    23f6:	d10a      	bne.n	240e <data_handler+0x2ea>
	{
		blink_left = false;
    23f8:	4b41      	ldr	r3, [pc, #260]	; (2500 <data_handler+0x3dc>)
    23fa:	2200      	movs	r2, #0
    23fc:	701a      	strb	r2, [r3, #0]
		blink_right = false;
    23fe:	4b41      	ldr	r3, [pc, #260]	; (2504 <data_handler+0x3e0>)
    2400:	2200      	movs	r2, #0
    2402:	701a      	strb	r2, [r3, #0]
		blink_all = false;
    2404:	4b40      	ldr	r3, [pc, #256]	; (2508 <data_handler+0x3e4>)
    2406:	2200      	movs	r2, #0
    2408:	701a      	strb	r2, [r3, #0]
    240a:	f000 fd68 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,BLINK_LEFT_ON,5) == 0)
    240e:	4940      	ldr	r1, [pc, #256]	; (2510 <data_handler+0x3ec>)
    2410:	68fb      	ldr	r3, [r7, #12]
    2412:	2205      	movs	r2, #5
    2414:	0018      	movs	r0, r3
    2416:	4b2d      	ldr	r3, [pc, #180]	; (24cc <data_handler+0x3a8>)
    2418:	4798      	blx	r3
    241a:	1e03      	subs	r3, r0, #0
    241c:	d104      	bne.n	2428 <data_handler+0x304>
	{
		blink_left = true;
    241e:	4b38      	ldr	r3, [pc, #224]	; (2500 <data_handler+0x3dc>)
    2420:	2201      	movs	r2, #1
    2422:	701a      	strb	r2, [r3, #0]
    2424:	f000 fd5b 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,BLINK_LEFT_OFF,5) == 0)
    2428:	493a      	ldr	r1, [pc, #232]	; (2514 <data_handler+0x3f0>)
    242a:	68fb      	ldr	r3, [r7, #12]
    242c:	2205      	movs	r2, #5
    242e:	0018      	movs	r0, r3
    2430:	4b26      	ldr	r3, [pc, #152]	; (24cc <data_handler+0x3a8>)
    2432:	4798      	blx	r3
    2434:	1e03      	subs	r3, r0, #0
    2436:	d104      	bne.n	2442 <data_handler+0x31e>
	{
		blink_left = false;
    2438:	4b31      	ldr	r3, [pc, #196]	; (2500 <data_handler+0x3dc>)
    243a:	2200      	movs	r2, #0
    243c:	701a      	strb	r2, [r3, #0]
    243e:	f000 fd4e 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,BLINK_RIGHT_ON,5) == 0)
    2442:	4935      	ldr	r1, [pc, #212]	; (2518 <data_handler+0x3f4>)
    2444:	68fb      	ldr	r3, [r7, #12]
    2446:	2205      	movs	r2, #5
    2448:	0018      	movs	r0, r3
    244a:	4b20      	ldr	r3, [pc, #128]	; (24cc <data_handler+0x3a8>)
    244c:	4798      	blx	r3
    244e:	1e03      	subs	r3, r0, #0
    2450:	d104      	bne.n	245c <data_handler+0x338>
	{
		blink_right = true;
    2452:	4b2c      	ldr	r3, [pc, #176]	; (2504 <data_handler+0x3e0>)
    2454:	2201      	movs	r2, #1
    2456:	701a      	strb	r2, [r3, #0]
    2458:	f000 fd41 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,BLINK_RIGHT_OFF,5) == 0)
    245c:	492f      	ldr	r1, [pc, #188]	; (251c <data_handler+0x3f8>)
    245e:	68fb      	ldr	r3, [r7, #12]
    2460:	2205      	movs	r2, #5
    2462:	0018      	movs	r0, r3
    2464:	4b19      	ldr	r3, [pc, #100]	; (24cc <data_handler+0x3a8>)
    2466:	4798      	blx	r3
    2468:	1e03      	subs	r3, r0, #0
    246a:	d104      	bne.n	2476 <data_handler+0x352>
	{
		blink_right = false;
    246c:	4b25      	ldr	r3, [pc, #148]	; (2504 <data_handler+0x3e0>)
    246e:	2200      	movs	r2, #0
    2470:	701a      	strb	r2, [r3, #0]
    2472:	f000 fd34 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,HORN_0_ON,6) == 0)
    2476:	492a      	ldr	r1, [pc, #168]	; (2520 <data_handler+0x3fc>)
    2478:	68fb      	ldr	r3, [r7, #12]
    247a:	2206      	movs	r2, #6
    247c:	0018      	movs	r0, r3
    247e:	4b13      	ldr	r3, [pc, #76]	; (24cc <data_handler+0x3a8>)
    2480:	4798      	blx	r3
    2482:	1e03      	subs	r3, r0, #0
    2484:	d104      	bne.n	2490 <data_handler+0x36c>
	{
		horn0 = true;
    2486:	4b27      	ldr	r3, [pc, #156]	; (2524 <data_handler+0x400>)
    2488:	2201      	movs	r2, #1
    248a:	701a      	strb	r2, [r3, #0]
    248c:	f000 fd27 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,HORN_0_OFF,6) == 0)
    2490:	4925      	ldr	r1, [pc, #148]	; (2528 <data_handler+0x404>)
    2492:	68fb      	ldr	r3, [r7, #12]
    2494:	2206      	movs	r2, #6
    2496:	0018      	movs	r0, r3
    2498:	4b0c      	ldr	r3, [pc, #48]	; (24cc <data_handler+0x3a8>)
    249a:	4798      	blx	r3
    249c:	1e03      	subs	r3, r0, #0
    249e:	d104      	bne.n	24aa <data_handler+0x386>
	{
		horn0 = false;
    24a0:	4b20      	ldr	r3, [pc, #128]	; (2524 <data_handler+0x400>)
    24a2:	2200      	movs	r2, #0
    24a4:	701a      	strb	r2, [r3, #0]
    24a6:	f000 fd1a 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,HORN_1_ON,6) == 0)
    24aa:	4920      	ldr	r1, [pc, #128]	; (252c <data_handler+0x408>)
    24ac:	68fb      	ldr	r3, [r7, #12]
    24ae:	2206      	movs	r2, #6
    24b0:	0018      	movs	r0, r3
    24b2:	4b06      	ldr	r3, [pc, #24]	; (24cc <data_handler+0x3a8>)
    24b4:	4798      	blx	r3
    24b6:	1e03      	subs	r3, r0, #0
    24b8:	d13c      	bne.n	2534 <data_handler+0x410>
	{
		horn1 = true;
    24ba:	4b1d      	ldr	r3, [pc, #116]	; (2530 <data_handler+0x40c>)
    24bc:	2201      	movs	r2, #1
    24be:	701a      	strb	r2, [r3, #0]
    24c0:	f000 fd0d 	bl	2ede <data_handler+0xdba>
    24c4:	00008361 	.word	0x00008361
    24c8:	2000000c 	.word	0x2000000c
    24cc:	0000836f 	.word	0x0000836f
    24d0:	00009634 	.word	0x00009634
    24d4:	0000202d 	.word	0x0000202d
    24d8:	00009644 	.word	0x00009644
    24dc:	0000830d 	.word	0x0000830d
    24e0:	200002ec 	.word	0x200002ec
    24e4:	0000964c 	.word	0x0000964c
    24e8:	000082c9 	.word	0x000082c9
    24ec:	00009654 	.word	0x00009654
    24f0:	00003b05 	.word	0x00003b05
    24f4:	2000025e 	.word	0x2000025e
    24f8:	0000965c 	.word	0x0000965c
    24fc:	00009664 	.word	0x00009664
    2500:	200001ad 	.word	0x200001ad
    2504:	2000025d 	.word	0x2000025d
    2508:	2000025a 	.word	0x2000025a
    250c:	0000966c 	.word	0x0000966c
    2510:	00009674 	.word	0x00009674
    2514:	0000967c 	.word	0x0000967c
    2518:	00009684 	.word	0x00009684
    251c:	0000968c 	.word	0x0000968c
    2520:	00009694 	.word	0x00009694
    2524:	20000260 	.word	0x20000260
    2528:	0000969c 	.word	0x0000969c
    252c:	000096a4 	.word	0x000096a4
    2530:	200001ae 	.word	0x200001ae
	}
	else if(strncmp(buffer,HORN_1_OFF,6) == 0)
    2534:	49c9      	ldr	r1, [pc, #804]	; (285c <data_handler+0x738>)
    2536:	68fb      	ldr	r3, [r7, #12]
    2538:	2206      	movs	r2, #6
    253a:	0018      	movs	r0, r3
    253c:	4bc8      	ldr	r3, [pc, #800]	; (2860 <data_handler+0x73c>)
    253e:	4798      	blx	r3
    2540:	1e03      	subs	r3, r0, #0
    2542:	d104      	bne.n	254e <data_handler+0x42a>
	{
		horn1 = false;
    2544:	4bc7      	ldr	r3, [pc, #796]	; (2864 <data_handler+0x740>)
    2546:	2200      	movs	r2, #0
    2548:	701a      	strb	r2, [r3, #0]
    254a:	f000 fcc8 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,HORN_2_ON,6) == 0)
    254e:	49c6      	ldr	r1, [pc, #792]	; (2868 <data_handler+0x744>)
    2550:	68fb      	ldr	r3, [r7, #12]
    2552:	2206      	movs	r2, #6
    2554:	0018      	movs	r0, r3
    2556:	4bc2      	ldr	r3, [pc, #776]	; (2860 <data_handler+0x73c>)
    2558:	4798      	blx	r3
    255a:	1e03      	subs	r3, r0, #0
    255c:	d104      	bne.n	2568 <data_handler+0x444>
	{
		horn2 = true;
    255e:	4bc3      	ldr	r3, [pc, #780]	; (286c <data_handler+0x748>)
    2560:	2201      	movs	r2, #1
    2562:	701a      	strb	r2, [r3, #0]
    2564:	f000 fcbb 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,HORN_2_OFF,6) == 0)
    2568:	49c1      	ldr	r1, [pc, #772]	; (2870 <data_handler+0x74c>)
    256a:	68fb      	ldr	r3, [r7, #12]
    256c:	2206      	movs	r2, #6
    256e:	0018      	movs	r0, r3
    2570:	4bbb      	ldr	r3, [pc, #748]	; (2860 <data_handler+0x73c>)
    2572:	4798      	blx	r3
    2574:	1e03      	subs	r3, r0, #0
    2576:	d104      	bne.n	2582 <data_handler+0x45e>
	{
		horn2 = false;
    2578:	4bbc      	ldr	r3, [pc, #752]	; (286c <data_handler+0x748>)
    257a:	2200      	movs	r2, #0
    257c:	701a      	strb	r2, [r3, #0]
    257e:	f000 fcae 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,HORN_3_ON,6) == 0)
    2582:	49bc      	ldr	r1, [pc, #752]	; (2874 <data_handler+0x750>)
    2584:	68fb      	ldr	r3, [r7, #12]
    2586:	2206      	movs	r2, #6
    2588:	0018      	movs	r0, r3
    258a:	4bb5      	ldr	r3, [pc, #724]	; (2860 <data_handler+0x73c>)
    258c:	4798      	blx	r3
    258e:	1e03      	subs	r3, r0, #0
    2590:	d104      	bne.n	259c <data_handler+0x478>
	{
		horn3 = true;
    2592:	4bb9      	ldr	r3, [pc, #740]	; (2878 <data_handler+0x754>)
    2594:	2201      	movs	r2, #1
    2596:	701a      	strb	r2, [r3, #0]
    2598:	f000 fca1 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,HORN_3_OFF,6) == 0)
    259c:	49b7      	ldr	r1, [pc, #732]	; (287c <data_handler+0x758>)
    259e:	68fb      	ldr	r3, [r7, #12]
    25a0:	2206      	movs	r2, #6
    25a2:	0018      	movs	r0, r3
    25a4:	4bae      	ldr	r3, [pc, #696]	; (2860 <data_handler+0x73c>)
    25a6:	4798      	blx	r3
    25a8:	1e03      	subs	r3, r0, #0
    25aa:	d104      	bne.n	25b6 <data_handler+0x492>
	{
		horn3 = false;
    25ac:	4bb2      	ldr	r3, [pc, #712]	; (2878 <data_handler+0x754>)
    25ae:	2200      	movs	r2, #0
    25b0:	701a      	strb	r2, [r3, #0]
    25b2:	f000 fc94 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_0_ON,6) == 0)
    25b6:	49b2      	ldr	r1, [pc, #712]	; (2880 <data_handler+0x75c>)
    25b8:	68fb      	ldr	r3, [r7, #12]
    25ba:	2206      	movs	r2, #6
    25bc:	0018      	movs	r0, r3
    25be:	4ba8      	ldr	r3, [pc, #672]	; (2860 <data_handler+0x73c>)
    25c0:	4798      	blx	r3
    25c2:	1e03      	subs	r3, r0, #0
    25c4:	d104      	bne.n	25d0 <data_handler+0x4ac>
	{
		press_sb_btn_once(SB_PIN_BTN00);
    25c6:	200b      	movs	r0, #11
    25c8:	4bae      	ldr	r3, [pc, #696]	; (2884 <data_handler+0x760>)
    25ca:	4798      	blx	r3
    25cc:	f000 fc87 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_0_OFF,6) == 0)
    25d0:	49ad      	ldr	r1, [pc, #692]	; (2888 <data_handler+0x764>)
    25d2:	68fb      	ldr	r3, [r7, #12]
    25d4:	2206      	movs	r2, #6
    25d6:	0018      	movs	r0, r3
    25d8:	4ba1      	ldr	r3, [pc, #644]	; (2860 <data_handler+0x73c>)
    25da:	4798      	blx	r3
    25dc:	1e03      	subs	r3, r0, #0
    25de:	d104      	bne.n	25ea <data_handler+0x4c6>
	{
		release_sb_btn(SB_PIN_BTN00);
    25e0:	200b      	movs	r0, #11
    25e2:	4baa      	ldr	r3, [pc, #680]	; (288c <data_handler+0x768>)
    25e4:	4798      	blx	r3
    25e6:	f000 fc7a 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_1_ON,6) == 0)
    25ea:	49a9      	ldr	r1, [pc, #676]	; (2890 <data_handler+0x76c>)
    25ec:	68fb      	ldr	r3, [r7, #12]
    25ee:	2206      	movs	r2, #6
    25f0:	0018      	movs	r0, r3
    25f2:	4b9b      	ldr	r3, [pc, #620]	; (2860 <data_handler+0x73c>)
    25f4:	4798      	blx	r3
    25f6:	1e03      	subs	r3, r0, #0
    25f8:	d104      	bne.n	2604 <data_handler+0x4e0>
	{
		press_sb_btn_once(SB_PIN_BTN01);
    25fa:	200c      	movs	r0, #12
    25fc:	4ba1      	ldr	r3, [pc, #644]	; (2884 <data_handler+0x760>)
    25fe:	4798      	blx	r3
    2600:	f000 fc6d 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_1_OFF,6) == 0)
    2604:	49a3      	ldr	r1, [pc, #652]	; (2894 <data_handler+0x770>)
    2606:	68fb      	ldr	r3, [r7, #12]
    2608:	2206      	movs	r2, #6
    260a:	0018      	movs	r0, r3
    260c:	4b94      	ldr	r3, [pc, #592]	; (2860 <data_handler+0x73c>)
    260e:	4798      	blx	r3
    2610:	1e03      	subs	r3, r0, #0
    2612:	d104      	bne.n	261e <data_handler+0x4fa>
	{
		release_sb_btn(SB_PIN_BTN01);
    2614:	200c      	movs	r0, #12
    2616:	4b9d      	ldr	r3, [pc, #628]	; (288c <data_handler+0x768>)
    2618:	4798      	blx	r3
    261a:	f000 fc60 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_2_ON,6) == 0)
    261e:	499e      	ldr	r1, [pc, #632]	; (2898 <data_handler+0x774>)
    2620:	68fb      	ldr	r3, [r7, #12]
    2622:	2206      	movs	r2, #6
    2624:	0018      	movs	r0, r3
    2626:	4b8e      	ldr	r3, [pc, #568]	; (2860 <data_handler+0x73c>)
    2628:	4798      	blx	r3
    262a:	1e03      	subs	r3, r0, #0
    262c:	d104      	bne.n	2638 <data_handler+0x514>
	{
		press_sb_btn_once(SB_PIN_BTN02);
    262e:	200d      	movs	r0, #13
    2630:	4b94      	ldr	r3, [pc, #592]	; (2884 <data_handler+0x760>)
    2632:	4798      	blx	r3
    2634:	f000 fc53 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_2_OFF,6) == 0)
    2638:	4998      	ldr	r1, [pc, #608]	; (289c <data_handler+0x778>)
    263a:	68fb      	ldr	r3, [r7, #12]
    263c:	2206      	movs	r2, #6
    263e:	0018      	movs	r0, r3
    2640:	4b87      	ldr	r3, [pc, #540]	; (2860 <data_handler+0x73c>)
    2642:	4798      	blx	r3
    2644:	1e03      	subs	r3, r0, #0
    2646:	d104      	bne.n	2652 <data_handler+0x52e>
	{
		release_sb_btn(SB_PIN_BTN02);
    2648:	200d      	movs	r0, #13
    264a:	4b90      	ldr	r3, [pc, #576]	; (288c <data_handler+0x768>)
    264c:	4798      	blx	r3
    264e:	f000 fc46 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_3_ON,6) == 0)
    2652:	4993      	ldr	r1, [pc, #588]	; (28a0 <data_handler+0x77c>)
    2654:	68fb      	ldr	r3, [r7, #12]
    2656:	2206      	movs	r2, #6
    2658:	0018      	movs	r0, r3
    265a:	4b81      	ldr	r3, [pc, #516]	; (2860 <data_handler+0x73c>)
    265c:	4798      	blx	r3
    265e:	1e03      	subs	r3, r0, #0
    2660:	d104      	bne.n	266c <data_handler+0x548>
	{
		press_sb_btn_once(SB_PIN_BTN03);
    2662:	200e      	movs	r0, #14
    2664:	4b87      	ldr	r3, [pc, #540]	; (2884 <data_handler+0x760>)
    2666:	4798      	blx	r3
    2668:	f000 fc39 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_3_OFF,6) == 0)
    266c:	498d      	ldr	r1, [pc, #564]	; (28a4 <data_handler+0x780>)
    266e:	68fb      	ldr	r3, [r7, #12]
    2670:	2206      	movs	r2, #6
    2672:	0018      	movs	r0, r3
    2674:	4b7a      	ldr	r3, [pc, #488]	; (2860 <data_handler+0x73c>)
    2676:	4798      	blx	r3
    2678:	1e03      	subs	r3, r0, #0
    267a:	d104      	bne.n	2686 <data_handler+0x562>
	{
		release_sb_btn(SB_PIN_BTN03);
    267c:	200e      	movs	r0, #14
    267e:	4b83      	ldr	r3, [pc, #524]	; (288c <data_handler+0x768>)
    2680:	4798      	blx	r3
    2682:	f000 fc2c 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_4_ON,6) == 0)
    2686:	4988      	ldr	r1, [pc, #544]	; (28a8 <data_handler+0x784>)
    2688:	68fb      	ldr	r3, [r7, #12]
    268a:	2206      	movs	r2, #6
    268c:	0018      	movs	r0, r3
    268e:	4b74      	ldr	r3, [pc, #464]	; (2860 <data_handler+0x73c>)
    2690:	4798      	blx	r3
    2692:	1e03      	subs	r3, r0, #0
    2694:	d104      	bne.n	26a0 <data_handler+0x57c>
	{
		press_sb_btn_once(SB_PIN_BTN04);
    2696:	200f      	movs	r0, #15
    2698:	4b7a      	ldr	r3, [pc, #488]	; (2884 <data_handler+0x760>)
    269a:	4798      	blx	r3
    269c:	f000 fc1f 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_4_OFF,6) == 0)
    26a0:	4982      	ldr	r1, [pc, #520]	; (28ac <data_handler+0x788>)
    26a2:	68fb      	ldr	r3, [r7, #12]
    26a4:	2206      	movs	r2, #6
    26a6:	0018      	movs	r0, r3
    26a8:	4b6d      	ldr	r3, [pc, #436]	; (2860 <data_handler+0x73c>)
    26aa:	4798      	blx	r3
    26ac:	1e03      	subs	r3, r0, #0
    26ae:	d104      	bne.n	26ba <data_handler+0x596>
	{
		release_sb_btn(SB_PIN_BTN04);
    26b0:	200f      	movs	r0, #15
    26b2:	4b76      	ldr	r3, [pc, #472]	; (288c <data_handler+0x768>)
    26b4:	4798      	blx	r3
    26b6:	f000 fc12 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_5_ON,6) == 0)
    26ba:	497d      	ldr	r1, [pc, #500]	; (28b0 <data_handler+0x78c>)
    26bc:	68fb      	ldr	r3, [r7, #12]
    26be:	2206      	movs	r2, #6
    26c0:	0018      	movs	r0, r3
    26c2:	4b67      	ldr	r3, [pc, #412]	; (2860 <data_handler+0x73c>)
    26c4:	4798      	blx	r3
    26c6:	1e03      	subs	r3, r0, #0
    26c8:	d104      	bne.n	26d4 <data_handler+0x5b0>
	{
		press_sb_btn_once(SB_PIN_BTN05);
    26ca:	2010      	movs	r0, #16
    26cc:	4b6d      	ldr	r3, [pc, #436]	; (2884 <data_handler+0x760>)
    26ce:	4798      	blx	r3
    26d0:	f000 fc05 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_5_OFF,6) == 0)
    26d4:	4977      	ldr	r1, [pc, #476]	; (28b4 <data_handler+0x790>)
    26d6:	68fb      	ldr	r3, [r7, #12]
    26d8:	2206      	movs	r2, #6
    26da:	0018      	movs	r0, r3
    26dc:	4b60      	ldr	r3, [pc, #384]	; (2860 <data_handler+0x73c>)
    26de:	4798      	blx	r3
    26e0:	1e03      	subs	r3, r0, #0
    26e2:	d104      	bne.n	26ee <data_handler+0x5ca>
	{
		release_sb_btn(SB_PIN_BTN05);
    26e4:	2010      	movs	r0, #16
    26e6:	4b69      	ldr	r3, [pc, #420]	; (288c <data_handler+0x768>)
    26e8:	4798      	blx	r3
    26ea:	f000 fbf8 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_6_ON,6) == 0)
    26ee:	4972      	ldr	r1, [pc, #456]	; (28b8 <data_handler+0x794>)
    26f0:	68fb      	ldr	r3, [r7, #12]
    26f2:	2206      	movs	r2, #6
    26f4:	0018      	movs	r0, r3
    26f6:	4b5a      	ldr	r3, [pc, #360]	; (2860 <data_handler+0x73c>)
    26f8:	4798      	blx	r3
    26fa:	1e03      	subs	r3, r0, #0
    26fc:	d104      	bne.n	2708 <data_handler+0x5e4>
	{
		press_sb_btn_once(SB_PIN_BTN06);
    26fe:	2011      	movs	r0, #17
    2700:	4b60      	ldr	r3, [pc, #384]	; (2884 <data_handler+0x760>)
    2702:	4798      	blx	r3
    2704:	f000 fbeb 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_6_OFF,6) == 0)
    2708:	496c      	ldr	r1, [pc, #432]	; (28bc <data_handler+0x798>)
    270a:	68fb      	ldr	r3, [r7, #12]
    270c:	2206      	movs	r2, #6
    270e:	0018      	movs	r0, r3
    2710:	4b53      	ldr	r3, [pc, #332]	; (2860 <data_handler+0x73c>)
    2712:	4798      	blx	r3
    2714:	1e03      	subs	r3, r0, #0
    2716:	d104      	bne.n	2722 <data_handler+0x5fe>
	{
		release_sb_btn(SB_PIN_BTN06);
    2718:	2011      	movs	r0, #17
    271a:	4b5c      	ldr	r3, [pc, #368]	; (288c <data_handler+0x768>)
    271c:	4798      	blx	r3
    271e:	f000 fbde 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_7_ON,6) == 0)
    2722:	4967      	ldr	r1, [pc, #412]	; (28c0 <data_handler+0x79c>)
    2724:	68fb      	ldr	r3, [r7, #12]
    2726:	2206      	movs	r2, #6
    2728:	0018      	movs	r0, r3
    272a:	4b4d      	ldr	r3, [pc, #308]	; (2860 <data_handler+0x73c>)
    272c:	4798      	blx	r3
    272e:	1e03      	subs	r3, r0, #0
    2730:	d104      	bne.n	273c <data_handler+0x618>
	{
		press_sb_btn_once(SB_PIN_BTN07);
    2732:	2012      	movs	r0, #18
    2734:	4b53      	ldr	r3, [pc, #332]	; (2884 <data_handler+0x760>)
    2736:	4798      	blx	r3
    2738:	f000 fbd1 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_7_OFF,6) == 0)
    273c:	4961      	ldr	r1, [pc, #388]	; (28c4 <data_handler+0x7a0>)
    273e:	68fb      	ldr	r3, [r7, #12]
    2740:	2206      	movs	r2, #6
    2742:	0018      	movs	r0, r3
    2744:	4b46      	ldr	r3, [pc, #280]	; (2860 <data_handler+0x73c>)
    2746:	4798      	blx	r3
    2748:	1e03      	subs	r3, r0, #0
    274a:	d104      	bne.n	2756 <data_handler+0x632>
	{
		release_sb_btn(SB_PIN_BTN07);
    274c:	2012      	movs	r0, #18
    274e:	4b4f      	ldr	r3, [pc, #316]	; (288c <data_handler+0x768>)
    2750:	4798      	blx	r3
    2752:	f000 fbc4 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_8_ON,6) == 0)
    2756:	495c      	ldr	r1, [pc, #368]	; (28c8 <data_handler+0x7a4>)
    2758:	68fb      	ldr	r3, [r7, #12]
    275a:	2206      	movs	r2, #6
    275c:	0018      	movs	r0, r3
    275e:	4b40      	ldr	r3, [pc, #256]	; (2860 <data_handler+0x73c>)
    2760:	4798      	blx	r3
    2762:	1e03      	subs	r3, r0, #0
    2764:	d104      	bne.n	2770 <data_handler+0x64c>
	{
		press_sb_btn_once(SB_PIN_BTN08);
    2766:	2013      	movs	r0, #19
    2768:	4b46      	ldr	r3, [pc, #280]	; (2884 <data_handler+0x760>)
    276a:	4798      	blx	r3
    276c:	f000 fbb7 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_8_OFF,6) == 0)
    2770:	4956      	ldr	r1, [pc, #344]	; (28cc <data_handler+0x7a8>)
    2772:	68fb      	ldr	r3, [r7, #12]
    2774:	2206      	movs	r2, #6
    2776:	0018      	movs	r0, r3
    2778:	4b39      	ldr	r3, [pc, #228]	; (2860 <data_handler+0x73c>)
    277a:	4798      	blx	r3
    277c:	1e03      	subs	r3, r0, #0
    277e:	d104      	bne.n	278a <data_handler+0x666>
	{
		release_sb_btn(SB_PIN_BTN08);
    2780:	2013      	movs	r0, #19
    2782:	4b42      	ldr	r3, [pc, #264]	; (288c <data_handler+0x768>)
    2784:	4798      	blx	r3
    2786:	f000 fbaa 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_9_ON,6) == 0)
    278a:	4951      	ldr	r1, [pc, #324]	; (28d0 <data_handler+0x7ac>)
    278c:	68fb      	ldr	r3, [r7, #12]
    278e:	2206      	movs	r2, #6
    2790:	0018      	movs	r0, r3
    2792:	4b33      	ldr	r3, [pc, #204]	; (2860 <data_handler+0x73c>)
    2794:	4798      	blx	r3
    2796:	1e03      	subs	r3, r0, #0
    2798:	d104      	bne.n	27a4 <data_handler+0x680>
	{
		press_sb_btn_once(SB_PIN_BTN09);
    279a:	2014      	movs	r0, #20
    279c:	4b39      	ldr	r3, [pc, #228]	; (2884 <data_handler+0x760>)
    279e:	4798      	blx	r3
    27a0:	f000 fb9d 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_9_OFF,6) == 0)
    27a4:	494b      	ldr	r1, [pc, #300]	; (28d4 <data_handler+0x7b0>)
    27a6:	68fb      	ldr	r3, [r7, #12]
    27a8:	2206      	movs	r2, #6
    27aa:	0018      	movs	r0, r3
    27ac:	4b2c      	ldr	r3, [pc, #176]	; (2860 <data_handler+0x73c>)
    27ae:	4798      	blx	r3
    27b0:	1e03      	subs	r3, r0, #0
    27b2:	d104      	bne.n	27be <data_handler+0x69a>
	{
		release_sb_btn(SB_PIN_BTN09);
    27b4:	2014      	movs	r0, #20
    27b6:	4b35      	ldr	r3, [pc, #212]	; (288c <data_handler+0x768>)
    27b8:	4798      	blx	r3
    27ba:	f000 fb90 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_10_ON,6) == 0)
    27be:	4946      	ldr	r1, [pc, #280]	; (28d8 <data_handler+0x7b4>)
    27c0:	68fb      	ldr	r3, [r7, #12]
    27c2:	2206      	movs	r2, #6
    27c4:	0018      	movs	r0, r3
    27c6:	4b26      	ldr	r3, [pc, #152]	; (2860 <data_handler+0x73c>)
    27c8:	4798      	blx	r3
    27ca:	1e03      	subs	r3, r0, #0
    27cc:	d104      	bne.n	27d8 <data_handler+0x6b4>
	{
		press_sb_btn_once(SB_PIN_BTN10);
    27ce:	2015      	movs	r0, #21
    27d0:	4b2c      	ldr	r3, [pc, #176]	; (2884 <data_handler+0x760>)
    27d2:	4798      	blx	r3
    27d4:	f000 fb83 	bl	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_10_OFF,6) == 0)
    27d8:	4940      	ldr	r1, [pc, #256]	; (28dc <data_handler+0x7b8>)
    27da:	68fb      	ldr	r3, [r7, #12]
    27dc:	2206      	movs	r2, #6
    27de:	0018      	movs	r0, r3
    27e0:	4b1f      	ldr	r3, [pc, #124]	; (2860 <data_handler+0x73c>)
    27e2:	4798      	blx	r3
    27e4:	1e03      	subs	r3, r0, #0
    27e6:	d103      	bne.n	27f0 <data_handler+0x6cc>
	{
		release_sb_btn(SB_PIN_BTN10);
    27e8:	2015      	movs	r0, #21
    27ea:	4b28      	ldr	r3, [pc, #160]	; (288c <data_handler+0x768>)
    27ec:	4798      	blx	r3
    27ee:	e376      	b.n	2ede <data_handler+0xdba>
	}
	else if (strncmp(buffer,SOUND_RESET,sizeof(SOUND_RESET)-1))
    27f0:	493b      	ldr	r1, [pc, #236]	; (28e0 <data_handler+0x7bc>)
    27f2:	68fb      	ldr	r3, [r7, #12]
    27f4:	2208      	movs	r2, #8
    27f6:	0018      	movs	r0, r3
    27f8:	4b19      	ldr	r3, [pc, #100]	; (2860 <data_handler+0x73c>)
    27fa:	4798      	blx	r3
    27fc:	1e03      	subs	r3, r0, #0
    27fe:	d006      	beq.n	280e <data_handler+0x6ea>
	{
		ble_uart_write("SB: RESETTING");
    2800:	4b38      	ldr	r3, [pc, #224]	; (28e4 <data_handler+0x7c0>)
    2802:	0018      	movs	r0, r3
    2804:	4b38      	ldr	r3, [pc, #224]	; (28e8 <data_handler+0x7c4>)
    2806:	4798      	blx	r3
		sounds_reset();
    2808:	4b38      	ldr	r3, [pc, #224]	; (28ec <data_handler+0x7c8>)
    280a:	4798      	blx	r3
    280c:	e367      	b.n	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,PARTY_ON,5) == 0)
    280e:	4938      	ldr	r1, [pc, #224]	; (28f0 <data_handler+0x7cc>)
    2810:	68fb      	ldr	r3, [r7, #12]
    2812:	2205      	movs	r2, #5
    2814:	0018      	movs	r0, r3
    2816:	4b12      	ldr	r3, [pc, #72]	; (2860 <data_handler+0x73c>)
    2818:	4798      	blx	r3
    281a:	1e03      	subs	r3, r0, #0
    281c:	d103      	bne.n	2826 <data_handler+0x702>
	{
		party = true;
    281e:	4b35      	ldr	r3, [pc, #212]	; (28f4 <data_handler+0x7d0>)
    2820:	2201      	movs	r2, #1
    2822:	701a      	strb	r2, [r3, #0]
    2824:	e35b      	b.n	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,PARTY_OFF,5) == 0)
    2826:	4934      	ldr	r1, [pc, #208]	; (28f8 <data_handler+0x7d4>)
    2828:	68fb      	ldr	r3, [r7, #12]
    282a:	2205      	movs	r2, #5
    282c:	0018      	movs	r0, r3
    282e:	4b0c      	ldr	r3, [pc, #48]	; (2860 <data_handler+0x73c>)
    2830:	4798      	blx	r3
    2832:	1e03      	subs	r3, r0, #0
    2834:	d105      	bne.n	2842 <data_handler+0x71e>
	{
		party = false;
    2836:	4b2f      	ldr	r3, [pc, #188]	; (28f4 <data_handler+0x7d0>)
    2838:	2200      	movs	r2, #0
    283a:	701a      	strb	r2, [r3, #0]
		reset_all_lights();
    283c:	4b2f      	ldr	r3, [pc, #188]	; (28fc <data_handler+0x7d8>)
    283e:	4798      	blx	r3
    2840:	e34d      	b.n	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
    2842:	492f      	ldr	r1, [pc, #188]	; (2900 <data_handler+0x7dc>)
    2844:	68fb      	ldr	r3, [r7, #12]
    2846:	2205      	movs	r2, #5
    2848:	0018      	movs	r0, r3
    284a:	4b05      	ldr	r3, [pc, #20]	; (2860 <data_handler+0x73c>)
    284c:	4798      	blx	r3
    284e:	1e03      	subs	r3, r0, #0
    2850:	d15a      	bne.n	2908 <data_handler+0x7e4>
	{
		water = true;
    2852:	4b2c      	ldr	r3, [pc, #176]	; (2904 <data_handler+0x7e0>)
    2854:	2201      	movs	r2, #1
    2856:	701a      	strb	r2, [r3, #0]
    2858:	e341      	b.n	2ede <data_handler+0xdba>
    285a:	46c0      	nop			; (mov r8, r8)
    285c:	000096ac 	.word	0x000096ac
    2860:	0000836f 	.word	0x0000836f
    2864:	200001ae 	.word	0x200001ae
    2868:	000096b4 	.word	0x000096b4
    286c:	20000245 	.word	0x20000245
    2870:	000096bc 	.word	0x000096bc
    2874:	000096c4 	.word	0x000096c4
    2878:	20000266 	.word	0x20000266
    287c:	000096cc 	.word	0x000096cc
    2880:	000096d4 	.word	0x000096d4
    2884:	00004cf5 	.word	0x00004cf5
    2888:	000096dc 	.word	0x000096dc
    288c:	00004d7d 	.word	0x00004d7d
    2890:	000096e4 	.word	0x000096e4
    2894:	000096ec 	.word	0x000096ec
    2898:	000096f4 	.word	0x000096f4
    289c:	000096fc 	.word	0x000096fc
    28a0:	00009704 	.word	0x00009704
    28a4:	0000970c 	.word	0x0000970c
    28a8:	00009714 	.word	0x00009714
    28ac:	0000971c 	.word	0x0000971c
    28b0:	00009724 	.word	0x00009724
    28b4:	0000972c 	.word	0x0000972c
    28b8:	00009734 	.word	0x00009734
    28bc:	0000973c 	.word	0x0000973c
    28c0:	00009744 	.word	0x00009744
    28c4:	0000974c 	.word	0x0000974c
    28c8:	00009754 	.word	0x00009754
    28cc:	0000975c 	.word	0x0000975c
    28d0:	00009764 	.word	0x00009764
    28d4:	0000976c 	.word	0x0000976c
    28d8:	00009774 	.word	0x00009774
    28dc:	0000977c 	.word	0x0000977c
    28e0:	00009784 	.word	0x00009784
    28e4:	00009790 	.word	0x00009790
    28e8:	0000202d 	.word	0x0000202d
    28ec:	00004da1 	.word	0x00004da1
    28f0:	000097a0 	.word	0x000097a0
    28f4:	20000259 	.word	0x20000259
    28f8:	000097a8 	.word	0x000097a8
    28fc:	0000388d 	.word	0x0000388d
    2900:	000097b0 	.word	0x000097b0
    2904:	20000199 	.word	0x20000199
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
    2908:	49c8      	ldr	r1, [pc, #800]	; (2c2c <data_handler+0xb08>)
    290a:	68fb      	ldr	r3, [r7, #12]
    290c:	2205      	movs	r2, #5
    290e:	0018      	movs	r0, r3
    2910:	4bc7      	ldr	r3, [pc, #796]	; (2c30 <data_handler+0xb0c>)
    2912:	4798      	blx	r3
    2914:	1e03      	subs	r3, r0, #0
    2916:	d103      	bne.n	2920 <data_handler+0x7fc>
	{
		water = false;
    2918:	4bc6      	ldr	r3, [pc, #792]	; (2c34 <data_handler+0xb10>)
    291a:	2200      	movs	r2, #0
    291c:	701a      	strb	r2, [r3, #0]
    291e:	e2de      	b.n	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,START_ON,5) == 0)
    2920:	49c5      	ldr	r1, [pc, #788]	; (2c38 <data_handler+0xb14>)
    2922:	68fb      	ldr	r3, [r7, #12]
    2924:	2205      	movs	r2, #5
    2926:	0018      	movs	r0, r3
    2928:	4bc1      	ldr	r3, [pc, #772]	; (2c30 <data_handler+0xb0c>)
    292a:	4798      	blx	r3
    292c:	1e03      	subs	r3, r0, #0
    292e:	d103      	bne.n	2938 <data_handler+0x814>
	{
		start = true;
    2930:	4bc2      	ldr	r3, [pc, #776]	; (2c3c <data_handler+0xb18>)
    2932:	2201      	movs	r2, #1
    2934:	701a      	strb	r2, [r3, #0]
    2936:	e2d2      	b.n	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,START_OFF,5) == 0)
    2938:	49c1      	ldr	r1, [pc, #772]	; (2c40 <data_handler+0xb1c>)
    293a:	68fb      	ldr	r3, [r7, #12]
    293c:	2205      	movs	r2, #5
    293e:	0018      	movs	r0, r3
    2940:	4bbb      	ldr	r3, [pc, #748]	; (2c30 <data_handler+0xb0c>)
    2942:	4798      	blx	r3
    2944:	1e03      	subs	r3, r0, #0
    2946:	d103      	bne.n	2950 <data_handler+0x82c>
	{
		start = false;
    2948:	4bbc      	ldr	r3, [pc, #752]	; (2c3c <data_handler+0xb18>)
    294a:	2200      	movs	r2, #0
    294c:	701a      	strb	r2, [r3, #0]
    294e:	e2c6      	b.n	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,LED_BAR_ON,5) == 0)
    2950:	49bc      	ldr	r1, [pc, #752]	; (2c44 <data_handler+0xb20>)
    2952:	68fb      	ldr	r3, [r7, #12]
    2954:	2205      	movs	r2, #5
    2956:	0018      	movs	r0, r3
    2958:	4bb5      	ldr	r3, [pc, #724]	; (2c30 <data_handler+0xb0c>)
    295a:	4798      	blx	r3
    295c:	1e03      	subs	r3, r0, #0
    295e:	d115      	bne.n	298c <data_handler+0x868>
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,true);
    2960:	2301      	movs	r3, #1
    2962:	2202      	movs	r2, #2
    2964:	2101      	movs	r1, #1
    2966:	2000      	movs	r0, #0
    2968:	4cb7      	ldr	r4, [pc, #732]	; (2c48 <data_handler+0xb24>)
    296a:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,true);
    296c:	2301      	movs	r3, #1
    296e:	2202      	movs	r2, #2
    2970:	2102      	movs	r1, #2
    2972:	2000      	movs	r0, #0
    2974:	4cb4      	ldr	r4, [pc, #720]	; (2c48 <data_handler+0xb24>)
    2976:	47a0      	blx	r4
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,true);
    2978:	2301      	movs	r3, #1
    297a:	2204      	movs	r2, #4
    297c:	2101      	movs	r1, #1
    297e:	2000      	movs	r0, #0
    2980:	4cb1      	ldr	r4, [pc, #708]	; (2c48 <data_handler+0xb24>)
    2982:	47a0      	blx	r4
		led_bar = true;
    2984:	4bb1      	ldr	r3, [pc, #708]	; (2c4c <data_handler+0xb28>)
    2986:	2201      	movs	r2, #1
    2988:	701a      	strb	r2, [r3, #0]
    298a:	e2a8      	b.n	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,LED_BAR_OFF,5) == 0)
    298c:	49b0      	ldr	r1, [pc, #704]	; (2c50 <data_handler+0xb2c>)
    298e:	68fb      	ldr	r3, [r7, #12]
    2990:	2205      	movs	r2, #5
    2992:	0018      	movs	r0, r3
    2994:	4ba6      	ldr	r3, [pc, #664]	; (2c30 <data_handler+0xb0c>)
    2996:	4798      	blx	r3
    2998:	1e03      	subs	r3, r0, #0
    299a:	d115      	bne.n	29c8 <data_handler+0x8a4>
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,false);
    299c:	2300      	movs	r3, #0
    299e:	2202      	movs	r2, #2
    29a0:	2101      	movs	r1, #1
    29a2:	2000      	movs	r0, #0
    29a4:	4ca8      	ldr	r4, [pc, #672]	; (2c48 <data_handler+0xb24>)
    29a6:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,false);
    29a8:	2300      	movs	r3, #0
    29aa:	2202      	movs	r2, #2
    29ac:	2102      	movs	r1, #2
    29ae:	2000      	movs	r0, #0
    29b0:	4ca5      	ldr	r4, [pc, #660]	; (2c48 <data_handler+0xb24>)
    29b2:	47a0      	blx	r4
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,false);
    29b4:	2300      	movs	r3, #0
    29b6:	2204      	movs	r2, #4
    29b8:	2101      	movs	r1, #1
    29ba:	2000      	movs	r0, #0
    29bc:	4ca2      	ldr	r4, [pc, #648]	; (2c48 <data_handler+0xb24>)
    29be:	47a0      	blx	r4
		led_bar = false;
    29c0:	4ba2      	ldr	r3, [pc, #648]	; (2c4c <data_handler+0xb28>)
    29c2:	2200      	movs	r2, #0
    29c4:	701a      	strb	r2, [r3, #0]
    29c6:	e28a      	b.n	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,HDL_ON,5) == 0)
    29c8:	49a2      	ldr	r1, [pc, #648]	; (2c54 <data_handler+0xb30>)
    29ca:	68fb      	ldr	r3, [r7, #12]
    29cc:	2205      	movs	r2, #5
    29ce:	0018      	movs	r0, r3
    29d0:	4b97      	ldr	r3, [pc, #604]	; (2c30 <data_handler+0xb0c>)
    29d2:	4798      	blx	r3
    29d4:	1e03      	subs	r3, r0, #0
    29d6:	d124      	bne.n	2a22 <data_handler+0x8fe>
	{
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,true);
    29d8:	2301      	movs	r3, #1
    29da:	2201      	movs	r2, #1
    29dc:	2102      	movs	r1, #2
    29de:	2000      	movs	r0, #0
    29e0:	4c99      	ldr	r4, [pc, #612]	; (2c48 <data_handler+0xb24>)
    29e2:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,true);
    29e4:	2301      	movs	r3, #1
    29e6:	2201      	movs	r2, #1
    29e8:	2101      	movs	r1, #1
    29ea:	2000      	movs	r0, #0
    29ec:	4c96      	ldr	r4, [pc, #600]	; (2c48 <data_handler+0xb24>)
    29ee:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    29f0:	2301      	movs	r3, #1
    29f2:	2200      	movs	r2, #0
    29f4:	2101      	movs	r1, #1
    29f6:	2000      	movs	r0, #0
    29f8:	4c93      	ldr	r4, [pc, #588]	; (2c48 <data_handler+0xb24>)
    29fa:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    29fc:	2301      	movs	r3, #1
    29fe:	2200      	movs	r2, #0
    2a00:	2102      	movs	r1, #2
    2a02:	2000      	movs	r0, #0
    2a04:	4c90      	ldr	r4, [pc, #576]	; (2c48 <data_handler+0xb24>)
    2a06:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    2a08:	2301      	movs	r3, #1
    2a0a:	2200      	movs	r2, #0
    2a0c:	2103      	movs	r1, #3
    2a0e:	2000      	movs	r0, #0
    2a10:	4c8d      	ldr	r4, [pc, #564]	; (2c48 <data_handler+0xb24>)
    2a12:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    2a14:	2301      	movs	r3, #1
    2a16:	2200      	movs	r2, #0
    2a18:	2104      	movs	r1, #4
    2a1a:	2000      	movs	r0, #0
    2a1c:	4c8a      	ldr	r4, [pc, #552]	; (2c48 <data_handler+0xb24>)
    2a1e:	47a0      	blx	r4
    2a20:	e25d      	b.n	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,HDL_OFF,5) == 0)
    2a22:	498d      	ldr	r1, [pc, #564]	; (2c58 <data_handler+0xb34>)
    2a24:	68fb      	ldr	r3, [r7, #12]
    2a26:	2205      	movs	r2, #5
    2a28:	0018      	movs	r0, r3
    2a2a:	4b81      	ldr	r3, [pc, #516]	; (2c30 <data_handler+0xb0c>)
    2a2c:	4798      	blx	r3
    2a2e:	1e03      	subs	r3, r0, #0
    2a30:	d124      	bne.n	2a7c <data_handler+0x958>
	{
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,false);
    2a32:	2300      	movs	r3, #0
    2a34:	2201      	movs	r2, #1
    2a36:	2102      	movs	r1, #2
    2a38:	2000      	movs	r0, #0
    2a3a:	4c83      	ldr	r4, [pc, #524]	; (2c48 <data_handler+0xb24>)
    2a3c:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,false);
    2a3e:	2300      	movs	r3, #0
    2a40:	2201      	movs	r2, #1
    2a42:	2101      	movs	r1, #1
    2a44:	2000      	movs	r0, #0
    2a46:	4c80      	ldr	r4, [pc, #512]	; (2c48 <data_handler+0xb24>)
    2a48:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    2a4a:	2300      	movs	r3, #0
    2a4c:	2200      	movs	r2, #0
    2a4e:	2101      	movs	r1, #1
    2a50:	2000      	movs	r0, #0
    2a52:	4c7d      	ldr	r4, [pc, #500]	; (2c48 <data_handler+0xb24>)
    2a54:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    2a56:	2300      	movs	r3, #0
    2a58:	2200      	movs	r2, #0
    2a5a:	2102      	movs	r1, #2
    2a5c:	2000      	movs	r0, #0
    2a5e:	4c7a      	ldr	r4, [pc, #488]	; (2c48 <data_handler+0xb24>)
    2a60:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    2a62:	2300      	movs	r3, #0
    2a64:	2200      	movs	r2, #0
    2a66:	2103      	movs	r1, #3
    2a68:	2000      	movs	r0, #0
    2a6a:	4c77      	ldr	r4, [pc, #476]	; (2c48 <data_handler+0xb24>)
    2a6c:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    2a6e:	2300      	movs	r3, #0
    2a70:	2200      	movs	r2, #0
    2a72:	2104      	movs	r1, #4
    2a74:	2000      	movs	r0, #0
    2a76:	4c74      	ldr	r4, [pc, #464]	; (2c48 <data_handler+0xb24>)
    2a78:	47a0      	blx	r4
    2a7a:	e230      	b.n	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,BRIAN_ON,7) == 0)
    2a7c:	4977      	ldr	r1, [pc, #476]	; (2c5c <data_handler+0xb38>)
    2a7e:	68fb      	ldr	r3, [r7, #12]
    2a80:	2207      	movs	r2, #7
    2a82:	0018      	movs	r0, r3
    2a84:	4b6a      	ldr	r3, [pc, #424]	; (2c30 <data_handler+0xb0c>)
    2a86:	4798      	blx	r3
    2a88:	1e03      	subs	r3, r0, #0
    2a8a:	d124      	bne.n	2ad6 <data_handler+0x9b2>
	{
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,true);
    2a8c:	2301      	movs	r3, #1
    2a8e:	2203      	movs	r2, #3
    2a90:	2102      	movs	r1, #2
    2a92:	2000      	movs	r0, #0
    2a94:	4c6c      	ldr	r4, [pc, #432]	; (2c48 <data_handler+0xb24>)
    2a96:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,true);
    2a98:	2301      	movs	r3, #1
    2a9a:	2203      	movs	r2, #3
    2a9c:	2101      	movs	r1, #1
    2a9e:	2000      	movs	r0, #0
    2aa0:	4c69      	ldr	r4, [pc, #420]	; (2c48 <data_handler+0xb24>)
    2aa2:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    2aa4:	2301      	movs	r3, #1
    2aa6:	2200      	movs	r2, #0
    2aa8:	2101      	movs	r1, #1
    2aaa:	2000      	movs	r0, #0
    2aac:	4c66      	ldr	r4, [pc, #408]	; (2c48 <data_handler+0xb24>)
    2aae:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    2ab0:	2301      	movs	r3, #1
    2ab2:	2200      	movs	r2, #0
    2ab4:	2102      	movs	r1, #2
    2ab6:	2000      	movs	r0, #0
    2ab8:	4c63      	ldr	r4, [pc, #396]	; (2c48 <data_handler+0xb24>)
    2aba:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    2abc:	2301      	movs	r3, #1
    2abe:	2200      	movs	r2, #0
    2ac0:	2103      	movs	r1, #3
    2ac2:	2000      	movs	r0, #0
    2ac4:	4c60      	ldr	r4, [pc, #384]	; (2c48 <data_handler+0xb24>)
    2ac6:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    2ac8:	2301      	movs	r3, #1
    2aca:	2200      	movs	r2, #0
    2acc:	2104      	movs	r1, #4
    2ace:	2000      	movs	r0, #0
    2ad0:	4c5d      	ldr	r4, [pc, #372]	; (2c48 <data_handler+0xb24>)
    2ad2:	47a0      	blx	r4
    2ad4:	e203      	b.n	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,BRIAN_OFF,7) == 0)
    2ad6:	4962      	ldr	r1, [pc, #392]	; (2c60 <data_handler+0xb3c>)
    2ad8:	68fb      	ldr	r3, [r7, #12]
    2ada:	2207      	movs	r2, #7
    2adc:	0018      	movs	r0, r3
    2ade:	4b54      	ldr	r3, [pc, #336]	; (2c30 <data_handler+0xb0c>)
    2ae0:	4798      	blx	r3
    2ae2:	1e03      	subs	r3, r0, #0
    2ae4:	d124      	bne.n	2b30 <data_handler+0xa0c>
	{
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,false);
    2ae6:	2300      	movs	r3, #0
    2ae8:	2203      	movs	r2, #3
    2aea:	2102      	movs	r1, #2
    2aec:	2000      	movs	r0, #0
    2aee:	4c56      	ldr	r4, [pc, #344]	; (2c48 <data_handler+0xb24>)
    2af0:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,false);
    2af2:	2300      	movs	r3, #0
    2af4:	2203      	movs	r2, #3
    2af6:	2101      	movs	r1, #1
    2af8:	2000      	movs	r0, #0
    2afa:	4c53      	ldr	r4, [pc, #332]	; (2c48 <data_handler+0xb24>)
    2afc:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    2afe:	2300      	movs	r3, #0
    2b00:	2200      	movs	r2, #0
    2b02:	2101      	movs	r1, #1
    2b04:	2000      	movs	r0, #0
    2b06:	4c50      	ldr	r4, [pc, #320]	; (2c48 <data_handler+0xb24>)
    2b08:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    2b0a:	2300      	movs	r3, #0
    2b0c:	2200      	movs	r2, #0
    2b0e:	2102      	movs	r1, #2
    2b10:	2000      	movs	r0, #0
    2b12:	4c4d      	ldr	r4, [pc, #308]	; (2c48 <data_handler+0xb24>)
    2b14:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    2b16:	2300      	movs	r3, #0
    2b18:	2200      	movs	r2, #0
    2b1a:	2103      	movs	r1, #3
    2b1c:	2000      	movs	r0, #0
    2b1e:	4c4a      	ldr	r4, [pc, #296]	; (2c48 <data_handler+0xb24>)
    2b20:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    2b22:	2300      	movs	r3, #0
    2b24:	2200      	movs	r2, #0
    2b26:	2104      	movs	r1, #4
    2b28:	2000      	movs	r0, #0
    2b2a:	4c47      	ldr	r4, [pc, #284]	; (2c48 <data_handler+0xb24>)
    2b2c:	47a0      	blx	r4
    2b2e:	e1d6      	b.n	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,FLASHY1_ON,7) == 0)
    2b30:	494c      	ldr	r1, [pc, #304]	; (2c64 <data_handler+0xb40>)
    2b32:	68fb      	ldr	r3, [r7, #12]
    2b34:	2207      	movs	r2, #7
    2b36:	0018      	movs	r0, r3
    2b38:	4b3d      	ldr	r3, [pc, #244]	; (2c30 <data_handler+0xb0c>)
    2b3a:	4798      	blx	r3
    2b3c:	1e03      	subs	r3, r0, #0
    2b3e:	d103      	bne.n	2b48 <data_handler+0xa24>
	{
		flashy1 = true;
    2b40:	4b49      	ldr	r3, [pc, #292]	; (2c68 <data_handler+0xb44>)
    2b42:	2201      	movs	r2, #1
    2b44:	701a      	strb	r2, [r3, #0]
    2b46:	e1ca      	b.n	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,FLASHY1_OFF,7) == 0)
    2b48:	4948      	ldr	r1, [pc, #288]	; (2c6c <data_handler+0xb48>)
    2b4a:	68fb      	ldr	r3, [r7, #12]
    2b4c:	2207      	movs	r2, #7
    2b4e:	0018      	movs	r0, r3
    2b50:	4b37      	ldr	r3, [pc, #220]	; (2c30 <data_handler+0xb0c>)
    2b52:	4798      	blx	r3
    2b54:	1e03      	subs	r3, r0, #0
    2b56:	d105      	bne.n	2b64 <data_handler+0xa40>
	{
		flashy1 = false;
    2b58:	4b43      	ldr	r3, [pc, #268]	; (2c68 <data_handler+0xb44>)
    2b5a:	2200      	movs	r2, #0
    2b5c:	701a      	strb	r2, [r3, #0]
		reset_all_lights();
    2b5e:	4b44      	ldr	r3, [pc, #272]	; (2c70 <data_handler+0xb4c>)
    2b60:	4798      	blx	r3
    2b62:	e1bc      	b.n	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,FLASHY2_ON,7) == 0)
    2b64:	4943      	ldr	r1, [pc, #268]	; (2c74 <data_handler+0xb50>)
    2b66:	68fb      	ldr	r3, [r7, #12]
    2b68:	2207      	movs	r2, #7
    2b6a:	0018      	movs	r0, r3
    2b6c:	4b30      	ldr	r3, [pc, #192]	; (2c30 <data_handler+0xb0c>)
    2b6e:	4798      	blx	r3
    2b70:	1e03      	subs	r3, r0, #0
    2b72:	d103      	bne.n	2b7c <data_handler+0xa58>
	{
		flashy2 = true;
    2b74:	4b40      	ldr	r3, [pc, #256]	; (2c78 <data_handler+0xb54>)
    2b76:	2201      	movs	r2, #1
    2b78:	701a      	strb	r2, [r3, #0]
    2b7a:	e1b0      	b.n	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,FLASHY2_OFF,7) == 0)
    2b7c:	493f      	ldr	r1, [pc, #252]	; (2c7c <data_handler+0xb58>)
    2b7e:	68fb      	ldr	r3, [r7, #12]
    2b80:	2207      	movs	r2, #7
    2b82:	0018      	movs	r0, r3
    2b84:	4b2a      	ldr	r3, [pc, #168]	; (2c30 <data_handler+0xb0c>)
    2b86:	4798      	blx	r3
    2b88:	1e03      	subs	r3, r0, #0
    2b8a:	d105      	bne.n	2b98 <data_handler+0xa74>
	{
		reset_all_lights();
    2b8c:	4b38      	ldr	r3, [pc, #224]	; (2c70 <data_handler+0xb4c>)
    2b8e:	4798      	blx	r3
		flashy2 = false;
    2b90:	4b39      	ldr	r3, [pc, #228]	; (2c78 <data_handler+0xb54>)
    2b92:	2200      	movs	r2, #0
    2b94:	701a      	strb	r2, [r3, #0]
    2b96:	e1a2      	b.n	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,FLASHYFADE_ON,8) == 0)
    2b98:	4939      	ldr	r1, [pc, #228]	; (2c80 <data_handler+0xb5c>)
    2b9a:	68fb      	ldr	r3, [r7, #12]
    2b9c:	2208      	movs	r2, #8
    2b9e:	0018      	movs	r0, r3
    2ba0:	4b23      	ldr	r3, [pc, #140]	; (2c30 <data_handler+0xb0c>)
    2ba2:	4798      	blx	r3
    2ba4:	1e03      	subs	r3, r0, #0
    2ba6:	d103      	bne.n	2bb0 <data_handler+0xa8c>
	{
		flashyfade = true;
    2ba8:	4b36      	ldr	r3, [pc, #216]	; (2c84 <data_handler+0xb60>)
    2baa:	2201      	movs	r2, #1
    2bac:	701a      	strb	r2, [r3, #0]
    2bae:	e196      	b.n	2ede <data_handler+0xdba>
	}
	else if(strncmp(buffer,FLASHYFADE_OFF,8) == 0)
    2bb0:	4935      	ldr	r1, [pc, #212]	; (2c88 <data_handler+0xb64>)
    2bb2:	68fb      	ldr	r3, [r7, #12]
    2bb4:	2208      	movs	r2, #8
    2bb6:	0018      	movs	r0, r3
    2bb8:	4b1d      	ldr	r3, [pc, #116]	; (2c30 <data_handler+0xb0c>)
    2bba:	4798      	blx	r3
    2bbc:	1e03      	subs	r3, r0, #0
    2bbe:	d105      	bne.n	2bcc <data_handler+0xaa8>
	{
		reset_all_lights();
    2bc0:	4b2b      	ldr	r3, [pc, #172]	; (2c70 <data_handler+0xb4c>)
    2bc2:	4798      	blx	r3
		flashyfade = false;
    2bc4:	4b2f      	ldr	r3, [pc, #188]	; (2c84 <data_handler+0xb60>)
    2bc6:	2200      	movs	r2, #0
    2bc8:	701a      	strb	r2, [r3, #0]
    2bca:	e188      	b.n	2ede <data_handler+0xdba>
	}
	else if (strncmp(buffer,MASTER_RESET,10) == 0)
    2bcc:	492f      	ldr	r1, [pc, #188]	; (2c8c <data_handler+0xb68>)
    2bce:	68fb      	ldr	r3, [r7, #12]
    2bd0:	220a      	movs	r2, #10
    2bd2:	0018      	movs	r0, r3
    2bd4:	4b16      	ldr	r3, [pc, #88]	; (2c30 <data_handler+0xb0c>)
    2bd6:	4798      	blx	r3
    2bd8:	1e03      	subs	r3, r0, #0
    2bda:	d16b      	bne.n	2cb4 <data_handler+0xb90>
	{
		ble_uart_write("RESET ACK\n");
    2bdc:	4b2c      	ldr	r3, [pc, #176]	; (2c90 <data_handler+0xb6c>)
    2bde:	0018      	movs	r0, r3
    2be0:	4b2c      	ldr	r3, [pc, #176]	; (2c94 <data_handler+0xb70>)
    2be2:	4798      	blx	r3
		delay_ms(250);
    2be4:	2000      	movs	r0, #0
    2be6:	4b2c      	ldr	r3, [pc, #176]	; (2c98 <data_handler+0xb74>)
    2be8:	4798      	blx	r3
    2bea:	0003      	movs	r3, r0
    2bec:	603b      	str	r3, [r7, #0]
    2bee:	2300      	movs	r3, #0
    2bf0:	607b      	str	r3, [r7, #4]
    2bf2:	4c2a      	ldr	r4, [pc, #168]	; (2c9c <data_handler+0xb78>)
    2bf4:	22fa      	movs	r2, #250	; 0xfa
    2bf6:	2300      	movs	r3, #0
    2bf8:	6838      	ldr	r0, [r7, #0]
    2bfa:	6879      	ldr	r1, [r7, #4]
    2bfc:	47a0      	blx	r4
    2bfe:	0003      	movs	r3, r0
    2c00:	000c      	movs	r4, r1
    2c02:	0019      	movs	r1, r3
    2c04:	0022      	movs	r2, r4
    2c06:	4b26      	ldr	r3, [pc, #152]	; (2ca0 <data_handler+0xb7c>)
    2c08:	2400      	movs	r4, #0
    2c0a:	18c9      	adds	r1, r1, r3
    2c0c:	4162      	adcs	r2, r4
    2c0e:	0008      	movs	r0, r1
    2c10:	0011      	movs	r1, r2
    2c12:	4c24      	ldr	r4, [pc, #144]	; (2ca4 <data_handler+0xb80>)
    2c14:	4a24      	ldr	r2, [pc, #144]	; (2ca8 <data_handler+0xb84>)
    2c16:	2300      	movs	r3, #0
    2c18:	47a0      	blx	r4
    2c1a:	0003      	movs	r3, r0
    2c1c:	000c      	movs	r4, r1
    2c1e:	0018      	movs	r0, r3
    2c20:	4b22      	ldr	r3, [pc, #136]	; (2cac <data_handler+0xb88>)
    2c22:	4798      	blx	r3
		wdt_init();
    2c24:	4b22      	ldr	r3, [pc, #136]	; (2cb0 <data_handler+0xb8c>)
    2c26:	4798      	blx	r3
		while (1)
		{
			//
		}
    2c28:	e7fe      	b.n	2c28 <data_handler+0xb04>
    2c2a:	46c0      	nop			; (mov r8, r8)
    2c2c:	000097b0 	.word	0x000097b0
    2c30:	0000836f 	.word	0x0000836f
    2c34:	20000199 	.word	0x20000199
    2c38:	000097b8 	.word	0x000097b8
    2c3c:	20000265 	.word	0x20000265
    2c40:	000097c0 	.word	0x000097c0
    2c44:	000097c8 	.word	0x000097c8
    2c48:	00003b05 	.word	0x00003b05
    2c4c:	20000244 	.word	0x20000244
    2c50:	000097d0 	.word	0x000097d0
    2c54:	000097d8 	.word	0x000097d8
    2c58:	000097e0 	.word	0x000097e0
    2c5c:	000097e8 	.word	0x000097e8
    2c60:	000097f0 	.word	0x000097f0
    2c64:	000097f8 	.word	0x000097f8
    2c68:	200001b3 	.word	0x200001b3
    2c6c:	00009800 	.word	0x00009800
    2c70:	0000388d 	.word	0x0000388d
    2c74:	00009808 	.word	0x00009808
    2c78:	20000247 	.word	0x20000247
    2c7c:	00009810 	.word	0x00009810
    2c80:	00009818 	.word	0x00009818
    2c84:	20000263 	.word	0x20000263
    2c88:	00009824 	.word	0x00009824
    2c8c:	00009830 	.word	0x00009830
    2c90:	0000983c 	.word	0x0000983c
    2c94:	0000202d 	.word	0x0000202d
    2c98:	0000592d 	.word	0x0000592d
    2c9c:	00006741 	.word	0x00006741
    2ca0:	00001b57 	.word	0x00001b57
    2ca4:	00006701 	.word	0x00006701
    2ca8:	00001b58 	.word	0x00001b58
    2cac:	20000001 	.word	0x20000001
    2cb0:	00000149 	.word	0x00000149
	}
	else if (strncmp(buffer,MINOR_RESET,sizeof(MINOR_RESET)-1) == 0)
    2cb4:	498e      	ldr	r1, [pc, #568]	; (2ef0 <data_handler+0xdcc>)
    2cb6:	68fb      	ldr	r3, [r7, #12]
    2cb8:	2209      	movs	r2, #9
    2cba:	0018      	movs	r0, r3
    2cbc:	4b8d      	ldr	r3, [pc, #564]	; (2ef4 <data_handler+0xdd0>)
    2cbe:	4798      	blx	r3
    2cc0:	1e03      	subs	r3, r0, #0
    2cc2:	d12f      	bne.n	2d24 <data_handler+0xc00>
	{
		ble_uart_write("MINOR RESET ACK\n");
    2cc4:	4b8c      	ldr	r3, [pc, #560]	; (2ef8 <data_handler+0xdd4>)
    2cc6:	0018      	movs	r0, r3
    2cc8:	4b8c      	ldr	r3, [pc, #560]	; (2efc <data_handler+0xdd8>)
    2cca:	4798      	blx	r3
		delay_ms(250);
    2ccc:	2000      	movs	r0, #0
    2cce:	4b8c      	ldr	r3, [pc, #560]	; (2f00 <data_handler+0xddc>)
    2cd0:	4798      	blx	r3
    2cd2:	0003      	movs	r3, r0
    2cd4:	001d      	movs	r5, r3
    2cd6:	2300      	movs	r3, #0
    2cd8:	001e      	movs	r6, r3
    2cda:	4c8a      	ldr	r4, [pc, #552]	; (2f04 <data_handler+0xde0>)
    2cdc:	22fa      	movs	r2, #250	; 0xfa
    2cde:	2300      	movs	r3, #0
    2ce0:	0028      	movs	r0, r5
    2ce2:	0031      	movs	r1, r6
    2ce4:	47a0      	blx	r4
    2ce6:	0003      	movs	r3, r0
    2ce8:	000c      	movs	r4, r1
    2cea:	0019      	movs	r1, r3
    2cec:	0022      	movs	r2, r4
    2cee:	4b86      	ldr	r3, [pc, #536]	; (2f08 <data_handler+0xde4>)
    2cf0:	2400      	movs	r4, #0
    2cf2:	18c9      	adds	r1, r1, r3
    2cf4:	4162      	adcs	r2, r4
    2cf6:	0008      	movs	r0, r1
    2cf8:	0011      	movs	r1, r2
    2cfa:	4c84      	ldr	r4, [pc, #528]	; (2f0c <data_handler+0xde8>)
    2cfc:	4a84      	ldr	r2, [pc, #528]	; (2f10 <data_handler+0xdec>)
    2cfe:	2300      	movs	r3, #0
    2d00:	47a0      	blx	r4
    2d02:	0003      	movs	r3, r0
    2d04:	000c      	movs	r4, r1
    2d06:	0018      	movs	r0, r3
    2d08:	4b82      	ldr	r3, [pc, #520]	; (2f14 <data_handler+0xdf0>)
    2d0a:	4798      	blx	r3
		sounds_reset();
    2d0c:	4b82      	ldr	r3, [pc, #520]	; (2f18 <data_handler+0xdf4>)
    2d0e:	4798      	blx	r3
		init_all_ports();
    2d10:	4b82      	ldr	r3, [pc, #520]	; (2f1c <data_handler+0xdf8>)
    2d12:	4798      	blx	r3
		party = false;
    2d14:	4b82      	ldr	r3, [pc, #520]	; (2f20 <data_handler+0xdfc>)
    2d16:	2200      	movs	r2, #0
    2d18:	701a      	strb	r2, [r3, #0]
		ble_uart_write("MINOR RESET DONE\n");
    2d1a:	4b82      	ldr	r3, [pc, #520]	; (2f24 <data_handler+0xe00>)
    2d1c:	0018      	movs	r0, r3
    2d1e:	4b77      	ldr	r3, [pc, #476]	; (2efc <data_handler+0xdd8>)
    2d20:	4798      	blx	r3
    2d22:	e0dc      	b.n	2ede <data_handler+0xdba>
	}
	else if (strncmp(buffer,PARTY_TRESH_0,sizeof(PARTY_TRESH_0)-1)  == 0)
    2d24:	4980      	ldr	r1, [pc, #512]	; (2f28 <data_handler+0xe04>)
    2d26:	68fb      	ldr	r3, [r7, #12]
    2d28:	2208      	movs	r2, #8
    2d2a:	0018      	movs	r0, r3
    2d2c:	4b71      	ldr	r3, [pc, #452]	; (2ef4 <data_handler+0xdd0>)
    2d2e:	4798      	blx	r3
    2d30:	1e03      	subs	r3, r0, #0
    2d32:	d10f      	bne.n	2d54 <data_handler+0xc30>
	{
		int temp = sizeof(PARTY_TRESH_0);//party_treshold;
    2d34:	2309      	movs	r3, #9
    2d36:	64fb      	str	r3, [r7, #76]	; 0x4c
		sscanf(buffer,"PRTTRSH0 %d",&temp);
    2d38:	2344      	movs	r3, #68	; 0x44
    2d3a:	2208      	movs	r2, #8
    2d3c:	18ba      	adds	r2, r7, r2
    2d3e:	18d2      	adds	r2, r2, r3
    2d40:	497a      	ldr	r1, [pc, #488]	; (2f2c <data_handler+0xe08>)
    2d42:	68fb      	ldr	r3, [r7, #12]
    2d44:	0018      	movs	r0, r3
    2d46:	4b7a      	ldr	r3, [pc, #488]	; (2f30 <data_handler+0xe0c>)
    2d48:	4798      	blx	r3
		party_thresholds[0] = (uint16_t)temp;
    2d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2d4c:	b29a      	uxth	r2, r3
    2d4e:	4b79      	ldr	r3, [pc, #484]	; (2f34 <data_handler+0xe10>)
    2d50:	801a      	strh	r2, [r3, #0]
    2d52:	e0c4      	b.n	2ede <data_handler+0xdba>
	}
	else if (strncmp(buffer,PARTY_TRESH_1,sizeof(PARTY_TRESH_1)-1) == 0)
    2d54:	4978      	ldr	r1, [pc, #480]	; (2f38 <data_handler+0xe14>)
    2d56:	68fb      	ldr	r3, [r7, #12]
    2d58:	2208      	movs	r2, #8
    2d5a:	0018      	movs	r0, r3
    2d5c:	4b65      	ldr	r3, [pc, #404]	; (2ef4 <data_handler+0xdd0>)
    2d5e:	4798      	blx	r3
    2d60:	1e03      	subs	r3, r0, #0
    2d62:	d10f      	bne.n	2d84 <data_handler+0xc60>
	{
		int temp = party_treshold;
    2d64:	4b75      	ldr	r3, [pc, #468]	; (2f3c <data_handler+0xe18>)
    2d66:	64bb      	str	r3, [r7, #72]	; 0x48
		sscanf(buffer,"PRTTRSH1 %d",&temp);
    2d68:	2340      	movs	r3, #64	; 0x40
    2d6a:	2208      	movs	r2, #8
    2d6c:	18ba      	adds	r2, r7, r2
    2d6e:	18d2      	adds	r2, r2, r3
    2d70:	4973      	ldr	r1, [pc, #460]	; (2f40 <data_handler+0xe1c>)
    2d72:	68fb      	ldr	r3, [r7, #12]
    2d74:	0018      	movs	r0, r3
    2d76:	4b6e      	ldr	r3, [pc, #440]	; (2f30 <data_handler+0xe0c>)
    2d78:	4798      	blx	r3
		party_thresholds[1] = (uint16_t)temp;
    2d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2d7c:	b29a      	uxth	r2, r3
    2d7e:	4b6d      	ldr	r3, [pc, #436]	; (2f34 <data_handler+0xe10>)
    2d80:	805a      	strh	r2, [r3, #2]
    2d82:	e0ac      	b.n	2ede <data_handler+0xdba>
	}
	else if (strncmp(buffer,PARTY_TRESH_2,sizeof(PARTY_TRESH_2)-1) == 0)
    2d84:	496f      	ldr	r1, [pc, #444]	; (2f44 <data_handler+0xe20>)
    2d86:	68fb      	ldr	r3, [r7, #12]
    2d88:	2208      	movs	r2, #8
    2d8a:	0018      	movs	r0, r3
    2d8c:	4b59      	ldr	r3, [pc, #356]	; (2ef4 <data_handler+0xdd0>)
    2d8e:	4798      	blx	r3
    2d90:	1e03      	subs	r3, r0, #0
    2d92:	d10f      	bne.n	2db4 <data_handler+0xc90>
	{
		int temp = party_treshold;
    2d94:	4b69      	ldr	r3, [pc, #420]	; (2f3c <data_handler+0xe18>)
    2d96:	647b      	str	r3, [r7, #68]	; 0x44
		sscanf(buffer,"PRTTRSH2 %d",&temp);
    2d98:	233c      	movs	r3, #60	; 0x3c
    2d9a:	2208      	movs	r2, #8
    2d9c:	18ba      	adds	r2, r7, r2
    2d9e:	18d2      	adds	r2, r2, r3
    2da0:	4969      	ldr	r1, [pc, #420]	; (2f48 <data_handler+0xe24>)
    2da2:	68fb      	ldr	r3, [r7, #12]
    2da4:	0018      	movs	r0, r3
    2da6:	4b62      	ldr	r3, [pc, #392]	; (2f30 <data_handler+0xe0c>)
    2da8:	4798      	blx	r3
		party_thresholds[2] = (uint16_t)temp;
    2daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2dac:	b29a      	uxth	r2, r3
    2dae:	4b61      	ldr	r3, [pc, #388]	; (2f34 <data_handler+0xe10>)
    2db0:	809a      	strh	r2, [r3, #4]
    2db2:	e094      	b.n	2ede <data_handler+0xdba>
	}
	else if (strncmp(buffer,PARTY_TRESH_3,sizeof(PARTY_TRESH_3)-1) == 0)
    2db4:	4965      	ldr	r1, [pc, #404]	; (2f4c <data_handler+0xe28>)
    2db6:	68fb      	ldr	r3, [r7, #12]
    2db8:	2208      	movs	r2, #8
    2dba:	0018      	movs	r0, r3
    2dbc:	4b4d      	ldr	r3, [pc, #308]	; (2ef4 <data_handler+0xdd0>)
    2dbe:	4798      	blx	r3
    2dc0:	1e03      	subs	r3, r0, #0
    2dc2:	d10f      	bne.n	2de4 <data_handler+0xcc0>
	{
		int temp = party_treshold;
    2dc4:	4b5d      	ldr	r3, [pc, #372]	; (2f3c <data_handler+0xe18>)
    2dc6:	643b      	str	r3, [r7, #64]	; 0x40
		sscanf(buffer,"PRTTRSH3 %d",&temp);
    2dc8:	2338      	movs	r3, #56	; 0x38
    2dca:	2208      	movs	r2, #8
    2dcc:	18ba      	adds	r2, r7, r2
    2dce:	18d2      	adds	r2, r2, r3
    2dd0:	495f      	ldr	r1, [pc, #380]	; (2f50 <data_handler+0xe2c>)
    2dd2:	68fb      	ldr	r3, [r7, #12]
    2dd4:	0018      	movs	r0, r3
    2dd6:	4b56      	ldr	r3, [pc, #344]	; (2f30 <data_handler+0xe0c>)
    2dd8:	4798      	blx	r3
		party_thresholds[3] = (uint16_t)temp;
    2dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2ddc:	b29a      	uxth	r2, r3
    2dde:	4b55      	ldr	r3, [pc, #340]	; (2f34 <data_handler+0xe10>)
    2de0:	80da      	strh	r2, [r3, #6]
    2de2:	e07c      	b.n	2ede <data_handler+0xdba>
	}
	else if (strncmp(buffer,PARTY_TRESH_4,sizeof(PARTY_TRESH_4)-1) == 0)
    2de4:	495b      	ldr	r1, [pc, #364]	; (2f54 <data_handler+0xe30>)
    2de6:	68fb      	ldr	r3, [r7, #12]
    2de8:	2208      	movs	r2, #8
    2dea:	0018      	movs	r0, r3
    2dec:	4b41      	ldr	r3, [pc, #260]	; (2ef4 <data_handler+0xdd0>)
    2dee:	4798      	blx	r3
    2df0:	1e03      	subs	r3, r0, #0
    2df2:	d10f      	bne.n	2e14 <data_handler+0xcf0>
	{
		int temp = party_treshold;
    2df4:	4b51      	ldr	r3, [pc, #324]	; (2f3c <data_handler+0xe18>)
    2df6:	63fb      	str	r3, [r7, #60]	; 0x3c
		sscanf(buffer,"PRTTRSH4 %d",&temp);
    2df8:	2334      	movs	r3, #52	; 0x34
    2dfa:	2208      	movs	r2, #8
    2dfc:	18ba      	adds	r2, r7, r2
    2dfe:	18d2      	adds	r2, r2, r3
    2e00:	4955      	ldr	r1, [pc, #340]	; (2f58 <data_handler+0xe34>)
    2e02:	68fb      	ldr	r3, [r7, #12]
    2e04:	0018      	movs	r0, r3
    2e06:	4b4a      	ldr	r3, [pc, #296]	; (2f30 <data_handler+0xe0c>)
    2e08:	4798      	blx	r3
		party_thresholds[4] = (uint16_t)temp;
    2e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e0c:	b29a      	uxth	r2, r3
    2e0e:	4b49      	ldr	r3, [pc, #292]	; (2f34 <data_handler+0xe10>)
    2e10:	811a      	strh	r2, [r3, #8]
    2e12:	e064      	b.n	2ede <data_handler+0xdba>
	}
	else if (strncmp(buffer,PARTY_TRESH_5,sizeof(PARTY_TRESH_5)-1) == 0)
    2e14:	4951      	ldr	r1, [pc, #324]	; (2f5c <data_handler+0xe38>)
    2e16:	68fb      	ldr	r3, [r7, #12]
    2e18:	2208      	movs	r2, #8
    2e1a:	0018      	movs	r0, r3
    2e1c:	4b35      	ldr	r3, [pc, #212]	; (2ef4 <data_handler+0xdd0>)
    2e1e:	4798      	blx	r3
    2e20:	1e03      	subs	r3, r0, #0
    2e22:	d10f      	bne.n	2e44 <data_handler+0xd20>
	{
		int temp = party_treshold;
    2e24:	4b45      	ldr	r3, [pc, #276]	; (2f3c <data_handler+0xe18>)
    2e26:	63bb      	str	r3, [r7, #56]	; 0x38
		sscanf(buffer,"PRTTRSH5 %d",&temp);
    2e28:	2330      	movs	r3, #48	; 0x30
    2e2a:	2208      	movs	r2, #8
    2e2c:	18ba      	adds	r2, r7, r2
    2e2e:	18d2      	adds	r2, r2, r3
    2e30:	494b      	ldr	r1, [pc, #300]	; (2f60 <data_handler+0xe3c>)
    2e32:	68fb      	ldr	r3, [r7, #12]
    2e34:	0018      	movs	r0, r3
    2e36:	4b3e      	ldr	r3, [pc, #248]	; (2f30 <data_handler+0xe0c>)
    2e38:	4798      	blx	r3
		party_thresholds[5] = (uint16_t)temp;
    2e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e3c:	b29a      	uxth	r2, r3
    2e3e:	4b3d      	ldr	r3, [pc, #244]	; (2f34 <data_handler+0xe10>)
    2e40:	815a      	strh	r2, [r3, #10]
    2e42:	e04c      	b.n	2ede <data_handler+0xdba>
	}
	else if (strncmp(buffer,PARTY_TRESH_6,sizeof(PARTY_TRESH_6)-1) == 0)
    2e44:	4947      	ldr	r1, [pc, #284]	; (2f64 <data_handler+0xe40>)
    2e46:	68fb      	ldr	r3, [r7, #12]
    2e48:	2208      	movs	r2, #8
    2e4a:	0018      	movs	r0, r3
    2e4c:	4b29      	ldr	r3, [pc, #164]	; (2ef4 <data_handler+0xdd0>)
    2e4e:	4798      	blx	r3
    2e50:	1e03      	subs	r3, r0, #0
    2e52:	d10f      	bne.n	2e74 <data_handler+0xd50>
	{
		int temp = party_treshold;
    2e54:	4b39      	ldr	r3, [pc, #228]	; (2f3c <data_handler+0xe18>)
    2e56:	637b      	str	r3, [r7, #52]	; 0x34
		sscanf(buffer,"PRTTRSH6 %d",&temp);
    2e58:	232c      	movs	r3, #44	; 0x2c
    2e5a:	2208      	movs	r2, #8
    2e5c:	18ba      	adds	r2, r7, r2
    2e5e:	18d2      	adds	r2, r2, r3
    2e60:	4941      	ldr	r1, [pc, #260]	; (2f68 <data_handler+0xe44>)
    2e62:	68fb      	ldr	r3, [r7, #12]
    2e64:	0018      	movs	r0, r3
    2e66:	4b32      	ldr	r3, [pc, #200]	; (2f30 <data_handler+0xe0c>)
    2e68:	4798      	blx	r3
		party_thresholds[6] = (uint16_t)temp;
    2e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e6c:	b29a      	uxth	r2, r3
    2e6e:	4b31      	ldr	r3, [pc, #196]	; (2f34 <data_handler+0xe10>)
    2e70:	819a      	strh	r2, [r3, #12]
    2e72:	e034      	b.n	2ede <data_handler+0xdba>
	}
	else if (strncmp(buffer,PARTY_TRESH_7,sizeof(PARTY_TRESH_7)-1) == 0)
    2e74:	493d      	ldr	r1, [pc, #244]	; (2f6c <data_handler+0xe48>)
    2e76:	68fb      	ldr	r3, [r7, #12]
    2e78:	2208      	movs	r2, #8
    2e7a:	0018      	movs	r0, r3
    2e7c:	4b1d      	ldr	r3, [pc, #116]	; (2ef4 <data_handler+0xdd0>)
    2e7e:	4798      	blx	r3
    2e80:	1e03      	subs	r3, r0, #0
    2e82:	d10f      	bne.n	2ea4 <data_handler+0xd80>
	{
		int temp = party_treshold;
    2e84:	4b2d      	ldr	r3, [pc, #180]	; (2f3c <data_handler+0xe18>)
    2e86:	633b      	str	r3, [r7, #48]	; 0x30
		sscanf(buffer,"PRTTRSH7 %d",&temp);
    2e88:	2328      	movs	r3, #40	; 0x28
    2e8a:	2208      	movs	r2, #8
    2e8c:	18ba      	adds	r2, r7, r2
    2e8e:	18d2      	adds	r2, r2, r3
    2e90:	4937      	ldr	r1, [pc, #220]	; (2f70 <data_handler+0xe4c>)
    2e92:	68fb      	ldr	r3, [r7, #12]
    2e94:	0018      	movs	r0, r3
    2e96:	4b26      	ldr	r3, [pc, #152]	; (2f30 <data_handler+0xe0c>)
    2e98:	4798      	blx	r3
		party_thresholds[7] = (uint16_t)temp;
    2e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e9c:	b29a      	uxth	r2, r3
    2e9e:	4b25      	ldr	r3, [pc, #148]	; (2f34 <data_handler+0xe10>)
    2ea0:	81da      	strh	r2, [r3, #14]
    2ea2:	e01c      	b.n	2ede <data_handler+0xdba>
	}
	else if (strncmp(buffer,CUT_OUT_VALVE_ON,sizeof(CUT_OUT_VALVE_ON)-1) == 0)
    2ea4:	4933      	ldr	r1, [pc, #204]	; (2f74 <data_handler+0xe50>)
    2ea6:	68fb      	ldr	r3, [r7, #12]
    2ea8:	2205      	movs	r2, #5
    2eaa:	0018      	movs	r0, r3
    2eac:	4b11      	ldr	r3, [pc, #68]	; (2ef4 <data_handler+0xdd0>)
    2eae:	4798      	blx	r3
    2eb0:	1e03      	subs	r3, r0, #0
    2eb2:	d106      	bne.n	2ec2 <data_handler+0xd9e>
	{
		valve_open = true;
    2eb4:	4b30      	ldr	r3, [pc, #192]	; (2f78 <data_handler+0xe54>)
    2eb6:	2201      	movs	r2, #1
    2eb8:	701a      	strb	r2, [r3, #0]
		valve_close = false;
    2eba:	4b30      	ldr	r3, [pc, #192]	; (2f7c <data_handler+0xe58>)
    2ebc:	2200      	movs	r2, #0
    2ebe:	701a      	strb	r2, [r3, #0]
    2ec0:	e00d      	b.n	2ede <data_handler+0xdba>
	}
	else if (strncmp(buffer,CUT_OUT_VALVE_OFF,sizeof(CUT_OUT_VALVE_OFF)-1) == 0)
    2ec2:	492f      	ldr	r1, [pc, #188]	; (2f80 <data_handler+0xe5c>)
    2ec4:	68fb      	ldr	r3, [r7, #12]
    2ec6:	2205      	movs	r2, #5
    2ec8:	0018      	movs	r0, r3
    2eca:	4b0a      	ldr	r3, [pc, #40]	; (2ef4 <data_handler+0xdd0>)
    2ecc:	4798      	blx	r3
    2ece:	1e03      	subs	r3, r0, #0
    2ed0:	d105      	bne.n	2ede <data_handler+0xdba>
	{
		valve_open = false;
    2ed2:	4b29      	ldr	r3, [pc, #164]	; (2f78 <data_handler+0xe54>)
    2ed4:	2200      	movs	r2, #0
    2ed6:	701a      	strb	r2, [r3, #0]
		valve_close = true;
    2ed8:	4b28      	ldr	r3, [pc, #160]	; (2f7c <data_handler+0xe58>)
    2eda:	2201      	movs	r2, #1
    2edc:	701a      	strb	r2, [r3, #0]
	}
	ble_uart_write("ACK");
    2ede:	4b29      	ldr	r3, [pc, #164]	; (2f84 <data_handler+0xe60>)
    2ee0:	0018      	movs	r0, r3
    2ee2:	4b06      	ldr	r3, [pc, #24]	; (2efc <data_handler+0xdd8>)
    2ee4:	4798      	blx	r3
}
    2ee6:	46c0      	nop			; (mov r8, r8)
    2ee8:	46bd      	mov	sp, r7
    2eea:	b017      	add	sp, #92	; 0x5c
    2eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	00009848 	.word	0x00009848
    2ef4:	0000836f 	.word	0x0000836f
    2ef8:	00009854 	.word	0x00009854
    2efc:	0000202d 	.word	0x0000202d
    2f00:	0000592d 	.word	0x0000592d
    2f04:	00006741 	.word	0x00006741
    2f08:	00001b57 	.word	0x00001b57
    2f0c:	00006701 	.word	0x00006701
    2f10:	00001b58 	.word	0x00001b58
    2f14:	20000001 	.word	0x20000001
    2f18:	00004da1 	.word	0x00004da1
    2f1c:	00003fe9 	.word	0x00003fe9
    2f20:	20000259 	.word	0x20000259
    2f24:	00009868 	.word	0x00009868
    2f28:	0000987c 	.word	0x0000987c
    2f2c:	00009888 	.word	0x00009888
    2f30:	0000830d 	.word	0x0000830d
    2f34:	200001b4 	.word	0x200001b4
    2f38:	00009894 	.word	0x00009894
    2f3c:	000009c4 	.word	0x000009c4
    2f40:	000098a0 	.word	0x000098a0
    2f44:	000098ac 	.word	0x000098ac
    2f48:	000098b8 	.word	0x000098b8
    2f4c:	000098c4 	.word	0x000098c4
    2f50:	000098d0 	.word	0x000098d0
    2f54:	000098dc 	.word	0x000098dc
    2f58:	000098e8 	.word	0x000098e8
    2f5c:	000098f4 	.word	0x000098f4
    2f60:	00009900 	.word	0x00009900
    2f64:	0000990c 	.word	0x0000990c
    2f68:	00009918 	.word	0x00009918
    2f6c:	00009924 	.word	0x00009924
    2f70:	00009930 	.word	0x00009930
    2f74:	0000993c 	.word	0x0000993c
    2f78:	200001b2 	.word	0x200001b2
    2f7c:	200001b0 	.word	0x200001b0
    2f80:	00009944 	.word	0x00009944
    2f84:	0000994c 	.word	0x0000994c

00002f88 <update_all_ports>:

void update_all_ports()
{
    2f88:	b580      	push	{r7, lr}
    2f8a:	b082      	sub	sp, #8
    2f8c:	af00      	add	r7, sp, #0
	else
	{
		data[1] = 0x00;
	}*/

	if (!port_update_ongoing)
    2f8e:	4b26      	ldr	r3, [pc, #152]	; (3028 <update_all_ports+0xa0>)
    2f90:	781b      	ldrb	r3, [r3, #0]
    2f92:	2201      	movs	r2, #1
    2f94:	4053      	eors	r3, r2
    2f96:	b2db      	uxtb	r3, r3
    2f98:	2b00      	cmp	r3, #0
    2f9a:	d040      	beq.n	301e <update_all_ports+0x96>
	{
		port_update_ongoing = true;
    2f9c:	4b22      	ldr	r3, [pc, #136]	; (3028 <update_all_ports+0xa0>)
    2f9e:	2201      	movs	r2, #1
    2fa0:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<8;i++)
    2fa2:	2300      	movs	r3, #0
    2fa4:	607b      	str	r3, [r7, #4]
    2fa6:	e034      	b.n	3012 <update_all_ports+0x8a>
		{
			mcp23017_data.devices[i].outputs.pa7 = 1;
    2fa8:	4a20      	ldr	r2, [pc, #128]	; (302c <update_all_ports+0xa4>)
    2faa:	687b      	ldr	r3, [r7, #4]
    2fac:	2108      	movs	r1, #8
    2fae:	011b      	lsls	r3, r3, #4
    2fb0:	18d3      	adds	r3, r2, r3
    2fb2:	185b      	adds	r3, r3, r1
    2fb4:	781a      	ldrb	r2, [r3, #0]
    2fb6:	2180      	movs	r1, #128	; 0x80
    2fb8:	4249      	negs	r1, r1
    2fba:	430a      	orrs	r2, r1
    2fbc:	701a      	strb	r2, [r3, #0]
			mcp23017_data.devices[i].outputs.pb7 = 1;
    2fbe:	4a1b      	ldr	r2, [pc, #108]	; (302c <update_all_ports+0xa4>)
    2fc0:	687b      	ldr	r3, [r7, #4]
    2fc2:	2108      	movs	r1, #8
    2fc4:	011b      	lsls	r3, r3, #4
    2fc6:	18d3      	adds	r3, r2, r3
    2fc8:	185b      	adds	r3, r3, r1
    2fca:	785a      	ldrb	r2, [r3, #1]
    2fcc:	2180      	movs	r1, #128	; 0x80
    2fce:	4249      	negs	r1, r1
    2fd0:	430a      	orrs	r2, r1
    2fd2:	705a      	strb	r2, [r3, #1]
			mcp23017_data.devices[i].status = mcp23017_set_pins(MCP23017_I2C_ADDR_000+i,mcp23017_data.devices[i].outputs.ports[0],mcp23017_data.devices[i].outputs.ports[1]);
    2fd4:	687b      	ldr	r3, [r7, #4]
    2fd6:	b2db      	uxtb	r3, r3
    2fd8:	3320      	adds	r3, #32
    2fda:	b2d8      	uxtb	r0, r3
    2fdc:	4a13      	ldr	r2, [pc, #76]	; (302c <update_all_ports+0xa4>)
    2fde:	687b      	ldr	r3, [r7, #4]
    2fe0:	011b      	lsls	r3, r3, #4
    2fe2:	18d3      	adds	r3, r2, r3
    2fe4:	3308      	adds	r3, #8
    2fe6:	7819      	ldrb	r1, [r3, #0]
    2fe8:	4a10      	ldr	r2, [pc, #64]	; (302c <update_all_ports+0xa4>)
    2fea:	687b      	ldr	r3, [r7, #4]
    2fec:	011b      	lsls	r3, r3, #4
    2fee:	18d3      	adds	r3, r2, r3
    2ff0:	3309      	adds	r3, #9
    2ff2:	781b      	ldrb	r3, [r3, #0]
    2ff4:	001a      	movs	r2, r3
    2ff6:	4b0e      	ldr	r3, [pc, #56]	; (3030 <update_all_ports+0xa8>)
    2ff8:	4798      	blx	r3
    2ffa:	0003      	movs	r3, r0
    2ffc:	0019      	movs	r1, r3
    2ffe:	4a0b      	ldr	r2, [pc, #44]	; (302c <update_all_ports+0xa4>)
    3000:	687b      	ldr	r3, [r7, #4]
    3002:	011b      	lsls	r3, r3, #4
    3004:	18d3      	adds	r3, r2, r3
    3006:	3303      	adds	r3, #3
    3008:	1c0a      	adds	r2, r1, #0
    300a:	701a      	strb	r2, [r3, #0]
	}*/

	if (!port_update_ongoing)
	{
		port_update_ongoing = true;
		for (int i=0;i<8;i++)
    300c:	687b      	ldr	r3, [r7, #4]
    300e:	3301      	adds	r3, #1
    3010:	607b      	str	r3, [r7, #4]
    3012:	687b      	ldr	r3, [r7, #4]
    3014:	2b07      	cmp	r3, #7
    3016:	ddc7      	ble.n	2fa8 <update_all_ports+0x20>
			mcp23017_data.devices[i].outputs.pb7 = 1;
			mcp23017_data.devices[i].status = mcp23017_set_pins(MCP23017_I2C_ADDR_000+i,mcp23017_data.devices[i].outputs.ports[0],mcp23017_data.devices[i].outputs.ports[1]);
			//data_LED[0][i] |= 0x80;
			//data_LED[1][i] |= 0x80;
		}
		port_update_ongoing = false;
    3018:	4b03      	ldr	r3, [pc, #12]	; (3028 <update_all_ports+0xa0>)
    301a:	2200      	movs	r2, #0
    301c:	701a      	strb	r2, [r3, #0]
	/*
	for(int i=0;i<8;i++)
	{
		mcp23017_set_pins(MCP23017_I2C_ADDR_000+i,(uint8_t)data[1],(uint8_t)data[1]);
	}*/
}
    301e:	46c0      	nop			; (mov r8, r8)
    3020:	46bd      	mov	sp, r7
    3022:	b002      	add	sp, #8
    3024:	bd80      	pop	{r7, pc}
    3026:	46c0      	nop			; (mov r8, r8)
    3028:	2000025f 	.word	0x2000025f
    302c:	20000010 	.word	0x20000010
    3030:	000040c1 	.word	0x000040c1

00003034 <party_lights>:
	}
}


void party_lights(uint16_t party_vals[])
{
    3034:	b590      	push	{r4, r7, lr}
    3036:	b083      	sub	sp, #12
    3038:	af00      	add	r7, sp, #0
    303a:	6078      	str	r0, [r7, #4]
	if (party_vals[0] > party_thresholds[0])
    303c:	687b      	ldr	r3, [r7, #4]
    303e:	881a      	ldrh	r2, [r3, #0]
    3040:	4b94      	ldr	r3, [pc, #592]	; (3294 <party_lights+0x260>)
    3042:	881b      	ldrh	r3, [r3, #0]
    3044:	429a      	cmp	r2, r3
    3046:	d918      	bls.n	307a <party_lights+0x46>
	{
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR,SUB_LEFT_PIN,true);
    3048:	2301      	movs	r3, #1
    304a:	2203      	movs	r2, #3
    304c:	2103      	movs	r1, #3
    304e:	2000      	movs	r0, #0
    3050:	4c91      	ldr	r4, [pc, #580]	; (3298 <party_lights+0x264>)
    3052:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR,SUB_RIGHT_PIN,true);
    3054:	2301      	movs	r3, #1
    3056:	2204      	movs	r2, #4
    3058:	2103      	movs	r1, #3
    305a:	2000      	movs	r0, #0
    305c:	4c8e      	ldr	r4, [pc, #568]	; (3298 <party_lights+0x264>)
    305e:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    3060:	2301      	movs	r3, #1
    3062:	2201      	movs	r2, #1
    3064:	2104      	movs	r1, #4
    3066:	2000      	movs	r0, #0
    3068:	4c8b      	ldr	r4, [pc, #556]	; (3298 <party_lights+0x264>)
    306a:	47a0      	blx	r4
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    306c:	2301      	movs	r3, #1
    306e:	2201      	movs	r2, #1
    3070:	2103      	movs	r1, #3
    3072:	2000      	movs	r0, #0
    3074:	4c88      	ldr	r4, [pc, #544]	; (3298 <party_lights+0x264>)
    3076:	47a0      	blx	r4
    3078:	e017      	b.n	30aa <party_lights+0x76>
		//configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
		//configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
	}
	else
	{
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR, SUB_LEFT_PIN,false);
    307a:	2300      	movs	r3, #0
    307c:	2203      	movs	r2, #3
    307e:	2103      	movs	r1, #3
    3080:	2000      	movs	r0, #0
    3082:	4c85      	ldr	r4, [pc, #532]	; (3298 <party_lights+0x264>)
    3084:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR, SUB_RIGHT_PIN,false);
    3086:	2300      	movs	r3, #0
    3088:	2204      	movs	r2, #4
    308a:	2103      	movs	r1, #3
    308c:	2000      	movs	r0, #0
    308e:	4c82      	ldr	r4, [pc, #520]	; (3298 <party_lights+0x264>)
    3090:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    3092:	2300      	movs	r3, #0
    3094:	2201      	movs	r2, #1
    3096:	2104      	movs	r1, #4
    3098:	2000      	movs	r0, #0
    309a:	4c7f      	ldr	r4, [pc, #508]	; (3298 <party_lights+0x264>)
    309c:	47a0      	blx	r4
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    309e:	2300      	movs	r3, #0
    30a0:	2201      	movs	r2, #1
    30a2:	2103      	movs	r1, #3
    30a4:	2000      	movs	r0, #0
    30a6:	4c7c      	ldr	r4, [pc, #496]	; (3298 <party_lights+0x264>)
    30a8:	47a0      	blx	r4
		//configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
		//configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
	}
	if (party_vals[1] > party_thresholds[1])
    30aa:	687b      	ldr	r3, [r7, #4]
    30ac:	3302      	adds	r3, #2
    30ae:	881a      	ldrh	r2, [r3, #0]
    30b0:	4b78      	ldr	r3, [pc, #480]	; (3294 <party_lights+0x260>)
    30b2:	885b      	ldrh	r3, [r3, #2]
    30b4:	429a      	cmp	r2, r3
    30b6:	d92a      	bls.n	310e <party_lights+0xda>
	{
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    30b8:	2301      	movs	r3, #1
    30ba:	2200      	movs	r2, #0
    30bc:	2102      	movs	r1, #2
    30be:	2000      	movs	r0, #0
    30c0:	4c75      	ldr	r4, [pc, #468]	; (3298 <party_lights+0x264>)
    30c2:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    30c4:	2301      	movs	r3, #1
    30c6:	2200      	movs	r2, #0
    30c8:	2101      	movs	r1, #1
    30ca:	2000      	movs	r0, #0
    30cc:	4c72      	ldr	r4, [pc, #456]	; (3298 <party_lights+0x264>)
    30ce:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    30d0:	2301      	movs	r3, #1
    30d2:	2200      	movs	r2, #0
    30d4:	2104      	movs	r1, #4
    30d6:	2000      	movs	r0, #0
    30d8:	4c6f      	ldr	r4, [pc, #444]	; (3298 <party_lights+0x264>)
    30da:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    30dc:	2301      	movs	r3, #1
    30de:	2200      	movs	r2, #0
    30e0:	2103      	movs	r1, #3
    30e2:	2000      	movs	r0, #0
    30e4:	4c6c      	ldr	r4, [pc, #432]	; (3298 <party_lights+0x264>)
    30e6:	47a0      	blx	r4
		
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,true);
    30e8:	2301      	movs	r3, #1
    30ea:	2203      	movs	r2, #3
    30ec:	2105      	movs	r1, #5
    30ee:	2000      	movs	r0, #0
    30f0:	4c69      	ldr	r4, [pc, #420]	; (3298 <party_lights+0x264>)
    30f2:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,true);
    30f4:	2301      	movs	r3, #1
    30f6:	2202      	movs	r2, #2
    30f8:	2105      	movs	r1, #5
    30fa:	2000      	movs	r0, #0
    30fc:	4c66      	ldr	r4, [pc, #408]	; (3298 <party_lights+0x264>)
    30fe:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,true);	}
    3100:	2301      	movs	r3, #1
    3102:	2204      	movs	r2, #4
    3104:	2105      	movs	r1, #5
    3106:	2000      	movs	r0, #0
    3108:	4c63      	ldr	r4, [pc, #396]	; (3298 <party_lights+0x264>)
    310a:	47a0      	blx	r4
    310c:	e029      	b.n	3162 <party_lights+0x12e>
	else
	{
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,false);
    310e:	2300      	movs	r3, #0
    3110:	2200      	movs	r2, #0
    3112:	2102      	movs	r1, #2
    3114:	2000      	movs	r0, #0
    3116:	4c60      	ldr	r4, [pc, #384]	; (3298 <party_lights+0x264>)
    3118:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,false);
    311a:	2300      	movs	r3, #0
    311c:	2200      	movs	r2, #0
    311e:	2101      	movs	r1, #1
    3120:	2000      	movs	r0, #0
    3122:	4c5d      	ldr	r4, [pc, #372]	; (3298 <party_lights+0x264>)
    3124:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    3126:	2300      	movs	r3, #0
    3128:	2200      	movs	r2, #0
    312a:	2104      	movs	r1, #4
    312c:	2000      	movs	r0, #0
    312e:	4c5a      	ldr	r4, [pc, #360]	; (3298 <party_lights+0x264>)
    3130:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    3132:	2300      	movs	r3, #0
    3134:	2200      	movs	r2, #0
    3136:	2103      	movs	r1, #3
    3138:	2000      	movs	r0, #0
    313a:	4c57      	ldr	r4, [pc, #348]	; (3298 <party_lights+0x264>)
    313c:	47a0      	blx	r4
		
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,false);
    313e:	2300      	movs	r3, #0
    3140:	2203      	movs	r2, #3
    3142:	2105      	movs	r1, #5
    3144:	2000      	movs	r0, #0
    3146:	4c54      	ldr	r4, [pc, #336]	; (3298 <party_lights+0x264>)
    3148:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,false);
    314a:	2300      	movs	r3, #0
    314c:	2202      	movs	r2, #2
    314e:	2105      	movs	r1, #5
    3150:	2000      	movs	r0, #0
    3152:	4c51      	ldr	r4, [pc, #324]	; (3298 <party_lights+0x264>)
    3154:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,false);
    3156:	2300      	movs	r3, #0
    3158:	2204      	movs	r2, #4
    315a:	2105      	movs	r1, #5
    315c:	2000      	movs	r0, #0
    315e:	4c4e      	ldr	r4, [pc, #312]	; (3298 <party_lights+0x264>)
    3160:	47a0      	blx	r4
	}
	if (party_vals[2] > party_thresholds[2])
    3162:	687b      	ldr	r3, [r7, #4]
    3164:	3304      	adds	r3, #4
    3166:	881a      	ldrh	r2, [r3, #0]
    3168:	4b4a      	ldr	r3, [pc, #296]	; (3294 <party_lights+0x260>)
    316a:	889b      	ldrh	r3, [r3, #4]
    316c:	429a      	cmp	r2, r3
    316e:	d90c      	bls.n	318a <party_lights+0x156>
	{
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    3170:	2301      	movs	r3, #1
    3172:	2201      	movs	r2, #1
    3174:	2102      	movs	r1, #2
    3176:	2000      	movs	r0, #0
    3178:	4c47      	ldr	r4, [pc, #284]	; (3298 <party_lights+0x264>)
    317a:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    317c:	2301      	movs	r3, #1
    317e:	2201      	movs	r2, #1
    3180:	2101      	movs	r1, #1
    3182:	2000      	movs	r0, #0
    3184:	4c44      	ldr	r4, [pc, #272]	; (3298 <party_lights+0x264>)
    3186:	47a0      	blx	r4
    3188:	e00b      	b.n	31a2 <party_lights+0x16e>
	}
	else
	{
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    318a:	2300      	movs	r3, #0
    318c:	2201      	movs	r2, #1
    318e:	2102      	movs	r1, #2
    3190:	2000      	movs	r0, #0
    3192:	4c41      	ldr	r4, [pc, #260]	; (3298 <party_lights+0x264>)
    3194:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    3196:	2300      	movs	r3, #0
    3198:	2201      	movs	r2, #1
    319a:	2101      	movs	r1, #1
    319c:	2000      	movs	r0, #0
    319e:	4c3e      	ldr	r4, [pc, #248]	; (3298 <party_lights+0x264>)
    31a0:	47a0      	blx	r4
	}
	if (party_vals[3] > party_thresholds[3])
    31a2:	687b      	ldr	r3, [r7, #4]
    31a4:	3306      	adds	r3, #6
    31a6:	881a      	ldrh	r2, [r3, #0]
    31a8:	4b3a      	ldr	r3, [pc, #232]	; (3294 <party_lights+0x260>)
    31aa:	88db      	ldrh	r3, [r3, #6]
    31ac:	429a      	cmp	r2, r3
    31ae:	d90c      	bls.n	31ca <party_lights+0x196>
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    31b0:	2301      	movs	r3, #1
    31b2:	2202      	movs	r2, #2
    31b4:	2102      	movs	r1, #2
    31b6:	2000      	movs	r0, #0
    31b8:	4c37      	ldr	r4, [pc, #220]	; (3298 <party_lights+0x264>)
    31ba:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    31bc:	2301      	movs	r3, #1
    31be:	2202      	movs	r2, #2
    31c0:	2101      	movs	r1, #1
    31c2:	2000      	movs	r0, #0
    31c4:	4c34      	ldr	r4, [pc, #208]	; (3298 <party_lights+0x264>)
    31c6:	47a0      	blx	r4
    31c8:	e00b      	b.n	31e2 <party_lights+0x1ae>
	}
	else
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    31ca:	2300      	movs	r3, #0
    31cc:	2202      	movs	r2, #2
    31ce:	2102      	movs	r1, #2
    31d0:	2000      	movs	r0, #0
    31d2:	4c31      	ldr	r4, [pc, #196]	; (3298 <party_lights+0x264>)
    31d4:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    31d6:	2300      	movs	r3, #0
    31d8:	2202      	movs	r2, #2
    31da:	2101      	movs	r1, #1
    31dc:	2000      	movs	r0, #0
    31de:	4c2e      	ldr	r4, [pc, #184]	; (3298 <party_lights+0x264>)
    31e0:	47a0      	blx	r4
	}
	if (party_vals[4] > party_thresholds[4])
    31e2:	687b      	ldr	r3, [r7, #4]
    31e4:	3308      	adds	r3, #8
    31e6:	881a      	ldrh	r2, [r3, #0]
    31e8:	4b2a      	ldr	r3, [pc, #168]	; (3294 <party_lights+0x260>)
    31ea:	891b      	ldrh	r3, [r3, #8]
    31ec:	429a      	cmp	r2, r3
    31ee:	d90c      	bls.n	320a <party_lights+0x1d6>
	{
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    31f0:	2301      	movs	r3, #1
    31f2:	2202      	movs	r2, #2
    31f4:	2104      	movs	r1, #4
    31f6:	2000      	movs	r0, #0
    31f8:	4c27      	ldr	r4, [pc, #156]	; (3298 <party_lights+0x264>)
    31fa:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    31fc:	2301      	movs	r3, #1
    31fe:	2202      	movs	r2, #2
    3200:	2103      	movs	r1, #3
    3202:	2000      	movs	r0, #0
    3204:	4c24      	ldr	r4, [pc, #144]	; (3298 <party_lights+0x264>)
    3206:	47a0      	blx	r4
    3208:	e00b      	b.n	3222 <party_lights+0x1ee>
	}
	else
	{
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,false);
    320a:	2300      	movs	r3, #0
    320c:	2202      	movs	r2, #2
    320e:	2104      	movs	r1, #4
    3210:	2000      	movs	r0, #0
    3212:	4c21      	ldr	r4, [pc, #132]	; (3298 <party_lights+0x264>)
    3214:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,false);
    3216:	2300      	movs	r3, #0
    3218:	2202      	movs	r2, #2
    321a:	2103      	movs	r1, #3
    321c:	2000      	movs	r0, #0
    321e:	4c1e      	ldr	r4, [pc, #120]	; (3298 <party_lights+0x264>)
    3220:	47a0      	blx	r4
	}
	if (party_vals[5] > party_thresholds[5])
    3222:	687b      	ldr	r3, [r7, #4]
    3224:	330a      	adds	r3, #10
    3226:	881a      	ldrh	r2, [r3, #0]
    3228:	4b1a      	ldr	r3, [pc, #104]	; (3294 <party_lights+0x260>)
    322a:	895b      	ldrh	r3, [r3, #10]
    322c:	429a      	cmp	r2, r3
    322e:	d90c      	bls.n	324a <party_lights+0x216>
	{
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    3230:	2301      	movs	r3, #1
    3232:	2203      	movs	r2, #3
    3234:	2101      	movs	r1, #1
    3236:	2000      	movs	r0, #0
    3238:	4c17      	ldr	r4, [pc, #92]	; (3298 <party_lights+0x264>)
    323a:	47a0      	blx	r4
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    323c:	2301      	movs	r3, #1
    323e:	2203      	movs	r2, #3
    3240:	2102      	movs	r1, #2
    3242:	2000      	movs	r0, #0
    3244:	4c14      	ldr	r4, [pc, #80]	; (3298 <party_lights+0x264>)
    3246:	47a0      	blx	r4
    3248:	e00b      	b.n	3262 <party_lights+0x22e>
	}
	else
	{
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    324a:	2300      	movs	r3, #0
    324c:	2203      	movs	r2, #3
    324e:	2101      	movs	r1, #1
    3250:	2000      	movs	r0, #0
    3252:	4c11      	ldr	r4, [pc, #68]	; (3298 <party_lights+0x264>)
    3254:	47a0      	blx	r4
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    3256:	2300      	movs	r3, #0
    3258:	2203      	movs	r2, #3
    325a:	2102      	movs	r1, #2
    325c:	2000      	movs	r0, #0
    325e:	4c0e      	ldr	r4, [pc, #56]	; (3298 <party_lights+0x264>)
    3260:	47a0      	blx	r4
	}
	if (party_vals[6] > party_thresholds[6])
    3262:	687b      	ldr	r3, [r7, #4]
    3264:	330c      	adds	r3, #12
    3266:	881a      	ldrh	r2, [r3, #0]
    3268:	4b0a      	ldr	r3, [pc, #40]	; (3294 <party_lights+0x260>)
    326a:	899b      	ldrh	r3, [r3, #12]
    326c:	429a      	cmp	r2, r3
    326e:	d906      	bls.n	327e <party_lights+0x24a>
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    3270:	2301      	movs	r3, #1
    3272:	2204      	movs	r2, #4
    3274:	2101      	movs	r1, #1
    3276:	2000      	movs	r0, #0
    3278:	4c07      	ldr	r4, [pc, #28]	; (3298 <party_lights+0x264>)
    327a:	47a0      	blx	r4
	}
	else
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
	}
}
    327c:	e005      	b.n	328a <party_lights+0x256>
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
	}
	else
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    327e:	2300      	movs	r3, #0
    3280:	2204      	movs	r2, #4
    3282:	2101      	movs	r1, #1
    3284:	2000      	movs	r0, #0
    3286:	4c04      	ldr	r4, [pc, #16]	; (3298 <party_lights+0x264>)
    3288:	47a0      	blx	r4
	}
}
    328a:	46c0      	nop			; (mov r8, r8)
    328c:	46bd      	mov	sp, r7
    328e:	b003      	add	sp, #12
    3290:	bd90      	pop	{r4, r7, pc}
    3292:	46c0      	nop			; (mov r8, r8)
    3294:	200001b4 	.word	0x200001b4
    3298:	00003b05 	.word	0x00003b05

0000329c <flashy_flash1>:

void flashy_flash1()
{
    329c:	b5b0      	push	{r4, r5, r7, lr}
    329e:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
    32a0:	4b7c      	ldr	r3, [pc, #496]	; (3494 <flashy_flash1+0x1f8>)
    32a2:	781b      	ldrb	r3, [r3, #0]
    32a4:	2b13      	cmp	r3, #19
    32a6:	d900      	bls.n	32aa <flashy_flash1+0xe>
    32a8:	e0ea      	b.n	3480 <flashy_flash1+0x1e4>
    32aa:	009a      	lsls	r2, r3, #2
    32ac:	4b7a      	ldr	r3, [pc, #488]	; (3498 <flashy_flash1+0x1fc>)
    32ae:	18d3      	adds	r3, r2, r3
    32b0:	681b      	ldr	r3, [r3, #0]
    32b2:	469f      	mov	pc, r3
	{
		case 0:
			reset_all_lights();
    32b4:	4b79      	ldr	r3, [pc, #484]	; (349c <flashy_flash1+0x200>)
    32b6:	4798      	blx	r3
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    32b8:	2301      	movs	r3, #1
    32ba:	2202      	movs	r2, #2
    32bc:	2102      	movs	r1, #2
    32be:	2000      	movs	r0, #0
    32c0:	4c77      	ldr	r4, [pc, #476]	; (34a0 <flashy_flash1+0x204>)
    32c2:	47a0      	blx	r4
			state++;
    32c4:	4b73      	ldr	r3, [pc, #460]	; (3494 <flashy_flash1+0x1f8>)
    32c6:	781b      	ldrb	r3, [r3, #0]
    32c8:	3301      	adds	r3, #1
    32ca:	b2da      	uxtb	r2, r3
    32cc:	4b71      	ldr	r3, [pc, #452]	; (3494 <flashy_flash1+0x1f8>)
    32ce:	701a      	strb	r2, [r3, #0]
			break;
    32d0:	e0dc      	b.n	348c <flashy_flash1+0x1f0>
		case 1:
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    32d2:	2300      	movs	r3, #0
    32d4:	2202      	movs	r2, #2
    32d6:	2102      	movs	r1, #2
    32d8:	2000      	movs	r0, #0
    32da:	4c71      	ldr	r4, [pc, #452]	; (34a0 <flashy_flash1+0x204>)
    32dc:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    32de:	2301      	movs	r3, #1
    32e0:	2201      	movs	r2, #1
    32e2:	2102      	movs	r1, #2
    32e4:	2000      	movs	r0, #0
    32e6:	4c6e      	ldr	r4, [pc, #440]	; (34a0 <flashy_flash1+0x204>)
    32e8:	47a0      	blx	r4
			state++;
    32ea:	4b6a      	ldr	r3, [pc, #424]	; (3494 <flashy_flash1+0x1f8>)
    32ec:	781b      	ldrb	r3, [r3, #0]
    32ee:	3301      	adds	r3, #1
    32f0:	b2da      	uxtb	r2, r3
    32f2:	4b68      	ldr	r3, [pc, #416]	; (3494 <flashy_flash1+0x1f8>)
    32f4:	701a      	strb	r2, [r3, #0]
			break;
    32f6:	e0c9      	b.n	348c <flashy_flash1+0x1f0>
		case 2:
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    32f8:	2300      	movs	r3, #0
    32fa:	2201      	movs	r2, #1
    32fc:	2102      	movs	r1, #2
    32fe:	2000      	movs	r0, #0
    3300:	4c67      	ldr	r4, [pc, #412]	; (34a0 <flashy_flash1+0x204>)
    3302:	47a0      	blx	r4
			configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    3304:	2301      	movs	r3, #1
    3306:	2200      	movs	r2, #0
    3308:	2102      	movs	r1, #2
    330a:	2000      	movs	r0, #0
    330c:	4c64      	ldr	r4, [pc, #400]	; (34a0 <flashy_flash1+0x204>)
    330e:	47a0      	blx	r4
			state++;
    3310:	4b60      	ldr	r3, [pc, #384]	; (3494 <flashy_flash1+0x1f8>)
    3312:	781b      	ldrb	r3, [r3, #0]
    3314:	3301      	adds	r3, #1
    3316:	b2da      	uxtb	r2, r3
    3318:	4b5e      	ldr	r3, [pc, #376]	; (3494 <flashy_flash1+0x1f8>)
    331a:	701a      	strb	r2, [r3, #0]
			break;
    331c:	e0b6      	b.n	348c <flashy_flash1+0x1f0>
		case 3:
			configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,false);
    331e:	2300      	movs	r3, #0
    3320:	2200      	movs	r2, #0
    3322:	2102      	movs	r1, #2
    3324:	2000      	movs	r0, #0
    3326:	4c5e      	ldr	r4, [pc, #376]	; (34a0 <flashy_flash1+0x204>)
    3328:	47a0      	blx	r4
			configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    332a:	2301      	movs	r3, #1
    332c:	2200      	movs	r2, #0
    332e:	2101      	movs	r1, #1
    3330:	2000      	movs	r0, #0
    3332:	4c5b      	ldr	r4, [pc, #364]	; (34a0 <flashy_flash1+0x204>)
    3334:	47a0      	blx	r4
			state++;
    3336:	4b57      	ldr	r3, [pc, #348]	; (3494 <flashy_flash1+0x1f8>)
    3338:	781b      	ldrb	r3, [r3, #0]
    333a:	3301      	adds	r3, #1
    333c:	b2da      	uxtb	r2, r3
    333e:	4b55      	ldr	r3, [pc, #340]	; (3494 <flashy_flash1+0x1f8>)
    3340:	701a      	strb	r2, [r3, #0]
			break;
    3342:	e0a3      	b.n	348c <flashy_flash1+0x1f0>
		case 4:
			configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,false);
    3344:	2300      	movs	r3, #0
    3346:	2200      	movs	r2, #0
    3348:	2101      	movs	r1, #1
    334a:	2000      	movs	r0, #0
    334c:	4c54      	ldr	r4, [pc, #336]	; (34a0 <flashy_flash1+0x204>)
    334e:	47a0      	blx	r4
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    3350:	2301      	movs	r3, #1
    3352:	2201      	movs	r2, #1
    3354:	2101      	movs	r1, #1
    3356:	2000      	movs	r0, #0
    3358:	4c51      	ldr	r4, [pc, #324]	; (34a0 <flashy_flash1+0x204>)
    335a:	47a0      	blx	r4
			state++;
    335c:	4b4d      	ldr	r3, [pc, #308]	; (3494 <flashy_flash1+0x1f8>)
    335e:	781b      	ldrb	r3, [r3, #0]
    3360:	3301      	adds	r3, #1
    3362:	b2da      	uxtb	r2, r3
    3364:	4b4b      	ldr	r3, [pc, #300]	; (3494 <flashy_flash1+0x1f8>)
    3366:	701a      	strb	r2, [r3, #0]
			break;
    3368:	e090      	b.n	348c <flashy_flash1+0x1f0>
		case 5:
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    336a:	2300      	movs	r3, #0
    336c:	2201      	movs	r2, #1
    336e:	2101      	movs	r1, #1
    3370:	2000      	movs	r0, #0
    3372:	4c4b      	ldr	r4, [pc, #300]	; (34a0 <flashy_flash1+0x204>)
    3374:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    3376:	2301      	movs	r3, #1
    3378:	2202      	movs	r2, #2
    337a:	2101      	movs	r1, #1
    337c:	2000      	movs	r0, #0
    337e:	4c48      	ldr	r4, [pc, #288]	; (34a0 <flashy_flash1+0x204>)
    3380:	47a0      	blx	r4
			state++;
    3382:	4b44      	ldr	r3, [pc, #272]	; (3494 <flashy_flash1+0x1f8>)
    3384:	781b      	ldrb	r3, [r3, #0]
    3386:	3301      	adds	r3, #1
    3388:	b2da      	uxtb	r2, r3
    338a:	4b42      	ldr	r3, [pc, #264]	; (3494 <flashy_flash1+0x1f8>)
    338c:	701a      	strb	r2, [r3, #0]
			break;
    338e:	e07d      	b.n	348c <flashy_flash1+0x1f0>
		case 6:
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    3390:	2300      	movs	r3, #0
    3392:	2202      	movs	r2, #2
    3394:	2101      	movs	r1, #1
    3396:	2000      	movs	r0, #0
    3398:	4c41      	ldr	r4, [pc, #260]	; (34a0 <flashy_flash1+0x204>)
    339a:	47a0      	blx	r4
			configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    339c:	2301      	movs	r3, #1
    339e:	2202      	movs	r2, #2
    33a0:	2103      	movs	r1, #3
    33a2:	2000      	movs	r0, #0
    33a4:	4c3e      	ldr	r4, [pc, #248]	; (34a0 <flashy_flash1+0x204>)
    33a6:	47a0      	blx	r4
			state++;
    33a8:	4b3a      	ldr	r3, [pc, #232]	; (3494 <flashy_flash1+0x1f8>)
    33aa:	781b      	ldrb	r3, [r3, #0]
    33ac:	3301      	adds	r3, #1
    33ae:	b2da      	uxtb	r2, r3
    33b0:	4b38      	ldr	r3, [pc, #224]	; (3494 <flashy_flash1+0x1f8>)
    33b2:	701a      	strb	r2, [r3, #0]
			break;
    33b4:	e06a      	b.n	348c <flashy_flash1+0x1f0>
		case 7:
			configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,false);
    33b6:	2300      	movs	r3, #0
    33b8:	2202      	movs	r2, #2
    33ba:	2103      	movs	r1, #3
    33bc:	2000      	movs	r0, #0
    33be:	4c38      	ldr	r4, [pc, #224]	; (34a0 <flashy_flash1+0x204>)
    33c0:	47a0      	blx	r4
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    33c2:	2301      	movs	r3, #1
    33c4:	2201      	movs	r2, #1
    33c6:	2103      	movs	r1, #3
    33c8:	2000      	movs	r0, #0
    33ca:	4c35      	ldr	r4, [pc, #212]	; (34a0 <flashy_flash1+0x204>)
    33cc:	47a0      	blx	r4
			state++;
    33ce:	4b31      	ldr	r3, [pc, #196]	; (3494 <flashy_flash1+0x1f8>)
    33d0:	781b      	ldrb	r3, [r3, #0]
    33d2:	3301      	adds	r3, #1
    33d4:	b2da      	uxtb	r2, r3
    33d6:	4b2f      	ldr	r3, [pc, #188]	; (3494 <flashy_flash1+0x1f8>)
    33d8:	701a      	strb	r2, [r3, #0]
			break;
    33da:	e057      	b.n	348c <flashy_flash1+0x1f0>
		case 8:
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    33dc:	2300      	movs	r3, #0
    33de:	2201      	movs	r2, #1
    33e0:	2103      	movs	r1, #3
    33e2:	2000      	movs	r0, #0
    33e4:	4c2e      	ldr	r4, [pc, #184]	; (34a0 <flashy_flash1+0x204>)
    33e6:	47a0      	blx	r4
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    33e8:	2301      	movs	r3, #1
    33ea:	2200      	movs	r2, #0
    33ec:	2103      	movs	r1, #3
    33ee:	2000      	movs	r0, #0
    33f0:	4c2b      	ldr	r4, [pc, #172]	; (34a0 <flashy_flash1+0x204>)
    33f2:	47a0      	blx	r4
			state++;
    33f4:	4b27      	ldr	r3, [pc, #156]	; (3494 <flashy_flash1+0x1f8>)
    33f6:	781b      	ldrb	r3, [r3, #0]
    33f8:	3301      	adds	r3, #1
    33fa:	b2da      	uxtb	r2, r3
    33fc:	4b25      	ldr	r3, [pc, #148]	; (3494 <flashy_flash1+0x1f8>)
    33fe:	701a      	strb	r2, [r3, #0]
			break;
    3400:	e044      	b.n	348c <flashy_flash1+0x1f0>
		case 9:
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    3402:	2300      	movs	r3, #0
    3404:	2200      	movs	r2, #0
    3406:	2103      	movs	r1, #3
    3408:	2000      	movs	r0, #0
    340a:	4c25      	ldr	r4, [pc, #148]	; (34a0 <flashy_flash1+0x204>)
    340c:	47a0      	blx	r4
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    340e:	2301      	movs	r3, #1
    3410:	2201      	movs	r2, #1
    3412:	2104      	movs	r1, #4
    3414:	2000      	movs	r0, #0
    3416:	4c22      	ldr	r4, [pc, #136]	; (34a0 <flashy_flash1+0x204>)
    3418:	47a0      	blx	r4
			state++;
    341a:	4b1e      	ldr	r3, [pc, #120]	; (3494 <flashy_flash1+0x1f8>)
    341c:	781b      	ldrb	r3, [r3, #0]
    341e:	3301      	adds	r3, #1
    3420:	b2da      	uxtb	r2, r3
    3422:	4b1c      	ldr	r3, [pc, #112]	; (3494 <flashy_flash1+0x1f8>)
    3424:	701a      	strb	r2, [r3, #0]
			break;
    3426:	e031      	b.n	348c <flashy_flash1+0x1f0>
		case 10:
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    3428:	2300      	movs	r3, #0
    342a:	2201      	movs	r2, #1
    342c:	2104      	movs	r1, #4
    342e:	2000      	movs	r0, #0
    3430:	4c1b      	ldr	r4, [pc, #108]	; (34a0 <flashy_flash1+0x204>)
    3432:	47a0      	blx	r4
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    3434:	2301      	movs	r3, #1
    3436:	2200      	movs	r2, #0
    3438:	2104      	movs	r1, #4
    343a:	2000      	movs	r0, #0
    343c:	4c18      	ldr	r4, [pc, #96]	; (34a0 <flashy_flash1+0x204>)
    343e:	47a0      	blx	r4
			state++;
    3440:	4b14      	ldr	r3, [pc, #80]	; (3494 <flashy_flash1+0x1f8>)
    3442:	781b      	ldrb	r3, [r3, #0]
    3444:	3301      	adds	r3, #1
    3446:	b2da      	uxtb	r2, r3
    3448:	4b12      	ldr	r3, [pc, #72]	; (3494 <flashy_flash1+0x1f8>)
    344a:	701a      	strb	r2, [r3, #0]
			break;
    344c:	e01e      	b.n	348c <flashy_flash1+0x1f0>
		case 11:
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    344e:	2300      	movs	r3, #0
    3450:	2200      	movs	r2, #0
    3452:	2104      	movs	r1, #4
    3454:	2000      	movs	r0, #0
    3456:	4c12      	ldr	r4, [pc, #72]	; (34a0 <flashy_flash1+0x204>)
    3458:	47a0      	blx	r4
			configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    345a:	2301      	movs	r3, #1
    345c:	2202      	movs	r2, #2
    345e:	2104      	movs	r1, #4
    3460:	2000      	movs	r0, #0
    3462:	4c0f      	ldr	r4, [pc, #60]	; (34a0 <flashy_flash1+0x204>)
    3464:	47a0      	blx	r4
			state++;
    3466:	4b0b      	ldr	r3, [pc, #44]	; (3494 <flashy_flash1+0x1f8>)
    3468:	781b      	ldrb	r3, [r3, #0]
    346a:	3301      	adds	r3, #1
    346c:	b2da      	uxtb	r2, r3
    346e:	4b09      	ldr	r3, [pc, #36]	; (3494 <flashy_flash1+0x1f8>)
    3470:	701a      	strb	r2, [r3, #0]
			break;
    3472:	e00b      	b.n	348c <flashy_flash1+0x1f0>
		case 18:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
			state++;
			break;*/
		case 19:
			reset_all_lights();
    3474:	4b09      	ldr	r3, [pc, #36]	; (349c <flashy_flash1+0x200>)
    3476:	4798      	blx	r3
			state = 0;
    3478:	4b06      	ldr	r3, [pc, #24]	; (3494 <flashy_flash1+0x1f8>)
    347a:	2200      	movs	r2, #0
    347c:	701a      	strb	r2, [r3, #0]
			break;
    347e:	e005      	b.n	348c <flashy_flash1+0x1f0>
			
		default:
			reset_all_lights();
    3480:	4b06      	ldr	r3, [pc, #24]	; (349c <flashy_flash1+0x200>)
    3482:	4798      	blx	r3
			state = 0;
    3484:	4b03      	ldr	r3, [pc, #12]	; (3494 <flashy_flash1+0x1f8>)
    3486:	2200      	movs	r2, #0
    3488:	701a      	strb	r2, [r3, #0]
			break;
    348a:	46c0      	nop			; (mov r8, r8)
	}
}
    348c:	46c0      	nop			; (mov r8, r8)
    348e:	46bd      	mov	sp, r7
    3490:	bdb0      	pop	{r4, r5, r7, pc}
    3492:	46c0      	nop			; (mov r8, r8)
    3494:	20000120 	.word	0x20000120
    3498:	00009978 	.word	0x00009978
    349c:	0000388d 	.word	0x0000388d
    34a0:	00003b05 	.word	0x00003b05

000034a4 <flashy_flash2>:

void flashy_flash2()
{
    34a4:	b5b0      	push	{r4, r5, r7, lr}
    34a6:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
    34a8:	4b8e      	ldr	r3, [pc, #568]	; (36e4 <flashy_flash2+0x240>)
    34aa:	781b      	ldrb	r3, [r3, #0]
    34ac:	2b0a      	cmp	r3, #10
    34ae:	d900      	bls.n	34b2 <flashy_flash2+0xe>
    34b0:	e110      	b.n	36d4 <flashy_flash2+0x230>
    34b2:	009a      	lsls	r2, r3, #2
    34b4:	4b8c      	ldr	r3, [pc, #560]	; (36e8 <flashy_flash2+0x244>)
    34b6:	18d3      	adds	r3, r2, r3
    34b8:	681b      	ldr	r3, [r3, #0]
    34ba:	469f      	mov	pc, r3
	{
		case 0:
			reset_all_lights();
    34bc:	4b8b      	ldr	r3, [pc, #556]	; (36ec <flashy_flash2+0x248>)
    34be:	4798      	blx	r3
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    34c0:	2301      	movs	r3, #1
    34c2:	2204      	movs	r2, #4
    34c4:	2101      	movs	r1, #1
    34c6:	2000      	movs	r0, #0
    34c8:	4c89      	ldr	r4, [pc, #548]	; (36f0 <flashy_flash2+0x24c>)
    34ca:	47a0      	blx	r4
			state++;
    34cc:	4b85      	ldr	r3, [pc, #532]	; (36e4 <flashy_flash2+0x240>)
    34ce:	781b      	ldrb	r3, [r3, #0]
    34d0:	3301      	adds	r3, #1
    34d2:	b2da      	uxtb	r2, r3
    34d4:	4b83      	ldr	r3, [pc, #524]	; (36e4 <flashy_flash2+0x240>)
    34d6:	701a      	strb	r2, [r3, #0]
			break;
    34d8:	e101      	b.n	36de <flashy_flash2+0x23a>
		case 1:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    34da:	2300      	movs	r3, #0
    34dc:	2204      	movs	r2, #4
    34de:	2101      	movs	r1, #1
    34e0:	2000      	movs	r0, #0
    34e2:	4c83      	ldr	r4, [pc, #524]	; (36f0 <flashy_flash2+0x24c>)
    34e4:	47a0      	blx	r4
			state++;
    34e6:	4b7f      	ldr	r3, [pc, #508]	; (36e4 <flashy_flash2+0x240>)
    34e8:	781b      	ldrb	r3, [r3, #0]
    34ea:	3301      	adds	r3, #1
    34ec:	b2da      	uxtb	r2, r3
    34ee:	4b7d      	ldr	r3, [pc, #500]	; (36e4 <flashy_flash2+0x240>)
    34f0:	701a      	strb	r2, [r3, #0]
			break;
    34f2:	e0f4      	b.n	36de <flashy_flash2+0x23a>
		case 2:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    34f4:	2301      	movs	r3, #1
    34f6:	2204      	movs	r2, #4
    34f8:	2101      	movs	r1, #1
    34fa:	2000      	movs	r0, #0
    34fc:	4c7c      	ldr	r4, [pc, #496]	; (36f0 <flashy_flash2+0x24c>)
    34fe:	47a0      	blx	r4
			state++;
    3500:	4b78      	ldr	r3, [pc, #480]	; (36e4 <flashy_flash2+0x240>)
    3502:	781b      	ldrb	r3, [r3, #0]
    3504:	3301      	adds	r3, #1
    3506:	b2da      	uxtb	r2, r3
    3508:	4b76      	ldr	r3, [pc, #472]	; (36e4 <flashy_flash2+0x240>)
    350a:	701a      	strb	r2, [r3, #0]
			break;
    350c:	e0e7      	b.n	36de <flashy_flash2+0x23a>
		case 3:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    350e:	2300      	movs	r3, #0
    3510:	2204      	movs	r2, #4
    3512:	2101      	movs	r1, #1
    3514:	2000      	movs	r0, #0
    3516:	4c76      	ldr	r4, [pc, #472]	; (36f0 <flashy_flash2+0x24c>)
    3518:	47a0      	blx	r4
			state++;
    351a:	4b72      	ldr	r3, [pc, #456]	; (36e4 <flashy_flash2+0x240>)
    351c:	781b      	ldrb	r3, [r3, #0]
    351e:	3301      	adds	r3, #1
    3520:	b2da      	uxtb	r2, r3
    3522:	4b70      	ldr	r3, [pc, #448]	; (36e4 <flashy_flash2+0x240>)
    3524:	701a      	strb	r2, [r3, #0]
			break;
    3526:	e0da      	b.n	36de <flashy_flash2+0x23a>
		case 4:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    3528:	2301      	movs	r3, #1
    352a:	2204      	movs	r2, #4
    352c:	2101      	movs	r1, #1
    352e:	2000      	movs	r0, #0
    3530:	4c6f      	ldr	r4, [pc, #444]	; (36f0 <flashy_flash2+0x24c>)
    3532:	47a0      	blx	r4
			state++;
    3534:	4b6b      	ldr	r3, [pc, #428]	; (36e4 <flashy_flash2+0x240>)
    3536:	781b      	ldrb	r3, [r3, #0]
    3538:	3301      	adds	r3, #1
    353a:	b2da      	uxtb	r2, r3
    353c:	4b69      	ldr	r3, [pc, #420]	; (36e4 <flashy_flash2+0x240>)
    353e:	701a      	strb	r2, [r3, #0]
			break;
    3540:	e0cd      	b.n	36de <flashy_flash2+0x23a>
		case 5:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    3542:	2300      	movs	r3, #0
    3544:	2204      	movs	r2, #4
    3546:	2101      	movs	r1, #1
    3548:	2000      	movs	r0, #0
    354a:	4c69      	ldr	r4, [pc, #420]	; (36f0 <flashy_flash2+0x24c>)
    354c:	47a0      	blx	r4
			state++;
    354e:	4b65      	ldr	r3, [pc, #404]	; (36e4 <flashy_flash2+0x240>)
    3550:	781b      	ldrb	r3, [r3, #0]
    3552:	3301      	adds	r3, #1
    3554:	b2da      	uxtb	r2, r3
    3556:	4b63      	ldr	r3, [pc, #396]	; (36e4 <flashy_flash2+0x240>)
    3558:	701a      	strb	r2, [r3, #0]
			break;
    355a:	e0c0      	b.n	36de <flashy_flash2+0x23a>
		case 6:
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    355c:	2301      	movs	r3, #1
    355e:	2202      	movs	r2, #2
    3560:	2101      	movs	r1, #1
    3562:	2000      	movs	r0, #0
    3564:	4c62      	ldr	r4, [pc, #392]	; (36f0 <flashy_flash2+0x24c>)
    3566:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    3568:	2301      	movs	r3, #1
    356a:	2202      	movs	r2, #2
    356c:	2102      	movs	r1, #2
    356e:	2000      	movs	r0, #0
    3570:	4c5f      	ldr	r4, [pc, #380]	; (36f0 <flashy_flash2+0x24c>)
    3572:	47a0      	blx	r4
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    3574:	2301      	movs	r3, #1
    3576:	2201      	movs	r2, #1
    3578:	2103      	movs	r1, #3
    357a:	2000      	movs	r0, #0
    357c:	4c5c      	ldr	r4, [pc, #368]	; (36f0 <flashy_flash2+0x24c>)
    357e:	47a0      	blx	r4
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    3580:	2301      	movs	r3, #1
    3582:	2201      	movs	r2, #1
    3584:	2104      	movs	r1, #4
    3586:	2000      	movs	r0, #0
    3588:	4c59      	ldr	r4, [pc, #356]	; (36f0 <flashy_flash2+0x24c>)
    358a:	47a0      	blx	r4
			state++;
    358c:	4b55      	ldr	r3, [pc, #340]	; (36e4 <flashy_flash2+0x240>)
    358e:	781b      	ldrb	r3, [r3, #0]
    3590:	3301      	adds	r3, #1
    3592:	b2da      	uxtb	r2, r3
    3594:	4b53      	ldr	r3, [pc, #332]	; (36e4 <flashy_flash2+0x240>)
    3596:	701a      	strb	r2, [r3, #0]
			break;
    3598:	e0a1      	b.n	36de <flashy_flash2+0x23a>
		case 7:
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    359a:	2300      	movs	r3, #0
    359c:	2202      	movs	r2, #2
    359e:	2101      	movs	r1, #1
    35a0:	2000      	movs	r0, #0
    35a2:	4c53      	ldr	r4, [pc, #332]	; (36f0 <flashy_flash2+0x24c>)
    35a4:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    35a6:	2300      	movs	r3, #0
    35a8:	2202      	movs	r2, #2
    35aa:	2102      	movs	r1, #2
    35ac:	2000      	movs	r0, #0
    35ae:	4c50      	ldr	r4, [pc, #320]	; (36f0 <flashy_flash2+0x24c>)
    35b0:	47a0      	blx	r4
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    35b2:	2301      	movs	r3, #1
    35b4:	2201      	movs	r2, #1
    35b6:	2101      	movs	r1, #1
    35b8:	2000      	movs	r0, #0
    35ba:	4c4d      	ldr	r4, [pc, #308]	; (36f0 <flashy_flash2+0x24c>)
    35bc:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    35be:	2301      	movs	r3, #1
    35c0:	2201      	movs	r2, #1
    35c2:	2102      	movs	r1, #2
    35c4:	2000      	movs	r0, #0
    35c6:	4c4a      	ldr	r4, [pc, #296]	; (36f0 <flashy_flash2+0x24c>)
    35c8:	47a0      	blx	r4
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    35ca:	2300      	movs	r3, #0
    35cc:	2201      	movs	r2, #1
    35ce:	2103      	movs	r1, #3
    35d0:	2000      	movs	r0, #0
    35d2:	4c47      	ldr	r4, [pc, #284]	; (36f0 <flashy_flash2+0x24c>)
    35d4:	47a0      	blx	r4
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    35d6:	2300      	movs	r3, #0
    35d8:	2201      	movs	r2, #1
    35da:	2104      	movs	r1, #4
    35dc:	2000      	movs	r0, #0
    35de:	4c44      	ldr	r4, [pc, #272]	; (36f0 <flashy_flash2+0x24c>)
    35e0:	47a0      	blx	r4
			state++;
    35e2:	4b40      	ldr	r3, [pc, #256]	; (36e4 <flashy_flash2+0x240>)
    35e4:	781b      	ldrb	r3, [r3, #0]
    35e6:	3301      	adds	r3, #1
    35e8:	b2da      	uxtb	r2, r3
    35ea:	4b3e      	ldr	r3, [pc, #248]	; (36e4 <flashy_flash2+0x240>)
    35ec:	701a      	strb	r2, [r3, #0]
			break;
    35ee:	e076      	b.n	36de <flashy_flash2+0x23a>
		case 8:
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    35f0:	2300      	movs	r3, #0
    35f2:	2201      	movs	r2, #1
    35f4:	2101      	movs	r1, #1
    35f6:	2000      	movs	r0, #0
    35f8:	4c3d      	ldr	r4, [pc, #244]	; (36f0 <flashy_flash2+0x24c>)
    35fa:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    35fc:	2300      	movs	r3, #0
    35fe:	2201      	movs	r2, #1
    3600:	2102      	movs	r1, #2
    3602:	2000      	movs	r0, #0
    3604:	4c3a      	ldr	r4, [pc, #232]	; (36f0 <flashy_flash2+0x24c>)
    3606:	47a0      	blx	r4
			configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    3608:	2301      	movs	r3, #1
    360a:	2203      	movs	r2, #3
    360c:	2101      	movs	r1, #1
    360e:	2000      	movs	r0, #0
    3610:	4c37      	ldr	r4, [pc, #220]	; (36f0 <flashy_flash2+0x24c>)
    3612:	47a0      	blx	r4
			configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    3614:	2301      	movs	r3, #1
    3616:	2203      	movs	r2, #3
    3618:	2102      	movs	r1, #2
    361a:	2000      	movs	r0, #0
    361c:	4c34      	ldr	r4, [pc, #208]	; (36f0 <flashy_flash2+0x24c>)
    361e:	47a0      	blx	r4
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    3620:	2301      	movs	r3, #1
    3622:	2200      	movs	r2, #0
    3624:	2103      	movs	r1, #3
    3626:	2000      	movs	r0, #0
    3628:	4c31      	ldr	r4, [pc, #196]	; (36f0 <flashy_flash2+0x24c>)
    362a:	47a0      	blx	r4
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    362c:	2301      	movs	r3, #1
    362e:	2200      	movs	r2, #0
    3630:	2104      	movs	r1, #4
    3632:	2000      	movs	r0, #0
    3634:	4c2e      	ldr	r4, [pc, #184]	; (36f0 <flashy_flash2+0x24c>)
    3636:	47a0      	blx	r4
			state++;
    3638:	4b2a      	ldr	r3, [pc, #168]	; (36e4 <flashy_flash2+0x240>)
    363a:	781b      	ldrb	r3, [r3, #0]
    363c:	3301      	adds	r3, #1
    363e:	b2da      	uxtb	r2, r3
    3640:	4b28      	ldr	r3, [pc, #160]	; (36e4 <flashy_flash2+0x240>)
    3642:	701a      	strb	r2, [r3, #0]
			break;
    3644:	e04b      	b.n	36de <flashy_flash2+0x23a>
		case 9:
			configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    3646:	2300      	movs	r3, #0
    3648:	2203      	movs	r2, #3
    364a:	2101      	movs	r1, #1
    364c:	2000      	movs	r0, #0
    364e:	4c28      	ldr	r4, [pc, #160]	; (36f0 <flashy_flash2+0x24c>)
    3650:	47a0      	blx	r4
			configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    3652:	2300      	movs	r3, #0
    3654:	2203      	movs	r2, #3
    3656:	2102      	movs	r1, #2
    3658:	2000      	movs	r0, #0
    365a:	4c25      	ldr	r4, [pc, #148]	; (36f0 <flashy_flash2+0x24c>)
    365c:	47a0      	blx	r4
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    365e:	2301      	movs	r3, #1
    3660:	2201      	movs	r2, #1
    3662:	2101      	movs	r1, #1
    3664:	2000      	movs	r0, #0
    3666:	4c22      	ldr	r4, [pc, #136]	; (36f0 <flashy_flash2+0x24c>)
    3668:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    366a:	2301      	movs	r3, #1
    366c:	2201      	movs	r2, #1
    366e:	2102      	movs	r1, #2
    3670:	2000      	movs	r0, #0
    3672:	4c1f      	ldr	r4, [pc, #124]	; (36f0 <flashy_flash2+0x24c>)
    3674:	47a0      	blx	r4
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    3676:	2300      	movs	r3, #0
    3678:	2200      	movs	r2, #0
    367a:	2103      	movs	r1, #3
    367c:	2000      	movs	r0, #0
    367e:	4c1c      	ldr	r4, [pc, #112]	; (36f0 <flashy_flash2+0x24c>)
    3680:	47a0      	blx	r4
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    3682:	2300      	movs	r3, #0
    3684:	2200      	movs	r2, #0
    3686:	2104      	movs	r1, #4
    3688:	2000      	movs	r0, #0
    368a:	4c19      	ldr	r4, [pc, #100]	; (36f0 <flashy_flash2+0x24c>)
    368c:	47a0      	blx	r4
			state++;
    368e:	4b15      	ldr	r3, [pc, #84]	; (36e4 <flashy_flash2+0x240>)
    3690:	781b      	ldrb	r3, [r3, #0]
    3692:	3301      	adds	r3, #1
    3694:	b2da      	uxtb	r2, r3
    3696:	4b13      	ldr	r3, [pc, #76]	; (36e4 <flashy_flash2+0x240>)
    3698:	701a      	strb	r2, [r3, #0]
			break;
    369a:	e020      	b.n	36de <flashy_flash2+0x23a>
		case 10:
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    369c:	2300      	movs	r3, #0
    369e:	2201      	movs	r2, #1
    36a0:	2101      	movs	r1, #1
    36a2:	2000      	movs	r0, #0
    36a4:	4c12      	ldr	r4, [pc, #72]	; (36f0 <flashy_flash2+0x24c>)
    36a6:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    36a8:	2300      	movs	r3, #0
    36aa:	2201      	movs	r2, #1
    36ac:	2102      	movs	r1, #2
    36ae:	2000      	movs	r0, #0
    36b0:	4c0f      	ldr	r4, [pc, #60]	; (36f0 <flashy_flash2+0x24c>)
    36b2:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    36b4:	2301      	movs	r3, #1
    36b6:	2202      	movs	r2, #2
    36b8:	2101      	movs	r1, #1
    36ba:	2000      	movs	r0, #0
    36bc:	4c0c      	ldr	r4, [pc, #48]	; (36f0 <flashy_flash2+0x24c>)
    36be:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    36c0:	2301      	movs	r3, #1
    36c2:	2202      	movs	r2, #2
    36c4:	2102      	movs	r1, #2
    36c6:	2000      	movs	r0, #0
    36c8:	4c09      	ldr	r4, [pc, #36]	; (36f0 <flashy_flash2+0x24c>)
    36ca:	47a0      	blx	r4
			state = 0;
    36cc:	4b05      	ldr	r3, [pc, #20]	; (36e4 <flashy_flash2+0x240>)
    36ce:	2200      	movs	r2, #0
    36d0:	701a      	strb	r2, [r3, #0]
			break;
    36d2:	e004      	b.n	36de <flashy_flash2+0x23a>
		default:
			reset_all_lights();
    36d4:	4b05      	ldr	r3, [pc, #20]	; (36ec <flashy_flash2+0x248>)
    36d6:	4798      	blx	r3
			state = 0;
    36d8:	4b02      	ldr	r3, [pc, #8]	; (36e4 <flashy_flash2+0x240>)
    36da:	2200      	movs	r2, #0
    36dc:	701a      	strb	r2, [r3, #0]
	}
}
    36de:	46c0      	nop			; (mov r8, r8)
    36e0:	46bd      	mov	sp, r7
    36e2:	bdb0      	pop	{r4, r5, r7, pc}
    36e4:	20000121 	.word	0x20000121
    36e8:	000099c8 	.word	0x000099c8
    36ec:	0000388d 	.word	0x0000388d
    36f0:	00003b05 	.word	0x00003b05

000036f4 <flashy_fades>:

void flashy_fades()
{
    36f4:	b5b0      	push	{r4, r5, r7, lr}
    36f6:	af00      	add	r7, sp, #0
	//static uint8_t pwm_val = 0;
	static uint8_t duty_cycle = PWM_FREQ/4;
	
	if (pwm_count > duty_cycle)
    36f8:	4b61      	ldr	r3, [pc, #388]	; (3880 <flashy_fades+0x18c>)
    36fa:	781b      	ldrb	r3, [r3, #0]
    36fc:	1e1a      	subs	r2, r3, #0
    36fe:	4b61      	ldr	r3, [pc, #388]	; (3884 <flashy_fades+0x190>)
    3700:	681b      	ldr	r3, [r3, #0]
    3702:	429a      	cmp	r2, r3
    3704:	da54      	bge.n	37b0 <flashy_fades+0xbc>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    3706:	2301      	movs	r3, #1
    3708:	2200      	movs	r2, #0
    370a:	2101      	movs	r1, #1
    370c:	2000      	movs	r0, #0
    370e:	4c5e      	ldr	r4, [pc, #376]	; (3888 <flashy_fades+0x194>)
    3710:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    3712:	2301      	movs	r3, #1
    3714:	2200      	movs	r2, #0
    3716:	2102      	movs	r1, #2
    3718:	2000      	movs	r0, #0
    371a:	4c5b      	ldr	r4, [pc, #364]	; (3888 <flashy_fades+0x194>)
    371c:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    371e:	2301      	movs	r3, #1
    3720:	2200      	movs	r2, #0
    3722:	2103      	movs	r1, #3
    3724:	2000      	movs	r0, #0
    3726:	4c58      	ldr	r4, [pc, #352]	; (3888 <flashy_fades+0x194>)
    3728:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    372a:	2301      	movs	r3, #1
    372c:	2200      	movs	r2, #0
    372e:	2104      	movs	r1, #4
    3730:	2000      	movs	r0, #0
    3732:	4c55      	ldr	r4, [pc, #340]	; (3888 <flashy_fades+0x194>)
    3734:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    3736:	2301      	movs	r3, #1
    3738:	2201      	movs	r2, #1
    373a:	2102      	movs	r1, #2
    373c:	2000      	movs	r0, #0
    373e:	4c52      	ldr	r4, [pc, #328]	; (3888 <flashy_fades+0x194>)
    3740:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    3742:	2301      	movs	r3, #1
    3744:	2201      	movs	r2, #1
    3746:	2101      	movs	r1, #1
    3748:	2000      	movs	r0, #0
    374a:	4c4f      	ldr	r4, [pc, #316]	; (3888 <flashy_fades+0x194>)
    374c:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    374e:	2301      	movs	r3, #1
    3750:	2202      	movs	r2, #2
    3752:	2102      	movs	r1, #2
    3754:	2000      	movs	r0, #0
    3756:	4c4c      	ldr	r4, [pc, #304]	; (3888 <flashy_fades+0x194>)
    3758:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    375a:	2301      	movs	r3, #1
    375c:	2202      	movs	r2, #2
    375e:	2101      	movs	r1, #1
    3760:	2000      	movs	r0, #0
    3762:	4c49      	ldr	r4, [pc, #292]	; (3888 <flashy_fades+0x194>)
    3764:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    3766:	2301      	movs	r3, #1
    3768:	2202      	movs	r2, #2
    376a:	2104      	movs	r1, #4
    376c:	2000      	movs	r0, #0
    376e:	4c46      	ldr	r4, [pc, #280]	; (3888 <flashy_fades+0x194>)
    3770:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    3772:	2301      	movs	r3, #1
    3774:	2202      	movs	r2, #2
    3776:	2103      	movs	r1, #3
    3778:	2000      	movs	r0, #0
    377a:	4c43      	ldr	r4, [pc, #268]	; (3888 <flashy_fades+0x194>)
    377c:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    377e:	2301      	movs	r3, #1
    3780:	2201      	movs	r2, #1
    3782:	2103      	movs	r1, #3
    3784:	2000      	movs	r0, #0
    3786:	4c40      	ldr	r4, [pc, #256]	; (3888 <flashy_fades+0x194>)
    3788:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    378a:	2301      	movs	r3, #1
    378c:	2201      	movs	r2, #1
    378e:	2104      	movs	r1, #4
    3790:	2000      	movs	r0, #0
    3792:	4c3d      	ldr	r4, [pc, #244]	; (3888 <flashy_fades+0x194>)
    3794:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    3796:	2301      	movs	r3, #1
    3798:	2203      	movs	r2, #3
    379a:	2102      	movs	r1, #2
    379c:	2000      	movs	r0, #0
    379e:	4c3a      	ldr	r4, [pc, #232]	; (3888 <flashy_fades+0x194>)
    37a0:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    37a2:	2301      	movs	r3, #1
    37a4:	2203      	movs	r2, #3
    37a6:	2101      	movs	r1, #1
    37a8:	2000      	movs	r0, #0
    37aa:	4c37      	ldr	r4, [pc, #220]	; (3888 <flashy_fades+0x194>)
    37ac:	47a0      	blx	r4
    37ae:	e053      	b.n	3858 <flashy_fades+0x164>
	}
	else
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,false);
    37b0:	2300      	movs	r3, #0
    37b2:	2200      	movs	r2, #0
    37b4:	2101      	movs	r1, #1
    37b6:	2000      	movs	r0, #0
    37b8:	4c33      	ldr	r4, [pc, #204]	; (3888 <flashy_fades+0x194>)
    37ba:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,false);
    37bc:	2300      	movs	r3, #0
    37be:	2200      	movs	r2, #0
    37c0:	2102      	movs	r1, #2
    37c2:	2000      	movs	r0, #0
    37c4:	4c30      	ldr	r4, [pc, #192]	; (3888 <flashy_fades+0x194>)
    37c6:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    37c8:	2300      	movs	r3, #0
    37ca:	2200      	movs	r2, #0
    37cc:	2103      	movs	r1, #3
    37ce:	2000      	movs	r0, #0
    37d0:	4c2d      	ldr	r4, [pc, #180]	; (3888 <flashy_fades+0x194>)
    37d2:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    37d4:	2300      	movs	r3, #0
    37d6:	2200      	movs	r2, #0
    37d8:	2104      	movs	r1, #4
    37da:	2000      	movs	r0, #0
    37dc:	4c2a      	ldr	r4, [pc, #168]	; (3888 <flashy_fades+0x194>)
    37de:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    37e0:	2300      	movs	r3, #0
    37e2:	2201      	movs	r2, #1
    37e4:	2102      	movs	r1, #2
    37e6:	2000      	movs	r0, #0
    37e8:	4c27      	ldr	r4, [pc, #156]	; (3888 <flashy_fades+0x194>)
    37ea:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    37ec:	2300      	movs	r3, #0
    37ee:	2201      	movs	r2, #1
    37f0:	2101      	movs	r1, #1
    37f2:	2000      	movs	r0, #0
    37f4:	4c24      	ldr	r4, [pc, #144]	; (3888 <flashy_fades+0x194>)
    37f6:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    37f8:	2300      	movs	r3, #0
    37fa:	2202      	movs	r2, #2
    37fc:	2102      	movs	r1, #2
    37fe:	2000      	movs	r0, #0
    3800:	4c21      	ldr	r4, [pc, #132]	; (3888 <flashy_fades+0x194>)
    3802:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    3804:	2300      	movs	r3, #0
    3806:	2202      	movs	r2, #2
    3808:	2101      	movs	r1, #1
    380a:	2000      	movs	r0, #0
    380c:	4c1e      	ldr	r4, [pc, #120]	; (3888 <flashy_fades+0x194>)
    380e:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,false);
    3810:	2300      	movs	r3, #0
    3812:	2202      	movs	r2, #2
    3814:	2104      	movs	r1, #4
    3816:	2000      	movs	r0, #0
    3818:	4c1b      	ldr	r4, [pc, #108]	; (3888 <flashy_fades+0x194>)
    381a:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,false);
    381c:	2300      	movs	r3, #0
    381e:	2202      	movs	r2, #2
    3820:	2103      	movs	r1, #3
    3822:	2000      	movs	r0, #0
    3824:	4c18      	ldr	r4, [pc, #96]	; (3888 <flashy_fades+0x194>)
    3826:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    3828:	2300      	movs	r3, #0
    382a:	2201      	movs	r2, #1
    382c:	2103      	movs	r1, #3
    382e:	2000      	movs	r0, #0
    3830:	4c15      	ldr	r4, [pc, #84]	; (3888 <flashy_fades+0x194>)
    3832:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    3834:	2300      	movs	r3, #0
    3836:	2201      	movs	r2, #1
    3838:	2104      	movs	r1, #4
    383a:	2000      	movs	r0, #0
    383c:	4c12      	ldr	r4, [pc, #72]	; (3888 <flashy_fades+0x194>)
    383e:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    3840:	2300      	movs	r3, #0
    3842:	2203      	movs	r2, #3
    3844:	2102      	movs	r1, #2
    3846:	2000      	movs	r0, #0
    3848:	4c0f      	ldr	r4, [pc, #60]	; (3888 <flashy_fades+0x194>)
    384a:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    384c:	2300      	movs	r3, #0
    384e:	2203      	movs	r2, #3
    3850:	2101      	movs	r1, #1
    3852:	2000      	movs	r0, #0
    3854:	4c0c      	ldr	r4, [pc, #48]	; (3888 <flashy_fades+0x194>)
    3856:	47a0      	blx	r4
	}
	
	//pwm_val++;
	if (pwm_count >= PWM_FREQ)
    3858:	4b0a      	ldr	r3, [pc, #40]	; (3884 <flashy_fades+0x190>)
    385a:	681b      	ldr	r3, [r3, #0]
    385c:	2bc7      	cmp	r3, #199	; 0xc7
    385e:	dd0c      	ble.n	387a <flashy_fades+0x186>
	{
		//pwm_val = 0;
		duty_cycle += PWM_FREQ/10;
    3860:	4b07      	ldr	r3, [pc, #28]	; (3880 <flashy_fades+0x18c>)
    3862:	781b      	ldrb	r3, [r3, #0]
    3864:	3314      	adds	r3, #20
    3866:	b2da      	uxtb	r2, r3
    3868:	4b05      	ldr	r3, [pc, #20]	; (3880 <flashy_fades+0x18c>)
    386a:	701a      	strb	r2, [r3, #0]
		if (duty_cycle >= PWM_FREQ)
    386c:	4b04      	ldr	r3, [pc, #16]	; (3880 <flashy_fades+0x18c>)
    386e:	781b      	ldrb	r3, [r3, #0]
    3870:	2bc7      	cmp	r3, #199	; 0xc7
    3872:	d902      	bls.n	387a <flashy_fades+0x186>
		{
			duty_cycle = PWM_FREQ/4;
    3874:	4b02      	ldr	r3, [pc, #8]	; (3880 <flashy_fades+0x18c>)
    3876:	2232      	movs	r2, #50	; 0x32
    3878:	701a      	strb	r2, [r3, #0]
		}
	}
	
}
    387a:	46c0      	nop			; (mov r8, r8)
    387c:	46bd      	mov	sp, r7
    387e:	bdb0      	pop	{r4, r5, r7, pc}
    3880:	20000090 	.word	0x20000090
    3884:	20000310 	.word	0x20000310
    3888:	00003b05 	.word	0x00003b05

0000388c <reset_all_lights>:

void reset_all_lights()
{
    388c:	b580      	push	{r7, lr}
    388e:	b082      	sub	sp, #8
    3890:	af00      	add	r7, sp, #0
	for (int i=0;i<8;i++)
    3892:	2300      	movs	r3, #0
    3894:	607b      	str	r3, [r7, #4]
    3896:	e010      	b.n	38ba <reset_all_lights+0x2e>
	{
		mcp23017_data.devices[i].outputs.ports[0] = 0x80;
    3898:	4a0b      	ldr	r2, [pc, #44]	; (38c8 <reset_all_lights+0x3c>)
    389a:	687b      	ldr	r3, [r7, #4]
    389c:	011b      	lsls	r3, r3, #4
    389e:	18d3      	adds	r3, r2, r3
    38a0:	3308      	adds	r3, #8
    38a2:	2280      	movs	r2, #128	; 0x80
    38a4:	701a      	strb	r2, [r3, #0]
		mcp23017_data.devices[i].outputs.ports[1] = 0x80;
    38a6:	4a08      	ldr	r2, [pc, #32]	; (38c8 <reset_all_lights+0x3c>)
    38a8:	687b      	ldr	r3, [r7, #4]
    38aa:	011b      	lsls	r3, r3, #4
    38ac:	18d3      	adds	r3, r2, r3
    38ae:	3309      	adds	r3, #9
    38b0:	2280      	movs	r2, #128	; 0x80
    38b2:	701a      	strb	r2, [r3, #0]
	
}

void reset_all_lights()
{
	for (int i=0;i<8;i++)
    38b4:	687b      	ldr	r3, [r7, #4]
    38b6:	3301      	adds	r3, #1
    38b8:	607b      	str	r3, [r7, #4]
    38ba:	687b      	ldr	r3, [r7, #4]
    38bc:	2b07      	cmp	r3, #7
    38be:	ddeb      	ble.n	3898 <reset_all_lights+0xc>
	{
		mcp23017_data.devices[i].outputs.ports[0] = 0x80;
		mcp23017_data.devices[i].outputs.ports[1] = 0x80;
	}
}
    38c0:	46c0      	nop			; (mov r8, r8)
    38c2:	46bd      	mov	sp, r7
    38c4:	b002      	add	sp, #8
    38c6:	bd80      	pop	{r7, pc}
    38c8:	20000010 	.word	0x20000010

000038cc <a_okay>:

bool a_okay()
{
    38cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ce:	464f      	mov	r7, r9
    38d0:	4646      	mov	r6, r8
    38d2:	b4c0      	push	{r6, r7}
    38d4:	b095      	sub	sp, #84	; 0x54
    38d6:	af06      	add	r7, sp, #24
	char buffer[32];
	uint8_t states[8];
	mcp23017_read_all_ports(read_data,states);
    38d8:	2308      	movs	r3, #8
    38da:	18fa      	adds	r2, r7, r3
    38dc:	4b81      	ldr	r3, [pc, #516]	; (3ae4 <a_okay+0x218>)
    38de:	0011      	movs	r1, r2
    38e0:	0018      	movs	r0, r3
    38e2:	4b81      	ldr	r3, [pc, #516]	; (3ae8 <a_okay+0x21c>)
    38e4:	4798      	blx	r3
	
	bool return_val = true;
    38e6:	232f      	movs	r3, #47	; 0x2f
    38e8:	2208      	movs	r2, #8
    38ea:	4694      	mov	ip, r2
    38ec:	44bc      	add	ip, r7
    38ee:	4463      	add	r3, ip
    38f0:	2201      	movs	r2, #1
    38f2:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
    38f4:	2300      	movs	r3, #0
    38f6:	633b      	str	r3, [r7, #48]	; 0x30
    38f8:	e0a2      	b.n	3a40 <a_okay+0x174>
	{
		if (mcp23017_data.devices[i].should_be_enabled)
    38fa:	4b7c      	ldr	r3, [pc, #496]	; (3aec <a_okay+0x220>)
    38fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    38fe:	0112      	lsls	r2, r2, #4
    3900:	5cd3      	ldrb	r3, [r2, r3]
    3902:	2b00      	cmp	r3, #0
    3904:	d06e      	beq.n	39e4 <a_okay+0x118>
		{
			mcp23017_data.devices[i].output_errors.ports[0] = mcp23017_data.devices[i].outputs.ports[0] - read_data[0][i];
    3906:	4a79      	ldr	r2, [pc, #484]	; (3aec <a_okay+0x220>)
    3908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    390a:	011b      	lsls	r3, r3, #4
    390c:	18d3      	adds	r3, r2, r3
    390e:	3308      	adds	r3, #8
    3910:	781a      	ldrb	r2, [r3, #0]
    3912:	4974      	ldr	r1, [pc, #464]	; (3ae4 <a_okay+0x218>)
    3914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3916:	18cb      	adds	r3, r1, r3
    3918:	781b      	ldrb	r3, [r3, #0]
    391a:	1ad3      	subs	r3, r2, r3
    391c:	b2d9      	uxtb	r1, r3
    391e:	4a73      	ldr	r2, [pc, #460]	; (3aec <a_okay+0x220>)
    3920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3922:	011b      	lsls	r3, r3, #4
    3924:	18d3      	adds	r3, r2, r3
    3926:	330c      	adds	r3, #12
    3928:	1c0a      	adds	r2, r1, #0
    392a:	701a      	strb	r2, [r3, #0]
			mcp23017_data.devices[i].output_errors.ports[1] = mcp23017_data.devices[i].outputs.ports[1] - read_data[1][i];
    392c:	4a6f      	ldr	r2, [pc, #444]	; (3aec <a_okay+0x220>)
    392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3930:	011b      	lsls	r3, r3, #4
    3932:	18d3      	adds	r3, r2, r3
    3934:	3309      	adds	r3, #9
    3936:	781a      	ldrb	r2, [r3, #0]
    3938:	496a      	ldr	r1, [pc, #424]	; (3ae4 <a_okay+0x218>)
    393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    393c:	18cb      	adds	r3, r1, r3
    393e:	3308      	adds	r3, #8
    3940:	781b      	ldrb	r3, [r3, #0]
    3942:	1ad3      	subs	r3, r2, r3
    3944:	b2d9      	uxtb	r1, r3
    3946:	4a69      	ldr	r2, [pc, #420]	; (3aec <a_okay+0x220>)
    3948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    394a:	011b      	lsls	r3, r3, #4
    394c:	18d3      	adds	r3, r2, r3
    394e:	330d      	adds	r3, #13
    3950:	1c0a      	adds	r2, r1, #0
    3952:	701a      	strb	r2, [r3, #0]
			
			if ((mcp23017_data.devices[i].output_errors.ports[0] + mcp23017_data.devices[i].output_errors.ports[1]) > 0)
    3954:	4a65      	ldr	r2, [pc, #404]	; (3aec <a_okay+0x220>)
    3956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3958:	011b      	lsls	r3, r3, #4
    395a:	18d3      	adds	r3, r2, r3
    395c:	330c      	adds	r3, #12
    395e:	781b      	ldrb	r3, [r3, #0]
    3960:	0019      	movs	r1, r3
    3962:	4a62      	ldr	r2, [pc, #392]	; (3aec <a_okay+0x220>)
    3964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3966:	011b      	lsls	r3, r3, #4
    3968:	18d3      	adds	r3, r2, r3
    396a:	330d      	adds	r3, #13
    396c:	781b      	ldrb	r3, [r3, #0]
    396e:	18cb      	adds	r3, r1, r3
    3970:	2b00      	cmp	r3, #0
    3972:	dd06      	ble.n	3982 <a_okay+0xb6>
			{
				mcp23017_data.devices[i].error_detected = true;
    3974:	4a5d      	ldr	r2, [pc, #372]	; (3aec <a_okay+0x220>)
    3976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3978:	011b      	lsls	r3, r3, #4
    397a:	18d3      	adds	r3, r2, r3
    397c:	3302      	adds	r3, #2
    397e:	2201      	movs	r2, #1
    3980:	701a      	strb	r2, [r3, #0]
			}
			
			if ((read_data[0][i] & ~0x80) != (mcp23017_data.devices[i].outputs.ports[0] & ~0x80))
    3982:	4a58      	ldr	r2, [pc, #352]	; (3ae4 <a_okay+0x218>)
    3984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3986:	18d3      	adds	r3, r2, r3
    3988:	781a      	ldrb	r2, [r3, #0]
    398a:	4958      	ldr	r1, [pc, #352]	; (3aec <a_okay+0x220>)
    398c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    398e:	011b      	lsls	r3, r3, #4
    3990:	18cb      	adds	r3, r1, r3
    3992:	3308      	adds	r3, #8
    3994:	781b      	ldrb	r3, [r3, #0]
    3996:	4053      	eors	r3, r2
    3998:	b2db      	uxtb	r3, r3
    399a:	001a      	movs	r2, r3
    399c:	2380      	movs	r3, #128	; 0x80
    399e:	439a      	bics	r2, r3
    39a0:	1e13      	subs	r3, r2, #0
    39a2:	d006      	beq.n	39b2 <a_okay+0xe6>
			{
				return_val = false;
    39a4:	232f      	movs	r3, #47	; 0x2f
    39a6:	2208      	movs	r2, #8
    39a8:	4694      	mov	ip, r2
    39aa:	44bc      	add	ip, r7
    39ac:	4463      	add	r3, ip
    39ae:	2200      	movs	r2, #0
    39b0:	701a      	strb	r2, [r3, #0]
			}
			if ((read_data[1][i] & ~0x80) != (mcp23017_data.devices[i].outputs.ports[1] & ~0x80))
    39b2:	4a4c      	ldr	r2, [pc, #304]	; (3ae4 <a_okay+0x218>)
    39b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39b6:	18d3      	adds	r3, r2, r3
    39b8:	3308      	adds	r3, #8
    39ba:	781a      	ldrb	r2, [r3, #0]
    39bc:	494b      	ldr	r1, [pc, #300]	; (3aec <a_okay+0x220>)
    39be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39c0:	011b      	lsls	r3, r3, #4
    39c2:	18cb      	adds	r3, r1, r3
    39c4:	3309      	adds	r3, #9
    39c6:	781b      	ldrb	r3, [r3, #0]
    39c8:	4053      	eors	r3, r2
    39ca:	b2db      	uxtb	r3, r3
    39cc:	001a      	movs	r2, r3
    39ce:	2380      	movs	r3, #128	; 0x80
    39d0:	439a      	bics	r2, r3
    39d2:	1e13      	subs	r3, r2, #0
    39d4:	d006      	beq.n	39e4 <a_okay+0x118>
			{
				return_val = false;
    39d6:	232f      	movs	r3, #47	; 0x2f
    39d8:	2208      	movs	r2, #8
    39da:	4694      	mov	ip, r2
    39dc:	44bc      	add	ip, r7
    39de:	4463      	add	r3, ip
    39e0:	2200      	movs	r2, #0
    39e2:	701a      	strb	r2, [r3, #0]
			}
		}
		mcp23017_data.devices[i].status = states[i];
    39e4:	2308      	movs	r3, #8
    39e6:	18fa      	adds	r2, r7, r3
    39e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39ea:	18d3      	adds	r3, r2, r3
    39ec:	7819      	ldrb	r1, [r3, #0]
    39ee:	4a3f      	ldr	r2, [pc, #252]	; (3aec <a_okay+0x220>)
    39f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39f2:	011b      	lsls	r3, r3, #4
    39f4:	18d3      	adds	r3, r2, r3
    39f6:	3303      	adds	r3, #3
    39f8:	1c0a      	adds	r2, r1, #0
    39fa:	701a      	strb	r2, [r3, #0]
		sprintf(buffer,"ADDR: %d -> %d\n",i,mcp23017_data.devices[i].status);
    39fc:	4a3b      	ldr	r2, [pc, #236]	; (3aec <a_okay+0x220>)
    39fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3a00:	011b      	lsls	r3, r3, #4
    3a02:	18d3      	adds	r3, r2, r3
    3a04:	3303      	adds	r3, #3
    3a06:	781b      	ldrb	r3, [r3, #0]
    3a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3a0a:	4939      	ldr	r1, [pc, #228]	; (3af0 <a_okay+0x224>)
    3a0c:	2008      	movs	r0, #8
    3a0e:	2408      	movs	r4, #8
    3a10:	46a4      	mov	ip, r4
    3a12:	44bc      	add	ip, r7
    3a14:	4460      	add	r0, ip
    3a16:	4c37      	ldr	r4, [pc, #220]	; (3af4 <a_okay+0x228>)
    3a18:	47a0      	blx	r4
		ble_uart_write(buffer);
    3a1a:	2308      	movs	r3, #8
    3a1c:	2208      	movs	r2, #8
    3a1e:	4694      	mov	ip, r2
    3a20:	44bc      	add	ip, r7
    3a22:	4463      	add	r3, ip
    3a24:	0018      	movs	r0, r3
    3a26:	4b34      	ldr	r3, [pc, #208]	; (3af8 <a_okay+0x22c>)
    3a28:	4798      	blx	r3
		uart_write(buffer);
    3a2a:	2308      	movs	r3, #8
    3a2c:	2208      	movs	r2, #8
    3a2e:	4694      	mov	ip, r2
    3a30:	44bc      	add	ip, r7
    3a32:	4463      	add	r3, ip
    3a34:	0018      	movs	r0, r3
    3a36:	4b31      	ldr	r3, [pc, #196]	; (3afc <a_okay+0x230>)
    3a38:	4798      	blx	r3
	char buffer[32];
	uint8_t states[8];
	mcp23017_read_all_ports(read_data,states);
	
	bool return_val = true;
	for (int i=0;i<8;i++)
    3a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3a3c:	3301      	adds	r3, #1
    3a3e:	633b      	str	r3, [r7, #48]	; 0x30
    3a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3a42:	2b07      	cmp	r3, #7
    3a44:	dc00      	bgt.n	3a48 <a_okay+0x17c>
    3a46:	e758      	b.n	38fa <a_okay+0x2e>
		mcp23017_data.devices[i].status = states[i];
		sprintf(buffer,"ADDR: %d -> %d\n",i,mcp23017_data.devices[i].status);
		ble_uart_write(buffer);
		uart_write(buffer);
	}
	sprintf(buffer,"ERR: %d%d%d%d%d%d%d%d\r\n",mcp23017_data.devices[7].error_detected,mcp23017_data.devices[6].error_detected,mcp23017_data.devices[5].error_detected,mcp23017_data.devices[4].error_detected,mcp23017_data.devices[3].error_detected,mcp23017_data.devices[2].error_detected,mcp23017_data.devices[1].error_detected,mcp23017_data.devices[0].error_detected);
    3a48:	4b28      	ldr	r3, [pc, #160]	; (3aec <a_okay+0x220>)
    3a4a:	2272      	movs	r2, #114	; 0x72
    3a4c:	5c9b      	ldrb	r3, [r3, r2]
    3a4e:	607b      	str	r3, [r7, #4]
    3a50:	4b26      	ldr	r3, [pc, #152]	; (3aec <a_okay+0x220>)
    3a52:	2262      	movs	r2, #98	; 0x62
    3a54:	5c9b      	ldrb	r3, [r3, r2]
    3a56:	603b      	str	r3, [r7, #0]
    3a58:	4b24      	ldr	r3, [pc, #144]	; (3aec <a_okay+0x220>)
    3a5a:	2252      	movs	r2, #82	; 0x52
    3a5c:	5c9b      	ldrb	r3, [r3, r2]
    3a5e:	001c      	movs	r4, r3
    3a60:	4b22      	ldr	r3, [pc, #136]	; (3aec <a_okay+0x220>)
    3a62:	2242      	movs	r2, #66	; 0x42
    3a64:	5c9b      	ldrb	r3, [r3, r2]
    3a66:	001d      	movs	r5, r3
    3a68:	4b20      	ldr	r3, [pc, #128]	; (3aec <a_okay+0x220>)
    3a6a:	2232      	movs	r2, #50	; 0x32
    3a6c:	5c9b      	ldrb	r3, [r3, r2]
    3a6e:	001e      	movs	r6, r3
    3a70:	4b1e      	ldr	r3, [pc, #120]	; (3aec <a_okay+0x220>)
    3a72:	2222      	movs	r2, #34	; 0x22
    3a74:	5c9b      	ldrb	r3, [r3, r2]
    3a76:	001a      	movs	r2, r3
    3a78:	4b1c      	ldr	r3, [pc, #112]	; (3aec <a_okay+0x220>)
    3a7a:	7c9b      	ldrb	r3, [r3, #18]
    3a7c:	469c      	mov	ip, r3
    3a7e:	4b1b      	ldr	r3, [pc, #108]	; (3aec <a_okay+0x220>)
    3a80:	789b      	ldrb	r3, [r3, #2]
    3a82:	4699      	mov	r9, r3
    3a84:	491e      	ldr	r1, [pc, #120]	; (3b00 <a_okay+0x234>)
    3a86:	2008      	movs	r0, #8
    3a88:	2308      	movs	r3, #8
    3a8a:	4698      	mov	r8, r3
    3a8c:	44b8      	add	r8, r7
    3a8e:	4440      	add	r0, r8
    3a90:	464b      	mov	r3, r9
    3a92:	9305      	str	r3, [sp, #20]
    3a94:	4663      	mov	r3, ip
    3a96:	9304      	str	r3, [sp, #16]
    3a98:	9203      	str	r2, [sp, #12]
    3a9a:	9602      	str	r6, [sp, #8]
    3a9c:	9501      	str	r5, [sp, #4]
    3a9e:	9400      	str	r4, [sp, #0]
    3aa0:	683b      	ldr	r3, [r7, #0]
    3aa2:	687a      	ldr	r2, [r7, #4]
    3aa4:	4c13      	ldr	r4, [pc, #76]	; (3af4 <a_okay+0x228>)
    3aa6:	47a0      	blx	r4
	ble_uart_write(buffer);
    3aa8:	2308      	movs	r3, #8
    3aaa:	2208      	movs	r2, #8
    3aac:	4694      	mov	ip, r2
    3aae:	44bc      	add	ip, r7
    3ab0:	4463      	add	r3, ip
    3ab2:	0018      	movs	r0, r3
    3ab4:	4b10      	ldr	r3, [pc, #64]	; (3af8 <a_okay+0x22c>)
    3ab6:	4798      	blx	r3
	uart_write(buffer);
    3ab8:	2308      	movs	r3, #8
    3aba:	2208      	movs	r2, #8
    3abc:	4694      	mov	ip, r2
    3abe:	44bc      	add	ip, r7
    3ac0:	4463      	add	r3, ip
    3ac2:	0018      	movs	r0, r3
    3ac4:	4b0d      	ldr	r3, [pc, #52]	; (3afc <a_okay+0x230>)
    3ac6:	4798      	blx	r3
	
	return return_val;
    3ac8:	232f      	movs	r3, #47	; 0x2f
    3aca:	2208      	movs	r2, #8
    3acc:	4694      	mov	ip, r2
    3ace:	44bc      	add	ip, r7
    3ad0:	4463      	add	r3, ip
    3ad2:	781b      	ldrb	r3, [r3, #0]
}
    3ad4:	0018      	movs	r0, r3
    3ad6:	46bd      	mov	sp, r7
    3ad8:	b00f      	add	sp, #60	; 0x3c
    3ada:	bc0c      	pop	{r2, r3}
    3adc:	4690      	mov	r8, r2
    3ade:	4699      	mov	r9, r3
    3ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ae2:	46c0      	nop			; (mov r8, r8)
    3ae4:	20000248 	.word	0x20000248
    3ae8:	00004159 	.word	0x00004159
    3aec:	20000010 	.word	0x20000010
    3af0:	00009950 	.word	0x00009950
    3af4:	000082c9 	.word	0x000082c9
    3af8:	0000202d 	.word	0x0000202d
    3afc:	000050b9 	.word	0x000050b9
    3b00:	00009960 	.word	0x00009960

00003b04 <configure_pin>:

void configure_pin(uint8_t port, uint8_t addr, uint8_t pin, bool value)
{
    3b04:	b5b0      	push	{r4, r5, r7, lr}
    3b06:	b082      	sub	sp, #8
    3b08:	af00      	add	r7, sp, #0
    3b0a:	0005      	movs	r5, r0
    3b0c:	000c      	movs	r4, r1
    3b0e:	0010      	movs	r0, r2
    3b10:	0019      	movs	r1, r3
    3b12:	1dfb      	adds	r3, r7, #7
    3b14:	1c2a      	adds	r2, r5, #0
    3b16:	701a      	strb	r2, [r3, #0]
    3b18:	1dbb      	adds	r3, r7, #6
    3b1a:	1c22      	adds	r2, r4, #0
    3b1c:	701a      	strb	r2, [r3, #0]
    3b1e:	1d7b      	adds	r3, r7, #5
    3b20:	1c02      	adds	r2, r0, #0
    3b22:	701a      	strb	r2, [r3, #0]
    3b24:	1d3b      	adds	r3, r7, #4
    3b26:	1c0a      	adds	r2, r1, #0
    3b28:	701a      	strb	r2, [r3, #0]
	if(value)
    3b2a:	1d3b      	adds	r3, r7, #4
    3b2c:	781b      	ldrb	r3, [r3, #0]
    3b2e:	2b00      	cmp	r3, #0
    3b30:	d01f      	beq.n	3b72 <configure_pin+0x6e>
	{
		mcp23017_data.devices[addr].outputs.ports[port] |= (1 << pin);
    3b32:	1dbb      	adds	r3, r7, #6
    3b34:	781a      	ldrb	r2, [r3, #0]
    3b36:	1dfb      	adds	r3, r7, #7
    3b38:	781b      	ldrb	r3, [r3, #0]
    3b3a:	1db9      	adds	r1, r7, #6
    3b3c:	7808      	ldrb	r0, [r1, #0]
    3b3e:	1df9      	adds	r1, r7, #7
    3b40:	7809      	ldrb	r1, [r1, #0]
    3b42:	4c1e      	ldr	r4, [pc, #120]	; (3bbc <configure_pin+0xb8>)
    3b44:	0100      	lsls	r0, r0, #4
    3b46:	1820      	adds	r0, r4, r0
    3b48:	1841      	adds	r1, r0, r1
    3b4a:	3108      	adds	r1, #8
    3b4c:	7809      	ldrb	r1, [r1, #0]
    3b4e:	b248      	sxtb	r0, r1
    3b50:	1d79      	adds	r1, r7, #5
    3b52:	7809      	ldrb	r1, [r1, #0]
    3b54:	2401      	movs	r4, #1
    3b56:	408c      	lsls	r4, r1
    3b58:	0021      	movs	r1, r4
    3b5a:	b249      	sxtb	r1, r1
    3b5c:	4301      	orrs	r1, r0
    3b5e:	b249      	sxtb	r1, r1
    3b60:	b2c8      	uxtb	r0, r1
    3b62:	4916      	ldr	r1, [pc, #88]	; (3bbc <configure_pin+0xb8>)
    3b64:	0112      	lsls	r2, r2, #4
    3b66:	188a      	adds	r2, r1, r2
    3b68:	18d3      	adds	r3, r2, r3
    3b6a:	3308      	adds	r3, #8
    3b6c:	1c02      	adds	r2, r0, #0
    3b6e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		mcp23017_data.devices[addr].outputs.ports[port] &= ~(1 << pin);
	}
}
    3b70:	e020      	b.n	3bb4 <configure_pin+0xb0>
	{
		mcp23017_data.devices[addr].outputs.ports[port] |= (1 << pin);
	}
	else
	{
		mcp23017_data.devices[addr].outputs.ports[port] &= ~(1 << pin);
    3b72:	1dbb      	adds	r3, r7, #6
    3b74:	781a      	ldrb	r2, [r3, #0]
    3b76:	1dfb      	adds	r3, r7, #7
    3b78:	781b      	ldrb	r3, [r3, #0]
    3b7a:	1db9      	adds	r1, r7, #6
    3b7c:	7808      	ldrb	r0, [r1, #0]
    3b7e:	1df9      	adds	r1, r7, #7
    3b80:	7809      	ldrb	r1, [r1, #0]
    3b82:	4c0e      	ldr	r4, [pc, #56]	; (3bbc <configure_pin+0xb8>)
    3b84:	0100      	lsls	r0, r0, #4
    3b86:	1820      	adds	r0, r4, r0
    3b88:	1841      	adds	r1, r0, r1
    3b8a:	3108      	adds	r1, #8
    3b8c:	7809      	ldrb	r1, [r1, #0]
    3b8e:	b249      	sxtb	r1, r1
    3b90:	1d78      	adds	r0, r7, #5
    3b92:	7800      	ldrb	r0, [r0, #0]
    3b94:	2401      	movs	r4, #1
    3b96:	4084      	lsls	r4, r0
    3b98:	0020      	movs	r0, r4
    3b9a:	b240      	sxtb	r0, r0
    3b9c:	43c0      	mvns	r0, r0
    3b9e:	b240      	sxtb	r0, r0
    3ba0:	4001      	ands	r1, r0
    3ba2:	b249      	sxtb	r1, r1
    3ba4:	b2c8      	uxtb	r0, r1
    3ba6:	4905      	ldr	r1, [pc, #20]	; (3bbc <configure_pin+0xb8>)
    3ba8:	0112      	lsls	r2, r2, #4
    3baa:	188a      	adds	r2, r1, r2
    3bac:	18d3      	adds	r3, r2, r3
    3bae:	3308      	adds	r3, #8
    3bb0:	1c02      	adds	r2, r0, #0
    3bb2:	701a      	strb	r2, [r3, #0]
	}
}
    3bb4:	46c0      	nop			; (mov r8, r8)
    3bb6:	46bd      	mov	sp, r7
    3bb8:	b002      	add	sp, #8
    3bba:	bdb0      	pop	{r4, r5, r7, pc}
    3bbc:	20000010 	.word	0x20000010

00003bc0 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    3bc0:	b580      	push	{r7, lr}
    3bc2:	b084      	sub	sp, #16
    3bc4:	af00      	add	r7, sp, #0
    3bc6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3bc8:	687b      	ldr	r3, [r7, #4]
    3bca:	681b      	ldr	r3, [r3, #0]
    3bcc:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3bce:	68fb      	ldr	r3, [r7, #12]
    3bd0:	69db      	ldr	r3, [r3, #28]
    3bd2:	2207      	movs	r2, #7
    3bd4:	4013      	ands	r3, r2
    3bd6:	1e5a      	subs	r2, r3, #1
    3bd8:	4193      	sbcs	r3, r2
    3bda:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    3bdc:	0018      	movs	r0, r3
    3bde:	46bd      	mov	sp, r7
    3be0:	b004      	add	sp, #16
    3be2:	bd80      	pop	{r7, pc}

00003be4 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    3be4:	b580      	push	{r7, lr}
    3be6:	b082      	sub	sp, #8
    3be8:	af00      	add	r7, sp, #0
    3bea:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    3bec:	46c0      	nop			; (mov r8, r8)
    3bee:	687b      	ldr	r3, [r7, #4]
    3bf0:	0018      	movs	r0, r3
    3bf2:	4b04      	ldr	r3, [pc, #16]	; (3c04 <_i2c_master_wait_for_sync+0x20>)
    3bf4:	4798      	blx	r3
    3bf6:	1e03      	subs	r3, r0, #0
    3bf8:	d1f9      	bne.n	3bee <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    3bfa:	46c0      	nop			; (mov r8, r8)
    3bfc:	46bd      	mov	sp, r7
    3bfe:	b002      	add	sp, #8
    3c00:	bd80      	pop	{r7, pc}
    3c02:	46c0      	nop			; (mov r8, r8)
    3c04:	00003bc1 	.word	0x00003bc1

00003c08 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    3c08:	b580      	push	{r7, lr}
    3c0a:	b082      	sub	sp, #8
    3c0c:	af00      	add	r7, sp, #0
    3c0e:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    3c10:	687b      	ldr	r3, [r7, #4]
    3c12:	2264      	movs	r2, #100	; 0x64
    3c14:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    3c16:	687b      	ldr	r3, [r7, #4]
    3c18:	4a1b      	ldr	r2, [pc, #108]	; (3c88 <i2c_master_get_config_defaults+0x80>)
    3c1a:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    3c1c:	687b      	ldr	r3, [r7, #4]
    3c1e:	2200      	movs	r2, #0
    3c20:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    3c22:	687b      	ldr	r3, [r7, #4]
    3c24:	2200      	movs	r2, #0
    3c26:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    3c28:	687b      	ldr	r3, [r7, #4]
    3c2a:	2200      	movs	r2, #0
    3c2c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    3c2e:	687b      	ldr	r3, [r7, #4]
    3c30:	2280      	movs	r2, #128	; 0x80
    3c32:	0392      	lsls	r2, r2, #14
    3c34:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    3c36:	687b      	ldr	r3, [r7, #4]
    3c38:	2201      	movs	r2, #1
    3c3a:	4252      	negs	r2, r2
    3c3c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    3c3e:	687b      	ldr	r3, [r7, #4]
    3c40:	2201      	movs	r2, #1
    3c42:	4252      	negs	r2, r2
    3c44:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    3c46:	687b      	ldr	r3, [r7, #4]
    3c48:	2200      	movs	r2, #0
    3c4a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    3c4c:	687b      	ldr	r3, [r7, #4]
    3c4e:	2200      	movs	r2, #0
    3c50:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    3c52:	687b      	ldr	r3, [r7, #4]
    3c54:	2224      	movs	r2, #36	; 0x24
    3c56:	2100      	movs	r1, #0
    3c58:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    3c5a:	687b      	ldr	r3, [r7, #4]
    3c5c:	2200      	movs	r2, #0
    3c5e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    3c60:	687b      	ldr	r3, [r7, #4]
    3c62:	222c      	movs	r2, #44	; 0x2c
    3c64:	2100      	movs	r1, #0
    3c66:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    3c68:	687b      	ldr	r3, [r7, #4]
    3c6a:	222d      	movs	r2, #45	; 0x2d
    3c6c:	2100      	movs	r1, #0
    3c6e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    3c70:	687b      	ldr	r3, [r7, #4]
    3c72:	222e      	movs	r2, #46	; 0x2e
    3c74:	2100      	movs	r1, #0
    3c76:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    3c78:	687b      	ldr	r3, [r7, #4]
    3c7a:	22d7      	movs	r2, #215	; 0xd7
    3c7c:	861a      	strh	r2, [r3, #48]	; 0x30
}
    3c7e:	46c0      	nop			; (mov r8, r8)
    3c80:	46bd      	mov	sp, r7
    3c82:	b002      	add	sp, #8
    3c84:	bd80      	pop	{r7, pc}
    3c86:	46c0      	nop			; (mov r8, r8)
    3c88:	00000d48 	.word	0x00000d48

00003c8c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    3c8c:	b580      	push	{r7, lr}
    3c8e:	b084      	sub	sp, #16
    3c90:	af00      	add	r7, sp, #0
    3c92:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3c94:	687b      	ldr	r3, [r7, #4]
    3c96:	681b      	ldr	r3, [r3, #0]
    3c98:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    3c9a:	2300      	movs	r3, #0
    3c9c:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    3c9e:	687b      	ldr	r3, [r7, #4]
    3ca0:	0018      	movs	r0, r3
    3ca2:	4b10      	ldr	r3, [pc, #64]	; (3ce4 <i2c_master_enable+0x58>)
    3ca4:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    3ca6:	68bb      	ldr	r3, [r7, #8]
    3ca8:	681b      	ldr	r3, [r3, #0]
    3caa:	2202      	movs	r2, #2
    3cac:	431a      	orrs	r2, r3
    3cae:	68bb      	ldr	r3, [r7, #8]
    3cb0:	601a      	str	r2, [r3, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    3cb2:	e00c      	b.n	3cce <i2c_master_enable+0x42>
		timeout_counter++;
    3cb4:	68fb      	ldr	r3, [r7, #12]
    3cb6:	3301      	adds	r3, #1
    3cb8:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    3cba:	687b      	ldr	r3, [r7, #4]
    3cbc:	88db      	ldrh	r3, [r3, #6]
    3cbe:	1e1a      	subs	r2, r3, #0
    3cc0:	68fb      	ldr	r3, [r7, #12]
    3cc2:	429a      	cmp	r2, r3
    3cc4:	d803      	bhi.n	3cce <i2c_master_enable+0x42>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    3cc6:	68bb      	ldr	r3, [r7, #8]
    3cc8:	2210      	movs	r2, #16
    3cca:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    3ccc:	e006      	b.n	3cdc <i2c_master_enable+0x50>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    3cce:	68bb      	ldr	r3, [r7, #8]
    3cd0:	8b5b      	ldrh	r3, [r3, #26]
    3cd2:	b29b      	uxth	r3, r3
    3cd4:	001a      	movs	r2, r3
    3cd6:	2310      	movs	r3, #16
    3cd8:	4013      	ands	r3, r2
    3cda:	d0eb      	beq.n	3cb4 <i2c_master_enable+0x28>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
			/* Workaround #1 */
			return;
		}
	}
}
    3cdc:	46bd      	mov	sp, r7
    3cde:	b004      	add	sp, #16
    3ce0:	bd80      	pop	{r7, pc}
    3ce2:	46c0      	nop			; (mov r8, r8)
    3ce4:	00003be5 	.word	0x00003be5

00003ce8 <configure_i2c_master>:
 */ 

#include "i2c.h"

void configure_i2c_master(void)
{
    3ce8:	b580      	push	{r7, lr}
    3cea:	b08e      	sub	sp, #56	; 0x38
    3cec:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    3cee:	1d3b      	adds	r3, r7, #4
    3cf0:	0018      	movs	r0, r3
    3cf2:	4b0e      	ldr	r3, [pc, #56]	; (3d2c <configure_i2c_master+0x44>)
    3cf4:	4798      	blx	r3
	/* Change buffer timeout to something longer. */
	config_i2c_master.buffer_timeout = 10000;
    3cf6:	1d3b      	adds	r3, r7, #4
    3cf8:	4a0d      	ldr	r2, [pc, #52]	; (3d30 <configure_i2c_master+0x48>)
    3cfa:	82da      	strh	r2, [r3, #22]
	config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_100KHZ;
    3cfc:	1d3b      	adds	r3, r7, #4
    3cfe:	2264      	movs	r2, #100	; 0x64
    3d00:	601a      	str	r2, [r3, #0]
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    3d02:	1d3b      	adds	r3, r7, #4
    3d04:	4a0b      	ldr	r2, [pc, #44]	; (3d34 <configure_i2c_master+0x4c>)
    3d06:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    3d08:	1d3b      	adds	r3, r7, #4
    3d0a:	4a0b      	ldr	r2, [pc, #44]	; (3d38 <configure_i2c_master+0x50>)
    3d0c:	621a      	str	r2, [r3, #32]
	/* Initialize and enable device with config. */
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
    3d0e:	1d3a      	adds	r2, r7, #4
    3d10:	490a      	ldr	r1, [pc, #40]	; (3d3c <configure_i2c_master+0x54>)
    3d12:	4b0b      	ldr	r3, [pc, #44]	; (3d40 <configure_i2c_master+0x58>)
    3d14:	0018      	movs	r0, r3
    3d16:	4b0b      	ldr	r3, [pc, #44]	; (3d44 <configure_i2c_master+0x5c>)
    3d18:	4798      	blx	r3
	i2c_master_enable(&i2c_master_instance);
    3d1a:	4b09      	ldr	r3, [pc, #36]	; (3d40 <configure_i2c_master+0x58>)
    3d1c:	0018      	movs	r0, r3
    3d1e:	4b0a      	ldr	r3, [pc, #40]	; (3d48 <configure_i2c_master+0x60>)
    3d20:	4798      	blx	r3
}
    3d22:	46c0      	nop			; (mov r8, r8)
    3d24:	46bd      	mov	sp, r7
    3d26:	b00e      	add	sp, #56	; 0x38
    3d28:	bd80      	pop	{r7, pc}
    3d2a:	46c0      	nop			; (mov r8, r8)
    3d2c:	00003c09 	.word	0x00003c09
    3d30:	00002710 	.word	0x00002710
    3d34:	00160002 	.word	0x00160002
    3d38:	00170002 	.word	0x00170002
    3d3c:	42001400 	.word	0x42001400
    3d40:	20000314 	.word	0x20000314
    3d44:	00001241 	.word	0x00001241
    3d48:	00003c8d 	.word	0x00003c8d

00003d4c <i2c_write>:

uint8_t i2c_write(uint8_t address,uint8_t* data, uint8_t data_size)
{
    3d4c:	b580      	push	{r7, lr}
    3d4e:	b086      	sub	sp, #24
    3d50:	af00      	add	r7, sp, #0
    3d52:	6039      	str	r1, [r7, #0]
    3d54:	0011      	movs	r1, r2
    3d56:	1dfb      	adds	r3, r7, #7
    3d58:	1c02      	adds	r2, r0, #0
    3d5a:	701a      	strb	r2, [r3, #0]
    3d5c:	1dbb      	adds	r3, r7, #6
    3d5e:	1c0a      	adds	r2, r1, #0
    3d60:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
    3d62:	1dfb      	adds	r3, r7, #7
    3d64:	781b      	ldrb	r3, [r3, #0]
    3d66:	b29a      	uxth	r2, r3
    3d68:	2308      	movs	r3, #8
    3d6a:	18fb      	adds	r3, r7, r3
    3d6c:	801a      	strh	r2, [r3, #0]
    3d6e:	1dbb      	adds	r3, r7, #6
    3d70:	781b      	ldrb	r3, [r3, #0]
    3d72:	b29a      	uxth	r2, r3
    3d74:	2308      	movs	r3, #8
    3d76:	18fb      	adds	r3, r7, r3
    3d78:	805a      	strh	r2, [r3, #2]
    3d7a:	2308      	movs	r3, #8
    3d7c:	18fb      	adds	r3, r7, r3
    3d7e:	683a      	ldr	r2, [r7, #0]
    3d80:	605a      	str	r2, [r3, #4]
    3d82:	2308      	movs	r3, #8
    3d84:	18fb      	adds	r3, r7, r3
    3d86:	2200      	movs	r2, #0
    3d88:	721a      	strb	r2, [r3, #8]
    3d8a:	2308      	movs	r3, #8
    3d8c:	18fb      	adds	r3, r7, r3
    3d8e:	2200      	movs	r2, #0
    3d90:	725a      	strb	r2, [r3, #9]
    3d92:	2308      	movs	r3, #8
    3d94:	18fb      	adds	r3, r7, r3
    3d96:	2200      	movs	r2, #0
    3d98:	729a      	strb	r2, [r3, #10]
		.data        = data,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	uint16_t timeout = 0;
    3d9a:	2316      	movs	r3, #22
    3d9c:	18fb      	adds	r3, r7, r3
    3d9e:	2200      	movs	r2, #0
    3da0:	801a      	strh	r2, [r3, #0]

	return i2c_master_write_packet_wait(&i2c_master_instance,&packet);
    3da2:	2308      	movs	r3, #8
    3da4:	18fa      	adds	r2, r7, r3
    3da6:	4b05      	ldr	r3, [pc, #20]	; (3dbc <i2c_write+0x70>)
    3da8:	0011      	movs	r1, r2
    3daa:	0018      	movs	r0, r3
    3dac:	4b04      	ldr	r3, [pc, #16]	; (3dc0 <i2c_write+0x74>)
    3dae:	4798      	blx	r3
    3db0:	0003      	movs	r3, r0
	{
		if (timeout++ == I2C_TIMEOUT) {
			break;
		}
	}*/
}
    3db2:	0018      	movs	r0, r3
    3db4:	46bd      	mov	sp, r7
    3db6:	b006      	add	sp, #24
    3db8:	bd80      	pop	{r7, pc}
    3dba:	46c0      	nop			; (mov r8, r8)
    3dbc:	20000314 	.word	0x20000314
    3dc0:	00001841 	.word	0x00001841

00003dc4 <i2c_read>:
	}	
	return found_array;
}

uint8_t i2c_read(uint8_t addr,uint8_t reg, uint8_t data_length,uint8_t* data_ptr)
{
    3dc4:	b590      	push	{r4, r7, lr}
    3dc6:	b08b      	sub	sp, #44	; 0x2c
    3dc8:	af00      	add	r7, sp, #0
    3dca:	0004      	movs	r4, r0
    3dcc:	0008      	movs	r0, r1
    3dce:	0011      	movs	r1, r2
    3dd0:	603b      	str	r3, [r7, #0]
    3dd2:	1dfb      	adds	r3, r7, #7
    3dd4:	1c22      	adds	r2, r4, #0
    3dd6:	701a      	strb	r2, [r3, #0]
    3dd8:	1dbb      	adds	r3, r7, #6
    3dda:	1c02      	adds	r2, r0, #0
    3ddc:	701a      	strb	r2, [r3, #0]
    3dde:	1d7b      	adds	r3, r7, #5
    3de0:	1c0a      	adds	r2, r1, #0
    3de2:	701a      	strb	r2, [r3, #0]
	//uint8_t read_datab[data_length];
	uint8_t state = 0;
    3de4:	2325      	movs	r3, #37	; 0x25
    3de6:	18fb      	adds	r3, r7, r3
    3de8:	2200      	movs	r2, #0
    3dea:	701a      	strb	r2, [r3, #0]
	//uint8_t address = (addr << 1) + 1;
	
	uint8_t data[2];
	data[0] = reg;
    3dec:	2320      	movs	r3, #32
    3dee:	18fb      	adds	r3, r7, r3
    3df0:	1dba      	adds	r2, r7, #6
    3df2:	7812      	ldrb	r2, [r2, #0]
    3df4:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
    3df6:	2320      	movs	r3, #32
    3df8:	18fb      	adds	r3, r7, r3
    3dfa:	22ff      	movs	r2, #255	; 0xff
    3dfc:	705a      	strb	r2, [r3, #1]
	
	struct i2c_master_packet packet = {
    3dfe:	1dfb      	adds	r3, r7, #7
    3e00:	781b      	ldrb	r3, [r3, #0]
    3e02:	b29b      	uxth	r3, r3
    3e04:	2280      	movs	r2, #128	; 0x80
    3e06:	0052      	lsls	r2, r2, #1
    3e08:	4313      	orrs	r3, r2
    3e0a:	b29a      	uxth	r2, r3
    3e0c:	2314      	movs	r3, #20
    3e0e:	18fb      	adds	r3, r7, r3
    3e10:	801a      	strh	r2, [r3, #0]
    3e12:	1d7b      	adds	r3, r7, #5
    3e14:	781b      	ldrb	r3, [r3, #0]
    3e16:	b29a      	uxth	r2, r3
    3e18:	2314      	movs	r3, #20
    3e1a:	18fb      	adds	r3, r7, r3
    3e1c:	805a      	strh	r2, [r3, #2]
    3e1e:	2314      	movs	r3, #20
    3e20:	18fb      	adds	r3, r7, r3
    3e22:	2220      	movs	r2, #32
    3e24:	18ba      	adds	r2, r7, r2
    3e26:	605a      	str	r2, [r3, #4]
    3e28:	2314      	movs	r3, #20
    3e2a:	18fb      	adds	r3, r7, r3
    3e2c:	2200      	movs	r2, #0
    3e2e:	721a      	strb	r2, [r3, #8]
    3e30:	2314      	movs	r3, #20
    3e32:	18fb      	adds	r3, r7, r3
    3e34:	2200      	movs	r2, #0
    3e36:	725a      	strb	r2, [r3, #9]
    3e38:	2314      	movs	r3, #20
    3e3a:	18fb      	adds	r3, r7, r3
    3e3c:	2200      	movs	r2, #0
    3e3e:	729a      	strb	r2, [r3, #10]
		.data        = data,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	uint16_t timeout = 0;
    3e40:	2326      	movs	r3, #38	; 0x26
    3e42:	18fb      	adds	r3, r7, r3
    3e44:	2200      	movs	r2, #0
    3e46:	801a      	strh	r2, [r3, #0]

	do
	{
		state = i2c_master_write_packet_wait(&i2c_master_instance,&packet);
    3e48:	2325      	movs	r3, #37	; 0x25
    3e4a:	18fc      	adds	r4, r7, r3
    3e4c:	2314      	movs	r3, #20
    3e4e:	18fa      	adds	r2, r7, r3
    3e50:	4b23      	ldr	r3, [pc, #140]	; (3ee0 <i2c_read+0x11c>)
    3e52:	0011      	movs	r1, r2
    3e54:	0018      	movs	r0, r3
    3e56:	4b23      	ldr	r3, [pc, #140]	; (3ee4 <i2c_read+0x120>)
    3e58:	4798      	blx	r3
    3e5a:	0003      	movs	r3, r0
    3e5c:	7023      	strb	r3, [r4, #0]
		if (timeout++ == I2C_TIMEOUT) {
    3e5e:	2326      	movs	r3, #38	; 0x26
    3e60:	18fb      	adds	r3, r7, r3
    3e62:	881b      	ldrh	r3, [r3, #0]
    3e64:	2226      	movs	r2, #38	; 0x26
    3e66:	18ba      	adds	r2, r7, r2
    3e68:	1c59      	adds	r1, r3, #1
    3e6a:	8011      	strh	r1, [r2, #0]
    3e6c:	2b0a      	cmp	r3, #10
    3e6e:	d103      	bne.n	3e78 <i2c_read+0xb4>
			return state;
    3e70:	2325      	movs	r3, #37	; 0x25
    3e72:	18fb      	adds	r3, r7, r3
    3e74:	781b      	ldrb	r3, [r3, #0]
    3e76:	e02e      	b.n	3ed6 <i2c_read+0x112>
			break;
		}
	}
	while (state != STATUS_OK);
    3e78:	2325      	movs	r3, #37	; 0x25
    3e7a:	18fb      	adds	r3, r7, r3
    3e7c:	781b      	ldrb	r3, [r3, #0]
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d1e2      	bne.n	3e48 <i2c_read+0x84>
	
	struct i2c_master_packet read_packet = {
    3e82:	1dfb      	adds	r3, r7, #7
    3e84:	781b      	ldrb	r3, [r3, #0]
    3e86:	b29a      	uxth	r2, r3
    3e88:	2308      	movs	r3, #8
    3e8a:	18fb      	adds	r3, r7, r3
    3e8c:	801a      	strh	r2, [r3, #0]
    3e8e:	1d7b      	adds	r3, r7, #5
    3e90:	781b      	ldrb	r3, [r3, #0]
    3e92:	b29a      	uxth	r2, r3
    3e94:	2308      	movs	r3, #8
    3e96:	18fb      	adds	r3, r7, r3
    3e98:	805a      	strh	r2, [r3, #2]
    3e9a:	2308      	movs	r3, #8
    3e9c:	18fb      	adds	r3, r7, r3
    3e9e:	683a      	ldr	r2, [r7, #0]
    3ea0:	605a      	str	r2, [r3, #4]
    3ea2:	2308      	movs	r3, #8
    3ea4:	18fb      	adds	r3, r7, r3
    3ea6:	2200      	movs	r2, #0
    3ea8:	721a      	strb	r2, [r3, #8]
    3eaa:	2308      	movs	r3, #8
    3eac:	18fb      	adds	r3, r7, r3
    3eae:	2200      	movs	r2, #0
    3eb0:	725a      	strb	r2, [r3, #9]
    3eb2:	2308      	movs	r3, #8
    3eb4:	18fb      	adds	r3, r7, r3
    3eb6:	2200      	movs	r2, #0
    3eb8:	729a      	strb	r2, [r3, #10]
		.data        = data_ptr,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	state = i2c_master_read_packet_wait(&i2c_master_instance,&read_packet);
    3eba:	2325      	movs	r3, #37	; 0x25
    3ebc:	18fc      	adds	r4, r7, r3
    3ebe:	2308      	movs	r3, #8
    3ec0:	18fa      	adds	r2, r7, r3
    3ec2:	4b07      	ldr	r3, [pc, #28]	; (3ee0 <i2c_read+0x11c>)
    3ec4:	0011      	movs	r1, r2
    3ec6:	0018      	movs	r0, r3
    3ec8:	4b07      	ldr	r3, [pc, #28]	; (3ee8 <i2c_read+0x124>)
    3eca:	4798      	blx	r3
    3ecc:	0003      	movs	r3, r0
    3ece:	7023      	strb	r3, [r4, #0]
	return state;
    3ed0:	2325      	movs	r3, #37	; 0x25
    3ed2:	18fb      	adds	r3, r7, r3
    3ed4:	781b      	ldrb	r3, [r3, #0]
}
    3ed6:	0018      	movs	r0, r3
    3ed8:	46bd      	mov	sp, r7
    3eda:	b00b      	add	sp, #44	; 0x2c
    3edc:	bd90      	pop	{r4, r7, pc}
    3ede:	46c0      	nop			; (mov r8, r8)
    3ee0:	20000314 	.word	0x20000314
    3ee4:	00001841 	.word	0x00001841
    3ee8:	00001699 	.word	0x00001699

00003eec <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3eec:	b580      	push	{r7, lr}
    3eee:	b084      	sub	sp, #16
    3ef0:	af00      	add	r7, sp, #0
    3ef2:	0002      	movs	r2, r0
    3ef4:	1dfb      	adds	r3, r7, #7
    3ef6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3ef8:	230f      	movs	r3, #15
    3efa:	18fb      	adds	r3, r7, r3
    3efc:	1dfa      	adds	r2, r7, #7
    3efe:	7812      	ldrb	r2, [r2, #0]
    3f00:	09d2      	lsrs	r2, r2, #7
    3f02:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3f04:	230e      	movs	r3, #14
    3f06:	18fb      	adds	r3, r7, r3
    3f08:	1dfa      	adds	r2, r7, #7
    3f0a:	7812      	ldrb	r2, [r2, #0]
    3f0c:	0952      	lsrs	r2, r2, #5
    3f0e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3f10:	4b0d      	ldr	r3, [pc, #52]	; (3f48 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3f12:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3f14:	230f      	movs	r3, #15
    3f16:	18fb      	adds	r3, r7, r3
    3f18:	781b      	ldrb	r3, [r3, #0]
    3f1a:	2b00      	cmp	r3, #0
    3f1c:	d10f      	bne.n	3f3e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3f1e:	230f      	movs	r3, #15
    3f20:	18fb      	adds	r3, r7, r3
    3f22:	781b      	ldrb	r3, [r3, #0]
    3f24:	009b      	lsls	r3, r3, #2
    3f26:	2210      	movs	r2, #16
    3f28:	4694      	mov	ip, r2
    3f2a:	44bc      	add	ip, r7
    3f2c:	4463      	add	r3, ip
    3f2e:	3b08      	subs	r3, #8
    3f30:	681a      	ldr	r2, [r3, #0]
    3f32:	230e      	movs	r3, #14
    3f34:	18fb      	adds	r3, r7, r3
    3f36:	781b      	ldrb	r3, [r3, #0]
    3f38:	01db      	lsls	r3, r3, #7
    3f3a:	18d3      	adds	r3, r2, r3
    3f3c:	e000      	b.n	3f40 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3f3e:	2300      	movs	r3, #0
	}
}
    3f40:	0018      	movs	r0, r3
    3f42:	46bd      	mov	sp, r7
    3f44:	b004      	add	sp, #16
    3f46:	bd80      	pop	{r7, pc}
    3f48:	41004400 	.word	0x41004400

00003f4c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3f4c:	b580      	push	{r7, lr}
    3f4e:	b082      	sub	sp, #8
    3f50:	af00      	add	r7, sp, #0
    3f52:	0002      	movs	r2, r0
    3f54:	1dfb      	adds	r3, r7, #7
    3f56:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3f58:	1dfb      	adds	r3, r7, #7
    3f5a:	781b      	ldrb	r3, [r3, #0]
    3f5c:	0018      	movs	r0, r3
    3f5e:	4b03      	ldr	r3, [pc, #12]	; (3f6c <port_get_group_from_gpio_pin+0x20>)
    3f60:	4798      	blx	r3
    3f62:	0003      	movs	r3, r0
}
    3f64:	0018      	movs	r0, r3
    3f66:	46bd      	mov	sp, r7
    3f68:	b002      	add	sp, #8
    3f6a:	bd80      	pop	{r7, pc}
    3f6c:	00003eed 	.word	0x00003eed

00003f70 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3f70:	b580      	push	{r7, lr}
    3f72:	b082      	sub	sp, #8
    3f74:	af00      	add	r7, sp, #0
    3f76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3f78:	687b      	ldr	r3, [r7, #4]
    3f7a:	2200      	movs	r2, #0
    3f7c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3f7e:	687b      	ldr	r3, [r7, #4]
    3f80:	2201      	movs	r2, #1
    3f82:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3f84:	687b      	ldr	r3, [r7, #4]
    3f86:	2200      	movs	r2, #0
    3f88:	709a      	strb	r2, [r3, #2]
}
    3f8a:	46c0      	nop			; (mov r8, r8)
    3f8c:	46bd      	mov	sp, r7
    3f8e:	b002      	add	sp, #8
    3f90:	bd80      	pop	{r7, pc}
    3f92:	46c0      	nop			; (mov r8, r8)

00003f94 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3f94:	b580      	push	{r7, lr}
    3f96:	b084      	sub	sp, #16
    3f98:	af00      	add	r7, sp, #0
    3f9a:	0002      	movs	r2, r0
    3f9c:	1dfb      	adds	r3, r7, #7
    3f9e:	701a      	strb	r2, [r3, #0]
    3fa0:	1dbb      	adds	r3, r7, #6
    3fa2:	1c0a      	adds	r2, r1, #0
    3fa4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3fa6:	1dfb      	adds	r3, r7, #7
    3fa8:	781b      	ldrb	r3, [r3, #0]
    3faa:	0018      	movs	r0, r3
    3fac:	4b0d      	ldr	r3, [pc, #52]	; (3fe4 <port_pin_set_output_level+0x50>)
    3fae:	4798      	blx	r3
    3fb0:	0003      	movs	r3, r0
    3fb2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3fb4:	1dfb      	adds	r3, r7, #7
    3fb6:	781b      	ldrb	r3, [r3, #0]
    3fb8:	221f      	movs	r2, #31
    3fba:	4013      	ands	r3, r2
    3fbc:	2201      	movs	r2, #1
    3fbe:	409a      	lsls	r2, r3
    3fc0:	0013      	movs	r3, r2
    3fc2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3fc4:	1dbb      	adds	r3, r7, #6
    3fc6:	781b      	ldrb	r3, [r3, #0]
    3fc8:	2b00      	cmp	r3, #0
    3fca:	d003      	beq.n	3fd4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3fcc:	68fb      	ldr	r3, [r7, #12]
    3fce:	68ba      	ldr	r2, [r7, #8]
    3fd0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3fd2:	e002      	b.n	3fda <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3fd4:	68fb      	ldr	r3, [r7, #12]
    3fd6:	68ba      	ldr	r2, [r7, #8]
    3fd8:	615a      	str	r2, [r3, #20]
	}
}
    3fda:	46c0      	nop			; (mov r8, r8)
    3fdc:	46bd      	mov	sp, r7
    3fde:	b004      	add	sp, #16
    3fe0:	bd80      	pop	{r7, pc}
    3fe2:	46c0      	nop			; (mov r8, r8)
    3fe4:	00003f4d 	.word	0x00003f4d

00003fe8 <init_all_ports>:
	data[1] = 0xFF;
	state = i2c_write(MCP23017_I2C_ADDR_000,(uint8_t *)data,2);
}

uint8_t init_all_ports(void)
{
    3fe8:	b590      	push	{r4, r7, lr}
    3fea:	b085      	sub	sp, #20
    3fec:	af00      	add	r7, sp, #0
	uint8_t states = 0;
    3fee:	230f      	movs	r3, #15
    3ff0:	18fb      	adds	r3, r7, r3
    3ff2:	2200      	movs	r2, #0
    3ff4:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[1] = 0x00;
    3ff6:	1d3b      	adds	r3, r7, #4
    3ff8:	2200      	movs	r2, #0
    3ffa:	705a      	strb	r2, [r3, #1]
	
	for (int i=0;i<8;i++)
    3ffc:	2300      	movs	r3, #0
    3ffe:	60bb      	str	r3, [r7, #8]
    4000:	e036      	b.n	4070 <init_all_ports+0x88>
	{
		data[0] = MCP23017_IODIRA;
    4002:	1d3b      	adds	r3, r7, #4
    4004:	2200      	movs	r2, #0
    4006:	701a      	strb	r2, [r3, #0]
		uint8_t state = i2c_write(MCP23017_I2C_ADDR_000+i,(uint8_t *)data,2);
    4008:	68bb      	ldr	r3, [r7, #8]
    400a:	b2db      	uxtb	r3, r3
    400c:	3320      	adds	r3, #32
    400e:	b2db      	uxtb	r3, r3
    4010:	1dfc      	adds	r4, r7, #7
    4012:	1d39      	adds	r1, r7, #4
    4014:	2202      	movs	r2, #2
    4016:	0018      	movs	r0, r3
    4018:	4b28      	ldr	r3, [pc, #160]	; (40bc <init_all_ports+0xd4>)
    401a:	4798      	blx	r3
    401c:	0003      	movs	r3, r0
    401e:	7023      	strb	r3, [r4, #0]
		if (state == STATUS_OK)
    4020:	1dfb      	adds	r3, r7, #7
    4022:	781b      	ldrb	r3, [r3, #0]
    4024:	2b00      	cmp	r3, #0
    4026:	d120      	bne.n	406a <init_all_ports+0x82>
		{
			data[0] = MCP23017_IODIRB;
    4028:	1d3b      	adds	r3, r7, #4
    402a:	2201      	movs	r2, #1
    402c:	701a      	strb	r2, [r3, #0]
			state = i2c_write(MCP23017_I2C_ADDR_000+i,(uint8_t *)data,2);
    402e:	68bb      	ldr	r3, [r7, #8]
    4030:	b2db      	uxtb	r3, r3
    4032:	3320      	adds	r3, #32
    4034:	b2db      	uxtb	r3, r3
    4036:	1dfc      	adds	r4, r7, #7
    4038:	1d39      	adds	r1, r7, #4
    403a:	2202      	movs	r2, #2
    403c:	0018      	movs	r0, r3
    403e:	4b1f      	ldr	r3, [pc, #124]	; (40bc <init_all_ports+0xd4>)
    4040:	4798      	blx	r3
    4042:	0003      	movs	r3, r0
    4044:	7023      	strb	r3, [r4, #0]
			if (state == STATUS_OK)
    4046:	1dfb      	adds	r3, r7, #7
    4048:	781b      	ldrb	r3, [r3, #0]
    404a:	2b00      	cmp	r3, #0
    404c:	d10d      	bne.n	406a <init_all_ports+0x82>
			{
				states |= (1 << i);
    404e:	2201      	movs	r2, #1
    4050:	68bb      	ldr	r3, [r7, #8]
    4052:	409a      	lsls	r2, r3
    4054:	0013      	movs	r3, r2
    4056:	b25a      	sxtb	r2, r3
    4058:	230f      	movs	r3, #15
    405a:	18fb      	adds	r3, r7, r3
    405c:	781b      	ldrb	r3, [r3, #0]
    405e:	b25b      	sxtb	r3, r3
    4060:	4313      	orrs	r3, r2
    4062:	b25a      	sxtb	r2, r3
    4064:	230f      	movs	r3, #15
    4066:	18fb      	adds	r3, r7, r3
    4068:	701a      	strb	r2, [r3, #0]
{
	uint8_t states = 0;
	uint8_t data[2];
	data[1] = 0x00;
	
	for (int i=0;i<8;i++)
    406a:	68bb      	ldr	r3, [r7, #8]
    406c:	3301      	adds	r3, #1
    406e:	60bb      	str	r3, [r7, #8]
    4070:	68bb      	ldr	r3, [r7, #8]
    4072:	2b07      	cmp	r3, #7
    4074:	ddc5      	ble.n	4002 <init_all_ports+0x1a>
				states |= (1 << i);
			}
		}
	}
	
	data[1] = 0x80;
    4076:	1d3b      	adds	r3, r7, #4
    4078:	2280      	movs	r2, #128	; 0x80
    407a:	705a      	strb	r2, [r3, #1]
	data[0] = MCP23017_GPIOA;
    407c:	1d3b      	adds	r3, r7, #4
    407e:	2212      	movs	r2, #18
    4080:	701a      	strb	r2, [r3, #0]
	uint8_t state = i2c_write(MCP23017_I2C_ADDR_001,(uint8_t *)data,2);
    4082:	1dbc      	adds	r4, r7, #6
    4084:	1d3b      	adds	r3, r7, #4
    4086:	2202      	movs	r2, #2
    4088:	0019      	movs	r1, r3
    408a:	2021      	movs	r0, #33	; 0x21
    408c:	4b0b      	ldr	r3, [pc, #44]	; (40bc <init_all_ports+0xd4>)
    408e:	4798      	blx	r3
    4090:	0003      	movs	r3, r0
    4092:	7023      	strb	r3, [r4, #0]
	data[0] = MCP23017_GPIOB;
    4094:	1d3b      	adds	r3, r7, #4
    4096:	2213      	movs	r2, #19
    4098:	701a      	strb	r2, [r3, #0]
	state = i2c_write(MCP23017_I2C_ADDR_001,(uint8_t *)data,2);
    409a:	1dbc      	adds	r4, r7, #6
    409c:	1d3b      	adds	r3, r7, #4
    409e:	2202      	movs	r2, #2
    40a0:	0019      	movs	r1, r3
    40a2:	2021      	movs	r0, #33	; 0x21
    40a4:	4b05      	ldr	r3, [pc, #20]	; (40bc <init_all_ports+0xd4>)
    40a6:	4798      	blx	r3
    40a8:	0003      	movs	r3, r0
    40aa:	7023      	strb	r3, [r4, #0]
	
	return states;
    40ac:	230f      	movs	r3, #15
    40ae:	18fb      	adds	r3, r7, r3
    40b0:	781b      	ldrb	r3, [r3, #0]
}
    40b2:	0018      	movs	r0, r3
    40b4:	46bd      	mov	sp, r7
    40b6:	b005      	add	sp, #20
    40b8:	bd90      	pop	{r4, r7, pc}
    40ba:	46c0      	nop			; (mov r8, r8)
    40bc:	00003d4d 	.word	0x00003d4d

000040c0 <mcp23017_set_pins>:
	data[0] = MCP23017_GPIOB;
	state = i2c_write(MCP23017_I2C_ADDR_000,(uint8_t *)data,2);	
}

uint8_t mcp23017_set_pins(uint8_t addr, uint8_t porta, uint8_t portb)
{
    40c0:	b590      	push	{r4, r7, lr}
    40c2:	b085      	sub	sp, #20
    40c4:	af00      	add	r7, sp, #0
    40c6:	0004      	movs	r4, r0
    40c8:	0008      	movs	r0, r1
    40ca:	0011      	movs	r1, r2
    40cc:	1dfb      	adds	r3, r7, #7
    40ce:	1c22      	adds	r2, r4, #0
    40d0:	701a      	strb	r2, [r3, #0]
    40d2:	1dbb      	adds	r3, r7, #6
    40d4:	1c02      	adds	r2, r0, #0
    40d6:	701a      	strb	r2, [r3, #0]
    40d8:	1d7b      	adds	r3, r7, #5
    40da:	1c0a      	adds	r2, r1, #0
    40dc:	701a      	strb	r2, [r3, #0]
	uint8_t state = 0x00;
    40de:	230f      	movs	r3, #15
    40e0:	18fb      	adds	r3, r7, r3
    40e2:	2200      	movs	r2, #0
    40e4:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = MCP23017_GPIOA;
    40e6:	230c      	movs	r3, #12
    40e8:	18fb      	adds	r3, r7, r3
    40ea:	2212      	movs	r2, #18
    40ec:	701a      	strb	r2, [r3, #0]
	data[1] = porta;
    40ee:	230c      	movs	r3, #12
    40f0:	18fb      	adds	r3, r7, r3
    40f2:	1dba      	adds	r2, r7, #6
    40f4:	7812      	ldrb	r2, [r2, #0]
    40f6:	705a      	strb	r2, [r3, #1]
	state = i2c_write(addr,(uint8_t *)data,2);
    40f8:	230f      	movs	r3, #15
    40fa:	18fc      	adds	r4, r7, r3
    40fc:	230c      	movs	r3, #12
    40fe:	18f9      	adds	r1, r7, r3
    4100:	1dfb      	adds	r3, r7, #7
    4102:	781b      	ldrb	r3, [r3, #0]
    4104:	2202      	movs	r2, #2
    4106:	0018      	movs	r0, r3
    4108:	4b12      	ldr	r3, [pc, #72]	; (4154 <mcp23017_set_pins+0x94>)
    410a:	4798      	blx	r3
    410c:	0003      	movs	r3, r0
    410e:	7023      	strb	r3, [r4, #0]
	data[0] = MCP23017_GPIOB;
    4110:	230c      	movs	r3, #12
    4112:	18fb      	adds	r3, r7, r3
    4114:	2213      	movs	r2, #19
    4116:	701a      	strb	r2, [r3, #0]
	data[1] = portb;
    4118:	230c      	movs	r3, #12
    411a:	18fb      	adds	r3, r7, r3
    411c:	1d7a      	adds	r2, r7, #5
    411e:	7812      	ldrb	r2, [r2, #0]
    4120:	705a      	strb	r2, [r3, #1]
	state |= i2c_write(addr,(uint8_t *)data,2);
    4122:	230c      	movs	r3, #12
    4124:	18f9      	adds	r1, r7, r3
    4126:	1dfb      	adds	r3, r7, #7
    4128:	781b      	ldrb	r3, [r3, #0]
    412a:	2202      	movs	r2, #2
    412c:	0018      	movs	r0, r3
    412e:	4b09      	ldr	r3, [pc, #36]	; (4154 <mcp23017_set_pins+0x94>)
    4130:	4798      	blx	r3
    4132:	0003      	movs	r3, r0
    4134:	0019      	movs	r1, r3
    4136:	230f      	movs	r3, #15
    4138:	18fb      	adds	r3, r7, r3
    413a:	220f      	movs	r2, #15
    413c:	18ba      	adds	r2, r7, r2
    413e:	7812      	ldrb	r2, [r2, #0]
    4140:	430a      	orrs	r2, r1
    4142:	701a      	strb	r2, [r3, #0]
	
	return state;
    4144:	230f      	movs	r3, #15
    4146:	18fb      	adds	r3, r7, r3
    4148:	781b      	ldrb	r3, [r3, #0]
}
    414a:	0018      	movs	r0, r3
    414c:	46bd      	mov	sp, r7
    414e:	b005      	add	sp, #20
    4150:	bd90      	pop	{r4, r7, pc}
    4152:	46c0      	nop			; (mov r8, r8)
    4154:	00003d4d 	.word	0x00003d4d

00004158 <mcp23017_read_all_ports>:

uint8_t data_being_read[8][2];

void mcp23017_read_all_ports(uint8_t read_data_ptr[2][8], uint8_t states[8])
{
    4158:	b5b0      	push	{r4, r5, r7, lr}
    415a:	b084      	sub	sp, #16
    415c:	af00      	add	r7, sp, #0
    415e:	6078      	str	r0, [r7, #4]
    4160:	6039      	str	r1, [r7, #0]
	uint8_t state = 0x00;
    4162:	230e      	movs	r3, #14
    4164:	18fb      	adds	r3, r7, r3
    4166:	2200      	movs	r2, #0
    4168:	701a      	strb	r2, [r3, #0]
	//uint8_t data = 0x00;
	for (uint8_t i=0;i<8;i++)
    416a:	230f      	movs	r3, #15
    416c:	18fb      	adds	r3, r7, r3
    416e:	2200      	movs	r2, #0
    4170:	701a      	strb	r2, [r3, #0]
    4172:	e03e      	b.n	41f2 <mcp23017_read_all_ports+0x9a>
	{
		//data = 0x00;
		//data_being_read[i][0] = 0;
		//read_data_ptr[i][0] = 0;
		state = i2c_read(MCP23017_I2C_ADDR_000+i,MCP23017_GPIOA, 1,(uint8_t *)&read_data_ptr[0][i]);
    4174:	230f      	movs	r3, #15
    4176:	18fb      	adds	r3, r7, r3
    4178:	781b      	ldrb	r3, [r3, #0]
    417a:	3320      	adds	r3, #32
    417c:	b2d8      	uxtb	r0, r3
    417e:	230f      	movs	r3, #15
    4180:	18fb      	adds	r3, r7, r3
    4182:	781b      	ldrb	r3, [r3, #0]
    4184:	687a      	ldr	r2, [r7, #4]
    4186:	18d3      	adds	r3, r2, r3
    4188:	220e      	movs	r2, #14
    418a:	18bc      	adds	r4, r7, r2
    418c:	2201      	movs	r2, #1
    418e:	2112      	movs	r1, #18
    4190:	4d1c      	ldr	r5, [pc, #112]	; (4204 <mcp23017_read_all_ports+0xac>)
    4192:	47a8      	blx	r5
    4194:	0003      	movs	r3, r0
    4196:	7023      	strb	r3, [r4, #0]
		//read_data[i][0] = data;
		//data_being_read[i][0] = data;
		//read_data_ptr[i][1] = 0;
		state |= i2c_read(MCP23017_I2C_ADDR_000+i,MCP23017_GPIOB, 1,(uint8_t *)&read_data_ptr[1][i]);
    4198:	230f      	movs	r3, #15
    419a:	18fb      	adds	r3, r7, r3
    419c:	781b      	ldrb	r3, [r3, #0]
    419e:	3320      	adds	r3, #32
    41a0:	b2d8      	uxtb	r0, r3
    41a2:	687b      	ldr	r3, [r7, #4]
    41a4:	3308      	adds	r3, #8
    41a6:	001a      	movs	r2, r3
    41a8:	230f      	movs	r3, #15
    41aa:	18fb      	adds	r3, r7, r3
    41ac:	781b      	ldrb	r3, [r3, #0]
    41ae:	18d3      	adds	r3, r2, r3
    41b0:	2201      	movs	r2, #1
    41b2:	2113      	movs	r1, #19
    41b4:	4c13      	ldr	r4, [pc, #76]	; (4204 <mcp23017_read_all_ports+0xac>)
    41b6:	47a0      	blx	r4
    41b8:	0003      	movs	r3, r0
    41ba:	0019      	movs	r1, r3
    41bc:	230e      	movs	r3, #14
    41be:	18fb      	adds	r3, r7, r3
    41c0:	220e      	movs	r2, #14
    41c2:	18ba      	adds	r2, r7, r2
    41c4:	7812      	ldrb	r2, [r2, #0]
    41c6:	430a      	orrs	r2, r1
    41c8:	701a      	strb	r2, [r3, #0]
		//data_being_read[i][1] = data;
		//read_data[i][1] = data;
		states[i] = state;
    41ca:	230f      	movs	r3, #15
    41cc:	18fb      	adds	r3, r7, r3
    41ce:	781b      	ldrb	r3, [r3, #0]
    41d0:	683a      	ldr	r2, [r7, #0]
    41d2:	18d3      	adds	r3, r2, r3
    41d4:	220e      	movs	r2, #14
    41d6:	18ba      	adds	r2, r7, r2
    41d8:	7812      	ldrb	r2, [r2, #0]
    41da:	701a      	strb	r2, [r3, #0]
		state = 0x00;
    41dc:	230e      	movs	r3, #14
    41de:	18fb      	adds	r3, r7, r3
    41e0:	2200      	movs	r2, #0
    41e2:	701a      	strb	r2, [r3, #0]

void mcp23017_read_all_ports(uint8_t read_data_ptr[2][8], uint8_t states[8])
{
	uint8_t state = 0x00;
	//uint8_t data = 0x00;
	for (uint8_t i=0;i<8;i++)
    41e4:	230f      	movs	r3, #15
    41e6:	18fb      	adds	r3, r7, r3
    41e8:	781a      	ldrb	r2, [r3, #0]
    41ea:	230f      	movs	r3, #15
    41ec:	18fb      	adds	r3, r7, r3
    41ee:	3201      	adds	r2, #1
    41f0:	701a      	strb	r2, [r3, #0]
    41f2:	230f      	movs	r3, #15
    41f4:	18fb      	adds	r3, r7, r3
    41f6:	781b      	ldrb	r3, [r3, #0]
    41f8:	2b07      	cmp	r3, #7
    41fa:	d9bb      	bls.n	4174 <mcp23017_read_all_ports+0x1c>
		states[i] = state;
		state = 0x00;
	}
	//read_data = data_being_read;
	//return state;
}
    41fc:	46c0      	nop			; (mov r8, r8)
    41fe:	46bd      	mov	sp, r7
    4200:	b004      	add	sp, #16
    4202:	bdb0      	pop	{r4, r5, r7, pc}
    4204:	00003dc5 	.word	0x00003dc5

00004208 <mcp23017_pin_init>:

void mcp23017_pin_init(void)
{
    4208:	b580      	push	{r7, lr}
    420a:	b082      	sub	sp, #8
    420c:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    420e:	1d3b      	adds	r3, r7, #4
    4210:	0018      	movs	r0, r3
    4212:	4b0a      	ldr	r3, [pc, #40]	; (423c <mcp23017_pin_init+0x34>)
    4214:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    4216:	1d3b      	adds	r3, r7, #4
    4218:	2201      	movs	r2, #1
    421a:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    421c:	1d3b      	adds	r3, r7, #4
    421e:	2201      	movs	r2, #1
    4220:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(MCP23017_PWR_PIN,&config_port_pin);
    4222:	1d3b      	adds	r3, r7, #4
    4224:	0019      	movs	r1, r3
    4226:	2007      	movs	r0, #7
    4228:	4b05      	ldr	r3, [pc, #20]	; (4240 <mcp23017_pin_init+0x38>)
    422a:	4798      	blx	r3
	port_pin_set_output_level(MCP23017_PWR_PIN,true);
    422c:	2101      	movs	r1, #1
    422e:	2007      	movs	r0, #7
    4230:	4b04      	ldr	r3, [pc, #16]	; (4244 <mcp23017_pin_init+0x3c>)
    4232:	4798      	blx	r3
}
    4234:	46c0      	nop			; (mov r8, r8)
    4236:	46bd      	mov	sp, r7
    4238:	b002      	add	sp, #8
    423a:	bd80      	pop	{r7, pc}
    423c:	00003f71 	.word	0x00003f71
    4240:	00000ce9 	.word	0x00000ce9
    4244:	00003f95 	.word	0x00003f95

00004248 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4248:	b580      	push	{r7, lr}
    424a:	b084      	sub	sp, #16
    424c:	af00      	add	r7, sp, #0
    424e:	0002      	movs	r2, r0
    4250:	1dfb      	adds	r3, r7, #7
    4252:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4254:	230f      	movs	r3, #15
    4256:	18fb      	adds	r3, r7, r3
    4258:	1dfa      	adds	r2, r7, #7
    425a:	7812      	ldrb	r2, [r2, #0]
    425c:	09d2      	lsrs	r2, r2, #7
    425e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4260:	230e      	movs	r3, #14
    4262:	18fb      	adds	r3, r7, r3
    4264:	1dfa      	adds	r2, r7, #7
    4266:	7812      	ldrb	r2, [r2, #0]
    4268:	0952      	lsrs	r2, r2, #5
    426a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    426c:	4b0d      	ldr	r3, [pc, #52]	; (42a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    426e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4270:	230f      	movs	r3, #15
    4272:	18fb      	adds	r3, r7, r3
    4274:	781b      	ldrb	r3, [r3, #0]
    4276:	2b00      	cmp	r3, #0
    4278:	d10f      	bne.n	429a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    427a:	230f      	movs	r3, #15
    427c:	18fb      	adds	r3, r7, r3
    427e:	781b      	ldrb	r3, [r3, #0]
    4280:	009b      	lsls	r3, r3, #2
    4282:	2210      	movs	r2, #16
    4284:	4694      	mov	ip, r2
    4286:	44bc      	add	ip, r7
    4288:	4463      	add	r3, ip
    428a:	3b08      	subs	r3, #8
    428c:	681a      	ldr	r2, [r3, #0]
    428e:	230e      	movs	r3, #14
    4290:	18fb      	adds	r3, r7, r3
    4292:	781b      	ldrb	r3, [r3, #0]
    4294:	01db      	lsls	r3, r3, #7
    4296:	18d3      	adds	r3, r2, r3
    4298:	e000      	b.n	429c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    429a:	2300      	movs	r3, #0
	}
}
    429c:	0018      	movs	r0, r3
    429e:	46bd      	mov	sp, r7
    42a0:	b004      	add	sp, #16
    42a2:	bd80      	pop	{r7, pc}
    42a4:	41004400 	.word	0x41004400

000042a8 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    42a8:	b580      	push	{r7, lr}
    42aa:	b084      	sub	sp, #16
    42ac:	af00      	add	r7, sp, #0
    42ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	681b      	ldr	r3, [r3, #0]
    42b4:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    42b6:	68fb      	ldr	r3, [r7, #12]
    42b8:	7e5b      	ldrb	r3, [r3, #25]
    42ba:	b2db      	uxtb	r3, r3
    42bc:	b25b      	sxtb	r3, r3
    42be:	2b00      	cmp	r3, #0
    42c0:	da01      	bge.n	42c6 <adc_is_syncing+0x1e>
		return true;
    42c2:	2301      	movs	r3, #1
    42c4:	e000      	b.n	42c8 <adc_is_syncing+0x20>
	}

	return false;
    42c6:	2300      	movs	r3, #0
}
    42c8:	0018      	movs	r0, r3
    42ca:	46bd      	mov	sp, r7
    42cc:	b004      	add	sp, #16
    42ce:	bd80      	pop	{r7, pc}

000042d0 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    42d0:	b580      	push	{r7, lr}
    42d2:	b086      	sub	sp, #24
    42d4:	af00      	add	r7, sp, #0
    42d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    42d8:	687b      	ldr	r3, [r7, #4]
    42da:	681b      	ldr	r3, [r3, #0]
    42dc:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    42de:	693b      	ldr	r3, [r7, #16]
    42e0:	7e1b      	ldrb	r3, [r3, #24]
    42e2:	b2db      	uxtb	r3, r3
    42e4:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    42e6:	2300      	movs	r3, #0
    42e8:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    42ea:	68fb      	ldr	r3, [r7, #12]
    42ec:	2201      	movs	r2, #1
    42ee:	4013      	ands	r3, r2
    42f0:	d003      	beq.n	42fa <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    42f2:	697b      	ldr	r3, [r7, #20]
    42f4:	2201      	movs	r2, #1
    42f6:	4313      	orrs	r3, r2
    42f8:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    42fa:	68fb      	ldr	r3, [r7, #12]
    42fc:	2204      	movs	r2, #4
    42fe:	4013      	ands	r3, r2
    4300:	d003      	beq.n	430a <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    4302:	697b      	ldr	r3, [r7, #20]
    4304:	2202      	movs	r2, #2
    4306:	4313      	orrs	r3, r2
    4308:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    430a:	68fb      	ldr	r3, [r7, #12]
    430c:	2202      	movs	r2, #2
    430e:	4013      	ands	r3, r2
    4310:	d003      	beq.n	431a <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    4312:	697b      	ldr	r3, [r7, #20]
    4314:	2204      	movs	r2, #4
    4316:	4313      	orrs	r3, r2
    4318:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    431a:	697b      	ldr	r3, [r7, #20]
}
    431c:	0018      	movs	r0, r3
    431e:	46bd      	mov	sp, r7
    4320:	b006      	add	sp, #24
    4322:	bd80      	pop	{r7, pc}

00004324 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    4324:	b580      	push	{r7, lr}
    4326:	b084      	sub	sp, #16
    4328:	af00      	add	r7, sp, #0
    432a:	6078      	str	r0, [r7, #4]
    432c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    432e:	687b      	ldr	r3, [r7, #4]
    4330:	681b      	ldr	r3, [r3, #0]
    4332:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    4334:	2300      	movs	r3, #0
    4336:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    4338:	683b      	ldr	r3, [r7, #0]
    433a:	2201      	movs	r2, #1
    433c:	4013      	ands	r3, r2
    433e:	d003      	beq.n	4348 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    4340:	68fb      	ldr	r3, [r7, #12]
    4342:	2201      	movs	r2, #1
    4344:	4313      	orrs	r3, r2
    4346:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    4348:	683b      	ldr	r3, [r7, #0]
    434a:	2202      	movs	r2, #2
    434c:	4013      	ands	r3, r2
    434e:	d003      	beq.n	4358 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    4350:	68fb      	ldr	r3, [r7, #12]
    4352:	2204      	movs	r2, #4
    4354:	4313      	orrs	r3, r2
    4356:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    4358:	683b      	ldr	r3, [r7, #0]
    435a:	2204      	movs	r2, #4
    435c:	4013      	ands	r3, r2
    435e:	d003      	beq.n	4368 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    4360:	68fb      	ldr	r3, [r7, #12]
    4362:	2202      	movs	r2, #2
    4364:	4313      	orrs	r3, r2
    4366:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    4368:	68fb      	ldr	r3, [r7, #12]
    436a:	b2da      	uxtb	r2, r3
    436c:	68bb      	ldr	r3, [r7, #8]
    436e:	761a      	strb	r2, [r3, #24]
}
    4370:	46c0      	nop			; (mov r8, r8)
    4372:	46bd      	mov	sp, r7
    4374:	b004      	add	sp, #16
    4376:	bd80      	pop	{r7, pc}

00004378 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    4378:	b580      	push	{r7, lr}
    437a:	b084      	sub	sp, #16
    437c:	af00      	add	r7, sp, #0
    437e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4380:	687b      	ldr	r3, [r7, #4]
    4382:	681b      	ldr	r3, [r3, #0]
    4384:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    4386:	46c0      	nop			; (mov r8, r8)
    4388:	687b      	ldr	r3, [r7, #4]
    438a:	0018      	movs	r0, r3
    438c:	4b0e      	ldr	r3, [pc, #56]	; (43c8 <adc_enable+0x50>)
    438e:	4798      	blx	r3
    4390:	1e03      	subs	r3, r0, #0
    4392:	d1f9      	bne.n	4388 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    4394:	68fb      	ldr	r3, [r7, #12]
    4396:	220f      	movs	r2, #15
    4398:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    439a:	68fb      	ldr	r3, [r7, #12]
    439c:	220f      	movs	r2, #15
    439e:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    43a0:	68fb      	ldr	r3, [r7, #12]
    43a2:	781b      	ldrb	r3, [r3, #0]
    43a4:	b2db      	uxtb	r3, r3
    43a6:	2202      	movs	r2, #2
    43a8:	4313      	orrs	r3, r2
    43aa:	b2da      	uxtb	r2, r3
    43ac:	68fb      	ldr	r3, [r7, #12]
    43ae:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    43b0:	46c0      	nop			; (mov r8, r8)
    43b2:	687b      	ldr	r3, [r7, #4]
    43b4:	0018      	movs	r0, r3
    43b6:	4b04      	ldr	r3, [pc, #16]	; (43c8 <adc_enable+0x50>)
    43b8:	4798      	blx	r3
    43ba:	1e03      	subs	r3, r0, #0
    43bc:	d1f9      	bne.n	43b2 <adc_enable+0x3a>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    43be:	2300      	movs	r3, #0
}
    43c0:	0018      	movs	r0, r3
    43c2:	46bd      	mov	sp, r7
    43c4:	b004      	add	sp, #16
    43c6:	bd80      	pop	{r7, pc}
    43c8:	000042a9 	.word	0x000042a9

000043cc <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    43cc:	b580      	push	{r7, lr}
    43ce:	b084      	sub	sp, #16
    43d0:	af00      	add	r7, sp, #0
    43d2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    43d4:	687b      	ldr	r3, [r7, #4]
    43d6:	681b      	ldr	r3, [r3, #0]
    43d8:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    43da:	46c0      	nop			; (mov r8, r8)
    43dc:	687b      	ldr	r3, [r7, #4]
    43de:	0018      	movs	r0, r3
    43e0:	4b0b      	ldr	r3, [pc, #44]	; (4410 <adc_start_conversion+0x44>)
    43e2:	4798      	blx	r3
    43e4:	1e03      	subs	r3, r0, #0
    43e6:	d1f9      	bne.n	43dc <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    43e8:	68fb      	ldr	r3, [r7, #12]
    43ea:	7b1b      	ldrb	r3, [r3, #12]
    43ec:	b2db      	uxtb	r3, r3
    43ee:	2202      	movs	r2, #2
    43f0:	4313      	orrs	r3, r2
    43f2:	b2da      	uxtb	r2, r3
    43f4:	68fb      	ldr	r3, [r7, #12]
    43f6:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    43f8:	46c0      	nop			; (mov r8, r8)
    43fa:	687b      	ldr	r3, [r7, #4]
    43fc:	0018      	movs	r0, r3
    43fe:	4b04      	ldr	r3, [pc, #16]	; (4410 <adc_start_conversion+0x44>)
    4400:	4798      	blx	r3
    4402:	1e03      	subs	r3, r0, #0
    4404:	d1f9      	bne.n	43fa <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    4406:	46c0      	nop			; (mov r8, r8)
    4408:	46bd      	mov	sp, r7
    440a:	b004      	add	sp, #16
    440c:	bd80      	pop	{r7, pc}
    440e:	46c0      	nop			; (mov r8, r8)
    4410:	000042a9 	.word	0x000042a9

00004414 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    4414:	b580      	push	{r7, lr}
    4416:	b084      	sub	sp, #16
    4418:	af00      	add	r7, sp, #0
    441a:	6078      	str	r0, [r7, #4]
    441c:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    441e:	687b      	ldr	r3, [r7, #4]
    4420:	0018      	movs	r0, r3
    4422:	4b18      	ldr	r3, [pc, #96]	; (4484 <adc_read+0x70>)
    4424:	4798      	blx	r3
    4426:	0002      	movs	r2, r0
    4428:	2301      	movs	r3, #1
    442a:	4013      	ands	r3, r2
    442c:	d101      	bne.n	4432 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    442e:	2305      	movs	r3, #5
    4430:	e023      	b.n	447a <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    4432:	687b      	ldr	r3, [r7, #4]
    4434:	681b      	ldr	r3, [r3, #0]
    4436:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    4438:	46c0      	nop			; (mov r8, r8)
    443a:	687b      	ldr	r3, [r7, #4]
    443c:	0018      	movs	r0, r3
    443e:	4b12      	ldr	r3, [pc, #72]	; (4488 <adc_read+0x74>)
    4440:	4798      	blx	r3
    4442:	1e03      	subs	r3, r0, #0
    4444:	d1f9      	bne.n	443a <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    4446:	68fb      	ldr	r3, [r7, #12]
    4448:	8b5b      	ldrh	r3, [r3, #26]
    444a:	b29a      	uxth	r2, r3
    444c:	683b      	ldr	r3, [r7, #0]
    444e:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    4450:	687b      	ldr	r3, [r7, #4]
    4452:	2101      	movs	r1, #1
    4454:	0018      	movs	r0, r3
    4456:	4b0d      	ldr	r3, [pc, #52]	; (448c <adc_read+0x78>)
    4458:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    445a:	687b      	ldr	r3, [r7, #4]
    445c:	0018      	movs	r0, r3
    445e:	4b09      	ldr	r3, [pc, #36]	; (4484 <adc_read+0x70>)
    4460:	4798      	blx	r3
    4462:	0002      	movs	r2, r0
    4464:	2304      	movs	r3, #4
    4466:	4013      	ands	r3, r2
    4468:	d006      	beq.n	4478 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    446a:	687b      	ldr	r3, [r7, #4]
    446c:	2104      	movs	r1, #4
    446e:	0018      	movs	r0, r3
    4470:	4b06      	ldr	r3, [pc, #24]	; (448c <adc_read+0x78>)
    4472:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    4474:	231e      	movs	r3, #30
    4476:	e000      	b.n	447a <adc_read+0x66>
	}

	return STATUS_OK;
    4478:	2300      	movs	r3, #0
}
    447a:	0018      	movs	r0, r3
    447c:	46bd      	mov	sp, r7
    447e:	b004      	add	sp, #16
    4480:	bd80      	pop	{r7, pc}
    4482:	46c0      	nop			; (mov r8, r8)
    4484:	000042d1 	.word	0x000042d1
    4488:	000042a9 	.word	0x000042a9
    448c:	00004325 	.word	0x00004325

00004490 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4490:	b580      	push	{r7, lr}
    4492:	b082      	sub	sp, #8
    4494:	af00      	add	r7, sp, #0
    4496:	0002      	movs	r2, r0
    4498:	1dfb      	adds	r3, r7, #7
    449a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    449c:	1dfb      	adds	r3, r7, #7
    449e:	781b      	ldrb	r3, [r3, #0]
    44a0:	0018      	movs	r0, r3
    44a2:	4b03      	ldr	r3, [pc, #12]	; (44b0 <port_get_group_from_gpio_pin+0x20>)
    44a4:	4798      	blx	r3
    44a6:	0003      	movs	r3, r0
}
    44a8:	0018      	movs	r0, r3
    44aa:	46bd      	mov	sp, r7
    44ac:	b002      	add	sp, #8
    44ae:	bd80      	pop	{r7, pc}
    44b0:	00004249 	.word	0x00004249

000044b4 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    44b4:	b580      	push	{r7, lr}
    44b6:	b082      	sub	sp, #8
    44b8:	af00      	add	r7, sp, #0
    44ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    44bc:	687b      	ldr	r3, [r7, #4]
    44be:	2200      	movs	r2, #0
    44c0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    44c2:	687b      	ldr	r3, [r7, #4]
    44c4:	2201      	movs	r2, #1
    44c6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    44c8:	687b      	ldr	r3, [r7, #4]
    44ca:	2200      	movs	r2, #0
    44cc:	709a      	strb	r2, [r3, #2]
}
    44ce:	46c0      	nop			; (mov r8, r8)
    44d0:	46bd      	mov	sp, r7
    44d2:	b002      	add	sp, #8
    44d4:	bd80      	pop	{r7, pc}
    44d6:	46c0      	nop			; (mov r8, r8)

000044d8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    44d8:	b580      	push	{r7, lr}
    44da:	b084      	sub	sp, #16
    44dc:	af00      	add	r7, sp, #0
    44de:	0002      	movs	r2, r0
    44e0:	1dfb      	adds	r3, r7, #7
    44e2:	701a      	strb	r2, [r3, #0]
    44e4:	1dbb      	adds	r3, r7, #6
    44e6:	1c0a      	adds	r2, r1, #0
    44e8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    44ea:	1dfb      	adds	r3, r7, #7
    44ec:	781b      	ldrb	r3, [r3, #0]
    44ee:	0018      	movs	r0, r3
    44f0:	4b0d      	ldr	r3, [pc, #52]	; (4528 <port_pin_set_output_level+0x50>)
    44f2:	4798      	blx	r3
    44f4:	0003      	movs	r3, r0
    44f6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    44f8:	1dfb      	adds	r3, r7, #7
    44fa:	781b      	ldrb	r3, [r3, #0]
    44fc:	221f      	movs	r2, #31
    44fe:	4013      	ands	r3, r2
    4500:	2201      	movs	r2, #1
    4502:	409a      	lsls	r2, r3
    4504:	0013      	movs	r3, r2
    4506:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4508:	1dbb      	adds	r3, r7, #6
    450a:	781b      	ldrb	r3, [r3, #0]
    450c:	2b00      	cmp	r3, #0
    450e:	d003      	beq.n	4518 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4510:	68fb      	ldr	r3, [r7, #12]
    4512:	68ba      	ldr	r2, [r7, #8]
    4514:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    4516:	e002      	b.n	451e <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4518:	68fb      	ldr	r3, [r7, #12]
    451a:	68ba      	ldr	r2, [r7, #8]
    451c:	615a      	str	r2, [r3, #20]
	}
}
    451e:	46c0      	nop			; (mov r8, r8)
    4520:	46bd      	mov	sp, r7
    4522:	b004      	add	sp, #16
    4524:	bd80      	pop	{r7, pc}
    4526:	46c0      	nop			; (mov r8, r8)
    4528:	00004491 	.word	0x00004491

0000452c <msgeq7_init>:
#include "msgeq7.h"

struct adc_module adc_instance;

void msgeq7_init()
{
    452c:	b580      	push	{r7, lr}
    452e:	af00      	add	r7, sp, #0
	msgeq7_port_init();
    4530:	4b03      	ldr	r3, [pc, #12]	; (4540 <msgeq7_init+0x14>)
    4532:	4798      	blx	r3
	msgeq7_adc_init();
    4534:	4b03      	ldr	r3, [pc, #12]	; (4544 <msgeq7_init+0x18>)
    4536:	4798      	blx	r3
}
    4538:	46c0      	nop			; (mov r8, r8)
    453a:	46bd      	mov	sp, r7
    453c:	bd80      	pop	{r7, pc}
    453e:	46c0      	nop			; (mov r8, r8)
    4540:	00004549 	.word	0x00004549
    4544:	000045a1 	.word	0x000045a1

00004548 <msgeq7_port_init>:

void msgeq7_port_init()
{
    4548:	b580      	push	{r7, lr}
    454a:	b082      	sub	sp, #8
    454c:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    454e:	1d3b      	adds	r3, r7, #4
    4550:	0018      	movs	r0, r3
    4552:	4b10      	ldr	r3, [pc, #64]	; (4594 <msgeq7_port_init+0x4c>)
    4554:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    4556:	1d3b      	adds	r3, r7, #4
    4558:	2202      	movs	r2, #2
    455a:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    455c:	1d3b      	adds	r3, r7, #4
    455e:	2201      	movs	r2, #1
    4560:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(MSGEQ7_PIN_RESET,&config_port_pin);
    4562:	1d3b      	adds	r3, r7, #4
    4564:	0019      	movs	r1, r3
    4566:	2019      	movs	r0, #25
    4568:	4b0b      	ldr	r3, [pc, #44]	; (4598 <msgeq7_port_init+0x50>)
    456a:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_RESET,false);
    456c:	2100      	movs	r1, #0
    456e:	2019      	movs	r0, #25
    4570:	4b0a      	ldr	r3, [pc, #40]	; (459c <msgeq7_port_init+0x54>)
    4572:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    4574:	1d3b      	adds	r3, r7, #4
    4576:	2201      	movs	r2, #1
    4578:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(MSGEQ7_PIN_STROBE,&config_port_pin);
    457a:	1d3b      	adds	r3, r7, #4
    457c:	0019      	movs	r1, r3
    457e:	2018      	movs	r0, #24
    4580:	4b05      	ldr	r3, [pc, #20]	; (4598 <msgeq7_port_init+0x50>)
    4582:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_STROBE,true);
    4584:	2101      	movs	r1, #1
    4586:	2018      	movs	r0, #24
    4588:	4b04      	ldr	r3, [pc, #16]	; (459c <msgeq7_port_init+0x54>)
    458a:	4798      	blx	r3
}
    458c:	46c0      	nop			; (mov r8, r8)
    458e:	46bd      	mov	sp, r7
    4590:	b002      	add	sp, #8
    4592:	bd80      	pop	{r7, pc}
    4594:	000044b5 	.word	0x000044b5
    4598:	00000ce9 	.word	0x00000ce9
    459c:	000044d9 	.word	0x000044d9

000045a0 <msgeq7_adc_init>:

void msgeq7_adc_init()
{
    45a0:	b580      	push	{r7, lr}
    45a2:	b08c      	sub	sp, #48	; 0x30
    45a4:	af00      	add	r7, sp, #0
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    45a6:	003b      	movs	r3, r7
    45a8:	0018      	movs	r0, r3
    45aa:	4b0e      	ldr	r3, [pc, #56]	; (45e4 <msgeq7_adc_init+0x44>)
    45ac:	4798      	blx	r3
	
	config_adc.gain_factor = ADC_GAIN_FACTOR_1X;
    45ae:	003b      	movs	r3, r7
    45b0:	2200      	movs	r2, #0
    45b2:	609a      	str	r2, [r3, #8]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN2; //PIN_PB08
    45b4:	003b      	movs	r3, r7
    45b6:	2202      	movs	r2, #2
    45b8:	731a      	strb	r2, [r3, #12]
	config_adc.differential_mode = false;
    45ba:	003b      	movs	r3, r7
    45bc:	2200      	movs	r2, #0
    45be:	74da      	strb	r2, [r3, #19]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    45c0:	003b      	movs	r3, r7
    45c2:	22c0      	movs	r2, #192	; 0xc0
    45c4:	0152      	lsls	r2, r2, #5
    45c6:	81da      	strh	r2, [r3, #14]
	
	adc_init(&adc_instance, ADC, &config_adc);
    45c8:	003a      	movs	r2, r7
    45ca:	4907      	ldr	r1, [pc, #28]	; (45e8 <msgeq7_adc_init+0x48>)
    45cc:	4b07      	ldr	r3, [pc, #28]	; (45ec <msgeq7_adc_init+0x4c>)
    45ce:	0018      	movs	r0, r3
    45d0:	4b07      	ldr	r3, [pc, #28]	; (45f0 <msgeq7_adc_init+0x50>)
    45d2:	4798      	blx	r3
	adc_enable(&adc_instance);
    45d4:	4b05      	ldr	r3, [pc, #20]	; (45ec <msgeq7_adc_init+0x4c>)
    45d6:	0018      	movs	r0, r3
    45d8:	4b06      	ldr	r3, [pc, #24]	; (45f4 <msgeq7_adc_init+0x54>)
    45da:	4798      	blx	r3
}
    45dc:	46c0      	nop			; (mov r8, r8)
    45de:	46bd      	mov	sp, r7
    45e0:	b00c      	add	sp, #48	; 0x30
    45e2:	bd80      	pop	{r7, pc}
    45e4:	00000291 	.word	0x00000291
    45e8:	42004000 	.word	0x42004000
    45ec:	20000320 	.word	0x20000320
    45f0:	000008e1 	.word	0x000008e1
    45f4:	00004379 	.word	0x00004379

000045f8 <single_conversion>:


uint16_t single_conversion()
{
    45f8:	b580      	push	{r7, lr}
    45fa:	b082      	sub	sp, #8
    45fc:	af00      	add	r7, sp, #0
	adc_start_conversion(&adc_instance);
    45fe:	4b09      	ldr	r3, [pc, #36]	; (4624 <single_conversion+0x2c>)
    4600:	0018      	movs	r0, r3
    4602:	4b09      	ldr	r3, [pc, #36]	; (4628 <single_conversion+0x30>)
    4604:	4798      	blx	r3
	uint16_t result;

	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
    4606:	1dba      	adds	r2, r7, #6
    4608:	4b06      	ldr	r3, [pc, #24]	; (4624 <single_conversion+0x2c>)
    460a:	0011      	movs	r1, r2
    460c:	0018      	movs	r0, r3
    460e:	4b07      	ldr	r3, [pc, #28]	; (462c <single_conversion+0x34>)
    4610:	4798      	blx	r3
    4612:	1e03      	subs	r3, r0, #0
    4614:	2b05      	cmp	r3, #5
    4616:	d0f6      	beq.n	4606 <single_conversion+0xe>
	return result;
    4618:	1dbb      	adds	r3, r7, #6
    461a:	881b      	ldrh	r3, [r3, #0]
}
    461c:	0018      	movs	r0, r3
    461e:	46bd      	mov	sp, r7
    4620:	b002      	add	sp, #8
    4622:	bd80      	pop	{r7, pc}
    4624:	20000320 	.word	0x20000320
    4628:	000043cd 	.word	0x000043cd
    462c:	00004415 	.word	0x00004415

00004630 <msgeq7_all_bands>:

void msgeq7_all_bands(uint16_t bands[])
{
    4630:	b5f0      	push	{r4, r5, r6, r7, lr}
    4632:	b08f      	sub	sp, #60	; 0x3c
    4634:	af00      	add	r7, sp, #0
    4636:	62f8      	str	r0, [r7, #44]	; 0x2c
	port_pin_set_output_level(MSGEQ7_PIN_RESET,true);
    4638:	2101      	movs	r1, #1
    463a:	2019      	movs	r0, #25
    463c:	4b53      	ldr	r3, [pc, #332]	; (478c <msgeq7_all_bands+0x15c>)
    463e:	4798      	blx	r3
	delay_us(1);
    4640:	2000      	movs	r0, #0
    4642:	4b53      	ldr	r3, [pc, #332]	; (4790 <msgeq7_all_bands+0x160>)
    4644:	4798      	blx	r3
    4646:	0003      	movs	r3, r0
    4648:	613b      	str	r3, [r7, #16]
    464a:	2300      	movs	r3, #0
    464c:	617b      	str	r3, [r7, #20]
    464e:	4b51      	ldr	r3, [pc, #324]	; (4794 <msgeq7_all_bands+0x164>)
    4650:	2400      	movs	r4, #0
    4652:	6938      	ldr	r0, [r7, #16]
    4654:	6979      	ldr	r1, [r7, #20]
    4656:	18c0      	adds	r0, r0, r3
    4658:	4161      	adcs	r1, r4
    465a:	4c4f      	ldr	r4, [pc, #316]	; (4798 <msgeq7_all_bands+0x168>)
    465c:	4a4f      	ldr	r2, [pc, #316]	; (479c <msgeq7_all_bands+0x16c>)
    465e:	2300      	movs	r3, #0
    4660:	47a0      	blx	r4
    4662:	0003      	movs	r3, r0
    4664:	000c      	movs	r4, r1
    4666:	0018      	movs	r0, r3
    4668:	4b4d      	ldr	r3, [pc, #308]	; (47a0 <msgeq7_all_bands+0x170>)
    466a:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_RESET,false);
    466c:	2100      	movs	r1, #0
    466e:	2019      	movs	r0, #25
    4670:	4b46      	ldr	r3, [pc, #280]	; (478c <msgeq7_all_bands+0x15c>)
    4672:	4798      	blx	r3
	delay_us(75);
    4674:	2000      	movs	r0, #0
    4676:	4b46      	ldr	r3, [pc, #280]	; (4790 <msgeq7_all_bands+0x160>)
    4678:	4798      	blx	r3
    467a:	0003      	movs	r3, r0
    467c:	61bb      	str	r3, [r7, #24]
    467e:	2300      	movs	r3, #0
    4680:	61fb      	str	r3, [r7, #28]
    4682:	69bb      	ldr	r3, [r7, #24]
    4684:	69fc      	ldr	r4, [r7, #28]
    4686:	0f9a      	lsrs	r2, r3, #30
    4688:	00a0      	lsls	r0, r4, #2
    468a:	6278      	str	r0, [r7, #36]	; 0x24
    468c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    468e:	4310      	orrs	r0, r2
    4690:	6278      	str	r0, [r7, #36]	; 0x24
    4692:	009b      	lsls	r3, r3, #2
    4694:	623b      	str	r3, [r7, #32]
    4696:	6a3b      	ldr	r3, [r7, #32]
    4698:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    469a:	69b9      	ldr	r1, [r7, #24]
    469c:	69fa      	ldr	r2, [r7, #28]
    469e:	185b      	adds	r3, r3, r1
    46a0:	4154      	adcs	r4, r2
    46a2:	0f1a      	lsrs	r2, r3, #28
    46a4:	0126      	lsls	r6, r4, #4
    46a6:	4316      	orrs	r6, r2
    46a8:	011d      	lsls	r5, r3, #4
    46aa:	1aed      	subs	r5, r5, r3
    46ac:	41a6      	sbcs	r6, r4
    46ae:	002b      	movs	r3, r5
    46b0:	0034      	movs	r4, r6
    46b2:	4938      	ldr	r1, [pc, #224]	; (4794 <msgeq7_all_bands+0x164>)
    46b4:	2200      	movs	r2, #0
    46b6:	185b      	adds	r3, r3, r1
    46b8:	4154      	adcs	r4, r2
    46ba:	0018      	movs	r0, r3
    46bc:	0021      	movs	r1, r4
    46be:	4c36      	ldr	r4, [pc, #216]	; (4798 <msgeq7_all_bands+0x168>)
    46c0:	4a36      	ldr	r2, [pc, #216]	; (479c <msgeq7_all_bands+0x16c>)
    46c2:	2300      	movs	r3, #0
    46c4:	47a0      	blx	r4
    46c6:	0003      	movs	r3, r0
    46c8:	000c      	movs	r4, r1
    46ca:	0018      	movs	r0, r3
    46cc:	4b34      	ldr	r3, [pc, #208]	; (47a0 <msgeq7_all_bands+0x170>)
    46ce:	4798      	blx	r3
	
	for (int i=0;i<7;i++)
    46d0:	2300      	movs	r3, #0
    46d2:	637b      	str	r3, [r7, #52]	; 0x34
    46d4:	e052      	b.n	477c <msgeq7_all_bands+0x14c>
	{
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,false);
    46d6:	2100      	movs	r1, #0
    46d8:	2018      	movs	r0, #24
    46da:	4b2c      	ldr	r3, [pc, #176]	; (478c <msgeq7_all_bands+0x15c>)
    46dc:	4798      	blx	r3
		delay_us(40);
    46de:	2000      	movs	r0, #0
    46e0:	4b2b      	ldr	r3, [pc, #172]	; (4790 <msgeq7_all_bands+0x160>)
    46e2:	4798      	blx	r3
    46e4:	0003      	movs	r3, r0
    46e6:	60bb      	str	r3, [r7, #8]
    46e8:	2300      	movs	r3, #0
    46ea:	60fb      	str	r3, [r7, #12]
    46ec:	4c2d      	ldr	r4, [pc, #180]	; (47a4 <msgeq7_all_bands+0x174>)
    46ee:	2228      	movs	r2, #40	; 0x28
    46f0:	2300      	movs	r3, #0
    46f2:	68b8      	ldr	r0, [r7, #8]
    46f4:	68f9      	ldr	r1, [r7, #12]
    46f6:	47a0      	blx	r4
    46f8:	0003      	movs	r3, r0
    46fa:	000c      	movs	r4, r1
    46fc:	0019      	movs	r1, r3
    46fe:	0022      	movs	r2, r4
    4700:	4b24      	ldr	r3, [pc, #144]	; (4794 <msgeq7_all_bands+0x164>)
    4702:	2400      	movs	r4, #0
    4704:	18c9      	adds	r1, r1, r3
    4706:	4162      	adcs	r2, r4
    4708:	0008      	movs	r0, r1
    470a:	0011      	movs	r1, r2
    470c:	4c22      	ldr	r4, [pc, #136]	; (4798 <msgeq7_all_bands+0x168>)
    470e:	4a23      	ldr	r2, [pc, #140]	; (479c <msgeq7_all_bands+0x16c>)
    4710:	2300      	movs	r3, #0
    4712:	47a0      	blx	r4
    4714:	0003      	movs	r3, r0
    4716:	000c      	movs	r4, r1
    4718:	0018      	movs	r0, r3
    471a:	4b21      	ldr	r3, [pc, #132]	; (47a0 <msgeq7_all_bands+0x170>)
    471c:	4798      	blx	r3
		bands[i] = single_conversion();
    471e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4720:	005b      	lsls	r3, r3, #1
    4722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4724:	18d4      	adds	r4, r2, r3
    4726:	4b20      	ldr	r3, [pc, #128]	; (47a8 <msgeq7_all_bands+0x178>)
    4728:	4798      	blx	r3
    472a:	0003      	movs	r3, r0
    472c:	8023      	strh	r3, [r4, #0]
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,true);
    472e:	2101      	movs	r1, #1
    4730:	2018      	movs	r0, #24
    4732:	4b16      	ldr	r3, [pc, #88]	; (478c <msgeq7_all_bands+0x15c>)
    4734:	4798      	blx	r3
		delay_us(40);
    4736:	2000      	movs	r0, #0
    4738:	4b15      	ldr	r3, [pc, #84]	; (4790 <msgeq7_all_bands+0x160>)
    473a:	4798      	blx	r3
    473c:	0003      	movs	r3, r0
    473e:	603b      	str	r3, [r7, #0]
    4740:	2300      	movs	r3, #0
    4742:	607b      	str	r3, [r7, #4]
    4744:	4c17      	ldr	r4, [pc, #92]	; (47a4 <msgeq7_all_bands+0x174>)
    4746:	2228      	movs	r2, #40	; 0x28
    4748:	2300      	movs	r3, #0
    474a:	6838      	ldr	r0, [r7, #0]
    474c:	6879      	ldr	r1, [r7, #4]
    474e:	47a0      	blx	r4
    4750:	0003      	movs	r3, r0
    4752:	000c      	movs	r4, r1
    4754:	0019      	movs	r1, r3
    4756:	0022      	movs	r2, r4
    4758:	4b0e      	ldr	r3, [pc, #56]	; (4794 <msgeq7_all_bands+0x164>)
    475a:	2400      	movs	r4, #0
    475c:	18c9      	adds	r1, r1, r3
    475e:	4162      	adcs	r2, r4
    4760:	0008      	movs	r0, r1
    4762:	0011      	movs	r1, r2
    4764:	4c0c      	ldr	r4, [pc, #48]	; (4798 <msgeq7_all_bands+0x168>)
    4766:	4a0d      	ldr	r2, [pc, #52]	; (479c <msgeq7_all_bands+0x16c>)
    4768:	2300      	movs	r3, #0
    476a:	47a0      	blx	r4
    476c:	0003      	movs	r3, r0
    476e:	000c      	movs	r4, r1
    4770:	0018      	movs	r0, r3
    4772:	4b0b      	ldr	r3, [pc, #44]	; (47a0 <msgeq7_all_bands+0x170>)
    4774:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_RESET,true);
	delay_us(1);
	port_pin_set_output_level(MSGEQ7_PIN_RESET,false);
	delay_us(75);
	
	for (int i=0;i<7;i++)
    4776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4778:	3301      	adds	r3, #1
    477a:	637b      	str	r3, [r7, #52]	; 0x34
    477c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    477e:	2b06      	cmp	r3, #6
    4780:	dda9      	ble.n	46d6 <msgeq7_all_bands+0xa6>
		delay_us(40);
		bands[i] = single_conversion();
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,true);
		delay_us(40);
	}
    4782:	46c0      	nop			; (mov r8, r8)
    4784:	46bd      	mov	sp, r7
    4786:	b00f      	add	sp, #60	; 0x3c
    4788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    478a:	46c0      	nop			; (mov r8, r8)
    478c:	000044d9 	.word	0x000044d9
    4790:	0000592d 	.word	0x0000592d
    4794:	006acfbf 	.word	0x006acfbf
    4798:	00006701 	.word	0x00006701
    479c:	006acfc0 	.word	0x006acfc0
    47a0:	20000001 	.word	0x20000001
    47a4:	00006741 	.word	0x00006741
    47a8:	000045f9 	.word	0x000045f9

000047ac <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    47ac:	b580      	push	{r7, lr}
    47ae:	b082      	sub	sp, #8
    47b0:	af00      	add	r7, sp, #0
    47b2:	0002      	movs	r2, r0
    47b4:	1dfb      	adds	r3, r7, #7
    47b6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    47b8:	4b06      	ldr	r3, [pc, #24]	; (47d4 <NVIC_EnableIRQ+0x28>)
    47ba:	1dfa      	adds	r2, r7, #7
    47bc:	7812      	ldrb	r2, [r2, #0]
    47be:	0011      	movs	r1, r2
    47c0:	221f      	movs	r2, #31
    47c2:	400a      	ands	r2, r1
    47c4:	2101      	movs	r1, #1
    47c6:	4091      	lsls	r1, r2
    47c8:	000a      	movs	r2, r1
    47ca:	601a      	str	r2, [r3, #0]
}
    47cc:	46c0      	nop			; (mov r8, r8)
    47ce:	46bd      	mov	sp, r7
    47d0:	b002      	add	sp, #8
    47d2:	bd80      	pop	{r7, pc}
    47d4:	e000e100 	.word	0xe000e100

000047d8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    47d8:	b5b0      	push	{r4, r5, r7, lr}
    47da:	b082      	sub	sp, #8
    47dc:	af00      	add	r7, sp, #0
    47de:	0002      	movs	r2, r0
    47e0:	6039      	str	r1, [r7, #0]
    47e2:	1dfb      	adds	r3, r7, #7
    47e4:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    47e6:	1dfb      	adds	r3, r7, #7
    47e8:	781b      	ldrb	r3, [r3, #0]
    47ea:	2b7f      	cmp	r3, #127	; 0x7f
    47ec:	d932      	bls.n	4854 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    47ee:	4c2f      	ldr	r4, [pc, #188]	; (48ac <NVIC_SetPriority+0xd4>)
    47f0:	1dfb      	adds	r3, r7, #7
    47f2:	781b      	ldrb	r3, [r3, #0]
    47f4:	001a      	movs	r2, r3
    47f6:	230f      	movs	r3, #15
    47f8:	4013      	ands	r3, r2
    47fa:	3b08      	subs	r3, #8
    47fc:	0899      	lsrs	r1, r3, #2
    47fe:	4a2b      	ldr	r2, [pc, #172]	; (48ac <NVIC_SetPriority+0xd4>)
    4800:	1dfb      	adds	r3, r7, #7
    4802:	781b      	ldrb	r3, [r3, #0]
    4804:	0018      	movs	r0, r3
    4806:	230f      	movs	r3, #15
    4808:	4003      	ands	r3, r0
    480a:	3b08      	subs	r3, #8
    480c:	089b      	lsrs	r3, r3, #2
    480e:	3306      	adds	r3, #6
    4810:	009b      	lsls	r3, r3, #2
    4812:	18d3      	adds	r3, r2, r3
    4814:	3304      	adds	r3, #4
    4816:	681b      	ldr	r3, [r3, #0]
    4818:	1dfa      	adds	r2, r7, #7
    481a:	7812      	ldrb	r2, [r2, #0]
    481c:	0010      	movs	r0, r2
    481e:	2203      	movs	r2, #3
    4820:	4002      	ands	r2, r0
    4822:	00d2      	lsls	r2, r2, #3
    4824:	20ff      	movs	r0, #255	; 0xff
    4826:	4090      	lsls	r0, r2
    4828:	0002      	movs	r2, r0
    482a:	43d2      	mvns	r2, r2
    482c:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    482e:	683b      	ldr	r3, [r7, #0]
    4830:	019b      	lsls	r3, r3, #6
    4832:	20ff      	movs	r0, #255	; 0xff
    4834:	4018      	ands	r0, r3
    4836:	1dfb      	adds	r3, r7, #7
    4838:	781b      	ldrb	r3, [r3, #0]
    483a:	001d      	movs	r5, r3
    483c:	2303      	movs	r3, #3
    483e:	402b      	ands	r3, r5
    4840:	00db      	lsls	r3, r3, #3
    4842:	4098      	lsls	r0, r3
    4844:	0003      	movs	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    4846:	431a      	orrs	r2, r3
    4848:	1d8b      	adds	r3, r1, #6
    484a:	009b      	lsls	r3, r3, #2
    484c:	18e3      	adds	r3, r4, r3
    484e:	3304      	adds	r3, #4
    4850:	601a      	str	r2, [r3, #0]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    4852:	e027      	b.n	48a4 <NVIC_SetPriority+0xcc>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    4854:	4c16      	ldr	r4, [pc, #88]	; (48b0 <NVIC_SetPriority+0xd8>)
    4856:	1dfb      	adds	r3, r7, #7
    4858:	781b      	ldrb	r3, [r3, #0]
    485a:	b25b      	sxtb	r3, r3
    485c:	089b      	lsrs	r3, r3, #2
    485e:	4914      	ldr	r1, [pc, #80]	; (48b0 <NVIC_SetPriority+0xd8>)
    4860:	1dfa      	adds	r2, r7, #7
    4862:	7812      	ldrb	r2, [r2, #0]
    4864:	b252      	sxtb	r2, r2
    4866:	0892      	lsrs	r2, r2, #2
    4868:	32c0      	adds	r2, #192	; 0xc0
    486a:	0092      	lsls	r2, r2, #2
    486c:	5852      	ldr	r2, [r2, r1]
    486e:	1df9      	adds	r1, r7, #7
    4870:	7809      	ldrb	r1, [r1, #0]
    4872:	0008      	movs	r0, r1
    4874:	2103      	movs	r1, #3
    4876:	4001      	ands	r1, r0
    4878:	00c9      	lsls	r1, r1, #3
    487a:	20ff      	movs	r0, #255	; 0xff
    487c:	4088      	lsls	r0, r1
    487e:	0001      	movs	r1, r0
    4880:	43c9      	mvns	r1, r1
    4882:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    4884:	683a      	ldr	r2, [r7, #0]
    4886:	0192      	lsls	r2, r2, #6
    4888:	20ff      	movs	r0, #255	; 0xff
    488a:	4010      	ands	r0, r2
    488c:	1dfa      	adds	r2, r7, #7
    488e:	7812      	ldrb	r2, [r2, #0]
    4890:	0015      	movs	r5, r2
    4892:	2203      	movs	r2, #3
    4894:	402a      	ands	r2, r5
    4896:	00d2      	lsls	r2, r2, #3
    4898:	4090      	lsls	r0, r2
    489a:	0002      	movs	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    489c:	430a      	orrs	r2, r1
    489e:	33c0      	adds	r3, #192	; 0xc0
    48a0:	009b      	lsls	r3, r3, #2
    48a2:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    48a4:	46c0      	nop			; (mov r8, r8)
    48a6:	46bd      	mov	sp, r7
    48a8:	b002      	add	sp, #8
    48aa:	bdb0      	pop	{r4, r5, r7, pc}
    48ac:	e000ed00 	.word	0xe000ed00
    48b0:	e000e100 	.word	0xe000e100

000048b4 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    48b4:	b580      	push	{r7, lr}
    48b6:	b082      	sub	sp, #8
    48b8:	af00      	add	r7, sp, #0
    48ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    48bc:	687b      	ldr	r3, [r7, #4]
    48be:	2200      	movs	r2, #0
    48c0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    48c2:	687b      	ldr	r3, [r7, #4]
    48c4:	2201      	movs	r2, #1
    48c6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    48c8:	687b      	ldr	r3, [r7, #4]
    48ca:	2200      	movs	r2, #0
    48cc:	709a      	strb	r2, [r3, #2]
}
    48ce:	46c0      	nop			; (mov r8, r8)
    48d0:	46bd      	mov	sp, r7
    48d2:	b002      	add	sp, #8
    48d4:	bd80      	pop	{r7, pc}
    48d6:	46c0      	nop			; (mov r8, r8)

000048d8 <pwm_port>:
#include "ble_uart.h"
#include "i2c.h"
#include "uart.h"

void pwm_port(void)
{
    48d8:	b580      	push	{r7, lr}
    48da:	b082      	sub	sp, #8
    48dc:	af00      	add	r7, sp, #0
	pwm_count = 0;
    48de:	4b0b      	ldr	r3, [pc, #44]	; (490c <pwm_port+0x34>)
    48e0:	2200      	movs	r2, #0
    48e2:	601a      	str	r2, [r3, #0]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    48e4:	1d3b      	adds	r3, r7, #4
    48e6:	0018      	movs	r0, r3
    48e8:	4b09      	ldr	r3, [pc, #36]	; (4910 <pwm_port+0x38>)
    48ea:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    48ec:	1d3b      	adds	r3, r7, #4
    48ee:	2200      	movs	r2, #0
    48f0:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    48f2:	1d3b      	adds	r3, r7, #4
    48f4:	2201      	movs	r2, #1
    48f6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA02,&config_port_pin);
    48f8:	1d3b      	adds	r3, r7, #4
    48fa:	0019      	movs	r1, r3
    48fc:	2002      	movs	r0, #2
    48fe:	4b05      	ldr	r3, [pc, #20]	; (4914 <pwm_port+0x3c>)
    4900:	4798      	blx	r3
}
    4902:	46c0      	nop			; (mov r8, r8)
    4904:	46bd      	mov	sp, r7
    4906:	b002      	add	sp, #8
    4908:	bd80      	pop	{r7, pc}
    490a:	46c0      	nop			; (mov r8, r8)
    490c:	20000310 	.word	0x20000310
    4910:	000048b5 	.word	0x000048b5
    4914:	00000ce9 	.word	0x00000ce9

00004918 <init_TC3>:

void init_TC3(void)
{	
    4918:	b580      	push	{r7, lr}
    491a:	af00      	add	r7, sp, #0
	PM->APBCMASK.reg |= PM_APBCMASK_TC3;
    491c:	4b15      	ldr	r3, [pc, #84]	; (4974 <init_TC3+0x5c>)
    491e:	4a15      	ldr	r2, [pc, #84]	; (4974 <init_TC3+0x5c>)
    4920:	6a12      	ldr	r2, [r2, #32]
    4922:	2180      	movs	r1, #128	; 0x80
    4924:	0109      	lsls	r1, r1, #4
    4926:	430a      	orrs	r2, r1
    4928:	621a      	str	r2, [r3, #32]

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_ID_TCC2_TC3;
    492a:	4b13      	ldr	r3, [pc, #76]	; (4978 <init_TC3+0x60>)
    492c:	4a13      	ldr	r2, [pc, #76]	; (497c <init_TC3+0x64>)
    492e:	805a      	strh	r2, [r3, #2]
	
	TC3->COUNT16.CTRLA.reg = TC_CTRLA_MODE_COUNT16 | TC_CTRLA_WAVEGEN_MFRQ |
    4930:	4b13      	ldr	r3, [pc, #76]	; (4980 <init_TC3+0x68>)
    4932:	4a14      	ldr	r2, [pc, #80]	; (4984 <init_TC3+0x6c>)
    4934:	801a      	strh	r2, [r3, #0]
	TC_CTRLA_PRESCALER_DIV1 | TC_CTRLA_PRESCSYNC_RESYNC;

	TC3->COUNT16.COUNT.reg = 0;
    4936:	4b12      	ldr	r3, [pc, #72]	; (4980 <init_TC3+0x68>)
    4938:	2200      	movs	r2, #0
    493a:	821a      	strh	r2, [r3, #16]
	TC3->COUNT16.CC[0].reg = COMPARE_MATCH;
    493c:	4b10      	ldr	r3, [pc, #64]	; (4980 <init_TC3+0x68>)
    493e:	4a12      	ldr	r2, [pc, #72]	; (4988 <init_TC3+0x70>)
    4940:	831a      	strh	r2, [r3, #24]
	
	
	TC3->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    4942:	4a0f      	ldr	r2, [pc, #60]	; (4980 <init_TC3+0x68>)
    4944:	4b0e      	ldr	r3, [pc, #56]	; (4980 <init_TC3+0x68>)
    4946:	881b      	ldrh	r3, [r3, #0]
    4948:	b29b      	uxth	r3, r3
    494a:	2102      	movs	r1, #2
    494c:	430b      	orrs	r3, r1
    494e:	b29b      	uxth	r3, r3
    4950:	8013      	strh	r3, [r2, #0]
	TC3->COUNT16.DBGCTRL.reg = TC_DBGCTRL_DBGRUN;
    4952:	4b0b      	ldr	r3, [pc, #44]	; (4980 <init_TC3+0x68>)
    4954:	2201      	movs	r2, #1
    4956:	721a      	strb	r2, [r3, #8]
	TC3->COUNT16.INTENSET.reg = TC_INTENSET_MC0;
    4958:	4b09      	ldr	r3, [pc, #36]	; (4980 <init_TC3+0x68>)
    495a:	2210      	movs	r2, #16
    495c:	735a      	strb	r2, [r3, #13]
	NVIC_EnableIRQ(TC3_IRQn);
    495e:	2012      	movs	r0, #18
    4960:	4b0a      	ldr	r3, [pc, #40]	; (498c <init_TC3+0x74>)
    4962:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,2);
    4964:	2102      	movs	r1, #2
    4966:	2012      	movs	r0, #18
    4968:	4b09      	ldr	r3, [pc, #36]	; (4990 <init_TC3+0x78>)
    496a:	4798      	blx	r3
	/*PORT->Group[0].DIRSET.reg=18;
	PORT->Group[0].PINCFG[18].bit.PMUXEN=1;
	PORT->Group[0].PMUX[9].bit.PMUXE = 4;*/
}
    496c:	46c0      	nop			; (mov r8, r8)
    496e:	46bd      	mov	sp, r7
    4970:	bd80      	pop	{r7, pc}
    4972:	46c0      	nop			; (mov r8, r8)
    4974:	40000400 	.word	0x40000400
    4978:	40000c00 	.word	0x40000c00
    497c:	0000401b 	.word	0x0000401b
    4980:	42002c00 	.word	0x42002c00
    4984:	00002020 	.word	0x00002020
    4988:	ffff9c40 	.word	0xffff9c40
    498c:	000047ad 	.word	0x000047ad
    4990:	000047d9 	.word	0x000047d9

00004994 <TC3_Handler>:
uint16_t values_bands[6];

bool a_okayish = true;
char buffer[64];
void TC3_Handler()
{
    4994:	b580      	push	{r7, lr}
    4996:	af00      	add	r7, sp, #0
	static bool blink_state = false;
	// Overflow interrupt triggered
	if ( TC3->COUNT16.INTFLAG.bit.OVF == 1 )
    4998:	4b10      	ldr	r3, [pc, #64]	; (49dc <TC3_Handler+0x48>)
    499a:	7b9b      	ldrb	r3, [r3, #14]
    499c:	07db      	lsls	r3, r3, #31
    499e:	0fdb      	lsrs	r3, r3, #31
    49a0:	b2db      	uxtb	r3, r3
    49a2:	2b01      	cmp	r3, #1
    49a4:	d116      	bne.n	49d4 <TC3_Handler+0x40>
	{
		should_update = true;	
    49a6:	4b0e      	ldr	r3, [pc, #56]	; (49e0 <TC3_Handler+0x4c>)
    49a8:	2201      	movs	r2, #1
    49aa:	701a      	strb	r2, [r3, #0]
		pwm_count++;
    49ac:	4b0d      	ldr	r3, [pc, #52]	; (49e4 <TC3_Handler+0x50>)
    49ae:	681b      	ldr	r3, [r3, #0]
    49b0:	1c5a      	adds	r2, r3, #1
    49b2:	4b0c      	ldr	r3, [pc, #48]	; (49e4 <TC3_Handler+0x50>)
    49b4:	601a      	str	r2, [r3, #0]
		
		

		if (pwm_count > PWM_FREQ)
    49b6:	4b0b      	ldr	r3, [pc, #44]	; (49e4 <TC3_Handler+0x50>)
    49b8:	681b      	ldr	r3, [r3, #0]
    49ba:	2bc8      	cmp	r3, #200	; 0xc8
    49bc:	dd07      	ble.n	49ce <TC3_Handler+0x3a>
		{
			/*if ((seconds % 300) == 0)
			{
				execute_order_66 = true;
			}*/
			seconds++;
    49be:	4b0a      	ldr	r3, [pc, #40]	; (49e8 <TC3_Handler+0x54>)
    49c0:	681b      	ldr	r3, [r3, #0]
    49c2:	1c5a      	adds	r2, r3, #1
    49c4:	4b08      	ldr	r3, [pc, #32]	; (49e8 <TC3_Handler+0x54>)
    49c6:	601a      	str	r2, [r3, #0]
			if (party)
			{
				sprintf(buffer,"%d %d %d %d %d %d",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
				ble_uart_write(buffer);
			}*/
			pwm_count = 0;
    49c8:	4b06      	ldr	r3, [pc, #24]	; (49e4 <TC3_Handler+0x50>)
    49ca:	2200      	movs	r2, #0
    49cc:	601a      	str	r2, [r3, #0]
		}
		TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0;
    49ce:	4b03      	ldr	r3, [pc, #12]	; (49dc <TC3_Handler+0x48>)
    49d0:	2210      	movs	r2, #16
    49d2:	739a      	strb	r2, [r3, #14]
	}
}
    49d4:	46c0      	nop			; (mov r8, r8)
    49d6:	46bd      	mov	sp, r7
    49d8:	bd80      	pop	{r7, pc}
    49da:	46c0      	nop			; (mov r8, r8)
    49dc:	42002c00 	.word	0x42002c00
    49e0:	200002e9 	.word	0x200002e9
    49e4:	20000310 	.word	0x20000310
    49e8:	200002f0 	.word	0x200002f0

000049ec <things_to_do>:

void things_to_do(void)
{
    49ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    49ee:	b087      	sub	sp, #28
    49f0:	af04      	add	r7, sp, #16
	if (party)
    49f2:	4b27      	ldr	r3, [pc, #156]	; (4a90 <things_to_do+0xa4>)
    49f4:	781b      	ldrb	r3, [r3, #0]
    49f6:	b2db      	uxtb	r3, r3
    49f8:	2b00      	cmp	r3, #0
    49fa:	d026      	beq.n	4a4a <things_to_do+0x5e>
	{
		msgeq7_all_bands(values_bands);
    49fc:	4b25      	ldr	r3, [pc, #148]	; (4a94 <things_to_do+0xa8>)
    49fe:	0018      	movs	r0, r3
    4a00:	4b25      	ldr	r3, [pc, #148]	; (4a98 <things_to_do+0xac>)
    4a02:	4798      	blx	r3
		party_lights(values_bands);
    4a04:	4b23      	ldr	r3, [pc, #140]	; (4a94 <things_to_do+0xa8>)
    4a06:	0018      	movs	r0, r3
    4a08:	4b24      	ldr	r3, [pc, #144]	; (4a9c <things_to_do+0xb0>)
    4a0a:	4798      	blx	r3
		sprintf(buffer,"%04d %04d %04d %04d %04d %04d\r\n",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
    4a0c:	4b21      	ldr	r3, [pc, #132]	; (4a94 <things_to_do+0xa8>)
    4a0e:	881b      	ldrh	r3, [r3, #0]
    4a10:	001e      	movs	r6, r3
    4a12:	4b20      	ldr	r3, [pc, #128]	; (4a94 <things_to_do+0xa8>)
    4a14:	885b      	ldrh	r3, [r3, #2]
    4a16:	607b      	str	r3, [r7, #4]
    4a18:	4b1e      	ldr	r3, [pc, #120]	; (4a94 <things_to_do+0xa8>)
    4a1a:	889b      	ldrh	r3, [r3, #4]
    4a1c:	001a      	movs	r2, r3
    4a1e:	4b1d      	ldr	r3, [pc, #116]	; (4a94 <things_to_do+0xa8>)
    4a20:	88db      	ldrh	r3, [r3, #6]
    4a22:	001c      	movs	r4, r3
    4a24:	4b1b      	ldr	r3, [pc, #108]	; (4a94 <things_to_do+0xa8>)
    4a26:	891b      	ldrh	r3, [r3, #8]
    4a28:	001d      	movs	r5, r3
    4a2a:	4b1a      	ldr	r3, [pc, #104]	; (4a94 <things_to_do+0xa8>)
    4a2c:	895b      	ldrh	r3, [r3, #10]
    4a2e:	491c      	ldr	r1, [pc, #112]	; (4aa0 <things_to_do+0xb4>)
    4a30:	481c      	ldr	r0, [pc, #112]	; (4aa4 <things_to_do+0xb8>)
    4a32:	9303      	str	r3, [sp, #12]
    4a34:	9502      	str	r5, [sp, #8]
    4a36:	9401      	str	r4, [sp, #4]
    4a38:	9200      	str	r2, [sp, #0]
    4a3a:	687b      	ldr	r3, [r7, #4]
    4a3c:	0032      	movs	r2, r6
    4a3e:	4c1a      	ldr	r4, [pc, #104]	; (4aa8 <things_to_do+0xbc>)
    4a40:	47a0      	blx	r4
		uart_write(&buffer);
    4a42:	4b18      	ldr	r3, [pc, #96]	; (4aa4 <things_to_do+0xb8>)
    4a44:	0018      	movs	r0, r3
    4a46:	4b19      	ldr	r3, [pc, #100]	; (4aac <things_to_do+0xc0>)
    4a48:	4798      	blx	r3
		
	}
	if ((pwm_count % 25) == 0)
    4a4a:	4b19      	ldr	r3, [pc, #100]	; (4ab0 <things_to_do+0xc4>)
    4a4c:	681a      	ldr	r2, [r3, #0]
    4a4e:	4b19      	ldr	r3, [pc, #100]	; (4ab4 <things_to_do+0xc8>)
    4a50:	2119      	movs	r1, #25
    4a52:	0010      	movs	r0, r2
    4a54:	4798      	blx	r3
    4a56:	1e0b      	subs	r3, r1, #0
    4a58:	d10e      	bne.n	4a78 <things_to_do+0x8c>
	{
		if (flashy2)
    4a5a:	4b17      	ldr	r3, [pc, #92]	; (4ab8 <things_to_do+0xcc>)
    4a5c:	781b      	ldrb	r3, [r3, #0]
    4a5e:	b2db      	uxtb	r3, r3
    4a60:	2b00      	cmp	r3, #0
    4a62:	d002      	beq.n	4a6a <things_to_do+0x7e>
		{
			flashy_flash1();
    4a64:	4b15      	ldr	r3, [pc, #84]	; (4abc <things_to_do+0xd0>)
    4a66:	4798      	blx	r3
    4a68:	e006      	b.n	4a78 <things_to_do+0x8c>
		}
		else if (flashy1)
    4a6a:	4b15      	ldr	r3, [pc, #84]	; (4ac0 <things_to_do+0xd4>)
    4a6c:	781b      	ldrb	r3, [r3, #0]
    4a6e:	b2db      	uxtb	r3, r3
    4a70:	2b00      	cmp	r3, #0
    4a72:	d001      	beq.n	4a78 <things_to_do+0x8c>
		{
			flashy_flash2();
    4a74:	4b13      	ldr	r3, [pc, #76]	; (4ac4 <things_to_do+0xd8>)
    4a76:	4798      	blx	r3
		}
	}
	if (flashyfade)
    4a78:	4b13      	ldr	r3, [pc, #76]	; (4ac8 <things_to_do+0xdc>)
    4a7a:	781b      	ldrb	r3, [r3, #0]
    4a7c:	b2db      	uxtb	r3, r3
    4a7e:	2b00      	cmp	r3, #0
    4a80:	d001      	beq.n	4a86 <things_to_do+0x9a>
	{
		flashy_fades();
    4a82:	4b12      	ldr	r3, [pc, #72]	; (4acc <things_to_do+0xe0>)
    4a84:	4798      	blx	r3
	/*if (party)
	{
		sprintf(buffer,"%d %d %d %d %d %d\r\n",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
		ble_uart_write(buffer);
	}*/
}
    4a86:	46c0      	nop			; (mov r8, r8)
    4a88:	46bd      	mov	sp, r7
    4a8a:	b003      	add	sp, #12
    4a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a8e:	46c0      	nop			; (mov r8, r8)
    4a90:	20000259 	.word	0x20000259
    4a94:	20000368 	.word	0x20000368
    4a98:	00004631 	.word	0x00004631
    4a9c:	00003035 	.word	0x00003035
    4aa0:	000099f4 	.word	0x000099f4
    4aa4:	20000328 	.word	0x20000328
    4aa8:	000082c9 	.word	0x000082c9
    4aac:	000050b9 	.word	0x000050b9
    4ab0:	20000310 	.word	0x20000310
    4ab4:	000066f5 	.word	0x000066f5
    4ab8:	20000247 	.word	0x20000247
    4abc:	0000329d 	.word	0x0000329d
    4ac0:	200001b3 	.word	0x200001b3
    4ac4:	000034a5 	.word	0x000034a5
    4ac8:	20000263 	.word	0x20000263
    4acc:	000036f5 	.word	0x000036f5

00004ad0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4ad0:	b580      	push	{r7, lr}
    4ad2:	b084      	sub	sp, #16
    4ad4:	af00      	add	r7, sp, #0
    4ad6:	0002      	movs	r2, r0
    4ad8:	1dfb      	adds	r3, r7, #7
    4ada:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4adc:	230f      	movs	r3, #15
    4ade:	18fb      	adds	r3, r7, r3
    4ae0:	1dfa      	adds	r2, r7, #7
    4ae2:	7812      	ldrb	r2, [r2, #0]
    4ae4:	09d2      	lsrs	r2, r2, #7
    4ae6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4ae8:	230e      	movs	r3, #14
    4aea:	18fb      	adds	r3, r7, r3
    4aec:	1dfa      	adds	r2, r7, #7
    4aee:	7812      	ldrb	r2, [r2, #0]
    4af0:	0952      	lsrs	r2, r2, #5
    4af2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4af4:	4b0d      	ldr	r3, [pc, #52]	; (4b2c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4af6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4af8:	230f      	movs	r3, #15
    4afa:	18fb      	adds	r3, r7, r3
    4afc:	781b      	ldrb	r3, [r3, #0]
    4afe:	2b00      	cmp	r3, #0
    4b00:	d10f      	bne.n	4b22 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4b02:	230f      	movs	r3, #15
    4b04:	18fb      	adds	r3, r7, r3
    4b06:	781b      	ldrb	r3, [r3, #0]
    4b08:	009b      	lsls	r3, r3, #2
    4b0a:	2210      	movs	r2, #16
    4b0c:	4694      	mov	ip, r2
    4b0e:	44bc      	add	ip, r7
    4b10:	4463      	add	r3, ip
    4b12:	3b08      	subs	r3, #8
    4b14:	681a      	ldr	r2, [r3, #0]
    4b16:	230e      	movs	r3, #14
    4b18:	18fb      	adds	r3, r7, r3
    4b1a:	781b      	ldrb	r3, [r3, #0]
    4b1c:	01db      	lsls	r3, r3, #7
    4b1e:	18d3      	adds	r3, r2, r3
    4b20:	e000      	b.n	4b24 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4b22:	2300      	movs	r3, #0
	}
}
    4b24:	0018      	movs	r0, r3
    4b26:	46bd      	mov	sp, r7
    4b28:	b004      	add	sp, #16
    4b2a:	bd80      	pop	{r7, pc}
    4b2c:	41004400 	.word	0x41004400

00004b30 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4b30:	b580      	push	{r7, lr}
    4b32:	b082      	sub	sp, #8
    4b34:	af00      	add	r7, sp, #0
    4b36:	0002      	movs	r2, r0
    4b38:	1dfb      	adds	r3, r7, #7
    4b3a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4b3c:	1dfb      	adds	r3, r7, #7
    4b3e:	781b      	ldrb	r3, [r3, #0]
    4b40:	0018      	movs	r0, r3
    4b42:	4b03      	ldr	r3, [pc, #12]	; (4b50 <port_get_group_from_gpio_pin+0x20>)
    4b44:	4798      	blx	r3
    4b46:	0003      	movs	r3, r0
}
    4b48:	0018      	movs	r0, r3
    4b4a:	46bd      	mov	sp, r7
    4b4c:	b002      	add	sp, #8
    4b4e:	bd80      	pop	{r7, pc}
    4b50:	00004ad1 	.word	0x00004ad1

00004b54 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    4b54:	b580      	push	{r7, lr}
    4b56:	b082      	sub	sp, #8
    4b58:	af00      	add	r7, sp, #0
    4b5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    4b5c:	687b      	ldr	r3, [r7, #4]
    4b5e:	2200      	movs	r2, #0
    4b60:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4b62:	687b      	ldr	r3, [r7, #4]
    4b64:	2201      	movs	r2, #1
    4b66:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    4b68:	687b      	ldr	r3, [r7, #4]
    4b6a:	2200      	movs	r2, #0
    4b6c:	709a      	strb	r2, [r3, #2]
}
    4b6e:	46c0      	nop			; (mov r8, r8)
    4b70:	46bd      	mov	sp, r7
    4b72:	b002      	add	sp, #8
    4b74:	bd80      	pop	{r7, pc}
    4b76:	46c0      	nop			; (mov r8, r8)

00004b78 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    4b78:	b580      	push	{r7, lr}
    4b7a:	b084      	sub	sp, #16
    4b7c:	af00      	add	r7, sp, #0
    4b7e:	0002      	movs	r2, r0
    4b80:	1dfb      	adds	r3, r7, #7
    4b82:	701a      	strb	r2, [r3, #0]
    4b84:	1dbb      	adds	r3, r7, #6
    4b86:	1c0a      	adds	r2, r1, #0
    4b88:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4b8a:	1dfb      	adds	r3, r7, #7
    4b8c:	781b      	ldrb	r3, [r3, #0]
    4b8e:	0018      	movs	r0, r3
    4b90:	4b0d      	ldr	r3, [pc, #52]	; (4bc8 <port_pin_set_output_level+0x50>)
    4b92:	4798      	blx	r3
    4b94:	0003      	movs	r3, r0
    4b96:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4b98:	1dfb      	adds	r3, r7, #7
    4b9a:	781b      	ldrb	r3, [r3, #0]
    4b9c:	221f      	movs	r2, #31
    4b9e:	4013      	ands	r3, r2
    4ba0:	2201      	movs	r2, #1
    4ba2:	409a      	lsls	r2, r3
    4ba4:	0013      	movs	r3, r2
    4ba6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4ba8:	1dbb      	adds	r3, r7, #6
    4baa:	781b      	ldrb	r3, [r3, #0]
    4bac:	2b00      	cmp	r3, #0
    4bae:	d003      	beq.n	4bb8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4bb0:	68fb      	ldr	r3, [r7, #12]
    4bb2:	68ba      	ldr	r2, [r7, #8]
    4bb4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    4bb6:	e002      	b.n	4bbe <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4bb8:	68fb      	ldr	r3, [r7, #12]
    4bba:	68ba      	ldr	r2, [r7, #8]
    4bbc:	615a      	str	r2, [r3, #20]
	}
}
    4bbe:	46c0      	nop			; (mov r8, r8)
    4bc0:	46bd      	mov	sp, r7
    4bc2:	b004      	add	sp, #16
    4bc4:	bd80      	pop	{r7, pc}
    4bc6:	46c0      	nop			; (mov r8, r8)
    4bc8:	00004b31 	.word	0x00004b31

00004bcc <sounds_init_pins>:
 *  Author: Andreas
 */ 
#include "sounds.h"

void sounds_init_pins(void)
{
    4bcc:	b580      	push	{r7, lr}
    4bce:	b082      	sub	sp, #8
    4bd0:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    4bd2:	1d3b      	adds	r3, r7, #4
    4bd4:	0018      	movs	r0, r3
    4bd6:	4b44      	ldr	r3, [pc, #272]	; (4ce8 <sounds_init_pins+0x11c>)
    4bd8:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    4bda:	1d3b      	adds	r3, r7, #4
    4bdc:	2201      	movs	r2, #1
    4bde:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4be0:	1d3b      	adds	r3, r7, #4
    4be2:	2201      	movs	r2, #1
    4be4:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SOUNDS_PIN_SS,&config_port_pin);
    4be6:	1d3b      	adds	r3, r7, #4
    4be8:	0019      	movs	r1, r3
    4bea:	2005      	movs	r0, #5
    4bec:	4b3f      	ldr	r3, [pc, #252]	; (4cec <sounds_init_pins+0x120>)
    4bee:	4798      	blx	r3
	//port_pin_set_config(SOUNDS_PIN_SPDT_SEL1,&config_port_pin);
	//port_pin_set_config(SOUNDS_PIN_SPDT_SEL2,&config_port_pin);
	
	port_pin_set_config(SB_PIN_RESET,&config_port_pin);
    4bf0:	1d3b      	adds	r3, r7, #4
    4bf2:	0019      	movs	r1, r3
    4bf4:	201c      	movs	r0, #28
    4bf6:	4b3d      	ldr	r3, [pc, #244]	; (4cec <sounds_init_pins+0x120>)
    4bf8:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_RESET,true);
    4bfa:	2101      	movs	r1, #1
    4bfc:	201c      	movs	r0, #28
    4bfe:	4b3c      	ldr	r3, [pc, #240]	; (4cf0 <sounds_init_pins+0x124>)
    4c00:	4798      	blx	r3
	
	
	
	
	port_pin_set_config(SB_PIN_BTN00,&config_port_pin);
    4c02:	1d3b      	adds	r3, r7, #4
    4c04:	0019      	movs	r1, r3
    4c06:	200b      	movs	r0, #11
    4c08:	4b38      	ldr	r3, [pc, #224]	; (4cec <sounds_init_pins+0x120>)
    4c0a:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN00,true);
    4c0c:	2101      	movs	r1, #1
    4c0e:	200b      	movs	r0, #11
    4c10:	4b37      	ldr	r3, [pc, #220]	; (4cf0 <sounds_init_pins+0x124>)
    4c12:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN01,&config_port_pin);
    4c14:	1d3b      	adds	r3, r7, #4
    4c16:	0019      	movs	r1, r3
    4c18:	200c      	movs	r0, #12
    4c1a:	4b34      	ldr	r3, [pc, #208]	; (4cec <sounds_init_pins+0x120>)
    4c1c:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN01,true);
    4c1e:	2101      	movs	r1, #1
    4c20:	200c      	movs	r0, #12
    4c22:	4b33      	ldr	r3, [pc, #204]	; (4cf0 <sounds_init_pins+0x124>)
    4c24:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN02,&config_port_pin);
    4c26:	1d3b      	adds	r3, r7, #4
    4c28:	0019      	movs	r1, r3
    4c2a:	200d      	movs	r0, #13
    4c2c:	4b2f      	ldr	r3, [pc, #188]	; (4cec <sounds_init_pins+0x120>)
    4c2e:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN02,true);
    4c30:	2101      	movs	r1, #1
    4c32:	200d      	movs	r0, #13
    4c34:	4b2e      	ldr	r3, [pc, #184]	; (4cf0 <sounds_init_pins+0x124>)
    4c36:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN03,&config_port_pin);
    4c38:	1d3b      	adds	r3, r7, #4
    4c3a:	0019      	movs	r1, r3
    4c3c:	200e      	movs	r0, #14
    4c3e:	4b2b      	ldr	r3, [pc, #172]	; (4cec <sounds_init_pins+0x120>)
    4c40:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN03,true);
    4c42:	2101      	movs	r1, #1
    4c44:	200e      	movs	r0, #14
    4c46:	4b2a      	ldr	r3, [pc, #168]	; (4cf0 <sounds_init_pins+0x124>)
    4c48:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN04,&config_port_pin);
    4c4a:	1d3b      	adds	r3, r7, #4
    4c4c:	0019      	movs	r1, r3
    4c4e:	200f      	movs	r0, #15
    4c50:	4b26      	ldr	r3, [pc, #152]	; (4cec <sounds_init_pins+0x120>)
    4c52:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN04,true);
    4c54:	2101      	movs	r1, #1
    4c56:	200f      	movs	r0, #15
    4c58:	4b25      	ldr	r3, [pc, #148]	; (4cf0 <sounds_init_pins+0x124>)
    4c5a:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN05,&config_port_pin);
    4c5c:	1d3b      	adds	r3, r7, #4
    4c5e:	0019      	movs	r1, r3
    4c60:	2010      	movs	r0, #16
    4c62:	4b22      	ldr	r3, [pc, #136]	; (4cec <sounds_init_pins+0x120>)
    4c64:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN05,true);
    4c66:	2101      	movs	r1, #1
    4c68:	2010      	movs	r0, #16
    4c6a:	4b21      	ldr	r3, [pc, #132]	; (4cf0 <sounds_init_pins+0x124>)
    4c6c:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN06,&config_port_pin);
    4c6e:	1d3b      	adds	r3, r7, #4
    4c70:	0019      	movs	r1, r3
    4c72:	2011      	movs	r0, #17
    4c74:	4b1d      	ldr	r3, [pc, #116]	; (4cec <sounds_init_pins+0x120>)
    4c76:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN06,true);
    4c78:	2101      	movs	r1, #1
    4c7a:	2011      	movs	r0, #17
    4c7c:	4b1c      	ldr	r3, [pc, #112]	; (4cf0 <sounds_init_pins+0x124>)
    4c7e:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN07,&config_port_pin);
    4c80:	1d3b      	adds	r3, r7, #4
    4c82:	0019      	movs	r1, r3
    4c84:	2012      	movs	r0, #18
    4c86:	4b19      	ldr	r3, [pc, #100]	; (4cec <sounds_init_pins+0x120>)
    4c88:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN07,true);
    4c8a:	2101      	movs	r1, #1
    4c8c:	2012      	movs	r0, #18
    4c8e:	4b18      	ldr	r3, [pc, #96]	; (4cf0 <sounds_init_pins+0x124>)
    4c90:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN08,&config_port_pin);
    4c92:	1d3b      	adds	r3, r7, #4
    4c94:	0019      	movs	r1, r3
    4c96:	2013      	movs	r0, #19
    4c98:	4b14      	ldr	r3, [pc, #80]	; (4cec <sounds_init_pins+0x120>)
    4c9a:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN08,true);
    4c9c:	2101      	movs	r1, #1
    4c9e:	2013      	movs	r0, #19
    4ca0:	4b13      	ldr	r3, [pc, #76]	; (4cf0 <sounds_init_pins+0x124>)
    4ca2:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN09,&config_port_pin);
    4ca4:	1d3b      	adds	r3, r7, #4
    4ca6:	0019      	movs	r1, r3
    4ca8:	2014      	movs	r0, #20
    4caa:	4b10      	ldr	r3, [pc, #64]	; (4cec <sounds_init_pins+0x120>)
    4cac:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN09,true);
    4cae:	2101      	movs	r1, #1
    4cb0:	2014      	movs	r0, #20
    4cb2:	4b0f      	ldr	r3, [pc, #60]	; (4cf0 <sounds_init_pins+0x124>)
    4cb4:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN10,&config_port_pin);
    4cb6:	1d3b      	adds	r3, r7, #4
    4cb8:	0019      	movs	r1, r3
    4cba:	2015      	movs	r0, #21
    4cbc:	4b0b      	ldr	r3, [pc, #44]	; (4cec <sounds_init_pins+0x120>)
    4cbe:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN10,true);
    4cc0:	2101      	movs	r1, #1
    4cc2:	2015      	movs	r0, #21
    4cc4:	4b0a      	ldr	r3, [pc, #40]	; (4cf0 <sounds_init_pins+0x124>)
    4cc6:	4798      	blx	r3
	
	config_port_pin.direction = PORT_PIN_PULL_UP;
    4cc8:	1d3b      	adds	r3, r7, #4
    4cca:	2201      	movs	r2, #1
    4ccc:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SB_PIN_UG,&config_port_pin);
    4cce:	1d3b      	adds	r3, r7, #4
    4cd0:	0019      	movs	r1, r3
    4cd2:	201b      	movs	r0, #27
    4cd4:	4b05      	ldr	r3, [pc, #20]	; (4cec <sounds_init_pins+0x120>)
    4cd6:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_UG,true);
    4cd8:	2101      	movs	r1, #1
    4cda:	201b      	movs	r0, #27
    4cdc:	4b04      	ldr	r3, [pc, #16]	; (4cf0 <sounds_init_pins+0x124>)
    4cde:	4798      	blx	r3
}
    4ce0:	46c0      	nop			; (mov r8, r8)
    4ce2:	46bd      	mov	sp, r7
    4ce4:	b002      	add	sp, #8
    4ce6:	bd80      	pop	{r7, pc}
    4ce8:	00004b55 	.word	0x00004b55
    4cec:	00000ce9 	.word	0x00000ce9
    4cf0:	00004b79 	.word	0x00004b79

00004cf4 <press_sb_btn_once>:
	port_pin_set_output_level(SOUNDS_PIN_SPDT_SEL1,false);
	port_pin_set_output_level(SOUNDS_PIN_SPDT_SEL2,false);
}*/

void press_sb_btn_once(uint8_t btn)
{
    4cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cf6:	b083      	sub	sp, #12
    4cf8:	af00      	add	r7, sp, #0
    4cfa:	0002      	movs	r2, r0
    4cfc:	1dfb      	adds	r3, r7, #7
    4cfe:	701a      	strb	r2, [r3, #0]
	//sounds_reset();
	/*for (int i=0;i<11;i++)
	{
		if (i+11 == btn)
		{*/
			port_pin_set_output_level(btn,false);
    4d00:	1dfb      	adds	r3, r7, #7
    4d02:	781b      	ldrb	r3, [r3, #0]
    4d04:	2100      	movs	r1, #0
    4d06:	0018      	movs	r0, r3
    4d08:	4b15      	ldr	r3, [pc, #84]	; (4d60 <press_sb_btn_once+0x6c>)
    4d0a:	4798      	blx	r3
		else
		{
			port_pin_set_output_level(i+11,true);
		}
	}*/
	delay_ms(150);
    4d0c:	2000      	movs	r0, #0
    4d0e:	4b15      	ldr	r3, [pc, #84]	; (4d64 <press_sb_btn_once+0x70>)
    4d10:	4798      	blx	r3
    4d12:	0003      	movs	r3, r0
    4d14:	001d      	movs	r5, r3
    4d16:	2300      	movs	r3, #0
    4d18:	001e      	movs	r6, r3
    4d1a:	4c13      	ldr	r4, [pc, #76]	; (4d68 <press_sb_btn_once+0x74>)
    4d1c:	2296      	movs	r2, #150	; 0x96
    4d1e:	2300      	movs	r3, #0
    4d20:	0028      	movs	r0, r5
    4d22:	0031      	movs	r1, r6
    4d24:	47a0      	blx	r4
    4d26:	0003      	movs	r3, r0
    4d28:	000c      	movs	r4, r1
    4d2a:	0019      	movs	r1, r3
    4d2c:	0022      	movs	r2, r4
    4d2e:	4b0f      	ldr	r3, [pc, #60]	; (4d6c <press_sb_btn_once+0x78>)
    4d30:	2400      	movs	r4, #0
    4d32:	18c9      	adds	r1, r1, r3
    4d34:	4162      	adcs	r2, r4
    4d36:	0008      	movs	r0, r1
    4d38:	0011      	movs	r1, r2
    4d3a:	4c0d      	ldr	r4, [pc, #52]	; (4d70 <press_sb_btn_once+0x7c>)
    4d3c:	4a0d      	ldr	r2, [pc, #52]	; (4d74 <press_sb_btn_once+0x80>)
    4d3e:	2300      	movs	r3, #0
    4d40:	47a0      	blx	r4
    4d42:	0003      	movs	r3, r0
    4d44:	000c      	movs	r4, r1
    4d46:	0018      	movs	r0, r3
    4d48:	4b0b      	ldr	r3, [pc, #44]	; (4d78 <press_sb_btn_once+0x84>)
    4d4a:	4798      	blx	r3
	port_pin_set_output_level(btn,true);
    4d4c:	1dfb      	adds	r3, r7, #7
    4d4e:	781b      	ldrb	r3, [r3, #0]
    4d50:	2101      	movs	r1, #1
    4d52:	0018      	movs	r0, r3
    4d54:	4b02      	ldr	r3, [pc, #8]	; (4d60 <press_sb_btn_once+0x6c>)
    4d56:	4798      	blx	r3
}
    4d58:	46c0      	nop			; (mov r8, r8)
    4d5a:	46bd      	mov	sp, r7
    4d5c:	b003      	add	sp, #12
    4d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d60:	00004b79 	.word	0x00004b79
    4d64:	0000592d 	.word	0x0000592d
    4d68:	00006741 	.word	0x00006741
    4d6c:	00001b57 	.word	0x00001b57
    4d70:	00006701 	.word	0x00006701
    4d74:	00001b58 	.word	0x00001b58
    4d78:	20000001 	.word	0x20000001

00004d7c <release_sb_btn>:
{
	port_pin_set_output_level(btn,false);
}

void release_sb_btn(uint8_t btn)
{
    4d7c:	b580      	push	{r7, lr}
    4d7e:	b082      	sub	sp, #8
    4d80:	af00      	add	r7, sp, #0
    4d82:	0002      	movs	r2, r0
    4d84:	1dfb      	adds	r3, r7, #7
    4d86:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(btn,true);
    4d88:	1dfb      	adds	r3, r7, #7
    4d8a:	781b      	ldrb	r3, [r3, #0]
    4d8c:	2101      	movs	r1, #1
    4d8e:	0018      	movs	r0, r3
    4d90:	4b02      	ldr	r3, [pc, #8]	; (4d9c <release_sb_btn+0x20>)
    4d92:	4798      	blx	r3
}
    4d94:	46c0      	nop			; (mov r8, r8)
    4d96:	46bd      	mov	sp, r7
    4d98:	b002      	add	sp, #8
    4d9a:	bd80      	pop	{r7, pc}
    4d9c:	00004b79 	.word	0x00004b79

00004da0 <sounds_reset>:
{
	mcp23017_set_pins(MTH_ADDR,0x00,0x00);
}

void sounds_reset(void)
{
    4da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4da2:	b083      	sub	sp, #12
    4da4:	af00      	add	r7, sp, #0
	port_pin_set_output_level(SB_PIN_RESET,false);
    4da6:	2100      	movs	r1, #0
    4da8:	201c      	movs	r0, #28
    4daa:	4b35      	ldr	r3, [pc, #212]	; (4e80 <sounds_reset+0xe0>)
    4dac:	4798      	blx	r3
	delay_ms(50);
    4dae:	2000      	movs	r0, #0
    4db0:	4b34      	ldr	r3, [pc, #208]	; (4e84 <sounds_reset+0xe4>)
    4db2:	4798      	blx	r3
    4db4:	0003      	movs	r3, r0
    4db6:	603b      	str	r3, [r7, #0]
    4db8:	2300      	movs	r3, #0
    4dba:	607b      	str	r3, [r7, #4]
    4dbc:	4c32      	ldr	r4, [pc, #200]	; (4e88 <sounds_reset+0xe8>)
    4dbe:	2232      	movs	r2, #50	; 0x32
    4dc0:	2300      	movs	r3, #0
    4dc2:	6838      	ldr	r0, [r7, #0]
    4dc4:	6879      	ldr	r1, [r7, #4]
    4dc6:	47a0      	blx	r4
    4dc8:	0003      	movs	r3, r0
    4dca:	000c      	movs	r4, r1
    4dcc:	0019      	movs	r1, r3
    4dce:	0022      	movs	r2, r4
    4dd0:	4b2e      	ldr	r3, [pc, #184]	; (4e8c <sounds_reset+0xec>)
    4dd2:	2400      	movs	r4, #0
    4dd4:	18c9      	adds	r1, r1, r3
    4dd6:	4162      	adcs	r2, r4
    4dd8:	0008      	movs	r0, r1
    4dda:	0011      	movs	r1, r2
    4ddc:	4c2c      	ldr	r4, [pc, #176]	; (4e90 <sounds_reset+0xf0>)
    4dde:	4a2d      	ldr	r2, [pc, #180]	; (4e94 <sounds_reset+0xf4>)
    4de0:	2300      	movs	r3, #0
    4de2:	47a0      	blx	r4
    4de4:	0003      	movs	r3, r0
    4de6:	000c      	movs	r4, r1
    4de8:	0018      	movs	r0, r3
    4dea:	4b2b      	ldr	r3, [pc, #172]	; (4e98 <sounds_reset+0xf8>)
    4dec:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_RESET,true);
    4dee:	2101      	movs	r1, #1
    4df0:	201c      	movs	r0, #28
    4df2:	4b23      	ldr	r3, [pc, #140]	; (4e80 <sounds_reset+0xe0>)
    4df4:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN00);
    4df6:	200b      	movs	r0, #11
    4df8:	4b28      	ldr	r3, [pc, #160]	; (4e9c <sounds_reset+0xfc>)
    4dfa:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN01);
    4dfc:	200c      	movs	r0, #12
    4dfe:	4b27      	ldr	r3, [pc, #156]	; (4e9c <sounds_reset+0xfc>)
    4e00:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN02);
    4e02:	200d      	movs	r0, #13
    4e04:	4b25      	ldr	r3, [pc, #148]	; (4e9c <sounds_reset+0xfc>)
    4e06:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN03);
    4e08:	200e      	movs	r0, #14
    4e0a:	4b24      	ldr	r3, [pc, #144]	; (4e9c <sounds_reset+0xfc>)
    4e0c:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN04);
    4e0e:	200f      	movs	r0, #15
    4e10:	4b22      	ldr	r3, [pc, #136]	; (4e9c <sounds_reset+0xfc>)
    4e12:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN05);
    4e14:	2010      	movs	r0, #16
    4e16:	4b21      	ldr	r3, [pc, #132]	; (4e9c <sounds_reset+0xfc>)
    4e18:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN06);
    4e1a:	2011      	movs	r0, #17
    4e1c:	4b1f      	ldr	r3, [pc, #124]	; (4e9c <sounds_reset+0xfc>)
    4e1e:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN07);
    4e20:	2012      	movs	r0, #18
    4e22:	4b1e      	ldr	r3, [pc, #120]	; (4e9c <sounds_reset+0xfc>)
    4e24:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN08);
    4e26:	2013      	movs	r0, #19
    4e28:	4b1c      	ldr	r3, [pc, #112]	; (4e9c <sounds_reset+0xfc>)
    4e2a:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN09);
    4e2c:	2014      	movs	r0, #20
    4e2e:	4b1b      	ldr	r3, [pc, #108]	; (4e9c <sounds_reset+0xfc>)
    4e30:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN10);
    4e32:	2015      	movs	r0, #21
    4e34:	4b19      	ldr	r3, [pc, #100]	; (4e9c <sounds_reset+0xfc>)
    4e36:	4798      	blx	r3
	delay_ms(150);
    4e38:	2000      	movs	r0, #0
    4e3a:	4b12      	ldr	r3, [pc, #72]	; (4e84 <sounds_reset+0xe4>)
    4e3c:	4798      	blx	r3
    4e3e:	0003      	movs	r3, r0
    4e40:	001d      	movs	r5, r3
    4e42:	2300      	movs	r3, #0
    4e44:	001e      	movs	r6, r3
    4e46:	4c10      	ldr	r4, [pc, #64]	; (4e88 <sounds_reset+0xe8>)
    4e48:	2296      	movs	r2, #150	; 0x96
    4e4a:	2300      	movs	r3, #0
    4e4c:	0028      	movs	r0, r5
    4e4e:	0031      	movs	r1, r6
    4e50:	47a0      	blx	r4
    4e52:	0003      	movs	r3, r0
    4e54:	000c      	movs	r4, r1
    4e56:	0019      	movs	r1, r3
    4e58:	0022      	movs	r2, r4
    4e5a:	4b0c      	ldr	r3, [pc, #48]	; (4e8c <sounds_reset+0xec>)
    4e5c:	2400      	movs	r4, #0
    4e5e:	18c9      	adds	r1, r1, r3
    4e60:	4162      	adcs	r2, r4
    4e62:	0008      	movs	r0, r1
    4e64:	0011      	movs	r1, r2
    4e66:	4c0a      	ldr	r4, [pc, #40]	; (4e90 <sounds_reset+0xf0>)
    4e68:	4a0a      	ldr	r2, [pc, #40]	; (4e94 <sounds_reset+0xf4>)
    4e6a:	2300      	movs	r3, #0
    4e6c:	47a0      	blx	r4
    4e6e:	0003      	movs	r3, r0
    4e70:	000c      	movs	r4, r1
    4e72:	0018      	movs	r0, r3
    4e74:	4b08      	ldr	r3, [pc, #32]	; (4e98 <sounds_reset+0xf8>)
    4e76:	4798      	blx	r3

    4e78:	46c0      	nop			; (mov r8, r8)
    4e7a:	46bd      	mov	sp, r7
    4e7c:	b003      	add	sp, #12
    4e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e80:	00004b79 	.word	0x00004b79
    4e84:	0000592d 	.word	0x0000592d
    4e88:	00006741 	.word	0x00006741
    4e8c:	00001b57 	.word	0x00001b57
    4e90:	00006701 	.word	0x00006701
    4e94:	00001b58 	.word	0x00001b58
    4e98:	20000001 	.word	0x20000001
    4e9c:	00004d7d 	.word	0x00004d7d

00004ea0 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    4ea0:	b580      	push	{r7, lr}
    4ea2:	b082      	sub	sp, #8
    4ea4:	af00      	add	r7, sp, #0
    4ea6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4ea8:	687b      	ldr	r3, [r7, #4]
    4eaa:	2280      	movs	r2, #128	; 0x80
    4eac:	05d2      	lsls	r2, r2, #23
    4eae:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4eb0:	687b      	ldr	r3, [r7, #4]
    4eb2:	2200      	movs	r2, #0
    4eb4:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    4eb6:	687b      	ldr	r3, [r7, #4]
    4eb8:	22ff      	movs	r2, #255	; 0xff
    4eba:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    4ebc:	687b      	ldr	r3, [r7, #4]
    4ebe:	2200      	movs	r2, #0
    4ec0:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4ec2:	687b      	ldr	r3, [r7, #4]
    4ec4:	2200      	movs	r2, #0
    4ec6:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    4ec8:	687b      	ldr	r3, [r7, #4]
    4eca:	2296      	movs	r2, #150	; 0x96
    4ecc:	0192      	lsls	r2, r2, #6
    4ece:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    4ed0:	687b      	ldr	r3, [r7, #4]
    4ed2:	2224      	movs	r2, #36	; 0x24
    4ed4:	2101      	movs	r1, #1
    4ed6:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    4ed8:	687b      	ldr	r3, [r7, #4]
    4eda:	2225      	movs	r2, #37	; 0x25
    4edc:	2101      	movs	r1, #1
    4ede:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    4ee0:	687b      	ldr	r3, [r7, #4]
    4ee2:	2226      	movs	r2, #38	; 0x26
    4ee4:	2100      	movs	r1, #0
    4ee6:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    4ee8:	687b      	ldr	r3, [r7, #4]
    4eea:	2227      	movs	r2, #39	; 0x27
    4eec:	2100      	movs	r1, #0
    4eee:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    4ef0:	687b      	ldr	r3, [r7, #4]
    4ef2:	2200      	movs	r2, #0
    4ef4:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    4ef6:	687b      	ldr	r3, [r7, #4]
    4ef8:	2288      	movs	r2, #136	; 0x88
    4efa:	0352      	lsls	r2, r2, #13
    4efc:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    4efe:	687b      	ldr	r3, [r7, #4]
    4f00:	222c      	movs	r2, #44	; 0x2c
    4f02:	2100      	movs	r1, #0
    4f04:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    4f06:	687b      	ldr	r3, [r7, #4]
    4f08:	222d      	movs	r2, #45	; 0x2d
    4f0a:	2100      	movs	r1, #0
    4f0c:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    4f0e:	687b      	ldr	r3, [r7, #4]
    4f10:	2200      	movs	r2, #0
    4f12:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    4f14:	687b      	ldr	r3, [r7, #4]
    4f16:	2200      	movs	r2, #0
    4f18:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    4f1a:	687b      	ldr	r3, [r7, #4]
    4f1c:	2200      	movs	r2, #0
    4f1e:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    4f20:	687b      	ldr	r3, [r7, #4]
    4f22:	2200      	movs	r2, #0
    4f24:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4f26:	687b      	ldr	r3, [r7, #4]
    4f28:	2200      	movs	r2, #0
    4f2a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4f2c:	687b      	ldr	r3, [r7, #4]
    4f2e:	2200      	movs	r2, #0
    4f30:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4f32:	687b      	ldr	r3, [r7, #4]
    4f34:	2200      	movs	r2, #0
    4f36:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    4f38:	687b      	ldr	r3, [r7, #4]
    4f3a:	2200      	movs	r2, #0
    4f3c:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    4f3e:	687b      	ldr	r3, [r7, #4]
    4f40:	2200      	movs	r2, #0
    4f42:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    4f44:	687b      	ldr	r3, [r7, #4]
    4f46:	2200      	movs	r2, #0
    4f48:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    4f4a:	687b      	ldr	r3, [r7, #4]
    4f4c:	2213      	movs	r2, #19
    4f4e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    4f50:	687b      	ldr	r3, [r7, #4]
    4f52:	2200      	movs	r2, #0
    4f54:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    4f56:	46c0      	nop			; (mov r8, r8)
    4f58:	46bd      	mov	sp, r7
    4f5a:	b002      	add	sp, #8
    4f5c:	bd80      	pop	{r7, pc}
    4f5e:	46c0      	nop			; (mov r8, r8)

00004f60 <uart_init>:


volatile uint8_t uart_rx_buffer[MAX_RX_BUFFER_LENGTH];

void uart_init(void)
{		
    4f60:	b580      	push	{r7, lr}
    4f62:	b092      	sub	sp, #72	; 0x48
    4f64:	af00      	add	r7, sp, #0
 	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    4f66:	1d3b      	adds	r3, r7, #4
    4f68:	0018      	movs	r0, r3
    4f6a:	4b49      	ldr	r3, [pc, #292]	; (5090 <uart_init+0x130>)
    4f6c:	4798      	blx	r3
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    4f6e:	1d3b      	adds	r3, r7, #4
    4f70:	2280      	movs	r2, #128	; 0x80
    4f72:	0352      	lsls	r2, r2, #13
    4f74:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    4f76:	1d3b      	adds	r3, r7, #4
    4f78:	4a46      	ldr	r2, [pc, #280]	; (5094 <uart_init+0x134>)
    4f7a:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    4f7c:	1d3b      	adds	r3, r7, #4
    4f7e:	4a46      	ldr	r2, [pc, #280]	; (5098 <uart_init+0x138>)
    4f80:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    4f82:	1d3b      	adds	r3, r7, #4
    4f84:	2201      	movs	r2, #1
    4f86:	4252      	negs	r2, r2
    4f88:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    4f8a:	1d3b      	adds	r3, r7, #4
    4f8c:	2201      	movs	r2, #1
    4f8e:	4252      	negs	r2, r2
    4f90:	63da      	str	r2, [r3, #60]	; 0x3c
	//usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
	usart_conf.generator_source = GCLK_GENERATOR_3;
    4f92:	1d3b      	adds	r3, r7, #4
    4f94:	222d      	movs	r2, #45	; 0x2d
    4f96:	2103      	movs	r1, #3
    4f98:	5499      	strb	r1, [r3, r2]
	//usart_conf.stopbits = USART_STOPBITS_1;
	
		// Start the Software Reset and wait for it to finish
	CONF_STDIO_USART_MODULE->USART.CTRLA.bit.SWRST = 1 ;
    4f9a:	4a40      	ldr	r2, [pc, #256]	; (509c <uart_init+0x13c>)
    4f9c:	6813      	ldr	r3, [r2, #0]
    4f9e:	2101      	movs	r1, #1
    4fa0:	430b      	orrs	r3, r1
    4fa2:	6013      	str	r3, [r2, #0]
	while ( CONF_STDIO_USART_MODULE->USART.CTRLA.bit.SWRST || CONF_STDIO_USART_MODULE->USART.SYNCBUSY.bit.SWRST );
    4fa4:	46c0      	nop			; (mov r8, r8)
    4fa6:	4b3d      	ldr	r3, [pc, #244]	; (509c <uart_init+0x13c>)
    4fa8:	681b      	ldr	r3, [r3, #0]
    4faa:	07db      	lsls	r3, r3, #31
    4fac:	0fdb      	lsrs	r3, r3, #31
    4fae:	b2db      	uxtb	r3, r3
    4fb0:	2b00      	cmp	r3, #0
    4fb2:	d1f8      	bne.n	4fa6 <uart_init+0x46>
    4fb4:	4b39      	ldr	r3, [pc, #228]	; (509c <uart_init+0x13c>)
    4fb6:	69db      	ldr	r3, [r3, #28]
    4fb8:	07db      	lsls	r3, r3, #31
    4fba:	0fdb      	lsrs	r3, r3, #31
    4fbc:	b2db      	uxtb	r3, r3
    4fbe:	2b00      	cmp	r3, #0
    4fc0:	d1f1      	bne.n	4fa6 <uart_init+0x46>
	
	// Turn on peripheral clock for SERCOM being used
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;
    4fc2:	4b37      	ldr	r3, [pc, #220]	; (50a0 <uart_init+0x140>)
    4fc4:	4a36      	ldr	r2, [pc, #216]	; (50a0 <uart_init+0x140>)
    4fc6:	6a12      	ldr	r2, [r2, #32]
    4fc8:	2180      	movs	r1, #128	; 0x80
    4fca:	430a      	orrs	r2, r1
    4fcc:	621a      	str	r2, [r3, #32]

	//Setting clock
	GCLK->CLKCTRL.reg =
    4fce:	4b35      	ldr	r3, [pc, #212]	; (50a4 <uart_init+0x144>)
    4fd0:	4a35      	ldr	r2, [pc, #212]	; (50a8 <uart_init+0x148>)
    4fd2:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID( (0x19U) )	|	// connected  SERCOMx to
	GCLK_CLKCTRL_GEN_GCLK3		|	// generic Clock Generator 0
	GCLK_CLKCTRL_CLKEN;			// and enable it

	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY ); // Wait for synchronization
    4fd4:	46c0      	nop			; (mov r8, r8)
    4fd6:	4b33      	ldr	r3, [pc, #204]	; (50a4 <uart_init+0x144>)
    4fd8:	785b      	ldrb	r3, [r3, #1]
    4fda:	b2db      	uxtb	r3, r3
    4fdc:	b25b      	sxtb	r3, r3
    4fde:	2b00      	cmp	r3, #0
    4fe0:	dbf9      	blt.n	4fd6 <uart_init+0x76>
	
	
	PORT->Group[1].DIRCLR.reg = PORT_PB03;	// RX as input
    4fe2:	4a32      	ldr	r2, [pc, #200]	; (50ac <uart_init+0x14c>)
    4fe4:	2384      	movs	r3, #132	; 0x84
    4fe6:	2108      	movs	r1, #8
    4fe8:	50d1      	str	r1, [r2, r3]
	
	PORT->Group[1].DIRSET.reg = PORT_PB02;	// TX as output
    4fea:	4a30      	ldr	r2, [pc, #192]	; (50ac <uart_init+0x14c>)
    4fec:	2388      	movs	r3, #136	; 0x88
    4fee:	2104      	movs	r1, #4
    4ff0:	50d1      	str	r1, [r2, r3]
	PORT->Group[1].OUTSET.reg = PORT_PB02;	// TX idle state is high
    4ff2:	4a2e      	ldr	r2, [pc, #184]	; (50ac <uart_init+0x14c>)
    4ff4:	2398      	movs	r3, #152	; 0x98
    4ff6:	2104      	movs	r1, #4
    4ff8:	50d1      	str	r1, [r2, r3]

	// set port multiplexer for peripheral TX
	// =======================================
	uint32_t temp = (PORT->Group[1].PMUX[2>>1].reg) & PORT_PMUX_PMUXO( 3 );
    4ffa:	4a2c      	ldr	r2, [pc, #176]	; (50ac <uart_init+0x14c>)
    4ffc:	23b1      	movs	r3, #177	; 0xb1
    4ffe:	5cd3      	ldrb	r3, [r2, r3]
    5000:	b2db      	uxtb	r3, r3
    5002:	001a      	movs	r2, r3
    5004:	2330      	movs	r3, #48	; 0x30
    5006:	4013      	ands	r3, r2
    5008:	647b      	str	r3, [r7, #68]	; 0x44
	PORT->Group[1].PMUX[2>>1].reg = temp | PORT_PMUX_PMUXE( 3 );
    500a:	4a28      	ldr	r2, [pc, #160]	; (50ac <uart_init+0x14c>)
    500c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    500e:	b2db      	uxtb	r3, r3
    5010:	2103      	movs	r1, #3
    5012:	430b      	orrs	r3, r1
    5014:	b2d9      	uxtb	r1, r3
    5016:	23b1      	movs	r3, #177	; 0xb1
    5018:	54d1      	strb	r1, [r2, r3]
	
	PORT->Group[1].PINCFG[2].reg = PORT_PINCFG_PMUXEN ; // Enable port mux
    501a:	4a24      	ldr	r2, [pc, #144]	; (50ac <uart_init+0x14c>)
    501c:	23c2      	movs	r3, #194	; 0xc2
    501e:	2101      	movs	r1, #1
    5020:	54d1      	strb	r1, [r2, r3]
	temp = (PORT->Group[1].PMUX[3>>1].reg) & PORT_PMUX_PMUXO( 3 );
    5022:	4a22      	ldr	r2, [pc, #136]	; (50ac <uart_init+0x14c>)
    5024:	23b1      	movs	r3, #177	; 0xb1
    5026:	5cd3      	ldrb	r3, [r2, r3]
    5028:	b2db      	uxtb	r3, r3
    502a:	001a      	movs	r2, r3
    502c:	2330      	movs	r3, #48	; 0x30
    502e:	4013      	ands	r3, r2
    5030:	647b      	str	r3, [r7, #68]	; 0x44
	PORT->Group[1].PMUX[3>>1].reg = temp | PORT_PMUX_PMUXE( 3 );
    5032:	4a1e      	ldr	r2, [pc, #120]	; (50ac <uart_init+0x14c>)
    5034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5036:	b2db      	uxtb	r3, r3
    5038:	2103      	movs	r1, #3
    503a:	430b      	orrs	r3, r1
    503c:	b2d9      	uxtb	r1, r3
    503e:	23b1      	movs	r3, #177	; 0xb1
    5040:	54d1      	strb	r1, [r2, r3]
	PORT->Group[1].PINCFG[3].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN; // Enable port mux
    5042:	4a1a      	ldr	r2, [pc, #104]	; (50ac <uart_init+0x14c>)
    5044:	23c3      	movs	r3, #195	; 0xc3
    5046:	2103      	movs	r1, #3
    5048:	54d1      	strb	r1, [r2, r3]
	
		
	CONF_STDIO_USART_MODULE->USART.CTRLA.reg =
    504a:	4b14      	ldr	r3, [pc, #80]	; (509c <uart_init+0x13c>)
    504c:	4a18      	ldr	r2, [pc, #96]	; (50b0 <uart_init+0x150>)
    504e:	601a      	str	r2, [r3, #0]
	
	
	// Asynchronous arithmetic mode
	// 65535 * ( 1 - sampleRateValue * baudrate / SystemCoreClock);
	// 65535 - 65535 * (sampleRateValue * baudrate / SystemCoreClock));
	CONF_STDIO_USART_MODULE->USART.BAUD.reg = 65535.0f * ( 1.0f - (16.0 * (float)(BAUDRATE)) / (float)(SYSTEM_CLK));
    5050:	4b12      	ldr	r3, [pc, #72]	; (509c <uart_init+0x13c>)
    5052:	4a18      	ldr	r2, [pc, #96]	; (50b4 <uart_init+0x154>)
    5054:	819a      	strh	r2, [r3, #12]
	//BLE_UART_SERCOM->USART.BAUD.bit.BAUD = 9600;
	
	CONF_STDIO_USART_MODULE->USART.CTRLB.reg =
    5056:	4b11      	ldr	r3, [pc, #68]	; (509c <uart_init+0x13c>)
    5058:	22c0      	movs	r2, #192	; 0xc0
    505a:	0292      	lsls	r2, r2, #10
    505c:	605a      	str	r2, [r3, #4]
	SERCOM_USART_CTRLB_CHSIZE(0)	|	// 8 bit character size
	SERCOM_USART_CTRLB_TXEN			|	// Enable Transmit
	SERCOM_USART_CTRLB_RXEN;			// Enable Receive

	// Get Synced
	while (CONF_STDIO_USART_MODULE->USART.SYNCBUSY.bit.CTRLB);
    505e:	46c0      	nop			; (mov r8, r8)
    5060:	4b0e      	ldr	r3, [pc, #56]	; (509c <uart_init+0x13c>)
    5062:	69db      	ldr	r3, [r3, #28]
    5064:	075b      	lsls	r3, r3, #29
    5066:	0fdb      	lsrs	r3, r3, #31
    5068:	b2db      	uxtb	r3, r3
    506a:	2b00      	cmp	r3, #0
    506c:	d1f8      	bne.n	5060 <uart_init+0x100>
	/*// Enable interrupts
	NVIC_EnableIRQ(SERCOM2_IRQn);
	NVIC_SetPriority(SERCOM2_IRQn,1);*/
	
	// enable the peripheral block
	CONF_STDIO_USART_MODULE->USART.CTRLA.bit.ENABLE = 0x1u;
    506e:	4a0b      	ldr	r2, [pc, #44]	; (509c <uart_init+0x13c>)
    5070:	6813      	ldr	r3, [r2, #0]
    5072:	2102      	movs	r1, #2
    5074:	430b      	orrs	r3, r1
    5076:	6013      	str	r3, [r2, #0]
	
	// Wait for sercom to enable
	while(CONF_STDIO_USART_MODULE->USART.SYNCBUSY.bit.ENABLE);
    5078:	46c0      	nop			; (mov r8, r8)
    507a:	4b08      	ldr	r3, [pc, #32]	; (509c <uart_init+0x13c>)
    507c:	69db      	ldr	r3, [r3, #28]
    507e:	079b      	lsls	r3, r3, #30
    5080:	0fdb      	lsrs	r3, r3, #31
    5082:	b2db      	uxtb	r3, r3
    5084:	2b00      	cmp	r3, #0
    5086:	d1f8      	bne.n	507a <uart_init+0x11a>
	
}
    5088:	46c0      	nop			; (mov r8, r8)
    508a:	46bd      	mov	sp, r7
    508c:	b012      	add	sp, #72	; 0x48
    508e:	bd80      	pop	{r7, pc}
    5090:	00004ea1 	.word	0x00004ea1
    5094:	00220003 	.word	0x00220003
    5098:	00230003 	.word	0x00230003
    509c:	42001c00 	.word	0x42001c00
    50a0:	40000400 	.word	0x40000400
    50a4:	40000c00 	.word	0x40000c00
    50a8:	00004319 	.word	0x00004319
    50ac:	41004400 	.word	0x41004400
    50b0:	40100084 	.word	0x40100084
    50b4:	ffffc503 	.word	0xffffc503

000050b8 <uart_write>:
{
	usart_read_buffer_job(&uart_instance,(uint8_t *)uart_rx_buffer, MAX_RX_BUFFER_LENGTH);
}

void uart_write(uint8_t* data)
{
    50b8:	b580      	push	{r7, lr}
    50ba:	b084      	sub	sp, #16
    50bc:	af00      	add	r7, sp, #0
    50be:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
    50c0:	2300      	movs	r3, #0
    50c2:	60fb      	str	r3, [r7, #12]
	while(data[i] != '\0')
    50c4:	e00f      	b.n	50e6 <uart_write+0x2e>
	{
		if(CONF_STDIO_USART_MODULE->USART.INTFLAG.bit.DRE == 1)
    50c6:	4b0d      	ldr	r3, [pc, #52]	; (50fc <uart_write+0x44>)
    50c8:	7e1b      	ldrb	r3, [r3, #24]
    50ca:	07db      	lsls	r3, r3, #31
    50cc:	0fdb      	lsrs	r3, r3, #31
    50ce:	b2db      	uxtb	r3, r3
    50d0:	2b01      	cmp	r3, #1
    50d2:	d108      	bne.n	50e6 <uart_write+0x2e>
		{
			CONF_STDIO_USART_MODULE->USART.DATA.reg = (uint16_t)data[i++];
    50d4:	4909      	ldr	r1, [pc, #36]	; (50fc <uart_write+0x44>)
    50d6:	68fb      	ldr	r3, [r7, #12]
    50d8:	1c5a      	adds	r2, r3, #1
    50da:	60fa      	str	r2, [r7, #12]
    50dc:	687a      	ldr	r2, [r7, #4]
    50de:	18d3      	adds	r3, r2, r3
    50e0:	781b      	ldrb	r3, [r3, #0]
    50e2:	b29b      	uxth	r3, r3
    50e4:	850b      	strh	r3, [r1, #40]	; 0x28
}

void uart_write(uint8_t* data)
{
	uint32_t i = 0;
	while(data[i] != '\0')
    50e6:	687a      	ldr	r2, [r7, #4]
    50e8:	68fb      	ldr	r3, [r7, #12]
    50ea:	18d3      	adds	r3, r2, r3
    50ec:	781b      	ldrb	r3, [r3, #0]
    50ee:	2b00      	cmp	r3, #0
    50f0:	d1e9      	bne.n	50c6 <uart_write+0xe>
		if(CONF_STDIO_USART_MODULE->USART.INTFLAG.bit.DRE == 1)
		{
			CONF_STDIO_USART_MODULE->USART.DATA.reg = (uint16_t)data[i++];
		}
	}
}
    50f2:	46c0      	nop			; (mov r8, r8)
    50f4:	46bd      	mov	sp, r7
    50f6:	b004      	add	sp, #16
    50f8:	bd80      	pop	{r7, pc}
    50fa:	46c0      	nop			; (mov r8, r8)
    50fc:	42001c00 	.word	0x42001c00

00005100 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    5100:	b580      	push	{r7, lr}
    5102:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    5104:	46c0      	nop			; (mov r8, r8)
    5106:	46bd      	mov	sp, r7
    5108:	bd80      	pop	{r7, pc}
    510a:	46c0      	nop			; (mov r8, r8)

0000510c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    510c:	b580      	push	{r7, lr}
    510e:	b082      	sub	sp, #8
    5110:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    5112:	4b10      	ldr	r3, [pc, #64]	; (5154 <cpu_irq_enter_critical+0x48>)
    5114:	681b      	ldr	r3, [r3, #0]
    5116:	2b00      	cmp	r3, #0
    5118:	d112      	bne.n	5140 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    511a:	f3ef 8310 	mrs	r3, PRIMASK
    511e:	607b      	str	r3, [r7, #4]
  return(result);
    5120:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    5122:	2b00      	cmp	r3, #0
    5124:	d109      	bne.n	513a <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5126:	b672      	cpsid	i
    5128:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    512c:	4b0a      	ldr	r3, [pc, #40]	; (5158 <cpu_irq_enter_critical+0x4c>)
    512e:	2200      	movs	r2, #0
    5130:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    5132:	4b0a      	ldr	r3, [pc, #40]	; (515c <cpu_irq_enter_critical+0x50>)
    5134:	2201      	movs	r2, #1
    5136:	701a      	strb	r2, [r3, #0]
    5138:	e002      	b.n	5140 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    513a:	4b08      	ldr	r3, [pc, #32]	; (515c <cpu_irq_enter_critical+0x50>)
    513c:	2200      	movs	r2, #0
    513e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    5140:	4b04      	ldr	r3, [pc, #16]	; (5154 <cpu_irq_enter_critical+0x48>)
    5142:	681b      	ldr	r3, [r3, #0]
    5144:	1c5a      	adds	r2, r3, #1
    5146:	4b03      	ldr	r3, [pc, #12]	; (5154 <cpu_irq_enter_critical+0x48>)
    5148:	601a      	str	r2, [r3, #0]
}
    514a:	46c0      	nop			; (mov r8, r8)
    514c:	46bd      	mov	sp, r7
    514e:	b002      	add	sp, #8
    5150:	bd80      	pop	{r7, pc}
    5152:	46c0      	nop			; (mov r8, r8)
    5154:	20000124 	.word	0x20000124
    5158:	20000091 	.word	0x20000091
    515c:	20000128 	.word	0x20000128

00005160 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    5160:	b580      	push	{r7, lr}
    5162:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    5164:	4b0b      	ldr	r3, [pc, #44]	; (5194 <cpu_irq_leave_critical+0x34>)
    5166:	681b      	ldr	r3, [r3, #0]
    5168:	1e5a      	subs	r2, r3, #1
    516a:	4b0a      	ldr	r3, [pc, #40]	; (5194 <cpu_irq_leave_critical+0x34>)
    516c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    516e:	4b09      	ldr	r3, [pc, #36]	; (5194 <cpu_irq_leave_critical+0x34>)
    5170:	681b      	ldr	r3, [r3, #0]
    5172:	2b00      	cmp	r3, #0
    5174:	d10a      	bne.n	518c <cpu_irq_leave_critical+0x2c>
    5176:	4b08      	ldr	r3, [pc, #32]	; (5198 <cpu_irq_leave_critical+0x38>)
    5178:	781b      	ldrb	r3, [r3, #0]
    517a:	b2db      	uxtb	r3, r3
    517c:	2b00      	cmp	r3, #0
    517e:	d005      	beq.n	518c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    5180:	4b06      	ldr	r3, [pc, #24]	; (519c <cpu_irq_leave_critical+0x3c>)
    5182:	2201      	movs	r2, #1
    5184:	701a      	strb	r2, [r3, #0]
    5186:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    518a:	b662      	cpsie	i
	}
}
    518c:	46c0      	nop			; (mov r8, r8)
    518e:	46bd      	mov	sp, r7
    5190:	bd80      	pop	{r7, pc}
    5192:	46c0      	nop			; (mov r8, r8)
    5194:	20000124 	.word	0x20000124
    5198:	20000128 	.word	0x20000128
    519c:	20000091 	.word	0x20000091

000051a0 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    51a0:	b580      	push	{r7, lr}
    51a2:	b082      	sub	sp, #8
    51a4:	af00      	add	r7, sp, #0
    51a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    51a8:	687b      	ldr	r3, [r7, #4]
    51aa:	2201      	movs	r2, #1
    51ac:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    51ae:	687b      	ldr	r3, [r7, #4]
    51b0:	2200      	movs	r2, #0
    51b2:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    51b4:	687b      	ldr	r3, [r7, #4]
    51b6:	2206      	movs	r2, #6
    51b8:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    51ba:	687b      	ldr	r3, [r7, #4]
    51bc:	2200      	movs	r2, #0
    51be:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    51c0:	687b      	ldr	r3, [r7, #4]
    51c2:	2200      	movs	r2, #0
    51c4:	725a      	strb	r2, [r3, #9]
}
    51c6:	46c0      	nop			; (mov r8, r8)
    51c8:	46bd      	mov	sp, r7
    51ca:	b002      	add	sp, #8
    51cc:	bd80      	pop	{r7, pc}
    51ce:	46c0      	nop			; (mov r8, r8)

000051d0 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    51d0:	b580      	push	{r7, lr}
    51d2:	b082      	sub	sp, #8
    51d4:	af00      	add	r7, sp, #0
    51d6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	2203      	movs	r2, #3
    51dc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    51de:	687b      	ldr	r3, [r7, #4]
    51e0:	2200      	movs	r2, #0
    51e2:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    51e4:	687b      	ldr	r3, [r7, #4]
    51e6:	2201      	movs	r2, #1
    51e8:	709a      	strb	r2, [r3, #2]
}
    51ea:	46c0      	nop			; (mov r8, r8)
    51ec:	46bd      	mov	sp, r7
    51ee:	b002      	add	sp, #8
    51f0:	bd80      	pop	{r7, pc}
    51f2:	46c0      	nop			; (mov r8, r8)

000051f4 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    51f4:	b580      	push	{r7, lr}
    51f6:	b082      	sub	sp, #8
    51f8:	af00      	add	r7, sp, #0
    51fa:	0002      	movs	r2, r0
    51fc:	1dfb      	adds	r3, r7, #7
    51fe:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    5200:	4a03      	ldr	r2, [pc, #12]	; (5210 <system_cpu_clock_set_divider+0x1c>)
    5202:	1dfb      	adds	r3, r7, #7
    5204:	781b      	ldrb	r3, [r3, #0]
    5206:	7213      	strb	r3, [r2, #8]
}
    5208:	46c0      	nop			; (mov r8, r8)
    520a:	46bd      	mov	sp, r7
    520c:	b002      	add	sp, #8
    520e:	bd80      	pop	{r7, pc}
    5210:	40000400 	.word	0x40000400

00005214 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    5214:	b580      	push	{r7, lr}
    5216:	b082      	sub	sp, #8
    5218:	af00      	add	r7, sp, #0
    521a:	0002      	movs	r2, r0
    521c:	1dfb      	adds	r3, r7, #7
    521e:	701a      	strb	r2, [r3, #0]
    5220:	1dbb      	adds	r3, r7, #6
    5222:	1c0a      	adds	r2, r1, #0
    5224:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5226:	1dfb      	adds	r3, r7, #7
    5228:	781b      	ldrb	r3, [r3, #0]
    522a:	2b01      	cmp	r3, #1
    522c:	d008      	beq.n	5240 <system_apb_clock_set_divider+0x2c>
    522e:	2b02      	cmp	r3, #2
    5230:	d00b      	beq.n	524a <system_apb_clock_set_divider+0x36>
    5232:	2b00      	cmp	r3, #0
    5234:	d10e      	bne.n	5254 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    5236:	4a0b      	ldr	r2, [pc, #44]	; (5264 <system_apb_clock_set_divider+0x50>)
    5238:	1dbb      	adds	r3, r7, #6
    523a:	781b      	ldrb	r3, [r3, #0]
    523c:	7253      	strb	r3, [r2, #9]
			break;
    523e:	e00b      	b.n	5258 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    5240:	4a08      	ldr	r2, [pc, #32]	; (5264 <system_apb_clock_set_divider+0x50>)
    5242:	1dbb      	adds	r3, r7, #6
    5244:	781b      	ldrb	r3, [r3, #0]
    5246:	7293      	strb	r3, [r2, #10]
			break;
    5248:	e006      	b.n	5258 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    524a:	4a06      	ldr	r2, [pc, #24]	; (5264 <system_apb_clock_set_divider+0x50>)
    524c:	1dbb      	adds	r3, r7, #6
    524e:	781b      	ldrb	r3, [r3, #0]
    5250:	72d3      	strb	r3, [r2, #11]
			break;
    5252:	e001      	b.n	5258 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5254:	2317      	movs	r3, #23
    5256:	e000      	b.n	525a <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    5258:	2300      	movs	r3, #0
}
    525a:	0018      	movs	r0, r3
    525c:	46bd      	mov	sp, r7
    525e:	b002      	add	sp, #8
    5260:	bd80      	pop	{r7, pc}
    5262:	46c0      	nop			; (mov r8, r8)
    5264:	40000400 	.word	0x40000400

00005268 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    5268:	b580      	push	{r7, lr}
    526a:	b082      	sub	sp, #8
    526c:	af00      	add	r7, sp, #0
    526e:	0002      	movs	r2, r0
    5270:	1dfb      	adds	r3, r7, #7
    5272:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5274:	4a08      	ldr	r2, [pc, #32]	; (5298 <system_flash_set_waitstates+0x30>)
    5276:	1dfb      	adds	r3, r7, #7
    5278:	781b      	ldrb	r3, [r3, #0]
    527a:	210f      	movs	r1, #15
    527c:	400b      	ands	r3, r1
    527e:	b2d9      	uxtb	r1, r3
    5280:	6853      	ldr	r3, [r2, #4]
    5282:	200f      	movs	r0, #15
    5284:	4001      	ands	r1, r0
    5286:	0049      	lsls	r1, r1, #1
    5288:	201e      	movs	r0, #30
    528a:	4383      	bics	r3, r0
    528c:	430b      	orrs	r3, r1
    528e:	6053      	str	r3, [r2, #4]
}
    5290:	46c0      	nop			; (mov r8, r8)
    5292:	46bd      	mov	sp, r7
    5294:	b002      	add	sp, #8
    5296:	bd80      	pop	{r7, pc}
    5298:	41004000 	.word	0x41004000

0000529c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    529c:	b580      	push	{r7, lr}
    529e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    52a0:	46c0      	nop			; (mov r8, r8)
    52a2:	4b04      	ldr	r3, [pc, #16]	; (52b4 <_system_dfll_wait_for_sync+0x18>)
    52a4:	68db      	ldr	r3, [r3, #12]
    52a6:	2210      	movs	r2, #16
    52a8:	4013      	ands	r3, r2
    52aa:	d0fa      	beq.n	52a2 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    52ac:	46c0      	nop			; (mov r8, r8)
    52ae:	46bd      	mov	sp, r7
    52b0:	bd80      	pop	{r7, pc}
    52b2:	46c0      	nop			; (mov r8, r8)
    52b4:	40000800 	.word	0x40000800

000052b8 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    52b8:	b580      	push	{r7, lr}
    52ba:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    52bc:	4b0c      	ldr	r3, [pc, #48]	; (52f0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    52be:	2202      	movs	r2, #2
    52c0:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    52c2:	4b0c      	ldr	r3, [pc, #48]	; (52f4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    52c4:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    52c6:	4a0a      	ldr	r2, [pc, #40]	; (52f0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    52c8:	4b0b      	ldr	r3, [pc, #44]	; (52f8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    52ca:	689b      	ldr	r3, [r3, #8]
    52cc:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    52ce:	4a08      	ldr	r2, [pc, #32]	; (52f0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    52d0:	4b09      	ldr	r3, [pc, #36]	; (52f8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    52d2:	685b      	ldr	r3, [r3, #4]
    52d4:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    52d6:	4b06      	ldr	r3, [pc, #24]	; (52f0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    52d8:	2200      	movs	r2, #0
    52da:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    52dc:	4b05      	ldr	r3, [pc, #20]	; (52f4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    52de:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    52e0:	4a03      	ldr	r2, [pc, #12]	; (52f0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    52e2:	4b05      	ldr	r3, [pc, #20]	; (52f8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    52e4:	681b      	ldr	r3, [r3, #0]
    52e6:	b29b      	uxth	r3, r3
    52e8:	8493      	strh	r3, [r2, #36]	; 0x24
}
    52ea:	46c0      	nop			; (mov r8, r8)
    52ec:	46bd      	mov	sp, r7
    52ee:	bd80      	pop	{r7, pc}
    52f0:	40000800 	.word	0x40000800
    52f4:	0000529d 	.word	0x0000529d
    52f8:	2000012c 	.word	0x2000012c

000052fc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    52fc:	b580      	push	{r7, lr}
    52fe:	b082      	sub	sp, #8
    5300:	af00      	add	r7, sp, #0
    5302:	0002      	movs	r2, r0
    5304:	1dfb      	adds	r3, r7, #7
    5306:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5308:	1dfb      	adds	r3, r7, #7
    530a:	781b      	ldrb	r3, [r3, #0]
    530c:	2b08      	cmp	r3, #8
    530e:	d840      	bhi.n	5392 <system_clock_source_get_hz+0x96>
    5310:	009a      	lsls	r2, r3, #2
    5312:	4b22      	ldr	r3, [pc, #136]	; (539c <system_clock_source_get_hz+0xa0>)
    5314:	18d3      	adds	r3, r2, r3
    5316:	681b      	ldr	r3, [r3, #0]
    5318:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    531a:	4b21      	ldr	r3, [pc, #132]	; (53a0 <system_clock_source_get_hz+0xa4>)
    531c:	691b      	ldr	r3, [r3, #16]
    531e:	e039      	b.n	5394 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5320:	4b20      	ldr	r3, [pc, #128]	; (53a4 <system_clock_source_get_hz+0xa8>)
    5322:	6a1b      	ldr	r3, [r3, #32]
    5324:	059b      	lsls	r3, r3, #22
    5326:	0f9b      	lsrs	r3, r3, #30
    5328:	b2db      	uxtb	r3, r3
    532a:	001a      	movs	r2, r3
    532c:	4b1e      	ldr	r3, [pc, #120]	; (53a8 <system_clock_source_get_hz+0xac>)
    532e:	40d3      	lsrs	r3, r2
    5330:	e030      	b.n	5394 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    5332:	2380      	movs	r3, #128	; 0x80
    5334:	021b      	lsls	r3, r3, #8
    5336:	e02d      	b.n	5394 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    5338:	2380      	movs	r3, #128	; 0x80
    533a:	021b      	lsls	r3, r3, #8
    533c:	e02a      	b.n	5394 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    533e:	4b18      	ldr	r3, [pc, #96]	; (53a0 <system_clock_source_get_hz+0xa4>)
    5340:	695b      	ldr	r3, [r3, #20]
    5342:	e027      	b.n	5394 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5344:	4b16      	ldr	r3, [pc, #88]	; (53a0 <system_clock_source_get_hz+0xa4>)
    5346:	681b      	ldr	r3, [r3, #0]
    5348:	2202      	movs	r2, #2
    534a:	4013      	ands	r3, r2
    534c:	d101      	bne.n	5352 <system_clock_source_get_hz+0x56>
			return 0;
    534e:	2300      	movs	r3, #0
    5350:	e020      	b.n	5394 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    5352:	4b16      	ldr	r3, [pc, #88]	; (53ac <system_clock_source_get_hz+0xb0>)
    5354:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    5356:	4b12      	ldr	r3, [pc, #72]	; (53a0 <system_clock_source_get_hz+0xa4>)
    5358:	681b      	ldr	r3, [r3, #0]
    535a:	2204      	movs	r2, #4
    535c:	4013      	ands	r3, r2
    535e:	d009      	beq.n	5374 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5360:	2000      	movs	r0, #0
    5362:	4b13      	ldr	r3, [pc, #76]	; (53b0 <system_clock_source_get_hz+0xb4>)
    5364:	4798      	blx	r3
    5366:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    5368:	4b0d      	ldr	r3, [pc, #52]	; (53a0 <system_clock_source_get_hz+0xa4>)
    536a:	689b      	ldr	r3, [r3, #8]
    536c:	041b      	lsls	r3, r3, #16
    536e:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5370:	4353      	muls	r3, r2
    5372:	e00f      	b.n	5394 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    5374:	4b0f      	ldr	r3, [pc, #60]	; (53b4 <system_clock_source_get_hz+0xb8>)
    5376:	e00d      	b.n	5394 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5378:	4a0a      	ldr	r2, [pc, #40]	; (53a4 <system_clock_source_get_hz+0xa8>)
    537a:	2350      	movs	r3, #80	; 0x50
    537c:	5cd3      	ldrb	r3, [r2, r3]
    537e:	b2db      	uxtb	r3, r3
    5380:	001a      	movs	r2, r3
    5382:	2304      	movs	r3, #4
    5384:	4013      	ands	r3, r2
    5386:	d101      	bne.n	538c <system_clock_source_get_hz+0x90>
			return 0;
    5388:	2300      	movs	r3, #0
    538a:	e003      	b.n	5394 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    538c:	4b04      	ldr	r3, [pc, #16]	; (53a0 <system_clock_source_get_hz+0xa4>)
    538e:	68db      	ldr	r3, [r3, #12]
    5390:	e000      	b.n	5394 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    5392:	2300      	movs	r3, #0
	}
}
    5394:	0018      	movs	r0, r3
    5396:	46bd      	mov	sp, r7
    5398:	b002      	add	sp, #8
    539a:	bd80      	pop	{r7, pc}
    539c:	00009a14 	.word	0x00009a14
    53a0:	2000012c 	.word	0x2000012c
    53a4:	40000800 	.word	0x40000800
    53a8:	007a1200 	.word	0x007a1200
    53ac:	0000529d 	.word	0x0000529d
    53b0:	00005b71 	.word	0x00005b71
    53b4:	02dc6c00 	.word	0x02dc6c00

000053b8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    53b8:	b580      	push	{r7, lr}
    53ba:	b084      	sub	sp, #16
    53bc:	af00      	add	r7, sp, #0
    53be:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    53c0:	4b1a      	ldr	r3, [pc, #104]	; (542c <system_clock_source_osc8m_set_config+0x74>)
    53c2:	6a1b      	ldr	r3, [r3, #32]
    53c4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    53c6:	687b      	ldr	r3, [r7, #4]
    53c8:	781b      	ldrb	r3, [r3, #0]
    53ca:	1c1a      	adds	r2, r3, #0
    53cc:	2303      	movs	r3, #3
    53ce:	4013      	ands	r3, r2
    53d0:	b2da      	uxtb	r2, r3
    53d2:	230d      	movs	r3, #13
    53d4:	18fb      	adds	r3, r7, r3
    53d6:	2103      	movs	r1, #3
    53d8:	400a      	ands	r2, r1
    53da:	0010      	movs	r0, r2
    53dc:	781a      	ldrb	r2, [r3, #0]
    53de:	2103      	movs	r1, #3
    53e0:	438a      	bics	r2, r1
    53e2:	1c11      	adds	r1, r2, #0
    53e4:	1c02      	adds	r2, r0, #0
    53e6:	430a      	orrs	r2, r1
    53e8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    53ea:	687b      	ldr	r3, [r7, #4]
    53ec:	789a      	ldrb	r2, [r3, #2]
    53ee:	230c      	movs	r3, #12
    53f0:	18fb      	adds	r3, r7, r3
    53f2:	01d0      	lsls	r0, r2, #7
    53f4:	781a      	ldrb	r2, [r3, #0]
    53f6:	217f      	movs	r1, #127	; 0x7f
    53f8:	400a      	ands	r2, r1
    53fa:	1c11      	adds	r1, r2, #0
    53fc:	1c02      	adds	r2, r0, #0
    53fe:	430a      	orrs	r2, r1
    5400:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5402:	687b      	ldr	r3, [r7, #4]
    5404:	785a      	ldrb	r2, [r3, #1]
    5406:	230c      	movs	r3, #12
    5408:	18fb      	adds	r3, r7, r3
    540a:	2101      	movs	r1, #1
    540c:	400a      	ands	r2, r1
    540e:	0190      	lsls	r0, r2, #6
    5410:	781a      	ldrb	r2, [r3, #0]
    5412:	2140      	movs	r1, #64	; 0x40
    5414:	438a      	bics	r2, r1
    5416:	1c11      	adds	r1, r2, #0
    5418:	1c02      	adds	r2, r0, #0
    541a:	430a      	orrs	r2, r1
    541c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    541e:	4b03      	ldr	r3, [pc, #12]	; (542c <system_clock_source_osc8m_set_config+0x74>)
    5420:	68fa      	ldr	r2, [r7, #12]
    5422:	621a      	str	r2, [r3, #32]
}
    5424:	46c0      	nop			; (mov r8, r8)
    5426:	46bd      	mov	sp, r7
    5428:	b004      	add	sp, #16
    542a:	bd80      	pop	{r7, pc}
    542c:	40000800 	.word	0x40000800

00005430 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    5430:	b580      	push	{r7, lr}
    5432:	b082      	sub	sp, #8
    5434:	af00      	add	r7, sp, #0
    5436:	0002      	movs	r2, r0
    5438:	1dfb      	adds	r3, r7, #7
    543a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    543c:	1dfb      	adds	r3, r7, #7
    543e:	781b      	ldrb	r3, [r3, #0]
    5440:	2b08      	cmp	r3, #8
    5442:	d83b      	bhi.n	54bc <system_clock_source_enable+0x8c>
    5444:	009a      	lsls	r2, r3, #2
    5446:	4b21      	ldr	r3, [pc, #132]	; (54cc <system_clock_source_enable+0x9c>)
    5448:	18d3      	adds	r3, r2, r3
    544a:	681b      	ldr	r3, [r3, #0]
    544c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    544e:	4b20      	ldr	r3, [pc, #128]	; (54d0 <system_clock_source_enable+0xa0>)
    5450:	4a1f      	ldr	r2, [pc, #124]	; (54d0 <system_clock_source_enable+0xa0>)
    5452:	6a12      	ldr	r2, [r2, #32]
    5454:	2102      	movs	r1, #2
    5456:	430a      	orrs	r2, r1
    5458:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    545a:	2300      	movs	r3, #0
    545c:	e031      	b.n	54c2 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    545e:	4b1c      	ldr	r3, [pc, #112]	; (54d0 <system_clock_source_enable+0xa0>)
    5460:	4a1b      	ldr	r2, [pc, #108]	; (54d0 <system_clock_source_enable+0xa0>)
    5462:	6992      	ldr	r2, [r2, #24]
    5464:	2102      	movs	r1, #2
    5466:	430a      	orrs	r2, r1
    5468:	619a      	str	r2, [r3, #24]
		break;
    546a:	e029      	b.n	54c0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    546c:	4a18      	ldr	r2, [pc, #96]	; (54d0 <system_clock_source_enable+0xa0>)
    546e:	4b18      	ldr	r3, [pc, #96]	; (54d0 <system_clock_source_enable+0xa0>)
    5470:	8a1b      	ldrh	r3, [r3, #16]
    5472:	b29b      	uxth	r3, r3
    5474:	2102      	movs	r1, #2
    5476:	430b      	orrs	r3, r1
    5478:	b29b      	uxth	r3, r3
    547a:	8213      	strh	r3, [r2, #16]
		break;
    547c:	e020      	b.n	54c0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    547e:	4a14      	ldr	r2, [pc, #80]	; (54d0 <system_clock_source_enable+0xa0>)
    5480:	4b13      	ldr	r3, [pc, #76]	; (54d0 <system_clock_source_enable+0xa0>)
    5482:	8a9b      	ldrh	r3, [r3, #20]
    5484:	b29b      	uxth	r3, r3
    5486:	2102      	movs	r1, #2
    5488:	430b      	orrs	r3, r1
    548a:	b29b      	uxth	r3, r3
    548c:	8293      	strh	r3, [r2, #20]
		break;
    548e:	e017      	b.n	54c0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5490:	4b10      	ldr	r3, [pc, #64]	; (54d4 <system_clock_source_enable+0xa4>)
    5492:	681b      	ldr	r3, [r3, #0]
    5494:	2202      	movs	r2, #2
    5496:	431a      	orrs	r2, r3
    5498:	4b0e      	ldr	r3, [pc, #56]	; (54d4 <system_clock_source_enable+0xa4>)
    549a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    549c:	4b0e      	ldr	r3, [pc, #56]	; (54d8 <system_clock_source_enable+0xa8>)
    549e:	4798      	blx	r3
		break;
    54a0:	e00e      	b.n	54c0 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    54a2:	4a0b      	ldr	r2, [pc, #44]	; (54d0 <system_clock_source_enable+0xa0>)
    54a4:	490a      	ldr	r1, [pc, #40]	; (54d0 <system_clock_source_enable+0xa0>)
    54a6:	2344      	movs	r3, #68	; 0x44
    54a8:	5ccb      	ldrb	r3, [r1, r3]
    54aa:	b2db      	uxtb	r3, r3
    54ac:	2102      	movs	r1, #2
    54ae:	430b      	orrs	r3, r1
    54b0:	b2d9      	uxtb	r1, r3
    54b2:	2344      	movs	r3, #68	; 0x44
    54b4:	54d1      	strb	r1, [r2, r3]
		break;
    54b6:	e003      	b.n	54c0 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    54b8:	2300      	movs	r3, #0
    54ba:	e002      	b.n	54c2 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    54bc:	2317      	movs	r3, #23
    54be:	e000      	b.n	54c2 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    54c0:	2300      	movs	r3, #0
}
    54c2:	0018      	movs	r0, r3
    54c4:	46bd      	mov	sp, r7
    54c6:	b002      	add	sp, #8
    54c8:	bd80      	pop	{r7, pc}
    54ca:	46c0      	nop			; (mov r8, r8)
    54cc:	00009a38 	.word	0x00009a38
    54d0:	40000800 	.word	0x40000800
    54d4:	2000012c 	.word	0x2000012c
    54d8:	000052b9 	.word	0x000052b9

000054dc <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    54dc:	b580      	push	{r7, lr}
    54de:	b082      	sub	sp, #8
    54e0:	af00      	add	r7, sp, #0
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
#elif CONF_CLOCK_GCLK_5_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    54e2:	003b      	movs	r3, r7
    54e4:	2205      	movs	r2, #5
    54e6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    54e8:	2300      	movs	r3, #0
    54ea:	607b      	str	r3, [r7, #4]
    54ec:	e009      	b.n	5502 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    54ee:	687b      	ldr	r3, [r7, #4]
    54f0:	b2db      	uxtb	r3, r3
    54f2:	003a      	movs	r2, r7
    54f4:	0011      	movs	r1, r2
    54f6:	0018      	movs	r0, r3
    54f8:	4b05      	ldr	r3, [pc, #20]	; (5510 <_switch_peripheral_gclk+0x34>)
    54fa:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    54fc:	687b      	ldr	r3, [r7, #4]
    54fe:	3301      	adds	r3, #1
    5500:	607b      	str	r3, [r7, #4]
    5502:	687b      	ldr	r3, [r7, #4]
    5504:	2b24      	cmp	r3, #36	; 0x24
    5506:	d9f2      	bls.n	54ee <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    5508:	46c0      	nop			; (mov r8, r8)
    550a:	46bd      	mov	sp, r7
    550c:	b002      	add	sp, #8
    550e:	bd80      	pop	{r7, pc}
    5510:	00005a05 	.word	0x00005a05

00005514 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5514:	b580      	push	{r7, lr}
    5516:	b0a0      	sub	sp, #128	; 0x80
    5518:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    551a:	4b63      	ldr	r3, [pc, #396]	; (56a8 <system_clock_init+0x194>)
    551c:	22c2      	movs	r2, #194	; 0xc2
    551e:	00d2      	lsls	r2, r2, #3
    5520:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    5522:	2000      	movs	r0, #0
    5524:	4b61      	ldr	r3, [pc, #388]	; (56ac <system_clock_init+0x198>)
    5526:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    5528:	4b61      	ldr	r3, [pc, #388]	; (56b0 <system_clock_init+0x19c>)
    552a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    552c:	237c      	movs	r3, #124	; 0x7c
    552e:	18fb      	adds	r3, r7, r3
    5530:	0018      	movs	r0, r3
    5532:	4b60      	ldr	r3, [pc, #384]	; (56b4 <system_clock_init+0x1a0>)
    5534:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    5536:	237c      	movs	r3, #124	; 0x7c
    5538:	18fb      	adds	r3, r7, r3
    553a:	2200      	movs	r2, #0
    553c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    553e:	237c      	movs	r3, #124	; 0x7c
    5540:	18fb      	adds	r3, r7, r3
    5542:	2201      	movs	r2, #1
    5544:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    5546:	237c      	movs	r3, #124	; 0x7c
    5548:	18fb      	adds	r3, r7, r3
    554a:	2200      	movs	r2, #0
    554c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    554e:	237c      	movs	r3, #124	; 0x7c
    5550:	18fb      	adds	r3, r7, r3
    5552:	0018      	movs	r0, r3
    5554:	4b58      	ldr	r3, [pc, #352]	; (56b8 <system_clock_init+0x1a4>)
    5556:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5558:	2006      	movs	r0, #6
    555a:	4b58      	ldr	r3, [pc, #352]	; (56bc <system_clock_init+0x1a8>)
    555c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    555e:	4b58      	ldr	r3, [pc, #352]	; (56c0 <system_clock_init+0x1ac>)
    5560:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5562:	2364      	movs	r3, #100	; 0x64
    5564:	18fb      	adds	r3, r7, r3
    5566:	0018      	movs	r0, r3
    5568:	4b56      	ldr	r3, [pc, #344]	; (56c4 <system_clock_init+0x1b0>)
    556a:	4798      	blx	r3
    556c:	2364      	movs	r3, #100	; 0x64
    556e:	18fb      	adds	r3, r7, r3
    5570:	2206      	movs	r2, #6
    5572:	701a      	strb	r2, [r3, #0]
    5574:	2364      	movs	r3, #100	; 0x64
    5576:	18fb      	adds	r3, r7, r3
    5578:	2201      	movs	r2, #1
    557a:	605a      	str	r2, [r3, #4]
    557c:	2364      	movs	r3, #100	; 0x64
    557e:	18fb      	adds	r3, r7, r3
    5580:	2201      	movs	r2, #1
    5582:	721a      	strb	r2, [r3, #8]
    5584:	2364      	movs	r3, #100	; 0x64
    5586:	18fb      	adds	r3, r7, r3
    5588:	2200      	movs	r2, #0
    558a:	725a      	strb	r2, [r3, #9]
    558c:	2364      	movs	r3, #100	; 0x64
    558e:	18fb      	adds	r3, r7, r3
    5590:	0019      	movs	r1, r3
    5592:	2001      	movs	r0, #1
    5594:	4b4c      	ldr	r3, [pc, #304]	; (56c8 <system_clock_init+0x1b4>)
    5596:	4798      	blx	r3
    5598:	2001      	movs	r0, #1
    559a:	4b4c      	ldr	r3, [pc, #304]	; (56cc <system_clock_init+0x1b8>)
    559c:	4798      	blx	r3
    559e:	2358      	movs	r3, #88	; 0x58
    55a0:	18fb      	adds	r3, r7, r3
    55a2:	0018      	movs	r0, r3
    55a4:	4b47      	ldr	r3, [pc, #284]	; (56c4 <system_clock_init+0x1b0>)
    55a6:	4798      	blx	r3
    55a8:	2358      	movs	r3, #88	; 0x58
    55aa:	18fb      	adds	r3, r7, r3
    55ac:	2206      	movs	r2, #6
    55ae:	701a      	strb	r2, [r3, #0]
    55b0:	2358      	movs	r3, #88	; 0x58
    55b2:	18fb      	adds	r3, r7, r3
    55b4:	2201      	movs	r2, #1
    55b6:	605a      	str	r2, [r3, #4]
    55b8:	2358      	movs	r3, #88	; 0x58
    55ba:	18fb      	adds	r3, r7, r3
    55bc:	2201      	movs	r2, #1
    55be:	721a      	strb	r2, [r3, #8]
    55c0:	2358      	movs	r3, #88	; 0x58
    55c2:	18fb      	adds	r3, r7, r3
    55c4:	2200      	movs	r2, #0
    55c6:	725a      	strb	r2, [r3, #9]
    55c8:	2358      	movs	r3, #88	; 0x58
    55ca:	18fb      	adds	r3, r7, r3
    55cc:	0019      	movs	r1, r3
    55ce:	2002      	movs	r0, #2
    55d0:	4b3d      	ldr	r3, [pc, #244]	; (56c8 <system_clock_init+0x1b4>)
    55d2:	4798      	blx	r3
    55d4:	2002      	movs	r0, #2
    55d6:	4b3d      	ldr	r3, [pc, #244]	; (56cc <system_clock_init+0x1b8>)
    55d8:	4798      	blx	r3
    55da:	234c      	movs	r3, #76	; 0x4c
    55dc:	18fb      	adds	r3, r7, r3
    55de:	0018      	movs	r0, r3
    55e0:	4b38      	ldr	r3, [pc, #224]	; (56c4 <system_clock_init+0x1b0>)
    55e2:	4798      	blx	r3
    55e4:	234c      	movs	r3, #76	; 0x4c
    55e6:	18fb      	adds	r3, r7, r3
    55e8:	2206      	movs	r2, #6
    55ea:	701a      	strb	r2, [r3, #0]
    55ec:	234c      	movs	r3, #76	; 0x4c
    55ee:	18fb      	adds	r3, r7, r3
    55f0:	2201      	movs	r2, #1
    55f2:	605a      	str	r2, [r3, #4]
    55f4:	234c      	movs	r3, #76	; 0x4c
    55f6:	18fb      	adds	r3, r7, r3
    55f8:	2201      	movs	r2, #1
    55fa:	721a      	strb	r2, [r3, #8]
    55fc:	234c      	movs	r3, #76	; 0x4c
    55fe:	18fb      	adds	r3, r7, r3
    5600:	2200      	movs	r2, #0
    5602:	725a      	strb	r2, [r3, #9]
    5604:	234c      	movs	r3, #76	; 0x4c
    5606:	18fb      	adds	r3, r7, r3
    5608:	0019      	movs	r1, r3
    560a:	2003      	movs	r0, #3
    560c:	4b2e      	ldr	r3, [pc, #184]	; (56c8 <system_clock_init+0x1b4>)
    560e:	4798      	blx	r3
    5610:	2003      	movs	r0, #3
    5612:	4b2e      	ldr	r3, [pc, #184]	; (56cc <system_clock_init+0x1b8>)
    5614:	4798      	blx	r3
    5616:	2340      	movs	r3, #64	; 0x40
    5618:	18fb      	adds	r3, r7, r3
    561a:	0018      	movs	r0, r3
    561c:	4b29      	ldr	r3, [pc, #164]	; (56c4 <system_clock_init+0x1b0>)
    561e:	4798      	blx	r3
    5620:	2340      	movs	r3, #64	; 0x40
    5622:	18fb      	adds	r3, r7, r3
    5624:	2206      	movs	r2, #6
    5626:	701a      	strb	r2, [r3, #0]
    5628:	2340      	movs	r3, #64	; 0x40
    562a:	18fb      	adds	r3, r7, r3
    562c:	2201      	movs	r2, #1
    562e:	605a      	str	r2, [r3, #4]
    5630:	2340      	movs	r3, #64	; 0x40
    5632:	18fb      	adds	r3, r7, r3
    5634:	2200      	movs	r2, #0
    5636:	721a      	strb	r2, [r3, #8]
    5638:	2340      	movs	r3, #64	; 0x40
    563a:	18fb      	adds	r3, r7, r3
    563c:	2200      	movs	r2, #0
    563e:	725a      	strb	r2, [r3, #9]
    5640:	2340      	movs	r3, #64	; 0x40
    5642:	18fb      	adds	r3, r7, r3
    5644:	0019      	movs	r1, r3
    5646:	2004      	movs	r0, #4
    5648:	4b1f      	ldr	r3, [pc, #124]	; (56c8 <system_clock_init+0x1b4>)
    564a:	4798      	blx	r3
    564c:	2004      	movs	r0, #4
    564e:	4b1f      	ldr	r3, [pc, #124]	; (56cc <system_clock_init+0x1b8>)
    5650:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    5652:	2000      	movs	r0, #0
    5654:	4b1e      	ldr	r3, [pc, #120]	; (56d0 <system_clock_init+0x1bc>)
    5656:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    5658:	2100      	movs	r1, #0
    565a:	2000      	movs	r0, #0
    565c:	4b1d      	ldr	r3, [pc, #116]	; (56d4 <system_clock_init+0x1c0>)
    565e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    5660:	2100      	movs	r1, #0
    5662:	2001      	movs	r0, #1
    5664:	4b1b      	ldr	r3, [pc, #108]	; (56d4 <system_clock_init+0x1c0>)
    5666:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    5668:	2100      	movs	r1, #0
    566a:	2002      	movs	r0, #2
    566c:	4b19      	ldr	r3, [pc, #100]	; (56d4 <system_clock_init+0x1c0>)
    566e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5670:	1d3b      	adds	r3, r7, #4
    5672:	0018      	movs	r0, r3
    5674:	4b13      	ldr	r3, [pc, #76]	; (56c4 <system_clock_init+0x1b0>)
    5676:	4798      	blx	r3
    5678:	1d3b      	adds	r3, r7, #4
    567a:	2206      	movs	r2, #6
    567c:	701a      	strb	r2, [r3, #0]
    567e:	1d3b      	adds	r3, r7, #4
    5680:	2201      	movs	r2, #1
    5682:	605a      	str	r2, [r3, #4]
    5684:	1d3b      	adds	r3, r7, #4
    5686:	2201      	movs	r2, #1
    5688:	721a      	strb	r2, [r3, #8]
    568a:	1d3b      	adds	r3, r7, #4
    568c:	2200      	movs	r2, #0
    568e:	725a      	strb	r2, [r3, #9]
    5690:	1d3b      	adds	r3, r7, #4
    5692:	0019      	movs	r1, r3
    5694:	2000      	movs	r0, #0
    5696:	4b0c      	ldr	r3, [pc, #48]	; (56c8 <system_clock_init+0x1b4>)
    5698:	4798      	blx	r3
    569a:	2000      	movs	r0, #0
    569c:	4b0b      	ldr	r3, [pc, #44]	; (56cc <system_clock_init+0x1b8>)
    569e:	4798      	blx	r3
#endif
}
    56a0:	46c0      	nop			; (mov r8, r8)
    56a2:	46bd      	mov	sp, r7
    56a4:	b020      	add	sp, #128	; 0x80
    56a6:	bd80      	pop	{r7, pc}
    56a8:	40000800 	.word	0x40000800
    56ac:	00005269 	.word	0x00005269
    56b0:	000054dd 	.word	0x000054dd
    56b4:	000051d1 	.word	0x000051d1
    56b8:	000053b9 	.word	0x000053b9
    56bc:	00005431 	.word	0x00005431
    56c0:	0000577d 	.word	0x0000577d
    56c4:	000051a1 	.word	0x000051a1
    56c8:	000057ad 	.word	0x000057ad
    56cc:	000058d1 	.word	0x000058d1
    56d0:	000051f5 	.word	0x000051f5
    56d4:	00005215 	.word	0x00005215

000056d8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    56d8:	b580      	push	{r7, lr}
    56da:	b082      	sub	sp, #8
    56dc:	af00      	add	r7, sp, #0
    56de:	0002      	movs	r2, r0
    56e0:	6039      	str	r1, [r7, #0]
    56e2:	1dfb      	adds	r3, r7, #7
    56e4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    56e6:	1dfb      	adds	r3, r7, #7
    56e8:	781b      	ldrb	r3, [r3, #0]
    56ea:	2b01      	cmp	r3, #1
    56ec:	d00a      	beq.n	5704 <system_apb_clock_set_mask+0x2c>
    56ee:	2b02      	cmp	r3, #2
    56f0:	d00f      	beq.n	5712 <system_apb_clock_set_mask+0x3a>
    56f2:	2b00      	cmp	r3, #0
    56f4:	d114      	bne.n	5720 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    56f6:	4b0e      	ldr	r3, [pc, #56]	; (5730 <system_apb_clock_set_mask+0x58>)
    56f8:	4a0d      	ldr	r2, [pc, #52]	; (5730 <system_apb_clock_set_mask+0x58>)
    56fa:	6991      	ldr	r1, [r2, #24]
    56fc:	683a      	ldr	r2, [r7, #0]
    56fe:	430a      	orrs	r2, r1
    5700:	619a      	str	r2, [r3, #24]
			break;
    5702:	e00f      	b.n	5724 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5704:	4b0a      	ldr	r3, [pc, #40]	; (5730 <system_apb_clock_set_mask+0x58>)
    5706:	4a0a      	ldr	r2, [pc, #40]	; (5730 <system_apb_clock_set_mask+0x58>)
    5708:	69d1      	ldr	r1, [r2, #28]
    570a:	683a      	ldr	r2, [r7, #0]
    570c:	430a      	orrs	r2, r1
    570e:	61da      	str	r2, [r3, #28]
			break;
    5710:	e008      	b.n	5724 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5712:	4b07      	ldr	r3, [pc, #28]	; (5730 <system_apb_clock_set_mask+0x58>)
    5714:	4a06      	ldr	r2, [pc, #24]	; (5730 <system_apb_clock_set_mask+0x58>)
    5716:	6a11      	ldr	r1, [r2, #32]
    5718:	683a      	ldr	r2, [r7, #0]
    571a:	430a      	orrs	r2, r1
    571c:	621a      	str	r2, [r3, #32]
			break;
    571e:	e001      	b.n	5724 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5720:	2317      	movs	r3, #23
    5722:	e000      	b.n	5726 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5724:	2300      	movs	r3, #0
}
    5726:	0018      	movs	r0, r3
    5728:	46bd      	mov	sp, r7
    572a:	b002      	add	sp, #8
    572c:	bd80      	pop	{r7, pc}
    572e:	46c0      	nop			; (mov r8, r8)
    5730:	40000400 	.word	0x40000400

00005734 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    5734:	b580      	push	{r7, lr}
    5736:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    5738:	4b02      	ldr	r3, [pc, #8]	; (5744 <system_interrupt_enter_critical_section+0x10>)
    573a:	4798      	blx	r3
}
    573c:	46c0      	nop			; (mov r8, r8)
    573e:	46bd      	mov	sp, r7
    5740:	bd80      	pop	{r7, pc}
    5742:	46c0      	nop			; (mov r8, r8)
    5744:	0000510d 	.word	0x0000510d

00005748 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    5748:	b580      	push	{r7, lr}
    574a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    574c:	4b02      	ldr	r3, [pc, #8]	; (5758 <system_interrupt_leave_critical_section+0x10>)
    574e:	4798      	blx	r3
}
    5750:	46c0      	nop			; (mov r8, r8)
    5752:	46bd      	mov	sp, r7
    5754:	bd80      	pop	{r7, pc}
    5756:	46c0      	nop			; (mov r8, r8)
    5758:	00005161 	.word	0x00005161

0000575c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    575c:	b580      	push	{r7, lr}
    575e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5760:	4b05      	ldr	r3, [pc, #20]	; (5778 <system_gclk_is_syncing+0x1c>)
    5762:	785b      	ldrb	r3, [r3, #1]
    5764:	b2db      	uxtb	r3, r3
    5766:	b25b      	sxtb	r3, r3
    5768:	2b00      	cmp	r3, #0
    576a:	da01      	bge.n	5770 <system_gclk_is_syncing+0x14>
		return true;
    576c:	2301      	movs	r3, #1
    576e:	e000      	b.n	5772 <system_gclk_is_syncing+0x16>
	}

	return false;
    5770:	2300      	movs	r3, #0
}
    5772:	0018      	movs	r0, r3
    5774:	46bd      	mov	sp, r7
    5776:	bd80      	pop	{r7, pc}
    5778:	40000c00 	.word	0x40000c00

0000577c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    577c:	b580      	push	{r7, lr}
    577e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    5780:	2108      	movs	r1, #8
    5782:	2000      	movs	r0, #0
    5784:	4b07      	ldr	r3, [pc, #28]	; (57a4 <system_gclk_init+0x28>)
    5786:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5788:	4b07      	ldr	r3, [pc, #28]	; (57a8 <system_gclk_init+0x2c>)
    578a:	2201      	movs	r2, #1
    578c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    578e:	46c0      	nop			; (mov r8, r8)
    5790:	4b05      	ldr	r3, [pc, #20]	; (57a8 <system_gclk_init+0x2c>)
    5792:	781b      	ldrb	r3, [r3, #0]
    5794:	b2db      	uxtb	r3, r3
    5796:	001a      	movs	r2, r3
    5798:	2301      	movs	r3, #1
    579a:	4013      	ands	r3, r2
    579c:	d1f8      	bne.n	5790 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    579e:	46c0      	nop			; (mov r8, r8)
    57a0:	46bd      	mov	sp, r7
    57a2:	bd80      	pop	{r7, pc}
    57a4:	000056d9 	.word	0x000056d9
    57a8:	40000c00 	.word	0x40000c00

000057ac <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    57ac:	b580      	push	{r7, lr}
    57ae:	b086      	sub	sp, #24
    57b0:	af00      	add	r7, sp, #0
    57b2:	0002      	movs	r2, r0
    57b4:	6039      	str	r1, [r7, #0]
    57b6:	1dfb      	adds	r3, r7, #7
    57b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    57ba:	1dfb      	adds	r3, r7, #7
    57bc:	781b      	ldrb	r3, [r3, #0]
    57be:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    57c0:	1dfb      	adds	r3, r7, #7
    57c2:	781b      	ldrb	r3, [r3, #0]
    57c4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    57c6:	683b      	ldr	r3, [r7, #0]
    57c8:	781b      	ldrb	r3, [r3, #0]
    57ca:	021b      	lsls	r3, r3, #8
    57cc:	001a      	movs	r2, r3
    57ce:	697b      	ldr	r3, [r7, #20]
    57d0:	4313      	orrs	r3, r2
    57d2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    57d4:	683b      	ldr	r3, [r7, #0]
    57d6:	785b      	ldrb	r3, [r3, #1]
    57d8:	2b00      	cmp	r3, #0
    57da:	d004      	beq.n	57e6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    57dc:	697b      	ldr	r3, [r7, #20]
    57de:	2280      	movs	r2, #128	; 0x80
    57e0:	02d2      	lsls	r2, r2, #11
    57e2:	4313      	orrs	r3, r2
    57e4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    57e6:	683b      	ldr	r3, [r7, #0]
    57e8:	7a5b      	ldrb	r3, [r3, #9]
    57ea:	2b00      	cmp	r3, #0
    57ec:	d004      	beq.n	57f8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    57ee:	697b      	ldr	r3, [r7, #20]
    57f0:	2280      	movs	r2, #128	; 0x80
    57f2:	0312      	lsls	r2, r2, #12
    57f4:	4313      	orrs	r3, r2
    57f6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    57f8:	683b      	ldr	r3, [r7, #0]
    57fa:	685b      	ldr	r3, [r3, #4]
    57fc:	2b01      	cmp	r3, #1
    57fe:	d92c      	bls.n	585a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5800:	683b      	ldr	r3, [r7, #0]
    5802:	685a      	ldr	r2, [r3, #4]
    5804:	683b      	ldr	r3, [r7, #0]
    5806:	685b      	ldr	r3, [r3, #4]
    5808:	3b01      	subs	r3, #1
    580a:	4013      	ands	r3, r2
    580c:	d11a      	bne.n	5844 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    580e:	2300      	movs	r3, #0
    5810:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5812:	2302      	movs	r3, #2
    5814:	60bb      	str	r3, [r7, #8]
    5816:	e005      	b.n	5824 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    5818:	68fb      	ldr	r3, [r7, #12]
    581a:	3301      	adds	r3, #1
    581c:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    581e:	68bb      	ldr	r3, [r7, #8]
    5820:	005b      	lsls	r3, r3, #1
    5822:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5824:	683b      	ldr	r3, [r7, #0]
    5826:	685a      	ldr	r2, [r3, #4]
    5828:	68bb      	ldr	r3, [r7, #8]
    582a:	429a      	cmp	r2, r3
    582c:	d8f4      	bhi.n	5818 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    582e:	68fb      	ldr	r3, [r7, #12]
    5830:	021b      	lsls	r3, r3, #8
    5832:	693a      	ldr	r2, [r7, #16]
    5834:	4313      	orrs	r3, r2
    5836:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5838:	697b      	ldr	r3, [r7, #20]
    583a:	2280      	movs	r2, #128	; 0x80
    583c:	0352      	lsls	r2, r2, #13
    583e:	4313      	orrs	r3, r2
    5840:	617b      	str	r3, [r7, #20]
    5842:	e00a      	b.n	585a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5844:	683b      	ldr	r3, [r7, #0]
    5846:	685b      	ldr	r3, [r3, #4]
    5848:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    584a:	693a      	ldr	r2, [r7, #16]
    584c:	4313      	orrs	r3, r2
    584e:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5850:	697b      	ldr	r3, [r7, #20]
    5852:	2280      	movs	r2, #128	; 0x80
    5854:	0292      	lsls	r2, r2, #10
    5856:	4313      	orrs	r3, r2
    5858:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    585a:	683b      	ldr	r3, [r7, #0]
    585c:	7a1b      	ldrb	r3, [r3, #8]
    585e:	2b00      	cmp	r3, #0
    5860:	d004      	beq.n	586c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5862:	697b      	ldr	r3, [r7, #20]
    5864:	2280      	movs	r2, #128	; 0x80
    5866:	0392      	lsls	r2, r2, #14
    5868:	4313      	orrs	r3, r2
    586a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    586c:	46c0      	nop			; (mov r8, r8)
    586e:	4b13      	ldr	r3, [pc, #76]	; (58bc <system_gclk_gen_set_config+0x110>)
    5870:	4798      	blx	r3
    5872:	1e03      	subs	r3, r0, #0
    5874:	d1fb      	bne.n	586e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5876:	4b12      	ldr	r3, [pc, #72]	; (58c0 <system_gclk_gen_set_config+0x114>)
    5878:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    587a:	4a12      	ldr	r2, [pc, #72]	; (58c4 <system_gclk_gen_set_config+0x118>)
    587c:	1dfb      	adds	r3, r7, #7
    587e:	781b      	ldrb	r3, [r3, #0]
    5880:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5882:	46c0      	nop			; (mov r8, r8)
    5884:	4b0d      	ldr	r3, [pc, #52]	; (58bc <system_gclk_gen_set_config+0x110>)
    5886:	4798      	blx	r3
    5888:	1e03      	subs	r3, r0, #0
    588a:	d1fb      	bne.n	5884 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    588c:	4b0e      	ldr	r3, [pc, #56]	; (58c8 <system_gclk_gen_set_config+0x11c>)
    588e:	693a      	ldr	r2, [r7, #16]
    5890:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    5892:	46c0      	nop			; (mov r8, r8)
    5894:	4b09      	ldr	r3, [pc, #36]	; (58bc <system_gclk_gen_set_config+0x110>)
    5896:	4798      	blx	r3
    5898:	1e03      	subs	r3, r0, #0
    589a:	d1fb      	bne.n	5894 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    589c:	4b0a      	ldr	r3, [pc, #40]	; (58c8 <system_gclk_gen_set_config+0x11c>)
    589e:	4a0a      	ldr	r2, [pc, #40]	; (58c8 <system_gclk_gen_set_config+0x11c>)
    58a0:	6851      	ldr	r1, [r2, #4]
    58a2:	2280      	movs	r2, #128	; 0x80
    58a4:	0252      	lsls	r2, r2, #9
    58a6:	4011      	ands	r1, r2
    58a8:	697a      	ldr	r2, [r7, #20]
    58aa:	430a      	orrs	r2, r1
    58ac:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    58ae:	4b07      	ldr	r3, [pc, #28]	; (58cc <system_gclk_gen_set_config+0x120>)
    58b0:	4798      	blx	r3
}
    58b2:	46c0      	nop			; (mov r8, r8)
    58b4:	46bd      	mov	sp, r7
    58b6:	b006      	add	sp, #24
    58b8:	bd80      	pop	{r7, pc}
    58ba:	46c0      	nop			; (mov r8, r8)
    58bc:	0000575d 	.word	0x0000575d
    58c0:	00005735 	.word	0x00005735
    58c4:	40000c08 	.word	0x40000c08
    58c8:	40000c00 	.word	0x40000c00
    58cc:	00005749 	.word	0x00005749

000058d0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    58d0:	b580      	push	{r7, lr}
    58d2:	b082      	sub	sp, #8
    58d4:	af00      	add	r7, sp, #0
    58d6:	0002      	movs	r2, r0
    58d8:	1dfb      	adds	r3, r7, #7
    58da:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    58dc:	46c0      	nop			; (mov r8, r8)
    58de:	4b0e      	ldr	r3, [pc, #56]	; (5918 <system_gclk_gen_enable+0x48>)
    58e0:	4798      	blx	r3
    58e2:	1e03      	subs	r3, r0, #0
    58e4:	d1fb      	bne.n	58de <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    58e6:	4b0d      	ldr	r3, [pc, #52]	; (591c <system_gclk_gen_enable+0x4c>)
    58e8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    58ea:	4a0d      	ldr	r2, [pc, #52]	; (5920 <system_gclk_gen_enable+0x50>)
    58ec:	1dfb      	adds	r3, r7, #7
    58ee:	781b      	ldrb	r3, [r3, #0]
    58f0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    58f2:	46c0      	nop			; (mov r8, r8)
    58f4:	4b08      	ldr	r3, [pc, #32]	; (5918 <system_gclk_gen_enable+0x48>)
    58f6:	4798      	blx	r3
    58f8:	1e03      	subs	r3, r0, #0
    58fa:	d1fb      	bne.n	58f4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    58fc:	4b09      	ldr	r3, [pc, #36]	; (5924 <system_gclk_gen_enable+0x54>)
    58fe:	4a09      	ldr	r2, [pc, #36]	; (5924 <system_gclk_gen_enable+0x54>)
    5900:	6852      	ldr	r2, [r2, #4]
    5902:	2180      	movs	r1, #128	; 0x80
    5904:	0249      	lsls	r1, r1, #9
    5906:	430a      	orrs	r2, r1
    5908:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    590a:	4b07      	ldr	r3, [pc, #28]	; (5928 <system_gclk_gen_enable+0x58>)
    590c:	4798      	blx	r3
}
    590e:	46c0      	nop			; (mov r8, r8)
    5910:	46bd      	mov	sp, r7
    5912:	b002      	add	sp, #8
    5914:	bd80      	pop	{r7, pc}
    5916:	46c0      	nop			; (mov r8, r8)
    5918:	0000575d 	.word	0x0000575d
    591c:	00005735 	.word	0x00005735
    5920:	40000c04 	.word	0x40000c04
    5924:	40000c00 	.word	0x40000c00
    5928:	00005749 	.word	0x00005749

0000592c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    592c:	b580      	push	{r7, lr}
    592e:	b086      	sub	sp, #24
    5930:	af00      	add	r7, sp, #0
    5932:	0002      	movs	r2, r0
    5934:	1dfb      	adds	r3, r7, #7
    5936:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    5938:	46c0      	nop			; (mov r8, r8)
    593a:	4b2a      	ldr	r3, [pc, #168]	; (59e4 <system_gclk_gen_get_hz+0xb8>)
    593c:	4798      	blx	r3
    593e:	1e03      	subs	r3, r0, #0
    5940:	d1fb      	bne.n	593a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5942:	4b29      	ldr	r3, [pc, #164]	; (59e8 <system_gclk_gen_get_hz+0xbc>)
    5944:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5946:	4a29      	ldr	r2, [pc, #164]	; (59ec <system_gclk_gen_get_hz+0xc0>)
    5948:	1dfb      	adds	r3, r7, #7
    594a:	781b      	ldrb	r3, [r3, #0]
    594c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    594e:	46c0      	nop			; (mov r8, r8)
    5950:	4b24      	ldr	r3, [pc, #144]	; (59e4 <system_gclk_gen_get_hz+0xb8>)
    5952:	4798      	blx	r3
    5954:	1e03      	subs	r3, r0, #0
    5956:	d1fb      	bne.n	5950 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5958:	4b25      	ldr	r3, [pc, #148]	; (59f0 <system_gclk_gen_get_hz+0xc4>)
    595a:	685b      	ldr	r3, [r3, #4]
    595c:	04db      	lsls	r3, r3, #19
    595e:	0edb      	lsrs	r3, r3, #27
    5960:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5962:	0018      	movs	r0, r3
    5964:	4b23      	ldr	r3, [pc, #140]	; (59f4 <system_gclk_gen_get_hz+0xc8>)
    5966:	4798      	blx	r3
    5968:	0003      	movs	r3, r0
    596a:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    596c:	4a1f      	ldr	r2, [pc, #124]	; (59ec <system_gclk_gen_get_hz+0xc0>)
    596e:	1dfb      	adds	r3, r7, #7
    5970:	781b      	ldrb	r3, [r3, #0]
    5972:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5974:	4b1e      	ldr	r3, [pc, #120]	; (59f0 <system_gclk_gen_get_hz+0xc4>)
    5976:	685b      	ldr	r3, [r3, #4]
    5978:	02db      	lsls	r3, r3, #11
    597a:	0fdb      	lsrs	r3, r3, #31
    597c:	b2da      	uxtb	r2, r3
    597e:	2313      	movs	r3, #19
    5980:	18fb      	adds	r3, r7, r3
    5982:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5984:	4a1c      	ldr	r2, [pc, #112]	; (59f8 <system_gclk_gen_get_hz+0xcc>)
    5986:	1dfb      	adds	r3, r7, #7
    5988:	781b      	ldrb	r3, [r3, #0]
    598a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    598c:	46c0      	nop			; (mov r8, r8)
    598e:	4b15      	ldr	r3, [pc, #84]	; (59e4 <system_gclk_gen_get_hz+0xb8>)
    5990:	4798      	blx	r3
    5992:	1e03      	subs	r3, r0, #0
    5994:	d1fb      	bne.n	598e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    5996:	4b16      	ldr	r3, [pc, #88]	; (59f0 <system_gclk_gen_get_hz+0xc4>)
    5998:	689b      	ldr	r3, [r3, #8]
    599a:	021b      	lsls	r3, r3, #8
    599c:	0c1b      	lsrs	r3, r3, #16
    599e:	b29b      	uxth	r3, r3
    59a0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    59a2:	4b16      	ldr	r3, [pc, #88]	; (59fc <system_gclk_gen_get_hz+0xd0>)
    59a4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    59a6:	2313      	movs	r3, #19
    59a8:	18fb      	adds	r3, r7, r3
    59aa:	781b      	ldrb	r3, [r3, #0]
    59ac:	2b00      	cmp	r3, #0
    59ae:	d109      	bne.n	59c4 <system_gclk_gen_get_hz+0x98>
    59b0:	68fb      	ldr	r3, [r7, #12]
    59b2:	2b01      	cmp	r3, #1
    59b4:	d906      	bls.n	59c4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    59b6:	4b12      	ldr	r3, [pc, #72]	; (5a00 <system_gclk_gen_get_hz+0xd4>)
    59b8:	68f9      	ldr	r1, [r7, #12]
    59ba:	6978      	ldr	r0, [r7, #20]
    59bc:	4798      	blx	r3
    59be:	0003      	movs	r3, r0
    59c0:	617b      	str	r3, [r7, #20]
    59c2:	e00a      	b.n	59da <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    59c4:	2313      	movs	r3, #19
    59c6:	18fb      	adds	r3, r7, r3
    59c8:	781b      	ldrb	r3, [r3, #0]
    59ca:	2b00      	cmp	r3, #0
    59cc:	d005      	beq.n	59da <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    59ce:	68fb      	ldr	r3, [r7, #12]
    59d0:	3301      	adds	r3, #1
    59d2:	697a      	ldr	r2, [r7, #20]
    59d4:	40da      	lsrs	r2, r3
    59d6:	0013      	movs	r3, r2
    59d8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    59da:	697b      	ldr	r3, [r7, #20]
}
    59dc:	0018      	movs	r0, r3
    59de:	46bd      	mov	sp, r7
    59e0:	b006      	add	sp, #24
    59e2:	bd80      	pop	{r7, pc}
    59e4:	0000575d 	.word	0x0000575d
    59e8:	00005735 	.word	0x00005735
    59ec:	40000c04 	.word	0x40000c04
    59f0:	40000c00 	.word	0x40000c00
    59f4:	000052fd 	.word	0x000052fd
    59f8:	40000c08 	.word	0x40000c08
    59fc:	00005749 	.word	0x00005749
    5a00:	00006415 	.word	0x00006415

00005a04 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    5a04:	b580      	push	{r7, lr}
    5a06:	b084      	sub	sp, #16
    5a08:	af00      	add	r7, sp, #0
    5a0a:	0002      	movs	r2, r0
    5a0c:	6039      	str	r1, [r7, #0]
    5a0e:	1dfb      	adds	r3, r7, #7
    5a10:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    5a12:	1dfb      	adds	r3, r7, #7
    5a14:	781b      	ldrb	r3, [r3, #0]
    5a16:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    5a18:	683b      	ldr	r3, [r7, #0]
    5a1a:	781b      	ldrb	r3, [r3, #0]
    5a1c:	021b      	lsls	r3, r3, #8
    5a1e:	001a      	movs	r2, r3
    5a20:	68fb      	ldr	r3, [r7, #12]
    5a22:	4313      	orrs	r3, r2
    5a24:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    5a26:	1dfb      	adds	r3, r7, #7
    5a28:	781b      	ldrb	r3, [r3, #0]
    5a2a:	0018      	movs	r0, r3
    5a2c:	4b04      	ldr	r3, [pc, #16]	; (5a40 <system_gclk_chan_set_config+0x3c>)
    5a2e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    5a30:	4b04      	ldr	r3, [pc, #16]	; (5a44 <system_gclk_chan_set_config+0x40>)
    5a32:	68fa      	ldr	r2, [r7, #12]
    5a34:	b292      	uxth	r2, r2
    5a36:	805a      	strh	r2, [r3, #2]
}
    5a38:	46c0      	nop			; (mov r8, r8)
    5a3a:	46bd      	mov	sp, r7
    5a3c:	b004      	add	sp, #16
    5a3e:	bd80      	pop	{r7, pc}
    5a40:	00005a91 	.word	0x00005a91
    5a44:	40000c00 	.word	0x40000c00

00005a48 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5a48:	b580      	push	{r7, lr}
    5a4a:	b082      	sub	sp, #8
    5a4c:	af00      	add	r7, sp, #0
    5a4e:	0002      	movs	r2, r0
    5a50:	1dfb      	adds	r3, r7, #7
    5a52:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5a54:	4b0a      	ldr	r3, [pc, #40]	; (5a80 <system_gclk_chan_enable+0x38>)
    5a56:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5a58:	4a0a      	ldr	r2, [pc, #40]	; (5a84 <system_gclk_chan_enable+0x3c>)
    5a5a:	1dfb      	adds	r3, r7, #7
    5a5c:	781b      	ldrb	r3, [r3, #0]
    5a5e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5a60:	4909      	ldr	r1, [pc, #36]	; (5a88 <system_gclk_chan_enable+0x40>)
    5a62:	4b09      	ldr	r3, [pc, #36]	; (5a88 <system_gclk_chan_enable+0x40>)
    5a64:	885b      	ldrh	r3, [r3, #2]
    5a66:	b29b      	uxth	r3, r3
    5a68:	2280      	movs	r2, #128	; 0x80
    5a6a:	01d2      	lsls	r2, r2, #7
    5a6c:	4313      	orrs	r3, r2
    5a6e:	b29b      	uxth	r3, r3
    5a70:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    5a72:	4b06      	ldr	r3, [pc, #24]	; (5a8c <system_gclk_chan_enable+0x44>)
    5a74:	4798      	blx	r3
}
    5a76:	46c0      	nop			; (mov r8, r8)
    5a78:	46bd      	mov	sp, r7
    5a7a:	b002      	add	sp, #8
    5a7c:	bd80      	pop	{r7, pc}
    5a7e:	46c0      	nop			; (mov r8, r8)
    5a80:	00005735 	.word	0x00005735
    5a84:	40000c02 	.word	0x40000c02
    5a88:	40000c00 	.word	0x40000c00
    5a8c:	00005749 	.word	0x00005749

00005a90 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5a90:	b580      	push	{r7, lr}
    5a92:	b084      	sub	sp, #16
    5a94:	af00      	add	r7, sp, #0
    5a96:	0002      	movs	r2, r0
    5a98:	1dfb      	adds	r3, r7, #7
    5a9a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5a9c:	4b1c      	ldr	r3, [pc, #112]	; (5b10 <system_gclk_chan_disable+0x80>)
    5a9e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5aa0:	4a1c      	ldr	r2, [pc, #112]	; (5b14 <system_gclk_chan_disable+0x84>)
    5aa2:	1dfb      	adds	r3, r7, #7
    5aa4:	781b      	ldrb	r3, [r3, #0]
    5aa6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5aa8:	4b1b      	ldr	r3, [pc, #108]	; (5b18 <system_gclk_chan_disable+0x88>)
    5aaa:	885b      	ldrh	r3, [r3, #2]
    5aac:	051b      	lsls	r3, r3, #20
    5aae:	0f1b      	lsrs	r3, r3, #28
    5ab0:	b2db      	uxtb	r3, r3
    5ab2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    5ab4:	4a18      	ldr	r2, [pc, #96]	; (5b18 <system_gclk_chan_disable+0x88>)
    5ab6:	8853      	ldrh	r3, [r2, #2]
    5ab8:	4918      	ldr	r1, [pc, #96]	; (5b1c <system_gclk_chan_disable+0x8c>)
    5aba:	400b      	ands	r3, r1
    5abc:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5abe:	4a16      	ldr	r2, [pc, #88]	; (5b18 <system_gclk_chan_disable+0x88>)
    5ac0:	4b15      	ldr	r3, [pc, #84]	; (5b18 <system_gclk_chan_disable+0x88>)
    5ac2:	885b      	ldrh	r3, [r3, #2]
    5ac4:	b29b      	uxth	r3, r3
    5ac6:	4916      	ldr	r1, [pc, #88]	; (5b20 <system_gclk_chan_disable+0x90>)
    5ac8:	400b      	ands	r3, r1
    5aca:	b29b      	uxth	r3, r3
    5acc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    5ace:	46c0      	nop			; (mov r8, r8)
    5ad0:	4b11      	ldr	r3, [pc, #68]	; (5b18 <system_gclk_chan_disable+0x88>)
    5ad2:	885b      	ldrh	r3, [r3, #2]
    5ad4:	b29b      	uxth	r3, r3
    5ad6:	001a      	movs	r2, r3
    5ad8:	2380      	movs	r3, #128	; 0x80
    5ada:	01db      	lsls	r3, r3, #7
    5adc:	4013      	ands	r3, r2
    5ade:	d1f7      	bne.n	5ad0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    5ae0:	4a0d      	ldr	r2, [pc, #52]	; (5b18 <system_gclk_chan_disable+0x88>)
    5ae2:	68fb      	ldr	r3, [r7, #12]
    5ae4:	b2db      	uxtb	r3, r3
    5ae6:	1c19      	adds	r1, r3, #0
    5ae8:	230f      	movs	r3, #15
    5aea:	400b      	ands	r3, r1
    5aec:	b2d9      	uxtb	r1, r3
    5aee:	8853      	ldrh	r3, [r2, #2]
    5af0:	1c08      	adds	r0, r1, #0
    5af2:	210f      	movs	r1, #15
    5af4:	4001      	ands	r1, r0
    5af6:	0208      	lsls	r0, r1, #8
    5af8:	4908      	ldr	r1, [pc, #32]	; (5b1c <system_gclk_chan_disable+0x8c>)
    5afa:	400b      	ands	r3, r1
    5afc:	1c19      	adds	r1, r3, #0
    5afe:	1c03      	adds	r3, r0, #0
    5b00:	430b      	orrs	r3, r1
    5b02:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    5b04:	4b07      	ldr	r3, [pc, #28]	; (5b24 <system_gclk_chan_disable+0x94>)
    5b06:	4798      	blx	r3
}
    5b08:	46c0      	nop			; (mov r8, r8)
    5b0a:	46bd      	mov	sp, r7
    5b0c:	b004      	add	sp, #16
    5b0e:	bd80      	pop	{r7, pc}
    5b10:	00005735 	.word	0x00005735
    5b14:	40000c02 	.word	0x40000c02
    5b18:	40000c00 	.word	0x40000c00
    5b1c:	fffff0ff 	.word	0xfffff0ff
    5b20:	ffffbfff 	.word	0xffffbfff
    5b24:	00005749 	.word	0x00005749

00005b28 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    5b28:	b580      	push	{r7, lr}
    5b2a:	b082      	sub	sp, #8
    5b2c:	af00      	add	r7, sp, #0
    5b2e:	0002      	movs	r2, r0
    5b30:	1dfb      	adds	r3, r7, #7
    5b32:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5b34:	4b09      	ldr	r3, [pc, #36]	; (5b5c <system_gclk_chan_lock+0x34>)
    5b36:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5b38:	4a09      	ldr	r2, [pc, #36]	; (5b60 <system_gclk_chan_lock+0x38>)
    5b3a:	1dfb      	adds	r3, r7, #7
    5b3c:	781b      	ldrb	r3, [r3, #0]
    5b3e:	7013      	strb	r3, [r2, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    5b40:	4a08      	ldr	r2, [pc, #32]	; (5b64 <system_gclk_chan_lock+0x3c>)
    5b42:	4b08      	ldr	r3, [pc, #32]	; (5b64 <system_gclk_chan_lock+0x3c>)
    5b44:	885b      	ldrh	r3, [r3, #2]
    5b46:	b29b      	uxth	r3, r3
    5b48:	4907      	ldr	r1, [pc, #28]	; (5b68 <system_gclk_chan_lock+0x40>)
    5b4a:	430b      	orrs	r3, r1
    5b4c:	b29b      	uxth	r3, r3
    5b4e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    5b50:	4b06      	ldr	r3, [pc, #24]	; (5b6c <system_gclk_chan_lock+0x44>)
    5b52:	4798      	blx	r3
}
    5b54:	46c0      	nop			; (mov r8, r8)
    5b56:	46bd      	mov	sp, r7
    5b58:	b002      	add	sp, #8
    5b5a:	bd80      	pop	{r7, pc}
    5b5c:	00005735 	.word	0x00005735
    5b60:	40000c02 	.word	0x40000c02
    5b64:	40000c00 	.word	0x40000c00
    5b68:	ffffc000 	.word	0xffffc000
    5b6c:	00005749 	.word	0x00005749

00005b70 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    5b70:	b580      	push	{r7, lr}
    5b72:	b084      	sub	sp, #16
    5b74:	af00      	add	r7, sp, #0
    5b76:	0002      	movs	r2, r0
    5b78:	1dfb      	adds	r3, r7, #7
    5b7a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    5b7c:	4b0d      	ldr	r3, [pc, #52]	; (5bb4 <system_gclk_chan_get_hz+0x44>)
    5b7e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5b80:	4a0d      	ldr	r2, [pc, #52]	; (5bb8 <system_gclk_chan_get_hz+0x48>)
    5b82:	1dfb      	adds	r3, r7, #7
    5b84:	781b      	ldrb	r3, [r3, #0]
    5b86:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    5b88:	4b0c      	ldr	r3, [pc, #48]	; (5bbc <system_gclk_chan_get_hz+0x4c>)
    5b8a:	885b      	ldrh	r3, [r3, #2]
    5b8c:	051b      	lsls	r3, r3, #20
    5b8e:	0f1b      	lsrs	r3, r3, #28
    5b90:	b2da      	uxtb	r2, r3
    5b92:	230f      	movs	r3, #15
    5b94:	18fb      	adds	r3, r7, r3
    5b96:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    5b98:	4b09      	ldr	r3, [pc, #36]	; (5bc0 <system_gclk_chan_get_hz+0x50>)
    5b9a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5b9c:	230f      	movs	r3, #15
    5b9e:	18fb      	adds	r3, r7, r3
    5ba0:	781b      	ldrb	r3, [r3, #0]
    5ba2:	0018      	movs	r0, r3
    5ba4:	4b07      	ldr	r3, [pc, #28]	; (5bc4 <system_gclk_chan_get_hz+0x54>)
    5ba6:	4798      	blx	r3
    5ba8:	0003      	movs	r3, r0
}
    5baa:	0018      	movs	r0, r3
    5bac:	46bd      	mov	sp, r7
    5bae:	b004      	add	sp, #16
    5bb0:	bd80      	pop	{r7, pc}
    5bb2:	46c0      	nop			; (mov r8, r8)
    5bb4:	00005735 	.word	0x00005735
    5bb8:	40000c02 	.word	0x40000c02
    5bbc:	40000c00 	.word	0x40000c00
    5bc0:	00005749 	.word	0x00005749
    5bc4:	0000592d 	.word	0x0000592d

00005bc8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5bc8:	b580      	push	{r7, lr}
    5bca:	b084      	sub	sp, #16
    5bcc:	af00      	add	r7, sp, #0
    5bce:	0002      	movs	r2, r0
    5bd0:	1dfb      	adds	r3, r7, #7
    5bd2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5bd4:	230f      	movs	r3, #15
    5bd6:	18fb      	adds	r3, r7, r3
    5bd8:	1dfa      	adds	r2, r7, #7
    5bda:	7812      	ldrb	r2, [r2, #0]
    5bdc:	09d2      	lsrs	r2, r2, #7
    5bde:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5be0:	230e      	movs	r3, #14
    5be2:	18fb      	adds	r3, r7, r3
    5be4:	1dfa      	adds	r2, r7, #7
    5be6:	7812      	ldrb	r2, [r2, #0]
    5be8:	0952      	lsrs	r2, r2, #5
    5bea:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5bec:	4b0d      	ldr	r3, [pc, #52]	; (5c24 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    5bee:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    5bf0:	230f      	movs	r3, #15
    5bf2:	18fb      	adds	r3, r7, r3
    5bf4:	781b      	ldrb	r3, [r3, #0]
    5bf6:	2b00      	cmp	r3, #0
    5bf8:	d10f      	bne.n	5c1a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5bfa:	230f      	movs	r3, #15
    5bfc:	18fb      	adds	r3, r7, r3
    5bfe:	781b      	ldrb	r3, [r3, #0]
    5c00:	009b      	lsls	r3, r3, #2
    5c02:	2210      	movs	r2, #16
    5c04:	4694      	mov	ip, r2
    5c06:	44bc      	add	ip, r7
    5c08:	4463      	add	r3, ip
    5c0a:	3b08      	subs	r3, #8
    5c0c:	681a      	ldr	r2, [r3, #0]
    5c0e:	230e      	movs	r3, #14
    5c10:	18fb      	adds	r3, r7, r3
    5c12:	781b      	ldrb	r3, [r3, #0]
    5c14:	01db      	lsls	r3, r3, #7
    5c16:	18d3      	adds	r3, r2, r3
    5c18:	e000      	b.n	5c1c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    5c1a:	2300      	movs	r3, #0
	}
}
    5c1c:	0018      	movs	r0, r3
    5c1e:	46bd      	mov	sp, r7
    5c20:	b004      	add	sp, #16
    5c22:	bd80      	pop	{r7, pc}
    5c24:	41004400 	.word	0x41004400

00005c28 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5c28:	b580      	push	{r7, lr}
    5c2a:	b088      	sub	sp, #32
    5c2c:	af00      	add	r7, sp, #0
    5c2e:	60f8      	str	r0, [r7, #12]
    5c30:	60b9      	str	r1, [r7, #8]
    5c32:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    5c34:	2300      	movs	r3, #0
    5c36:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5c38:	687b      	ldr	r3, [r7, #4]
    5c3a:	78db      	ldrb	r3, [r3, #3]
    5c3c:	2201      	movs	r2, #1
    5c3e:	4053      	eors	r3, r2
    5c40:	b2db      	uxtb	r3, r3
    5c42:	2b00      	cmp	r3, #0
    5c44:	d035      	beq.n	5cb2 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    5c46:	687b      	ldr	r3, [r7, #4]
    5c48:	781b      	ldrb	r3, [r3, #0]
    5c4a:	2b80      	cmp	r3, #128	; 0x80
    5c4c:	d00b      	beq.n	5c66 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    5c4e:	69fb      	ldr	r3, [r7, #28]
    5c50:	2280      	movs	r2, #128	; 0x80
    5c52:	0252      	lsls	r2, r2, #9
    5c54:	4313      	orrs	r3, r2
    5c56:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    5c58:	687b      	ldr	r3, [r7, #4]
    5c5a:	781b      	ldrb	r3, [r3, #0]
    5c5c:	061b      	lsls	r3, r3, #24
    5c5e:	001a      	movs	r2, r3
    5c60:	69fb      	ldr	r3, [r7, #28]
    5c62:	4313      	orrs	r3, r2
    5c64:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5c66:	687b      	ldr	r3, [r7, #4]
    5c68:	785b      	ldrb	r3, [r3, #1]
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	d003      	beq.n	5c76 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5c6e:	687b      	ldr	r3, [r7, #4]
    5c70:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5c72:	2b02      	cmp	r3, #2
    5c74:	d110      	bne.n	5c98 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    5c76:	69fb      	ldr	r3, [r7, #28]
    5c78:	2280      	movs	r2, #128	; 0x80
    5c7a:	0292      	lsls	r2, r2, #10
    5c7c:	4313      	orrs	r3, r2
    5c7e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5c80:	687b      	ldr	r3, [r7, #4]
    5c82:	789b      	ldrb	r3, [r3, #2]
    5c84:	2b00      	cmp	r3, #0
    5c86:	d004      	beq.n	5c92 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    5c88:	69fb      	ldr	r3, [r7, #28]
    5c8a:	2280      	movs	r2, #128	; 0x80
    5c8c:	02d2      	lsls	r2, r2, #11
    5c8e:	4313      	orrs	r3, r2
    5c90:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5c92:	68fb      	ldr	r3, [r7, #12]
    5c94:	68ba      	ldr	r2, [r7, #8]
    5c96:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5c98:	687b      	ldr	r3, [r7, #4]
    5c9a:	785b      	ldrb	r3, [r3, #1]
    5c9c:	2b01      	cmp	r3, #1
    5c9e:	d003      	beq.n	5ca8 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5ca0:	687b      	ldr	r3, [r7, #4]
    5ca2:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5ca4:	2b02      	cmp	r3, #2
    5ca6:	d107      	bne.n	5cb8 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5ca8:	69fb      	ldr	r3, [r7, #28]
    5caa:	4a22      	ldr	r2, [pc, #136]	; (5d34 <_system_pinmux_config+0x10c>)
    5cac:	4013      	ands	r3, r2
    5cae:	61fb      	str	r3, [r7, #28]
    5cb0:	e002      	b.n	5cb8 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    5cb2:	68fb      	ldr	r3, [r7, #12]
    5cb4:	68ba      	ldr	r2, [r7, #8]
    5cb6:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5cb8:	68bb      	ldr	r3, [r7, #8]
    5cba:	041b      	lsls	r3, r3, #16
    5cbc:	0c1b      	lsrs	r3, r3, #16
    5cbe:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5cc0:	68bb      	ldr	r3, [r7, #8]
    5cc2:	0c1b      	lsrs	r3, r3, #16
    5cc4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5cc6:	69ba      	ldr	r2, [r7, #24]
    5cc8:	69fb      	ldr	r3, [r7, #28]
    5cca:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5ccc:	22a0      	movs	r2, #160	; 0xa0
    5cce:	05d2      	lsls	r2, r2, #23
    5cd0:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5cd2:	68fb      	ldr	r3, [r7, #12]
    5cd4:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5cd6:	697a      	ldr	r2, [r7, #20]
    5cd8:	69fb      	ldr	r3, [r7, #28]
    5cda:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5cdc:	22d0      	movs	r2, #208	; 0xd0
    5cde:	0612      	lsls	r2, r2, #24
    5ce0:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5ce2:	68fb      	ldr	r3, [r7, #12]
    5ce4:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5ce6:	687b      	ldr	r3, [r7, #4]
    5ce8:	78db      	ldrb	r3, [r3, #3]
    5cea:	2201      	movs	r2, #1
    5cec:	4053      	eors	r3, r2
    5cee:	b2db      	uxtb	r3, r3
    5cf0:	2b00      	cmp	r3, #0
    5cf2:	d01a      	beq.n	5d2a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5cf4:	69fa      	ldr	r2, [r7, #28]
    5cf6:	2380      	movs	r3, #128	; 0x80
    5cf8:	02db      	lsls	r3, r3, #11
    5cfa:	4013      	ands	r3, r2
    5cfc:	d00a      	beq.n	5d14 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5cfe:	687b      	ldr	r3, [r7, #4]
    5d00:	789b      	ldrb	r3, [r3, #2]
    5d02:	2b01      	cmp	r3, #1
    5d04:	d103      	bne.n	5d0e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    5d06:	68fb      	ldr	r3, [r7, #12]
    5d08:	68ba      	ldr	r2, [r7, #8]
    5d0a:	619a      	str	r2, [r3, #24]
    5d0c:	e002      	b.n	5d14 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    5d0e:	68fb      	ldr	r3, [r7, #12]
    5d10:	68ba      	ldr	r2, [r7, #8]
    5d12:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5d14:	687b      	ldr	r3, [r7, #4]
    5d16:	785b      	ldrb	r3, [r3, #1]
    5d18:	2b01      	cmp	r3, #1
    5d1a:	d003      	beq.n	5d24 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5d1c:	687b      	ldr	r3, [r7, #4]
    5d1e:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5d20:	2b02      	cmp	r3, #2
    5d22:	d102      	bne.n	5d2a <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    5d24:	68fb      	ldr	r3, [r7, #12]
    5d26:	68ba      	ldr	r2, [r7, #8]
    5d28:	609a      	str	r2, [r3, #8]
		}
	}
}
    5d2a:	46c0      	nop			; (mov r8, r8)
    5d2c:	46bd      	mov	sp, r7
    5d2e:	b008      	add	sp, #32
    5d30:	bd80      	pop	{r7, pc}
    5d32:	46c0      	nop			; (mov r8, r8)
    5d34:	fffbffff 	.word	0xfffbffff

00005d38 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5d38:	b580      	push	{r7, lr}
    5d3a:	b084      	sub	sp, #16
    5d3c:	af00      	add	r7, sp, #0
    5d3e:	0002      	movs	r2, r0
    5d40:	6039      	str	r1, [r7, #0]
    5d42:	1dfb      	adds	r3, r7, #7
    5d44:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5d46:	1dfb      	adds	r3, r7, #7
    5d48:	781b      	ldrb	r3, [r3, #0]
    5d4a:	0018      	movs	r0, r3
    5d4c:	4b0a      	ldr	r3, [pc, #40]	; (5d78 <system_pinmux_pin_set_config+0x40>)
    5d4e:	4798      	blx	r3
    5d50:	0003      	movs	r3, r0
    5d52:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5d54:	1dfb      	adds	r3, r7, #7
    5d56:	781b      	ldrb	r3, [r3, #0]
    5d58:	221f      	movs	r2, #31
    5d5a:	4013      	ands	r3, r2
    5d5c:	2201      	movs	r2, #1
    5d5e:	409a      	lsls	r2, r3
    5d60:	0013      	movs	r3, r2
    5d62:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    5d64:	683a      	ldr	r2, [r7, #0]
    5d66:	68b9      	ldr	r1, [r7, #8]
    5d68:	68fb      	ldr	r3, [r7, #12]
    5d6a:	0018      	movs	r0, r3
    5d6c:	4b03      	ldr	r3, [pc, #12]	; (5d7c <system_pinmux_pin_set_config+0x44>)
    5d6e:	4798      	blx	r3
}
    5d70:	46c0      	nop			; (mov r8, r8)
    5d72:	46bd      	mov	sp, r7
    5d74:	b004      	add	sp, #16
    5d76:	bd80      	pop	{r7, pc}
    5d78:	00005bc9 	.word	0x00005bc9
    5d7c:	00005c29 	.word	0x00005c29

00005d80 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    5d80:	b580      	push	{r7, lr}
    5d82:	af00      	add	r7, sp, #0
	return;
    5d84:	46c0      	nop			; (mov r8, r8)
}
    5d86:	46bd      	mov	sp, r7
    5d88:	bd80      	pop	{r7, pc}
    5d8a:	46c0      	nop			; (mov r8, r8)

00005d8c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5d8c:	b580      	push	{r7, lr}
    5d8e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    5d90:	4b06      	ldr	r3, [pc, #24]	; (5dac <system_init+0x20>)
    5d92:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5d94:	4b06      	ldr	r3, [pc, #24]	; (5db0 <system_init+0x24>)
    5d96:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5d98:	4b06      	ldr	r3, [pc, #24]	; (5db4 <system_init+0x28>)
    5d9a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5d9c:	4b06      	ldr	r3, [pc, #24]	; (5db8 <system_init+0x2c>)
    5d9e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    5da0:	4b06      	ldr	r3, [pc, #24]	; (5dbc <system_init+0x30>)
    5da2:	4798      	blx	r3
}
    5da4:	46c0      	nop			; (mov r8, r8)
    5da6:	46bd      	mov	sp, r7
    5da8:	bd80      	pop	{r7, pc}
    5daa:	46c0      	nop			; (mov r8, r8)
    5dac:	00005515 	.word	0x00005515
    5db0:	00005101 	.word	0x00005101
    5db4:	00005d81 	.word	0x00005d81
    5db8:	00000b7d 	.word	0x00000b7d
    5dbc:	00005d81 	.word	0x00005d81

00005dc0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    5dc0:	b580      	push	{r7, lr}
    5dc2:	b082      	sub	sp, #8
    5dc4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    5dc6:	4b2f      	ldr	r3, [pc, #188]	; (5e84 <Reset_Handler+0xc4>)
    5dc8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    5dca:	4b2f      	ldr	r3, [pc, #188]	; (5e88 <Reset_Handler+0xc8>)
    5dcc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    5dce:	687a      	ldr	r2, [r7, #4]
    5dd0:	683b      	ldr	r3, [r7, #0]
    5dd2:	429a      	cmp	r2, r3
    5dd4:	d00c      	beq.n	5df0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    5dd6:	e007      	b.n	5de8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    5dd8:	683b      	ldr	r3, [r7, #0]
    5dda:	1d1a      	adds	r2, r3, #4
    5ddc:	603a      	str	r2, [r7, #0]
    5dde:	687a      	ldr	r2, [r7, #4]
    5de0:	1d11      	adds	r1, r2, #4
    5de2:	6079      	str	r1, [r7, #4]
    5de4:	6812      	ldr	r2, [r2, #0]
    5de6:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    5de8:	683a      	ldr	r2, [r7, #0]
    5dea:	4b28      	ldr	r3, [pc, #160]	; (5e8c <Reset_Handler+0xcc>)
    5dec:	429a      	cmp	r2, r3
    5dee:	d3f3      	bcc.n	5dd8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5df0:	4b27      	ldr	r3, [pc, #156]	; (5e90 <Reset_Handler+0xd0>)
    5df2:	603b      	str	r3, [r7, #0]
    5df4:	e004      	b.n	5e00 <Reset_Handler+0x40>
                *pDest++ = 0;
    5df6:	683b      	ldr	r3, [r7, #0]
    5df8:	1d1a      	adds	r2, r3, #4
    5dfa:	603a      	str	r2, [r7, #0]
    5dfc:	2200      	movs	r2, #0
    5dfe:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5e00:	683a      	ldr	r2, [r7, #0]
    5e02:	4b24      	ldr	r3, [pc, #144]	; (5e94 <Reset_Handler+0xd4>)
    5e04:	429a      	cmp	r2, r3
    5e06:	d3f6      	bcc.n	5df6 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    5e08:	4b23      	ldr	r3, [pc, #140]	; (5e98 <Reset_Handler+0xd8>)
    5e0a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5e0c:	4b23      	ldr	r3, [pc, #140]	; (5e9c <Reset_Handler+0xdc>)
    5e0e:	687a      	ldr	r2, [r7, #4]
    5e10:	21ff      	movs	r1, #255	; 0xff
    5e12:	438a      	bics	r2, r1
    5e14:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    5e16:	4a22      	ldr	r2, [pc, #136]	; (5ea0 <Reset_Handler+0xe0>)
    5e18:	2390      	movs	r3, #144	; 0x90
    5e1a:	005b      	lsls	r3, r3, #1
    5e1c:	2102      	movs	r1, #2
    5e1e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5e20:	4a20      	ldr	r2, [pc, #128]	; (5ea4 <Reset_Handler+0xe4>)
    5e22:	78d3      	ldrb	r3, [r2, #3]
    5e24:	2103      	movs	r1, #3
    5e26:	438b      	bics	r3, r1
    5e28:	1c19      	adds	r1, r3, #0
    5e2a:	2302      	movs	r3, #2
    5e2c:	430b      	orrs	r3, r1
    5e2e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5e30:	4a1c      	ldr	r2, [pc, #112]	; (5ea4 <Reset_Handler+0xe4>)
    5e32:	78d3      	ldrb	r3, [r2, #3]
    5e34:	210c      	movs	r1, #12
    5e36:	438b      	bics	r3, r1
    5e38:	1c19      	adds	r1, r3, #0
    5e3a:	2308      	movs	r3, #8
    5e3c:	430b      	orrs	r3, r1
    5e3e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    5e40:	4a19      	ldr	r2, [pc, #100]	; (5ea8 <Reset_Handler+0xe8>)
    5e42:	7b93      	ldrb	r3, [r2, #14]
    5e44:	2130      	movs	r1, #48	; 0x30
    5e46:	438b      	bics	r3, r1
    5e48:	1c19      	adds	r1, r3, #0
    5e4a:	2320      	movs	r3, #32
    5e4c:	430b      	orrs	r3, r1
    5e4e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    5e50:	4a15      	ldr	r2, [pc, #84]	; (5ea8 <Reset_Handler+0xe8>)
    5e52:	7b93      	ldrb	r3, [r2, #14]
    5e54:	210c      	movs	r1, #12
    5e56:	438b      	bics	r3, r1
    5e58:	1c19      	adds	r1, r3, #0
    5e5a:	2308      	movs	r3, #8
    5e5c:	430b      	orrs	r3, r1
    5e5e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5e60:	4a11      	ldr	r2, [pc, #68]	; (5ea8 <Reset_Handler+0xe8>)
    5e62:	7b93      	ldrb	r3, [r2, #14]
    5e64:	2103      	movs	r1, #3
    5e66:	438b      	bics	r3, r1
    5e68:	1c19      	adds	r1, r3, #0
    5e6a:	2302      	movs	r3, #2
    5e6c:	430b      	orrs	r3, r1
    5e6e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    5e70:	4a0e      	ldr	r2, [pc, #56]	; (5eac <Reset_Handler+0xec>)
    5e72:	6853      	ldr	r3, [r2, #4]
    5e74:	2180      	movs	r1, #128	; 0x80
    5e76:	430b      	orrs	r3, r1
    5e78:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    5e7a:	4b0d      	ldr	r3, [pc, #52]	; (5eb0 <Reset_Handler+0xf0>)
    5e7c:	4798      	blx	r3

        /* Branch to main function */
        main();
    5e7e:	4b0d      	ldr	r3, [pc, #52]	; (5eb4 <Reset_Handler+0xf4>)
    5e80:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    5e82:	e7fe      	b.n	5e82 <Reset_Handler+0xc2>
    5e84:	00009d2c 	.word	0x00009d2c
    5e88:	20000000 	.word	0x20000000
    5e8c:	200000fc 	.word	0x200000fc
    5e90:	200000fc 	.word	0x200000fc
    5e94:	20000378 	.word	0x20000378
    5e98:	00000000 	.word	0x00000000
    5e9c:	e000ed00 	.word	0xe000ed00
    5ea0:	41007000 	.word	0x41007000
    5ea4:	41005000 	.word	0x41005000
    5ea8:	41004800 	.word	0x41004800
    5eac:	41004000 	.word	0x41004000
    5eb0:	00008269 	.word	0x00008269
    5eb4:	00005f49 	.word	0x00005f49

00005eb8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5eb8:	b580      	push	{r7, lr}
    5eba:	b082      	sub	sp, #8
    5ebc:	af00      	add	r7, sp, #0
	int32_t phantomISR = 9999;
    5ebe:	4b04      	ldr	r3, [pc, #16]	; (5ed0 <Dummy_Handler+0x18>)
    5ec0:	607b      	str	r3, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5ec2:	f3ef 8305 	mrs	r3, IPSR
    5ec6:	603b      	str	r3, [r7, #0]
  return(result);
    5ec8:	683b      	ldr	r3, [r7, #0]
        while (1) {
			phantomISR = __get_IPSR();
    5eca:	607b      	str	r3, [r7, #4]
        }
    5ecc:	e7f9      	b.n	5ec2 <Dummy_Handler+0xa>
    5ece:	46c0      	nop			; (mov r8, r8)
    5ed0:	0000270f 	.word	0x0000270f

00005ed4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    5ed4:	b580      	push	{r7, lr}
    5ed6:	b084      	sub	sp, #16
    5ed8:	af00      	add	r7, sp, #0
    5eda:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    5edc:	4b0a      	ldr	r3, [pc, #40]	; (5f08 <_sbrk+0x34>)
    5ede:	681b      	ldr	r3, [r3, #0]
    5ee0:	2b00      	cmp	r3, #0
    5ee2:	d102      	bne.n	5eea <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    5ee4:	4b08      	ldr	r3, [pc, #32]	; (5f08 <_sbrk+0x34>)
    5ee6:	4a09      	ldr	r2, [pc, #36]	; (5f0c <_sbrk+0x38>)
    5ee8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    5eea:	4b07      	ldr	r3, [pc, #28]	; (5f08 <_sbrk+0x34>)
    5eec:	681b      	ldr	r3, [r3, #0]
    5eee:	60fb      	str	r3, [r7, #12]

	heap += incr;
    5ef0:	4b05      	ldr	r3, [pc, #20]	; (5f08 <_sbrk+0x34>)
    5ef2:	681a      	ldr	r2, [r3, #0]
    5ef4:	687b      	ldr	r3, [r7, #4]
    5ef6:	18d2      	adds	r2, r2, r3
    5ef8:	4b03      	ldr	r3, [pc, #12]	; (5f08 <_sbrk+0x34>)
    5efa:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    5efc:	68fb      	ldr	r3, [r7, #12]
}
    5efe:	0018      	movs	r0, r3
    5f00:	46bd      	mov	sp, r7
    5f02:	b004      	add	sp, #16
    5f04:	bd80      	pop	{r7, pc}
    5f06:	46c0      	nop			; (mov r8, r8)
    5f08:	20000144 	.word	0x20000144
    5f0c:	20002378 	.word	0x20002378

00005f10 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    5f10:	b580      	push	{r7, lr}
    5f12:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    5f14:	4b04      	ldr	r3, [pc, #16]	; (5f28 <system_interrupt_enable_global+0x18>)
    5f16:	2201      	movs	r2, #1
    5f18:	701a      	strb	r2, [r3, #0]
    5f1a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    5f1e:	b662      	cpsie	i
}
    5f20:	46c0      	nop			; (mov r8, r8)
    5f22:	46bd      	mov	sp, r7
    5f24:	bd80      	pop	{r7, pc}
    5f26:	46c0      	nop			; (mov r8, r8)
    5f28:	20000091 	.word	0x20000091

00005f2c <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    5f2c:	b580      	push	{r7, lr}
    5f2e:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5f30:	b672      	cpsid	i
    5f32:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5f36:	4b03      	ldr	r3, [pc, #12]	; (5f44 <system_interrupt_disable_global+0x18>)
    5f38:	2200      	movs	r2, #0
    5f3a:	701a      	strb	r2, [r3, #0]
}
    5f3c:	46c0      	nop			; (mov r8, r8)
    5f3e:	46bd      	mov	sp, r7
    5f40:	bd80      	pop	{r7, pc}
    5f42:	46c0      	nop			; (mov r8, r8)
    5f44:	20000091 	.word	0x20000091

00005f48 <main>:
char buffer[32];



int main (void)
{
    5f48:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f4a:	b08f      	sub	sp, #60	; 0x3c
    5f4c:	af00      	add	r7, sp, #0
	
	system_init();
    5f4e:	4b5d      	ldr	r3, [pc, #372]	; (60c4 <main+0x17c>)
    5f50:	4798      	blx	r3
	delay_init();
    5f52:	4b5d      	ldr	r3, [pc, #372]	; (60c8 <main+0x180>)
    5f54:	4798      	blx	r3
	ble_uart_init();
    5f56:	4b5d      	ldr	r3, [pc, #372]	; (60cc <main+0x184>)
    5f58:	4798      	blx	r3
	uart_init();
    5f5a:	4b5d      	ldr	r3, [pc, #372]	; (60d0 <main+0x188>)
    5f5c:	4798      	blx	r3
	sprintf(buffer,"\n<-------------------->\n");
    5f5e:	4a5d      	ldr	r2, [pc, #372]	; (60d4 <main+0x18c>)
    5f60:	4b5d      	ldr	r3, [pc, #372]	; (60d8 <main+0x190>)
    5f62:	0010      	movs	r0, r2
    5f64:	0019      	movs	r1, r3
    5f66:	2319      	movs	r3, #25
    5f68:	001a      	movs	r2, r3
    5f6a:	4b5c      	ldr	r3, [pc, #368]	; (60dc <main+0x194>)
    5f6c:	4798      	blx	r3
	ble_uart_write(buffer);
    5f6e:	4b59      	ldr	r3, [pc, #356]	; (60d4 <main+0x18c>)
    5f70:	0018      	movs	r0, r3
    5f72:	4b5b      	ldr	r3, [pc, #364]	; (60e0 <main+0x198>)
    5f74:	4798      	blx	r3
	uart_write(buffer);
    5f76:	4b57      	ldr	r3, [pc, #348]	; (60d4 <main+0x18c>)
    5f78:	0018      	movs	r0, r3
    5f7a:	4b5a      	ldr	r3, [pc, #360]	; (60e4 <main+0x19c>)
    5f7c:	4798      	blx	r3
	delay_ms(2000);
    5f7e:	2000      	movs	r0, #0
    5f80:	4b59      	ldr	r3, [pc, #356]	; (60e8 <main+0x1a0>)
    5f82:	4798      	blx	r3
    5f84:	0003      	movs	r3, r0
    5f86:	001d      	movs	r5, r3
    5f88:	2300      	movs	r3, #0
    5f8a:	001e      	movs	r6, r3
    5f8c:	4c57      	ldr	r4, [pc, #348]	; (60ec <main+0x1a4>)
    5f8e:	22fa      	movs	r2, #250	; 0xfa
    5f90:	00d2      	lsls	r2, r2, #3
    5f92:	2300      	movs	r3, #0
    5f94:	0028      	movs	r0, r5
    5f96:	0031      	movs	r1, r6
    5f98:	47a0      	blx	r4
    5f9a:	0003      	movs	r3, r0
    5f9c:	000c      	movs	r4, r1
    5f9e:	0019      	movs	r1, r3
    5fa0:	0022      	movs	r2, r4
    5fa2:	4b53      	ldr	r3, [pc, #332]	; (60f0 <main+0x1a8>)
    5fa4:	2400      	movs	r4, #0
    5fa6:	18c9      	adds	r1, r1, r3
    5fa8:	4162      	adcs	r2, r4
    5faa:	0008      	movs	r0, r1
    5fac:	0011      	movs	r1, r2
    5fae:	4c51      	ldr	r4, [pc, #324]	; (60f4 <main+0x1ac>)
    5fb0:	4a51      	ldr	r2, [pc, #324]	; (60f8 <main+0x1b0>)
    5fb2:	2300      	movs	r3, #0
    5fb4:	47a0      	blx	r4
    5fb6:	0003      	movs	r3, r0
    5fb8:	000c      	movs	r4, r1
    5fba:	0018      	movs	r0, r3
    5fbc:	4b4f      	ldr	r3, [pc, #316]	; (60fc <main+0x1b4>)
    5fbe:	4798      	blx	r3
	sprintf(buffer,"Master Board Started\n");
    5fc0:	4a44      	ldr	r2, [pc, #272]	; (60d4 <main+0x18c>)
    5fc2:	4b4f      	ldr	r3, [pc, #316]	; (6100 <main+0x1b8>)
    5fc4:	0010      	movs	r0, r2
    5fc6:	0019      	movs	r1, r3
    5fc8:	2316      	movs	r3, #22
    5fca:	001a      	movs	r2, r3
    5fcc:	4b43      	ldr	r3, [pc, #268]	; (60dc <main+0x194>)
    5fce:	4798      	blx	r3
	ble_uart_write(buffer);
    5fd0:	4b40      	ldr	r3, [pc, #256]	; (60d4 <main+0x18c>)
    5fd2:	0018      	movs	r0, r3
    5fd4:	4b42      	ldr	r3, [pc, #264]	; (60e0 <main+0x198>)
    5fd6:	4798      	blx	r3
	uart_write(buffer);
    5fd8:	4b3e      	ldr	r3, [pc, #248]	; (60d4 <main+0x18c>)
    5fda:	0018      	movs	r0, r3
    5fdc:	4b41      	ldr	r3, [pc, #260]	; (60e4 <main+0x19c>)
    5fde:	4798      	blx	r3
	sprintf(buffer,"SOFTWARE_VERSION: %d\r\n", SOFTWARE_VERSION);
    5fe0:	4948      	ldr	r1, [pc, #288]	; (6104 <main+0x1bc>)
    5fe2:	4b3c      	ldr	r3, [pc, #240]	; (60d4 <main+0x18c>)
    5fe4:	222a      	movs	r2, #42	; 0x2a
    5fe6:	0018      	movs	r0, r3
    5fe8:	4b47      	ldr	r3, [pc, #284]	; (6108 <main+0x1c0>)
    5fea:	4798      	blx	r3
	ble_uart_write(buffer);
    5fec:	4b39      	ldr	r3, [pc, #228]	; (60d4 <main+0x18c>)
    5fee:	0018      	movs	r0, r3
    5ff0:	4b3b      	ldr	r3, [pc, #236]	; (60e0 <main+0x198>)
    5ff2:	4798      	blx	r3
	uart_write(buffer);
    5ff4:	4b37      	ldr	r3, [pc, #220]	; (60d4 <main+0x18c>)
    5ff6:	0018      	movs	r0, r3
    5ff8:	4b3a      	ldr	r3, [pc, #232]	; (60e4 <main+0x19c>)
    5ffa:	4798      	blx	r3
	sprintf(buffer,"<-------------------->\n\n");
    5ffc:	4a35      	ldr	r2, [pc, #212]	; (60d4 <main+0x18c>)
    5ffe:	4b43      	ldr	r3, [pc, #268]	; (610c <main+0x1c4>)
    6000:	0010      	movs	r0, r2
    6002:	0019      	movs	r1, r3
    6004:	2319      	movs	r3, #25
    6006:	001a      	movs	r2, r3
    6008:	4b34      	ldr	r3, [pc, #208]	; (60dc <main+0x194>)
    600a:	4798      	blx	r3
	ble_uart_write(buffer);
    600c:	4b31      	ldr	r3, [pc, #196]	; (60d4 <main+0x18c>)
    600e:	0018      	movs	r0, r3
    6010:	4b33      	ldr	r3, [pc, #204]	; (60e0 <main+0x198>)
    6012:	4798      	blx	r3
	uart_write(buffer);
    6014:	4b2f      	ldr	r3, [pc, #188]	; (60d4 <main+0x18c>)
    6016:	0018      	movs	r0, r3
    6018:	4b32      	ldr	r3, [pc, #200]	; (60e4 <main+0x19c>)
    601a:	4798      	blx	r3
	mcp23017_pin_init();
    601c:	4b3c      	ldr	r3, [pc, #240]	; (6110 <main+0x1c8>)
    601e:	4798      	blx	r3
	
	configure_i2c_master();
    6020:	4b3c      	ldr	r3, [pc, #240]	; (6114 <main+0x1cc>)
    6022:	4798      	blx	r3
	
	uint8_t states = init_all_ports();
    6024:	2336      	movs	r3, #54	; 0x36
    6026:	18fc      	adds	r4, r7, r3
    6028:	4b3b      	ldr	r3, [pc, #236]	; (6118 <main+0x1d0>)
    602a:	4798      	blx	r3
    602c:	0003      	movs	r3, r0
    602e:	7023      	strb	r3, [r4, #0]
	
	//ble_uart_write(buffer);
	

	
	sounds_init_pins();
    6030:	4b3a      	ldr	r3, [pc, #232]	; (611c <main+0x1d4>)
    6032:	4798      	blx	r3
	
	//sounds_reset();
	
	pwm_port();
    6034:	4b3a      	ldr	r3, [pc, #232]	; (6120 <main+0x1d8>)
    6036:	4798      	blx	r3
	init_TC3();
    6038:	4b3a      	ldr	r3, [pc, #232]	; (6124 <main+0x1dc>)
    603a:	4798      	blx	r3
	
	msgeq7_init();
    603c:	4b3a      	ldr	r3, [pc, #232]	; (6128 <main+0x1e0>)
    603e:	4798      	blx	r3
	//select_sample();
	
	//party = true;
	
	party_thresholds[0] = 1375;
    6040:	4a3a      	ldr	r2, [pc, #232]	; (612c <main+0x1e4>)
    6042:	4b3b      	ldr	r3, [pc, #236]	; (6130 <main+0x1e8>)
    6044:	8013      	strh	r3, [r2, #0]
	party_thresholds[1] = 1550;
    6046:	4a39      	ldr	r2, [pc, #228]	; (612c <main+0x1e4>)
    6048:	4b3a      	ldr	r3, [pc, #232]	; (6134 <main+0x1ec>)
    604a:	8053      	strh	r3, [r2, #2]
	party_thresholds[2] = 1400;
    604c:	4a37      	ldr	r2, [pc, #220]	; (612c <main+0x1e4>)
    604e:	23af      	movs	r3, #175	; 0xaf
    6050:	00db      	lsls	r3, r3, #3
    6052:	8093      	strh	r3, [r2, #4]
	party_thresholds[3] = 2500;
    6054:	4a35      	ldr	r2, [pc, #212]	; (612c <main+0x1e4>)
    6056:	4b38      	ldr	r3, [pc, #224]	; (6138 <main+0x1f0>)
    6058:	80d3      	strh	r3, [r2, #6]
	party_thresholds[4] = 3000;
    605a:	4a34      	ldr	r2, [pc, #208]	; (612c <main+0x1e4>)
    605c:	4b37      	ldr	r3, [pc, #220]	; (613c <main+0x1f4>)
    605e:	8113      	strh	r3, [r2, #8]
	party_thresholds[5] = 2000;
    6060:	4a32      	ldr	r2, [pc, #200]	; (612c <main+0x1e4>)
    6062:	23fa      	movs	r3, #250	; 0xfa
    6064:	00db      	lsls	r3, r3, #3
    6066:	8153      	strh	r3, [r2, #10]
	party_thresholds[6] = 2375;
    6068:	4a30      	ldr	r2, [pc, #192]	; (612c <main+0x1e4>)
    606a:	4b35      	ldr	r3, [pc, #212]	; (6140 <main+0x1f8>)
    606c:	8193      	strh	r3, [r2, #12]
	 
	
	while (1)
	{
		for (uint8_t i=0;i<sizeof(rx_buffer_array);i++)
    606e:	2337      	movs	r3, #55	; 0x37
    6070:	18fa      	adds	r2, r7, r3
    6072:	2300      	movs	r3, #0
    6074:	7013      	strb	r3, [r2, #0]
    6076:	e01d      	b.n	60b4 <main+0x16c>
		{
			if (rx_buffer_array[i] == '\n')
    6078:	2337      	movs	r3, #55	; 0x37
    607a:	18fb      	adds	r3, r7, r3
    607c:	781a      	ldrb	r2, [r3, #0]
    607e:	4b31      	ldr	r3, [pc, #196]	; (6144 <main+0x1fc>)
    6080:	5c9b      	ldrb	r3, [r3, r2]
    6082:	b2db      	uxtb	r3, r3
    6084:	2b0a      	cmp	r3, #10
    6086:	d106      	bne.n	6096 <main+0x14e>
			{
				data_handler(rx_buffer_array);
    6088:	4b2e      	ldr	r3, [pc, #184]	; (6144 <main+0x1fc>)
    608a:	0018      	movs	r0, r3
    608c:	4b2e      	ldr	r3, [pc, #184]	; (6148 <main+0x200>)
    608e:	4798      	blx	r3
				reset_buffers();
    6090:	4b2e      	ldr	r3, [pc, #184]	; (614c <main+0x204>)
    6092:	4798      	blx	r3
    6094:	e007      	b.n	60a6 <main+0x15e>
			}
			else if (rx_buffer_array[i] == 0)
    6096:	2337      	movs	r3, #55	; 0x37
    6098:	18fb      	adds	r3, r7, r3
    609a:	781a      	ldrb	r2, [r3, #0]
    609c:	4b29      	ldr	r3, [pc, #164]	; (6144 <main+0x1fc>)
    609e:	5c9b      	ldrb	r3, [r3, r2]
    60a0:	b2db      	uxtb	r3, r3
    60a2:	2b00      	cmp	r3, #0
    60a4:	d054      	beq.n	6150 <main+0x208>
	party_thresholds[6] = 2375;
	 
	
	while (1)
	{
		for (uint8_t i=0;i<sizeof(rx_buffer_array);i++)
    60a6:	2337      	movs	r3, #55	; 0x37
    60a8:	18fb      	adds	r3, r7, r3
    60aa:	781b      	ldrb	r3, [r3, #0]
    60ac:	2237      	movs	r2, #55	; 0x37
    60ae:	18ba      	adds	r2, r7, r2
    60b0:	3301      	adds	r3, #1
    60b2:	7013      	strb	r3, [r2, #0]
    60b4:	2337      	movs	r3, #55	; 0x37
    60b6:	18fb      	adds	r3, r7, r3
    60b8:	781b      	ldrb	r3, [r3, #0]
    60ba:	b25b      	sxtb	r3, r3
    60bc:	2b00      	cmp	r3, #0
    60be:	dadb      	bge.n	6078 <main+0x130>
    60c0:	e047      	b.n	6152 <main+0x20a>
    60c2:	46c0      	nop			; (mov r8, r8)
    60c4:	00005d8d 	.word	0x00005d8d
    60c8:	00000181 	.word	0x00000181
    60cc:	00001fa5 	.word	0x00001fa5
    60d0:	00004f61 	.word	0x00004f61
    60d4:	20000328 	.word	0x20000328
    60d8:	00009a5c 	.word	0x00009a5c
    60dc:	000082b5 	.word	0x000082b5
    60e0:	0000202d 	.word	0x0000202d
    60e4:	000050b9 	.word	0x000050b9
    60e8:	0000592d 	.word	0x0000592d
    60ec:	00006741 	.word	0x00006741
    60f0:	00001b57 	.word	0x00001b57
    60f4:	00006701 	.word	0x00006701
    60f8:	00001b58 	.word	0x00001b58
    60fc:	20000001 	.word	0x20000001
    6100:	00009a78 	.word	0x00009a78
    6104:	00009a90 	.word	0x00009a90
    6108:	000082c9 	.word	0x000082c9
    610c:	00009aa8 	.word	0x00009aa8
    6110:	00004209 	.word	0x00004209
    6114:	00003ce9 	.word	0x00003ce9
    6118:	00003fe9 	.word	0x00003fe9
    611c:	00004bcd 	.word	0x00004bcd
    6120:	000048d9 	.word	0x000048d9
    6124:	00004919 	.word	0x00004919
    6128:	0000452d 	.word	0x0000452d
    612c:	200001b4 	.word	0x200001b4
    6130:	0000055f 	.word	0x0000055f
    6134:	0000060e 	.word	0x0000060e
    6138:	000009c4 	.word	0x000009c4
    613c:	00000bb8 	.word	0x00000bb8
    6140:	00000947 	.word	0x00000947
    6144:	200001c4 	.word	0x200001c4
    6148:	00002125 	.word	0x00002125
    614c:	000020e1 	.word	0x000020e1
				data_handler(rx_buffer_array);
				reset_buffers();
			}
			else if (rx_buffer_array[i] == 0)
			{
				break;
    6150:	46c0      	nop			; (mov r8, r8)
			}
		}
		
		if (should_update)
    6152:	4ba0      	ldr	r3, [pc, #640]	; (63d4 <main+0x48c>)
    6154:	781b      	ldrb	r3, [r3, #0]
    6156:	2b00      	cmp	r3, #0
    6158:	d006      	beq.n	6168 <main+0x220>
		{
			should_update = false;
    615a:	4a9e      	ldr	r2, [pc, #632]	; (63d4 <main+0x48c>)
    615c:	2300      	movs	r3, #0
    615e:	7013      	strb	r3, [r2, #0]
			things_to_do();
    6160:	4b9d      	ldr	r3, [pc, #628]	; (63d8 <main+0x490>)
    6162:	4798      	blx	r3
			update_all_ports();
    6164:	4b9d      	ldr	r3, [pc, #628]	; (63dc <main+0x494>)
    6166:	4798      	blx	r3
		}
		if (execute_order_66)
    6168:	4b9d      	ldr	r3, [pc, #628]	; (63e0 <main+0x498>)
    616a:	781b      	ldrb	r3, [r3, #0]
    616c:	2b00      	cmp	r3, #0
    616e:	d004      	beq.n	617a <main+0x232>
		{
			execute_order_66 = false;
    6170:	4a9b      	ldr	r2, [pc, #620]	; (63e0 <main+0x498>)
    6172:	2300      	movs	r3, #0
    6174:	7013      	strb	r3, [r2, #0]
			a_okay();
    6176:	4b9b      	ldr	r3, [pc, #620]	; (63e4 <main+0x49c>)
    6178:	4798      	blx	r3
		}
		
		if (valve_open)
    617a:	4b9b      	ldr	r3, [pc, #620]	; (63e8 <main+0x4a0>)
    617c:	781b      	ldrb	r3, [r3, #0]
    617e:	b2db      	uxtb	r3, r3
    6180:	2b00      	cmp	r3, #0
    6182:	d100      	bne.n	6186 <main+0x23e>
    6184:	e08f      	b.n	62a6 <main+0x35e>
		{
			system_interrupt_disable_global();
    6186:	4b99      	ldr	r3, [pc, #612]	; (63ec <main+0x4a4>)
    6188:	4798      	blx	r3
			valve_open = false;
    618a:	4a97      	ldr	r2, [pc, #604]	; (63e8 <main+0x4a0>)
    618c:	2300      	movs	r3, #0
    618e:	7013      	strb	r3, [r2, #0]
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,true);
    6190:	2301      	movs	r3, #1
    6192:	2200      	movs	r2, #0
    6194:	2105      	movs	r1, #5
    6196:	2000      	movs	r0, #0
    6198:	4c95      	ldr	r4, [pc, #596]	; (63f0 <main+0x4a8>)
    619a:	47a0      	blx	r4
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    619c:	2300      	movs	r3, #0
    619e:	2201      	movs	r2, #1
    61a0:	2105      	movs	r1, #5
    61a2:	2000      	movs	r0, #0
    61a4:	4c92      	ldr	r4, [pc, #584]	; (63f0 <main+0x4a8>)
    61a6:	47a0      	blx	r4
			update_all_ports();
    61a8:	4b8c      	ldr	r3, [pc, #560]	; (63dc <main+0x494>)
    61aa:	4798      	blx	r3
			delay_ms(300);
    61ac:	2000      	movs	r0, #0
    61ae:	4b91      	ldr	r3, [pc, #580]	; (63f4 <main+0x4ac>)
    61b0:	4798      	blx	r3
    61b2:	0003      	movs	r3, r0
    61b4:	62bb      	str	r3, [r7, #40]	; 0x28
    61b6:	2300      	movs	r3, #0
    61b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    61ba:	4c8f      	ldr	r4, [pc, #572]	; (63f8 <main+0x4b0>)
    61bc:	2296      	movs	r2, #150	; 0x96
    61be:	0052      	lsls	r2, r2, #1
    61c0:	2300      	movs	r3, #0
    61c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    61c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    61c6:	47a0      	blx	r4
    61c8:	0003      	movs	r3, r0
    61ca:	000c      	movs	r4, r1
    61cc:	0019      	movs	r1, r3
    61ce:	0022      	movs	r2, r4
    61d0:	4b8a      	ldr	r3, [pc, #552]	; (63fc <main+0x4b4>)
    61d2:	2400      	movs	r4, #0
    61d4:	18c9      	adds	r1, r1, r3
    61d6:	4162      	adcs	r2, r4
    61d8:	0008      	movs	r0, r1
    61da:	0011      	movs	r1, r2
    61dc:	4c88      	ldr	r4, [pc, #544]	; (6400 <main+0x4b8>)
    61de:	4a89      	ldr	r2, [pc, #548]	; (6404 <main+0x4bc>)
    61e0:	2300      	movs	r3, #0
    61e2:	47a0      	blx	r4
    61e4:	0003      	movs	r3, r0
    61e6:	000c      	movs	r4, r1
    61e8:	0018      	movs	r0, r3
    61ea:	4b87      	ldr	r3, [pc, #540]	; (6408 <main+0x4c0>)
    61ec:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    61ee:	2300      	movs	r3, #0
    61f0:	2200      	movs	r2, #0
    61f2:	2105      	movs	r1, #5
    61f4:	2000      	movs	r0, #0
    61f6:	4c7e      	ldr	r4, [pc, #504]	; (63f0 <main+0x4a8>)
    61f8:	47a0      	blx	r4
			update_all_ports();
    61fa:	4b78      	ldr	r3, [pc, #480]	; (63dc <main+0x494>)
    61fc:	4798      	blx	r3
			delay_ms(4000);
    61fe:	2000      	movs	r0, #0
    6200:	4b7c      	ldr	r3, [pc, #496]	; (63f4 <main+0x4ac>)
    6202:	4798      	blx	r3
    6204:	0003      	movs	r3, r0
    6206:	623b      	str	r3, [r7, #32]
    6208:	2300      	movs	r3, #0
    620a:	627b      	str	r3, [r7, #36]	; 0x24
    620c:	4c7a      	ldr	r4, [pc, #488]	; (63f8 <main+0x4b0>)
    620e:	22fa      	movs	r2, #250	; 0xfa
    6210:	0112      	lsls	r2, r2, #4
    6212:	2300      	movs	r3, #0
    6214:	6a38      	ldr	r0, [r7, #32]
    6216:	6a79      	ldr	r1, [r7, #36]	; 0x24
    6218:	47a0      	blx	r4
    621a:	0003      	movs	r3, r0
    621c:	000c      	movs	r4, r1
    621e:	0019      	movs	r1, r3
    6220:	0022      	movs	r2, r4
    6222:	4b76      	ldr	r3, [pc, #472]	; (63fc <main+0x4b4>)
    6224:	2400      	movs	r4, #0
    6226:	18c9      	adds	r1, r1, r3
    6228:	4162      	adcs	r2, r4
    622a:	0008      	movs	r0, r1
    622c:	0011      	movs	r1, r2
    622e:	4c74      	ldr	r4, [pc, #464]	; (6400 <main+0x4b8>)
    6230:	4a74      	ldr	r2, [pc, #464]	; (6404 <main+0x4bc>)
    6232:	2300      	movs	r3, #0
    6234:	47a0      	blx	r4
    6236:	0003      	movs	r3, r0
    6238:	000c      	movs	r4, r1
    623a:	0018      	movs	r0, r3
    623c:	4b72      	ldr	r3, [pc, #456]	; (6408 <main+0x4c0>)
    623e:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,true);
    6240:	2301      	movs	r3, #1
    6242:	2200      	movs	r2, #0
    6244:	2105      	movs	r1, #5
    6246:	2000      	movs	r0, #0
    6248:	4c69      	ldr	r4, [pc, #420]	; (63f0 <main+0x4a8>)
    624a:	47a0      	blx	r4
			update_all_ports();
    624c:	4b63      	ldr	r3, [pc, #396]	; (63dc <main+0x494>)
    624e:	4798      	blx	r3
			delay_ms(300);
    6250:	2000      	movs	r0, #0
    6252:	4b68      	ldr	r3, [pc, #416]	; (63f4 <main+0x4ac>)
    6254:	4798      	blx	r3
    6256:	0003      	movs	r3, r0
    6258:	61bb      	str	r3, [r7, #24]
    625a:	2300      	movs	r3, #0
    625c:	61fb      	str	r3, [r7, #28]
    625e:	4c66      	ldr	r4, [pc, #408]	; (63f8 <main+0x4b0>)
    6260:	2296      	movs	r2, #150	; 0x96
    6262:	0052      	lsls	r2, r2, #1
    6264:	2300      	movs	r3, #0
    6266:	69b8      	ldr	r0, [r7, #24]
    6268:	69f9      	ldr	r1, [r7, #28]
    626a:	47a0      	blx	r4
    626c:	0003      	movs	r3, r0
    626e:	000c      	movs	r4, r1
    6270:	0019      	movs	r1, r3
    6272:	0022      	movs	r2, r4
    6274:	4b61      	ldr	r3, [pc, #388]	; (63fc <main+0x4b4>)
    6276:	2400      	movs	r4, #0
    6278:	18c9      	adds	r1, r1, r3
    627a:	4162      	adcs	r2, r4
    627c:	0008      	movs	r0, r1
    627e:	0011      	movs	r1, r2
    6280:	4c5f      	ldr	r4, [pc, #380]	; (6400 <main+0x4b8>)
    6282:	4a60      	ldr	r2, [pc, #384]	; (6404 <main+0x4bc>)
    6284:	2300      	movs	r3, #0
    6286:	47a0      	blx	r4
    6288:	0003      	movs	r3, r0
    628a:	000c      	movs	r4, r1
    628c:	0018      	movs	r0, r3
    628e:	4b5e      	ldr	r3, [pc, #376]	; (6408 <main+0x4c0>)
    6290:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    6292:	2300      	movs	r3, #0
    6294:	2200      	movs	r2, #0
    6296:	2105      	movs	r1, #5
    6298:	2000      	movs	r0, #0
    629a:	4c55      	ldr	r4, [pc, #340]	; (63f0 <main+0x4a8>)
    629c:	47a0      	blx	r4
			update_all_ports();
    629e:	4b4f      	ldr	r3, [pc, #316]	; (63dc <main+0x494>)
    62a0:	4798      	blx	r3
			system_interrupt_enable_global();
    62a2:	4b5a      	ldr	r3, [pc, #360]	; (640c <main+0x4c4>)
    62a4:	4798      	blx	r3
		}
		if (valve_close)
    62a6:	4b5a      	ldr	r3, [pc, #360]	; (6410 <main+0x4c8>)
    62a8:	781b      	ldrb	r3, [r3, #0]
    62aa:	b2db      	uxtb	r3, r3
    62ac:	2b00      	cmp	r3, #0
    62ae:	d100      	bne.n	62b2 <main+0x36a>
    62b0:	e6dd      	b.n	606e <main+0x126>
		{
			system_interrupt_disable_global();
    62b2:	4b4e      	ldr	r3, [pc, #312]	; (63ec <main+0x4a4>)
    62b4:	4798      	blx	r3
			valve_close = false;
    62b6:	4a56      	ldr	r2, [pc, #344]	; (6410 <main+0x4c8>)
    62b8:	2300      	movs	r3, #0
    62ba:	7013      	strb	r3, [r2, #0]
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    62bc:	2300      	movs	r3, #0
    62be:	2200      	movs	r2, #0
    62c0:	2105      	movs	r1, #5
    62c2:	2000      	movs	r0, #0
    62c4:	4c4a      	ldr	r4, [pc, #296]	; (63f0 <main+0x4a8>)
    62c6:	47a0      	blx	r4
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,true);
    62c8:	2301      	movs	r3, #1
    62ca:	2201      	movs	r2, #1
    62cc:	2105      	movs	r1, #5
    62ce:	2000      	movs	r0, #0
    62d0:	4c47      	ldr	r4, [pc, #284]	; (63f0 <main+0x4a8>)
    62d2:	47a0      	blx	r4
			update_all_ports();
    62d4:	4b41      	ldr	r3, [pc, #260]	; (63dc <main+0x494>)
    62d6:	4798      	blx	r3
			delay_ms(300);
    62d8:	2000      	movs	r0, #0
    62da:	4b46      	ldr	r3, [pc, #280]	; (63f4 <main+0x4ac>)
    62dc:	4798      	blx	r3
    62de:	0003      	movs	r3, r0
    62e0:	613b      	str	r3, [r7, #16]
    62e2:	2300      	movs	r3, #0
    62e4:	617b      	str	r3, [r7, #20]
    62e6:	4c44      	ldr	r4, [pc, #272]	; (63f8 <main+0x4b0>)
    62e8:	2296      	movs	r2, #150	; 0x96
    62ea:	0052      	lsls	r2, r2, #1
    62ec:	2300      	movs	r3, #0
    62ee:	6938      	ldr	r0, [r7, #16]
    62f0:	6979      	ldr	r1, [r7, #20]
    62f2:	47a0      	blx	r4
    62f4:	0003      	movs	r3, r0
    62f6:	000c      	movs	r4, r1
    62f8:	0019      	movs	r1, r3
    62fa:	0022      	movs	r2, r4
    62fc:	4b3f      	ldr	r3, [pc, #252]	; (63fc <main+0x4b4>)
    62fe:	2400      	movs	r4, #0
    6300:	18c9      	adds	r1, r1, r3
    6302:	4162      	adcs	r2, r4
    6304:	0008      	movs	r0, r1
    6306:	0011      	movs	r1, r2
    6308:	4c3d      	ldr	r4, [pc, #244]	; (6400 <main+0x4b8>)
    630a:	4a3e      	ldr	r2, [pc, #248]	; (6404 <main+0x4bc>)
    630c:	2300      	movs	r3, #0
    630e:	47a0      	blx	r4
    6310:	0003      	movs	r3, r0
    6312:	000c      	movs	r4, r1
    6314:	0018      	movs	r0, r3
    6316:	4b3c      	ldr	r3, [pc, #240]	; (6408 <main+0x4c0>)
    6318:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    631a:	2300      	movs	r3, #0
    631c:	2201      	movs	r2, #1
    631e:	2105      	movs	r1, #5
    6320:	2000      	movs	r0, #0
    6322:	4c33      	ldr	r4, [pc, #204]	; (63f0 <main+0x4a8>)
    6324:	47a0      	blx	r4
			update_all_ports();
    6326:	4b2d      	ldr	r3, [pc, #180]	; (63dc <main+0x494>)
    6328:	4798      	blx	r3
			delay_ms(4000);
    632a:	2000      	movs	r0, #0
    632c:	4b31      	ldr	r3, [pc, #196]	; (63f4 <main+0x4ac>)
    632e:	4798      	blx	r3
    6330:	0003      	movs	r3, r0
    6332:	60bb      	str	r3, [r7, #8]
    6334:	2300      	movs	r3, #0
    6336:	60fb      	str	r3, [r7, #12]
    6338:	4c2f      	ldr	r4, [pc, #188]	; (63f8 <main+0x4b0>)
    633a:	22fa      	movs	r2, #250	; 0xfa
    633c:	0112      	lsls	r2, r2, #4
    633e:	2300      	movs	r3, #0
    6340:	68b8      	ldr	r0, [r7, #8]
    6342:	68f9      	ldr	r1, [r7, #12]
    6344:	47a0      	blx	r4
    6346:	0003      	movs	r3, r0
    6348:	000c      	movs	r4, r1
    634a:	0019      	movs	r1, r3
    634c:	0022      	movs	r2, r4
    634e:	4b2b      	ldr	r3, [pc, #172]	; (63fc <main+0x4b4>)
    6350:	2400      	movs	r4, #0
    6352:	18c9      	adds	r1, r1, r3
    6354:	4162      	adcs	r2, r4
    6356:	0008      	movs	r0, r1
    6358:	0011      	movs	r1, r2
    635a:	4c29      	ldr	r4, [pc, #164]	; (6400 <main+0x4b8>)
    635c:	4a29      	ldr	r2, [pc, #164]	; (6404 <main+0x4bc>)
    635e:	2300      	movs	r3, #0
    6360:	47a0      	blx	r4
    6362:	0003      	movs	r3, r0
    6364:	000c      	movs	r4, r1
    6366:	0018      	movs	r0, r3
    6368:	4b27      	ldr	r3, [pc, #156]	; (6408 <main+0x4c0>)
    636a:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,true);
    636c:	2301      	movs	r3, #1
    636e:	2201      	movs	r2, #1
    6370:	2105      	movs	r1, #5
    6372:	2000      	movs	r0, #0
    6374:	4c1e      	ldr	r4, [pc, #120]	; (63f0 <main+0x4a8>)
    6376:	47a0      	blx	r4
			update_all_ports();
    6378:	4b18      	ldr	r3, [pc, #96]	; (63dc <main+0x494>)
    637a:	4798      	blx	r3
			delay_ms(300);
    637c:	2000      	movs	r0, #0
    637e:	4b1d      	ldr	r3, [pc, #116]	; (63f4 <main+0x4ac>)
    6380:	4798      	blx	r3
    6382:	0003      	movs	r3, r0
    6384:	603b      	str	r3, [r7, #0]
    6386:	2300      	movs	r3, #0
    6388:	607b      	str	r3, [r7, #4]
    638a:	4c1b      	ldr	r4, [pc, #108]	; (63f8 <main+0x4b0>)
    638c:	2296      	movs	r2, #150	; 0x96
    638e:	0052      	lsls	r2, r2, #1
    6390:	2300      	movs	r3, #0
    6392:	6838      	ldr	r0, [r7, #0]
    6394:	6879      	ldr	r1, [r7, #4]
    6396:	47a0      	blx	r4
    6398:	0003      	movs	r3, r0
    639a:	000c      	movs	r4, r1
    639c:	0019      	movs	r1, r3
    639e:	0022      	movs	r2, r4
    63a0:	4b16      	ldr	r3, [pc, #88]	; (63fc <main+0x4b4>)
    63a2:	2400      	movs	r4, #0
    63a4:	18c9      	adds	r1, r1, r3
    63a6:	4162      	adcs	r2, r4
    63a8:	0008      	movs	r0, r1
    63aa:	0011      	movs	r1, r2
    63ac:	4c14      	ldr	r4, [pc, #80]	; (6400 <main+0x4b8>)
    63ae:	4a15      	ldr	r2, [pc, #84]	; (6404 <main+0x4bc>)
    63b0:	2300      	movs	r3, #0
    63b2:	47a0      	blx	r4
    63b4:	0003      	movs	r3, r0
    63b6:	000c      	movs	r4, r1
    63b8:	0018      	movs	r0, r3
    63ba:	4b13      	ldr	r3, [pc, #76]	; (6408 <main+0x4c0>)
    63bc:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    63be:	2300      	movs	r3, #0
    63c0:	2201      	movs	r2, #1
    63c2:	2105      	movs	r1, #5
    63c4:	2000      	movs	r0, #0
    63c6:	4c0a      	ldr	r4, [pc, #40]	; (63f0 <main+0x4a8>)
    63c8:	47a0      	blx	r4
			update_all_ports();
    63ca:	4b04      	ldr	r3, [pc, #16]	; (63dc <main+0x494>)
    63cc:	4798      	blx	r3
			system_interrupt_enable_global();
    63ce:	4b0f      	ldr	r3, [pc, #60]	; (640c <main+0x4c4>)
    63d0:	4798      	blx	r3
		}
	}
    63d2:	e64c      	b.n	606e <main+0x126>
    63d4:	200002e9 	.word	0x200002e9
    63d8:	000049ed 	.word	0x000049ed
    63dc:	00002f89 	.word	0x00002f89
    63e0:	200002e8 	.word	0x200002e8
    63e4:	000038cd 	.word	0x000038cd
    63e8:	200001b2 	.word	0x200001b2
    63ec:	00005f2d 	.word	0x00005f2d
    63f0:	00003b05 	.word	0x00003b05
    63f4:	0000592d 	.word	0x0000592d
    63f8:	00006741 	.word	0x00006741
    63fc:	00001b57 	.word	0x00001b57
    6400:	00006701 	.word	0x00006701
    6404:	00001b58 	.word	0x00001b58
    6408:	20000001 	.word	0x20000001
    640c:	00005f11 	.word	0x00005f11
    6410:	200001b0 	.word	0x200001b0

00006414 <__aeabi_uidiv>:
    6414:	2200      	movs	r2, #0
    6416:	0843      	lsrs	r3, r0, #1
    6418:	428b      	cmp	r3, r1
    641a:	d374      	bcc.n	6506 <__aeabi_uidiv+0xf2>
    641c:	0903      	lsrs	r3, r0, #4
    641e:	428b      	cmp	r3, r1
    6420:	d35f      	bcc.n	64e2 <__aeabi_uidiv+0xce>
    6422:	0a03      	lsrs	r3, r0, #8
    6424:	428b      	cmp	r3, r1
    6426:	d344      	bcc.n	64b2 <__aeabi_uidiv+0x9e>
    6428:	0b03      	lsrs	r3, r0, #12
    642a:	428b      	cmp	r3, r1
    642c:	d328      	bcc.n	6480 <__aeabi_uidiv+0x6c>
    642e:	0c03      	lsrs	r3, r0, #16
    6430:	428b      	cmp	r3, r1
    6432:	d30d      	bcc.n	6450 <__aeabi_uidiv+0x3c>
    6434:	22ff      	movs	r2, #255	; 0xff
    6436:	0209      	lsls	r1, r1, #8
    6438:	ba12      	rev	r2, r2
    643a:	0c03      	lsrs	r3, r0, #16
    643c:	428b      	cmp	r3, r1
    643e:	d302      	bcc.n	6446 <__aeabi_uidiv+0x32>
    6440:	1212      	asrs	r2, r2, #8
    6442:	0209      	lsls	r1, r1, #8
    6444:	d065      	beq.n	6512 <__aeabi_uidiv+0xfe>
    6446:	0b03      	lsrs	r3, r0, #12
    6448:	428b      	cmp	r3, r1
    644a:	d319      	bcc.n	6480 <__aeabi_uidiv+0x6c>
    644c:	e000      	b.n	6450 <__aeabi_uidiv+0x3c>
    644e:	0a09      	lsrs	r1, r1, #8
    6450:	0bc3      	lsrs	r3, r0, #15
    6452:	428b      	cmp	r3, r1
    6454:	d301      	bcc.n	645a <__aeabi_uidiv+0x46>
    6456:	03cb      	lsls	r3, r1, #15
    6458:	1ac0      	subs	r0, r0, r3
    645a:	4152      	adcs	r2, r2
    645c:	0b83      	lsrs	r3, r0, #14
    645e:	428b      	cmp	r3, r1
    6460:	d301      	bcc.n	6466 <__aeabi_uidiv+0x52>
    6462:	038b      	lsls	r3, r1, #14
    6464:	1ac0      	subs	r0, r0, r3
    6466:	4152      	adcs	r2, r2
    6468:	0b43      	lsrs	r3, r0, #13
    646a:	428b      	cmp	r3, r1
    646c:	d301      	bcc.n	6472 <__aeabi_uidiv+0x5e>
    646e:	034b      	lsls	r3, r1, #13
    6470:	1ac0      	subs	r0, r0, r3
    6472:	4152      	adcs	r2, r2
    6474:	0b03      	lsrs	r3, r0, #12
    6476:	428b      	cmp	r3, r1
    6478:	d301      	bcc.n	647e <__aeabi_uidiv+0x6a>
    647a:	030b      	lsls	r3, r1, #12
    647c:	1ac0      	subs	r0, r0, r3
    647e:	4152      	adcs	r2, r2
    6480:	0ac3      	lsrs	r3, r0, #11
    6482:	428b      	cmp	r3, r1
    6484:	d301      	bcc.n	648a <__aeabi_uidiv+0x76>
    6486:	02cb      	lsls	r3, r1, #11
    6488:	1ac0      	subs	r0, r0, r3
    648a:	4152      	adcs	r2, r2
    648c:	0a83      	lsrs	r3, r0, #10
    648e:	428b      	cmp	r3, r1
    6490:	d301      	bcc.n	6496 <__aeabi_uidiv+0x82>
    6492:	028b      	lsls	r3, r1, #10
    6494:	1ac0      	subs	r0, r0, r3
    6496:	4152      	adcs	r2, r2
    6498:	0a43      	lsrs	r3, r0, #9
    649a:	428b      	cmp	r3, r1
    649c:	d301      	bcc.n	64a2 <__aeabi_uidiv+0x8e>
    649e:	024b      	lsls	r3, r1, #9
    64a0:	1ac0      	subs	r0, r0, r3
    64a2:	4152      	adcs	r2, r2
    64a4:	0a03      	lsrs	r3, r0, #8
    64a6:	428b      	cmp	r3, r1
    64a8:	d301      	bcc.n	64ae <__aeabi_uidiv+0x9a>
    64aa:	020b      	lsls	r3, r1, #8
    64ac:	1ac0      	subs	r0, r0, r3
    64ae:	4152      	adcs	r2, r2
    64b0:	d2cd      	bcs.n	644e <__aeabi_uidiv+0x3a>
    64b2:	09c3      	lsrs	r3, r0, #7
    64b4:	428b      	cmp	r3, r1
    64b6:	d301      	bcc.n	64bc <__aeabi_uidiv+0xa8>
    64b8:	01cb      	lsls	r3, r1, #7
    64ba:	1ac0      	subs	r0, r0, r3
    64bc:	4152      	adcs	r2, r2
    64be:	0983      	lsrs	r3, r0, #6
    64c0:	428b      	cmp	r3, r1
    64c2:	d301      	bcc.n	64c8 <__aeabi_uidiv+0xb4>
    64c4:	018b      	lsls	r3, r1, #6
    64c6:	1ac0      	subs	r0, r0, r3
    64c8:	4152      	adcs	r2, r2
    64ca:	0943      	lsrs	r3, r0, #5
    64cc:	428b      	cmp	r3, r1
    64ce:	d301      	bcc.n	64d4 <__aeabi_uidiv+0xc0>
    64d0:	014b      	lsls	r3, r1, #5
    64d2:	1ac0      	subs	r0, r0, r3
    64d4:	4152      	adcs	r2, r2
    64d6:	0903      	lsrs	r3, r0, #4
    64d8:	428b      	cmp	r3, r1
    64da:	d301      	bcc.n	64e0 <__aeabi_uidiv+0xcc>
    64dc:	010b      	lsls	r3, r1, #4
    64de:	1ac0      	subs	r0, r0, r3
    64e0:	4152      	adcs	r2, r2
    64e2:	08c3      	lsrs	r3, r0, #3
    64e4:	428b      	cmp	r3, r1
    64e6:	d301      	bcc.n	64ec <__aeabi_uidiv+0xd8>
    64e8:	00cb      	lsls	r3, r1, #3
    64ea:	1ac0      	subs	r0, r0, r3
    64ec:	4152      	adcs	r2, r2
    64ee:	0883      	lsrs	r3, r0, #2
    64f0:	428b      	cmp	r3, r1
    64f2:	d301      	bcc.n	64f8 <__aeabi_uidiv+0xe4>
    64f4:	008b      	lsls	r3, r1, #2
    64f6:	1ac0      	subs	r0, r0, r3
    64f8:	4152      	adcs	r2, r2
    64fa:	0843      	lsrs	r3, r0, #1
    64fc:	428b      	cmp	r3, r1
    64fe:	d301      	bcc.n	6504 <__aeabi_uidiv+0xf0>
    6500:	004b      	lsls	r3, r1, #1
    6502:	1ac0      	subs	r0, r0, r3
    6504:	4152      	adcs	r2, r2
    6506:	1a41      	subs	r1, r0, r1
    6508:	d200      	bcs.n	650c <__aeabi_uidiv+0xf8>
    650a:	4601      	mov	r1, r0
    650c:	4152      	adcs	r2, r2
    650e:	4610      	mov	r0, r2
    6510:	4770      	bx	lr
    6512:	e7ff      	b.n	6514 <__aeabi_uidiv+0x100>
    6514:	b501      	push	{r0, lr}
    6516:	2000      	movs	r0, #0
    6518:	f000 f8f0 	bl	66fc <__aeabi_idiv0>
    651c:	bd02      	pop	{r1, pc}
    651e:	46c0      	nop			; (mov r8, r8)

00006520 <__aeabi_uidivmod>:
    6520:	2900      	cmp	r1, #0
    6522:	d0f7      	beq.n	6514 <__aeabi_uidiv+0x100>
    6524:	e776      	b.n	6414 <__aeabi_uidiv>
    6526:	4770      	bx	lr

00006528 <__aeabi_idiv>:
    6528:	4603      	mov	r3, r0
    652a:	430b      	orrs	r3, r1
    652c:	d47f      	bmi.n	662e <__aeabi_idiv+0x106>
    652e:	2200      	movs	r2, #0
    6530:	0843      	lsrs	r3, r0, #1
    6532:	428b      	cmp	r3, r1
    6534:	d374      	bcc.n	6620 <__aeabi_idiv+0xf8>
    6536:	0903      	lsrs	r3, r0, #4
    6538:	428b      	cmp	r3, r1
    653a:	d35f      	bcc.n	65fc <__aeabi_idiv+0xd4>
    653c:	0a03      	lsrs	r3, r0, #8
    653e:	428b      	cmp	r3, r1
    6540:	d344      	bcc.n	65cc <__aeabi_idiv+0xa4>
    6542:	0b03      	lsrs	r3, r0, #12
    6544:	428b      	cmp	r3, r1
    6546:	d328      	bcc.n	659a <__aeabi_idiv+0x72>
    6548:	0c03      	lsrs	r3, r0, #16
    654a:	428b      	cmp	r3, r1
    654c:	d30d      	bcc.n	656a <__aeabi_idiv+0x42>
    654e:	22ff      	movs	r2, #255	; 0xff
    6550:	0209      	lsls	r1, r1, #8
    6552:	ba12      	rev	r2, r2
    6554:	0c03      	lsrs	r3, r0, #16
    6556:	428b      	cmp	r3, r1
    6558:	d302      	bcc.n	6560 <__aeabi_idiv+0x38>
    655a:	1212      	asrs	r2, r2, #8
    655c:	0209      	lsls	r1, r1, #8
    655e:	d065      	beq.n	662c <__aeabi_idiv+0x104>
    6560:	0b03      	lsrs	r3, r0, #12
    6562:	428b      	cmp	r3, r1
    6564:	d319      	bcc.n	659a <__aeabi_idiv+0x72>
    6566:	e000      	b.n	656a <__aeabi_idiv+0x42>
    6568:	0a09      	lsrs	r1, r1, #8
    656a:	0bc3      	lsrs	r3, r0, #15
    656c:	428b      	cmp	r3, r1
    656e:	d301      	bcc.n	6574 <__aeabi_idiv+0x4c>
    6570:	03cb      	lsls	r3, r1, #15
    6572:	1ac0      	subs	r0, r0, r3
    6574:	4152      	adcs	r2, r2
    6576:	0b83      	lsrs	r3, r0, #14
    6578:	428b      	cmp	r3, r1
    657a:	d301      	bcc.n	6580 <__aeabi_idiv+0x58>
    657c:	038b      	lsls	r3, r1, #14
    657e:	1ac0      	subs	r0, r0, r3
    6580:	4152      	adcs	r2, r2
    6582:	0b43      	lsrs	r3, r0, #13
    6584:	428b      	cmp	r3, r1
    6586:	d301      	bcc.n	658c <__aeabi_idiv+0x64>
    6588:	034b      	lsls	r3, r1, #13
    658a:	1ac0      	subs	r0, r0, r3
    658c:	4152      	adcs	r2, r2
    658e:	0b03      	lsrs	r3, r0, #12
    6590:	428b      	cmp	r3, r1
    6592:	d301      	bcc.n	6598 <__aeabi_idiv+0x70>
    6594:	030b      	lsls	r3, r1, #12
    6596:	1ac0      	subs	r0, r0, r3
    6598:	4152      	adcs	r2, r2
    659a:	0ac3      	lsrs	r3, r0, #11
    659c:	428b      	cmp	r3, r1
    659e:	d301      	bcc.n	65a4 <__aeabi_idiv+0x7c>
    65a0:	02cb      	lsls	r3, r1, #11
    65a2:	1ac0      	subs	r0, r0, r3
    65a4:	4152      	adcs	r2, r2
    65a6:	0a83      	lsrs	r3, r0, #10
    65a8:	428b      	cmp	r3, r1
    65aa:	d301      	bcc.n	65b0 <__aeabi_idiv+0x88>
    65ac:	028b      	lsls	r3, r1, #10
    65ae:	1ac0      	subs	r0, r0, r3
    65b0:	4152      	adcs	r2, r2
    65b2:	0a43      	lsrs	r3, r0, #9
    65b4:	428b      	cmp	r3, r1
    65b6:	d301      	bcc.n	65bc <__aeabi_idiv+0x94>
    65b8:	024b      	lsls	r3, r1, #9
    65ba:	1ac0      	subs	r0, r0, r3
    65bc:	4152      	adcs	r2, r2
    65be:	0a03      	lsrs	r3, r0, #8
    65c0:	428b      	cmp	r3, r1
    65c2:	d301      	bcc.n	65c8 <__aeabi_idiv+0xa0>
    65c4:	020b      	lsls	r3, r1, #8
    65c6:	1ac0      	subs	r0, r0, r3
    65c8:	4152      	adcs	r2, r2
    65ca:	d2cd      	bcs.n	6568 <__aeabi_idiv+0x40>
    65cc:	09c3      	lsrs	r3, r0, #7
    65ce:	428b      	cmp	r3, r1
    65d0:	d301      	bcc.n	65d6 <__aeabi_idiv+0xae>
    65d2:	01cb      	lsls	r3, r1, #7
    65d4:	1ac0      	subs	r0, r0, r3
    65d6:	4152      	adcs	r2, r2
    65d8:	0983      	lsrs	r3, r0, #6
    65da:	428b      	cmp	r3, r1
    65dc:	d301      	bcc.n	65e2 <__aeabi_idiv+0xba>
    65de:	018b      	lsls	r3, r1, #6
    65e0:	1ac0      	subs	r0, r0, r3
    65e2:	4152      	adcs	r2, r2
    65e4:	0943      	lsrs	r3, r0, #5
    65e6:	428b      	cmp	r3, r1
    65e8:	d301      	bcc.n	65ee <__aeabi_idiv+0xc6>
    65ea:	014b      	lsls	r3, r1, #5
    65ec:	1ac0      	subs	r0, r0, r3
    65ee:	4152      	adcs	r2, r2
    65f0:	0903      	lsrs	r3, r0, #4
    65f2:	428b      	cmp	r3, r1
    65f4:	d301      	bcc.n	65fa <__aeabi_idiv+0xd2>
    65f6:	010b      	lsls	r3, r1, #4
    65f8:	1ac0      	subs	r0, r0, r3
    65fa:	4152      	adcs	r2, r2
    65fc:	08c3      	lsrs	r3, r0, #3
    65fe:	428b      	cmp	r3, r1
    6600:	d301      	bcc.n	6606 <__aeabi_idiv+0xde>
    6602:	00cb      	lsls	r3, r1, #3
    6604:	1ac0      	subs	r0, r0, r3
    6606:	4152      	adcs	r2, r2
    6608:	0883      	lsrs	r3, r0, #2
    660a:	428b      	cmp	r3, r1
    660c:	d301      	bcc.n	6612 <__aeabi_idiv+0xea>
    660e:	008b      	lsls	r3, r1, #2
    6610:	1ac0      	subs	r0, r0, r3
    6612:	4152      	adcs	r2, r2
    6614:	0843      	lsrs	r3, r0, #1
    6616:	428b      	cmp	r3, r1
    6618:	d301      	bcc.n	661e <__aeabi_idiv+0xf6>
    661a:	004b      	lsls	r3, r1, #1
    661c:	1ac0      	subs	r0, r0, r3
    661e:	4152      	adcs	r2, r2
    6620:	1a41      	subs	r1, r0, r1
    6622:	d200      	bcs.n	6626 <__aeabi_idiv+0xfe>
    6624:	4601      	mov	r1, r0
    6626:	4152      	adcs	r2, r2
    6628:	4610      	mov	r0, r2
    662a:	4770      	bx	lr
    662c:	e05d      	b.n	66ea <__aeabi_idiv+0x1c2>
    662e:	0fca      	lsrs	r2, r1, #31
    6630:	d000      	beq.n	6634 <__aeabi_idiv+0x10c>
    6632:	4249      	negs	r1, r1
    6634:	1003      	asrs	r3, r0, #32
    6636:	d300      	bcc.n	663a <__aeabi_idiv+0x112>
    6638:	4240      	negs	r0, r0
    663a:	4053      	eors	r3, r2
    663c:	2200      	movs	r2, #0
    663e:	469c      	mov	ip, r3
    6640:	0903      	lsrs	r3, r0, #4
    6642:	428b      	cmp	r3, r1
    6644:	d32d      	bcc.n	66a2 <__aeabi_idiv+0x17a>
    6646:	0a03      	lsrs	r3, r0, #8
    6648:	428b      	cmp	r3, r1
    664a:	d312      	bcc.n	6672 <__aeabi_idiv+0x14a>
    664c:	22fc      	movs	r2, #252	; 0xfc
    664e:	0189      	lsls	r1, r1, #6
    6650:	ba12      	rev	r2, r2
    6652:	0a03      	lsrs	r3, r0, #8
    6654:	428b      	cmp	r3, r1
    6656:	d30c      	bcc.n	6672 <__aeabi_idiv+0x14a>
    6658:	0189      	lsls	r1, r1, #6
    665a:	1192      	asrs	r2, r2, #6
    665c:	428b      	cmp	r3, r1
    665e:	d308      	bcc.n	6672 <__aeabi_idiv+0x14a>
    6660:	0189      	lsls	r1, r1, #6
    6662:	1192      	asrs	r2, r2, #6
    6664:	428b      	cmp	r3, r1
    6666:	d304      	bcc.n	6672 <__aeabi_idiv+0x14a>
    6668:	0189      	lsls	r1, r1, #6
    666a:	d03a      	beq.n	66e2 <__aeabi_idiv+0x1ba>
    666c:	1192      	asrs	r2, r2, #6
    666e:	e000      	b.n	6672 <__aeabi_idiv+0x14a>
    6670:	0989      	lsrs	r1, r1, #6
    6672:	09c3      	lsrs	r3, r0, #7
    6674:	428b      	cmp	r3, r1
    6676:	d301      	bcc.n	667c <__aeabi_idiv+0x154>
    6678:	01cb      	lsls	r3, r1, #7
    667a:	1ac0      	subs	r0, r0, r3
    667c:	4152      	adcs	r2, r2
    667e:	0983      	lsrs	r3, r0, #6
    6680:	428b      	cmp	r3, r1
    6682:	d301      	bcc.n	6688 <__aeabi_idiv+0x160>
    6684:	018b      	lsls	r3, r1, #6
    6686:	1ac0      	subs	r0, r0, r3
    6688:	4152      	adcs	r2, r2
    668a:	0943      	lsrs	r3, r0, #5
    668c:	428b      	cmp	r3, r1
    668e:	d301      	bcc.n	6694 <__aeabi_idiv+0x16c>
    6690:	014b      	lsls	r3, r1, #5
    6692:	1ac0      	subs	r0, r0, r3
    6694:	4152      	adcs	r2, r2
    6696:	0903      	lsrs	r3, r0, #4
    6698:	428b      	cmp	r3, r1
    669a:	d301      	bcc.n	66a0 <__aeabi_idiv+0x178>
    669c:	010b      	lsls	r3, r1, #4
    669e:	1ac0      	subs	r0, r0, r3
    66a0:	4152      	adcs	r2, r2
    66a2:	08c3      	lsrs	r3, r0, #3
    66a4:	428b      	cmp	r3, r1
    66a6:	d301      	bcc.n	66ac <__aeabi_idiv+0x184>
    66a8:	00cb      	lsls	r3, r1, #3
    66aa:	1ac0      	subs	r0, r0, r3
    66ac:	4152      	adcs	r2, r2
    66ae:	0883      	lsrs	r3, r0, #2
    66b0:	428b      	cmp	r3, r1
    66b2:	d301      	bcc.n	66b8 <__aeabi_idiv+0x190>
    66b4:	008b      	lsls	r3, r1, #2
    66b6:	1ac0      	subs	r0, r0, r3
    66b8:	4152      	adcs	r2, r2
    66ba:	d2d9      	bcs.n	6670 <__aeabi_idiv+0x148>
    66bc:	0843      	lsrs	r3, r0, #1
    66be:	428b      	cmp	r3, r1
    66c0:	d301      	bcc.n	66c6 <__aeabi_idiv+0x19e>
    66c2:	004b      	lsls	r3, r1, #1
    66c4:	1ac0      	subs	r0, r0, r3
    66c6:	4152      	adcs	r2, r2
    66c8:	1a41      	subs	r1, r0, r1
    66ca:	d200      	bcs.n	66ce <__aeabi_idiv+0x1a6>
    66cc:	4601      	mov	r1, r0
    66ce:	4663      	mov	r3, ip
    66d0:	4152      	adcs	r2, r2
    66d2:	105b      	asrs	r3, r3, #1
    66d4:	4610      	mov	r0, r2
    66d6:	d301      	bcc.n	66dc <__aeabi_idiv+0x1b4>
    66d8:	4240      	negs	r0, r0
    66da:	2b00      	cmp	r3, #0
    66dc:	d500      	bpl.n	66e0 <__aeabi_idiv+0x1b8>
    66de:	4249      	negs	r1, r1
    66e0:	4770      	bx	lr
    66e2:	4663      	mov	r3, ip
    66e4:	105b      	asrs	r3, r3, #1
    66e6:	d300      	bcc.n	66ea <__aeabi_idiv+0x1c2>
    66e8:	4240      	negs	r0, r0
    66ea:	b501      	push	{r0, lr}
    66ec:	2000      	movs	r0, #0
    66ee:	f000 f805 	bl	66fc <__aeabi_idiv0>
    66f2:	bd02      	pop	{r1, pc}

000066f4 <__aeabi_idivmod>:
    66f4:	2900      	cmp	r1, #0
    66f6:	d0f8      	beq.n	66ea <__aeabi_idiv+0x1c2>
    66f8:	e716      	b.n	6528 <__aeabi_idiv>
    66fa:	4770      	bx	lr

000066fc <__aeabi_idiv0>:
    66fc:	4770      	bx	lr
    66fe:	46c0      	nop			; (mov r8, r8)

00006700 <__aeabi_uldivmod>:
    6700:	2b00      	cmp	r3, #0
    6702:	d111      	bne.n	6728 <__aeabi_uldivmod+0x28>
    6704:	2a00      	cmp	r2, #0
    6706:	d10f      	bne.n	6728 <__aeabi_uldivmod+0x28>
    6708:	2900      	cmp	r1, #0
    670a:	d100      	bne.n	670e <__aeabi_uldivmod+0xe>
    670c:	2800      	cmp	r0, #0
    670e:	d002      	beq.n	6716 <__aeabi_uldivmod+0x16>
    6710:	2100      	movs	r1, #0
    6712:	43c9      	mvns	r1, r1
    6714:	1c08      	adds	r0, r1, #0
    6716:	b407      	push	{r0, r1, r2}
    6718:	4802      	ldr	r0, [pc, #8]	; (6724 <__aeabi_uldivmod+0x24>)
    671a:	a102      	add	r1, pc, #8	; (adr r1, 6724 <__aeabi_uldivmod+0x24>)
    671c:	1840      	adds	r0, r0, r1
    671e:	9002      	str	r0, [sp, #8]
    6720:	bd03      	pop	{r0, r1, pc}
    6722:	46c0      	nop			; (mov r8, r8)
    6724:	ffffffd9 	.word	0xffffffd9
    6728:	b403      	push	{r0, r1}
    672a:	4668      	mov	r0, sp
    672c:	b501      	push	{r0, lr}
    672e:	9802      	ldr	r0, [sp, #8]
    6730:	f000 f832 	bl	6798 <__udivmoddi4>
    6734:	9b01      	ldr	r3, [sp, #4]
    6736:	469e      	mov	lr, r3
    6738:	b002      	add	sp, #8
    673a:	bc0c      	pop	{r2, r3}
    673c:	4770      	bx	lr
    673e:	46c0      	nop			; (mov r8, r8)

00006740 <__aeabi_lmul>:
    6740:	b5f0      	push	{r4, r5, r6, r7, lr}
    6742:	464f      	mov	r7, r9
    6744:	4646      	mov	r6, r8
    6746:	b4c0      	push	{r6, r7}
    6748:	0416      	lsls	r6, r2, #16
    674a:	0c36      	lsrs	r6, r6, #16
    674c:	4699      	mov	r9, r3
    674e:	0033      	movs	r3, r6
    6750:	0405      	lsls	r5, r0, #16
    6752:	0c2c      	lsrs	r4, r5, #16
    6754:	0c07      	lsrs	r7, r0, #16
    6756:	0c15      	lsrs	r5, r2, #16
    6758:	4363      	muls	r3, r4
    675a:	437e      	muls	r6, r7
    675c:	436f      	muls	r7, r5
    675e:	4365      	muls	r5, r4
    6760:	0c1c      	lsrs	r4, r3, #16
    6762:	19ad      	adds	r5, r5, r6
    6764:	1964      	adds	r4, r4, r5
    6766:	469c      	mov	ip, r3
    6768:	42a6      	cmp	r6, r4
    676a:	d903      	bls.n	6774 <__aeabi_lmul+0x34>
    676c:	2380      	movs	r3, #128	; 0x80
    676e:	025b      	lsls	r3, r3, #9
    6770:	4698      	mov	r8, r3
    6772:	4447      	add	r7, r8
    6774:	4663      	mov	r3, ip
    6776:	0c25      	lsrs	r5, r4, #16
    6778:	19ef      	adds	r7, r5, r7
    677a:	041d      	lsls	r5, r3, #16
    677c:	464b      	mov	r3, r9
    677e:	434a      	muls	r2, r1
    6780:	4343      	muls	r3, r0
    6782:	0c2d      	lsrs	r5, r5, #16
    6784:	0424      	lsls	r4, r4, #16
    6786:	1964      	adds	r4, r4, r5
    6788:	1899      	adds	r1, r3, r2
    678a:	19c9      	adds	r1, r1, r7
    678c:	0020      	movs	r0, r4
    678e:	bc0c      	pop	{r2, r3}
    6790:	4690      	mov	r8, r2
    6792:	4699      	mov	r9, r3
    6794:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6796:	46c0      	nop			; (mov r8, r8)

00006798 <__udivmoddi4>:
    6798:	b5f0      	push	{r4, r5, r6, r7, lr}
    679a:	464d      	mov	r5, r9
    679c:	4656      	mov	r6, sl
    679e:	4644      	mov	r4, r8
    67a0:	465f      	mov	r7, fp
    67a2:	b4f0      	push	{r4, r5, r6, r7}
    67a4:	4692      	mov	sl, r2
    67a6:	b083      	sub	sp, #12
    67a8:	0004      	movs	r4, r0
    67aa:	000d      	movs	r5, r1
    67ac:	4699      	mov	r9, r3
    67ae:	428b      	cmp	r3, r1
    67b0:	d82f      	bhi.n	6812 <__udivmoddi4+0x7a>
    67b2:	d02c      	beq.n	680e <__udivmoddi4+0x76>
    67b4:	4649      	mov	r1, r9
    67b6:	4650      	mov	r0, sl
    67b8:	f001 fd4a 	bl	8250 <__clzdi2>
    67bc:	0029      	movs	r1, r5
    67be:	0006      	movs	r6, r0
    67c0:	0020      	movs	r0, r4
    67c2:	f001 fd45 	bl	8250 <__clzdi2>
    67c6:	1a33      	subs	r3, r6, r0
    67c8:	4698      	mov	r8, r3
    67ca:	3b20      	subs	r3, #32
    67cc:	469b      	mov	fp, r3
    67ce:	d500      	bpl.n	67d2 <__udivmoddi4+0x3a>
    67d0:	e074      	b.n	68bc <__udivmoddi4+0x124>
    67d2:	4653      	mov	r3, sl
    67d4:	465a      	mov	r2, fp
    67d6:	4093      	lsls	r3, r2
    67d8:	001f      	movs	r7, r3
    67da:	4653      	mov	r3, sl
    67dc:	4642      	mov	r2, r8
    67de:	4093      	lsls	r3, r2
    67e0:	001e      	movs	r6, r3
    67e2:	42af      	cmp	r7, r5
    67e4:	d829      	bhi.n	683a <__udivmoddi4+0xa2>
    67e6:	d026      	beq.n	6836 <__udivmoddi4+0x9e>
    67e8:	465b      	mov	r3, fp
    67ea:	1ba4      	subs	r4, r4, r6
    67ec:	41bd      	sbcs	r5, r7
    67ee:	2b00      	cmp	r3, #0
    67f0:	da00      	bge.n	67f4 <__udivmoddi4+0x5c>
    67f2:	e079      	b.n	68e8 <__udivmoddi4+0x150>
    67f4:	2200      	movs	r2, #0
    67f6:	2300      	movs	r3, #0
    67f8:	9200      	str	r2, [sp, #0]
    67fa:	9301      	str	r3, [sp, #4]
    67fc:	2301      	movs	r3, #1
    67fe:	465a      	mov	r2, fp
    6800:	4093      	lsls	r3, r2
    6802:	9301      	str	r3, [sp, #4]
    6804:	2301      	movs	r3, #1
    6806:	4642      	mov	r2, r8
    6808:	4093      	lsls	r3, r2
    680a:	9300      	str	r3, [sp, #0]
    680c:	e019      	b.n	6842 <__udivmoddi4+0xaa>
    680e:	4282      	cmp	r2, r0
    6810:	d9d0      	bls.n	67b4 <__udivmoddi4+0x1c>
    6812:	2200      	movs	r2, #0
    6814:	2300      	movs	r3, #0
    6816:	9200      	str	r2, [sp, #0]
    6818:	9301      	str	r3, [sp, #4]
    681a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    681c:	2b00      	cmp	r3, #0
    681e:	d001      	beq.n	6824 <__udivmoddi4+0x8c>
    6820:	601c      	str	r4, [r3, #0]
    6822:	605d      	str	r5, [r3, #4]
    6824:	9800      	ldr	r0, [sp, #0]
    6826:	9901      	ldr	r1, [sp, #4]
    6828:	b003      	add	sp, #12
    682a:	bc3c      	pop	{r2, r3, r4, r5}
    682c:	4690      	mov	r8, r2
    682e:	4699      	mov	r9, r3
    6830:	46a2      	mov	sl, r4
    6832:	46ab      	mov	fp, r5
    6834:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6836:	42a3      	cmp	r3, r4
    6838:	d9d6      	bls.n	67e8 <__udivmoddi4+0x50>
    683a:	2200      	movs	r2, #0
    683c:	2300      	movs	r3, #0
    683e:	9200      	str	r2, [sp, #0]
    6840:	9301      	str	r3, [sp, #4]
    6842:	4643      	mov	r3, r8
    6844:	2b00      	cmp	r3, #0
    6846:	d0e8      	beq.n	681a <__udivmoddi4+0x82>
    6848:	07fb      	lsls	r3, r7, #31
    684a:	0872      	lsrs	r2, r6, #1
    684c:	431a      	orrs	r2, r3
    684e:	4646      	mov	r6, r8
    6850:	087b      	lsrs	r3, r7, #1
    6852:	e00e      	b.n	6872 <__udivmoddi4+0xda>
    6854:	42ab      	cmp	r3, r5
    6856:	d101      	bne.n	685c <__udivmoddi4+0xc4>
    6858:	42a2      	cmp	r2, r4
    685a:	d80c      	bhi.n	6876 <__udivmoddi4+0xde>
    685c:	1aa4      	subs	r4, r4, r2
    685e:	419d      	sbcs	r5, r3
    6860:	2001      	movs	r0, #1
    6862:	1924      	adds	r4, r4, r4
    6864:	416d      	adcs	r5, r5
    6866:	2100      	movs	r1, #0
    6868:	3e01      	subs	r6, #1
    686a:	1824      	adds	r4, r4, r0
    686c:	414d      	adcs	r5, r1
    686e:	2e00      	cmp	r6, #0
    6870:	d006      	beq.n	6880 <__udivmoddi4+0xe8>
    6872:	42ab      	cmp	r3, r5
    6874:	d9ee      	bls.n	6854 <__udivmoddi4+0xbc>
    6876:	3e01      	subs	r6, #1
    6878:	1924      	adds	r4, r4, r4
    687a:	416d      	adcs	r5, r5
    687c:	2e00      	cmp	r6, #0
    687e:	d1f8      	bne.n	6872 <__udivmoddi4+0xda>
    6880:	465b      	mov	r3, fp
    6882:	9800      	ldr	r0, [sp, #0]
    6884:	9901      	ldr	r1, [sp, #4]
    6886:	1900      	adds	r0, r0, r4
    6888:	4169      	adcs	r1, r5
    688a:	2b00      	cmp	r3, #0
    688c:	db22      	blt.n	68d4 <__udivmoddi4+0x13c>
    688e:	002b      	movs	r3, r5
    6890:	465a      	mov	r2, fp
    6892:	40d3      	lsrs	r3, r2
    6894:	002a      	movs	r2, r5
    6896:	4644      	mov	r4, r8
    6898:	40e2      	lsrs	r2, r4
    689a:	001c      	movs	r4, r3
    689c:	465b      	mov	r3, fp
    689e:	0015      	movs	r5, r2
    68a0:	2b00      	cmp	r3, #0
    68a2:	db2c      	blt.n	68fe <__udivmoddi4+0x166>
    68a4:	0026      	movs	r6, r4
    68a6:	409e      	lsls	r6, r3
    68a8:	0033      	movs	r3, r6
    68aa:	0026      	movs	r6, r4
    68ac:	4647      	mov	r7, r8
    68ae:	40be      	lsls	r6, r7
    68b0:	0032      	movs	r2, r6
    68b2:	1a80      	subs	r0, r0, r2
    68b4:	4199      	sbcs	r1, r3
    68b6:	9000      	str	r0, [sp, #0]
    68b8:	9101      	str	r1, [sp, #4]
    68ba:	e7ae      	b.n	681a <__udivmoddi4+0x82>
    68bc:	4642      	mov	r2, r8
    68be:	2320      	movs	r3, #32
    68c0:	1a9b      	subs	r3, r3, r2
    68c2:	4652      	mov	r2, sl
    68c4:	40da      	lsrs	r2, r3
    68c6:	4641      	mov	r1, r8
    68c8:	0013      	movs	r3, r2
    68ca:	464a      	mov	r2, r9
    68cc:	408a      	lsls	r2, r1
    68ce:	0017      	movs	r7, r2
    68d0:	431f      	orrs	r7, r3
    68d2:	e782      	b.n	67da <__udivmoddi4+0x42>
    68d4:	4642      	mov	r2, r8
    68d6:	2320      	movs	r3, #32
    68d8:	1a9b      	subs	r3, r3, r2
    68da:	002a      	movs	r2, r5
    68dc:	4646      	mov	r6, r8
    68de:	409a      	lsls	r2, r3
    68e0:	0023      	movs	r3, r4
    68e2:	40f3      	lsrs	r3, r6
    68e4:	4313      	orrs	r3, r2
    68e6:	e7d5      	b.n	6894 <__udivmoddi4+0xfc>
    68e8:	4642      	mov	r2, r8
    68ea:	2320      	movs	r3, #32
    68ec:	2100      	movs	r1, #0
    68ee:	1a9b      	subs	r3, r3, r2
    68f0:	2200      	movs	r2, #0
    68f2:	9100      	str	r1, [sp, #0]
    68f4:	9201      	str	r2, [sp, #4]
    68f6:	2201      	movs	r2, #1
    68f8:	40da      	lsrs	r2, r3
    68fa:	9201      	str	r2, [sp, #4]
    68fc:	e782      	b.n	6804 <__udivmoddi4+0x6c>
    68fe:	4642      	mov	r2, r8
    6900:	2320      	movs	r3, #32
    6902:	0026      	movs	r6, r4
    6904:	1a9b      	subs	r3, r3, r2
    6906:	40de      	lsrs	r6, r3
    6908:	002f      	movs	r7, r5
    690a:	46b4      	mov	ip, r6
    690c:	4097      	lsls	r7, r2
    690e:	4666      	mov	r6, ip
    6910:	003b      	movs	r3, r7
    6912:	4333      	orrs	r3, r6
    6914:	e7c9      	b.n	68aa <__udivmoddi4+0x112>
    6916:	46c0      	nop			; (mov r8, r8)

00006918 <__aeabi_dadd>:
    6918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    691a:	4656      	mov	r6, sl
    691c:	465f      	mov	r7, fp
    691e:	464d      	mov	r5, r9
    6920:	4644      	mov	r4, r8
    6922:	b4f0      	push	{r4, r5, r6, r7}
    6924:	000f      	movs	r7, r1
    6926:	0ffd      	lsrs	r5, r7, #31
    6928:	46aa      	mov	sl, r5
    692a:	0309      	lsls	r1, r1, #12
    692c:	007c      	lsls	r4, r7, #1
    692e:	002e      	movs	r6, r5
    6930:	005f      	lsls	r7, r3, #1
    6932:	0f45      	lsrs	r5, r0, #29
    6934:	0a49      	lsrs	r1, r1, #9
    6936:	0d7f      	lsrs	r7, r7, #21
    6938:	4329      	orrs	r1, r5
    693a:	00c5      	lsls	r5, r0, #3
    693c:	0318      	lsls	r0, r3, #12
    693e:	46bc      	mov	ip, r7
    6940:	0a40      	lsrs	r0, r0, #9
    6942:	0f57      	lsrs	r7, r2, #29
    6944:	0d64      	lsrs	r4, r4, #21
    6946:	0fdb      	lsrs	r3, r3, #31
    6948:	4338      	orrs	r0, r7
    694a:	00d2      	lsls	r2, r2, #3
    694c:	459a      	cmp	sl, r3
    694e:	d100      	bne.n	6952 <__aeabi_dadd+0x3a>
    6950:	e0aa      	b.n	6aa8 <__aeabi_dadd+0x190>
    6952:	4666      	mov	r6, ip
    6954:	1ba6      	subs	r6, r4, r6
    6956:	2e00      	cmp	r6, #0
    6958:	dc00      	bgt.n	695c <__aeabi_dadd+0x44>
    695a:	e0ff      	b.n	6b5c <__aeabi_dadd+0x244>
    695c:	4663      	mov	r3, ip
    695e:	2b00      	cmp	r3, #0
    6960:	d139      	bne.n	69d6 <__aeabi_dadd+0xbe>
    6962:	0003      	movs	r3, r0
    6964:	4313      	orrs	r3, r2
    6966:	d000      	beq.n	696a <__aeabi_dadd+0x52>
    6968:	e0d9      	b.n	6b1e <__aeabi_dadd+0x206>
    696a:	076b      	lsls	r3, r5, #29
    696c:	d009      	beq.n	6982 <__aeabi_dadd+0x6a>
    696e:	230f      	movs	r3, #15
    6970:	402b      	ands	r3, r5
    6972:	2b04      	cmp	r3, #4
    6974:	d005      	beq.n	6982 <__aeabi_dadd+0x6a>
    6976:	1d2b      	adds	r3, r5, #4
    6978:	42ab      	cmp	r3, r5
    697a:	41ad      	sbcs	r5, r5
    697c:	426d      	negs	r5, r5
    697e:	1949      	adds	r1, r1, r5
    6980:	001d      	movs	r5, r3
    6982:	020b      	lsls	r3, r1, #8
    6984:	d400      	bmi.n	6988 <__aeabi_dadd+0x70>
    6986:	e082      	b.n	6a8e <__aeabi_dadd+0x176>
    6988:	4bca      	ldr	r3, [pc, #808]	; (6cb4 <__aeabi_dadd+0x39c>)
    698a:	3401      	adds	r4, #1
    698c:	429c      	cmp	r4, r3
    698e:	d100      	bne.n	6992 <__aeabi_dadd+0x7a>
    6990:	e0fe      	b.n	6b90 <__aeabi_dadd+0x278>
    6992:	000a      	movs	r2, r1
    6994:	4656      	mov	r6, sl
    6996:	4bc8      	ldr	r3, [pc, #800]	; (6cb8 <__aeabi_dadd+0x3a0>)
    6998:	08ed      	lsrs	r5, r5, #3
    699a:	401a      	ands	r2, r3
    699c:	0750      	lsls	r0, r2, #29
    699e:	0564      	lsls	r4, r4, #21
    69a0:	0252      	lsls	r2, r2, #9
    69a2:	4305      	orrs	r5, r0
    69a4:	0b12      	lsrs	r2, r2, #12
    69a6:	0d64      	lsrs	r4, r4, #21
    69a8:	2100      	movs	r1, #0
    69aa:	0312      	lsls	r2, r2, #12
    69ac:	0d0b      	lsrs	r3, r1, #20
    69ae:	051b      	lsls	r3, r3, #20
    69b0:	0564      	lsls	r4, r4, #21
    69b2:	0b12      	lsrs	r2, r2, #12
    69b4:	431a      	orrs	r2, r3
    69b6:	0863      	lsrs	r3, r4, #1
    69b8:	4cc0      	ldr	r4, [pc, #768]	; (6cbc <__aeabi_dadd+0x3a4>)
    69ba:	07f6      	lsls	r6, r6, #31
    69bc:	4014      	ands	r4, r2
    69be:	431c      	orrs	r4, r3
    69c0:	0064      	lsls	r4, r4, #1
    69c2:	0864      	lsrs	r4, r4, #1
    69c4:	4334      	orrs	r4, r6
    69c6:	0028      	movs	r0, r5
    69c8:	0021      	movs	r1, r4
    69ca:	bc3c      	pop	{r2, r3, r4, r5}
    69cc:	4690      	mov	r8, r2
    69ce:	4699      	mov	r9, r3
    69d0:	46a2      	mov	sl, r4
    69d2:	46ab      	mov	fp, r5
    69d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69d6:	4bb7      	ldr	r3, [pc, #732]	; (6cb4 <__aeabi_dadd+0x39c>)
    69d8:	429c      	cmp	r4, r3
    69da:	d0c6      	beq.n	696a <__aeabi_dadd+0x52>
    69dc:	2380      	movs	r3, #128	; 0x80
    69de:	041b      	lsls	r3, r3, #16
    69e0:	4318      	orrs	r0, r3
    69e2:	2e38      	cmp	r6, #56	; 0x38
    69e4:	dd00      	ble.n	69e8 <__aeabi_dadd+0xd0>
    69e6:	e0eb      	b.n	6bc0 <__aeabi_dadd+0x2a8>
    69e8:	2e1f      	cmp	r6, #31
    69ea:	dd00      	ble.n	69ee <__aeabi_dadd+0xd6>
    69ec:	e11e      	b.n	6c2c <__aeabi_dadd+0x314>
    69ee:	2320      	movs	r3, #32
    69f0:	1b9b      	subs	r3, r3, r6
    69f2:	469c      	mov	ip, r3
    69f4:	0003      	movs	r3, r0
    69f6:	4667      	mov	r7, ip
    69f8:	40bb      	lsls	r3, r7
    69fa:	4698      	mov	r8, r3
    69fc:	0013      	movs	r3, r2
    69fe:	4647      	mov	r7, r8
    6a00:	40f3      	lsrs	r3, r6
    6a02:	433b      	orrs	r3, r7
    6a04:	4667      	mov	r7, ip
    6a06:	40ba      	lsls	r2, r7
    6a08:	1e57      	subs	r7, r2, #1
    6a0a:	41ba      	sbcs	r2, r7
    6a0c:	4313      	orrs	r3, r2
    6a0e:	0002      	movs	r2, r0
    6a10:	40f2      	lsrs	r2, r6
    6a12:	1aeb      	subs	r3, r5, r3
    6a14:	429d      	cmp	r5, r3
    6a16:	41b6      	sbcs	r6, r6
    6a18:	001d      	movs	r5, r3
    6a1a:	1a8a      	subs	r2, r1, r2
    6a1c:	4276      	negs	r6, r6
    6a1e:	1b91      	subs	r1, r2, r6
    6a20:	020b      	lsls	r3, r1, #8
    6a22:	d531      	bpl.n	6a88 <__aeabi_dadd+0x170>
    6a24:	024a      	lsls	r2, r1, #9
    6a26:	0a56      	lsrs	r6, r2, #9
    6a28:	2e00      	cmp	r6, #0
    6a2a:	d100      	bne.n	6a2e <__aeabi_dadd+0x116>
    6a2c:	e0b4      	b.n	6b98 <__aeabi_dadd+0x280>
    6a2e:	0030      	movs	r0, r6
    6a30:	f001 fbf0 	bl	8214 <__clzsi2>
    6a34:	0003      	movs	r3, r0
    6a36:	3b08      	subs	r3, #8
    6a38:	2b1f      	cmp	r3, #31
    6a3a:	dd00      	ble.n	6a3e <__aeabi_dadd+0x126>
    6a3c:	e0b5      	b.n	6baa <__aeabi_dadd+0x292>
    6a3e:	2220      	movs	r2, #32
    6a40:	0029      	movs	r1, r5
    6a42:	1ad2      	subs	r2, r2, r3
    6a44:	40d1      	lsrs	r1, r2
    6a46:	409e      	lsls	r6, r3
    6a48:	000a      	movs	r2, r1
    6a4a:	409d      	lsls	r5, r3
    6a4c:	4332      	orrs	r2, r6
    6a4e:	429c      	cmp	r4, r3
    6a50:	dd00      	ble.n	6a54 <__aeabi_dadd+0x13c>
    6a52:	e0b1      	b.n	6bb8 <__aeabi_dadd+0x2a0>
    6a54:	1b1c      	subs	r4, r3, r4
    6a56:	1c63      	adds	r3, r4, #1
    6a58:	2b1f      	cmp	r3, #31
    6a5a:	dd00      	ble.n	6a5e <__aeabi_dadd+0x146>
    6a5c:	e0d5      	b.n	6c0a <__aeabi_dadd+0x2f2>
    6a5e:	2120      	movs	r1, #32
    6a60:	0014      	movs	r4, r2
    6a62:	0028      	movs	r0, r5
    6a64:	1ac9      	subs	r1, r1, r3
    6a66:	408c      	lsls	r4, r1
    6a68:	40d8      	lsrs	r0, r3
    6a6a:	408d      	lsls	r5, r1
    6a6c:	4304      	orrs	r4, r0
    6a6e:	40da      	lsrs	r2, r3
    6a70:	1e68      	subs	r0, r5, #1
    6a72:	4185      	sbcs	r5, r0
    6a74:	0011      	movs	r1, r2
    6a76:	4325      	orrs	r5, r4
    6a78:	2400      	movs	r4, #0
    6a7a:	e776      	b.n	696a <__aeabi_dadd+0x52>
    6a7c:	4641      	mov	r1, r8
    6a7e:	4331      	orrs	r1, r6
    6a80:	d100      	bne.n	6a84 <__aeabi_dadd+0x16c>
    6a82:	e234      	b.n	6eee <__aeabi_dadd+0x5d6>
    6a84:	0031      	movs	r1, r6
    6a86:	4645      	mov	r5, r8
    6a88:	076b      	lsls	r3, r5, #29
    6a8a:	d000      	beq.n	6a8e <__aeabi_dadd+0x176>
    6a8c:	e76f      	b.n	696e <__aeabi_dadd+0x56>
    6a8e:	4656      	mov	r6, sl
    6a90:	0748      	lsls	r0, r1, #29
    6a92:	08ed      	lsrs	r5, r5, #3
    6a94:	08c9      	lsrs	r1, r1, #3
    6a96:	4305      	orrs	r5, r0
    6a98:	4b86      	ldr	r3, [pc, #536]	; (6cb4 <__aeabi_dadd+0x39c>)
    6a9a:	429c      	cmp	r4, r3
    6a9c:	d035      	beq.n	6b0a <__aeabi_dadd+0x1f2>
    6a9e:	030a      	lsls	r2, r1, #12
    6aa0:	0564      	lsls	r4, r4, #21
    6aa2:	0b12      	lsrs	r2, r2, #12
    6aa4:	0d64      	lsrs	r4, r4, #21
    6aa6:	e77f      	b.n	69a8 <__aeabi_dadd+0x90>
    6aa8:	4663      	mov	r3, ip
    6aaa:	1ae3      	subs	r3, r4, r3
    6aac:	469b      	mov	fp, r3
    6aae:	2b00      	cmp	r3, #0
    6ab0:	dc00      	bgt.n	6ab4 <__aeabi_dadd+0x19c>
    6ab2:	e08b      	b.n	6bcc <__aeabi_dadd+0x2b4>
    6ab4:	4667      	mov	r7, ip
    6ab6:	2f00      	cmp	r7, #0
    6ab8:	d03c      	beq.n	6b34 <__aeabi_dadd+0x21c>
    6aba:	4f7e      	ldr	r7, [pc, #504]	; (6cb4 <__aeabi_dadd+0x39c>)
    6abc:	42bc      	cmp	r4, r7
    6abe:	d100      	bne.n	6ac2 <__aeabi_dadd+0x1aa>
    6ac0:	e753      	b.n	696a <__aeabi_dadd+0x52>
    6ac2:	2780      	movs	r7, #128	; 0x80
    6ac4:	043f      	lsls	r7, r7, #16
    6ac6:	4338      	orrs	r0, r7
    6ac8:	465b      	mov	r3, fp
    6aca:	2b38      	cmp	r3, #56	; 0x38
    6acc:	dc00      	bgt.n	6ad0 <__aeabi_dadd+0x1b8>
    6ace:	e0f7      	b.n	6cc0 <__aeabi_dadd+0x3a8>
    6ad0:	4302      	orrs	r2, r0
    6ad2:	1e50      	subs	r0, r2, #1
    6ad4:	4182      	sbcs	r2, r0
    6ad6:	2000      	movs	r0, #0
    6ad8:	b2d2      	uxtb	r2, r2
    6ada:	1953      	adds	r3, r2, r5
    6adc:	1842      	adds	r2, r0, r1
    6ade:	42ab      	cmp	r3, r5
    6ae0:	4189      	sbcs	r1, r1
    6ae2:	001d      	movs	r5, r3
    6ae4:	4249      	negs	r1, r1
    6ae6:	1889      	adds	r1, r1, r2
    6ae8:	020b      	lsls	r3, r1, #8
    6aea:	d5cd      	bpl.n	6a88 <__aeabi_dadd+0x170>
    6aec:	4b71      	ldr	r3, [pc, #452]	; (6cb4 <__aeabi_dadd+0x39c>)
    6aee:	3401      	adds	r4, #1
    6af0:	429c      	cmp	r4, r3
    6af2:	d100      	bne.n	6af6 <__aeabi_dadd+0x1de>
    6af4:	e13d      	b.n	6d72 <__aeabi_dadd+0x45a>
    6af6:	2001      	movs	r0, #1
    6af8:	4a6f      	ldr	r2, [pc, #444]	; (6cb8 <__aeabi_dadd+0x3a0>)
    6afa:	086b      	lsrs	r3, r5, #1
    6afc:	400a      	ands	r2, r1
    6afe:	4028      	ands	r0, r5
    6b00:	4318      	orrs	r0, r3
    6b02:	07d5      	lsls	r5, r2, #31
    6b04:	4305      	orrs	r5, r0
    6b06:	0851      	lsrs	r1, r2, #1
    6b08:	e72f      	b.n	696a <__aeabi_dadd+0x52>
    6b0a:	002b      	movs	r3, r5
    6b0c:	430b      	orrs	r3, r1
    6b0e:	d100      	bne.n	6b12 <__aeabi_dadd+0x1fa>
    6b10:	e1cb      	b.n	6eaa <__aeabi_dadd+0x592>
    6b12:	2380      	movs	r3, #128	; 0x80
    6b14:	031b      	lsls	r3, r3, #12
    6b16:	430b      	orrs	r3, r1
    6b18:	031a      	lsls	r2, r3, #12
    6b1a:	0b12      	lsrs	r2, r2, #12
    6b1c:	e744      	b.n	69a8 <__aeabi_dadd+0x90>
    6b1e:	3e01      	subs	r6, #1
    6b20:	2e00      	cmp	r6, #0
    6b22:	d16d      	bne.n	6c00 <__aeabi_dadd+0x2e8>
    6b24:	1aae      	subs	r6, r5, r2
    6b26:	42b5      	cmp	r5, r6
    6b28:	419b      	sbcs	r3, r3
    6b2a:	1a09      	subs	r1, r1, r0
    6b2c:	425b      	negs	r3, r3
    6b2e:	1ac9      	subs	r1, r1, r3
    6b30:	0035      	movs	r5, r6
    6b32:	e775      	b.n	6a20 <__aeabi_dadd+0x108>
    6b34:	0007      	movs	r7, r0
    6b36:	4317      	orrs	r7, r2
    6b38:	d100      	bne.n	6b3c <__aeabi_dadd+0x224>
    6b3a:	e716      	b.n	696a <__aeabi_dadd+0x52>
    6b3c:	2301      	movs	r3, #1
    6b3e:	425b      	negs	r3, r3
    6b40:	469c      	mov	ip, r3
    6b42:	44e3      	add	fp, ip
    6b44:	465b      	mov	r3, fp
    6b46:	2b00      	cmp	r3, #0
    6b48:	d000      	beq.n	6b4c <__aeabi_dadd+0x234>
    6b4a:	e0e0      	b.n	6d0e <__aeabi_dadd+0x3f6>
    6b4c:	18aa      	adds	r2, r5, r2
    6b4e:	42aa      	cmp	r2, r5
    6b50:	419b      	sbcs	r3, r3
    6b52:	1809      	adds	r1, r1, r0
    6b54:	425b      	negs	r3, r3
    6b56:	1859      	adds	r1, r3, r1
    6b58:	0015      	movs	r5, r2
    6b5a:	e7c5      	b.n	6ae8 <__aeabi_dadd+0x1d0>
    6b5c:	2e00      	cmp	r6, #0
    6b5e:	d175      	bne.n	6c4c <__aeabi_dadd+0x334>
    6b60:	1c66      	adds	r6, r4, #1
    6b62:	0576      	lsls	r6, r6, #21
    6b64:	0d76      	lsrs	r6, r6, #21
    6b66:	2e01      	cmp	r6, #1
    6b68:	dc00      	bgt.n	6b6c <__aeabi_dadd+0x254>
    6b6a:	e0f3      	b.n	6d54 <__aeabi_dadd+0x43c>
    6b6c:	1aae      	subs	r6, r5, r2
    6b6e:	46b0      	mov	r8, r6
    6b70:	4545      	cmp	r5, r8
    6b72:	41bf      	sbcs	r7, r7
    6b74:	1a0e      	subs	r6, r1, r0
    6b76:	427f      	negs	r7, r7
    6b78:	1bf6      	subs	r6, r6, r7
    6b7a:	0237      	lsls	r7, r6, #8
    6b7c:	d400      	bmi.n	6b80 <__aeabi_dadd+0x268>
    6b7e:	e08f      	b.n	6ca0 <__aeabi_dadd+0x388>
    6b80:	1b55      	subs	r5, r2, r5
    6b82:	42aa      	cmp	r2, r5
    6b84:	41b6      	sbcs	r6, r6
    6b86:	1a41      	subs	r1, r0, r1
    6b88:	4276      	negs	r6, r6
    6b8a:	1b8e      	subs	r6, r1, r6
    6b8c:	469a      	mov	sl, r3
    6b8e:	e74b      	b.n	6a28 <__aeabi_dadd+0x110>
    6b90:	4656      	mov	r6, sl
    6b92:	2200      	movs	r2, #0
    6b94:	2500      	movs	r5, #0
    6b96:	e707      	b.n	69a8 <__aeabi_dadd+0x90>
    6b98:	0028      	movs	r0, r5
    6b9a:	f001 fb3b 	bl	8214 <__clzsi2>
    6b9e:	3020      	adds	r0, #32
    6ba0:	0003      	movs	r3, r0
    6ba2:	3b08      	subs	r3, #8
    6ba4:	2b1f      	cmp	r3, #31
    6ba6:	dc00      	bgt.n	6baa <__aeabi_dadd+0x292>
    6ba8:	e749      	b.n	6a3e <__aeabi_dadd+0x126>
    6baa:	002a      	movs	r2, r5
    6bac:	3828      	subs	r0, #40	; 0x28
    6bae:	4082      	lsls	r2, r0
    6bb0:	2500      	movs	r5, #0
    6bb2:	429c      	cmp	r4, r3
    6bb4:	dc00      	bgt.n	6bb8 <__aeabi_dadd+0x2a0>
    6bb6:	e74d      	b.n	6a54 <__aeabi_dadd+0x13c>
    6bb8:	493f      	ldr	r1, [pc, #252]	; (6cb8 <__aeabi_dadd+0x3a0>)
    6bba:	1ae4      	subs	r4, r4, r3
    6bbc:	4011      	ands	r1, r2
    6bbe:	e6d4      	b.n	696a <__aeabi_dadd+0x52>
    6bc0:	4302      	orrs	r2, r0
    6bc2:	1e50      	subs	r0, r2, #1
    6bc4:	4182      	sbcs	r2, r0
    6bc6:	b2d3      	uxtb	r3, r2
    6bc8:	2200      	movs	r2, #0
    6bca:	e722      	b.n	6a12 <__aeabi_dadd+0xfa>
    6bcc:	2b00      	cmp	r3, #0
    6bce:	d000      	beq.n	6bd2 <__aeabi_dadd+0x2ba>
    6bd0:	e0f3      	b.n	6dba <__aeabi_dadd+0x4a2>
    6bd2:	1c63      	adds	r3, r4, #1
    6bd4:	469c      	mov	ip, r3
    6bd6:	055b      	lsls	r3, r3, #21
    6bd8:	0d5b      	lsrs	r3, r3, #21
    6bda:	2b01      	cmp	r3, #1
    6bdc:	dc00      	bgt.n	6be0 <__aeabi_dadd+0x2c8>
    6bde:	e09f      	b.n	6d20 <__aeabi_dadd+0x408>
    6be0:	4b34      	ldr	r3, [pc, #208]	; (6cb4 <__aeabi_dadd+0x39c>)
    6be2:	459c      	cmp	ip, r3
    6be4:	d100      	bne.n	6be8 <__aeabi_dadd+0x2d0>
    6be6:	e0c3      	b.n	6d70 <__aeabi_dadd+0x458>
    6be8:	18aa      	adds	r2, r5, r2
    6bea:	1809      	adds	r1, r1, r0
    6bec:	42aa      	cmp	r2, r5
    6bee:	4180      	sbcs	r0, r0
    6bf0:	4240      	negs	r0, r0
    6bf2:	1841      	adds	r1, r0, r1
    6bf4:	07cd      	lsls	r5, r1, #31
    6bf6:	0852      	lsrs	r2, r2, #1
    6bf8:	4315      	orrs	r5, r2
    6bfa:	0849      	lsrs	r1, r1, #1
    6bfc:	4664      	mov	r4, ip
    6bfe:	e6b4      	b.n	696a <__aeabi_dadd+0x52>
    6c00:	4b2c      	ldr	r3, [pc, #176]	; (6cb4 <__aeabi_dadd+0x39c>)
    6c02:	429c      	cmp	r4, r3
    6c04:	d000      	beq.n	6c08 <__aeabi_dadd+0x2f0>
    6c06:	e6ec      	b.n	69e2 <__aeabi_dadd+0xca>
    6c08:	e6af      	b.n	696a <__aeabi_dadd+0x52>
    6c0a:	0011      	movs	r1, r2
    6c0c:	3c1f      	subs	r4, #31
    6c0e:	40e1      	lsrs	r1, r4
    6c10:	000c      	movs	r4, r1
    6c12:	2b20      	cmp	r3, #32
    6c14:	d100      	bne.n	6c18 <__aeabi_dadd+0x300>
    6c16:	e07f      	b.n	6d18 <__aeabi_dadd+0x400>
    6c18:	2140      	movs	r1, #64	; 0x40
    6c1a:	1acb      	subs	r3, r1, r3
    6c1c:	409a      	lsls	r2, r3
    6c1e:	4315      	orrs	r5, r2
    6c20:	1e6a      	subs	r2, r5, #1
    6c22:	4195      	sbcs	r5, r2
    6c24:	2100      	movs	r1, #0
    6c26:	4325      	orrs	r5, r4
    6c28:	2400      	movs	r4, #0
    6c2a:	e72d      	b.n	6a88 <__aeabi_dadd+0x170>
    6c2c:	0033      	movs	r3, r6
    6c2e:	0007      	movs	r7, r0
    6c30:	3b20      	subs	r3, #32
    6c32:	40df      	lsrs	r7, r3
    6c34:	003b      	movs	r3, r7
    6c36:	2e20      	cmp	r6, #32
    6c38:	d070      	beq.n	6d1c <__aeabi_dadd+0x404>
    6c3a:	2740      	movs	r7, #64	; 0x40
    6c3c:	1bbe      	subs	r6, r7, r6
    6c3e:	40b0      	lsls	r0, r6
    6c40:	4302      	orrs	r2, r0
    6c42:	1e50      	subs	r0, r2, #1
    6c44:	4182      	sbcs	r2, r0
    6c46:	4313      	orrs	r3, r2
    6c48:	2200      	movs	r2, #0
    6c4a:	e6e2      	b.n	6a12 <__aeabi_dadd+0xfa>
    6c4c:	2c00      	cmp	r4, #0
    6c4e:	d04f      	beq.n	6cf0 <__aeabi_dadd+0x3d8>
    6c50:	4c18      	ldr	r4, [pc, #96]	; (6cb4 <__aeabi_dadd+0x39c>)
    6c52:	45a4      	cmp	ip, r4
    6c54:	d100      	bne.n	6c58 <__aeabi_dadd+0x340>
    6c56:	e0ab      	b.n	6db0 <__aeabi_dadd+0x498>
    6c58:	2480      	movs	r4, #128	; 0x80
    6c5a:	0424      	lsls	r4, r4, #16
    6c5c:	4276      	negs	r6, r6
    6c5e:	4321      	orrs	r1, r4
    6c60:	2e38      	cmp	r6, #56	; 0x38
    6c62:	dd00      	ble.n	6c66 <__aeabi_dadd+0x34e>
    6c64:	e0df      	b.n	6e26 <__aeabi_dadd+0x50e>
    6c66:	2e1f      	cmp	r6, #31
    6c68:	dd00      	ble.n	6c6c <__aeabi_dadd+0x354>
    6c6a:	e143      	b.n	6ef4 <__aeabi_dadd+0x5dc>
    6c6c:	2720      	movs	r7, #32
    6c6e:	1bbc      	subs	r4, r7, r6
    6c70:	46a1      	mov	r9, r4
    6c72:	000c      	movs	r4, r1
    6c74:	464f      	mov	r7, r9
    6c76:	40bc      	lsls	r4, r7
    6c78:	46a0      	mov	r8, r4
    6c7a:	002c      	movs	r4, r5
    6c7c:	4647      	mov	r7, r8
    6c7e:	40f4      	lsrs	r4, r6
    6c80:	433c      	orrs	r4, r7
    6c82:	464f      	mov	r7, r9
    6c84:	40bd      	lsls	r5, r7
    6c86:	1e6f      	subs	r7, r5, #1
    6c88:	41bd      	sbcs	r5, r7
    6c8a:	40f1      	lsrs	r1, r6
    6c8c:	432c      	orrs	r4, r5
    6c8e:	1b15      	subs	r5, r2, r4
    6c90:	42aa      	cmp	r2, r5
    6c92:	4192      	sbcs	r2, r2
    6c94:	1a41      	subs	r1, r0, r1
    6c96:	4252      	negs	r2, r2
    6c98:	1a89      	subs	r1, r1, r2
    6c9a:	4664      	mov	r4, ip
    6c9c:	469a      	mov	sl, r3
    6c9e:	e6bf      	b.n	6a20 <__aeabi_dadd+0x108>
    6ca0:	4641      	mov	r1, r8
    6ca2:	4645      	mov	r5, r8
    6ca4:	4331      	orrs	r1, r6
    6ca6:	d000      	beq.n	6caa <__aeabi_dadd+0x392>
    6ca8:	e6be      	b.n	6a28 <__aeabi_dadd+0x110>
    6caa:	2600      	movs	r6, #0
    6cac:	2400      	movs	r4, #0
    6cae:	2500      	movs	r5, #0
    6cb0:	e6f2      	b.n	6a98 <__aeabi_dadd+0x180>
    6cb2:	46c0      	nop			; (mov r8, r8)
    6cb4:	000007ff 	.word	0x000007ff
    6cb8:	ff7fffff 	.word	0xff7fffff
    6cbc:	800fffff 	.word	0x800fffff
    6cc0:	2b1f      	cmp	r3, #31
    6cc2:	dc59      	bgt.n	6d78 <__aeabi_dadd+0x460>
    6cc4:	2720      	movs	r7, #32
    6cc6:	1aff      	subs	r7, r7, r3
    6cc8:	46bc      	mov	ip, r7
    6cca:	0007      	movs	r7, r0
    6ccc:	4663      	mov	r3, ip
    6cce:	409f      	lsls	r7, r3
    6cd0:	465b      	mov	r3, fp
    6cd2:	46b9      	mov	r9, r7
    6cd4:	0017      	movs	r7, r2
    6cd6:	40df      	lsrs	r7, r3
    6cd8:	46b8      	mov	r8, r7
    6cda:	464f      	mov	r7, r9
    6cdc:	4643      	mov	r3, r8
    6cde:	431f      	orrs	r7, r3
    6ce0:	4663      	mov	r3, ip
    6ce2:	409a      	lsls	r2, r3
    6ce4:	1e53      	subs	r3, r2, #1
    6ce6:	419a      	sbcs	r2, r3
    6ce8:	465b      	mov	r3, fp
    6cea:	433a      	orrs	r2, r7
    6cec:	40d8      	lsrs	r0, r3
    6cee:	e6f4      	b.n	6ada <__aeabi_dadd+0x1c2>
    6cf0:	000c      	movs	r4, r1
    6cf2:	432c      	orrs	r4, r5
    6cf4:	d05c      	beq.n	6db0 <__aeabi_dadd+0x498>
    6cf6:	43f6      	mvns	r6, r6
    6cf8:	2e00      	cmp	r6, #0
    6cfa:	d155      	bne.n	6da8 <__aeabi_dadd+0x490>
    6cfc:	1b55      	subs	r5, r2, r5
    6cfe:	42aa      	cmp	r2, r5
    6d00:	41a4      	sbcs	r4, r4
    6d02:	1a41      	subs	r1, r0, r1
    6d04:	4264      	negs	r4, r4
    6d06:	1b09      	subs	r1, r1, r4
    6d08:	469a      	mov	sl, r3
    6d0a:	4664      	mov	r4, ip
    6d0c:	e688      	b.n	6a20 <__aeabi_dadd+0x108>
    6d0e:	4f96      	ldr	r7, [pc, #600]	; (6f68 <__aeabi_dadd+0x650>)
    6d10:	42bc      	cmp	r4, r7
    6d12:	d000      	beq.n	6d16 <__aeabi_dadd+0x3fe>
    6d14:	e6d8      	b.n	6ac8 <__aeabi_dadd+0x1b0>
    6d16:	e628      	b.n	696a <__aeabi_dadd+0x52>
    6d18:	2200      	movs	r2, #0
    6d1a:	e780      	b.n	6c1e <__aeabi_dadd+0x306>
    6d1c:	2000      	movs	r0, #0
    6d1e:	e78f      	b.n	6c40 <__aeabi_dadd+0x328>
    6d20:	000b      	movs	r3, r1
    6d22:	432b      	orrs	r3, r5
    6d24:	2c00      	cmp	r4, #0
    6d26:	d000      	beq.n	6d2a <__aeabi_dadd+0x412>
    6d28:	e0c2      	b.n	6eb0 <__aeabi_dadd+0x598>
    6d2a:	2b00      	cmp	r3, #0
    6d2c:	d100      	bne.n	6d30 <__aeabi_dadd+0x418>
    6d2e:	e101      	b.n	6f34 <__aeabi_dadd+0x61c>
    6d30:	0003      	movs	r3, r0
    6d32:	4313      	orrs	r3, r2
    6d34:	d100      	bne.n	6d38 <__aeabi_dadd+0x420>
    6d36:	e618      	b.n	696a <__aeabi_dadd+0x52>
    6d38:	18ab      	adds	r3, r5, r2
    6d3a:	42ab      	cmp	r3, r5
    6d3c:	41b6      	sbcs	r6, r6
    6d3e:	1809      	adds	r1, r1, r0
    6d40:	4276      	negs	r6, r6
    6d42:	1871      	adds	r1, r6, r1
    6d44:	020a      	lsls	r2, r1, #8
    6d46:	d400      	bmi.n	6d4a <__aeabi_dadd+0x432>
    6d48:	e109      	b.n	6f5e <__aeabi_dadd+0x646>
    6d4a:	4a88      	ldr	r2, [pc, #544]	; (6f6c <__aeabi_dadd+0x654>)
    6d4c:	001d      	movs	r5, r3
    6d4e:	4011      	ands	r1, r2
    6d50:	4664      	mov	r4, ip
    6d52:	e60a      	b.n	696a <__aeabi_dadd+0x52>
    6d54:	2c00      	cmp	r4, #0
    6d56:	d15b      	bne.n	6e10 <__aeabi_dadd+0x4f8>
    6d58:	000e      	movs	r6, r1
    6d5a:	432e      	orrs	r6, r5
    6d5c:	d000      	beq.n	6d60 <__aeabi_dadd+0x448>
    6d5e:	e08a      	b.n	6e76 <__aeabi_dadd+0x55e>
    6d60:	0001      	movs	r1, r0
    6d62:	4311      	orrs	r1, r2
    6d64:	d100      	bne.n	6d68 <__aeabi_dadd+0x450>
    6d66:	e0c2      	b.n	6eee <__aeabi_dadd+0x5d6>
    6d68:	0001      	movs	r1, r0
    6d6a:	0015      	movs	r5, r2
    6d6c:	469a      	mov	sl, r3
    6d6e:	e5fc      	b.n	696a <__aeabi_dadd+0x52>
    6d70:	4664      	mov	r4, ip
    6d72:	2100      	movs	r1, #0
    6d74:	2500      	movs	r5, #0
    6d76:	e68f      	b.n	6a98 <__aeabi_dadd+0x180>
    6d78:	2320      	movs	r3, #32
    6d7a:	425b      	negs	r3, r3
    6d7c:	469c      	mov	ip, r3
    6d7e:	44dc      	add	ip, fp
    6d80:	4663      	mov	r3, ip
    6d82:	0007      	movs	r7, r0
    6d84:	40df      	lsrs	r7, r3
    6d86:	465b      	mov	r3, fp
    6d88:	46bc      	mov	ip, r7
    6d8a:	2b20      	cmp	r3, #32
    6d8c:	d100      	bne.n	6d90 <__aeabi_dadd+0x478>
    6d8e:	e0ac      	b.n	6eea <__aeabi_dadd+0x5d2>
    6d90:	2340      	movs	r3, #64	; 0x40
    6d92:	465f      	mov	r7, fp
    6d94:	1bdb      	subs	r3, r3, r7
    6d96:	4098      	lsls	r0, r3
    6d98:	4302      	orrs	r2, r0
    6d9a:	1e50      	subs	r0, r2, #1
    6d9c:	4182      	sbcs	r2, r0
    6d9e:	4663      	mov	r3, ip
    6da0:	4313      	orrs	r3, r2
    6da2:	001a      	movs	r2, r3
    6da4:	2000      	movs	r0, #0
    6da6:	e698      	b.n	6ada <__aeabi_dadd+0x1c2>
    6da8:	4c6f      	ldr	r4, [pc, #444]	; (6f68 <__aeabi_dadd+0x650>)
    6daa:	45a4      	cmp	ip, r4
    6dac:	d000      	beq.n	6db0 <__aeabi_dadd+0x498>
    6dae:	e757      	b.n	6c60 <__aeabi_dadd+0x348>
    6db0:	0001      	movs	r1, r0
    6db2:	0015      	movs	r5, r2
    6db4:	4664      	mov	r4, ip
    6db6:	469a      	mov	sl, r3
    6db8:	e5d7      	b.n	696a <__aeabi_dadd+0x52>
    6dba:	2c00      	cmp	r4, #0
    6dbc:	d139      	bne.n	6e32 <__aeabi_dadd+0x51a>
    6dbe:	000c      	movs	r4, r1
    6dc0:	432c      	orrs	r4, r5
    6dc2:	d06e      	beq.n	6ea2 <__aeabi_dadd+0x58a>
    6dc4:	43db      	mvns	r3, r3
    6dc6:	2b00      	cmp	r3, #0
    6dc8:	d01a      	beq.n	6e00 <__aeabi_dadd+0x4e8>
    6dca:	4c67      	ldr	r4, [pc, #412]	; (6f68 <__aeabi_dadd+0x650>)
    6dcc:	45a4      	cmp	ip, r4
    6dce:	d068      	beq.n	6ea2 <__aeabi_dadd+0x58a>
    6dd0:	2b38      	cmp	r3, #56	; 0x38
    6dd2:	dd00      	ble.n	6dd6 <__aeabi_dadd+0x4be>
    6dd4:	e0a4      	b.n	6f20 <__aeabi_dadd+0x608>
    6dd6:	2b1f      	cmp	r3, #31
    6dd8:	dd00      	ble.n	6ddc <__aeabi_dadd+0x4c4>
    6dda:	e0ae      	b.n	6f3a <__aeabi_dadd+0x622>
    6ddc:	2420      	movs	r4, #32
    6dde:	000f      	movs	r7, r1
    6de0:	1ae4      	subs	r4, r4, r3
    6de2:	40a7      	lsls	r7, r4
    6de4:	46b9      	mov	r9, r7
    6de6:	002f      	movs	r7, r5
    6de8:	40df      	lsrs	r7, r3
    6dea:	46b8      	mov	r8, r7
    6dec:	46a3      	mov	fp, r4
    6dee:	464f      	mov	r7, r9
    6df0:	4644      	mov	r4, r8
    6df2:	4327      	orrs	r7, r4
    6df4:	465c      	mov	r4, fp
    6df6:	40a5      	lsls	r5, r4
    6df8:	1e6c      	subs	r4, r5, #1
    6dfa:	41a5      	sbcs	r5, r4
    6dfc:	40d9      	lsrs	r1, r3
    6dfe:	433d      	orrs	r5, r7
    6e00:	18ad      	adds	r5, r5, r2
    6e02:	4295      	cmp	r5, r2
    6e04:	419b      	sbcs	r3, r3
    6e06:	1809      	adds	r1, r1, r0
    6e08:	425b      	negs	r3, r3
    6e0a:	1859      	adds	r1, r3, r1
    6e0c:	4664      	mov	r4, ip
    6e0e:	e66b      	b.n	6ae8 <__aeabi_dadd+0x1d0>
    6e10:	000c      	movs	r4, r1
    6e12:	432c      	orrs	r4, r5
    6e14:	d115      	bne.n	6e42 <__aeabi_dadd+0x52a>
    6e16:	0001      	movs	r1, r0
    6e18:	4311      	orrs	r1, r2
    6e1a:	d07b      	beq.n	6f14 <__aeabi_dadd+0x5fc>
    6e1c:	0001      	movs	r1, r0
    6e1e:	0015      	movs	r5, r2
    6e20:	469a      	mov	sl, r3
    6e22:	4c51      	ldr	r4, [pc, #324]	; (6f68 <__aeabi_dadd+0x650>)
    6e24:	e5a1      	b.n	696a <__aeabi_dadd+0x52>
    6e26:	430d      	orrs	r5, r1
    6e28:	1e69      	subs	r1, r5, #1
    6e2a:	418d      	sbcs	r5, r1
    6e2c:	2100      	movs	r1, #0
    6e2e:	b2ec      	uxtb	r4, r5
    6e30:	e72d      	b.n	6c8e <__aeabi_dadd+0x376>
    6e32:	4c4d      	ldr	r4, [pc, #308]	; (6f68 <__aeabi_dadd+0x650>)
    6e34:	45a4      	cmp	ip, r4
    6e36:	d034      	beq.n	6ea2 <__aeabi_dadd+0x58a>
    6e38:	2480      	movs	r4, #128	; 0x80
    6e3a:	0424      	lsls	r4, r4, #16
    6e3c:	425b      	negs	r3, r3
    6e3e:	4321      	orrs	r1, r4
    6e40:	e7c6      	b.n	6dd0 <__aeabi_dadd+0x4b8>
    6e42:	0004      	movs	r4, r0
    6e44:	4314      	orrs	r4, r2
    6e46:	d04e      	beq.n	6ee6 <__aeabi_dadd+0x5ce>
    6e48:	08ed      	lsrs	r5, r5, #3
    6e4a:	074c      	lsls	r4, r1, #29
    6e4c:	432c      	orrs	r4, r5
    6e4e:	2580      	movs	r5, #128	; 0x80
    6e50:	08c9      	lsrs	r1, r1, #3
    6e52:	032d      	lsls	r5, r5, #12
    6e54:	4229      	tst	r1, r5
    6e56:	d008      	beq.n	6e6a <__aeabi_dadd+0x552>
    6e58:	08c6      	lsrs	r6, r0, #3
    6e5a:	422e      	tst	r6, r5
    6e5c:	d105      	bne.n	6e6a <__aeabi_dadd+0x552>
    6e5e:	08d2      	lsrs	r2, r2, #3
    6e60:	0741      	lsls	r1, r0, #29
    6e62:	4311      	orrs	r1, r2
    6e64:	000c      	movs	r4, r1
    6e66:	469a      	mov	sl, r3
    6e68:	0031      	movs	r1, r6
    6e6a:	0f62      	lsrs	r2, r4, #29
    6e6c:	00c9      	lsls	r1, r1, #3
    6e6e:	00e5      	lsls	r5, r4, #3
    6e70:	4311      	orrs	r1, r2
    6e72:	4c3d      	ldr	r4, [pc, #244]	; (6f68 <__aeabi_dadd+0x650>)
    6e74:	e579      	b.n	696a <__aeabi_dadd+0x52>
    6e76:	0006      	movs	r6, r0
    6e78:	4316      	orrs	r6, r2
    6e7a:	d100      	bne.n	6e7e <__aeabi_dadd+0x566>
    6e7c:	e575      	b.n	696a <__aeabi_dadd+0x52>
    6e7e:	1aae      	subs	r6, r5, r2
    6e80:	46b0      	mov	r8, r6
    6e82:	4545      	cmp	r5, r8
    6e84:	41bf      	sbcs	r7, r7
    6e86:	1a0e      	subs	r6, r1, r0
    6e88:	427f      	negs	r7, r7
    6e8a:	1bf6      	subs	r6, r6, r7
    6e8c:	0237      	lsls	r7, r6, #8
    6e8e:	d400      	bmi.n	6e92 <__aeabi_dadd+0x57a>
    6e90:	e5f4      	b.n	6a7c <__aeabi_dadd+0x164>
    6e92:	1b55      	subs	r5, r2, r5
    6e94:	42aa      	cmp	r2, r5
    6e96:	41b6      	sbcs	r6, r6
    6e98:	1a41      	subs	r1, r0, r1
    6e9a:	4276      	negs	r6, r6
    6e9c:	1b89      	subs	r1, r1, r6
    6e9e:	469a      	mov	sl, r3
    6ea0:	e563      	b.n	696a <__aeabi_dadd+0x52>
    6ea2:	0001      	movs	r1, r0
    6ea4:	0015      	movs	r5, r2
    6ea6:	4664      	mov	r4, ip
    6ea8:	e55f      	b.n	696a <__aeabi_dadd+0x52>
    6eaa:	2200      	movs	r2, #0
    6eac:	2500      	movs	r5, #0
    6eae:	e57b      	b.n	69a8 <__aeabi_dadd+0x90>
    6eb0:	2b00      	cmp	r3, #0
    6eb2:	d03b      	beq.n	6f2c <__aeabi_dadd+0x614>
    6eb4:	0003      	movs	r3, r0
    6eb6:	4313      	orrs	r3, r2
    6eb8:	d015      	beq.n	6ee6 <__aeabi_dadd+0x5ce>
    6eba:	08ed      	lsrs	r5, r5, #3
    6ebc:	074b      	lsls	r3, r1, #29
    6ebe:	432b      	orrs	r3, r5
    6ec0:	2580      	movs	r5, #128	; 0x80
    6ec2:	08c9      	lsrs	r1, r1, #3
    6ec4:	032d      	lsls	r5, r5, #12
    6ec6:	4229      	tst	r1, r5
    6ec8:	d007      	beq.n	6eda <__aeabi_dadd+0x5c2>
    6eca:	08c4      	lsrs	r4, r0, #3
    6ecc:	422c      	tst	r4, r5
    6ece:	d104      	bne.n	6eda <__aeabi_dadd+0x5c2>
    6ed0:	0741      	lsls	r1, r0, #29
    6ed2:	000b      	movs	r3, r1
    6ed4:	0021      	movs	r1, r4
    6ed6:	08d2      	lsrs	r2, r2, #3
    6ed8:	4313      	orrs	r3, r2
    6eda:	00c9      	lsls	r1, r1, #3
    6edc:	0f5a      	lsrs	r2, r3, #29
    6ede:	4311      	orrs	r1, r2
    6ee0:	00dd      	lsls	r5, r3, #3
    6ee2:	4c21      	ldr	r4, [pc, #132]	; (6f68 <__aeabi_dadd+0x650>)
    6ee4:	e541      	b.n	696a <__aeabi_dadd+0x52>
    6ee6:	4c20      	ldr	r4, [pc, #128]	; (6f68 <__aeabi_dadd+0x650>)
    6ee8:	e53f      	b.n	696a <__aeabi_dadd+0x52>
    6eea:	2000      	movs	r0, #0
    6eec:	e754      	b.n	6d98 <__aeabi_dadd+0x480>
    6eee:	2600      	movs	r6, #0
    6ef0:	2500      	movs	r5, #0
    6ef2:	e5d1      	b.n	6a98 <__aeabi_dadd+0x180>
    6ef4:	0034      	movs	r4, r6
    6ef6:	000f      	movs	r7, r1
    6ef8:	3c20      	subs	r4, #32
    6efa:	40e7      	lsrs	r7, r4
    6efc:	003c      	movs	r4, r7
    6efe:	2e20      	cmp	r6, #32
    6f00:	d02b      	beq.n	6f5a <__aeabi_dadd+0x642>
    6f02:	2740      	movs	r7, #64	; 0x40
    6f04:	1bbe      	subs	r6, r7, r6
    6f06:	40b1      	lsls	r1, r6
    6f08:	430d      	orrs	r5, r1
    6f0a:	1e69      	subs	r1, r5, #1
    6f0c:	418d      	sbcs	r5, r1
    6f0e:	2100      	movs	r1, #0
    6f10:	432c      	orrs	r4, r5
    6f12:	e6bc      	b.n	6c8e <__aeabi_dadd+0x376>
    6f14:	2180      	movs	r1, #128	; 0x80
    6f16:	2600      	movs	r6, #0
    6f18:	0309      	lsls	r1, r1, #12
    6f1a:	4c13      	ldr	r4, [pc, #76]	; (6f68 <__aeabi_dadd+0x650>)
    6f1c:	2500      	movs	r5, #0
    6f1e:	e5bb      	b.n	6a98 <__aeabi_dadd+0x180>
    6f20:	430d      	orrs	r5, r1
    6f22:	1e69      	subs	r1, r5, #1
    6f24:	418d      	sbcs	r5, r1
    6f26:	2100      	movs	r1, #0
    6f28:	b2ed      	uxtb	r5, r5
    6f2a:	e769      	b.n	6e00 <__aeabi_dadd+0x4e8>
    6f2c:	0001      	movs	r1, r0
    6f2e:	0015      	movs	r5, r2
    6f30:	4c0d      	ldr	r4, [pc, #52]	; (6f68 <__aeabi_dadd+0x650>)
    6f32:	e51a      	b.n	696a <__aeabi_dadd+0x52>
    6f34:	0001      	movs	r1, r0
    6f36:	0015      	movs	r5, r2
    6f38:	e517      	b.n	696a <__aeabi_dadd+0x52>
    6f3a:	001c      	movs	r4, r3
    6f3c:	000f      	movs	r7, r1
    6f3e:	3c20      	subs	r4, #32
    6f40:	40e7      	lsrs	r7, r4
    6f42:	003c      	movs	r4, r7
    6f44:	2b20      	cmp	r3, #32
    6f46:	d00c      	beq.n	6f62 <__aeabi_dadd+0x64a>
    6f48:	2740      	movs	r7, #64	; 0x40
    6f4a:	1afb      	subs	r3, r7, r3
    6f4c:	4099      	lsls	r1, r3
    6f4e:	430d      	orrs	r5, r1
    6f50:	1e69      	subs	r1, r5, #1
    6f52:	418d      	sbcs	r5, r1
    6f54:	2100      	movs	r1, #0
    6f56:	4325      	orrs	r5, r4
    6f58:	e752      	b.n	6e00 <__aeabi_dadd+0x4e8>
    6f5a:	2100      	movs	r1, #0
    6f5c:	e7d4      	b.n	6f08 <__aeabi_dadd+0x5f0>
    6f5e:	001d      	movs	r5, r3
    6f60:	e592      	b.n	6a88 <__aeabi_dadd+0x170>
    6f62:	2100      	movs	r1, #0
    6f64:	e7f3      	b.n	6f4e <__aeabi_dadd+0x636>
    6f66:	46c0      	nop			; (mov r8, r8)
    6f68:	000007ff 	.word	0x000007ff
    6f6c:	ff7fffff 	.word	0xff7fffff

00006f70 <__aeabi_ddiv>:
    6f70:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f72:	4656      	mov	r6, sl
    6f74:	464d      	mov	r5, r9
    6f76:	4644      	mov	r4, r8
    6f78:	465f      	mov	r7, fp
    6f7a:	b4f0      	push	{r4, r5, r6, r7}
    6f7c:	001d      	movs	r5, r3
    6f7e:	030e      	lsls	r6, r1, #12
    6f80:	004c      	lsls	r4, r1, #1
    6f82:	0fcb      	lsrs	r3, r1, #31
    6f84:	b087      	sub	sp, #28
    6f86:	0007      	movs	r7, r0
    6f88:	4692      	mov	sl, r2
    6f8a:	4681      	mov	r9, r0
    6f8c:	0b36      	lsrs	r6, r6, #12
    6f8e:	0d64      	lsrs	r4, r4, #21
    6f90:	4698      	mov	r8, r3
    6f92:	d06a      	beq.n	706a <__aeabi_ddiv+0xfa>
    6f94:	4b6d      	ldr	r3, [pc, #436]	; (714c <__aeabi_ddiv+0x1dc>)
    6f96:	429c      	cmp	r4, r3
    6f98:	d035      	beq.n	7006 <__aeabi_ddiv+0x96>
    6f9a:	2280      	movs	r2, #128	; 0x80
    6f9c:	0f43      	lsrs	r3, r0, #29
    6f9e:	0412      	lsls	r2, r2, #16
    6fa0:	4313      	orrs	r3, r2
    6fa2:	00f6      	lsls	r6, r6, #3
    6fa4:	431e      	orrs	r6, r3
    6fa6:	00c3      	lsls	r3, r0, #3
    6fa8:	4699      	mov	r9, r3
    6faa:	4b69      	ldr	r3, [pc, #420]	; (7150 <__aeabi_ddiv+0x1e0>)
    6fac:	2700      	movs	r7, #0
    6fae:	469c      	mov	ip, r3
    6fb0:	2300      	movs	r3, #0
    6fb2:	4464      	add	r4, ip
    6fb4:	9302      	str	r3, [sp, #8]
    6fb6:	032b      	lsls	r3, r5, #12
    6fb8:	0068      	lsls	r0, r5, #1
    6fba:	0b1b      	lsrs	r3, r3, #12
    6fbc:	0fed      	lsrs	r5, r5, #31
    6fbe:	4651      	mov	r1, sl
    6fc0:	469b      	mov	fp, r3
    6fc2:	0d40      	lsrs	r0, r0, #21
    6fc4:	9500      	str	r5, [sp, #0]
    6fc6:	d100      	bne.n	6fca <__aeabi_ddiv+0x5a>
    6fc8:	e078      	b.n	70bc <__aeabi_ddiv+0x14c>
    6fca:	4b60      	ldr	r3, [pc, #384]	; (714c <__aeabi_ddiv+0x1dc>)
    6fcc:	4298      	cmp	r0, r3
    6fce:	d06c      	beq.n	70aa <__aeabi_ddiv+0x13a>
    6fd0:	465b      	mov	r3, fp
    6fd2:	00da      	lsls	r2, r3, #3
    6fd4:	0f4b      	lsrs	r3, r1, #29
    6fd6:	2180      	movs	r1, #128	; 0x80
    6fd8:	0409      	lsls	r1, r1, #16
    6fda:	430b      	orrs	r3, r1
    6fdc:	4313      	orrs	r3, r2
    6fde:	469b      	mov	fp, r3
    6fe0:	4653      	mov	r3, sl
    6fe2:	00d9      	lsls	r1, r3, #3
    6fe4:	4b5a      	ldr	r3, [pc, #360]	; (7150 <__aeabi_ddiv+0x1e0>)
    6fe6:	469c      	mov	ip, r3
    6fe8:	2300      	movs	r3, #0
    6fea:	4460      	add	r0, ip
    6fec:	4642      	mov	r2, r8
    6fee:	1a20      	subs	r0, r4, r0
    6ff0:	406a      	eors	r2, r5
    6ff2:	4692      	mov	sl, r2
    6ff4:	9001      	str	r0, [sp, #4]
    6ff6:	431f      	orrs	r7, r3
    6ff8:	2f0f      	cmp	r7, #15
    6ffa:	d900      	bls.n	6ffe <__aeabi_ddiv+0x8e>
    6ffc:	e0b0      	b.n	7160 <__aeabi_ddiv+0x1f0>
    6ffe:	4855      	ldr	r0, [pc, #340]	; (7154 <__aeabi_ddiv+0x1e4>)
    7000:	00bf      	lsls	r7, r7, #2
    7002:	59c0      	ldr	r0, [r0, r7]
    7004:	4687      	mov	pc, r0
    7006:	4337      	orrs	r7, r6
    7008:	d000      	beq.n	700c <__aeabi_ddiv+0x9c>
    700a:	e088      	b.n	711e <__aeabi_ddiv+0x1ae>
    700c:	2300      	movs	r3, #0
    700e:	4699      	mov	r9, r3
    7010:	3302      	adds	r3, #2
    7012:	2708      	movs	r7, #8
    7014:	2600      	movs	r6, #0
    7016:	9302      	str	r3, [sp, #8]
    7018:	e7cd      	b.n	6fb6 <__aeabi_ddiv+0x46>
    701a:	4643      	mov	r3, r8
    701c:	46b3      	mov	fp, r6
    701e:	4649      	mov	r1, r9
    7020:	9300      	str	r3, [sp, #0]
    7022:	9b02      	ldr	r3, [sp, #8]
    7024:	9a00      	ldr	r2, [sp, #0]
    7026:	4692      	mov	sl, r2
    7028:	2b02      	cmp	r3, #2
    702a:	d000      	beq.n	702e <__aeabi_ddiv+0xbe>
    702c:	e1bf      	b.n	73ae <__aeabi_ddiv+0x43e>
    702e:	2100      	movs	r1, #0
    7030:	4653      	mov	r3, sl
    7032:	2201      	movs	r2, #1
    7034:	2600      	movs	r6, #0
    7036:	4689      	mov	r9, r1
    7038:	401a      	ands	r2, r3
    703a:	4b44      	ldr	r3, [pc, #272]	; (714c <__aeabi_ddiv+0x1dc>)
    703c:	2100      	movs	r1, #0
    703e:	0336      	lsls	r6, r6, #12
    7040:	0d0c      	lsrs	r4, r1, #20
    7042:	0524      	lsls	r4, r4, #20
    7044:	0b36      	lsrs	r6, r6, #12
    7046:	4326      	orrs	r6, r4
    7048:	4c43      	ldr	r4, [pc, #268]	; (7158 <__aeabi_ddiv+0x1e8>)
    704a:	051b      	lsls	r3, r3, #20
    704c:	4026      	ands	r6, r4
    704e:	431e      	orrs	r6, r3
    7050:	0076      	lsls	r6, r6, #1
    7052:	07d2      	lsls	r2, r2, #31
    7054:	0876      	lsrs	r6, r6, #1
    7056:	4316      	orrs	r6, r2
    7058:	4648      	mov	r0, r9
    705a:	0031      	movs	r1, r6
    705c:	b007      	add	sp, #28
    705e:	bc3c      	pop	{r2, r3, r4, r5}
    7060:	4690      	mov	r8, r2
    7062:	4699      	mov	r9, r3
    7064:	46a2      	mov	sl, r4
    7066:	46ab      	mov	fp, r5
    7068:	bdf0      	pop	{r4, r5, r6, r7, pc}
    706a:	0033      	movs	r3, r6
    706c:	4303      	orrs	r3, r0
    706e:	d04f      	beq.n	7110 <__aeabi_ddiv+0x1a0>
    7070:	2e00      	cmp	r6, #0
    7072:	d100      	bne.n	7076 <__aeabi_ddiv+0x106>
    7074:	e1bc      	b.n	73f0 <__aeabi_ddiv+0x480>
    7076:	0030      	movs	r0, r6
    7078:	f001 f8cc 	bl	8214 <__clzsi2>
    707c:	0003      	movs	r3, r0
    707e:	3b0b      	subs	r3, #11
    7080:	2b1c      	cmp	r3, #28
    7082:	dd00      	ble.n	7086 <__aeabi_ddiv+0x116>
    7084:	e1ad      	b.n	73e2 <__aeabi_ddiv+0x472>
    7086:	221d      	movs	r2, #29
    7088:	0001      	movs	r1, r0
    708a:	1ad3      	subs	r3, r2, r3
    708c:	3908      	subs	r1, #8
    708e:	003a      	movs	r2, r7
    7090:	408f      	lsls	r7, r1
    7092:	408e      	lsls	r6, r1
    7094:	40da      	lsrs	r2, r3
    7096:	46b9      	mov	r9, r7
    7098:	4316      	orrs	r6, r2
    709a:	4b30      	ldr	r3, [pc, #192]	; (715c <__aeabi_ddiv+0x1ec>)
    709c:	2700      	movs	r7, #0
    709e:	469c      	mov	ip, r3
    70a0:	2300      	movs	r3, #0
    70a2:	4460      	add	r0, ip
    70a4:	4244      	negs	r4, r0
    70a6:	9302      	str	r3, [sp, #8]
    70a8:	e785      	b.n	6fb6 <__aeabi_ddiv+0x46>
    70aa:	4653      	mov	r3, sl
    70ac:	465a      	mov	r2, fp
    70ae:	4313      	orrs	r3, r2
    70b0:	d12c      	bne.n	710c <__aeabi_ddiv+0x19c>
    70b2:	2300      	movs	r3, #0
    70b4:	2100      	movs	r1, #0
    70b6:	469b      	mov	fp, r3
    70b8:	3302      	adds	r3, #2
    70ba:	e797      	b.n	6fec <__aeabi_ddiv+0x7c>
    70bc:	430b      	orrs	r3, r1
    70be:	d020      	beq.n	7102 <__aeabi_ddiv+0x192>
    70c0:	465b      	mov	r3, fp
    70c2:	2b00      	cmp	r3, #0
    70c4:	d100      	bne.n	70c8 <__aeabi_ddiv+0x158>
    70c6:	e19e      	b.n	7406 <__aeabi_ddiv+0x496>
    70c8:	4658      	mov	r0, fp
    70ca:	f001 f8a3 	bl	8214 <__clzsi2>
    70ce:	0003      	movs	r3, r0
    70d0:	3b0b      	subs	r3, #11
    70d2:	2b1c      	cmp	r3, #28
    70d4:	dd00      	ble.n	70d8 <__aeabi_ddiv+0x168>
    70d6:	e18f      	b.n	73f8 <__aeabi_ddiv+0x488>
    70d8:	0002      	movs	r2, r0
    70da:	4659      	mov	r1, fp
    70dc:	3a08      	subs	r2, #8
    70de:	4091      	lsls	r1, r2
    70e0:	468b      	mov	fp, r1
    70e2:	211d      	movs	r1, #29
    70e4:	1acb      	subs	r3, r1, r3
    70e6:	4651      	mov	r1, sl
    70e8:	40d9      	lsrs	r1, r3
    70ea:	000b      	movs	r3, r1
    70ec:	4659      	mov	r1, fp
    70ee:	430b      	orrs	r3, r1
    70f0:	4651      	mov	r1, sl
    70f2:	469b      	mov	fp, r3
    70f4:	4091      	lsls	r1, r2
    70f6:	4b19      	ldr	r3, [pc, #100]	; (715c <__aeabi_ddiv+0x1ec>)
    70f8:	469c      	mov	ip, r3
    70fa:	4460      	add	r0, ip
    70fc:	4240      	negs	r0, r0
    70fe:	2300      	movs	r3, #0
    7100:	e774      	b.n	6fec <__aeabi_ddiv+0x7c>
    7102:	2300      	movs	r3, #0
    7104:	2100      	movs	r1, #0
    7106:	469b      	mov	fp, r3
    7108:	3301      	adds	r3, #1
    710a:	e76f      	b.n	6fec <__aeabi_ddiv+0x7c>
    710c:	2303      	movs	r3, #3
    710e:	e76d      	b.n	6fec <__aeabi_ddiv+0x7c>
    7110:	2300      	movs	r3, #0
    7112:	4699      	mov	r9, r3
    7114:	3301      	adds	r3, #1
    7116:	2704      	movs	r7, #4
    7118:	2600      	movs	r6, #0
    711a:	9302      	str	r3, [sp, #8]
    711c:	e74b      	b.n	6fb6 <__aeabi_ddiv+0x46>
    711e:	2303      	movs	r3, #3
    7120:	270c      	movs	r7, #12
    7122:	9302      	str	r3, [sp, #8]
    7124:	e747      	b.n	6fb6 <__aeabi_ddiv+0x46>
    7126:	2201      	movs	r2, #1
    7128:	1ad5      	subs	r5, r2, r3
    712a:	2d38      	cmp	r5, #56	; 0x38
    712c:	dc00      	bgt.n	7130 <__aeabi_ddiv+0x1c0>
    712e:	e1b0      	b.n	7492 <__aeabi_ddiv+0x522>
    7130:	4653      	mov	r3, sl
    7132:	401a      	ands	r2, r3
    7134:	2100      	movs	r1, #0
    7136:	2300      	movs	r3, #0
    7138:	2600      	movs	r6, #0
    713a:	4689      	mov	r9, r1
    713c:	e77e      	b.n	703c <__aeabi_ddiv+0xcc>
    713e:	2300      	movs	r3, #0
    7140:	2680      	movs	r6, #128	; 0x80
    7142:	4699      	mov	r9, r3
    7144:	2200      	movs	r2, #0
    7146:	0336      	lsls	r6, r6, #12
    7148:	4b00      	ldr	r3, [pc, #0]	; (714c <__aeabi_ddiv+0x1dc>)
    714a:	e777      	b.n	703c <__aeabi_ddiv+0xcc>
    714c:	000007ff 	.word	0x000007ff
    7150:	fffffc01 	.word	0xfffffc01
    7154:	00009ac4 	.word	0x00009ac4
    7158:	800fffff 	.word	0x800fffff
    715c:	000003f3 	.word	0x000003f3
    7160:	455e      	cmp	r6, fp
    7162:	d900      	bls.n	7166 <__aeabi_ddiv+0x1f6>
    7164:	e172      	b.n	744c <__aeabi_ddiv+0x4dc>
    7166:	d100      	bne.n	716a <__aeabi_ddiv+0x1fa>
    7168:	e16d      	b.n	7446 <__aeabi_ddiv+0x4d6>
    716a:	9b01      	ldr	r3, [sp, #4]
    716c:	464d      	mov	r5, r9
    716e:	3b01      	subs	r3, #1
    7170:	9301      	str	r3, [sp, #4]
    7172:	2300      	movs	r3, #0
    7174:	0034      	movs	r4, r6
    7176:	9302      	str	r3, [sp, #8]
    7178:	465b      	mov	r3, fp
    717a:	021e      	lsls	r6, r3, #8
    717c:	0e0b      	lsrs	r3, r1, #24
    717e:	431e      	orrs	r6, r3
    7180:	020b      	lsls	r3, r1, #8
    7182:	9303      	str	r3, [sp, #12]
    7184:	0c33      	lsrs	r3, r6, #16
    7186:	4699      	mov	r9, r3
    7188:	0433      	lsls	r3, r6, #16
    718a:	0c1b      	lsrs	r3, r3, #16
    718c:	4649      	mov	r1, r9
    718e:	0020      	movs	r0, r4
    7190:	9300      	str	r3, [sp, #0]
    7192:	f7ff f93f 	bl	6414 <__aeabi_uidiv>
    7196:	9b00      	ldr	r3, [sp, #0]
    7198:	0037      	movs	r7, r6
    719a:	4343      	muls	r3, r0
    719c:	0006      	movs	r6, r0
    719e:	4649      	mov	r1, r9
    71a0:	0020      	movs	r0, r4
    71a2:	4698      	mov	r8, r3
    71a4:	f7ff f9bc 	bl	6520 <__aeabi_uidivmod>
    71a8:	0c2c      	lsrs	r4, r5, #16
    71aa:	0409      	lsls	r1, r1, #16
    71ac:	430c      	orrs	r4, r1
    71ae:	45a0      	cmp	r8, r4
    71b0:	d909      	bls.n	71c6 <__aeabi_ddiv+0x256>
    71b2:	19e4      	adds	r4, r4, r7
    71b4:	1e73      	subs	r3, r6, #1
    71b6:	42a7      	cmp	r7, r4
    71b8:	d900      	bls.n	71bc <__aeabi_ddiv+0x24c>
    71ba:	e15c      	b.n	7476 <__aeabi_ddiv+0x506>
    71bc:	45a0      	cmp	r8, r4
    71be:	d800      	bhi.n	71c2 <__aeabi_ddiv+0x252>
    71c0:	e159      	b.n	7476 <__aeabi_ddiv+0x506>
    71c2:	3e02      	subs	r6, #2
    71c4:	19e4      	adds	r4, r4, r7
    71c6:	4643      	mov	r3, r8
    71c8:	1ae4      	subs	r4, r4, r3
    71ca:	4649      	mov	r1, r9
    71cc:	0020      	movs	r0, r4
    71ce:	f7ff f921 	bl	6414 <__aeabi_uidiv>
    71d2:	0003      	movs	r3, r0
    71d4:	9a00      	ldr	r2, [sp, #0]
    71d6:	4680      	mov	r8, r0
    71d8:	4353      	muls	r3, r2
    71da:	4649      	mov	r1, r9
    71dc:	0020      	movs	r0, r4
    71de:	469b      	mov	fp, r3
    71e0:	f7ff f99e 	bl	6520 <__aeabi_uidivmod>
    71e4:	042a      	lsls	r2, r5, #16
    71e6:	0409      	lsls	r1, r1, #16
    71e8:	0c12      	lsrs	r2, r2, #16
    71ea:	430a      	orrs	r2, r1
    71ec:	4593      	cmp	fp, r2
    71ee:	d90d      	bls.n	720c <__aeabi_ddiv+0x29c>
    71f0:	4643      	mov	r3, r8
    71f2:	19d2      	adds	r2, r2, r7
    71f4:	3b01      	subs	r3, #1
    71f6:	4297      	cmp	r7, r2
    71f8:	d900      	bls.n	71fc <__aeabi_ddiv+0x28c>
    71fa:	e13a      	b.n	7472 <__aeabi_ddiv+0x502>
    71fc:	4593      	cmp	fp, r2
    71fe:	d800      	bhi.n	7202 <__aeabi_ddiv+0x292>
    7200:	e137      	b.n	7472 <__aeabi_ddiv+0x502>
    7202:	2302      	movs	r3, #2
    7204:	425b      	negs	r3, r3
    7206:	469c      	mov	ip, r3
    7208:	19d2      	adds	r2, r2, r7
    720a:	44e0      	add	r8, ip
    720c:	465b      	mov	r3, fp
    720e:	1ad2      	subs	r2, r2, r3
    7210:	4643      	mov	r3, r8
    7212:	0436      	lsls	r6, r6, #16
    7214:	4333      	orrs	r3, r6
    7216:	469b      	mov	fp, r3
    7218:	9903      	ldr	r1, [sp, #12]
    721a:	0c18      	lsrs	r0, r3, #16
    721c:	0c0b      	lsrs	r3, r1, #16
    721e:	001d      	movs	r5, r3
    7220:	9305      	str	r3, [sp, #20]
    7222:	0409      	lsls	r1, r1, #16
    7224:	465b      	mov	r3, fp
    7226:	0c09      	lsrs	r1, r1, #16
    7228:	000c      	movs	r4, r1
    722a:	041b      	lsls	r3, r3, #16
    722c:	0c1b      	lsrs	r3, r3, #16
    722e:	4344      	muls	r4, r0
    7230:	9104      	str	r1, [sp, #16]
    7232:	4359      	muls	r1, r3
    7234:	436b      	muls	r3, r5
    7236:	4368      	muls	r0, r5
    7238:	191b      	adds	r3, r3, r4
    723a:	0c0d      	lsrs	r5, r1, #16
    723c:	18eb      	adds	r3, r5, r3
    723e:	429c      	cmp	r4, r3
    7240:	d903      	bls.n	724a <__aeabi_ddiv+0x2da>
    7242:	2480      	movs	r4, #128	; 0x80
    7244:	0264      	lsls	r4, r4, #9
    7246:	46a4      	mov	ip, r4
    7248:	4460      	add	r0, ip
    724a:	0c1c      	lsrs	r4, r3, #16
    724c:	0409      	lsls	r1, r1, #16
    724e:	041b      	lsls	r3, r3, #16
    7250:	0c09      	lsrs	r1, r1, #16
    7252:	1820      	adds	r0, r4, r0
    7254:	185d      	adds	r5, r3, r1
    7256:	4282      	cmp	r2, r0
    7258:	d200      	bcs.n	725c <__aeabi_ddiv+0x2ec>
    725a:	e0de      	b.n	741a <__aeabi_ddiv+0x4aa>
    725c:	d100      	bne.n	7260 <__aeabi_ddiv+0x2f0>
    725e:	e0d7      	b.n	7410 <__aeabi_ddiv+0x4a0>
    7260:	1a16      	subs	r6, r2, r0
    7262:	9b02      	ldr	r3, [sp, #8]
    7264:	469c      	mov	ip, r3
    7266:	1b5d      	subs	r5, r3, r5
    7268:	45ac      	cmp	ip, r5
    726a:	419b      	sbcs	r3, r3
    726c:	425b      	negs	r3, r3
    726e:	1af6      	subs	r6, r6, r3
    7270:	42b7      	cmp	r7, r6
    7272:	d100      	bne.n	7276 <__aeabi_ddiv+0x306>
    7274:	e106      	b.n	7484 <__aeabi_ddiv+0x514>
    7276:	4649      	mov	r1, r9
    7278:	0030      	movs	r0, r6
    727a:	f7ff f8cb 	bl	6414 <__aeabi_uidiv>
    727e:	9b00      	ldr	r3, [sp, #0]
    7280:	0004      	movs	r4, r0
    7282:	4343      	muls	r3, r0
    7284:	4649      	mov	r1, r9
    7286:	0030      	movs	r0, r6
    7288:	4698      	mov	r8, r3
    728a:	f7ff f949 	bl	6520 <__aeabi_uidivmod>
    728e:	0c2e      	lsrs	r6, r5, #16
    7290:	0409      	lsls	r1, r1, #16
    7292:	430e      	orrs	r6, r1
    7294:	45b0      	cmp	r8, r6
    7296:	d909      	bls.n	72ac <__aeabi_ddiv+0x33c>
    7298:	19f6      	adds	r6, r6, r7
    729a:	1e63      	subs	r3, r4, #1
    729c:	42b7      	cmp	r7, r6
    729e:	d900      	bls.n	72a2 <__aeabi_ddiv+0x332>
    72a0:	e0f3      	b.n	748a <__aeabi_ddiv+0x51a>
    72a2:	45b0      	cmp	r8, r6
    72a4:	d800      	bhi.n	72a8 <__aeabi_ddiv+0x338>
    72a6:	e0f0      	b.n	748a <__aeabi_ddiv+0x51a>
    72a8:	3c02      	subs	r4, #2
    72aa:	19f6      	adds	r6, r6, r7
    72ac:	4643      	mov	r3, r8
    72ae:	1af3      	subs	r3, r6, r3
    72b0:	4649      	mov	r1, r9
    72b2:	0018      	movs	r0, r3
    72b4:	9302      	str	r3, [sp, #8]
    72b6:	f7ff f8ad 	bl	6414 <__aeabi_uidiv>
    72ba:	9b00      	ldr	r3, [sp, #0]
    72bc:	0006      	movs	r6, r0
    72be:	4343      	muls	r3, r0
    72c0:	4649      	mov	r1, r9
    72c2:	9802      	ldr	r0, [sp, #8]
    72c4:	4698      	mov	r8, r3
    72c6:	f7ff f92b 	bl	6520 <__aeabi_uidivmod>
    72ca:	042d      	lsls	r5, r5, #16
    72cc:	0409      	lsls	r1, r1, #16
    72ce:	0c2d      	lsrs	r5, r5, #16
    72d0:	430d      	orrs	r5, r1
    72d2:	45a8      	cmp	r8, r5
    72d4:	d909      	bls.n	72ea <__aeabi_ddiv+0x37a>
    72d6:	19ed      	adds	r5, r5, r7
    72d8:	1e73      	subs	r3, r6, #1
    72da:	42af      	cmp	r7, r5
    72dc:	d900      	bls.n	72e0 <__aeabi_ddiv+0x370>
    72de:	e0d6      	b.n	748e <__aeabi_ddiv+0x51e>
    72e0:	45a8      	cmp	r8, r5
    72e2:	d800      	bhi.n	72e6 <__aeabi_ddiv+0x376>
    72e4:	e0d3      	b.n	748e <__aeabi_ddiv+0x51e>
    72e6:	3e02      	subs	r6, #2
    72e8:	19ed      	adds	r5, r5, r7
    72ea:	0424      	lsls	r4, r4, #16
    72ec:	0021      	movs	r1, r4
    72ee:	4643      	mov	r3, r8
    72f0:	4331      	orrs	r1, r6
    72f2:	9e04      	ldr	r6, [sp, #16]
    72f4:	9a05      	ldr	r2, [sp, #20]
    72f6:	0030      	movs	r0, r6
    72f8:	1aed      	subs	r5, r5, r3
    72fa:	040b      	lsls	r3, r1, #16
    72fc:	0c0c      	lsrs	r4, r1, #16
    72fe:	0c1b      	lsrs	r3, r3, #16
    7300:	4358      	muls	r0, r3
    7302:	4366      	muls	r6, r4
    7304:	4353      	muls	r3, r2
    7306:	4354      	muls	r4, r2
    7308:	199a      	adds	r2, r3, r6
    730a:	0c03      	lsrs	r3, r0, #16
    730c:	189b      	adds	r3, r3, r2
    730e:	429e      	cmp	r6, r3
    7310:	d903      	bls.n	731a <__aeabi_ddiv+0x3aa>
    7312:	2280      	movs	r2, #128	; 0x80
    7314:	0252      	lsls	r2, r2, #9
    7316:	4694      	mov	ip, r2
    7318:	4464      	add	r4, ip
    731a:	0c1a      	lsrs	r2, r3, #16
    731c:	0400      	lsls	r0, r0, #16
    731e:	041b      	lsls	r3, r3, #16
    7320:	0c00      	lsrs	r0, r0, #16
    7322:	1914      	adds	r4, r2, r4
    7324:	181b      	adds	r3, r3, r0
    7326:	42a5      	cmp	r5, r4
    7328:	d350      	bcc.n	73cc <__aeabi_ddiv+0x45c>
    732a:	d04d      	beq.n	73c8 <__aeabi_ddiv+0x458>
    732c:	2301      	movs	r3, #1
    732e:	4319      	orrs	r1, r3
    7330:	4a96      	ldr	r2, [pc, #600]	; (758c <__aeabi_ddiv+0x61c>)
    7332:	9b01      	ldr	r3, [sp, #4]
    7334:	4694      	mov	ip, r2
    7336:	4463      	add	r3, ip
    7338:	2b00      	cmp	r3, #0
    733a:	dc00      	bgt.n	733e <__aeabi_ddiv+0x3ce>
    733c:	e6f3      	b.n	7126 <__aeabi_ddiv+0x1b6>
    733e:	074a      	lsls	r2, r1, #29
    7340:	d009      	beq.n	7356 <__aeabi_ddiv+0x3e6>
    7342:	220f      	movs	r2, #15
    7344:	400a      	ands	r2, r1
    7346:	2a04      	cmp	r2, #4
    7348:	d005      	beq.n	7356 <__aeabi_ddiv+0x3e6>
    734a:	1d0a      	adds	r2, r1, #4
    734c:	428a      	cmp	r2, r1
    734e:	4189      	sbcs	r1, r1
    7350:	4249      	negs	r1, r1
    7352:	448b      	add	fp, r1
    7354:	0011      	movs	r1, r2
    7356:	465a      	mov	r2, fp
    7358:	01d2      	lsls	r2, r2, #7
    735a:	d508      	bpl.n	736e <__aeabi_ddiv+0x3fe>
    735c:	465a      	mov	r2, fp
    735e:	4b8c      	ldr	r3, [pc, #560]	; (7590 <__aeabi_ddiv+0x620>)
    7360:	401a      	ands	r2, r3
    7362:	4693      	mov	fp, r2
    7364:	2280      	movs	r2, #128	; 0x80
    7366:	00d2      	lsls	r2, r2, #3
    7368:	4694      	mov	ip, r2
    736a:	9b01      	ldr	r3, [sp, #4]
    736c:	4463      	add	r3, ip
    736e:	4a89      	ldr	r2, [pc, #548]	; (7594 <__aeabi_ddiv+0x624>)
    7370:	4293      	cmp	r3, r2
    7372:	dd00      	ble.n	7376 <__aeabi_ddiv+0x406>
    7374:	e65b      	b.n	702e <__aeabi_ddiv+0xbe>
    7376:	465a      	mov	r2, fp
    7378:	08c9      	lsrs	r1, r1, #3
    737a:	0750      	lsls	r0, r2, #29
    737c:	4308      	orrs	r0, r1
    737e:	0256      	lsls	r6, r2, #9
    7380:	4651      	mov	r1, sl
    7382:	2201      	movs	r2, #1
    7384:	055b      	lsls	r3, r3, #21
    7386:	4681      	mov	r9, r0
    7388:	0b36      	lsrs	r6, r6, #12
    738a:	0d5b      	lsrs	r3, r3, #21
    738c:	400a      	ands	r2, r1
    738e:	e655      	b.n	703c <__aeabi_ddiv+0xcc>
    7390:	2380      	movs	r3, #128	; 0x80
    7392:	031b      	lsls	r3, r3, #12
    7394:	421e      	tst	r6, r3
    7396:	d011      	beq.n	73bc <__aeabi_ddiv+0x44c>
    7398:	465a      	mov	r2, fp
    739a:	421a      	tst	r2, r3
    739c:	d10e      	bne.n	73bc <__aeabi_ddiv+0x44c>
    739e:	465e      	mov	r6, fp
    73a0:	431e      	orrs	r6, r3
    73a2:	0336      	lsls	r6, r6, #12
    73a4:	0b36      	lsrs	r6, r6, #12
    73a6:	002a      	movs	r2, r5
    73a8:	4689      	mov	r9, r1
    73aa:	4b7b      	ldr	r3, [pc, #492]	; (7598 <__aeabi_ddiv+0x628>)
    73ac:	e646      	b.n	703c <__aeabi_ddiv+0xcc>
    73ae:	2b03      	cmp	r3, #3
    73b0:	d100      	bne.n	73b4 <__aeabi_ddiv+0x444>
    73b2:	e0e1      	b.n	7578 <__aeabi_ddiv+0x608>
    73b4:	2b01      	cmp	r3, #1
    73b6:	d1bb      	bne.n	7330 <__aeabi_ddiv+0x3c0>
    73b8:	401a      	ands	r2, r3
    73ba:	e6bb      	b.n	7134 <__aeabi_ddiv+0x1c4>
    73bc:	431e      	orrs	r6, r3
    73be:	0336      	lsls	r6, r6, #12
    73c0:	0b36      	lsrs	r6, r6, #12
    73c2:	4642      	mov	r2, r8
    73c4:	4b74      	ldr	r3, [pc, #464]	; (7598 <__aeabi_ddiv+0x628>)
    73c6:	e639      	b.n	703c <__aeabi_ddiv+0xcc>
    73c8:	2b00      	cmp	r3, #0
    73ca:	d0b1      	beq.n	7330 <__aeabi_ddiv+0x3c0>
    73cc:	197d      	adds	r5, r7, r5
    73ce:	1e4a      	subs	r2, r1, #1
    73d0:	42af      	cmp	r7, r5
    73d2:	d952      	bls.n	747a <__aeabi_ddiv+0x50a>
    73d4:	0011      	movs	r1, r2
    73d6:	42a5      	cmp	r5, r4
    73d8:	d1a8      	bne.n	732c <__aeabi_ddiv+0x3bc>
    73da:	9a03      	ldr	r2, [sp, #12]
    73dc:	429a      	cmp	r2, r3
    73de:	d1a5      	bne.n	732c <__aeabi_ddiv+0x3bc>
    73e0:	e7a6      	b.n	7330 <__aeabi_ddiv+0x3c0>
    73e2:	0003      	movs	r3, r0
    73e4:	003e      	movs	r6, r7
    73e6:	3b28      	subs	r3, #40	; 0x28
    73e8:	409e      	lsls	r6, r3
    73ea:	2300      	movs	r3, #0
    73ec:	4699      	mov	r9, r3
    73ee:	e654      	b.n	709a <__aeabi_ddiv+0x12a>
    73f0:	f000 ff10 	bl	8214 <__clzsi2>
    73f4:	3020      	adds	r0, #32
    73f6:	e641      	b.n	707c <__aeabi_ddiv+0x10c>
    73f8:	0003      	movs	r3, r0
    73fa:	4652      	mov	r2, sl
    73fc:	3b28      	subs	r3, #40	; 0x28
    73fe:	409a      	lsls	r2, r3
    7400:	2100      	movs	r1, #0
    7402:	4693      	mov	fp, r2
    7404:	e677      	b.n	70f6 <__aeabi_ddiv+0x186>
    7406:	4650      	mov	r0, sl
    7408:	f000 ff04 	bl	8214 <__clzsi2>
    740c:	3020      	adds	r0, #32
    740e:	e65e      	b.n	70ce <__aeabi_ddiv+0x15e>
    7410:	9b02      	ldr	r3, [sp, #8]
    7412:	2600      	movs	r6, #0
    7414:	42ab      	cmp	r3, r5
    7416:	d300      	bcc.n	741a <__aeabi_ddiv+0x4aa>
    7418:	e723      	b.n	7262 <__aeabi_ddiv+0x2f2>
    741a:	9e03      	ldr	r6, [sp, #12]
    741c:	9902      	ldr	r1, [sp, #8]
    741e:	46b4      	mov	ip, r6
    7420:	4461      	add	r1, ip
    7422:	4688      	mov	r8, r1
    7424:	45b0      	cmp	r8, r6
    7426:	41b6      	sbcs	r6, r6
    7428:	465b      	mov	r3, fp
    742a:	4276      	negs	r6, r6
    742c:	19f6      	adds	r6, r6, r7
    742e:	18b2      	adds	r2, r6, r2
    7430:	3b01      	subs	r3, #1
    7432:	9102      	str	r1, [sp, #8]
    7434:	4297      	cmp	r7, r2
    7436:	d213      	bcs.n	7460 <__aeabi_ddiv+0x4f0>
    7438:	4290      	cmp	r0, r2
    743a:	d84f      	bhi.n	74dc <__aeabi_ddiv+0x56c>
    743c:	d100      	bne.n	7440 <__aeabi_ddiv+0x4d0>
    743e:	e08e      	b.n	755e <__aeabi_ddiv+0x5ee>
    7440:	1a16      	subs	r6, r2, r0
    7442:	469b      	mov	fp, r3
    7444:	e70d      	b.n	7262 <__aeabi_ddiv+0x2f2>
    7446:	4589      	cmp	r9, r1
    7448:	d200      	bcs.n	744c <__aeabi_ddiv+0x4dc>
    744a:	e68e      	b.n	716a <__aeabi_ddiv+0x1fa>
    744c:	0874      	lsrs	r4, r6, #1
    744e:	464b      	mov	r3, r9
    7450:	07f6      	lsls	r6, r6, #31
    7452:	0035      	movs	r5, r6
    7454:	085b      	lsrs	r3, r3, #1
    7456:	431d      	orrs	r5, r3
    7458:	464b      	mov	r3, r9
    745a:	07db      	lsls	r3, r3, #31
    745c:	9302      	str	r3, [sp, #8]
    745e:	e68b      	b.n	7178 <__aeabi_ddiv+0x208>
    7460:	4297      	cmp	r7, r2
    7462:	d1ed      	bne.n	7440 <__aeabi_ddiv+0x4d0>
    7464:	9903      	ldr	r1, [sp, #12]
    7466:	9c02      	ldr	r4, [sp, #8]
    7468:	42a1      	cmp	r1, r4
    746a:	d9e5      	bls.n	7438 <__aeabi_ddiv+0x4c8>
    746c:	1a3e      	subs	r6, r7, r0
    746e:	469b      	mov	fp, r3
    7470:	e6f7      	b.n	7262 <__aeabi_ddiv+0x2f2>
    7472:	4698      	mov	r8, r3
    7474:	e6ca      	b.n	720c <__aeabi_ddiv+0x29c>
    7476:	001e      	movs	r6, r3
    7478:	e6a5      	b.n	71c6 <__aeabi_ddiv+0x256>
    747a:	42ac      	cmp	r4, r5
    747c:	d83e      	bhi.n	74fc <__aeabi_ddiv+0x58c>
    747e:	d074      	beq.n	756a <__aeabi_ddiv+0x5fa>
    7480:	0011      	movs	r1, r2
    7482:	e753      	b.n	732c <__aeabi_ddiv+0x3bc>
    7484:	2101      	movs	r1, #1
    7486:	4249      	negs	r1, r1
    7488:	e752      	b.n	7330 <__aeabi_ddiv+0x3c0>
    748a:	001c      	movs	r4, r3
    748c:	e70e      	b.n	72ac <__aeabi_ddiv+0x33c>
    748e:	001e      	movs	r6, r3
    7490:	e72b      	b.n	72ea <__aeabi_ddiv+0x37a>
    7492:	2d1f      	cmp	r5, #31
    7494:	dc3c      	bgt.n	7510 <__aeabi_ddiv+0x5a0>
    7496:	2320      	movs	r3, #32
    7498:	000a      	movs	r2, r1
    749a:	4658      	mov	r0, fp
    749c:	1b5b      	subs	r3, r3, r5
    749e:	4098      	lsls	r0, r3
    74a0:	40ea      	lsrs	r2, r5
    74a2:	4099      	lsls	r1, r3
    74a4:	4302      	orrs	r2, r0
    74a6:	1e48      	subs	r0, r1, #1
    74a8:	4181      	sbcs	r1, r0
    74aa:	465e      	mov	r6, fp
    74ac:	4311      	orrs	r1, r2
    74ae:	40ee      	lsrs	r6, r5
    74b0:	074b      	lsls	r3, r1, #29
    74b2:	d009      	beq.n	74c8 <__aeabi_ddiv+0x558>
    74b4:	230f      	movs	r3, #15
    74b6:	400b      	ands	r3, r1
    74b8:	2b04      	cmp	r3, #4
    74ba:	d005      	beq.n	74c8 <__aeabi_ddiv+0x558>
    74bc:	000b      	movs	r3, r1
    74be:	1d19      	adds	r1, r3, #4
    74c0:	4299      	cmp	r1, r3
    74c2:	419b      	sbcs	r3, r3
    74c4:	425b      	negs	r3, r3
    74c6:	18f6      	adds	r6, r6, r3
    74c8:	0233      	lsls	r3, r6, #8
    74ca:	d53c      	bpl.n	7546 <__aeabi_ddiv+0x5d6>
    74cc:	4653      	mov	r3, sl
    74ce:	2201      	movs	r2, #1
    74d0:	2100      	movs	r1, #0
    74d2:	401a      	ands	r2, r3
    74d4:	2600      	movs	r6, #0
    74d6:	2301      	movs	r3, #1
    74d8:	4689      	mov	r9, r1
    74da:	e5af      	b.n	703c <__aeabi_ddiv+0xcc>
    74dc:	2302      	movs	r3, #2
    74de:	425b      	negs	r3, r3
    74e0:	469c      	mov	ip, r3
    74e2:	9c03      	ldr	r4, [sp, #12]
    74e4:	44e3      	add	fp, ip
    74e6:	46a4      	mov	ip, r4
    74e8:	9b02      	ldr	r3, [sp, #8]
    74ea:	4463      	add	r3, ip
    74ec:	4698      	mov	r8, r3
    74ee:	45a0      	cmp	r8, r4
    74f0:	41b6      	sbcs	r6, r6
    74f2:	4276      	negs	r6, r6
    74f4:	19f6      	adds	r6, r6, r7
    74f6:	9302      	str	r3, [sp, #8]
    74f8:	18b2      	adds	r2, r6, r2
    74fa:	e6b1      	b.n	7260 <__aeabi_ddiv+0x2f0>
    74fc:	9803      	ldr	r0, [sp, #12]
    74fe:	1e8a      	subs	r2, r1, #2
    7500:	0041      	lsls	r1, r0, #1
    7502:	4281      	cmp	r1, r0
    7504:	41b6      	sbcs	r6, r6
    7506:	4276      	negs	r6, r6
    7508:	19f6      	adds	r6, r6, r7
    750a:	19ad      	adds	r5, r5, r6
    750c:	9103      	str	r1, [sp, #12]
    750e:	e761      	b.n	73d4 <__aeabi_ddiv+0x464>
    7510:	221f      	movs	r2, #31
    7512:	4252      	negs	r2, r2
    7514:	1ad3      	subs	r3, r2, r3
    7516:	465a      	mov	r2, fp
    7518:	40da      	lsrs	r2, r3
    751a:	0013      	movs	r3, r2
    751c:	2d20      	cmp	r5, #32
    751e:	d029      	beq.n	7574 <__aeabi_ddiv+0x604>
    7520:	2240      	movs	r2, #64	; 0x40
    7522:	4658      	mov	r0, fp
    7524:	1b55      	subs	r5, r2, r5
    7526:	40a8      	lsls	r0, r5
    7528:	4301      	orrs	r1, r0
    752a:	1e48      	subs	r0, r1, #1
    752c:	4181      	sbcs	r1, r0
    752e:	2007      	movs	r0, #7
    7530:	430b      	orrs	r3, r1
    7532:	4018      	ands	r0, r3
    7534:	2600      	movs	r6, #0
    7536:	2800      	cmp	r0, #0
    7538:	d009      	beq.n	754e <__aeabi_ddiv+0x5de>
    753a:	220f      	movs	r2, #15
    753c:	2600      	movs	r6, #0
    753e:	401a      	ands	r2, r3
    7540:	0019      	movs	r1, r3
    7542:	2a04      	cmp	r2, #4
    7544:	d1bb      	bne.n	74be <__aeabi_ddiv+0x54e>
    7546:	000b      	movs	r3, r1
    7548:	0770      	lsls	r0, r6, #29
    754a:	0276      	lsls	r6, r6, #9
    754c:	0b36      	lsrs	r6, r6, #12
    754e:	08db      	lsrs	r3, r3, #3
    7550:	4303      	orrs	r3, r0
    7552:	4699      	mov	r9, r3
    7554:	2201      	movs	r2, #1
    7556:	4653      	mov	r3, sl
    7558:	401a      	ands	r2, r3
    755a:	2300      	movs	r3, #0
    755c:	e56e      	b.n	703c <__aeabi_ddiv+0xcc>
    755e:	9902      	ldr	r1, [sp, #8]
    7560:	428d      	cmp	r5, r1
    7562:	d8bb      	bhi.n	74dc <__aeabi_ddiv+0x56c>
    7564:	469b      	mov	fp, r3
    7566:	2600      	movs	r6, #0
    7568:	e67b      	b.n	7262 <__aeabi_ddiv+0x2f2>
    756a:	9803      	ldr	r0, [sp, #12]
    756c:	4298      	cmp	r0, r3
    756e:	d3c5      	bcc.n	74fc <__aeabi_ddiv+0x58c>
    7570:	0011      	movs	r1, r2
    7572:	e732      	b.n	73da <__aeabi_ddiv+0x46a>
    7574:	2000      	movs	r0, #0
    7576:	e7d7      	b.n	7528 <__aeabi_ddiv+0x5b8>
    7578:	2680      	movs	r6, #128	; 0x80
    757a:	465b      	mov	r3, fp
    757c:	0336      	lsls	r6, r6, #12
    757e:	431e      	orrs	r6, r3
    7580:	0336      	lsls	r6, r6, #12
    7582:	0b36      	lsrs	r6, r6, #12
    7584:	9a00      	ldr	r2, [sp, #0]
    7586:	4689      	mov	r9, r1
    7588:	4b03      	ldr	r3, [pc, #12]	; (7598 <__aeabi_ddiv+0x628>)
    758a:	e557      	b.n	703c <__aeabi_ddiv+0xcc>
    758c:	000003ff 	.word	0x000003ff
    7590:	feffffff 	.word	0xfeffffff
    7594:	000007fe 	.word	0x000007fe
    7598:	000007ff 	.word	0x000007ff

0000759c <__aeabi_dmul>:
    759c:	b5f0      	push	{r4, r5, r6, r7, lr}
    759e:	465f      	mov	r7, fp
    75a0:	4656      	mov	r6, sl
    75a2:	464d      	mov	r5, r9
    75a4:	4644      	mov	r4, r8
    75a6:	b4f0      	push	{r4, r5, r6, r7}
    75a8:	030d      	lsls	r5, r1, #12
    75aa:	4699      	mov	r9, r3
    75ac:	004e      	lsls	r6, r1, #1
    75ae:	0b2b      	lsrs	r3, r5, #12
    75b0:	b087      	sub	sp, #28
    75b2:	0007      	movs	r7, r0
    75b4:	4692      	mov	sl, r2
    75b6:	4680      	mov	r8, r0
    75b8:	469b      	mov	fp, r3
    75ba:	0d76      	lsrs	r6, r6, #21
    75bc:	0fcc      	lsrs	r4, r1, #31
    75be:	2e00      	cmp	r6, #0
    75c0:	d069      	beq.n	7696 <__aeabi_dmul+0xfa>
    75c2:	4b6d      	ldr	r3, [pc, #436]	; (7778 <__aeabi_dmul+0x1dc>)
    75c4:	429e      	cmp	r6, r3
    75c6:	d035      	beq.n	7634 <__aeabi_dmul+0x98>
    75c8:	465b      	mov	r3, fp
    75ca:	2280      	movs	r2, #128	; 0x80
    75cc:	00dd      	lsls	r5, r3, #3
    75ce:	0412      	lsls	r2, r2, #16
    75d0:	0f43      	lsrs	r3, r0, #29
    75d2:	4313      	orrs	r3, r2
    75d4:	432b      	orrs	r3, r5
    75d6:	469b      	mov	fp, r3
    75d8:	00c3      	lsls	r3, r0, #3
    75da:	4698      	mov	r8, r3
    75dc:	4b67      	ldr	r3, [pc, #412]	; (777c <__aeabi_dmul+0x1e0>)
    75de:	2700      	movs	r7, #0
    75e0:	469c      	mov	ip, r3
    75e2:	2300      	movs	r3, #0
    75e4:	4466      	add	r6, ip
    75e6:	9301      	str	r3, [sp, #4]
    75e8:	464a      	mov	r2, r9
    75ea:	0315      	lsls	r5, r2, #12
    75ec:	0050      	lsls	r0, r2, #1
    75ee:	0fd2      	lsrs	r2, r2, #31
    75f0:	4653      	mov	r3, sl
    75f2:	0b2d      	lsrs	r5, r5, #12
    75f4:	0d40      	lsrs	r0, r0, #21
    75f6:	4691      	mov	r9, r2
    75f8:	d100      	bne.n	75fc <__aeabi_dmul+0x60>
    75fa:	e076      	b.n	76ea <__aeabi_dmul+0x14e>
    75fc:	4a5e      	ldr	r2, [pc, #376]	; (7778 <__aeabi_dmul+0x1dc>)
    75fe:	4290      	cmp	r0, r2
    7600:	d06c      	beq.n	76dc <__aeabi_dmul+0x140>
    7602:	2280      	movs	r2, #128	; 0x80
    7604:	0f5b      	lsrs	r3, r3, #29
    7606:	0412      	lsls	r2, r2, #16
    7608:	4313      	orrs	r3, r2
    760a:	4a5c      	ldr	r2, [pc, #368]	; (777c <__aeabi_dmul+0x1e0>)
    760c:	00ed      	lsls	r5, r5, #3
    760e:	4694      	mov	ip, r2
    7610:	431d      	orrs	r5, r3
    7612:	4653      	mov	r3, sl
    7614:	2200      	movs	r2, #0
    7616:	00db      	lsls	r3, r3, #3
    7618:	4460      	add	r0, ip
    761a:	4649      	mov	r1, r9
    761c:	1836      	adds	r6, r6, r0
    761e:	1c70      	adds	r0, r6, #1
    7620:	4061      	eors	r1, r4
    7622:	9002      	str	r0, [sp, #8]
    7624:	4317      	orrs	r7, r2
    7626:	2f0f      	cmp	r7, #15
    7628:	d900      	bls.n	762c <__aeabi_dmul+0x90>
    762a:	e0af      	b.n	778c <__aeabi_dmul+0x1f0>
    762c:	4854      	ldr	r0, [pc, #336]	; (7780 <__aeabi_dmul+0x1e4>)
    762e:	00bf      	lsls	r7, r7, #2
    7630:	59c7      	ldr	r7, [r0, r7]
    7632:	46bf      	mov	pc, r7
    7634:	465b      	mov	r3, fp
    7636:	431f      	orrs	r7, r3
    7638:	d000      	beq.n	763c <__aeabi_dmul+0xa0>
    763a:	e088      	b.n	774e <__aeabi_dmul+0x1b2>
    763c:	2300      	movs	r3, #0
    763e:	469b      	mov	fp, r3
    7640:	4698      	mov	r8, r3
    7642:	3302      	adds	r3, #2
    7644:	2708      	movs	r7, #8
    7646:	9301      	str	r3, [sp, #4]
    7648:	e7ce      	b.n	75e8 <__aeabi_dmul+0x4c>
    764a:	4649      	mov	r1, r9
    764c:	2a02      	cmp	r2, #2
    764e:	d06a      	beq.n	7726 <__aeabi_dmul+0x18a>
    7650:	2a03      	cmp	r2, #3
    7652:	d100      	bne.n	7656 <__aeabi_dmul+0xba>
    7654:	e209      	b.n	7a6a <__aeabi_dmul+0x4ce>
    7656:	2a01      	cmp	r2, #1
    7658:	d000      	beq.n	765c <__aeabi_dmul+0xc0>
    765a:	e1bb      	b.n	79d4 <__aeabi_dmul+0x438>
    765c:	4011      	ands	r1, r2
    765e:	2200      	movs	r2, #0
    7660:	2300      	movs	r3, #0
    7662:	2500      	movs	r5, #0
    7664:	4690      	mov	r8, r2
    7666:	b2cc      	uxtb	r4, r1
    7668:	2100      	movs	r1, #0
    766a:	032d      	lsls	r5, r5, #12
    766c:	0d0a      	lsrs	r2, r1, #20
    766e:	0512      	lsls	r2, r2, #20
    7670:	0b2d      	lsrs	r5, r5, #12
    7672:	4315      	orrs	r5, r2
    7674:	4a43      	ldr	r2, [pc, #268]	; (7784 <__aeabi_dmul+0x1e8>)
    7676:	051b      	lsls	r3, r3, #20
    7678:	4015      	ands	r5, r2
    767a:	431d      	orrs	r5, r3
    767c:	006d      	lsls	r5, r5, #1
    767e:	07e4      	lsls	r4, r4, #31
    7680:	086d      	lsrs	r5, r5, #1
    7682:	4325      	orrs	r5, r4
    7684:	4640      	mov	r0, r8
    7686:	0029      	movs	r1, r5
    7688:	b007      	add	sp, #28
    768a:	bc3c      	pop	{r2, r3, r4, r5}
    768c:	4690      	mov	r8, r2
    768e:	4699      	mov	r9, r3
    7690:	46a2      	mov	sl, r4
    7692:	46ab      	mov	fp, r5
    7694:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7696:	4303      	orrs	r3, r0
    7698:	d052      	beq.n	7740 <__aeabi_dmul+0x1a4>
    769a:	465b      	mov	r3, fp
    769c:	2b00      	cmp	r3, #0
    769e:	d100      	bne.n	76a2 <__aeabi_dmul+0x106>
    76a0:	e18a      	b.n	79b8 <__aeabi_dmul+0x41c>
    76a2:	4658      	mov	r0, fp
    76a4:	f000 fdb6 	bl	8214 <__clzsi2>
    76a8:	0003      	movs	r3, r0
    76aa:	3b0b      	subs	r3, #11
    76ac:	2b1c      	cmp	r3, #28
    76ae:	dd00      	ble.n	76b2 <__aeabi_dmul+0x116>
    76b0:	e17b      	b.n	79aa <__aeabi_dmul+0x40e>
    76b2:	221d      	movs	r2, #29
    76b4:	1ad3      	subs	r3, r2, r3
    76b6:	003a      	movs	r2, r7
    76b8:	0001      	movs	r1, r0
    76ba:	465d      	mov	r5, fp
    76bc:	40da      	lsrs	r2, r3
    76be:	3908      	subs	r1, #8
    76c0:	408d      	lsls	r5, r1
    76c2:	0013      	movs	r3, r2
    76c4:	408f      	lsls	r7, r1
    76c6:	432b      	orrs	r3, r5
    76c8:	469b      	mov	fp, r3
    76ca:	46b8      	mov	r8, r7
    76cc:	4b2e      	ldr	r3, [pc, #184]	; (7788 <__aeabi_dmul+0x1ec>)
    76ce:	2700      	movs	r7, #0
    76d0:	469c      	mov	ip, r3
    76d2:	2300      	movs	r3, #0
    76d4:	4460      	add	r0, ip
    76d6:	4246      	negs	r6, r0
    76d8:	9301      	str	r3, [sp, #4]
    76da:	e785      	b.n	75e8 <__aeabi_dmul+0x4c>
    76dc:	4652      	mov	r2, sl
    76de:	432a      	orrs	r2, r5
    76e0:	d12c      	bne.n	773c <__aeabi_dmul+0x1a0>
    76e2:	2500      	movs	r5, #0
    76e4:	2300      	movs	r3, #0
    76e6:	2202      	movs	r2, #2
    76e8:	e797      	b.n	761a <__aeabi_dmul+0x7e>
    76ea:	4652      	mov	r2, sl
    76ec:	432a      	orrs	r2, r5
    76ee:	d021      	beq.n	7734 <__aeabi_dmul+0x198>
    76f0:	2d00      	cmp	r5, #0
    76f2:	d100      	bne.n	76f6 <__aeabi_dmul+0x15a>
    76f4:	e154      	b.n	79a0 <__aeabi_dmul+0x404>
    76f6:	0028      	movs	r0, r5
    76f8:	f000 fd8c 	bl	8214 <__clzsi2>
    76fc:	0003      	movs	r3, r0
    76fe:	3b0b      	subs	r3, #11
    7700:	2b1c      	cmp	r3, #28
    7702:	dd00      	ble.n	7706 <__aeabi_dmul+0x16a>
    7704:	e146      	b.n	7994 <__aeabi_dmul+0x3f8>
    7706:	211d      	movs	r1, #29
    7708:	1acb      	subs	r3, r1, r3
    770a:	4651      	mov	r1, sl
    770c:	0002      	movs	r2, r0
    770e:	40d9      	lsrs	r1, r3
    7710:	4653      	mov	r3, sl
    7712:	3a08      	subs	r2, #8
    7714:	4095      	lsls	r5, r2
    7716:	4093      	lsls	r3, r2
    7718:	430d      	orrs	r5, r1
    771a:	4a1b      	ldr	r2, [pc, #108]	; (7788 <__aeabi_dmul+0x1ec>)
    771c:	4694      	mov	ip, r2
    771e:	4460      	add	r0, ip
    7720:	4240      	negs	r0, r0
    7722:	2200      	movs	r2, #0
    7724:	e779      	b.n	761a <__aeabi_dmul+0x7e>
    7726:	2401      	movs	r4, #1
    7728:	2200      	movs	r2, #0
    772a:	400c      	ands	r4, r1
    772c:	4b12      	ldr	r3, [pc, #72]	; (7778 <__aeabi_dmul+0x1dc>)
    772e:	2500      	movs	r5, #0
    7730:	4690      	mov	r8, r2
    7732:	e799      	b.n	7668 <__aeabi_dmul+0xcc>
    7734:	2500      	movs	r5, #0
    7736:	2300      	movs	r3, #0
    7738:	2201      	movs	r2, #1
    773a:	e76e      	b.n	761a <__aeabi_dmul+0x7e>
    773c:	2203      	movs	r2, #3
    773e:	e76c      	b.n	761a <__aeabi_dmul+0x7e>
    7740:	2300      	movs	r3, #0
    7742:	469b      	mov	fp, r3
    7744:	4698      	mov	r8, r3
    7746:	3301      	adds	r3, #1
    7748:	2704      	movs	r7, #4
    774a:	9301      	str	r3, [sp, #4]
    774c:	e74c      	b.n	75e8 <__aeabi_dmul+0x4c>
    774e:	2303      	movs	r3, #3
    7750:	270c      	movs	r7, #12
    7752:	9301      	str	r3, [sp, #4]
    7754:	e748      	b.n	75e8 <__aeabi_dmul+0x4c>
    7756:	2300      	movs	r3, #0
    7758:	2580      	movs	r5, #128	; 0x80
    775a:	4698      	mov	r8, r3
    775c:	2400      	movs	r4, #0
    775e:	032d      	lsls	r5, r5, #12
    7760:	4b05      	ldr	r3, [pc, #20]	; (7778 <__aeabi_dmul+0x1dc>)
    7762:	e781      	b.n	7668 <__aeabi_dmul+0xcc>
    7764:	465d      	mov	r5, fp
    7766:	4643      	mov	r3, r8
    7768:	9a01      	ldr	r2, [sp, #4]
    776a:	e76f      	b.n	764c <__aeabi_dmul+0xb0>
    776c:	465d      	mov	r5, fp
    776e:	4643      	mov	r3, r8
    7770:	0021      	movs	r1, r4
    7772:	9a01      	ldr	r2, [sp, #4]
    7774:	e76a      	b.n	764c <__aeabi_dmul+0xb0>
    7776:	46c0      	nop			; (mov r8, r8)
    7778:	000007ff 	.word	0x000007ff
    777c:	fffffc01 	.word	0xfffffc01
    7780:	00009b04 	.word	0x00009b04
    7784:	800fffff 	.word	0x800fffff
    7788:	000003f3 	.word	0x000003f3
    778c:	4642      	mov	r2, r8
    778e:	0c12      	lsrs	r2, r2, #16
    7790:	4691      	mov	r9, r2
    7792:	0c1a      	lsrs	r2, r3, #16
    7794:	4694      	mov	ip, r2
    7796:	4642      	mov	r2, r8
    7798:	0417      	lsls	r7, r2, #16
    779a:	464a      	mov	r2, r9
    779c:	041b      	lsls	r3, r3, #16
    779e:	0c1b      	lsrs	r3, r3, #16
    77a0:	435a      	muls	r2, r3
    77a2:	4660      	mov	r0, ip
    77a4:	4690      	mov	r8, r2
    77a6:	464a      	mov	r2, r9
    77a8:	4342      	muls	r2, r0
    77aa:	0010      	movs	r0, r2
    77ac:	9203      	str	r2, [sp, #12]
    77ae:	4662      	mov	r2, ip
    77b0:	001c      	movs	r4, r3
    77b2:	0c3f      	lsrs	r7, r7, #16
    77b4:	437a      	muls	r2, r7
    77b6:	437c      	muls	r4, r7
    77b8:	4442      	add	r2, r8
    77ba:	9201      	str	r2, [sp, #4]
    77bc:	0c22      	lsrs	r2, r4, #16
    77be:	4692      	mov	sl, r2
    77c0:	9a01      	ldr	r2, [sp, #4]
    77c2:	4452      	add	r2, sl
    77c4:	4590      	cmp	r8, r2
    77c6:	d906      	bls.n	77d6 <__aeabi_dmul+0x23a>
    77c8:	4682      	mov	sl, r0
    77ca:	2080      	movs	r0, #128	; 0x80
    77cc:	0240      	lsls	r0, r0, #9
    77ce:	4680      	mov	r8, r0
    77d0:	44c2      	add	sl, r8
    77d2:	4650      	mov	r0, sl
    77d4:	9003      	str	r0, [sp, #12]
    77d6:	0c10      	lsrs	r0, r2, #16
    77d8:	9004      	str	r0, [sp, #16]
    77da:	4648      	mov	r0, r9
    77dc:	0424      	lsls	r4, r4, #16
    77de:	0c24      	lsrs	r4, r4, #16
    77e0:	0412      	lsls	r2, r2, #16
    77e2:	1912      	adds	r2, r2, r4
    77e4:	9205      	str	r2, [sp, #20]
    77e6:	0c2a      	lsrs	r2, r5, #16
    77e8:	042d      	lsls	r5, r5, #16
    77ea:	0c2d      	lsrs	r5, r5, #16
    77ec:	4368      	muls	r0, r5
    77ee:	002c      	movs	r4, r5
    77f0:	4682      	mov	sl, r0
    77f2:	4648      	mov	r0, r9
    77f4:	437c      	muls	r4, r7
    77f6:	4350      	muls	r0, r2
    77f8:	4681      	mov	r9, r0
    77fa:	0c20      	lsrs	r0, r4, #16
    77fc:	4680      	mov	r8, r0
    77fe:	4357      	muls	r7, r2
    7800:	4457      	add	r7, sl
    7802:	4447      	add	r7, r8
    7804:	45ba      	cmp	sl, r7
    7806:	d903      	bls.n	7810 <__aeabi_dmul+0x274>
    7808:	2080      	movs	r0, #128	; 0x80
    780a:	0240      	lsls	r0, r0, #9
    780c:	4680      	mov	r8, r0
    780e:	44c1      	add	r9, r8
    7810:	0c38      	lsrs	r0, r7, #16
    7812:	043f      	lsls	r7, r7, #16
    7814:	46b8      	mov	r8, r7
    7816:	4448      	add	r0, r9
    7818:	0424      	lsls	r4, r4, #16
    781a:	0c24      	lsrs	r4, r4, #16
    781c:	9001      	str	r0, [sp, #4]
    781e:	9804      	ldr	r0, [sp, #16]
    7820:	44a0      	add	r8, r4
    7822:	4440      	add	r0, r8
    7824:	9004      	str	r0, [sp, #16]
    7826:	4658      	mov	r0, fp
    7828:	0c00      	lsrs	r0, r0, #16
    782a:	4681      	mov	r9, r0
    782c:	4658      	mov	r0, fp
    782e:	0404      	lsls	r4, r0, #16
    7830:	0c20      	lsrs	r0, r4, #16
    7832:	4682      	mov	sl, r0
    7834:	0007      	movs	r7, r0
    7836:	4648      	mov	r0, r9
    7838:	435f      	muls	r7, r3
    783a:	464c      	mov	r4, r9
    783c:	4343      	muls	r3, r0
    783e:	4660      	mov	r0, ip
    7840:	4360      	muls	r0, r4
    7842:	4664      	mov	r4, ip
    7844:	4683      	mov	fp, r0
    7846:	4650      	mov	r0, sl
    7848:	4344      	muls	r4, r0
    784a:	0c38      	lsrs	r0, r7, #16
    784c:	4684      	mov	ip, r0
    784e:	18e4      	adds	r4, r4, r3
    7850:	4464      	add	r4, ip
    7852:	42a3      	cmp	r3, r4
    7854:	d903      	bls.n	785e <__aeabi_dmul+0x2c2>
    7856:	2380      	movs	r3, #128	; 0x80
    7858:	025b      	lsls	r3, r3, #9
    785a:	469c      	mov	ip, r3
    785c:	44e3      	add	fp, ip
    785e:	4648      	mov	r0, r9
    7860:	043f      	lsls	r7, r7, #16
    7862:	0c23      	lsrs	r3, r4, #16
    7864:	0c3f      	lsrs	r7, r7, #16
    7866:	0424      	lsls	r4, r4, #16
    7868:	19e4      	adds	r4, r4, r7
    786a:	4657      	mov	r7, sl
    786c:	4368      	muls	r0, r5
    786e:	436f      	muls	r7, r5
    7870:	4684      	mov	ip, r0
    7872:	464d      	mov	r5, r9
    7874:	4650      	mov	r0, sl
    7876:	4355      	muls	r5, r2
    7878:	4342      	muls	r2, r0
    787a:	0c38      	lsrs	r0, r7, #16
    787c:	4681      	mov	r9, r0
    787e:	4462      	add	r2, ip
    7880:	444a      	add	r2, r9
    7882:	445b      	add	r3, fp
    7884:	4594      	cmp	ip, r2
    7886:	d903      	bls.n	7890 <__aeabi_dmul+0x2f4>
    7888:	2080      	movs	r0, #128	; 0x80
    788a:	0240      	lsls	r0, r0, #9
    788c:	4684      	mov	ip, r0
    788e:	4465      	add	r5, ip
    7890:	9803      	ldr	r0, [sp, #12]
    7892:	043f      	lsls	r7, r7, #16
    7894:	4683      	mov	fp, r0
    7896:	9804      	ldr	r0, [sp, #16]
    7898:	0c3f      	lsrs	r7, r7, #16
    789a:	4684      	mov	ip, r0
    789c:	44e3      	add	fp, ip
    789e:	45c3      	cmp	fp, r8
    78a0:	4180      	sbcs	r0, r0
    78a2:	4240      	negs	r0, r0
    78a4:	4682      	mov	sl, r0
    78a6:	0410      	lsls	r0, r2, #16
    78a8:	4684      	mov	ip, r0
    78aa:	9801      	ldr	r0, [sp, #4]
    78ac:	4467      	add	r7, ip
    78ae:	4684      	mov	ip, r0
    78b0:	4467      	add	r7, ip
    78b2:	44a3      	add	fp, r4
    78b4:	46bc      	mov	ip, r7
    78b6:	45a3      	cmp	fp, r4
    78b8:	41a4      	sbcs	r4, r4
    78ba:	4699      	mov	r9, r3
    78bc:	44d4      	add	ip, sl
    78be:	4264      	negs	r4, r4
    78c0:	4287      	cmp	r7, r0
    78c2:	41bf      	sbcs	r7, r7
    78c4:	45d4      	cmp	ip, sl
    78c6:	4180      	sbcs	r0, r0
    78c8:	44e1      	add	r9, ip
    78ca:	46a0      	mov	r8, r4
    78cc:	4599      	cmp	r9, r3
    78ce:	419b      	sbcs	r3, r3
    78d0:	427f      	negs	r7, r7
    78d2:	4240      	negs	r0, r0
    78d4:	44c8      	add	r8, r9
    78d6:	4307      	orrs	r7, r0
    78d8:	0c12      	lsrs	r2, r2, #16
    78da:	18ba      	adds	r2, r7, r2
    78dc:	45a0      	cmp	r8, r4
    78de:	41a4      	sbcs	r4, r4
    78e0:	425f      	negs	r7, r3
    78e2:	003b      	movs	r3, r7
    78e4:	4264      	negs	r4, r4
    78e6:	4323      	orrs	r3, r4
    78e8:	18d7      	adds	r7, r2, r3
    78ea:	4643      	mov	r3, r8
    78ec:	197d      	adds	r5, r7, r5
    78ee:	0ddb      	lsrs	r3, r3, #23
    78f0:	026d      	lsls	r5, r5, #9
    78f2:	431d      	orrs	r5, r3
    78f4:	465b      	mov	r3, fp
    78f6:	025a      	lsls	r2, r3, #9
    78f8:	9b05      	ldr	r3, [sp, #20]
    78fa:	431a      	orrs	r2, r3
    78fc:	1e53      	subs	r3, r2, #1
    78fe:	419a      	sbcs	r2, r3
    7900:	465b      	mov	r3, fp
    7902:	0ddb      	lsrs	r3, r3, #23
    7904:	431a      	orrs	r2, r3
    7906:	4643      	mov	r3, r8
    7908:	025b      	lsls	r3, r3, #9
    790a:	4313      	orrs	r3, r2
    790c:	01ea      	lsls	r2, r5, #7
    790e:	d507      	bpl.n	7920 <__aeabi_dmul+0x384>
    7910:	2201      	movs	r2, #1
    7912:	085c      	lsrs	r4, r3, #1
    7914:	4013      	ands	r3, r2
    7916:	4323      	orrs	r3, r4
    7918:	07ea      	lsls	r2, r5, #31
    791a:	9e02      	ldr	r6, [sp, #8]
    791c:	4313      	orrs	r3, r2
    791e:	086d      	lsrs	r5, r5, #1
    7920:	4a57      	ldr	r2, [pc, #348]	; (7a80 <__aeabi_dmul+0x4e4>)
    7922:	18b2      	adds	r2, r6, r2
    7924:	2a00      	cmp	r2, #0
    7926:	dd4b      	ble.n	79c0 <__aeabi_dmul+0x424>
    7928:	0758      	lsls	r0, r3, #29
    792a:	d009      	beq.n	7940 <__aeabi_dmul+0x3a4>
    792c:	200f      	movs	r0, #15
    792e:	4018      	ands	r0, r3
    7930:	2804      	cmp	r0, #4
    7932:	d005      	beq.n	7940 <__aeabi_dmul+0x3a4>
    7934:	1d18      	adds	r0, r3, #4
    7936:	4298      	cmp	r0, r3
    7938:	419b      	sbcs	r3, r3
    793a:	425b      	negs	r3, r3
    793c:	18ed      	adds	r5, r5, r3
    793e:	0003      	movs	r3, r0
    7940:	01e8      	lsls	r0, r5, #7
    7942:	d504      	bpl.n	794e <__aeabi_dmul+0x3b2>
    7944:	4a4f      	ldr	r2, [pc, #316]	; (7a84 <__aeabi_dmul+0x4e8>)
    7946:	4015      	ands	r5, r2
    7948:	2280      	movs	r2, #128	; 0x80
    794a:	00d2      	lsls	r2, r2, #3
    794c:	18b2      	adds	r2, r6, r2
    794e:	484e      	ldr	r0, [pc, #312]	; (7a88 <__aeabi_dmul+0x4ec>)
    7950:	4282      	cmp	r2, r0
    7952:	dd00      	ble.n	7956 <__aeabi_dmul+0x3ba>
    7954:	e6e7      	b.n	7726 <__aeabi_dmul+0x18a>
    7956:	2401      	movs	r4, #1
    7958:	08db      	lsrs	r3, r3, #3
    795a:	0768      	lsls	r0, r5, #29
    795c:	4318      	orrs	r0, r3
    795e:	026d      	lsls	r5, r5, #9
    7960:	0553      	lsls	r3, r2, #21
    7962:	4680      	mov	r8, r0
    7964:	0b2d      	lsrs	r5, r5, #12
    7966:	0d5b      	lsrs	r3, r3, #21
    7968:	400c      	ands	r4, r1
    796a:	e67d      	b.n	7668 <__aeabi_dmul+0xcc>
    796c:	2280      	movs	r2, #128	; 0x80
    796e:	4659      	mov	r1, fp
    7970:	0312      	lsls	r2, r2, #12
    7972:	4211      	tst	r1, r2
    7974:	d008      	beq.n	7988 <__aeabi_dmul+0x3ec>
    7976:	4215      	tst	r5, r2
    7978:	d106      	bne.n	7988 <__aeabi_dmul+0x3ec>
    797a:	4315      	orrs	r5, r2
    797c:	032d      	lsls	r5, r5, #12
    797e:	4698      	mov	r8, r3
    7980:	0b2d      	lsrs	r5, r5, #12
    7982:	464c      	mov	r4, r9
    7984:	4b41      	ldr	r3, [pc, #260]	; (7a8c <__aeabi_dmul+0x4f0>)
    7986:	e66f      	b.n	7668 <__aeabi_dmul+0xcc>
    7988:	465d      	mov	r5, fp
    798a:	4315      	orrs	r5, r2
    798c:	032d      	lsls	r5, r5, #12
    798e:	0b2d      	lsrs	r5, r5, #12
    7990:	4b3e      	ldr	r3, [pc, #248]	; (7a8c <__aeabi_dmul+0x4f0>)
    7992:	e669      	b.n	7668 <__aeabi_dmul+0xcc>
    7994:	0003      	movs	r3, r0
    7996:	4655      	mov	r5, sl
    7998:	3b28      	subs	r3, #40	; 0x28
    799a:	409d      	lsls	r5, r3
    799c:	2300      	movs	r3, #0
    799e:	e6bc      	b.n	771a <__aeabi_dmul+0x17e>
    79a0:	4650      	mov	r0, sl
    79a2:	f000 fc37 	bl	8214 <__clzsi2>
    79a6:	3020      	adds	r0, #32
    79a8:	e6a8      	b.n	76fc <__aeabi_dmul+0x160>
    79aa:	0003      	movs	r3, r0
    79ac:	3b28      	subs	r3, #40	; 0x28
    79ae:	409f      	lsls	r7, r3
    79b0:	2300      	movs	r3, #0
    79b2:	46bb      	mov	fp, r7
    79b4:	4698      	mov	r8, r3
    79b6:	e689      	b.n	76cc <__aeabi_dmul+0x130>
    79b8:	f000 fc2c 	bl	8214 <__clzsi2>
    79bc:	3020      	adds	r0, #32
    79be:	e673      	b.n	76a8 <__aeabi_dmul+0x10c>
    79c0:	2401      	movs	r4, #1
    79c2:	1aa6      	subs	r6, r4, r2
    79c4:	2e38      	cmp	r6, #56	; 0x38
    79c6:	dd07      	ble.n	79d8 <__aeabi_dmul+0x43c>
    79c8:	2200      	movs	r2, #0
    79ca:	400c      	ands	r4, r1
    79cc:	2300      	movs	r3, #0
    79ce:	2500      	movs	r5, #0
    79d0:	4690      	mov	r8, r2
    79d2:	e649      	b.n	7668 <__aeabi_dmul+0xcc>
    79d4:	9e02      	ldr	r6, [sp, #8]
    79d6:	e7a3      	b.n	7920 <__aeabi_dmul+0x384>
    79d8:	2e1f      	cmp	r6, #31
    79da:	dc20      	bgt.n	7a1e <__aeabi_dmul+0x482>
    79dc:	2220      	movs	r2, #32
    79de:	002c      	movs	r4, r5
    79e0:	0018      	movs	r0, r3
    79e2:	1b92      	subs	r2, r2, r6
    79e4:	40f0      	lsrs	r0, r6
    79e6:	4094      	lsls	r4, r2
    79e8:	4093      	lsls	r3, r2
    79ea:	4304      	orrs	r4, r0
    79ec:	1e58      	subs	r0, r3, #1
    79ee:	4183      	sbcs	r3, r0
    79f0:	431c      	orrs	r4, r3
    79f2:	40f5      	lsrs	r5, r6
    79f4:	0763      	lsls	r3, r4, #29
    79f6:	d009      	beq.n	7a0c <__aeabi_dmul+0x470>
    79f8:	230f      	movs	r3, #15
    79fa:	4023      	ands	r3, r4
    79fc:	2b04      	cmp	r3, #4
    79fe:	d005      	beq.n	7a0c <__aeabi_dmul+0x470>
    7a00:	0023      	movs	r3, r4
    7a02:	1d1c      	adds	r4, r3, #4
    7a04:	429c      	cmp	r4, r3
    7a06:	4192      	sbcs	r2, r2
    7a08:	4252      	negs	r2, r2
    7a0a:	18ad      	adds	r5, r5, r2
    7a0c:	022b      	lsls	r3, r5, #8
    7a0e:	d51f      	bpl.n	7a50 <__aeabi_dmul+0x4b4>
    7a10:	2401      	movs	r4, #1
    7a12:	2200      	movs	r2, #0
    7a14:	400c      	ands	r4, r1
    7a16:	2301      	movs	r3, #1
    7a18:	2500      	movs	r5, #0
    7a1a:	4690      	mov	r8, r2
    7a1c:	e624      	b.n	7668 <__aeabi_dmul+0xcc>
    7a1e:	201f      	movs	r0, #31
    7a20:	002c      	movs	r4, r5
    7a22:	4240      	negs	r0, r0
    7a24:	1a82      	subs	r2, r0, r2
    7a26:	40d4      	lsrs	r4, r2
    7a28:	2e20      	cmp	r6, #32
    7a2a:	d01c      	beq.n	7a66 <__aeabi_dmul+0x4ca>
    7a2c:	2240      	movs	r2, #64	; 0x40
    7a2e:	1b96      	subs	r6, r2, r6
    7a30:	40b5      	lsls	r5, r6
    7a32:	432b      	orrs	r3, r5
    7a34:	1e58      	subs	r0, r3, #1
    7a36:	4183      	sbcs	r3, r0
    7a38:	2007      	movs	r0, #7
    7a3a:	4323      	orrs	r3, r4
    7a3c:	4018      	ands	r0, r3
    7a3e:	2500      	movs	r5, #0
    7a40:	2800      	cmp	r0, #0
    7a42:	d009      	beq.n	7a58 <__aeabi_dmul+0x4bc>
    7a44:	220f      	movs	r2, #15
    7a46:	2500      	movs	r5, #0
    7a48:	401a      	ands	r2, r3
    7a4a:	001c      	movs	r4, r3
    7a4c:	2a04      	cmp	r2, #4
    7a4e:	d1d8      	bne.n	7a02 <__aeabi_dmul+0x466>
    7a50:	0023      	movs	r3, r4
    7a52:	0768      	lsls	r0, r5, #29
    7a54:	026d      	lsls	r5, r5, #9
    7a56:	0b2d      	lsrs	r5, r5, #12
    7a58:	2401      	movs	r4, #1
    7a5a:	08db      	lsrs	r3, r3, #3
    7a5c:	4303      	orrs	r3, r0
    7a5e:	4698      	mov	r8, r3
    7a60:	400c      	ands	r4, r1
    7a62:	2300      	movs	r3, #0
    7a64:	e600      	b.n	7668 <__aeabi_dmul+0xcc>
    7a66:	2500      	movs	r5, #0
    7a68:	e7e3      	b.n	7a32 <__aeabi_dmul+0x496>
    7a6a:	2280      	movs	r2, #128	; 0x80
    7a6c:	2401      	movs	r4, #1
    7a6e:	0312      	lsls	r2, r2, #12
    7a70:	4315      	orrs	r5, r2
    7a72:	032d      	lsls	r5, r5, #12
    7a74:	4698      	mov	r8, r3
    7a76:	0b2d      	lsrs	r5, r5, #12
    7a78:	400c      	ands	r4, r1
    7a7a:	4b04      	ldr	r3, [pc, #16]	; (7a8c <__aeabi_dmul+0x4f0>)
    7a7c:	e5f4      	b.n	7668 <__aeabi_dmul+0xcc>
    7a7e:	46c0      	nop			; (mov r8, r8)
    7a80:	000003ff 	.word	0x000003ff
    7a84:	feffffff 	.word	0xfeffffff
    7a88:	000007fe 	.word	0x000007fe
    7a8c:	000007ff 	.word	0x000007ff

00007a90 <__aeabi_dsub>:
    7a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a92:	4657      	mov	r7, sl
    7a94:	464e      	mov	r6, r9
    7a96:	4645      	mov	r5, r8
    7a98:	b4e0      	push	{r5, r6, r7}
    7a9a:	000e      	movs	r6, r1
    7a9c:	0011      	movs	r1, r2
    7a9e:	0ff2      	lsrs	r2, r6, #31
    7aa0:	4692      	mov	sl, r2
    7aa2:	00c5      	lsls	r5, r0, #3
    7aa4:	0f42      	lsrs	r2, r0, #29
    7aa6:	0318      	lsls	r0, r3, #12
    7aa8:	0337      	lsls	r7, r6, #12
    7aaa:	0074      	lsls	r4, r6, #1
    7aac:	0a40      	lsrs	r0, r0, #9
    7aae:	0f4e      	lsrs	r6, r1, #29
    7ab0:	0a7f      	lsrs	r7, r7, #9
    7ab2:	4330      	orrs	r0, r6
    7ab4:	4ecf      	ldr	r6, [pc, #828]	; (7df4 <__aeabi_dsub+0x364>)
    7ab6:	4317      	orrs	r7, r2
    7ab8:	005a      	lsls	r2, r3, #1
    7aba:	0d64      	lsrs	r4, r4, #21
    7abc:	0d52      	lsrs	r2, r2, #21
    7abe:	0fdb      	lsrs	r3, r3, #31
    7ac0:	00c9      	lsls	r1, r1, #3
    7ac2:	42b2      	cmp	r2, r6
    7ac4:	d100      	bne.n	7ac8 <__aeabi_dsub+0x38>
    7ac6:	e0e5      	b.n	7c94 <__aeabi_dsub+0x204>
    7ac8:	2601      	movs	r6, #1
    7aca:	4073      	eors	r3, r6
    7acc:	1aa6      	subs	r6, r4, r2
    7ace:	46b4      	mov	ip, r6
    7ad0:	4553      	cmp	r3, sl
    7ad2:	d100      	bne.n	7ad6 <__aeabi_dsub+0x46>
    7ad4:	e0af      	b.n	7c36 <__aeabi_dsub+0x1a6>
    7ad6:	2e00      	cmp	r6, #0
    7ad8:	dc00      	bgt.n	7adc <__aeabi_dsub+0x4c>
    7ada:	e10d      	b.n	7cf8 <__aeabi_dsub+0x268>
    7adc:	2a00      	cmp	r2, #0
    7ade:	d13a      	bne.n	7b56 <__aeabi_dsub+0xc6>
    7ae0:	0003      	movs	r3, r0
    7ae2:	430b      	orrs	r3, r1
    7ae4:	d000      	beq.n	7ae8 <__aeabi_dsub+0x58>
    7ae6:	e0e4      	b.n	7cb2 <__aeabi_dsub+0x222>
    7ae8:	076b      	lsls	r3, r5, #29
    7aea:	d009      	beq.n	7b00 <__aeabi_dsub+0x70>
    7aec:	230f      	movs	r3, #15
    7aee:	402b      	ands	r3, r5
    7af0:	2b04      	cmp	r3, #4
    7af2:	d005      	beq.n	7b00 <__aeabi_dsub+0x70>
    7af4:	1d2b      	adds	r3, r5, #4
    7af6:	42ab      	cmp	r3, r5
    7af8:	41ad      	sbcs	r5, r5
    7afa:	426d      	negs	r5, r5
    7afc:	197f      	adds	r7, r7, r5
    7afe:	001d      	movs	r5, r3
    7b00:	023b      	lsls	r3, r7, #8
    7b02:	d400      	bmi.n	7b06 <__aeabi_dsub+0x76>
    7b04:	e088      	b.n	7c18 <__aeabi_dsub+0x188>
    7b06:	4bbb      	ldr	r3, [pc, #748]	; (7df4 <__aeabi_dsub+0x364>)
    7b08:	3401      	adds	r4, #1
    7b0a:	429c      	cmp	r4, r3
    7b0c:	d100      	bne.n	7b10 <__aeabi_dsub+0x80>
    7b0e:	e110      	b.n	7d32 <__aeabi_dsub+0x2a2>
    7b10:	003a      	movs	r2, r7
    7b12:	4bb9      	ldr	r3, [pc, #740]	; (7df8 <__aeabi_dsub+0x368>)
    7b14:	4651      	mov	r1, sl
    7b16:	401a      	ands	r2, r3
    7b18:	2301      	movs	r3, #1
    7b1a:	0750      	lsls	r0, r2, #29
    7b1c:	08ed      	lsrs	r5, r5, #3
    7b1e:	0252      	lsls	r2, r2, #9
    7b20:	0564      	lsls	r4, r4, #21
    7b22:	4305      	orrs	r5, r0
    7b24:	0b12      	lsrs	r2, r2, #12
    7b26:	0d64      	lsrs	r4, r4, #21
    7b28:	400b      	ands	r3, r1
    7b2a:	2100      	movs	r1, #0
    7b2c:	0028      	movs	r0, r5
    7b2e:	0312      	lsls	r2, r2, #12
    7b30:	0d0d      	lsrs	r5, r1, #20
    7b32:	0b12      	lsrs	r2, r2, #12
    7b34:	0564      	lsls	r4, r4, #21
    7b36:	052d      	lsls	r5, r5, #20
    7b38:	4315      	orrs	r5, r2
    7b3a:	0862      	lsrs	r2, r4, #1
    7b3c:	4caf      	ldr	r4, [pc, #700]	; (7dfc <__aeabi_dsub+0x36c>)
    7b3e:	07db      	lsls	r3, r3, #31
    7b40:	402c      	ands	r4, r5
    7b42:	4314      	orrs	r4, r2
    7b44:	0064      	lsls	r4, r4, #1
    7b46:	0864      	lsrs	r4, r4, #1
    7b48:	431c      	orrs	r4, r3
    7b4a:	0021      	movs	r1, r4
    7b4c:	bc1c      	pop	{r2, r3, r4}
    7b4e:	4690      	mov	r8, r2
    7b50:	4699      	mov	r9, r3
    7b52:	46a2      	mov	sl, r4
    7b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b56:	4ba7      	ldr	r3, [pc, #668]	; (7df4 <__aeabi_dsub+0x364>)
    7b58:	429c      	cmp	r4, r3
    7b5a:	d0c5      	beq.n	7ae8 <__aeabi_dsub+0x58>
    7b5c:	2380      	movs	r3, #128	; 0x80
    7b5e:	041b      	lsls	r3, r3, #16
    7b60:	4318      	orrs	r0, r3
    7b62:	4663      	mov	r3, ip
    7b64:	2b38      	cmp	r3, #56	; 0x38
    7b66:	dd00      	ble.n	7b6a <__aeabi_dsub+0xda>
    7b68:	e0fd      	b.n	7d66 <__aeabi_dsub+0x2d6>
    7b6a:	2b1f      	cmp	r3, #31
    7b6c:	dd00      	ble.n	7b70 <__aeabi_dsub+0xe0>
    7b6e:	e130      	b.n	7dd2 <__aeabi_dsub+0x342>
    7b70:	4662      	mov	r2, ip
    7b72:	2320      	movs	r3, #32
    7b74:	1a9b      	subs	r3, r3, r2
    7b76:	0002      	movs	r2, r0
    7b78:	409a      	lsls	r2, r3
    7b7a:	4666      	mov	r6, ip
    7b7c:	4690      	mov	r8, r2
    7b7e:	000a      	movs	r2, r1
    7b80:	4099      	lsls	r1, r3
    7b82:	40f2      	lsrs	r2, r6
    7b84:	4646      	mov	r6, r8
    7b86:	1e4b      	subs	r3, r1, #1
    7b88:	4199      	sbcs	r1, r3
    7b8a:	4332      	orrs	r2, r6
    7b8c:	4311      	orrs	r1, r2
    7b8e:	4663      	mov	r3, ip
    7b90:	0002      	movs	r2, r0
    7b92:	40da      	lsrs	r2, r3
    7b94:	1a69      	subs	r1, r5, r1
    7b96:	428d      	cmp	r5, r1
    7b98:	419b      	sbcs	r3, r3
    7b9a:	000d      	movs	r5, r1
    7b9c:	1aba      	subs	r2, r7, r2
    7b9e:	425b      	negs	r3, r3
    7ba0:	1ad7      	subs	r7, r2, r3
    7ba2:	023b      	lsls	r3, r7, #8
    7ba4:	d535      	bpl.n	7c12 <__aeabi_dsub+0x182>
    7ba6:	027a      	lsls	r2, r7, #9
    7ba8:	0a53      	lsrs	r3, r2, #9
    7baa:	4698      	mov	r8, r3
    7bac:	4643      	mov	r3, r8
    7bae:	2b00      	cmp	r3, #0
    7bb0:	d100      	bne.n	7bb4 <__aeabi_dsub+0x124>
    7bb2:	e0c4      	b.n	7d3e <__aeabi_dsub+0x2ae>
    7bb4:	4640      	mov	r0, r8
    7bb6:	f000 fb2d 	bl	8214 <__clzsi2>
    7bba:	0003      	movs	r3, r0
    7bbc:	3b08      	subs	r3, #8
    7bbe:	2b1f      	cmp	r3, #31
    7bc0:	dd00      	ble.n	7bc4 <__aeabi_dsub+0x134>
    7bc2:	e0c5      	b.n	7d50 <__aeabi_dsub+0x2c0>
    7bc4:	2220      	movs	r2, #32
    7bc6:	0029      	movs	r1, r5
    7bc8:	1ad2      	subs	r2, r2, r3
    7bca:	4647      	mov	r7, r8
    7bcc:	40d1      	lsrs	r1, r2
    7bce:	409f      	lsls	r7, r3
    7bd0:	000a      	movs	r2, r1
    7bd2:	409d      	lsls	r5, r3
    7bd4:	433a      	orrs	r2, r7
    7bd6:	429c      	cmp	r4, r3
    7bd8:	dd00      	ble.n	7bdc <__aeabi_dsub+0x14c>
    7bda:	e0c0      	b.n	7d5e <__aeabi_dsub+0x2ce>
    7bdc:	1b1c      	subs	r4, r3, r4
    7bde:	1c63      	adds	r3, r4, #1
    7be0:	2b1f      	cmp	r3, #31
    7be2:	dd00      	ble.n	7be6 <__aeabi_dsub+0x156>
    7be4:	e0e4      	b.n	7db0 <__aeabi_dsub+0x320>
    7be6:	2120      	movs	r1, #32
    7be8:	0014      	movs	r4, r2
    7bea:	0028      	movs	r0, r5
    7bec:	1ac9      	subs	r1, r1, r3
    7bee:	40d8      	lsrs	r0, r3
    7bf0:	408c      	lsls	r4, r1
    7bf2:	408d      	lsls	r5, r1
    7bf4:	4304      	orrs	r4, r0
    7bf6:	40da      	lsrs	r2, r3
    7bf8:	1e68      	subs	r0, r5, #1
    7bfa:	4185      	sbcs	r5, r0
    7bfc:	0017      	movs	r7, r2
    7bfe:	4325      	orrs	r5, r4
    7c00:	2400      	movs	r4, #0
    7c02:	e771      	b.n	7ae8 <__aeabi_dsub+0x58>
    7c04:	4642      	mov	r2, r8
    7c06:	4663      	mov	r3, ip
    7c08:	431a      	orrs	r2, r3
    7c0a:	d100      	bne.n	7c0e <__aeabi_dsub+0x17e>
    7c0c:	e24c      	b.n	80a8 <__aeabi_dsub+0x618>
    7c0e:	4667      	mov	r7, ip
    7c10:	4645      	mov	r5, r8
    7c12:	076b      	lsls	r3, r5, #29
    7c14:	d000      	beq.n	7c18 <__aeabi_dsub+0x188>
    7c16:	e769      	b.n	7aec <__aeabi_dsub+0x5c>
    7c18:	2301      	movs	r3, #1
    7c1a:	4651      	mov	r1, sl
    7c1c:	0778      	lsls	r0, r7, #29
    7c1e:	08ed      	lsrs	r5, r5, #3
    7c20:	08fa      	lsrs	r2, r7, #3
    7c22:	400b      	ands	r3, r1
    7c24:	4305      	orrs	r5, r0
    7c26:	4973      	ldr	r1, [pc, #460]	; (7df4 <__aeabi_dsub+0x364>)
    7c28:	428c      	cmp	r4, r1
    7c2a:	d038      	beq.n	7c9e <__aeabi_dsub+0x20e>
    7c2c:	0312      	lsls	r2, r2, #12
    7c2e:	0564      	lsls	r4, r4, #21
    7c30:	0b12      	lsrs	r2, r2, #12
    7c32:	0d64      	lsrs	r4, r4, #21
    7c34:	e779      	b.n	7b2a <__aeabi_dsub+0x9a>
    7c36:	2e00      	cmp	r6, #0
    7c38:	dc00      	bgt.n	7c3c <__aeabi_dsub+0x1ac>
    7c3a:	e09a      	b.n	7d72 <__aeabi_dsub+0x2e2>
    7c3c:	2a00      	cmp	r2, #0
    7c3e:	d047      	beq.n	7cd0 <__aeabi_dsub+0x240>
    7c40:	4a6c      	ldr	r2, [pc, #432]	; (7df4 <__aeabi_dsub+0x364>)
    7c42:	4294      	cmp	r4, r2
    7c44:	d100      	bne.n	7c48 <__aeabi_dsub+0x1b8>
    7c46:	e74f      	b.n	7ae8 <__aeabi_dsub+0x58>
    7c48:	2280      	movs	r2, #128	; 0x80
    7c4a:	0412      	lsls	r2, r2, #16
    7c4c:	4310      	orrs	r0, r2
    7c4e:	4662      	mov	r2, ip
    7c50:	2a38      	cmp	r2, #56	; 0x38
    7c52:	dc00      	bgt.n	7c56 <__aeabi_dsub+0x1c6>
    7c54:	e108      	b.n	7e68 <__aeabi_dsub+0x3d8>
    7c56:	4301      	orrs	r1, r0
    7c58:	1e48      	subs	r0, r1, #1
    7c5a:	4181      	sbcs	r1, r0
    7c5c:	2200      	movs	r2, #0
    7c5e:	b2c9      	uxtb	r1, r1
    7c60:	1949      	adds	r1, r1, r5
    7c62:	19d2      	adds	r2, r2, r7
    7c64:	42a9      	cmp	r1, r5
    7c66:	41bf      	sbcs	r7, r7
    7c68:	000d      	movs	r5, r1
    7c6a:	427f      	negs	r7, r7
    7c6c:	18bf      	adds	r7, r7, r2
    7c6e:	023a      	lsls	r2, r7, #8
    7c70:	d400      	bmi.n	7c74 <__aeabi_dsub+0x1e4>
    7c72:	e142      	b.n	7efa <__aeabi_dsub+0x46a>
    7c74:	4a5f      	ldr	r2, [pc, #380]	; (7df4 <__aeabi_dsub+0x364>)
    7c76:	3401      	adds	r4, #1
    7c78:	4294      	cmp	r4, r2
    7c7a:	d100      	bne.n	7c7e <__aeabi_dsub+0x1ee>
    7c7c:	e14e      	b.n	7f1c <__aeabi_dsub+0x48c>
    7c7e:	2001      	movs	r0, #1
    7c80:	4a5d      	ldr	r2, [pc, #372]	; (7df8 <__aeabi_dsub+0x368>)
    7c82:	0869      	lsrs	r1, r5, #1
    7c84:	403a      	ands	r2, r7
    7c86:	4028      	ands	r0, r5
    7c88:	4308      	orrs	r0, r1
    7c8a:	07d5      	lsls	r5, r2, #31
    7c8c:	4305      	orrs	r5, r0
    7c8e:	0857      	lsrs	r7, r2, #1
    7c90:	469a      	mov	sl, r3
    7c92:	e729      	b.n	7ae8 <__aeabi_dsub+0x58>
    7c94:	0006      	movs	r6, r0
    7c96:	430e      	orrs	r6, r1
    7c98:	d000      	beq.n	7c9c <__aeabi_dsub+0x20c>
    7c9a:	e717      	b.n	7acc <__aeabi_dsub+0x3c>
    7c9c:	e714      	b.n	7ac8 <__aeabi_dsub+0x38>
    7c9e:	0029      	movs	r1, r5
    7ca0:	4311      	orrs	r1, r2
    7ca2:	d100      	bne.n	7ca6 <__aeabi_dsub+0x216>
    7ca4:	e1f9      	b.n	809a <__aeabi_dsub+0x60a>
    7ca6:	2180      	movs	r1, #128	; 0x80
    7ca8:	0309      	lsls	r1, r1, #12
    7caa:	430a      	orrs	r2, r1
    7cac:	0312      	lsls	r2, r2, #12
    7cae:	0b12      	lsrs	r2, r2, #12
    7cb0:	e73b      	b.n	7b2a <__aeabi_dsub+0x9a>
    7cb2:	2301      	movs	r3, #1
    7cb4:	425b      	negs	r3, r3
    7cb6:	4698      	mov	r8, r3
    7cb8:	44c4      	add	ip, r8
    7cba:	4663      	mov	r3, ip
    7cbc:	2b00      	cmp	r3, #0
    7cbe:	d172      	bne.n	7da6 <__aeabi_dsub+0x316>
    7cc0:	1a69      	subs	r1, r5, r1
    7cc2:	428d      	cmp	r5, r1
    7cc4:	419b      	sbcs	r3, r3
    7cc6:	1a3f      	subs	r7, r7, r0
    7cc8:	425b      	negs	r3, r3
    7cca:	1aff      	subs	r7, r7, r3
    7ccc:	000d      	movs	r5, r1
    7cce:	e768      	b.n	7ba2 <__aeabi_dsub+0x112>
    7cd0:	0002      	movs	r2, r0
    7cd2:	430a      	orrs	r2, r1
    7cd4:	d100      	bne.n	7cd8 <__aeabi_dsub+0x248>
    7cd6:	e707      	b.n	7ae8 <__aeabi_dsub+0x58>
    7cd8:	2201      	movs	r2, #1
    7cda:	4252      	negs	r2, r2
    7cdc:	4690      	mov	r8, r2
    7cde:	44c4      	add	ip, r8
    7ce0:	4662      	mov	r2, ip
    7ce2:	2a00      	cmp	r2, #0
    7ce4:	d000      	beq.n	7ce8 <__aeabi_dsub+0x258>
    7ce6:	e0e6      	b.n	7eb6 <__aeabi_dsub+0x426>
    7ce8:	1869      	adds	r1, r5, r1
    7cea:	42a9      	cmp	r1, r5
    7cec:	41b6      	sbcs	r6, r6
    7cee:	183f      	adds	r7, r7, r0
    7cf0:	4276      	negs	r6, r6
    7cf2:	19f7      	adds	r7, r6, r7
    7cf4:	000d      	movs	r5, r1
    7cf6:	e7ba      	b.n	7c6e <__aeabi_dsub+0x1de>
    7cf8:	2e00      	cmp	r6, #0
    7cfa:	d000      	beq.n	7cfe <__aeabi_dsub+0x26e>
    7cfc:	e080      	b.n	7e00 <__aeabi_dsub+0x370>
    7cfe:	1c62      	adds	r2, r4, #1
    7d00:	0552      	lsls	r2, r2, #21
    7d02:	0d52      	lsrs	r2, r2, #21
    7d04:	2a01      	cmp	r2, #1
    7d06:	dc00      	bgt.n	7d0a <__aeabi_dsub+0x27a>
    7d08:	e0f9      	b.n	7efe <__aeabi_dsub+0x46e>
    7d0a:	1a6a      	subs	r2, r5, r1
    7d0c:	4691      	mov	r9, r2
    7d0e:	454d      	cmp	r5, r9
    7d10:	41b6      	sbcs	r6, r6
    7d12:	1a3a      	subs	r2, r7, r0
    7d14:	4276      	negs	r6, r6
    7d16:	1b92      	subs	r2, r2, r6
    7d18:	4690      	mov	r8, r2
    7d1a:	0212      	lsls	r2, r2, #8
    7d1c:	d400      	bmi.n	7d20 <__aeabi_dsub+0x290>
    7d1e:	e099      	b.n	7e54 <__aeabi_dsub+0x3c4>
    7d20:	1b4d      	subs	r5, r1, r5
    7d22:	42a9      	cmp	r1, r5
    7d24:	4189      	sbcs	r1, r1
    7d26:	1bc7      	subs	r7, r0, r7
    7d28:	4249      	negs	r1, r1
    7d2a:	1a7a      	subs	r2, r7, r1
    7d2c:	4690      	mov	r8, r2
    7d2e:	469a      	mov	sl, r3
    7d30:	e73c      	b.n	7bac <__aeabi_dsub+0x11c>
    7d32:	4652      	mov	r2, sl
    7d34:	2301      	movs	r3, #1
    7d36:	2500      	movs	r5, #0
    7d38:	4013      	ands	r3, r2
    7d3a:	2200      	movs	r2, #0
    7d3c:	e6f5      	b.n	7b2a <__aeabi_dsub+0x9a>
    7d3e:	0028      	movs	r0, r5
    7d40:	f000 fa68 	bl	8214 <__clzsi2>
    7d44:	3020      	adds	r0, #32
    7d46:	0003      	movs	r3, r0
    7d48:	3b08      	subs	r3, #8
    7d4a:	2b1f      	cmp	r3, #31
    7d4c:	dc00      	bgt.n	7d50 <__aeabi_dsub+0x2c0>
    7d4e:	e739      	b.n	7bc4 <__aeabi_dsub+0x134>
    7d50:	002a      	movs	r2, r5
    7d52:	3828      	subs	r0, #40	; 0x28
    7d54:	4082      	lsls	r2, r0
    7d56:	2500      	movs	r5, #0
    7d58:	429c      	cmp	r4, r3
    7d5a:	dc00      	bgt.n	7d5e <__aeabi_dsub+0x2ce>
    7d5c:	e73e      	b.n	7bdc <__aeabi_dsub+0x14c>
    7d5e:	4f26      	ldr	r7, [pc, #152]	; (7df8 <__aeabi_dsub+0x368>)
    7d60:	1ae4      	subs	r4, r4, r3
    7d62:	4017      	ands	r7, r2
    7d64:	e6c0      	b.n	7ae8 <__aeabi_dsub+0x58>
    7d66:	4301      	orrs	r1, r0
    7d68:	1e48      	subs	r0, r1, #1
    7d6a:	4181      	sbcs	r1, r0
    7d6c:	2200      	movs	r2, #0
    7d6e:	b2c9      	uxtb	r1, r1
    7d70:	e710      	b.n	7b94 <__aeabi_dsub+0x104>
    7d72:	2e00      	cmp	r6, #0
    7d74:	d000      	beq.n	7d78 <__aeabi_dsub+0x2e8>
    7d76:	e0f1      	b.n	7f5c <__aeabi_dsub+0x4cc>
    7d78:	1c62      	adds	r2, r4, #1
    7d7a:	4694      	mov	ip, r2
    7d7c:	0552      	lsls	r2, r2, #21
    7d7e:	0d52      	lsrs	r2, r2, #21
    7d80:	2a01      	cmp	r2, #1
    7d82:	dc00      	bgt.n	7d86 <__aeabi_dsub+0x2f6>
    7d84:	e0a0      	b.n	7ec8 <__aeabi_dsub+0x438>
    7d86:	4a1b      	ldr	r2, [pc, #108]	; (7df4 <__aeabi_dsub+0x364>)
    7d88:	4594      	cmp	ip, r2
    7d8a:	d100      	bne.n	7d8e <__aeabi_dsub+0x2fe>
    7d8c:	e0c5      	b.n	7f1a <__aeabi_dsub+0x48a>
    7d8e:	1869      	adds	r1, r5, r1
    7d90:	42a9      	cmp	r1, r5
    7d92:	4192      	sbcs	r2, r2
    7d94:	183f      	adds	r7, r7, r0
    7d96:	4252      	negs	r2, r2
    7d98:	19d2      	adds	r2, r2, r7
    7d9a:	0849      	lsrs	r1, r1, #1
    7d9c:	07d5      	lsls	r5, r2, #31
    7d9e:	430d      	orrs	r5, r1
    7da0:	0857      	lsrs	r7, r2, #1
    7da2:	4664      	mov	r4, ip
    7da4:	e6a0      	b.n	7ae8 <__aeabi_dsub+0x58>
    7da6:	4b13      	ldr	r3, [pc, #76]	; (7df4 <__aeabi_dsub+0x364>)
    7da8:	429c      	cmp	r4, r3
    7daa:	d000      	beq.n	7dae <__aeabi_dsub+0x31e>
    7dac:	e6d9      	b.n	7b62 <__aeabi_dsub+0xd2>
    7dae:	e69b      	b.n	7ae8 <__aeabi_dsub+0x58>
    7db0:	0011      	movs	r1, r2
    7db2:	3c1f      	subs	r4, #31
    7db4:	40e1      	lsrs	r1, r4
    7db6:	000c      	movs	r4, r1
    7db8:	2b20      	cmp	r3, #32
    7dba:	d100      	bne.n	7dbe <__aeabi_dsub+0x32e>
    7dbc:	e080      	b.n	7ec0 <__aeabi_dsub+0x430>
    7dbe:	2140      	movs	r1, #64	; 0x40
    7dc0:	1acb      	subs	r3, r1, r3
    7dc2:	409a      	lsls	r2, r3
    7dc4:	4315      	orrs	r5, r2
    7dc6:	1e6a      	subs	r2, r5, #1
    7dc8:	4195      	sbcs	r5, r2
    7dca:	2700      	movs	r7, #0
    7dcc:	4325      	orrs	r5, r4
    7dce:	2400      	movs	r4, #0
    7dd0:	e71f      	b.n	7c12 <__aeabi_dsub+0x182>
    7dd2:	4663      	mov	r3, ip
    7dd4:	0002      	movs	r2, r0
    7dd6:	3b20      	subs	r3, #32
    7dd8:	40da      	lsrs	r2, r3
    7dda:	4663      	mov	r3, ip
    7ddc:	2b20      	cmp	r3, #32
    7dde:	d071      	beq.n	7ec4 <__aeabi_dsub+0x434>
    7de0:	2340      	movs	r3, #64	; 0x40
    7de2:	4666      	mov	r6, ip
    7de4:	1b9b      	subs	r3, r3, r6
    7de6:	4098      	lsls	r0, r3
    7de8:	4301      	orrs	r1, r0
    7dea:	1e48      	subs	r0, r1, #1
    7dec:	4181      	sbcs	r1, r0
    7dee:	4311      	orrs	r1, r2
    7df0:	2200      	movs	r2, #0
    7df2:	e6cf      	b.n	7b94 <__aeabi_dsub+0x104>
    7df4:	000007ff 	.word	0x000007ff
    7df8:	ff7fffff 	.word	0xff7fffff
    7dfc:	800fffff 	.word	0x800fffff
    7e00:	2c00      	cmp	r4, #0
    7e02:	d048      	beq.n	7e96 <__aeabi_dsub+0x406>
    7e04:	4cca      	ldr	r4, [pc, #808]	; (8130 <__aeabi_dsub+0x6a0>)
    7e06:	42a2      	cmp	r2, r4
    7e08:	d100      	bne.n	7e0c <__aeabi_dsub+0x37c>
    7e0a:	e0a2      	b.n	7f52 <__aeabi_dsub+0x4c2>
    7e0c:	4274      	negs	r4, r6
    7e0e:	46a1      	mov	r9, r4
    7e10:	2480      	movs	r4, #128	; 0x80
    7e12:	0424      	lsls	r4, r4, #16
    7e14:	4327      	orrs	r7, r4
    7e16:	464c      	mov	r4, r9
    7e18:	2c38      	cmp	r4, #56	; 0x38
    7e1a:	dd00      	ble.n	7e1e <__aeabi_dsub+0x38e>
    7e1c:	e0db      	b.n	7fd6 <__aeabi_dsub+0x546>
    7e1e:	2c1f      	cmp	r4, #31
    7e20:	dd00      	ble.n	7e24 <__aeabi_dsub+0x394>
    7e22:	e144      	b.n	80ae <__aeabi_dsub+0x61e>
    7e24:	464e      	mov	r6, r9
    7e26:	2420      	movs	r4, #32
    7e28:	1ba4      	subs	r4, r4, r6
    7e2a:	003e      	movs	r6, r7
    7e2c:	40a6      	lsls	r6, r4
    7e2e:	46a2      	mov	sl, r4
    7e30:	46b0      	mov	r8, r6
    7e32:	464c      	mov	r4, r9
    7e34:	002e      	movs	r6, r5
    7e36:	40e6      	lsrs	r6, r4
    7e38:	46b4      	mov	ip, r6
    7e3a:	4646      	mov	r6, r8
    7e3c:	4664      	mov	r4, ip
    7e3e:	4326      	orrs	r6, r4
    7e40:	4654      	mov	r4, sl
    7e42:	40a5      	lsls	r5, r4
    7e44:	1e6c      	subs	r4, r5, #1
    7e46:	41a5      	sbcs	r5, r4
    7e48:	0034      	movs	r4, r6
    7e4a:	432c      	orrs	r4, r5
    7e4c:	464d      	mov	r5, r9
    7e4e:	40ef      	lsrs	r7, r5
    7e50:	1b0d      	subs	r5, r1, r4
    7e52:	e028      	b.n	7ea6 <__aeabi_dsub+0x416>
    7e54:	464a      	mov	r2, r9
    7e56:	4643      	mov	r3, r8
    7e58:	464d      	mov	r5, r9
    7e5a:	431a      	orrs	r2, r3
    7e5c:	d000      	beq.n	7e60 <__aeabi_dsub+0x3d0>
    7e5e:	e6a5      	b.n	7bac <__aeabi_dsub+0x11c>
    7e60:	2300      	movs	r3, #0
    7e62:	2400      	movs	r4, #0
    7e64:	2500      	movs	r5, #0
    7e66:	e6de      	b.n	7c26 <__aeabi_dsub+0x196>
    7e68:	2a1f      	cmp	r2, #31
    7e6a:	dc5a      	bgt.n	7f22 <__aeabi_dsub+0x492>
    7e6c:	4666      	mov	r6, ip
    7e6e:	2220      	movs	r2, #32
    7e70:	1b92      	subs	r2, r2, r6
    7e72:	0006      	movs	r6, r0
    7e74:	4096      	lsls	r6, r2
    7e76:	4691      	mov	r9, r2
    7e78:	46b0      	mov	r8, r6
    7e7a:	4662      	mov	r2, ip
    7e7c:	000e      	movs	r6, r1
    7e7e:	40d6      	lsrs	r6, r2
    7e80:	4642      	mov	r2, r8
    7e82:	4316      	orrs	r6, r2
    7e84:	464a      	mov	r2, r9
    7e86:	4091      	lsls	r1, r2
    7e88:	1e4a      	subs	r2, r1, #1
    7e8a:	4191      	sbcs	r1, r2
    7e8c:	0002      	movs	r2, r0
    7e8e:	4660      	mov	r0, ip
    7e90:	4331      	orrs	r1, r6
    7e92:	40c2      	lsrs	r2, r0
    7e94:	e6e4      	b.n	7c60 <__aeabi_dsub+0x1d0>
    7e96:	003c      	movs	r4, r7
    7e98:	432c      	orrs	r4, r5
    7e9a:	d05a      	beq.n	7f52 <__aeabi_dsub+0x4c2>
    7e9c:	43f4      	mvns	r4, r6
    7e9e:	46a1      	mov	r9, r4
    7ea0:	2c00      	cmp	r4, #0
    7ea2:	d152      	bne.n	7f4a <__aeabi_dsub+0x4ba>
    7ea4:	1b4d      	subs	r5, r1, r5
    7ea6:	42a9      	cmp	r1, r5
    7ea8:	4189      	sbcs	r1, r1
    7eaa:	1bc7      	subs	r7, r0, r7
    7eac:	4249      	negs	r1, r1
    7eae:	1a7f      	subs	r7, r7, r1
    7eb0:	0014      	movs	r4, r2
    7eb2:	469a      	mov	sl, r3
    7eb4:	e675      	b.n	7ba2 <__aeabi_dsub+0x112>
    7eb6:	4a9e      	ldr	r2, [pc, #632]	; (8130 <__aeabi_dsub+0x6a0>)
    7eb8:	4294      	cmp	r4, r2
    7eba:	d000      	beq.n	7ebe <__aeabi_dsub+0x42e>
    7ebc:	e6c7      	b.n	7c4e <__aeabi_dsub+0x1be>
    7ebe:	e613      	b.n	7ae8 <__aeabi_dsub+0x58>
    7ec0:	2200      	movs	r2, #0
    7ec2:	e77f      	b.n	7dc4 <__aeabi_dsub+0x334>
    7ec4:	2000      	movs	r0, #0
    7ec6:	e78f      	b.n	7de8 <__aeabi_dsub+0x358>
    7ec8:	2c00      	cmp	r4, #0
    7eca:	d000      	beq.n	7ece <__aeabi_dsub+0x43e>
    7ecc:	e0c8      	b.n	8060 <__aeabi_dsub+0x5d0>
    7ece:	003b      	movs	r3, r7
    7ed0:	432b      	orrs	r3, r5
    7ed2:	d100      	bne.n	7ed6 <__aeabi_dsub+0x446>
    7ed4:	e10f      	b.n	80f6 <__aeabi_dsub+0x666>
    7ed6:	0003      	movs	r3, r0
    7ed8:	430b      	orrs	r3, r1
    7eda:	d100      	bne.n	7ede <__aeabi_dsub+0x44e>
    7edc:	e604      	b.n	7ae8 <__aeabi_dsub+0x58>
    7ede:	1869      	adds	r1, r5, r1
    7ee0:	42a9      	cmp	r1, r5
    7ee2:	419b      	sbcs	r3, r3
    7ee4:	183f      	adds	r7, r7, r0
    7ee6:	425b      	negs	r3, r3
    7ee8:	19df      	adds	r7, r3, r7
    7eea:	023b      	lsls	r3, r7, #8
    7eec:	d400      	bmi.n	7ef0 <__aeabi_dsub+0x460>
    7eee:	e11a      	b.n	8126 <__aeabi_dsub+0x696>
    7ef0:	4b90      	ldr	r3, [pc, #576]	; (8134 <__aeabi_dsub+0x6a4>)
    7ef2:	000d      	movs	r5, r1
    7ef4:	401f      	ands	r7, r3
    7ef6:	4664      	mov	r4, ip
    7ef8:	e5f6      	b.n	7ae8 <__aeabi_dsub+0x58>
    7efa:	469a      	mov	sl, r3
    7efc:	e689      	b.n	7c12 <__aeabi_dsub+0x182>
    7efe:	003a      	movs	r2, r7
    7f00:	432a      	orrs	r2, r5
    7f02:	2c00      	cmp	r4, #0
    7f04:	d15c      	bne.n	7fc0 <__aeabi_dsub+0x530>
    7f06:	2a00      	cmp	r2, #0
    7f08:	d175      	bne.n	7ff6 <__aeabi_dsub+0x566>
    7f0a:	0002      	movs	r2, r0
    7f0c:	430a      	orrs	r2, r1
    7f0e:	d100      	bne.n	7f12 <__aeabi_dsub+0x482>
    7f10:	e0ca      	b.n	80a8 <__aeabi_dsub+0x618>
    7f12:	0007      	movs	r7, r0
    7f14:	000d      	movs	r5, r1
    7f16:	469a      	mov	sl, r3
    7f18:	e5e6      	b.n	7ae8 <__aeabi_dsub+0x58>
    7f1a:	4664      	mov	r4, ip
    7f1c:	2200      	movs	r2, #0
    7f1e:	2500      	movs	r5, #0
    7f20:	e681      	b.n	7c26 <__aeabi_dsub+0x196>
    7f22:	4662      	mov	r2, ip
    7f24:	0006      	movs	r6, r0
    7f26:	3a20      	subs	r2, #32
    7f28:	40d6      	lsrs	r6, r2
    7f2a:	4662      	mov	r2, ip
    7f2c:	46b0      	mov	r8, r6
    7f2e:	2a20      	cmp	r2, #32
    7f30:	d100      	bne.n	7f34 <__aeabi_dsub+0x4a4>
    7f32:	e0b7      	b.n	80a4 <__aeabi_dsub+0x614>
    7f34:	2240      	movs	r2, #64	; 0x40
    7f36:	4666      	mov	r6, ip
    7f38:	1b92      	subs	r2, r2, r6
    7f3a:	4090      	lsls	r0, r2
    7f3c:	4301      	orrs	r1, r0
    7f3e:	4642      	mov	r2, r8
    7f40:	1e48      	subs	r0, r1, #1
    7f42:	4181      	sbcs	r1, r0
    7f44:	4311      	orrs	r1, r2
    7f46:	2200      	movs	r2, #0
    7f48:	e68a      	b.n	7c60 <__aeabi_dsub+0x1d0>
    7f4a:	4c79      	ldr	r4, [pc, #484]	; (8130 <__aeabi_dsub+0x6a0>)
    7f4c:	42a2      	cmp	r2, r4
    7f4e:	d000      	beq.n	7f52 <__aeabi_dsub+0x4c2>
    7f50:	e761      	b.n	7e16 <__aeabi_dsub+0x386>
    7f52:	0007      	movs	r7, r0
    7f54:	000d      	movs	r5, r1
    7f56:	0014      	movs	r4, r2
    7f58:	469a      	mov	sl, r3
    7f5a:	e5c5      	b.n	7ae8 <__aeabi_dsub+0x58>
    7f5c:	2c00      	cmp	r4, #0
    7f5e:	d141      	bne.n	7fe4 <__aeabi_dsub+0x554>
    7f60:	003c      	movs	r4, r7
    7f62:	432c      	orrs	r4, r5
    7f64:	d078      	beq.n	8058 <__aeabi_dsub+0x5c8>
    7f66:	43f4      	mvns	r4, r6
    7f68:	46a1      	mov	r9, r4
    7f6a:	2c00      	cmp	r4, #0
    7f6c:	d020      	beq.n	7fb0 <__aeabi_dsub+0x520>
    7f6e:	4c70      	ldr	r4, [pc, #448]	; (8130 <__aeabi_dsub+0x6a0>)
    7f70:	42a2      	cmp	r2, r4
    7f72:	d071      	beq.n	8058 <__aeabi_dsub+0x5c8>
    7f74:	464c      	mov	r4, r9
    7f76:	2c38      	cmp	r4, #56	; 0x38
    7f78:	dd00      	ble.n	7f7c <__aeabi_dsub+0x4ec>
    7f7a:	e0b2      	b.n	80e2 <__aeabi_dsub+0x652>
    7f7c:	2c1f      	cmp	r4, #31
    7f7e:	dd00      	ble.n	7f82 <__aeabi_dsub+0x4f2>
    7f80:	e0bc      	b.n	80fc <__aeabi_dsub+0x66c>
    7f82:	2620      	movs	r6, #32
    7f84:	1b34      	subs	r4, r6, r4
    7f86:	46a2      	mov	sl, r4
    7f88:	003c      	movs	r4, r7
    7f8a:	4656      	mov	r6, sl
    7f8c:	40b4      	lsls	r4, r6
    7f8e:	464e      	mov	r6, r9
    7f90:	46a0      	mov	r8, r4
    7f92:	002c      	movs	r4, r5
    7f94:	40f4      	lsrs	r4, r6
    7f96:	46a4      	mov	ip, r4
    7f98:	4644      	mov	r4, r8
    7f9a:	4666      	mov	r6, ip
    7f9c:	4334      	orrs	r4, r6
    7f9e:	46a4      	mov	ip, r4
    7fa0:	4654      	mov	r4, sl
    7fa2:	40a5      	lsls	r5, r4
    7fa4:	4664      	mov	r4, ip
    7fa6:	1e6e      	subs	r6, r5, #1
    7fa8:	41b5      	sbcs	r5, r6
    7faa:	4325      	orrs	r5, r4
    7fac:	464c      	mov	r4, r9
    7fae:	40e7      	lsrs	r7, r4
    7fb0:	186d      	adds	r5, r5, r1
    7fb2:	428d      	cmp	r5, r1
    7fb4:	4189      	sbcs	r1, r1
    7fb6:	183f      	adds	r7, r7, r0
    7fb8:	4249      	negs	r1, r1
    7fba:	19cf      	adds	r7, r1, r7
    7fbc:	0014      	movs	r4, r2
    7fbe:	e656      	b.n	7c6e <__aeabi_dsub+0x1de>
    7fc0:	2a00      	cmp	r2, #0
    7fc2:	d12f      	bne.n	8024 <__aeabi_dsub+0x594>
    7fc4:	0002      	movs	r2, r0
    7fc6:	430a      	orrs	r2, r1
    7fc8:	d100      	bne.n	7fcc <__aeabi_dsub+0x53c>
    7fca:	e084      	b.n	80d6 <__aeabi_dsub+0x646>
    7fcc:	0007      	movs	r7, r0
    7fce:	000d      	movs	r5, r1
    7fd0:	469a      	mov	sl, r3
    7fd2:	4c57      	ldr	r4, [pc, #348]	; (8130 <__aeabi_dsub+0x6a0>)
    7fd4:	e588      	b.n	7ae8 <__aeabi_dsub+0x58>
    7fd6:	433d      	orrs	r5, r7
    7fd8:	1e6f      	subs	r7, r5, #1
    7fda:	41bd      	sbcs	r5, r7
    7fdc:	b2ec      	uxtb	r4, r5
    7fde:	2700      	movs	r7, #0
    7fe0:	1b0d      	subs	r5, r1, r4
    7fe2:	e760      	b.n	7ea6 <__aeabi_dsub+0x416>
    7fe4:	4c52      	ldr	r4, [pc, #328]	; (8130 <__aeabi_dsub+0x6a0>)
    7fe6:	42a2      	cmp	r2, r4
    7fe8:	d036      	beq.n	8058 <__aeabi_dsub+0x5c8>
    7fea:	4274      	negs	r4, r6
    7fec:	2680      	movs	r6, #128	; 0x80
    7fee:	0436      	lsls	r6, r6, #16
    7ff0:	46a1      	mov	r9, r4
    7ff2:	4337      	orrs	r7, r6
    7ff4:	e7be      	b.n	7f74 <__aeabi_dsub+0x4e4>
    7ff6:	0002      	movs	r2, r0
    7ff8:	430a      	orrs	r2, r1
    7ffa:	d100      	bne.n	7ffe <__aeabi_dsub+0x56e>
    7ffc:	e574      	b.n	7ae8 <__aeabi_dsub+0x58>
    7ffe:	1a6a      	subs	r2, r5, r1
    8000:	4690      	mov	r8, r2
    8002:	4545      	cmp	r5, r8
    8004:	41b6      	sbcs	r6, r6
    8006:	1a3a      	subs	r2, r7, r0
    8008:	4276      	negs	r6, r6
    800a:	1b92      	subs	r2, r2, r6
    800c:	4694      	mov	ip, r2
    800e:	0212      	lsls	r2, r2, #8
    8010:	d400      	bmi.n	8014 <__aeabi_dsub+0x584>
    8012:	e5f7      	b.n	7c04 <__aeabi_dsub+0x174>
    8014:	1b4d      	subs	r5, r1, r5
    8016:	42a9      	cmp	r1, r5
    8018:	4189      	sbcs	r1, r1
    801a:	1bc7      	subs	r7, r0, r7
    801c:	4249      	negs	r1, r1
    801e:	1a7f      	subs	r7, r7, r1
    8020:	469a      	mov	sl, r3
    8022:	e561      	b.n	7ae8 <__aeabi_dsub+0x58>
    8024:	0002      	movs	r2, r0
    8026:	430a      	orrs	r2, r1
    8028:	d03a      	beq.n	80a0 <__aeabi_dsub+0x610>
    802a:	08ed      	lsrs	r5, r5, #3
    802c:	077c      	lsls	r4, r7, #29
    802e:	432c      	orrs	r4, r5
    8030:	2580      	movs	r5, #128	; 0x80
    8032:	08fa      	lsrs	r2, r7, #3
    8034:	032d      	lsls	r5, r5, #12
    8036:	422a      	tst	r2, r5
    8038:	d008      	beq.n	804c <__aeabi_dsub+0x5bc>
    803a:	08c7      	lsrs	r7, r0, #3
    803c:	422f      	tst	r7, r5
    803e:	d105      	bne.n	804c <__aeabi_dsub+0x5bc>
    8040:	0745      	lsls	r5, r0, #29
    8042:	002c      	movs	r4, r5
    8044:	003a      	movs	r2, r7
    8046:	469a      	mov	sl, r3
    8048:	08c9      	lsrs	r1, r1, #3
    804a:	430c      	orrs	r4, r1
    804c:	0f67      	lsrs	r7, r4, #29
    804e:	00d2      	lsls	r2, r2, #3
    8050:	00e5      	lsls	r5, r4, #3
    8052:	4317      	orrs	r7, r2
    8054:	4c36      	ldr	r4, [pc, #216]	; (8130 <__aeabi_dsub+0x6a0>)
    8056:	e547      	b.n	7ae8 <__aeabi_dsub+0x58>
    8058:	0007      	movs	r7, r0
    805a:	000d      	movs	r5, r1
    805c:	0014      	movs	r4, r2
    805e:	e543      	b.n	7ae8 <__aeabi_dsub+0x58>
    8060:	003a      	movs	r2, r7
    8062:	432a      	orrs	r2, r5
    8064:	d043      	beq.n	80ee <__aeabi_dsub+0x65e>
    8066:	0002      	movs	r2, r0
    8068:	430a      	orrs	r2, r1
    806a:	d019      	beq.n	80a0 <__aeabi_dsub+0x610>
    806c:	08ed      	lsrs	r5, r5, #3
    806e:	077c      	lsls	r4, r7, #29
    8070:	432c      	orrs	r4, r5
    8072:	2580      	movs	r5, #128	; 0x80
    8074:	08fa      	lsrs	r2, r7, #3
    8076:	032d      	lsls	r5, r5, #12
    8078:	422a      	tst	r2, r5
    807a:	d007      	beq.n	808c <__aeabi_dsub+0x5fc>
    807c:	08c6      	lsrs	r6, r0, #3
    807e:	422e      	tst	r6, r5
    8080:	d104      	bne.n	808c <__aeabi_dsub+0x5fc>
    8082:	0747      	lsls	r7, r0, #29
    8084:	003c      	movs	r4, r7
    8086:	0032      	movs	r2, r6
    8088:	08c9      	lsrs	r1, r1, #3
    808a:	430c      	orrs	r4, r1
    808c:	00d7      	lsls	r7, r2, #3
    808e:	0f62      	lsrs	r2, r4, #29
    8090:	00e5      	lsls	r5, r4, #3
    8092:	4317      	orrs	r7, r2
    8094:	469a      	mov	sl, r3
    8096:	4c26      	ldr	r4, [pc, #152]	; (8130 <__aeabi_dsub+0x6a0>)
    8098:	e526      	b.n	7ae8 <__aeabi_dsub+0x58>
    809a:	2200      	movs	r2, #0
    809c:	2500      	movs	r5, #0
    809e:	e544      	b.n	7b2a <__aeabi_dsub+0x9a>
    80a0:	4c23      	ldr	r4, [pc, #140]	; (8130 <__aeabi_dsub+0x6a0>)
    80a2:	e521      	b.n	7ae8 <__aeabi_dsub+0x58>
    80a4:	2000      	movs	r0, #0
    80a6:	e749      	b.n	7f3c <__aeabi_dsub+0x4ac>
    80a8:	2300      	movs	r3, #0
    80aa:	2500      	movs	r5, #0
    80ac:	e5bb      	b.n	7c26 <__aeabi_dsub+0x196>
    80ae:	464c      	mov	r4, r9
    80b0:	003e      	movs	r6, r7
    80b2:	3c20      	subs	r4, #32
    80b4:	40e6      	lsrs	r6, r4
    80b6:	464c      	mov	r4, r9
    80b8:	46b4      	mov	ip, r6
    80ba:	2c20      	cmp	r4, #32
    80bc:	d031      	beq.n	8122 <__aeabi_dsub+0x692>
    80be:	2440      	movs	r4, #64	; 0x40
    80c0:	464e      	mov	r6, r9
    80c2:	1ba6      	subs	r6, r4, r6
    80c4:	40b7      	lsls	r7, r6
    80c6:	433d      	orrs	r5, r7
    80c8:	1e6c      	subs	r4, r5, #1
    80ca:	41a5      	sbcs	r5, r4
    80cc:	4664      	mov	r4, ip
    80ce:	432c      	orrs	r4, r5
    80d0:	2700      	movs	r7, #0
    80d2:	1b0d      	subs	r5, r1, r4
    80d4:	e6e7      	b.n	7ea6 <__aeabi_dsub+0x416>
    80d6:	2280      	movs	r2, #128	; 0x80
    80d8:	2300      	movs	r3, #0
    80da:	0312      	lsls	r2, r2, #12
    80dc:	4c14      	ldr	r4, [pc, #80]	; (8130 <__aeabi_dsub+0x6a0>)
    80de:	2500      	movs	r5, #0
    80e0:	e5a1      	b.n	7c26 <__aeabi_dsub+0x196>
    80e2:	433d      	orrs	r5, r7
    80e4:	1e6f      	subs	r7, r5, #1
    80e6:	41bd      	sbcs	r5, r7
    80e8:	2700      	movs	r7, #0
    80ea:	b2ed      	uxtb	r5, r5
    80ec:	e760      	b.n	7fb0 <__aeabi_dsub+0x520>
    80ee:	0007      	movs	r7, r0
    80f0:	000d      	movs	r5, r1
    80f2:	4c0f      	ldr	r4, [pc, #60]	; (8130 <__aeabi_dsub+0x6a0>)
    80f4:	e4f8      	b.n	7ae8 <__aeabi_dsub+0x58>
    80f6:	0007      	movs	r7, r0
    80f8:	000d      	movs	r5, r1
    80fa:	e4f5      	b.n	7ae8 <__aeabi_dsub+0x58>
    80fc:	464e      	mov	r6, r9
    80fe:	003c      	movs	r4, r7
    8100:	3e20      	subs	r6, #32
    8102:	40f4      	lsrs	r4, r6
    8104:	46a0      	mov	r8, r4
    8106:	464c      	mov	r4, r9
    8108:	2c20      	cmp	r4, #32
    810a:	d00e      	beq.n	812a <__aeabi_dsub+0x69a>
    810c:	2440      	movs	r4, #64	; 0x40
    810e:	464e      	mov	r6, r9
    8110:	1ba4      	subs	r4, r4, r6
    8112:	40a7      	lsls	r7, r4
    8114:	433d      	orrs	r5, r7
    8116:	1e6f      	subs	r7, r5, #1
    8118:	41bd      	sbcs	r5, r7
    811a:	4644      	mov	r4, r8
    811c:	2700      	movs	r7, #0
    811e:	4325      	orrs	r5, r4
    8120:	e746      	b.n	7fb0 <__aeabi_dsub+0x520>
    8122:	2700      	movs	r7, #0
    8124:	e7cf      	b.n	80c6 <__aeabi_dsub+0x636>
    8126:	000d      	movs	r5, r1
    8128:	e573      	b.n	7c12 <__aeabi_dsub+0x182>
    812a:	2700      	movs	r7, #0
    812c:	e7f2      	b.n	8114 <__aeabi_dsub+0x684>
    812e:	46c0      	nop			; (mov r8, r8)
    8130:	000007ff 	.word	0x000007ff
    8134:	ff7fffff 	.word	0xff7fffff

00008138 <__aeabi_d2iz>:
    8138:	030b      	lsls	r3, r1, #12
    813a:	b530      	push	{r4, r5, lr}
    813c:	4d13      	ldr	r5, [pc, #76]	; (818c <__aeabi_d2iz+0x54>)
    813e:	0b1a      	lsrs	r2, r3, #12
    8140:	004b      	lsls	r3, r1, #1
    8142:	0d5b      	lsrs	r3, r3, #21
    8144:	0fc9      	lsrs	r1, r1, #31
    8146:	2400      	movs	r4, #0
    8148:	42ab      	cmp	r3, r5
    814a:	dd11      	ble.n	8170 <__aeabi_d2iz+0x38>
    814c:	4c10      	ldr	r4, [pc, #64]	; (8190 <__aeabi_d2iz+0x58>)
    814e:	42a3      	cmp	r3, r4
    8150:	dc10      	bgt.n	8174 <__aeabi_d2iz+0x3c>
    8152:	2480      	movs	r4, #128	; 0x80
    8154:	0364      	lsls	r4, r4, #13
    8156:	4322      	orrs	r2, r4
    8158:	4c0e      	ldr	r4, [pc, #56]	; (8194 <__aeabi_d2iz+0x5c>)
    815a:	1ae4      	subs	r4, r4, r3
    815c:	2c1f      	cmp	r4, #31
    815e:	dd0c      	ble.n	817a <__aeabi_d2iz+0x42>
    8160:	480d      	ldr	r0, [pc, #52]	; (8198 <__aeabi_d2iz+0x60>)
    8162:	1ac3      	subs	r3, r0, r3
    8164:	40da      	lsrs	r2, r3
    8166:	0013      	movs	r3, r2
    8168:	425c      	negs	r4, r3
    816a:	2900      	cmp	r1, #0
    816c:	d100      	bne.n	8170 <__aeabi_d2iz+0x38>
    816e:	001c      	movs	r4, r3
    8170:	0020      	movs	r0, r4
    8172:	bd30      	pop	{r4, r5, pc}
    8174:	4b09      	ldr	r3, [pc, #36]	; (819c <__aeabi_d2iz+0x64>)
    8176:	18cc      	adds	r4, r1, r3
    8178:	e7fa      	b.n	8170 <__aeabi_d2iz+0x38>
    817a:	40e0      	lsrs	r0, r4
    817c:	4c08      	ldr	r4, [pc, #32]	; (81a0 <__aeabi_d2iz+0x68>)
    817e:	46a4      	mov	ip, r4
    8180:	4463      	add	r3, ip
    8182:	409a      	lsls	r2, r3
    8184:	0013      	movs	r3, r2
    8186:	4303      	orrs	r3, r0
    8188:	e7ee      	b.n	8168 <__aeabi_d2iz+0x30>
    818a:	46c0      	nop			; (mov r8, r8)
    818c:	000003fe 	.word	0x000003fe
    8190:	0000041d 	.word	0x0000041d
    8194:	00000433 	.word	0x00000433
    8198:	00000413 	.word	0x00000413
    819c:	7fffffff 	.word	0x7fffffff
    81a0:	fffffbed 	.word	0xfffffbed

000081a4 <__aeabi_ui2d>:
    81a4:	b570      	push	{r4, r5, r6, lr}
    81a6:	1e05      	subs	r5, r0, #0
    81a8:	d028      	beq.n	81fc <__aeabi_ui2d+0x58>
    81aa:	f000 f833 	bl	8214 <__clzsi2>
    81ae:	4b15      	ldr	r3, [pc, #84]	; (8204 <__aeabi_ui2d+0x60>)
    81b0:	4a15      	ldr	r2, [pc, #84]	; (8208 <__aeabi_ui2d+0x64>)
    81b2:	1a1b      	subs	r3, r3, r0
    81b4:	1ad2      	subs	r2, r2, r3
    81b6:	2a1f      	cmp	r2, #31
    81b8:	dd16      	ble.n	81e8 <__aeabi_ui2d+0x44>
    81ba:	002c      	movs	r4, r5
    81bc:	4a13      	ldr	r2, [pc, #76]	; (820c <__aeabi_ui2d+0x68>)
    81be:	2500      	movs	r5, #0
    81c0:	1ad2      	subs	r2, r2, r3
    81c2:	4094      	lsls	r4, r2
    81c4:	055a      	lsls	r2, r3, #21
    81c6:	0324      	lsls	r4, r4, #12
    81c8:	0b24      	lsrs	r4, r4, #12
    81ca:	0d52      	lsrs	r2, r2, #21
    81cc:	2100      	movs	r1, #0
    81ce:	0324      	lsls	r4, r4, #12
    81d0:	0d0b      	lsrs	r3, r1, #20
    81d2:	0b24      	lsrs	r4, r4, #12
    81d4:	051b      	lsls	r3, r3, #20
    81d6:	4323      	orrs	r3, r4
    81d8:	4c0d      	ldr	r4, [pc, #52]	; (8210 <__aeabi_ui2d+0x6c>)
    81da:	0512      	lsls	r2, r2, #20
    81dc:	4023      	ands	r3, r4
    81de:	4313      	orrs	r3, r2
    81e0:	005b      	lsls	r3, r3, #1
    81e2:	0028      	movs	r0, r5
    81e4:	0859      	lsrs	r1, r3, #1
    81e6:	bd70      	pop	{r4, r5, r6, pc}
    81e8:	210b      	movs	r1, #11
    81ea:	002c      	movs	r4, r5
    81ec:	1a08      	subs	r0, r1, r0
    81ee:	40c4      	lsrs	r4, r0
    81f0:	4095      	lsls	r5, r2
    81f2:	0324      	lsls	r4, r4, #12
    81f4:	055a      	lsls	r2, r3, #21
    81f6:	0b24      	lsrs	r4, r4, #12
    81f8:	0d52      	lsrs	r2, r2, #21
    81fa:	e7e7      	b.n	81cc <__aeabi_ui2d+0x28>
    81fc:	2200      	movs	r2, #0
    81fe:	2400      	movs	r4, #0
    8200:	e7e4      	b.n	81cc <__aeabi_ui2d+0x28>
    8202:	46c0      	nop			; (mov r8, r8)
    8204:	0000041e 	.word	0x0000041e
    8208:	00000433 	.word	0x00000433
    820c:	00000413 	.word	0x00000413
    8210:	800fffff 	.word	0x800fffff

00008214 <__clzsi2>:
    8214:	211c      	movs	r1, #28
    8216:	2301      	movs	r3, #1
    8218:	041b      	lsls	r3, r3, #16
    821a:	4298      	cmp	r0, r3
    821c:	d301      	bcc.n	8222 <__clzsi2+0xe>
    821e:	0c00      	lsrs	r0, r0, #16
    8220:	3910      	subs	r1, #16
    8222:	0a1b      	lsrs	r3, r3, #8
    8224:	4298      	cmp	r0, r3
    8226:	d301      	bcc.n	822c <__clzsi2+0x18>
    8228:	0a00      	lsrs	r0, r0, #8
    822a:	3908      	subs	r1, #8
    822c:	091b      	lsrs	r3, r3, #4
    822e:	4298      	cmp	r0, r3
    8230:	d301      	bcc.n	8236 <__clzsi2+0x22>
    8232:	0900      	lsrs	r0, r0, #4
    8234:	3904      	subs	r1, #4
    8236:	a202      	add	r2, pc, #8	; (adr r2, 8240 <__clzsi2+0x2c>)
    8238:	5c10      	ldrb	r0, [r2, r0]
    823a:	1840      	adds	r0, r0, r1
    823c:	4770      	bx	lr
    823e:	46c0      	nop			; (mov r8, r8)
    8240:	02020304 	.word	0x02020304
    8244:	01010101 	.word	0x01010101
	...

00008250 <__clzdi2>:
    8250:	b510      	push	{r4, lr}
    8252:	2900      	cmp	r1, #0
    8254:	d103      	bne.n	825e <__clzdi2+0xe>
    8256:	f7ff ffdd 	bl	8214 <__clzsi2>
    825a:	3020      	adds	r0, #32
    825c:	e002      	b.n	8264 <__clzdi2+0x14>
    825e:	1c08      	adds	r0, r1, #0
    8260:	f7ff ffd8 	bl	8214 <__clzsi2>
    8264:	bd10      	pop	{r4, pc}
    8266:	46c0      	nop			; (mov r8, r8)

00008268 <__libc_init_array>:
    8268:	4b0e      	ldr	r3, [pc, #56]	; (82a4 <__libc_init_array+0x3c>)
    826a:	b570      	push	{r4, r5, r6, lr}
    826c:	2500      	movs	r5, #0
    826e:	001e      	movs	r6, r3
    8270:	4c0d      	ldr	r4, [pc, #52]	; (82a8 <__libc_init_array+0x40>)
    8272:	1ae4      	subs	r4, r4, r3
    8274:	10a4      	asrs	r4, r4, #2
    8276:	42a5      	cmp	r5, r4
    8278:	d004      	beq.n	8284 <__libc_init_array+0x1c>
    827a:	00ab      	lsls	r3, r5, #2
    827c:	58f3      	ldr	r3, [r6, r3]
    827e:	4798      	blx	r3
    8280:	3501      	adds	r5, #1
    8282:	e7f8      	b.n	8276 <__libc_init_array+0xe>
    8284:	f001 fd3e 	bl	9d04 <_init>
    8288:	4b08      	ldr	r3, [pc, #32]	; (82ac <__libc_init_array+0x44>)
    828a:	2500      	movs	r5, #0
    828c:	001e      	movs	r6, r3
    828e:	4c08      	ldr	r4, [pc, #32]	; (82b0 <__libc_init_array+0x48>)
    8290:	1ae4      	subs	r4, r4, r3
    8292:	10a4      	asrs	r4, r4, #2
    8294:	42a5      	cmp	r5, r4
    8296:	d004      	beq.n	82a2 <__libc_init_array+0x3a>
    8298:	00ab      	lsls	r3, r5, #2
    829a:	58f3      	ldr	r3, [r6, r3]
    829c:	4798      	blx	r3
    829e:	3501      	adds	r5, #1
    82a0:	e7f8      	b.n	8294 <__libc_init_array+0x2c>
    82a2:	bd70      	pop	{r4, r5, r6, pc}
    82a4:	00009d10 	.word	0x00009d10
    82a8:	00009d10 	.word	0x00009d10
    82ac:	00009d10 	.word	0x00009d10
    82b0:	00009d14 	.word	0x00009d14

000082b4 <memcpy>:
    82b4:	2300      	movs	r3, #0
    82b6:	b510      	push	{r4, lr}
    82b8:	429a      	cmp	r2, r3
    82ba:	d003      	beq.n	82c4 <memcpy+0x10>
    82bc:	5ccc      	ldrb	r4, [r1, r3]
    82be:	54c4      	strb	r4, [r0, r3]
    82c0:	3301      	adds	r3, #1
    82c2:	e7f9      	b.n	82b8 <memcpy+0x4>
    82c4:	bd10      	pop	{r4, pc}
	...

000082c8 <siprintf>:
    82c8:	b40e      	push	{r1, r2, r3}
    82ca:	b510      	push	{r4, lr}
    82cc:	b09d      	sub	sp, #116	; 0x74
    82ce:	a902      	add	r1, sp, #8
    82d0:	9002      	str	r0, [sp, #8]
    82d2:	6108      	str	r0, [r1, #16]
    82d4:	480b      	ldr	r0, [pc, #44]	; (8304 <siprintf+0x3c>)
    82d6:	2482      	movs	r4, #130	; 0x82
    82d8:	6088      	str	r0, [r1, #8]
    82da:	6148      	str	r0, [r1, #20]
    82dc:	2001      	movs	r0, #1
    82de:	4240      	negs	r0, r0
    82e0:	ab1f      	add	r3, sp, #124	; 0x7c
    82e2:	81c8      	strh	r0, [r1, #14]
    82e4:	4808      	ldr	r0, [pc, #32]	; (8308 <siprintf+0x40>)
    82e6:	cb04      	ldmia	r3!, {r2}
    82e8:	00a4      	lsls	r4, r4, #2
    82ea:	6800      	ldr	r0, [r0, #0]
    82ec:	9301      	str	r3, [sp, #4]
    82ee:	818c      	strh	r4, [r1, #12]
    82f0:	f000 f8b2 	bl	8458 <_svfiprintf_r>
    82f4:	2300      	movs	r3, #0
    82f6:	9a02      	ldr	r2, [sp, #8]
    82f8:	7013      	strb	r3, [r2, #0]
    82fa:	b01d      	add	sp, #116	; 0x74
    82fc:	bc10      	pop	{r4}
    82fe:	bc08      	pop	{r3}
    8300:	b003      	add	sp, #12
    8302:	4718      	bx	r3
    8304:	7fffffff 	.word	0x7fffffff
    8308:	200000f4 	.word	0x200000f4

0000830c <siscanf>:
    830c:	b40e      	push	{r1, r2, r3}
    830e:	2381      	movs	r3, #129	; 0x81
    8310:	b570      	push	{r4, r5, r6, lr}
    8312:	b09d      	sub	sp, #116	; 0x74
    8314:	ac02      	add	r4, sp, #8
    8316:	ad21      	add	r5, sp, #132	; 0x84
    8318:	009b      	lsls	r3, r3, #2
    831a:	cd40      	ldmia	r5!, {r6}
    831c:	81a3      	strh	r3, [r4, #12]
    831e:	9002      	str	r0, [sp, #8]
    8320:	9006      	str	r0, [sp, #24]
    8322:	f000 f81d 	bl	8360 <strlen>
    8326:	4b0b      	ldr	r3, [pc, #44]	; (8354 <siscanf+0x48>)
    8328:	6060      	str	r0, [r4, #4]
    832a:	6263      	str	r3, [r4, #36]	; 0x24
    832c:	2300      	movs	r3, #0
    832e:	6160      	str	r0, [r4, #20]
    8330:	4809      	ldr	r0, [pc, #36]	; (8358 <siscanf+0x4c>)
    8332:	6363      	str	r3, [r4, #52]	; 0x34
    8334:	64a3      	str	r3, [r4, #72]	; 0x48
    8336:	3b01      	subs	r3, #1
    8338:	81e3      	strh	r3, [r4, #14]
    833a:	0032      	movs	r2, r6
    833c:	002b      	movs	r3, r5
    833e:	0021      	movs	r1, r4
    8340:	6800      	ldr	r0, [r0, #0]
    8342:	9501      	str	r5, [sp, #4]
    8344:	f000 f9e2 	bl	870c <__ssvfiscanf_r>
    8348:	b01d      	add	sp, #116	; 0x74
    834a:	bc70      	pop	{r4, r5, r6}
    834c:	bc08      	pop	{r3}
    834e:	b003      	add	sp, #12
    8350:	4718      	bx	r3
    8352:	46c0      	nop			; (mov r8, r8)
    8354:	0000835d 	.word	0x0000835d
    8358:	200000f4 	.word	0x200000f4

0000835c <__seofread>:
    835c:	2000      	movs	r0, #0
    835e:	4770      	bx	lr

00008360 <strlen>:
    8360:	2300      	movs	r3, #0
    8362:	5cc2      	ldrb	r2, [r0, r3]
    8364:	3301      	adds	r3, #1
    8366:	2a00      	cmp	r2, #0
    8368:	d1fb      	bne.n	8362 <strlen+0x2>
    836a:	1e58      	subs	r0, r3, #1
    836c:	4770      	bx	lr

0000836e <strncmp>:
    836e:	2300      	movs	r3, #0
    8370:	b530      	push	{r4, r5, lr}
    8372:	429a      	cmp	r2, r3
    8374:	d00b      	beq.n	838e <strncmp+0x20>
    8376:	3a01      	subs	r2, #1
    8378:	5cc4      	ldrb	r4, [r0, r3]
    837a:	5ccd      	ldrb	r5, [r1, r3]
    837c:	42ac      	cmp	r4, r5
    837e:	d105      	bne.n	838c <strncmp+0x1e>
    8380:	429a      	cmp	r2, r3
    8382:	d002      	beq.n	838a <strncmp+0x1c>
    8384:	3301      	adds	r3, #1
    8386:	2c00      	cmp	r4, #0
    8388:	d1f6      	bne.n	8378 <strncmp+0xa>
    838a:	0025      	movs	r5, r4
    838c:	1b63      	subs	r3, r4, r5
    838e:	0018      	movs	r0, r3
    8390:	bd30      	pop	{r4, r5, pc}
	...

00008394 <__ssputs_r>:
    8394:	b5f0      	push	{r4, r5, r6, r7, lr}
    8396:	688e      	ldr	r6, [r1, #8]
    8398:	b085      	sub	sp, #20
    839a:	0007      	movs	r7, r0
    839c:	000c      	movs	r4, r1
    839e:	9203      	str	r2, [sp, #12]
    83a0:	9301      	str	r3, [sp, #4]
    83a2:	429e      	cmp	r6, r3
    83a4:	d843      	bhi.n	842e <__ssputs_r+0x9a>
    83a6:	2390      	movs	r3, #144	; 0x90
    83a8:	898a      	ldrh	r2, [r1, #12]
    83aa:	00db      	lsls	r3, r3, #3
    83ac:	421a      	tst	r2, r3
    83ae:	d03e      	beq.n	842e <__ssputs_r+0x9a>
    83b0:	2503      	movs	r5, #3
    83b2:	6909      	ldr	r1, [r1, #16]
    83b4:	6823      	ldr	r3, [r4, #0]
    83b6:	9801      	ldr	r0, [sp, #4]
    83b8:	1a5b      	subs	r3, r3, r1
    83ba:	9302      	str	r3, [sp, #8]
    83bc:	6963      	ldr	r3, [r4, #20]
    83be:	435d      	muls	r5, r3
    83c0:	0feb      	lsrs	r3, r5, #31
    83c2:	195d      	adds	r5, r3, r5
    83c4:	9b02      	ldr	r3, [sp, #8]
    83c6:	106d      	asrs	r5, r5, #1
    83c8:	3301      	adds	r3, #1
    83ca:	181b      	adds	r3, r3, r0
    83cc:	42ab      	cmp	r3, r5
    83ce:	d900      	bls.n	83d2 <__ssputs_r+0x3e>
    83d0:	001d      	movs	r5, r3
    83d2:	0553      	lsls	r3, r2, #21
    83d4:	d510      	bpl.n	83f8 <__ssputs_r+0x64>
    83d6:	0029      	movs	r1, r5
    83d8:	0038      	movs	r0, r7
    83da:	f000 fff3 	bl	93c4 <_malloc_r>
    83de:	1e06      	subs	r6, r0, #0
    83e0:	d014      	beq.n	840c <__ssputs_r+0x78>
    83e2:	9a02      	ldr	r2, [sp, #8]
    83e4:	6921      	ldr	r1, [r4, #16]
    83e6:	f7ff ff65 	bl	82b4 <memcpy>
    83ea:	89a2      	ldrh	r2, [r4, #12]
    83ec:	4b19      	ldr	r3, [pc, #100]	; (8454 <__ssputs_r+0xc0>)
    83ee:	4013      	ands	r3, r2
    83f0:	2280      	movs	r2, #128	; 0x80
    83f2:	4313      	orrs	r3, r2
    83f4:	81a3      	strh	r3, [r4, #12]
    83f6:	e012      	b.n	841e <__ssputs_r+0x8a>
    83f8:	002a      	movs	r2, r5
    83fa:	0038      	movs	r0, r7
    83fc:	f001 f838 	bl	9470 <_realloc_r>
    8400:	1e06      	subs	r6, r0, #0
    8402:	d10c      	bne.n	841e <__ssputs_r+0x8a>
    8404:	6921      	ldr	r1, [r4, #16]
    8406:	0038      	movs	r0, r7
    8408:	f000 ff96 	bl	9338 <_free_r>
    840c:	230c      	movs	r3, #12
    840e:	2240      	movs	r2, #64	; 0x40
    8410:	2001      	movs	r0, #1
    8412:	603b      	str	r3, [r7, #0]
    8414:	89a3      	ldrh	r3, [r4, #12]
    8416:	4240      	negs	r0, r0
    8418:	4313      	orrs	r3, r2
    841a:	81a3      	strh	r3, [r4, #12]
    841c:	e017      	b.n	844e <__ssputs_r+0xba>
    841e:	9b02      	ldr	r3, [sp, #8]
    8420:	6126      	str	r6, [r4, #16]
    8422:	18f6      	adds	r6, r6, r3
    8424:	6026      	str	r6, [r4, #0]
    8426:	6165      	str	r5, [r4, #20]
    8428:	9e01      	ldr	r6, [sp, #4]
    842a:	1aed      	subs	r5, r5, r3
    842c:	60a5      	str	r5, [r4, #8]
    842e:	9b01      	ldr	r3, [sp, #4]
    8430:	42b3      	cmp	r3, r6
    8432:	d200      	bcs.n	8436 <__ssputs_r+0xa2>
    8434:	001e      	movs	r6, r3
    8436:	0032      	movs	r2, r6
    8438:	9903      	ldr	r1, [sp, #12]
    843a:	6820      	ldr	r0, [r4, #0]
    843c:	f000 ff67 	bl	930e <memmove>
    8440:	2000      	movs	r0, #0
    8442:	68a3      	ldr	r3, [r4, #8]
    8444:	1b9b      	subs	r3, r3, r6
    8446:	60a3      	str	r3, [r4, #8]
    8448:	6823      	ldr	r3, [r4, #0]
    844a:	199e      	adds	r6, r3, r6
    844c:	6026      	str	r6, [r4, #0]
    844e:	b005      	add	sp, #20
    8450:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8452:	46c0      	nop			; (mov r8, r8)
    8454:	fffffb7f 	.word	0xfffffb7f

00008458 <_svfiprintf_r>:
    8458:	b5f0      	push	{r4, r5, r6, r7, lr}
    845a:	b09f      	sub	sp, #124	; 0x7c
    845c:	9002      	str	r0, [sp, #8]
    845e:	9305      	str	r3, [sp, #20]
    8460:	898b      	ldrh	r3, [r1, #12]
    8462:	000f      	movs	r7, r1
    8464:	0016      	movs	r6, r2
    8466:	061b      	lsls	r3, r3, #24
    8468:	d510      	bpl.n	848c <_svfiprintf_r+0x34>
    846a:	690b      	ldr	r3, [r1, #16]
    846c:	2b00      	cmp	r3, #0
    846e:	d10d      	bne.n	848c <_svfiprintf_r+0x34>
    8470:	2140      	movs	r1, #64	; 0x40
    8472:	f000 ffa7 	bl	93c4 <_malloc_r>
    8476:	6038      	str	r0, [r7, #0]
    8478:	6138      	str	r0, [r7, #16]
    847a:	2800      	cmp	r0, #0
    847c:	d104      	bne.n	8488 <_svfiprintf_r+0x30>
    847e:	230c      	movs	r3, #12
    8480:	9a02      	ldr	r2, [sp, #8]
    8482:	3801      	subs	r0, #1
    8484:	6013      	str	r3, [r2, #0]
    8486:	e0d8      	b.n	863a <_svfiprintf_r+0x1e2>
    8488:	2340      	movs	r3, #64	; 0x40
    848a:	617b      	str	r3, [r7, #20]
    848c:	2300      	movs	r3, #0
    848e:	ad06      	add	r5, sp, #24
    8490:	616b      	str	r3, [r5, #20]
    8492:	3320      	adds	r3, #32
    8494:	766b      	strb	r3, [r5, #25]
    8496:	3310      	adds	r3, #16
    8498:	76ab      	strb	r3, [r5, #26]
    849a:	0034      	movs	r4, r6
    849c:	7823      	ldrb	r3, [r4, #0]
    849e:	2b00      	cmp	r3, #0
    84a0:	d103      	bne.n	84aa <_svfiprintf_r+0x52>
    84a2:	1ba3      	subs	r3, r4, r6
    84a4:	9304      	str	r3, [sp, #16]
    84a6:	d012      	beq.n	84ce <_svfiprintf_r+0x76>
    84a8:	e003      	b.n	84b2 <_svfiprintf_r+0x5a>
    84aa:	2b25      	cmp	r3, #37	; 0x25
    84ac:	d0f9      	beq.n	84a2 <_svfiprintf_r+0x4a>
    84ae:	3401      	adds	r4, #1
    84b0:	e7f4      	b.n	849c <_svfiprintf_r+0x44>
    84b2:	1ba3      	subs	r3, r4, r6
    84b4:	0032      	movs	r2, r6
    84b6:	0039      	movs	r1, r7
    84b8:	9802      	ldr	r0, [sp, #8]
    84ba:	f7ff ff6b 	bl	8394 <__ssputs_r>
    84be:	1c43      	adds	r3, r0, #1
    84c0:	d100      	bne.n	84c4 <_svfiprintf_r+0x6c>
    84c2:	e0b4      	b.n	862e <_svfiprintf_r+0x1d6>
    84c4:	696a      	ldr	r2, [r5, #20]
    84c6:	9b04      	ldr	r3, [sp, #16]
    84c8:	4694      	mov	ip, r2
    84ca:	4463      	add	r3, ip
    84cc:	616b      	str	r3, [r5, #20]
    84ce:	7823      	ldrb	r3, [r4, #0]
    84d0:	2b00      	cmp	r3, #0
    84d2:	d100      	bne.n	84d6 <_svfiprintf_r+0x7e>
    84d4:	e0ab      	b.n	862e <_svfiprintf_r+0x1d6>
    84d6:	2201      	movs	r2, #1
    84d8:	2300      	movs	r3, #0
    84da:	4252      	negs	r2, r2
    84dc:	606a      	str	r2, [r5, #4]
    84de:	a902      	add	r1, sp, #8
    84e0:	3254      	adds	r2, #84	; 0x54
    84e2:	1852      	adds	r2, r2, r1
    84e4:	3401      	adds	r4, #1
    84e6:	602b      	str	r3, [r5, #0]
    84e8:	60eb      	str	r3, [r5, #12]
    84ea:	60ab      	str	r3, [r5, #8]
    84ec:	7013      	strb	r3, [r2, #0]
    84ee:	65ab      	str	r3, [r5, #88]	; 0x58
    84f0:	4e53      	ldr	r6, [pc, #332]	; (8640 <_svfiprintf_r+0x1e8>)
    84f2:	7821      	ldrb	r1, [r4, #0]
    84f4:	2205      	movs	r2, #5
    84f6:	0030      	movs	r0, r6
    84f8:	f000 fefe 	bl	92f8 <memchr>
    84fc:	2800      	cmp	r0, #0
    84fe:	d007      	beq.n	8510 <_svfiprintf_r+0xb8>
    8500:	2301      	movs	r3, #1
    8502:	1b80      	subs	r0, r0, r6
    8504:	4083      	lsls	r3, r0
    8506:	682a      	ldr	r2, [r5, #0]
    8508:	3401      	adds	r4, #1
    850a:	4313      	orrs	r3, r2
    850c:	602b      	str	r3, [r5, #0]
    850e:	e7ef      	b.n	84f0 <_svfiprintf_r+0x98>
    8510:	682b      	ldr	r3, [r5, #0]
    8512:	06da      	lsls	r2, r3, #27
    8514:	d504      	bpl.n	8520 <_svfiprintf_r+0xc8>
    8516:	2253      	movs	r2, #83	; 0x53
    8518:	2120      	movs	r1, #32
    851a:	a802      	add	r0, sp, #8
    851c:	1812      	adds	r2, r2, r0
    851e:	7011      	strb	r1, [r2, #0]
    8520:	071a      	lsls	r2, r3, #28
    8522:	d504      	bpl.n	852e <_svfiprintf_r+0xd6>
    8524:	2253      	movs	r2, #83	; 0x53
    8526:	212b      	movs	r1, #43	; 0x2b
    8528:	a802      	add	r0, sp, #8
    852a:	1812      	adds	r2, r2, r0
    852c:	7011      	strb	r1, [r2, #0]
    852e:	7822      	ldrb	r2, [r4, #0]
    8530:	2a2a      	cmp	r2, #42	; 0x2a
    8532:	d003      	beq.n	853c <_svfiprintf_r+0xe4>
    8534:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8536:	2000      	movs	r0, #0
    8538:	210a      	movs	r1, #10
    853a:	e00e      	b.n	855a <_svfiprintf_r+0x102>
    853c:	9a05      	ldr	r2, [sp, #20]
    853e:	1d11      	adds	r1, r2, #4
    8540:	6812      	ldr	r2, [r2, #0]
    8542:	9105      	str	r1, [sp, #20]
    8544:	2a00      	cmp	r2, #0
    8546:	db01      	blt.n	854c <_svfiprintf_r+0xf4>
    8548:	9209      	str	r2, [sp, #36]	; 0x24
    854a:	e004      	b.n	8556 <_svfiprintf_r+0xfe>
    854c:	4252      	negs	r2, r2
    854e:	60ea      	str	r2, [r5, #12]
    8550:	2202      	movs	r2, #2
    8552:	4313      	orrs	r3, r2
    8554:	602b      	str	r3, [r5, #0]
    8556:	3401      	adds	r4, #1
    8558:	e00b      	b.n	8572 <_svfiprintf_r+0x11a>
    855a:	7822      	ldrb	r2, [r4, #0]
    855c:	3a30      	subs	r2, #48	; 0x30
    855e:	2a09      	cmp	r2, #9
    8560:	d804      	bhi.n	856c <_svfiprintf_r+0x114>
    8562:	434b      	muls	r3, r1
    8564:	3401      	adds	r4, #1
    8566:	189b      	adds	r3, r3, r2
    8568:	2001      	movs	r0, #1
    856a:	e7f6      	b.n	855a <_svfiprintf_r+0x102>
    856c:	2800      	cmp	r0, #0
    856e:	d000      	beq.n	8572 <_svfiprintf_r+0x11a>
    8570:	9309      	str	r3, [sp, #36]	; 0x24
    8572:	7823      	ldrb	r3, [r4, #0]
    8574:	2b2e      	cmp	r3, #46	; 0x2e
    8576:	d11e      	bne.n	85b6 <_svfiprintf_r+0x15e>
    8578:	7863      	ldrb	r3, [r4, #1]
    857a:	2b2a      	cmp	r3, #42	; 0x2a
    857c:	d10a      	bne.n	8594 <_svfiprintf_r+0x13c>
    857e:	9b05      	ldr	r3, [sp, #20]
    8580:	3402      	adds	r4, #2
    8582:	1d1a      	adds	r2, r3, #4
    8584:	681b      	ldr	r3, [r3, #0]
    8586:	9205      	str	r2, [sp, #20]
    8588:	2b00      	cmp	r3, #0
    858a:	da01      	bge.n	8590 <_svfiprintf_r+0x138>
    858c:	2301      	movs	r3, #1
    858e:	425b      	negs	r3, r3
    8590:	9307      	str	r3, [sp, #28]
    8592:	e010      	b.n	85b6 <_svfiprintf_r+0x15e>
    8594:	2300      	movs	r3, #0
    8596:	200a      	movs	r0, #10
    8598:	001a      	movs	r2, r3
    859a:	3401      	adds	r4, #1
    859c:	606b      	str	r3, [r5, #4]
    859e:	7821      	ldrb	r1, [r4, #0]
    85a0:	3930      	subs	r1, #48	; 0x30
    85a2:	2909      	cmp	r1, #9
    85a4:	d804      	bhi.n	85b0 <_svfiprintf_r+0x158>
    85a6:	4342      	muls	r2, r0
    85a8:	3401      	adds	r4, #1
    85aa:	1852      	adds	r2, r2, r1
    85ac:	2301      	movs	r3, #1
    85ae:	e7f6      	b.n	859e <_svfiprintf_r+0x146>
    85b0:	2b00      	cmp	r3, #0
    85b2:	d000      	beq.n	85b6 <_svfiprintf_r+0x15e>
    85b4:	9207      	str	r2, [sp, #28]
    85b6:	4e23      	ldr	r6, [pc, #140]	; (8644 <_svfiprintf_r+0x1ec>)
    85b8:	7821      	ldrb	r1, [r4, #0]
    85ba:	2203      	movs	r2, #3
    85bc:	0030      	movs	r0, r6
    85be:	f000 fe9b 	bl	92f8 <memchr>
    85c2:	2800      	cmp	r0, #0
    85c4:	d006      	beq.n	85d4 <_svfiprintf_r+0x17c>
    85c6:	2340      	movs	r3, #64	; 0x40
    85c8:	1b80      	subs	r0, r0, r6
    85ca:	4083      	lsls	r3, r0
    85cc:	682a      	ldr	r2, [r5, #0]
    85ce:	3401      	adds	r4, #1
    85d0:	4313      	orrs	r3, r2
    85d2:	602b      	str	r3, [r5, #0]
    85d4:	7821      	ldrb	r1, [r4, #0]
    85d6:	2206      	movs	r2, #6
    85d8:	481b      	ldr	r0, [pc, #108]	; (8648 <_svfiprintf_r+0x1f0>)
    85da:	1c66      	adds	r6, r4, #1
    85dc:	7629      	strb	r1, [r5, #24]
    85de:	f000 fe8b 	bl	92f8 <memchr>
    85e2:	2800      	cmp	r0, #0
    85e4:	d012      	beq.n	860c <_svfiprintf_r+0x1b4>
    85e6:	4b19      	ldr	r3, [pc, #100]	; (864c <_svfiprintf_r+0x1f4>)
    85e8:	2b00      	cmp	r3, #0
    85ea:	d106      	bne.n	85fa <_svfiprintf_r+0x1a2>
    85ec:	2207      	movs	r2, #7
    85ee:	9b05      	ldr	r3, [sp, #20]
    85f0:	3307      	adds	r3, #7
    85f2:	4393      	bics	r3, r2
    85f4:	3308      	adds	r3, #8
    85f6:	9305      	str	r3, [sp, #20]
    85f8:	e014      	b.n	8624 <_svfiprintf_r+0x1cc>
    85fa:	ab05      	add	r3, sp, #20
    85fc:	9300      	str	r3, [sp, #0]
    85fe:	003a      	movs	r2, r7
    8600:	4b13      	ldr	r3, [pc, #76]	; (8650 <_svfiprintf_r+0x1f8>)
    8602:	0029      	movs	r1, r5
    8604:	9802      	ldr	r0, [sp, #8]
    8606:	e000      	b.n	860a <_svfiprintf_r+0x1b2>
    8608:	bf00      	nop
    860a:	e007      	b.n	861c <_svfiprintf_r+0x1c4>
    860c:	ab05      	add	r3, sp, #20
    860e:	9300      	str	r3, [sp, #0]
    8610:	003a      	movs	r2, r7
    8612:	4b0f      	ldr	r3, [pc, #60]	; (8650 <_svfiprintf_r+0x1f8>)
    8614:	0029      	movs	r1, r5
    8616:	9802      	ldr	r0, [sp, #8]
    8618:	f000 fa64 	bl	8ae4 <_printf_i>
    861c:	9003      	str	r0, [sp, #12]
    861e:	9b03      	ldr	r3, [sp, #12]
    8620:	3301      	adds	r3, #1
    8622:	d004      	beq.n	862e <_svfiprintf_r+0x1d6>
    8624:	696b      	ldr	r3, [r5, #20]
    8626:	9a03      	ldr	r2, [sp, #12]
    8628:	189b      	adds	r3, r3, r2
    862a:	616b      	str	r3, [r5, #20]
    862c:	e735      	b.n	849a <_svfiprintf_r+0x42>
    862e:	89bb      	ldrh	r3, [r7, #12]
    8630:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8632:	065b      	lsls	r3, r3, #25
    8634:	d501      	bpl.n	863a <_svfiprintf_r+0x1e2>
    8636:	2001      	movs	r0, #1
    8638:	4240      	negs	r0, r0
    863a:	b01f      	add	sp, #124	; 0x7c
    863c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    863e:	46c0      	nop			; (mov r8, r8)
    8640:	00009b46 	.word	0x00009b46
    8644:	00009b4c 	.word	0x00009b4c
    8648:	00009b50 	.word	0x00009b50
    864c:	00000000 	.word	0x00000000
    8650:	00008395 	.word	0x00008395

00008654 <_sungetc_r>:
    8654:	b570      	push	{r4, r5, r6, lr}
    8656:	000e      	movs	r6, r1
    8658:	0014      	movs	r4, r2
    865a:	1c4b      	adds	r3, r1, #1
    865c:	d102      	bne.n	8664 <_sungetc_r+0x10>
    865e:	2001      	movs	r0, #1
    8660:	4240      	negs	r0, r0
    8662:	e032      	b.n	86ca <_sungetc_r+0x76>
    8664:	8993      	ldrh	r3, [r2, #12]
    8666:	2220      	movs	r2, #32
    8668:	4393      	bics	r3, r2
    866a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    866c:	81a3      	strh	r3, [r4, #12]
    866e:	b2cd      	uxtb	r5, r1
    8670:	6863      	ldr	r3, [r4, #4]
    8672:	2a00      	cmp	r2, #0
    8674:	d00e      	beq.n	8694 <_sungetc_r+0x40>
    8676:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    8678:	4293      	cmp	r3, r2
    867a:	da05      	bge.n	8688 <_sungetc_r+0x34>
    867c:	6823      	ldr	r3, [r4, #0]
    867e:	3b01      	subs	r3, #1
    8680:	6023      	str	r3, [r4, #0]
    8682:	701e      	strb	r6, [r3, #0]
    8684:	6863      	ldr	r3, [r4, #4]
    8686:	e010      	b.n	86aa <_sungetc_r+0x56>
    8688:	0021      	movs	r1, r4
    868a:	f000 fdf7 	bl	927c <__submore>
    868e:	2800      	cmp	r0, #0
    8690:	d0f4      	beq.n	867c <_sungetc_r+0x28>
    8692:	e7e4      	b.n	865e <_sungetc_r+0xa>
    8694:	6921      	ldr	r1, [r4, #16]
    8696:	6822      	ldr	r2, [r4, #0]
    8698:	2900      	cmp	r1, #0
    869a:	d008      	beq.n	86ae <_sungetc_r+0x5a>
    869c:	4291      	cmp	r1, r2
    869e:	d206      	bcs.n	86ae <_sungetc_r+0x5a>
    86a0:	1e51      	subs	r1, r2, #1
    86a2:	7808      	ldrb	r0, [r1, #0]
    86a4:	4285      	cmp	r5, r0
    86a6:	d102      	bne.n	86ae <_sungetc_r+0x5a>
    86a8:	6021      	str	r1, [r4, #0]
    86aa:	3301      	adds	r3, #1
    86ac:	e00b      	b.n	86c6 <_sungetc_r+0x72>
    86ae:	6423      	str	r3, [r4, #64]	; 0x40
    86b0:	0023      	movs	r3, r4
    86b2:	3344      	adds	r3, #68	; 0x44
    86b4:	6363      	str	r3, [r4, #52]	; 0x34
    86b6:	2303      	movs	r3, #3
    86b8:	63a3      	str	r3, [r4, #56]	; 0x38
    86ba:	0023      	movs	r3, r4
    86bc:	3346      	adds	r3, #70	; 0x46
    86be:	63e2      	str	r2, [r4, #60]	; 0x3c
    86c0:	701e      	strb	r6, [r3, #0]
    86c2:	6023      	str	r3, [r4, #0]
    86c4:	2301      	movs	r3, #1
    86c6:	0028      	movs	r0, r5
    86c8:	6063      	str	r3, [r4, #4]
    86ca:	bd70      	pop	{r4, r5, r6, pc}

000086cc <__ssrefill_r>:
    86cc:	b510      	push	{r4, lr}
    86ce:	000c      	movs	r4, r1
    86d0:	6b49      	ldr	r1, [r1, #52]	; 0x34
    86d2:	2900      	cmp	r1, #0
    86d4:	d00e      	beq.n	86f4 <__ssrefill_r+0x28>
    86d6:	0023      	movs	r3, r4
    86d8:	3344      	adds	r3, #68	; 0x44
    86da:	4299      	cmp	r1, r3
    86dc:	d001      	beq.n	86e2 <__ssrefill_r+0x16>
    86de:	f000 fe2b 	bl	9338 <_free_r>
    86e2:	2000      	movs	r0, #0
    86e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    86e6:	6360      	str	r0, [r4, #52]	; 0x34
    86e8:	6063      	str	r3, [r4, #4]
    86ea:	4283      	cmp	r3, r0
    86ec:	d002      	beq.n	86f4 <__ssrefill_r+0x28>
    86ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    86f0:	6023      	str	r3, [r4, #0]
    86f2:	e009      	b.n	8708 <__ssrefill_r+0x3c>
    86f4:	6923      	ldr	r3, [r4, #16]
    86f6:	2220      	movs	r2, #32
    86f8:	6023      	str	r3, [r4, #0]
    86fa:	2300      	movs	r3, #0
    86fc:	2001      	movs	r0, #1
    86fe:	6063      	str	r3, [r4, #4]
    8700:	89a3      	ldrh	r3, [r4, #12]
    8702:	4240      	negs	r0, r0
    8704:	4313      	orrs	r3, r2
    8706:	81a3      	strh	r3, [r4, #12]
    8708:	bd10      	pop	{r4, pc}
	...

0000870c <__ssvfiscanf_r>:
    870c:	b5f0      	push	{r4, r5, r6, r7, lr}
    870e:	4cb8      	ldr	r4, [pc, #736]	; (89f0 <__ssvfiscanf_r+0x2e4>)
    8710:	000d      	movs	r5, r1
    8712:	44a5      	add	sp, r4
    8714:	9303      	str	r3, [sp, #12]
    8716:	2300      	movs	r3, #0
    8718:	9000      	str	r0, [sp, #0]
    871a:	9348      	str	r3, [sp, #288]	; 0x120
    871c:	9349      	str	r3, [sp, #292]	; 0x124
    871e:	2086      	movs	r0, #134	; 0x86
    8720:	ab05      	add	r3, sp, #20
    8722:	934a      	str	r3, [sp, #296]	; 0x128
    8724:	23be      	movs	r3, #190	; 0xbe
    8726:	0040      	lsls	r0, r0, #1
    8728:	9201      	str	r2, [sp, #4]
    872a:	a902      	add	r1, sp, #8
    872c:	4ab1      	ldr	r2, [pc, #708]	; (89f4 <__ssvfiscanf_r+0x2e8>)
    872e:	005b      	lsls	r3, r3, #1
    8730:	1809      	adds	r1, r1, r0
    8732:	50ca      	str	r2, [r1, r3]
    8734:	3304      	adds	r3, #4
    8736:	001e      	movs	r6, r3
    8738:	4aaf      	ldr	r2, [pc, #700]	; (89f8 <__ssvfiscanf_r+0x2ec>)
    873a:	a902      	add	r1, sp, #8
    873c:	1809      	adds	r1, r1, r0
    873e:	50ca      	str	r2, [r1, r3]
    8740:	9b01      	ldr	r3, [sp, #4]
    8742:	781a      	ldrb	r2, [r3, #0]
    8744:	2a00      	cmp	r2, #0
    8746:	d100      	bne.n	874a <__ssvfiscanf_r+0x3e>
    8748:	e149      	b.n	89de <__ssvfiscanf_r+0x2d2>
    874a:	2108      	movs	r1, #8
    874c:	4cab      	ldr	r4, [pc, #684]	; (89fc <__ssvfiscanf_r+0x2f0>)
    874e:	6823      	ldr	r3, [r4, #0]
    8750:	189b      	adds	r3, r3, r2
    8752:	785b      	ldrb	r3, [r3, #1]
    8754:	400b      	ands	r3, r1
    8756:	d023      	beq.n	87a0 <__ssvfiscanf_r+0x94>
    8758:	686b      	ldr	r3, [r5, #4]
    875a:	2b00      	cmp	r3, #0
    875c:	dd11      	ble.n	8782 <__ssvfiscanf_r+0x76>
    875e:	682b      	ldr	r3, [r5, #0]
    8760:	6821      	ldr	r1, [r4, #0]
    8762:	781a      	ldrb	r2, [r3, #0]
    8764:	188a      	adds	r2, r1, r2
    8766:	2108      	movs	r1, #8
    8768:	7852      	ldrb	r2, [r2, #1]
    876a:	420a      	tst	r2, r1
    876c:	d014      	beq.n	8798 <__ssvfiscanf_r+0x8c>
    876e:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8770:	3301      	adds	r3, #1
    8772:	9202      	str	r2, [sp, #8]
    8774:	3201      	adds	r2, #1
    8776:	9249      	str	r2, [sp, #292]	; 0x124
    8778:	686a      	ldr	r2, [r5, #4]
    877a:	602b      	str	r3, [r5, #0]
    877c:	3a01      	subs	r2, #1
    877e:	606a      	str	r2, [r5, #4]
    8780:	e7ea      	b.n	8758 <__ssvfiscanf_r+0x4c>
    8782:	2286      	movs	r2, #134	; 0x86
    8784:	ab02      	add	r3, sp, #8
    8786:	0052      	lsls	r2, r2, #1
    8788:	189b      	adds	r3, r3, r2
    878a:	599b      	ldr	r3, [r3, r6]
    878c:	0029      	movs	r1, r5
    878e:	9800      	ldr	r0, [sp, #0]
    8790:	9302      	str	r3, [sp, #8]
    8792:	4798      	blx	r3
    8794:	2800      	cmp	r0, #0
    8796:	d0e2      	beq.n	875e <__ssvfiscanf_r+0x52>
    8798:	9f01      	ldr	r7, [sp, #4]
    879a:	3701      	adds	r7, #1
    879c:	9701      	str	r7, [sp, #4]
    879e:	e7cf      	b.n	8740 <__ssvfiscanf_r+0x34>
    87a0:	9901      	ldr	r1, [sp, #4]
    87a2:	0014      	movs	r4, r2
    87a4:	1c4f      	adds	r7, r1, #1
    87a6:	2a25      	cmp	r2, #37	; 0x25
    87a8:	d155      	bne.n	8856 <__ssvfiscanf_r+0x14a>
    87aa:	9347      	str	r3, [sp, #284]	; 0x11c
    87ac:	9345      	str	r3, [sp, #276]	; 0x114
    87ae:	784b      	ldrb	r3, [r1, #1]
    87b0:	2b2a      	cmp	r3, #42	; 0x2a
    87b2:	d102      	bne.n	87ba <__ssvfiscanf_r+0xae>
    87b4:	3b1a      	subs	r3, #26
    87b6:	9345      	str	r3, [sp, #276]	; 0x114
    87b8:	3701      	adds	r7, #1
    87ba:	003c      	movs	r4, r7
    87bc:	220a      	movs	r2, #10
    87be:	7821      	ldrb	r1, [r4, #0]
    87c0:	000b      	movs	r3, r1
    87c2:	3b30      	subs	r3, #48	; 0x30
    87c4:	2b09      	cmp	r3, #9
    87c6:	d807      	bhi.n	87d8 <__ssvfiscanf_r+0xcc>
    87c8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    87ca:	3401      	adds	r4, #1
    87cc:	9301      	str	r3, [sp, #4]
    87ce:	4353      	muls	r3, r2
    87d0:	3b30      	subs	r3, #48	; 0x30
    87d2:	1859      	adds	r1, r3, r1
    87d4:	9147      	str	r1, [sp, #284]	; 0x11c
    87d6:	e7f2      	b.n	87be <__ssvfiscanf_r+0xb2>
    87d8:	4f89      	ldr	r7, [pc, #548]	; (8a00 <__ssvfiscanf_r+0x2f4>)
    87da:	2203      	movs	r2, #3
    87dc:	0038      	movs	r0, r7
    87de:	f000 fd8b 	bl	92f8 <memchr>
    87e2:	2800      	cmp	r0, #0
    87e4:	d007      	beq.n	87f6 <__ssvfiscanf_r+0xea>
    87e6:	2301      	movs	r3, #1
    87e8:	1bc0      	subs	r0, r0, r7
    87ea:	4083      	lsls	r3, r0
    87ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
    87ee:	3401      	adds	r4, #1
    87f0:	4313      	orrs	r3, r2
    87f2:	9201      	str	r2, [sp, #4]
    87f4:	9345      	str	r3, [sp, #276]	; 0x114
    87f6:	1c67      	adds	r7, r4, #1
    87f8:	7824      	ldrb	r4, [r4, #0]
    87fa:	2c67      	cmp	r4, #103	; 0x67
    87fc:	d818      	bhi.n	8830 <__ssvfiscanf_r+0x124>
    87fe:	2c65      	cmp	r4, #101	; 0x65
    8800:	d300      	bcc.n	8804 <__ssvfiscanf_r+0xf8>
    8802:	e08b      	b.n	891c <__ssvfiscanf_r+0x210>
    8804:	2c47      	cmp	r4, #71	; 0x47
    8806:	d808      	bhi.n	881a <__ssvfiscanf_r+0x10e>
    8808:	2c45      	cmp	r4, #69	; 0x45
    880a:	d300      	bcc.n	880e <__ssvfiscanf_r+0x102>
    880c:	e086      	b.n	891c <__ssvfiscanf_r+0x210>
    880e:	2c00      	cmp	r4, #0
    8810:	d100      	bne.n	8814 <__ssvfiscanf_r+0x108>
    8812:	e0e6      	b.n	89e2 <__ssvfiscanf_r+0x2d6>
    8814:	2c25      	cmp	r4, #37	; 0x25
    8816:	d01e      	beq.n	8856 <__ssvfiscanf_r+0x14a>
    8818:	e082      	b.n	8920 <__ssvfiscanf_r+0x214>
    881a:	2c5b      	cmp	r4, #91	; 0x5b
    881c:	d056      	beq.n	88cc <__ssvfiscanf_r+0x1c0>
    881e:	d802      	bhi.n	8826 <__ssvfiscanf_r+0x11a>
    8820:	2c58      	cmp	r4, #88	; 0x58
    8822:	d041      	beq.n	88a8 <__ssvfiscanf_r+0x19c>
    8824:	e07c      	b.n	8920 <__ssvfiscanf_r+0x214>
    8826:	2c63      	cmp	r4, #99	; 0x63
    8828:	d05e      	beq.n	88e8 <__ssvfiscanf_r+0x1dc>
    882a:	2c64      	cmp	r4, #100	; 0x64
    882c:	d045      	beq.n	88ba <__ssvfiscanf_r+0x1ae>
    882e:	e077      	b.n	8920 <__ssvfiscanf_r+0x214>
    8830:	2c70      	cmp	r4, #112	; 0x70
    8832:	d033      	beq.n	889c <__ssvfiscanf_r+0x190>
    8834:	d807      	bhi.n	8846 <__ssvfiscanf_r+0x13a>
    8836:	2c6e      	cmp	r4, #110	; 0x6e
    8838:	d05e      	beq.n	88f8 <__ssvfiscanf_r+0x1ec>
    883a:	d840      	bhi.n	88be <__ssvfiscanf_r+0x1b2>
    883c:	2c69      	cmp	r4, #105	; 0x69
    883e:	d16f      	bne.n	8920 <__ssvfiscanf_r+0x214>
    8840:	2300      	movs	r3, #0
    8842:	9346      	str	r3, [sp, #280]	; 0x118
    8844:	e040      	b.n	88c8 <__ssvfiscanf_r+0x1bc>
    8846:	2c75      	cmp	r4, #117	; 0x75
    8848:	d037      	beq.n	88ba <__ssvfiscanf_r+0x1ae>
    884a:	2c78      	cmp	r4, #120	; 0x78
    884c:	d02c      	beq.n	88a8 <__ssvfiscanf_r+0x19c>
    884e:	2302      	movs	r3, #2
    8850:	2c73      	cmp	r4, #115	; 0x73
    8852:	d047      	beq.n	88e4 <__ssvfiscanf_r+0x1d8>
    8854:	e064      	b.n	8920 <__ssvfiscanf_r+0x214>
    8856:	686b      	ldr	r3, [r5, #4]
    8858:	2b00      	cmp	r3, #0
    885a:	dd0e      	ble.n	887a <__ssvfiscanf_r+0x16e>
    885c:	682b      	ldr	r3, [r5, #0]
    885e:	781a      	ldrb	r2, [r3, #0]
    8860:	4294      	cmp	r4, r2
    8862:	d000      	beq.n	8866 <__ssvfiscanf_r+0x15a>
    8864:	e0bb      	b.n	89de <__ssvfiscanf_r+0x2d2>
    8866:	3301      	adds	r3, #1
    8868:	686a      	ldr	r2, [r5, #4]
    886a:	602b      	str	r3, [r5, #0]
    886c:	9b49      	ldr	r3, [sp, #292]	; 0x124
    886e:	3a01      	subs	r2, #1
    8870:	9301      	str	r3, [sp, #4]
    8872:	3301      	adds	r3, #1
    8874:	606a      	str	r2, [r5, #4]
    8876:	9349      	str	r3, [sp, #292]	; 0x124
    8878:	e790      	b.n	879c <__ssvfiscanf_r+0x90>
    887a:	2286      	movs	r2, #134	; 0x86
    887c:	ab02      	add	r3, sp, #8
    887e:	0052      	lsls	r2, r2, #1
    8880:	189b      	adds	r3, r3, r2
    8882:	599b      	ldr	r3, [r3, r6]
    8884:	0029      	movs	r1, r5
    8886:	9800      	ldr	r0, [sp, #0]
    8888:	9301      	str	r3, [sp, #4]
    888a:	4798      	blx	r3
    888c:	2800      	cmp	r0, #0
    888e:	d0e5      	beq.n	885c <__ssvfiscanf_r+0x150>
    8890:	9848      	ldr	r0, [sp, #288]	; 0x120
    8892:	2800      	cmp	r0, #0
    8894:	d000      	beq.n	8898 <__ssvfiscanf_r+0x18c>
    8896:	e09e      	b.n	89d6 <__ssvfiscanf_r+0x2ca>
    8898:	3801      	subs	r0, #1
    889a:	e0a4      	b.n	89e6 <__ssvfiscanf_r+0x2da>
    889c:	9b45      	ldr	r3, [sp, #276]	; 0x114
    889e:	9301      	str	r3, [sp, #4]
    88a0:	2320      	movs	r3, #32
    88a2:	9a01      	ldr	r2, [sp, #4]
    88a4:	4313      	orrs	r3, r2
    88a6:	9345      	str	r3, [sp, #276]	; 0x114
    88a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
    88aa:	9301      	str	r3, [sp, #4]
    88ac:	2380      	movs	r3, #128	; 0x80
    88ae:	9a01      	ldr	r2, [sp, #4]
    88b0:	009b      	lsls	r3, r3, #2
    88b2:	4313      	orrs	r3, r2
    88b4:	9345      	str	r3, [sp, #276]	; 0x114
    88b6:	2310      	movs	r3, #16
    88b8:	e002      	b.n	88c0 <__ssvfiscanf_r+0x1b4>
    88ba:	230a      	movs	r3, #10
    88bc:	e000      	b.n	88c0 <__ssvfiscanf_r+0x1b4>
    88be:	2308      	movs	r3, #8
    88c0:	9346      	str	r3, [sp, #280]	; 0x118
    88c2:	2304      	movs	r3, #4
    88c4:	2c6e      	cmp	r4, #110	; 0x6e
    88c6:	dc0d      	bgt.n	88e4 <__ssvfiscanf_r+0x1d8>
    88c8:	2303      	movs	r3, #3
    88ca:	e00b      	b.n	88e4 <__ssvfiscanf_r+0x1d8>
    88cc:	0039      	movs	r1, r7
    88ce:	a805      	add	r0, sp, #20
    88d0:	f000 fb8c 	bl	8fec <__sccl>
    88d4:	9b45      	ldr	r3, [sp, #276]	; 0x114
    88d6:	0007      	movs	r7, r0
    88d8:	9301      	str	r3, [sp, #4]
    88da:	2340      	movs	r3, #64	; 0x40
    88dc:	9a01      	ldr	r2, [sp, #4]
    88de:	4313      	orrs	r3, r2
    88e0:	9345      	str	r3, [sp, #276]	; 0x114
    88e2:	2301      	movs	r3, #1
    88e4:	934b      	str	r3, [sp, #300]	; 0x12c
    88e6:	e01f      	b.n	8928 <__ssvfiscanf_r+0x21c>
    88e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
    88ea:	9301      	str	r3, [sp, #4]
    88ec:	2340      	movs	r3, #64	; 0x40
    88ee:	9a01      	ldr	r2, [sp, #4]
    88f0:	4313      	orrs	r3, r2
    88f2:	9345      	str	r3, [sp, #276]	; 0x114
    88f4:	2300      	movs	r3, #0
    88f6:	e7f5      	b.n	88e4 <__ssvfiscanf_r+0x1d8>
    88f8:	9945      	ldr	r1, [sp, #276]	; 0x114
    88fa:	06cb      	lsls	r3, r1, #27
    88fc:	d500      	bpl.n	8900 <__ssvfiscanf_r+0x1f4>
    88fe:	e74d      	b.n	879c <__ssvfiscanf_r+0x90>
    8900:	9b03      	ldr	r3, [sp, #12]
    8902:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8904:	07c8      	lsls	r0, r1, #31
    8906:	d504      	bpl.n	8912 <__ssvfiscanf_r+0x206>
    8908:	1d19      	adds	r1, r3, #4
    890a:	9103      	str	r1, [sp, #12]
    890c:	681b      	ldr	r3, [r3, #0]
    890e:	801a      	strh	r2, [r3, #0]
    8910:	e744      	b.n	879c <__ssvfiscanf_r+0x90>
    8912:	1d19      	adds	r1, r3, #4
    8914:	9103      	str	r1, [sp, #12]
    8916:	681b      	ldr	r3, [r3, #0]
    8918:	601a      	str	r2, [r3, #0]
    891a:	e73f      	b.n	879c <__ssvfiscanf_r+0x90>
    891c:	2305      	movs	r3, #5
    891e:	e7e1      	b.n	88e4 <__ssvfiscanf_r+0x1d8>
    8920:	2303      	movs	r3, #3
    8922:	934b      	str	r3, [sp, #300]	; 0x12c
    8924:	3307      	adds	r3, #7
    8926:	9346      	str	r3, [sp, #280]	; 0x118
    8928:	686b      	ldr	r3, [r5, #4]
    892a:	2b00      	cmp	r3, #0
    892c:	dd04      	ble.n	8938 <__ssvfiscanf_r+0x22c>
    892e:	9b45      	ldr	r3, [sp, #276]	; 0x114
    8930:	9301      	str	r3, [sp, #4]
    8932:	065b      	lsls	r3, r3, #25
    8934:	d517      	bpl.n	8966 <__ssvfiscanf_r+0x25a>
    8936:	e01f      	b.n	8978 <__ssvfiscanf_r+0x26c>
    8938:	2286      	movs	r2, #134	; 0x86
    893a:	ab02      	add	r3, sp, #8
    893c:	0052      	lsls	r2, r2, #1
    893e:	189b      	adds	r3, r3, r2
    8940:	599b      	ldr	r3, [r3, r6]
    8942:	0029      	movs	r1, r5
    8944:	9800      	ldr	r0, [sp, #0]
    8946:	9301      	str	r3, [sp, #4]
    8948:	4798      	blx	r3
    894a:	2800      	cmp	r0, #0
    894c:	d0ef      	beq.n	892e <__ssvfiscanf_r+0x222>
    894e:	e79f      	b.n	8890 <__ssvfiscanf_r+0x184>
    8950:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8952:	9201      	str	r2, [sp, #4]
    8954:	3201      	adds	r2, #1
    8956:	9249      	str	r2, [sp, #292]	; 0x124
    8958:	686a      	ldr	r2, [r5, #4]
    895a:	3a01      	subs	r2, #1
    895c:	606a      	str	r2, [r5, #4]
    895e:	2a00      	cmp	r2, #0
    8960:	dd14      	ble.n	898c <__ssvfiscanf_r+0x280>
    8962:	3301      	adds	r3, #1
    8964:	602b      	str	r3, [r5, #0]
    8966:	682b      	ldr	r3, [r5, #0]
    8968:	4924      	ldr	r1, [pc, #144]	; (89fc <__ssvfiscanf_r+0x2f0>)
    896a:	781a      	ldrb	r2, [r3, #0]
    896c:	6809      	ldr	r1, [r1, #0]
    896e:	188a      	adds	r2, r1, r2
    8970:	2108      	movs	r1, #8
    8972:	7852      	ldrb	r2, [r2, #1]
    8974:	420a      	tst	r2, r1
    8976:	d1eb      	bne.n	8950 <__ssvfiscanf_r+0x244>
    8978:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    897a:	2b02      	cmp	r3, #2
    897c:	dc12      	bgt.n	89a4 <__ssvfiscanf_r+0x298>
    897e:	ab03      	add	r3, sp, #12
    8980:	002a      	movs	r2, r5
    8982:	a945      	add	r1, sp, #276	; 0x114
    8984:	9800      	ldr	r0, [sp, #0]
    8986:	f000 f9cf 	bl	8d28 <_scanf_chars>
    898a:	e01e      	b.n	89ca <__ssvfiscanf_r+0x2be>
    898c:	2286      	movs	r2, #134	; 0x86
    898e:	ab02      	add	r3, sp, #8
    8990:	0052      	lsls	r2, r2, #1
    8992:	189b      	adds	r3, r3, r2
    8994:	599b      	ldr	r3, [r3, r6]
    8996:	0029      	movs	r1, r5
    8998:	9800      	ldr	r0, [sp, #0]
    899a:	9301      	str	r3, [sp, #4]
    899c:	4798      	blx	r3
    899e:	2800      	cmp	r0, #0
    89a0:	d0e1      	beq.n	8966 <__ssvfiscanf_r+0x25a>
    89a2:	e775      	b.n	8890 <__ssvfiscanf_r+0x184>
    89a4:	2b04      	cmp	r3, #4
    89a6:	dc06      	bgt.n	89b6 <__ssvfiscanf_r+0x2aa>
    89a8:	ab03      	add	r3, sp, #12
    89aa:	002a      	movs	r2, r5
    89ac:	a945      	add	r1, sp, #276	; 0x114
    89ae:	9800      	ldr	r0, [sp, #0]
    89b0:	f000 fa1c 	bl	8dec <_scanf_i>
    89b4:	e009      	b.n	89ca <__ssvfiscanf_r+0x2be>
    89b6:	4b13      	ldr	r3, [pc, #76]	; (8a04 <__ssvfiscanf_r+0x2f8>)
    89b8:	2b00      	cmp	r3, #0
    89ba:	d100      	bne.n	89be <__ssvfiscanf_r+0x2b2>
    89bc:	e6ee      	b.n	879c <__ssvfiscanf_r+0x90>
    89be:	ab03      	add	r3, sp, #12
    89c0:	002a      	movs	r2, r5
    89c2:	a945      	add	r1, sp, #276	; 0x114
    89c4:	9800      	ldr	r0, [sp, #0]
    89c6:	e000      	b.n	89ca <__ssvfiscanf_r+0x2be>
    89c8:	bf00      	nop
    89ca:	2801      	cmp	r0, #1
    89cc:	d007      	beq.n	89de <__ssvfiscanf_r+0x2d2>
    89ce:	2802      	cmp	r0, #2
    89d0:	d000      	beq.n	89d4 <__ssvfiscanf_r+0x2c8>
    89d2:	e6e3      	b.n	879c <__ssvfiscanf_r+0x90>
    89d4:	e75c      	b.n	8890 <__ssvfiscanf_r+0x184>
    89d6:	89ab      	ldrh	r3, [r5, #12]
    89d8:	065b      	lsls	r3, r3, #25
    89da:	d504      	bpl.n	89e6 <__ssvfiscanf_r+0x2da>
    89dc:	e001      	b.n	89e2 <__ssvfiscanf_r+0x2d6>
    89de:	9848      	ldr	r0, [sp, #288]	; 0x120
    89e0:	e001      	b.n	89e6 <__ssvfiscanf_r+0x2da>
    89e2:	2001      	movs	r0, #1
    89e4:	4240      	negs	r0, r0
    89e6:	23a7      	movs	r3, #167	; 0xa7
    89e8:	009b      	lsls	r3, r3, #2
    89ea:	449d      	add	sp, r3
    89ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89ee:	46c0      	nop			; (mov r8, r8)
    89f0:	fffffd64 	.word	0xfffffd64
    89f4:	00008655 	.word	0x00008655
    89f8:	000086cd 	.word	0x000086cd
    89fc:	200000f8 	.word	0x200000f8
    8a00:	00009b4c 	.word	0x00009b4c
    8a04:	00000000 	.word	0x00000000

00008a08 <_printf_common>:
    8a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8a0a:	0017      	movs	r7, r2
    8a0c:	9301      	str	r3, [sp, #4]
    8a0e:	688a      	ldr	r2, [r1, #8]
    8a10:	690b      	ldr	r3, [r1, #16]
    8a12:	9000      	str	r0, [sp, #0]
    8a14:	000c      	movs	r4, r1
    8a16:	4293      	cmp	r3, r2
    8a18:	da00      	bge.n	8a1c <_printf_common+0x14>
    8a1a:	0013      	movs	r3, r2
    8a1c:	0022      	movs	r2, r4
    8a1e:	603b      	str	r3, [r7, #0]
    8a20:	3243      	adds	r2, #67	; 0x43
    8a22:	7812      	ldrb	r2, [r2, #0]
    8a24:	2a00      	cmp	r2, #0
    8a26:	d001      	beq.n	8a2c <_printf_common+0x24>
    8a28:	3301      	adds	r3, #1
    8a2a:	603b      	str	r3, [r7, #0]
    8a2c:	6823      	ldr	r3, [r4, #0]
    8a2e:	069b      	lsls	r3, r3, #26
    8a30:	d502      	bpl.n	8a38 <_printf_common+0x30>
    8a32:	683b      	ldr	r3, [r7, #0]
    8a34:	3302      	adds	r3, #2
    8a36:	603b      	str	r3, [r7, #0]
    8a38:	2506      	movs	r5, #6
    8a3a:	6823      	ldr	r3, [r4, #0]
    8a3c:	401d      	ands	r5, r3
    8a3e:	d01e      	beq.n	8a7e <_printf_common+0x76>
    8a40:	0023      	movs	r3, r4
    8a42:	3343      	adds	r3, #67	; 0x43
    8a44:	781b      	ldrb	r3, [r3, #0]
    8a46:	1e5a      	subs	r2, r3, #1
    8a48:	4193      	sbcs	r3, r2
    8a4a:	6822      	ldr	r2, [r4, #0]
    8a4c:	0692      	lsls	r2, r2, #26
    8a4e:	d51c      	bpl.n	8a8a <_printf_common+0x82>
    8a50:	2030      	movs	r0, #48	; 0x30
    8a52:	18e1      	adds	r1, r4, r3
    8a54:	3143      	adds	r1, #67	; 0x43
    8a56:	7008      	strb	r0, [r1, #0]
    8a58:	0021      	movs	r1, r4
    8a5a:	1c5a      	adds	r2, r3, #1
    8a5c:	3145      	adds	r1, #69	; 0x45
    8a5e:	7809      	ldrb	r1, [r1, #0]
    8a60:	18a2      	adds	r2, r4, r2
    8a62:	3243      	adds	r2, #67	; 0x43
    8a64:	3302      	adds	r3, #2
    8a66:	7011      	strb	r1, [r2, #0]
    8a68:	e00f      	b.n	8a8a <_printf_common+0x82>
    8a6a:	0022      	movs	r2, r4
    8a6c:	2301      	movs	r3, #1
    8a6e:	3219      	adds	r2, #25
    8a70:	9901      	ldr	r1, [sp, #4]
    8a72:	9800      	ldr	r0, [sp, #0]
    8a74:	9e08      	ldr	r6, [sp, #32]
    8a76:	47b0      	blx	r6
    8a78:	1c43      	adds	r3, r0, #1
    8a7a:	d00e      	beq.n	8a9a <_printf_common+0x92>
    8a7c:	3501      	adds	r5, #1
    8a7e:	68e3      	ldr	r3, [r4, #12]
    8a80:	683a      	ldr	r2, [r7, #0]
    8a82:	1a9b      	subs	r3, r3, r2
    8a84:	429d      	cmp	r5, r3
    8a86:	dbf0      	blt.n	8a6a <_printf_common+0x62>
    8a88:	e7da      	b.n	8a40 <_printf_common+0x38>
    8a8a:	0022      	movs	r2, r4
    8a8c:	9901      	ldr	r1, [sp, #4]
    8a8e:	3243      	adds	r2, #67	; 0x43
    8a90:	9800      	ldr	r0, [sp, #0]
    8a92:	9d08      	ldr	r5, [sp, #32]
    8a94:	47a8      	blx	r5
    8a96:	1c43      	adds	r3, r0, #1
    8a98:	d102      	bne.n	8aa0 <_printf_common+0x98>
    8a9a:	2001      	movs	r0, #1
    8a9c:	4240      	negs	r0, r0
    8a9e:	e020      	b.n	8ae2 <_printf_common+0xda>
    8aa0:	2306      	movs	r3, #6
    8aa2:	6820      	ldr	r0, [r4, #0]
    8aa4:	68e1      	ldr	r1, [r4, #12]
    8aa6:	683a      	ldr	r2, [r7, #0]
    8aa8:	4003      	ands	r3, r0
    8aaa:	2500      	movs	r5, #0
    8aac:	2b04      	cmp	r3, #4
    8aae:	d103      	bne.n	8ab8 <_printf_common+0xb0>
    8ab0:	1a8d      	subs	r5, r1, r2
    8ab2:	43eb      	mvns	r3, r5
    8ab4:	17db      	asrs	r3, r3, #31
    8ab6:	401d      	ands	r5, r3
    8ab8:	68a3      	ldr	r3, [r4, #8]
    8aba:	6922      	ldr	r2, [r4, #16]
    8abc:	4293      	cmp	r3, r2
    8abe:	dd01      	ble.n	8ac4 <_printf_common+0xbc>
    8ac0:	1a9b      	subs	r3, r3, r2
    8ac2:	18ed      	adds	r5, r5, r3
    8ac4:	2700      	movs	r7, #0
    8ac6:	42bd      	cmp	r5, r7
    8ac8:	d00a      	beq.n	8ae0 <_printf_common+0xd8>
    8aca:	0022      	movs	r2, r4
    8acc:	2301      	movs	r3, #1
    8ace:	321a      	adds	r2, #26
    8ad0:	9901      	ldr	r1, [sp, #4]
    8ad2:	9800      	ldr	r0, [sp, #0]
    8ad4:	9e08      	ldr	r6, [sp, #32]
    8ad6:	47b0      	blx	r6
    8ad8:	1c43      	adds	r3, r0, #1
    8ada:	d0de      	beq.n	8a9a <_printf_common+0x92>
    8adc:	3701      	adds	r7, #1
    8ade:	e7f2      	b.n	8ac6 <_printf_common+0xbe>
    8ae0:	2000      	movs	r0, #0
    8ae2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00008ae4 <_printf_i>:
    8ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ae6:	b08b      	sub	sp, #44	; 0x2c
    8ae8:	9206      	str	r2, [sp, #24]
    8aea:	000a      	movs	r2, r1
    8aec:	3243      	adds	r2, #67	; 0x43
    8aee:	9307      	str	r3, [sp, #28]
    8af0:	9005      	str	r0, [sp, #20]
    8af2:	9204      	str	r2, [sp, #16]
    8af4:	7e0a      	ldrb	r2, [r1, #24]
    8af6:	000c      	movs	r4, r1
    8af8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8afa:	2a6e      	cmp	r2, #110	; 0x6e
    8afc:	d100      	bne.n	8b00 <_printf_i+0x1c>
    8afe:	e0ab      	b.n	8c58 <_printf_i+0x174>
    8b00:	d811      	bhi.n	8b26 <_printf_i+0x42>
    8b02:	2a63      	cmp	r2, #99	; 0x63
    8b04:	d022      	beq.n	8b4c <_printf_i+0x68>
    8b06:	d809      	bhi.n	8b1c <_printf_i+0x38>
    8b08:	2a00      	cmp	r2, #0
    8b0a:	d100      	bne.n	8b0e <_printf_i+0x2a>
    8b0c:	e0b5      	b.n	8c7a <_printf_i+0x196>
    8b0e:	2a58      	cmp	r2, #88	; 0x58
    8b10:	d000      	beq.n	8b14 <_printf_i+0x30>
    8b12:	e0c5      	b.n	8ca0 <_printf_i+0x1bc>
    8b14:	3145      	adds	r1, #69	; 0x45
    8b16:	700a      	strb	r2, [r1, #0]
    8b18:	4a81      	ldr	r2, [pc, #516]	; (8d20 <_printf_i+0x23c>)
    8b1a:	e04f      	b.n	8bbc <_printf_i+0xd8>
    8b1c:	2a64      	cmp	r2, #100	; 0x64
    8b1e:	d01d      	beq.n	8b5c <_printf_i+0x78>
    8b20:	2a69      	cmp	r2, #105	; 0x69
    8b22:	d01b      	beq.n	8b5c <_printf_i+0x78>
    8b24:	e0bc      	b.n	8ca0 <_printf_i+0x1bc>
    8b26:	2a73      	cmp	r2, #115	; 0x73
    8b28:	d100      	bne.n	8b2c <_printf_i+0x48>
    8b2a:	e0aa      	b.n	8c82 <_printf_i+0x19e>
    8b2c:	d809      	bhi.n	8b42 <_printf_i+0x5e>
    8b2e:	2a6f      	cmp	r2, #111	; 0x6f
    8b30:	d029      	beq.n	8b86 <_printf_i+0xa2>
    8b32:	2a70      	cmp	r2, #112	; 0x70
    8b34:	d000      	beq.n	8b38 <_printf_i+0x54>
    8b36:	e0b3      	b.n	8ca0 <_printf_i+0x1bc>
    8b38:	2220      	movs	r2, #32
    8b3a:	6809      	ldr	r1, [r1, #0]
    8b3c:	430a      	orrs	r2, r1
    8b3e:	6022      	str	r2, [r4, #0]
    8b40:	e037      	b.n	8bb2 <_printf_i+0xce>
    8b42:	2a75      	cmp	r2, #117	; 0x75
    8b44:	d01f      	beq.n	8b86 <_printf_i+0xa2>
    8b46:	2a78      	cmp	r2, #120	; 0x78
    8b48:	d033      	beq.n	8bb2 <_printf_i+0xce>
    8b4a:	e0a9      	b.n	8ca0 <_printf_i+0x1bc>
    8b4c:	000e      	movs	r6, r1
    8b4e:	681a      	ldr	r2, [r3, #0]
    8b50:	3642      	adds	r6, #66	; 0x42
    8b52:	1d11      	adds	r1, r2, #4
    8b54:	6019      	str	r1, [r3, #0]
    8b56:	6813      	ldr	r3, [r2, #0]
    8b58:	7033      	strb	r3, [r6, #0]
    8b5a:	e0a4      	b.n	8ca6 <_printf_i+0x1c2>
    8b5c:	6821      	ldr	r1, [r4, #0]
    8b5e:	681a      	ldr	r2, [r3, #0]
    8b60:	0608      	lsls	r0, r1, #24
    8b62:	d406      	bmi.n	8b72 <_printf_i+0x8e>
    8b64:	0649      	lsls	r1, r1, #25
    8b66:	d504      	bpl.n	8b72 <_printf_i+0x8e>
    8b68:	1d11      	adds	r1, r2, #4
    8b6a:	6019      	str	r1, [r3, #0]
    8b6c:	2300      	movs	r3, #0
    8b6e:	5ed5      	ldrsh	r5, [r2, r3]
    8b70:	e002      	b.n	8b78 <_printf_i+0x94>
    8b72:	1d11      	adds	r1, r2, #4
    8b74:	6019      	str	r1, [r3, #0]
    8b76:	6815      	ldr	r5, [r2, #0]
    8b78:	2d00      	cmp	r5, #0
    8b7a:	da3b      	bge.n	8bf4 <_printf_i+0x110>
    8b7c:	232d      	movs	r3, #45	; 0x2d
    8b7e:	9a04      	ldr	r2, [sp, #16]
    8b80:	426d      	negs	r5, r5
    8b82:	7013      	strb	r3, [r2, #0]
    8b84:	e036      	b.n	8bf4 <_printf_i+0x110>
    8b86:	6821      	ldr	r1, [r4, #0]
    8b88:	681a      	ldr	r2, [r3, #0]
    8b8a:	0608      	lsls	r0, r1, #24
    8b8c:	d406      	bmi.n	8b9c <_printf_i+0xb8>
    8b8e:	0649      	lsls	r1, r1, #25
    8b90:	d504      	bpl.n	8b9c <_printf_i+0xb8>
    8b92:	6815      	ldr	r5, [r2, #0]
    8b94:	1d11      	adds	r1, r2, #4
    8b96:	6019      	str	r1, [r3, #0]
    8b98:	b2ad      	uxth	r5, r5
    8b9a:	e002      	b.n	8ba2 <_printf_i+0xbe>
    8b9c:	1d11      	adds	r1, r2, #4
    8b9e:	6019      	str	r1, [r3, #0]
    8ba0:	6815      	ldr	r5, [r2, #0]
    8ba2:	4b5f      	ldr	r3, [pc, #380]	; (8d20 <_printf_i+0x23c>)
    8ba4:	7e22      	ldrb	r2, [r4, #24]
    8ba6:	9303      	str	r3, [sp, #12]
    8ba8:	2708      	movs	r7, #8
    8baa:	2a6f      	cmp	r2, #111	; 0x6f
    8bac:	d01d      	beq.n	8bea <_printf_i+0x106>
    8bae:	270a      	movs	r7, #10
    8bb0:	e01b      	b.n	8bea <_printf_i+0x106>
    8bb2:	0022      	movs	r2, r4
    8bb4:	2178      	movs	r1, #120	; 0x78
    8bb6:	3245      	adds	r2, #69	; 0x45
    8bb8:	7011      	strb	r1, [r2, #0]
    8bba:	4a5a      	ldr	r2, [pc, #360]	; (8d24 <_printf_i+0x240>)
    8bbc:	6819      	ldr	r1, [r3, #0]
    8bbe:	9203      	str	r2, [sp, #12]
    8bc0:	1d08      	adds	r0, r1, #4
    8bc2:	6822      	ldr	r2, [r4, #0]
    8bc4:	6018      	str	r0, [r3, #0]
    8bc6:	680d      	ldr	r5, [r1, #0]
    8bc8:	0610      	lsls	r0, r2, #24
    8bca:	d402      	bmi.n	8bd2 <_printf_i+0xee>
    8bcc:	0650      	lsls	r0, r2, #25
    8bce:	d500      	bpl.n	8bd2 <_printf_i+0xee>
    8bd0:	b2ad      	uxth	r5, r5
    8bd2:	07d3      	lsls	r3, r2, #31
    8bd4:	d502      	bpl.n	8bdc <_printf_i+0xf8>
    8bd6:	2320      	movs	r3, #32
    8bd8:	431a      	orrs	r2, r3
    8bda:	6022      	str	r2, [r4, #0]
    8bdc:	2710      	movs	r7, #16
    8bde:	2d00      	cmp	r5, #0
    8be0:	d103      	bne.n	8bea <_printf_i+0x106>
    8be2:	2320      	movs	r3, #32
    8be4:	6822      	ldr	r2, [r4, #0]
    8be6:	439a      	bics	r2, r3
    8be8:	6022      	str	r2, [r4, #0]
    8bea:	0023      	movs	r3, r4
    8bec:	2200      	movs	r2, #0
    8bee:	3343      	adds	r3, #67	; 0x43
    8bf0:	701a      	strb	r2, [r3, #0]
    8bf2:	e002      	b.n	8bfa <_printf_i+0x116>
    8bf4:	270a      	movs	r7, #10
    8bf6:	4b4a      	ldr	r3, [pc, #296]	; (8d20 <_printf_i+0x23c>)
    8bf8:	9303      	str	r3, [sp, #12]
    8bfa:	6863      	ldr	r3, [r4, #4]
    8bfc:	60a3      	str	r3, [r4, #8]
    8bfe:	2b00      	cmp	r3, #0
    8c00:	db09      	blt.n	8c16 <_printf_i+0x132>
    8c02:	2204      	movs	r2, #4
    8c04:	6821      	ldr	r1, [r4, #0]
    8c06:	4391      	bics	r1, r2
    8c08:	6021      	str	r1, [r4, #0]
    8c0a:	2d00      	cmp	r5, #0
    8c0c:	d105      	bne.n	8c1a <_printf_i+0x136>
    8c0e:	9e04      	ldr	r6, [sp, #16]
    8c10:	2b00      	cmp	r3, #0
    8c12:	d011      	beq.n	8c38 <_printf_i+0x154>
    8c14:	e07b      	b.n	8d0e <_printf_i+0x22a>
    8c16:	2d00      	cmp	r5, #0
    8c18:	d079      	beq.n	8d0e <_printf_i+0x22a>
    8c1a:	9e04      	ldr	r6, [sp, #16]
    8c1c:	0028      	movs	r0, r5
    8c1e:	0039      	movs	r1, r7
    8c20:	f7fd fc7e 	bl	6520 <__aeabi_uidivmod>
    8c24:	9b03      	ldr	r3, [sp, #12]
    8c26:	3e01      	subs	r6, #1
    8c28:	5c5b      	ldrb	r3, [r3, r1]
    8c2a:	0028      	movs	r0, r5
    8c2c:	7033      	strb	r3, [r6, #0]
    8c2e:	0039      	movs	r1, r7
    8c30:	f7fd fbf0 	bl	6414 <__aeabi_uidiv>
    8c34:	1e05      	subs	r5, r0, #0
    8c36:	d1f1      	bne.n	8c1c <_printf_i+0x138>
    8c38:	2f08      	cmp	r7, #8
    8c3a:	d109      	bne.n	8c50 <_printf_i+0x16c>
    8c3c:	6823      	ldr	r3, [r4, #0]
    8c3e:	07db      	lsls	r3, r3, #31
    8c40:	d506      	bpl.n	8c50 <_printf_i+0x16c>
    8c42:	6863      	ldr	r3, [r4, #4]
    8c44:	6922      	ldr	r2, [r4, #16]
    8c46:	4293      	cmp	r3, r2
    8c48:	dc02      	bgt.n	8c50 <_printf_i+0x16c>
    8c4a:	2330      	movs	r3, #48	; 0x30
    8c4c:	3e01      	subs	r6, #1
    8c4e:	7033      	strb	r3, [r6, #0]
    8c50:	9b04      	ldr	r3, [sp, #16]
    8c52:	1b9b      	subs	r3, r3, r6
    8c54:	6123      	str	r3, [r4, #16]
    8c56:	e02b      	b.n	8cb0 <_printf_i+0x1cc>
    8c58:	6809      	ldr	r1, [r1, #0]
    8c5a:	681a      	ldr	r2, [r3, #0]
    8c5c:	0608      	lsls	r0, r1, #24
    8c5e:	d407      	bmi.n	8c70 <_printf_i+0x18c>
    8c60:	0649      	lsls	r1, r1, #25
    8c62:	d505      	bpl.n	8c70 <_printf_i+0x18c>
    8c64:	1d11      	adds	r1, r2, #4
    8c66:	6019      	str	r1, [r3, #0]
    8c68:	6813      	ldr	r3, [r2, #0]
    8c6a:	8aa2      	ldrh	r2, [r4, #20]
    8c6c:	801a      	strh	r2, [r3, #0]
    8c6e:	e004      	b.n	8c7a <_printf_i+0x196>
    8c70:	1d11      	adds	r1, r2, #4
    8c72:	6019      	str	r1, [r3, #0]
    8c74:	6813      	ldr	r3, [r2, #0]
    8c76:	6962      	ldr	r2, [r4, #20]
    8c78:	601a      	str	r2, [r3, #0]
    8c7a:	2300      	movs	r3, #0
    8c7c:	9e04      	ldr	r6, [sp, #16]
    8c7e:	6123      	str	r3, [r4, #16]
    8c80:	e016      	b.n	8cb0 <_printf_i+0x1cc>
    8c82:	681a      	ldr	r2, [r3, #0]
    8c84:	1d11      	adds	r1, r2, #4
    8c86:	6019      	str	r1, [r3, #0]
    8c88:	6816      	ldr	r6, [r2, #0]
    8c8a:	2100      	movs	r1, #0
    8c8c:	6862      	ldr	r2, [r4, #4]
    8c8e:	0030      	movs	r0, r6
    8c90:	f000 fb32 	bl	92f8 <memchr>
    8c94:	2800      	cmp	r0, #0
    8c96:	d001      	beq.n	8c9c <_printf_i+0x1b8>
    8c98:	1b80      	subs	r0, r0, r6
    8c9a:	6060      	str	r0, [r4, #4]
    8c9c:	6863      	ldr	r3, [r4, #4]
    8c9e:	e003      	b.n	8ca8 <_printf_i+0x1c4>
    8ca0:	0026      	movs	r6, r4
    8ca2:	3642      	adds	r6, #66	; 0x42
    8ca4:	7032      	strb	r2, [r6, #0]
    8ca6:	2301      	movs	r3, #1
    8ca8:	6123      	str	r3, [r4, #16]
    8caa:	2300      	movs	r3, #0
    8cac:	9a04      	ldr	r2, [sp, #16]
    8cae:	7013      	strb	r3, [r2, #0]
    8cb0:	9b07      	ldr	r3, [sp, #28]
    8cb2:	aa09      	add	r2, sp, #36	; 0x24
    8cb4:	9300      	str	r3, [sp, #0]
    8cb6:	0021      	movs	r1, r4
    8cb8:	9b06      	ldr	r3, [sp, #24]
    8cba:	9805      	ldr	r0, [sp, #20]
    8cbc:	f7ff fea4 	bl	8a08 <_printf_common>
    8cc0:	1c43      	adds	r3, r0, #1
    8cc2:	d102      	bne.n	8cca <_printf_i+0x1e6>
    8cc4:	2001      	movs	r0, #1
    8cc6:	4240      	negs	r0, r0
    8cc8:	e027      	b.n	8d1a <_printf_i+0x236>
    8cca:	6923      	ldr	r3, [r4, #16]
    8ccc:	0032      	movs	r2, r6
    8cce:	9906      	ldr	r1, [sp, #24]
    8cd0:	9805      	ldr	r0, [sp, #20]
    8cd2:	9d07      	ldr	r5, [sp, #28]
    8cd4:	47a8      	blx	r5
    8cd6:	1c43      	adds	r3, r0, #1
    8cd8:	d0f4      	beq.n	8cc4 <_printf_i+0x1e0>
    8cda:	6823      	ldr	r3, [r4, #0]
    8cdc:	2500      	movs	r5, #0
    8cde:	079b      	lsls	r3, r3, #30
    8ce0:	d40f      	bmi.n	8d02 <_printf_i+0x21e>
    8ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8ce4:	68e0      	ldr	r0, [r4, #12]
    8ce6:	4298      	cmp	r0, r3
    8ce8:	da17      	bge.n	8d1a <_printf_i+0x236>
    8cea:	0018      	movs	r0, r3
    8cec:	e015      	b.n	8d1a <_printf_i+0x236>
    8cee:	0022      	movs	r2, r4
    8cf0:	2301      	movs	r3, #1
    8cf2:	3219      	adds	r2, #25
    8cf4:	9906      	ldr	r1, [sp, #24]
    8cf6:	9805      	ldr	r0, [sp, #20]
    8cf8:	9e07      	ldr	r6, [sp, #28]
    8cfa:	47b0      	blx	r6
    8cfc:	1c43      	adds	r3, r0, #1
    8cfe:	d0e1      	beq.n	8cc4 <_printf_i+0x1e0>
    8d00:	3501      	adds	r5, #1
    8d02:	68e3      	ldr	r3, [r4, #12]
    8d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8d06:	1a9b      	subs	r3, r3, r2
    8d08:	429d      	cmp	r5, r3
    8d0a:	dbf0      	blt.n	8cee <_printf_i+0x20a>
    8d0c:	e7e9      	b.n	8ce2 <_printf_i+0x1fe>
    8d0e:	0026      	movs	r6, r4
    8d10:	9b03      	ldr	r3, [sp, #12]
    8d12:	3642      	adds	r6, #66	; 0x42
    8d14:	781b      	ldrb	r3, [r3, #0]
    8d16:	7033      	strb	r3, [r6, #0]
    8d18:	e78e      	b.n	8c38 <_printf_i+0x154>
    8d1a:	b00b      	add	sp, #44	; 0x2c
    8d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d1e:	46c0      	nop			; (mov r8, r8)
    8d20:	00009b57 	.word	0x00009b57
    8d24:	00009b68 	.word	0x00009b68

00008d28 <_scanf_chars>:
    8d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8d2a:	0015      	movs	r5, r2
    8d2c:	688a      	ldr	r2, [r1, #8]
    8d2e:	9001      	str	r0, [sp, #4]
    8d30:	000c      	movs	r4, r1
    8d32:	2a00      	cmp	r2, #0
    8d34:	d106      	bne.n	8d44 <_scanf_chars+0x1c>
    8d36:	698a      	ldr	r2, [r1, #24]
    8d38:	1e51      	subs	r1, r2, #1
    8d3a:	418a      	sbcs	r2, r1
    8d3c:	2101      	movs	r1, #1
    8d3e:	4252      	negs	r2, r2
    8d40:	430a      	orrs	r2, r1
    8d42:	60a2      	str	r2, [r4, #8]
    8d44:	6822      	ldr	r2, [r4, #0]
    8d46:	06d2      	lsls	r2, r2, #27
    8d48:	d403      	bmi.n	8d52 <_scanf_chars+0x2a>
    8d4a:	681a      	ldr	r2, [r3, #0]
    8d4c:	1d11      	adds	r1, r2, #4
    8d4e:	6019      	str	r1, [r3, #0]
    8d50:	6817      	ldr	r7, [r2, #0]
    8d52:	2600      	movs	r6, #0
    8d54:	69a0      	ldr	r0, [r4, #24]
    8d56:	2800      	cmp	r0, #0
    8d58:	d11e      	bne.n	8d98 <_scanf_chars+0x70>
    8d5a:	2210      	movs	r2, #16
    8d5c:	6823      	ldr	r3, [r4, #0]
    8d5e:	3601      	adds	r6, #1
    8d60:	4213      	tst	r3, r2
    8d62:	d103      	bne.n	8d6c <_scanf_chars+0x44>
    8d64:	682b      	ldr	r3, [r5, #0]
    8d66:	781b      	ldrb	r3, [r3, #0]
    8d68:	703b      	strb	r3, [r7, #0]
    8d6a:	3701      	adds	r7, #1
    8d6c:	682a      	ldr	r2, [r5, #0]
    8d6e:	686b      	ldr	r3, [r5, #4]
    8d70:	3201      	adds	r2, #1
    8d72:	602a      	str	r2, [r5, #0]
    8d74:	68a2      	ldr	r2, [r4, #8]
    8d76:	3b01      	subs	r3, #1
    8d78:	3a01      	subs	r2, #1
    8d7a:	606b      	str	r3, [r5, #4]
    8d7c:	60a2      	str	r2, [r4, #8]
    8d7e:	2a00      	cmp	r2, #0
    8d80:	d01e      	beq.n	8dc0 <_scanf_chars+0x98>
    8d82:	2b00      	cmp	r3, #0
    8d84:	dce6      	bgt.n	8d54 <_scanf_chars+0x2c>
    8d86:	23c0      	movs	r3, #192	; 0xc0
    8d88:	005b      	lsls	r3, r3, #1
    8d8a:	58e3      	ldr	r3, [r4, r3]
    8d8c:	0029      	movs	r1, r5
    8d8e:	9801      	ldr	r0, [sp, #4]
    8d90:	4798      	blx	r3
    8d92:	2800      	cmp	r0, #0
    8d94:	d0de      	beq.n	8d54 <_scanf_chars+0x2c>
    8d96:	e013      	b.n	8dc0 <_scanf_chars+0x98>
    8d98:	2801      	cmp	r0, #1
    8d9a:	d106      	bne.n	8daa <_scanf_chars+0x82>
    8d9c:	682b      	ldr	r3, [r5, #0]
    8d9e:	6962      	ldr	r2, [r4, #20]
    8da0:	781b      	ldrb	r3, [r3, #0]
    8da2:	5cd3      	ldrb	r3, [r2, r3]
    8da4:	2b00      	cmp	r3, #0
    8da6:	d1d8      	bne.n	8d5a <_scanf_chars+0x32>
    8da8:	e01a      	b.n	8de0 <_scanf_chars+0xb8>
    8daa:	2802      	cmp	r0, #2
    8dac:	d108      	bne.n	8dc0 <_scanf_chars+0x98>
    8dae:	682b      	ldr	r3, [r5, #0]
    8db0:	4a0d      	ldr	r2, [pc, #52]	; (8de8 <_scanf_chars+0xc0>)
    8db2:	781b      	ldrb	r3, [r3, #0]
    8db4:	6812      	ldr	r2, [r2, #0]
    8db6:	18d3      	adds	r3, r2, r3
    8db8:	2208      	movs	r2, #8
    8dba:	785b      	ldrb	r3, [r3, #1]
    8dbc:	4213      	tst	r3, r2
    8dbe:	d0cc      	beq.n	8d5a <_scanf_chars+0x32>
    8dc0:	2310      	movs	r3, #16
    8dc2:	6822      	ldr	r2, [r4, #0]
    8dc4:	4013      	ands	r3, r2
    8dc6:	d106      	bne.n	8dd6 <_scanf_chars+0xae>
    8dc8:	68e2      	ldr	r2, [r4, #12]
    8dca:	3201      	adds	r2, #1
    8dcc:	60e2      	str	r2, [r4, #12]
    8dce:	69a2      	ldr	r2, [r4, #24]
    8dd0:	2a00      	cmp	r2, #0
    8dd2:	d000      	beq.n	8dd6 <_scanf_chars+0xae>
    8dd4:	703b      	strb	r3, [r7, #0]
    8dd6:	6923      	ldr	r3, [r4, #16]
    8dd8:	2000      	movs	r0, #0
    8dda:	199e      	adds	r6, r3, r6
    8ddc:	6126      	str	r6, [r4, #16]
    8dde:	e001      	b.n	8de4 <_scanf_chars+0xbc>
    8de0:	2e00      	cmp	r6, #0
    8de2:	d1ed      	bne.n	8dc0 <_scanf_chars+0x98>
    8de4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8de6:	46c0      	nop			; (mov r8, r8)
    8de8:	200000f8 	.word	0x200000f8

00008dec <_scanf_i>:
    8dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    8dee:	000c      	movs	r4, r1
    8df0:	b08d      	sub	sp, #52	; 0x34
    8df2:	9302      	str	r3, [sp, #8]
    8df4:	4b77      	ldr	r3, [pc, #476]	; (8fd4 <_scanf_i+0x1e8>)
    8df6:	9005      	str	r0, [sp, #20]
    8df8:	0016      	movs	r6, r2
    8dfa:	aa09      	add	r2, sp, #36	; 0x24
    8dfc:	cb23      	ldmia	r3!, {r0, r1, r5}
    8dfe:	c223      	stmia	r2!, {r0, r1, r5}
    8e00:	4b75      	ldr	r3, [pc, #468]	; (8fd8 <_scanf_i+0x1ec>)
    8e02:	9306      	str	r3, [sp, #24]
    8e04:	69a3      	ldr	r3, [r4, #24]
    8e06:	2b03      	cmp	r3, #3
    8e08:	d001      	beq.n	8e0e <_scanf_i+0x22>
    8e0a:	4b74      	ldr	r3, [pc, #464]	; (8fdc <_scanf_i+0x1f0>)
    8e0c:	9306      	str	r3, [sp, #24]
    8e0e:	2200      	movs	r2, #0
    8e10:	68a3      	ldr	r3, [r4, #8]
    8e12:	9204      	str	r2, [sp, #16]
    8e14:	325d      	adds	r2, #93	; 0x5d
    8e16:	1e59      	subs	r1, r3, #1
    8e18:	32ff      	adds	r2, #255	; 0xff
    8e1a:	4291      	cmp	r1, r2
    8e1c:	d905      	bls.n	8e2a <_scanf_i+0x3e>
    8e1e:	3b5e      	subs	r3, #94	; 0x5e
    8e20:	3bff      	subs	r3, #255	; 0xff
    8e22:	9304      	str	r3, [sp, #16]
    8e24:	235e      	movs	r3, #94	; 0x5e
    8e26:	33ff      	adds	r3, #255	; 0xff
    8e28:	60a3      	str	r3, [r4, #8]
    8e2a:	0023      	movs	r3, r4
    8e2c:	331c      	adds	r3, #28
    8e2e:	9301      	str	r3, [sp, #4]
    8e30:	23d0      	movs	r3, #208	; 0xd0
    8e32:	2700      	movs	r7, #0
    8e34:	6822      	ldr	r2, [r4, #0]
    8e36:	011b      	lsls	r3, r3, #4
    8e38:	4313      	orrs	r3, r2
    8e3a:	6023      	str	r3, [r4, #0]
    8e3c:	9b01      	ldr	r3, [sp, #4]
    8e3e:	9303      	str	r3, [sp, #12]
    8e40:	6833      	ldr	r3, [r6, #0]
    8e42:	a809      	add	r0, sp, #36	; 0x24
    8e44:	7819      	ldrb	r1, [r3, #0]
    8e46:	00bb      	lsls	r3, r7, #2
    8e48:	2202      	movs	r2, #2
    8e4a:	5818      	ldr	r0, [r3, r0]
    8e4c:	f000 fa54 	bl	92f8 <memchr>
    8e50:	2800      	cmp	r0, #0
    8e52:	d03b      	beq.n	8ecc <_scanf_i+0xe0>
    8e54:	2f01      	cmp	r7, #1
    8e56:	d10d      	bne.n	8e74 <_scanf_i+0x88>
    8e58:	6863      	ldr	r3, [r4, #4]
    8e5a:	2b00      	cmp	r3, #0
    8e5c:	d106      	bne.n	8e6c <_scanf_i+0x80>
    8e5e:	3308      	adds	r3, #8
    8e60:	6822      	ldr	r2, [r4, #0]
    8e62:	6063      	str	r3, [r4, #4]
    8e64:	33f9      	adds	r3, #249	; 0xf9
    8e66:	33ff      	adds	r3, #255	; 0xff
    8e68:	4313      	orrs	r3, r2
    8e6a:	6023      	str	r3, [r4, #0]
    8e6c:	4b5c      	ldr	r3, [pc, #368]	; (8fe0 <_scanf_i+0x1f4>)
    8e6e:	6822      	ldr	r2, [r4, #0]
    8e70:	4013      	ands	r3, r2
    8e72:	e00e      	b.n	8e92 <_scanf_i+0xa6>
    8e74:	2f02      	cmp	r7, #2
    8e76:	d10d      	bne.n	8e94 <_scanf_i+0xa8>
    8e78:	21c0      	movs	r1, #192	; 0xc0
    8e7a:	2280      	movs	r2, #128	; 0x80
    8e7c:	6823      	ldr	r3, [r4, #0]
    8e7e:	00c9      	lsls	r1, r1, #3
    8e80:	4019      	ands	r1, r3
    8e82:	0092      	lsls	r2, r2, #2
    8e84:	4291      	cmp	r1, r2
    8e86:	d124      	bne.n	8ed2 <_scanf_i+0xe6>
    8e88:	3af1      	subs	r2, #241	; 0xf1
    8e8a:	3aff      	subs	r2, #255	; 0xff
    8e8c:	6062      	str	r2, [r4, #4]
    8e8e:	32f0      	adds	r2, #240	; 0xf0
    8e90:	4313      	orrs	r3, r2
    8e92:	6023      	str	r3, [r4, #0]
    8e94:	68a3      	ldr	r3, [r4, #8]
    8e96:	1e5a      	subs	r2, r3, #1
    8e98:	60a2      	str	r2, [r4, #8]
    8e9a:	2b00      	cmp	r3, #0
    8e9c:	d016      	beq.n	8ecc <_scanf_i+0xe0>
    8e9e:	9b03      	ldr	r3, [sp, #12]
    8ea0:	1c5d      	adds	r5, r3, #1
    8ea2:	6833      	ldr	r3, [r6, #0]
    8ea4:	1c5a      	adds	r2, r3, #1
    8ea6:	6032      	str	r2, [r6, #0]
    8ea8:	781b      	ldrb	r3, [r3, #0]
    8eaa:	9a03      	ldr	r2, [sp, #12]
    8eac:	9503      	str	r5, [sp, #12]
    8eae:	7013      	strb	r3, [r2, #0]
    8eb0:	6873      	ldr	r3, [r6, #4]
    8eb2:	3b01      	subs	r3, #1
    8eb4:	6073      	str	r3, [r6, #4]
    8eb6:	2b00      	cmp	r3, #0
    8eb8:	dc08      	bgt.n	8ecc <_scanf_i+0xe0>
    8eba:	23c0      	movs	r3, #192	; 0xc0
    8ebc:	005b      	lsls	r3, r3, #1
    8ebe:	58e3      	ldr	r3, [r4, r3]
    8ec0:	0031      	movs	r1, r6
    8ec2:	9805      	ldr	r0, [sp, #20]
    8ec4:	9307      	str	r3, [sp, #28]
    8ec6:	4798      	blx	r3
    8ec8:	2800      	cmp	r0, #0
    8eca:	d147      	bne.n	8f5c <_scanf_i+0x170>
    8ecc:	3701      	adds	r7, #1
    8ece:	2f03      	cmp	r7, #3
    8ed0:	d1b6      	bne.n	8e40 <_scanf_i+0x54>
    8ed2:	6863      	ldr	r3, [r4, #4]
    8ed4:	2b00      	cmp	r3, #0
    8ed6:	d101      	bne.n	8edc <_scanf_i+0xf0>
    8ed8:	330a      	adds	r3, #10
    8eda:	6063      	str	r3, [r4, #4]
    8edc:	2110      	movs	r1, #16
    8ede:	2700      	movs	r7, #0
    8ee0:	6863      	ldr	r3, [r4, #4]
    8ee2:	6960      	ldr	r0, [r4, #20]
    8ee4:	1ac9      	subs	r1, r1, r3
    8ee6:	4b3f      	ldr	r3, [pc, #252]	; (8fe4 <_scanf_i+0x1f8>)
    8ee8:	18c9      	adds	r1, r1, r3
    8eea:	f000 f87f 	bl	8fec <__sccl>
    8eee:	9d03      	ldr	r5, [sp, #12]
    8ef0:	68a3      	ldr	r3, [r4, #8]
    8ef2:	2b00      	cmp	r3, #0
    8ef4:	d033      	beq.n	8f5e <_scanf_i+0x172>
    8ef6:	6832      	ldr	r2, [r6, #0]
    8ef8:	6960      	ldr	r0, [r4, #20]
    8efa:	7811      	ldrb	r1, [r2, #0]
    8efc:	5c40      	ldrb	r0, [r0, r1]
    8efe:	2800      	cmp	r0, #0
    8f00:	d02d      	beq.n	8f5e <_scanf_i+0x172>
    8f02:	2930      	cmp	r1, #48	; 0x30
    8f04:	d10d      	bne.n	8f22 <_scanf_i+0x136>
    8f06:	2080      	movs	r0, #128	; 0x80
    8f08:	6821      	ldr	r1, [r4, #0]
    8f0a:	0100      	lsls	r0, r0, #4
    8f0c:	4201      	tst	r1, r0
    8f0e:	d008      	beq.n	8f22 <_scanf_i+0x136>
    8f10:	9a04      	ldr	r2, [sp, #16]
    8f12:	3701      	adds	r7, #1
    8f14:	2a00      	cmp	r2, #0
    8f16:	d00b      	beq.n	8f30 <_scanf_i+0x144>
    8f18:	3a01      	subs	r2, #1
    8f1a:	3301      	adds	r3, #1
    8f1c:	9204      	str	r2, [sp, #16]
    8f1e:	60a3      	str	r3, [r4, #8]
    8f20:	e006      	b.n	8f30 <_scanf_i+0x144>
    8f22:	6821      	ldr	r1, [r4, #0]
    8f24:	4b30      	ldr	r3, [pc, #192]	; (8fe8 <_scanf_i+0x1fc>)
    8f26:	400b      	ands	r3, r1
    8f28:	6023      	str	r3, [r4, #0]
    8f2a:	7813      	ldrb	r3, [r2, #0]
    8f2c:	702b      	strb	r3, [r5, #0]
    8f2e:	3501      	adds	r5, #1
    8f30:	6873      	ldr	r3, [r6, #4]
    8f32:	3b01      	subs	r3, #1
    8f34:	6073      	str	r3, [r6, #4]
    8f36:	2b00      	cmp	r3, #0
    8f38:	dd03      	ble.n	8f42 <_scanf_i+0x156>
    8f3a:	6833      	ldr	r3, [r6, #0]
    8f3c:	3301      	adds	r3, #1
    8f3e:	6033      	str	r3, [r6, #0]
    8f40:	e008      	b.n	8f54 <_scanf_i+0x168>
    8f42:	23c0      	movs	r3, #192	; 0xc0
    8f44:	005b      	lsls	r3, r3, #1
    8f46:	58e3      	ldr	r3, [r4, r3]
    8f48:	0031      	movs	r1, r6
    8f4a:	9805      	ldr	r0, [sp, #20]
    8f4c:	9303      	str	r3, [sp, #12]
    8f4e:	4798      	blx	r3
    8f50:	2800      	cmp	r0, #0
    8f52:	d104      	bne.n	8f5e <_scanf_i+0x172>
    8f54:	68a3      	ldr	r3, [r4, #8]
    8f56:	3b01      	subs	r3, #1
    8f58:	60a3      	str	r3, [r4, #8]
    8f5a:	e7c9      	b.n	8ef0 <_scanf_i+0x104>
    8f5c:	2700      	movs	r7, #0
    8f5e:	6823      	ldr	r3, [r4, #0]
    8f60:	05db      	lsls	r3, r3, #23
    8f62:	d50e      	bpl.n	8f82 <_scanf_i+0x196>
    8f64:	9b01      	ldr	r3, [sp, #4]
    8f66:	429d      	cmp	r5, r3
    8f68:	d907      	bls.n	8f7a <_scanf_i+0x18e>
    8f6a:	23be      	movs	r3, #190	; 0xbe
    8f6c:	3d01      	subs	r5, #1
    8f6e:	005b      	lsls	r3, r3, #1
    8f70:	7829      	ldrb	r1, [r5, #0]
    8f72:	58e3      	ldr	r3, [r4, r3]
    8f74:	0032      	movs	r2, r6
    8f76:	9805      	ldr	r0, [sp, #20]
    8f78:	4798      	blx	r3
    8f7a:	9b01      	ldr	r3, [sp, #4]
    8f7c:	2001      	movs	r0, #1
    8f7e:	429d      	cmp	r5, r3
    8f80:	d025      	beq.n	8fce <_scanf_i+0x1e2>
    8f82:	2210      	movs	r2, #16
    8f84:	6823      	ldr	r3, [r4, #0]
    8f86:	401a      	ands	r2, r3
    8f88:	d11a      	bne.n	8fc0 <_scanf_i+0x1d4>
    8f8a:	702a      	strb	r2, [r5, #0]
    8f8c:	6863      	ldr	r3, [r4, #4]
    8f8e:	9901      	ldr	r1, [sp, #4]
    8f90:	9805      	ldr	r0, [sp, #20]
    8f92:	9e06      	ldr	r6, [sp, #24]
    8f94:	47b0      	blx	r6
    8f96:	9b02      	ldr	r3, [sp, #8]
    8f98:	6822      	ldr	r2, [r4, #0]
    8f9a:	681b      	ldr	r3, [r3, #0]
    8f9c:	0691      	lsls	r1, r2, #26
    8f9e:	d407      	bmi.n	8fb0 <_scanf_i+0x1c4>
    8fa0:	07d1      	lsls	r1, r2, #31
    8fa2:	d505      	bpl.n	8fb0 <_scanf_i+0x1c4>
    8fa4:	9902      	ldr	r1, [sp, #8]
    8fa6:	1d1a      	adds	r2, r3, #4
    8fa8:	600a      	str	r2, [r1, #0]
    8faa:	681b      	ldr	r3, [r3, #0]
    8fac:	8018      	strh	r0, [r3, #0]
    8fae:	e004      	b.n	8fba <_scanf_i+0x1ce>
    8fb0:	9902      	ldr	r1, [sp, #8]
    8fb2:	1d1a      	adds	r2, r3, #4
    8fb4:	600a      	str	r2, [r1, #0]
    8fb6:	681b      	ldr	r3, [r3, #0]
    8fb8:	6018      	str	r0, [r3, #0]
    8fba:	68e3      	ldr	r3, [r4, #12]
    8fbc:	3301      	adds	r3, #1
    8fbe:	60e3      	str	r3, [r4, #12]
    8fc0:	2000      	movs	r0, #0
    8fc2:	9b01      	ldr	r3, [sp, #4]
    8fc4:	1aed      	subs	r5, r5, r3
    8fc6:	6923      	ldr	r3, [r4, #16]
    8fc8:	19ed      	adds	r5, r5, r7
    8fca:	195d      	adds	r5, r3, r5
    8fcc:	6125      	str	r5, [r4, #16]
    8fce:	b00d      	add	sp, #52	; 0x34
    8fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8fd2:	46c0      	nop			; (mov r8, r8)
    8fd4:	00009b7c 	.word	0x00009b7c
    8fd8:	00009051 	.word	0x00009051
    8fdc:	00009175 	.word	0x00009175
    8fe0:	fffffaff 	.word	0xfffffaff
    8fe4:	00009b88 	.word	0x00009b88
    8fe8:	fffff6ff 	.word	0xfffff6ff

00008fec <__sccl>:
    8fec:	b570      	push	{r4, r5, r6, lr}
    8fee:	780b      	ldrb	r3, [r1, #0]
    8ff0:	2b5e      	cmp	r3, #94	; 0x5e
    8ff2:	d002      	beq.n	8ffa <__sccl+0xe>
    8ff4:	1c4a      	adds	r2, r1, #1
    8ff6:	2500      	movs	r5, #0
    8ff8:	e002      	b.n	9000 <__sccl+0x14>
    8ffa:	2501      	movs	r5, #1
    8ffc:	784b      	ldrb	r3, [r1, #1]
    8ffe:	1c8a      	adds	r2, r1, #2
    9000:	0001      	movs	r1, r0
    9002:	1c44      	adds	r4, r0, #1
    9004:	34ff      	adds	r4, #255	; 0xff
    9006:	700d      	strb	r5, [r1, #0]
    9008:	3101      	adds	r1, #1
    900a:	42a1      	cmp	r1, r4
    900c:	d1fb      	bne.n	9006 <__sccl+0x1a>
    900e:	2b00      	cmp	r3, #0
    9010:	d101      	bne.n	9016 <__sccl+0x2a>
    9012:	1e50      	subs	r0, r2, #1
    9014:	e01b      	b.n	904e <__sccl+0x62>
    9016:	2101      	movs	r1, #1
    9018:	404d      	eors	r5, r1
    901a:	0011      	movs	r1, r2
    901c:	54c5      	strb	r5, [r0, r3]
    901e:	780c      	ldrb	r4, [r1, #0]
    9020:	1c4a      	adds	r2, r1, #1
    9022:	2c2d      	cmp	r4, #45	; 0x2d
    9024:	d007      	beq.n	9036 <__sccl+0x4a>
    9026:	2c5d      	cmp	r4, #93	; 0x5d
    9028:	d010      	beq.n	904c <__sccl+0x60>
    902a:	2c00      	cmp	r4, #0
    902c:	d001      	beq.n	9032 <__sccl+0x46>
    902e:	0023      	movs	r3, r4
    9030:	e7f3      	b.n	901a <__sccl+0x2e>
    9032:	0008      	movs	r0, r1
    9034:	e00b      	b.n	904e <__sccl+0x62>
    9036:	784e      	ldrb	r6, [r1, #1]
    9038:	2e5d      	cmp	r6, #93	; 0x5d
    903a:	d0f8      	beq.n	902e <__sccl+0x42>
    903c:	42b3      	cmp	r3, r6
    903e:	dcf6      	bgt.n	902e <__sccl+0x42>
    9040:	3102      	adds	r1, #2
    9042:	3301      	adds	r3, #1
    9044:	54c5      	strb	r5, [r0, r3]
    9046:	429e      	cmp	r6, r3
    9048:	dcfb      	bgt.n	9042 <__sccl+0x56>
    904a:	e7e8      	b.n	901e <__sccl+0x32>
    904c:	0010      	movs	r0, r2
    904e:	bd70      	pop	{r4, r5, r6, pc}

00009050 <_strtol_r>:
    9050:	b5f0      	push	{r4, r5, r6, r7, lr}
    9052:	001e      	movs	r6, r3
    9054:	4b45      	ldr	r3, [pc, #276]	; (916c <_strtol_r+0x11c>)
    9056:	b087      	sub	sp, #28
    9058:	681b      	ldr	r3, [r3, #0]
    905a:	9201      	str	r2, [sp, #4]
    905c:	9302      	str	r3, [sp, #8]
    905e:	2208      	movs	r2, #8
    9060:	000b      	movs	r3, r1
    9062:	9005      	str	r0, [sp, #20]
    9064:	9103      	str	r1, [sp, #12]
    9066:	781c      	ldrb	r4, [r3, #0]
    9068:	9902      	ldr	r1, [sp, #8]
    906a:	1c5d      	adds	r5, r3, #1
    906c:	1909      	adds	r1, r1, r4
    906e:	7848      	ldrb	r0, [r1, #1]
    9070:	4010      	ands	r0, r2
    9072:	d001      	beq.n	9078 <_strtol_r+0x28>
    9074:	002b      	movs	r3, r5
    9076:	e7f6      	b.n	9066 <_strtol_r+0x16>
    9078:	2c2d      	cmp	r4, #45	; 0x2d
    907a:	d104      	bne.n	9086 <_strtol_r+0x36>
    907c:	1c9d      	adds	r5, r3, #2
    907e:	785c      	ldrb	r4, [r3, #1]
    9080:	2301      	movs	r3, #1
    9082:	9300      	str	r3, [sp, #0]
    9084:	e004      	b.n	9090 <_strtol_r+0x40>
    9086:	9000      	str	r0, [sp, #0]
    9088:	2c2b      	cmp	r4, #43	; 0x2b
    908a:	d101      	bne.n	9090 <_strtol_r+0x40>
    908c:	785c      	ldrb	r4, [r3, #1]
    908e:	1c9d      	adds	r5, r3, #2
    9090:	2e00      	cmp	r6, #0
    9092:	d002      	beq.n	909a <_strtol_r+0x4a>
    9094:	2e10      	cmp	r6, #16
    9096:	d10a      	bne.n	90ae <_strtol_r+0x5e>
    9098:	e062      	b.n	9160 <_strtol_r+0x110>
    909a:	2c30      	cmp	r4, #48	; 0x30
    909c:	d15e      	bne.n	915c <_strtol_r+0x10c>
    909e:	2220      	movs	r2, #32
    90a0:	782b      	ldrb	r3, [r5, #0]
    90a2:	4393      	bics	r3, r2
    90a4:	2b58      	cmp	r3, #88	; 0x58
    90a6:	d154      	bne.n	9152 <_strtol_r+0x102>
    90a8:	2610      	movs	r6, #16
    90aa:	786c      	ldrb	r4, [r5, #1]
    90ac:	3502      	adds	r5, #2
    90ae:	9f00      	ldr	r7, [sp, #0]
    90b0:	0031      	movs	r1, r6
    90b2:	1e7b      	subs	r3, r7, #1
    90b4:	419f      	sbcs	r7, r3
    90b6:	4b2e      	ldr	r3, [pc, #184]	; (9170 <_strtol_r+0x120>)
    90b8:	18ff      	adds	r7, r7, r3
    90ba:	0038      	movs	r0, r7
    90bc:	f7fd fa30 	bl	6520 <__aeabi_uidivmod>
    90c0:	0038      	movs	r0, r7
    90c2:	9104      	str	r1, [sp, #16]
    90c4:	0031      	movs	r1, r6
    90c6:	f7fd f9a5 	bl	6414 <__aeabi_uidiv>
    90ca:	2300      	movs	r3, #0
    90cc:	2203      	movs	r2, #3
    90ce:	0007      	movs	r7, r0
    90d0:	4694      	mov	ip, r2
    90d2:	0018      	movs	r0, r3
    90d4:	9a02      	ldr	r2, [sp, #8]
    90d6:	1912      	adds	r2, r2, r4
    90d8:	7851      	ldrb	r1, [r2, #1]
    90da:	2204      	movs	r2, #4
    90dc:	4211      	tst	r1, r2
    90de:	d001      	beq.n	90e4 <_strtol_r+0x94>
    90e0:	3c30      	subs	r4, #48	; 0x30
    90e2:	e007      	b.n	90f4 <_strtol_r+0xa4>
    90e4:	4662      	mov	r2, ip
    90e6:	4011      	ands	r1, r2
    90e8:	d017      	beq.n	911a <_strtol_r+0xca>
    90ea:	2237      	movs	r2, #55	; 0x37
    90ec:	2901      	cmp	r1, #1
    90ee:	d000      	beq.n	90f2 <_strtol_r+0xa2>
    90f0:	3220      	adds	r2, #32
    90f2:	1aa4      	subs	r4, r4, r2
    90f4:	42a6      	cmp	r6, r4
    90f6:	dd10      	ble.n	911a <_strtol_r+0xca>
    90f8:	1c5a      	adds	r2, r3, #1
    90fa:	d00b      	beq.n	9114 <_strtol_r+0xc4>
    90fc:	42b8      	cmp	r0, r7
    90fe:	d807      	bhi.n	9110 <_strtol_r+0xc0>
    9100:	d102      	bne.n	9108 <_strtol_r+0xb8>
    9102:	9b04      	ldr	r3, [sp, #16]
    9104:	429c      	cmp	r4, r3
    9106:	dc03      	bgt.n	9110 <_strtol_r+0xc0>
    9108:	4370      	muls	r0, r6
    910a:	2301      	movs	r3, #1
    910c:	1820      	adds	r0, r4, r0
    910e:	e001      	b.n	9114 <_strtol_r+0xc4>
    9110:	2301      	movs	r3, #1
    9112:	425b      	negs	r3, r3
    9114:	782c      	ldrb	r4, [r5, #0]
    9116:	3501      	adds	r5, #1
    9118:	e7dc      	b.n	90d4 <_strtol_r+0x84>
    911a:	1c5a      	adds	r2, r3, #1
    911c:	d10b      	bne.n	9136 <_strtol_r+0xe6>
    911e:	9800      	ldr	r0, [sp, #0]
    9120:	9a05      	ldr	r2, [sp, #20]
    9122:	1e43      	subs	r3, r0, #1
    9124:	4198      	sbcs	r0, r3
    9126:	4b12      	ldr	r3, [pc, #72]	; (9170 <_strtol_r+0x120>)
    9128:	18c0      	adds	r0, r0, r3
    912a:	2322      	movs	r3, #34	; 0x22
    912c:	6013      	str	r3, [r2, #0]
    912e:	9b01      	ldr	r3, [sp, #4]
    9130:	2b00      	cmp	r3, #0
    9132:	d10a      	bne.n	914a <_strtol_r+0xfa>
    9134:	e017      	b.n	9166 <_strtol_r+0x116>
    9136:	9a00      	ldr	r2, [sp, #0]
    9138:	2a00      	cmp	r2, #0
    913a:	d000      	beq.n	913e <_strtol_r+0xee>
    913c:	4240      	negs	r0, r0
    913e:	9a01      	ldr	r2, [sp, #4]
    9140:	2a00      	cmp	r2, #0
    9142:	d010      	beq.n	9166 <_strtol_r+0x116>
    9144:	9a03      	ldr	r2, [sp, #12]
    9146:	2b00      	cmp	r3, #0
    9148:	d000      	beq.n	914c <_strtol_r+0xfc>
    914a:	1e6a      	subs	r2, r5, #1
    914c:	9b01      	ldr	r3, [sp, #4]
    914e:	601a      	str	r2, [r3, #0]
    9150:	e009      	b.n	9166 <_strtol_r+0x116>
    9152:	2430      	movs	r4, #48	; 0x30
    9154:	2e00      	cmp	r6, #0
    9156:	d1aa      	bne.n	90ae <_strtol_r+0x5e>
    9158:	2608      	movs	r6, #8
    915a:	e7a8      	b.n	90ae <_strtol_r+0x5e>
    915c:	260a      	movs	r6, #10
    915e:	e7a6      	b.n	90ae <_strtol_r+0x5e>
    9160:	2c30      	cmp	r4, #48	; 0x30
    9162:	d09c      	beq.n	909e <_strtol_r+0x4e>
    9164:	e7a3      	b.n	90ae <_strtol_r+0x5e>
    9166:	b007      	add	sp, #28
    9168:	bdf0      	pop	{r4, r5, r6, r7, pc}
    916a:	46c0      	nop			; (mov r8, r8)
    916c:	200000f8 	.word	0x200000f8
    9170:	7fffffff 	.word	0x7fffffff

00009174 <_strtoul_r>:
    9174:	b5f0      	push	{r4, r5, r6, r7, lr}
    9176:	001e      	movs	r6, r3
    9178:	4b3f      	ldr	r3, [pc, #252]	; (9278 <_strtoul_r+0x104>)
    917a:	b087      	sub	sp, #28
    917c:	681b      	ldr	r3, [r3, #0]
    917e:	9104      	str	r1, [sp, #16]
    9180:	9302      	str	r3, [sp, #8]
    9182:	0017      	movs	r7, r2
    9184:	000b      	movs	r3, r1
    9186:	2108      	movs	r1, #8
    9188:	9005      	str	r0, [sp, #20]
    918a:	781c      	ldrb	r4, [r3, #0]
    918c:	9a02      	ldr	r2, [sp, #8]
    918e:	1c5d      	adds	r5, r3, #1
    9190:	1912      	adds	r2, r2, r4
    9192:	7852      	ldrb	r2, [r2, #1]
    9194:	400a      	ands	r2, r1
    9196:	d001      	beq.n	919c <_strtoul_r+0x28>
    9198:	002b      	movs	r3, r5
    919a:	e7f6      	b.n	918a <_strtoul_r+0x16>
    919c:	2c2d      	cmp	r4, #45	; 0x2d
    919e:	d104      	bne.n	91aa <_strtoul_r+0x36>
    91a0:	1c9d      	adds	r5, r3, #2
    91a2:	785c      	ldrb	r4, [r3, #1]
    91a4:	2301      	movs	r3, #1
    91a6:	9301      	str	r3, [sp, #4]
    91a8:	e004      	b.n	91b4 <_strtoul_r+0x40>
    91aa:	9201      	str	r2, [sp, #4]
    91ac:	2c2b      	cmp	r4, #43	; 0x2b
    91ae:	d101      	bne.n	91b4 <_strtoul_r+0x40>
    91b0:	785c      	ldrb	r4, [r3, #1]
    91b2:	1c9d      	adds	r5, r3, #2
    91b4:	2e00      	cmp	r6, #0
    91b6:	d002      	beq.n	91be <_strtoul_r+0x4a>
    91b8:	2e10      	cmp	r6, #16
    91ba:	d10a      	bne.n	91d2 <_strtoul_r+0x5e>
    91bc:	e057      	b.n	926e <_strtoul_r+0xfa>
    91be:	2c30      	cmp	r4, #48	; 0x30
    91c0:	d153      	bne.n	926a <_strtoul_r+0xf6>
    91c2:	2220      	movs	r2, #32
    91c4:	782b      	ldrb	r3, [r5, #0]
    91c6:	4393      	bics	r3, r2
    91c8:	2b58      	cmp	r3, #88	; 0x58
    91ca:	d149      	bne.n	9260 <_strtoul_r+0xec>
    91cc:	2610      	movs	r6, #16
    91ce:	786c      	ldrb	r4, [r5, #1]
    91d0:	3502      	adds	r5, #2
    91d2:	2001      	movs	r0, #1
    91d4:	0031      	movs	r1, r6
    91d6:	4240      	negs	r0, r0
    91d8:	f7fd f91c 	bl	6414 <__aeabi_uidiv>
    91dc:	9003      	str	r0, [sp, #12]
    91de:	2001      	movs	r0, #1
    91e0:	0031      	movs	r1, r6
    91e2:	4240      	negs	r0, r0
    91e4:	f7fd f99c 	bl	6520 <__aeabi_uidivmod>
    91e8:	2300      	movs	r3, #0
    91ea:	468c      	mov	ip, r1
    91ec:	0018      	movs	r0, r3
    91ee:	9a02      	ldr	r2, [sp, #8]
    91f0:	1912      	adds	r2, r2, r4
    91f2:	7851      	ldrb	r1, [r2, #1]
    91f4:	2204      	movs	r2, #4
    91f6:	4211      	tst	r1, r2
    91f8:	d001      	beq.n	91fe <_strtoul_r+0x8a>
    91fa:	3c30      	subs	r4, #48	; 0x30
    91fc:	e007      	b.n	920e <_strtoul_r+0x9a>
    91fe:	2203      	movs	r2, #3
    9200:	4011      	ands	r1, r2
    9202:	d017      	beq.n	9234 <_strtoul_r+0xc0>
    9204:	3234      	adds	r2, #52	; 0x34
    9206:	2901      	cmp	r1, #1
    9208:	d000      	beq.n	920c <_strtoul_r+0x98>
    920a:	3220      	adds	r2, #32
    920c:	1aa4      	subs	r4, r4, r2
    920e:	42a6      	cmp	r6, r4
    9210:	dd10      	ble.n	9234 <_strtoul_r+0xc0>
    9212:	2b00      	cmp	r3, #0
    9214:	db09      	blt.n	922a <_strtoul_r+0xb6>
    9216:	9b03      	ldr	r3, [sp, #12]
    9218:	4298      	cmp	r0, r3
    921a:	d806      	bhi.n	922a <_strtoul_r+0xb6>
    921c:	d101      	bne.n	9222 <_strtoul_r+0xae>
    921e:	4564      	cmp	r4, ip
    9220:	dc03      	bgt.n	922a <_strtoul_r+0xb6>
    9222:	4370      	muls	r0, r6
    9224:	2301      	movs	r3, #1
    9226:	1820      	adds	r0, r4, r0
    9228:	e001      	b.n	922e <_strtoul_r+0xba>
    922a:	2301      	movs	r3, #1
    922c:	425b      	negs	r3, r3
    922e:	782c      	ldrb	r4, [r5, #0]
    9230:	3501      	adds	r5, #1
    9232:	e7dc      	b.n	91ee <_strtoul_r+0x7a>
    9234:	2b00      	cmp	r3, #0
    9236:	da07      	bge.n	9248 <_strtoul_r+0xd4>
    9238:	2322      	movs	r3, #34	; 0x22
    923a:	2001      	movs	r0, #1
    923c:	9a05      	ldr	r2, [sp, #20]
    923e:	4240      	negs	r0, r0
    9240:	6013      	str	r3, [r2, #0]
    9242:	2f00      	cmp	r7, #0
    9244:	d109      	bne.n	925a <_strtoul_r+0xe6>
    9246:	e015      	b.n	9274 <_strtoul_r+0x100>
    9248:	9a01      	ldr	r2, [sp, #4]
    924a:	2a00      	cmp	r2, #0
    924c:	d000      	beq.n	9250 <_strtoul_r+0xdc>
    924e:	4240      	negs	r0, r0
    9250:	2f00      	cmp	r7, #0
    9252:	d00f      	beq.n	9274 <_strtoul_r+0x100>
    9254:	9a04      	ldr	r2, [sp, #16]
    9256:	2b00      	cmp	r3, #0
    9258:	d000      	beq.n	925c <_strtoul_r+0xe8>
    925a:	1e6a      	subs	r2, r5, #1
    925c:	603a      	str	r2, [r7, #0]
    925e:	e009      	b.n	9274 <_strtoul_r+0x100>
    9260:	2430      	movs	r4, #48	; 0x30
    9262:	2e00      	cmp	r6, #0
    9264:	d1b5      	bne.n	91d2 <_strtoul_r+0x5e>
    9266:	2608      	movs	r6, #8
    9268:	e7b3      	b.n	91d2 <_strtoul_r+0x5e>
    926a:	260a      	movs	r6, #10
    926c:	e7b1      	b.n	91d2 <_strtoul_r+0x5e>
    926e:	2c30      	cmp	r4, #48	; 0x30
    9270:	d0a7      	beq.n	91c2 <_strtoul_r+0x4e>
    9272:	e7ae      	b.n	91d2 <_strtoul_r+0x5e>
    9274:	b007      	add	sp, #28
    9276:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9278:	200000f8 	.word	0x200000f8

0000927c <__submore>:
    927c:	000b      	movs	r3, r1
    927e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9280:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    9282:	3344      	adds	r3, #68	; 0x44
    9284:	000c      	movs	r4, r1
    9286:	429d      	cmp	r5, r3
    9288:	d11b      	bne.n	92c2 <__submore+0x46>
    928a:	2680      	movs	r6, #128	; 0x80
    928c:	00f6      	lsls	r6, r6, #3
    928e:	0031      	movs	r1, r6
    9290:	f000 f898 	bl	93c4 <_malloc_r>
    9294:	2800      	cmp	r0, #0
    9296:	d102      	bne.n	929e <__submore+0x22>
    9298:	2001      	movs	r0, #1
    929a:	4240      	negs	r0, r0
    929c:	e025      	b.n	92ea <__submore+0x6e>
    929e:	0023      	movs	r3, r4
    92a0:	6360      	str	r0, [r4, #52]	; 0x34
    92a2:	63a6      	str	r6, [r4, #56]	; 0x38
    92a4:	3346      	adds	r3, #70	; 0x46
    92a6:	781a      	ldrb	r2, [r3, #0]
    92a8:	4b10      	ldr	r3, [pc, #64]	; (92ec <__submore+0x70>)
    92aa:	54c2      	strb	r2, [r0, r3]
    92ac:	0023      	movs	r3, r4
    92ae:	3345      	adds	r3, #69	; 0x45
    92b0:	781a      	ldrb	r2, [r3, #0]
    92b2:	4b0f      	ldr	r3, [pc, #60]	; (92f0 <__submore+0x74>)
    92b4:	54c2      	strb	r2, [r0, r3]
    92b6:	782a      	ldrb	r2, [r5, #0]
    92b8:	4b0e      	ldr	r3, [pc, #56]	; (92f4 <__submore+0x78>)
    92ba:	54c2      	strb	r2, [r0, r3]
    92bc:	18c0      	adds	r0, r0, r3
    92be:	6020      	str	r0, [r4, #0]
    92c0:	e012      	b.n	92e8 <__submore+0x6c>
    92c2:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    92c4:	0029      	movs	r1, r5
    92c6:	0073      	lsls	r3, r6, #1
    92c8:	001a      	movs	r2, r3
    92ca:	9301      	str	r3, [sp, #4]
    92cc:	f000 f8d0 	bl	9470 <_realloc_r>
    92d0:	1e05      	subs	r5, r0, #0
    92d2:	d0e1      	beq.n	9298 <__submore+0x1c>
    92d4:	1987      	adds	r7, r0, r6
    92d6:	0001      	movs	r1, r0
    92d8:	0032      	movs	r2, r6
    92da:	0038      	movs	r0, r7
    92dc:	f7fe ffea 	bl	82b4 <memcpy>
    92e0:	9b01      	ldr	r3, [sp, #4]
    92e2:	6027      	str	r7, [r4, #0]
    92e4:	6365      	str	r5, [r4, #52]	; 0x34
    92e6:	63a3      	str	r3, [r4, #56]	; 0x38
    92e8:	2000      	movs	r0, #0
    92ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    92ec:	000003ff 	.word	0x000003ff
    92f0:	000003fe 	.word	0x000003fe
    92f4:	000003fd 	.word	0x000003fd

000092f8 <memchr>:
    92f8:	b2c9      	uxtb	r1, r1
    92fa:	1882      	adds	r2, r0, r2
    92fc:	4290      	cmp	r0, r2
    92fe:	d004      	beq.n	930a <memchr+0x12>
    9300:	7803      	ldrb	r3, [r0, #0]
    9302:	428b      	cmp	r3, r1
    9304:	d002      	beq.n	930c <memchr+0x14>
    9306:	3001      	adds	r0, #1
    9308:	e7f8      	b.n	92fc <memchr+0x4>
    930a:	2000      	movs	r0, #0
    930c:	4770      	bx	lr

0000930e <memmove>:
    930e:	b510      	push	{r4, lr}
    9310:	4288      	cmp	r0, r1
    9312:	d902      	bls.n	931a <memmove+0xc>
    9314:	188b      	adds	r3, r1, r2
    9316:	4298      	cmp	r0, r3
    9318:	d301      	bcc.n	931e <memmove+0x10>
    931a:	2300      	movs	r3, #0
    931c:	e005      	b.n	932a <memmove+0x1c>
    931e:	1a9b      	subs	r3, r3, r2
    9320:	3a01      	subs	r2, #1
    9322:	d308      	bcc.n	9336 <memmove+0x28>
    9324:	5c99      	ldrb	r1, [r3, r2]
    9326:	5481      	strb	r1, [r0, r2]
    9328:	e7fa      	b.n	9320 <memmove+0x12>
    932a:	4293      	cmp	r3, r2
    932c:	d003      	beq.n	9336 <memmove+0x28>
    932e:	5ccc      	ldrb	r4, [r1, r3]
    9330:	54c4      	strb	r4, [r0, r3]
    9332:	3301      	adds	r3, #1
    9334:	e7f9      	b.n	932a <memmove+0x1c>
    9336:	bd10      	pop	{r4, pc}

00009338 <_free_r>:
    9338:	b530      	push	{r4, r5, lr}
    933a:	2900      	cmp	r1, #0
    933c:	d03e      	beq.n	93bc <_free_r+0x84>
    933e:	3904      	subs	r1, #4
    9340:	680b      	ldr	r3, [r1, #0]
    9342:	2b00      	cmp	r3, #0
    9344:	da00      	bge.n	9348 <_free_r+0x10>
    9346:	18c9      	adds	r1, r1, r3
    9348:	4a1d      	ldr	r2, [pc, #116]	; (93c0 <_free_r+0x88>)
    934a:	6813      	ldr	r3, [r2, #0]
    934c:	0014      	movs	r4, r2
    934e:	2b00      	cmp	r3, #0
    9350:	d102      	bne.n	9358 <_free_r+0x20>
    9352:	604b      	str	r3, [r1, #4]
    9354:	6011      	str	r1, [r2, #0]
    9356:	e031      	b.n	93bc <_free_r+0x84>
    9358:	428b      	cmp	r3, r1
    935a:	d90d      	bls.n	9378 <_free_r+0x40>
    935c:	680a      	ldr	r2, [r1, #0]
    935e:	1888      	adds	r0, r1, r2
    9360:	4283      	cmp	r3, r0
    9362:	d103      	bne.n	936c <_free_r+0x34>
    9364:	6818      	ldr	r0, [r3, #0]
    9366:	685b      	ldr	r3, [r3, #4]
    9368:	1882      	adds	r2, r0, r2
    936a:	600a      	str	r2, [r1, #0]
    936c:	604b      	str	r3, [r1, #4]
    936e:	6021      	str	r1, [r4, #0]
    9370:	e024      	b.n	93bc <_free_r+0x84>
    9372:	428a      	cmp	r2, r1
    9374:	d803      	bhi.n	937e <_free_r+0x46>
    9376:	0013      	movs	r3, r2
    9378:	685a      	ldr	r2, [r3, #4]
    937a:	2a00      	cmp	r2, #0
    937c:	d1f9      	bne.n	9372 <_free_r+0x3a>
    937e:	681d      	ldr	r5, [r3, #0]
    9380:	195c      	adds	r4, r3, r5
    9382:	428c      	cmp	r4, r1
    9384:	d10b      	bne.n	939e <_free_r+0x66>
    9386:	6809      	ldr	r1, [r1, #0]
    9388:	1869      	adds	r1, r5, r1
    938a:	1858      	adds	r0, r3, r1
    938c:	6019      	str	r1, [r3, #0]
    938e:	4282      	cmp	r2, r0
    9390:	d114      	bne.n	93bc <_free_r+0x84>
    9392:	6810      	ldr	r0, [r2, #0]
    9394:	6852      	ldr	r2, [r2, #4]
    9396:	1841      	adds	r1, r0, r1
    9398:	6019      	str	r1, [r3, #0]
    939a:	605a      	str	r2, [r3, #4]
    939c:	e00e      	b.n	93bc <_free_r+0x84>
    939e:	428c      	cmp	r4, r1
    93a0:	d902      	bls.n	93a8 <_free_r+0x70>
    93a2:	230c      	movs	r3, #12
    93a4:	6003      	str	r3, [r0, #0]
    93a6:	e009      	b.n	93bc <_free_r+0x84>
    93a8:	6808      	ldr	r0, [r1, #0]
    93aa:	180c      	adds	r4, r1, r0
    93ac:	42a2      	cmp	r2, r4
    93ae:	d103      	bne.n	93b8 <_free_r+0x80>
    93b0:	6814      	ldr	r4, [r2, #0]
    93b2:	6852      	ldr	r2, [r2, #4]
    93b4:	1820      	adds	r0, r4, r0
    93b6:	6008      	str	r0, [r1, #0]
    93b8:	604a      	str	r2, [r1, #4]
    93ba:	6059      	str	r1, [r3, #4]
    93bc:	bd30      	pop	{r4, r5, pc}
    93be:	46c0      	nop			; (mov r8, r8)
    93c0:	2000014c 	.word	0x2000014c

000093c4 <_malloc_r>:
    93c4:	2303      	movs	r3, #3
    93c6:	b570      	push	{r4, r5, r6, lr}
    93c8:	1ccd      	adds	r5, r1, #3
    93ca:	439d      	bics	r5, r3
    93cc:	3508      	adds	r5, #8
    93ce:	0006      	movs	r6, r0
    93d0:	2d0c      	cmp	r5, #12
    93d2:	d201      	bcs.n	93d8 <_malloc_r+0x14>
    93d4:	250c      	movs	r5, #12
    93d6:	e005      	b.n	93e4 <_malloc_r+0x20>
    93d8:	2d00      	cmp	r5, #0
    93da:	da03      	bge.n	93e4 <_malloc_r+0x20>
    93dc:	230c      	movs	r3, #12
    93de:	2000      	movs	r0, #0
    93e0:	6033      	str	r3, [r6, #0]
    93e2:	e040      	b.n	9466 <_malloc_r+0xa2>
    93e4:	42a9      	cmp	r1, r5
    93e6:	d8f9      	bhi.n	93dc <_malloc_r+0x18>
    93e8:	4b1f      	ldr	r3, [pc, #124]	; (9468 <_malloc_r+0xa4>)
    93ea:	681c      	ldr	r4, [r3, #0]
    93ec:	001a      	movs	r2, r3
    93ee:	0021      	movs	r1, r4
    93f0:	2900      	cmp	r1, #0
    93f2:	d013      	beq.n	941c <_malloc_r+0x58>
    93f4:	680b      	ldr	r3, [r1, #0]
    93f6:	1b5b      	subs	r3, r3, r5
    93f8:	d40d      	bmi.n	9416 <_malloc_r+0x52>
    93fa:	2b0b      	cmp	r3, #11
    93fc:	d902      	bls.n	9404 <_malloc_r+0x40>
    93fe:	600b      	str	r3, [r1, #0]
    9400:	18cc      	adds	r4, r1, r3
    9402:	e01e      	b.n	9442 <_malloc_r+0x7e>
    9404:	428c      	cmp	r4, r1
    9406:	d102      	bne.n	940e <_malloc_r+0x4a>
    9408:	6863      	ldr	r3, [r4, #4]
    940a:	6013      	str	r3, [r2, #0]
    940c:	e01a      	b.n	9444 <_malloc_r+0x80>
    940e:	684b      	ldr	r3, [r1, #4]
    9410:	6063      	str	r3, [r4, #4]
    9412:	000c      	movs	r4, r1
    9414:	e016      	b.n	9444 <_malloc_r+0x80>
    9416:	000c      	movs	r4, r1
    9418:	6849      	ldr	r1, [r1, #4]
    941a:	e7e9      	b.n	93f0 <_malloc_r+0x2c>
    941c:	4c13      	ldr	r4, [pc, #76]	; (946c <_malloc_r+0xa8>)
    941e:	6823      	ldr	r3, [r4, #0]
    9420:	2b00      	cmp	r3, #0
    9422:	d103      	bne.n	942c <_malloc_r+0x68>
    9424:	0030      	movs	r0, r6
    9426:	f000 f849 	bl	94bc <_sbrk_r>
    942a:	6020      	str	r0, [r4, #0]
    942c:	0029      	movs	r1, r5
    942e:	0030      	movs	r0, r6
    9430:	f000 f844 	bl	94bc <_sbrk_r>
    9434:	1c43      	adds	r3, r0, #1
    9436:	d0d1      	beq.n	93dc <_malloc_r+0x18>
    9438:	2303      	movs	r3, #3
    943a:	1cc4      	adds	r4, r0, #3
    943c:	439c      	bics	r4, r3
    943e:	42a0      	cmp	r0, r4
    9440:	d10a      	bne.n	9458 <_malloc_r+0x94>
    9442:	6025      	str	r5, [r4, #0]
    9444:	0020      	movs	r0, r4
    9446:	2207      	movs	r2, #7
    9448:	300b      	adds	r0, #11
    944a:	1d23      	adds	r3, r4, #4
    944c:	4390      	bics	r0, r2
    944e:	1ac3      	subs	r3, r0, r3
    9450:	d009      	beq.n	9466 <_malloc_r+0xa2>
    9452:	425a      	negs	r2, r3
    9454:	50e2      	str	r2, [r4, r3]
    9456:	e006      	b.n	9466 <_malloc_r+0xa2>
    9458:	1a21      	subs	r1, r4, r0
    945a:	0030      	movs	r0, r6
    945c:	f000 f82e 	bl	94bc <_sbrk_r>
    9460:	1c43      	adds	r3, r0, #1
    9462:	d1ee      	bne.n	9442 <_malloc_r+0x7e>
    9464:	e7ba      	b.n	93dc <_malloc_r+0x18>
    9466:	bd70      	pop	{r4, r5, r6, pc}
    9468:	2000014c 	.word	0x2000014c
    946c:	20000148 	.word	0x20000148

00009470 <_realloc_r>:
    9470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9472:	0006      	movs	r6, r0
    9474:	000c      	movs	r4, r1
    9476:	0015      	movs	r5, r2
    9478:	2900      	cmp	r1, #0
    947a:	d104      	bne.n	9486 <_realloc_r+0x16>
    947c:	0011      	movs	r1, r2
    947e:	f7ff ffa1 	bl	93c4 <_malloc_r>
    9482:	0004      	movs	r4, r0
    9484:	e018      	b.n	94b8 <_realloc_r+0x48>
    9486:	2a00      	cmp	r2, #0
    9488:	d103      	bne.n	9492 <_realloc_r+0x22>
    948a:	f7ff ff55 	bl	9338 <_free_r>
    948e:	002c      	movs	r4, r5
    9490:	e012      	b.n	94b8 <_realloc_r+0x48>
    9492:	f000 f825 	bl	94e0 <_malloc_usable_size_r>
    9496:	4285      	cmp	r5, r0
    9498:	d90e      	bls.n	94b8 <_realloc_r+0x48>
    949a:	0029      	movs	r1, r5
    949c:	0030      	movs	r0, r6
    949e:	f7ff ff91 	bl	93c4 <_malloc_r>
    94a2:	1e07      	subs	r7, r0, #0
    94a4:	d007      	beq.n	94b6 <_realloc_r+0x46>
    94a6:	0021      	movs	r1, r4
    94a8:	002a      	movs	r2, r5
    94aa:	f7fe ff03 	bl	82b4 <memcpy>
    94ae:	0021      	movs	r1, r4
    94b0:	0030      	movs	r0, r6
    94b2:	f7ff ff41 	bl	9338 <_free_r>
    94b6:	003c      	movs	r4, r7
    94b8:	0020      	movs	r0, r4
    94ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000094bc <_sbrk_r>:
    94bc:	2300      	movs	r3, #0
    94be:	b570      	push	{r4, r5, r6, lr}
    94c0:	4c06      	ldr	r4, [pc, #24]	; (94dc <_sbrk_r+0x20>)
    94c2:	0005      	movs	r5, r0
    94c4:	0008      	movs	r0, r1
    94c6:	6023      	str	r3, [r4, #0]
    94c8:	f7fc fd04 	bl	5ed4 <_sbrk>
    94cc:	1c43      	adds	r3, r0, #1
    94ce:	d103      	bne.n	94d8 <_sbrk_r+0x1c>
    94d0:	6823      	ldr	r3, [r4, #0]
    94d2:	2b00      	cmp	r3, #0
    94d4:	d000      	beq.n	94d8 <_sbrk_r+0x1c>
    94d6:	602b      	str	r3, [r5, #0]
    94d8:	bd70      	pop	{r4, r5, r6, pc}
    94da:	46c0      	nop			; (mov r8, r8)
    94dc:	20000374 	.word	0x20000374

000094e0 <_malloc_usable_size_r>:
    94e0:	1f0b      	subs	r3, r1, #4
    94e2:	681a      	ldr	r2, [r3, #0]
    94e4:	1f10      	subs	r0, r2, #4
    94e6:	2a00      	cmp	r2, #0
    94e8:	da04      	bge.n	94f4 <_malloc_usable_size_r+0x14>
    94ea:	1889      	adds	r1, r1, r2
    94ec:	3904      	subs	r1, #4
    94ee:	680b      	ldr	r3, [r1, #0]
    94f0:	18d0      	adds	r0, r2, r3
    94f2:	3804      	subs	r0, #4
    94f4:	4770      	bx	lr
    94f6:	0000      	movs	r0, r0
    94f8:	00000002 	.word	0x00000002
    94fc:	00000003 	.word	0x00000003
    9500:	00000028 	.word	0x00000028
    9504:	00000029 	.word	0x00000029
    9508:	00000004 	.word	0x00000004
    950c:	00000005 	.word	0x00000005
    9510:	00000006 	.word	0x00000006
    9514:	00000007 	.word	0x00000007
    9518:	0000ffff 	.word	0x0000ffff
    951c:	0000ffff 	.word	0x0000ffff
    9520:	00000022 	.word	0x00000022
    9524:	00000023 	.word	0x00000023
    9528:	0000ffff 	.word	0x0000ffff
    952c:	0000ffff 	.word	0x0000ffff
    9530:	0000ffff 	.word	0x0000ffff
    9534:	0000ffff 	.word	0x0000ffff
    9538:	00000008 	.word	0x00000008
    953c:	00000009 	.word	0x00000009
    9540:	0000000a 	.word	0x0000000a
    9544:	0000000b 	.word	0x0000000b
    9548:	00000552 	.word	0x00000552
    954c:	00000558 	.word	0x00000558
    9550:	00000558 	.word	0x00000558
    9554:	00000558 	.word	0x00000558
    9558:	00000558 	.word	0x00000558
    955c:	00000558 	.word	0x00000558
    9560:	00000558 	.word	0x00000558
    9564:	00000558 	.word	0x00000558
    9568:	00000558 	.word	0x00000558
    956c:	00000558 	.word	0x00000558
    9570:	00000558 	.word	0x00000558
    9574:	00000558 	.word	0x00000558
    9578:	00000558 	.word	0x00000558
    957c:	00000558 	.word	0x00000558
    9580:	00000558 	.word	0x00000558
    9584:	00000558 	.word	0x00000558
    9588:	00000530 	.word	0x00000530
    958c:	00000558 	.word	0x00000558
    9590:	00000558 	.word	0x00000558
    9594:	00000558 	.word	0x00000558
    9598:	00000558 	.word	0x00000558
    959c:	00000558 	.word	0x00000558
    95a0:	00000558 	.word	0x00000558
    95a4:	00000558 	.word	0x00000558
    95a8:	00000558 	.word	0x00000558
    95ac:	00000558 	.word	0x00000558
    95b0:	00000558 	.word	0x00000558
    95b4:	00000558 	.word	0x00000558
    95b8:	00000558 	.word	0x00000558
    95bc:	00000558 	.word	0x00000558
    95c0:	00000558 	.word	0x00000558
    95c4:	00000558 	.word	0x00000558
    95c8:	0000054c 	.word	0x0000054c
    95cc:	00000558 	.word	0x00000558
    95d0:	00000558 	.word	0x00000558
    95d4:	00000558 	.word	0x00000558
    95d8:	00000558 	.word	0x00000558
    95dc:	00000558 	.word	0x00000558
    95e0:	00000558 	.word	0x00000558
    95e4:	00000558 	.word	0x00000558
    95e8:	00000558 	.word	0x00000558
    95ec:	00000558 	.word	0x00000558
    95f0:	00000558 	.word	0x00000558
    95f4:	00000558 	.word	0x00000558
    95f8:	00000558 	.word	0x00000558
    95fc:	00000558 	.word	0x00000558
    9600:	00000558 	.word	0x00000558
    9604:	00000558 	.word	0x00000558
    9608:	00000546 	.word	0x00000546
    960c:	000004ee 	.word	0x000004ee
    9610:	00000504 	.word	0x00000504
    9614:	0000051a 	.word	0x0000051a
    9618:	000004d4 	.word	0x000004d4
    961c:	42000800 	.word	0x42000800
    9620:	42000c00 	.word	0x42000c00
    9624:	42001000 	.word	0x42001000
    9628:	42001400 	.word	0x42001400
    962c:	42001800 	.word	0x42001800
    9630:	42001c00 	.word	0x42001c00
    9634:	20626f62 	.word	0x20626f62
    9638:	20736177 	.word	0x20736177
    963c:	6e756f66 	.word	0x6e756f66
    9640:	00000064 	.word	0x00000064
    9644:	204d5750 	.word	0x204d5750
    9648:	00006425 	.word	0x00006425
    964c:	6425203a 	.word	0x6425203a
    9650:	00000000 	.word	0x00000000
    9654:	31414846 	.word	0x31414846
    9658:	00000000 	.word	0x00000000
    965c:	30414846 	.word	0x30414846
    9660:	00000000 	.word	0x00000000
    9664:	20414b42 	.word	0x20414b42
    9668:	00000031 	.word	0x00000031
    966c:	20414b42 	.word	0x20414b42
    9670:	00000030 	.word	0x00000030
    9674:	204c4b42 	.word	0x204c4b42
    9678:	00000031 	.word	0x00000031
    967c:	204c4b42 	.word	0x204c4b42
    9680:	00000030 	.word	0x00000030
    9684:	20524b42 	.word	0x20524b42
    9688:	00000031 	.word	0x00000031
    968c:	20524b42 	.word	0x20524b42
    9690:	00000030 	.word	0x00000030
    9694:	314e5248 	.word	0x314e5248
    9698:	00003120 	.word	0x00003120
    969c:	314e5248 	.word	0x314e5248
    96a0:	00003020 	.word	0x00003020
    96a4:	324e5248 	.word	0x324e5248
    96a8:	00003120 	.word	0x00003120
    96ac:	324e5248 	.word	0x324e5248
    96b0:	00003020 	.word	0x00003020
    96b4:	334e5248 	.word	0x334e5248
    96b8:	00003120 	.word	0x00003120
    96bc:	334e5248 	.word	0x334e5248
    96c0:	00003020 	.word	0x00003020
    96c4:	344e5248 	.word	0x344e5248
    96c8:	00003120 	.word	0x00003120
    96cc:	344e5248 	.word	0x344e5248
    96d0:	00003020 	.word	0x00003020
    96d4:	30304253 	.word	0x30304253
    96d8:	00003120 	.word	0x00003120
    96dc:	30304253 	.word	0x30304253
    96e0:	00003020 	.word	0x00003020
    96e4:	31304253 	.word	0x31304253
    96e8:	00003120 	.word	0x00003120
    96ec:	31304253 	.word	0x31304253
    96f0:	00003020 	.word	0x00003020
    96f4:	32304253 	.word	0x32304253
    96f8:	00003120 	.word	0x00003120
    96fc:	32304253 	.word	0x32304253
    9700:	00003020 	.word	0x00003020
    9704:	33304253 	.word	0x33304253
    9708:	00003120 	.word	0x00003120
    970c:	33304253 	.word	0x33304253
    9710:	00003020 	.word	0x00003020
    9714:	34304253 	.word	0x34304253
    9718:	00003120 	.word	0x00003120
    971c:	34304253 	.word	0x34304253
    9720:	00003020 	.word	0x00003020
    9724:	35304253 	.word	0x35304253
    9728:	00003120 	.word	0x00003120
    972c:	35304253 	.word	0x35304253
    9730:	00003020 	.word	0x00003020
    9734:	36304253 	.word	0x36304253
    9738:	00003120 	.word	0x00003120
    973c:	36304253 	.word	0x36304253
    9740:	00003020 	.word	0x00003020
    9744:	37304253 	.word	0x37304253
    9748:	00003120 	.word	0x00003120
    974c:	37304253 	.word	0x37304253
    9750:	00003020 	.word	0x00003020
    9754:	38304253 	.word	0x38304253
    9758:	00003120 	.word	0x00003120
    975c:	38304253 	.word	0x38304253
    9760:	00003020 	.word	0x00003020
    9764:	39304253 	.word	0x39304253
    9768:	00003120 	.word	0x00003120
    976c:	39304253 	.word	0x39304253
    9770:	00003020 	.word	0x00003020
    9774:	30314253 	.word	0x30314253
    9778:	00003120 	.word	0x00003120
    977c:	30314253 	.word	0x30314253
    9780:	00003020 	.word	0x00003020
    9784:	53524253 	.word	0x53524253
    9788:	32342054 	.word	0x32342054
    978c:	00000000 	.word	0x00000000
    9790:	203a4253 	.word	0x203a4253
    9794:	45534552 	.word	0x45534552
    9798:	4e495454 	.word	0x4e495454
    979c:	00000047 	.word	0x00000047
    97a0:	20545250 	.word	0x20545250
    97a4:	00000031 	.word	0x00000031
    97a8:	20545250 	.word	0x20545250
    97ac:	00000030 	.word	0x00000030
    97b0:	20525457 	.word	0x20525457
    97b4:	00000031 	.word	0x00000031
    97b8:	20415453 	.word	0x20415453
    97bc:	00000031 	.word	0x00000031
    97c0:	20415453 	.word	0x20415453
    97c4:	00000030 	.word	0x00000030
    97c8:	2044454c 	.word	0x2044454c
    97cc:	00000031 	.word	0x00000031
    97d0:	2044454c 	.word	0x2044454c
    97d4:	00000030 	.word	0x00000030
    97d8:	204c4448 	.word	0x204c4448
    97dc:	00000031 	.word	0x00000031
    97e0:	204c4448 	.word	0x204c4448
    97e4:	00000030 	.word	0x00000030
    97e8:	41495242 	.word	0x41495242
    97ec:	0031204e 	.word	0x0031204e
    97f0:	41495242 	.word	0x41495242
    97f4:	0030204e 	.word	0x0030204e
    97f8:	48534c46 	.word	0x48534c46
    97fc:	00312031 	.word	0x00312031
    9800:	48534c46 	.word	0x48534c46
    9804:	00302031 	.word	0x00302031
    9808:	48534c46 	.word	0x48534c46
    980c:	00312032 	.word	0x00312032
    9810:	48534c46 	.word	0x48534c46
    9814:	00302032 	.word	0x00302032
    9818:	48534c46 	.word	0x48534c46
    981c:	31204446 	.word	0x31204446
    9820:	00000000 	.word	0x00000000
    9824:	48534c46 	.word	0x48534c46
    9828:	30204446 	.word	0x30204446
    982c:	00000000 	.word	0x00000000
    9830:	5254534d 	.word	0x5254534d
    9834:	20545352 	.word	0x20545352
    9838:	00003234 	.word	0x00003234
    983c:	45534552 	.word	0x45534552
    9840:	43412054 	.word	0x43412054
    9844:	00000a4b 	.word	0x00000a4b
    9848:	52524e4d 	.word	0x52524e4d
    984c:	34205453 	.word	0x34205453
    9850:	00000032 	.word	0x00000032
    9854:	4f4e494d 	.word	0x4f4e494d
    9858:	45522052 	.word	0x45522052
    985c:	20544553 	.word	0x20544553
    9860:	0a4b4341 	.word	0x0a4b4341
    9864:	00000000 	.word	0x00000000
    9868:	4f4e494d 	.word	0x4f4e494d
    986c:	45522052 	.word	0x45522052
    9870:	20544553 	.word	0x20544553
    9874:	454e4f44 	.word	0x454e4f44
    9878:	0000000a 	.word	0x0000000a
    987c:	54545250 	.word	0x54545250
    9880:	30485352 	.word	0x30485352
    9884:	00000000 	.word	0x00000000
    9888:	54545250 	.word	0x54545250
    988c:	30485352 	.word	0x30485352
    9890:	00642520 	.word	0x00642520
    9894:	54545250 	.word	0x54545250
    9898:	31485352 	.word	0x31485352
    989c:	00000000 	.word	0x00000000
    98a0:	54545250 	.word	0x54545250
    98a4:	31485352 	.word	0x31485352
    98a8:	00642520 	.word	0x00642520
    98ac:	54545250 	.word	0x54545250
    98b0:	32485352 	.word	0x32485352
    98b4:	00000000 	.word	0x00000000
    98b8:	54545250 	.word	0x54545250
    98bc:	32485352 	.word	0x32485352
    98c0:	00642520 	.word	0x00642520
    98c4:	54545250 	.word	0x54545250
    98c8:	33485352 	.word	0x33485352
    98cc:	00000000 	.word	0x00000000
    98d0:	54545250 	.word	0x54545250
    98d4:	33485352 	.word	0x33485352
    98d8:	00642520 	.word	0x00642520
    98dc:	54545250 	.word	0x54545250
    98e0:	34485352 	.word	0x34485352
    98e4:	00000000 	.word	0x00000000
    98e8:	54545250 	.word	0x54545250
    98ec:	34485352 	.word	0x34485352
    98f0:	00642520 	.word	0x00642520
    98f4:	54545250 	.word	0x54545250
    98f8:	35485352 	.word	0x35485352
    98fc:	00000000 	.word	0x00000000
    9900:	54545250 	.word	0x54545250
    9904:	35485352 	.word	0x35485352
    9908:	00642520 	.word	0x00642520
    990c:	54545250 	.word	0x54545250
    9910:	36485352 	.word	0x36485352
    9914:	00000000 	.word	0x00000000
    9918:	54545250 	.word	0x54545250
    991c:	36485352 	.word	0x36485352
    9920:	00642520 	.word	0x00642520
    9924:	54545250 	.word	0x54545250
    9928:	37485352 	.word	0x37485352
    992c:	00000000 	.word	0x00000000
    9930:	54545250 	.word	0x54545250
    9934:	37485352 	.word	0x37485352
    9938:	00642520 	.word	0x00642520
    993c:	20564f43 	.word	0x20564f43
    9940:	00000031 	.word	0x00000031
    9944:	20564f43 	.word	0x20564f43
    9948:	00000030 	.word	0x00000030
    994c:	004b4341 	.word	0x004b4341
    9950:	52444441 	.word	0x52444441
    9954:	6425203a 	.word	0x6425203a
    9958:	203e2d20 	.word	0x203e2d20
    995c:	000a6425 	.word	0x000a6425
    9960:	3a525245 	.word	0x3a525245
    9964:	25642520 	.word	0x25642520
    9968:	25642564 	.word	0x25642564
    996c:	25642564 	.word	0x25642564
    9970:	25642564 	.word	0x25642564
    9974:	000a0d64 	.word	0x000a0d64
    9978:	000032b4 	.word	0x000032b4
    997c:	000032d2 	.word	0x000032d2
    9980:	000032f8 	.word	0x000032f8
    9984:	0000331e 	.word	0x0000331e
    9988:	00003344 	.word	0x00003344
    998c:	0000336a 	.word	0x0000336a
    9990:	00003390 	.word	0x00003390
    9994:	000033b6 	.word	0x000033b6
    9998:	000033dc 	.word	0x000033dc
    999c:	00003402 	.word	0x00003402
    99a0:	00003428 	.word	0x00003428
    99a4:	0000344e 	.word	0x0000344e
    99a8:	00003480 	.word	0x00003480
    99ac:	00003480 	.word	0x00003480
    99b0:	00003480 	.word	0x00003480
    99b4:	00003480 	.word	0x00003480
    99b8:	00003480 	.word	0x00003480
    99bc:	00003480 	.word	0x00003480
    99c0:	00003480 	.word	0x00003480
    99c4:	00003474 	.word	0x00003474
    99c8:	000034bc 	.word	0x000034bc
    99cc:	000034da 	.word	0x000034da
    99d0:	000034f4 	.word	0x000034f4
    99d4:	0000350e 	.word	0x0000350e
    99d8:	00003528 	.word	0x00003528
    99dc:	00003542 	.word	0x00003542
    99e0:	0000355c 	.word	0x0000355c
    99e4:	0000359a 	.word	0x0000359a
    99e8:	000035f0 	.word	0x000035f0
    99ec:	00003646 	.word	0x00003646
    99f0:	0000369c 	.word	0x0000369c
    99f4:	64343025 	.word	0x64343025
    99f8:	34302520 	.word	0x34302520
    99fc:	30252064 	.word	0x30252064
    9a00:	25206434 	.word	0x25206434
    9a04:	20643430 	.word	0x20643430
    9a08:	64343025 	.word	0x64343025
    9a0c:	34302520 	.word	0x34302520
    9a10:	000a0d64 	.word	0x000a0d64
    9a14:	0000531a 	.word	0x0000531a
    9a18:	00005392 	.word	0x00005392
    9a1c:	00005392 	.word	0x00005392
    9a20:	00005338 	.word	0x00005338
    9a24:	00005332 	.word	0x00005332
    9a28:	0000533e 	.word	0x0000533e
    9a2c:	00005320 	.word	0x00005320
    9a30:	00005344 	.word	0x00005344
    9a34:	00005378 	.word	0x00005378
    9a38:	0000546c 	.word	0x0000546c
    9a3c:	000054bc 	.word	0x000054bc
    9a40:	000054bc 	.word	0x000054bc
    9a44:	000054b8 	.word	0x000054b8
    9a48:	0000545e 	.word	0x0000545e
    9a4c:	0000547e 	.word	0x0000547e
    9a50:	0000544e 	.word	0x0000544e
    9a54:	00005490 	.word	0x00005490
    9a58:	000054a2 	.word	0x000054a2
    9a5c:	2d2d3c0a 	.word	0x2d2d3c0a
    9a60:	2d2d2d2d 	.word	0x2d2d2d2d
    9a64:	2d2d2d2d 	.word	0x2d2d2d2d
    9a68:	2d2d2d2d 	.word	0x2d2d2d2d
    9a6c:	2d2d2d2d 	.word	0x2d2d2d2d
    9a70:	0a3e2d2d 	.word	0x0a3e2d2d
    9a74:	00000000 	.word	0x00000000
    9a78:	7473614d 	.word	0x7473614d
    9a7c:	42207265 	.word	0x42207265
    9a80:	6472616f 	.word	0x6472616f
    9a84:	61745320 	.word	0x61745320
    9a88:	64657472 	.word	0x64657472
    9a8c:	0000000a 	.word	0x0000000a
    9a90:	54464f53 	.word	0x54464f53
    9a94:	45524157 	.word	0x45524157
    9a98:	5245565f 	.word	0x5245565f
    9a9c:	4e4f4953 	.word	0x4e4f4953
    9aa0:	6425203a 	.word	0x6425203a
    9aa4:	00000a0d 	.word	0x00000a0d
    9aa8:	2d2d2d3c 	.word	0x2d2d2d3c
    9aac:	2d2d2d2d 	.word	0x2d2d2d2d
    9ab0:	2d2d2d2d 	.word	0x2d2d2d2d
    9ab4:	2d2d2d2d 	.word	0x2d2d2d2d
    9ab8:	2d2d2d2d 	.word	0x2d2d2d2d
    9abc:	0a0a3e2d 	.word	0x0a0a3e2d
    9ac0:	00000000 	.word	0x00000000
    9ac4:	00007160 	.word	0x00007160
    9ac8:	0000702e 	.word	0x0000702e
    9acc:	00007134 	.word	0x00007134
    9ad0:	00007024 	.word	0x00007024
    9ad4:	00007134 	.word	0x00007134
    9ad8:	0000713e 	.word	0x0000713e
    9adc:	00007134 	.word	0x00007134
    9ae0:	00007024 	.word	0x00007024
    9ae4:	0000702e 	.word	0x0000702e
    9ae8:	0000702e 	.word	0x0000702e
    9aec:	0000713e 	.word	0x0000713e
    9af0:	00007024 	.word	0x00007024
    9af4:	0000701a 	.word	0x0000701a
    9af8:	0000701a 	.word	0x0000701a
    9afc:	0000701a 	.word	0x0000701a
    9b00:	00007390 	.word	0x00007390
    9b04:	0000778c 	.word	0x0000778c
    9b08:	0000764c 	.word	0x0000764c
    9b0c:	0000764c 	.word	0x0000764c
    9b10:	0000764a 	.word	0x0000764a
    9b14:	00007764 	.word	0x00007764
    9b18:	00007764 	.word	0x00007764
    9b1c:	00007756 	.word	0x00007756
    9b20:	0000764a 	.word	0x0000764a
    9b24:	00007764 	.word	0x00007764
    9b28:	00007756 	.word	0x00007756
    9b2c:	00007764 	.word	0x00007764
    9b30:	0000764a 	.word	0x0000764a
    9b34:	0000776c 	.word	0x0000776c
    9b38:	0000776c 	.word	0x0000776c
    9b3c:	0000776c 	.word	0x0000776c
    9b40:	0000796c 	.word	0x0000796c
    9b44:	0043      	.short	0x0043
    9b46:	2d23      	.short	0x2d23
    9b48:	00202b30 	.word	0x00202b30
    9b4c:	004c6c68 	.word	0x004c6c68
    9b50:	45676665 	.word	0x45676665
    9b54:	4746      	.short	0x4746
    9b56:	00          	.byte	0x00
    9b57:	30          	.byte	0x30
    9b58:	34333231 	.word	0x34333231
    9b5c:	38373635 	.word	0x38373635
    9b60:	43424139 	.word	0x43424139
    9b64:	00464544 	.word	0x00464544
    9b68:	33323130 	.word	0x33323130
    9b6c:	37363534 	.word	0x37363534
    9b70:	62613938 	.word	0x62613938
    9b74:	66656463 	.word	0x66656463
    9b78:	00000000 	.word	0x00000000
    9b7c:	00009b9a 	.word	0x00009b9a
    9b80:	00009b9d 	.word	0x00009b9d
    9b84:	00009ba0 	.word	0x00009ba0
    9b88:	61462d41 	.word	0x61462d41
    9b8c:	3938662d 	.word	0x3938662d
    9b90:	33323130 	.word	0x33323130
    9b94:	37363534 	.word	0x37363534
    9b98:	2d2b005d 	.word	0x2d2b005d
    9b9c:	00303000 	.word	0x00303000
    9ba0:	5878      	.short	0x5878
	...

00009ba3 <_ctype_>:
    9ba3:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    9bb3:	2020 2020 2020 2020 2020 2020 2020 2020                     
    9bc3:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    9bd3:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    9be3:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    9bf3:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    9c03:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    9c13:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    9c23:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00009ca4 <__sf_fake_stdin>:
	...

00009cc4 <__sf_fake_stdout>:
	...

00009ce4 <__sf_fake_stderr>:
	...

00009d04 <_init>:
    9d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d06:	46c0      	nop			; (mov r8, r8)
    9d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9d0a:	bc08      	pop	{r3}
    9d0c:	469e      	mov	lr, r3
    9d0e:	4770      	bx	lr

00009d10 <__init_array_start>:
    9d10:	000000dd 	.word	0x000000dd

00009d14 <_fini>:
    9d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d16:	46c0      	nop			; (mov r8, r8)
    9d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9d1a:	bc08      	pop	{r3}
    9d1c:	469e      	mov	lr, r3
    9d1e:	4770      	bx	lr

00009d20 <__fini_array_start>:
    9d20:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <test_bob>:
2000000c:	5750 004d                                   PWM.

20000010 <mcp23017_data>:
20000010:	0000 0000 0020 0000 0000 0000 0000 0000     .... ...........
20000020:	0001 0000 0021 0000 0000 0000 0000 0000     ....!...........
20000030:	0001 0000 0022 0000 0000 0000 0000 0000     ...."...........
20000040:	0001 0000 0023 0000 0000 0000 0000 0000     ....#...........
20000050:	0001 0000 0024 0000 0000 0000 0000 0000     ....$...........
20000060:	0001 0000 0025 0000 0000 0000 0000 0000     ....%...........
20000070:	0000 0000 0026 0000 0000 0000 0000 0000     ....&...........
20000080:	0000 0000 0027 0000 0000 0000 0000 0000     ....'...........

20000090 <duty_cycle.13678>:
20000090:	0132                                             2

20000091 <g_interrupt_enabled>:
20000091:	0001 0000                                        ...

20000094 <impure_data>:
20000094:	0000 0000 9ca4 0000 9cc4 0000 9ce4 0000     ................
	...
200000b4:	9b44 0000 0000 0000 0000 0000 0000 0000     D...............
	...

200000f4 <_impure_ptr>:
200000f4:	0094 2000                                   ... 

200000f8 <__ctype_ptr__>:
200000f8:	9ba3 0000                                   ....
