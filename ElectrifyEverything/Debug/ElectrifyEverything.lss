
ElectrifyEverything.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007458  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00007458  00007458  00017458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000003d4  20000000  00007460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000e14  200003d4  00007834  000203d4  2**2
                  ALLOC
  4 .stack        00002000  200011e8  00008648  000203d4  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000203d4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000203fc  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003b276  00000000  00000000  00020455  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000041c1  00000000  00000000  0005b6cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000360c  00000000  00000000  0005f88c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a60  00000000  00000000  00062e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008d0  00000000  00000000  000638f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001df20  00000000  00000000  000641c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012b92  00000000  00000000  000820e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008cbba  00000000  00000000  00094c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000029a8  00000000  00000000  00121834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200031e8 	.word	0x200031e8
       4:	00004fd5 	.word	0x00004fd5
       8:	000050cd 	.word	0x000050cd
       c:	000050cd 	.word	0x000050cd
	...
      2c:	000050cd 	.word	0x000050cd
	...
      38:	000050cd 	.word	0x000050cd
      3c:	000050cd 	.word	0x000050cd
      40:	000050cd 	.word	0x000050cd
      44:	000050cd 	.word	0x000050cd
      48:	00000d61 	.word	0x00000d61
      4c:	000050cd 	.word	0x000050cd
      50:	00000259 	.word	0x00000259
      54:	000050cd 	.word	0x000050cd
      58:	000050cd 	.word	0x000050cd
      5c:	000050cd 	.word	0x000050cd
      60:	000050cd 	.word	0x000050cd
      64:	000050cd 	.word	0x000050cd
      68:	000041f5 	.word	0x000041f5
      6c:	00001085 	.word	0x00001085
      70:	000050cd 	.word	0x000050cd
      74:	000050cd 	.word	0x000050cd
      78:	000050cd 	.word	0x000050cd
      7c:	000050cd 	.word	0x000050cd
      80:	000050cd 	.word	0x000050cd
      84:	000050cd 	.word	0x000050cd
      88:	000037cd 	.word	0x000037cd
      8c:	000050cd 	.word	0x000050cd
      90:	000050cd 	.word	0x000050cd
      94:	000050cd 	.word	0x000050cd
      98:	000050cd 	.word	0x000050cd
      9c:	000050cd 	.word	0x000050cd
      a0:	000050cd 	.word	0x000050cd
      a4:	000050cd 	.word	0x000050cd
      a8:	000050cd 	.word	0x000050cd
      ac:	000050cd 	.word	0x000050cd
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200003d4 	.word	0x200003d4
      d4:	00000000 	.word	0x00000000
      d8:	00007460 	.word	0x00007460

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200003d8 	.word	0x200003d8
     108:	00007460 	.word	0x00007460
     10c:	00007460 	.word	0x00007460
     110:	00000000 	.word	0x00000000

00000114 <wdt_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void wdt_get_config_defaults(
		struct wdt_conf *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
     122:	687b      	ldr	r3, [r7, #4]
     124:	2201      	movs	r2, #1
     126:	705a      	strb	r2, [r3, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21) && !(SAMR30)
	config->clock_source         = GCLK_GENERATOR_4;
     128:	687b      	ldr	r3, [r7, #4]
     12a:	2204      	movs	r2, #4
     12c:	709a      	strb	r2, [r3, #2]
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
     12e:	687b      	ldr	r3, [r7, #4]
     130:	220c      	movs	r2, #12
     132:	70da      	strb	r2, [r3, #3]
	config->window_period        = WDT_PERIOD_NONE;
     134:	687b      	ldr	r3, [r7, #4]
     136:	2200      	movs	r2, #0
     138:	711a      	strb	r2, [r3, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
     13a:	687b      	ldr	r3, [r7, #4]
     13c:	2200      	movs	r2, #0
     13e:	715a      	strb	r2, [r3, #5]
}
     140:	46c0      	nop			; (mov r8, r8)
     142:	46bd      	mov	sp, r7
     144:	b002      	add	sp, #8
     146:	bd80      	pop	{r7, pc}

00000148 <wdt_init>:
 *  Author: Andreas
 */ 
#include "wdt.h"

void wdt_init()
{
     148:	b580      	push	{r7, lr}
     14a:	b082      	sub	sp, #8
     14c:	af00      	add	r7, sp, #0
	struct wdt_conf config_wdt;
	wdt_get_config_defaults(&config_wdt);
     14e:	003b      	movs	r3, r7
     150:	0018      	movs	r0, r3
     152:	4b09      	ldr	r3, [pc, #36]	; (178 <wdt_init+0x30>)
     154:	4798      	blx	r3
	
	config_wdt.always_on = false;
     156:	003b      	movs	r3, r7
     158:	2200      	movs	r2, #0
     15a:	701a      	strb	r2, [r3, #0]
	config_wdt.timeout_period = WDT_PERIOD_4096CLK;
     15c:	003b      	movs	r3, r7
     15e:	220a      	movs	r2, #10
     160:	70da      	strb	r2, [r3, #3]
	config_wdt.early_warning_period = WDT_PERIOD_2048CLK;
     162:	003b      	movs	r3, r7
     164:	2209      	movs	r2, #9
     166:	715a      	strb	r2, [r3, #5]
	
	wdt_set_config(&config_wdt);
     168:	003b      	movs	r3, r7
     16a:	0018      	movs	r0, r3
     16c:	4b03      	ldr	r3, [pc, #12]	; (17c <wdt_init+0x34>)
     16e:	4798      	blx	r3
	//wdt_init_cb();
}
     170:	46c0      	nop			; (mov r8, r8)
     172:	46bd      	mov	sp, r7
     174:	b002      	add	sp, #8
     176:	bd80      	pop	{r7, pc}
     178:	00000115 	.word	0x00000115
     17c:	00000bcd 	.word	0x00000bcd

00000180 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
     180:	b580      	push	{r7, lr}
     182:	af00      	add	r7, sp, #0
}
     184:	46c0      	nop			; (mov r8, r8)
     186:	46bd      	mov	sp, r7
     188:	bd80      	pop	{r7, pc}
     18a:	46c0      	nop			; (mov r8, r8)

0000018c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     18c:	b580      	push	{r7, lr}
     18e:	b084      	sub	sp, #16
     190:	af00      	add	r7, sp, #0
     192:	0002      	movs	r2, r0
     194:	1dfb      	adds	r3, r7, #7
     196:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     198:	230f      	movs	r3, #15
     19a:	18fb      	adds	r3, r7, r3
     19c:	1dfa      	adds	r2, r7, #7
     19e:	7812      	ldrb	r2, [r2, #0]
     1a0:	0952      	lsrs	r2, r2, #5
     1a2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     1a4:	230f      	movs	r3, #15
     1a6:	18fb      	adds	r3, r7, r3
     1a8:	781b      	ldrb	r3, [r3, #0]
     1aa:	2b00      	cmp	r3, #0
     1ac:	d10c      	bne.n	1c8 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     1ae:	4b09      	ldr	r3, [pc, #36]	; (1d4 <_extint_get_eic_from_channel+0x48>)
     1b0:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     1b2:	230f      	movs	r3, #15
     1b4:	18fb      	adds	r3, r7, r3
     1b6:	781b      	ldrb	r3, [r3, #0]
     1b8:	009b      	lsls	r3, r3, #2
     1ba:	2210      	movs	r2, #16
     1bc:	4694      	mov	ip, r2
     1be:	44bc      	add	ip, r7
     1c0:	4463      	add	r3, ip
     1c2:	3b08      	subs	r3, #8
     1c4:	681b      	ldr	r3, [r3, #0]
     1c6:	e000      	b.n	1ca <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     1c8:	2300      	movs	r3, #0
	}
}
     1ca:	0018      	movs	r0, r3
     1cc:	46bd      	mov	sp, r7
     1ce:	b004      	add	sp, #16
     1d0:	bd80      	pop	{r7, pc}
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	40001800 	.word	0x40001800

000001d8 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     1d8:	b580      	push	{r7, lr}
     1da:	b084      	sub	sp, #16
     1dc:	af00      	add	r7, sp, #0
     1de:	0002      	movs	r2, r0
     1e0:	1dfb      	adds	r3, r7, #7
     1e2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     1e4:	1dfb      	adds	r3, r7, #7
     1e6:	781b      	ldrb	r3, [r3, #0]
     1e8:	0018      	movs	r0, r3
     1ea:	4b0b      	ldr	r3, [pc, #44]	; (218 <extint_chan_is_detected+0x40>)
     1ec:	4798      	blx	r3
     1ee:	0003      	movs	r3, r0
     1f0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     1f2:	1dfb      	adds	r3, r7, #7
     1f4:	781b      	ldrb	r3, [r3, #0]
     1f6:	221f      	movs	r2, #31
     1f8:	4013      	ands	r3, r2
     1fa:	2201      	movs	r2, #1
     1fc:	409a      	lsls	r2, r3
     1fe:	0013      	movs	r3, r2
     200:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     202:	68fb      	ldr	r3, [r7, #12]
     204:	691b      	ldr	r3, [r3, #16]
     206:	68ba      	ldr	r2, [r7, #8]
     208:	4013      	ands	r3, r2
     20a:	1e5a      	subs	r2, r3, #1
     20c:	4193      	sbcs	r3, r2
     20e:	b2db      	uxtb	r3, r3
}
     210:	0018      	movs	r0, r3
     212:	46bd      	mov	sp, r7
     214:	b004      	add	sp, #16
     216:	bd80      	pop	{r7, pc}
     218:	0000018d 	.word	0x0000018d

0000021c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     21c:	b580      	push	{r7, lr}
     21e:	b084      	sub	sp, #16
     220:	af00      	add	r7, sp, #0
     222:	0002      	movs	r2, r0
     224:	1dfb      	adds	r3, r7, #7
     226:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     228:	1dfb      	adds	r3, r7, #7
     22a:	781b      	ldrb	r3, [r3, #0]
     22c:	0018      	movs	r0, r3
     22e:	4b09      	ldr	r3, [pc, #36]	; (254 <extint_chan_clear_detected+0x38>)
     230:	4798      	blx	r3
     232:	0003      	movs	r3, r0
     234:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     236:	1dfb      	adds	r3, r7, #7
     238:	781b      	ldrb	r3, [r3, #0]
     23a:	221f      	movs	r2, #31
     23c:	4013      	ands	r3, r2
     23e:	2201      	movs	r2, #1
     240:	409a      	lsls	r2, r3
     242:	0013      	movs	r3, r2
     244:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     246:	68fb      	ldr	r3, [r7, #12]
     248:	68ba      	ldr	r2, [r7, #8]
     24a:	611a      	str	r2, [r3, #16]
}
     24c:	46c0      	nop			; (mov r8, r8)
     24e:	46bd      	mov	sp, r7
     250:	b004      	add	sp, #16
     252:	bd80      	pop	{r7, pc}
     254:	0000018d 	.word	0x0000018d

00000258 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     258:	b580      	push	{r7, lr}
     25a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     25c:	4b15      	ldr	r3, [pc, #84]	; (2b4 <EIC_Handler+0x5c>)
     25e:	2200      	movs	r2, #0
     260:	701a      	strb	r2, [r3, #0]
     262:	e020      	b.n	2a6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     264:	4b13      	ldr	r3, [pc, #76]	; (2b4 <EIC_Handler+0x5c>)
     266:	781b      	ldrb	r3, [r3, #0]
     268:	0018      	movs	r0, r3
     26a:	4b13      	ldr	r3, [pc, #76]	; (2b8 <EIC_Handler+0x60>)
     26c:	4798      	blx	r3
     26e:	1e03      	subs	r3, r0, #0
     270:	d013      	beq.n	29a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     272:	4b10      	ldr	r3, [pc, #64]	; (2b4 <EIC_Handler+0x5c>)
     274:	781b      	ldrb	r3, [r3, #0]
     276:	0018      	movs	r0, r3
     278:	4b10      	ldr	r3, [pc, #64]	; (2bc <EIC_Handler+0x64>)
     27a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     27c:	4b0d      	ldr	r3, [pc, #52]	; (2b4 <EIC_Handler+0x5c>)
     27e:	781b      	ldrb	r3, [r3, #0]
     280:	001a      	movs	r2, r3
     282:	4b0f      	ldr	r3, [pc, #60]	; (2c0 <EIC_Handler+0x68>)
     284:	0092      	lsls	r2, r2, #2
     286:	58d3      	ldr	r3, [r2, r3]
     288:	2b00      	cmp	r3, #0
     28a:	d006      	beq.n	29a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     28c:	4b09      	ldr	r3, [pc, #36]	; (2b4 <EIC_Handler+0x5c>)
     28e:	781b      	ldrb	r3, [r3, #0]
     290:	001a      	movs	r2, r3
     292:	4b0b      	ldr	r3, [pc, #44]	; (2c0 <EIC_Handler+0x68>)
     294:	0092      	lsls	r2, r2, #2
     296:	58d3      	ldr	r3, [r2, r3]
     298:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     29a:	4b06      	ldr	r3, [pc, #24]	; (2b4 <EIC_Handler+0x5c>)
     29c:	781b      	ldrb	r3, [r3, #0]
     29e:	3301      	adds	r3, #1
     2a0:	b2da      	uxtb	r2, r3
     2a2:	4b04      	ldr	r3, [pc, #16]	; (2b4 <EIC_Handler+0x5c>)
     2a4:	701a      	strb	r2, [r3, #0]
     2a6:	4b03      	ldr	r3, [pc, #12]	; (2b4 <EIC_Handler+0x5c>)
     2a8:	781b      	ldrb	r3, [r3, #0]
     2aa:	2b0f      	cmp	r3, #15
     2ac:	d9da      	bls.n	264 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     2ae:	46c0      	nop			; (mov r8, r8)
     2b0:	46bd      	mov	sp, r7
     2b2:	bd80      	pop	{r7, pc}
     2b4:	20000428 	.word	0x20000428
     2b8:	000001d9 	.word	0x000001d9
     2bc:	0000021d 	.word	0x0000021d
     2c0:	2000042c 	.word	0x2000042c

000002c4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     2c4:	b580      	push	{r7, lr}
     2c6:	b082      	sub	sp, #8
     2c8:	af00      	add	r7, sp, #0
     2ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     2cc:	687b      	ldr	r3, [r7, #4]
     2ce:	2200      	movs	r2, #0
     2d0:	701a      	strb	r2, [r3, #0]
}
     2d2:	46c0      	nop			; (mov r8, r8)
     2d4:	46bd      	mov	sp, r7
     2d6:	b002      	add	sp, #8
     2d8:	bd80      	pop	{r7, pc}
     2da:	46c0      	nop			; (mov r8, r8)

000002dc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     2dc:	b580      	push	{r7, lr}
     2de:	b082      	sub	sp, #8
     2e0:	af00      	add	r7, sp, #0
     2e2:	0002      	movs	r2, r0
     2e4:	6039      	str	r1, [r7, #0]
     2e6:	1dfb      	adds	r3, r7, #7
     2e8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     2ea:	1dfb      	adds	r3, r7, #7
     2ec:	781b      	ldrb	r3, [r3, #0]
     2ee:	2b01      	cmp	r3, #1
     2f0:	d00a      	beq.n	308 <system_apb_clock_set_mask+0x2c>
     2f2:	2b02      	cmp	r3, #2
     2f4:	d00f      	beq.n	316 <system_apb_clock_set_mask+0x3a>
     2f6:	2b00      	cmp	r3, #0
     2f8:	d114      	bne.n	324 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     2fa:	4b0e      	ldr	r3, [pc, #56]	; (334 <system_apb_clock_set_mask+0x58>)
     2fc:	4a0d      	ldr	r2, [pc, #52]	; (334 <system_apb_clock_set_mask+0x58>)
     2fe:	6991      	ldr	r1, [r2, #24]
     300:	683a      	ldr	r2, [r7, #0]
     302:	430a      	orrs	r2, r1
     304:	619a      	str	r2, [r3, #24]
			break;
     306:	e00f      	b.n	328 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     308:	4b0a      	ldr	r3, [pc, #40]	; (334 <system_apb_clock_set_mask+0x58>)
     30a:	4a0a      	ldr	r2, [pc, #40]	; (334 <system_apb_clock_set_mask+0x58>)
     30c:	69d1      	ldr	r1, [r2, #28]
     30e:	683a      	ldr	r2, [r7, #0]
     310:	430a      	orrs	r2, r1
     312:	61da      	str	r2, [r3, #28]
			break;
     314:	e008      	b.n	328 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     316:	4b07      	ldr	r3, [pc, #28]	; (334 <system_apb_clock_set_mask+0x58>)
     318:	4a06      	ldr	r2, [pc, #24]	; (334 <system_apb_clock_set_mask+0x58>)
     31a:	6a11      	ldr	r1, [r2, #32]
     31c:	683a      	ldr	r2, [r7, #0]
     31e:	430a      	orrs	r2, r1
     320:	621a      	str	r2, [r3, #32]
			break;
     322:	e001      	b.n	328 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     324:	2317      	movs	r3, #23
     326:	e000      	b.n	32a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     328:	2300      	movs	r3, #0
}
     32a:	0018      	movs	r0, r3
     32c:	46bd      	mov	sp, r7
     32e:	b002      	add	sp, #8
     330:	bd80      	pop	{r7, pc}
     332:	46c0      	nop			; (mov r8, r8)
     334:	40000400 	.word	0x40000400

00000338 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     338:	b580      	push	{r7, lr}
     33a:	b082      	sub	sp, #8
     33c:	af00      	add	r7, sp, #0
     33e:	0002      	movs	r2, r0
     340:	1dfb      	adds	r3, r7, #7
     342:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     344:	4b06      	ldr	r3, [pc, #24]	; (360 <system_interrupt_enable+0x28>)
     346:	1dfa      	adds	r2, r7, #7
     348:	7812      	ldrb	r2, [r2, #0]
     34a:	0011      	movs	r1, r2
     34c:	221f      	movs	r2, #31
     34e:	400a      	ands	r2, r1
     350:	2101      	movs	r1, #1
     352:	4091      	lsls	r1, r2
     354:	000a      	movs	r2, r1
     356:	601a      	str	r2, [r3, #0]
}
     358:	46c0      	nop			; (mov r8, r8)
     35a:	46bd      	mov	sp, r7
     35c:	b002      	add	sp, #8
     35e:	bd80      	pop	{r7, pc}
     360:	e000e100 	.word	0xe000e100

00000364 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     364:	b580      	push	{r7, lr}
     366:	b082      	sub	sp, #8
     368:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     36a:	4b0f      	ldr	r3, [pc, #60]	; (3a8 <extint_is_syncing+0x44>)
     36c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     36e:	2300      	movs	r3, #0
     370:	607b      	str	r3, [r7, #4]
     372:	e011      	b.n	398 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     374:	687b      	ldr	r3, [r7, #4]
     376:	009b      	lsls	r3, r3, #2
     378:	2208      	movs	r2, #8
     37a:	4694      	mov	ip, r2
     37c:	44bc      	add	ip, r7
     37e:	4463      	add	r3, ip
     380:	3b08      	subs	r3, #8
     382:	681b      	ldr	r3, [r3, #0]
     384:	785b      	ldrb	r3, [r3, #1]
     386:	b2db      	uxtb	r3, r3
     388:	b25b      	sxtb	r3, r3
     38a:	2b00      	cmp	r3, #0
     38c:	da01      	bge.n	392 <extint_is_syncing+0x2e>
			return true;
     38e:	2301      	movs	r3, #1
     390:	e006      	b.n	3a0 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     392:	687b      	ldr	r3, [r7, #4]
     394:	3301      	adds	r3, #1
     396:	607b      	str	r3, [r7, #4]
     398:	687b      	ldr	r3, [r7, #4]
     39a:	2b00      	cmp	r3, #0
     39c:	d0ea      	beq.n	374 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
     39e:	2300      	movs	r3, #0
}
     3a0:	0018      	movs	r0, r3
     3a2:	46bd      	mov	sp, r7
     3a4:	b002      	add	sp, #8
     3a6:	bd80      	pop	{r7, pc}
     3a8:	40001800 	.word	0x40001800

000003ac <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     3ac:	b580      	push	{r7, lr}
     3ae:	b084      	sub	sp, #16
     3b0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     3b2:	4b2d      	ldr	r3, [pc, #180]	; (468 <_system_extint_init+0xbc>)
     3b4:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     3b6:	2140      	movs	r1, #64	; 0x40
     3b8:	2000      	movs	r0, #0
     3ba:	4b2c      	ldr	r3, [pc, #176]	; (46c <_system_extint_init+0xc0>)
     3bc:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     3be:	003b      	movs	r3, r7
     3c0:	0018      	movs	r0, r3
     3c2:	4b2b      	ldr	r3, [pc, #172]	; (470 <_system_extint_init+0xc4>)
     3c4:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     3c6:	003b      	movs	r3, r7
     3c8:	2200      	movs	r2, #0
     3ca:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     3cc:	003b      	movs	r3, r7
     3ce:	0019      	movs	r1, r3
     3d0:	2005      	movs	r0, #5
     3d2:	4b28      	ldr	r3, [pc, #160]	; (474 <_system_extint_init+0xc8>)
     3d4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     3d6:	2005      	movs	r0, #5
     3d8:	4b27      	ldr	r3, [pc, #156]	; (478 <_system_extint_init+0xcc>)
     3da:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     3dc:	2300      	movs	r3, #0
     3de:	60fb      	str	r3, [r7, #12]
     3e0:	e018      	b.n	414 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     3e2:	68fb      	ldr	r3, [r7, #12]
     3e4:	009b      	lsls	r3, r3, #2
     3e6:	2210      	movs	r2, #16
     3e8:	4694      	mov	ip, r2
     3ea:	44bc      	add	ip, r7
     3ec:	4463      	add	r3, ip
     3ee:	3b0c      	subs	r3, #12
     3f0:	681a      	ldr	r2, [r3, #0]
     3f2:	68fb      	ldr	r3, [r7, #12]
     3f4:	009b      	lsls	r3, r3, #2
     3f6:	2110      	movs	r1, #16
     3f8:	468c      	mov	ip, r1
     3fa:	44bc      	add	ip, r7
     3fc:	4463      	add	r3, ip
     3fe:	3b0c      	subs	r3, #12
     400:	681b      	ldr	r3, [r3, #0]
     402:	781b      	ldrb	r3, [r3, #0]
     404:	b2db      	uxtb	r3, r3
     406:	2101      	movs	r1, #1
     408:	430b      	orrs	r3, r1
     40a:	b2db      	uxtb	r3, r3
     40c:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     40e:	68fb      	ldr	r3, [r7, #12]
     410:	3301      	adds	r3, #1
     412:	60fb      	str	r3, [r7, #12]
     414:	68fb      	ldr	r3, [r7, #12]
     416:	2b00      	cmp	r3, #0
     418:	d0e3      	beq.n	3e2 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
     41a:	46c0      	nop			; (mov r8, r8)
     41c:	4b17      	ldr	r3, [pc, #92]	; (47c <_system_extint_init+0xd0>)
     41e:	4798      	blx	r3
     420:	1e03      	subs	r3, r0, #0
     422:	d1fb      	bne.n	41c <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     424:	230b      	movs	r3, #11
     426:	18fb      	adds	r3, r7, r3
     428:	2200      	movs	r2, #0
     42a:	701a      	strb	r2, [r3, #0]
     42c:	e00d      	b.n	44a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     42e:	230b      	movs	r3, #11
     430:	18fb      	adds	r3, r7, r3
     432:	781a      	ldrb	r2, [r3, #0]
     434:	4b12      	ldr	r3, [pc, #72]	; (480 <_system_extint_init+0xd4>)
     436:	0092      	lsls	r2, r2, #2
     438:	2100      	movs	r1, #0
     43a:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     43c:	230b      	movs	r3, #11
     43e:	18fb      	adds	r3, r7, r3
     440:	781a      	ldrb	r2, [r3, #0]
     442:	230b      	movs	r3, #11
     444:	18fb      	adds	r3, r7, r3
     446:	3201      	adds	r2, #1
     448:	701a      	strb	r2, [r3, #0]
     44a:	230b      	movs	r3, #11
     44c:	18fb      	adds	r3, r7, r3
     44e:	781b      	ldrb	r3, [r3, #0]
     450:	2b0f      	cmp	r3, #15
     452:	d9ec      	bls.n	42e <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     454:	2004      	movs	r0, #4
     456:	4b0b      	ldr	r3, [pc, #44]	; (484 <_system_extint_init+0xd8>)
     458:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     45a:	4b0b      	ldr	r3, [pc, #44]	; (488 <_system_extint_init+0xdc>)
     45c:	4798      	blx	r3
}
     45e:	46c0      	nop			; (mov r8, r8)
     460:	46bd      	mov	sp, r7
     462:	b004      	add	sp, #16
     464:	bd80      	pop	{r7, pc}
     466:	46c0      	nop			; (mov r8, r8)
     468:	40001800 	.word	0x40001800
     46c:	000002dd 	.word	0x000002dd
     470:	000002c5 	.word	0x000002c5
     474:	00004c19 	.word	0x00004c19
     478:	00004c5d 	.word	0x00004c5d
     47c:	00000365 	.word	0x00000365
     480:	2000042c 	.word	0x2000042c
     484:	00000339 	.word	0x00000339
     488:	0000048d 	.word	0x0000048d

0000048c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     48c:	b580      	push	{r7, lr}
     48e:	b082      	sub	sp, #8
     490:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     492:	4b15      	ldr	r3, [pc, #84]	; (4e8 <_extint_enable+0x5c>)
     494:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     496:	2300      	movs	r3, #0
     498:	607b      	str	r3, [r7, #4]
     49a:	e018      	b.n	4ce <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     49c:	687b      	ldr	r3, [r7, #4]
     49e:	009b      	lsls	r3, r3, #2
     4a0:	2208      	movs	r2, #8
     4a2:	4694      	mov	ip, r2
     4a4:	44bc      	add	ip, r7
     4a6:	4463      	add	r3, ip
     4a8:	3b08      	subs	r3, #8
     4aa:	681a      	ldr	r2, [r3, #0]
     4ac:	687b      	ldr	r3, [r7, #4]
     4ae:	009b      	lsls	r3, r3, #2
     4b0:	2108      	movs	r1, #8
     4b2:	468c      	mov	ip, r1
     4b4:	44bc      	add	ip, r7
     4b6:	4463      	add	r3, ip
     4b8:	3b08      	subs	r3, #8
     4ba:	681b      	ldr	r3, [r3, #0]
     4bc:	781b      	ldrb	r3, [r3, #0]
     4be:	b2db      	uxtb	r3, r3
     4c0:	2102      	movs	r1, #2
     4c2:	430b      	orrs	r3, r1
     4c4:	b2db      	uxtb	r3, r3
     4c6:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     4c8:	687b      	ldr	r3, [r7, #4]
     4ca:	3301      	adds	r3, #1
     4cc:	607b      	str	r3, [r7, #4]
     4ce:	687b      	ldr	r3, [r7, #4]
     4d0:	2b00      	cmp	r3, #0
     4d2:	d0e3      	beq.n	49c <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     4d4:	46c0      	nop			; (mov r8, r8)
     4d6:	4b05      	ldr	r3, [pc, #20]	; (4ec <_extint_enable+0x60>)
     4d8:	4798      	blx	r3
     4da:	1e03      	subs	r3, r0, #0
     4dc:	d1fb      	bne.n	4d6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	46bd      	mov	sp, r7
     4e2:	b002      	add	sp, #8
     4e4:	bd80      	pop	{r7, pc}
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	40001800 	.word	0x40001800
     4ec:	00000365 	.word	0x00000365

000004f0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     4f0:	b580      	push	{r7, lr}
     4f2:	b082      	sub	sp, #8
     4f4:	af00      	add	r7, sp, #0
     4f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4f8:	687b      	ldr	r3, [r7, #4]
     4fa:	2280      	movs	r2, #128	; 0x80
     4fc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     4fe:	687b      	ldr	r3, [r7, #4]
     500:	2200      	movs	r2, #0
     502:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     504:	687b      	ldr	r3, [r7, #4]
     506:	2201      	movs	r2, #1
     508:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	2200      	movs	r2, #0
     50e:	70da      	strb	r2, [r3, #3]
}
     510:	46c0      	nop			; (mov r8, r8)
     512:	46bd      	mov	sp, r7
     514:	b002      	add	sp, #8
     516:	bd80      	pop	{r7, pc}

00000518 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     518:	b580      	push	{r7, lr}
     51a:	b084      	sub	sp, #16
     51c:	af00      	add	r7, sp, #0
     51e:	0002      	movs	r2, r0
     520:	6039      	str	r1, [r7, #0]
     522:	1dfb      	adds	r3, r7, #7
     524:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     526:	230c      	movs	r3, #12
     528:	18fb      	adds	r3, r7, r3
     52a:	0018      	movs	r0, r3
     52c:	4b10      	ldr	r3, [pc, #64]	; (570 <port_pin_set_config+0x58>)
     52e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     530:	230c      	movs	r3, #12
     532:	18fb      	adds	r3, r7, r3
     534:	2280      	movs	r2, #128	; 0x80
     536:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     538:	683b      	ldr	r3, [r7, #0]
     53a:	781a      	ldrb	r2, [r3, #0]
     53c:	230c      	movs	r3, #12
     53e:	18fb      	adds	r3, r7, r3
     540:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     542:	683b      	ldr	r3, [r7, #0]
     544:	785a      	ldrb	r2, [r3, #1]
     546:	230c      	movs	r3, #12
     548:	18fb      	adds	r3, r7, r3
     54a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     54c:	683b      	ldr	r3, [r7, #0]
     54e:	789a      	ldrb	r2, [r3, #2]
     550:	230c      	movs	r3, #12
     552:	18fb      	adds	r3, r7, r3
     554:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     556:	230c      	movs	r3, #12
     558:	18fa      	adds	r2, r7, r3
     55a:	1dfb      	adds	r3, r7, #7
     55c:	781b      	ldrb	r3, [r3, #0]
     55e:	0011      	movs	r1, r2
     560:	0018      	movs	r0, r3
     562:	4b04      	ldr	r3, [pc, #16]	; (574 <port_pin_set_config+0x5c>)
     564:	4798      	blx	r3
}
     566:	46c0      	nop			; (mov r8, r8)
     568:	46bd      	mov	sp, r7
     56a:	b004      	add	sp, #16
     56c:	bd80      	pop	{r7, pc}
     56e:	46c0      	nop			; (mov r8, r8)
     570:	000004f1 	.word	0x000004f1
     574:	00004f4d 	.word	0x00004f4d

00000578 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     578:	b580      	push	{r7, lr}
     57a:	b084      	sub	sp, #16
     57c:	af00      	add	r7, sp, #0
     57e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     580:	687b      	ldr	r3, [r7, #4]
     582:	681b      	ldr	r3, [r3, #0]
     584:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     586:	68fb      	ldr	r3, [r7, #12]
     588:	69db      	ldr	r3, [r3, #28]
     58a:	2207      	movs	r2, #7
     58c:	4013      	ands	r3, r2
     58e:	1e5a      	subs	r2, r3, #1
     590:	4193      	sbcs	r3, r2
     592:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     594:	0018      	movs	r0, r3
     596:	46bd      	mov	sp, r7
     598:	b004      	add	sp, #16
     59a:	bd80      	pop	{r7, pc}

0000059c <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     59c:	b580      	push	{r7, lr}
     59e:	b082      	sub	sp, #8
     5a0:	af00      	add	r7, sp, #0
     5a2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     5a4:	46c0      	nop			; (mov r8, r8)
     5a6:	687b      	ldr	r3, [r7, #4]
     5a8:	0018      	movs	r0, r3
     5aa:	4b04      	ldr	r3, [pc, #16]	; (5bc <_i2c_master_wait_for_sync+0x20>)
     5ac:	4798      	blx	r3
     5ae:	1e03      	subs	r3, r0, #0
     5b0:	d1f9      	bne.n	5a6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     5b2:	46c0      	nop			; (mov r8, r8)
     5b4:	46bd      	mov	sp, r7
     5b6:	b002      	add	sp, #8
     5b8:	bd80      	pop	{r7, pc}
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	00000579 	.word	0x00000579

000005c0 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
     5c0:	b580      	push	{r7, lr}
     5c2:	b084      	sub	sp, #16
     5c4:	af00      	add	r7, sp, #0
     5c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5c8:	687b      	ldr	r3, [r7, #4]
     5ca:	681b      	ldr	r3, [r3, #0]
     5cc:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     5ce:	68fb      	ldr	r3, [r7, #12]
     5d0:	7e1b      	ldrb	r3, [r3, #24]
     5d2:	b2db      	uxtb	r3, r3
     5d4:	001a      	movs	r2, r3
     5d6:	2302      	movs	r3, #2
     5d8:	4013      	ands	r3, r2
     5da:	d00b      	beq.n	5f4 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     5dc:	68fb      	ldr	r3, [r7, #12]
     5de:	2202      	movs	r2, #2
     5e0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     5e2:	68fb      	ldr	r3, [r7, #12]
     5e4:	8b5b      	ldrh	r3, [r3, #26]
     5e6:	b29b      	uxth	r3, r3
     5e8:	001a      	movs	r2, r3
     5ea:	2302      	movs	r3, #2
     5ec:	4013      	ands	r3, r2
     5ee:	d011      	beq.n	614 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     5f0:	2341      	movs	r3, #65	; 0x41
     5f2:	e010      	b.n	616 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     5f4:	68fb      	ldr	r3, [r7, #12]
     5f6:	8b5b      	ldrh	r3, [r3, #26]
     5f8:	b29b      	uxth	r3, r3
     5fa:	001a      	movs	r2, r3
     5fc:	2304      	movs	r3, #4
     5fe:	4013      	ands	r3, r2
     600:	d008      	beq.n	614 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     602:	68fb      	ldr	r3, [r7, #12]
     604:	685b      	ldr	r3, [r3, #4]
     606:	22c0      	movs	r2, #192	; 0xc0
     608:	0292      	lsls	r2, r2, #10
     60a:	431a      	orrs	r2, r3
     60c:	68fb      	ldr	r3, [r7, #12]
     60e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     610:	2318      	movs	r3, #24
     612:	e000      	b.n	616 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
     614:	2300      	movs	r3, #0
}
     616:	0018      	movs	r0, r3
     618:	46bd      	mov	sp, r7
     61a:	b004      	add	sp, #16
     61c:	bd80      	pop	{r7, pc}
     61e:	46c0      	nop			; (mov r8, r8)

00000620 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     620:	b580      	push	{r7, lr}
     622:	b084      	sub	sp, #16
     624:	af00      	add	r7, sp, #0
     626:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     628:	687b      	ldr	r3, [r7, #4]
     62a:	681b      	ldr	r3, [r3, #0]
     62c:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     62e:	230e      	movs	r3, #14
     630:	18fb      	adds	r3, r7, r3
     632:	2200      	movs	r2, #0
     634:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     636:	e00f      	b.n	658 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     638:	230e      	movs	r3, #14
     63a:	18fb      	adds	r3, r7, r3
     63c:	220e      	movs	r2, #14
     63e:	18ba      	adds	r2, r7, r2
     640:	8812      	ldrh	r2, [r2, #0]
     642:	3201      	adds	r2, #1
     644:	801a      	strh	r2, [r3, #0]
     646:	687b      	ldr	r3, [r7, #4]
     648:	891b      	ldrh	r3, [r3, #8]
     64a:	220e      	movs	r2, #14
     64c:	18ba      	adds	r2, r7, r2
     64e:	8812      	ldrh	r2, [r2, #0]
     650:	429a      	cmp	r2, r3
     652:	d301      	bcc.n	658 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
     654:	2312      	movs	r3, #18
     656:	e00e      	b.n	676 <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     658:	68bb      	ldr	r3, [r7, #8]
     65a:	7e1b      	ldrb	r3, [r3, #24]
     65c:	b2db      	uxtb	r3, r3
     65e:	001a      	movs	r2, r3
     660:	2301      	movs	r3, #1
     662:	4013      	ands	r3, r2
     664:	d106      	bne.n	674 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     666:	68bb      	ldr	r3, [r7, #8]
     668:	7e1b      	ldrb	r3, [r3, #24]
     66a:	b2db      	uxtb	r3, r3
     66c:	001a      	movs	r2, r3
     66e:	2302      	movs	r3, #2
     670:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     672:	d0e1      	beq.n	638 <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     674:	2300      	movs	r3, #0
}
     676:	0018      	movs	r0, r3
     678:	46bd      	mov	sp, r7
     67a:	b004      	add	sp, #16
     67c:	bd80      	pop	{r7, pc}
     67e:	46c0      	nop			; (mov r8, r8)

00000680 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     680:	b590      	push	{r4, r7, lr}
     682:	b085      	sub	sp, #20
     684:	af00      	add	r7, sp, #0
     686:	6078      	str	r0, [r7, #4]
     688:	000a      	movs	r2, r1
     68a:	1cfb      	adds	r3, r7, #3
     68c:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     68e:	687b      	ldr	r3, [r7, #4]
     690:	681b      	ldr	r3, [r3, #0]
     692:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     694:	68fb      	ldr	r3, [r7, #12]
     696:	685b      	ldr	r3, [r3, #4]
     698:	2280      	movs	r2, #128	; 0x80
     69a:	02d2      	lsls	r2, r2, #11
     69c:	431a      	orrs	r2, r3
     69e:	68fb      	ldr	r3, [r7, #12]
     6a0:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     6a2:	1cfb      	adds	r3, r7, #3
     6a4:	781a      	ldrb	r2, [r3, #0]
     6a6:	68fb      	ldr	r3, [r7, #12]
     6a8:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     6aa:	230b      	movs	r3, #11
     6ac:	18fc      	adds	r4, r7, r3
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	0018      	movs	r0, r3
     6b2:	4b07      	ldr	r3, [pc, #28]	; (6d0 <_i2c_master_send_hs_master_code+0x50>)
     6b4:	4798      	blx	r3
     6b6:	0003      	movs	r3, r0
     6b8:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     6ba:	68fb      	ldr	r3, [r7, #12]
     6bc:	2201      	movs	r2, #1
     6be:	761a      	strb	r2, [r3, #24]

	return tmp_status;
     6c0:	230b      	movs	r3, #11
     6c2:	18fb      	adds	r3, r7, r3
     6c4:	781b      	ldrb	r3, [r3, #0]
}
     6c6:	0018      	movs	r0, r3
     6c8:	46bd      	mov	sp, r7
     6ca:	b005      	add	sp, #20
     6cc:	bd90      	pop	{r4, r7, pc}
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	00000621 	.word	0x00000621

000006d4 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     6d4:	b590      	push	{r4, r7, lr}
     6d6:	b087      	sub	sp, #28
     6d8:	af00      	add	r7, sp, #0
     6da:	6078      	str	r0, [r7, #4]
     6dc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	681b      	ldr	r3, [r3, #0]
     6e2:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     6e4:	2314      	movs	r3, #20
     6e6:	18fb      	adds	r3, r7, r3
     6e8:	683a      	ldr	r2, [r7, #0]
     6ea:	8852      	ldrh	r2, [r2, #2]
     6ec:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
     6ee:	2312      	movs	r3, #18
     6f0:	18fb      	adds	r3, r7, r3
     6f2:	2200      	movs	r2, #0
     6f4:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6f6:	68fb      	ldr	r3, [r7, #12]
     6f8:	681b      	ldr	r3, [r3, #0]
     6fa:	011b      	lsls	r3, r3, #4
     6fc:	0fdb      	lsrs	r3, r3, #31
     6fe:	b2db      	uxtb	r3, r3
     700:	001a      	movs	r2, r3
     702:	230b      	movs	r3, #11
     704:	18fb      	adds	r3, r7, r3
     706:	1e51      	subs	r1, r2, #1
     708:	418a      	sbcs	r2, r1
     70a:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     70c:	683b      	ldr	r3, [r7, #0]
     70e:	7a5b      	ldrb	r3, [r3, #9]
     710:	2b00      	cmp	r3, #0
     712:	d006      	beq.n	722 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     714:	683b      	ldr	r3, [r7, #0]
     716:	7a9a      	ldrb	r2, [r3, #10]
     718:	687b      	ldr	r3, [r7, #4]
     71a:	0011      	movs	r1, r2
     71c:	0018      	movs	r0, r3
     71e:	4b85      	ldr	r3, [pc, #532]	; (934 <_i2c_master_read_packet+0x260>)
     720:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     722:	68fb      	ldr	r3, [r7, #12]
     724:	685b      	ldr	r3, [r3, #4]
     726:	4a84      	ldr	r2, [pc, #528]	; (938 <_i2c_master_read_packet+0x264>)
     728:	401a      	ands	r2, r3
     72a:	68fb      	ldr	r3, [r7, #12]
     72c:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     72e:	683b      	ldr	r3, [r7, #0]
     730:	7a1b      	ldrb	r3, [r3, #8]
     732:	2b00      	cmp	r3, #0
     734:	d042      	beq.n	7bc <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     736:	683b      	ldr	r3, [r7, #0]
     738:	881b      	ldrh	r3, [r3, #0]
     73a:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     73c:	683b      	ldr	r3, [r7, #0]
     73e:	7a5b      	ldrb	r3, [r3, #9]
     740:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     742:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     744:	001a      	movs	r2, r3
     746:	2380      	movs	r3, #128	; 0x80
     748:	021b      	lsls	r3, r3, #8
     74a:	431a      	orrs	r2, r3
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     74c:	68fb      	ldr	r3, [r7, #12]
     74e:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     750:	2317      	movs	r3, #23
     752:	18fc      	adds	r4, r7, r3
     754:	687b      	ldr	r3, [r7, #4]
     756:	0018      	movs	r0, r3
     758:	4b78      	ldr	r3, [pc, #480]	; (93c <_i2c_master_read_packet+0x268>)
     75a:	4798      	blx	r3
     75c:	0003      	movs	r3, r0
     75e:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     760:	68fb      	ldr	r3, [r7, #12]
     762:	685b      	ldr	r3, [r3, #4]
     764:	4a74      	ldr	r2, [pc, #464]	; (938 <_i2c_master_read_packet+0x264>)
     766:	401a      	ands	r2, r3
     768:	68fb      	ldr	r3, [r7, #12]
     76a:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     76c:	2317      	movs	r3, #23
     76e:	18fb      	adds	r3, r7, r3
     770:	781b      	ldrb	r3, [r3, #0]
     772:	2b00      	cmp	r3, #0
     774:	d107      	bne.n	786 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
     776:	2317      	movs	r3, #23
     778:	18fc      	adds	r4, r7, r3
     77a:	687b      	ldr	r3, [r7, #4]
     77c:	0018      	movs	r0, r3
     77e:	4b70      	ldr	r3, [pc, #448]	; (940 <_i2c_master_read_packet+0x26c>)
     780:	4798      	blx	r3
     782:	0003      	movs	r3, r0
     784:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
     786:	2317      	movs	r3, #23
     788:	18fb      	adds	r3, r7, r3
     78a:	781b      	ldrb	r3, [r3, #0]
     78c:	2b00      	cmp	r3, #0
     78e:	d111      	bne.n	7b4 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     790:	683b      	ldr	r3, [r7, #0]
     792:	881b      	ldrh	r3, [r3, #0]
     794:	0a1b      	lsrs	r3, r3, #8
     796:	b29b      	uxth	r3, r3
     798:	2278      	movs	r2, #120	; 0x78
     79a:	4313      	orrs	r3, r2
     79c:	b29b      	uxth	r3, r3
     79e:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     7a0:	683b      	ldr	r3, [r7, #0]
     7a2:	7a5b      	ldrb	r3, [r3, #9]
     7a4:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     7a6:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     7a8:	2201      	movs	r2, #1
     7aa:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     7ac:	001a      	movs	r2, r3
     7ae:	68fb      	ldr	r3, [r7, #12]
     7b0:	625a      	str	r2, [r3, #36]	; 0x24
     7b2:	e00f      	b.n	7d4 <_i2c_master_read_packet+0x100>
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
     7b4:	2317      	movs	r3, #23
     7b6:	18fb      	adds	r3, r7, r3
     7b8:	781b      	ldrb	r3, [r3, #0]
     7ba:	e0b6      	b.n	92a <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     7bc:	683b      	ldr	r3, [r7, #0]
     7be:	881b      	ldrh	r3, [r3, #0]
     7c0:	005b      	lsls	r3, r3, #1
     7c2:	2201      	movs	r2, #1
     7c4:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     7c6:	683b      	ldr	r3, [r7, #0]
     7c8:	7a5b      	ldrb	r3, [r3, #9]
     7ca:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     7cc:	4313      	orrs	r3, r2
     7ce:	001a      	movs	r2, r3
     7d0:	68fb      	ldr	r3, [r7, #12]
     7d2:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     7d4:	2317      	movs	r3, #23
     7d6:	18fc      	adds	r4, r7, r3
     7d8:	687b      	ldr	r3, [r7, #4]
     7da:	0018      	movs	r0, r3
     7dc:	4b57      	ldr	r3, [pc, #348]	; (93c <_i2c_master_read_packet+0x268>)
     7de:	4798      	blx	r3
     7e0:	0003      	movs	r3, r0
     7e2:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     7e4:	230b      	movs	r3, #11
     7e6:	18fb      	adds	r3, r7, r3
     7e8:	781b      	ldrb	r3, [r3, #0]
     7ea:	2b00      	cmp	r3, #0
     7ec:	d00b      	beq.n	806 <_i2c_master_read_packet+0x132>
     7ee:	683b      	ldr	r3, [r7, #0]
     7f0:	885b      	ldrh	r3, [r3, #2]
     7f2:	2b01      	cmp	r3, #1
     7f4:	d107      	bne.n	806 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     7f6:	68fb      	ldr	r3, [r7, #12]
     7f8:	685b      	ldr	r3, [r3, #4]
     7fa:	2280      	movs	r2, #128	; 0x80
     7fc:	02d2      	lsls	r2, r2, #11
     7fe:	431a      	orrs	r2, r3
     800:	68fb      	ldr	r3, [r7, #12]
     802:	605a      	str	r2, [r3, #4]
     804:	e005      	b.n	812 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     806:	68fb      	ldr	r3, [r7, #12]
     808:	685b      	ldr	r3, [r3, #4]
     80a:	4a4b      	ldr	r2, [pc, #300]	; (938 <_i2c_master_read_packet+0x264>)
     80c:	401a      	ands	r2, r3
     80e:	68fb      	ldr	r3, [r7, #12]
     810:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     812:	2317      	movs	r3, #23
     814:	18fb      	adds	r3, r7, r3
     816:	781b      	ldrb	r3, [r3, #0]
     818:	2b00      	cmp	r3, #0
     81a:	d107      	bne.n	82c <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
     81c:	2317      	movs	r3, #23
     81e:	18fc      	adds	r4, r7, r3
     820:	687b      	ldr	r3, [r7, #4]
     822:	0018      	movs	r0, r3
     824:	4b46      	ldr	r3, [pc, #280]	; (940 <_i2c_master_read_packet+0x26c>)
     826:	4798      	blx	r3
     828:	0003      	movs	r3, r0
     82a:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     82c:	2317      	movs	r3, #23
     82e:	18fb      	adds	r3, r7, r3
     830:	781b      	ldrb	r3, [r3, #0]
     832:	2b00      	cmp	r3, #0
     834:	d000      	beq.n	838 <_i2c_master_read_packet+0x164>
     836:	e075      	b.n	924 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
     838:	e04b      	b.n	8d2 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     83a:	68fb      	ldr	r3, [r7, #12]
     83c:	8b5b      	ldrh	r3, [r3, #26]
     83e:	b29b      	uxth	r3, r3
     840:	001a      	movs	r2, r3
     842:	2320      	movs	r3, #32
     844:	4013      	ands	r3, r2
     846:	d101      	bne.n	84c <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
     848:	2341      	movs	r3, #65	; 0x41
     84a:	e06e      	b.n	92a <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     84c:	687b      	ldr	r3, [r7, #4]
     84e:	7adb      	ldrb	r3, [r3, #11]
     850:	2b00      	cmp	r3, #0
     852:	d01e      	beq.n	892 <_i2c_master_read_packet+0x1be>
     854:	230b      	movs	r3, #11
     856:	18fb      	adds	r3, r7, r3
     858:	781b      	ldrb	r3, [r3, #0]
     85a:	2201      	movs	r2, #1
     85c:	4053      	eors	r3, r2
     85e:	b2db      	uxtb	r3, r3
     860:	2b00      	cmp	r3, #0
     862:	d004      	beq.n	86e <_i2c_master_read_packet+0x19a>
     864:	2314      	movs	r3, #20
     866:	18fb      	adds	r3, r7, r3
     868:	881b      	ldrh	r3, [r3, #0]
     86a:	2b00      	cmp	r3, #0
     86c:	d009      	beq.n	882 <_i2c_master_read_packet+0x1ae>
     86e:	230b      	movs	r3, #11
     870:	18fb      	adds	r3, r7, r3
     872:	781b      	ldrb	r3, [r3, #0]
     874:	2b00      	cmp	r3, #0
     876:	d00c      	beq.n	892 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     878:	2314      	movs	r3, #20
     87a:	18fb      	adds	r3, r7, r3
     87c:	881b      	ldrh	r3, [r3, #0]
     87e:	2b01      	cmp	r3, #1
     880:	d107      	bne.n	892 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     882:	68fb      	ldr	r3, [r7, #12]
     884:	685b      	ldr	r3, [r3, #4]
     886:	2280      	movs	r2, #128	; 0x80
     888:	02d2      	lsls	r2, r2, #11
     88a:	431a      	orrs	r2, r3
     88c:	68fb      	ldr	r3, [r7, #12]
     88e:	605a      	str	r2, [r3, #4]
     890:	e01a      	b.n	8c8 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
     892:	687b      	ldr	r3, [r7, #4]
     894:	0018      	movs	r0, r3
     896:	4b2b      	ldr	r3, [pc, #172]	; (944 <_i2c_master_read_packet+0x270>)
     898:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     89a:	683b      	ldr	r3, [r7, #0]
     89c:	685a      	ldr	r2, [r3, #4]
     89e:	2312      	movs	r3, #18
     8a0:	18fb      	adds	r3, r7, r3
     8a2:	881b      	ldrh	r3, [r3, #0]
     8a4:	2112      	movs	r1, #18
     8a6:	1879      	adds	r1, r7, r1
     8a8:	1c58      	adds	r0, r3, #1
     8aa:	8008      	strh	r0, [r1, #0]
     8ac:	18d3      	adds	r3, r2, r3
     8ae:	68fa      	ldr	r2, [r7, #12]
     8b0:	2128      	movs	r1, #40	; 0x28
     8b2:	5c52      	ldrb	r2, [r2, r1]
     8b4:	b2d2      	uxtb	r2, r2
     8b6:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     8b8:	2317      	movs	r3, #23
     8ba:	18fc      	adds	r4, r7, r3
     8bc:	687b      	ldr	r3, [r7, #4]
     8be:	0018      	movs	r0, r3
     8c0:	4b1e      	ldr	r3, [pc, #120]	; (93c <_i2c_master_read_packet+0x268>)
     8c2:	4798      	blx	r3
     8c4:	0003      	movs	r3, r0
     8c6:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     8c8:	2317      	movs	r3, #23
     8ca:	18fb      	adds	r3, r7, r3
     8cc:	781b      	ldrb	r3, [r3, #0]
     8ce:	2b00      	cmp	r3, #0
     8d0:	d109      	bne.n	8e6 <_i2c_master_read_packet+0x212>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     8d2:	2314      	movs	r3, #20
     8d4:	18fb      	adds	r3, r7, r3
     8d6:	881b      	ldrh	r3, [r3, #0]
     8d8:	2214      	movs	r2, #20
     8da:	18ba      	adds	r2, r7, r2
     8dc:	1e59      	subs	r1, r3, #1
     8de:	8011      	strh	r1, [r2, #0]
     8e0:	2b00      	cmp	r3, #0
     8e2:	d1aa      	bne.n	83a <_i2c_master_read_packet+0x166>
     8e4:	e000      	b.n	8e8 <_i2c_master_read_packet+0x214>
				tmp_status = _i2c_master_wait_for_bus(module);
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
     8e6:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
     8e8:	687b      	ldr	r3, [r7, #4]
     8ea:	7a9b      	ldrb	r3, [r3, #10]
     8ec:	2b00      	cmp	r3, #0
     8ee:	d00a      	beq.n	906 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	0018      	movs	r0, r3
     8f4:	4b13      	ldr	r3, [pc, #76]	; (944 <_i2c_master_read_packet+0x270>)
     8f6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8f8:	68fb      	ldr	r3, [r7, #12]
     8fa:	685b      	ldr	r3, [r3, #4]
     8fc:	22c0      	movs	r2, #192	; 0xc0
     8fe:	0292      	lsls	r2, r2, #10
     900:	431a      	orrs	r2, r3
     902:	68fb      	ldr	r3, [r7, #12]
     904:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     906:	687b      	ldr	r3, [r7, #4]
     908:	0018      	movs	r0, r3
     90a:	4b0e      	ldr	r3, [pc, #56]	; (944 <_i2c_master_read_packet+0x270>)
     90c:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     90e:	683b      	ldr	r3, [r7, #0]
     910:	685a      	ldr	r2, [r3, #4]
     912:	2312      	movs	r3, #18
     914:	18fb      	adds	r3, r7, r3
     916:	881b      	ldrh	r3, [r3, #0]
     918:	18d3      	adds	r3, r2, r3
     91a:	68fa      	ldr	r2, [r7, #12]
     91c:	2128      	movs	r1, #40	; 0x28
     91e:	5c52      	ldrb	r2, [r2, r1]
     920:	b2d2      	uxtb	r2, r2
     922:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
     924:	2317      	movs	r3, #23
     926:	18fb      	adds	r3, r7, r3
     928:	781b      	ldrb	r3, [r3, #0]
}
     92a:	0018      	movs	r0, r3
     92c:	46bd      	mov	sp, r7
     92e:	b007      	add	sp, #28
     930:	bd90      	pop	{r4, r7, pc}
     932:	46c0      	nop			; (mov r8, r8)
     934:	00000681 	.word	0x00000681
     938:	fffbffff 	.word	0xfffbffff
     93c:	00000621 	.word	0x00000621
     940:	000005c1 	.word	0x000005c1
     944:	0000059d 	.word	0x0000059d

00000948 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     948:	b580      	push	{r7, lr}
     94a:	b082      	sub	sp, #8
     94c:	af00      	add	r7, sp, #0
     94e:	6078      	str	r0, [r7, #4]
     950:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     952:	687b      	ldr	r3, [r7, #4]
     954:	2201      	movs	r2, #1
     956:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     958:	687b      	ldr	r3, [r7, #4]
     95a:	2201      	movs	r2, #1
     95c:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
     95e:	683a      	ldr	r2, [r7, #0]
     960:	687b      	ldr	r3, [r7, #4]
     962:	0011      	movs	r1, r2
     964:	0018      	movs	r0, r3
     966:	4b03      	ldr	r3, [pc, #12]	; (974 <i2c_master_read_packet_wait+0x2c>)
     968:	4798      	blx	r3
     96a:	0003      	movs	r3, r0
}
     96c:	0018      	movs	r0, r3
     96e:	46bd      	mov	sp, r7
     970:	b002      	add	sp, #8
     972:	bd80      	pop	{r7, pc}
     974:	000006d5 	.word	0x000006d5

00000978 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     978:	b590      	push	{r4, r7, lr}
     97a:	b087      	sub	sp, #28
     97c:	af00      	add	r7, sp, #0
     97e:	6078      	str	r0, [r7, #4]
     980:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     982:	687b      	ldr	r3, [r7, #4]
     984:	681b      	ldr	r3, [r3, #0]
     986:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     988:	2314      	movs	r3, #20
     98a:	18fb      	adds	r3, r7, r3
     98c:	683a      	ldr	r2, [r7, #0]
     98e:	8852      	ldrh	r2, [r2, #2]
     990:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
     992:	687b      	ldr	r3, [r7, #4]
     994:	0018      	movs	r0, r3
     996:	4b51      	ldr	r3, [pc, #324]	; (adc <_i2c_master_write_packet+0x164>)
     998:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     99a:	683b      	ldr	r3, [r7, #0]
     99c:	7a5b      	ldrb	r3, [r3, #9]
     99e:	2b00      	cmp	r3, #0
     9a0:	d006      	beq.n	9b0 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     9a2:	683b      	ldr	r3, [r7, #0]
     9a4:	7a9a      	ldrb	r2, [r3, #10]
     9a6:	687b      	ldr	r3, [r7, #4]
     9a8:	0011      	movs	r1, r2
     9aa:	0018      	movs	r0, r3
     9ac:	4b4c      	ldr	r3, [pc, #304]	; (ae0 <_i2c_master_write_packet+0x168>)
     9ae:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     9b0:	68fb      	ldr	r3, [r7, #12]
     9b2:	685b      	ldr	r3, [r3, #4]
     9b4:	4a4b      	ldr	r2, [pc, #300]	; (ae4 <_i2c_master_write_packet+0x16c>)
     9b6:	401a      	ands	r2, r3
     9b8:	68fb      	ldr	r3, [r7, #12]
     9ba:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     9bc:	683b      	ldr	r3, [r7, #0]
     9be:	7a1b      	ldrb	r3, [r3, #8]
     9c0:	2b00      	cmp	r3, #0
     9c2:	d00d      	beq.n	9e0 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9c4:	683b      	ldr	r3, [r7, #0]
     9c6:	881b      	ldrh	r3, [r3, #0]
     9c8:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9ca:	683b      	ldr	r3, [r7, #0]
     9cc:	7a5b      	ldrb	r3, [r3, #9]
     9ce:	039b      	lsls	r3, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9d0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9d2:	001a      	movs	r2, r3
     9d4:	2380      	movs	r3, #128	; 0x80
     9d6:	021b      	lsls	r3, r3, #8
     9d8:	431a      	orrs	r2, r3
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9da:	68fb      	ldr	r3, [r7, #12]
     9dc:	625a      	str	r2, [r3, #36]	; 0x24
     9de:	e009      	b.n	9f4 <_i2c_master_write_packet+0x7c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9e0:	683b      	ldr	r3, [r7, #0]
     9e2:	881b      	ldrh	r3, [r3, #0]
     9e4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     9e6:	683b      	ldr	r3, [r7, #0]
     9e8:	7a5b      	ldrb	r3, [r3, #9]
     9ea:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9ec:	4313      	orrs	r3, r2
     9ee:	001a      	movs	r2, r3
     9f0:	68fb      	ldr	r3, [r7, #12]
     9f2:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     9f4:	2317      	movs	r3, #23
     9f6:	18fc      	adds	r4, r7, r3
     9f8:	687b      	ldr	r3, [r7, #4]
     9fa:	0018      	movs	r0, r3
     9fc:	4b3a      	ldr	r3, [pc, #232]	; (ae8 <_i2c_master_write_packet+0x170>)
     9fe:	4798      	blx	r3
     a00:	0003      	movs	r3, r0
     a02:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     a04:	2317      	movs	r3, #23
     a06:	18fb      	adds	r3, r7, r3
     a08:	781b      	ldrb	r3, [r3, #0]
     a0a:	2b00      	cmp	r3, #0
     a0c:	d107      	bne.n	a1e <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
     a0e:	2317      	movs	r3, #23
     a10:	18fc      	adds	r4, r7, r3
     a12:	687b      	ldr	r3, [r7, #4]
     a14:	0018      	movs	r0, r3
     a16:	4b35      	ldr	r3, [pc, #212]	; (aec <_i2c_master_write_packet+0x174>)
     a18:	4798      	blx	r3
     a1a:	0003      	movs	r3, r0
     a1c:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     a1e:	2317      	movs	r3, #23
     a20:	18fb      	adds	r3, r7, r3
     a22:	781b      	ldrb	r3, [r3, #0]
     a24:	2b00      	cmp	r3, #0
     a26:	d152      	bne.n	ace <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
     a28:	2312      	movs	r3, #18
     a2a:	18fb      	adds	r3, r7, r3
     a2c:	2200      	movs	r2, #0
     a2e:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
     a30:	e033      	b.n	a9a <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     a32:	68fb      	ldr	r3, [r7, #12]
     a34:	8b5b      	ldrh	r3, [r3, #26]
     a36:	b29b      	uxth	r3, r3
     a38:	001a      	movs	r2, r3
     a3a:	2320      	movs	r3, #32
     a3c:	4013      	ands	r3, r2
     a3e:	d101      	bne.n	a44 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
     a40:	2341      	movs	r3, #65	; 0x41
     a42:	e047      	b.n	ad4 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     a44:	687b      	ldr	r3, [r7, #4]
     a46:	0018      	movs	r0, r3
     a48:	4b24      	ldr	r3, [pc, #144]	; (adc <_i2c_master_write_packet+0x164>)
     a4a:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     a4c:	683b      	ldr	r3, [r7, #0]
     a4e:	685a      	ldr	r2, [r3, #4]
     a50:	2312      	movs	r3, #18
     a52:	18fb      	adds	r3, r7, r3
     a54:	881b      	ldrh	r3, [r3, #0]
     a56:	2112      	movs	r1, #18
     a58:	1879      	adds	r1, r7, r1
     a5a:	1c58      	adds	r0, r3, #1
     a5c:	8008      	strh	r0, [r1, #0]
     a5e:	18d3      	adds	r3, r2, r3
     a60:	7819      	ldrb	r1, [r3, #0]
     a62:	68fb      	ldr	r3, [r7, #12]
     a64:	2228      	movs	r2, #40	; 0x28
     a66:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     a68:	2317      	movs	r3, #23
     a6a:	18fc      	adds	r4, r7, r3
     a6c:	687b      	ldr	r3, [r7, #4]
     a6e:	0018      	movs	r0, r3
     a70:	4b1d      	ldr	r3, [pc, #116]	; (ae8 <_i2c_master_write_packet+0x170>)
     a72:	4798      	blx	r3
     a74:	0003      	movs	r3, r0
     a76:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     a78:	2317      	movs	r3, #23
     a7a:	18fb      	adds	r3, r7, r3
     a7c:	781b      	ldrb	r3, [r3, #0]
     a7e:	2b00      	cmp	r3, #0
     a80:	d115      	bne.n	aae <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     a82:	68fb      	ldr	r3, [r7, #12]
     a84:	8b5b      	ldrh	r3, [r3, #26]
     a86:	b29b      	uxth	r3, r3
     a88:	001a      	movs	r2, r3
     a8a:	2304      	movs	r3, #4
     a8c:	4013      	ands	r3, r2
     a8e:	d004      	beq.n	a9a <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     a90:	2317      	movs	r3, #23
     a92:	18fb      	adds	r3, r7, r3
     a94:	221e      	movs	r2, #30
     a96:	701a      	strb	r2, [r3, #0]
				break;
     a98:	e00a      	b.n	ab0 <_i2c_master_write_packet+0x138>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     a9a:	2314      	movs	r3, #20
     a9c:	18fb      	adds	r3, r7, r3
     a9e:	881b      	ldrh	r3, [r3, #0]
     aa0:	2214      	movs	r2, #20
     aa2:	18ba      	adds	r2, r7, r2
     aa4:	1e59      	subs	r1, r3, #1
     aa6:	8011      	strh	r1, [r2, #0]
     aa8:	2b00      	cmp	r3, #0
     aaa:	d1c2      	bne.n	a32 <_i2c_master_write_packet+0xba>
     aac:	e000      	b.n	ab0 <_i2c_master_write_packet+0x138>
			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
     aae:	46c0      	nop			; (mov r8, r8)
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
     ab0:	687b      	ldr	r3, [r7, #4]
     ab2:	7a9b      	ldrb	r3, [r3, #10]
     ab4:	2b00      	cmp	r3, #0
     ab6:	d00a      	beq.n	ace <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     ab8:	687b      	ldr	r3, [r7, #4]
     aba:	0018      	movs	r0, r3
     abc:	4b07      	ldr	r3, [pc, #28]	; (adc <_i2c_master_write_packet+0x164>)
     abe:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ac0:	68fb      	ldr	r3, [r7, #12]
     ac2:	685b      	ldr	r3, [r3, #4]
     ac4:	22c0      	movs	r2, #192	; 0xc0
     ac6:	0292      	lsls	r2, r2, #10
     ac8:	431a      	orrs	r2, r3
     aca:	68fb      	ldr	r3, [r7, #12]
     acc:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
     ace:	2317      	movs	r3, #23
     ad0:	18fb      	adds	r3, r7, r3
     ad2:	781b      	ldrb	r3, [r3, #0]
}
     ad4:	0018      	movs	r0, r3
     ad6:	46bd      	mov	sp, r7
     ad8:	b007      	add	sp, #28
     ada:	bd90      	pop	{r4, r7, pc}
     adc:	0000059d 	.word	0x0000059d
     ae0:	00000681 	.word	0x00000681
     ae4:	fffbffff 	.word	0xfffbffff
     ae8:	00000621 	.word	0x00000621
     aec:	000005c1 	.word	0x000005c1

00000af0 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     af0:	b580      	push	{r7, lr}
     af2:	b082      	sub	sp, #8
     af4:	af00      	add	r7, sp, #0
     af6:	6078      	str	r0, [r7, #4]
     af8:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     afa:	687b      	ldr	r3, [r7, #4]
     afc:	2201      	movs	r2, #1
     afe:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     b00:	687b      	ldr	r3, [r7, #4]
     b02:	2201      	movs	r2, #1
     b04:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
     b06:	683a      	ldr	r2, [r7, #0]
     b08:	687b      	ldr	r3, [r7, #4]
     b0a:	0011      	movs	r1, r2
     b0c:	0018      	movs	r0, r3
     b0e:	4b03      	ldr	r3, [pc, #12]	; (b1c <i2c_master_write_packet_wait+0x2c>)
     b10:	4798      	blx	r3
     b12:	0003      	movs	r3, r0
}
     b14:	0018      	movs	r0, r3
     b16:	46bd      	mov	sp, r7
     b18:	b002      	add	sp, #8
     b1a:	bd80      	pop	{r7, pc}
     b1c:	00000979 	.word	0x00000979

00000b20 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     b20:	b580      	push	{r7, lr}
     b22:	b082      	sub	sp, #8
     b24:	af00      	add	r7, sp, #0
     b26:	0002      	movs	r2, r0
     b28:	6039      	str	r1, [r7, #0]
     b2a:	1dfb      	adds	r3, r7, #7
     b2c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     b2e:	1dfb      	adds	r3, r7, #7
     b30:	781b      	ldrb	r3, [r3, #0]
     b32:	2b01      	cmp	r3, #1
     b34:	d00a      	beq.n	b4c <system_apb_clock_set_mask+0x2c>
     b36:	2b02      	cmp	r3, #2
     b38:	d00f      	beq.n	b5a <system_apb_clock_set_mask+0x3a>
     b3a:	2b00      	cmp	r3, #0
     b3c:	d114      	bne.n	b68 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     b3e:	4b0e      	ldr	r3, [pc, #56]	; (b78 <system_apb_clock_set_mask+0x58>)
     b40:	4a0d      	ldr	r2, [pc, #52]	; (b78 <system_apb_clock_set_mask+0x58>)
     b42:	6991      	ldr	r1, [r2, #24]
     b44:	683a      	ldr	r2, [r7, #0]
     b46:	430a      	orrs	r2, r1
     b48:	619a      	str	r2, [r3, #24]
			break;
     b4a:	e00f      	b.n	b6c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     b4c:	4b0a      	ldr	r3, [pc, #40]	; (b78 <system_apb_clock_set_mask+0x58>)
     b4e:	4a0a      	ldr	r2, [pc, #40]	; (b78 <system_apb_clock_set_mask+0x58>)
     b50:	69d1      	ldr	r1, [r2, #28]
     b52:	683a      	ldr	r2, [r7, #0]
     b54:	430a      	orrs	r2, r1
     b56:	61da      	str	r2, [r3, #28]
			break;
     b58:	e008      	b.n	b6c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     b5a:	4b07      	ldr	r3, [pc, #28]	; (b78 <system_apb_clock_set_mask+0x58>)
     b5c:	4a06      	ldr	r2, [pc, #24]	; (b78 <system_apb_clock_set_mask+0x58>)
     b5e:	6a11      	ldr	r1, [r2, #32]
     b60:	683a      	ldr	r2, [r7, #0]
     b62:	430a      	orrs	r2, r1
     b64:	621a      	str	r2, [r3, #32]
			break;
     b66:	e001      	b.n	b6c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     b68:	2317      	movs	r3, #23
     b6a:	e000      	b.n	b6e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     b6c:	2300      	movs	r3, #0
}
     b6e:	0018      	movs	r0, r3
     b70:	46bd      	mov	sp, r7
     b72:	b002      	add	sp, #8
     b74:	bd80      	pop	{r7, pc}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	40000400 	.word	0x40000400

00000b7c <wdt_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool wdt_is_syncing(void)
{
     b7c:	b580      	push	{r7, lr}
     b7e:	b082      	sub	sp, #8
     b80:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
     b82:	4b07      	ldr	r3, [pc, #28]	; (ba0 <wdt_is_syncing+0x24>)
     b84:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
     b86:	687b      	ldr	r3, [r7, #4]
     b88:	79db      	ldrb	r3, [r3, #7]
     b8a:	b2db      	uxtb	r3, r3
     b8c:	b25b      	sxtb	r3, r3
     b8e:	2b00      	cmp	r3, #0
     b90:	da01      	bge.n	b96 <wdt_is_syncing+0x1a>
#endif
		return true;
     b92:	2301      	movs	r3, #1
     b94:	e000      	b.n	b98 <wdt_is_syncing+0x1c>
	}

	return false;
     b96:	2300      	movs	r3, #0
}
     b98:	0018      	movs	r0, r3
     b9a:	46bd      	mov	sp, r7
     b9c:	b002      	add	sp, #8
     b9e:	bd80      	pop	{r7, pc}
     ba0:	40001000 	.word	0x40001000

00000ba4 <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
     ba4:	b580      	push	{r7, lr}
     ba6:	b082      	sub	sp, #8
     ba8:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
     baa:	4b07      	ldr	r3, [pc, #28]	; (bc8 <wdt_is_locked+0x24>)
     bac:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
     bae:	687b      	ldr	r3, [r7, #4]
     bb0:	781b      	ldrb	r3, [r3, #0]
     bb2:	b2db      	uxtb	r3, r3
     bb4:	001a      	movs	r2, r3
     bb6:	2380      	movs	r3, #128	; 0x80
     bb8:	4013      	ands	r3, r2
     bba:	1e5a      	subs	r2, r3, #1
     bbc:	4193      	sbcs	r3, r2
     bbe:	b2db      	uxtb	r3, r3
#endif
}
     bc0:	0018      	movs	r0, r3
     bc2:	46bd      	mov	sp, r7
     bc4:	b002      	add	sp, #8
     bc6:	bd80      	pop	{r7, pc}
     bc8:	40001000 	.word	0x40001000

00000bcc <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
     bcc:	b580      	push	{r7, lr}
     bce:	b086      	sub	sp, #24
     bd0:	af00      	add	r7, sp, #0
     bd2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
     bd4:	4b54      	ldr	r3, [pc, #336]	; (d28 <wdt_set_config+0x15c>)
     bd6:	613b      	str	r3, [r7, #16]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);
     bd8:	2110      	movs	r1, #16
     bda:	2000      	movs	r0, #0
     bdc:	4b53      	ldr	r3, [pc, #332]	; (d2c <wdt_set_config+0x160>)
     bde:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
     be0:	4b53      	ldr	r3, [pc, #332]	; (d30 <wdt_set_config+0x164>)
     be2:	4798      	blx	r3
     be4:	1e03      	subs	r3, r0, #0
     be6:	d001      	beq.n	bec <wdt_set_config+0x20>
		return STATUS_ERR_IO;
     be8:	2310      	movs	r3, #16
     bea:	e098      	b.n	d1e <wdt_set_config+0x152>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
     bec:	687b      	ldr	r3, [r7, #4]
     bee:	78db      	ldrb	r3, [r3, #3]
     bf0:	2b00      	cmp	r3, #0
     bf2:	d101      	bne.n	bf8 <wdt_set_config+0x2c>
		return STATUS_ERR_INVALID_ARG;
     bf4:	2317      	movs	r3, #23
     bf6:	e092      	b.n	d1e <wdt_set_config+0x152>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
     bf8:	687b      	ldr	r3, [r7, #4]
     bfa:	78da      	ldrb	r2, [r3, #3]
     bfc:	687b      	ldr	r3, [r7, #4]
     bfe:	791b      	ldrb	r3, [r3, #4]
     c00:	429a      	cmp	r2, r3
     c02:	d305      	bcc.n	c10 <wdt_set_config+0x44>
			(config->timeout_period < config->early_warning_period)) {
     c04:	687b      	ldr	r3, [r7, #4]
     c06:	78da      	ldrb	r2, [r3, #3]
     c08:	687b      	ldr	r3, [r7, #4]
     c0a:	795b      	ldrb	r3, [r3, #5]
		return STATUS_ERR_INVALID_ARG;
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
     c0c:	429a      	cmp	r2, r3
     c0e:	d201      	bcs.n	c14 <wdt_set_config+0x48>
			(config->timeout_period < config->early_warning_period)) {
		return STATUS_ERR_INVALID_ARG;
     c10:	2317      	movs	r3, #23
     c12:	e084      	b.n	d1e <wdt_set_config+0x152>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
     c14:	693b      	ldr	r3, [r7, #16]
     c16:	781b      	ldrb	r3, [r3, #0]
     c18:	b2db      	uxtb	r3, r3
     c1a:	2202      	movs	r2, #2
     c1c:	4393      	bics	r3, r2
     c1e:	b2da      	uxtb	r2, r3
     c20:	693b      	ldr	r3, [r7, #16]
     c22:	701a      	strb	r2, [r3, #0]

	while (wdt_is_syncing()) {
     c24:	46c0      	nop			; (mov r8, r8)
     c26:	4b43      	ldr	r3, [pc, #268]	; (d34 <wdt_set_config+0x168>)
     c28:	4798      	blx	r3
     c2a:	1e03      	subs	r3, r0, #0
     c2c:	d1fb      	bne.n	c26 <wdt_set_config+0x5a>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
     c2e:	687b      	ldr	r3, [r7, #4]
     c30:	785b      	ldrb	r3, [r3, #1]
     c32:	2201      	movs	r2, #1
     c34:	4053      	eors	r3, r2
     c36:	b2db      	uxtb	r3, r3
     c38:	2b00      	cmp	r3, #0
     c3a:	d001      	beq.n	c40 <wdt_set_config+0x74>
		return STATUS_OK;
     c3c:	2300      	movs	r3, #0
     c3e:	e06e      	b.n	d1e <wdt_set_config+0x152>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
     c40:	687b      	ldr	r3, [r7, #4]
     c42:	789a      	ldrb	r2, [r3, #2]
     c44:	230c      	movs	r3, #12
     c46:	18fb      	adds	r3, r7, r3
     c48:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
     c4a:	230c      	movs	r3, #12
     c4c:	18fb      	adds	r3, r7, r3
     c4e:	0019      	movs	r1, r3
     c50:	2003      	movs	r0, #3
     c52:	4b39      	ldr	r3, [pc, #228]	; (d38 <wdt_set_config+0x16c>)
     c54:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
     c56:	2003      	movs	r0, #3
     c58:	4b38      	ldr	r3, [pc, #224]	; (d3c <wdt_set_config+0x170>)
     c5a:	4798      	blx	r3
	if (config->always_on) {
     c5c:	687b      	ldr	r3, [r7, #4]
     c5e:	781b      	ldrb	r3, [r3, #0]
     c60:	2b00      	cmp	r3, #0
     c62:	d002      	beq.n	c6a <wdt_set_config+0x9e>
		system_gclk_chan_lock(WDT_GCLK_ID);
     c64:	2003      	movs	r0, #3
     c66:	4b36      	ldr	r3, [pc, #216]	; (d40 <wdt_set_config+0x174>)
     c68:	4798      	blx	r3
	}

	uint32_t new_config = 0;
     c6a:	2300      	movs	r3, #0
     c6c:	617b      	str	r3, [r7, #20]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
     c6e:	687b      	ldr	r3, [r7, #4]
     c70:	78db      	ldrb	r3, [r3, #3]
     c72:	3b01      	subs	r3, #1
     c74:	001a      	movs	r2, r3
     c76:	697b      	ldr	r3, [r7, #20]
     c78:	4313      	orrs	r3, r2
     c7a:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	791b      	ldrb	r3, [r3, #4]
     c80:	2b00      	cmp	r3, #0
     c82:	d010      	beq.n	ca6 <wdt_set_config+0xda>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
     c84:	693b      	ldr	r3, [r7, #16]
     c86:	781b      	ldrb	r3, [r3, #0]
     c88:	b2db      	uxtb	r3, r3
     c8a:	2204      	movs	r2, #4
     c8c:	4313      	orrs	r3, r2
     c8e:	b2da      	uxtb	r2, r3
     c90:	693b      	ldr	r3, [r7, #16]
     c92:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
     c94:	687b      	ldr	r3, [r7, #4]
     c96:	791b      	ldrb	r3, [r3, #4]
     c98:	3b01      	subs	r3, #1
     c9a:	011b      	lsls	r3, r3, #4
     c9c:	001a      	movs	r2, r3
     c9e:	697b      	ldr	r3, [r7, #20]
     ca0:	4313      	orrs	r3, r2
     ca2:	617b      	str	r3, [r7, #20]
     ca4:	e007      	b.n	cb6 <wdt_set_config+0xea>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
     ca6:	693b      	ldr	r3, [r7, #16]
     ca8:	781b      	ldrb	r3, [r3, #0]
     caa:	b2db      	uxtb	r3, r3
     cac:	2204      	movs	r2, #4
     cae:	4393      	bics	r3, r2
     cb0:	b2da      	uxtb	r2, r3
     cb2:	693b      	ldr	r3, [r7, #16]
     cb4:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	4b1e      	ldr	r3, [pc, #120]	; (d34 <wdt_set_config+0x168>)
     cba:	4798      	blx	r3
     cbc:	1e03      	subs	r3, r0, #0
     cbe:	d1fb      	bne.n	cb8 <wdt_set_config+0xec>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
     cc0:	697b      	ldr	r3, [r7, #20]
     cc2:	b2da      	uxtb	r2, r3
     cc4:	693b      	ldr	r3, [r7, #16]
     cc6:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
     cc8:	687b      	ldr	r3, [r7, #4]
     cca:	795b      	ldrb	r3, [r3, #5]
     ccc:	2b00      	cmp	r3, #0
     cce:	d00a      	beq.n	ce6 <wdt_set_config+0x11a>
		while (wdt_is_syncing()) {
     cd0:	46c0      	nop			; (mov r8, r8)
     cd2:	4b18      	ldr	r3, [pc, #96]	; (d34 <wdt_set_config+0x168>)
     cd4:	4798      	blx	r3
     cd6:	1e03      	subs	r3, r0, #0
     cd8:	d1fb      	bne.n	cd2 <wdt_set_config+0x106>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
     cda:	687b      	ldr	r3, [r7, #4]
     cdc:	795b      	ldrb	r3, [r3, #5]
     cde:	3b01      	subs	r3, #1
     ce0:	b2da      	uxtb	r2, r3
     ce2:	693b      	ldr	r3, [r7, #16]
     ce4:	709a      	strb	r2, [r3, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
     ce6:	687b      	ldr	r3, [r7, #4]
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	2b00      	cmp	r3, #0
     cec:	d009      	beq.n	d02 <wdt_set_config+0x136>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
     cee:	693b      	ldr	r3, [r7, #16]
     cf0:	781b      	ldrb	r3, [r3, #0]
     cf2:	b2db      	uxtb	r3, r3
     cf4:	2280      	movs	r2, #128	; 0x80
     cf6:	4252      	negs	r2, r2
     cf8:	4313      	orrs	r3, r2
     cfa:	b2da      	uxtb	r2, r3
     cfc:	693b      	ldr	r3, [r7, #16]
     cfe:	701a      	strb	r2, [r3, #0]
     d00:	e007      	b.n	d12 <wdt_set_config+0x146>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
     d02:	693b      	ldr	r3, [r7, #16]
     d04:	781b      	ldrb	r3, [r3, #0]
     d06:	b2db      	uxtb	r3, r3
     d08:	2202      	movs	r2, #2
     d0a:	4313      	orrs	r3, r2
     d0c:	b2da      	uxtb	r2, r3
     d0e:	693b      	ldr	r3, [r7, #16]
     d10:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
     d12:	46c0      	nop			; (mov r8, r8)
     d14:	4b07      	ldr	r3, [pc, #28]	; (d34 <wdt_set_config+0x168>)
     d16:	4798      	blx	r3
     d18:	1e03      	subs	r3, r0, #0
     d1a:	d1fb      	bne.n	d14 <wdt_set_config+0x148>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
     d1c:	2300      	movs	r3, #0
}
     d1e:	0018      	movs	r0, r3
     d20:	46bd      	mov	sp, r7
     d22:	b006      	add	sp, #24
     d24:	bd80      	pop	{r7, pc}
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	40001000 	.word	0x40001000
     d2c:	00000b21 	.word	0x00000b21
     d30:	00000ba5 	.word	0x00000ba5
     d34:	00000b7d 	.word	0x00000b7d
     d38:	00004c19 	.word	0x00004c19
     d3c:	00004c5d 	.word	0x00004c5d
     d40:	00004d3d 	.word	0x00004d3d

00000d44 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
     d44:	b580      	push	{r7, lr}
     d46:	b082      	sub	sp, #8
     d48:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
     d4a:	4b04      	ldr	r3, [pc, #16]	; (d5c <wdt_clear_early_warning+0x18>)
     d4c:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
     d4e:	687b      	ldr	r3, [r7, #4]
     d50:	2201      	movs	r2, #1
     d52:	719a      	strb	r2, [r3, #6]
}
     d54:	46c0      	nop			; (mov r8, r8)
     d56:	46bd      	mov	sp, r7
     d58:	b002      	add	sp, #8
     d5a:	bd80      	pop	{r7, pc}
     d5c:	40001000 	.word	0x40001000

00000d60 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
     d60:	b580      	push	{r7, lr}
     d62:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
     d64:	4b05      	ldr	r3, [pc, #20]	; (d7c <WDT_Handler+0x1c>)
     d66:	4798      	blx	r3

	if (wdt_early_warning_callback) {
     d68:	4b05      	ldr	r3, [pc, #20]	; (d80 <WDT_Handler+0x20>)
     d6a:	681b      	ldr	r3, [r3, #0]
     d6c:	2b00      	cmp	r3, #0
     d6e:	d002      	beq.n	d76 <WDT_Handler+0x16>
		wdt_early_warning_callback();
     d70:	4b03      	ldr	r3, [pc, #12]	; (d80 <WDT_Handler+0x20>)
     d72:	681b      	ldr	r3, [r3, #0]
     d74:	4798      	blx	r3
	}
}
     d76:	46c0      	nop			; (mov r8, r8)
     d78:	46bd      	mov	sp, r7
     d7a:	bd80      	pop	{r7, pc}
     d7c:	00000d45 	.word	0x00000d45
     d80:	2000046c 	.word	0x2000046c

00000d84 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     d84:	b580      	push	{r7, lr}
     d86:	b082      	sub	sp, #8
     d88:	af00      	add	r7, sp, #0
     d8a:	0002      	movs	r2, r0
     d8c:	1dfb      	adds	r3, r7, #7
     d8e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     d90:	4b06      	ldr	r3, [pc, #24]	; (dac <NVIC_EnableIRQ+0x28>)
     d92:	1dfa      	adds	r2, r7, #7
     d94:	7812      	ldrb	r2, [r2, #0]
     d96:	0011      	movs	r1, r2
     d98:	221f      	movs	r2, #31
     d9a:	400a      	ands	r2, r1
     d9c:	2101      	movs	r1, #1
     d9e:	4091      	lsls	r1, r2
     da0:	000a      	movs	r2, r1
     da2:	601a      	str	r2, [r3, #0]
}
     da4:	46c0      	nop			; (mov r8, r8)
     da6:	46bd      	mov	sp, r7
     da8:	b002      	add	sp, #8
     daa:	bd80      	pop	{r7, pc}
     dac:	e000e100 	.word	0xe000e100

00000db0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     db0:	b5b0      	push	{r4, r5, r7, lr}
     db2:	b082      	sub	sp, #8
     db4:	af00      	add	r7, sp, #0
     db6:	0002      	movs	r2, r0
     db8:	6039      	str	r1, [r7, #0]
     dba:	1dfb      	adds	r3, r7, #7
     dbc:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
     dbe:	1dfb      	adds	r3, r7, #7
     dc0:	781b      	ldrb	r3, [r3, #0]
     dc2:	2b7f      	cmp	r3, #127	; 0x7f
     dc4:	d932      	bls.n	e2c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     dc6:	4c2f      	ldr	r4, [pc, #188]	; (e84 <NVIC_SetPriority+0xd4>)
     dc8:	1dfb      	adds	r3, r7, #7
     dca:	781b      	ldrb	r3, [r3, #0]
     dcc:	001a      	movs	r2, r3
     dce:	230f      	movs	r3, #15
     dd0:	4013      	ands	r3, r2
     dd2:	3b08      	subs	r3, #8
     dd4:	0899      	lsrs	r1, r3, #2
     dd6:	4a2b      	ldr	r2, [pc, #172]	; (e84 <NVIC_SetPriority+0xd4>)
     dd8:	1dfb      	adds	r3, r7, #7
     dda:	781b      	ldrb	r3, [r3, #0]
     ddc:	0018      	movs	r0, r3
     dde:	230f      	movs	r3, #15
     de0:	4003      	ands	r3, r0
     de2:	3b08      	subs	r3, #8
     de4:	089b      	lsrs	r3, r3, #2
     de6:	3306      	adds	r3, #6
     de8:	009b      	lsls	r3, r3, #2
     dea:	18d3      	adds	r3, r2, r3
     dec:	3304      	adds	r3, #4
     dee:	681b      	ldr	r3, [r3, #0]
     df0:	1dfa      	adds	r2, r7, #7
     df2:	7812      	ldrb	r2, [r2, #0]
     df4:	0010      	movs	r0, r2
     df6:	2203      	movs	r2, #3
     df8:	4002      	ands	r2, r0
     dfa:	00d2      	lsls	r2, r2, #3
     dfc:	20ff      	movs	r0, #255	; 0xff
     dfe:	4090      	lsls	r0, r2
     e00:	0002      	movs	r2, r0
     e02:	43d2      	mvns	r2, r2
     e04:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     e06:	683b      	ldr	r3, [r7, #0]
     e08:	019b      	lsls	r3, r3, #6
     e0a:	20ff      	movs	r0, #255	; 0xff
     e0c:	4018      	ands	r0, r3
     e0e:	1dfb      	adds	r3, r7, #7
     e10:	781b      	ldrb	r3, [r3, #0]
     e12:	001d      	movs	r5, r3
     e14:	2303      	movs	r3, #3
     e16:	402b      	ands	r3, r5
     e18:	00db      	lsls	r3, r3, #3
     e1a:	4098      	lsls	r0, r3
     e1c:	0003      	movs	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     e1e:	431a      	orrs	r2, r3
     e20:	1d8b      	adds	r3, r1, #6
     e22:	009b      	lsls	r3, r3, #2
     e24:	18e3      	adds	r3, r4, r3
     e26:	3304      	adds	r3, #4
     e28:	601a      	str	r2, [r3, #0]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
     e2a:	e027      	b.n	e7c <NVIC_SetPriority+0xcc>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     e2c:	4c16      	ldr	r4, [pc, #88]	; (e88 <NVIC_SetPriority+0xd8>)
     e2e:	1dfb      	adds	r3, r7, #7
     e30:	781b      	ldrb	r3, [r3, #0]
     e32:	b25b      	sxtb	r3, r3
     e34:	089b      	lsrs	r3, r3, #2
     e36:	4914      	ldr	r1, [pc, #80]	; (e88 <NVIC_SetPriority+0xd8>)
     e38:	1dfa      	adds	r2, r7, #7
     e3a:	7812      	ldrb	r2, [r2, #0]
     e3c:	b252      	sxtb	r2, r2
     e3e:	0892      	lsrs	r2, r2, #2
     e40:	32c0      	adds	r2, #192	; 0xc0
     e42:	0092      	lsls	r2, r2, #2
     e44:	5852      	ldr	r2, [r2, r1]
     e46:	1df9      	adds	r1, r7, #7
     e48:	7809      	ldrb	r1, [r1, #0]
     e4a:	0008      	movs	r0, r1
     e4c:	2103      	movs	r1, #3
     e4e:	4001      	ands	r1, r0
     e50:	00c9      	lsls	r1, r1, #3
     e52:	20ff      	movs	r0, #255	; 0xff
     e54:	4088      	lsls	r0, r1
     e56:	0001      	movs	r1, r0
     e58:	43c9      	mvns	r1, r1
     e5a:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     e5c:	683a      	ldr	r2, [r7, #0]
     e5e:	0192      	lsls	r2, r2, #6
     e60:	20ff      	movs	r0, #255	; 0xff
     e62:	4010      	ands	r0, r2
     e64:	1dfa      	adds	r2, r7, #7
     e66:	7812      	ldrb	r2, [r2, #0]
     e68:	0015      	movs	r5, r2
     e6a:	2203      	movs	r2, #3
     e6c:	402a      	ands	r2, r5
     e6e:	00d2      	lsls	r2, r2, #3
     e70:	4090      	lsls	r0, r2
     e72:	0002      	movs	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     e74:	430a      	orrs	r2, r1
     e76:	33c0      	adds	r3, #192	; 0xc0
     e78:	009b      	lsls	r3, r3, #2
     e7a:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
     e7c:	46c0      	nop			; (mov r8, r8)
     e7e:	46bd      	mov	sp, r7
     e80:	b002      	add	sp, #8
     e82:	bdb0      	pop	{r4, r5, r7, pc}
     e84:	e000ed00 	.word	0xe000ed00
     e88:	e000e100 	.word	0xe000e100

00000e8c <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     e8c:	b580      	push	{r7, lr}
     e8e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     e90:	4b04      	ldr	r3, [pc, #16]	; (ea4 <system_interrupt_enable_global+0x18>)
     e92:	2201      	movs	r2, #1
     e94:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     e96:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     e9a:	b662      	cpsie	i
}
     e9c:	46c0      	nop			; (mov r8, r8)
     e9e:	46bd      	mov	sp, r7
     ea0:	bd80      	pop	{r7, pc}
     ea2:	46c0      	nop			; (mov r8, r8)
     ea4:	20000368 	.word	0x20000368

00000ea8 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
     ea8:	b580      	push	{r7, lr}
     eaa:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     eac:	b672      	cpsid	i
     eae:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     eb2:	4b03      	ldr	r3, [pc, #12]	; (ec0 <system_interrupt_disable_global+0x18>)
     eb4:	2200      	movs	r2, #0
     eb6:	701a      	strb	r2, [r3, #0]
}
     eb8:	46c0      	nop			; (mov r8, r8)
     eba:	46bd      	mov	sp, r7
     ebc:	bd80      	pop	{r7, pc}
     ebe:	46c0      	nop			; (mov r8, r8)
     ec0:	20000368 	.word	0x20000368

00000ec4 <ble_uart_clk_init>:
	SERCOM_RX_PAD_3
} SercomRXPad;


void ble_uart_clk_init(void)
{
     ec4:	b580      	push	{r7, lr}
     ec6:	af00      	add	r7, sp, #0
	// Start the Software Reset and wait for it to finish
	BLE_UART_SERCOM->USART.CTRLA.bit.SWRST = 1 ;
     ec8:	4a13      	ldr	r2, [pc, #76]	; (f18 <ble_uart_clk_init+0x54>)
     eca:	6813      	ldr	r3, [r2, #0]
     ecc:	2101      	movs	r1, #1
     ece:	430b      	orrs	r3, r1
     ed0:	6013      	str	r3, [r2, #0]
	while ( BLE_UART_SERCOM->USART.CTRLA.bit.SWRST || BLE_UART_SERCOM->USART.SYNCBUSY.bit.SWRST );
     ed2:	46c0      	nop			; (mov r8, r8)
     ed4:	4b10      	ldr	r3, [pc, #64]	; (f18 <ble_uart_clk_init+0x54>)
     ed6:	681b      	ldr	r3, [r3, #0]
     ed8:	07db      	lsls	r3, r3, #31
     eda:	0fdb      	lsrs	r3, r3, #31
     edc:	b2db      	uxtb	r3, r3
     ede:	2b00      	cmp	r3, #0
     ee0:	d1f8      	bne.n	ed4 <ble_uart_clk_init+0x10>
     ee2:	4b0d      	ldr	r3, [pc, #52]	; (f18 <ble_uart_clk_init+0x54>)
     ee4:	69db      	ldr	r3, [r3, #28]
     ee6:	07db      	lsls	r3, r3, #31
     ee8:	0fdb      	lsrs	r3, r3, #31
     eea:	b2db      	uxtb	r3, r3
     eec:	2b00      	cmp	r3, #0
     eee:	d1f1      	bne.n	ed4 <ble_uart_clk_init+0x10>
	
	// Turn on peripheral clock for SERCOM being used
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM2;
     ef0:	4b0a      	ldr	r3, [pc, #40]	; (f1c <ble_uart_clk_init+0x58>)
     ef2:	4a0a      	ldr	r2, [pc, #40]	; (f1c <ble_uart_clk_init+0x58>)
     ef4:	6a12      	ldr	r2, [r2, #32]
     ef6:	2110      	movs	r1, #16
     ef8:	430a      	orrs	r2, r1
     efa:	621a      	str	r2, [r3, #32]

	//Setting clock
	GCLK->CLKCTRL.reg =
     efc:	4b08      	ldr	r3, [pc, #32]	; (f20 <ble_uart_clk_init+0x5c>)
     efe:	4a09      	ldr	r2, [pc, #36]	; (f24 <ble_uart_clk_init+0x60>)
     f00:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID( GCM_SERCOM2_CORE )	|	// connected  SERCOMx to
	GCLK_CLKCTRL_GEN_GCLK0		|	// generic Clock Generator 0
	GCLK_CLKCTRL_CLKEN;			// and enable it

	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY ); // Wait for synchronization
     f02:	46c0      	nop			; (mov r8, r8)
     f04:	4b06      	ldr	r3, [pc, #24]	; (f20 <ble_uart_clk_init+0x5c>)
     f06:	785b      	ldrb	r3, [r3, #1]
     f08:	b2db      	uxtb	r3, r3
     f0a:	b25b      	sxtb	r3, r3
     f0c:	2b00      	cmp	r3, #0
     f0e:	dbf9      	blt.n	f04 <ble_uart_clk_init+0x40>
}
     f10:	46c0      	nop			; (mov r8, r8)
     f12:	46bd      	mov	sp, r7
     f14:	bd80      	pop	{r7, pc}
     f16:	46c0      	nop			; (mov r8, r8)
     f18:	42001000 	.word	0x42001000
     f1c:	40000400 	.word	0x40000400
     f20:	40000c00 	.word	0x40000c00
     f24:	00004016 	.word	0x00004016

00000f28 <ble_uart_pin_init>:

void ble_uart_pin_init(void)
{
     f28:	b580      	push	{r7, lr}
     f2a:	b082      	sub	sp, #8
     f2c:	af00      	add	r7, sp, #0
	PORT->Group[PORTGROUP_A].DIRCLR.reg = PORT_PA08;	// RX as input
     f2e:	4b1c      	ldr	r3, [pc, #112]	; (fa0 <ble_uart_pin_init+0x78>)
     f30:	2280      	movs	r2, #128	; 0x80
     f32:	0052      	lsls	r2, r2, #1
     f34:	605a      	str	r2, [r3, #4]
	
	PORT->Group[PORTGROUP_A].DIRSET.reg = PORT_PA10;	// TX as output
     f36:	4b1a      	ldr	r3, [pc, #104]	; (fa0 <ble_uart_pin_init+0x78>)
     f38:	2280      	movs	r2, #128	; 0x80
     f3a:	00d2      	lsls	r2, r2, #3
     f3c:	609a      	str	r2, [r3, #8]
	PORT->Group[PORTGROUP_A].OUTSET.reg = PORT_PA10;	// TX idle state is high
     f3e:	4b18      	ldr	r3, [pc, #96]	; (fa0 <ble_uart_pin_init+0x78>)
     f40:	2280      	movs	r2, #128	; 0x80
     f42:	00d2      	lsls	r2, r2, #3
     f44:	619a      	str	r2, [r3, #24]

	// set port multiplexer for peripheral TX
	// =======================================
	uint32_t temp = (PORT->Group[PORTGROUP_A].PMUX[TX_PIN>>1].reg) & PORT_PMUX_PMUXO( GPIO_SERCOM_ALT_D );
     f46:	4a16      	ldr	r2, [pc, #88]	; (fa0 <ble_uart_pin_init+0x78>)
     f48:	2335      	movs	r3, #53	; 0x35
     f4a:	5cd3      	ldrb	r3, [r2, r3]
     f4c:	b2db      	uxtb	r3, r3
     f4e:	001a      	movs	r2, r3
     f50:	2330      	movs	r3, #48	; 0x30
     f52:	4013      	ands	r3, r2
     f54:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[TX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( GPIO_SERCOM_ALT_D );
     f56:	4a12      	ldr	r2, [pc, #72]	; (fa0 <ble_uart_pin_init+0x78>)
     f58:	687b      	ldr	r3, [r7, #4]
     f5a:	b2db      	uxtb	r3, r3
     f5c:	2103      	movs	r1, #3
     f5e:	430b      	orrs	r3, r1
     f60:	b2d9      	uxtb	r1, r3
     f62:	2335      	movs	r3, #53	; 0x35
     f64:	54d1      	strb	r1, [r2, r3]
	
	PORT->Group[PORTGROUP_A].PINCFG[TX_PIN].reg = PORT_PINCFG_PMUXEN ; // Enable port mux
     f66:	4a0e      	ldr	r2, [pc, #56]	; (fa0 <ble_uart_pin_init+0x78>)
     f68:	234a      	movs	r3, #74	; 0x4a
     f6a:	2101      	movs	r1, #1
     f6c:	54d1      	strb	r1, [r2, r3]
	temp = (PORT->Group[PORTGROUP_A].PMUX[RX_PIN>>1].reg) & PORT_PMUX_PMUXO( GPIO_SERCOM_ALT_D );
     f6e:	4a0c      	ldr	r2, [pc, #48]	; (fa0 <ble_uart_pin_init+0x78>)
     f70:	2334      	movs	r3, #52	; 0x34
     f72:	5cd3      	ldrb	r3, [r2, r3]
     f74:	b2db      	uxtb	r3, r3
     f76:	001a      	movs	r2, r3
     f78:	2330      	movs	r3, #48	; 0x30
     f7a:	4013      	ands	r3, r2
     f7c:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[RX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( GPIO_SERCOM_ALT_D );
     f7e:	4a08      	ldr	r2, [pc, #32]	; (fa0 <ble_uart_pin_init+0x78>)
     f80:	687b      	ldr	r3, [r7, #4]
     f82:	b2db      	uxtb	r3, r3
     f84:	2103      	movs	r1, #3
     f86:	430b      	orrs	r3, r1
     f88:	b2d9      	uxtb	r1, r3
     f8a:	2334      	movs	r3, #52	; 0x34
     f8c:	54d1      	strb	r1, [r2, r3]
	PORT->Group[PORTGROUP_A].PINCFG[RX_PIN].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN; // Enable port mux
     f8e:	4a04      	ldr	r2, [pc, #16]	; (fa0 <ble_uart_pin_init+0x78>)
     f90:	2348      	movs	r3, #72	; 0x48
     f92:	2103      	movs	r1, #3
     f94:	54d1      	strb	r1, [r2, r3]
}
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	46bd      	mov	sp, r7
     f9a:	b002      	add	sp, #8
     f9c:	bd80      	pop	{r7, pc}
     f9e:	46c0      	nop			; (mov r8, r8)
     fa0:	41004400 	.word	0x41004400

00000fa4 <ble_uart_init>:

void ble_uart_init(void)
{	
     fa4:	b580      	push	{r7, lr}
     fa6:	af00      	add	r7, sp, #0
	ble_uart_clk_init();
     fa8:	4b18      	ldr	r3, [pc, #96]	; (100c <ble_uart_init+0x68>)
     faa:	4798      	blx	r3
	ble_uart_pin_init();
     fac:	4b18      	ldr	r3, [pc, #96]	; (1010 <ble_uart_init+0x6c>)
     fae:	4798      	blx	r3
	
	
	
	BLE_UART_SERCOM->USART.CTRLA.reg =
     fb0:	4b18      	ldr	r3, [pc, #96]	; (1014 <ble_uart_init+0x70>)
     fb2:	4a19      	ldr	r2, [pc, #100]	; (1018 <ble_uart_init+0x74>)
     fb4:	601a      	str	r2, [r3, #0]
	
	
	// Asynchronous arithmetic mode
	// 65535 * ( 1 - sampleRateValue * baudrate / SystemCoreClock);
	// 65535 - 65535 * (sampleRateValue * baudrate / SystemCoreClock));
	BLE_UART_SERCOM->USART.BAUD.reg = 65535.0f * ( 1.0f - (16.0 * (float)(BAUDRATE)) / (float)(SYSTEM_CLK));
     fb6:	4b17      	ldr	r3, [pc, #92]	; (1014 <ble_uart_init+0x70>)
     fb8:	4a18      	ldr	r2, [pc, #96]	; (101c <ble_uart_init+0x78>)
     fba:	819a      	strh	r2, [r3, #12]
	//BLE_UART_SERCOM->USART.BAUD.bit.BAUD = 9600;
	
	BLE_UART_SERCOM->USART.CTRLB.reg =
     fbc:	4b15      	ldr	r3, [pc, #84]	; (1014 <ble_uart_init+0x70>)
     fbe:	22c0      	movs	r2, #192	; 0xc0
     fc0:	0292      	lsls	r2, r2, #10
     fc2:	605a      	str	r2, [r3, #4]
	SERCOM_USART_CTRLB_CHSIZE(0)	|	// 8 bit character size
	SERCOM_USART_CTRLB_TXEN			|	// Enable Transmit
	SERCOM_USART_CTRLB_RXEN;			// Enable Receive

	// Get Synced
	while (BLE_UART_SERCOM->USART.SYNCBUSY.bit.CTRLB);
     fc4:	46c0      	nop			; (mov r8, r8)
     fc6:	4b13      	ldr	r3, [pc, #76]	; (1014 <ble_uart_init+0x70>)
     fc8:	69db      	ldr	r3, [r3, #28]
     fca:	075b      	lsls	r3, r3, #29
     fcc:	0fdb      	lsrs	r3, r3, #31
     fce:	b2db      	uxtb	r3, r3
     fd0:	2b00      	cmp	r3, #0
     fd2:	d1f8      	bne.n	fc6 <ble_uart_init+0x22>

	//Set the Interrupt to use
	BLE_UART_SERCOM->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;	// Interrupt on received complete
     fd4:	4b0f      	ldr	r3, [pc, #60]	; (1014 <ble_uart_init+0x70>)
     fd6:	2204      	movs	r2, #4
     fd8:	759a      	strb	r2, [r3, #22]
	
	// Enable interrupts
	NVIC_EnableIRQ(SERCOM2_IRQn);
     fda:	200b      	movs	r0, #11
     fdc:	4b10      	ldr	r3, [pc, #64]	; (1020 <ble_uart_init+0x7c>)
     fde:	4798      	blx	r3
	NVIC_SetPriority(SERCOM2_IRQn,1);
     fe0:	2101      	movs	r1, #1
     fe2:	200b      	movs	r0, #11
     fe4:	4b0f      	ldr	r3, [pc, #60]	; (1024 <ble_uart_init+0x80>)
     fe6:	4798      	blx	r3
	
	// enable the peripheral block
	BLE_UART_SERCOM->USART.CTRLA.bit.ENABLE = 0x1u;
     fe8:	4a0a      	ldr	r2, [pc, #40]	; (1014 <ble_uart_init+0x70>)
     fea:	6813      	ldr	r3, [r2, #0]
     fec:	2102      	movs	r1, #2
     fee:	430b      	orrs	r3, r1
     ff0:	6013      	str	r3, [r2, #0]
	
	// Wait for sercom to enable
	while(BLE_UART_SERCOM->USART.SYNCBUSY.bit.ENABLE);
     ff2:	46c0      	nop			; (mov r8, r8)
     ff4:	4b07      	ldr	r3, [pc, #28]	; (1014 <ble_uart_init+0x70>)
     ff6:	69db      	ldr	r3, [r3, #28]
     ff8:	079b      	lsls	r3, r3, #30
     ffa:	0fdb      	lsrs	r3, r3, #31
     ffc:	b2db      	uxtb	r3, r3
     ffe:	2b00      	cmp	r3, #0
    1000:	d1f8      	bne.n	ff4 <ble_uart_init+0x50>
	
	reset_buffers();
    1002:	4b09      	ldr	r3, [pc, #36]	; (1028 <ble_uart_init+0x84>)
    1004:	4798      	blx	r3
}
    1006:	46c0      	nop			; (mov r8, r8)
    1008:	46bd      	mov	sp, r7
    100a:	bd80      	pop	{r7, pc}
    100c:	00000ec5 	.word	0x00000ec5
    1010:	00000f29 	.word	0x00000f29
    1014:	42001000 	.word	0x42001000
    1018:	40010084 	.word	0x40010084
    101c:	fffffb14 	.word	0xfffffb14
    1020:	00000d85 	.word	0x00000d85
    1024:	00000db1 	.word	0x00000db1
    1028:	000010e9 	.word	0x000010e9

0000102c <ble_uart_write>:

void ble_uart_write(char buffer[])
{
    102c:	b580      	push	{r7, lr}
    102e:	b084      	sub	sp, #16
    1030:	af00      	add	r7, sp, #0
    1032:	6078      	str	r0, [r7, #4]
	system_interrupt_disable_global();
    1034:	4b10      	ldr	r3, [pc, #64]	; (1078 <ble_uart_write+0x4c>)
    1036:	4798      	blx	r3
	uint32_t i = 0;
    1038:	2300      	movs	r3, #0
    103a:	60fb      	str	r3, [r7, #12]
	while(buffer[i] != '\0')
    103c:	e00f      	b.n	105e <ble_uart_write+0x32>
	{
		if(BLE_UART_SERCOM->USART.INTFLAG.bit.DRE == 1)
    103e:	4b0f      	ldr	r3, [pc, #60]	; (107c <ble_uart_write+0x50>)
    1040:	7e1b      	ldrb	r3, [r3, #24]
    1042:	07db      	lsls	r3, r3, #31
    1044:	0fdb      	lsrs	r3, r3, #31
    1046:	b2db      	uxtb	r3, r3
    1048:	2b01      	cmp	r3, #1
    104a:	d108      	bne.n	105e <ble_uart_write+0x32>
		{
			BLE_UART_SERCOM->USART.DATA.reg = (uint16_t)buffer[i++];
    104c:	490b      	ldr	r1, [pc, #44]	; (107c <ble_uart_write+0x50>)
    104e:	68fb      	ldr	r3, [r7, #12]
    1050:	1c5a      	adds	r2, r3, #1
    1052:	60fa      	str	r2, [r7, #12]
    1054:	687a      	ldr	r2, [r7, #4]
    1056:	18d3      	adds	r3, r2, r3
    1058:	781b      	ldrb	r3, [r3, #0]
    105a:	b29b      	uxth	r3, r3
    105c:	850b      	strh	r3, [r1, #40]	; 0x28

void ble_uart_write(char buffer[])
{
	system_interrupt_disable_global();
	uint32_t i = 0;
	while(buffer[i] != '\0')
    105e:	687a      	ldr	r2, [r7, #4]
    1060:	68fb      	ldr	r3, [r7, #12]
    1062:	18d3      	adds	r3, r2, r3
    1064:	781b      	ldrb	r3, [r3, #0]
    1066:	2b00      	cmp	r3, #0
    1068:	d1e9      	bne.n	103e <ble_uart_write+0x12>
		if(BLE_UART_SERCOM->USART.INTFLAG.bit.DRE == 1)
		{
			BLE_UART_SERCOM->USART.DATA.reg = (uint16_t)buffer[i++];
		}
	}
	system_interrupt_enable_global();
    106a:	4b05      	ldr	r3, [pc, #20]	; (1080 <ble_uart_write+0x54>)
    106c:	4798      	blx	r3
}
    106e:	46c0      	nop			; (mov r8, r8)
    1070:	46bd      	mov	sp, r7
    1072:	b004      	add	sp, #16
    1074:	bd80      	pop	{r7, pc}
    1076:	46c0      	nop			; (mov r8, r8)
    1078:	00000ea9 	.word	0x00000ea9
    107c:	42001000 	.word	0x42001000
    1080:	00000e8d 	.word	0x00000e8d

00001084 <SERCOM2_Handler>:
	BLE_UART_SERCOM->USART.DATA.reg = data;
}


void SERCOM2_Handler()
{
    1084:	b580      	push	{r7, lr}
    1086:	af00      	add	r7, sp, #0
	if (BLE_UART_SERCOM->USART.INTFLAG.bit.RXC)
    1088:	4b13      	ldr	r3, [pc, #76]	; (10d8 <SERCOM2_Handler+0x54>)
    108a:	7e1b      	ldrb	r3, [r3, #24]
    108c:	075b      	lsls	r3, r3, #29
    108e:	0fdb      	lsrs	r3, r3, #31
    1090:	b2db      	uxtb	r3, r3
    1092:	2b00      	cmp	r3, #0
    1094:	d01c      	beq.n	10d0 <SERCOM2_Handler+0x4c>
	{
		//while (BLE_UART_SERCOM->USART.INTFLAG.bit.DRE != 0 )
		//{
			// Got a character
			if (buff_count > sizeof(rx_buffer_array)-1)
    1096:	4b11      	ldr	r3, [pc, #68]	; (10dc <SERCOM2_Handler+0x58>)
    1098:	681b      	ldr	r3, [r3, #0]
    109a:	1e1a      	subs	r2, r3, #0
    109c:	4b10      	ldr	r3, [pc, #64]	; (10e0 <SERCOM2_Handler+0x5c>)
    109e:	429a      	cmp	r2, r3
    10a0:	d90b      	bls.n	10ba <SERCOM2_Handler+0x36>
			{
				buff_count = 0;
    10a2:	4b0e      	ldr	r3, [pc, #56]	; (10dc <SERCOM2_Handler+0x58>)
    10a4:	2200      	movs	r2, #0
    10a6:	601a      	str	r2, [r3, #0]
				rx_buffer_array[buff_count] = (uint8_t) BLE_UART_SERCOM->USART.DATA.reg;
    10a8:	4b0c      	ldr	r3, [pc, #48]	; (10dc <SERCOM2_Handler+0x58>)
    10aa:	681b      	ldr	r3, [r3, #0]
    10ac:	4a0a      	ldr	r2, [pc, #40]	; (10d8 <SERCOM2_Handler+0x54>)
    10ae:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    10b0:	b292      	uxth	r2, r2
    10b2:	b2d1      	uxtb	r1, r2
    10b4:	4a0b      	ldr	r2, [pc, #44]	; (10e4 <SERCOM2_Handler+0x60>)
    10b6:	54d1      	strb	r1, [r2, r3]
				rx_buffer_array[buff_count++] = (uint8_t)BLE_UART_SERCOM->USART.DATA.reg;
			}
		//}

	}
}
    10b8:	e00a      	b.n	10d0 <SERCOM2_Handler+0x4c>
				buff_count = 0;
				rx_buffer_array[buff_count] = (uint8_t) BLE_UART_SERCOM->USART.DATA.reg;
			}
			else
			{
				rx_buffer_array[buff_count++] = (uint8_t)BLE_UART_SERCOM->USART.DATA.reg;
    10ba:	4b08      	ldr	r3, [pc, #32]	; (10dc <SERCOM2_Handler+0x58>)
    10bc:	681b      	ldr	r3, [r3, #0]
    10be:	1c59      	adds	r1, r3, #1
    10c0:	4a06      	ldr	r2, [pc, #24]	; (10dc <SERCOM2_Handler+0x58>)
    10c2:	6011      	str	r1, [r2, #0]
    10c4:	4a04      	ldr	r2, [pc, #16]	; (10d8 <SERCOM2_Handler+0x54>)
    10c6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    10c8:	b292      	uxth	r2, r2
    10ca:	b2d1      	uxtb	r1, r2
    10cc:	4a05      	ldr	r2, [pc, #20]	; (10e4 <SERCOM2_Handler+0x60>)
    10ce:	54d1      	strb	r1, [r2, r3]
			}
		//}

	}
}
    10d0:	46c0      	nop			; (mov r8, r8)
    10d2:	46bd      	mov	sp, r7
    10d4:	bd80      	pop	{r7, pc}
    10d6:	46c0      	nop			; (mov r8, r8)
    10d8:	42001000 	.word	0x42001000
    10dc:	200003f0 	.word	0x200003f0
    10e0:	000003ff 	.word	0x000003ff
    10e4:	200004a0 	.word	0x200004a0

000010e8 <reset_buffers>:

void reset_buffers()
{
    10e8:	b580      	push	{r7, lr}
    10ea:	b082      	sub	sp, #8
    10ec:	af00      	add	r7, sp, #0
	for (uint32_t k=0;k<sizeof(rx_buffer_array);k++)
    10ee:	2300      	movs	r3, #0
    10f0:	607b      	str	r3, [r7, #4]
    10f2:	e007      	b.n	1104 <reset_buffers+0x1c>
	{
		rx_buffer_array[k] = 0;
    10f4:	4a09      	ldr	r2, [pc, #36]	; (111c <reset_buffers+0x34>)
    10f6:	687b      	ldr	r3, [r7, #4]
    10f8:	18d3      	adds	r3, r2, r3
    10fa:	2200      	movs	r2, #0
    10fc:	701a      	strb	r2, [r3, #0]
	}
}

void reset_buffers()
{
	for (uint32_t k=0;k<sizeof(rx_buffer_array);k++)
    10fe:	687b      	ldr	r3, [r7, #4]
    1100:	3301      	adds	r3, #1
    1102:	607b      	str	r3, [r7, #4]
    1104:	687b      	ldr	r3, [r7, #4]
    1106:	4a06      	ldr	r2, [pc, #24]	; (1120 <reset_buffers+0x38>)
    1108:	4293      	cmp	r3, r2
    110a:	d9f3      	bls.n	10f4 <reset_buffers+0xc>
	{
		rx_buffer_array[k] = 0;
	}
	buff_count = 0;
    110c:	4b05      	ldr	r3, [pc, #20]	; (1124 <reset_buffers+0x3c>)
    110e:	2200      	movs	r2, #0
    1110:	601a      	str	r2, [r3, #0]
}
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	46bd      	mov	sp, r7
    1116:	b002      	add	sp, #8
    1118:	bd80      	pop	{r7, pc}
    111a:	46c0      	nop			; (mov r8, r8)
    111c:	200004a0 	.word	0x200004a0
    1120:	000003ff 	.word	0x000003ff
    1124:	200003f0 	.word	0x200003f0

00001128 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    1128:	b580      	push	{r7, lr}
    112a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    112c:	4b04      	ldr	r3, [pc, #16]	; (1140 <system_interrupt_enable_global+0x18>)
    112e:	2201      	movs	r2, #1
    1130:	701a      	strb	r2, [r3, #0]
    1132:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1136:	b662      	cpsie	i
}
    1138:	46c0      	nop			; (mov r8, r8)
    113a:	46bd      	mov	sp, r7
    113c:	bd80      	pop	{r7, pc}
    113e:	46c0      	nop			; (mov r8, r8)
    1140:	20000368 	.word	0x20000368

00001144 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    1144:	b580      	push	{r7, lr}
    1146:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1148:	b672      	cpsid	i
    114a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    114e:	4b03      	ldr	r3, [pc, #12]	; (115c <system_interrupt_disable_global+0x18>)
    1150:	2200      	movs	r2, #0
    1152:	701a      	strb	r2, [r3, #0]
}
    1154:	46c0      	nop			; (mov r8, r8)
    1156:	46bd      	mov	sp, r7
    1158:	bd80      	pop	{r7, pc}
    115a:	46c0      	nop			; (mov r8, r8)
    115c:	20000368 	.word	0x20000368

00001160 <data_handler>:

char bufbuf[1024];
int buf_count = 0; 

void data_handler(char buffer[])
{
    1160:	b5f0      	push	{r4, r5, r6, r7, lr}
    1162:	b09b      	sub	sp, #108	; 0x6c
    1164:	af00      	add	r7, sp, #0
    1166:	60f8      	str	r0, [r7, #12]
	int buf_s = strlen(buffer);
    1168:	68fb      	ldr	r3, [r7, #12]
    116a:	0018      	movs	r0, r3
    116c:	4be8      	ldr	r3, [pc, #928]	; (1510 <data_handler+0x3b0>)
    116e:	4798      	blx	r3
    1170:	0003      	movs	r3, r0
    1172:	667b      	str	r3, [r7, #100]	; 0x64
	if (strncmp(buffer,"\r\n\rAdafruit",7) == 0)
    1174:	49e7      	ldr	r1, [pc, #924]	; (1514 <data_handler+0x3b4>)
    1176:	68fb      	ldr	r3, [r7, #12]
    1178:	2207      	movs	r2, #7
    117a:	0018      	movs	r0, r3
    117c:	4be6      	ldr	r3, [pc, #920]	; (1518 <data_handler+0x3b8>)
    117e:	4798      	blx	r3
    1180:	1e03      	subs	r3, r0, #0
    1182:	d103      	bne.n	118c <data_handler+0x2c>
	{
		ble_uart_write("#01\n");
    1184:	4be5      	ldr	r3, [pc, #916]	; (151c <data_handler+0x3bc>)
    1186:	0018      	movs	r0, r3
    1188:	4be5      	ldr	r3, [pc, #916]	; (1520 <data_handler+0x3c0>)
    118a:	4798      	blx	r3
	}
	if (strncmp(buffer,"T00",3) == 0)
    118c:	49e5      	ldr	r1, [pc, #916]	; (1524 <data_handler+0x3c4>)
    118e:	68fb      	ldr	r3, [r7, #12]
    1190:	2203      	movs	r2, #3
    1192:	0018      	movs	r0, r3
    1194:	4be0      	ldr	r3, [pc, #896]	; (1518 <data_handler+0x3b8>)
    1196:	4798      	blx	r3
    1198:	1e03      	subs	r3, r0, #0
    119a:	d10c      	bne.n	11b6 <data_handler+0x56>
	{
		ble_uart_write("L\n");
    119c:	4be2      	ldr	r3, [pc, #904]	; (1528 <data_handler+0x3c8>)
    119e:	0018      	movs	r0, r3
    11a0:	4bdf      	ldr	r3, [pc, #892]	; (1520 <data_handler+0x3c0>)
    11a2:	4798      	blx	r3
		int arg0;
		//ble_uart_write("L\n");
		sscanf(buffer,"T0%d",&arg0);
    11a4:	2358      	movs	r3, #88	; 0x58
    11a6:	2208      	movs	r2, #8
    11a8:	18ba      	adds	r2, r7, r2
    11aa:	18d2      	adds	r2, r2, r3
    11ac:	49df      	ldr	r1, [pc, #892]	; (152c <data_handler+0x3cc>)
    11ae:	68fb      	ldr	r3, [r7, #12]
    11b0:	0018      	movs	r0, r3
    11b2:	4bdf      	ldr	r3, [pc, #892]	; (1530 <data_handler+0x3d0>)
    11b4:	4798      	blx	r3
	}
	
	if (strncmp(buffer,test_bob,3) == 0)
    11b6:	49df      	ldr	r1, [pc, #892]	; (1534 <data_handler+0x3d4>)
    11b8:	68fb      	ldr	r3, [r7, #12]
    11ba:	2203      	movs	r2, #3
    11bc:	0018      	movs	r0, r3
    11be:	4bd6      	ldr	r3, [pc, #856]	; (1518 <data_handler+0x3b8>)
    11c0:	4798      	blx	r3
    11c2:	1e03      	subs	r3, r0, #0
    11c4:	d132      	bne.n	122c <data_handler+0xcc>
	{
		ble_uart_write("bob was found");
    11c6:	4bdc      	ldr	r3, [pc, #880]	; (1538 <data_handler+0x3d8>)
    11c8:	0018      	movs	r0, r3
    11ca:	4bd5      	ldr	r3, [pc, #852]	; (1520 <data_handler+0x3c0>)
    11cc:	4798      	blx	r3
		
		if (strlen(buffer) > strlen(test_bob))
    11ce:	68fb      	ldr	r3, [r7, #12]
    11d0:	0018      	movs	r0, r3
    11d2:	4bcf      	ldr	r3, [pc, #828]	; (1510 <data_handler+0x3b0>)
    11d4:	4798      	blx	r3
    11d6:	0004      	movs	r4, r0
    11d8:	4bd6      	ldr	r3, [pc, #856]	; (1534 <data_handler+0x3d4>)
    11da:	0018      	movs	r0, r3
    11dc:	4bcc      	ldr	r3, [pc, #816]	; (1510 <data_handler+0x3b0>)
    11de:	4798      	blx	r3
    11e0:	0003      	movs	r3, r0
    11e2:	429c      	cmp	r4, r3
    11e4:	d922      	bls.n	122c <data_handler+0xcc>
		{
			int arg1;
			sscanf(buffer,"PWM %d",&arg1);
    11e6:	2354      	movs	r3, #84	; 0x54
    11e8:	2208      	movs	r2, #8
    11ea:	18ba      	adds	r2, r7, r2
    11ec:	18d2      	adds	r2, r2, r3
    11ee:	49d3      	ldr	r1, [pc, #844]	; (153c <data_handler+0x3dc>)
    11f0:	68fb      	ldr	r3, [r7, #12]
    11f2:	0018      	movs	r0, r3
    11f4:	4bce      	ldr	r3, [pc, #824]	; (1530 <data_handler+0x3d0>)
    11f6:	4798      	blx	r3
			//arg1 = buffer[4]-'0';
			if (arg1 < 1)
    11f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    11fa:	2b00      	cmp	r3, #0
    11fc:	dc01      	bgt.n	1202 <data_handler+0xa2>
			{
				arg1 = 1;
    11fe:	2301      	movs	r3, #1
    1200:	65fb      	str	r3, [r7, #92]	; 0x5c
			}
			pwm_bob = arg1;
    1202:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    1204:	4bce      	ldr	r3, [pc, #824]	; (1540 <data_handler+0x3e0>)
    1206:	601a      	str	r2, [r3, #0]
			char string_buffer[32];
			sprintf(string_buffer,": %d",arg1);
    1208:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    120a:	49ce      	ldr	r1, [pc, #824]	; (1544 <data_handler+0x3e4>)
    120c:	230c      	movs	r3, #12
    120e:	2008      	movs	r0, #8
    1210:	4684      	mov	ip, r0
    1212:	44bc      	add	ip, r7
    1214:	4463      	add	r3, ip
    1216:	0018      	movs	r0, r3
    1218:	4bcb      	ldr	r3, [pc, #812]	; (1548 <data_handler+0x3e8>)
    121a:	4798      	blx	r3
			ble_uart_write(string_buffer);
    121c:	230c      	movs	r3, #12
    121e:	2208      	movs	r2, #8
    1220:	4694      	mov	ip, r2
    1222:	44bc      	add	ip, r7
    1224:	4463      	add	r3, ip
    1226:	0018      	movs	r0, r3
    1228:	4bbd      	ldr	r3, [pc, #756]	; (1520 <data_handler+0x3c0>)
    122a:	4798      	blx	r3
		}
	}


	if(strncmp(buffer,FLASH_ALL_ON,4) == 0)
    122c:	49c7      	ldr	r1, [pc, #796]	; (154c <data_handler+0x3ec>)
    122e:	68fb      	ldr	r3, [r7, #12]
    1230:	2204      	movs	r2, #4
    1232:	0018      	movs	r0, r3
    1234:	4bb8      	ldr	r3, [pc, #736]	; (1518 <data_handler+0x3b8>)
    1236:	4798      	blx	r3
    1238:	1e03      	subs	r3, r0, #0
    123a:	d000      	beq.n	123e <data_handler+0xde>
    123c:	e088      	b.n	1350 <data_handler+0x1f0>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    123e:	2301      	movs	r3, #1
    1240:	2200      	movs	r2, #0
    1242:	2101      	movs	r1, #1
    1244:	2000      	movs	r0, #0
    1246:	4cc2      	ldr	r4, [pc, #776]	; (1550 <data_handler+0x3f0>)
    1248:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    124a:	2301      	movs	r3, #1
    124c:	2200      	movs	r2, #0
    124e:	2102      	movs	r1, #2
    1250:	2000      	movs	r0, #0
    1252:	4cbf      	ldr	r4, [pc, #764]	; (1550 <data_handler+0x3f0>)
    1254:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    1256:	2301      	movs	r3, #1
    1258:	2200      	movs	r2, #0
    125a:	2103      	movs	r1, #3
    125c:	2000      	movs	r0, #0
    125e:	4cbc      	ldr	r4, [pc, #752]	; (1550 <data_handler+0x3f0>)
    1260:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    1262:	2301      	movs	r3, #1
    1264:	2200      	movs	r2, #0
    1266:	2104      	movs	r1, #4
    1268:	2000      	movs	r0, #0
    126a:	4cb9      	ldr	r4, [pc, #740]	; (1550 <data_handler+0x3f0>)
    126c:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,true);
    126e:	2301      	movs	r3, #1
    1270:	2201      	movs	r2, #1
    1272:	2102      	movs	r1, #2
    1274:	2000      	movs	r0, #0
    1276:	4cb6      	ldr	r4, [pc, #728]	; (1550 <data_handler+0x3f0>)
    1278:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,true);
    127a:	2301      	movs	r3, #1
    127c:	2201      	movs	r2, #1
    127e:	2101      	movs	r1, #1
    1280:	2000      	movs	r0, #0
    1282:	4cb3      	ldr	r4, [pc, #716]	; (1550 <data_handler+0x3f0>)
    1284:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,true);
    1286:	2301      	movs	r3, #1
    1288:	2202      	movs	r2, #2
    128a:	2102      	movs	r1, #2
    128c:	2000      	movs	r0, #0
    128e:	4cb0      	ldr	r4, [pc, #704]	; (1550 <data_handler+0x3f0>)
    1290:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,true);
    1292:	2301      	movs	r3, #1
    1294:	2202      	movs	r2, #2
    1296:	2101      	movs	r1, #1
    1298:	2000      	movs	r0, #0
    129a:	4cad      	ldr	r4, [pc, #692]	; (1550 <data_handler+0x3f0>)
    129c:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,true);
    129e:	2301      	movs	r3, #1
    12a0:	2202      	movs	r2, #2
    12a2:	2104      	movs	r1, #4
    12a4:	2000      	movs	r0, #0
    12a6:	4caa      	ldr	r4, [pc, #680]	; (1550 <data_handler+0x3f0>)
    12a8:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,true);
    12aa:	2301      	movs	r3, #1
    12ac:	2202      	movs	r2, #2
    12ae:	2103      	movs	r1, #3
    12b0:	2000      	movs	r0, #0
    12b2:	4ca7      	ldr	r4, [pc, #668]	; (1550 <data_handler+0x3f0>)
    12b4:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,true);
    12b6:	2301      	movs	r3, #1
    12b8:	2201      	movs	r2, #1
    12ba:	2103      	movs	r1, #3
    12bc:	2000      	movs	r0, #0
    12be:	4ca4      	ldr	r4, [pc, #656]	; (1550 <data_handler+0x3f0>)
    12c0:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,true);
    12c2:	2301      	movs	r3, #1
    12c4:	2201      	movs	r2, #1
    12c6:	2104      	movs	r1, #4
    12c8:	2000      	movs	r0, #0
    12ca:	4ca1      	ldr	r4, [pc, #644]	; (1550 <data_handler+0x3f0>)
    12cc:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,true);
    12ce:	2301      	movs	r3, #1
    12d0:	2203      	movs	r2, #3
    12d2:	2102      	movs	r1, #2
    12d4:	2000      	movs	r0, #0
    12d6:	4c9e      	ldr	r4, [pc, #632]	; (1550 <data_handler+0x3f0>)
    12d8:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,true);
    12da:	2301      	movs	r3, #1
    12dc:	2203      	movs	r2, #3
    12de:	2101      	movs	r1, #1
    12e0:	2000      	movs	r0, #0
    12e2:	4c9b      	ldr	r4, [pc, #620]	; (1550 <data_handler+0x3f0>)
    12e4:	47a0      	blx	r4
		
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR, SUB_LEFT_PIN,true);
    12e6:	2301      	movs	r3, #1
    12e8:	2203      	movs	r2, #3
    12ea:	2103      	movs	r1, #3
    12ec:	2000      	movs	r0, #0
    12ee:	4c98      	ldr	r4, [pc, #608]	; (1550 <data_handler+0x3f0>)
    12f0:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR, SUB_RIGHT_PIN,true);
    12f2:	2301      	movs	r3, #1
    12f4:	2204      	movs	r2, #4
    12f6:	2103      	movs	r1, #3
    12f8:	2000      	movs	r0, #0
    12fa:	4c95      	ldr	r4, [pc, #596]	; (1550 <data_handler+0x3f0>)
    12fc:	47a0      	blx	r4
		
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,true);
    12fe:	2301      	movs	r3, #1
    1300:	2204      	movs	r2, #4
    1302:	2101      	movs	r1, #1
    1304:	2000      	movs	r0, #0
    1306:	4c92      	ldr	r4, [pc, #584]	; (1550 <data_handler+0x3f0>)
    1308:	47a0      	blx	r4
		
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,true);
    130a:	2301      	movs	r3, #1
    130c:	2203      	movs	r2, #3
    130e:	2105      	movs	r1, #5
    1310:	2000      	movs	r0, #0
    1312:	4c8f      	ldr	r4, [pc, #572]	; (1550 <data_handler+0x3f0>)
    1314:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,true);
    1316:	2301      	movs	r3, #1
    1318:	2202      	movs	r2, #2
    131a:	2105      	movs	r1, #5
    131c:	2000      	movs	r0, #0
    131e:	4c8c      	ldr	r4, [pc, #560]	; (1550 <data_handler+0x3f0>)
    1320:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,true);
    1322:	2301      	movs	r3, #1
    1324:	2204      	movs	r2, #4
    1326:	2105      	movs	r1, #5
    1328:	2000      	movs	r0, #0
    132a:	4c89      	ldr	r4, [pc, #548]	; (1550 <data_handler+0x3f0>)
    132c:	47a0      	blx	r4
		
		flash_all = true;
    132e:	4b89      	ldr	r3, [pc, #548]	; (1554 <data_handler+0x3f4>)
    1330:	2201      	movs	r2, #1
    1332:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1334:	68fb      	ldr	r3, [r7, #12]
    1336:	0018      	movs	r0, r3
    1338:	4b79      	ldr	r3, [pc, #484]	; (1520 <data_handler+0x3c0>)
    133a:	4798      	blx	r3
		ble_uart_write(" - ");
    133c:	4b86      	ldr	r3, [pc, #536]	; (1558 <data_handler+0x3f8>)
    133e:	0018      	movs	r0, r3
    1340:	4b77      	ldr	r3, [pc, #476]	; (1520 <data_handler+0x3c0>)
    1342:	4798      	blx	r3
		ble_uart_write("ACK");
    1344:	4b85      	ldr	r3, [pc, #532]	; (155c <data_handler+0x3fc>)
    1346:	0018      	movs	r0, r3
    1348:	4b75      	ldr	r3, [pc, #468]	; (1520 <data_handler+0x3c0>)
    134a:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    134c:	f000 fe85 	bl	205a <STACK_SIZE+0x5a>
		flash_all = true;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASH_ALL_OFF,4) == 0)
    1350:	4983      	ldr	r1, [pc, #524]	; (1560 <data_handler+0x400>)
    1352:	68fb      	ldr	r3, [r7, #12]
    1354:	2204      	movs	r2, #4
    1356:	0018      	movs	r0, r3
    1358:	4b6f      	ldr	r3, [pc, #444]	; (1518 <data_handler+0x3b8>)
    135a:	4798      	blx	r3
    135c:	1e03      	subs	r3, r0, #0
    135e:	d000      	beq.n	1362 <data_handler+0x202>
    1360:	e088      	b.n	1474 <data_handler+0x314>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    1362:	2300      	movs	r3, #0
    1364:	2200      	movs	r2, #0
    1366:	2101      	movs	r1, #1
    1368:	2000      	movs	r0, #0
    136a:	4c79      	ldr	r4, [pc, #484]	; (1550 <data_handler+0x3f0>)
    136c:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    136e:	2300      	movs	r3, #0
    1370:	2200      	movs	r2, #0
    1372:	2102      	movs	r1, #2
    1374:	2000      	movs	r0, #0
    1376:	4c76      	ldr	r4, [pc, #472]	; (1550 <data_handler+0x3f0>)
    1378:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    137a:	2300      	movs	r3, #0
    137c:	2200      	movs	r2, #0
    137e:	2103      	movs	r1, #3
    1380:	2000      	movs	r0, #0
    1382:	4c73      	ldr	r4, [pc, #460]	; (1550 <data_handler+0x3f0>)
    1384:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    1386:	2300      	movs	r3, #0
    1388:	2200      	movs	r2, #0
    138a:	2104      	movs	r1, #4
    138c:	2000      	movs	r0, #0
    138e:	4c70      	ldr	r4, [pc, #448]	; (1550 <data_handler+0x3f0>)
    1390:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,false);
    1392:	2300      	movs	r3, #0
    1394:	2201      	movs	r2, #1
    1396:	2102      	movs	r1, #2
    1398:	2000      	movs	r0, #0
    139a:	4c6d      	ldr	r4, [pc, #436]	; (1550 <data_handler+0x3f0>)
    139c:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,false);
    139e:	2300      	movs	r3, #0
    13a0:	2201      	movs	r2, #1
    13a2:	2101      	movs	r1, #1
    13a4:	2000      	movs	r0, #0
    13a6:	4c6a      	ldr	r4, [pc, #424]	; (1550 <data_handler+0x3f0>)
    13a8:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,false);
    13aa:	2300      	movs	r3, #0
    13ac:	2202      	movs	r2, #2
    13ae:	2102      	movs	r1, #2
    13b0:	2000      	movs	r0, #0
    13b2:	4c67      	ldr	r4, [pc, #412]	; (1550 <data_handler+0x3f0>)
    13b4:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,false);
    13b6:	2300      	movs	r3, #0
    13b8:	2202      	movs	r2, #2
    13ba:	2101      	movs	r1, #1
    13bc:	2000      	movs	r0, #0
    13be:	4c64      	ldr	r4, [pc, #400]	; (1550 <data_handler+0x3f0>)
    13c0:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,false);
    13c2:	2300      	movs	r3, #0
    13c4:	2202      	movs	r2, #2
    13c6:	2104      	movs	r1, #4
    13c8:	2000      	movs	r0, #0
    13ca:	4c61      	ldr	r4, [pc, #388]	; (1550 <data_handler+0x3f0>)
    13cc:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,false);
    13ce:	2300      	movs	r3, #0
    13d0:	2202      	movs	r2, #2
    13d2:	2103      	movs	r1, #3
    13d4:	2000      	movs	r0, #0
    13d6:	4c5e      	ldr	r4, [pc, #376]	; (1550 <data_handler+0x3f0>)
    13d8:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,false);
    13da:	2300      	movs	r3, #0
    13dc:	2201      	movs	r2, #1
    13de:	2103      	movs	r1, #3
    13e0:	2000      	movs	r0, #0
    13e2:	4c5b      	ldr	r4, [pc, #364]	; (1550 <data_handler+0x3f0>)
    13e4:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,false);
    13e6:	2300      	movs	r3, #0
    13e8:	2201      	movs	r2, #1
    13ea:	2104      	movs	r1, #4
    13ec:	2000      	movs	r0, #0
    13ee:	4c58      	ldr	r4, [pc, #352]	; (1550 <data_handler+0x3f0>)
    13f0:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,false);
    13f2:	2300      	movs	r3, #0
    13f4:	2203      	movs	r2, #3
    13f6:	2102      	movs	r1, #2
    13f8:	2000      	movs	r0, #0
    13fa:	4c55      	ldr	r4, [pc, #340]	; (1550 <data_handler+0x3f0>)
    13fc:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,false);
    13fe:	2300      	movs	r3, #0
    1400:	2203      	movs	r2, #3
    1402:	2101      	movs	r1, #1
    1404:	2000      	movs	r0, #0
    1406:	4c52      	ldr	r4, [pc, #328]	; (1550 <data_handler+0x3f0>)
    1408:	47a0      	blx	r4
		
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR,SUB_LEFT_PIN,false);
    140a:	2300      	movs	r3, #0
    140c:	2203      	movs	r2, #3
    140e:	2103      	movs	r1, #3
    1410:	2000      	movs	r0, #0
    1412:	4c4f      	ldr	r4, [pc, #316]	; (1550 <data_handler+0x3f0>)
    1414:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR,SUB_RIGHT_PIN,false);
    1416:	2300      	movs	r3, #0
    1418:	2204      	movs	r2, #4
    141a:	2103      	movs	r1, #3
    141c:	2000      	movs	r0, #0
    141e:	4c4c      	ldr	r4, [pc, #304]	; (1550 <data_handler+0x3f0>)
    1420:	47a0      	blx	r4
		
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,false);
    1422:	2300      	movs	r3, #0
    1424:	2204      	movs	r2, #4
    1426:	2101      	movs	r1, #1
    1428:	2000      	movs	r0, #0
    142a:	4c49      	ldr	r4, [pc, #292]	; (1550 <data_handler+0x3f0>)
    142c:	47a0      	blx	r4
		
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,false);
    142e:	2300      	movs	r3, #0
    1430:	2203      	movs	r2, #3
    1432:	2105      	movs	r1, #5
    1434:	2000      	movs	r0, #0
    1436:	4c46      	ldr	r4, [pc, #280]	; (1550 <data_handler+0x3f0>)
    1438:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,false);
    143a:	2300      	movs	r3, #0
    143c:	2202      	movs	r2, #2
    143e:	2105      	movs	r1, #5
    1440:	2000      	movs	r0, #0
    1442:	4c43      	ldr	r4, [pc, #268]	; (1550 <data_handler+0x3f0>)
    1444:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,false);
    1446:	2300      	movs	r3, #0
    1448:	2204      	movs	r2, #4
    144a:	2105      	movs	r1, #5
    144c:	2000      	movs	r0, #0
    144e:	4c40      	ldr	r4, [pc, #256]	; (1550 <data_handler+0x3f0>)
    1450:	47a0      	blx	r4
		
		flash_all = false;
    1452:	4b40      	ldr	r3, [pc, #256]	; (1554 <data_handler+0x3f4>)
    1454:	2200      	movs	r2, #0
    1456:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1458:	68fb      	ldr	r3, [r7, #12]
    145a:	0018      	movs	r0, r3
    145c:	4b30      	ldr	r3, [pc, #192]	; (1520 <data_handler+0x3c0>)
    145e:	4798      	blx	r3
		ble_uart_write(" - ");
    1460:	4b3d      	ldr	r3, [pc, #244]	; (1558 <data_handler+0x3f8>)
    1462:	0018      	movs	r0, r3
    1464:	4b2e      	ldr	r3, [pc, #184]	; (1520 <data_handler+0x3c0>)
    1466:	4798      	blx	r3
		ble_uart_write("ACK");
    1468:	4b3c      	ldr	r3, [pc, #240]	; (155c <data_handler+0x3fc>)
    146a:	0018      	movs	r0, r3
    146c:	4b2c      	ldr	r3, [pc, #176]	; (1520 <data_handler+0x3c0>)
    146e:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1470:	f000 fdf3 	bl	205a <STACK_SIZE+0x5a>
		flash_all = false;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,BLINK_ALL_ON,5) == 0)
    1474:	493b      	ldr	r1, [pc, #236]	; (1564 <data_handler+0x404>)
    1476:	68fb      	ldr	r3, [r7, #12]
    1478:	2205      	movs	r2, #5
    147a:	0018      	movs	r0, r3
    147c:	4b26      	ldr	r3, [pc, #152]	; (1518 <data_handler+0x3b8>)
    147e:	4798      	blx	r3
    1480:	1e03      	subs	r3, r0, #0
    1482:	d10a      	bne.n	149a <data_handler+0x33a>
	{
		blink_left = true;
    1484:	4b38      	ldr	r3, [pc, #224]	; (1568 <data_handler+0x408>)
    1486:	2201      	movs	r2, #1
    1488:	701a      	strb	r2, [r3, #0]
		blink_right = true;
    148a:	4b38      	ldr	r3, [pc, #224]	; (156c <data_handler+0x40c>)
    148c:	2201      	movs	r2, #1
    148e:	701a      	strb	r2, [r3, #0]
		blink_all = true;
    1490:	4b37      	ldr	r3, [pc, #220]	; (1570 <data_handler+0x410>)
    1492:	2201      	movs	r2, #1
    1494:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1496:	f000 fde0 	bl	205a <STACK_SIZE+0x5a>
	{
		blink_left = true;
		blink_right = true;
		blink_all = true;
	}
	else if(strncmp(buffer,BLINK_ALL_OFF,5) == 0)
    149a:	4936      	ldr	r1, [pc, #216]	; (1574 <data_handler+0x414>)
    149c:	68fb      	ldr	r3, [r7, #12]
    149e:	2205      	movs	r2, #5
    14a0:	0018      	movs	r0, r3
    14a2:	4b1d      	ldr	r3, [pc, #116]	; (1518 <data_handler+0x3b8>)
    14a4:	4798      	blx	r3
    14a6:	1e03      	subs	r3, r0, #0
    14a8:	d10a      	bne.n	14c0 <data_handler+0x360>
	{
		blink_left = false;
    14aa:	4b2f      	ldr	r3, [pc, #188]	; (1568 <data_handler+0x408>)
    14ac:	2200      	movs	r2, #0
    14ae:	701a      	strb	r2, [r3, #0]
		blink_right = false;
    14b0:	4b2e      	ldr	r3, [pc, #184]	; (156c <data_handler+0x40c>)
    14b2:	2200      	movs	r2, #0
    14b4:	701a      	strb	r2, [r3, #0]
		blink_all = false;
    14b6:	4b2e      	ldr	r3, [pc, #184]	; (1570 <data_handler+0x410>)
    14b8:	2200      	movs	r2, #0
    14ba:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    14bc:	f000 fdcd 	bl	205a <STACK_SIZE+0x5a>
	{
		blink_left = false;
		blink_right = false;
		blink_all = false;
	}
	else if(strncmp(buffer,BLINK_LEFT_ON,5) == 0)
    14c0:	492d      	ldr	r1, [pc, #180]	; (1578 <data_handler+0x418>)
    14c2:	68fb      	ldr	r3, [r7, #12]
    14c4:	2205      	movs	r2, #5
    14c6:	0018      	movs	r0, r3
    14c8:	4b13      	ldr	r3, [pc, #76]	; (1518 <data_handler+0x3b8>)
    14ca:	4798      	blx	r3
    14cc:	1e03      	subs	r3, r0, #0
    14ce:	d104      	bne.n	14da <data_handler+0x37a>
	{
		blink_left = true;
    14d0:	4b25      	ldr	r3, [pc, #148]	; (1568 <data_handler+0x408>)
    14d2:	2201      	movs	r2, #1
    14d4:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    14d6:	f000 fdc0 	bl	205a <STACK_SIZE+0x5a>
	}
	else if(strncmp(buffer,BLINK_LEFT_ON,5) == 0)
	{
		blink_left = true;
	}
	else if(strncmp(buffer,BLINK_LEFT_OFF,5) == 0)
    14da:	4928      	ldr	r1, [pc, #160]	; (157c <data_handler+0x41c>)
    14dc:	68fb      	ldr	r3, [r7, #12]
    14de:	2205      	movs	r2, #5
    14e0:	0018      	movs	r0, r3
    14e2:	4b0d      	ldr	r3, [pc, #52]	; (1518 <data_handler+0x3b8>)
    14e4:	4798      	blx	r3
    14e6:	1e03      	subs	r3, r0, #0
    14e8:	d104      	bne.n	14f4 <data_handler+0x394>
	{
		blink_left = false;
    14ea:	4b1f      	ldr	r3, [pc, #124]	; (1568 <data_handler+0x408>)
    14ec:	2200      	movs	r2, #0
    14ee:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    14f0:	f000 fdb3 	bl	205a <STACK_SIZE+0x5a>
	}
	else if(strncmp(buffer,BLINK_LEFT_OFF,5) == 0)
	{
		blink_left = false;
	}
	else if(strncmp(buffer,BLINK_RIGHT_ON,5) == 0)
    14f4:	4922      	ldr	r1, [pc, #136]	; (1580 <data_handler+0x420>)
    14f6:	68fb      	ldr	r3, [r7, #12]
    14f8:	2205      	movs	r2, #5
    14fa:	0018      	movs	r0, r3
    14fc:	4b06      	ldr	r3, [pc, #24]	; (1518 <data_handler+0x3b8>)
    14fe:	4798      	blx	r3
    1500:	1e03      	subs	r3, r0, #0
    1502:	d13f      	bne.n	1584 <data_handler+0x424>
	{
		blink_right = true;
    1504:	4b19      	ldr	r3, [pc, #100]	; (156c <data_handler+0x40c>)
    1506:	2201      	movs	r2, #1
    1508:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    150a:	f000 fda6 	bl	205a <STACK_SIZE+0x5a>
    150e:	46c0      	nop			; (mov r8, r8)
    1510:	00005d55 	.word	0x00005d55
    1514:	00006dc4 	.word	0x00006dc4
    1518:	00005d63 	.word	0x00005d63
    151c:	00006dd0 	.word	0x00006dd0
    1520:	0000102d 	.word	0x0000102d
    1524:	00006dd8 	.word	0x00006dd8
    1528:	00006ddc 	.word	0x00006ddc
    152c:	00006de0 	.word	0x00006de0
    1530:	00005cd5 	.word	0x00005cd5
    1534:	2000000c 	.word	0x2000000c
    1538:	00006de8 	.word	0x00006de8
    153c:	00006df8 	.word	0x00006df8
    1540:	20000d58 	.word	0x20000d58
    1544:	00006e00 	.word	0x00006e00
    1548:	00005c91 	.word	0x00005c91
    154c:	00006e08 	.word	0x00006e08
    1550:	00002cc9 	.word	0x00002cc9
    1554:	200008ba 	.word	0x200008ba
    1558:	00006e10 	.word	0x00006e10
    155c:	00006e14 	.word	0x00006e14
    1560:	00006e18 	.word	0x00006e18
    1564:	00006e20 	.word	0x00006e20
    1568:	20000485 	.word	0x20000485
    156c:	200008b9 	.word	0x200008b9
    1570:	200008b6 	.word	0x200008b6
    1574:	00006e28 	.word	0x00006e28
    1578:	00006e30 	.word	0x00006e30
    157c:	00006e38 	.word	0x00006e38
    1580:	00006e40 	.word	0x00006e40
	}
	else if(strncmp(buffer,BLINK_RIGHT_ON,5) == 0)
	{
		blink_right = true;
	}
	else if(strncmp(buffer,BLINK_RIGHT_OFF,5) == 0)
    1584:	49c9      	ldr	r1, [pc, #804]	; (18ac <data_handler+0x74c>)
    1586:	68fb      	ldr	r3, [r7, #12]
    1588:	2205      	movs	r2, #5
    158a:	0018      	movs	r0, r3
    158c:	4bc8      	ldr	r3, [pc, #800]	; (18b0 <data_handler+0x750>)
    158e:	4798      	blx	r3
    1590:	1e03      	subs	r3, r0, #0
    1592:	d104      	bne.n	159e <data_handler+0x43e>
	{
		blink_right = false;
    1594:	4bc7      	ldr	r3, [pc, #796]	; (18b4 <data_handler+0x754>)
    1596:	2200      	movs	r2, #0
    1598:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    159a:	f000 fd5e 	bl	205a <STACK_SIZE+0x5a>
	}
	else if(strncmp(buffer,BLINK_RIGHT_OFF,5) == 0)
	{
		blink_right = false;
	}
	else if(strncmp(buffer,HORN_0_ON,6) == 0)
    159e:	49c6      	ldr	r1, [pc, #792]	; (18b8 <data_handler+0x758>)
    15a0:	68fb      	ldr	r3, [r7, #12]
    15a2:	2206      	movs	r2, #6
    15a4:	0018      	movs	r0, r3
    15a6:	4bc2      	ldr	r3, [pc, #776]	; (18b0 <data_handler+0x750>)
    15a8:	4798      	blx	r3
    15aa:	1e03      	subs	r3, r0, #0
    15ac:	d104      	bne.n	15b8 <data_handler+0x458>
	{
		horn0 = true;
    15ae:	4bc3      	ldr	r3, [pc, #780]	; (18bc <data_handler+0x75c>)
    15b0:	2201      	movs	r2, #1
    15b2:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    15b4:	f000 fd51 	bl	205a <STACK_SIZE+0x5a>
	}
	else if(strncmp(buffer,HORN_0_ON,6) == 0)
	{
		horn0 = true;
	}
	else if(strncmp(buffer,HORN_0_OFF,6) == 0)
    15b8:	49c1      	ldr	r1, [pc, #772]	; (18c0 <data_handler+0x760>)
    15ba:	68fb      	ldr	r3, [r7, #12]
    15bc:	2206      	movs	r2, #6
    15be:	0018      	movs	r0, r3
    15c0:	4bbb      	ldr	r3, [pc, #748]	; (18b0 <data_handler+0x750>)
    15c2:	4798      	blx	r3
    15c4:	1e03      	subs	r3, r0, #0
    15c6:	d104      	bne.n	15d2 <data_handler+0x472>
	{
		horn0 = false;
    15c8:	4bbc      	ldr	r3, [pc, #752]	; (18bc <data_handler+0x75c>)
    15ca:	2200      	movs	r2, #0
    15cc:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    15ce:	f000 fd44 	bl	205a <STACK_SIZE+0x5a>
	}
	else if(strncmp(buffer,HORN_0_OFF,6) == 0)
	{
		horn0 = false;
	}
	else if(strncmp(buffer,HORN_1_ON,6) == 0)
    15d2:	49bc      	ldr	r1, [pc, #752]	; (18c4 <data_handler+0x764>)
    15d4:	68fb      	ldr	r3, [r7, #12]
    15d6:	2206      	movs	r2, #6
    15d8:	0018      	movs	r0, r3
    15da:	4bb5      	ldr	r3, [pc, #724]	; (18b0 <data_handler+0x750>)
    15dc:	4798      	blx	r3
    15de:	1e03      	subs	r3, r0, #0
    15e0:	d104      	bne.n	15ec <data_handler+0x48c>
	{
		horn1 = true;
    15e2:	4bb9      	ldr	r3, [pc, #740]	; (18c8 <data_handler+0x768>)
    15e4:	2201      	movs	r2, #1
    15e6:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    15e8:	f000 fd37 	bl	205a <STACK_SIZE+0x5a>
	}
	else if(strncmp(buffer,HORN_1_ON,6) == 0)
	{
		horn1 = true;
	}
	else if(strncmp(buffer,HORN_1_OFF,6) == 0)
    15ec:	49b7      	ldr	r1, [pc, #732]	; (18cc <data_handler+0x76c>)
    15ee:	68fb      	ldr	r3, [r7, #12]
    15f0:	2206      	movs	r2, #6
    15f2:	0018      	movs	r0, r3
    15f4:	4bae      	ldr	r3, [pc, #696]	; (18b0 <data_handler+0x750>)
    15f6:	4798      	blx	r3
    15f8:	1e03      	subs	r3, r0, #0
    15fa:	d104      	bne.n	1606 <data_handler+0x4a6>
	{
		horn1 = false;
    15fc:	4bb2      	ldr	r3, [pc, #712]	; (18c8 <data_handler+0x768>)
    15fe:	2200      	movs	r2, #0
    1600:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1602:	f000 fd2a 	bl	205a <STACK_SIZE+0x5a>
	}
	else if(strncmp(buffer,HORN_1_OFF,6) == 0)
	{
		horn1 = false;
	}
	else if(strncmp(buffer,HORN_2_ON,6) == 0)
    1606:	49b2      	ldr	r1, [pc, #712]	; (18d0 <data_handler+0x770>)
    1608:	68fb      	ldr	r3, [r7, #12]
    160a:	2206      	movs	r2, #6
    160c:	0018      	movs	r0, r3
    160e:	4ba8      	ldr	r3, [pc, #672]	; (18b0 <data_handler+0x750>)
    1610:	4798      	blx	r3
    1612:	1e03      	subs	r3, r0, #0
    1614:	d104      	bne.n	1620 <data_handler+0x4c0>
	{
		horn2 = true;
    1616:	4baf      	ldr	r3, [pc, #700]	; (18d4 <data_handler+0x774>)
    1618:	2201      	movs	r2, #1
    161a:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    161c:	f000 fd1d 	bl	205a <STACK_SIZE+0x5a>
	}
	else if(strncmp(buffer,HORN_2_ON,6) == 0)
	{
		horn2 = true;
	}
	else if(strncmp(buffer,HORN_2_OFF,6) == 0)
    1620:	49ad      	ldr	r1, [pc, #692]	; (18d8 <data_handler+0x778>)
    1622:	68fb      	ldr	r3, [r7, #12]
    1624:	2206      	movs	r2, #6
    1626:	0018      	movs	r0, r3
    1628:	4ba1      	ldr	r3, [pc, #644]	; (18b0 <data_handler+0x750>)
    162a:	4798      	blx	r3
    162c:	1e03      	subs	r3, r0, #0
    162e:	d104      	bne.n	163a <data_handler+0x4da>
	{
		horn2 = false;
    1630:	4ba8      	ldr	r3, [pc, #672]	; (18d4 <data_handler+0x774>)
    1632:	2200      	movs	r2, #0
    1634:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1636:	f000 fd10 	bl	205a <STACK_SIZE+0x5a>
	}
	else if(strncmp(buffer,HORN_2_OFF,6) == 0)
	{
		horn2 = false;
	}
	else if(strncmp(buffer,HORN_3_ON,6) == 0)
    163a:	49a8      	ldr	r1, [pc, #672]	; (18dc <data_handler+0x77c>)
    163c:	68fb      	ldr	r3, [r7, #12]
    163e:	2206      	movs	r2, #6
    1640:	0018      	movs	r0, r3
    1642:	4b9b      	ldr	r3, [pc, #620]	; (18b0 <data_handler+0x750>)
    1644:	4798      	blx	r3
    1646:	1e03      	subs	r3, r0, #0
    1648:	d104      	bne.n	1654 <data_handler+0x4f4>
	{
		horn3 = true;
    164a:	4ba5      	ldr	r3, [pc, #660]	; (18e0 <data_handler+0x780>)
    164c:	2201      	movs	r2, #1
    164e:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1650:	f000 fd03 	bl	205a <STACK_SIZE+0x5a>
	}
	else if(strncmp(buffer,HORN_3_ON,6) == 0)
	{
		horn3 = true;
	}
	else if(strncmp(buffer,HORN_3_OFF,6) == 0)
    1654:	49a3      	ldr	r1, [pc, #652]	; (18e4 <data_handler+0x784>)
    1656:	68fb      	ldr	r3, [r7, #12]
    1658:	2206      	movs	r2, #6
    165a:	0018      	movs	r0, r3
    165c:	4b94      	ldr	r3, [pc, #592]	; (18b0 <data_handler+0x750>)
    165e:	4798      	blx	r3
    1660:	1e03      	subs	r3, r0, #0
    1662:	d104      	bne.n	166e <data_handler+0x50e>
	{
		horn3 = false;
    1664:	4b9e      	ldr	r3, [pc, #632]	; (18e0 <data_handler+0x780>)
    1666:	2200      	movs	r2, #0
    1668:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    166a:	f000 fcf6 	bl	205a <STACK_SIZE+0x5a>
	}
	else if(strncmp(buffer,HORN_3_OFF,6) == 0)
	{
		horn3 = false;
	}
	else if(strstr(buffer,"SB") != NULL && strlen(buffer) >= 6)
    166e:	4a9e      	ldr	r2, [pc, #632]	; (18e8 <data_handler+0x788>)
    1670:	68fb      	ldr	r3, [r7, #12]
    1672:	0011      	movs	r1, r2
    1674:	0018      	movs	r0, r3
    1676:	4b9d      	ldr	r3, [pc, #628]	; (18ec <data_handler+0x78c>)
    1678:	4798      	blx	r3
    167a:	1e03      	subs	r3, r0, #0
    167c:	d01e      	beq.n	16bc <data_handler+0x55c>
    167e:	68fb      	ldr	r3, [r7, #12]
    1680:	0018      	movs	r0, r3
    1682:	4b9b      	ldr	r3, [pc, #620]	; (18f0 <data_handler+0x790>)
    1684:	4798      	blx	r3
    1686:	1e03      	subs	r3, r0, #0
    1688:	2b05      	cmp	r3, #5
    168a:	d917      	bls.n	16bc <data_handler+0x55c>
	{
		if (buffer[5] == '1')
    168c:	68fb      	ldr	r3, [r7, #12]
    168e:	3305      	adds	r3, #5
    1690:	781b      	ldrb	r3, [r3, #0]
    1692:	2b31      	cmp	r3, #49	; 0x31
    1694:	d10e      	bne.n	16b4 <data_handler+0x554>
		{
			int track;
			sscanf(buffer,"SB%d\n",&track);
    1696:	2350      	movs	r3, #80	; 0x50
    1698:	2208      	movs	r2, #8
    169a:	18ba      	adds	r2, r7, r2
    169c:	18d2      	adds	r2, r2, r3
    169e:	4995      	ldr	r1, [pc, #596]	; (18f4 <data_handler+0x794>)
    16a0:	68fb      	ldr	r3, [r7, #12]
    16a2:	0018      	movs	r0, r3
    16a4:	4b94      	ldr	r3, [pc, #592]	; (18f8 <data_handler+0x798>)
    16a6:	4798      	blx	r3
			sb_play_track_by_number(track);			
    16a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    16aa:	0018      	movs	r0, r3
    16ac:	4b93      	ldr	r3, [pc, #588]	; (18fc <data_handler+0x79c>)
    16ae:	4798      	blx	r3
	{
		horn3 = false;
	}
	else if(strstr(buffer,"SB") != NULL && strlen(buffer) >= 6)
	{
		if (buffer[5] == '1')
    16b0:	f000 fcd3 	bl	205a <STACK_SIZE+0x5a>
			sscanf(buffer,"SB%d\n",&track);
			sb_play_track_by_number(track);			
		}
		else
		{
			sb_quit();
    16b4:	4b92      	ldr	r3, [pc, #584]	; (1900 <data_handler+0x7a0>)
    16b6:	4798      	blx	r3
	{
		horn3 = false;
	}
	else if(strstr(buffer,"SB") != NULL && strlen(buffer) >= 6)
	{
		if (buffer[5] == '1')
    16b8:	f000 fccf 	bl	205a <STACK_SIZE+0x5a>
	}
	else if(strncmp(buffer,SOUND_10_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN10);
	}*/
	else if (strncmp(buffer,SOUND_RESET,sizeof(SOUND_RESET)-1) == 0)
    16bc:	4991      	ldr	r1, [pc, #580]	; (1904 <data_handler+0x7a4>)
    16be:	68fb      	ldr	r3, [r7, #12]
    16c0:	2208      	movs	r2, #8
    16c2:	0018      	movs	r0, r3
    16c4:	4b7a      	ldr	r3, [pc, #488]	; (18b0 <data_handler+0x750>)
    16c6:	4798      	blx	r3
    16c8:	1e03      	subs	r3, r0, #0
    16ca:	d107      	bne.n	16dc <data_handler+0x57c>
	{
		ble_uart_write("SB: RESETTING");
    16cc:	4b8e      	ldr	r3, [pc, #568]	; (1908 <data_handler+0x7a8>)
    16ce:	0018      	movs	r0, r3
    16d0:	4b8e      	ldr	r3, [pc, #568]	; (190c <data_handler+0x7ac>)
    16d2:	4798      	blx	r3
		sounds_reset();
    16d4:	4b8e      	ldr	r3, [pc, #568]	; (1910 <data_handler+0x7b0>)
    16d6:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    16d8:	f000 fcbf 	bl	205a <STACK_SIZE+0x5a>
	else if (strncmp(buffer,SOUND_RESET,sizeof(SOUND_RESET)-1) == 0)
	{
		ble_uart_write("SB: RESETTING");
		sounds_reset();
	}
	else if(strncmp(buffer,PARTY_ON,5) == 0)
    16dc:	498d      	ldr	r1, [pc, #564]	; (1914 <data_handler+0x7b4>)
    16de:	68fb      	ldr	r3, [r7, #12]
    16e0:	2205      	movs	r2, #5
    16e2:	0018      	movs	r0, r3
    16e4:	4b72      	ldr	r3, [pc, #456]	; (18b0 <data_handler+0x750>)
    16e6:	4798      	blx	r3
    16e8:	1e03      	subs	r3, r0, #0
    16ea:	d104      	bne.n	16f6 <data_handler+0x596>
	{
		party = true;
    16ec:	4b8a      	ldr	r3, [pc, #552]	; (1918 <data_handler+0x7b8>)
    16ee:	2201      	movs	r2, #1
    16f0:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    16f2:	f000 fcb2 	bl	205a <STACK_SIZE+0x5a>
	}
	else if(strncmp(buffer,PARTY_ON,5) == 0)
	{
		party = true;
	}
	else if(strncmp(buffer,PARTY_OFF,5) == 0)
    16f6:	4989      	ldr	r1, [pc, #548]	; (191c <data_handler+0x7bc>)
    16f8:	68fb      	ldr	r3, [r7, #12]
    16fa:	2205      	movs	r2, #5
    16fc:	0018      	movs	r0, r3
    16fe:	4b6c      	ldr	r3, [pc, #432]	; (18b0 <data_handler+0x750>)
    1700:	4798      	blx	r3
    1702:	1e03      	subs	r3, r0, #0
    1704:	d106      	bne.n	1714 <data_handler+0x5b4>
	{
		party = false;
    1706:	4b84      	ldr	r3, [pc, #528]	; (1918 <data_handler+0x7b8>)
    1708:	2200      	movs	r2, #0
    170a:	701a      	strb	r2, [r3, #0]
		reset_all_lights();
    170c:	4b84      	ldr	r3, [pc, #528]	; (1920 <data_handler+0x7c0>)
    170e:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1710:	f000 fca3 	bl	205a <STACK_SIZE+0x5a>
	else if(strncmp(buffer,PARTY_OFF,5) == 0)
	{
		party = false;
		reset_all_lights();
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
    1714:	4983      	ldr	r1, [pc, #524]	; (1924 <data_handler+0x7c4>)
    1716:	68fb      	ldr	r3, [r7, #12]
    1718:	2205      	movs	r2, #5
    171a:	0018      	movs	r0, r3
    171c:	4b64      	ldr	r3, [pc, #400]	; (18b0 <data_handler+0x750>)
    171e:	4798      	blx	r3
    1720:	1e03      	subs	r3, r0, #0
    1722:	d104      	bne.n	172e <data_handler+0x5ce>
	{
		water = true;
    1724:	4b80      	ldr	r3, [pc, #512]	; (1928 <data_handler+0x7c8>)
    1726:	2201      	movs	r2, #1
    1728:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    172a:	f000 fc96 	bl	205a <STACK_SIZE+0x5a>
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
	{
		water = true;
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
    172e:	497d      	ldr	r1, [pc, #500]	; (1924 <data_handler+0x7c4>)
    1730:	68fb      	ldr	r3, [r7, #12]
    1732:	2205      	movs	r2, #5
    1734:	0018      	movs	r0, r3
    1736:	4b5e      	ldr	r3, [pc, #376]	; (18b0 <data_handler+0x750>)
    1738:	4798      	blx	r3
    173a:	1e03      	subs	r3, r0, #0
    173c:	d104      	bne.n	1748 <data_handler+0x5e8>
	{
		water = false;
    173e:	4b7a      	ldr	r3, [pc, #488]	; (1928 <data_handler+0x7c8>)
    1740:	2200      	movs	r2, #0
    1742:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1744:	f000 fc89 	bl	205a <STACK_SIZE+0x5a>
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
	{
		water = false;
	}
	else if(strncmp(buffer,START_ON,5) == 0)
    1748:	4978      	ldr	r1, [pc, #480]	; (192c <data_handler+0x7cc>)
    174a:	68fb      	ldr	r3, [r7, #12]
    174c:	2205      	movs	r2, #5
    174e:	0018      	movs	r0, r3
    1750:	4b57      	ldr	r3, [pc, #348]	; (18b0 <data_handler+0x750>)
    1752:	4798      	blx	r3
    1754:	1e03      	subs	r3, r0, #0
    1756:	d104      	bne.n	1762 <data_handler+0x602>
	{
		start = true;
    1758:	4b75      	ldr	r3, [pc, #468]	; (1930 <data_handler+0x7d0>)
    175a:	2201      	movs	r2, #1
    175c:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    175e:	f000 fc7c 	bl	205a <STACK_SIZE+0x5a>
	}
	else if(strncmp(buffer,START_ON,5) == 0)
	{
		start = true;
	}
	else if(strncmp(buffer,START_OFF,5) == 0)
    1762:	4974      	ldr	r1, [pc, #464]	; (1934 <data_handler+0x7d4>)
    1764:	68fb      	ldr	r3, [r7, #12]
    1766:	2205      	movs	r2, #5
    1768:	0018      	movs	r0, r3
    176a:	4b51      	ldr	r3, [pc, #324]	; (18b0 <data_handler+0x750>)
    176c:	4798      	blx	r3
    176e:	1e03      	subs	r3, r0, #0
    1770:	d104      	bne.n	177c <data_handler+0x61c>
	{
		start = false;
    1772:	4b6f      	ldr	r3, [pc, #444]	; (1930 <data_handler+0x7d0>)
    1774:	2200      	movs	r2, #0
    1776:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1778:	f000 fc6f 	bl	205a <STACK_SIZE+0x5a>
	}
	else if(strncmp(buffer,START_OFF,5) == 0)
	{
		start = false;
	}
	else if(strncmp(buffer,LED_BAR_ON,5) == 0)
    177c:	496e      	ldr	r1, [pc, #440]	; (1938 <data_handler+0x7d8>)
    177e:	68fb      	ldr	r3, [r7, #12]
    1780:	2205      	movs	r2, #5
    1782:	0018      	movs	r0, r3
    1784:	4b4a      	ldr	r3, [pc, #296]	; (18b0 <data_handler+0x750>)
    1786:	4798      	blx	r3
    1788:	1e03      	subs	r3, r0, #0
    178a:	d122      	bne.n	17d2 <data_handler+0x672>
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,true);
    178c:	2301      	movs	r3, #1
    178e:	2202      	movs	r2, #2
    1790:	2101      	movs	r1, #1
    1792:	2000      	movs	r0, #0
    1794:	4c69      	ldr	r4, [pc, #420]	; (193c <data_handler+0x7dc>)
    1796:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,true);
    1798:	2301      	movs	r3, #1
    179a:	2202      	movs	r2, #2
    179c:	2102      	movs	r1, #2
    179e:	2000      	movs	r0, #0
    17a0:	4c66      	ldr	r4, [pc, #408]	; (193c <data_handler+0x7dc>)
    17a2:	47a0      	blx	r4
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,true);
    17a4:	2301      	movs	r3, #1
    17a6:	2204      	movs	r2, #4
    17a8:	2101      	movs	r1, #1
    17aa:	2000      	movs	r0, #0
    17ac:	4c63      	ldr	r4, [pc, #396]	; (193c <data_handler+0x7dc>)
    17ae:	47a0      	blx	r4
		led_bar = true;
    17b0:	4b63      	ldr	r3, [pc, #396]	; (1940 <data_handler+0x7e0>)
    17b2:	2201      	movs	r2, #1
    17b4:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    17b6:	68fb      	ldr	r3, [r7, #12]
    17b8:	0018      	movs	r0, r3
    17ba:	4b54      	ldr	r3, [pc, #336]	; (190c <data_handler+0x7ac>)
    17bc:	4798      	blx	r3
		ble_uart_write(" - ");
    17be:	4b61      	ldr	r3, [pc, #388]	; (1944 <data_handler+0x7e4>)
    17c0:	0018      	movs	r0, r3
    17c2:	4b52      	ldr	r3, [pc, #328]	; (190c <data_handler+0x7ac>)
    17c4:	4798      	blx	r3
		ble_uart_write("ACK");
    17c6:	4b60      	ldr	r3, [pc, #384]	; (1948 <data_handler+0x7e8>)
    17c8:	0018      	movs	r0, r3
    17ca:	4b50      	ldr	r3, [pc, #320]	; (190c <data_handler+0x7ac>)
    17cc:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    17ce:	f000 fc44 	bl	205a <STACK_SIZE+0x5a>
		led_bar = true;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,LED_BAR_OFF,5) == 0)
    17d2:	495e      	ldr	r1, [pc, #376]	; (194c <data_handler+0x7ec>)
    17d4:	68fb      	ldr	r3, [r7, #12]
    17d6:	2205      	movs	r2, #5
    17d8:	0018      	movs	r0, r3
    17da:	4b35      	ldr	r3, [pc, #212]	; (18b0 <data_handler+0x750>)
    17dc:	4798      	blx	r3
    17de:	1e03      	subs	r3, r0, #0
    17e0:	d122      	bne.n	1828 <data_handler+0x6c8>
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,false);
    17e2:	2300      	movs	r3, #0
    17e4:	2202      	movs	r2, #2
    17e6:	2101      	movs	r1, #1
    17e8:	2000      	movs	r0, #0
    17ea:	4c54      	ldr	r4, [pc, #336]	; (193c <data_handler+0x7dc>)
    17ec:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,false);
    17ee:	2300      	movs	r3, #0
    17f0:	2202      	movs	r2, #2
    17f2:	2102      	movs	r1, #2
    17f4:	2000      	movs	r0, #0
    17f6:	4c51      	ldr	r4, [pc, #324]	; (193c <data_handler+0x7dc>)
    17f8:	47a0      	blx	r4
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,false);
    17fa:	2300      	movs	r3, #0
    17fc:	2204      	movs	r2, #4
    17fe:	2101      	movs	r1, #1
    1800:	2000      	movs	r0, #0
    1802:	4c4e      	ldr	r4, [pc, #312]	; (193c <data_handler+0x7dc>)
    1804:	47a0      	blx	r4
		led_bar = false;
    1806:	4b4e      	ldr	r3, [pc, #312]	; (1940 <data_handler+0x7e0>)
    1808:	2200      	movs	r2, #0
    180a:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    180c:	68fb      	ldr	r3, [r7, #12]
    180e:	0018      	movs	r0, r3
    1810:	4b3e      	ldr	r3, [pc, #248]	; (190c <data_handler+0x7ac>)
    1812:	4798      	blx	r3
		ble_uart_write(" - ");
    1814:	4b4b      	ldr	r3, [pc, #300]	; (1944 <data_handler+0x7e4>)
    1816:	0018      	movs	r0, r3
    1818:	4b3c      	ldr	r3, [pc, #240]	; (190c <data_handler+0x7ac>)
    181a:	4798      	blx	r3
		ble_uart_write("ACK");
    181c:	4b4a      	ldr	r3, [pc, #296]	; (1948 <data_handler+0x7e8>)
    181e:	0018      	movs	r0, r3
    1820:	4b3a      	ldr	r3, [pc, #232]	; (190c <data_handler+0x7ac>)
    1822:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1824:	f000 fc19 	bl	205a <STACK_SIZE+0x5a>
		led_bar = false;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,HDL_ON,5) == 0)
    1828:	4949      	ldr	r1, [pc, #292]	; (1950 <data_handler+0x7f0>)
    182a:	68fb      	ldr	r3, [r7, #12]
    182c:	2205      	movs	r2, #5
    182e:	0018      	movs	r0, r3
    1830:	4b1f      	ldr	r3, [pc, #124]	; (18b0 <data_handler+0x750>)
    1832:	4798      	blx	r3
    1834:	1e03      	subs	r3, r0, #0
    1836:	d000      	beq.n	183a <data_handler+0x6da>
    1838:	e092      	b.n	1960 <data_handler+0x800>
	{
		system_interrupt_disable_global();
    183a:	4b46      	ldr	r3, [pc, #280]	; (1954 <data_handler+0x7f4>)
    183c:	4798      	blx	r3
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,true);
    183e:	2301      	movs	r3, #1
    1840:	2201      	movs	r2, #1
    1842:	2102      	movs	r1, #2
    1844:	2000      	movs	r0, #0
    1846:	4c3d      	ldr	r4, [pc, #244]	; (193c <data_handler+0x7dc>)
    1848:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,true);
    184a:	2301      	movs	r3, #1
    184c:	2201      	movs	r2, #1
    184e:	2101      	movs	r1, #1
    1850:	2000      	movs	r0, #0
    1852:	4c3a      	ldr	r4, [pc, #232]	; (193c <data_handler+0x7dc>)
    1854:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    1856:	2301      	movs	r3, #1
    1858:	2200      	movs	r2, #0
    185a:	2101      	movs	r1, #1
    185c:	2000      	movs	r0, #0
    185e:	4c37      	ldr	r4, [pc, #220]	; (193c <data_handler+0x7dc>)
    1860:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    1862:	2301      	movs	r3, #1
    1864:	2200      	movs	r2, #0
    1866:	2102      	movs	r1, #2
    1868:	2000      	movs	r0, #0
    186a:	4c34      	ldr	r4, [pc, #208]	; (193c <data_handler+0x7dc>)
    186c:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    186e:	2301      	movs	r3, #1
    1870:	2200      	movs	r2, #0
    1872:	2103      	movs	r1, #3
    1874:	2000      	movs	r0, #0
    1876:	4c31      	ldr	r4, [pc, #196]	; (193c <data_handler+0x7dc>)
    1878:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    187a:	2301      	movs	r3, #1
    187c:	2200      	movs	r2, #0
    187e:	2104      	movs	r1, #4
    1880:	2000      	movs	r0, #0
    1882:	4c2e      	ldr	r4, [pc, #184]	; (193c <data_handler+0x7dc>)
    1884:	47a0      	blx	r4
		mcp23017_reset();
    1886:	4b34      	ldr	r3, [pc, #208]	; (1958 <data_handler+0x7f8>)
    1888:	4798      	blx	r3
		system_interrupt_enable_global();
    188a:	4b34      	ldr	r3, [pc, #208]	; (195c <data_handler+0x7fc>)
    188c:	4798      	blx	r3
		ble_uart_write(buffer);
    188e:	68fb      	ldr	r3, [r7, #12]
    1890:	0018      	movs	r0, r3
    1892:	4b1e      	ldr	r3, [pc, #120]	; (190c <data_handler+0x7ac>)
    1894:	4798      	blx	r3
		ble_uart_write(" - ");
    1896:	4b2b      	ldr	r3, [pc, #172]	; (1944 <data_handler+0x7e4>)
    1898:	0018      	movs	r0, r3
    189a:	4b1c      	ldr	r3, [pc, #112]	; (190c <data_handler+0x7ac>)
    189c:	4798      	blx	r3
		ble_uart_write("ACK");
    189e:	4b2a      	ldr	r3, [pc, #168]	; (1948 <data_handler+0x7e8>)
    18a0:	0018      	movs	r0, r3
    18a2:	4b1a      	ldr	r3, [pc, #104]	; (190c <data_handler+0x7ac>)
    18a4:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    18a6:	f000 fbd8 	bl	205a <STACK_SIZE+0x5a>
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	00006e48 	.word	0x00006e48
    18b0:	00005d63 	.word	0x00005d63
    18b4:	200008b9 	.word	0x200008b9
    18b8:	00006e50 	.word	0x00006e50
    18bc:	200008bc 	.word	0x200008bc
    18c0:	00006e58 	.word	0x00006e58
    18c4:	00006e60 	.word	0x00006e60
    18c8:	20000486 	.word	0x20000486
    18cc:	00006e68 	.word	0x00006e68
    18d0:	00006e70 	.word	0x00006e70
    18d4:	200008a1 	.word	0x200008a1
    18d8:	00006e78 	.word	0x00006e78
    18dc:	00006e80 	.word	0x00006e80
    18e0:	200008c4 	.word	0x200008c4
    18e4:	00006e88 	.word	0x00006e88
    18e8:	00006e90 	.word	0x00006e90
    18ec:	00005d87 	.word	0x00005d87
    18f0:	00005d55 	.word	0x00005d55
    18f4:	00006e94 	.word	0x00006e94
    18f8:	00005cd5 	.word	0x00005cd5
    18fc:	00003f15 	.word	0x00003f15
    1900:	00003f49 	.word	0x00003f49
    1904:	00006e9c 	.word	0x00006e9c
    1908:	00006ea8 	.word	0x00006ea8
    190c:	0000102d 	.word	0x0000102d
    1910:	00003ae5 	.word	0x00003ae5
    1914:	00006eb8 	.word	0x00006eb8
    1918:	200008b5 	.word	0x200008b5
    191c:	00006ec0 	.word	0x00006ec0
    1920:	00002a51 	.word	0x00002a51
    1924:	00006ec8 	.word	0x00006ec8
    1928:	20000471 	.word	0x20000471
    192c:	00006ed0 	.word	0x00006ed0
    1930:	200008c2 	.word	0x200008c2
    1934:	00006ed8 	.word	0x00006ed8
    1938:	00006ee0 	.word	0x00006ee0
    193c:	00002cc9 	.word	0x00002cc9
    1940:	200008a0 	.word	0x200008a0
    1944:	00006e10 	.word	0x00006e10
    1948:	00006e14 	.word	0x00006e14
    194c:	00006ee8 	.word	0x00006ee8
    1950:	00006ef0 	.word	0x00006ef0
    1954:	00001145 	.word	0x00001145
    1958:	000032b9 	.word	0x000032b9
    195c:	00001129 	.word	0x00001129
		system_interrupt_enable_global();
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,HDL_OFF,5) == 0)
    1960:	49d9      	ldr	r1, [pc, #868]	; (1cc8 <data_handler+0xb68>)
    1962:	68fb      	ldr	r3, [r7, #12]
    1964:	2205      	movs	r2, #5
    1966:	0018      	movs	r0, r3
    1968:	4bd8      	ldr	r3, [pc, #864]	; (1ccc <data_handler+0xb6c>)
    196a:	4798      	blx	r3
    196c:	1e03      	subs	r3, r0, #0
    196e:	d136      	bne.n	19de <data_handler+0x87e>
	{
		system_interrupt_disable_global();
    1970:	4bd7      	ldr	r3, [pc, #860]	; (1cd0 <data_handler+0xb70>)
    1972:	4798      	blx	r3
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,false);
    1974:	2300      	movs	r3, #0
    1976:	2201      	movs	r2, #1
    1978:	2102      	movs	r1, #2
    197a:	2000      	movs	r0, #0
    197c:	4cd5      	ldr	r4, [pc, #852]	; (1cd4 <data_handler+0xb74>)
    197e:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,false);
    1980:	2300      	movs	r3, #0
    1982:	2201      	movs	r2, #1
    1984:	2101      	movs	r1, #1
    1986:	2000      	movs	r0, #0
    1988:	4cd2      	ldr	r4, [pc, #840]	; (1cd4 <data_handler+0xb74>)
    198a:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    198c:	2300      	movs	r3, #0
    198e:	2200      	movs	r2, #0
    1990:	2101      	movs	r1, #1
    1992:	2000      	movs	r0, #0
    1994:	4ccf      	ldr	r4, [pc, #828]	; (1cd4 <data_handler+0xb74>)
    1996:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    1998:	2300      	movs	r3, #0
    199a:	2200      	movs	r2, #0
    199c:	2102      	movs	r1, #2
    199e:	2000      	movs	r0, #0
    19a0:	4ccc      	ldr	r4, [pc, #816]	; (1cd4 <data_handler+0xb74>)
    19a2:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    19a4:	2300      	movs	r3, #0
    19a6:	2200      	movs	r2, #0
    19a8:	2103      	movs	r1, #3
    19aa:	2000      	movs	r0, #0
    19ac:	4cc9      	ldr	r4, [pc, #804]	; (1cd4 <data_handler+0xb74>)
    19ae:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    19b0:	2300      	movs	r3, #0
    19b2:	2200      	movs	r2, #0
    19b4:	2104      	movs	r1, #4
    19b6:	2000      	movs	r0, #0
    19b8:	4cc6      	ldr	r4, [pc, #792]	; (1cd4 <data_handler+0xb74>)
    19ba:	47a0      	blx	r4
		mcp23017_reset();
    19bc:	4bc6      	ldr	r3, [pc, #792]	; (1cd8 <data_handler+0xb78>)
    19be:	4798      	blx	r3
		system_interrupt_enable_global();
    19c0:	4bc6      	ldr	r3, [pc, #792]	; (1cdc <data_handler+0xb7c>)
    19c2:	4798      	blx	r3
		ble_uart_write(buffer);
    19c4:	68fb      	ldr	r3, [r7, #12]
    19c6:	0018      	movs	r0, r3
    19c8:	4bc5      	ldr	r3, [pc, #788]	; (1ce0 <data_handler+0xb80>)
    19ca:	4798      	blx	r3
		ble_uart_write(" - ");
    19cc:	4bc5      	ldr	r3, [pc, #788]	; (1ce4 <data_handler+0xb84>)
    19ce:	0018      	movs	r0, r3
    19d0:	4bc3      	ldr	r3, [pc, #780]	; (1ce0 <data_handler+0xb80>)
    19d2:	4798      	blx	r3
		ble_uart_write("ACK");
    19d4:	4bc4      	ldr	r3, [pc, #784]	; (1ce8 <data_handler+0xb88>)
    19d6:	0018      	movs	r0, r3
    19d8:	4bc1      	ldr	r3, [pc, #772]	; (1ce0 <data_handler+0xb80>)
    19da:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    19dc:	e33d      	b.n	205a <STACK_SIZE+0x5a>
		system_interrupt_enable_global();
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,BRIAN_ON,7) == 0)
    19de:	49c3      	ldr	r1, [pc, #780]	; (1cec <data_handler+0xb8c>)
    19e0:	68fb      	ldr	r3, [r7, #12]
    19e2:	2207      	movs	r2, #7
    19e4:	0018      	movs	r0, r3
    19e6:	4bb9      	ldr	r3, [pc, #740]	; (1ccc <data_handler+0xb6c>)
    19e8:	4798      	blx	r3
    19ea:	1e03      	subs	r3, r0, #0
    19ec:	d136      	bne.n	1a5c <data_handler+0x8fc>
	{
		system_interrupt_disable_global();
    19ee:	4bb8      	ldr	r3, [pc, #736]	; (1cd0 <data_handler+0xb70>)
    19f0:	4798      	blx	r3
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,true);
    19f2:	2301      	movs	r3, #1
    19f4:	2203      	movs	r2, #3
    19f6:	2102      	movs	r1, #2
    19f8:	2000      	movs	r0, #0
    19fa:	4cb6      	ldr	r4, [pc, #728]	; (1cd4 <data_handler+0xb74>)
    19fc:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,true);
    19fe:	2301      	movs	r3, #1
    1a00:	2203      	movs	r2, #3
    1a02:	2101      	movs	r1, #1
    1a04:	2000      	movs	r0, #0
    1a06:	4cb3      	ldr	r4, [pc, #716]	; (1cd4 <data_handler+0xb74>)
    1a08:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    1a0a:	2301      	movs	r3, #1
    1a0c:	2200      	movs	r2, #0
    1a0e:	2101      	movs	r1, #1
    1a10:	2000      	movs	r0, #0
    1a12:	4cb0      	ldr	r4, [pc, #704]	; (1cd4 <data_handler+0xb74>)
    1a14:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    1a16:	2301      	movs	r3, #1
    1a18:	2200      	movs	r2, #0
    1a1a:	2102      	movs	r1, #2
    1a1c:	2000      	movs	r0, #0
    1a1e:	4cad      	ldr	r4, [pc, #692]	; (1cd4 <data_handler+0xb74>)
    1a20:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    1a22:	2301      	movs	r3, #1
    1a24:	2200      	movs	r2, #0
    1a26:	2103      	movs	r1, #3
    1a28:	2000      	movs	r0, #0
    1a2a:	4caa      	ldr	r4, [pc, #680]	; (1cd4 <data_handler+0xb74>)
    1a2c:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    1a2e:	2301      	movs	r3, #1
    1a30:	2200      	movs	r2, #0
    1a32:	2104      	movs	r1, #4
    1a34:	2000      	movs	r0, #0
    1a36:	4ca7      	ldr	r4, [pc, #668]	; (1cd4 <data_handler+0xb74>)
    1a38:	47a0      	blx	r4
		mcp23017_reset();
    1a3a:	4ba7      	ldr	r3, [pc, #668]	; (1cd8 <data_handler+0xb78>)
    1a3c:	4798      	blx	r3
		system_interrupt_enable_global();
    1a3e:	4ba7      	ldr	r3, [pc, #668]	; (1cdc <data_handler+0xb7c>)
    1a40:	4798      	blx	r3
		ble_uart_write(buffer);
    1a42:	68fb      	ldr	r3, [r7, #12]
    1a44:	0018      	movs	r0, r3
    1a46:	4ba6      	ldr	r3, [pc, #664]	; (1ce0 <data_handler+0xb80>)
    1a48:	4798      	blx	r3
		ble_uart_write(" - ");
    1a4a:	4ba6      	ldr	r3, [pc, #664]	; (1ce4 <data_handler+0xb84>)
    1a4c:	0018      	movs	r0, r3
    1a4e:	4ba4      	ldr	r3, [pc, #656]	; (1ce0 <data_handler+0xb80>)
    1a50:	4798      	blx	r3
		ble_uart_write("ACK");
    1a52:	4ba5      	ldr	r3, [pc, #660]	; (1ce8 <data_handler+0xb88>)
    1a54:	0018      	movs	r0, r3
    1a56:	4ba2      	ldr	r3, [pc, #648]	; (1ce0 <data_handler+0xb80>)
    1a58:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1a5a:	e2fe      	b.n	205a <STACK_SIZE+0x5a>
		system_interrupt_enable_global();
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,BRIAN_OFF,7) == 0)
    1a5c:	49a4      	ldr	r1, [pc, #656]	; (1cf0 <data_handler+0xb90>)
    1a5e:	68fb      	ldr	r3, [r7, #12]
    1a60:	2207      	movs	r2, #7
    1a62:	0018      	movs	r0, r3
    1a64:	4b99      	ldr	r3, [pc, #612]	; (1ccc <data_handler+0xb6c>)
    1a66:	4798      	blx	r3
    1a68:	1e03      	subs	r3, r0, #0
    1a6a:	d136      	bne.n	1ada <data_handler+0x97a>
	{
		system_interrupt_disable_global();
    1a6c:	4b98      	ldr	r3, [pc, #608]	; (1cd0 <data_handler+0xb70>)
    1a6e:	4798      	blx	r3
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,false);
    1a70:	2300      	movs	r3, #0
    1a72:	2203      	movs	r2, #3
    1a74:	2102      	movs	r1, #2
    1a76:	2000      	movs	r0, #0
    1a78:	4c96      	ldr	r4, [pc, #600]	; (1cd4 <data_handler+0xb74>)
    1a7a:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,false);
    1a7c:	2300      	movs	r3, #0
    1a7e:	2203      	movs	r2, #3
    1a80:	2101      	movs	r1, #1
    1a82:	2000      	movs	r0, #0
    1a84:	4c93      	ldr	r4, [pc, #588]	; (1cd4 <data_handler+0xb74>)
    1a86:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    1a88:	2300      	movs	r3, #0
    1a8a:	2200      	movs	r2, #0
    1a8c:	2101      	movs	r1, #1
    1a8e:	2000      	movs	r0, #0
    1a90:	4c90      	ldr	r4, [pc, #576]	; (1cd4 <data_handler+0xb74>)
    1a92:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    1a94:	2300      	movs	r3, #0
    1a96:	2200      	movs	r2, #0
    1a98:	2102      	movs	r1, #2
    1a9a:	2000      	movs	r0, #0
    1a9c:	4c8d      	ldr	r4, [pc, #564]	; (1cd4 <data_handler+0xb74>)
    1a9e:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    1aa0:	2300      	movs	r3, #0
    1aa2:	2200      	movs	r2, #0
    1aa4:	2103      	movs	r1, #3
    1aa6:	2000      	movs	r0, #0
    1aa8:	4c8a      	ldr	r4, [pc, #552]	; (1cd4 <data_handler+0xb74>)
    1aaa:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    1aac:	2300      	movs	r3, #0
    1aae:	2200      	movs	r2, #0
    1ab0:	2104      	movs	r1, #4
    1ab2:	2000      	movs	r0, #0
    1ab4:	4c87      	ldr	r4, [pc, #540]	; (1cd4 <data_handler+0xb74>)
    1ab6:	47a0      	blx	r4
		mcp23017_reset();
    1ab8:	4b87      	ldr	r3, [pc, #540]	; (1cd8 <data_handler+0xb78>)
    1aba:	4798      	blx	r3
		system_interrupt_enable_global();
    1abc:	4b87      	ldr	r3, [pc, #540]	; (1cdc <data_handler+0xb7c>)
    1abe:	4798      	blx	r3
		ble_uart_write(buffer);
    1ac0:	68fb      	ldr	r3, [r7, #12]
    1ac2:	0018      	movs	r0, r3
    1ac4:	4b86      	ldr	r3, [pc, #536]	; (1ce0 <data_handler+0xb80>)
    1ac6:	4798      	blx	r3
		ble_uart_write(" - ");
    1ac8:	4b86      	ldr	r3, [pc, #536]	; (1ce4 <data_handler+0xb84>)
    1aca:	0018      	movs	r0, r3
    1acc:	4b84      	ldr	r3, [pc, #528]	; (1ce0 <data_handler+0xb80>)
    1ace:	4798      	blx	r3
		ble_uart_write("ACK");
    1ad0:	4b85      	ldr	r3, [pc, #532]	; (1ce8 <data_handler+0xb88>)
    1ad2:	0018      	movs	r0, r3
    1ad4:	4b82      	ldr	r3, [pc, #520]	; (1ce0 <data_handler+0xb80>)
    1ad6:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1ad8:	e2bf      	b.n	205a <STACK_SIZE+0x5a>
		system_interrupt_enable_global();
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASHY1_ON,7) == 0)
    1ada:	4986      	ldr	r1, [pc, #536]	; (1cf4 <data_handler+0xb94>)
    1adc:	68fb      	ldr	r3, [r7, #12]
    1ade:	2207      	movs	r2, #7
    1ae0:	0018      	movs	r0, r3
    1ae2:	4b7a      	ldr	r3, [pc, #488]	; (1ccc <data_handler+0xb6c>)
    1ae4:	4798      	blx	r3
    1ae6:	1e03      	subs	r3, r0, #0
    1ae8:	d10f      	bne.n	1b0a <data_handler+0x9aa>
	{
		flashy1 = true;
    1aea:	4b83      	ldr	r3, [pc, #524]	; (1cf8 <data_handler+0xb98>)
    1aec:	2201      	movs	r2, #1
    1aee:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1af0:	68fb      	ldr	r3, [r7, #12]
    1af2:	0018      	movs	r0, r3
    1af4:	4b7a      	ldr	r3, [pc, #488]	; (1ce0 <data_handler+0xb80>)
    1af6:	4798      	blx	r3
		ble_uart_write(" - ");
    1af8:	4b7a      	ldr	r3, [pc, #488]	; (1ce4 <data_handler+0xb84>)
    1afa:	0018      	movs	r0, r3
    1afc:	4b78      	ldr	r3, [pc, #480]	; (1ce0 <data_handler+0xb80>)
    1afe:	4798      	blx	r3
		ble_uart_write("ACK");
    1b00:	4b79      	ldr	r3, [pc, #484]	; (1ce8 <data_handler+0xb88>)
    1b02:	0018      	movs	r0, r3
    1b04:	4b76      	ldr	r3, [pc, #472]	; (1ce0 <data_handler+0xb80>)
    1b06:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1b08:	e2a7      	b.n	205a <STACK_SIZE+0x5a>
		flashy1 = true;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASHY1_OFF,7) == 0)
    1b0a:	497c      	ldr	r1, [pc, #496]	; (1cfc <data_handler+0xb9c>)
    1b0c:	68fb      	ldr	r3, [r7, #12]
    1b0e:	2207      	movs	r2, #7
    1b10:	0018      	movs	r0, r3
    1b12:	4b6e      	ldr	r3, [pc, #440]	; (1ccc <data_handler+0xb6c>)
    1b14:	4798      	blx	r3
    1b16:	1e03      	subs	r3, r0, #0
    1b18:	d111      	bne.n	1b3e <data_handler+0x9de>
	{
		flashy1 = false;
    1b1a:	4b77      	ldr	r3, [pc, #476]	; (1cf8 <data_handler+0xb98>)
    1b1c:	2200      	movs	r2, #0
    1b1e:	701a      	strb	r2, [r3, #0]
		reset_all_lights();
    1b20:	4b77      	ldr	r3, [pc, #476]	; (1d00 <data_handler+0xba0>)
    1b22:	4798      	blx	r3
		ble_uart_write(buffer);
    1b24:	68fb      	ldr	r3, [r7, #12]
    1b26:	0018      	movs	r0, r3
    1b28:	4b6d      	ldr	r3, [pc, #436]	; (1ce0 <data_handler+0xb80>)
    1b2a:	4798      	blx	r3
		ble_uart_write(" - ");
    1b2c:	4b6d      	ldr	r3, [pc, #436]	; (1ce4 <data_handler+0xb84>)
    1b2e:	0018      	movs	r0, r3
    1b30:	4b6b      	ldr	r3, [pc, #428]	; (1ce0 <data_handler+0xb80>)
    1b32:	4798      	blx	r3
		ble_uart_write("ACK");
    1b34:	4b6c      	ldr	r3, [pc, #432]	; (1ce8 <data_handler+0xb88>)
    1b36:	0018      	movs	r0, r3
    1b38:	4b69      	ldr	r3, [pc, #420]	; (1ce0 <data_handler+0xb80>)
    1b3a:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1b3c:	e28d      	b.n	205a <STACK_SIZE+0x5a>
		reset_all_lights();
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASHY2_ON,7) == 0)
    1b3e:	4971      	ldr	r1, [pc, #452]	; (1d04 <data_handler+0xba4>)
    1b40:	68fb      	ldr	r3, [r7, #12]
    1b42:	2207      	movs	r2, #7
    1b44:	0018      	movs	r0, r3
    1b46:	4b61      	ldr	r3, [pc, #388]	; (1ccc <data_handler+0xb6c>)
    1b48:	4798      	blx	r3
    1b4a:	1e03      	subs	r3, r0, #0
    1b4c:	d10f      	bne.n	1b6e <data_handler+0xa0e>
	{
		flashy2 = true;
    1b4e:	4b6e      	ldr	r3, [pc, #440]	; (1d08 <data_handler+0xba8>)
    1b50:	2201      	movs	r2, #1
    1b52:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1b54:	68fb      	ldr	r3, [r7, #12]
    1b56:	0018      	movs	r0, r3
    1b58:	4b61      	ldr	r3, [pc, #388]	; (1ce0 <data_handler+0xb80>)
    1b5a:	4798      	blx	r3
		ble_uart_write(" - ");
    1b5c:	4b61      	ldr	r3, [pc, #388]	; (1ce4 <data_handler+0xb84>)
    1b5e:	0018      	movs	r0, r3
    1b60:	4b5f      	ldr	r3, [pc, #380]	; (1ce0 <data_handler+0xb80>)
    1b62:	4798      	blx	r3
		ble_uart_write("ACK");
    1b64:	4b60      	ldr	r3, [pc, #384]	; (1ce8 <data_handler+0xb88>)
    1b66:	0018      	movs	r0, r3
    1b68:	4b5d      	ldr	r3, [pc, #372]	; (1ce0 <data_handler+0xb80>)
    1b6a:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1b6c:	e275      	b.n	205a <STACK_SIZE+0x5a>
		flashy2 = true;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASHY2_OFF,7) == 0)
    1b6e:	4967      	ldr	r1, [pc, #412]	; (1d0c <data_handler+0xbac>)
    1b70:	68fb      	ldr	r3, [r7, #12]
    1b72:	2207      	movs	r2, #7
    1b74:	0018      	movs	r0, r3
    1b76:	4b55      	ldr	r3, [pc, #340]	; (1ccc <data_handler+0xb6c>)
    1b78:	4798      	blx	r3
    1b7a:	1e03      	subs	r3, r0, #0
    1b7c:	d111      	bne.n	1ba2 <data_handler+0xa42>
	{
		reset_all_lights();
    1b7e:	4b60      	ldr	r3, [pc, #384]	; (1d00 <data_handler+0xba0>)
    1b80:	4798      	blx	r3
		flashy2 = false;
    1b82:	4b61      	ldr	r3, [pc, #388]	; (1d08 <data_handler+0xba8>)
    1b84:	2200      	movs	r2, #0
    1b86:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1b88:	68fb      	ldr	r3, [r7, #12]
    1b8a:	0018      	movs	r0, r3
    1b8c:	4b54      	ldr	r3, [pc, #336]	; (1ce0 <data_handler+0xb80>)
    1b8e:	4798      	blx	r3
		ble_uart_write(" - ");
    1b90:	4b54      	ldr	r3, [pc, #336]	; (1ce4 <data_handler+0xb84>)
    1b92:	0018      	movs	r0, r3
    1b94:	4b52      	ldr	r3, [pc, #328]	; (1ce0 <data_handler+0xb80>)
    1b96:	4798      	blx	r3
		ble_uart_write("ACK");
    1b98:	4b53      	ldr	r3, [pc, #332]	; (1ce8 <data_handler+0xb88>)
    1b9a:	0018      	movs	r0, r3
    1b9c:	4b50      	ldr	r3, [pc, #320]	; (1ce0 <data_handler+0xb80>)
    1b9e:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1ba0:	e25b      	b.n	205a <STACK_SIZE+0x5a>
		flashy2 = false;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASHY3_ON,7) == 0)
    1ba2:	495b      	ldr	r1, [pc, #364]	; (1d10 <data_handler+0xbb0>)
    1ba4:	68fb      	ldr	r3, [r7, #12]
    1ba6:	2207      	movs	r2, #7
    1ba8:	0018      	movs	r0, r3
    1baa:	4b48      	ldr	r3, [pc, #288]	; (1ccc <data_handler+0xb6c>)
    1bac:	4798      	blx	r3
    1bae:	1e03      	subs	r3, r0, #0
    1bb0:	d10f      	bne.n	1bd2 <data_handler+0xa72>
	{
		flashy3 = true;
    1bb2:	4b58      	ldr	r3, [pc, #352]	; (1d14 <data_handler+0xbb4>)
    1bb4:	2201      	movs	r2, #1
    1bb6:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1bb8:	68fb      	ldr	r3, [r7, #12]
    1bba:	0018      	movs	r0, r3
    1bbc:	4b48      	ldr	r3, [pc, #288]	; (1ce0 <data_handler+0xb80>)
    1bbe:	4798      	blx	r3
		ble_uart_write(" - ");
    1bc0:	4b48      	ldr	r3, [pc, #288]	; (1ce4 <data_handler+0xb84>)
    1bc2:	0018      	movs	r0, r3
    1bc4:	4b46      	ldr	r3, [pc, #280]	; (1ce0 <data_handler+0xb80>)
    1bc6:	4798      	blx	r3
		ble_uart_write("ACK");
    1bc8:	4b47      	ldr	r3, [pc, #284]	; (1ce8 <data_handler+0xb88>)
    1bca:	0018      	movs	r0, r3
    1bcc:	4b44      	ldr	r3, [pc, #272]	; (1ce0 <data_handler+0xb80>)
    1bce:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1bd0:	e243      	b.n	205a <STACK_SIZE+0x5a>
		flashy3 = true;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASHY3_OFF,7) == 0)
    1bd2:	4951      	ldr	r1, [pc, #324]	; (1d18 <data_handler+0xbb8>)
    1bd4:	68fb      	ldr	r3, [r7, #12]
    1bd6:	2207      	movs	r2, #7
    1bd8:	0018      	movs	r0, r3
    1bda:	4b3c      	ldr	r3, [pc, #240]	; (1ccc <data_handler+0xb6c>)
    1bdc:	4798      	blx	r3
    1bde:	1e03      	subs	r3, r0, #0
    1be0:	d111      	bne.n	1c06 <data_handler+0xaa6>
	{
		reset_all_lights();
    1be2:	4b47      	ldr	r3, [pc, #284]	; (1d00 <data_handler+0xba0>)
    1be4:	4798      	blx	r3
		flashy3 = false;
    1be6:	4b4b      	ldr	r3, [pc, #300]	; (1d14 <data_handler+0xbb4>)
    1be8:	2200      	movs	r2, #0
    1bea:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1bec:	68fb      	ldr	r3, [r7, #12]
    1bee:	0018      	movs	r0, r3
    1bf0:	4b3b      	ldr	r3, [pc, #236]	; (1ce0 <data_handler+0xb80>)
    1bf2:	4798      	blx	r3
		ble_uart_write(" - ");
    1bf4:	4b3b      	ldr	r3, [pc, #236]	; (1ce4 <data_handler+0xb84>)
    1bf6:	0018      	movs	r0, r3
    1bf8:	4b39      	ldr	r3, [pc, #228]	; (1ce0 <data_handler+0xb80>)
    1bfa:	4798      	blx	r3
		ble_uart_write("ACK");
    1bfc:	4b3a      	ldr	r3, [pc, #232]	; (1ce8 <data_handler+0xb88>)
    1bfe:	0018      	movs	r0, r3
    1c00:	4b37      	ldr	r3, [pc, #220]	; (1ce0 <data_handler+0xb80>)
    1c02:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1c04:	e229      	b.n	205a <STACK_SIZE+0x5a>
		flashy3 = false;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASHYFADE_ON,8) == 0)
    1c06:	4945      	ldr	r1, [pc, #276]	; (1d1c <data_handler+0xbbc>)
    1c08:	68fb      	ldr	r3, [r7, #12]
    1c0a:	2208      	movs	r2, #8
    1c0c:	0018      	movs	r0, r3
    1c0e:	4b2f      	ldr	r3, [pc, #188]	; (1ccc <data_handler+0xb6c>)
    1c10:	4798      	blx	r3
    1c12:	1e03      	subs	r3, r0, #0
    1c14:	d10f      	bne.n	1c36 <data_handler+0xad6>
	{
		flashyfade = true;
    1c16:	4b42      	ldr	r3, [pc, #264]	; (1d20 <data_handler+0xbc0>)
    1c18:	2201      	movs	r2, #1
    1c1a:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1c1c:	68fb      	ldr	r3, [r7, #12]
    1c1e:	0018      	movs	r0, r3
    1c20:	4b2f      	ldr	r3, [pc, #188]	; (1ce0 <data_handler+0xb80>)
    1c22:	4798      	blx	r3
		ble_uart_write(" - ");
    1c24:	4b2f      	ldr	r3, [pc, #188]	; (1ce4 <data_handler+0xb84>)
    1c26:	0018      	movs	r0, r3
    1c28:	4b2d      	ldr	r3, [pc, #180]	; (1ce0 <data_handler+0xb80>)
    1c2a:	4798      	blx	r3
		ble_uart_write("ACK");
    1c2c:	4b2e      	ldr	r3, [pc, #184]	; (1ce8 <data_handler+0xb88>)
    1c2e:	0018      	movs	r0, r3
    1c30:	4b2b      	ldr	r3, [pc, #172]	; (1ce0 <data_handler+0xb80>)
    1c32:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1c34:	e211      	b.n	205a <STACK_SIZE+0x5a>
		flashyfade = true;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASHYFADE_OFF,8) == 0)
    1c36:	493b      	ldr	r1, [pc, #236]	; (1d24 <data_handler+0xbc4>)
    1c38:	68fb      	ldr	r3, [r7, #12]
    1c3a:	2208      	movs	r2, #8
    1c3c:	0018      	movs	r0, r3
    1c3e:	4b23      	ldr	r3, [pc, #140]	; (1ccc <data_handler+0xb6c>)
    1c40:	4798      	blx	r3
    1c42:	1e03      	subs	r3, r0, #0
    1c44:	d111      	bne.n	1c6a <data_handler+0xb0a>
	{
		reset_all_lights();
    1c46:	4b2e      	ldr	r3, [pc, #184]	; (1d00 <data_handler+0xba0>)
    1c48:	4798      	blx	r3
		flashyfade = false;
    1c4a:	4b35      	ldr	r3, [pc, #212]	; (1d20 <data_handler+0xbc0>)
    1c4c:	2200      	movs	r2, #0
    1c4e:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1c50:	68fb      	ldr	r3, [r7, #12]
    1c52:	0018      	movs	r0, r3
    1c54:	4b22      	ldr	r3, [pc, #136]	; (1ce0 <data_handler+0xb80>)
    1c56:	4798      	blx	r3
		ble_uart_write(" - ");
    1c58:	4b22      	ldr	r3, [pc, #136]	; (1ce4 <data_handler+0xb84>)
    1c5a:	0018      	movs	r0, r3
    1c5c:	4b20      	ldr	r3, [pc, #128]	; (1ce0 <data_handler+0xb80>)
    1c5e:	4798      	blx	r3
		ble_uart_write("ACK");
    1c60:	4b21      	ldr	r3, [pc, #132]	; (1ce8 <data_handler+0xb88>)
    1c62:	0018      	movs	r0, r3
    1c64:	4b1e      	ldr	r3, [pc, #120]	; (1ce0 <data_handler+0xb80>)
    1c66:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1c68:	e1f7      	b.n	205a <STACK_SIZE+0x5a>
		flashyfade = false;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if (strncmp(buffer,MASTER_RESET,10) == 0)
    1c6a:	492f      	ldr	r1, [pc, #188]	; (1d28 <data_handler+0xbc8>)
    1c6c:	68fb      	ldr	r3, [r7, #12]
    1c6e:	220a      	movs	r2, #10
    1c70:	0018      	movs	r0, r3
    1c72:	4b16      	ldr	r3, [pc, #88]	; (1ccc <data_handler+0xb6c>)
    1c74:	4798      	blx	r3
    1c76:	1e03      	subs	r3, r0, #0
    1c78:	d168      	bne.n	1d4c <data_handler+0xbec>
	{
		ble_uart_write("RESET ACK\n");
    1c7a:	4b2c      	ldr	r3, [pc, #176]	; (1d2c <data_handler+0xbcc>)
    1c7c:	0018      	movs	r0, r3
    1c7e:	4b18      	ldr	r3, [pc, #96]	; (1ce0 <data_handler+0xb80>)
    1c80:	4798      	blx	r3
		delay_ms(250);
    1c82:	2000      	movs	r0, #0
    1c84:	4b2a      	ldr	r3, [pc, #168]	; (1d30 <data_handler+0xbd0>)
    1c86:	4798      	blx	r3
    1c88:	0003      	movs	r3, r0
    1c8a:	603b      	str	r3, [r7, #0]
    1c8c:	2300      	movs	r3, #0
    1c8e:	607b      	str	r3, [r7, #4]
    1c90:	4c28      	ldr	r4, [pc, #160]	; (1d34 <data_handler+0xbd4>)
    1c92:	22fa      	movs	r2, #250	; 0xfa
    1c94:	2300      	movs	r3, #0
    1c96:	6838      	ldr	r0, [r7, #0]
    1c98:	6879      	ldr	r1, [r7, #4]
    1c9a:	47a0      	blx	r4
    1c9c:	0003      	movs	r3, r0
    1c9e:	000c      	movs	r4, r1
    1ca0:	0019      	movs	r1, r3
    1ca2:	0022      	movs	r2, r4
    1ca4:	4b24      	ldr	r3, [pc, #144]	; (1d38 <data_handler+0xbd8>)
    1ca6:	2400      	movs	r4, #0
    1ca8:	18c9      	adds	r1, r1, r3
    1caa:	4162      	adcs	r2, r4
    1cac:	0008      	movs	r0, r1
    1cae:	0011      	movs	r1, r2
    1cb0:	4c22      	ldr	r4, [pc, #136]	; (1d3c <data_handler+0xbdc>)
    1cb2:	4a23      	ldr	r2, [pc, #140]	; (1d40 <data_handler+0xbe0>)
    1cb4:	2300      	movs	r3, #0
    1cb6:	47a0      	blx	r4
    1cb8:	0003      	movs	r3, r0
    1cba:	000c      	movs	r4, r1
    1cbc:	0018      	movs	r0, r3
    1cbe:	4b21      	ldr	r3, [pc, #132]	; (1d44 <data_handler+0xbe4>)
    1cc0:	4798      	blx	r3
		wdt_init();
    1cc2:	4b21      	ldr	r3, [pc, #132]	; (1d48 <data_handler+0xbe8>)
    1cc4:	4798      	blx	r3
		while (1)
		{
			//
		}
    1cc6:	e7fe      	b.n	1cc6 <data_handler+0xb66>
    1cc8:	00006ef8 	.word	0x00006ef8
    1ccc:	00005d63 	.word	0x00005d63
    1cd0:	00001145 	.word	0x00001145
    1cd4:	00002cc9 	.word	0x00002cc9
    1cd8:	000032b9 	.word	0x000032b9
    1cdc:	00001129 	.word	0x00001129
    1ce0:	0000102d 	.word	0x0000102d
    1ce4:	00006e10 	.word	0x00006e10
    1ce8:	00006e14 	.word	0x00006e14
    1cec:	00006f00 	.word	0x00006f00
    1cf0:	00006f08 	.word	0x00006f08
    1cf4:	00006f10 	.word	0x00006f10
    1cf8:	2000048c 	.word	0x2000048c
    1cfc:	00006f18 	.word	0x00006f18
    1d00:	00002a51 	.word	0x00002a51
    1d04:	00006f20 	.word	0x00006f20
    1d08:	200008a3 	.word	0x200008a3
    1d0c:	00006f28 	.word	0x00006f28
    1d10:	00006f30 	.word	0x00006f30
    1d14:	200008c1 	.word	0x200008c1
    1d18:	00006f38 	.word	0x00006f38
    1d1c:	00006f40 	.word	0x00006f40
    1d20:	200008bf 	.word	0x200008bf
    1d24:	00006f4c 	.word	0x00006f4c
    1d28:	00006f58 	.word	0x00006f58
    1d2c:	00006f64 	.word	0x00006f64
    1d30:	00004b41 	.word	0x00004b41
    1d34:	00005895 	.word	0x00005895
    1d38:	00001b57 	.word	0x00001b57
    1d3c:	00005855 	.word	0x00005855
    1d40:	00001b58 	.word	0x00001b58
    1d44:	20000001 	.word	0x20000001
    1d48:	00000149 	.word	0x00000149
	}
	else if (strncmp(buffer,MINOR_RESET,sizeof(MINOR_RESET)-1) == 0)
    1d4c:	49c5      	ldr	r1, [pc, #788]	; (2064 <STACK_SIZE+0x64>)
    1d4e:	68fb      	ldr	r3, [r7, #12]
    1d50:	2209      	movs	r2, #9
    1d52:	0018      	movs	r0, r3
    1d54:	4bc4      	ldr	r3, [pc, #784]	; (2068 <STACK_SIZE+0x68>)
    1d56:	4798      	blx	r3
    1d58:	1e03      	subs	r3, r0, #0
    1d5a:	d12f      	bne.n	1dbc <data_handler+0xc5c>
	{
		ble_uart_write("MINOR RESET ACK\n");
    1d5c:	4bc3      	ldr	r3, [pc, #780]	; (206c <STACK_SIZE+0x6c>)
    1d5e:	0018      	movs	r0, r3
    1d60:	4bc3      	ldr	r3, [pc, #780]	; (2070 <STACK_SIZE+0x70>)
    1d62:	4798      	blx	r3
		delay_ms(250);
    1d64:	2000      	movs	r0, #0
    1d66:	4bc3      	ldr	r3, [pc, #780]	; (2074 <STACK_SIZE+0x74>)
    1d68:	4798      	blx	r3
    1d6a:	0003      	movs	r3, r0
    1d6c:	001d      	movs	r5, r3
    1d6e:	2300      	movs	r3, #0
    1d70:	001e      	movs	r6, r3
    1d72:	4cc1      	ldr	r4, [pc, #772]	; (2078 <STACK_SIZE+0x78>)
    1d74:	22fa      	movs	r2, #250	; 0xfa
    1d76:	2300      	movs	r3, #0
    1d78:	0028      	movs	r0, r5
    1d7a:	0031      	movs	r1, r6
    1d7c:	47a0      	blx	r4
    1d7e:	0003      	movs	r3, r0
    1d80:	000c      	movs	r4, r1
    1d82:	0019      	movs	r1, r3
    1d84:	0022      	movs	r2, r4
    1d86:	4bbd      	ldr	r3, [pc, #756]	; (207c <STACK_SIZE+0x7c>)
    1d88:	2400      	movs	r4, #0
    1d8a:	18c9      	adds	r1, r1, r3
    1d8c:	4162      	adcs	r2, r4
    1d8e:	0008      	movs	r0, r1
    1d90:	0011      	movs	r1, r2
    1d92:	4cbb      	ldr	r4, [pc, #748]	; (2080 <STACK_SIZE+0x80>)
    1d94:	4abb      	ldr	r2, [pc, #748]	; (2084 <STACK_SIZE+0x84>)
    1d96:	2300      	movs	r3, #0
    1d98:	47a0      	blx	r4
    1d9a:	0003      	movs	r3, r0
    1d9c:	000c      	movs	r4, r1
    1d9e:	0018      	movs	r0, r3
    1da0:	4bb9      	ldr	r3, [pc, #740]	; (2088 <STACK_SIZE+0x88>)
    1da2:	4798      	blx	r3
		sounds_reset();
    1da4:	4bb9      	ldr	r3, [pc, #740]	; (208c <STACK_SIZE+0x8c>)
    1da6:	4798      	blx	r3
		init_all_ports();
    1da8:	4bb9      	ldr	r3, [pc, #740]	; (2090 <STACK_SIZE+0x90>)
    1daa:	4798      	blx	r3
		party = false;
    1dac:	4bb9      	ldr	r3, [pc, #740]	; (2094 <STACK_SIZE+0x94>)
    1dae:	2200      	movs	r2, #0
    1db0:	701a      	strb	r2, [r3, #0]
		ble_uart_write("MINOR RESET DONE\n");
    1db2:	4bb9      	ldr	r3, [pc, #740]	; (2098 <STACK_SIZE+0x98>)
    1db4:	0018      	movs	r0, r3
    1db6:	4bae      	ldr	r3, [pc, #696]	; (2070 <STACK_SIZE+0x70>)
    1db8:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1dba:	e14e      	b.n	205a <STACK_SIZE+0x5a>
		sounds_reset();
		init_all_ports();
		party = false;
		ble_uart_write("MINOR RESET DONE\n");
	}
	else if (strncmp(buffer,PARTY_TRESH_0,sizeof(PARTY_TRESH_0)-1)  == 0)
    1dbc:	49b7      	ldr	r1, [pc, #732]	; (209c <STACK_SIZE+0x9c>)
    1dbe:	68fb      	ldr	r3, [r7, #12]
    1dc0:	2208      	movs	r2, #8
    1dc2:	0018      	movs	r0, r3
    1dc4:	4ba8      	ldr	r3, [pc, #672]	; (2068 <STACK_SIZE+0x68>)
    1dc6:	4798      	blx	r3
    1dc8:	1e03      	subs	r3, r0, #0
    1dca:	d10f      	bne.n	1dec <data_handler+0xc8c>
	{
		int temp = sizeof(PARTY_TRESH_0);//party_treshold;
    1dcc:	2309      	movs	r3, #9
    1dce:	657b      	str	r3, [r7, #84]	; 0x54
		sscanf(buffer,"PRTTRSH0 %d",&temp);
    1dd0:	234c      	movs	r3, #76	; 0x4c
    1dd2:	2208      	movs	r2, #8
    1dd4:	18ba      	adds	r2, r7, r2
    1dd6:	18d2      	adds	r2, r2, r3
    1dd8:	49b1      	ldr	r1, [pc, #708]	; (20a0 <STACK_SIZE+0xa0>)
    1dda:	68fb      	ldr	r3, [r7, #12]
    1ddc:	0018      	movs	r0, r3
    1dde:	4bb1      	ldr	r3, [pc, #708]	; (20a4 <STACK_SIZE+0xa4>)
    1de0:	4798      	blx	r3
		party_thresholds[0] = (uint16_t)temp;
    1de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1de4:	b29a      	uxth	r2, r3
    1de6:	4bb0      	ldr	r3, [pc, #704]	; (20a8 <STACK_SIZE+0xa8>)
    1de8:	801a      	strh	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1dea:	e136      	b.n	205a <STACK_SIZE+0x5a>
	{
		int temp = sizeof(PARTY_TRESH_0);//party_treshold;
		sscanf(buffer,"PRTTRSH0 %d",&temp);
		party_thresholds[0] = (uint16_t)temp;
	}
	else if (strncmp(buffer,PARTY_TRESH_1,sizeof(PARTY_TRESH_1)-1) == 0)
    1dec:	49af      	ldr	r1, [pc, #700]	; (20ac <STACK_SIZE+0xac>)
    1dee:	68fb      	ldr	r3, [r7, #12]
    1df0:	2208      	movs	r2, #8
    1df2:	0018      	movs	r0, r3
    1df4:	4b9c      	ldr	r3, [pc, #624]	; (2068 <STACK_SIZE+0x68>)
    1df6:	4798      	blx	r3
    1df8:	1e03      	subs	r3, r0, #0
    1dfa:	d10f      	bne.n	1e1c <data_handler+0xcbc>
	{
		int temp = party_treshold;
    1dfc:	4bac      	ldr	r3, [pc, #688]	; (20b0 <STACK_SIZE+0xb0>)
    1dfe:	653b      	str	r3, [r7, #80]	; 0x50
		sscanf(buffer,"PRTTRSH1 %d",&temp);
    1e00:	2348      	movs	r3, #72	; 0x48
    1e02:	2208      	movs	r2, #8
    1e04:	18ba      	adds	r2, r7, r2
    1e06:	18d2      	adds	r2, r2, r3
    1e08:	49aa      	ldr	r1, [pc, #680]	; (20b4 <STACK_SIZE+0xb4>)
    1e0a:	68fb      	ldr	r3, [r7, #12]
    1e0c:	0018      	movs	r0, r3
    1e0e:	4ba5      	ldr	r3, [pc, #660]	; (20a4 <STACK_SIZE+0xa4>)
    1e10:	4798      	blx	r3
		party_thresholds[1] = (uint16_t)temp;
    1e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1e14:	b29a      	uxth	r2, r3
    1e16:	4ba4      	ldr	r3, [pc, #656]	; (20a8 <STACK_SIZE+0xa8>)
    1e18:	805a      	strh	r2, [r3, #2]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1e1a:	e11e      	b.n	205a <STACK_SIZE+0x5a>
	{
		int temp = party_treshold;
		sscanf(buffer,"PRTTRSH1 %d",&temp);
		party_thresholds[1] = (uint16_t)temp;
	}
	else if (strncmp(buffer,PARTY_TRESH_2,sizeof(PARTY_TRESH_2)-1) == 0)
    1e1c:	49a6      	ldr	r1, [pc, #664]	; (20b8 <STACK_SIZE+0xb8>)
    1e1e:	68fb      	ldr	r3, [r7, #12]
    1e20:	2208      	movs	r2, #8
    1e22:	0018      	movs	r0, r3
    1e24:	4b90      	ldr	r3, [pc, #576]	; (2068 <STACK_SIZE+0x68>)
    1e26:	4798      	blx	r3
    1e28:	1e03      	subs	r3, r0, #0
    1e2a:	d10f      	bne.n	1e4c <data_handler+0xcec>
	{
		int temp = party_treshold;
    1e2c:	4ba0      	ldr	r3, [pc, #640]	; (20b0 <STACK_SIZE+0xb0>)
    1e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
		sscanf(buffer,"PRTTRSH2 %d",&temp);
    1e30:	2344      	movs	r3, #68	; 0x44
    1e32:	2208      	movs	r2, #8
    1e34:	18ba      	adds	r2, r7, r2
    1e36:	18d2      	adds	r2, r2, r3
    1e38:	49a0      	ldr	r1, [pc, #640]	; (20bc <STACK_SIZE+0xbc>)
    1e3a:	68fb      	ldr	r3, [r7, #12]
    1e3c:	0018      	movs	r0, r3
    1e3e:	4b99      	ldr	r3, [pc, #612]	; (20a4 <STACK_SIZE+0xa4>)
    1e40:	4798      	blx	r3
		party_thresholds[2] = (uint16_t)temp;
    1e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1e44:	b29a      	uxth	r2, r3
    1e46:	4b98      	ldr	r3, [pc, #608]	; (20a8 <STACK_SIZE+0xa8>)
    1e48:	809a      	strh	r2, [r3, #4]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1e4a:	e106      	b.n	205a <STACK_SIZE+0x5a>
	{
		int temp = party_treshold;
		sscanf(buffer,"PRTTRSH2 %d",&temp);
		party_thresholds[2] = (uint16_t)temp;
	}
	else if (strncmp(buffer,PARTY_TRESH_3,sizeof(PARTY_TRESH_3)-1) == 0)
    1e4c:	499c      	ldr	r1, [pc, #624]	; (20c0 <STACK_SIZE+0xc0>)
    1e4e:	68fb      	ldr	r3, [r7, #12]
    1e50:	2208      	movs	r2, #8
    1e52:	0018      	movs	r0, r3
    1e54:	4b84      	ldr	r3, [pc, #528]	; (2068 <STACK_SIZE+0x68>)
    1e56:	4798      	blx	r3
    1e58:	1e03      	subs	r3, r0, #0
    1e5a:	d10f      	bne.n	1e7c <data_handler+0xd1c>
	{
		int temp = party_treshold;
    1e5c:	4b94      	ldr	r3, [pc, #592]	; (20b0 <STACK_SIZE+0xb0>)
    1e5e:	64bb      	str	r3, [r7, #72]	; 0x48
		sscanf(buffer,"PRTTRSH3 %d",&temp);
    1e60:	2340      	movs	r3, #64	; 0x40
    1e62:	2208      	movs	r2, #8
    1e64:	18ba      	adds	r2, r7, r2
    1e66:	18d2      	adds	r2, r2, r3
    1e68:	4996      	ldr	r1, [pc, #600]	; (20c4 <STACK_SIZE+0xc4>)
    1e6a:	68fb      	ldr	r3, [r7, #12]
    1e6c:	0018      	movs	r0, r3
    1e6e:	4b8d      	ldr	r3, [pc, #564]	; (20a4 <STACK_SIZE+0xa4>)
    1e70:	4798      	blx	r3
		party_thresholds[3] = (uint16_t)temp;
    1e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1e74:	b29a      	uxth	r2, r3
    1e76:	4b8c      	ldr	r3, [pc, #560]	; (20a8 <STACK_SIZE+0xa8>)
    1e78:	80da      	strh	r2, [r3, #6]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1e7a:	e0ee      	b.n	205a <STACK_SIZE+0x5a>
	{
		int temp = party_treshold;
		sscanf(buffer,"PRTTRSH3 %d",&temp);
		party_thresholds[3] = (uint16_t)temp;
	}
	else if (strncmp(buffer,PARTY_TRESH_4,sizeof(PARTY_TRESH_4)-1) == 0)
    1e7c:	4992      	ldr	r1, [pc, #584]	; (20c8 <STACK_SIZE+0xc8>)
    1e7e:	68fb      	ldr	r3, [r7, #12]
    1e80:	2208      	movs	r2, #8
    1e82:	0018      	movs	r0, r3
    1e84:	4b78      	ldr	r3, [pc, #480]	; (2068 <STACK_SIZE+0x68>)
    1e86:	4798      	blx	r3
    1e88:	1e03      	subs	r3, r0, #0
    1e8a:	d10f      	bne.n	1eac <data_handler+0xd4c>
	{
		int temp = party_treshold;
    1e8c:	4b88      	ldr	r3, [pc, #544]	; (20b0 <STACK_SIZE+0xb0>)
    1e8e:	647b      	str	r3, [r7, #68]	; 0x44
		sscanf(buffer,"PRTTRSH4 %d",&temp);
    1e90:	233c      	movs	r3, #60	; 0x3c
    1e92:	2208      	movs	r2, #8
    1e94:	18ba      	adds	r2, r7, r2
    1e96:	18d2      	adds	r2, r2, r3
    1e98:	498c      	ldr	r1, [pc, #560]	; (20cc <STACK_SIZE+0xcc>)
    1e9a:	68fb      	ldr	r3, [r7, #12]
    1e9c:	0018      	movs	r0, r3
    1e9e:	4b81      	ldr	r3, [pc, #516]	; (20a4 <STACK_SIZE+0xa4>)
    1ea0:	4798      	blx	r3
		party_thresholds[4] = (uint16_t)temp;
    1ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1ea4:	b29a      	uxth	r2, r3
    1ea6:	4b80      	ldr	r3, [pc, #512]	; (20a8 <STACK_SIZE+0xa8>)
    1ea8:	811a      	strh	r2, [r3, #8]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1eaa:	e0d6      	b.n	205a <STACK_SIZE+0x5a>
	{
		int temp = party_treshold;
		sscanf(buffer,"PRTTRSH4 %d",&temp);
		party_thresholds[4] = (uint16_t)temp;
	}
	else if (strncmp(buffer,PARTY_TRESH_5,sizeof(PARTY_TRESH_5)-1) == 0)
    1eac:	4988      	ldr	r1, [pc, #544]	; (20d0 <STACK_SIZE+0xd0>)
    1eae:	68fb      	ldr	r3, [r7, #12]
    1eb0:	2208      	movs	r2, #8
    1eb2:	0018      	movs	r0, r3
    1eb4:	4b6c      	ldr	r3, [pc, #432]	; (2068 <STACK_SIZE+0x68>)
    1eb6:	4798      	blx	r3
    1eb8:	1e03      	subs	r3, r0, #0
    1eba:	d10f      	bne.n	1edc <data_handler+0xd7c>
	{
		int temp = party_treshold;
    1ebc:	4b7c      	ldr	r3, [pc, #496]	; (20b0 <STACK_SIZE+0xb0>)
    1ebe:	643b      	str	r3, [r7, #64]	; 0x40
		sscanf(buffer,"PRTTRSH5 %d",&temp);
    1ec0:	2338      	movs	r3, #56	; 0x38
    1ec2:	2208      	movs	r2, #8
    1ec4:	18ba      	adds	r2, r7, r2
    1ec6:	18d2      	adds	r2, r2, r3
    1ec8:	4982      	ldr	r1, [pc, #520]	; (20d4 <STACK_SIZE+0xd4>)
    1eca:	68fb      	ldr	r3, [r7, #12]
    1ecc:	0018      	movs	r0, r3
    1ece:	4b75      	ldr	r3, [pc, #468]	; (20a4 <STACK_SIZE+0xa4>)
    1ed0:	4798      	blx	r3
		party_thresholds[5] = (uint16_t)temp;
    1ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1ed4:	b29a      	uxth	r2, r3
    1ed6:	4b74      	ldr	r3, [pc, #464]	; (20a8 <STACK_SIZE+0xa8>)
    1ed8:	815a      	strh	r2, [r3, #10]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1eda:	e0be      	b.n	205a <STACK_SIZE+0x5a>
	{
		int temp = party_treshold;
		sscanf(buffer,"PRTTRSH5 %d",&temp);
		party_thresholds[5] = (uint16_t)temp;
	}
	else if (strncmp(buffer,PARTY_TRESH_6,sizeof(PARTY_TRESH_6)-1) == 0)
    1edc:	497e      	ldr	r1, [pc, #504]	; (20d8 <STACK_SIZE+0xd8>)
    1ede:	68fb      	ldr	r3, [r7, #12]
    1ee0:	2208      	movs	r2, #8
    1ee2:	0018      	movs	r0, r3
    1ee4:	4b60      	ldr	r3, [pc, #384]	; (2068 <STACK_SIZE+0x68>)
    1ee6:	4798      	blx	r3
    1ee8:	1e03      	subs	r3, r0, #0
    1eea:	d10f      	bne.n	1f0c <data_handler+0xdac>
	{
		int temp = party_treshold;
    1eec:	4b70      	ldr	r3, [pc, #448]	; (20b0 <STACK_SIZE+0xb0>)
    1eee:	63fb      	str	r3, [r7, #60]	; 0x3c
		sscanf(buffer,"PRTTRSH6 %d",&temp);
    1ef0:	2334      	movs	r3, #52	; 0x34
    1ef2:	2208      	movs	r2, #8
    1ef4:	18ba      	adds	r2, r7, r2
    1ef6:	18d2      	adds	r2, r2, r3
    1ef8:	4978      	ldr	r1, [pc, #480]	; (20dc <STACK_SIZE+0xdc>)
    1efa:	68fb      	ldr	r3, [r7, #12]
    1efc:	0018      	movs	r0, r3
    1efe:	4b69      	ldr	r3, [pc, #420]	; (20a4 <STACK_SIZE+0xa4>)
    1f00:	4798      	blx	r3
		party_thresholds[6] = (uint16_t)temp;
    1f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f04:	b29a      	uxth	r2, r3
    1f06:	4b68      	ldr	r3, [pc, #416]	; (20a8 <STACK_SIZE+0xa8>)
    1f08:	819a      	strh	r2, [r3, #12]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1f0a:	e0a6      	b.n	205a <STACK_SIZE+0x5a>
	{
		int temp = party_treshold;
		sscanf(buffer,"PRTTRSH6 %d",&temp);
		party_thresholds[6] = (uint16_t)temp;
	}
	else if (strncmp(buffer,PARTY_TRESH_7,sizeof(PARTY_TRESH_7)-1) == 0)
    1f0c:	4974      	ldr	r1, [pc, #464]	; (20e0 <STACK_SIZE+0xe0>)
    1f0e:	68fb      	ldr	r3, [r7, #12]
    1f10:	2208      	movs	r2, #8
    1f12:	0018      	movs	r0, r3
    1f14:	4b54      	ldr	r3, [pc, #336]	; (2068 <STACK_SIZE+0x68>)
    1f16:	4798      	blx	r3
    1f18:	1e03      	subs	r3, r0, #0
    1f1a:	d10f      	bne.n	1f3c <data_handler+0xddc>
	{
		int temp = party_treshold;
    1f1c:	4b64      	ldr	r3, [pc, #400]	; (20b0 <STACK_SIZE+0xb0>)
    1f1e:	63bb      	str	r3, [r7, #56]	; 0x38
		sscanf(buffer,"PRTTRSH7 %d",&temp);
    1f20:	2330      	movs	r3, #48	; 0x30
    1f22:	2208      	movs	r2, #8
    1f24:	18ba      	adds	r2, r7, r2
    1f26:	18d2      	adds	r2, r2, r3
    1f28:	496e      	ldr	r1, [pc, #440]	; (20e4 <STACK_SIZE+0xe4>)
    1f2a:	68fb      	ldr	r3, [r7, #12]
    1f2c:	0018      	movs	r0, r3
    1f2e:	4b5d      	ldr	r3, [pc, #372]	; (20a4 <STACK_SIZE+0xa4>)
    1f30:	4798      	blx	r3
		party_thresholds[7] = (uint16_t)temp;
    1f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1f34:	b29a      	uxth	r2, r3
    1f36:	4b5c      	ldr	r3, [pc, #368]	; (20a8 <STACK_SIZE+0xa8>)
    1f38:	81da      	strh	r2, [r3, #14]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1f3a:	e08e      	b.n	205a <STACK_SIZE+0x5a>
	{
		int temp = party_treshold;
		sscanf(buffer,"PRTTRSH7 %d",&temp);
		party_thresholds[7] = (uint16_t)temp;
	}
	else if (strncmp(buffer,CUT_OUT_VALVE_ON,sizeof(CUT_OUT_VALVE_ON)-1) == 0)
    1f3c:	496a      	ldr	r1, [pc, #424]	; (20e8 <STACK_SIZE+0xe8>)
    1f3e:	68fb      	ldr	r3, [r7, #12]
    1f40:	2205      	movs	r2, #5
    1f42:	0018      	movs	r0, r3
    1f44:	4b48      	ldr	r3, [pc, #288]	; (2068 <STACK_SIZE+0x68>)
    1f46:	4798      	blx	r3
    1f48:	1e03      	subs	r3, r0, #0
    1f4a:	d112      	bne.n	1f72 <data_handler+0xe12>
	{
		valve_open = true;
    1f4c:	4b67      	ldr	r3, [pc, #412]	; (20ec <STACK_SIZE+0xec>)
    1f4e:	2201      	movs	r2, #1
    1f50:	701a      	strb	r2, [r3, #0]
		valve_close = false;
    1f52:	4b67      	ldr	r3, [pc, #412]	; (20f0 <STACK_SIZE+0xf0>)
    1f54:	2200      	movs	r2, #0
    1f56:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1f58:	68fb      	ldr	r3, [r7, #12]
    1f5a:	0018      	movs	r0, r3
    1f5c:	4b44      	ldr	r3, [pc, #272]	; (2070 <STACK_SIZE+0x70>)
    1f5e:	4798      	blx	r3
		ble_uart_write(" - ");
    1f60:	4b64      	ldr	r3, [pc, #400]	; (20f4 <STACK_SIZE+0xf4>)
    1f62:	0018      	movs	r0, r3
    1f64:	4b42      	ldr	r3, [pc, #264]	; (2070 <STACK_SIZE+0x70>)
    1f66:	4798      	blx	r3
		ble_uart_write("ACK");
    1f68:	4b63      	ldr	r3, [pc, #396]	; (20f8 <STACK_SIZE+0xf8>)
    1f6a:	0018      	movs	r0, r3
    1f6c:	4b40      	ldr	r3, [pc, #256]	; (2070 <STACK_SIZE+0x70>)
    1f6e:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1f70:	e073      	b.n	205a <STACK_SIZE+0x5a>
		valve_close = false;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if (strncmp(buffer,CUT_OUT_VALVE_OFF,sizeof(CUT_OUT_VALVE_OFF)-1) == 0)
    1f72:	4962      	ldr	r1, [pc, #392]	; (20fc <STACK_SIZE+0xfc>)
    1f74:	68fb      	ldr	r3, [r7, #12]
    1f76:	2205      	movs	r2, #5
    1f78:	0018      	movs	r0, r3
    1f7a:	4b3b      	ldr	r3, [pc, #236]	; (2068 <STACK_SIZE+0x68>)
    1f7c:	4798      	blx	r3
    1f7e:	1e03      	subs	r3, r0, #0
    1f80:	d112      	bne.n	1fa8 <data_handler+0xe48>
	{
		valve_open = false;
    1f82:	4b5a      	ldr	r3, [pc, #360]	; (20ec <STACK_SIZE+0xec>)
    1f84:	2200      	movs	r2, #0
    1f86:	701a      	strb	r2, [r3, #0]
		valve_close = true;
    1f88:	4b59      	ldr	r3, [pc, #356]	; (20f0 <STACK_SIZE+0xf0>)
    1f8a:	2201      	movs	r2, #1
    1f8c:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1f8e:	68fb      	ldr	r3, [r7, #12]
    1f90:	0018      	movs	r0, r3
    1f92:	4b37      	ldr	r3, [pc, #220]	; (2070 <STACK_SIZE+0x70>)
    1f94:	4798      	blx	r3
		ble_uart_write(" - ");
    1f96:	4b57      	ldr	r3, [pc, #348]	; (20f4 <STACK_SIZE+0xf4>)
    1f98:	0018      	movs	r0, r3
    1f9a:	4b35      	ldr	r3, [pc, #212]	; (2070 <STACK_SIZE+0x70>)
    1f9c:	4798      	blx	r3
		ble_uart_write("ACK");
    1f9e:	4b56      	ldr	r3, [pc, #344]	; (20f8 <STACK_SIZE+0xf8>)
    1fa0:	0018      	movs	r0, r3
    1fa2:	4b33      	ldr	r3, [pc, #204]	; (2070 <STACK_SIZE+0x70>)
    1fa4:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1fa6:	e058      	b.n	205a <STACK_SIZE+0x5a>
		valve_close = true;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,PARTY_REV2_ON,sizeof(PARTY_REV2_ON)-1) == 0)
    1fa8:	4955      	ldr	r1, [pc, #340]	; (2100 <STACK_SIZE+0x100>)
    1faa:	68fb      	ldr	r3, [r7, #12]
    1fac:	2207      	movs	r2, #7
    1fae:	0018      	movs	r0, r3
    1fb0:	4b2d      	ldr	r3, [pc, #180]	; (2068 <STACK_SIZE+0x68>)
    1fb2:	4798      	blx	r3
    1fb4:	1e03      	subs	r3, r0, #0
    1fb6:	d120      	bne.n	1ffa <data_handler+0xe9a>
	{
		uint8_t temp;
		sscanf(buffer,"PRTRV21 %d",&temp);
    1fb8:	232f      	movs	r3, #47	; 0x2f
    1fba:	2208      	movs	r2, #8
    1fbc:	18ba      	adds	r2, r7, r2
    1fbe:	18d2      	adds	r2, r2, r3
    1fc0:	4950      	ldr	r1, [pc, #320]	; (2104 <STACK_SIZE+0x104>)
    1fc2:	68fb      	ldr	r3, [r7, #12]
    1fc4:	0018      	movs	r0, r3
    1fc6:	4b37      	ldr	r3, [pc, #220]	; (20a4 <STACK_SIZE+0xa4>)
    1fc8:	4798      	blx	r3
		party_band_chosen = temp;
    1fca:	232f      	movs	r3, #47	; 0x2f
    1fcc:	2208      	movs	r2, #8
    1fce:	4694      	mov	ip, r2
    1fd0:	44bc      	add	ip, r7
    1fd2:	4463      	add	r3, ip
    1fd4:	781a      	ldrb	r2, [r3, #0]
    1fd6:	4b4c      	ldr	r3, [pc, #304]	; (2108 <STACK_SIZE+0x108>)
    1fd8:	701a      	strb	r2, [r3, #0]
		partyrev2 = true;
    1fda:	4b4c      	ldr	r3, [pc, #304]	; (210c <STACK_SIZE+0x10c>)
    1fdc:	2201      	movs	r2, #1
    1fde:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1fe0:	68fb      	ldr	r3, [r7, #12]
    1fe2:	0018      	movs	r0, r3
    1fe4:	4b22      	ldr	r3, [pc, #136]	; (2070 <STACK_SIZE+0x70>)
    1fe6:	4798      	blx	r3
		ble_uart_write(" - ");
    1fe8:	4b42      	ldr	r3, [pc, #264]	; (20f4 <STACK_SIZE+0xf4>)
    1fea:	0018      	movs	r0, r3
    1fec:	4b20      	ldr	r3, [pc, #128]	; (2070 <STACK_SIZE+0x70>)
    1fee:	4798      	blx	r3
		ble_uart_write("ACK");
    1ff0:	4b41      	ldr	r3, [pc, #260]	; (20f8 <STACK_SIZE+0xf8>)
    1ff2:	0018      	movs	r0, r3
    1ff4:	4b1e      	ldr	r3, [pc, #120]	; (2070 <STACK_SIZE+0x70>)
    1ff6:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1ff8:	e02f      	b.n	205a <STACK_SIZE+0x5a>
		partyrev2 = true;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,PARTY_REV2_OFF,sizeof(PARTY_REV2_OFF)-1) == 0)
    1ffa:	4945      	ldr	r1, [pc, #276]	; (2110 <STACK_SIZE+0x110>)
    1ffc:	68fb      	ldr	r3, [r7, #12]
    1ffe:	2207      	movs	r2, #7
    2000:	0018      	movs	r0, r3
    2002:	4b19      	ldr	r3, [pc, #100]	; (2068 <STACK_SIZE+0x68>)
    2004:	4798      	blx	r3
    2006:	1e03      	subs	r3, r0, #0
    2008:	d10f      	bne.n	202a <STACK_SIZE+0x2a>
	{
		partyrev2 = false;
    200a:	4b40      	ldr	r3, [pc, #256]	; (210c <STACK_SIZE+0x10c>)
    200c:	2200      	movs	r2, #0
    200e:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    2010:	68fb      	ldr	r3, [r7, #12]
    2012:	0018      	movs	r0, r3
    2014:	4b16      	ldr	r3, [pc, #88]	; (2070 <STACK_SIZE+0x70>)
    2016:	4798      	blx	r3
		ble_uart_write(" - ");
    2018:	4b36      	ldr	r3, [pc, #216]	; (20f4 <STACK_SIZE+0xf4>)
    201a:	0018      	movs	r0, r3
    201c:	4b14      	ldr	r3, [pc, #80]	; (2070 <STACK_SIZE+0x70>)
    201e:	4798      	blx	r3
		ble_uart_write("ACK");
    2020:	4b35      	ldr	r3, [pc, #212]	; (20f8 <STACK_SIZE+0xf8>)
    2022:	0018      	movs	r0, r3
    2024:	4b12      	ldr	r3, [pc, #72]	; (2070 <STACK_SIZE+0x70>)
    2026:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    2028:	e017      	b.n	205a <STACK_SIZE+0x5a>
		partyrev2 = false;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,MASTER_TEST,sizeof(MASTER_TEST)-1) == 0)
    202a:	493a      	ldr	r1, [pc, #232]	; (2114 <STACK_SIZE+0x114>)
    202c:	68fb      	ldr	r3, [r7, #12]
    202e:	220a      	movs	r2, #10
    2030:	0018      	movs	r0, r3
    2032:	4b0d      	ldr	r3, [pc, #52]	; (2068 <STACK_SIZE+0x68>)
    2034:	4798      	blx	r3
    2036:	1e03      	subs	r3, r0, #0
    2038:	d10f      	bne.n	205a <STACK_SIZE+0x5a>
	{
		ble_uart_write(buffer);
    203a:	68fb      	ldr	r3, [r7, #12]
    203c:	0018      	movs	r0, r3
    203e:	4b0c      	ldr	r3, [pc, #48]	; (2070 <STACK_SIZE+0x70>)
    2040:	4798      	blx	r3
		ble_uart_write(" - ");
    2042:	4b2c      	ldr	r3, [pc, #176]	; (20f4 <STACK_SIZE+0xf4>)
    2044:	0018      	movs	r0, r3
    2046:	4b0a      	ldr	r3, [pc, #40]	; (2070 <STACK_SIZE+0x70>)
    2048:	4798      	blx	r3
		ble_uart_write("ACK");
    204a:	4b2b      	ldr	r3, [pc, #172]	; (20f8 <STACK_SIZE+0xf8>)
    204c:	0018      	movs	r0, r3
    204e:	4b08      	ldr	r3, [pc, #32]	; (2070 <STACK_SIZE+0x70>)
    2050:	4798      	blx	r3
		execute_order_66 = true;
    2052:	4b31      	ldr	r3, [pc, #196]	; (2118 <STACK_SIZE+0x118>)
    2054:	2201      	movs	r2, #1
    2056:	701a      	strb	r2, [r3, #0]
	}
}
    2058:	e7ff      	b.n	205a <STACK_SIZE+0x5a>
    205a:	46c0      	nop			; (mov r8, r8)
    205c:	46bd      	mov	sp, r7
    205e:	b01b      	add	sp, #108	; 0x6c
    2060:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2062:	46c0      	nop			; (mov r8, r8)
    2064:	00006f70 	.word	0x00006f70
    2068:	00005d63 	.word	0x00005d63
    206c:	00006f7c 	.word	0x00006f7c
    2070:	0000102d 	.word	0x0000102d
    2074:	00004b41 	.word	0x00004b41
    2078:	00005895 	.word	0x00005895
    207c:	00001b57 	.word	0x00001b57
    2080:	00005855 	.word	0x00005855
    2084:	00001b58 	.word	0x00001b58
    2088:	20000001 	.word	0x20000001
    208c:	00003ae5 	.word	0x00003ae5
    2090:	00003099 	.word	0x00003099
    2094:	200008b5 	.word	0x200008b5
    2098:	00006f90 	.word	0x00006f90
    209c:	00006fa4 	.word	0x00006fa4
    20a0:	00006fb0 	.word	0x00006fb0
    20a4:	00005cd5 	.word	0x00005cd5
    20a8:	20000490 	.word	0x20000490
    20ac:	00006fbc 	.word	0x00006fbc
    20b0:	000009c4 	.word	0x000009c4
    20b4:	00006fc8 	.word	0x00006fc8
    20b8:	00006fd4 	.word	0x00006fd4
    20bc:	00006fe0 	.word	0x00006fe0
    20c0:	00006fec 	.word	0x00006fec
    20c4:	00006ff8 	.word	0x00006ff8
    20c8:	00007004 	.word	0x00007004
    20cc:	00007010 	.word	0x00007010
    20d0:	0000701c 	.word	0x0000701c
    20d4:	00007028 	.word	0x00007028
    20d8:	00007034 	.word	0x00007034
    20dc:	00007040 	.word	0x00007040
    20e0:	0000704c 	.word	0x0000704c
    20e4:	00007058 	.word	0x00007058
    20e8:	00007064 	.word	0x00007064
    20ec:	2000048b 	.word	0x2000048b
    20f0:	20000488 	.word	0x20000488
    20f4:	00006e10 	.word	0x00006e10
    20f8:	00006e14 	.word	0x00006e14
    20fc:	0000706c 	.word	0x0000706c
    2100:	00007074 	.word	0x00007074
    2104:	0000707c 	.word	0x0000707c
    2108:	200008c3 	.word	0x200008c3
    210c:	20000489 	.word	0x20000489
    2110:	00007088 	.word	0x00007088
    2114:	00007090 	.word	0x00007090
    2118:	20000948 	.word	0x20000948

0000211c <update_all_ports>:

void update_all_ports()
{
    211c:	b580      	push	{r7, lr}
    211e:	b082      	sub	sp, #8
    2120:	af00      	add	r7, sp, #0
	if (!port_update_ongoing)
    2122:	4b27      	ldr	r3, [pc, #156]	; (21c0 <update_all_ports+0xa4>)
    2124:	781b      	ldrb	r3, [r3, #0]
    2126:	2201      	movs	r2, #1
    2128:	4053      	eors	r3, r2
    212a:	b2db      	uxtb	r3, r3
    212c:	2b00      	cmp	r3, #0
    212e:	d042      	beq.n	21b6 <update_all_ports+0x9a>
	{
		port_update_ongoing = true;
    2130:	4b23      	ldr	r3, [pc, #140]	; (21c0 <update_all_ports+0xa4>)
    2132:	2201      	movs	r2, #1
    2134:	701a      	strb	r2, [r3, #0]
		init_all_ports();
    2136:	4b23      	ldr	r3, [pc, #140]	; (21c4 <update_all_ports+0xa8>)
    2138:	4798      	blx	r3
		for (int i=0;i<8;i++)
    213a:	2300      	movs	r3, #0
    213c:	607b      	str	r3, [r7, #4]
    213e:	e034      	b.n	21aa <update_all_ports+0x8e>
		{
			mcp23017_data.devices[i].outputs.pa7 = 1;
    2140:	4a21      	ldr	r2, [pc, #132]	; (21c8 <update_all_ports+0xac>)
    2142:	687b      	ldr	r3, [r7, #4]
    2144:	2108      	movs	r1, #8
    2146:	011b      	lsls	r3, r3, #4
    2148:	18d3      	adds	r3, r2, r3
    214a:	185b      	adds	r3, r3, r1
    214c:	781a      	ldrb	r2, [r3, #0]
    214e:	2180      	movs	r1, #128	; 0x80
    2150:	4249      	negs	r1, r1
    2152:	430a      	orrs	r2, r1
    2154:	701a      	strb	r2, [r3, #0]
			mcp23017_data.devices[i].outputs.pb7 = 1;
    2156:	4a1c      	ldr	r2, [pc, #112]	; (21c8 <update_all_ports+0xac>)
    2158:	687b      	ldr	r3, [r7, #4]
    215a:	2108      	movs	r1, #8
    215c:	011b      	lsls	r3, r3, #4
    215e:	18d3      	adds	r3, r2, r3
    2160:	185b      	adds	r3, r3, r1
    2162:	785a      	ldrb	r2, [r3, #1]
    2164:	2180      	movs	r1, #128	; 0x80
    2166:	4249      	negs	r1, r1
    2168:	430a      	orrs	r2, r1
    216a:	705a      	strb	r2, [r3, #1]
			mcp23017_data.devices[i].status = mcp23017_set_pins(MCP23017_I2C_ADDR_000+i,mcp23017_data.devices[i].outputs.ports[0],mcp23017_data.devices[i].outputs.ports[1]);
    216c:	687b      	ldr	r3, [r7, #4]
    216e:	b2db      	uxtb	r3, r3
    2170:	3320      	adds	r3, #32
    2172:	b2d8      	uxtb	r0, r3
    2174:	4a14      	ldr	r2, [pc, #80]	; (21c8 <update_all_ports+0xac>)
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	011b      	lsls	r3, r3, #4
    217a:	18d3      	adds	r3, r2, r3
    217c:	3308      	adds	r3, #8
    217e:	7819      	ldrb	r1, [r3, #0]
    2180:	4a11      	ldr	r2, [pc, #68]	; (21c8 <update_all_ports+0xac>)
    2182:	687b      	ldr	r3, [r7, #4]
    2184:	011b      	lsls	r3, r3, #4
    2186:	18d3      	adds	r3, r2, r3
    2188:	3309      	adds	r3, #9
    218a:	781b      	ldrb	r3, [r3, #0]
    218c:	001a      	movs	r2, r3
    218e:	4b0f      	ldr	r3, [pc, #60]	; (21cc <update_all_ports+0xb0>)
    2190:	4798      	blx	r3
    2192:	0003      	movs	r3, r0
    2194:	0019      	movs	r1, r3
    2196:	4a0c      	ldr	r2, [pc, #48]	; (21c8 <update_all_ports+0xac>)
    2198:	687b      	ldr	r3, [r7, #4]
    219a:	011b      	lsls	r3, r3, #4
    219c:	18d3      	adds	r3, r2, r3
    219e:	3303      	adds	r3, #3
    21a0:	1c0a      	adds	r2, r1, #0
    21a2:	701a      	strb	r2, [r3, #0]
{
	if (!port_update_ongoing)
	{
		port_update_ongoing = true;
		init_all_ports();
		for (int i=0;i<8;i++)
    21a4:	687b      	ldr	r3, [r7, #4]
    21a6:	3301      	adds	r3, #1
    21a8:	607b      	str	r3, [r7, #4]
    21aa:	687b      	ldr	r3, [r7, #4]
    21ac:	2b07      	cmp	r3, #7
    21ae:	ddc7      	ble.n	2140 <update_all_ports+0x24>
		{
			mcp23017_data.devices[i].outputs.pa7 = 1;
			mcp23017_data.devices[i].outputs.pb7 = 1;
			mcp23017_data.devices[i].status = mcp23017_set_pins(MCP23017_I2C_ADDR_000+i,mcp23017_data.devices[i].outputs.ports[0],mcp23017_data.devices[i].outputs.ports[1]);
		}
		port_update_ongoing = false;
    21b0:	4b03      	ldr	r3, [pc, #12]	; (21c0 <update_all_ports+0xa4>)
    21b2:	2200      	movs	r2, #0
    21b4:	701a      	strb	r2, [r3, #0]
	}
}
    21b6:	46c0      	nop			; (mov r8, r8)
    21b8:	46bd      	mov	sp, r7
    21ba:	b002      	add	sp, #8
    21bc:	bd80      	pop	{r7, pc}
    21be:	46c0      	nop			; (mov r8, r8)
    21c0:	200008bb 	.word	0x200008bb
    21c4:	00003099 	.word	0x00003099
    21c8:	200000e0 	.word	0x200000e0
    21cc:	00003171 	.word	0x00003171

000021d0 <party_lights>:
	}
}


void party_lights(uint16_t party_vals[])
{
    21d0:	b590      	push	{r4, r7, lr}
    21d2:	b083      	sub	sp, #12
    21d4:	af00      	add	r7, sp, #0
    21d6:	6078      	str	r0, [r7, #4]
	if (party_vals[0] > party_thresholds[0])
    21d8:	687b      	ldr	r3, [r7, #4]
    21da:	881a      	ldrh	r2, [r3, #0]
    21dc:	4b94      	ldr	r3, [pc, #592]	; (2430 <party_lights+0x260>)
    21de:	881b      	ldrh	r3, [r3, #0]
    21e0:	429a      	cmp	r2, r3
    21e2:	d91e      	bls.n	2222 <party_lights+0x52>
	{
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR,SUB_LEFT_PIN,true);
    21e4:	2301      	movs	r3, #1
    21e6:	2203      	movs	r2, #3
    21e8:	2103      	movs	r1, #3
    21ea:	2000      	movs	r0, #0
    21ec:	4c91      	ldr	r4, [pc, #580]	; (2434 <party_lights+0x264>)
    21ee:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR,SUB_RIGHT_PIN,true);
    21f0:	2301      	movs	r3, #1
    21f2:	2204      	movs	r2, #4
    21f4:	2103      	movs	r1, #3
    21f6:	2000      	movs	r0, #0
    21f8:	4c8e      	ldr	r4, [pc, #568]	; (2434 <party_lights+0x264>)
    21fa:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    21fc:	2301      	movs	r3, #1
    21fe:	2201      	movs	r2, #1
    2200:	2104      	movs	r1, #4
    2202:	2000      	movs	r0, #0
    2204:	4c8b      	ldr	r4, [pc, #556]	; (2434 <party_lights+0x264>)
    2206:	47a0      	blx	r4
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    2208:	2301      	movs	r3, #1
    220a:	2201      	movs	r2, #1
    220c:	2103      	movs	r1, #3
    220e:	2000      	movs	r0, #0
    2210:	4c88      	ldr	r4, [pc, #544]	; (2434 <party_lights+0x264>)
    2212:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,true);
    2214:	2301      	movs	r3, #1
    2216:	2204      	movs	r2, #4
    2218:	2105      	movs	r1, #5
    221a:	2000      	movs	r0, #0
    221c:	4c85      	ldr	r4, [pc, #532]	; (2434 <party_lights+0x264>)
    221e:	47a0      	blx	r4
    2220:	e01d      	b.n	225e <party_lights+0x8e>
	}
	else
	{
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR, SUB_LEFT_PIN,false);
    2222:	2300      	movs	r3, #0
    2224:	2203      	movs	r2, #3
    2226:	2103      	movs	r1, #3
    2228:	2000      	movs	r0, #0
    222a:	4c82      	ldr	r4, [pc, #520]	; (2434 <party_lights+0x264>)
    222c:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR, SUB_RIGHT_PIN,false);
    222e:	2300      	movs	r3, #0
    2230:	2204      	movs	r2, #4
    2232:	2103      	movs	r1, #3
    2234:	2000      	movs	r0, #0
    2236:	4c7f      	ldr	r4, [pc, #508]	; (2434 <party_lights+0x264>)
    2238:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    223a:	2300      	movs	r3, #0
    223c:	2201      	movs	r2, #1
    223e:	2104      	movs	r1, #4
    2240:	2000      	movs	r0, #0
    2242:	4c7c      	ldr	r4, [pc, #496]	; (2434 <party_lights+0x264>)
    2244:	47a0      	blx	r4
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    2246:	2300      	movs	r3, #0
    2248:	2201      	movs	r2, #1
    224a:	2103      	movs	r1, #3
    224c:	2000      	movs	r0, #0
    224e:	4c79      	ldr	r4, [pc, #484]	; (2434 <party_lights+0x264>)
    2250:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,false);
    2252:	2300      	movs	r3, #0
    2254:	2204      	movs	r2, #4
    2256:	2105      	movs	r1, #5
    2258:	2000      	movs	r0, #0
    225a:	4c76      	ldr	r4, [pc, #472]	; (2434 <party_lights+0x264>)
    225c:	47a0      	blx	r4
	}
	if (party_vals[1] > party_thresholds[1])
    225e:	687b      	ldr	r3, [r7, #4]
    2260:	3302      	adds	r3, #2
    2262:	881a      	ldrh	r2, [r3, #0]
    2264:	4b72      	ldr	r3, [pc, #456]	; (2430 <party_lights+0x260>)
    2266:	885b      	ldrh	r3, [r3, #2]
    2268:	429a      	cmp	r2, r3
    226a:	d918      	bls.n	229e <party_lights+0xce>
	{
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    226c:	2301      	movs	r3, #1
    226e:	2200      	movs	r2, #0
    2270:	2102      	movs	r1, #2
    2272:	2000      	movs	r0, #0
    2274:	4c6f      	ldr	r4, [pc, #444]	; (2434 <party_lights+0x264>)
    2276:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    2278:	2301      	movs	r3, #1
    227a:	2200      	movs	r2, #0
    227c:	2101      	movs	r1, #1
    227e:	2000      	movs	r0, #0
    2280:	4c6c      	ldr	r4, [pc, #432]	; (2434 <party_lights+0x264>)
    2282:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    2284:	2301      	movs	r3, #1
    2286:	2200      	movs	r2, #0
    2288:	2104      	movs	r1, #4
    228a:	2000      	movs	r0, #0
    228c:	4c69      	ldr	r4, [pc, #420]	; (2434 <party_lights+0x264>)
    228e:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    2290:	2301      	movs	r3, #1
    2292:	2200      	movs	r2, #0
    2294:	2103      	movs	r1, #3
    2296:	2000      	movs	r0, #0
    2298:	4c66      	ldr	r4, [pc, #408]	; (2434 <party_lights+0x264>)
    229a:	47a0      	blx	r4
    229c:	e017      	b.n	22ce <party_lights+0xfe>
	}
	else
	{
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,false);
    229e:	2300      	movs	r3, #0
    22a0:	2200      	movs	r2, #0
    22a2:	2102      	movs	r1, #2
    22a4:	2000      	movs	r0, #0
    22a6:	4c63      	ldr	r4, [pc, #396]	; (2434 <party_lights+0x264>)
    22a8:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,false);
    22aa:	2300      	movs	r3, #0
    22ac:	2200      	movs	r2, #0
    22ae:	2101      	movs	r1, #1
    22b0:	2000      	movs	r0, #0
    22b2:	4c60      	ldr	r4, [pc, #384]	; (2434 <party_lights+0x264>)
    22b4:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    22b6:	2300      	movs	r3, #0
    22b8:	2200      	movs	r2, #0
    22ba:	2104      	movs	r1, #4
    22bc:	2000      	movs	r0, #0
    22be:	4c5d      	ldr	r4, [pc, #372]	; (2434 <party_lights+0x264>)
    22c0:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    22c2:	2300      	movs	r3, #0
    22c4:	2200      	movs	r2, #0
    22c6:	2103      	movs	r1, #3
    22c8:	2000      	movs	r0, #0
    22ca:	4c5a      	ldr	r4, [pc, #360]	; (2434 <party_lights+0x264>)
    22cc:	47a0      	blx	r4
	}
	if (party_vals[2] > party_thresholds[2])
    22ce:	687b      	ldr	r3, [r7, #4]
    22d0:	3304      	adds	r3, #4
    22d2:	881a      	ldrh	r2, [r3, #0]
    22d4:	4b56      	ldr	r3, [pc, #344]	; (2430 <party_lights+0x260>)
    22d6:	889b      	ldrh	r3, [r3, #4]
    22d8:	429a      	cmp	r2, r3
    22da:	d90c      	bls.n	22f6 <party_lights+0x126>
	{
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    22dc:	2301      	movs	r3, #1
    22de:	2201      	movs	r2, #1
    22e0:	2102      	movs	r1, #2
    22e2:	2000      	movs	r0, #0
    22e4:	4c53      	ldr	r4, [pc, #332]	; (2434 <party_lights+0x264>)
    22e6:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    22e8:	2301      	movs	r3, #1
    22ea:	2201      	movs	r2, #1
    22ec:	2101      	movs	r1, #1
    22ee:	2000      	movs	r0, #0
    22f0:	4c50      	ldr	r4, [pc, #320]	; (2434 <party_lights+0x264>)
    22f2:	47a0      	blx	r4
    22f4:	e00b      	b.n	230e <party_lights+0x13e>
	}
	else
	{
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    22f6:	2300      	movs	r3, #0
    22f8:	2201      	movs	r2, #1
    22fa:	2102      	movs	r1, #2
    22fc:	2000      	movs	r0, #0
    22fe:	4c4d      	ldr	r4, [pc, #308]	; (2434 <party_lights+0x264>)
    2300:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    2302:	2300      	movs	r3, #0
    2304:	2201      	movs	r2, #1
    2306:	2101      	movs	r1, #1
    2308:	2000      	movs	r0, #0
    230a:	4c4a      	ldr	r4, [pc, #296]	; (2434 <party_lights+0x264>)
    230c:	47a0      	blx	r4
	}
	if (party_vals[3] > party_thresholds[3])
    230e:	687b      	ldr	r3, [r7, #4]
    2310:	3306      	adds	r3, #6
    2312:	881a      	ldrh	r2, [r3, #0]
    2314:	4b46      	ldr	r3, [pc, #280]	; (2430 <party_lights+0x260>)
    2316:	88db      	ldrh	r3, [r3, #6]
    2318:	429a      	cmp	r2, r3
    231a:	d912      	bls.n	2342 <party_lights+0x172>
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    231c:	2301      	movs	r3, #1
    231e:	2202      	movs	r2, #2
    2320:	2102      	movs	r1, #2
    2322:	2000      	movs	r0, #0
    2324:	4c43      	ldr	r4, [pc, #268]	; (2434 <party_lights+0x264>)
    2326:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    2328:	2301      	movs	r3, #1
    232a:	2202      	movs	r2, #2
    232c:	2101      	movs	r1, #1
    232e:	2000      	movs	r0, #0
    2330:	4c40      	ldr	r4, [pc, #256]	; (2434 <party_lights+0x264>)
    2332:	47a0      	blx	r4
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,true);
    2334:	2301      	movs	r3, #1
    2336:	2203      	movs	r2, #3
    2338:	2105      	movs	r1, #5
    233a:	2000      	movs	r0, #0
    233c:	4c3d      	ldr	r4, [pc, #244]	; (2434 <party_lights+0x264>)
    233e:	47a0      	blx	r4
    2340:	e011      	b.n	2366 <party_lights+0x196>
	}
	else
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    2342:	2300      	movs	r3, #0
    2344:	2202      	movs	r2, #2
    2346:	2102      	movs	r1, #2
    2348:	2000      	movs	r0, #0
    234a:	4c3a      	ldr	r4, [pc, #232]	; (2434 <party_lights+0x264>)
    234c:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    234e:	2300      	movs	r3, #0
    2350:	2202      	movs	r2, #2
    2352:	2101      	movs	r1, #1
    2354:	2000      	movs	r0, #0
    2356:	4c37      	ldr	r4, [pc, #220]	; (2434 <party_lights+0x264>)
    2358:	47a0      	blx	r4
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,false);
    235a:	2300      	movs	r3, #0
    235c:	2203      	movs	r2, #3
    235e:	2105      	movs	r1, #5
    2360:	2000      	movs	r0, #0
    2362:	4c34      	ldr	r4, [pc, #208]	; (2434 <party_lights+0x264>)
    2364:	47a0      	blx	r4

	}
	if (party_vals[4] > party_thresholds[4])
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	3308      	adds	r3, #8
    236a:	881a      	ldrh	r2, [r3, #0]
    236c:	4b30      	ldr	r3, [pc, #192]	; (2430 <party_lights+0x260>)
    236e:	891b      	ldrh	r3, [r3, #8]
    2370:	429a      	cmp	r2, r3
    2372:	d912      	bls.n	239a <party_lights+0x1ca>
	{
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    2374:	2301      	movs	r3, #1
    2376:	2202      	movs	r2, #2
    2378:	2104      	movs	r1, #4
    237a:	2000      	movs	r0, #0
    237c:	4c2d      	ldr	r4, [pc, #180]	; (2434 <party_lights+0x264>)
    237e:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    2380:	2301      	movs	r3, #1
    2382:	2202      	movs	r2, #2
    2384:	2103      	movs	r1, #3
    2386:	2000      	movs	r0, #0
    2388:	4c2a      	ldr	r4, [pc, #168]	; (2434 <party_lights+0x264>)
    238a:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,true);
    238c:	2301      	movs	r3, #1
    238e:	2202      	movs	r2, #2
    2390:	2105      	movs	r1, #5
    2392:	2000      	movs	r0, #0
    2394:	4c27      	ldr	r4, [pc, #156]	; (2434 <party_lights+0x264>)
    2396:	47a0      	blx	r4
    2398:	e011      	b.n	23be <party_lights+0x1ee>
	}
	else
	{
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,false);
    239a:	2300      	movs	r3, #0
    239c:	2202      	movs	r2, #2
    239e:	2104      	movs	r1, #4
    23a0:	2000      	movs	r0, #0
    23a2:	4c24      	ldr	r4, [pc, #144]	; (2434 <party_lights+0x264>)
    23a4:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,false);
    23a6:	2300      	movs	r3, #0
    23a8:	2202      	movs	r2, #2
    23aa:	2103      	movs	r1, #3
    23ac:	2000      	movs	r0, #0
    23ae:	4c21      	ldr	r4, [pc, #132]	; (2434 <party_lights+0x264>)
    23b0:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,false);
    23b2:	2300      	movs	r3, #0
    23b4:	2202      	movs	r2, #2
    23b6:	2105      	movs	r1, #5
    23b8:	2000      	movs	r0, #0
    23ba:	4c1e      	ldr	r4, [pc, #120]	; (2434 <party_lights+0x264>)
    23bc:	47a0      	blx	r4
	}
	if (party_vals[5] > party_thresholds[5])
    23be:	687b      	ldr	r3, [r7, #4]
    23c0:	330a      	adds	r3, #10
    23c2:	881a      	ldrh	r2, [r3, #0]
    23c4:	4b1a      	ldr	r3, [pc, #104]	; (2430 <party_lights+0x260>)
    23c6:	895b      	ldrh	r3, [r3, #10]
    23c8:	429a      	cmp	r2, r3
    23ca:	d90c      	bls.n	23e6 <party_lights+0x216>
	{
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    23cc:	2301      	movs	r3, #1
    23ce:	2203      	movs	r2, #3
    23d0:	2101      	movs	r1, #1
    23d2:	2000      	movs	r0, #0
    23d4:	4c17      	ldr	r4, [pc, #92]	; (2434 <party_lights+0x264>)
    23d6:	47a0      	blx	r4
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    23d8:	2301      	movs	r3, #1
    23da:	2203      	movs	r2, #3
    23dc:	2102      	movs	r1, #2
    23de:	2000      	movs	r0, #0
    23e0:	4c14      	ldr	r4, [pc, #80]	; (2434 <party_lights+0x264>)
    23e2:	47a0      	blx	r4
    23e4:	e00b      	b.n	23fe <party_lights+0x22e>
	}
	else
	{
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    23e6:	2300      	movs	r3, #0
    23e8:	2203      	movs	r2, #3
    23ea:	2101      	movs	r1, #1
    23ec:	2000      	movs	r0, #0
    23ee:	4c11      	ldr	r4, [pc, #68]	; (2434 <party_lights+0x264>)
    23f0:	47a0      	blx	r4
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    23f2:	2300      	movs	r3, #0
    23f4:	2203      	movs	r2, #3
    23f6:	2102      	movs	r1, #2
    23f8:	2000      	movs	r0, #0
    23fa:	4c0e      	ldr	r4, [pc, #56]	; (2434 <party_lights+0x264>)
    23fc:	47a0      	blx	r4
	}
	if (party_vals[6] > party_thresholds[6])
    23fe:	687b      	ldr	r3, [r7, #4]
    2400:	330c      	adds	r3, #12
    2402:	881a      	ldrh	r2, [r3, #0]
    2404:	4b0a      	ldr	r3, [pc, #40]	; (2430 <party_lights+0x260>)
    2406:	899b      	ldrh	r3, [r3, #12]
    2408:	429a      	cmp	r2, r3
    240a:	d906      	bls.n	241a <party_lights+0x24a>
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    240c:	2301      	movs	r3, #1
    240e:	2204      	movs	r2, #4
    2410:	2101      	movs	r1, #1
    2412:	2000      	movs	r0, #0
    2414:	4c07      	ldr	r4, [pc, #28]	; (2434 <party_lights+0x264>)
    2416:	47a0      	blx	r4
	}
	else
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
	}
}
    2418:	e005      	b.n	2426 <party_lights+0x256>
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
	}
	else
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    241a:	2300      	movs	r3, #0
    241c:	2204      	movs	r2, #4
    241e:	2101      	movs	r1, #1
    2420:	2000      	movs	r0, #0
    2422:	4c04      	ldr	r4, [pc, #16]	; (2434 <party_lights+0x264>)
    2424:	47a0      	blx	r4
	}
}
    2426:	46c0      	nop			; (mov r8, r8)
    2428:	46bd      	mov	sp, r7
    242a:	b003      	add	sp, #12
    242c:	bd90      	pop	{r4, r7, pc}
    242e:	46c0      	nop			; (mov r8, r8)
    2430:	20000490 	.word	0x20000490
    2434:	00002cc9 	.word	0x00002cc9

00002438 <flashy_flash1>:
	configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,party_vals[band]>party_thresholds[band]+300);
	configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,party_vals[band]>party_thresholds[band]+300);
}

void flashy_flash1()
{
    2438:	b5b0      	push	{r4, r5, r7, lr}
    243a:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
    243c:	4b48      	ldr	r3, [pc, #288]	; (2560 <flashy_flash1+0x128>)
    243e:	781b      	ldrb	r3, [r3, #0]
    2440:	2b0c      	cmp	r3, #12
    2442:	d900      	bls.n	2446 <flashy_flash1+0xe>
    2444:	e07c      	b.n	2540 <flashy_flash1+0x108>
    2446:	009a      	lsls	r2, r3, #2
    2448:	4b46      	ldr	r3, [pc, #280]	; (2564 <flashy_flash1+0x12c>)
    244a:	18d3      	adds	r3, r2, r3
    244c:	681b      	ldr	r3, [r3, #0]
    244e:	469f      	mov	pc, r3
	{
		case 0:
			reset_all_lights();
    2450:	4b45      	ldr	r3, [pc, #276]	; (2568 <flashy_flash1+0x130>)
    2452:	4798      	blx	r3
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    2454:	2301      	movs	r3, #1
    2456:	2201      	movs	r2, #1
    2458:	2102      	movs	r1, #2
    245a:	2000      	movs	r0, #0
    245c:	4c43      	ldr	r4, [pc, #268]	; (256c <flashy_flash1+0x134>)
    245e:	47a0      	blx	r4
			break;
    2460:	e074      	b.n	254c <flashy_flash1+0x114>
		case 1:
			reset_all_lights();
    2462:	4b41      	ldr	r3, [pc, #260]	; (2568 <flashy_flash1+0x130>)
    2464:	4798      	blx	r3
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    2466:	2301      	movs	r3, #1
    2468:	2202      	movs	r2, #2
    246a:	2102      	movs	r1, #2
    246c:	2000      	movs	r0, #0
    246e:	4c3f      	ldr	r4, [pc, #252]	; (256c <flashy_flash1+0x134>)
    2470:	47a0      	blx	r4
			break;
    2472:	e06b      	b.n	254c <flashy_flash1+0x114>
		case 2:
			reset_all_lights();
    2474:	4b3c      	ldr	r3, [pc, #240]	; (2568 <flashy_flash1+0x130>)
    2476:	4798      	blx	r3
			configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    2478:	2301      	movs	r3, #1
    247a:	2200      	movs	r2, #0
    247c:	2102      	movs	r1, #2
    247e:	2000      	movs	r0, #0
    2480:	4c3a      	ldr	r4, [pc, #232]	; (256c <flashy_flash1+0x134>)
    2482:	47a0      	blx	r4
			break;
    2484:	e062      	b.n	254c <flashy_flash1+0x114>
		case 3:
			reset_all_lights();
    2486:	4b38      	ldr	r3, [pc, #224]	; (2568 <flashy_flash1+0x130>)
    2488:	4798      	blx	r3
			configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    248a:	2301      	movs	r3, #1
    248c:	2200      	movs	r2, #0
    248e:	2101      	movs	r1, #1
    2490:	2000      	movs	r0, #0
    2492:	4c36      	ldr	r4, [pc, #216]	; (256c <flashy_flash1+0x134>)
    2494:	47a0      	blx	r4
			state++;
    2496:	4b32      	ldr	r3, [pc, #200]	; (2560 <flashy_flash1+0x128>)
    2498:	781b      	ldrb	r3, [r3, #0]
    249a:	3301      	adds	r3, #1
    249c:	b2da      	uxtb	r2, r3
    249e:	4b30      	ldr	r3, [pc, #192]	; (2560 <flashy_flash1+0x128>)
    24a0:	701a      	strb	r2, [r3, #0]
			break;
    24a2:	e053      	b.n	254c <flashy_flash1+0x114>
		case 4:
			reset_all_lights();
    24a4:	4b30      	ldr	r3, [pc, #192]	; (2568 <flashy_flash1+0x130>)
    24a6:	4798      	blx	r3
			configure_pin(HIGH_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    24a8:	2301      	movs	r3, #1
    24aa:	2201      	movs	r2, #1
    24ac:	2101      	movs	r1, #1
    24ae:	2000      	movs	r0, #0
    24b0:	4c2e      	ldr	r4, [pc, #184]	; (256c <flashy_flash1+0x134>)
    24b2:	47a0      	blx	r4
			break;
    24b4:	e04a      	b.n	254c <flashy_flash1+0x114>
		case 5:
			reset_all_lights();
    24b6:	4b2c      	ldr	r3, [pc, #176]	; (2568 <flashy_flash1+0x130>)
    24b8:	4798      	blx	r3
			configure_pin(LOW_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    24ba:	2301      	movs	r3, #1
    24bc:	2202      	movs	r2, #2
    24be:	2101      	movs	r1, #1
    24c0:	2000      	movs	r0, #0
    24c2:	4c2a      	ldr	r4, [pc, #168]	; (256c <flashy_flash1+0x134>)
    24c4:	47a0      	blx	r4
			break;
    24c6:	e041      	b.n	254c <flashy_flash1+0x114>
		case 6:
			reset_all_lights();
    24c8:	4b27      	ldr	r3, [pc, #156]	; (2568 <flashy_flash1+0x130>)
    24ca:	4798      	blx	r3
			configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    24cc:	2301      	movs	r3, #1
    24ce:	2202      	movs	r2, #2
    24d0:	2103      	movs	r1, #3
    24d2:	2000      	movs	r0, #0
    24d4:	4c25      	ldr	r4, [pc, #148]	; (256c <flashy_flash1+0x134>)
    24d6:	47a0      	blx	r4
			break;
    24d8:	e038      	b.n	254c <flashy_flash1+0x114>
		case 7:
			reset_all_lights();
    24da:	4b23      	ldr	r3, [pc, #140]	; (2568 <flashy_flash1+0x130>)
    24dc:	4798      	blx	r3
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    24de:	2301      	movs	r3, #1
    24e0:	2201      	movs	r2, #1
    24e2:	2103      	movs	r1, #3
    24e4:	2000      	movs	r0, #0
    24e6:	4c21      	ldr	r4, [pc, #132]	; (256c <flashy_flash1+0x134>)
    24e8:	47a0      	blx	r4
			break;
    24ea:	e02f      	b.n	254c <flashy_flash1+0x114>
		case 8:
			reset_all_lights();
    24ec:	4b1e      	ldr	r3, [pc, #120]	; (2568 <flashy_flash1+0x130>)
    24ee:	4798      	blx	r3
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    24f0:	2301      	movs	r3, #1
    24f2:	2200      	movs	r2, #0
    24f4:	2103      	movs	r1, #3
    24f6:	2000      	movs	r0, #0
    24f8:	4c1c      	ldr	r4, [pc, #112]	; (256c <flashy_flash1+0x134>)
    24fa:	47a0      	blx	r4
			break;
    24fc:	e026      	b.n	254c <flashy_flash1+0x114>
		case 9:
			reset_all_lights();
    24fe:	4b1a      	ldr	r3, [pc, #104]	; (2568 <flashy_flash1+0x130>)
    2500:	4798      	blx	r3
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    2502:	2301      	movs	r3, #1
    2504:	2200      	movs	r2, #0
    2506:	2104      	movs	r1, #4
    2508:	2000      	movs	r0, #0
    250a:	4c18      	ldr	r4, [pc, #96]	; (256c <flashy_flash1+0x134>)
    250c:	47a0      	blx	r4
			break;
    250e:	e01d      	b.n	254c <flashy_flash1+0x114>
		case 10:
			reset_all_lights();
    2510:	4b15      	ldr	r3, [pc, #84]	; (2568 <flashy_flash1+0x130>)
    2512:	4798      	blx	r3
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    2514:	2301      	movs	r3, #1
    2516:	2201      	movs	r2, #1
    2518:	2104      	movs	r1, #4
    251a:	2000      	movs	r0, #0
    251c:	4c13      	ldr	r4, [pc, #76]	; (256c <flashy_flash1+0x134>)
    251e:	47a0      	blx	r4
			break;
    2520:	e014      	b.n	254c <flashy_flash1+0x114>
		case 11:
			reset_all_lights();
    2522:	4b11      	ldr	r3, [pc, #68]	; (2568 <flashy_flash1+0x130>)
    2524:	4798      	blx	r3
			configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    2526:	2301      	movs	r3, #1
    2528:	2202      	movs	r2, #2
    252a:	2104      	movs	r1, #4
    252c:	2000      	movs	r0, #0
    252e:	4c0f      	ldr	r4, [pc, #60]	; (256c <flashy_flash1+0x134>)
    2530:	47a0      	blx	r4
			break;
    2532:	e00b      	b.n	254c <flashy_flash1+0x114>
		case 12:
			reset_all_lights();
    2534:	4b0c      	ldr	r3, [pc, #48]	; (2568 <flashy_flash1+0x130>)
    2536:	4798      	blx	r3
			state = 0;
    2538:	4b09      	ldr	r3, [pc, #36]	; (2560 <flashy_flash1+0x128>)
    253a:	2200      	movs	r2, #0
    253c:	701a      	strb	r2, [r3, #0]
			break;
    253e:	e005      	b.n	254c <flashy_flash1+0x114>
		default:
			reset_all_lights();
    2540:	4b09      	ldr	r3, [pc, #36]	; (2568 <flashy_flash1+0x130>)
    2542:	4798      	blx	r3
			state = 0;
    2544:	4b06      	ldr	r3, [pc, #24]	; (2560 <flashy_flash1+0x128>)
    2546:	2200      	movs	r2, #0
    2548:	701a      	strb	r2, [r3, #0]
			break;
    254a:	46c0      	nop			; (mov r8, r8)
	}
	state++;
    254c:	4b04      	ldr	r3, [pc, #16]	; (2560 <flashy_flash1+0x128>)
    254e:	781b      	ldrb	r3, [r3, #0]
    2550:	3301      	adds	r3, #1
    2552:	b2da      	uxtb	r2, r3
    2554:	4b02      	ldr	r3, [pc, #8]	; (2560 <flashy_flash1+0x128>)
    2556:	701a      	strb	r2, [r3, #0]
}
    2558:	46c0      	nop			; (mov r8, r8)
    255a:	46bd      	mov	sp, r7
    255c:	bdb0      	pop	{r4, r5, r7, pc}
    255e:	46c0      	nop			; (mov r8, r8)
    2560:	200003f4 	.word	0x200003f4
    2564:	000070d8 	.word	0x000070d8
    2568:	00002a51 	.word	0x00002a51
    256c:	00002cc9 	.word	0x00002cc9

00002570 <flashy_flash2>:

void flashy_flash2()
{
    2570:	b5b0      	push	{r4, r5, r7, lr}
    2572:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
    2574:	4b8e      	ldr	r3, [pc, #568]	; (27b0 <flashy_flash2+0x240>)
    2576:	781b      	ldrb	r3, [r3, #0]
    2578:	2b0a      	cmp	r3, #10
    257a:	d900      	bls.n	257e <flashy_flash2+0xe>
    257c:	e110      	b.n	27a0 <flashy_flash2+0x230>
    257e:	009a      	lsls	r2, r3, #2
    2580:	4b8c      	ldr	r3, [pc, #560]	; (27b4 <flashy_flash2+0x244>)
    2582:	18d3      	adds	r3, r2, r3
    2584:	681b      	ldr	r3, [r3, #0]
    2586:	469f      	mov	pc, r3
	{
		case 0:
			reset_all_lights();
    2588:	4b8b      	ldr	r3, [pc, #556]	; (27b8 <flashy_flash2+0x248>)
    258a:	4798      	blx	r3
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    258c:	2301      	movs	r3, #1
    258e:	2204      	movs	r2, #4
    2590:	2101      	movs	r1, #1
    2592:	2000      	movs	r0, #0
    2594:	4c89      	ldr	r4, [pc, #548]	; (27bc <flashy_flash2+0x24c>)
    2596:	47a0      	blx	r4
			state++;
    2598:	4b85      	ldr	r3, [pc, #532]	; (27b0 <flashy_flash2+0x240>)
    259a:	781b      	ldrb	r3, [r3, #0]
    259c:	3301      	adds	r3, #1
    259e:	b2da      	uxtb	r2, r3
    25a0:	4b83      	ldr	r3, [pc, #524]	; (27b0 <flashy_flash2+0x240>)
    25a2:	701a      	strb	r2, [r3, #0]
			break;
    25a4:	e101      	b.n	27aa <flashy_flash2+0x23a>
		case 1:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    25a6:	2300      	movs	r3, #0
    25a8:	2204      	movs	r2, #4
    25aa:	2101      	movs	r1, #1
    25ac:	2000      	movs	r0, #0
    25ae:	4c83      	ldr	r4, [pc, #524]	; (27bc <flashy_flash2+0x24c>)
    25b0:	47a0      	blx	r4
			state++;
    25b2:	4b7f      	ldr	r3, [pc, #508]	; (27b0 <flashy_flash2+0x240>)
    25b4:	781b      	ldrb	r3, [r3, #0]
    25b6:	3301      	adds	r3, #1
    25b8:	b2da      	uxtb	r2, r3
    25ba:	4b7d      	ldr	r3, [pc, #500]	; (27b0 <flashy_flash2+0x240>)
    25bc:	701a      	strb	r2, [r3, #0]
			break;
    25be:	e0f4      	b.n	27aa <flashy_flash2+0x23a>
		case 2:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    25c0:	2301      	movs	r3, #1
    25c2:	2204      	movs	r2, #4
    25c4:	2101      	movs	r1, #1
    25c6:	2000      	movs	r0, #0
    25c8:	4c7c      	ldr	r4, [pc, #496]	; (27bc <flashy_flash2+0x24c>)
    25ca:	47a0      	blx	r4
			state++;
    25cc:	4b78      	ldr	r3, [pc, #480]	; (27b0 <flashy_flash2+0x240>)
    25ce:	781b      	ldrb	r3, [r3, #0]
    25d0:	3301      	adds	r3, #1
    25d2:	b2da      	uxtb	r2, r3
    25d4:	4b76      	ldr	r3, [pc, #472]	; (27b0 <flashy_flash2+0x240>)
    25d6:	701a      	strb	r2, [r3, #0]
			break;
    25d8:	e0e7      	b.n	27aa <flashy_flash2+0x23a>
		case 3:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    25da:	2300      	movs	r3, #0
    25dc:	2204      	movs	r2, #4
    25de:	2101      	movs	r1, #1
    25e0:	2000      	movs	r0, #0
    25e2:	4c76      	ldr	r4, [pc, #472]	; (27bc <flashy_flash2+0x24c>)
    25e4:	47a0      	blx	r4
			state++;
    25e6:	4b72      	ldr	r3, [pc, #456]	; (27b0 <flashy_flash2+0x240>)
    25e8:	781b      	ldrb	r3, [r3, #0]
    25ea:	3301      	adds	r3, #1
    25ec:	b2da      	uxtb	r2, r3
    25ee:	4b70      	ldr	r3, [pc, #448]	; (27b0 <flashy_flash2+0x240>)
    25f0:	701a      	strb	r2, [r3, #0]
			break;
    25f2:	e0da      	b.n	27aa <flashy_flash2+0x23a>
		case 4:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    25f4:	2301      	movs	r3, #1
    25f6:	2204      	movs	r2, #4
    25f8:	2101      	movs	r1, #1
    25fa:	2000      	movs	r0, #0
    25fc:	4c6f      	ldr	r4, [pc, #444]	; (27bc <flashy_flash2+0x24c>)
    25fe:	47a0      	blx	r4
			state++;
    2600:	4b6b      	ldr	r3, [pc, #428]	; (27b0 <flashy_flash2+0x240>)
    2602:	781b      	ldrb	r3, [r3, #0]
    2604:	3301      	adds	r3, #1
    2606:	b2da      	uxtb	r2, r3
    2608:	4b69      	ldr	r3, [pc, #420]	; (27b0 <flashy_flash2+0x240>)
    260a:	701a      	strb	r2, [r3, #0]
			break;
    260c:	e0cd      	b.n	27aa <flashy_flash2+0x23a>
		case 5:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    260e:	2300      	movs	r3, #0
    2610:	2204      	movs	r2, #4
    2612:	2101      	movs	r1, #1
    2614:	2000      	movs	r0, #0
    2616:	4c69      	ldr	r4, [pc, #420]	; (27bc <flashy_flash2+0x24c>)
    2618:	47a0      	blx	r4
			state++;
    261a:	4b65      	ldr	r3, [pc, #404]	; (27b0 <flashy_flash2+0x240>)
    261c:	781b      	ldrb	r3, [r3, #0]
    261e:	3301      	adds	r3, #1
    2620:	b2da      	uxtb	r2, r3
    2622:	4b63      	ldr	r3, [pc, #396]	; (27b0 <flashy_flash2+0x240>)
    2624:	701a      	strb	r2, [r3, #0]
			break;
    2626:	e0c0      	b.n	27aa <flashy_flash2+0x23a>
		case 6:
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    2628:	2301      	movs	r3, #1
    262a:	2202      	movs	r2, #2
    262c:	2101      	movs	r1, #1
    262e:	2000      	movs	r0, #0
    2630:	4c62      	ldr	r4, [pc, #392]	; (27bc <flashy_flash2+0x24c>)
    2632:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    2634:	2301      	movs	r3, #1
    2636:	2202      	movs	r2, #2
    2638:	2102      	movs	r1, #2
    263a:	2000      	movs	r0, #0
    263c:	4c5f      	ldr	r4, [pc, #380]	; (27bc <flashy_flash2+0x24c>)
    263e:	47a0      	blx	r4
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    2640:	2301      	movs	r3, #1
    2642:	2201      	movs	r2, #1
    2644:	2103      	movs	r1, #3
    2646:	2000      	movs	r0, #0
    2648:	4c5c      	ldr	r4, [pc, #368]	; (27bc <flashy_flash2+0x24c>)
    264a:	47a0      	blx	r4
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    264c:	2301      	movs	r3, #1
    264e:	2201      	movs	r2, #1
    2650:	2104      	movs	r1, #4
    2652:	2000      	movs	r0, #0
    2654:	4c59      	ldr	r4, [pc, #356]	; (27bc <flashy_flash2+0x24c>)
    2656:	47a0      	blx	r4
			state++;
    2658:	4b55      	ldr	r3, [pc, #340]	; (27b0 <flashy_flash2+0x240>)
    265a:	781b      	ldrb	r3, [r3, #0]
    265c:	3301      	adds	r3, #1
    265e:	b2da      	uxtb	r2, r3
    2660:	4b53      	ldr	r3, [pc, #332]	; (27b0 <flashy_flash2+0x240>)
    2662:	701a      	strb	r2, [r3, #0]
			break;
    2664:	e0a1      	b.n	27aa <flashy_flash2+0x23a>
		case 7:
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    2666:	2300      	movs	r3, #0
    2668:	2202      	movs	r2, #2
    266a:	2101      	movs	r1, #1
    266c:	2000      	movs	r0, #0
    266e:	4c53      	ldr	r4, [pc, #332]	; (27bc <flashy_flash2+0x24c>)
    2670:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    2672:	2300      	movs	r3, #0
    2674:	2202      	movs	r2, #2
    2676:	2102      	movs	r1, #2
    2678:	2000      	movs	r0, #0
    267a:	4c50      	ldr	r4, [pc, #320]	; (27bc <flashy_flash2+0x24c>)
    267c:	47a0      	blx	r4
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    267e:	2301      	movs	r3, #1
    2680:	2201      	movs	r2, #1
    2682:	2101      	movs	r1, #1
    2684:	2000      	movs	r0, #0
    2686:	4c4d      	ldr	r4, [pc, #308]	; (27bc <flashy_flash2+0x24c>)
    2688:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    268a:	2301      	movs	r3, #1
    268c:	2201      	movs	r2, #1
    268e:	2102      	movs	r1, #2
    2690:	2000      	movs	r0, #0
    2692:	4c4a      	ldr	r4, [pc, #296]	; (27bc <flashy_flash2+0x24c>)
    2694:	47a0      	blx	r4
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    2696:	2300      	movs	r3, #0
    2698:	2201      	movs	r2, #1
    269a:	2103      	movs	r1, #3
    269c:	2000      	movs	r0, #0
    269e:	4c47      	ldr	r4, [pc, #284]	; (27bc <flashy_flash2+0x24c>)
    26a0:	47a0      	blx	r4
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    26a2:	2300      	movs	r3, #0
    26a4:	2201      	movs	r2, #1
    26a6:	2104      	movs	r1, #4
    26a8:	2000      	movs	r0, #0
    26aa:	4c44      	ldr	r4, [pc, #272]	; (27bc <flashy_flash2+0x24c>)
    26ac:	47a0      	blx	r4
			state++;
    26ae:	4b40      	ldr	r3, [pc, #256]	; (27b0 <flashy_flash2+0x240>)
    26b0:	781b      	ldrb	r3, [r3, #0]
    26b2:	3301      	adds	r3, #1
    26b4:	b2da      	uxtb	r2, r3
    26b6:	4b3e      	ldr	r3, [pc, #248]	; (27b0 <flashy_flash2+0x240>)
    26b8:	701a      	strb	r2, [r3, #0]
			break;
    26ba:	e076      	b.n	27aa <flashy_flash2+0x23a>
		case 8:
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    26bc:	2300      	movs	r3, #0
    26be:	2201      	movs	r2, #1
    26c0:	2101      	movs	r1, #1
    26c2:	2000      	movs	r0, #0
    26c4:	4c3d      	ldr	r4, [pc, #244]	; (27bc <flashy_flash2+0x24c>)
    26c6:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    26c8:	2300      	movs	r3, #0
    26ca:	2201      	movs	r2, #1
    26cc:	2102      	movs	r1, #2
    26ce:	2000      	movs	r0, #0
    26d0:	4c3a      	ldr	r4, [pc, #232]	; (27bc <flashy_flash2+0x24c>)
    26d2:	47a0      	blx	r4
			configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    26d4:	2301      	movs	r3, #1
    26d6:	2203      	movs	r2, #3
    26d8:	2101      	movs	r1, #1
    26da:	2000      	movs	r0, #0
    26dc:	4c37      	ldr	r4, [pc, #220]	; (27bc <flashy_flash2+0x24c>)
    26de:	47a0      	blx	r4
			configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    26e0:	2301      	movs	r3, #1
    26e2:	2203      	movs	r2, #3
    26e4:	2102      	movs	r1, #2
    26e6:	2000      	movs	r0, #0
    26e8:	4c34      	ldr	r4, [pc, #208]	; (27bc <flashy_flash2+0x24c>)
    26ea:	47a0      	blx	r4
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    26ec:	2301      	movs	r3, #1
    26ee:	2200      	movs	r2, #0
    26f0:	2103      	movs	r1, #3
    26f2:	2000      	movs	r0, #0
    26f4:	4c31      	ldr	r4, [pc, #196]	; (27bc <flashy_flash2+0x24c>)
    26f6:	47a0      	blx	r4
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    26f8:	2301      	movs	r3, #1
    26fa:	2200      	movs	r2, #0
    26fc:	2104      	movs	r1, #4
    26fe:	2000      	movs	r0, #0
    2700:	4c2e      	ldr	r4, [pc, #184]	; (27bc <flashy_flash2+0x24c>)
    2702:	47a0      	blx	r4
			state++;
    2704:	4b2a      	ldr	r3, [pc, #168]	; (27b0 <flashy_flash2+0x240>)
    2706:	781b      	ldrb	r3, [r3, #0]
    2708:	3301      	adds	r3, #1
    270a:	b2da      	uxtb	r2, r3
    270c:	4b28      	ldr	r3, [pc, #160]	; (27b0 <flashy_flash2+0x240>)
    270e:	701a      	strb	r2, [r3, #0]
			break;
    2710:	e04b      	b.n	27aa <flashy_flash2+0x23a>
		case 9:
			configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    2712:	2300      	movs	r3, #0
    2714:	2203      	movs	r2, #3
    2716:	2101      	movs	r1, #1
    2718:	2000      	movs	r0, #0
    271a:	4c28      	ldr	r4, [pc, #160]	; (27bc <flashy_flash2+0x24c>)
    271c:	47a0      	blx	r4
			configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    271e:	2300      	movs	r3, #0
    2720:	2203      	movs	r2, #3
    2722:	2102      	movs	r1, #2
    2724:	2000      	movs	r0, #0
    2726:	4c25      	ldr	r4, [pc, #148]	; (27bc <flashy_flash2+0x24c>)
    2728:	47a0      	blx	r4
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    272a:	2301      	movs	r3, #1
    272c:	2201      	movs	r2, #1
    272e:	2101      	movs	r1, #1
    2730:	2000      	movs	r0, #0
    2732:	4c22      	ldr	r4, [pc, #136]	; (27bc <flashy_flash2+0x24c>)
    2734:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    2736:	2301      	movs	r3, #1
    2738:	2201      	movs	r2, #1
    273a:	2102      	movs	r1, #2
    273c:	2000      	movs	r0, #0
    273e:	4c1f      	ldr	r4, [pc, #124]	; (27bc <flashy_flash2+0x24c>)
    2740:	47a0      	blx	r4
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    2742:	2300      	movs	r3, #0
    2744:	2200      	movs	r2, #0
    2746:	2103      	movs	r1, #3
    2748:	2000      	movs	r0, #0
    274a:	4c1c      	ldr	r4, [pc, #112]	; (27bc <flashy_flash2+0x24c>)
    274c:	47a0      	blx	r4
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    274e:	2300      	movs	r3, #0
    2750:	2200      	movs	r2, #0
    2752:	2104      	movs	r1, #4
    2754:	2000      	movs	r0, #0
    2756:	4c19      	ldr	r4, [pc, #100]	; (27bc <flashy_flash2+0x24c>)
    2758:	47a0      	blx	r4
			state++;
    275a:	4b15      	ldr	r3, [pc, #84]	; (27b0 <flashy_flash2+0x240>)
    275c:	781b      	ldrb	r3, [r3, #0]
    275e:	3301      	adds	r3, #1
    2760:	b2da      	uxtb	r2, r3
    2762:	4b13      	ldr	r3, [pc, #76]	; (27b0 <flashy_flash2+0x240>)
    2764:	701a      	strb	r2, [r3, #0]
			break;
    2766:	e020      	b.n	27aa <flashy_flash2+0x23a>
		case 10:
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    2768:	2300      	movs	r3, #0
    276a:	2201      	movs	r2, #1
    276c:	2101      	movs	r1, #1
    276e:	2000      	movs	r0, #0
    2770:	4c12      	ldr	r4, [pc, #72]	; (27bc <flashy_flash2+0x24c>)
    2772:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    2774:	2300      	movs	r3, #0
    2776:	2201      	movs	r2, #1
    2778:	2102      	movs	r1, #2
    277a:	2000      	movs	r0, #0
    277c:	4c0f      	ldr	r4, [pc, #60]	; (27bc <flashy_flash2+0x24c>)
    277e:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    2780:	2301      	movs	r3, #1
    2782:	2202      	movs	r2, #2
    2784:	2101      	movs	r1, #1
    2786:	2000      	movs	r0, #0
    2788:	4c0c      	ldr	r4, [pc, #48]	; (27bc <flashy_flash2+0x24c>)
    278a:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    278c:	2301      	movs	r3, #1
    278e:	2202      	movs	r2, #2
    2790:	2102      	movs	r1, #2
    2792:	2000      	movs	r0, #0
    2794:	4c09      	ldr	r4, [pc, #36]	; (27bc <flashy_flash2+0x24c>)
    2796:	47a0      	blx	r4
			state = 0;
    2798:	4b05      	ldr	r3, [pc, #20]	; (27b0 <flashy_flash2+0x240>)
    279a:	2200      	movs	r2, #0
    279c:	701a      	strb	r2, [r3, #0]
			break;
    279e:	e004      	b.n	27aa <flashy_flash2+0x23a>
		default:
			reset_all_lights();
    27a0:	4b05      	ldr	r3, [pc, #20]	; (27b8 <flashy_flash2+0x248>)
    27a2:	4798      	blx	r3
			state = 0;
    27a4:	4b02      	ldr	r3, [pc, #8]	; (27b0 <flashy_flash2+0x240>)
    27a6:	2200      	movs	r2, #0
    27a8:	701a      	strb	r2, [r3, #0]
	}
}
    27aa:	46c0      	nop			; (mov r8, r8)
    27ac:	46bd      	mov	sp, r7
    27ae:	bdb0      	pop	{r4, r5, r7, pc}
    27b0:	200003f5 	.word	0x200003f5
    27b4:	0000710c 	.word	0x0000710c
    27b8:	00002a51 	.word	0x00002a51
    27bc:	00002cc9 	.word	0x00002cc9

000027c0 <flashy_fades>:

void flashy_fades()
{
    27c0:	b5b0      	push	{r4, r5, r7, lr}
    27c2:	af00      	add	r7, sp, #0
	//static uint8_t pwm_val = 0;
	static uint8_t duty_cycle = PWM_FREQ/4;
	
	if (pwm_count > duty_cycle)
    27c4:	4b61      	ldr	r3, [pc, #388]	; (294c <flashy_fades+0x18c>)
    27c6:	781b      	ldrb	r3, [r3, #0]
    27c8:	1e1a      	subs	r2, r3, #0
    27ca:	4b61      	ldr	r3, [pc, #388]	; (2950 <flashy_fades+0x190>)
    27cc:	681b      	ldr	r3, [r3, #0]
    27ce:	429a      	cmp	r2, r3
    27d0:	da54      	bge.n	287c <flashy_fades+0xbc>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    27d2:	2301      	movs	r3, #1
    27d4:	2200      	movs	r2, #0
    27d6:	2101      	movs	r1, #1
    27d8:	2000      	movs	r0, #0
    27da:	4c5e      	ldr	r4, [pc, #376]	; (2954 <flashy_fades+0x194>)
    27dc:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    27de:	2301      	movs	r3, #1
    27e0:	2200      	movs	r2, #0
    27e2:	2102      	movs	r1, #2
    27e4:	2000      	movs	r0, #0
    27e6:	4c5b      	ldr	r4, [pc, #364]	; (2954 <flashy_fades+0x194>)
    27e8:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    27ea:	2301      	movs	r3, #1
    27ec:	2200      	movs	r2, #0
    27ee:	2103      	movs	r1, #3
    27f0:	2000      	movs	r0, #0
    27f2:	4c58      	ldr	r4, [pc, #352]	; (2954 <flashy_fades+0x194>)
    27f4:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    27f6:	2301      	movs	r3, #1
    27f8:	2200      	movs	r2, #0
    27fa:	2104      	movs	r1, #4
    27fc:	2000      	movs	r0, #0
    27fe:	4c55      	ldr	r4, [pc, #340]	; (2954 <flashy_fades+0x194>)
    2800:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    2802:	2301      	movs	r3, #1
    2804:	2201      	movs	r2, #1
    2806:	2102      	movs	r1, #2
    2808:	2000      	movs	r0, #0
    280a:	4c52      	ldr	r4, [pc, #328]	; (2954 <flashy_fades+0x194>)
    280c:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    280e:	2301      	movs	r3, #1
    2810:	2201      	movs	r2, #1
    2812:	2101      	movs	r1, #1
    2814:	2000      	movs	r0, #0
    2816:	4c4f      	ldr	r4, [pc, #316]	; (2954 <flashy_fades+0x194>)
    2818:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    281a:	2301      	movs	r3, #1
    281c:	2202      	movs	r2, #2
    281e:	2102      	movs	r1, #2
    2820:	2000      	movs	r0, #0
    2822:	4c4c      	ldr	r4, [pc, #304]	; (2954 <flashy_fades+0x194>)
    2824:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    2826:	2301      	movs	r3, #1
    2828:	2202      	movs	r2, #2
    282a:	2101      	movs	r1, #1
    282c:	2000      	movs	r0, #0
    282e:	4c49      	ldr	r4, [pc, #292]	; (2954 <flashy_fades+0x194>)
    2830:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    2832:	2301      	movs	r3, #1
    2834:	2202      	movs	r2, #2
    2836:	2104      	movs	r1, #4
    2838:	2000      	movs	r0, #0
    283a:	4c46      	ldr	r4, [pc, #280]	; (2954 <flashy_fades+0x194>)
    283c:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    283e:	2301      	movs	r3, #1
    2840:	2202      	movs	r2, #2
    2842:	2103      	movs	r1, #3
    2844:	2000      	movs	r0, #0
    2846:	4c43      	ldr	r4, [pc, #268]	; (2954 <flashy_fades+0x194>)
    2848:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    284a:	2301      	movs	r3, #1
    284c:	2201      	movs	r2, #1
    284e:	2103      	movs	r1, #3
    2850:	2000      	movs	r0, #0
    2852:	4c40      	ldr	r4, [pc, #256]	; (2954 <flashy_fades+0x194>)
    2854:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    2856:	2301      	movs	r3, #1
    2858:	2201      	movs	r2, #1
    285a:	2104      	movs	r1, #4
    285c:	2000      	movs	r0, #0
    285e:	4c3d      	ldr	r4, [pc, #244]	; (2954 <flashy_fades+0x194>)
    2860:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    2862:	2301      	movs	r3, #1
    2864:	2203      	movs	r2, #3
    2866:	2102      	movs	r1, #2
    2868:	2000      	movs	r0, #0
    286a:	4c3a      	ldr	r4, [pc, #232]	; (2954 <flashy_fades+0x194>)
    286c:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    286e:	2301      	movs	r3, #1
    2870:	2203      	movs	r2, #3
    2872:	2101      	movs	r1, #1
    2874:	2000      	movs	r0, #0
    2876:	4c37      	ldr	r4, [pc, #220]	; (2954 <flashy_fades+0x194>)
    2878:	47a0      	blx	r4
    287a:	e053      	b.n	2924 <flashy_fades+0x164>
	}
	else
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,false);
    287c:	2300      	movs	r3, #0
    287e:	2200      	movs	r2, #0
    2880:	2101      	movs	r1, #1
    2882:	2000      	movs	r0, #0
    2884:	4c33      	ldr	r4, [pc, #204]	; (2954 <flashy_fades+0x194>)
    2886:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,false);
    2888:	2300      	movs	r3, #0
    288a:	2200      	movs	r2, #0
    288c:	2102      	movs	r1, #2
    288e:	2000      	movs	r0, #0
    2890:	4c30      	ldr	r4, [pc, #192]	; (2954 <flashy_fades+0x194>)
    2892:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    2894:	2300      	movs	r3, #0
    2896:	2200      	movs	r2, #0
    2898:	2103      	movs	r1, #3
    289a:	2000      	movs	r0, #0
    289c:	4c2d      	ldr	r4, [pc, #180]	; (2954 <flashy_fades+0x194>)
    289e:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    28a0:	2300      	movs	r3, #0
    28a2:	2200      	movs	r2, #0
    28a4:	2104      	movs	r1, #4
    28a6:	2000      	movs	r0, #0
    28a8:	4c2a      	ldr	r4, [pc, #168]	; (2954 <flashy_fades+0x194>)
    28aa:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    28ac:	2300      	movs	r3, #0
    28ae:	2201      	movs	r2, #1
    28b0:	2102      	movs	r1, #2
    28b2:	2000      	movs	r0, #0
    28b4:	4c27      	ldr	r4, [pc, #156]	; (2954 <flashy_fades+0x194>)
    28b6:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    28b8:	2300      	movs	r3, #0
    28ba:	2201      	movs	r2, #1
    28bc:	2101      	movs	r1, #1
    28be:	2000      	movs	r0, #0
    28c0:	4c24      	ldr	r4, [pc, #144]	; (2954 <flashy_fades+0x194>)
    28c2:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    28c4:	2300      	movs	r3, #0
    28c6:	2202      	movs	r2, #2
    28c8:	2102      	movs	r1, #2
    28ca:	2000      	movs	r0, #0
    28cc:	4c21      	ldr	r4, [pc, #132]	; (2954 <flashy_fades+0x194>)
    28ce:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    28d0:	2300      	movs	r3, #0
    28d2:	2202      	movs	r2, #2
    28d4:	2101      	movs	r1, #1
    28d6:	2000      	movs	r0, #0
    28d8:	4c1e      	ldr	r4, [pc, #120]	; (2954 <flashy_fades+0x194>)
    28da:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,false);
    28dc:	2300      	movs	r3, #0
    28de:	2202      	movs	r2, #2
    28e0:	2104      	movs	r1, #4
    28e2:	2000      	movs	r0, #0
    28e4:	4c1b      	ldr	r4, [pc, #108]	; (2954 <flashy_fades+0x194>)
    28e6:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,false);
    28e8:	2300      	movs	r3, #0
    28ea:	2202      	movs	r2, #2
    28ec:	2103      	movs	r1, #3
    28ee:	2000      	movs	r0, #0
    28f0:	4c18      	ldr	r4, [pc, #96]	; (2954 <flashy_fades+0x194>)
    28f2:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    28f4:	2300      	movs	r3, #0
    28f6:	2201      	movs	r2, #1
    28f8:	2103      	movs	r1, #3
    28fa:	2000      	movs	r0, #0
    28fc:	4c15      	ldr	r4, [pc, #84]	; (2954 <flashy_fades+0x194>)
    28fe:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    2900:	2300      	movs	r3, #0
    2902:	2201      	movs	r2, #1
    2904:	2104      	movs	r1, #4
    2906:	2000      	movs	r0, #0
    2908:	4c12      	ldr	r4, [pc, #72]	; (2954 <flashy_fades+0x194>)
    290a:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    290c:	2300      	movs	r3, #0
    290e:	2203      	movs	r2, #3
    2910:	2102      	movs	r1, #2
    2912:	2000      	movs	r0, #0
    2914:	4c0f      	ldr	r4, [pc, #60]	; (2954 <flashy_fades+0x194>)
    2916:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    2918:	2300      	movs	r3, #0
    291a:	2203      	movs	r2, #3
    291c:	2101      	movs	r1, #1
    291e:	2000      	movs	r0, #0
    2920:	4c0c      	ldr	r4, [pc, #48]	; (2954 <flashy_fades+0x194>)
    2922:	47a0      	blx	r4
	}
	
	//pwm_val++;
	if (pwm_count >= PWM_FREQ)
    2924:	4b0a      	ldr	r3, [pc, #40]	; (2950 <flashy_fades+0x190>)
    2926:	681b      	ldr	r3, [r3, #0]
    2928:	2bf9      	cmp	r3, #249	; 0xf9
    292a:	dd0c      	ble.n	2946 <flashy_fades+0x186>
	{
		//pwm_val = 0;
		duty_cycle += PWM_FREQ/10;
    292c:	4b07      	ldr	r3, [pc, #28]	; (294c <flashy_fades+0x18c>)
    292e:	781b      	ldrb	r3, [r3, #0]
    2930:	3319      	adds	r3, #25
    2932:	b2da      	uxtb	r2, r3
    2934:	4b05      	ldr	r3, [pc, #20]	; (294c <flashy_fades+0x18c>)
    2936:	701a      	strb	r2, [r3, #0]
		if (duty_cycle >= PWM_FREQ)
    2938:	4b04      	ldr	r3, [pc, #16]	; (294c <flashy_fades+0x18c>)
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	2bf9      	cmp	r3, #249	; 0xf9
    293e:	d902      	bls.n	2946 <flashy_fades+0x186>
		{
			duty_cycle = PWM_FREQ/4;
    2940:	4b02      	ldr	r3, [pc, #8]	; (294c <flashy_fades+0x18c>)
    2942:	223e      	movs	r2, #62	; 0x3e
    2944:	701a      	strb	r2, [r3, #0]
		}
	}
}
    2946:	46c0      	nop			; (mov r8, r8)
    2948:	46bd      	mov	sp, r7
    294a:	bdb0      	pop	{r4, r5, r7, pc}
    294c:	20000160 	.word	0x20000160
    2950:	20001180 	.word	0x20001180
    2954:	00002cc9 	.word	0x00002cc9

00002958 <flashy_flash3>:

void flashy_flash3(void)
{
    2958:	b5b0      	push	{r4, r5, r7, lr}
    295a:	af00      	add	r7, sp, #0
	static uint8_t count = 0;
	
	reset_all_lights();
    295c:	4b38      	ldr	r3, [pc, #224]	; (2a40 <flashy_flash3+0xe8>)
    295e:	4798      	blx	r3

	configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,bool_map_1[count][0]);
    2960:	4b38      	ldr	r3, [pc, #224]	; (2a44 <flashy_flash3+0xec>)
    2962:	781b      	ldrb	r3, [r3, #0]
    2964:	001a      	movs	r2, r3
    2966:	4b38      	ldr	r3, [pc, #224]	; (2a48 <flashy_flash3+0xf0>)
    2968:	00d2      	lsls	r2, r2, #3
    296a:	5cd3      	ldrb	r3, [r2, r3]
    296c:	2202      	movs	r2, #2
    296e:	2103      	movs	r1, #3
    2970:	2000      	movs	r0, #0
    2972:	4c36      	ldr	r4, [pc, #216]	; (2a4c <flashy_flash3+0xf4>)
    2974:	47a0      	blx	r4
	configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,bool_map_1[count][1]);
    2976:	4b33      	ldr	r3, [pc, #204]	; (2a44 <flashy_flash3+0xec>)
    2978:	781b      	ldrb	r3, [r3, #0]
    297a:	4a33      	ldr	r2, [pc, #204]	; (2a48 <flashy_flash3+0xf0>)
    297c:	00db      	lsls	r3, r3, #3
    297e:	18d3      	adds	r3, r2, r3
    2980:	3301      	adds	r3, #1
    2982:	781b      	ldrb	r3, [r3, #0]
    2984:	2201      	movs	r2, #1
    2986:	2101      	movs	r1, #1
    2988:	2000      	movs	r0, #0
    298a:	4c30      	ldr	r4, [pc, #192]	; (2a4c <flashy_flash3+0xf4>)
    298c:	47a0      	blx	r4
	configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,bool_map_1[count][2]);
    298e:	4b2d      	ldr	r3, [pc, #180]	; (2a44 <flashy_flash3+0xec>)
    2990:	781b      	ldrb	r3, [r3, #0]
    2992:	4a2d      	ldr	r2, [pc, #180]	; (2a48 <flashy_flash3+0xf0>)
    2994:	00db      	lsls	r3, r3, #3
    2996:	18d3      	adds	r3, r2, r3
    2998:	3302      	adds	r3, #2
    299a:	781b      	ldrb	r3, [r3, #0]
    299c:	2202      	movs	r2, #2
    299e:	2101      	movs	r1, #1
    29a0:	2000      	movs	r0, #0
    29a2:	4c2a      	ldr	r4, [pc, #168]	; (2a4c <flashy_flash3+0xf4>)
    29a4:	47a0      	blx	r4
	configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,bool_map_1[count][3]);
    29a6:	4b27      	ldr	r3, [pc, #156]	; (2a44 <flashy_flash3+0xec>)
    29a8:	781b      	ldrb	r3, [r3, #0]
    29aa:	4a27      	ldr	r2, [pc, #156]	; (2a48 <flashy_flash3+0xf0>)
    29ac:	00db      	lsls	r3, r3, #3
    29ae:	18d3      	adds	r3, r2, r3
    29b0:	3303      	adds	r3, #3
    29b2:	781b      	ldrb	r3, [r3, #0]
    29b4:	2200      	movs	r2, #0
    29b6:	2101      	movs	r1, #1
    29b8:	2000      	movs	r0, #0
    29ba:	4c24      	ldr	r4, [pc, #144]	; (2a4c <flashy_flash3+0xf4>)
    29bc:	47a0      	blx	r4
	configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,bool_map_1[count][4]);
    29be:	4b21      	ldr	r3, [pc, #132]	; (2a44 <flashy_flash3+0xec>)
    29c0:	781b      	ldrb	r3, [r3, #0]
    29c2:	4a21      	ldr	r2, [pc, #132]	; (2a48 <flashy_flash3+0xf0>)
    29c4:	00db      	lsls	r3, r3, #3
    29c6:	18d3      	adds	r3, r2, r3
    29c8:	3304      	adds	r3, #4
    29ca:	781b      	ldrb	r3, [r3, #0]
    29cc:	2200      	movs	r2, #0
    29ce:	2102      	movs	r1, #2
    29d0:	2000      	movs	r0, #0
    29d2:	4c1e      	ldr	r4, [pc, #120]	; (2a4c <flashy_flash3+0xf4>)
    29d4:	47a0      	blx	r4
	configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,bool_map_1[count][5]);
    29d6:	4b1b      	ldr	r3, [pc, #108]	; (2a44 <flashy_flash3+0xec>)
    29d8:	781b      	ldrb	r3, [r3, #0]
    29da:	4a1b      	ldr	r2, [pc, #108]	; (2a48 <flashy_flash3+0xf0>)
    29dc:	00db      	lsls	r3, r3, #3
    29de:	18d3      	adds	r3, r2, r3
    29e0:	3305      	adds	r3, #5
    29e2:	781b      	ldrb	r3, [r3, #0]
    29e4:	2202      	movs	r2, #2
    29e6:	2102      	movs	r1, #2
    29e8:	2000      	movs	r0, #0
    29ea:	4c18      	ldr	r4, [pc, #96]	; (2a4c <flashy_flash3+0xf4>)
    29ec:	47a0      	blx	r4
	configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,bool_map_1[count][6]);
    29ee:	4b15      	ldr	r3, [pc, #84]	; (2a44 <flashy_flash3+0xec>)
    29f0:	781b      	ldrb	r3, [r3, #0]
    29f2:	4a15      	ldr	r2, [pc, #84]	; (2a48 <flashy_flash3+0xf0>)
    29f4:	00db      	lsls	r3, r3, #3
    29f6:	18d3      	adds	r3, r2, r3
    29f8:	3306      	adds	r3, #6
    29fa:	781b      	ldrb	r3, [r3, #0]
    29fc:	2201      	movs	r2, #1
    29fe:	2102      	movs	r1, #2
    2a00:	2000      	movs	r0, #0
    2a02:	4c12      	ldr	r4, [pc, #72]	; (2a4c <flashy_flash3+0xf4>)
    2a04:	47a0      	blx	r4
	configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,bool_map_1[count][7]);
    2a06:	4b0f      	ldr	r3, [pc, #60]	; (2a44 <flashy_flash3+0xec>)
    2a08:	781b      	ldrb	r3, [r3, #0]
    2a0a:	4a0f      	ldr	r2, [pc, #60]	; (2a48 <flashy_flash3+0xf0>)
    2a0c:	00db      	lsls	r3, r3, #3
    2a0e:	18d3      	adds	r3, r2, r3
    2a10:	3307      	adds	r3, #7
    2a12:	781b      	ldrb	r3, [r3, #0]
    2a14:	2202      	movs	r2, #2
    2a16:	2104      	movs	r1, #4
    2a18:	2000      	movs	r0, #0
    2a1a:	4c0c      	ldr	r4, [pc, #48]	; (2a4c <flashy_flash3+0xf4>)
    2a1c:	47a0      	blx	r4
	count++;
    2a1e:	4b09      	ldr	r3, [pc, #36]	; (2a44 <flashy_flash3+0xec>)
    2a20:	781b      	ldrb	r3, [r3, #0]
    2a22:	3301      	adds	r3, #1
    2a24:	b2da      	uxtb	r2, r3
    2a26:	4b07      	ldr	r3, [pc, #28]	; (2a44 <flashy_flash3+0xec>)
    2a28:	701a      	strb	r2, [r3, #0]
	if(count > 25)
    2a2a:	4b06      	ldr	r3, [pc, #24]	; (2a44 <flashy_flash3+0xec>)
    2a2c:	781b      	ldrb	r3, [r3, #0]
    2a2e:	2b19      	cmp	r3, #25
    2a30:	d902      	bls.n	2a38 <flashy_flash3+0xe0>
	{
		count = 0;
    2a32:	4b04      	ldr	r3, [pc, #16]	; (2a44 <flashy_flash3+0xec>)
    2a34:	2200      	movs	r2, #0
    2a36:	701a      	strb	r2, [r3, #0]
	}
}
    2a38:	46c0      	nop			; (mov r8, r8)
    2a3a:	46bd      	mov	sp, r7
    2a3c:	bdb0      	pop	{r4, r5, r7, pc}
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	00002a51 	.word	0x00002a51
    2a44:	200003f6 	.word	0x200003f6
    2a48:	20000010 	.word	0x20000010
    2a4c:	00002cc9 	.word	0x00002cc9

00002a50 <reset_all_lights>:

void reset_all_lights()
{
    2a50:	b580      	push	{r7, lr}
    2a52:	b082      	sub	sp, #8
    2a54:	af00      	add	r7, sp, #0
	for (int i=0;i<8;i++)
    2a56:	2300      	movs	r3, #0
    2a58:	607b      	str	r3, [r7, #4]
    2a5a:	e010      	b.n	2a7e <reset_all_lights+0x2e>
	{
		mcp23017_data.devices[i].outputs.ports[0] = 0x80;
    2a5c:	4a0b      	ldr	r2, [pc, #44]	; (2a8c <reset_all_lights+0x3c>)
    2a5e:	687b      	ldr	r3, [r7, #4]
    2a60:	011b      	lsls	r3, r3, #4
    2a62:	18d3      	adds	r3, r2, r3
    2a64:	3308      	adds	r3, #8
    2a66:	2280      	movs	r2, #128	; 0x80
    2a68:	701a      	strb	r2, [r3, #0]
		mcp23017_data.devices[i].outputs.ports[1] = 0x80;
    2a6a:	4a08      	ldr	r2, [pc, #32]	; (2a8c <reset_all_lights+0x3c>)
    2a6c:	687b      	ldr	r3, [r7, #4]
    2a6e:	011b      	lsls	r3, r3, #4
    2a70:	18d3      	adds	r3, r2, r3
    2a72:	3309      	adds	r3, #9
    2a74:	2280      	movs	r2, #128	; 0x80
    2a76:	701a      	strb	r2, [r3, #0]
	}
}

void reset_all_lights()
{
	for (int i=0;i<8;i++)
    2a78:	687b      	ldr	r3, [r7, #4]
    2a7a:	3301      	adds	r3, #1
    2a7c:	607b      	str	r3, [r7, #4]
    2a7e:	687b      	ldr	r3, [r7, #4]
    2a80:	2b07      	cmp	r3, #7
    2a82:	ddeb      	ble.n	2a5c <reset_all_lights+0xc>
	{
		mcp23017_data.devices[i].outputs.ports[0] = 0x80;
		mcp23017_data.devices[i].outputs.ports[1] = 0x80;
	}
}
    2a84:	46c0      	nop			; (mov r8, r8)
    2a86:	46bd      	mov	sp, r7
    2a88:	b002      	add	sp, #8
    2a8a:	bd80      	pop	{r7, pc}
    2a8c:	200000e0 	.word	0x200000e0

00002a90 <a_okay>:

bool a_okay()
{
    2a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a92:	464f      	mov	r7, r9
    2a94:	4646      	mov	r6, r8
    2a96:	b4c0      	push	{r6, r7}
    2a98:	b095      	sub	sp, #84	; 0x54
    2a9a:	af06      	add	r7, sp, #24
	char buffer[32];
	uint8_t states[8];
	mcp23017_read_all_ports(read_data,states);
    2a9c:	2308      	movs	r3, #8
    2a9e:	18fa      	adds	r2, r7, r3
    2aa0:	4b81      	ldr	r3, [pc, #516]	; (2ca8 <a_okay+0x218>)
    2aa2:	0011      	movs	r1, r2
    2aa4:	0018      	movs	r0, r3
    2aa6:	4b81      	ldr	r3, [pc, #516]	; (2cac <a_okay+0x21c>)
    2aa8:	4798      	blx	r3
	
	bool return_val = true;
    2aaa:	232f      	movs	r3, #47	; 0x2f
    2aac:	2208      	movs	r2, #8
    2aae:	4694      	mov	ip, r2
    2ab0:	44bc      	add	ip, r7
    2ab2:	4463      	add	r3, ip
    2ab4:	2201      	movs	r2, #1
    2ab6:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
    2ab8:	2300      	movs	r3, #0
    2aba:	633b      	str	r3, [r7, #48]	; 0x30
    2abc:	e0a2      	b.n	2c04 <a_okay+0x174>
	{
		if (mcp23017_data.devices[i].should_be_enabled)
    2abe:	4b7c      	ldr	r3, [pc, #496]	; (2cb0 <a_okay+0x220>)
    2ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2ac2:	0112      	lsls	r2, r2, #4
    2ac4:	5cd3      	ldrb	r3, [r2, r3]
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	d06e      	beq.n	2ba8 <a_okay+0x118>
		{
			mcp23017_data.devices[i].output_errors.ports[0] = mcp23017_data.devices[i].outputs.ports[0] - read_data[0][i];
    2aca:	4a79      	ldr	r2, [pc, #484]	; (2cb0 <a_okay+0x220>)
    2acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2ace:	011b      	lsls	r3, r3, #4
    2ad0:	18d3      	adds	r3, r2, r3
    2ad2:	3308      	adds	r3, #8
    2ad4:	781a      	ldrb	r2, [r3, #0]
    2ad6:	4974      	ldr	r1, [pc, #464]	; (2ca8 <a_okay+0x218>)
    2ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2ada:	18cb      	adds	r3, r1, r3
    2adc:	781b      	ldrb	r3, [r3, #0]
    2ade:	1ad3      	subs	r3, r2, r3
    2ae0:	b2d9      	uxtb	r1, r3
    2ae2:	4a73      	ldr	r2, [pc, #460]	; (2cb0 <a_okay+0x220>)
    2ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2ae6:	011b      	lsls	r3, r3, #4
    2ae8:	18d3      	adds	r3, r2, r3
    2aea:	330c      	adds	r3, #12
    2aec:	1c0a      	adds	r2, r1, #0
    2aee:	701a      	strb	r2, [r3, #0]
			mcp23017_data.devices[i].output_errors.ports[1] = mcp23017_data.devices[i].outputs.ports[1] - read_data[1][i];
    2af0:	4a6f      	ldr	r2, [pc, #444]	; (2cb0 <a_okay+0x220>)
    2af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2af4:	011b      	lsls	r3, r3, #4
    2af6:	18d3      	adds	r3, r2, r3
    2af8:	3309      	adds	r3, #9
    2afa:	781a      	ldrb	r2, [r3, #0]
    2afc:	496a      	ldr	r1, [pc, #424]	; (2ca8 <a_okay+0x218>)
    2afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2b00:	18cb      	adds	r3, r1, r3
    2b02:	3308      	adds	r3, #8
    2b04:	781b      	ldrb	r3, [r3, #0]
    2b06:	1ad3      	subs	r3, r2, r3
    2b08:	b2d9      	uxtb	r1, r3
    2b0a:	4a69      	ldr	r2, [pc, #420]	; (2cb0 <a_okay+0x220>)
    2b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2b0e:	011b      	lsls	r3, r3, #4
    2b10:	18d3      	adds	r3, r2, r3
    2b12:	330d      	adds	r3, #13
    2b14:	1c0a      	adds	r2, r1, #0
    2b16:	701a      	strb	r2, [r3, #0]
			
			if ((mcp23017_data.devices[i].output_errors.ports[0] + mcp23017_data.devices[i].output_errors.ports[1]) > 0)
    2b18:	4a65      	ldr	r2, [pc, #404]	; (2cb0 <a_okay+0x220>)
    2b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2b1c:	011b      	lsls	r3, r3, #4
    2b1e:	18d3      	adds	r3, r2, r3
    2b20:	330c      	adds	r3, #12
    2b22:	781b      	ldrb	r3, [r3, #0]
    2b24:	0019      	movs	r1, r3
    2b26:	4a62      	ldr	r2, [pc, #392]	; (2cb0 <a_okay+0x220>)
    2b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2b2a:	011b      	lsls	r3, r3, #4
    2b2c:	18d3      	adds	r3, r2, r3
    2b2e:	330d      	adds	r3, #13
    2b30:	781b      	ldrb	r3, [r3, #0]
    2b32:	18cb      	adds	r3, r1, r3
    2b34:	2b00      	cmp	r3, #0
    2b36:	dd06      	ble.n	2b46 <a_okay+0xb6>
			{
				mcp23017_data.devices[i].error_detected = true;
    2b38:	4a5d      	ldr	r2, [pc, #372]	; (2cb0 <a_okay+0x220>)
    2b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2b3c:	011b      	lsls	r3, r3, #4
    2b3e:	18d3      	adds	r3, r2, r3
    2b40:	3302      	adds	r3, #2
    2b42:	2201      	movs	r2, #1
    2b44:	701a      	strb	r2, [r3, #0]
			}
			
			if ((read_data[0][i] & ~0x80) != (mcp23017_data.devices[i].outputs.ports[0] & ~0x80))
    2b46:	4a58      	ldr	r2, [pc, #352]	; (2ca8 <a_okay+0x218>)
    2b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2b4a:	18d3      	adds	r3, r2, r3
    2b4c:	781a      	ldrb	r2, [r3, #0]
    2b4e:	4958      	ldr	r1, [pc, #352]	; (2cb0 <a_okay+0x220>)
    2b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2b52:	011b      	lsls	r3, r3, #4
    2b54:	18cb      	adds	r3, r1, r3
    2b56:	3308      	adds	r3, #8
    2b58:	781b      	ldrb	r3, [r3, #0]
    2b5a:	4053      	eors	r3, r2
    2b5c:	b2db      	uxtb	r3, r3
    2b5e:	001a      	movs	r2, r3
    2b60:	2380      	movs	r3, #128	; 0x80
    2b62:	439a      	bics	r2, r3
    2b64:	1e13      	subs	r3, r2, #0
    2b66:	d006      	beq.n	2b76 <a_okay+0xe6>
			{
				return_val = false;
    2b68:	232f      	movs	r3, #47	; 0x2f
    2b6a:	2208      	movs	r2, #8
    2b6c:	4694      	mov	ip, r2
    2b6e:	44bc      	add	ip, r7
    2b70:	4463      	add	r3, ip
    2b72:	2200      	movs	r2, #0
    2b74:	701a      	strb	r2, [r3, #0]
			}
			if ((read_data[1][i] & ~0x80) != (mcp23017_data.devices[i].outputs.ports[1] & ~0x80))
    2b76:	4a4c      	ldr	r2, [pc, #304]	; (2ca8 <a_okay+0x218>)
    2b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2b7a:	18d3      	adds	r3, r2, r3
    2b7c:	3308      	adds	r3, #8
    2b7e:	781a      	ldrb	r2, [r3, #0]
    2b80:	494b      	ldr	r1, [pc, #300]	; (2cb0 <a_okay+0x220>)
    2b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2b84:	011b      	lsls	r3, r3, #4
    2b86:	18cb      	adds	r3, r1, r3
    2b88:	3309      	adds	r3, #9
    2b8a:	781b      	ldrb	r3, [r3, #0]
    2b8c:	4053      	eors	r3, r2
    2b8e:	b2db      	uxtb	r3, r3
    2b90:	001a      	movs	r2, r3
    2b92:	2380      	movs	r3, #128	; 0x80
    2b94:	439a      	bics	r2, r3
    2b96:	1e13      	subs	r3, r2, #0
    2b98:	d006      	beq.n	2ba8 <a_okay+0x118>
			{
				return_val = false;
    2b9a:	232f      	movs	r3, #47	; 0x2f
    2b9c:	2208      	movs	r2, #8
    2b9e:	4694      	mov	ip, r2
    2ba0:	44bc      	add	ip, r7
    2ba2:	4463      	add	r3, ip
    2ba4:	2200      	movs	r2, #0
    2ba6:	701a      	strb	r2, [r3, #0]
			}
		}
		mcp23017_data.devices[i].status = states[i];
    2ba8:	2308      	movs	r3, #8
    2baa:	18fa      	adds	r2, r7, r3
    2bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2bae:	18d3      	adds	r3, r2, r3
    2bb0:	7819      	ldrb	r1, [r3, #0]
    2bb2:	4a3f      	ldr	r2, [pc, #252]	; (2cb0 <a_okay+0x220>)
    2bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2bb6:	011b      	lsls	r3, r3, #4
    2bb8:	18d3      	adds	r3, r2, r3
    2bba:	3303      	adds	r3, #3
    2bbc:	1c0a      	adds	r2, r1, #0
    2bbe:	701a      	strb	r2, [r3, #0]
		sprintf(buffer,"ADDR: %d -> %d\n",i,mcp23017_data.devices[i].status);
    2bc0:	4a3b      	ldr	r2, [pc, #236]	; (2cb0 <a_okay+0x220>)
    2bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2bc4:	011b      	lsls	r3, r3, #4
    2bc6:	18d3      	adds	r3, r2, r3
    2bc8:	3303      	adds	r3, #3
    2bca:	781b      	ldrb	r3, [r3, #0]
    2bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2bce:	4939      	ldr	r1, [pc, #228]	; (2cb4 <a_okay+0x224>)
    2bd0:	2008      	movs	r0, #8
    2bd2:	2408      	movs	r4, #8
    2bd4:	46a4      	mov	ip, r4
    2bd6:	44bc      	add	ip, r7
    2bd8:	4460      	add	r0, ip
    2bda:	4c37      	ldr	r4, [pc, #220]	; (2cb8 <a_okay+0x228>)
    2bdc:	47a0      	blx	r4
		ble_uart_write(buffer);
    2bde:	2308      	movs	r3, #8
    2be0:	2208      	movs	r2, #8
    2be2:	4694      	mov	ip, r2
    2be4:	44bc      	add	ip, r7
    2be6:	4463      	add	r3, ip
    2be8:	0018      	movs	r0, r3
    2bea:	4b34      	ldr	r3, [pc, #208]	; (2cbc <a_okay+0x22c>)
    2bec:	4798      	blx	r3
		sb_uart_write(buffer);
    2bee:	2308      	movs	r3, #8
    2bf0:	2208      	movs	r2, #8
    2bf2:	4694      	mov	ip, r2
    2bf4:	44bc      	add	ip, r7
    2bf6:	4463      	add	r3, ip
    2bf8:	0018      	movs	r0, r3
    2bfa:	4b31      	ldr	r3, [pc, #196]	; (2cc0 <a_okay+0x230>)
    2bfc:	4798      	blx	r3
	char buffer[32];
	uint8_t states[8];
	mcp23017_read_all_ports(read_data,states);
	
	bool return_val = true;
	for (int i=0;i<8;i++)
    2bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2c00:	3301      	adds	r3, #1
    2c02:	633b      	str	r3, [r7, #48]	; 0x30
    2c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2c06:	2b07      	cmp	r3, #7
    2c08:	dc00      	bgt.n	2c0c <a_okay+0x17c>
    2c0a:	e758      	b.n	2abe <a_okay+0x2e>
		mcp23017_data.devices[i].status = states[i];
		sprintf(buffer,"ADDR: %d -> %d\n",i,mcp23017_data.devices[i].status);
		ble_uart_write(buffer);
		sb_uart_write(buffer);
	}
	sprintf(buffer,"ERR: %d%d%d%d%d%d%d%d\r\n",mcp23017_data.devices[7].error_detected,mcp23017_data.devices[6].error_detected,mcp23017_data.devices[5].error_detected,mcp23017_data.devices[4].error_detected,mcp23017_data.devices[3].error_detected,mcp23017_data.devices[2].error_detected,mcp23017_data.devices[1].error_detected,mcp23017_data.devices[0].error_detected);
    2c0c:	4b28      	ldr	r3, [pc, #160]	; (2cb0 <a_okay+0x220>)
    2c0e:	2272      	movs	r2, #114	; 0x72
    2c10:	5c9b      	ldrb	r3, [r3, r2]
    2c12:	607b      	str	r3, [r7, #4]
    2c14:	4b26      	ldr	r3, [pc, #152]	; (2cb0 <a_okay+0x220>)
    2c16:	2262      	movs	r2, #98	; 0x62
    2c18:	5c9b      	ldrb	r3, [r3, r2]
    2c1a:	603b      	str	r3, [r7, #0]
    2c1c:	4b24      	ldr	r3, [pc, #144]	; (2cb0 <a_okay+0x220>)
    2c1e:	2252      	movs	r2, #82	; 0x52
    2c20:	5c9b      	ldrb	r3, [r3, r2]
    2c22:	001c      	movs	r4, r3
    2c24:	4b22      	ldr	r3, [pc, #136]	; (2cb0 <a_okay+0x220>)
    2c26:	2242      	movs	r2, #66	; 0x42
    2c28:	5c9b      	ldrb	r3, [r3, r2]
    2c2a:	001d      	movs	r5, r3
    2c2c:	4b20      	ldr	r3, [pc, #128]	; (2cb0 <a_okay+0x220>)
    2c2e:	2232      	movs	r2, #50	; 0x32
    2c30:	5c9b      	ldrb	r3, [r3, r2]
    2c32:	001e      	movs	r6, r3
    2c34:	4b1e      	ldr	r3, [pc, #120]	; (2cb0 <a_okay+0x220>)
    2c36:	2222      	movs	r2, #34	; 0x22
    2c38:	5c9b      	ldrb	r3, [r3, r2]
    2c3a:	001a      	movs	r2, r3
    2c3c:	4b1c      	ldr	r3, [pc, #112]	; (2cb0 <a_okay+0x220>)
    2c3e:	7c9b      	ldrb	r3, [r3, #18]
    2c40:	469c      	mov	ip, r3
    2c42:	4b1b      	ldr	r3, [pc, #108]	; (2cb0 <a_okay+0x220>)
    2c44:	789b      	ldrb	r3, [r3, #2]
    2c46:	4699      	mov	r9, r3
    2c48:	491e      	ldr	r1, [pc, #120]	; (2cc4 <a_okay+0x234>)
    2c4a:	2008      	movs	r0, #8
    2c4c:	2308      	movs	r3, #8
    2c4e:	4698      	mov	r8, r3
    2c50:	44b8      	add	r8, r7
    2c52:	4440      	add	r0, r8
    2c54:	464b      	mov	r3, r9
    2c56:	9305      	str	r3, [sp, #20]
    2c58:	4663      	mov	r3, ip
    2c5a:	9304      	str	r3, [sp, #16]
    2c5c:	9203      	str	r2, [sp, #12]
    2c5e:	9602      	str	r6, [sp, #8]
    2c60:	9501      	str	r5, [sp, #4]
    2c62:	9400      	str	r4, [sp, #0]
    2c64:	683b      	ldr	r3, [r7, #0]
    2c66:	687a      	ldr	r2, [r7, #4]
    2c68:	4c13      	ldr	r4, [pc, #76]	; (2cb8 <a_okay+0x228>)
    2c6a:	47a0      	blx	r4
	ble_uart_write(buffer);
    2c6c:	2308      	movs	r3, #8
    2c6e:	2208      	movs	r2, #8
    2c70:	4694      	mov	ip, r2
    2c72:	44bc      	add	ip, r7
    2c74:	4463      	add	r3, ip
    2c76:	0018      	movs	r0, r3
    2c78:	4b10      	ldr	r3, [pc, #64]	; (2cbc <a_okay+0x22c>)
    2c7a:	4798      	blx	r3
	sb_uart_write(buffer);
    2c7c:	2308      	movs	r3, #8
    2c7e:	2208      	movs	r2, #8
    2c80:	4694      	mov	ip, r2
    2c82:	44bc      	add	ip, r7
    2c84:	4463      	add	r3, ip
    2c86:	0018      	movs	r0, r3
    2c88:	4b0d      	ldr	r3, [pc, #52]	; (2cc0 <a_okay+0x230>)
    2c8a:	4798      	blx	r3
	
	return return_val;
    2c8c:	232f      	movs	r3, #47	; 0x2f
    2c8e:	2208      	movs	r2, #8
    2c90:	4694      	mov	ip, r2
    2c92:	44bc      	add	ip, r7
    2c94:	4463      	add	r3, ip
    2c96:	781b      	ldrb	r3, [r3, #0]
}
    2c98:	0018      	movs	r0, r3
    2c9a:	46bd      	mov	sp, r7
    2c9c:	b00f      	add	sp, #60	; 0x3c
    2c9e:	bc0c      	pop	{r2, r3}
    2ca0:	4690      	mov	r8, r2
    2ca2:	4699      	mov	r9, r3
    2ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	200008a4 	.word	0x200008a4
    2cac:	00003209 	.word	0x00003209
    2cb0:	200000e0 	.word	0x200000e0
    2cb4:	0000709c 	.word	0x0000709c
    2cb8:	00005c91 	.word	0x00005c91
    2cbc:	0000102d 	.word	0x0000102d
    2cc0:	0000428d 	.word	0x0000428d
    2cc4:	000070ac 	.word	0x000070ac

00002cc8 <configure_pin>:

void configure_pin(uint8_t port, uint8_t addr, uint8_t pin, bool value)
{
    2cc8:	b5b0      	push	{r4, r5, r7, lr}
    2cca:	b082      	sub	sp, #8
    2ccc:	af00      	add	r7, sp, #0
    2cce:	0005      	movs	r5, r0
    2cd0:	000c      	movs	r4, r1
    2cd2:	0010      	movs	r0, r2
    2cd4:	0019      	movs	r1, r3
    2cd6:	1dfb      	adds	r3, r7, #7
    2cd8:	1c2a      	adds	r2, r5, #0
    2cda:	701a      	strb	r2, [r3, #0]
    2cdc:	1dbb      	adds	r3, r7, #6
    2cde:	1c22      	adds	r2, r4, #0
    2ce0:	701a      	strb	r2, [r3, #0]
    2ce2:	1d7b      	adds	r3, r7, #5
    2ce4:	1c02      	adds	r2, r0, #0
    2ce6:	701a      	strb	r2, [r3, #0]
    2ce8:	1d3b      	adds	r3, r7, #4
    2cea:	1c0a      	adds	r2, r1, #0
    2cec:	701a      	strb	r2, [r3, #0]
	if(value)
    2cee:	1d3b      	adds	r3, r7, #4
    2cf0:	781b      	ldrb	r3, [r3, #0]
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d01f      	beq.n	2d36 <configure_pin+0x6e>
	{
		mcp23017_data.devices[addr].outputs.ports[port] |= (1 << pin);
    2cf6:	1dbb      	adds	r3, r7, #6
    2cf8:	781a      	ldrb	r2, [r3, #0]
    2cfa:	1dfb      	adds	r3, r7, #7
    2cfc:	781b      	ldrb	r3, [r3, #0]
    2cfe:	1db9      	adds	r1, r7, #6
    2d00:	7808      	ldrb	r0, [r1, #0]
    2d02:	1df9      	adds	r1, r7, #7
    2d04:	7809      	ldrb	r1, [r1, #0]
    2d06:	4c1e      	ldr	r4, [pc, #120]	; (2d80 <configure_pin+0xb8>)
    2d08:	0100      	lsls	r0, r0, #4
    2d0a:	1820      	adds	r0, r4, r0
    2d0c:	1841      	adds	r1, r0, r1
    2d0e:	3108      	adds	r1, #8
    2d10:	7809      	ldrb	r1, [r1, #0]
    2d12:	b248      	sxtb	r0, r1
    2d14:	1d79      	adds	r1, r7, #5
    2d16:	7809      	ldrb	r1, [r1, #0]
    2d18:	2401      	movs	r4, #1
    2d1a:	408c      	lsls	r4, r1
    2d1c:	0021      	movs	r1, r4
    2d1e:	b249      	sxtb	r1, r1
    2d20:	4301      	orrs	r1, r0
    2d22:	b249      	sxtb	r1, r1
    2d24:	b2c8      	uxtb	r0, r1
    2d26:	4916      	ldr	r1, [pc, #88]	; (2d80 <configure_pin+0xb8>)
    2d28:	0112      	lsls	r2, r2, #4
    2d2a:	188a      	adds	r2, r1, r2
    2d2c:	18d3      	adds	r3, r2, r3
    2d2e:	3308      	adds	r3, #8
    2d30:	1c02      	adds	r2, r0, #0
    2d32:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		mcp23017_data.devices[addr].outputs.ports[port] &= ~(1 << pin);
	}
}
    2d34:	e020      	b.n	2d78 <configure_pin+0xb0>
	{
		mcp23017_data.devices[addr].outputs.ports[port] |= (1 << pin);
	}
	else
	{
		mcp23017_data.devices[addr].outputs.ports[port] &= ~(1 << pin);
    2d36:	1dbb      	adds	r3, r7, #6
    2d38:	781a      	ldrb	r2, [r3, #0]
    2d3a:	1dfb      	adds	r3, r7, #7
    2d3c:	781b      	ldrb	r3, [r3, #0]
    2d3e:	1db9      	adds	r1, r7, #6
    2d40:	7808      	ldrb	r0, [r1, #0]
    2d42:	1df9      	adds	r1, r7, #7
    2d44:	7809      	ldrb	r1, [r1, #0]
    2d46:	4c0e      	ldr	r4, [pc, #56]	; (2d80 <configure_pin+0xb8>)
    2d48:	0100      	lsls	r0, r0, #4
    2d4a:	1820      	adds	r0, r4, r0
    2d4c:	1841      	adds	r1, r0, r1
    2d4e:	3108      	adds	r1, #8
    2d50:	7809      	ldrb	r1, [r1, #0]
    2d52:	b249      	sxtb	r1, r1
    2d54:	1d78      	adds	r0, r7, #5
    2d56:	7800      	ldrb	r0, [r0, #0]
    2d58:	2401      	movs	r4, #1
    2d5a:	4084      	lsls	r4, r0
    2d5c:	0020      	movs	r0, r4
    2d5e:	b240      	sxtb	r0, r0
    2d60:	43c0      	mvns	r0, r0
    2d62:	b240      	sxtb	r0, r0
    2d64:	4001      	ands	r1, r0
    2d66:	b249      	sxtb	r1, r1
    2d68:	b2c8      	uxtb	r0, r1
    2d6a:	4905      	ldr	r1, [pc, #20]	; (2d80 <configure_pin+0xb8>)
    2d6c:	0112      	lsls	r2, r2, #4
    2d6e:	188a      	adds	r2, r1, r2
    2d70:	18d3      	adds	r3, r2, r3
    2d72:	3308      	adds	r3, #8
    2d74:	1c02      	adds	r2, r0, #0
    2d76:	701a      	strb	r2, [r3, #0]
	}
}
    2d78:	46c0      	nop			; (mov r8, r8)
    2d7a:	46bd      	mov	sp, r7
    2d7c:	b002      	add	sp, #8
    2d7e:	bdb0      	pop	{r4, r5, r7, pc}
    2d80:	200000e0 	.word	0x200000e0

00002d84 <mcp23017_check_all>:
		mcp23017_data.devices[i].status = STATUS_OK;
	}
}

void mcp23017_check_all()
{
    2d84:	b590      	push	{r4, r7, lr}
    2d86:	b08b      	sub	sp, #44	; 0x2c
    2d88:	af00      	add	r7, sp, #0
	bool returnVal = false;
    2d8a:	2327      	movs	r3, #39	; 0x27
    2d8c:	18fb      	adds	r3, r7, r3
    2d8e:	2200      	movs	r2, #0
    2d90:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[32];
	for (int i=0;i<8;i++)
    2d92:	2300      	movs	r3, #0
    2d94:	623b      	str	r3, [r7, #32]
    2d96:	e025      	b.n	2de4 <mcp23017_check_all+0x60>
	{
		if (mcp23017_data.devices[i].should_be_enabled & mcp23017_data.devices[i].status != STATUS_OK)
    2d98:	4b1c      	ldr	r3, [pc, #112]	; (2e0c <mcp23017_check_all+0x88>)
    2d9a:	6a3a      	ldr	r2, [r7, #32]
    2d9c:	0112      	lsls	r2, r2, #4
    2d9e:	5cd3      	ldrb	r3, [r2, r3]
    2da0:	0019      	movs	r1, r3
    2da2:	4a1a      	ldr	r2, [pc, #104]	; (2e0c <mcp23017_check_all+0x88>)
    2da4:	6a3b      	ldr	r3, [r7, #32]
    2da6:	011b      	lsls	r3, r3, #4
    2da8:	18d3      	adds	r3, r2, r3
    2daa:	3303      	adds	r3, #3
    2dac:	781b      	ldrb	r3, [r3, #0]
    2dae:	1e5a      	subs	r2, r3, #1
    2db0:	4193      	sbcs	r3, r2
    2db2:	b2db      	uxtb	r3, r3
    2db4:	400b      	ands	r3, r1
    2db6:	d012      	beq.n	2dde <mcp23017_check_all+0x5a>
		{
			sprintf(buffer,"E: %d - %d\n",i,mcp23017_data.devices[i].status);
    2db8:	4a14      	ldr	r2, [pc, #80]	; (2e0c <mcp23017_check_all+0x88>)
    2dba:	6a3b      	ldr	r3, [r7, #32]
    2dbc:	011b      	lsls	r3, r3, #4
    2dbe:	18d3      	adds	r3, r2, r3
    2dc0:	3303      	adds	r3, #3
    2dc2:	781b      	ldrb	r3, [r3, #0]
    2dc4:	6a3a      	ldr	r2, [r7, #32]
    2dc6:	4912      	ldr	r1, [pc, #72]	; (2e10 <mcp23017_check_all+0x8c>)
    2dc8:	0038      	movs	r0, r7
    2dca:	4c12      	ldr	r4, [pc, #72]	; (2e14 <mcp23017_check_all+0x90>)
    2dcc:	47a0      	blx	r4
			ble_uart_write(buffer);
    2dce:	003b      	movs	r3, r7
    2dd0:	0018      	movs	r0, r3
    2dd2:	4b11      	ldr	r3, [pc, #68]	; (2e18 <mcp23017_check_all+0x94>)
    2dd4:	4798      	blx	r3
			returnVal = true;
    2dd6:	2327      	movs	r3, #39	; 0x27
    2dd8:	18fb      	adds	r3, r7, r3
    2dda:	2201      	movs	r2, #1
    2ddc:	701a      	strb	r2, [r3, #0]

void mcp23017_check_all()
{
	bool returnVal = false;
	uint8_t buffer[32];
	for (int i=0;i<8;i++)
    2dde:	6a3b      	ldr	r3, [r7, #32]
    2de0:	3301      	adds	r3, #1
    2de2:	623b      	str	r3, [r7, #32]
    2de4:	6a3b      	ldr	r3, [r7, #32]
    2de6:	2b07      	cmp	r3, #7
    2de8:	ddd6      	ble.n	2d98 <mcp23017_check_all+0x14>
			sprintf(buffer,"E: %d - %d\n",i,mcp23017_data.devices[i].status);
			ble_uart_write(buffer);
			returnVal = true;
		}
	}
	if (!returnVal)
    2dea:	2327      	movs	r3, #39	; 0x27
    2dec:	18fb      	adds	r3, r7, r3
    2dee:	781b      	ldrb	r3, [r3, #0]
    2df0:	2201      	movs	r2, #1
    2df2:	4053      	eors	r3, r2
    2df4:	b2db      	uxtb	r3, r3
    2df6:	2b00      	cmp	r3, #0
    2df8:	d003      	beq.n	2e02 <mcp23017_check_all+0x7e>
	{
		ble_uart_write("ALL OK");
    2dfa:	4b08      	ldr	r3, [pc, #32]	; (2e1c <mcp23017_check_all+0x98>)
    2dfc:	0018      	movs	r0, r3
    2dfe:	4b06      	ldr	r3, [pc, #24]	; (2e18 <mcp23017_check_all+0x94>)
    2e00:	4798      	blx	r3
	}
    2e02:	46c0      	nop			; (mov r8, r8)
    2e04:	46bd      	mov	sp, r7
    2e06:	b00b      	add	sp, #44	; 0x2c
    2e08:	bd90      	pop	{r4, r7, pc}
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	200000e0 	.word	0x200000e0
    2e10:	000070c4 	.word	0x000070c4
    2e14:	00005c91 	.word	0x00005c91
    2e18:	0000102d 	.word	0x0000102d
    2e1c:	000070d0 	.word	0x000070d0

00002e20 <i2c_write>:
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
	i2c_master_enable(&i2c_master_instance);
}

uint8_t i2c_write(uint8_t address,uint8_t* data, uint8_t data_size)
{
    2e20:	b580      	push	{r7, lr}
    2e22:	b086      	sub	sp, #24
    2e24:	af00      	add	r7, sp, #0
    2e26:	6039      	str	r1, [r7, #0]
    2e28:	0011      	movs	r1, r2
    2e2a:	1dfb      	adds	r3, r7, #7
    2e2c:	1c02      	adds	r2, r0, #0
    2e2e:	701a      	strb	r2, [r3, #0]
    2e30:	1dbb      	adds	r3, r7, #6
    2e32:	1c0a      	adds	r2, r1, #0
    2e34:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
    2e36:	1dfb      	adds	r3, r7, #7
    2e38:	781b      	ldrb	r3, [r3, #0]
    2e3a:	b29a      	uxth	r2, r3
    2e3c:	2308      	movs	r3, #8
    2e3e:	18fb      	adds	r3, r7, r3
    2e40:	801a      	strh	r2, [r3, #0]
    2e42:	1dbb      	adds	r3, r7, #6
    2e44:	781b      	ldrb	r3, [r3, #0]
    2e46:	b29a      	uxth	r2, r3
    2e48:	2308      	movs	r3, #8
    2e4a:	18fb      	adds	r3, r7, r3
    2e4c:	805a      	strh	r2, [r3, #2]
    2e4e:	2308      	movs	r3, #8
    2e50:	18fb      	adds	r3, r7, r3
    2e52:	683a      	ldr	r2, [r7, #0]
    2e54:	605a      	str	r2, [r3, #4]
    2e56:	2308      	movs	r3, #8
    2e58:	18fb      	adds	r3, r7, r3
    2e5a:	2200      	movs	r2, #0
    2e5c:	721a      	strb	r2, [r3, #8]
    2e5e:	2308      	movs	r3, #8
    2e60:	18fb      	adds	r3, r7, r3
    2e62:	2200      	movs	r2, #0
    2e64:	725a      	strb	r2, [r3, #9]
    2e66:	2308      	movs	r3, #8
    2e68:	18fb      	adds	r3, r7, r3
    2e6a:	2200      	movs	r2, #0
    2e6c:	729a      	strb	r2, [r3, #10]
		.data        = data,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	uint16_t timeout = 0;
    2e6e:	2316      	movs	r3, #22
    2e70:	18fb      	adds	r3, r7, r3
    2e72:	2200      	movs	r2, #0
    2e74:	801a      	strh	r2, [r3, #0]

	return i2c_master_write_packet_wait(&i2c_master_instance,&packet);
    2e76:	2308      	movs	r3, #8
    2e78:	18fa      	adds	r2, r7, r3
    2e7a:	4b05      	ldr	r3, [pc, #20]	; (2e90 <i2c_write+0x70>)
    2e7c:	0011      	movs	r1, r2
    2e7e:	0018      	movs	r0, r3
    2e80:	4b04      	ldr	r3, [pc, #16]	; (2e94 <i2c_write+0x74>)
    2e82:	4798      	blx	r3
    2e84:	0003      	movs	r3, r0
	{
		if (timeout++ == I2C_TIMEOUT) {
			break;
		}
	}*/
}
    2e86:	0018      	movs	r0, r3
    2e88:	46bd      	mov	sp, r7
    2e8a:	b006      	add	sp, #24
    2e8c:	bd80      	pop	{r7, pc}
    2e8e:	46c0      	nop			; (mov r8, r8)
    2e90:	20001184 	.word	0x20001184
    2e94:	00000af1 	.word	0x00000af1

00002e98 <i2c_read>:
	}	
	return found_array;
}

uint8_t i2c_read(uint8_t addr,uint8_t reg, uint8_t data_length,uint8_t* data_ptr)
{
    2e98:	b590      	push	{r4, r7, lr}
    2e9a:	b08b      	sub	sp, #44	; 0x2c
    2e9c:	af00      	add	r7, sp, #0
    2e9e:	0004      	movs	r4, r0
    2ea0:	0008      	movs	r0, r1
    2ea2:	0011      	movs	r1, r2
    2ea4:	603b      	str	r3, [r7, #0]
    2ea6:	1dfb      	adds	r3, r7, #7
    2ea8:	1c22      	adds	r2, r4, #0
    2eaa:	701a      	strb	r2, [r3, #0]
    2eac:	1dbb      	adds	r3, r7, #6
    2eae:	1c02      	adds	r2, r0, #0
    2eb0:	701a      	strb	r2, [r3, #0]
    2eb2:	1d7b      	adds	r3, r7, #5
    2eb4:	1c0a      	adds	r2, r1, #0
    2eb6:	701a      	strb	r2, [r3, #0]
	//uint8_t read_datab[data_length];
	uint8_t state = 0;
    2eb8:	2325      	movs	r3, #37	; 0x25
    2eba:	18fb      	adds	r3, r7, r3
    2ebc:	2200      	movs	r2, #0
    2ebe:	701a      	strb	r2, [r3, #0]
	//uint8_t address = (addr << 1) + 1;
	
	uint8_t data[2];
	data[0] = reg;
    2ec0:	2320      	movs	r3, #32
    2ec2:	18fb      	adds	r3, r7, r3
    2ec4:	1dba      	adds	r2, r7, #6
    2ec6:	7812      	ldrb	r2, [r2, #0]
    2ec8:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
    2eca:	2320      	movs	r3, #32
    2ecc:	18fb      	adds	r3, r7, r3
    2ece:	22ff      	movs	r2, #255	; 0xff
    2ed0:	705a      	strb	r2, [r3, #1]
	
	struct i2c_master_packet packet = {
    2ed2:	1dfb      	adds	r3, r7, #7
    2ed4:	781b      	ldrb	r3, [r3, #0]
    2ed6:	b29b      	uxth	r3, r3
    2ed8:	2280      	movs	r2, #128	; 0x80
    2eda:	0052      	lsls	r2, r2, #1
    2edc:	4313      	orrs	r3, r2
    2ede:	b29a      	uxth	r2, r3
    2ee0:	2314      	movs	r3, #20
    2ee2:	18fb      	adds	r3, r7, r3
    2ee4:	801a      	strh	r2, [r3, #0]
    2ee6:	1d7b      	adds	r3, r7, #5
    2ee8:	781b      	ldrb	r3, [r3, #0]
    2eea:	b29a      	uxth	r2, r3
    2eec:	2314      	movs	r3, #20
    2eee:	18fb      	adds	r3, r7, r3
    2ef0:	805a      	strh	r2, [r3, #2]
    2ef2:	2314      	movs	r3, #20
    2ef4:	18fb      	adds	r3, r7, r3
    2ef6:	2220      	movs	r2, #32
    2ef8:	18ba      	adds	r2, r7, r2
    2efa:	605a      	str	r2, [r3, #4]
    2efc:	2314      	movs	r3, #20
    2efe:	18fb      	adds	r3, r7, r3
    2f00:	2200      	movs	r2, #0
    2f02:	721a      	strb	r2, [r3, #8]
    2f04:	2314      	movs	r3, #20
    2f06:	18fb      	adds	r3, r7, r3
    2f08:	2200      	movs	r2, #0
    2f0a:	725a      	strb	r2, [r3, #9]
    2f0c:	2314      	movs	r3, #20
    2f0e:	18fb      	adds	r3, r7, r3
    2f10:	2200      	movs	r2, #0
    2f12:	729a      	strb	r2, [r3, #10]
		.data        = data,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	uint16_t timeout = 0;
    2f14:	2326      	movs	r3, #38	; 0x26
    2f16:	18fb      	adds	r3, r7, r3
    2f18:	2200      	movs	r2, #0
    2f1a:	801a      	strh	r2, [r3, #0]

	do
	{
		state = i2c_master_write_packet_wait(&i2c_master_instance,&packet);
    2f1c:	2325      	movs	r3, #37	; 0x25
    2f1e:	18fc      	adds	r4, r7, r3
    2f20:	2314      	movs	r3, #20
    2f22:	18fa      	adds	r2, r7, r3
    2f24:	4b23      	ldr	r3, [pc, #140]	; (2fb4 <i2c_read+0x11c>)
    2f26:	0011      	movs	r1, r2
    2f28:	0018      	movs	r0, r3
    2f2a:	4b23      	ldr	r3, [pc, #140]	; (2fb8 <i2c_read+0x120>)
    2f2c:	4798      	blx	r3
    2f2e:	0003      	movs	r3, r0
    2f30:	7023      	strb	r3, [r4, #0]
		if (timeout++ == I2C_TIMEOUT) {
    2f32:	2326      	movs	r3, #38	; 0x26
    2f34:	18fb      	adds	r3, r7, r3
    2f36:	881b      	ldrh	r3, [r3, #0]
    2f38:	2226      	movs	r2, #38	; 0x26
    2f3a:	18ba      	adds	r2, r7, r2
    2f3c:	1c59      	adds	r1, r3, #1
    2f3e:	8011      	strh	r1, [r2, #0]
    2f40:	2b0a      	cmp	r3, #10
    2f42:	d103      	bne.n	2f4c <i2c_read+0xb4>
			return state;
    2f44:	2325      	movs	r3, #37	; 0x25
    2f46:	18fb      	adds	r3, r7, r3
    2f48:	781b      	ldrb	r3, [r3, #0]
    2f4a:	e02e      	b.n	2faa <i2c_read+0x112>
			break;
		}
	}
	while (state != STATUS_OK);
    2f4c:	2325      	movs	r3, #37	; 0x25
    2f4e:	18fb      	adds	r3, r7, r3
    2f50:	781b      	ldrb	r3, [r3, #0]
    2f52:	2b00      	cmp	r3, #0
    2f54:	d1e2      	bne.n	2f1c <i2c_read+0x84>
	
	struct i2c_master_packet read_packet = {
    2f56:	1dfb      	adds	r3, r7, #7
    2f58:	781b      	ldrb	r3, [r3, #0]
    2f5a:	b29a      	uxth	r2, r3
    2f5c:	2308      	movs	r3, #8
    2f5e:	18fb      	adds	r3, r7, r3
    2f60:	801a      	strh	r2, [r3, #0]
    2f62:	1d7b      	adds	r3, r7, #5
    2f64:	781b      	ldrb	r3, [r3, #0]
    2f66:	b29a      	uxth	r2, r3
    2f68:	2308      	movs	r3, #8
    2f6a:	18fb      	adds	r3, r7, r3
    2f6c:	805a      	strh	r2, [r3, #2]
    2f6e:	2308      	movs	r3, #8
    2f70:	18fb      	adds	r3, r7, r3
    2f72:	683a      	ldr	r2, [r7, #0]
    2f74:	605a      	str	r2, [r3, #4]
    2f76:	2308      	movs	r3, #8
    2f78:	18fb      	adds	r3, r7, r3
    2f7a:	2200      	movs	r2, #0
    2f7c:	721a      	strb	r2, [r3, #8]
    2f7e:	2308      	movs	r3, #8
    2f80:	18fb      	adds	r3, r7, r3
    2f82:	2200      	movs	r2, #0
    2f84:	725a      	strb	r2, [r3, #9]
    2f86:	2308      	movs	r3, #8
    2f88:	18fb      	adds	r3, r7, r3
    2f8a:	2200      	movs	r2, #0
    2f8c:	729a      	strb	r2, [r3, #10]
		.data        = data_ptr,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	state = i2c_master_read_packet_wait(&i2c_master_instance,&read_packet);
    2f8e:	2325      	movs	r3, #37	; 0x25
    2f90:	18fc      	adds	r4, r7, r3
    2f92:	2308      	movs	r3, #8
    2f94:	18fa      	adds	r2, r7, r3
    2f96:	4b07      	ldr	r3, [pc, #28]	; (2fb4 <i2c_read+0x11c>)
    2f98:	0011      	movs	r1, r2
    2f9a:	0018      	movs	r0, r3
    2f9c:	4b07      	ldr	r3, [pc, #28]	; (2fbc <i2c_read+0x124>)
    2f9e:	4798      	blx	r3
    2fa0:	0003      	movs	r3, r0
    2fa2:	7023      	strb	r3, [r4, #0]
	return state;
    2fa4:	2325      	movs	r3, #37	; 0x25
    2fa6:	18fb      	adds	r3, r7, r3
    2fa8:	781b      	ldrb	r3, [r3, #0]
}
    2faa:	0018      	movs	r0, r3
    2fac:	46bd      	mov	sp, r7
    2fae:	b00b      	add	sp, #44	; 0x2c
    2fb0:	bd90      	pop	{r4, r7, pc}
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	20001184 	.word	0x20001184
    2fb8:	00000af1 	.word	0x00000af1
    2fbc:	00000949 	.word	0x00000949

00002fc0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2fc0:	b580      	push	{r7, lr}
    2fc2:	b084      	sub	sp, #16
    2fc4:	af00      	add	r7, sp, #0
    2fc6:	0002      	movs	r2, r0
    2fc8:	1dfb      	adds	r3, r7, #7
    2fca:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2fcc:	230f      	movs	r3, #15
    2fce:	18fb      	adds	r3, r7, r3
    2fd0:	1dfa      	adds	r2, r7, #7
    2fd2:	7812      	ldrb	r2, [r2, #0]
    2fd4:	09d2      	lsrs	r2, r2, #7
    2fd6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2fd8:	230e      	movs	r3, #14
    2fda:	18fb      	adds	r3, r7, r3
    2fdc:	1dfa      	adds	r2, r7, #7
    2fde:	7812      	ldrb	r2, [r2, #0]
    2fe0:	0952      	lsrs	r2, r2, #5
    2fe2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2fe4:	4b0d      	ldr	r3, [pc, #52]	; (301c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2fe6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2fe8:	230f      	movs	r3, #15
    2fea:	18fb      	adds	r3, r7, r3
    2fec:	781b      	ldrb	r3, [r3, #0]
    2fee:	2b00      	cmp	r3, #0
    2ff0:	d10f      	bne.n	3012 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2ff2:	230f      	movs	r3, #15
    2ff4:	18fb      	adds	r3, r7, r3
    2ff6:	781b      	ldrb	r3, [r3, #0]
    2ff8:	009b      	lsls	r3, r3, #2
    2ffa:	2210      	movs	r2, #16
    2ffc:	4694      	mov	ip, r2
    2ffe:	44bc      	add	ip, r7
    3000:	4463      	add	r3, ip
    3002:	3b08      	subs	r3, #8
    3004:	681a      	ldr	r2, [r3, #0]
    3006:	230e      	movs	r3, #14
    3008:	18fb      	adds	r3, r7, r3
    300a:	781b      	ldrb	r3, [r3, #0]
    300c:	01db      	lsls	r3, r3, #7
    300e:	18d3      	adds	r3, r2, r3
    3010:	e000      	b.n	3014 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3012:	2300      	movs	r3, #0
	}
}
    3014:	0018      	movs	r0, r3
    3016:	46bd      	mov	sp, r7
    3018:	b004      	add	sp, #16
    301a:	bd80      	pop	{r7, pc}
    301c:	41004400 	.word	0x41004400

00003020 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3020:	b580      	push	{r7, lr}
    3022:	b082      	sub	sp, #8
    3024:	af00      	add	r7, sp, #0
    3026:	0002      	movs	r2, r0
    3028:	1dfb      	adds	r3, r7, #7
    302a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    302c:	1dfb      	adds	r3, r7, #7
    302e:	781b      	ldrb	r3, [r3, #0]
    3030:	0018      	movs	r0, r3
    3032:	4b03      	ldr	r3, [pc, #12]	; (3040 <port_get_group_from_gpio_pin+0x20>)
    3034:	4798      	blx	r3
    3036:	0003      	movs	r3, r0
}
    3038:	0018      	movs	r0, r3
    303a:	46bd      	mov	sp, r7
    303c:	b002      	add	sp, #8
    303e:	bd80      	pop	{r7, pc}
    3040:	00002fc1 	.word	0x00002fc1

00003044 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3044:	b580      	push	{r7, lr}
    3046:	b084      	sub	sp, #16
    3048:	af00      	add	r7, sp, #0
    304a:	0002      	movs	r2, r0
    304c:	1dfb      	adds	r3, r7, #7
    304e:	701a      	strb	r2, [r3, #0]
    3050:	1dbb      	adds	r3, r7, #6
    3052:	1c0a      	adds	r2, r1, #0
    3054:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3056:	1dfb      	adds	r3, r7, #7
    3058:	781b      	ldrb	r3, [r3, #0]
    305a:	0018      	movs	r0, r3
    305c:	4b0d      	ldr	r3, [pc, #52]	; (3094 <port_pin_set_output_level+0x50>)
    305e:	4798      	blx	r3
    3060:	0003      	movs	r3, r0
    3062:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3064:	1dfb      	adds	r3, r7, #7
    3066:	781b      	ldrb	r3, [r3, #0]
    3068:	221f      	movs	r2, #31
    306a:	4013      	ands	r3, r2
    306c:	2201      	movs	r2, #1
    306e:	409a      	lsls	r2, r3
    3070:	0013      	movs	r3, r2
    3072:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3074:	1dbb      	adds	r3, r7, #6
    3076:	781b      	ldrb	r3, [r3, #0]
    3078:	2b00      	cmp	r3, #0
    307a:	d003      	beq.n	3084 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    307c:	68fb      	ldr	r3, [r7, #12]
    307e:	68ba      	ldr	r2, [r7, #8]
    3080:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3082:	e002      	b.n	308a <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3084:	68fb      	ldr	r3, [r7, #12]
    3086:	68ba      	ldr	r2, [r7, #8]
    3088:	615a      	str	r2, [r3, #20]
	}
}
    308a:	46c0      	nop			; (mov r8, r8)
    308c:	46bd      	mov	sp, r7
    308e:	b004      	add	sp, #16
    3090:	bd80      	pop	{r7, pc}
    3092:	46c0      	nop			; (mov r8, r8)
    3094:	00003021 	.word	0x00003021

00003098 <init_all_ports>:
	data[1] = 0xFF;
	state = i2c_write(MCP23017_I2C_ADDR_000,(uint8_t *)data,2);
}

uint8_t init_all_ports(void)
{
    3098:	b590      	push	{r4, r7, lr}
    309a:	b085      	sub	sp, #20
    309c:	af00      	add	r7, sp, #0
	uint8_t states = 0;
    309e:	230f      	movs	r3, #15
    30a0:	18fb      	adds	r3, r7, r3
    30a2:	2200      	movs	r2, #0
    30a4:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[1] = 0x00;
    30a6:	1d3b      	adds	r3, r7, #4
    30a8:	2200      	movs	r2, #0
    30aa:	705a      	strb	r2, [r3, #1]
	
	for (int i=0;i<8;i++)
    30ac:	2300      	movs	r3, #0
    30ae:	60bb      	str	r3, [r7, #8]
    30b0:	e036      	b.n	3120 <init_all_ports+0x88>
	{
		data[0] = MCP23017_IODIRA;
    30b2:	1d3b      	adds	r3, r7, #4
    30b4:	2200      	movs	r2, #0
    30b6:	701a      	strb	r2, [r3, #0]
		uint8_t state = i2c_write(MCP23017_I2C_ADDR_000+i,(uint8_t *)data,2);
    30b8:	68bb      	ldr	r3, [r7, #8]
    30ba:	b2db      	uxtb	r3, r3
    30bc:	3320      	adds	r3, #32
    30be:	b2db      	uxtb	r3, r3
    30c0:	1dfc      	adds	r4, r7, #7
    30c2:	1d39      	adds	r1, r7, #4
    30c4:	2202      	movs	r2, #2
    30c6:	0018      	movs	r0, r3
    30c8:	4b28      	ldr	r3, [pc, #160]	; (316c <init_all_ports+0xd4>)
    30ca:	4798      	blx	r3
    30cc:	0003      	movs	r3, r0
    30ce:	7023      	strb	r3, [r4, #0]
		if (state == STATUS_OK)
    30d0:	1dfb      	adds	r3, r7, #7
    30d2:	781b      	ldrb	r3, [r3, #0]
    30d4:	2b00      	cmp	r3, #0
    30d6:	d120      	bne.n	311a <init_all_ports+0x82>
		{
			data[0] = MCP23017_IODIRB;
    30d8:	1d3b      	adds	r3, r7, #4
    30da:	2201      	movs	r2, #1
    30dc:	701a      	strb	r2, [r3, #0]
			state = i2c_write(MCP23017_I2C_ADDR_000+i,(uint8_t *)data,2);
    30de:	68bb      	ldr	r3, [r7, #8]
    30e0:	b2db      	uxtb	r3, r3
    30e2:	3320      	adds	r3, #32
    30e4:	b2db      	uxtb	r3, r3
    30e6:	1dfc      	adds	r4, r7, #7
    30e8:	1d39      	adds	r1, r7, #4
    30ea:	2202      	movs	r2, #2
    30ec:	0018      	movs	r0, r3
    30ee:	4b1f      	ldr	r3, [pc, #124]	; (316c <init_all_ports+0xd4>)
    30f0:	4798      	blx	r3
    30f2:	0003      	movs	r3, r0
    30f4:	7023      	strb	r3, [r4, #0]
			if (state == STATUS_OK)
    30f6:	1dfb      	adds	r3, r7, #7
    30f8:	781b      	ldrb	r3, [r3, #0]
    30fa:	2b00      	cmp	r3, #0
    30fc:	d10d      	bne.n	311a <init_all_ports+0x82>
			{
				states |= (1 << i);
    30fe:	2201      	movs	r2, #1
    3100:	68bb      	ldr	r3, [r7, #8]
    3102:	409a      	lsls	r2, r3
    3104:	0013      	movs	r3, r2
    3106:	b25a      	sxtb	r2, r3
    3108:	230f      	movs	r3, #15
    310a:	18fb      	adds	r3, r7, r3
    310c:	781b      	ldrb	r3, [r3, #0]
    310e:	b25b      	sxtb	r3, r3
    3110:	4313      	orrs	r3, r2
    3112:	b25a      	sxtb	r2, r3
    3114:	230f      	movs	r3, #15
    3116:	18fb      	adds	r3, r7, r3
    3118:	701a      	strb	r2, [r3, #0]
{
	uint8_t states = 0;
	uint8_t data[2];
	data[1] = 0x00;
	
	for (int i=0;i<8;i++)
    311a:	68bb      	ldr	r3, [r7, #8]
    311c:	3301      	adds	r3, #1
    311e:	60bb      	str	r3, [r7, #8]
    3120:	68bb      	ldr	r3, [r7, #8]
    3122:	2b07      	cmp	r3, #7
    3124:	ddc5      	ble.n	30b2 <init_all_ports+0x1a>
				states |= (1 << i);
			}
		}
	}
	
	data[1] = 0x80;
    3126:	1d3b      	adds	r3, r7, #4
    3128:	2280      	movs	r2, #128	; 0x80
    312a:	705a      	strb	r2, [r3, #1]
	data[0] = MCP23017_GPIOA;
    312c:	1d3b      	adds	r3, r7, #4
    312e:	2212      	movs	r2, #18
    3130:	701a      	strb	r2, [r3, #0]
	uint8_t state = i2c_write(MCP23017_I2C_ADDR_001,(uint8_t *)data,2);
    3132:	1dbc      	adds	r4, r7, #6
    3134:	1d3b      	adds	r3, r7, #4
    3136:	2202      	movs	r2, #2
    3138:	0019      	movs	r1, r3
    313a:	2021      	movs	r0, #33	; 0x21
    313c:	4b0b      	ldr	r3, [pc, #44]	; (316c <init_all_ports+0xd4>)
    313e:	4798      	blx	r3
    3140:	0003      	movs	r3, r0
    3142:	7023      	strb	r3, [r4, #0]
	data[0] = MCP23017_GPIOB;
    3144:	1d3b      	adds	r3, r7, #4
    3146:	2213      	movs	r2, #19
    3148:	701a      	strb	r2, [r3, #0]
	state = i2c_write(MCP23017_I2C_ADDR_001,(uint8_t *)data,2);
    314a:	1dbc      	adds	r4, r7, #6
    314c:	1d3b      	adds	r3, r7, #4
    314e:	2202      	movs	r2, #2
    3150:	0019      	movs	r1, r3
    3152:	2021      	movs	r0, #33	; 0x21
    3154:	4b05      	ldr	r3, [pc, #20]	; (316c <init_all_ports+0xd4>)
    3156:	4798      	blx	r3
    3158:	0003      	movs	r3, r0
    315a:	7023      	strb	r3, [r4, #0]
	
	return states;
    315c:	230f      	movs	r3, #15
    315e:	18fb      	adds	r3, r7, r3
    3160:	781b      	ldrb	r3, [r3, #0]
}
    3162:	0018      	movs	r0, r3
    3164:	46bd      	mov	sp, r7
    3166:	b005      	add	sp, #20
    3168:	bd90      	pop	{r4, r7, pc}
    316a:	46c0      	nop			; (mov r8, r8)
    316c:	00002e21 	.word	0x00002e21

00003170 <mcp23017_set_pins>:
	data[0] = MCP23017_GPIOB;
	state = i2c_write(MCP23017_I2C_ADDR_000,(uint8_t *)data,2);	
}

uint8_t mcp23017_set_pins(uint8_t addr, uint8_t porta, uint8_t portb)
{
    3170:	b590      	push	{r4, r7, lr}
    3172:	b085      	sub	sp, #20
    3174:	af00      	add	r7, sp, #0
    3176:	0004      	movs	r4, r0
    3178:	0008      	movs	r0, r1
    317a:	0011      	movs	r1, r2
    317c:	1dfb      	adds	r3, r7, #7
    317e:	1c22      	adds	r2, r4, #0
    3180:	701a      	strb	r2, [r3, #0]
    3182:	1dbb      	adds	r3, r7, #6
    3184:	1c02      	adds	r2, r0, #0
    3186:	701a      	strb	r2, [r3, #0]
    3188:	1d7b      	adds	r3, r7, #5
    318a:	1c0a      	adds	r2, r1, #0
    318c:	701a      	strb	r2, [r3, #0]
	uint8_t state = 0x00;
    318e:	230f      	movs	r3, #15
    3190:	18fb      	adds	r3, r7, r3
    3192:	2200      	movs	r2, #0
    3194:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = MCP23017_GPIOA;
    3196:	230c      	movs	r3, #12
    3198:	18fb      	adds	r3, r7, r3
    319a:	2212      	movs	r2, #18
    319c:	701a      	strb	r2, [r3, #0]
	data[1] = porta;
    319e:	230c      	movs	r3, #12
    31a0:	18fb      	adds	r3, r7, r3
    31a2:	1dba      	adds	r2, r7, #6
    31a4:	7812      	ldrb	r2, [r2, #0]
    31a6:	705a      	strb	r2, [r3, #1]
	state = i2c_write(addr,(uint8_t *)data,2);
    31a8:	230f      	movs	r3, #15
    31aa:	18fc      	adds	r4, r7, r3
    31ac:	230c      	movs	r3, #12
    31ae:	18f9      	adds	r1, r7, r3
    31b0:	1dfb      	adds	r3, r7, #7
    31b2:	781b      	ldrb	r3, [r3, #0]
    31b4:	2202      	movs	r2, #2
    31b6:	0018      	movs	r0, r3
    31b8:	4b12      	ldr	r3, [pc, #72]	; (3204 <mcp23017_set_pins+0x94>)
    31ba:	4798      	blx	r3
    31bc:	0003      	movs	r3, r0
    31be:	7023      	strb	r3, [r4, #0]
	data[0] = MCP23017_GPIOB;
    31c0:	230c      	movs	r3, #12
    31c2:	18fb      	adds	r3, r7, r3
    31c4:	2213      	movs	r2, #19
    31c6:	701a      	strb	r2, [r3, #0]
	data[1] = portb;
    31c8:	230c      	movs	r3, #12
    31ca:	18fb      	adds	r3, r7, r3
    31cc:	1d7a      	adds	r2, r7, #5
    31ce:	7812      	ldrb	r2, [r2, #0]
    31d0:	705a      	strb	r2, [r3, #1]
	state |= i2c_write(addr,(uint8_t *)data,2);
    31d2:	230c      	movs	r3, #12
    31d4:	18f9      	adds	r1, r7, r3
    31d6:	1dfb      	adds	r3, r7, #7
    31d8:	781b      	ldrb	r3, [r3, #0]
    31da:	2202      	movs	r2, #2
    31dc:	0018      	movs	r0, r3
    31de:	4b09      	ldr	r3, [pc, #36]	; (3204 <mcp23017_set_pins+0x94>)
    31e0:	4798      	blx	r3
    31e2:	0003      	movs	r3, r0
    31e4:	0019      	movs	r1, r3
    31e6:	230f      	movs	r3, #15
    31e8:	18fb      	adds	r3, r7, r3
    31ea:	220f      	movs	r2, #15
    31ec:	18ba      	adds	r2, r7, r2
    31ee:	7812      	ldrb	r2, [r2, #0]
    31f0:	430a      	orrs	r2, r1
    31f2:	701a      	strb	r2, [r3, #0]
	
	return state;
    31f4:	230f      	movs	r3, #15
    31f6:	18fb      	adds	r3, r7, r3
    31f8:	781b      	ldrb	r3, [r3, #0]
}
    31fa:	0018      	movs	r0, r3
    31fc:	46bd      	mov	sp, r7
    31fe:	b005      	add	sp, #20
    3200:	bd90      	pop	{r4, r7, pc}
    3202:	46c0      	nop			; (mov r8, r8)
    3204:	00002e21 	.word	0x00002e21

00003208 <mcp23017_read_all_ports>:

uint8_t data_being_read[8][2];

void mcp23017_read_all_ports(uint8_t read_data_ptr[2][8], uint8_t states[8])
{
    3208:	b5b0      	push	{r4, r5, r7, lr}
    320a:	b084      	sub	sp, #16
    320c:	af00      	add	r7, sp, #0
    320e:	6078      	str	r0, [r7, #4]
    3210:	6039      	str	r1, [r7, #0]
	uint8_t state = 0x00;
    3212:	230e      	movs	r3, #14
    3214:	18fb      	adds	r3, r7, r3
    3216:	2200      	movs	r2, #0
    3218:	701a      	strb	r2, [r3, #0]
	//uint8_t data = 0x00;
	for (uint8_t i=0;i<8;i++)
    321a:	230f      	movs	r3, #15
    321c:	18fb      	adds	r3, r7, r3
    321e:	2200      	movs	r2, #0
    3220:	701a      	strb	r2, [r3, #0]
    3222:	e03e      	b.n	32a2 <mcp23017_read_all_ports+0x9a>
	{
		//data = 0x00;
		//data_being_read[i][0] = 0;
		//read_data_ptr[i][0] = 0;
		state = i2c_read(MCP23017_I2C_ADDR_000+i,MCP23017_GPIOA, 1,(uint8_t *)&read_data_ptr[0][i]);
    3224:	230f      	movs	r3, #15
    3226:	18fb      	adds	r3, r7, r3
    3228:	781b      	ldrb	r3, [r3, #0]
    322a:	3320      	adds	r3, #32
    322c:	b2d8      	uxtb	r0, r3
    322e:	230f      	movs	r3, #15
    3230:	18fb      	adds	r3, r7, r3
    3232:	781b      	ldrb	r3, [r3, #0]
    3234:	687a      	ldr	r2, [r7, #4]
    3236:	18d3      	adds	r3, r2, r3
    3238:	220e      	movs	r2, #14
    323a:	18bc      	adds	r4, r7, r2
    323c:	2201      	movs	r2, #1
    323e:	2112      	movs	r1, #18
    3240:	4d1c      	ldr	r5, [pc, #112]	; (32b4 <mcp23017_read_all_ports+0xac>)
    3242:	47a8      	blx	r5
    3244:	0003      	movs	r3, r0
    3246:	7023      	strb	r3, [r4, #0]
		//read_data[i][0] = data;
		//data_being_read[i][0] = data;
		//read_data_ptr[i][1] = 0;
		state |= i2c_read(MCP23017_I2C_ADDR_000+i,MCP23017_GPIOB, 1,(uint8_t *)&read_data_ptr[1][i]);
    3248:	230f      	movs	r3, #15
    324a:	18fb      	adds	r3, r7, r3
    324c:	781b      	ldrb	r3, [r3, #0]
    324e:	3320      	adds	r3, #32
    3250:	b2d8      	uxtb	r0, r3
    3252:	687b      	ldr	r3, [r7, #4]
    3254:	3308      	adds	r3, #8
    3256:	001a      	movs	r2, r3
    3258:	230f      	movs	r3, #15
    325a:	18fb      	adds	r3, r7, r3
    325c:	781b      	ldrb	r3, [r3, #0]
    325e:	18d3      	adds	r3, r2, r3
    3260:	2201      	movs	r2, #1
    3262:	2113      	movs	r1, #19
    3264:	4c13      	ldr	r4, [pc, #76]	; (32b4 <mcp23017_read_all_ports+0xac>)
    3266:	47a0      	blx	r4
    3268:	0003      	movs	r3, r0
    326a:	0019      	movs	r1, r3
    326c:	230e      	movs	r3, #14
    326e:	18fb      	adds	r3, r7, r3
    3270:	220e      	movs	r2, #14
    3272:	18ba      	adds	r2, r7, r2
    3274:	7812      	ldrb	r2, [r2, #0]
    3276:	430a      	orrs	r2, r1
    3278:	701a      	strb	r2, [r3, #0]
		//data_being_read[i][1] = data;
		//read_data[i][1] = data;
		states[i] = state;
    327a:	230f      	movs	r3, #15
    327c:	18fb      	adds	r3, r7, r3
    327e:	781b      	ldrb	r3, [r3, #0]
    3280:	683a      	ldr	r2, [r7, #0]
    3282:	18d3      	adds	r3, r2, r3
    3284:	220e      	movs	r2, #14
    3286:	18ba      	adds	r2, r7, r2
    3288:	7812      	ldrb	r2, [r2, #0]
    328a:	701a      	strb	r2, [r3, #0]
		state = 0x00;
    328c:	230e      	movs	r3, #14
    328e:	18fb      	adds	r3, r7, r3
    3290:	2200      	movs	r2, #0
    3292:	701a      	strb	r2, [r3, #0]

void mcp23017_read_all_ports(uint8_t read_data_ptr[2][8], uint8_t states[8])
{
	uint8_t state = 0x00;
	//uint8_t data = 0x00;
	for (uint8_t i=0;i<8;i++)
    3294:	230f      	movs	r3, #15
    3296:	18fb      	adds	r3, r7, r3
    3298:	781a      	ldrb	r2, [r3, #0]
    329a:	230f      	movs	r3, #15
    329c:	18fb      	adds	r3, r7, r3
    329e:	3201      	adds	r2, #1
    32a0:	701a      	strb	r2, [r3, #0]
    32a2:	230f      	movs	r3, #15
    32a4:	18fb      	adds	r3, r7, r3
    32a6:	781b      	ldrb	r3, [r3, #0]
    32a8:	2b07      	cmp	r3, #7
    32aa:	d9bb      	bls.n	3224 <mcp23017_read_all_ports+0x1c>
		states[i] = state;
		state = 0x00;
	}
	//read_data = data_being_read;
	//return state;
}
    32ac:	46c0      	nop			; (mov r8, r8)
    32ae:	46bd      	mov	sp, r7
    32b0:	b004      	add	sp, #16
    32b2:	bdb0      	pop	{r4, r5, r7, pc}
    32b4:	00002e99 	.word	0x00002e99

000032b8 <mcp23017_reset>:
	port_pin_set_config(MCP23017_PWR_PIN,&config_port_pin);
	port_pin_set_output_level(MCP23017_PWR_PIN,true);
}

void mcp23017_reset(void)
{
    32b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ba:	b087      	sub	sp, #28
    32bc:	af00      	add	r7, sp, #0
	port_pin_set_output_level(MCP23017_PWR_PIN, false);
    32be:	2100      	movs	r1, #0
    32c0:	2007      	movs	r0, #7
    32c2:	4b32      	ldr	r3, [pc, #200]	; (338c <mcp23017_reset+0xd4>)
    32c4:	4798      	blx	r3
	delay_ms(250);
    32c6:	2000      	movs	r0, #0
    32c8:	4b31      	ldr	r3, [pc, #196]	; (3390 <mcp23017_reset+0xd8>)
    32ca:	4798      	blx	r3
    32cc:	0003      	movs	r3, r0
    32ce:	001d      	movs	r5, r3
    32d0:	2300      	movs	r3, #0
    32d2:	001e      	movs	r6, r3
    32d4:	4c2f      	ldr	r4, [pc, #188]	; (3394 <mcp23017_reset+0xdc>)
    32d6:	22fa      	movs	r2, #250	; 0xfa
    32d8:	2300      	movs	r3, #0
    32da:	0028      	movs	r0, r5
    32dc:	0031      	movs	r1, r6
    32de:	47a0      	blx	r4
    32e0:	0003      	movs	r3, r0
    32e2:	000c      	movs	r4, r1
    32e4:	0019      	movs	r1, r3
    32e6:	0022      	movs	r2, r4
    32e8:	4b2b      	ldr	r3, [pc, #172]	; (3398 <mcp23017_reset+0xe0>)
    32ea:	2400      	movs	r4, #0
    32ec:	18c9      	adds	r1, r1, r3
    32ee:	4162      	adcs	r2, r4
    32f0:	0008      	movs	r0, r1
    32f2:	0011      	movs	r1, r2
    32f4:	4c29      	ldr	r4, [pc, #164]	; (339c <mcp23017_reset+0xe4>)
    32f6:	4a2a      	ldr	r2, [pc, #168]	; (33a0 <mcp23017_reset+0xe8>)
    32f8:	2300      	movs	r3, #0
    32fa:	47a0      	blx	r4
    32fc:	0003      	movs	r3, r0
    32fe:	000c      	movs	r4, r1
    3300:	0018      	movs	r0, r3
    3302:	4b28      	ldr	r3, [pc, #160]	; (33a4 <mcp23017_reset+0xec>)
    3304:	4798      	blx	r3
	port_pin_set_output_level(MCP23017_PWR_PIN, true);
    3306:	2101      	movs	r1, #1
    3308:	2007      	movs	r0, #7
    330a:	4b20      	ldr	r3, [pc, #128]	; (338c <mcp23017_reset+0xd4>)
    330c:	4798      	blx	r3
	delay_ms(125);
    330e:	2000      	movs	r0, #0
    3310:	4b1f      	ldr	r3, [pc, #124]	; (3390 <mcp23017_reset+0xd8>)
    3312:	4798      	blx	r3
    3314:	0003      	movs	r3, r0
    3316:	603b      	str	r3, [r7, #0]
    3318:	2300      	movs	r3, #0
    331a:	607b      	str	r3, [r7, #4]
    331c:	6838      	ldr	r0, [r7, #0]
    331e:	6879      	ldr	r1, [r7, #4]
    3320:	0003      	movs	r3, r0
    3322:	000c      	movs	r4, r1
    3324:	0eda      	lsrs	r2, r3, #27
    3326:	0165      	lsls	r5, r4, #5
    3328:	617d      	str	r5, [r7, #20]
    332a:	697d      	ldr	r5, [r7, #20]
    332c:	4315      	orrs	r5, r2
    332e:	617d      	str	r5, [r7, #20]
    3330:	015b      	lsls	r3, r3, #5
    3332:	613b      	str	r3, [r7, #16]
    3334:	693c      	ldr	r4, [r7, #16]
    3336:	697d      	ldr	r5, [r7, #20]
    3338:	0002      	movs	r2, r0
    333a:	000b      	movs	r3, r1
    333c:	1aa4      	subs	r4, r4, r2
    333e:	419d      	sbcs	r5, r3
    3340:	0023      	movs	r3, r4
    3342:	002c      	movs	r4, r5
    3344:	0f9a      	lsrs	r2, r3, #30
    3346:	00a5      	lsls	r5, r4, #2
    3348:	60fd      	str	r5, [r7, #12]
    334a:	68fd      	ldr	r5, [r7, #12]
    334c:	4315      	orrs	r5, r2
    334e:	60fd      	str	r5, [r7, #12]
    3350:	009b      	lsls	r3, r3, #2
    3352:	60bb      	str	r3, [r7, #8]
    3354:	0003      	movs	r3, r0
    3356:	000c      	movs	r4, r1
    3358:	68b9      	ldr	r1, [r7, #8]
    335a:	68fa      	ldr	r2, [r7, #12]
    335c:	185b      	adds	r3, r3, r1
    335e:	4154      	adcs	r4, r2
    3360:	490d      	ldr	r1, [pc, #52]	; (3398 <mcp23017_reset+0xe0>)
    3362:	2200      	movs	r2, #0
    3364:	185b      	adds	r3, r3, r1
    3366:	4154      	adcs	r4, r2
    3368:	0018      	movs	r0, r3
    336a:	0021      	movs	r1, r4
    336c:	4c0b      	ldr	r4, [pc, #44]	; (339c <mcp23017_reset+0xe4>)
    336e:	4a0c      	ldr	r2, [pc, #48]	; (33a0 <mcp23017_reset+0xe8>)
    3370:	2300      	movs	r3, #0
    3372:	47a0      	blx	r4
    3374:	0003      	movs	r3, r0
    3376:	000c      	movs	r4, r1
    3378:	0018      	movs	r0, r3
    337a:	4b0a      	ldr	r3, [pc, #40]	; (33a4 <mcp23017_reset+0xec>)
    337c:	4798      	blx	r3
	init_all_ports();
    337e:	4b0a      	ldr	r3, [pc, #40]	; (33a8 <mcp23017_reset+0xf0>)
    3380:	4798      	blx	r3
	//TODO pull PWR or RESET to MCP23017 ICs.
}
    3382:	46c0      	nop			; (mov r8, r8)
    3384:	46bd      	mov	sp, r7
    3386:	b007      	add	sp, #28
    3388:	bdf0      	pop	{r4, r5, r6, r7, pc}
    338a:	46c0      	nop			; (mov r8, r8)
    338c:	00003045 	.word	0x00003045
    3390:	00004b41 	.word	0x00004b41
    3394:	00005895 	.word	0x00005895
    3398:	00001b57 	.word	0x00001b57
    339c:	00005855 	.word	0x00005855
    33a0:	00001b58 	.word	0x00001b58
    33a4:	20000001 	.word	0x20000001
    33a8:	00003099 	.word	0x00003099

000033ac <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    33ac:	b580      	push	{r7, lr}
    33ae:	b084      	sub	sp, #16
    33b0:	af00      	add	r7, sp, #0
    33b2:	0002      	movs	r2, r0
    33b4:	1dfb      	adds	r3, r7, #7
    33b6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    33b8:	230f      	movs	r3, #15
    33ba:	18fb      	adds	r3, r7, r3
    33bc:	1dfa      	adds	r2, r7, #7
    33be:	7812      	ldrb	r2, [r2, #0]
    33c0:	09d2      	lsrs	r2, r2, #7
    33c2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    33c4:	230e      	movs	r3, #14
    33c6:	18fb      	adds	r3, r7, r3
    33c8:	1dfa      	adds	r2, r7, #7
    33ca:	7812      	ldrb	r2, [r2, #0]
    33cc:	0952      	lsrs	r2, r2, #5
    33ce:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    33d0:	4b0d      	ldr	r3, [pc, #52]	; (3408 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    33d2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    33d4:	230f      	movs	r3, #15
    33d6:	18fb      	adds	r3, r7, r3
    33d8:	781b      	ldrb	r3, [r3, #0]
    33da:	2b00      	cmp	r3, #0
    33dc:	d10f      	bne.n	33fe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    33de:	230f      	movs	r3, #15
    33e0:	18fb      	adds	r3, r7, r3
    33e2:	781b      	ldrb	r3, [r3, #0]
    33e4:	009b      	lsls	r3, r3, #2
    33e6:	2210      	movs	r2, #16
    33e8:	4694      	mov	ip, r2
    33ea:	44bc      	add	ip, r7
    33ec:	4463      	add	r3, ip
    33ee:	3b08      	subs	r3, #8
    33f0:	681a      	ldr	r2, [r3, #0]
    33f2:	230e      	movs	r3, #14
    33f4:	18fb      	adds	r3, r7, r3
    33f6:	781b      	ldrb	r3, [r3, #0]
    33f8:	01db      	lsls	r3, r3, #7
    33fa:	18d3      	adds	r3, r2, r3
    33fc:	e000      	b.n	3400 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    33fe:	2300      	movs	r3, #0
	}
}
    3400:	0018      	movs	r0, r3
    3402:	46bd      	mov	sp, r7
    3404:	b004      	add	sp, #16
    3406:	bd80      	pop	{r7, pc}
    3408:	41004400 	.word	0x41004400

0000340c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    340c:	b580      	push	{r7, lr}
    340e:	b084      	sub	sp, #16
    3410:	af00      	add	r7, sp, #0
    3412:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3414:	687b      	ldr	r3, [r7, #4]
    3416:	681b      	ldr	r3, [r3, #0]
    3418:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    341a:	68fb      	ldr	r3, [r7, #12]
    341c:	7e5b      	ldrb	r3, [r3, #25]
    341e:	b2db      	uxtb	r3, r3
    3420:	b25b      	sxtb	r3, r3
    3422:	2b00      	cmp	r3, #0
    3424:	da01      	bge.n	342a <adc_is_syncing+0x1e>
		return true;
    3426:	2301      	movs	r3, #1
    3428:	e000      	b.n	342c <adc_is_syncing+0x20>
	}

	return false;
    342a:	2300      	movs	r3, #0
}
    342c:	0018      	movs	r0, r3
    342e:	46bd      	mov	sp, r7
    3430:	b004      	add	sp, #16
    3432:	bd80      	pop	{r7, pc}

00003434 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    3434:	b580      	push	{r7, lr}
    3436:	b086      	sub	sp, #24
    3438:	af00      	add	r7, sp, #0
    343a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    343c:	687b      	ldr	r3, [r7, #4]
    343e:	681b      	ldr	r3, [r3, #0]
    3440:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    3442:	693b      	ldr	r3, [r7, #16]
    3444:	7e1b      	ldrb	r3, [r3, #24]
    3446:	b2db      	uxtb	r3, r3
    3448:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    344a:	2300      	movs	r3, #0
    344c:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    344e:	68fb      	ldr	r3, [r7, #12]
    3450:	2201      	movs	r2, #1
    3452:	4013      	ands	r3, r2
    3454:	d003      	beq.n	345e <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    3456:	697b      	ldr	r3, [r7, #20]
    3458:	2201      	movs	r2, #1
    345a:	4313      	orrs	r3, r2
    345c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    345e:	68fb      	ldr	r3, [r7, #12]
    3460:	2204      	movs	r2, #4
    3462:	4013      	ands	r3, r2
    3464:	d003      	beq.n	346e <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    3466:	697b      	ldr	r3, [r7, #20]
    3468:	2202      	movs	r2, #2
    346a:	4313      	orrs	r3, r2
    346c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    346e:	68fb      	ldr	r3, [r7, #12]
    3470:	2202      	movs	r2, #2
    3472:	4013      	ands	r3, r2
    3474:	d003      	beq.n	347e <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    3476:	697b      	ldr	r3, [r7, #20]
    3478:	2204      	movs	r2, #4
    347a:	4313      	orrs	r3, r2
    347c:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    347e:	697b      	ldr	r3, [r7, #20]
}
    3480:	0018      	movs	r0, r3
    3482:	46bd      	mov	sp, r7
    3484:	b006      	add	sp, #24
    3486:	bd80      	pop	{r7, pc}

00003488 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    3488:	b580      	push	{r7, lr}
    348a:	b084      	sub	sp, #16
    348c:	af00      	add	r7, sp, #0
    348e:	6078      	str	r0, [r7, #4]
    3490:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3492:	687b      	ldr	r3, [r7, #4]
    3494:	681b      	ldr	r3, [r3, #0]
    3496:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    3498:	2300      	movs	r3, #0
    349a:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    349c:	683b      	ldr	r3, [r7, #0]
    349e:	2201      	movs	r2, #1
    34a0:	4013      	ands	r3, r2
    34a2:	d003      	beq.n	34ac <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    34a4:	68fb      	ldr	r3, [r7, #12]
    34a6:	2201      	movs	r2, #1
    34a8:	4313      	orrs	r3, r2
    34aa:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    34ac:	683b      	ldr	r3, [r7, #0]
    34ae:	2202      	movs	r2, #2
    34b0:	4013      	ands	r3, r2
    34b2:	d003      	beq.n	34bc <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    34b4:	68fb      	ldr	r3, [r7, #12]
    34b6:	2204      	movs	r2, #4
    34b8:	4313      	orrs	r3, r2
    34ba:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    34bc:	683b      	ldr	r3, [r7, #0]
    34be:	2204      	movs	r2, #4
    34c0:	4013      	ands	r3, r2
    34c2:	d003      	beq.n	34cc <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    34c4:	68fb      	ldr	r3, [r7, #12]
    34c6:	2202      	movs	r2, #2
    34c8:	4313      	orrs	r3, r2
    34ca:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    34cc:	68fb      	ldr	r3, [r7, #12]
    34ce:	b2da      	uxtb	r2, r3
    34d0:	68bb      	ldr	r3, [r7, #8]
    34d2:	761a      	strb	r2, [r3, #24]
}
    34d4:	46c0      	nop			; (mov r8, r8)
    34d6:	46bd      	mov	sp, r7
    34d8:	b004      	add	sp, #16
    34da:	bd80      	pop	{r7, pc}

000034dc <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    34dc:	b580      	push	{r7, lr}
    34de:	b084      	sub	sp, #16
    34e0:	af00      	add	r7, sp, #0
    34e2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    34e4:	687b      	ldr	r3, [r7, #4]
    34e6:	681b      	ldr	r3, [r3, #0]
    34e8:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    34ea:	46c0      	nop			; (mov r8, r8)
    34ec:	687b      	ldr	r3, [r7, #4]
    34ee:	0018      	movs	r0, r3
    34f0:	4b0b      	ldr	r3, [pc, #44]	; (3520 <adc_start_conversion+0x44>)
    34f2:	4798      	blx	r3
    34f4:	1e03      	subs	r3, r0, #0
    34f6:	d1f9      	bne.n	34ec <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    34f8:	68fb      	ldr	r3, [r7, #12]
    34fa:	7b1b      	ldrb	r3, [r3, #12]
    34fc:	b2db      	uxtb	r3, r3
    34fe:	2202      	movs	r2, #2
    3500:	4313      	orrs	r3, r2
    3502:	b2da      	uxtb	r2, r3
    3504:	68fb      	ldr	r3, [r7, #12]
    3506:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    3508:	46c0      	nop			; (mov r8, r8)
    350a:	687b      	ldr	r3, [r7, #4]
    350c:	0018      	movs	r0, r3
    350e:	4b04      	ldr	r3, [pc, #16]	; (3520 <adc_start_conversion+0x44>)
    3510:	4798      	blx	r3
    3512:	1e03      	subs	r3, r0, #0
    3514:	d1f9      	bne.n	350a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    3516:	46c0      	nop			; (mov r8, r8)
    3518:	46bd      	mov	sp, r7
    351a:	b004      	add	sp, #16
    351c:	bd80      	pop	{r7, pc}
    351e:	46c0      	nop			; (mov r8, r8)
    3520:	0000340d 	.word	0x0000340d

00003524 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    3524:	b580      	push	{r7, lr}
    3526:	b084      	sub	sp, #16
    3528:	af00      	add	r7, sp, #0
    352a:	6078      	str	r0, [r7, #4]
    352c:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    352e:	687b      	ldr	r3, [r7, #4]
    3530:	0018      	movs	r0, r3
    3532:	4b18      	ldr	r3, [pc, #96]	; (3594 <adc_read+0x70>)
    3534:	4798      	blx	r3
    3536:	0002      	movs	r2, r0
    3538:	2301      	movs	r3, #1
    353a:	4013      	ands	r3, r2
    353c:	d101      	bne.n	3542 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    353e:	2305      	movs	r3, #5
    3540:	e023      	b.n	358a <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    3542:	687b      	ldr	r3, [r7, #4]
    3544:	681b      	ldr	r3, [r3, #0]
    3546:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    3548:	46c0      	nop			; (mov r8, r8)
    354a:	687b      	ldr	r3, [r7, #4]
    354c:	0018      	movs	r0, r3
    354e:	4b12      	ldr	r3, [pc, #72]	; (3598 <adc_read+0x74>)
    3550:	4798      	blx	r3
    3552:	1e03      	subs	r3, r0, #0
    3554:	d1f9      	bne.n	354a <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    3556:	68fb      	ldr	r3, [r7, #12]
    3558:	8b5b      	ldrh	r3, [r3, #26]
    355a:	b29a      	uxth	r2, r3
    355c:	683b      	ldr	r3, [r7, #0]
    355e:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    3560:	687b      	ldr	r3, [r7, #4]
    3562:	2101      	movs	r1, #1
    3564:	0018      	movs	r0, r3
    3566:	4b0d      	ldr	r3, [pc, #52]	; (359c <adc_read+0x78>)
    3568:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    356a:	687b      	ldr	r3, [r7, #4]
    356c:	0018      	movs	r0, r3
    356e:	4b09      	ldr	r3, [pc, #36]	; (3594 <adc_read+0x70>)
    3570:	4798      	blx	r3
    3572:	0002      	movs	r2, r0
    3574:	2304      	movs	r3, #4
    3576:	4013      	ands	r3, r2
    3578:	d006      	beq.n	3588 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    357a:	687b      	ldr	r3, [r7, #4]
    357c:	2104      	movs	r1, #4
    357e:	0018      	movs	r0, r3
    3580:	4b06      	ldr	r3, [pc, #24]	; (359c <adc_read+0x78>)
    3582:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    3584:	231e      	movs	r3, #30
    3586:	e000      	b.n	358a <adc_read+0x66>
	}

	return STATUS_OK;
    3588:	2300      	movs	r3, #0
}
    358a:	0018      	movs	r0, r3
    358c:	46bd      	mov	sp, r7
    358e:	b004      	add	sp, #16
    3590:	bd80      	pop	{r7, pc}
    3592:	46c0      	nop			; (mov r8, r8)
    3594:	00003435 	.word	0x00003435
    3598:	0000340d 	.word	0x0000340d
    359c:	00003489 	.word	0x00003489

000035a0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    35a0:	b580      	push	{r7, lr}
    35a2:	b082      	sub	sp, #8
    35a4:	af00      	add	r7, sp, #0
    35a6:	0002      	movs	r2, r0
    35a8:	1dfb      	adds	r3, r7, #7
    35aa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    35ac:	1dfb      	adds	r3, r7, #7
    35ae:	781b      	ldrb	r3, [r3, #0]
    35b0:	0018      	movs	r0, r3
    35b2:	4b03      	ldr	r3, [pc, #12]	; (35c0 <port_get_group_from_gpio_pin+0x20>)
    35b4:	4798      	blx	r3
    35b6:	0003      	movs	r3, r0
}
    35b8:	0018      	movs	r0, r3
    35ba:	46bd      	mov	sp, r7
    35bc:	b002      	add	sp, #8
    35be:	bd80      	pop	{r7, pc}
    35c0:	000033ad 	.word	0x000033ad

000035c4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    35c4:	b580      	push	{r7, lr}
    35c6:	b084      	sub	sp, #16
    35c8:	af00      	add	r7, sp, #0
    35ca:	0002      	movs	r2, r0
    35cc:	1dfb      	adds	r3, r7, #7
    35ce:	701a      	strb	r2, [r3, #0]
    35d0:	1dbb      	adds	r3, r7, #6
    35d2:	1c0a      	adds	r2, r1, #0
    35d4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    35d6:	1dfb      	adds	r3, r7, #7
    35d8:	781b      	ldrb	r3, [r3, #0]
    35da:	0018      	movs	r0, r3
    35dc:	4b0d      	ldr	r3, [pc, #52]	; (3614 <port_pin_set_output_level+0x50>)
    35de:	4798      	blx	r3
    35e0:	0003      	movs	r3, r0
    35e2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    35e4:	1dfb      	adds	r3, r7, #7
    35e6:	781b      	ldrb	r3, [r3, #0]
    35e8:	221f      	movs	r2, #31
    35ea:	4013      	ands	r3, r2
    35ec:	2201      	movs	r2, #1
    35ee:	409a      	lsls	r2, r3
    35f0:	0013      	movs	r3, r2
    35f2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    35f4:	1dbb      	adds	r3, r7, #6
    35f6:	781b      	ldrb	r3, [r3, #0]
    35f8:	2b00      	cmp	r3, #0
    35fa:	d003      	beq.n	3604 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    35fc:	68fb      	ldr	r3, [r7, #12]
    35fe:	68ba      	ldr	r2, [r7, #8]
    3600:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3602:	e002      	b.n	360a <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3604:	68fb      	ldr	r3, [r7, #12]
    3606:	68ba      	ldr	r2, [r7, #8]
    3608:	615a      	str	r2, [r3, #20]
	}
}
    360a:	46c0      	nop			; (mov r8, r8)
    360c:	46bd      	mov	sp, r7
    360e:	b004      	add	sp, #16
    3610:	bd80      	pop	{r7, pc}
    3612:	46c0      	nop			; (mov r8, r8)
    3614:	000035a1 	.word	0x000035a1

00003618 <single_conversion>:
	adc_enable(&adc_instance);
}


uint16_t single_conversion()
{
    3618:	b580      	push	{r7, lr}
    361a:	b082      	sub	sp, #8
    361c:	af00      	add	r7, sp, #0
	adc_start_conversion(&adc_instance);
    361e:	4b09      	ldr	r3, [pc, #36]	; (3644 <single_conversion+0x2c>)
    3620:	0018      	movs	r0, r3
    3622:	4b09      	ldr	r3, [pc, #36]	; (3648 <single_conversion+0x30>)
    3624:	4798      	blx	r3
	uint16_t result;

	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
    3626:	1dba      	adds	r2, r7, #6
    3628:	4b06      	ldr	r3, [pc, #24]	; (3644 <single_conversion+0x2c>)
    362a:	0011      	movs	r1, r2
    362c:	0018      	movs	r0, r3
    362e:	4b07      	ldr	r3, [pc, #28]	; (364c <single_conversion+0x34>)
    3630:	4798      	blx	r3
    3632:	1e03      	subs	r3, r0, #0
    3634:	2b05      	cmp	r3, #5
    3636:	d0f6      	beq.n	3626 <single_conversion+0xe>
	return result;
    3638:	1dbb      	adds	r3, r7, #6
    363a:	881b      	ldrh	r3, [r3, #0]
}
    363c:	0018      	movs	r0, r3
    363e:	46bd      	mov	sp, r7
    3640:	b002      	add	sp, #8
    3642:	bd80      	pop	{r7, pc}
    3644:	20001190 	.word	0x20001190
    3648:	000034dd 	.word	0x000034dd
    364c:	00003525 	.word	0x00003525

00003650 <msgeq7_all_bands>:

void msgeq7_all_bands(uint16_t bands[])
{
    3650:	b5f0      	push	{r4, r5, r6, r7, lr}
    3652:	b08f      	sub	sp, #60	; 0x3c
    3654:	af00      	add	r7, sp, #0
    3656:	62f8      	str	r0, [r7, #44]	; 0x2c
	port_pin_set_output_level(MSGEQ7_PIN_RESET,true);
    3658:	2101      	movs	r1, #1
    365a:	2019      	movs	r0, #25
    365c:	4b53      	ldr	r3, [pc, #332]	; (37ac <msgeq7_all_bands+0x15c>)
    365e:	4798      	blx	r3
	delay_us(1);
    3660:	2000      	movs	r0, #0
    3662:	4b53      	ldr	r3, [pc, #332]	; (37b0 <msgeq7_all_bands+0x160>)
    3664:	4798      	blx	r3
    3666:	0003      	movs	r3, r0
    3668:	613b      	str	r3, [r7, #16]
    366a:	2300      	movs	r3, #0
    366c:	617b      	str	r3, [r7, #20]
    366e:	4b51      	ldr	r3, [pc, #324]	; (37b4 <msgeq7_all_bands+0x164>)
    3670:	2400      	movs	r4, #0
    3672:	6938      	ldr	r0, [r7, #16]
    3674:	6979      	ldr	r1, [r7, #20]
    3676:	18c0      	adds	r0, r0, r3
    3678:	4161      	adcs	r1, r4
    367a:	4c4f      	ldr	r4, [pc, #316]	; (37b8 <msgeq7_all_bands+0x168>)
    367c:	4a4f      	ldr	r2, [pc, #316]	; (37bc <msgeq7_all_bands+0x16c>)
    367e:	2300      	movs	r3, #0
    3680:	47a0      	blx	r4
    3682:	0003      	movs	r3, r0
    3684:	000c      	movs	r4, r1
    3686:	0018      	movs	r0, r3
    3688:	4b4d      	ldr	r3, [pc, #308]	; (37c0 <msgeq7_all_bands+0x170>)
    368a:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_RESET,false);
    368c:	2100      	movs	r1, #0
    368e:	2019      	movs	r0, #25
    3690:	4b46      	ldr	r3, [pc, #280]	; (37ac <msgeq7_all_bands+0x15c>)
    3692:	4798      	blx	r3
	delay_us(75);
    3694:	2000      	movs	r0, #0
    3696:	4b46      	ldr	r3, [pc, #280]	; (37b0 <msgeq7_all_bands+0x160>)
    3698:	4798      	blx	r3
    369a:	0003      	movs	r3, r0
    369c:	61bb      	str	r3, [r7, #24]
    369e:	2300      	movs	r3, #0
    36a0:	61fb      	str	r3, [r7, #28]
    36a2:	69bb      	ldr	r3, [r7, #24]
    36a4:	69fc      	ldr	r4, [r7, #28]
    36a6:	0f9a      	lsrs	r2, r3, #30
    36a8:	00a0      	lsls	r0, r4, #2
    36aa:	6278      	str	r0, [r7, #36]	; 0x24
    36ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
    36ae:	4310      	orrs	r0, r2
    36b0:	6278      	str	r0, [r7, #36]	; 0x24
    36b2:	009b      	lsls	r3, r3, #2
    36b4:	623b      	str	r3, [r7, #32]
    36b6:	6a3b      	ldr	r3, [r7, #32]
    36b8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    36ba:	69b9      	ldr	r1, [r7, #24]
    36bc:	69fa      	ldr	r2, [r7, #28]
    36be:	185b      	adds	r3, r3, r1
    36c0:	4154      	adcs	r4, r2
    36c2:	0f1a      	lsrs	r2, r3, #28
    36c4:	0126      	lsls	r6, r4, #4
    36c6:	4316      	orrs	r6, r2
    36c8:	011d      	lsls	r5, r3, #4
    36ca:	1aed      	subs	r5, r5, r3
    36cc:	41a6      	sbcs	r6, r4
    36ce:	002b      	movs	r3, r5
    36d0:	0034      	movs	r4, r6
    36d2:	4938      	ldr	r1, [pc, #224]	; (37b4 <msgeq7_all_bands+0x164>)
    36d4:	2200      	movs	r2, #0
    36d6:	185b      	adds	r3, r3, r1
    36d8:	4154      	adcs	r4, r2
    36da:	0018      	movs	r0, r3
    36dc:	0021      	movs	r1, r4
    36de:	4c36      	ldr	r4, [pc, #216]	; (37b8 <msgeq7_all_bands+0x168>)
    36e0:	4a36      	ldr	r2, [pc, #216]	; (37bc <msgeq7_all_bands+0x16c>)
    36e2:	2300      	movs	r3, #0
    36e4:	47a0      	blx	r4
    36e6:	0003      	movs	r3, r0
    36e8:	000c      	movs	r4, r1
    36ea:	0018      	movs	r0, r3
    36ec:	4b34      	ldr	r3, [pc, #208]	; (37c0 <msgeq7_all_bands+0x170>)
    36ee:	4798      	blx	r3
	
	for (int i=0;i<7;i++)
    36f0:	2300      	movs	r3, #0
    36f2:	637b      	str	r3, [r7, #52]	; 0x34
    36f4:	e052      	b.n	379c <msgeq7_all_bands+0x14c>
	{
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,false);
    36f6:	2100      	movs	r1, #0
    36f8:	2018      	movs	r0, #24
    36fa:	4b2c      	ldr	r3, [pc, #176]	; (37ac <msgeq7_all_bands+0x15c>)
    36fc:	4798      	blx	r3
		delay_us(40);
    36fe:	2000      	movs	r0, #0
    3700:	4b2b      	ldr	r3, [pc, #172]	; (37b0 <msgeq7_all_bands+0x160>)
    3702:	4798      	blx	r3
    3704:	0003      	movs	r3, r0
    3706:	60bb      	str	r3, [r7, #8]
    3708:	2300      	movs	r3, #0
    370a:	60fb      	str	r3, [r7, #12]
    370c:	4c2d      	ldr	r4, [pc, #180]	; (37c4 <msgeq7_all_bands+0x174>)
    370e:	2228      	movs	r2, #40	; 0x28
    3710:	2300      	movs	r3, #0
    3712:	68b8      	ldr	r0, [r7, #8]
    3714:	68f9      	ldr	r1, [r7, #12]
    3716:	47a0      	blx	r4
    3718:	0003      	movs	r3, r0
    371a:	000c      	movs	r4, r1
    371c:	0019      	movs	r1, r3
    371e:	0022      	movs	r2, r4
    3720:	4b24      	ldr	r3, [pc, #144]	; (37b4 <msgeq7_all_bands+0x164>)
    3722:	2400      	movs	r4, #0
    3724:	18c9      	adds	r1, r1, r3
    3726:	4162      	adcs	r2, r4
    3728:	0008      	movs	r0, r1
    372a:	0011      	movs	r1, r2
    372c:	4c22      	ldr	r4, [pc, #136]	; (37b8 <msgeq7_all_bands+0x168>)
    372e:	4a23      	ldr	r2, [pc, #140]	; (37bc <msgeq7_all_bands+0x16c>)
    3730:	2300      	movs	r3, #0
    3732:	47a0      	blx	r4
    3734:	0003      	movs	r3, r0
    3736:	000c      	movs	r4, r1
    3738:	0018      	movs	r0, r3
    373a:	4b21      	ldr	r3, [pc, #132]	; (37c0 <msgeq7_all_bands+0x170>)
    373c:	4798      	blx	r3
		bands[i] = single_conversion();
    373e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3740:	005b      	lsls	r3, r3, #1
    3742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3744:	18d4      	adds	r4, r2, r3
    3746:	4b20      	ldr	r3, [pc, #128]	; (37c8 <msgeq7_all_bands+0x178>)
    3748:	4798      	blx	r3
    374a:	0003      	movs	r3, r0
    374c:	8023      	strh	r3, [r4, #0]
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,true);
    374e:	2101      	movs	r1, #1
    3750:	2018      	movs	r0, #24
    3752:	4b16      	ldr	r3, [pc, #88]	; (37ac <msgeq7_all_bands+0x15c>)
    3754:	4798      	blx	r3
		delay_us(40);
    3756:	2000      	movs	r0, #0
    3758:	4b15      	ldr	r3, [pc, #84]	; (37b0 <msgeq7_all_bands+0x160>)
    375a:	4798      	blx	r3
    375c:	0003      	movs	r3, r0
    375e:	603b      	str	r3, [r7, #0]
    3760:	2300      	movs	r3, #0
    3762:	607b      	str	r3, [r7, #4]
    3764:	4c17      	ldr	r4, [pc, #92]	; (37c4 <msgeq7_all_bands+0x174>)
    3766:	2228      	movs	r2, #40	; 0x28
    3768:	2300      	movs	r3, #0
    376a:	6838      	ldr	r0, [r7, #0]
    376c:	6879      	ldr	r1, [r7, #4]
    376e:	47a0      	blx	r4
    3770:	0003      	movs	r3, r0
    3772:	000c      	movs	r4, r1
    3774:	0019      	movs	r1, r3
    3776:	0022      	movs	r2, r4
    3778:	4b0e      	ldr	r3, [pc, #56]	; (37b4 <msgeq7_all_bands+0x164>)
    377a:	2400      	movs	r4, #0
    377c:	18c9      	adds	r1, r1, r3
    377e:	4162      	adcs	r2, r4
    3780:	0008      	movs	r0, r1
    3782:	0011      	movs	r1, r2
    3784:	4c0c      	ldr	r4, [pc, #48]	; (37b8 <msgeq7_all_bands+0x168>)
    3786:	4a0d      	ldr	r2, [pc, #52]	; (37bc <msgeq7_all_bands+0x16c>)
    3788:	2300      	movs	r3, #0
    378a:	47a0      	blx	r4
    378c:	0003      	movs	r3, r0
    378e:	000c      	movs	r4, r1
    3790:	0018      	movs	r0, r3
    3792:	4b0b      	ldr	r3, [pc, #44]	; (37c0 <msgeq7_all_bands+0x170>)
    3794:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_RESET,true);
	delay_us(1);
	port_pin_set_output_level(MSGEQ7_PIN_RESET,false);
	delay_us(75);
	
	for (int i=0;i<7;i++)
    3796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3798:	3301      	adds	r3, #1
    379a:	637b      	str	r3, [r7, #52]	; 0x34
    379c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    379e:	2b06      	cmp	r3, #6
    37a0:	dda9      	ble.n	36f6 <msgeq7_all_bands+0xa6>
		delay_us(40);
		bands[i] = single_conversion();
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,true);
		delay_us(40);
	}
    37a2:	46c0      	nop			; (mov r8, r8)
    37a4:	46bd      	mov	sp, r7
    37a6:	b00f      	add	sp, #60	; 0x3c
    37a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37aa:	46c0      	nop			; (mov r8, r8)
    37ac:	000035c5 	.word	0x000035c5
    37b0:	00004b41 	.word	0x00004b41
    37b4:	006acfbf 	.word	0x006acfbf
    37b8:	00005855 	.word	0x00005855
    37bc:	006acfc0 	.word	0x006acfc0
    37c0:	20000001 	.word	0x20000001
    37c4:	00005895 	.word	0x00005895
    37c8:	00003619 	.word	0x00003619

000037cc <TC3_Handler>:
uint16_t values_bands[6];

bool a_okayish = true;
char buffer[64];
void TC3_Handler()
{
    37cc:	b580      	push	{r7, lr}
    37ce:	af00      	add	r7, sp, #0
	static bool blink_state = false;
	// Overflow interrupt triggered
	if ( TC3->COUNT16.INTFLAG.bit.OVF == 1 )
    37d0:	4b1d      	ldr	r3, [pc, #116]	; (3848 <TC3_Handler+0x7c>)
    37d2:	7b9b      	ldrb	r3, [r3, #14]
    37d4:	07db      	lsls	r3, r3, #31
    37d6:	0fdb      	lsrs	r3, r3, #31
    37d8:	b2db      	uxtb	r3, r3
    37da:	2b01      	cmp	r3, #1
    37dc:	d131      	bne.n	3842 <TC3_Handler+0x76>
	{
		if ((pwm_count % 5) == 0)
    37de:	4b1b      	ldr	r3, [pc, #108]	; (384c <TC3_Handler+0x80>)
    37e0:	681a      	ldr	r2, [r3, #0]
    37e2:	4b1b      	ldr	r3, [pc, #108]	; (3850 <TC3_Handler+0x84>)
    37e4:	2105      	movs	r1, #5
    37e6:	0010      	movs	r0, r2
    37e8:	4798      	blx	r3
    37ea:	1e0b      	subs	r3, r1, #0
    37ec:	d107      	bne.n	37fe <TC3_Handler+0x32>
		{
			should_update = true;
    37ee:	4b19      	ldr	r3, [pc, #100]	; (3854 <TC3_Handler+0x88>)
    37f0:	2201      	movs	r2, #1
    37f2:	701a      	strb	r2, [r3, #0]
			should_updates++;
    37f4:	4b18      	ldr	r3, [pc, #96]	; (3858 <TC3_Handler+0x8c>)
    37f6:	681b      	ldr	r3, [r3, #0]
    37f8:	1c5a      	adds	r2, r3, #1
    37fa:	4b17      	ldr	r3, [pc, #92]	; (3858 <TC3_Handler+0x8c>)
    37fc:	601a      	str	r2, [r3, #0]
		}
		
		pwm_count++;
    37fe:	4b13      	ldr	r3, [pc, #76]	; (384c <TC3_Handler+0x80>)
    3800:	681b      	ldr	r3, [r3, #0]
    3802:	1c5a      	adds	r2, r3, #1
    3804:	4b11      	ldr	r3, [pc, #68]	; (384c <TC3_Handler+0x80>)
    3806:	601a      	str	r2, [r3, #0]

		if (pwm_count > PWM_FREQ)
    3808:	4b10      	ldr	r3, [pc, #64]	; (384c <TC3_Handler+0x80>)
    380a:	681b      	ldr	r3, [r3, #0]
    380c:	2bfa      	cmp	r3, #250	; 0xfa
    380e:	dd15      	ble.n	383c <TC3_Handler+0x70>
		{
			should_updates = 0;
    3810:	4b11      	ldr	r3, [pc, #68]	; (3858 <TC3_Handler+0x8c>)
    3812:	2200      	movs	r2, #0
    3814:	601a      	str	r2, [r3, #0]
			/*if ((seconds % 300) == 0)
			{
				execute_order_66 = true;
			}*/
			seconds++;
    3816:	4b11      	ldr	r3, [pc, #68]	; (385c <TC3_Handler+0x90>)
    3818:	681b      	ldr	r3, [r3, #0]
    381a:	1c5a      	adds	r2, r3, #1
    381c:	4b0f      	ldr	r3, [pc, #60]	; (385c <TC3_Handler+0x90>)
    381e:	601a      	str	r2, [r3, #0]
			if ((seconds % 5) == 0)
    3820:	4b0e      	ldr	r3, [pc, #56]	; (385c <TC3_Handler+0x90>)
    3822:	681a      	ldr	r2, [r3, #0]
    3824:	4b0a      	ldr	r3, [pc, #40]	; (3850 <TC3_Handler+0x84>)
    3826:	2105      	movs	r1, #5
    3828:	0010      	movs	r0, r2
    382a:	4798      	blx	r3
    382c:	1e0b      	subs	r3, r1, #0
    382e:	d102      	bne.n	3836 <TC3_Handler+0x6a>
			{
				should_check = true;
    3830:	4b0b      	ldr	r3, [pc, #44]	; (3860 <TC3_Handler+0x94>)
    3832:	2201      	movs	r2, #1
    3834:	701a      	strb	r2, [r3, #0]
			if (party)
			{
				sprintf(buffer,"%d %d %d %d %d %d",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
				ble_uart_write(buffer);
			}*/
			pwm_count = 0;
    3836:	4b05      	ldr	r3, [pc, #20]	; (384c <TC3_Handler+0x80>)
    3838:	2200      	movs	r2, #0
    383a:	601a      	str	r2, [r3, #0]
		}
		TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0;
    383c:	4b02      	ldr	r3, [pc, #8]	; (3848 <TC3_Handler+0x7c>)
    383e:	2210      	movs	r2, #16
    3840:	739a      	strb	r2, [r3, #14]
	}
}
    3842:	46c0      	nop			; (mov r8, r8)
    3844:	46bd      	mov	sp, r7
    3846:	bd80      	pop	{r7, pc}
    3848:	42002c00 	.word	0x42002c00
    384c:	20001180 	.word	0x20001180
    3850:	00005849 	.word	0x00005849
    3854:	20000d4c 	.word	0x20000d4c
    3858:	20000d54 	.word	0x20000d54
    385c:	20000d5c 	.word	0x20000d5c
    3860:	20000d60 	.word	0x20000d60

00003864 <things_to_do>:

void things_to_do(void)
{
    3864:	b5f0      	push	{r4, r5, r6, r7, lr}
    3866:	b087      	sub	sp, #28
    3868:	af04      	add	r7, sp, #16
	if (party)
    386a:	4b2b      	ldr	r3, [pc, #172]	; (3918 <things_to_do+0xb4>)
    386c:	781b      	ldrb	r3, [r3, #0]
    386e:	b2db      	uxtb	r3, r3
    3870:	2b00      	cmp	r3, #0
    3872:	d026      	beq.n	38c2 <things_to_do+0x5e>
	{
		msgeq7_all_bands(values_bands);
    3874:	4b29      	ldr	r3, [pc, #164]	; (391c <things_to_do+0xb8>)
    3876:	0018      	movs	r0, r3
    3878:	4b29      	ldr	r3, [pc, #164]	; (3920 <things_to_do+0xbc>)
    387a:	4798      	blx	r3
		party_lights(values_bands);
    387c:	4b27      	ldr	r3, [pc, #156]	; (391c <things_to_do+0xb8>)
    387e:	0018      	movs	r0, r3
    3880:	4b28      	ldr	r3, [pc, #160]	; (3924 <things_to_do+0xc0>)
    3882:	4798      	blx	r3
		sprintf(buffer,"%04d %04d %04d %04d %04d %04d\r\n",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
    3884:	4b25      	ldr	r3, [pc, #148]	; (391c <things_to_do+0xb8>)
    3886:	881b      	ldrh	r3, [r3, #0]
    3888:	001e      	movs	r6, r3
    388a:	4b24      	ldr	r3, [pc, #144]	; (391c <things_to_do+0xb8>)
    388c:	885b      	ldrh	r3, [r3, #2]
    388e:	607b      	str	r3, [r7, #4]
    3890:	4b22      	ldr	r3, [pc, #136]	; (391c <things_to_do+0xb8>)
    3892:	889b      	ldrh	r3, [r3, #4]
    3894:	001a      	movs	r2, r3
    3896:	4b21      	ldr	r3, [pc, #132]	; (391c <things_to_do+0xb8>)
    3898:	88db      	ldrh	r3, [r3, #6]
    389a:	001c      	movs	r4, r3
    389c:	4b1f      	ldr	r3, [pc, #124]	; (391c <things_to_do+0xb8>)
    389e:	891b      	ldrh	r3, [r3, #8]
    38a0:	001d      	movs	r5, r3
    38a2:	4b1e      	ldr	r3, [pc, #120]	; (391c <things_to_do+0xb8>)
    38a4:	895b      	ldrh	r3, [r3, #10]
    38a6:	4920      	ldr	r1, [pc, #128]	; (3928 <things_to_do+0xc4>)
    38a8:	4820      	ldr	r0, [pc, #128]	; (392c <things_to_do+0xc8>)
    38aa:	9303      	str	r3, [sp, #12]
    38ac:	9502      	str	r5, [sp, #8]
    38ae:	9401      	str	r4, [sp, #4]
    38b0:	9200      	str	r2, [sp, #0]
    38b2:	687b      	ldr	r3, [r7, #4]
    38b4:	0032      	movs	r2, r6
    38b6:	4c1e      	ldr	r4, [pc, #120]	; (3930 <things_to_do+0xcc>)
    38b8:	47a0      	blx	r4
		sb_uart_write(&buffer);
    38ba:	4b1c      	ldr	r3, [pc, #112]	; (392c <things_to_do+0xc8>)
    38bc:	0018      	movs	r0, r3
    38be:	4b1d      	ldr	r3, [pc, #116]	; (3934 <things_to_do+0xd0>)
    38c0:	4798      	blx	r3
	}
	if ((should_updates % 25) == 0)
    38c2:	4b1d      	ldr	r3, [pc, #116]	; (3938 <things_to_do+0xd4>)
    38c4:	681a      	ldr	r2, [r3, #0]
    38c6:	4b1d      	ldr	r3, [pc, #116]	; (393c <things_to_do+0xd8>)
    38c8:	2119      	movs	r1, #25
    38ca:	0010      	movs	r0, r2
    38cc:	4798      	blx	r3
    38ce:	1e0b      	subs	r3, r1, #0
    38d0:	d116      	bne.n	3900 <things_to_do+0x9c>
	{
		if (flashy1)
    38d2:	4b1b      	ldr	r3, [pc, #108]	; (3940 <things_to_do+0xdc>)
    38d4:	781b      	ldrb	r3, [r3, #0]
    38d6:	b2db      	uxtb	r3, r3
    38d8:	2b00      	cmp	r3, #0
    38da:	d002      	beq.n	38e2 <things_to_do+0x7e>
		{
			flashy_flash1();
    38dc:	4b19      	ldr	r3, [pc, #100]	; (3944 <things_to_do+0xe0>)
    38de:	4798      	blx	r3
    38e0:	e00e      	b.n	3900 <things_to_do+0x9c>
		}
		else if (flashy2)
    38e2:	4b19      	ldr	r3, [pc, #100]	; (3948 <things_to_do+0xe4>)
    38e4:	781b      	ldrb	r3, [r3, #0]
    38e6:	b2db      	uxtb	r3, r3
    38e8:	2b00      	cmp	r3, #0
    38ea:	d002      	beq.n	38f2 <things_to_do+0x8e>
		{
			flashy_flash2();
    38ec:	4b17      	ldr	r3, [pc, #92]	; (394c <things_to_do+0xe8>)
    38ee:	4798      	blx	r3
    38f0:	e006      	b.n	3900 <things_to_do+0x9c>
		}
		else if (flashy3)
    38f2:	4b17      	ldr	r3, [pc, #92]	; (3950 <things_to_do+0xec>)
    38f4:	781b      	ldrb	r3, [r3, #0]
    38f6:	b2db      	uxtb	r3, r3
    38f8:	2b00      	cmp	r3, #0
    38fa:	d001      	beq.n	3900 <things_to_do+0x9c>
		{
			flashy_flash3();
    38fc:	4b15      	ldr	r3, [pc, #84]	; (3954 <things_to_do+0xf0>)
    38fe:	4798      	blx	r3
		}
	}
	if (flashyfade)
    3900:	4b15      	ldr	r3, [pc, #84]	; (3958 <things_to_do+0xf4>)
    3902:	781b      	ldrb	r3, [r3, #0]
    3904:	b2db      	uxtb	r3, r3
    3906:	2b00      	cmp	r3, #0
    3908:	d001      	beq.n	390e <things_to_do+0xaa>
	{
		flashy_fades();
    390a:	4b14      	ldr	r3, [pc, #80]	; (395c <things_to_do+0xf8>)
    390c:	4798      	blx	r3
	/*if (party)
	{
		sprintf(buffer,"%d %d %d %d %d %d\r\n",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
		ble_uart_write(buffer);
	}*/
}
    390e:	46c0      	nop			; (mov r8, r8)
    3910:	46bd      	mov	sp, r7
    3912:	b003      	add	sp, #12
    3914:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3916:	46c0      	nop			; (mov r8, r8)
    3918:	200008b5 	.word	0x200008b5
    391c:	200011d8 	.word	0x200011d8
    3920:	00003651 	.word	0x00003651
    3924:	000021d1 	.word	0x000021d1
    3928:	00007138 	.word	0x00007138
    392c:	20001198 	.word	0x20001198
    3930:	00005c91 	.word	0x00005c91
    3934:	0000428d 	.word	0x0000428d
    3938:	20000d54 	.word	0x20000d54
    393c:	00005849 	.word	0x00005849
    3940:	2000048c 	.word	0x2000048c
    3944:	00002439 	.word	0x00002439
    3948:	200008a3 	.word	0x200008a3
    394c:	00002571 	.word	0x00002571
    3950:	200008c1 	.word	0x200008c1
    3954:	00002959 	.word	0x00002959
    3958:	200008bf 	.word	0x200008bf
    395c:	000027c1 	.word	0x000027c1

00003960 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3960:	b580      	push	{r7, lr}
    3962:	b084      	sub	sp, #16
    3964:	af00      	add	r7, sp, #0
    3966:	0002      	movs	r2, r0
    3968:	1dfb      	adds	r3, r7, #7
    396a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    396c:	230f      	movs	r3, #15
    396e:	18fb      	adds	r3, r7, r3
    3970:	1dfa      	adds	r2, r7, #7
    3972:	7812      	ldrb	r2, [r2, #0]
    3974:	09d2      	lsrs	r2, r2, #7
    3976:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3978:	230e      	movs	r3, #14
    397a:	18fb      	adds	r3, r7, r3
    397c:	1dfa      	adds	r2, r7, #7
    397e:	7812      	ldrb	r2, [r2, #0]
    3980:	0952      	lsrs	r2, r2, #5
    3982:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3984:	4b0d      	ldr	r3, [pc, #52]	; (39bc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3986:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3988:	230f      	movs	r3, #15
    398a:	18fb      	adds	r3, r7, r3
    398c:	781b      	ldrb	r3, [r3, #0]
    398e:	2b00      	cmp	r3, #0
    3990:	d10f      	bne.n	39b2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3992:	230f      	movs	r3, #15
    3994:	18fb      	adds	r3, r7, r3
    3996:	781b      	ldrb	r3, [r3, #0]
    3998:	009b      	lsls	r3, r3, #2
    399a:	2210      	movs	r2, #16
    399c:	4694      	mov	ip, r2
    399e:	44bc      	add	ip, r7
    39a0:	4463      	add	r3, ip
    39a2:	3b08      	subs	r3, #8
    39a4:	681a      	ldr	r2, [r3, #0]
    39a6:	230e      	movs	r3, #14
    39a8:	18fb      	adds	r3, r7, r3
    39aa:	781b      	ldrb	r3, [r3, #0]
    39ac:	01db      	lsls	r3, r3, #7
    39ae:	18d3      	adds	r3, r2, r3
    39b0:	e000      	b.n	39b4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    39b2:	2300      	movs	r3, #0
	}
}
    39b4:	0018      	movs	r0, r3
    39b6:	46bd      	mov	sp, r7
    39b8:	b004      	add	sp, #16
    39ba:	bd80      	pop	{r7, pc}
    39bc:	41004400 	.word	0x41004400

000039c0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    39c0:	b580      	push	{r7, lr}
    39c2:	b082      	sub	sp, #8
    39c4:	af00      	add	r7, sp, #0
    39c6:	0002      	movs	r2, r0
    39c8:	1dfb      	adds	r3, r7, #7
    39ca:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    39cc:	1dfb      	adds	r3, r7, #7
    39ce:	781b      	ldrb	r3, [r3, #0]
    39d0:	0018      	movs	r0, r3
    39d2:	4b03      	ldr	r3, [pc, #12]	; (39e0 <port_get_group_from_gpio_pin+0x20>)
    39d4:	4798      	blx	r3
    39d6:	0003      	movs	r3, r0
}
    39d8:	0018      	movs	r0, r3
    39da:	46bd      	mov	sp, r7
    39dc:	b002      	add	sp, #8
    39de:	bd80      	pop	{r7, pc}
    39e0:	00003961 	.word	0x00003961

000039e4 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    39e4:	b580      	push	{r7, lr}
    39e6:	b082      	sub	sp, #8
    39e8:	af00      	add	r7, sp, #0
    39ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    39ec:	687b      	ldr	r3, [r7, #4]
    39ee:	2200      	movs	r2, #0
    39f0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    39f2:	687b      	ldr	r3, [r7, #4]
    39f4:	2201      	movs	r2, #1
    39f6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    39f8:	687b      	ldr	r3, [r7, #4]
    39fa:	2200      	movs	r2, #0
    39fc:	709a      	strb	r2, [r3, #2]
}
    39fe:	46c0      	nop			; (mov r8, r8)
    3a00:	46bd      	mov	sp, r7
    3a02:	b002      	add	sp, #8
    3a04:	bd80      	pop	{r7, pc}
    3a06:	46c0      	nop			; (mov r8, r8)

00003a08 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3a08:	b580      	push	{r7, lr}
    3a0a:	b084      	sub	sp, #16
    3a0c:	af00      	add	r7, sp, #0
    3a0e:	0002      	movs	r2, r0
    3a10:	1dfb      	adds	r3, r7, #7
    3a12:	701a      	strb	r2, [r3, #0]
    3a14:	1dbb      	adds	r3, r7, #6
    3a16:	1c0a      	adds	r2, r1, #0
    3a18:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3a1a:	1dfb      	adds	r3, r7, #7
    3a1c:	781b      	ldrb	r3, [r3, #0]
    3a1e:	0018      	movs	r0, r3
    3a20:	4b0d      	ldr	r3, [pc, #52]	; (3a58 <port_pin_set_output_level+0x50>)
    3a22:	4798      	blx	r3
    3a24:	0003      	movs	r3, r0
    3a26:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3a28:	1dfb      	adds	r3, r7, #7
    3a2a:	781b      	ldrb	r3, [r3, #0]
    3a2c:	221f      	movs	r2, #31
    3a2e:	4013      	ands	r3, r2
    3a30:	2201      	movs	r2, #1
    3a32:	409a      	lsls	r2, r3
    3a34:	0013      	movs	r3, r2
    3a36:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3a38:	1dbb      	adds	r3, r7, #6
    3a3a:	781b      	ldrb	r3, [r3, #0]
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	d003      	beq.n	3a48 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3a40:	68fb      	ldr	r3, [r7, #12]
    3a42:	68ba      	ldr	r2, [r7, #8]
    3a44:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3a46:	e002      	b.n	3a4e <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3a48:	68fb      	ldr	r3, [r7, #12]
    3a4a:	68ba      	ldr	r2, [r7, #8]
    3a4c:	615a      	str	r2, [r3, #20]
	}
}
    3a4e:	46c0      	nop			; (mov r8, r8)
    3a50:	46bd      	mov	sp, r7
    3a52:	b004      	add	sp, #16
    3a54:	bd80      	pop	{r7, pc}
    3a56:	46c0      	nop			; (mov r8, r8)
    3a58:	000039c1 	.word	0x000039c1

00003a5c <sounds_init_pins>:
	.tracks[24].track_number = 24,						\
	.tracks[24].filesize = 0,							\
};

void sounds_init_pins(void)
{
    3a5c:	b580      	push	{r7, lr}
    3a5e:	b082      	sub	sp, #8
    3a60:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    3a62:	1d3b      	adds	r3, r7, #4
    3a64:	0018      	movs	r0, r3
    3a66:	4b13      	ldr	r3, [pc, #76]	; (3ab4 <sounds_init_pins+0x58>)
    3a68:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    3a6a:	1d3b      	adds	r3, r7, #4
    3a6c:	2201      	movs	r2, #1
    3a6e:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    3a70:	1d3b      	adds	r3, r7, #4
    3a72:	2201      	movs	r2, #1
    3a74:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SOUNDS_PIN_SS,&config_port_pin);
    3a76:	1d3b      	adds	r3, r7, #4
    3a78:	0019      	movs	r1, r3
    3a7a:	2005      	movs	r0, #5
    3a7c:	4b0e      	ldr	r3, [pc, #56]	; (3ab8 <sounds_init_pins+0x5c>)
    3a7e:	4798      	blx	r3
	//port_pin_set_config(SOUNDS_PIN_SPDT_SEL1,&config_port_pin);
	//port_pin_set_config(SOUNDS_PIN_SPDT_SEL2,&config_port_pin);
	
	port_pin_set_config(SB_PIN_RESET,&config_port_pin);
    3a80:	1d3b      	adds	r3, r7, #4
    3a82:	0019      	movs	r1, r3
    3a84:	2007      	movs	r0, #7
    3a86:	4b0c      	ldr	r3, [pc, #48]	; (3ab8 <sounds_init_pins+0x5c>)
    3a88:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_RESET,true);
    3a8a:	2101      	movs	r1, #1
    3a8c:	2007      	movs	r0, #7
    3a8e:	4b0b      	ldr	r3, [pc, #44]	; (3abc <sounds_init_pins+0x60>)
    3a90:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN09,true);
	
	port_pin_set_config(SB_PIN_BTN10,&config_port_pin);
	port_pin_set_output_level(SB_PIN_BTN10,true);*/
	
	config_port_pin.direction = PORT_PIN_PULL_DOWN;
    3a92:	1d3b      	adds	r3, r7, #4
    3a94:	2202      	movs	r2, #2
    3a96:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SB_PIN_UG,&config_port_pin);
    3a98:	1d3b      	adds	r3, r7, #4
    3a9a:	0019      	movs	r1, r3
    3a9c:	201b      	movs	r0, #27
    3a9e:	4b06      	ldr	r3, [pc, #24]	; (3ab8 <sounds_init_pins+0x5c>)
    3aa0:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_UG,false);
    3aa2:	2100      	movs	r1, #0
    3aa4:	201b      	movs	r0, #27
    3aa6:	4b05      	ldr	r3, [pc, #20]	; (3abc <sounds_init_pins+0x60>)
    3aa8:	4798      	blx	r3
}
    3aaa:	46c0      	nop			; (mov r8, r8)
    3aac:	46bd      	mov	sp, r7
    3aae:	b002      	add	sp, #8
    3ab0:	bd80      	pop	{r7, pc}
    3ab2:	46c0      	nop			; (mov r8, r8)
    3ab4:	000039e5 	.word	0x000039e5
    3ab8:	00000519 	.word	0x00000519
    3abc:	00003a09 	.word	0x00003a09

00003ac0 <release_sb_btn>:
{
	port_pin_set_output_level(btn,false);
}

void release_sb_btn(uint8_t btn)
{
    3ac0:	b580      	push	{r7, lr}
    3ac2:	b082      	sub	sp, #8
    3ac4:	af00      	add	r7, sp, #0
    3ac6:	0002      	movs	r2, r0
    3ac8:	1dfb      	adds	r3, r7, #7
    3aca:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(btn,true);
    3acc:	1dfb      	adds	r3, r7, #7
    3ace:	781b      	ldrb	r3, [r3, #0]
    3ad0:	2101      	movs	r1, #1
    3ad2:	0018      	movs	r0, r3
    3ad4:	4b02      	ldr	r3, [pc, #8]	; (3ae0 <release_sb_btn+0x20>)
    3ad6:	4798      	blx	r3
}
    3ad8:	46c0      	nop			; (mov r8, r8)
    3ada:	46bd      	mov	sp, r7
    3adc:	b002      	add	sp, #8
    3ade:	bd80      	pop	{r7, pc}
    3ae0:	00003a09 	.word	0x00003a09

00003ae4 <sounds_reset>:
{
	mcp23017_set_pins(MTH_ADDR,0x00,0x00);
}

void sounds_reset(void)
{
    3ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ae6:	af00      	add	r7, sp, #0
	port_pin_set_output_level(SB_PIN_RESET,false);
    3ae8:	2100      	movs	r1, #0
    3aea:	2007      	movs	r0, #7
    3aec:	4b24      	ldr	r3, [pc, #144]	; (3b80 <sounds_reset+0x9c>)
    3aee:	4798      	blx	r3
	delay_ms(50);
    3af0:	2000      	movs	r0, #0
    3af2:	4b24      	ldr	r3, [pc, #144]	; (3b84 <sounds_reset+0xa0>)
    3af4:	4798      	blx	r3
    3af6:	0003      	movs	r3, r0
    3af8:	001d      	movs	r5, r3
    3afa:	2300      	movs	r3, #0
    3afc:	001e      	movs	r6, r3
    3afe:	4c22      	ldr	r4, [pc, #136]	; (3b88 <sounds_reset+0xa4>)
    3b00:	2232      	movs	r2, #50	; 0x32
    3b02:	2300      	movs	r3, #0
    3b04:	0028      	movs	r0, r5
    3b06:	0031      	movs	r1, r6
    3b08:	47a0      	blx	r4
    3b0a:	0003      	movs	r3, r0
    3b0c:	000c      	movs	r4, r1
    3b0e:	0019      	movs	r1, r3
    3b10:	0022      	movs	r2, r4
    3b12:	4b1e      	ldr	r3, [pc, #120]	; (3b8c <sounds_reset+0xa8>)
    3b14:	2400      	movs	r4, #0
    3b16:	18c9      	adds	r1, r1, r3
    3b18:	4162      	adcs	r2, r4
    3b1a:	0008      	movs	r0, r1
    3b1c:	0011      	movs	r1, r2
    3b1e:	4c1c      	ldr	r4, [pc, #112]	; (3b90 <sounds_reset+0xac>)
    3b20:	4a1c      	ldr	r2, [pc, #112]	; (3b94 <sounds_reset+0xb0>)
    3b22:	2300      	movs	r3, #0
    3b24:	47a0      	blx	r4
    3b26:	0003      	movs	r3, r0
    3b28:	000c      	movs	r4, r1
    3b2a:	0018      	movs	r0, r3
    3b2c:	4b1a      	ldr	r3, [pc, #104]	; (3b98 <sounds_reset+0xb4>)
    3b2e:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_RESET,true);
    3b30:	2101      	movs	r1, #1
    3b32:	2007      	movs	r0, #7
    3b34:	4b12      	ldr	r3, [pc, #72]	; (3b80 <sounds_reset+0x9c>)
    3b36:	4798      	blx	r3
	//delay_ms(1000);
	release_sb_btn(SB_PIN_BTN00);
    3b38:	200b      	movs	r0, #11
    3b3a:	4b18      	ldr	r3, [pc, #96]	; (3b9c <sounds_reset+0xb8>)
    3b3c:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN01);
    3b3e:	200c      	movs	r0, #12
    3b40:	4b16      	ldr	r3, [pc, #88]	; (3b9c <sounds_reset+0xb8>)
    3b42:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN02);
    3b44:	200d      	movs	r0, #13
    3b46:	4b15      	ldr	r3, [pc, #84]	; (3b9c <sounds_reset+0xb8>)
    3b48:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN03);
    3b4a:	200e      	movs	r0, #14
    3b4c:	4b13      	ldr	r3, [pc, #76]	; (3b9c <sounds_reset+0xb8>)
    3b4e:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN04);
    3b50:	200f      	movs	r0, #15
    3b52:	4b12      	ldr	r3, [pc, #72]	; (3b9c <sounds_reset+0xb8>)
    3b54:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN05);
    3b56:	2010      	movs	r0, #16
    3b58:	4b10      	ldr	r3, [pc, #64]	; (3b9c <sounds_reset+0xb8>)
    3b5a:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN06);
    3b5c:	2011      	movs	r0, #17
    3b5e:	4b0f      	ldr	r3, [pc, #60]	; (3b9c <sounds_reset+0xb8>)
    3b60:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN07);
    3b62:	2012      	movs	r0, #18
    3b64:	4b0d      	ldr	r3, [pc, #52]	; (3b9c <sounds_reset+0xb8>)
    3b66:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN08);
    3b68:	2013      	movs	r0, #19
    3b6a:	4b0c      	ldr	r3, [pc, #48]	; (3b9c <sounds_reset+0xb8>)
    3b6c:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN09);
    3b6e:	2014      	movs	r0, #20
    3b70:	4b0a      	ldr	r3, [pc, #40]	; (3b9c <sounds_reset+0xb8>)
    3b72:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN10);
    3b74:	2015      	movs	r0, #21
    3b76:	4b09      	ldr	r3, [pc, #36]	; (3b9c <sounds_reset+0xb8>)
    3b78:	4798      	blx	r3
	//delay_ms(150);

}
    3b7a:	46c0      	nop			; (mov r8, r8)
    3b7c:	46bd      	mov	sp, r7
    3b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b80:	00003a09 	.word	0x00003a09
    3b84:	00004b41 	.word	0x00004b41
    3b88:	00005895 	.word	0x00005895
    3b8c:	00001b57 	.word	0x00001b57
    3b90:	00005855 	.word	0x00005855
    3b94:	00001b58 	.word	0x00001b58
    3b98:	20000001 	.word	0x20000001
    3b9c:	00003ac1 	.word	0x00003ac1

00003ba0 <sb_event_handler>:
int temp_track = 0;
char * stringy_pointy;
void sb_event_handler(char buffer[])
{
    3ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ba2:	b095      	sub	sp, #84	; 0x54
    3ba4:	af02      	add	r7, sp, #8
    3ba6:	6078      	str	r0, [r7, #4]
	if (strstr(buffer,"Adafruit FX Sound Board") != NULL && line_count > 3)
    3ba8:	4abc      	ldr	r2, [pc, #752]	; (3e9c <sb_event_handler+0x2fc>)
    3baa:	687b      	ldr	r3, [r7, #4]
    3bac:	0011      	movs	r1, r2
    3bae:	0018      	movs	r0, r3
    3bb0:	4bbb      	ldr	r3, [pc, #748]	; (3ea0 <sb_event_handler+0x300>)
    3bb2:	4798      	blx	r3
    3bb4:	1e03      	subs	r3, r0, #0
    3bb6:	d056      	beq.n	3c66 <sb_event_handler+0xc6>
    3bb8:	4bba      	ldr	r3, [pc, #744]	; (3ea4 <sb_event_handler+0x304>)
    3bba:	681b      	ldr	r3, [r3, #0]
    3bbc:	2b03      	cmp	r3, #3
    3bbe:	dd52      	ble.n	3c66 <sb_event_handler+0xc6>
	{
		line_count = 0;
    3bc0:	4bb8      	ldr	r3, [pc, #736]	; (3ea4 <sb_event_handler+0x304>)
    3bc2:	2200      	movs	r2, #0
    3bc4:	601a      	str	r2, [r3, #0]
		int files = 0;
    3bc6:	2300      	movs	r3, #0
    3bc8:	63bb      	str	r3, [r7, #56]	; 0x38
		char * string_pointer = strstr(buffer,"Files ");
    3bca:	4ab7      	ldr	r2, [pc, #732]	; (3ea8 <sb_event_handler+0x308>)
    3bcc:	687b      	ldr	r3, [r7, #4]
    3bce:	0011      	movs	r1, r2
    3bd0:	0018      	movs	r0, r3
    3bd2:	4bb3      	ldr	r3, [pc, #716]	; (3ea0 <sb_event_handler+0x300>)
    3bd4:	4798      	blx	r3
    3bd6:	0003      	movs	r3, r0
    3bd8:	643b      	str	r3, [r7, #64]	; 0x40
		sscanf(string_pointer,"Files %d\r\n",&files);
    3bda:	2338      	movs	r3, #56	; 0x38
    3bdc:	18fa      	adds	r2, r7, r3
    3bde:	49b3      	ldr	r1, [pc, #716]	; (3eac <sb_event_handler+0x30c>)
    3be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3be2:	0018      	movs	r0, r3
    3be4:	4bb2      	ldr	r3, [pc, #712]	; (3eb0 <sb_event_handler+0x310>)
    3be6:	4798      	blx	r3
		soundboard_instance.number_of_tracks = files;
    3be8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3bea:	4bb2      	ldr	r3, [pc, #712]	; (3eb4 <sb_event_handler+0x314>)
    3bec:	605a      	str	r2, [r3, #4]
		
		string_pointer = strstr(buffer,"FAT ");
    3bee:	4ab2      	ldr	r2, [pc, #712]	; (3eb8 <sb_event_handler+0x318>)
    3bf0:	687b      	ldr	r3, [r7, #4]
    3bf2:	0011      	movs	r1, r2
    3bf4:	0018      	movs	r0, r3
    3bf6:	4baa      	ldr	r3, [pc, #680]	; (3ea0 <sb_event_handler+0x300>)
    3bf8:	4798      	blx	r3
    3bfa:	0003      	movs	r3, r0
    3bfc:	643b      	str	r3, [r7, #64]	; 0x40
		if (string_pointer != NULL)
    3bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3c00:	2b00      	cmp	r3, #0
    3c02:	d009      	beq.n	3c18 <sb_event_handler+0x78>
		{
			int size;
			sscanf(string_pointer,"FAT %x\r\n",&size);
    3c04:	2334      	movs	r3, #52	; 0x34
    3c06:	18fa      	adds	r2, r7, r3
    3c08:	49ac      	ldr	r1, [pc, #688]	; (3ebc <sb_event_handler+0x31c>)
    3c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3c0c:	0018      	movs	r0, r3
    3c0e:	4ba8      	ldr	r3, [pc, #672]	; (3eb0 <sb_event_handler+0x310>)
    3c10:	4798      	blx	r3
			soundboard_instance.partition_size = size;
    3c12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3c14:	4ba7      	ldr	r3, [pc, #668]	; (3eb4 <sb_event_handler+0x314>)
    3c16:	609a      	str	r2, [r3, #8]
		}
		
		sb_reset_buffers();
    3c18:	4ba9      	ldr	r3, [pc, #676]	; (3ec0 <sb_event_handler+0x320>)
    3c1a:	4798      	blx	r3
		delay_ms(500);
    3c1c:	2000      	movs	r0, #0
    3c1e:	4ba9      	ldr	r3, [pc, #676]	; (3ec4 <sb_event_handler+0x324>)
    3c20:	4798      	blx	r3
    3c22:	0003      	movs	r3, r0
    3c24:	001d      	movs	r5, r3
    3c26:	2300      	movs	r3, #0
    3c28:	001e      	movs	r6, r3
    3c2a:	4ca7      	ldr	r4, [pc, #668]	; (3ec8 <sb_event_handler+0x328>)
    3c2c:	22fa      	movs	r2, #250	; 0xfa
    3c2e:	0052      	lsls	r2, r2, #1
    3c30:	2300      	movs	r3, #0
    3c32:	0028      	movs	r0, r5
    3c34:	0031      	movs	r1, r6
    3c36:	47a0      	blx	r4
    3c38:	0003      	movs	r3, r0
    3c3a:	000c      	movs	r4, r1
    3c3c:	0019      	movs	r1, r3
    3c3e:	0022      	movs	r2, r4
    3c40:	4ba2      	ldr	r3, [pc, #648]	; (3ecc <sb_event_handler+0x32c>)
    3c42:	2400      	movs	r4, #0
    3c44:	18c9      	adds	r1, r1, r3
    3c46:	4162      	adcs	r2, r4
    3c48:	0008      	movs	r0, r1
    3c4a:	0011      	movs	r1, r2
    3c4c:	4ca0      	ldr	r4, [pc, #640]	; (3ed0 <sb_event_handler+0x330>)
    3c4e:	4aa1      	ldr	r2, [pc, #644]	; (3ed4 <sb_event_handler+0x334>)
    3c50:	2300      	movs	r3, #0
    3c52:	47a0      	blx	r4
    3c54:	0003      	movs	r3, r0
    3c56:	000c      	movs	r4, r1
    3c58:	0018      	movs	r0, r3
    3c5a:	4b9f      	ldr	r3, [pc, #636]	; (3ed8 <sb_event_handler+0x338>)
    3c5c:	4798      	blx	r3
		sb_uart_write("L\n");
    3c5e:	4b9f      	ldr	r3, [pc, #636]	; (3edc <sb_event_handler+0x33c>)
    3c60:	0018      	movs	r0, r3
    3c62:	4b9f      	ldr	r3, [pc, #636]	; (3ee0 <sb_event_handler+0x340>)
    3c64:	4798      	blx	r3
		//Adafruit Soundboard started.
	}
	if (strstr(buffer,"NoFile") != NULL)
    3c66:	4a9f      	ldr	r2, [pc, #636]	; (3ee4 <sb_event_handler+0x344>)
    3c68:	687b      	ldr	r3, [r7, #4]
    3c6a:	0011      	movs	r1, r2
    3c6c:	0018      	movs	r0, r3
    3c6e:	4b8c      	ldr	r3, [pc, #560]	; (3ea0 <sb_event_handler+0x300>)
    3c70:	4798      	blx	r3
    3c72:	1e03      	subs	r3, r0, #0
    3c74:	d002      	beq.n	3c7c <sb_event_handler+0xdc>
	{
		line_count = 0;
    3c76:	4b8b      	ldr	r3, [pc, #556]	; (3ea4 <sb_event_handler+0x304>)
    3c78:	2200      	movs	r2, #0
    3c7a:	601a      	str	r2, [r3, #0]
		//The file wasn't found.
	}
	if (strstr(buffer,"done") != NULL)
    3c7c:	4a9a      	ldr	r2, [pc, #616]	; (3ee8 <sb_event_handler+0x348>)
    3c7e:	687b      	ldr	r3, [r7, #4]
    3c80:	0011      	movs	r1, r2
    3c82:	0018      	movs	r0, r3
    3c84:	4b86      	ldr	r3, [pc, #536]	; (3ea0 <sb_event_handler+0x300>)
    3c86:	4798      	blx	r3
    3c88:	1e03      	subs	r3, r0, #0
    3c8a:	d012      	beq.n	3cb2 <sb_event_handler+0x112>
	{
		line_count = 0;
    3c8c:	4b85      	ldr	r3, [pc, #532]	; (3ea4 <sb_event_handler+0x304>)
    3c8e:	2200      	movs	r2, #0
    3c90:	601a      	str	r2, [r3, #0]
		soundboard_instance.is_playing = false;
    3c92:	4b88      	ldr	r3, [pc, #544]	; (3eb4 <sb_event_handler+0x314>)
    3c94:	2200      	movs	r2, #0
    3c96:	705a      	strb	r2, [r3, #1]
		soundboard_instance.tracks[soundboard_instance.currently_playing].is_playing = false;
    3c98:	4b86      	ldr	r3, [pc, #536]	; (3eb4 <sb_event_handler+0x314>)
    3c9a:	68da      	ldr	r2, [r3, #12]
    3c9c:	4985      	ldr	r1, [pc, #532]	; (3eb4 <sb_event_handler+0x314>)
    3c9e:	0013      	movs	r3, r2
    3ca0:	009b      	lsls	r3, r3, #2
    3ca2:	189b      	adds	r3, r3, r2
    3ca4:	009b      	lsls	r3, r3, #2
    3ca6:	18cb      	adds	r3, r1, r3
    3ca8:	3310      	adds	r3, #16
    3caa:	2200      	movs	r2, #0
    3cac:	701a      	strb	r2, [r3, #0]
		sb_reset_buffers();
    3cae:	4b84      	ldr	r3, [pc, #528]	; (3ec0 <sb_event_handler+0x320>)
    3cb0:	4798      	blx	r3
	}
	if(strstr(buffer,"play") != NULL && (strstr(buffer,"WAV") != NULL || strstr(buffer,"OGG") != NULL))
    3cb2:	4a8e      	ldr	r2, [pc, #568]	; (3eec <sb_event_handler+0x34c>)
    3cb4:	687b      	ldr	r3, [r7, #4]
    3cb6:	0011      	movs	r1, r2
    3cb8:	0018      	movs	r0, r3
    3cba:	4b79      	ldr	r3, [pc, #484]	; (3ea0 <sb_event_handler+0x300>)
    3cbc:	4798      	blx	r3
    3cbe:	1e03      	subs	r3, r0, #0
    3cc0:	d03c      	beq.n	3d3c <sb_event_handler+0x19c>
    3cc2:	4a8b      	ldr	r2, [pc, #556]	; (3ef0 <sb_event_handler+0x350>)
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	0011      	movs	r1, r2
    3cc8:	0018      	movs	r0, r3
    3cca:	4b75      	ldr	r3, [pc, #468]	; (3ea0 <sb_event_handler+0x300>)
    3ccc:	4798      	blx	r3
    3cce:	1e03      	subs	r3, r0, #0
    3cd0:	d107      	bne.n	3ce2 <sb_event_handler+0x142>
    3cd2:	4a88      	ldr	r2, [pc, #544]	; (3ef4 <sb_event_handler+0x354>)
    3cd4:	687b      	ldr	r3, [r7, #4]
    3cd6:	0011      	movs	r1, r2
    3cd8:	0018      	movs	r0, r3
    3cda:	4b71      	ldr	r3, [pc, #452]	; (3ea0 <sb_event_handler+0x300>)
    3cdc:	4798      	blx	r3
    3cde:	1e03      	subs	r3, r0, #0
    3ce0:	d02c      	beq.n	3d3c <sb_event_handler+0x19c>
	{
		line_count = 0;
    3ce2:	4b70      	ldr	r3, [pc, #448]	; (3ea4 <sb_event_handler+0x304>)
    3ce4:	2200      	movs	r2, #0
    3ce6:	601a      	str	r2, [r3, #0]
		int track;
		int no;
		char filetype[3];
		char filename[8];
		sscanf(buffer,"\r\n\rplay\t%d\tT%d     %3[^\n]",&track,&no,filetype);
    3ce8:	232c      	movs	r3, #44	; 0x2c
    3cea:	18fc      	adds	r4, r7, r3
    3cec:	2330      	movs	r3, #48	; 0x30
    3cee:	18fa      	adds	r2, r7, r3
    3cf0:	4981      	ldr	r1, [pc, #516]	; (3ef8 <sb_event_handler+0x358>)
    3cf2:	6878      	ldr	r0, [r7, #4]
    3cf4:	2328      	movs	r3, #40	; 0x28
    3cf6:	18fb      	adds	r3, r7, r3
    3cf8:	9300      	str	r3, [sp, #0]
    3cfa:	0023      	movs	r3, r4
    3cfc:	4c6c      	ldr	r4, [pc, #432]	; (3eb0 <sb_event_handler+0x310>)
    3cfe:	47a0      	blx	r4
		sscanf(buffer,"\r\n\rplay\t%d\t%s     %3[^\n]",&track,filename,filetype);
    3d00:	2320      	movs	r3, #32
    3d02:	18fc      	adds	r4, r7, r3
    3d04:	2330      	movs	r3, #48	; 0x30
    3d06:	18fa      	adds	r2, r7, r3
    3d08:	497c      	ldr	r1, [pc, #496]	; (3efc <sb_event_handler+0x35c>)
    3d0a:	6878      	ldr	r0, [r7, #4]
    3d0c:	2328      	movs	r3, #40	; 0x28
    3d0e:	18fb      	adds	r3, r7, r3
    3d10:	9300      	str	r3, [sp, #0]
    3d12:	0023      	movs	r3, r4
    3d14:	4c66      	ldr	r4, [pc, #408]	; (3eb0 <sb_event_handler+0x310>)
    3d16:	47a0      	blx	r4
		soundboard_instance.is_playing = true;
    3d18:	4b66      	ldr	r3, [pc, #408]	; (3eb4 <sb_event_handler+0x314>)
    3d1a:	2201      	movs	r2, #1
    3d1c:	705a      	strb	r2, [r3, #1]
		soundboard_instance.tracks[no].is_playing = true;
    3d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3d20:	4964      	ldr	r1, [pc, #400]	; (3eb4 <sb_event_handler+0x314>)
    3d22:	0013      	movs	r3, r2
    3d24:	009b      	lsls	r3, r3, #2
    3d26:	189b      	adds	r3, r3, r2
    3d28:	009b      	lsls	r3, r3, #2
    3d2a:	18cb      	adds	r3, r1, r3
    3d2c:	3310      	adds	r3, #16
    3d2e:	2201      	movs	r2, #1
    3d30:	701a      	strb	r2, [r3, #0]
		soundboard_instance.currently_playing = no;
    3d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3d34:	4b5f      	ldr	r3, [pc, #380]	; (3eb4 <sb_event_handler+0x314>)
    3d36:	60da      	str	r2, [r3, #12]
		sb_reset_buffers();
    3d38:	4b61      	ldr	r3, [pc, #388]	; (3ec0 <sb_event_handler+0x320>)
    3d3a:	4798      	blx	r3
	}
	if(strstr(buffer,"play") == NULL && (strstr(buffer,"WAV") != NULL || strstr(buffer,"OGG") != NULL) && (strstr(buffer,"\t\r\n") != NULL))
    3d3c:	4a6b      	ldr	r2, [pc, #428]	; (3eec <sb_event_handler+0x34c>)
    3d3e:	687b      	ldr	r3, [r7, #4]
    3d40:	0011      	movs	r1, r2
    3d42:	0018      	movs	r0, r3
    3d44:	4b56      	ldr	r3, [pc, #344]	; (3ea0 <sb_event_handler+0x300>)
    3d46:	4798      	blx	r3
    3d48:	1e03      	subs	r3, r0, #0
    3d4a:	d000      	beq.n	3d4e <sb_event_handler+0x1ae>
    3d4c:	e0a1      	b.n	3e92 <sb_event_handler+0x2f2>
    3d4e:	4a68      	ldr	r2, [pc, #416]	; (3ef0 <sb_event_handler+0x350>)
    3d50:	687b      	ldr	r3, [r7, #4]
    3d52:	0011      	movs	r1, r2
    3d54:	0018      	movs	r0, r3
    3d56:	4b52      	ldr	r3, [pc, #328]	; (3ea0 <sb_event_handler+0x300>)
    3d58:	4798      	blx	r3
    3d5a:	1e03      	subs	r3, r0, #0
    3d5c:	d108      	bne.n	3d70 <sb_event_handler+0x1d0>
    3d5e:	4a65      	ldr	r2, [pc, #404]	; (3ef4 <sb_event_handler+0x354>)
    3d60:	687b      	ldr	r3, [r7, #4]
    3d62:	0011      	movs	r1, r2
    3d64:	0018      	movs	r0, r3
    3d66:	4b4e      	ldr	r3, [pc, #312]	; (3ea0 <sb_event_handler+0x300>)
    3d68:	4798      	blx	r3
    3d6a:	1e03      	subs	r3, r0, #0
    3d6c:	d100      	bne.n	3d70 <sb_event_handler+0x1d0>
    3d6e:	e090      	b.n	3e92 <sb_event_handler+0x2f2>
    3d70:	4a63      	ldr	r2, [pc, #396]	; (3f00 <sb_event_handler+0x360>)
    3d72:	687b      	ldr	r3, [r7, #4]
    3d74:	0011      	movs	r1, r2
    3d76:	0018      	movs	r0, r3
    3d78:	4b49      	ldr	r3, [pc, #292]	; (3ea0 <sb_event_handler+0x300>)
    3d7a:	4798      	blx	r3
    3d7c:	1e03      	subs	r3, r0, #0
    3d7e:	d100      	bne.n	3d82 <sb_event_handler+0x1e2>
    3d80:	e087      	b.n	3e92 <sb_event_handler+0x2f2>
	{
		if (line_count==soundboard_instance.number_of_tracks+2 && line_count > 0 && soundboard_instance.number_of_tracks > 0)
    3d82:	4b4c      	ldr	r3, [pc, #304]	; (3eb4 <sb_event_handler+0x314>)
    3d84:	685b      	ldr	r3, [r3, #4]
    3d86:	1c9a      	adds	r2, r3, #2
    3d88:	4b46      	ldr	r3, [pc, #280]	; (3ea4 <sb_event_handler+0x304>)
    3d8a:	681b      	ldr	r3, [r3, #0]
    3d8c:	429a      	cmp	r2, r3
    3d8e:	d000      	beq.n	3d92 <sb_event_handler+0x1f2>
    3d90:	e07f      	b.n	3e92 <sb_event_handler+0x2f2>
    3d92:	4b44      	ldr	r3, [pc, #272]	; (3ea4 <sb_event_handler+0x304>)
    3d94:	681b      	ldr	r3, [r3, #0]
    3d96:	2b00      	cmp	r3, #0
    3d98:	dc00      	bgt.n	3d9c <sb_event_handler+0x1fc>
    3d9a:	e07a      	b.n	3e92 <sb_event_handler+0x2f2>
    3d9c:	4b45      	ldr	r3, [pc, #276]	; (3eb4 <sb_event_handler+0x314>)
    3d9e:	685b      	ldr	r3, [r3, #4]
    3da0:	2b00      	cmp	r3, #0
    3da2:	dd76      	ble.n	3e92 <sb_event_handler+0x2f2>
		{
			line_count = 0;
    3da4:	4b3f      	ldr	r3, [pc, #252]	; (3ea4 <sb_event_handler+0x304>)
    3da6:	2200      	movs	r2, #0
    3da8:	601a      	str	r2, [r3, #0]
			char *pointy;
			char tempName[9];
			char tempType[4];
			int tempSize;
			for (int k=0;k<soundboard_instance.number_of_tracks;k++)
    3daa:	2300      	movs	r3, #0
    3dac:	647b      	str	r3, [r7, #68]	; 0x44
    3dae:	e066      	b.n	3e7e <sb_event_handler+0x2de>
			{
				
				pointy = strstr(buffer,"\n");
    3db0:	687b      	ldr	r3, [r7, #4]
    3db2:	210a      	movs	r1, #10
    3db4:	0018      	movs	r0, r3
    3db6:	4b53      	ldr	r3, [pc, #332]	; (3f04 <sb_event_handler+0x364>)
    3db8:	4798      	blx	r3
    3dba:	0003      	movs	r3, r0
    3dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
				pointy += k*25;
    3dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3dc0:	0013      	movs	r3, r2
    3dc2:	009b      	lsls	r3, r3, #2
    3dc4:	189b      	adds	r3, r3, r2
    3dc6:	009a      	lsls	r2, r3, #2
    3dc8:	189b      	adds	r3, r3, r2
    3dca:	001a      	movs	r2, r3
    3dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3dce:	189b      	adds	r3, r3, r2
    3dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
				if (pointy != NULL)
    3dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3dd4:	2b00      	cmp	r3, #0
    3dd6:	d04f      	beq.n	3e78 <sb_event_handler+0x2d8>
				{
					sscanf(pointy,"%8s%3s%d\t",tempName,tempType,&tempSize);
    3dd8:	2310      	movs	r3, #16
    3dda:	18fc      	adds	r4, r7, r3
    3ddc:	2314      	movs	r3, #20
    3dde:	18fa      	adds	r2, r7, r3
    3de0:	4949      	ldr	r1, [pc, #292]	; (3f08 <sb_event_handler+0x368>)
    3de2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3de4:	230c      	movs	r3, #12
    3de6:	18fb      	adds	r3, r7, r3
    3de8:	9300      	str	r3, [sp, #0]
    3dea:	0023      	movs	r3, r4
    3dec:	4c30      	ldr	r4, [pc, #192]	; (3eb0 <sb_event_handler+0x310>)
    3dee:	47a0      	blx	r4
					soundboard_instance.tracks[k].filetype = malloc(4);
    3df0:	2004      	movs	r0, #4
    3df2:	4b46      	ldr	r3, [pc, #280]	; (3f0c <sb_event_handler+0x36c>)
    3df4:	4798      	blx	r3
    3df6:	0003      	movs	r3, r0
    3df8:	0018      	movs	r0, r3
    3dfa:	492e      	ldr	r1, [pc, #184]	; (3eb4 <sb_event_handler+0x314>)
    3dfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3dfe:	0013      	movs	r3, r2
    3e00:	009b      	lsls	r3, r3, #2
    3e02:	189b      	adds	r3, r3, r2
    3e04:	009b      	lsls	r3, r3, #2
    3e06:	18cb      	adds	r3, r1, r3
    3e08:	331c      	adds	r3, #28
    3e0a:	6018      	str	r0, [r3, #0]
					strcpy(soundboard_instance.tracks[k].filetype,tempType);
    3e0c:	4929      	ldr	r1, [pc, #164]	; (3eb4 <sb_event_handler+0x314>)
    3e0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3e10:	0013      	movs	r3, r2
    3e12:	009b      	lsls	r3, r3, #2
    3e14:	189b      	adds	r3, r3, r2
    3e16:	009b      	lsls	r3, r3, #2
    3e18:	18cb      	adds	r3, r1, r3
    3e1a:	331c      	adds	r3, #28
    3e1c:	681b      	ldr	r3, [r3, #0]
    3e1e:	2210      	movs	r2, #16
    3e20:	18ba      	adds	r2, r7, r2
    3e22:	0011      	movs	r1, r2
    3e24:	0018      	movs	r0, r3
    3e26:	4b3a      	ldr	r3, [pc, #232]	; (3f10 <sb_event_handler+0x370>)
    3e28:	4798      	blx	r3
					soundboard_instance.tracks[k].filename = malloc(9);
    3e2a:	2009      	movs	r0, #9
    3e2c:	4b37      	ldr	r3, [pc, #220]	; (3f0c <sb_event_handler+0x36c>)
    3e2e:	4798      	blx	r3
    3e30:	0003      	movs	r3, r0
    3e32:	0018      	movs	r0, r3
    3e34:	491f      	ldr	r1, [pc, #124]	; (3eb4 <sb_event_handler+0x314>)
    3e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3e38:	0013      	movs	r3, r2
    3e3a:	009b      	lsls	r3, r3, #2
    3e3c:	189b      	adds	r3, r3, r2
    3e3e:	009b      	lsls	r3, r3, #2
    3e40:	18cb      	adds	r3, r1, r3
    3e42:	3318      	adds	r3, #24
    3e44:	6018      	str	r0, [r3, #0]
					strcpy(soundboard_instance.tracks[k].filename,tempName);
    3e46:	491b      	ldr	r1, [pc, #108]	; (3eb4 <sb_event_handler+0x314>)
    3e48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3e4a:	0013      	movs	r3, r2
    3e4c:	009b      	lsls	r3, r3, #2
    3e4e:	189b      	adds	r3, r3, r2
    3e50:	009b      	lsls	r3, r3, #2
    3e52:	18cb      	adds	r3, r1, r3
    3e54:	3318      	adds	r3, #24
    3e56:	681b      	ldr	r3, [r3, #0]
    3e58:	2214      	movs	r2, #20
    3e5a:	18ba      	adds	r2, r7, r2
    3e5c:	0011      	movs	r1, r2
    3e5e:	0018      	movs	r0, r3
    3e60:	4b2b      	ldr	r3, [pc, #172]	; (3f10 <sb_event_handler+0x370>)
    3e62:	4798      	blx	r3
					soundboard_instance.tracks[k].filesize = tempSize;
    3e64:	68f9      	ldr	r1, [r7, #12]
    3e66:	4813      	ldr	r0, [pc, #76]	; (3eb4 <sb_event_handler+0x314>)
    3e68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3e6a:	0013      	movs	r3, r2
    3e6c:	009b      	lsls	r3, r3, #2
    3e6e:	189b      	adds	r3, r3, r2
    3e70:	009b      	lsls	r3, r3, #2
    3e72:	18c3      	adds	r3, r0, r3
    3e74:	3320      	adds	r3, #32
    3e76:	6019      	str	r1, [r3, #0]
			line_count = 0;
			char *pointy;
			char tempName[9];
			char tempType[4];
			int tempSize;
			for (int k=0;k<soundboard_instance.number_of_tracks;k++)
    3e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3e7a:	3301      	adds	r3, #1
    3e7c:	647b      	str	r3, [r7, #68]	; 0x44
    3e7e:	4b0d      	ldr	r3, [pc, #52]	; (3eb4 <sb_event_handler+0x314>)
    3e80:	685a      	ldr	r2, [r3, #4]
    3e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3e84:	429a      	cmp	r2, r3
    3e86:	dc93      	bgt.n	3db0 <sb_event_handler+0x210>
					soundboard_instance.tracks[k].filename = malloc(9);
					strcpy(soundboard_instance.tracks[k].filename,tempName);
					soundboard_instance.tracks[k].filesize = tempSize;
				}
			}
			soundboard_instance.started = true;
    3e88:	4b0a      	ldr	r3, [pc, #40]	; (3eb4 <sb_event_handler+0x314>)
    3e8a:	2201      	movs	r2, #1
    3e8c:	701a      	strb	r2, [r3, #0]
			sb_reset_buffers();
    3e8e:	4b0c      	ldr	r3, [pc, #48]	; (3ec0 <sb_event_handler+0x320>)
    3e90:	4798      	blx	r3
		}
	}
}
    3e92:	46c0      	nop			; (mov r8, r8)
    3e94:	46bd      	mov	sp, r7
    3e96:	b013      	add	sp, #76	; 0x4c
    3e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e9a:	46c0      	nop			; (mov r8, r8)
    3e9c:	0000716c 	.word	0x0000716c
    3ea0:	00005d87 	.word	0x00005d87
    3ea4:	20000d50 	.word	0x20000d50
    3ea8:	00007184 	.word	0x00007184
    3eac:	0000718c 	.word	0x0000718c
    3eb0:	00005cd5 	.word	0x00005cd5
    3eb4:	20000164 	.word	0x20000164
    3eb8:	00007198 	.word	0x00007198
    3ebc:	000071a0 	.word	0x000071a0
    3ec0:	000042d5 	.word	0x000042d5
    3ec4:	00004b41 	.word	0x00004b41
    3ec8:	00005895 	.word	0x00005895
    3ecc:	00001b57 	.word	0x00001b57
    3ed0:	00005855 	.word	0x00005855
    3ed4:	00001b58 	.word	0x00001b58
    3ed8:	20000001 	.word	0x20000001
    3edc:	000071ac 	.word	0x000071ac
    3ee0:	0000428d 	.word	0x0000428d
    3ee4:	000071b0 	.word	0x000071b0
    3ee8:	000071b8 	.word	0x000071b8
    3eec:	000071c0 	.word	0x000071c0
    3ef0:	000071c8 	.word	0x000071c8
    3ef4:	000071cc 	.word	0x000071cc
    3ef8:	000071d0 	.word	0x000071d0
    3efc:	000071ec 	.word	0x000071ec
    3f00:	00007208 	.word	0x00007208
    3f04:	00005d29 	.word	0x00005d29
    3f08:	0000720c 	.word	0x0000720c
    3f0c:	00005b0d 	.word	0x00005b0d
    3f10:	00005d45 	.word	0x00005d45

00003f14 <sb_play_track_by_number>:

void sb_play_track_by_number(int number)
{
    3f14:	b580      	push	{r7, lr}
    3f16:	b084      	sub	sp, #16
    3f18:	af00      	add	r7, sp, #0
    3f1a:	6078      	str	r0, [r7, #4]
	char buffer[8];
	sprintf(buffer,"#%d\n",number);
    3f1c:	687a      	ldr	r2, [r7, #4]
    3f1e:	4907      	ldr	r1, [pc, #28]	; (3f3c <sb_play_track_by_number+0x28>)
    3f20:	2308      	movs	r3, #8
    3f22:	18fb      	adds	r3, r7, r3
    3f24:	0018      	movs	r0, r3
    3f26:	4b06      	ldr	r3, [pc, #24]	; (3f40 <sb_play_track_by_number+0x2c>)
    3f28:	4798      	blx	r3
	sb_uart_write(buffer);
    3f2a:	2308      	movs	r3, #8
    3f2c:	18fb      	adds	r3, r7, r3
    3f2e:	0018      	movs	r0, r3
    3f30:	4b04      	ldr	r3, [pc, #16]	; (3f44 <sb_play_track_by_number+0x30>)
    3f32:	4798      	blx	r3
}
    3f34:	46c0      	nop			; (mov r8, r8)
    3f36:	46bd      	mov	sp, r7
    3f38:	b004      	add	sp, #16
    3f3a:	bd80      	pop	{r7, pc}
    3f3c:	00007218 	.word	0x00007218
    3f40:	00005c91 	.word	0x00005c91
    3f44:	0000428d 	.word	0x0000428d

00003f48 <sb_quit>:

void sb_quit(void)
{
    3f48:	b580      	push	{r7, lr}
    3f4a:	af00      	add	r7, sp, #0
	sb_uart_write("q\n");
    3f4c:	4b03      	ldr	r3, [pc, #12]	; (3f5c <sb_quit+0x14>)
    3f4e:	0018      	movs	r0, r3
    3f50:	4b03      	ldr	r3, [pc, #12]	; (3f60 <sb_quit+0x18>)
    3f52:	4798      	blx	r3
}
    3f54:	46c0      	nop			; (mov r8, r8)
    3f56:	46bd      	mov	sp, r7
    3f58:	bd80      	pop	{r7, pc}
    3f5a:	46c0      	nop			; (mov r8, r8)
    3f5c:	00007220 	.word	0x00007220
    3f60:	0000428d 	.word	0x0000428d

00003f64 <is_started>:

bool is_started(void)
{
    3f64:	b580      	push	{r7, lr}
    3f66:	af00      	add	r7, sp, #0
	return soundboard_instance.started;
    3f68:	4b02      	ldr	r3, [pc, #8]	; (3f74 <is_started+0x10>)
    3f6a:	781b      	ldrb	r3, [r3, #0]
}
    3f6c:	0018      	movs	r0, r3
    3f6e:	46bd      	mov	sp, r7
    3f70:	bd80      	pop	{r7, pc}
    3f72:	46c0      	nop			; (mov r8, r8)
    3f74:	20000164 	.word	0x20000164

00003f78 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3f78:	b580      	push	{r7, lr}
    3f7a:	b082      	sub	sp, #8
    3f7c:	af00      	add	r7, sp, #0
    3f7e:	0002      	movs	r2, r0
    3f80:	1dfb      	adds	r3, r7, #7
    3f82:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    3f84:	4b06      	ldr	r3, [pc, #24]	; (3fa0 <NVIC_EnableIRQ+0x28>)
    3f86:	1dfa      	adds	r2, r7, #7
    3f88:	7812      	ldrb	r2, [r2, #0]
    3f8a:	0011      	movs	r1, r2
    3f8c:	221f      	movs	r2, #31
    3f8e:	400a      	ands	r2, r1
    3f90:	2101      	movs	r1, #1
    3f92:	4091      	lsls	r1, r2
    3f94:	000a      	movs	r2, r1
    3f96:	601a      	str	r2, [r3, #0]
}
    3f98:	46c0      	nop			; (mov r8, r8)
    3f9a:	46bd      	mov	sp, r7
    3f9c:	b002      	add	sp, #8
    3f9e:	bd80      	pop	{r7, pc}
    3fa0:	e000e100 	.word	0xe000e100

00003fa4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    3fa4:	b5b0      	push	{r4, r5, r7, lr}
    3fa6:	b082      	sub	sp, #8
    3fa8:	af00      	add	r7, sp, #0
    3faa:	0002      	movs	r2, r0
    3fac:	6039      	str	r1, [r7, #0]
    3fae:	1dfb      	adds	r3, r7, #7
    3fb0:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    3fb2:	1dfb      	adds	r3, r7, #7
    3fb4:	781b      	ldrb	r3, [r3, #0]
    3fb6:	2b7f      	cmp	r3, #127	; 0x7f
    3fb8:	d932      	bls.n	4020 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3fba:	4c2f      	ldr	r4, [pc, #188]	; (4078 <NVIC_SetPriority+0xd4>)
    3fbc:	1dfb      	adds	r3, r7, #7
    3fbe:	781b      	ldrb	r3, [r3, #0]
    3fc0:	001a      	movs	r2, r3
    3fc2:	230f      	movs	r3, #15
    3fc4:	4013      	ands	r3, r2
    3fc6:	3b08      	subs	r3, #8
    3fc8:	0899      	lsrs	r1, r3, #2
    3fca:	4a2b      	ldr	r2, [pc, #172]	; (4078 <NVIC_SetPriority+0xd4>)
    3fcc:	1dfb      	adds	r3, r7, #7
    3fce:	781b      	ldrb	r3, [r3, #0]
    3fd0:	0018      	movs	r0, r3
    3fd2:	230f      	movs	r3, #15
    3fd4:	4003      	ands	r3, r0
    3fd6:	3b08      	subs	r3, #8
    3fd8:	089b      	lsrs	r3, r3, #2
    3fda:	3306      	adds	r3, #6
    3fdc:	009b      	lsls	r3, r3, #2
    3fde:	18d3      	adds	r3, r2, r3
    3fe0:	3304      	adds	r3, #4
    3fe2:	681b      	ldr	r3, [r3, #0]
    3fe4:	1dfa      	adds	r2, r7, #7
    3fe6:	7812      	ldrb	r2, [r2, #0]
    3fe8:	0010      	movs	r0, r2
    3fea:	2203      	movs	r2, #3
    3fec:	4002      	ands	r2, r0
    3fee:	00d2      	lsls	r2, r2, #3
    3ff0:	20ff      	movs	r0, #255	; 0xff
    3ff2:	4090      	lsls	r0, r2
    3ff4:	0002      	movs	r2, r0
    3ff6:	43d2      	mvns	r2, r2
    3ff8:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    3ffa:	683b      	ldr	r3, [r7, #0]
    3ffc:	019b      	lsls	r3, r3, #6
    3ffe:	20ff      	movs	r0, #255	; 0xff
    4000:	4018      	ands	r0, r3
    4002:	1dfb      	adds	r3, r7, #7
    4004:	781b      	ldrb	r3, [r3, #0]
    4006:	001d      	movs	r5, r3
    4008:	2303      	movs	r3, #3
    400a:	402b      	ands	r3, r5
    400c:	00db      	lsls	r3, r3, #3
    400e:	4098      	lsls	r0, r3
    4010:	0003      	movs	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    4012:	431a      	orrs	r2, r3
    4014:	1d8b      	adds	r3, r1, #6
    4016:	009b      	lsls	r3, r3, #2
    4018:	18e3      	adds	r3, r4, r3
    401a:	3304      	adds	r3, #4
    401c:	601a      	str	r2, [r3, #0]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    401e:	e027      	b.n	4070 <NVIC_SetPriority+0xcc>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    4020:	4c16      	ldr	r4, [pc, #88]	; (407c <NVIC_SetPriority+0xd8>)
    4022:	1dfb      	adds	r3, r7, #7
    4024:	781b      	ldrb	r3, [r3, #0]
    4026:	b25b      	sxtb	r3, r3
    4028:	089b      	lsrs	r3, r3, #2
    402a:	4914      	ldr	r1, [pc, #80]	; (407c <NVIC_SetPriority+0xd8>)
    402c:	1dfa      	adds	r2, r7, #7
    402e:	7812      	ldrb	r2, [r2, #0]
    4030:	b252      	sxtb	r2, r2
    4032:	0892      	lsrs	r2, r2, #2
    4034:	32c0      	adds	r2, #192	; 0xc0
    4036:	0092      	lsls	r2, r2, #2
    4038:	5852      	ldr	r2, [r2, r1]
    403a:	1df9      	adds	r1, r7, #7
    403c:	7809      	ldrb	r1, [r1, #0]
    403e:	0008      	movs	r0, r1
    4040:	2103      	movs	r1, #3
    4042:	4001      	ands	r1, r0
    4044:	00c9      	lsls	r1, r1, #3
    4046:	20ff      	movs	r0, #255	; 0xff
    4048:	4088      	lsls	r0, r1
    404a:	0001      	movs	r1, r0
    404c:	43c9      	mvns	r1, r1
    404e:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    4050:	683a      	ldr	r2, [r7, #0]
    4052:	0192      	lsls	r2, r2, #6
    4054:	20ff      	movs	r0, #255	; 0xff
    4056:	4010      	ands	r0, r2
    4058:	1dfa      	adds	r2, r7, #7
    405a:	7812      	ldrb	r2, [r2, #0]
    405c:	0015      	movs	r5, r2
    405e:	2203      	movs	r2, #3
    4060:	402a      	ands	r2, r5
    4062:	00d2      	lsls	r2, r2, #3
    4064:	4090      	lsls	r0, r2
    4066:	0002      	movs	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    4068:	430a      	orrs	r2, r1
    406a:	33c0      	adds	r3, #192	; 0xc0
    406c:	009b      	lsls	r3, r3, #2
    406e:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    4070:	46c0      	nop			; (mov r8, r8)
    4072:	46bd      	mov	sp, r7
    4074:	b002      	add	sp, #8
    4076:	bdb0      	pop	{r4, r5, r7, pc}
    4078:	e000ed00 	.word	0xe000ed00
    407c:	e000e100 	.word	0xe000e100

00004080 <sb_uart_clk_init>:
 *  Configure console.
 */


void sb_uart_clk_init(void)
{
    4080:	b580      	push	{r7, lr}
    4082:	af00      	add	r7, sp, #0
	// Start the Software Reset and wait for it to finish
	CONF_STDIO_USART_MODULE->USART.CTRLA.bit.SWRST = 1 ;
    4084:	4a13      	ldr	r2, [pc, #76]	; (40d4 <sb_uart_clk_init+0x54>)
    4086:	6813      	ldr	r3, [r2, #0]
    4088:	2101      	movs	r1, #1
    408a:	430b      	orrs	r3, r1
    408c:	6013      	str	r3, [r2, #0]
	while ( CONF_STDIO_USART_MODULE->USART.CTRLA.bit.SWRST || CONF_STDIO_USART_MODULE->USART.SYNCBUSY.bit.SWRST );
    408e:	46c0      	nop			; (mov r8, r8)
    4090:	4b10      	ldr	r3, [pc, #64]	; (40d4 <sb_uart_clk_init+0x54>)
    4092:	681b      	ldr	r3, [r3, #0]
    4094:	07db      	lsls	r3, r3, #31
    4096:	0fdb      	lsrs	r3, r3, #31
    4098:	b2db      	uxtb	r3, r3
    409a:	2b00      	cmp	r3, #0
    409c:	d1f8      	bne.n	4090 <sb_uart_clk_init+0x10>
    409e:	4b0d      	ldr	r3, [pc, #52]	; (40d4 <sb_uart_clk_init+0x54>)
    40a0:	69db      	ldr	r3, [r3, #28]
    40a2:	07db      	lsls	r3, r3, #31
    40a4:	0fdb      	lsrs	r3, r3, #31
    40a6:	b2db      	uxtb	r3, r3
    40a8:	2b00      	cmp	r3, #0
    40aa:	d1f1      	bne.n	4090 <sb_uart_clk_init+0x10>
	
	// Turn on peripheral clock for SERCOM being used
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
    40ac:	4b0a      	ldr	r3, [pc, #40]	; (40d8 <sb_uart_clk_init+0x58>)
    40ae:	4a0a      	ldr	r2, [pc, #40]	; (40d8 <sb_uart_clk_init+0x58>)
    40b0:	6a12      	ldr	r2, [r2, #32]
    40b2:	2108      	movs	r1, #8
    40b4:	430a      	orrs	r2, r1
    40b6:	621a      	str	r2, [r3, #32]

	//Setting clock
	GCLK->CLKCTRL.reg =
    40b8:	4b08      	ldr	r3, [pc, #32]	; (40dc <sb_uart_clk_init+0x5c>)
    40ba:	4a09      	ldr	r2, [pc, #36]	; (40e0 <sb_uart_clk_init+0x60>)
    40bc:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID( 0x15U )	|	// connected  SERCOMx to
	GCLK_CLKCTRL_GEN_GCLK0		|	// generic Clock Generator 3
	GCLK_CLKCTRL_CLKEN;			// and enable it

	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY ); // Wait for synchronization
    40be:	46c0      	nop			; (mov r8, r8)
    40c0:	4b06      	ldr	r3, [pc, #24]	; (40dc <sb_uart_clk_init+0x5c>)
    40c2:	785b      	ldrb	r3, [r3, #1]
    40c4:	b2db      	uxtb	r3, r3
    40c6:	b25b      	sxtb	r3, r3
    40c8:	2b00      	cmp	r3, #0
    40ca:	dbf9      	blt.n	40c0 <sb_uart_clk_init+0x40>
}
    40cc:	46c0      	nop			; (mov r8, r8)
    40ce:	46bd      	mov	sp, r7
    40d0:	bd80      	pop	{r7, pc}
    40d2:	46c0      	nop			; (mov r8, r8)
    40d4:	42000c00 	.word	0x42000c00
    40d8:	40000400 	.word	0x40000400
    40dc:	40000c00 	.word	0x40000c00
    40e0:	00004015 	.word	0x00004015

000040e4 <sb_uart_pin_init>:

void sb_uart_pin_init(void)
{
    40e4:	b580      	push	{r7, lr}
    40e6:	b082      	sub	sp, #8
    40e8:	af00      	add	r7, sp, #0
	PORT->Group[PORTGROUP_A].DIRCLR.reg = PORT_PA16;	// RX as input
    40ea:	4b1c      	ldr	r3, [pc, #112]	; (415c <sb_uart_pin_init+0x78>)
    40ec:	2280      	movs	r2, #128	; 0x80
    40ee:	0252      	lsls	r2, r2, #9
    40f0:	605a      	str	r2, [r3, #4]
	
	PORT->Group[PORTGROUP_A].DIRSET.reg = PORT_PA18;	// TX as output
    40f2:	4b1a      	ldr	r3, [pc, #104]	; (415c <sb_uart_pin_init+0x78>)
    40f4:	2280      	movs	r2, #128	; 0x80
    40f6:	02d2      	lsls	r2, r2, #11
    40f8:	609a      	str	r2, [r3, #8]
	PORT->Group[PORTGROUP_A].OUTSET.reg = PORT_PA18;	// TX idle state is high
    40fa:	4b18      	ldr	r3, [pc, #96]	; (415c <sb_uart_pin_init+0x78>)
    40fc:	2280      	movs	r2, #128	; 0x80
    40fe:	02d2      	lsls	r2, r2, #11
    4100:	619a      	str	r2, [r3, #24]

	// set port multiplexer for peripheral TX
	// =======================================
	uint32_t temp = (PORT->Group[PORTGROUP_A].PMUX[TX_PIN>>1].reg) & PORT_PMUX_PMUXO( PORT_PMUX_PMUXO_C_Val );
    4102:	4a16      	ldr	r2, [pc, #88]	; (415c <sb_uart_pin_init+0x78>)
    4104:	2339      	movs	r3, #57	; 0x39
    4106:	5cd3      	ldrb	r3, [r2, r3]
    4108:	b2db      	uxtb	r3, r3
    410a:	001a      	movs	r2, r3
    410c:	2320      	movs	r3, #32
    410e:	4013      	ands	r3, r2
    4110:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[TX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( PORT_PMUX_PMUXE_C_Val );
    4112:	4a12      	ldr	r2, [pc, #72]	; (415c <sb_uart_pin_init+0x78>)
    4114:	687b      	ldr	r3, [r7, #4]
    4116:	b2db      	uxtb	r3, r3
    4118:	2102      	movs	r1, #2
    411a:	430b      	orrs	r3, r1
    411c:	b2d9      	uxtb	r1, r3
    411e:	2339      	movs	r3, #57	; 0x39
    4120:	54d1      	strb	r1, [r2, r3]
	
	PORT->Group[PORTGROUP_A].PINCFG[TX_PIN].reg = PORT_PINCFG_PMUXEN ; // Enable port mux
    4122:	4a0e      	ldr	r2, [pc, #56]	; (415c <sb_uart_pin_init+0x78>)
    4124:	2352      	movs	r3, #82	; 0x52
    4126:	2101      	movs	r1, #1
    4128:	54d1      	strb	r1, [r2, r3]
	temp = (PORT->Group[PORTGROUP_A].PMUX[RX_PIN>>1].reg) & PORT_PMUX_PMUXO( PORT_PMUX_PMUXO_C_Val );
    412a:	4a0c      	ldr	r2, [pc, #48]	; (415c <sb_uart_pin_init+0x78>)
    412c:	2338      	movs	r3, #56	; 0x38
    412e:	5cd3      	ldrb	r3, [r2, r3]
    4130:	b2db      	uxtb	r3, r3
    4132:	001a      	movs	r2, r3
    4134:	2320      	movs	r3, #32
    4136:	4013      	ands	r3, r2
    4138:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[RX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( PORT_PMUX_PMUXE_C_Val );
    413a:	4a08      	ldr	r2, [pc, #32]	; (415c <sb_uart_pin_init+0x78>)
    413c:	687b      	ldr	r3, [r7, #4]
    413e:	b2db      	uxtb	r3, r3
    4140:	2102      	movs	r1, #2
    4142:	430b      	orrs	r3, r1
    4144:	b2d9      	uxtb	r1, r3
    4146:	2338      	movs	r3, #56	; 0x38
    4148:	54d1      	strb	r1, [r2, r3]
	PORT->Group[PORTGROUP_A].PINCFG[RX_PIN].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN; // Enable port mux
    414a:	4a04      	ldr	r2, [pc, #16]	; (415c <sb_uart_pin_init+0x78>)
    414c:	2350      	movs	r3, #80	; 0x50
    414e:	2103      	movs	r1, #3
    4150:	54d1      	strb	r1, [r2, r3]
}
    4152:	46c0      	nop			; (mov r8, r8)
    4154:	46bd      	mov	sp, r7
    4156:	b002      	add	sp, #8
    4158:	bd80      	pop	{r7, pc}
    415a:	46c0      	nop			; (mov r8, r8)
    415c:	41004400 	.word	0x41004400

00004160 <sb_uart_init>:

void sb_uart_init(void)
{
    4160:	b580      	push	{r7, lr}
    4162:	af00      	add	r7, sp, #0
	sb_uart_clk_init();
    4164:	4b1a      	ldr	r3, [pc, #104]	; (41d0 <sb_uart_init+0x70>)
    4166:	4798      	blx	r3
	sb_uart_pin_init();
    4168:	4b1a      	ldr	r3, [pc, #104]	; (41d4 <sb_uart_init+0x74>)
    416a:	4798      	blx	r3
	
	sb_buff_count = 0;
    416c:	4b1a      	ldr	r3, [pc, #104]	; (41d8 <sb_uart_init+0x78>)
    416e:	2200      	movs	r2, #0
    4170:	601a      	str	r2, [r3, #0]
	line_count = 0;
    4172:	4b1a      	ldr	r3, [pc, #104]	; (41dc <sb_uart_init+0x7c>)
    4174:	2200      	movs	r2, #0
    4176:	601a      	str	r2, [r3, #0]
	
	CONF_STDIO_USART_MODULE->USART.CTRLA.reg =
    4178:	4b19      	ldr	r3, [pc, #100]	; (41e0 <sb_uart_init+0x80>)
    417a:	4a1a      	ldr	r2, [pc, #104]	; (41e4 <sb_uart_init+0x84>)
    417c:	601a      	str	r2, [r3, #0]
	
	
	// Asynchronous arithmetic mode
	// 65535 * ( 1 - sampleRateValue * baudrate / SystemCoreClock);
	// 65535 - 65535 * (sampleRateValue * baudrate / SystemCoreClock));
	CONF_STDIO_USART_MODULE->USART.BAUD.reg = 65535.0f * ( 1.0f - (16.0 * (float)(9600)) / (float)(SYSTEM_CLK));
    417e:	4b18      	ldr	r3, [pc, #96]	; (41e0 <sb_uart_init+0x80>)
    4180:	4a19      	ldr	r2, [pc, #100]	; (41e8 <sb_uart_init+0x88>)
    4182:	819a      	strh	r2, [r3, #12]
	//BLE_UART_SERCOM->USART.BAUD.bit.BAUD = 9600;
	
	CONF_STDIO_USART_MODULE->USART.CTRLB.reg =
    4184:	4b16      	ldr	r3, [pc, #88]	; (41e0 <sb_uart_init+0x80>)
    4186:	22c0      	movs	r2, #192	; 0xc0
    4188:	0292      	lsls	r2, r2, #10
    418a:	605a      	str	r2, [r3, #4]
	SERCOM_USART_CTRLB_CHSIZE(0)	|	// 8 bit character size
	SERCOM_USART_CTRLB_TXEN			|	// Enable Transmit
	SERCOM_USART_CTRLB_RXEN;			// Enable Receive

	// Get Synced
	while (CONF_STDIO_USART_MODULE->USART.SYNCBUSY.bit.CTRLB);
    418c:	46c0      	nop			; (mov r8, r8)
    418e:	4b14      	ldr	r3, [pc, #80]	; (41e0 <sb_uart_init+0x80>)
    4190:	69db      	ldr	r3, [r3, #28]
    4192:	075b      	lsls	r3, r3, #29
    4194:	0fdb      	lsrs	r3, r3, #31
    4196:	b2db      	uxtb	r3, r3
    4198:	2b00      	cmp	r3, #0
    419a:	d1f8      	bne.n	418e <sb_uart_init+0x2e>

	//Set the Interrupt to use
	CONF_STDIO_USART_MODULE->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;	// Interrupt on received complete
    419c:	4b10      	ldr	r3, [pc, #64]	; (41e0 <sb_uart_init+0x80>)
    419e:	2204      	movs	r2, #4
    41a0:	759a      	strb	r2, [r3, #22]
	
	// Enable interrupts
	NVIC_EnableIRQ(SERCOM1_IRQn);
    41a2:	200a      	movs	r0, #10
    41a4:	4b11      	ldr	r3, [pc, #68]	; (41ec <sb_uart_init+0x8c>)
    41a6:	4798      	blx	r3
	NVIC_SetPriority(SERCOM1_IRQn,1);
    41a8:	2101      	movs	r1, #1
    41aa:	200a      	movs	r0, #10
    41ac:	4b10      	ldr	r3, [pc, #64]	; (41f0 <sb_uart_init+0x90>)
    41ae:	4798      	blx	r3
	
	// enable the peripheral block
	CONF_STDIO_USART_MODULE->USART.CTRLA.bit.ENABLE = 0x1u;
    41b0:	4a0b      	ldr	r2, [pc, #44]	; (41e0 <sb_uart_init+0x80>)
    41b2:	6813      	ldr	r3, [r2, #0]
    41b4:	2102      	movs	r1, #2
    41b6:	430b      	orrs	r3, r1
    41b8:	6013      	str	r3, [r2, #0]
	
	// Wait for sercom to enable
	while(CONF_STDIO_USART_MODULE->USART.SYNCBUSY.bit.ENABLE);
    41ba:	46c0      	nop			; (mov r8, r8)
    41bc:	4b08      	ldr	r3, [pc, #32]	; (41e0 <sb_uart_init+0x80>)
    41be:	69db      	ldr	r3, [r3, #28]
    41c0:	079b      	lsls	r3, r3, #30
    41c2:	0fdb      	lsrs	r3, r3, #31
    41c4:	b2db      	uxtb	r3, r3
    41c6:	2b00      	cmp	r3, #0
    41c8:	d1f8      	bne.n	41bc <sb_uart_init+0x5c>
}
    41ca:	46c0      	nop			; (mov r8, r8)
    41cc:	46bd      	mov	sp, r7
    41ce:	bd80      	pop	{r7, pc}
    41d0:	00004081 	.word	0x00004081
    41d4:	000040e5 	.word	0x000040e5
    41d8:	200003f8 	.word	0x200003f8
    41dc:	20000d50 	.word	0x20000d50
    41e0:	42000c00 	.word	0x42000c00
    41e4:	40200084 	.word	0x40200084
    41e8:	fffffb14 	.word	0xfffffb14
    41ec:	00003f79 	.word	0x00003f79
    41f0:	00003fa5 	.word	0x00003fa5

000041f4 <SERCOM1_Handler>:


void SERCOM1_Handler()
{
    41f4:	b580      	push	{r7, lr}
    41f6:	af00      	add	r7, sp, #0
	if (CONF_STDIO_USART_MODULE->USART.INTFLAG.bit.RXC)
    41f8:	4b1f      	ldr	r3, [pc, #124]	; (4278 <SERCOM1_Handler+0x84>)
    41fa:	7e1b      	ldrb	r3, [r3, #24]
    41fc:	075b      	lsls	r3, r3, #29
    41fe:	0fdb      	lsrs	r3, r3, #31
    4200:	b2db      	uxtb	r3, r3
    4202:	2b00      	cmp	r3, #0
    4204:	d035      	beq.n	4272 <SERCOM1_Handler+0x7e>
	{
		// Got a character
		if (sb_buff_count > sizeof(sb_rx_buffer_array)-1)
    4206:	4b1d      	ldr	r3, [pc, #116]	; (427c <SERCOM1_Handler+0x88>)
    4208:	681b      	ldr	r3, [r3, #0]
    420a:	1e1a      	subs	r2, r3, #0
    420c:	4b1c      	ldr	r3, [pc, #112]	; (4280 <SERCOM1_Handler+0x8c>)
    420e:	429a      	cmp	r2, r3
    4210:	d917      	bls.n	4242 <SERCOM1_Handler+0x4e>
		{
			sb_buff_count = 0;
    4212:	4b1a      	ldr	r3, [pc, #104]	; (427c <SERCOM1_Handler+0x88>)
    4214:	2200      	movs	r2, #0
    4216:	601a      	str	r2, [r3, #0]
			sb_rx_buffer_array[sb_buff_count] = (uint8_t) CONF_STDIO_USART_MODULE->USART.DATA.reg;
    4218:	4b18      	ldr	r3, [pc, #96]	; (427c <SERCOM1_Handler+0x88>)
    421a:	681b      	ldr	r3, [r3, #0]
    421c:	4a16      	ldr	r2, [pc, #88]	; (4278 <SERCOM1_Handler+0x84>)
    421e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    4220:	b292      	uxth	r2, r2
    4222:	b2d1      	uxtb	r1, r2
    4224:	4a17      	ldr	r2, [pc, #92]	; (4284 <SERCOM1_Handler+0x90>)
    4226:	54d1      	strb	r1, [r2, r3]
			if (sb_rx_buffer_array[sb_buff_count] == 13)
    4228:	4b14      	ldr	r3, [pc, #80]	; (427c <SERCOM1_Handler+0x88>)
    422a:	681b      	ldr	r3, [r3, #0]
    422c:	4a15      	ldr	r2, [pc, #84]	; (4284 <SERCOM1_Handler+0x90>)
    422e:	5cd3      	ldrb	r3, [r2, r3]
    4230:	b2db      	uxtb	r3, r3
    4232:	2b0d      	cmp	r3, #13
    4234:	d11d      	bne.n	4272 <SERCOM1_Handler+0x7e>
			{
				line_count++;
    4236:	4b14      	ldr	r3, [pc, #80]	; (4288 <SERCOM1_Handler+0x94>)
    4238:	681b      	ldr	r3, [r3, #0]
    423a:	1c5a      	adds	r2, r3, #1
    423c:	4b12      	ldr	r3, [pc, #72]	; (4288 <SERCOM1_Handler+0x94>)
    423e:	601a      	str	r2, [r3, #0]
			{
				line_count++;
			}
		}
	}
}
    4240:	e017      	b.n	4272 <SERCOM1_Handler+0x7e>
				line_count++;
			}
		}
		else
		{
			sb_rx_buffer_array[sb_buff_count++] = (uint8_t)CONF_STDIO_USART_MODULE->USART.DATA.reg;
    4242:	4b0e      	ldr	r3, [pc, #56]	; (427c <SERCOM1_Handler+0x88>)
    4244:	681b      	ldr	r3, [r3, #0]
    4246:	1c59      	adds	r1, r3, #1
    4248:	4a0c      	ldr	r2, [pc, #48]	; (427c <SERCOM1_Handler+0x88>)
    424a:	6011      	str	r1, [r2, #0]
    424c:	4a0a      	ldr	r2, [pc, #40]	; (4278 <SERCOM1_Handler+0x84>)
    424e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    4250:	b292      	uxth	r2, r2
    4252:	b2d1      	uxtb	r1, r2
    4254:	4a0b      	ldr	r2, [pc, #44]	; (4284 <SERCOM1_Handler+0x90>)
    4256:	54d1      	strb	r1, [r2, r3]
			if (sb_rx_buffer_array[sb_buff_count-1] == 13)
    4258:	4b08      	ldr	r3, [pc, #32]	; (427c <SERCOM1_Handler+0x88>)
    425a:	681b      	ldr	r3, [r3, #0]
    425c:	3b01      	subs	r3, #1
    425e:	4a09      	ldr	r2, [pc, #36]	; (4284 <SERCOM1_Handler+0x90>)
    4260:	5cd3      	ldrb	r3, [r2, r3]
    4262:	b2db      	uxtb	r3, r3
    4264:	2b0d      	cmp	r3, #13
    4266:	d104      	bne.n	4272 <SERCOM1_Handler+0x7e>
			{
				line_count++;
    4268:	4b07      	ldr	r3, [pc, #28]	; (4288 <SERCOM1_Handler+0x94>)
    426a:	681b      	ldr	r3, [r3, #0]
    426c:	1c5a      	adds	r2, r3, #1
    426e:	4b06      	ldr	r3, [pc, #24]	; (4288 <SERCOM1_Handler+0x94>)
    4270:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
    4272:	46c0      	nop			; (mov r8, r8)
    4274:	46bd      	mov	sp, r7
    4276:	bd80      	pop	{r7, pc}
    4278:	42000c00 	.word	0x42000c00
    427c:	200003f8 	.word	0x200003f8
    4280:	000003ff 	.word	0x000003ff
    4284:	2000094c 	.word	0x2000094c
    4288:	20000d50 	.word	0x20000d50

0000428c <sb_uart_write>:

void sb_uart_write(char buffer[])
{
    428c:	b580      	push	{r7, lr}
    428e:	b084      	sub	sp, #16
    4290:	af00      	add	r7, sp, #0
    4292:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
    4294:	2300      	movs	r3, #0
    4296:	60fb      	str	r3, [r7, #12]
	while(buffer[i] != '\0')
    4298:	e00f      	b.n	42ba <sb_uart_write+0x2e>
	{
		if(CONF_STDIO_USART_MODULE->USART.INTFLAG.bit.DRE == 1)
    429a:	4b0d      	ldr	r3, [pc, #52]	; (42d0 <sb_uart_write+0x44>)
    429c:	7e1b      	ldrb	r3, [r3, #24]
    429e:	07db      	lsls	r3, r3, #31
    42a0:	0fdb      	lsrs	r3, r3, #31
    42a2:	b2db      	uxtb	r3, r3
    42a4:	2b01      	cmp	r3, #1
    42a6:	d108      	bne.n	42ba <sb_uart_write+0x2e>
		{
			CONF_STDIO_USART_MODULE->USART.DATA.reg = (uint16_t)buffer[i++];
    42a8:	4909      	ldr	r1, [pc, #36]	; (42d0 <sb_uart_write+0x44>)
    42aa:	68fb      	ldr	r3, [r7, #12]
    42ac:	1c5a      	adds	r2, r3, #1
    42ae:	60fa      	str	r2, [r7, #12]
    42b0:	687a      	ldr	r2, [r7, #4]
    42b2:	18d3      	adds	r3, r2, r3
    42b4:	781b      	ldrb	r3, [r3, #0]
    42b6:	b29b      	uxth	r3, r3
    42b8:	850b      	strh	r3, [r1, #40]	; 0x28
}

void sb_uart_write(char buffer[])
{
	uint32_t i = 0;
	while(buffer[i] != '\0')
    42ba:	687a      	ldr	r2, [r7, #4]
    42bc:	68fb      	ldr	r3, [r7, #12]
    42be:	18d3      	adds	r3, r2, r3
    42c0:	781b      	ldrb	r3, [r3, #0]
    42c2:	2b00      	cmp	r3, #0
    42c4:	d1e9      	bne.n	429a <sb_uart_write+0xe>
		if(CONF_STDIO_USART_MODULE->USART.INTFLAG.bit.DRE == 1)
		{
			CONF_STDIO_USART_MODULE->USART.DATA.reg = (uint16_t)buffer[i++];
		}
	}
}
    42c6:	46c0      	nop			; (mov r8, r8)
    42c8:	46bd      	mov	sp, r7
    42ca:	b004      	add	sp, #16
    42cc:	bd80      	pop	{r7, pc}
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	42000c00 	.word	0x42000c00

000042d4 <sb_reset_buffers>:

void sb_reset_buffers(void)
{
    42d4:	b580      	push	{r7, lr}
    42d6:	b082      	sub	sp, #8
    42d8:	af00      	add	r7, sp, #0
	for (uint32_t k=0;k<sizeof(sb_rx_buffer_array);k++)
    42da:	2300      	movs	r3, #0
    42dc:	607b      	str	r3, [r7, #4]
    42de:	e007      	b.n	42f0 <sb_reset_buffers+0x1c>
	{
		sb_rx_buffer_array[k] = 0;
    42e0:	4a09      	ldr	r2, [pc, #36]	; (4308 <sb_reset_buffers+0x34>)
    42e2:	687b      	ldr	r3, [r7, #4]
    42e4:	18d3      	adds	r3, r2, r3
    42e6:	2200      	movs	r2, #0
    42e8:	701a      	strb	r2, [r3, #0]
	}
}

void sb_reset_buffers(void)
{
	for (uint32_t k=0;k<sizeof(sb_rx_buffer_array);k++)
    42ea:	687b      	ldr	r3, [r7, #4]
    42ec:	3301      	adds	r3, #1
    42ee:	607b      	str	r3, [r7, #4]
    42f0:	687b      	ldr	r3, [r7, #4]
    42f2:	4a06      	ldr	r2, [pc, #24]	; (430c <sb_reset_buffers+0x38>)
    42f4:	4293      	cmp	r3, r2
    42f6:	d9f3      	bls.n	42e0 <sb_reset_buffers+0xc>
	{
		sb_rx_buffer_array[k] = 0;
	}
	sb_buff_count = 0;
    42f8:	4b05      	ldr	r3, [pc, #20]	; (4310 <sb_reset_buffers+0x3c>)
    42fa:	2200      	movs	r2, #0
    42fc:	601a      	str	r2, [r3, #0]
}
    42fe:	46c0      	nop			; (mov r8, r8)
    4300:	46bd      	mov	sp, r7
    4302:	b002      	add	sp, #8
    4304:	bd80      	pop	{r7, pc}
    4306:	46c0      	nop			; (mov r8, r8)
    4308:	2000094c 	.word	0x2000094c
    430c:	000003ff 	.word	0x000003ff
    4310:	200003f8 	.word	0x200003f8

00004314 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4314:	b580      	push	{r7, lr}
    4316:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    4318:	46c0      	nop			; (mov r8, r8)
    431a:	46bd      	mov	sp, r7
    431c:	bd80      	pop	{r7, pc}
    431e:	46c0      	nop			; (mov r8, r8)

00004320 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    4320:	b580      	push	{r7, lr}
    4322:	b082      	sub	sp, #8
    4324:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    4326:	4b10      	ldr	r3, [pc, #64]	; (4368 <cpu_irq_enter_critical+0x48>)
    4328:	681b      	ldr	r3, [r3, #0]
    432a:	2b00      	cmp	r3, #0
    432c:	d112      	bne.n	4354 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    432e:	f3ef 8310 	mrs	r3, PRIMASK
    4332:	607b      	str	r3, [r7, #4]
  return(result);
    4334:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    4336:	2b00      	cmp	r3, #0
    4338:	d109      	bne.n	434e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    433a:	b672      	cpsid	i
    433c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4340:	4b0a      	ldr	r3, [pc, #40]	; (436c <cpu_irq_enter_critical+0x4c>)
    4342:	2200      	movs	r2, #0
    4344:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4346:	4b0a      	ldr	r3, [pc, #40]	; (4370 <cpu_irq_enter_critical+0x50>)
    4348:	2201      	movs	r2, #1
    434a:	701a      	strb	r2, [r3, #0]
    434c:	e002      	b.n	4354 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    434e:	4b08      	ldr	r3, [pc, #32]	; (4370 <cpu_irq_enter_critical+0x50>)
    4350:	2200      	movs	r2, #0
    4352:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4354:	4b04      	ldr	r3, [pc, #16]	; (4368 <cpu_irq_enter_critical+0x48>)
    4356:	681b      	ldr	r3, [r3, #0]
    4358:	1c5a      	adds	r2, r3, #1
    435a:	4b03      	ldr	r3, [pc, #12]	; (4368 <cpu_irq_enter_critical+0x48>)
    435c:	601a      	str	r2, [r3, #0]
}
    435e:	46c0      	nop			; (mov r8, r8)
    4360:	46bd      	mov	sp, r7
    4362:	b002      	add	sp, #8
    4364:	bd80      	pop	{r7, pc}
    4366:	46c0      	nop			; (mov r8, r8)
    4368:	200003fc 	.word	0x200003fc
    436c:	20000368 	.word	0x20000368
    4370:	20000400 	.word	0x20000400

00004374 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    4374:	b580      	push	{r7, lr}
    4376:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4378:	4b0b      	ldr	r3, [pc, #44]	; (43a8 <cpu_irq_leave_critical+0x34>)
    437a:	681b      	ldr	r3, [r3, #0]
    437c:	1e5a      	subs	r2, r3, #1
    437e:	4b0a      	ldr	r3, [pc, #40]	; (43a8 <cpu_irq_leave_critical+0x34>)
    4380:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4382:	4b09      	ldr	r3, [pc, #36]	; (43a8 <cpu_irq_leave_critical+0x34>)
    4384:	681b      	ldr	r3, [r3, #0]
    4386:	2b00      	cmp	r3, #0
    4388:	d10a      	bne.n	43a0 <cpu_irq_leave_critical+0x2c>
    438a:	4b08      	ldr	r3, [pc, #32]	; (43ac <cpu_irq_leave_critical+0x38>)
    438c:	781b      	ldrb	r3, [r3, #0]
    438e:	b2db      	uxtb	r3, r3
    4390:	2b00      	cmp	r3, #0
    4392:	d005      	beq.n	43a0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    4394:	4b06      	ldr	r3, [pc, #24]	; (43b0 <cpu_irq_leave_critical+0x3c>)
    4396:	2201      	movs	r2, #1
    4398:	701a      	strb	r2, [r3, #0]
    439a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    439e:	b662      	cpsie	i
	}
}
    43a0:	46c0      	nop			; (mov r8, r8)
    43a2:	46bd      	mov	sp, r7
    43a4:	bd80      	pop	{r7, pc}
    43a6:	46c0      	nop			; (mov r8, r8)
    43a8:	200003fc 	.word	0x200003fc
    43ac:	20000400 	.word	0x20000400
    43b0:	20000368 	.word	0x20000368

000043b4 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    43b4:	b580      	push	{r7, lr}
    43b6:	b082      	sub	sp, #8
    43b8:	af00      	add	r7, sp, #0
    43ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    43bc:	687b      	ldr	r3, [r7, #4]
    43be:	2201      	movs	r2, #1
    43c0:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    43c2:	687b      	ldr	r3, [r7, #4]
    43c4:	2200      	movs	r2, #0
    43c6:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    43c8:	687b      	ldr	r3, [r7, #4]
    43ca:	2206      	movs	r2, #6
    43cc:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    43ce:	687b      	ldr	r3, [r7, #4]
    43d0:	2200      	movs	r2, #0
    43d2:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    43d4:	687b      	ldr	r3, [r7, #4]
    43d6:	2200      	movs	r2, #0
    43d8:	725a      	strb	r2, [r3, #9]
}
    43da:	46c0      	nop			; (mov r8, r8)
    43dc:	46bd      	mov	sp, r7
    43de:	b002      	add	sp, #8
    43e0:	bd80      	pop	{r7, pc}
    43e2:	46c0      	nop			; (mov r8, r8)

000043e4 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    43e4:	b580      	push	{r7, lr}
    43e6:	b082      	sub	sp, #8
    43e8:	af00      	add	r7, sp, #0
    43ea:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    43ec:	687b      	ldr	r3, [r7, #4]
    43ee:	2203      	movs	r2, #3
    43f0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    43f2:	687b      	ldr	r3, [r7, #4]
    43f4:	2200      	movs	r2, #0
    43f6:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    43f8:	687b      	ldr	r3, [r7, #4]
    43fa:	2201      	movs	r2, #1
    43fc:	709a      	strb	r2, [r3, #2]
}
    43fe:	46c0      	nop			; (mov r8, r8)
    4400:	46bd      	mov	sp, r7
    4402:	b002      	add	sp, #8
    4404:	bd80      	pop	{r7, pc}
    4406:	46c0      	nop			; (mov r8, r8)

00004408 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    4408:	b580      	push	{r7, lr}
    440a:	b082      	sub	sp, #8
    440c:	af00      	add	r7, sp, #0
    440e:	0002      	movs	r2, r0
    4410:	1dfb      	adds	r3, r7, #7
    4412:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    4414:	4a03      	ldr	r2, [pc, #12]	; (4424 <system_cpu_clock_set_divider+0x1c>)
    4416:	1dfb      	adds	r3, r7, #7
    4418:	781b      	ldrb	r3, [r3, #0]
    441a:	7213      	strb	r3, [r2, #8]
}
    441c:	46c0      	nop			; (mov r8, r8)
    441e:	46bd      	mov	sp, r7
    4420:	b002      	add	sp, #8
    4422:	bd80      	pop	{r7, pc}
    4424:	40000400 	.word	0x40000400

00004428 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    4428:	b580      	push	{r7, lr}
    442a:	b082      	sub	sp, #8
    442c:	af00      	add	r7, sp, #0
    442e:	0002      	movs	r2, r0
    4430:	1dfb      	adds	r3, r7, #7
    4432:	701a      	strb	r2, [r3, #0]
    4434:	1dbb      	adds	r3, r7, #6
    4436:	1c0a      	adds	r2, r1, #0
    4438:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    443a:	1dfb      	adds	r3, r7, #7
    443c:	781b      	ldrb	r3, [r3, #0]
    443e:	2b01      	cmp	r3, #1
    4440:	d008      	beq.n	4454 <system_apb_clock_set_divider+0x2c>
    4442:	2b02      	cmp	r3, #2
    4444:	d00b      	beq.n	445e <system_apb_clock_set_divider+0x36>
    4446:	2b00      	cmp	r3, #0
    4448:	d10e      	bne.n	4468 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    444a:	4a0b      	ldr	r2, [pc, #44]	; (4478 <system_apb_clock_set_divider+0x50>)
    444c:	1dbb      	adds	r3, r7, #6
    444e:	781b      	ldrb	r3, [r3, #0]
    4450:	7253      	strb	r3, [r2, #9]
			break;
    4452:	e00b      	b.n	446c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    4454:	4a08      	ldr	r2, [pc, #32]	; (4478 <system_apb_clock_set_divider+0x50>)
    4456:	1dbb      	adds	r3, r7, #6
    4458:	781b      	ldrb	r3, [r3, #0]
    445a:	7293      	strb	r3, [r2, #10]
			break;
    445c:	e006      	b.n	446c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    445e:	4a06      	ldr	r2, [pc, #24]	; (4478 <system_apb_clock_set_divider+0x50>)
    4460:	1dbb      	adds	r3, r7, #6
    4462:	781b      	ldrb	r3, [r3, #0]
    4464:	72d3      	strb	r3, [r2, #11]
			break;
    4466:	e001      	b.n	446c <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4468:	2317      	movs	r3, #23
    446a:	e000      	b.n	446e <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    446c:	2300      	movs	r3, #0
}
    446e:	0018      	movs	r0, r3
    4470:	46bd      	mov	sp, r7
    4472:	b002      	add	sp, #8
    4474:	bd80      	pop	{r7, pc}
    4476:	46c0      	nop			; (mov r8, r8)
    4478:	40000400 	.word	0x40000400

0000447c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    447c:	b580      	push	{r7, lr}
    447e:	b082      	sub	sp, #8
    4480:	af00      	add	r7, sp, #0
    4482:	0002      	movs	r2, r0
    4484:	1dfb      	adds	r3, r7, #7
    4486:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4488:	4a08      	ldr	r2, [pc, #32]	; (44ac <system_flash_set_waitstates+0x30>)
    448a:	1dfb      	adds	r3, r7, #7
    448c:	781b      	ldrb	r3, [r3, #0]
    448e:	210f      	movs	r1, #15
    4490:	400b      	ands	r3, r1
    4492:	b2d9      	uxtb	r1, r3
    4494:	6853      	ldr	r3, [r2, #4]
    4496:	200f      	movs	r0, #15
    4498:	4001      	ands	r1, r0
    449a:	0049      	lsls	r1, r1, #1
    449c:	201e      	movs	r0, #30
    449e:	4383      	bics	r3, r0
    44a0:	430b      	orrs	r3, r1
    44a2:	6053      	str	r3, [r2, #4]
}
    44a4:	46c0      	nop			; (mov r8, r8)
    44a6:	46bd      	mov	sp, r7
    44a8:	b002      	add	sp, #8
    44aa:	bd80      	pop	{r7, pc}
    44ac:	41004000 	.word	0x41004000

000044b0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    44b0:	b580      	push	{r7, lr}
    44b2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    44b4:	46c0      	nop			; (mov r8, r8)
    44b6:	4b04      	ldr	r3, [pc, #16]	; (44c8 <_system_dfll_wait_for_sync+0x18>)
    44b8:	68db      	ldr	r3, [r3, #12]
    44ba:	2210      	movs	r2, #16
    44bc:	4013      	ands	r3, r2
    44be:	d0fa      	beq.n	44b6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    44c0:	46c0      	nop			; (mov r8, r8)
    44c2:	46bd      	mov	sp, r7
    44c4:	bd80      	pop	{r7, pc}
    44c6:	46c0      	nop			; (mov r8, r8)
    44c8:	40000800 	.word	0x40000800

000044cc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    44cc:	b580      	push	{r7, lr}
    44ce:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    44d0:	4b0c      	ldr	r3, [pc, #48]	; (4504 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    44d2:	2202      	movs	r2, #2
    44d4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    44d6:	4b0c      	ldr	r3, [pc, #48]	; (4508 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    44d8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    44da:	4a0a      	ldr	r2, [pc, #40]	; (4504 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    44dc:	4b0b      	ldr	r3, [pc, #44]	; (450c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    44de:	689b      	ldr	r3, [r3, #8]
    44e0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    44e2:	4a08      	ldr	r2, [pc, #32]	; (4504 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    44e4:	4b09      	ldr	r3, [pc, #36]	; (450c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    44e6:	685b      	ldr	r3, [r3, #4]
    44e8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    44ea:	4b06      	ldr	r3, [pc, #24]	; (4504 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    44ec:	2200      	movs	r2, #0
    44ee:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    44f0:	4b05      	ldr	r3, [pc, #20]	; (4508 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    44f2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    44f4:	4a03      	ldr	r2, [pc, #12]	; (4504 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    44f6:	4b05      	ldr	r3, [pc, #20]	; (450c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    44f8:	681b      	ldr	r3, [r3, #0]
    44fa:	b29b      	uxth	r3, r3
    44fc:	8493      	strh	r3, [r2, #36]	; 0x24
}
    44fe:	46c0      	nop			; (mov r8, r8)
    4500:	46bd      	mov	sp, r7
    4502:	bd80      	pop	{r7, pc}
    4504:	40000800 	.word	0x40000800
    4508:	000044b1 	.word	0x000044b1
    450c:	20000404 	.word	0x20000404

00004510 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4510:	b580      	push	{r7, lr}
    4512:	b082      	sub	sp, #8
    4514:	af00      	add	r7, sp, #0
    4516:	0002      	movs	r2, r0
    4518:	1dfb      	adds	r3, r7, #7
    451a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    451c:	1dfb      	adds	r3, r7, #7
    451e:	781b      	ldrb	r3, [r3, #0]
    4520:	2b08      	cmp	r3, #8
    4522:	d840      	bhi.n	45a6 <system_clock_source_get_hz+0x96>
    4524:	009a      	lsls	r2, r3, #2
    4526:	4b22      	ldr	r3, [pc, #136]	; (45b0 <system_clock_source_get_hz+0xa0>)
    4528:	18d3      	adds	r3, r2, r3
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    452e:	4b21      	ldr	r3, [pc, #132]	; (45b4 <system_clock_source_get_hz+0xa4>)
    4530:	691b      	ldr	r3, [r3, #16]
    4532:	e039      	b.n	45a8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4534:	4b20      	ldr	r3, [pc, #128]	; (45b8 <system_clock_source_get_hz+0xa8>)
    4536:	6a1b      	ldr	r3, [r3, #32]
    4538:	059b      	lsls	r3, r3, #22
    453a:	0f9b      	lsrs	r3, r3, #30
    453c:	b2db      	uxtb	r3, r3
    453e:	001a      	movs	r2, r3
    4540:	4b1e      	ldr	r3, [pc, #120]	; (45bc <system_clock_source_get_hz+0xac>)
    4542:	40d3      	lsrs	r3, r2
    4544:	e030      	b.n	45a8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    4546:	2380      	movs	r3, #128	; 0x80
    4548:	021b      	lsls	r3, r3, #8
    454a:	e02d      	b.n	45a8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    454c:	2380      	movs	r3, #128	; 0x80
    454e:	021b      	lsls	r3, r3, #8
    4550:	e02a      	b.n	45a8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4552:	4b18      	ldr	r3, [pc, #96]	; (45b4 <system_clock_source_get_hz+0xa4>)
    4554:	695b      	ldr	r3, [r3, #20]
    4556:	e027      	b.n	45a8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4558:	4b16      	ldr	r3, [pc, #88]	; (45b4 <system_clock_source_get_hz+0xa4>)
    455a:	681b      	ldr	r3, [r3, #0]
    455c:	2202      	movs	r2, #2
    455e:	4013      	ands	r3, r2
    4560:	d101      	bne.n	4566 <system_clock_source_get_hz+0x56>
			return 0;
    4562:	2300      	movs	r3, #0
    4564:	e020      	b.n	45a8 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    4566:	4b16      	ldr	r3, [pc, #88]	; (45c0 <system_clock_source_get_hz+0xb0>)
    4568:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    456a:	4b12      	ldr	r3, [pc, #72]	; (45b4 <system_clock_source_get_hz+0xa4>)
    456c:	681b      	ldr	r3, [r3, #0]
    456e:	2204      	movs	r2, #4
    4570:	4013      	ands	r3, r2
    4572:	d009      	beq.n	4588 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4574:	2000      	movs	r0, #0
    4576:	4b13      	ldr	r3, [pc, #76]	; (45c4 <system_clock_source_get_hz+0xb4>)
    4578:	4798      	blx	r3
    457a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    457c:	4b0d      	ldr	r3, [pc, #52]	; (45b4 <system_clock_source_get_hz+0xa4>)
    457e:	689b      	ldr	r3, [r3, #8]
    4580:	041b      	lsls	r3, r3, #16
    4582:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4584:	4353      	muls	r3, r2
    4586:	e00f      	b.n	45a8 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    4588:	4b0f      	ldr	r3, [pc, #60]	; (45c8 <system_clock_source_get_hz+0xb8>)
    458a:	e00d      	b.n	45a8 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    458c:	4a0a      	ldr	r2, [pc, #40]	; (45b8 <system_clock_source_get_hz+0xa8>)
    458e:	2350      	movs	r3, #80	; 0x50
    4590:	5cd3      	ldrb	r3, [r2, r3]
    4592:	b2db      	uxtb	r3, r3
    4594:	001a      	movs	r2, r3
    4596:	2304      	movs	r3, #4
    4598:	4013      	ands	r3, r2
    459a:	d101      	bne.n	45a0 <system_clock_source_get_hz+0x90>
			return 0;
    459c:	2300      	movs	r3, #0
    459e:	e003      	b.n	45a8 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    45a0:	4b04      	ldr	r3, [pc, #16]	; (45b4 <system_clock_source_get_hz+0xa4>)
    45a2:	68db      	ldr	r3, [r3, #12]
    45a4:	e000      	b.n	45a8 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    45a6:	2300      	movs	r3, #0
	}
}
    45a8:	0018      	movs	r0, r3
    45aa:	46bd      	mov	sp, r7
    45ac:	b002      	add	sp, #8
    45ae:	bd80      	pop	{r7, pc}
    45b0:	00007224 	.word	0x00007224
    45b4:	20000404 	.word	0x20000404
    45b8:	40000800 	.word	0x40000800
    45bc:	007a1200 	.word	0x007a1200
    45c0:	000044b1 	.word	0x000044b1
    45c4:	00004d85 	.word	0x00004d85
    45c8:	02dc6c00 	.word	0x02dc6c00

000045cc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    45cc:	b580      	push	{r7, lr}
    45ce:	b084      	sub	sp, #16
    45d0:	af00      	add	r7, sp, #0
    45d2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    45d4:	4b1a      	ldr	r3, [pc, #104]	; (4640 <system_clock_source_osc8m_set_config+0x74>)
    45d6:	6a1b      	ldr	r3, [r3, #32]
    45d8:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    45da:	687b      	ldr	r3, [r7, #4]
    45dc:	781b      	ldrb	r3, [r3, #0]
    45de:	1c1a      	adds	r2, r3, #0
    45e0:	2303      	movs	r3, #3
    45e2:	4013      	ands	r3, r2
    45e4:	b2da      	uxtb	r2, r3
    45e6:	230d      	movs	r3, #13
    45e8:	18fb      	adds	r3, r7, r3
    45ea:	2103      	movs	r1, #3
    45ec:	400a      	ands	r2, r1
    45ee:	0010      	movs	r0, r2
    45f0:	781a      	ldrb	r2, [r3, #0]
    45f2:	2103      	movs	r1, #3
    45f4:	438a      	bics	r2, r1
    45f6:	1c11      	adds	r1, r2, #0
    45f8:	1c02      	adds	r2, r0, #0
    45fa:	430a      	orrs	r2, r1
    45fc:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    45fe:	687b      	ldr	r3, [r7, #4]
    4600:	789a      	ldrb	r2, [r3, #2]
    4602:	230c      	movs	r3, #12
    4604:	18fb      	adds	r3, r7, r3
    4606:	01d0      	lsls	r0, r2, #7
    4608:	781a      	ldrb	r2, [r3, #0]
    460a:	217f      	movs	r1, #127	; 0x7f
    460c:	400a      	ands	r2, r1
    460e:	1c11      	adds	r1, r2, #0
    4610:	1c02      	adds	r2, r0, #0
    4612:	430a      	orrs	r2, r1
    4614:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4616:	687b      	ldr	r3, [r7, #4]
    4618:	785a      	ldrb	r2, [r3, #1]
    461a:	230c      	movs	r3, #12
    461c:	18fb      	adds	r3, r7, r3
    461e:	2101      	movs	r1, #1
    4620:	400a      	ands	r2, r1
    4622:	0190      	lsls	r0, r2, #6
    4624:	781a      	ldrb	r2, [r3, #0]
    4626:	2140      	movs	r1, #64	; 0x40
    4628:	438a      	bics	r2, r1
    462a:	1c11      	adds	r1, r2, #0
    462c:	1c02      	adds	r2, r0, #0
    462e:	430a      	orrs	r2, r1
    4630:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    4632:	4b03      	ldr	r3, [pc, #12]	; (4640 <system_clock_source_osc8m_set_config+0x74>)
    4634:	68fa      	ldr	r2, [r7, #12]
    4636:	621a      	str	r2, [r3, #32]
}
    4638:	46c0      	nop			; (mov r8, r8)
    463a:	46bd      	mov	sp, r7
    463c:	b004      	add	sp, #16
    463e:	bd80      	pop	{r7, pc}
    4640:	40000800 	.word	0x40000800

00004644 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    4644:	b580      	push	{r7, lr}
    4646:	b082      	sub	sp, #8
    4648:	af00      	add	r7, sp, #0
    464a:	0002      	movs	r2, r0
    464c:	1dfb      	adds	r3, r7, #7
    464e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4650:	1dfb      	adds	r3, r7, #7
    4652:	781b      	ldrb	r3, [r3, #0]
    4654:	2b08      	cmp	r3, #8
    4656:	d83b      	bhi.n	46d0 <system_clock_source_enable+0x8c>
    4658:	009a      	lsls	r2, r3, #2
    465a:	4b21      	ldr	r3, [pc, #132]	; (46e0 <system_clock_source_enable+0x9c>)
    465c:	18d3      	adds	r3, r2, r3
    465e:	681b      	ldr	r3, [r3, #0]
    4660:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4662:	4b20      	ldr	r3, [pc, #128]	; (46e4 <system_clock_source_enable+0xa0>)
    4664:	4a1f      	ldr	r2, [pc, #124]	; (46e4 <system_clock_source_enable+0xa0>)
    4666:	6a12      	ldr	r2, [r2, #32]
    4668:	2102      	movs	r1, #2
    466a:	430a      	orrs	r2, r1
    466c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    466e:	2300      	movs	r3, #0
    4670:	e031      	b.n	46d6 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4672:	4b1c      	ldr	r3, [pc, #112]	; (46e4 <system_clock_source_enable+0xa0>)
    4674:	4a1b      	ldr	r2, [pc, #108]	; (46e4 <system_clock_source_enable+0xa0>)
    4676:	6992      	ldr	r2, [r2, #24]
    4678:	2102      	movs	r1, #2
    467a:	430a      	orrs	r2, r1
    467c:	619a      	str	r2, [r3, #24]
		break;
    467e:	e029      	b.n	46d4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4680:	4a18      	ldr	r2, [pc, #96]	; (46e4 <system_clock_source_enable+0xa0>)
    4682:	4b18      	ldr	r3, [pc, #96]	; (46e4 <system_clock_source_enable+0xa0>)
    4684:	8a1b      	ldrh	r3, [r3, #16]
    4686:	b29b      	uxth	r3, r3
    4688:	2102      	movs	r1, #2
    468a:	430b      	orrs	r3, r1
    468c:	b29b      	uxth	r3, r3
    468e:	8213      	strh	r3, [r2, #16]
		break;
    4690:	e020      	b.n	46d4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4692:	4a14      	ldr	r2, [pc, #80]	; (46e4 <system_clock_source_enable+0xa0>)
    4694:	4b13      	ldr	r3, [pc, #76]	; (46e4 <system_clock_source_enable+0xa0>)
    4696:	8a9b      	ldrh	r3, [r3, #20]
    4698:	b29b      	uxth	r3, r3
    469a:	2102      	movs	r1, #2
    469c:	430b      	orrs	r3, r1
    469e:	b29b      	uxth	r3, r3
    46a0:	8293      	strh	r3, [r2, #20]
		break;
    46a2:	e017      	b.n	46d4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    46a4:	4b10      	ldr	r3, [pc, #64]	; (46e8 <system_clock_source_enable+0xa4>)
    46a6:	681b      	ldr	r3, [r3, #0]
    46a8:	2202      	movs	r2, #2
    46aa:	431a      	orrs	r2, r3
    46ac:	4b0e      	ldr	r3, [pc, #56]	; (46e8 <system_clock_source_enable+0xa4>)
    46ae:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    46b0:	4b0e      	ldr	r3, [pc, #56]	; (46ec <system_clock_source_enable+0xa8>)
    46b2:	4798      	blx	r3
		break;
    46b4:	e00e      	b.n	46d4 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    46b6:	4a0b      	ldr	r2, [pc, #44]	; (46e4 <system_clock_source_enable+0xa0>)
    46b8:	490a      	ldr	r1, [pc, #40]	; (46e4 <system_clock_source_enable+0xa0>)
    46ba:	2344      	movs	r3, #68	; 0x44
    46bc:	5ccb      	ldrb	r3, [r1, r3]
    46be:	b2db      	uxtb	r3, r3
    46c0:	2102      	movs	r1, #2
    46c2:	430b      	orrs	r3, r1
    46c4:	b2d9      	uxtb	r1, r3
    46c6:	2344      	movs	r3, #68	; 0x44
    46c8:	54d1      	strb	r1, [r2, r3]
		break;
    46ca:	e003      	b.n	46d4 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    46cc:	2300      	movs	r3, #0
    46ce:	e002      	b.n	46d6 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    46d0:	2317      	movs	r3, #23
    46d2:	e000      	b.n	46d6 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    46d4:	2300      	movs	r3, #0
}
    46d6:	0018      	movs	r0, r3
    46d8:	46bd      	mov	sp, r7
    46da:	b002      	add	sp, #8
    46dc:	bd80      	pop	{r7, pc}
    46de:	46c0      	nop			; (mov r8, r8)
    46e0:	00007248 	.word	0x00007248
    46e4:	40000800 	.word	0x40000800
    46e8:	20000404 	.word	0x20000404
    46ec:	000044cd 	.word	0x000044cd

000046f0 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    46f0:	b580      	push	{r7, lr}
    46f2:	b082      	sub	sp, #8
    46f4:	af00      	add	r7, sp, #0
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
#elif CONF_CLOCK_GCLK_5_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    46f6:	003b      	movs	r3, r7
    46f8:	2205      	movs	r2, #5
    46fa:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    46fc:	2300      	movs	r3, #0
    46fe:	607b      	str	r3, [r7, #4]
    4700:	e009      	b.n	4716 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4702:	687b      	ldr	r3, [r7, #4]
    4704:	b2db      	uxtb	r3, r3
    4706:	003a      	movs	r2, r7
    4708:	0011      	movs	r1, r2
    470a:	0018      	movs	r0, r3
    470c:	4b05      	ldr	r3, [pc, #20]	; (4724 <_switch_peripheral_gclk+0x34>)
    470e:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4710:	687b      	ldr	r3, [r7, #4]
    4712:	3301      	adds	r3, #1
    4714:	607b      	str	r3, [r7, #4]
    4716:	687b      	ldr	r3, [r7, #4]
    4718:	2b24      	cmp	r3, #36	; 0x24
    471a:	d9f2      	bls.n	4702 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    471c:	46c0      	nop			; (mov r8, r8)
    471e:	46bd      	mov	sp, r7
    4720:	b002      	add	sp, #8
    4722:	bd80      	pop	{r7, pc}
    4724:	00004c19 	.word	0x00004c19

00004728 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4728:	b580      	push	{r7, lr}
    472a:	b0a0      	sub	sp, #128	; 0x80
    472c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    472e:	4b63      	ldr	r3, [pc, #396]	; (48bc <system_clock_init+0x194>)
    4730:	22c2      	movs	r2, #194	; 0xc2
    4732:	00d2      	lsls	r2, r2, #3
    4734:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    4736:	2000      	movs	r0, #0
    4738:	4b61      	ldr	r3, [pc, #388]	; (48c0 <system_clock_init+0x198>)
    473a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    473c:	4b61      	ldr	r3, [pc, #388]	; (48c4 <system_clock_init+0x19c>)
    473e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    4740:	237c      	movs	r3, #124	; 0x7c
    4742:	18fb      	adds	r3, r7, r3
    4744:	0018      	movs	r0, r3
    4746:	4b60      	ldr	r3, [pc, #384]	; (48c8 <system_clock_init+0x1a0>)
    4748:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    474a:	237c      	movs	r3, #124	; 0x7c
    474c:	18fb      	adds	r3, r7, r3
    474e:	2200      	movs	r2, #0
    4750:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    4752:	237c      	movs	r3, #124	; 0x7c
    4754:	18fb      	adds	r3, r7, r3
    4756:	2201      	movs	r2, #1
    4758:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    475a:	237c      	movs	r3, #124	; 0x7c
    475c:	18fb      	adds	r3, r7, r3
    475e:	2200      	movs	r2, #0
    4760:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4762:	237c      	movs	r3, #124	; 0x7c
    4764:	18fb      	adds	r3, r7, r3
    4766:	0018      	movs	r0, r3
    4768:	4b58      	ldr	r3, [pc, #352]	; (48cc <system_clock_init+0x1a4>)
    476a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    476c:	2006      	movs	r0, #6
    476e:	4b58      	ldr	r3, [pc, #352]	; (48d0 <system_clock_init+0x1a8>)
    4770:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4772:	4b58      	ldr	r3, [pc, #352]	; (48d4 <system_clock_init+0x1ac>)
    4774:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4776:	2364      	movs	r3, #100	; 0x64
    4778:	18fb      	adds	r3, r7, r3
    477a:	0018      	movs	r0, r3
    477c:	4b56      	ldr	r3, [pc, #344]	; (48d8 <system_clock_init+0x1b0>)
    477e:	4798      	blx	r3
    4780:	2364      	movs	r3, #100	; 0x64
    4782:	18fb      	adds	r3, r7, r3
    4784:	2206      	movs	r2, #6
    4786:	701a      	strb	r2, [r3, #0]
    4788:	2364      	movs	r3, #100	; 0x64
    478a:	18fb      	adds	r3, r7, r3
    478c:	2201      	movs	r2, #1
    478e:	605a      	str	r2, [r3, #4]
    4790:	2364      	movs	r3, #100	; 0x64
    4792:	18fb      	adds	r3, r7, r3
    4794:	2201      	movs	r2, #1
    4796:	721a      	strb	r2, [r3, #8]
    4798:	2364      	movs	r3, #100	; 0x64
    479a:	18fb      	adds	r3, r7, r3
    479c:	2200      	movs	r2, #0
    479e:	725a      	strb	r2, [r3, #9]
    47a0:	2364      	movs	r3, #100	; 0x64
    47a2:	18fb      	adds	r3, r7, r3
    47a4:	0019      	movs	r1, r3
    47a6:	2001      	movs	r0, #1
    47a8:	4b4c      	ldr	r3, [pc, #304]	; (48dc <system_clock_init+0x1b4>)
    47aa:	4798      	blx	r3
    47ac:	2001      	movs	r0, #1
    47ae:	4b4c      	ldr	r3, [pc, #304]	; (48e0 <system_clock_init+0x1b8>)
    47b0:	4798      	blx	r3
    47b2:	2358      	movs	r3, #88	; 0x58
    47b4:	18fb      	adds	r3, r7, r3
    47b6:	0018      	movs	r0, r3
    47b8:	4b47      	ldr	r3, [pc, #284]	; (48d8 <system_clock_init+0x1b0>)
    47ba:	4798      	blx	r3
    47bc:	2358      	movs	r3, #88	; 0x58
    47be:	18fb      	adds	r3, r7, r3
    47c0:	2206      	movs	r2, #6
    47c2:	701a      	strb	r2, [r3, #0]
    47c4:	2358      	movs	r3, #88	; 0x58
    47c6:	18fb      	adds	r3, r7, r3
    47c8:	2201      	movs	r2, #1
    47ca:	605a      	str	r2, [r3, #4]
    47cc:	2358      	movs	r3, #88	; 0x58
    47ce:	18fb      	adds	r3, r7, r3
    47d0:	2201      	movs	r2, #1
    47d2:	721a      	strb	r2, [r3, #8]
    47d4:	2358      	movs	r3, #88	; 0x58
    47d6:	18fb      	adds	r3, r7, r3
    47d8:	2200      	movs	r2, #0
    47da:	725a      	strb	r2, [r3, #9]
    47dc:	2358      	movs	r3, #88	; 0x58
    47de:	18fb      	adds	r3, r7, r3
    47e0:	0019      	movs	r1, r3
    47e2:	2002      	movs	r0, #2
    47e4:	4b3d      	ldr	r3, [pc, #244]	; (48dc <system_clock_init+0x1b4>)
    47e6:	4798      	blx	r3
    47e8:	2002      	movs	r0, #2
    47ea:	4b3d      	ldr	r3, [pc, #244]	; (48e0 <system_clock_init+0x1b8>)
    47ec:	4798      	blx	r3
    47ee:	234c      	movs	r3, #76	; 0x4c
    47f0:	18fb      	adds	r3, r7, r3
    47f2:	0018      	movs	r0, r3
    47f4:	4b38      	ldr	r3, [pc, #224]	; (48d8 <system_clock_init+0x1b0>)
    47f6:	4798      	blx	r3
    47f8:	234c      	movs	r3, #76	; 0x4c
    47fa:	18fb      	adds	r3, r7, r3
    47fc:	2206      	movs	r2, #6
    47fe:	701a      	strb	r2, [r3, #0]
    4800:	234c      	movs	r3, #76	; 0x4c
    4802:	18fb      	adds	r3, r7, r3
    4804:	2201      	movs	r2, #1
    4806:	605a      	str	r2, [r3, #4]
    4808:	234c      	movs	r3, #76	; 0x4c
    480a:	18fb      	adds	r3, r7, r3
    480c:	2201      	movs	r2, #1
    480e:	721a      	strb	r2, [r3, #8]
    4810:	234c      	movs	r3, #76	; 0x4c
    4812:	18fb      	adds	r3, r7, r3
    4814:	2200      	movs	r2, #0
    4816:	725a      	strb	r2, [r3, #9]
    4818:	234c      	movs	r3, #76	; 0x4c
    481a:	18fb      	adds	r3, r7, r3
    481c:	0019      	movs	r1, r3
    481e:	2003      	movs	r0, #3
    4820:	4b2e      	ldr	r3, [pc, #184]	; (48dc <system_clock_init+0x1b4>)
    4822:	4798      	blx	r3
    4824:	2003      	movs	r0, #3
    4826:	4b2e      	ldr	r3, [pc, #184]	; (48e0 <system_clock_init+0x1b8>)
    4828:	4798      	blx	r3
    482a:	2340      	movs	r3, #64	; 0x40
    482c:	18fb      	adds	r3, r7, r3
    482e:	0018      	movs	r0, r3
    4830:	4b29      	ldr	r3, [pc, #164]	; (48d8 <system_clock_init+0x1b0>)
    4832:	4798      	blx	r3
    4834:	2340      	movs	r3, #64	; 0x40
    4836:	18fb      	adds	r3, r7, r3
    4838:	2206      	movs	r2, #6
    483a:	701a      	strb	r2, [r3, #0]
    483c:	2340      	movs	r3, #64	; 0x40
    483e:	18fb      	adds	r3, r7, r3
    4840:	2201      	movs	r2, #1
    4842:	605a      	str	r2, [r3, #4]
    4844:	2340      	movs	r3, #64	; 0x40
    4846:	18fb      	adds	r3, r7, r3
    4848:	2200      	movs	r2, #0
    484a:	721a      	strb	r2, [r3, #8]
    484c:	2340      	movs	r3, #64	; 0x40
    484e:	18fb      	adds	r3, r7, r3
    4850:	2200      	movs	r2, #0
    4852:	725a      	strb	r2, [r3, #9]
    4854:	2340      	movs	r3, #64	; 0x40
    4856:	18fb      	adds	r3, r7, r3
    4858:	0019      	movs	r1, r3
    485a:	2004      	movs	r0, #4
    485c:	4b1f      	ldr	r3, [pc, #124]	; (48dc <system_clock_init+0x1b4>)
    485e:	4798      	blx	r3
    4860:	2004      	movs	r0, #4
    4862:	4b1f      	ldr	r3, [pc, #124]	; (48e0 <system_clock_init+0x1b8>)
    4864:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    4866:	2000      	movs	r0, #0
    4868:	4b1e      	ldr	r3, [pc, #120]	; (48e4 <system_clock_init+0x1bc>)
    486a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    486c:	2100      	movs	r1, #0
    486e:	2000      	movs	r0, #0
    4870:	4b1d      	ldr	r3, [pc, #116]	; (48e8 <system_clock_init+0x1c0>)
    4872:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    4874:	2100      	movs	r1, #0
    4876:	2001      	movs	r0, #1
    4878:	4b1b      	ldr	r3, [pc, #108]	; (48e8 <system_clock_init+0x1c0>)
    487a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    487c:	2100      	movs	r1, #0
    487e:	2002      	movs	r0, #2
    4880:	4b19      	ldr	r3, [pc, #100]	; (48e8 <system_clock_init+0x1c0>)
    4882:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4884:	1d3b      	adds	r3, r7, #4
    4886:	0018      	movs	r0, r3
    4888:	4b13      	ldr	r3, [pc, #76]	; (48d8 <system_clock_init+0x1b0>)
    488a:	4798      	blx	r3
    488c:	1d3b      	adds	r3, r7, #4
    488e:	2206      	movs	r2, #6
    4890:	701a      	strb	r2, [r3, #0]
    4892:	1d3b      	adds	r3, r7, #4
    4894:	2201      	movs	r2, #1
    4896:	605a      	str	r2, [r3, #4]
    4898:	1d3b      	adds	r3, r7, #4
    489a:	2201      	movs	r2, #1
    489c:	721a      	strb	r2, [r3, #8]
    489e:	1d3b      	adds	r3, r7, #4
    48a0:	2200      	movs	r2, #0
    48a2:	725a      	strb	r2, [r3, #9]
    48a4:	1d3b      	adds	r3, r7, #4
    48a6:	0019      	movs	r1, r3
    48a8:	2000      	movs	r0, #0
    48aa:	4b0c      	ldr	r3, [pc, #48]	; (48dc <system_clock_init+0x1b4>)
    48ac:	4798      	blx	r3
    48ae:	2000      	movs	r0, #0
    48b0:	4b0b      	ldr	r3, [pc, #44]	; (48e0 <system_clock_init+0x1b8>)
    48b2:	4798      	blx	r3
#endif
}
    48b4:	46c0      	nop			; (mov r8, r8)
    48b6:	46bd      	mov	sp, r7
    48b8:	b020      	add	sp, #128	; 0x80
    48ba:	bd80      	pop	{r7, pc}
    48bc:	40000800 	.word	0x40000800
    48c0:	0000447d 	.word	0x0000447d
    48c4:	000046f1 	.word	0x000046f1
    48c8:	000043e5 	.word	0x000043e5
    48cc:	000045cd 	.word	0x000045cd
    48d0:	00004645 	.word	0x00004645
    48d4:	00004991 	.word	0x00004991
    48d8:	000043b5 	.word	0x000043b5
    48dc:	000049c1 	.word	0x000049c1
    48e0:	00004ae5 	.word	0x00004ae5
    48e4:	00004409 	.word	0x00004409
    48e8:	00004429 	.word	0x00004429

000048ec <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    48ec:	b580      	push	{r7, lr}
    48ee:	b082      	sub	sp, #8
    48f0:	af00      	add	r7, sp, #0
    48f2:	0002      	movs	r2, r0
    48f4:	6039      	str	r1, [r7, #0]
    48f6:	1dfb      	adds	r3, r7, #7
    48f8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    48fa:	1dfb      	adds	r3, r7, #7
    48fc:	781b      	ldrb	r3, [r3, #0]
    48fe:	2b01      	cmp	r3, #1
    4900:	d00a      	beq.n	4918 <system_apb_clock_set_mask+0x2c>
    4902:	2b02      	cmp	r3, #2
    4904:	d00f      	beq.n	4926 <system_apb_clock_set_mask+0x3a>
    4906:	2b00      	cmp	r3, #0
    4908:	d114      	bne.n	4934 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    490a:	4b0e      	ldr	r3, [pc, #56]	; (4944 <system_apb_clock_set_mask+0x58>)
    490c:	4a0d      	ldr	r2, [pc, #52]	; (4944 <system_apb_clock_set_mask+0x58>)
    490e:	6991      	ldr	r1, [r2, #24]
    4910:	683a      	ldr	r2, [r7, #0]
    4912:	430a      	orrs	r2, r1
    4914:	619a      	str	r2, [r3, #24]
			break;
    4916:	e00f      	b.n	4938 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4918:	4b0a      	ldr	r3, [pc, #40]	; (4944 <system_apb_clock_set_mask+0x58>)
    491a:	4a0a      	ldr	r2, [pc, #40]	; (4944 <system_apb_clock_set_mask+0x58>)
    491c:	69d1      	ldr	r1, [r2, #28]
    491e:	683a      	ldr	r2, [r7, #0]
    4920:	430a      	orrs	r2, r1
    4922:	61da      	str	r2, [r3, #28]
			break;
    4924:	e008      	b.n	4938 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4926:	4b07      	ldr	r3, [pc, #28]	; (4944 <system_apb_clock_set_mask+0x58>)
    4928:	4a06      	ldr	r2, [pc, #24]	; (4944 <system_apb_clock_set_mask+0x58>)
    492a:	6a11      	ldr	r1, [r2, #32]
    492c:	683a      	ldr	r2, [r7, #0]
    492e:	430a      	orrs	r2, r1
    4930:	621a      	str	r2, [r3, #32]
			break;
    4932:	e001      	b.n	4938 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4934:	2317      	movs	r3, #23
    4936:	e000      	b.n	493a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4938:	2300      	movs	r3, #0
}
    493a:	0018      	movs	r0, r3
    493c:	46bd      	mov	sp, r7
    493e:	b002      	add	sp, #8
    4940:	bd80      	pop	{r7, pc}
    4942:	46c0      	nop			; (mov r8, r8)
    4944:	40000400 	.word	0x40000400

00004948 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    4948:	b580      	push	{r7, lr}
    494a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    494c:	4b02      	ldr	r3, [pc, #8]	; (4958 <system_interrupt_enter_critical_section+0x10>)
    494e:	4798      	blx	r3
}
    4950:	46c0      	nop			; (mov r8, r8)
    4952:	46bd      	mov	sp, r7
    4954:	bd80      	pop	{r7, pc}
    4956:	46c0      	nop			; (mov r8, r8)
    4958:	00004321 	.word	0x00004321

0000495c <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    495c:	b580      	push	{r7, lr}
    495e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    4960:	4b02      	ldr	r3, [pc, #8]	; (496c <system_interrupt_leave_critical_section+0x10>)
    4962:	4798      	blx	r3
}
    4964:	46c0      	nop			; (mov r8, r8)
    4966:	46bd      	mov	sp, r7
    4968:	bd80      	pop	{r7, pc}
    496a:	46c0      	nop			; (mov r8, r8)
    496c:	00004375 	.word	0x00004375

00004970 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    4970:	b580      	push	{r7, lr}
    4972:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4974:	4b05      	ldr	r3, [pc, #20]	; (498c <system_gclk_is_syncing+0x1c>)
    4976:	785b      	ldrb	r3, [r3, #1]
    4978:	b2db      	uxtb	r3, r3
    497a:	b25b      	sxtb	r3, r3
    497c:	2b00      	cmp	r3, #0
    497e:	da01      	bge.n	4984 <system_gclk_is_syncing+0x14>
		return true;
    4980:	2301      	movs	r3, #1
    4982:	e000      	b.n	4986 <system_gclk_is_syncing+0x16>
	}

	return false;
    4984:	2300      	movs	r3, #0
}
    4986:	0018      	movs	r0, r3
    4988:	46bd      	mov	sp, r7
    498a:	bd80      	pop	{r7, pc}
    498c:	40000c00 	.word	0x40000c00

00004990 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    4990:	b580      	push	{r7, lr}
    4992:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    4994:	2108      	movs	r1, #8
    4996:	2000      	movs	r0, #0
    4998:	4b07      	ldr	r3, [pc, #28]	; (49b8 <system_gclk_init+0x28>)
    499a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    499c:	4b07      	ldr	r3, [pc, #28]	; (49bc <system_gclk_init+0x2c>)
    499e:	2201      	movs	r2, #1
    49a0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    49a2:	46c0      	nop			; (mov r8, r8)
    49a4:	4b05      	ldr	r3, [pc, #20]	; (49bc <system_gclk_init+0x2c>)
    49a6:	781b      	ldrb	r3, [r3, #0]
    49a8:	b2db      	uxtb	r3, r3
    49aa:	001a      	movs	r2, r3
    49ac:	2301      	movs	r3, #1
    49ae:	4013      	ands	r3, r2
    49b0:	d1f8      	bne.n	49a4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    49b2:	46c0      	nop			; (mov r8, r8)
    49b4:	46bd      	mov	sp, r7
    49b6:	bd80      	pop	{r7, pc}
    49b8:	000048ed 	.word	0x000048ed
    49bc:	40000c00 	.word	0x40000c00

000049c0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    49c0:	b580      	push	{r7, lr}
    49c2:	b086      	sub	sp, #24
    49c4:	af00      	add	r7, sp, #0
    49c6:	0002      	movs	r2, r0
    49c8:	6039      	str	r1, [r7, #0]
    49ca:	1dfb      	adds	r3, r7, #7
    49cc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    49ce:	1dfb      	adds	r3, r7, #7
    49d0:	781b      	ldrb	r3, [r3, #0]
    49d2:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    49d4:	1dfb      	adds	r3, r7, #7
    49d6:	781b      	ldrb	r3, [r3, #0]
    49d8:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    49da:	683b      	ldr	r3, [r7, #0]
    49dc:	781b      	ldrb	r3, [r3, #0]
    49de:	021b      	lsls	r3, r3, #8
    49e0:	001a      	movs	r2, r3
    49e2:	697b      	ldr	r3, [r7, #20]
    49e4:	4313      	orrs	r3, r2
    49e6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    49e8:	683b      	ldr	r3, [r7, #0]
    49ea:	785b      	ldrb	r3, [r3, #1]
    49ec:	2b00      	cmp	r3, #0
    49ee:	d004      	beq.n	49fa <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    49f0:	697b      	ldr	r3, [r7, #20]
    49f2:	2280      	movs	r2, #128	; 0x80
    49f4:	02d2      	lsls	r2, r2, #11
    49f6:	4313      	orrs	r3, r2
    49f8:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    49fa:	683b      	ldr	r3, [r7, #0]
    49fc:	7a5b      	ldrb	r3, [r3, #9]
    49fe:	2b00      	cmp	r3, #0
    4a00:	d004      	beq.n	4a0c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4a02:	697b      	ldr	r3, [r7, #20]
    4a04:	2280      	movs	r2, #128	; 0x80
    4a06:	0312      	lsls	r2, r2, #12
    4a08:	4313      	orrs	r3, r2
    4a0a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4a0c:	683b      	ldr	r3, [r7, #0]
    4a0e:	685b      	ldr	r3, [r3, #4]
    4a10:	2b01      	cmp	r3, #1
    4a12:	d92c      	bls.n	4a6e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4a14:	683b      	ldr	r3, [r7, #0]
    4a16:	685a      	ldr	r2, [r3, #4]
    4a18:	683b      	ldr	r3, [r7, #0]
    4a1a:	685b      	ldr	r3, [r3, #4]
    4a1c:	3b01      	subs	r3, #1
    4a1e:	4013      	ands	r3, r2
    4a20:	d11a      	bne.n	4a58 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    4a22:	2300      	movs	r3, #0
    4a24:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4a26:	2302      	movs	r3, #2
    4a28:	60bb      	str	r3, [r7, #8]
    4a2a:	e005      	b.n	4a38 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    4a2c:	68fb      	ldr	r3, [r7, #12]
    4a2e:	3301      	adds	r3, #1
    4a30:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    4a32:	68bb      	ldr	r3, [r7, #8]
    4a34:	005b      	lsls	r3, r3, #1
    4a36:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4a38:	683b      	ldr	r3, [r7, #0]
    4a3a:	685a      	ldr	r2, [r3, #4]
    4a3c:	68bb      	ldr	r3, [r7, #8]
    4a3e:	429a      	cmp	r2, r3
    4a40:	d8f4      	bhi.n	4a2c <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4a42:	68fb      	ldr	r3, [r7, #12]
    4a44:	021b      	lsls	r3, r3, #8
    4a46:	693a      	ldr	r2, [r7, #16]
    4a48:	4313      	orrs	r3, r2
    4a4a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4a4c:	697b      	ldr	r3, [r7, #20]
    4a4e:	2280      	movs	r2, #128	; 0x80
    4a50:	0352      	lsls	r2, r2, #13
    4a52:	4313      	orrs	r3, r2
    4a54:	617b      	str	r3, [r7, #20]
    4a56:	e00a      	b.n	4a6e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4a58:	683b      	ldr	r3, [r7, #0]
    4a5a:	685b      	ldr	r3, [r3, #4]
    4a5c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    4a5e:	693a      	ldr	r2, [r7, #16]
    4a60:	4313      	orrs	r3, r2
    4a62:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4a64:	697b      	ldr	r3, [r7, #20]
    4a66:	2280      	movs	r2, #128	; 0x80
    4a68:	0292      	lsls	r2, r2, #10
    4a6a:	4313      	orrs	r3, r2
    4a6c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4a6e:	683b      	ldr	r3, [r7, #0]
    4a70:	7a1b      	ldrb	r3, [r3, #8]
    4a72:	2b00      	cmp	r3, #0
    4a74:	d004      	beq.n	4a80 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4a76:	697b      	ldr	r3, [r7, #20]
    4a78:	2280      	movs	r2, #128	; 0x80
    4a7a:	0392      	lsls	r2, r2, #14
    4a7c:	4313      	orrs	r3, r2
    4a7e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    4a80:	46c0      	nop			; (mov r8, r8)
    4a82:	4b13      	ldr	r3, [pc, #76]	; (4ad0 <system_gclk_gen_set_config+0x110>)
    4a84:	4798      	blx	r3
    4a86:	1e03      	subs	r3, r0, #0
    4a88:	d1fb      	bne.n	4a82 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4a8a:	4b12      	ldr	r3, [pc, #72]	; (4ad4 <system_gclk_gen_set_config+0x114>)
    4a8c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4a8e:	4a12      	ldr	r2, [pc, #72]	; (4ad8 <system_gclk_gen_set_config+0x118>)
    4a90:	1dfb      	adds	r3, r7, #7
    4a92:	781b      	ldrb	r3, [r3, #0]
    4a94:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4a96:	46c0      	nop			; (mov r8, r8)
    4a98:	4b0d      	ldr	r3, [pc, #52]	; (4ad0 <system_gclk_gen_set_config+0x110>)
    4a9a:	4798      	blx	r3
    4a9c:	1e03      	subs	r3, r0, #0
    4a9e:	d1fb      	bne.n	4a98 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4aa0:	4b0e      	ldr	r3, [pc, #56]	; (4adc <system_gclk_gen_set_config+0x11c>)
    4aa2:	693a      	ldr	r2, [r7, #16]
    4aa4:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    4aa6:	46c0      	nop			; (mov r8, r8)
    4aa8:	4b09      	ldr	r3, [pc, #36]	; (4ad0 <system_gclk_gen_set_config+0x110>)
    4aaa:	4798      	blx	r3
    4aac:	1e03      	subs	r3, r0, #0
    4aae:	d1fb      	bne.n	4aa8 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4ab0:	4b0a      	ldr	r3, [pc, #40]	; (4adc <system_gclk_gen_set_config+0x11c>)
    4ab2:	4a0a      	ldr	r2, [pc, #40]	; (4adc <system_gclk_gen_set_config+0x11c>)
    4ab4:	6851      	ldr	r1, [r2, #4]
    4ab6:	2280      	movs	r2, #128	; 0x80
    4ab8:	0252      	lsls	r2, r2, #9
    4aba:	4011      	ands	r1, r2
    4abc:	697a      	ldr	r2, [r7, #20]
    4abe:	430a      	orrs	r2, r1
    4ac0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4ac2:	4b07      	ldr	r3, [pc, #28]	; (4ae0 <system_gclk_gen_set_config+0x120>)
    4ac4:	4798      	blx	r3
}
    4ac6:	46c0      	nop			; (mov r8, r8)
    4ac8:	46bd      	mov	sp, r7
    4aca:	b006      	add	sp, #24
    4acc:	bd80      	pop	{r7, pc}
    4ace:	46c0      	nop			; (mov r8, r8)
    4ad0:	00004971 	.word	0x00004971
    4ad4:	00004949 	.word	0x00004949
    4ad8:	40000c08 	.word	0x40000c08
    4adc:	40000c00 	.word	0x40000c00
    4ae0:	0000495d 	.word	0x0000495d

00004ae4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4ae4:	b580      	push	{r7, lr}
    4ae6:	b082      	sub	sp, #8
    4ae8:	af00      	add	r7, sp, #0
    4aea:	0002      	movs	r2, r0
    4aec:	1dfb      	adds	r3, r7, #7
    4aee:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4af0:	46c0      	nop			; (mov r8, r8)
    4af2:	4b0e      	ldr	r3, [pc, #56]	; (4b2c <system_gclk_gen_enable+0x48>)
    4af4:	4798      	blx	r3
    4af6:	1e03      	subs	r3, r0, #0
    4af8:	d1fb      	bne.n	4af2 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4afa:	4b0d      	ldr	r3, [pc, #52]	; (4b30 <system_gclk_gen_enable+0x4c>)
    4afc:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4afe:	4a0d      	ldr	r2, [pc, #52]	; (4b34 <system_gclk_gen_enable+0x50>)
    4b00:	1dfb      	adds	r3, r7, #7
    4b02:	781b      	ldrb	r3, [r3, #0]
    4b04:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4b06:	46c0      	nop			; (mov r8, r8)
    4b08:	4b08      	ldr	r3, [pc, #32]	; (4b2c <system_gclk_gen_enable+0x48>)
    4b0a:	4798      	blx	r3
    4b0c:	1e03      	subs	r3, r0, #0
    4b0e:	d1fb      	bne.n	4b08 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4b10:	4b09      	ldr	r3, [pc, #36]	; (4b38 <system_gclk_gen_enable+0x54>)
    4b12:	4a09      	ldr	r2, [pc, #36]	; (4b38 <system_gclk_gen_enable+0x54>)
    4b14:	6852      	ldr	r2, [r2, #4]
    4b16:	2180      	movs	r1, #128	; 0x80
    4b18:	0249      	lsls	r1, r1, #9
    4b1a:	430a      	orrs	r2, r1
    4b1c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4b1e:	4b07      	ldr	r3, [pc, #28]	; (4b3c <system_gclk_gen_enable+0x58>)
    4b20:	4798      	blx	r3
}
    4b22:	46c0      	nop			; (mov r8, r8)
    4b24:	46bd      	mov	sp, r7
    4b26:	b002      	add	sp, #8
    4b28:	bd80      	pop	{r7, pc}
    4b2a:	46c0      	nop			; (mov r8, r8)
    4b2c:	00004971 	.word	0x00004971
    4b30:	00004949 	.word	0x00004949
    4b34:	40000c04 	.word	0x40000c04
    4b38:	40000c00 	.word	0x40000c00
    4b3c:	0000495d 	.word	0x0000495d

00004b40 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4b40:	b580      	push	{r7, lr}
    4b42:	b086      	sub	sp, #24
    4b44:	af00      	add	r7, sp, #0
    4b46:	0002      	movs	r2, r0
    4b48:	1dfb      	adds	r3, r7, #7
    4b4a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4b4c:	46c0      	nop			; (mov r8, r8)
    4b4e:	4b2a      	ldr	r3, [pc, #168]	; (4bf8 <system_gclk_gen_get_hz+0xb8>)
    4b50:	4798      	blx	r3
    4b52:	1e03      	subs	r3, r0, #0
    4b54:	d1fb      	bne.n	4b4e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4b56:	4b29      	ldr	r3, [pc, #164]	; (4bfc <system_gclk_gen_get_hz+0xbc>)
    4b58:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4b5a:	4a29      	ldr	r2, [pc, #164]	; (4c00 <system_gclk_gen_get_hz+0xc0>)
    4b5c:	1dfb      	adds	r3, r7, #7
    4b5e:	781b      	ldrb	r3, [r3, #0]
    4b60:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4b62:	46c0      	nop			; (mov r8, r8)
    4b64:	4b24      	ldr	r3, [pc, #144]	; (4bf8 <system_gclk_gen_get_hz+0xb8>)
    4b66:	4798      	blx	r3
    4b68:	1e03      	subs	r3, r0, #0
    4b6a:	d1fb      	bne.n	4b64 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4b6c:	4b25      	ldr	r3, [pc, #148]	; (4c04 <system_gclk_gen_get_hz+0xc4>)
    4b6e:	685b      	ldr	r3, [r3, #4]
    4b70:	04db      	lsls	r3, r3, #19
    4b72:	0edb      	lsrs	r3, r3, #27
    4b74:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4b76:	0018      	movs	r0, r3
    4b78:	4b23      	ldr	r3, [pc, #140]	; (4c08 <system_gclk_gen_get_hz+0xc8>)
    4b7a:	4798      	blx	r3
    4b7c:	0003      	movs	r3, r0
    4b7e:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4b80:	4a1f      	ldr	r2, [pc, #124]	; (4c00 <system_gclk_gen_get_hz+0xc0>)
    4b82:	1dfb      	adds	r3, r7, #7
    4b84:	781b      	ldrb	r3, [r3, #0]
    4b86:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4b88:	4b1e      	ldr	r3, [pc, #120]	; (4c04 <system_gclk_gen_get_hz+0xc4>)
    4b8a:	685b      	ldr	r3, [r3, #4]
    4b8c:	02db      	lsls	r3, r3, #11
    4b8e:	0fdb      	lsrs	r3, r3, #31
    4b90:	b2da      	uxtb	r2, r3
    4b92:	2313      	movs	r3, #19
    4b94:	18fb      	adds	r3, r7, r3
    4b96:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4b98:	4a1c      	ldr	r2, [pc, #112]	; (4c0c <system_gclk_gen_get_hz+0xcc>)
    4b9a:	1dfb      	adds	r3, r7, #7
    4b9c:	781b      	ldrb	r3, [r3, #0]
    4b9e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4ba0:	46c0      	nop			; (mov r8, r8)
    4ba2:	4b15      	ldr	r3, [pc, #84]	; (4bf8 <system_gclk_gen_get_hz+0xb8>)
    4ba4:	4798      	blx	r3
    4ba6:	1e03      	subs	r3, r0, #0
    4ba8:	d1fb      	bne.n	4ba2 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4baa:	4b16      	ldr	r3, [pc, #88]	; (4c04 <system_gclk_gen_get_hz+0xc4>)
    4bac:	689b      	ldr	r3, [r3, #8]
    4bae:	021b      	lsls	r3, r3, #8
    4bb0:	0c1b      	lsrs	r3, r3, #16
    4bb2:	b29b      	uxth	r3, r3
    4bb4:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    4bb6:	4b16      	ldr	r3, [pc, #88]	; (4c10 <system_gclk_gen_get_hz+0xd0>)
    4bb8:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4bba:	2313      	movs	r3, #19
    4bbc:	18fb      	adds	r3, r7, r3
    4bbe:	781b      	ldrb	r3, [r3, #0]
    4bc0:	2b00      	cmp	r3, #0
    4bc2:	d109      	bne.n	4bd8 <system_gclk_gen_get_hz+0x98>
    4bc4:	68fb      	ldr	r3, [r7, #12]
    4bc6:	2b01      	cmp	r3, #1
    4bc8:	d906      	bls.n	4bd8 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    4bca:	4b12      	ldr	r3, [pc, #72]	; (4c14 <system_gclk_gen_get_hz+0xd4>)
    4bcc:	68f9      	ldr	r1, [r7, #12]
    4bce:	6978      	ldr	r0, [r7, #20]
    4bd0:	4798      	blx	r3
    4bd2:	0003      	movs	r3, r0
    4bd4:	617b      	str	r3, [r7, #20]
    4bd6:	e00a      	b.n	4bee <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    4bd8:	2313      	movs	r3, #19
    4bda:	18fb      	adds	r3, r7, r3
    4bdc:	781b      	ldrb	r3, [r3, #0]
    4bde:	2b00      	cmp	r3, #0
    4be0:	d005      	beq.n	4bee <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    4be2:	68fb      	ldr	r3, [r7, #12]
    4be4:	3301      	adds	r3, #1
    4be6:	697a      	ldr	r2, [r7, #20]
    4be8:	40da      	lsrs	r2, r3
    4bea:	0013      	movs	r3, r2
    4bec:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    4bee:	697b      	ldr	r3, [r7, #20]
}
    4bf0:	0018      	movs	r0, r3
    4bf2:	46bd      	mov	sp, r7
    4bf4:	b006      	add	sp, #24
    4bf6:	bd80      	pop	{r7, pc}
    4bf8:	00004971 	.word	0x00004971
    4bfc:	00004949 	.word	0x00004949
    4c00:	40000c04 	.word	0x40000c04
    4c04:	40000c00 	.word	0x40000c00
    4c08:	00004511 	.word	0x00004511
    4c0c:	40000c08 	.word	0x40000c08
    4c10:	0000495d 	.word	0x0000495d
    4c14:	00005569 	.word	0x00005569

00004c18 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4c18:	b580      	push	{r7, lr}
    4c1a:	b084      	sub	sp, #16
    4c1c:	af00      	add	r7, sp, #0
    4c1e:	0002      	movs	r2, r0
    4c20:	6039      	str	r1, [r7, #0]
    4c22:	1dfb      	adds	r3, r7, #7
    4c24:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    4c26:	1dfb      	adds	r3, r7, #7
    4c28:	781b      	ldrb	r3, [r3, #0]
    4c2a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4c2c:	683b      	ldr	r3, [r7, #0]
    4c2e:	781b      	ldrb	r3, [r3, #0]
    4c30:	021b      	lsls	r3, r3, #8
    4c32:	001a      	movs	r2, r3
    4c34:	68fb      	ldr	r3, [r7, #12]
    4c36:	4313      	orrs	r3, r2
    4c38:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4c3a:	1dfb      	adds	r3, r7, #7
    4c3c:	781b      	ldrb	r3, [r3, #0]
    4c3e:	0018      	movs	r0, r3
    4c40:	4b04      	ldr	r3, [pc, #16]	; (4c54 <system_gclk_chan_set_config+0x3c>)
    4c42:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4c44:	4b04      	ldr	r3, [pc, #16]	; (4c58 <system_gclk_chan_set_config+0x40>)
    4c46:	68fa      	ldr	r2, [r7, #12]
    4c48:	b292      	uxth	r2, r2
    4c4a:	805a      	strh	r2, [r3, #2]
}
    4c4c:	46c0      	nop			; (mov r8, r8)
    4c4e:	46bd      	mov	sp, r7
    4c50:	b004      	add	sp, #16
    4c52:	bd80      	pop	{r7, pc}
    4c54:	00004ca5 	.word	0x00004ca5
    4c58:	40000c00 	.word	0x40000c00

00004c5c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4c5c:	b580      	push	{r7, lr}
    4c5e:	b082      	sub	sp, #8
    4c60:	af00      	add	r7, sp, #0
    4c62:	0002      	movs	r2, r0
    4c64:	1dfb      	adds	r3, r7, #7
    4c66:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4c68:	4b0a      	ldr	r3, [pc, #40]	; (4c94 <system_gclk_chan_enable+0x38>)
    4c6a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4c6c:	4a0a      	ldr	r2, [pc, #40]	; (4c98 <system_gclk_chan_enable+0x3c>)
    4c6e:	1dfb      	adds	r3, r7, #7
    4c70:	781b      	ldrb	r3, [r3, #0]
    4c72:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4c74:	4909      	ldr	r1, [pc, #36]	; (4c9c <system_gclk_chan_enable+0x40>)
    4c76:	4b09      	ldr	r3, [pc, #36]	; (4c9c <system_gclk_chan_enable+0x40>)
    4c78:	885b      	ldrh	r3, [r3, #2]
    4c7a:	b29b      	uxth	r3, r3
    4c7c:	2280      	movs	r2, #128	; 0x80
    4c7e:	01d2      	lsls	r2, r2, #7
    4c80:	4313      	orrs	r3, r2
    4c82:	b29b      	uxth	r3, r3
    4c84:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    4c86:	4b06      	ldr	r3, [pc, #24]	; (4ca0 <system_gclk_chan_enable+0x44>)
    4c88:	4798      	blx	r3
}
    4c8a:	46c0      	nop			; (mov r8, r8)
    4c8c:	46bd      	mov	sp, r7
    4c8e:	b002      	add	sp, #8
    4c90:	bd80      	pop	{r7, pc}
    4c92:	46c0      	nop			; (mov r8, r8)
    4c94:	00004949 	.word	0x00004949
    4c98:	40000c02 	.word	0x40000c02
    4c9c:	40000c00 	.word	0x40000c00
    4ca0:	0000495d 	.word	0x0000495d

00004ca4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4ca4:	b580      	push	{r7, lr}
    4ca6:	b084      	sub	sp, #16
    4ca8:	af00      	add	r7, sp, #0
    4caa:	0002      	movs	r2, r0
    4cac:	1dfb      	adds	r3, r7, #7
    4cae:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4cb0:	4b1c      	ldr	r3, [pc, #112]	; (4d24 <system_gclk_chan_disable+0x80>)
    4cb2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4cb4:	4a1c      	ldr	r2, [pc, #112]	; (4d28 <system_gclk_chan_disable+0x84>)
    4cb6:	1dfb      	adds	r3, r7, #7
    4cb8:	781b      	ldrb	r3, [r3, #0]
    4cba:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4cbc:	4b1b      	ldr	r3, [pc, #108]	; (4d2c <system_gclk_chan_disable+0x88>)
    4cbe:	885b      	ldrh	r3, [r3, #2]
    4cc0:	051b      	lsls	r3, r3, #20
    4cc2:	0f1b      	lsrs	r3, r3, #28
    4cc4:	b2db      	uxtb	r3, r3
    4cc6:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    4cc8:	4a18      	ldr	r2, [pc, #96]	; (4d2c <system_gclk_chan_disable+0x88>)
    4cca:	8853      	ldrh	r3, [r2, #2]
    4ccc:	4918      	ldr	r1, [pc, #96]	; (4d30 <system_gclk_chan_disable+0x8c>)
    4cce:	400b      	ands	r3, r1
    4cd0:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4cd2:	4a16      	ldr	r2, [pc, #88]	; (4d2c <system_gclk_chan_disable+0x88>)
    4cd4:	4b15      	ldr	r3, [pc, #84]	; (4d2c <system_gclk_chan_disable+0x88>)
    4cd6:	885b      	ldrh	r3, [r3, #2]
    4cd8:	b29b      	uxth	r3, r3
    4cda:	4916      	ldr	r1, [pc, #88]	; (4d34 <system_gclk_chan_disable+0x90>)
    4cdc:	400b      	ands	r3, r1
    4cde:	b29b      	uxth	r3, r3
    4ce0:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4ce2:	46c0      	nop			; (mov r8, r8)
    4ce4:	4b11      	ldr	r3, [pc, #68]	; (4d2c <system_gclk_chan_disable+0x88>)
    4ce6:	885b      	ldrh	r3, [r3, #2]
    4ce8:	b29b      	uxth	r3, r3
    4cea:	001a      	movs	r2, r3
    4cec:	2380      	movs	r3, #128	; 0x80
    4cee:	01db      	lsls	r3, r3, #7
    4cf0:	4013      	ands	r3, r2
    4cf2:	d1f7      	bne.n	4ce4 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4cf4:	4a0d      	ldr	r2, [pc, #52]	; (4d2c <system_gclk_chan_disable+0x88>)
    4cf6:	68fb      	ldr	r3, [r7, #12]
    4cf8:	b2db      	uxtb	r3, r3
    4cfa:	1c19      	adds	r1, r3, #0
    4cfc:	230f      	movs	r3, #15
    4cfe:	400b      	ands	r3, r1
    4d00:	b2d9      	uxtb	r1, r3
    4d02:	8853      	ldrh	r3, [r2, #2]
    4d04:	1c08      	adds	r0, r1, #0
    4d06:	210f      	movs	r1, #15
    4d08:	4001      	ands	r1, r0
    4d0a:	0208      	lsls	r0, r1, #8
    4d0c:	4908      	ldr	r1, [pc, #32]	; (4d30 <system_gclk_chan_disable+0x8c>)
    4d0e:	400b      	ands	r3, r1
    4d10:	1c19      	adds	r1, r3, #0
    4d12:	1c03      	adds	r3, r0, #0
    4d14:	430b      	orrs	r3, r1
    4d16:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    4d18:	4b07      	ldr	r3, [pc, #28]	; (4d38 <system_gclk_chan_disable+0x94>)
    4d1a:	4798      	blx	r3
}
    4d1c:	46c0      	nop			; (mov r8, r8)
    4d1e:	46bd      	mov	sp, r7
    4d20:	b004      	add	sp, #16
    4d22:	bd80      	pop	{r7, pc}
    4d24:	00004949 	.word	0x00004949
    4d28:	40000c02 	.word	0x40000c02
    4d2c:	40000c00 	.word	0x40000c00
    4d30:	fffff0ff 	.word	0xfffff0ff
    4d34:	ffffbfff 	.word	0xffffbfff
    4d38:	0000495d 	.word	0x0000495d

00004d3c <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    4d3c:	b580      	push	{r7, lr}
    4d3e:	b082      	sub	sp, #8
    4d40:	af00      	add	r7, sp, #0
    4d42:	0002      	movs	r2, r0
    4d44:	1dfb      	adds	r3, r7, #7
    4d46:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4d48:	4b09      	ldr	r3, [pc, #36]	; (4d70 <system_gclk_chan_lock+0x34>)
    4d4a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4d4c:	4a09      	ldr	r2, [pc, #36]	; (4d74 <system_gclk_chan_lock+0x38>)
    4d4e:	1dfb      	adds	r3, r7, #7
    4d50:	781b      	ldrb	r3, [r3, #0]
    4d52:	7013      	strb	r3, [r2, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    4d54:	4a08      	ldr	r2, [pc, #32]	; (4d78 <system_gclk_chan_lock+0x3c>)
    4d56:	4b08      	ldr	r3, [pc, #32]	; (4d78 <system_gclk_chan_lock+0x3c>)
    4d58:	885b      	ldrh	r3, [r3, #2]
    4d5a:	b29b      	uxth	r3, r3
    4d5c:	4907      	ldr	r1, [pc, #28]	; (4d7c <system_gclk_chan_lock+0x40>)
    4d5e:	430b      	orrs	r3, r1
    4d60:	b29b      	uxth	r3, r3
    4d62:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    4d64:	4b06      	ldr	r3, [pc, #24]	; (4d80 <system_gclk_chan_lock+0x44>)
    4d66:	4798      	blx	r3
}
    4d68:	46c0      	nop			; (mov r8, r8)
    4d6a:	46bd      	mov	sp, r7
    4d6c:	b002      	add	sp, #8
    4d6e:	bd80      	pop	{r7, pc}
    4d70:	00004949 	.word	0x00004949
    4d74:	40000c02 	.word	0x40000c02
    4d78:	40000c00 	.word	0x40000c00
    4d7c:	ffffc000 	.word	0xffffc000
    4d80:	0000495d 	.word	0x0000495d

00004d84 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4d84:	b580      	push	{r7, lr}
    4d86:	b084      	sub	sp, #16
    4d88:	af00      	add	r7, sp, #0
    4d8a:	0002      	movs	r2, r0
    4d8c:	1dfb      	adds	r3, r7, #7
    4d8e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4d90:	4b0d      	ldr	r3, [pc, #52]	; (4dc8 <system_gclk_chan_get_hz+0x44>)
    4d92:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4d94:	4a0d      	ldr	r2, [pc, #52]	; (4dcc <system_gclk_chan_get_hz+0x48>)
    4d96:	1dfb      	adds	r3, r7, #7
    4d98:	781b      	ldrb	r3, [r3, #0]
    4d9a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4d9c:	4b0c      	ldr	r3, [pc, #48]	; (4dd0 <system_gclk_chan_get_hz+0x4c>)
    4d9e:	885b      	ldrh	r3, [r3, #2]
    4da0:	051b      	lsls	r3, r3, #20
    4da2:	0f1b      	lsrs	r3, r3, #28
    4da4:	b2da      	uxtb	r2, r3
    4da6:	230f      	movs	r3, #15
    4da8:	18fb      	adds	r3, r7, r3
    4daa:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    4dac:	4b09      	ldr	r3, [pc, #36]	; (4dd4 <system_gclk_chan_get_hz+0x50>)
    4dae:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4db0:	230f      	movs	r3, #15
    4db2:	18fb      	adds	r3, r7, r3
    4db4:	781b      	ldrb	r3, [r3, #0]
    4db6:	0018      	movs	r0, r3
    4db8:	4b07      	ldr	r3, [pc, #28]	; (4dd8 <system_gclk_chan_get_hz+0x54>)
    4dba:	4798      	blx	r3
    4dbc:	0003      	movs	r3, r0
}
    4dbe:	0018      	movs	r0, r3
    4dc0:	46bd      	mov	sp, r7
    4dc2:	b004      	add	sp, #16
    4dc4:	bd80      	pop	{r7, pc}
    4dc6:	46c0      	nop			; (mov r8, r8)
    4dc8:	00004949 	.word	0x00004949
    4dcc:	40000c02 	.word	0x40000c02
    4dd0:	40000c00 	.word	0x40000c00
    4dd4:	0000495d 	.word	0x0000495d
    4dd8:	00004b41 	.word	0x00004b41

00004ddc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4ddc:	b580      	push	{r7, lr}
    4dde:	b084      	sub	sp, #16
    4de0:	af00      	add	r7, sp, #0
    4de2:	0002      	movs	r2, r0
    4de4:	1dfb      	adds	r3, r7, #7
    4de6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4de8:	230f      	movs	r3, #15
    4dea:	18fb      	adds	r3, r7, r3
    4dec:	1dfa      	adds	r2, r7, #7
    4dee:	7812      	ldrb	r2, [r2, #0]
    4df0:	09d2      	lsrs	r2, r2, #7
    4df2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4df4:	230e      	movs	r3, #14
    4df6:	18fb      	adds	r3, r7, r3
    4df8:	1dfa      	adds	r2, r7, #7
    4dfa:	7812      	ldrb	r2, [r2, #0]
    4dfc:	0952      	lsrs	r2, r2, #5
    4dfe:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4e00:	4b0d      	ldr	r3, [pc, #52]	; (4e38 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4e02:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4e04:	230f      	movs	r3, #15
    4e06:	18fb      	adds	r3, r7, r3
    4e08:	781b      	ldrb	r3, [r3, #0]
    4e0a:	2b00      	cmp	r3, #0
    4e0c:	d10f      	bne.n	4e2e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4e0e:	230f      	movs	r3, #15
    4e10:	18fb      	adds	r3, r7, r3
    4e12:	781b      	ldrb	r3, [r3, #0]
    4e14:	009b      	lsls	r3, r3, #2
    4e16:	2210      	movs	r2, #16
    4e18:	4694      	mov	ip, r2
    4e1a:	44bc      	add	ip, r7
    4e1c:	4463      	add	r3, ip
    4e1e:	3b08      	subs	r3, #8
    4e20:	681a      	ldr	r2, [r3, #0]
    4e22:	230e      	movs	r3, #14
    4e24:	18fb      	adds	r3, r7, r3
    4e26:	781b      	ldrb	r3, [r3, #0]
    4e28:	01db      	lsls	r3, r3, #7
    4e2a:	18d3      	adds	r3, r2, r3
    4e2c:	e000      	b.n	4e30 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4e2e:	2300      	movs	r3, #0
	}
}
    4e30:	0018      	movs	r0, r3
    4e32:	46bd      	mov	sp, r7
    4e34:	b004      	add	sp, #16
    4e36:	bd80      	pop	{r7, pc}
    4e38:	41004400 	.word	0x41004400

00004e3c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4e3c:	b580      	push	{r7, lr}
    4e3e:	b088      	sub	sp, #32
    4e40:	af00      	add	r7, sp, #0
    4e42:	60f8      	str	r0, [r7, #12]
    4e44:	60b9      	str	r1, [r7, #8]
    4e46:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4e48:	2300      	movs	r3, #0
    4e4a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	78db      	ldrb	r3, [r3, #3]
    4e50:	2201      	movs	r2, #1
    4e52:	4053      	eors	r3, r2
    4e54:	b2db      	uxtb	r3, r3
    4e56:	2b00      	cmp	r3, #0
    4e58:	d035      	beq.n	4ec6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4e5a:	687b      	ldr	r3, [r7, #4]
    4e5c:	781b      	ldrb	r3, [r3, #0]
    4e5e:	2b80      	cmp	r3, #128	; 0x80
    4e60:	d00b      	beq.n	4e7a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    4e62:	69fb      	ldr	r3, [r7, #28]
    4e64:	2280      	movs	r2, #128	; 0x80
    4e66:	0252      	lsls	r2, r2, #9
    4e68:	4313      	orrs	r3, r2
    4e6a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4e6c:	687b      	ldr	r3, [r7, #4]
    4e6e:	781b      	ldrb	r3, [r3, #0]
    4e70:	061b      	lsls	r3, r3, #24
    4e72:	001a      	movs	r2, r3
    4e74:	69fb      	ldr	r3, [r7, #28]
    4e76:	4313      	orrs	r3, r2
    4e78:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4e7a:	687b      	ldr	r3, [r7, #4]
    4e7c:	785b      	ldrb	r3, [r3, #1]
    4e7e:	2b00      	cmp	r3, #0
    4e80:	d003      	beq.n	4e8a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4e82:	687b      	ldr	r3, [r7, #4]
    4e84:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4e86:	2b02      	cmp	r3, #2
    4e88:	d110      	bne.n	4eac <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4e8a:	69fb      	ldr	r3, [r7, #28]
    4e8c:	2280      	movs	r2, #128	; 0x80
    4e8e:	0292      	lsls	r2, r2, #10
    4e90:	4313      	orrs	r3, r2
    4e92:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4e94:	687b      	ldr	r3, [r7, #4]
    4e96:	789b      	ldrb	r3, [r3, #2]
    4e98:	2b00      	cmp	r3, #0
    4e9a:	d004      	beq.n	4ea6 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4e9c:	69fb      	ldr	r3, [r7, #28]
    4e9e:	2280      	movs	r2, #128	; 0x80
    4ea0:	02d2      	lsls	r2, r2, #11
    4ea2:	4313      	orrs	r3, r2
    4ea4:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4ea6:	68fb      	ldr	r3, [r7, #12]
    4ea8:	68ba      	ldr	r2, [r7, #8]
    4eaa:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4eac:	687b      	ldr	r3, [r7, #4]
    4eae:	785b      	ldrb	r3, [r3, #1]
    4eb0:	2b01      	cmp	r3, #1
    4eb2:	d003      	beq.n	4ebc <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4eb8:	2b02      	cmp	r3, #2
    4eba:	d107      	bne.n	4ecc <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4ebc:	69fb      	ldr	r3, [r7, #28]
    4ebe:	4a22      	ldr	r2, [pc, #136]	; (4f48 <_system_pinmux_config+0x10c>)
    4ec0:	4013      	ands	r3, r2
    4ec2:	61fb      	str	r3, [r7, #28]
    4ec4:	e002      	b.n	4ecc <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4ec6:	68fb      	ldr	r3, [r7, #12]
    4ec8:	68ba      	ldr	r2, [r7, #8]
    4eca:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4ecc:	68bb      	ldr	r3, [r7, #8]
    4ece:	041b      	lsls	r3, r3, #16
    4ed0:	0c1b      	lsrs	r3, r3, #16
    4ed2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4ed4:	68bb      	ldr	r3, [r7, #8]
    4ed6:	0c1b      	lsrs	r3, r3, #16
    4ed8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4eda:	69ba      	ldr	r2, [r7, #24]
    4edc:	69fb      	ldr	r3, [r7, #28]
    4ede:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4ee0:	22a0      	movs	r2, #160	; 0xa0
    4ee2:	05d2      	lsls	r2, r2, #23
    4ee4:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4ee6:	68fb      	ldr	r3, [r7, #12]
    4ee8:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4eea:	697a      	ldr	r2, [r7, #20]
    4eec:	69fb      	ldr	r3, [r7, #28]
    4eee:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4ef0:	22d0      	movs	r2, #208	; 0xd0
    4ef2:	0612      	lsls	r2, r2, #24
    4ef4:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4ef6:	68fb      	ldr	r3, [r7, #12]
    4ef8:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4efa:	687b      	ldr	r3, [r7, #4]
    4efc:	78db      	ldrb	r3, [r3, #3]
    4efe:	2201      	movs	r2, #1
    4f00:	4053      	eors	r3, r2
    4f02:	b2db      	uxtb	r3, r3
    4f04:	2b00      	cmp	r3, #0
    4f06:	d01a      	beq.n	4f3e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4f08:	69fa      	ldr	r2, [r7, #28]
    4f0a:	2380      	movs	r3, #128	; 0x80
    4f0c:	02db      	lsls	r3, r3, #11
    4f0e:	4013      	ands	r3, r2
    4f10:	d00a      	beq.n	4f28 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4f12:	687b      	ldr	r3, [r7, #4]
    4f14:	789b      	ldrb	r3, [r3, #2]
    4f16:	2b01      	cmp	r3, #1
    4f18:	d103      	bne.n	4f22 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    4f1a:	68fb      	ldr	r3, [r7, #12]
    4f1c:	68ba      	ldr	r2, [r7, #8]
    4f1e:	619a      	str	r2, [r3, #24]
    4f20:	e002      	b.n	4f28 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    4f22:	68fb      	ldr	r3, [r7, #12]
    4f24:	68ba      	ldr	r2, [r7, #8]
    4f26:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4f28:	687b      	ldr	r3, [r7, #4]
    4f2a:	785b      	ldrb	r3, [r3, #1]
    4f2c:	2b01      	cmp	r3, #1
    4f2e:	d003      	beq.n	4f38 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4f30:	687b      	ldr	r3, [r7, #4]
    4f32:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4f34:	2b02      	cmp	r3, #2
    4f36:	d102      	bne.n	4f3e <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4f38:	68fb      	ldr	r3, [r7, #12]
    4f3a:	68ba      	ldr	r2, [r7, #8]
    4f3c:	609a      	str	r2, [r3, #8]
		}
	}
}
    4f3e:	46c0      	nop			; (mov r8, r8)
    4f40:	46bd      	mov	sp, r7
    4f42:	b008      	add	sp, #32
    4f44:	bd80      	pop	{r7, pc}
    4f46:	46c0      	nop			; (mov r8, r8)
    4f48:	fffbffff 	.word	0xfffbffff

00004f4c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4f4c:	b580      	push	{r7, lr}
    4f4e:	b084      	sub	sp, #16
    4f50:	af00      	add	r7, sp, #0
    4f52:	0002      	movs	r2, r0
    4f54:	6039      	str	r1, [r7, #0]
    4f56:	1dfb      	adds	r3, r7, #7
    4f58:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4f5a:	1dfb      	adds	r3, r7, #7
    4f5c:	781b      	ldrb	r3, [r3, #0]
    4f5e:	0018      	movs	r0, r3
    4f60:	4b0a      	ldr	r3, [pc, #40]	; (4f8c <system_pinmux_pin_set_config+0x40>)
    4f62:	4798      	blx	r3
    4f64:	0003      	movs	r3, r0
    4f66:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4f68:	1dfb      	adds	r3, r7, #7
    4f6a:	781b      	ldrb	r3, [r3, #0]
    4f6c:	221f      	movs	r2, #31
    4f6e:	4013      	ands	r3, r2
    4f70:	2201      	movs	r2, #1
    4f72:	409a      	lsls	r2, r3
    4f74:	0013      	movs	r3, r2
    4f76:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    4f78:	683a      	ldr	r2, [r7, #0]
    4f7a:	68b9      	ldr	r1, [r7, #8]
    4f7c:	68fb      	ldr	r3, [r7, #12]
    4f7e:	0018      	movs	r0, r3
    4f80:	4b03      	ldr	r3, [pc, #12]	; (4f90 <system_pinmux_pin_set_config+0x44>)
    4f82:	4798      	blx	r3
}
    4f84:	46c0      	nop			; (mov r8, r8)
    4f86:	46bd      	mov	sp, r7
    4f88:	b004      	add	sp, #16
    4f8a:	bd80      	pop	{r7, pc}
    4f8c:	00004ddd 	.word	0x00004ddd
    4f90:	00004e3d 	.word	0x00004e3d

00004f94 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    4f94:	b580      	push	{r7, lr}
    4f96:	af00      	add	r7, sp, #0
	return;
    4f98:	46c0      	nop			; (mov r8, r8)
}
    4f9a:	46bd      	mov	sp, r7
    4f9c:	bd80      	pop	{r7, pc}
    4f9e:	46c0      	nop			; (mov r8, r8)

00004fa0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4fa0:	b580      	push	{r7, lr}
    4fa2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4fa4:	4b06      	ldr	r3, [pc, #24]	; (4fc0 <system_init+0x20>)
    4fa6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4fa8:	4b06      	ldr	r3, [pc, #24]	; (4fc4 <system_init+0x24>)
    4faa:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4fac:	4b06      	ldr	r3, [pc, #24]	; (4fc8 <system_init+0x28>)
    4fae:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4fb0:	4b06      	ldr	r3, [pc, #24]	; (4fcc <system_init+0x2c>)
    4fb2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4fb4:	4b06      	ldr	r3, [pc, #24]	; (4fd0 <system_init+0x30>)
    4fb6:	4798      	blx	r3
}
    4fb8:	46c0      	nop			; (mov r8, r8)
    4fba:	46bd      	mov	sp, r7
    4fbc:	bd80      	pop	{r7, pc}
    4fbe:	46c0      	nop			; (mov r8, r8)
    4fc0:	00004729 	.word	0x00004729
    4fc4:	00004315 	.word	0x00004315
    4fc8:	00004f95 	.word	0x00004f95
    4fcc:	000003ad 	.word	0x000003ad
    4fd0:	00004f95 	.word	0x00004f95

00004fd4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4fd4:	b580      	push	{r7, lr}
    4fd6:	b082      	sub	sp, #8
    4fd8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    4fda:	4b2f      	ldr	r3, [pc, #188]	; (5098 <Reset_Handler+0xc4>)
    4fdc:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    4fde:	4b2f      	ldr	r3, [pc, #188]	; (509c <Reset_Handler+0xc8>)
    4fe0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    4fe2:	687a      	ldr	r2, [r7, #4]
    4fe4:	683b      	ldr	r3, [r7, #0]
    4fe6:	429a      	cmp	r2, r3
    4fe8:	d00c      	beq.n	5004 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    4fea:	e007      	b.n	4ffc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    4fec:	683b      	ldr	r3, [r7, #0]
    4fee:	1d1a      	adds	r2, r3, #4
    4ff0:	603a      	str	r2, [r7, #0]
    4ff2:	687a      	ldr	r2, [r7, #4]
    4ff4:	1d11      	adds	r1, r2, #4
    4ff6:	6079      	str	r1, [r7, #4]
    4ff8:	6812      	ldr	r2, [r2, #0]
    4ffa:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4ffc:	683a      	ldr	r2, [r7, #0]
    4ffe:	4b28      	ldr	r3, [pc, #160]	; (50a0 <Reset_Handler+0xcc>)
    5000:	429a      	cmp	r2, r3
    5002:	d3f3      	bcc.n	4fec <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5004:	4b27      	ldr	r3, [pc, #156]	; (50a4 <Reset_Handler+0xd0>)
    5006:	603b      	str	r3, [r7, #0]
    5008:	e004      	b.n	5014 <Reset_Handler+0x40>
                *pDest++ = 0;
    500a:	683b      	ldr	r3, [r7, #0]
    500c:	1d1a      	adds	r2, r3, #4
    500e:	603a      	str	r2, [r7, #0]
    5010:	2200      	movs	r2, #0
    5012:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5014:	683a      	ldr	r2, [r7, #0]
    5016:	4b24      	ldr	r3, [pc, #144]	; (50a8 <Reset_Handler+0xd4>)
    5018:	429a      	cmp	r2, r3
    501a:	d3f6      	bcc.n	500a <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    501c:	4b23      	ldr	r3, [pc, #140]	; (50ac <Reset_Handler+0xd8>)
    501e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5020:	4b23      	ldr	r3, [pc, #140]	; (50b0 <Reset_Handler+0xdc>)
    5022:	687a      	ldr	r2, [r7, #4]
    5024:	21ff      	movs	r1, #255	; 0xff
    5026:	438a      	bics	r2, r1
    5028:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    502a:	4a22      	ldr	r2, [pc, #136]	; (50b4 <Reset_Handler+0xe0>)
    502c:	2390      	movs	r3, #144	; 0x90
    502e:	005b      	lsls	r3, r3, #1
    5030:	2102      	movs	r1, #2
    5032:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5034:	4a20      	ldr	r2, [pc, #128]	; (50b8 <Reset_Handler+0xe4>)
    5036:	78d3      	ldrb	r3, [r2, #3]
    5038:	2103      	movs	r1, #3
    503a:	438b      	bics	r3, r1
    503c:	1c19      	adds	r1, r3, #0
    503e:	2302      	movs	r3, #2
    5040:	430b      	orrs	r3, r1
    5042:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5044:	4a1c      	ldr	r2, [pc, #112]	; (50b8 <Reset_Handler+0xe4>)
    5046:	78d3      	ldrb	r3, [r2, #3]
    5048:	210c      	movs	r1, #12
    504a:	438b      	bics	r3, r1
    504c:	1c19      	adds	r1, r3, #0
    504e:	2308      	movs	r3, #8
    5050:	430b      	orrs	r3, r1
    5052:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    5054:	4a19      	ldr	r2, [pc, #100]	; (50bc <Reset_Handler+0xe8>)
    5056:	7b93      	ldrb	r3, [r2, #14]
    5058:	2130      	movs	r1, #48	; 0x30
    505a:	438b      	bics	r3, r1
    505c:	1c19      	adds	r1, r3, #0
    505e:	2320      	movs	r3, #32
    5060:	430b      	orrs	r3, r1
    5062:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    5064:	4a15      	ldr	r2, [pc, #84]	; (50bc <Reset_Handler+0xe8>)
    5066:	7b93      	ldrb	r3, [r2, #14]
    5068:	210c      	movs	r1, #12
    506a:	438b      	bics	r3, r1
    506c:	1c19      	adds	r1, r3, #0
    506e:	2308      	movs	r3, #8
    5070:	430b      	orrs	r3, r1
    5072:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5074:	4a11      	ldr	r2, [pc, #68]	; (50bc <Reset_Handler+0xe8>)
    5076:	7b93      	ldrb	r3, [r2, #14]
    5078:	2103      	movs	r1, #3
    507a:	438b      	bics	r3, r1
    507c:	1c19      	adds	r1, r3, #0
    507e:	2302      	movs	r3, #2
    5080:	430b      	orrs	r3, r1
    5082:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    5084:	4a0e      	ldr	r2, [pc, #56]	; (50c0 <Reset_Handler+0xec>)
    5086:	6853      	ldr	r3, [r2, #4]
    5088:	2180      	movs	r1, #128	; 0x80
    508a:	430b      	orrs	r3, r1
    508c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    508e:	4b0d      	ldr	r3, [pc, #52]	; (50c4 <Reset_Handler+0xf0>)
    5090:	4798      	blx	r3

        /* Branch to main function */
        main();
    5092:	4b0d      	ldr	r3, [pc, #52]	; (50c8 <Reset_Handler+0xf4>)
    5094:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    5096:	e7fe      	b.n	5096 <Reset_Handler+0xc2>
    5098:	00007460 	.word	0x00007460
    509c:	20000000 	.word	0x20000000
    50a0:	200003d4 	.word	0x200003d4
    50a4:	200003d4 	.word	0x200003d4
    50a8:	200011e8 	.word	0x200011e8
    50ac:	00000000 	.word	0x00000000
    50b0:	e000ed00 	.word	0xe000ed00
    50b4:	41007000 	.word	0x41007000
    50b8:	41005000 	.word	0x41005000
    50bc:	41004800 	.word	0x41004800
    50c0:	41004000 	.word	0x41004000
    50c4:	00005ac1 	.word	0x00005ac1
    50c8:	0000515d 	.word	0x0000515d

000050cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    50cc:	b580      	push	{r7, lr}
    50ce:	b082      	sub	sp, #8
    50d0:	af00      	add	r7, sp, #0
	int32_t phantomISR = 9999;
    50d2:	4b04      	ldr	r3, [pc, #16]	; (50e4 <Dummy_Handler+0x18>)
    50d4:	607b      	str	r3, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    50d6:	f3ef 8305 	mrs	r3, IPSR
    50da:	603b      	str	r3, [r7, #0]
  return(result);
    50dc:	683b      	ldr	r3, [r7, #0]
        while (1) {
			phantomISR = __get_IPSR();
    50de:	607b      	str	r3, [r7, #4]
        }
    50e0:	e7f9      	b.n	50d6 <Dummy_Handler+0xa>
    50e2:	46c0      	nop			; (mov r8, r8)
    50e4:	0000270f 	.word	0x0000270f

000050e8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    50e8:	b580      	push	{r7, lr}
    50ea:	b084      	sub	sp, #16
    50ec:	af00      	add	r7, sp, #0
    50ee:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    50f0:	4b0a      	ldr	r3, [pc, #40]	; (511c <_sbrk+0x34>)
    50f2:	681b      	ldr	r3, [r3, #0]
    50f4:	2b00      	cmp	r3, #0
    50f6:	d102      	bne.n	50fe <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    50f8:	4b08      	ldr	r3, [pc, #32]	; (511c <_sbrk+0x34>)
    50fa:	4a09      	ldr	r2, [pc, #36]	; (5120 <_sbrk+0x38>)
    50fc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    50fe:	4b07      	ldr	r3, [pc, #28]	; (511c <_sbrk+0x34>)
    5100:	681b      	ldr	r3, [r3, #0]
    5102:	60fb      	str	r3, [r7, #12]

	heap += incr;
    5104:	4b05      	ldr	r3, [pc, #20]	; (511c <_sbrk+0x34>)
    5106:	681a      	ldr	r2, [r3, #0]
    5108:	687b      	ldr	r3, [r7, #4]
    510a:	18d2      	adds	r2, r2, r3
    510c:	4b03      	ldr	r3, [pc, #12]	; (511c <_sbrk+0x34>)
    510e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    5110:	68fb      	ldr	r3, [r7, #12]
}
    5112:	0018      	movs	r0, r3
    5114:	46bd      	mov	sp, r7
    5116:	b004      	add	sp, #16
    5118:	bd80      	pop	{r7, pc}
    511a:	46c0      	nop			; (mov r8, r8)
    511c:	2000041c 	.word	0x2000041c
    5120:	200031e8 	.word	0x200031e8

00005124 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    5124:	b580      	push	{r7, lr}
    5126:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    5128:	4b04      	ldr	r3, [pc, #16]	; (513c <system_interrupt_enable_global+0x18>)
    512a:	2201      	movs	r2, #1
    512c:	701a      	strb	r2, [r3, #0]
    512e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    5132:	b662      	cpsie	i
}
    5134:	46c0      	nop			; (mov r8, r8)
    5136:	46bd      	mov	sp, r7
    5138:	bd80      	pop	{r7, pc}
    513a:	46c0      	nop			; (mov r8, r8)
    513c:	20000368 	.word	0x20000368

00005140 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    5140:	b580      	push	{r7, lr}
    5142:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5144:	b672      	cpsid	i
    5146:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    514a:	4b03      	ldr	r3, [pc, #12]	; (5158 <system_interrupt_disable_global+0x18>)
    514c:	2200      	movs	r2, #0
    514e:	701a      	strb	r2, [r3, #0]
}
    5150:	46c0      	nop			; (mov r8, r8)
    5152:	46bd      	mov	sp, r7
    5154:	bd80      	pop	{r7, pc}
    5156:	46c0      	nop			; (mov r8, r8)
    5158:	20000368 	.word	0x20000368

0000515c <main>:
char buffer[32];



int main (void)
{
    515c:	b5f0      	push	{r4, r5, r6, r7, lr}
    515e:	b08f      	sub	sp, #60	; 0x3c
    5160:	af00      	add	r7, sp, #0
	
	system_init();
    5162:	4bdd      	ldr	r3, [pc, #884]	; (54d8 <main+0x37c>)
    5164:	4798      	blx	r3
	delay_init();
    5166:	4bdd      	ldr	r3, [pc, #884]	; (54dc <main+0x380>)
    5168:	4798      	blx	r3
	ble_uart_init();
    516a:	4bdd      	ldr	r3, [pc, #884]	; (54e0 <main+0x384>)
    516c:	4798      	blx	r3
	//uart_init();
	sb_reset_buffers();
    516e:	4bdd      	ldr	r3, [pc, #884]	; (54e4 <main+0x388>)
    5170:	4798      	blx	r3
	
	
	
	sounds_init_pins();
    5172:	4bdd      	ldr	r3, [pc, #884]	; (54e8 <main+0x38c>)
    5174:	4798      	blx	r3
	sb_uart_init();
    5176:	4bdd      	ldr	r3, [pc, #884]	; (54ec <main+0x390>)
    5178:	4798      	blx	r3
	delay_ms(1500);
    517a:	2000      	movs	r0, #0
    517c:	4bdc      	ldr	r3, [pc, #880]	; (54f0 <main+0x394>)
    517e:	4798      	blx	r3
    5180:	0003      	movs	r3, r0
    5182:	001d      	movs	r5, r3
    5184:	2300      	movs	r3, #0
    5186:	001e      	movs	r6, r3
    5188:	4cda      	ldr	r4, [pc, #872]	; (54f4 <main+0x398>)
    518a:	4adb      	ldr	r2, [pc, #876]	; (54f8 <main+0x39c>)
    518c:	2300      	movs	r3, #0
    518e:	0028      	movs	r0, r5
    5190:	0031      	movs	r1, r6
    5192:	47a0      	blx	r4
    5194:	0003      	movs	r3, r0
    5196:	000c      	movs	r4, r1
    5198:	0019      	movs	r1, r3
    519a:	0022      	movs	r2, r4
    519c:	4bd7      	ldr	r3, [pc, #860]	; (54fc <main+0x3a0>)
    519e:	2400      	movs	r4, #0
    51a0:	18c9      	adds	r1, r1, r3
    51a2:	4162      	adcs	r2, r4
    51a4:	0008      	movs	r0, r1
    51a6:	0011      	movs	r1, r2
    51a8:	4cd5      	ldr	r4, [pc, #852]	; (5500 <main+0x3a4>)
    51aa:	4ad6      	ldr	r2, [pc, #856]	; (5504 <main+0x3a8>)
    51ac:	2300      	movs	r3, #0
    51ae:	47a0      	blx	r4
    51b0:	0003      	movs	r3, r0
    51b2:	000c      	movs	r4, r1
    51b4:	0018      	movs	r0, r3
    51b6:	4bd4      	ldr	r3, [pc, #848]	; (5508 <main+0x3ac>)
    51b8:	4798      	blx	r3
	sounds_reset();
    51ba:	4bd4      	ldr	r3, [pc, #848]	; (550c <main+0x3b0>)
    51bc:	4798      	blx	r3
	party_thresholds[5] = 2000;
	party_thresholds[6] = 2375;
	 
	*/
	
	int sound_no = 0;
    51be:	2300      	movs	r3, #0
    51c0:	633b      	str	r3, [r7, #48]	; 0x30
	
	while (1)
	{
		
		if (is_started())
    51c2:	4bd3      	ldr	r3, [pc, #844]	; (5510 <main+0x3b4>)
    51c4:	4798      	blx	r3
			delay_ms(1000);
			sb_play_track_by_number(4);*/
		}
		
		
		for (uint32_t i=0;i<sizeof(rx_buffer_array)-1;i++)
    51c6:	2300      	movs	r3, #0
    51c8:	637b      	str	r3, [r7, #52]	; 0x34
    51ca:	e025      	b.n	5218 <main+0xbc>
		{
			if (rx_buffer_array[i] == '\n' & rx_buffer_array[i+1] == 0)//'\n')
    51cc:	4ad1      	ldr	r2, [pc, #836]	; (5514 <main+0x3b8>)
    51ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    51d0:	18d3      	adds	r3, r2, r3
    51d2:	781b      	ldrb	r3, [r3, #0]
    51d4:	b2db      	uxtb	r3, r3
    51d6:	3b0a      	subs	r3, #10
    51d8:	425a      	negs	r2, r3
    51da:	4153      	adcs	r3, r2
    51dc:	b2d9      	uxtb	r1, r3
    51de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    51e0:	1c5a      	adds	r2, r3, #1
    51e2:	4bcc      	ldr	r3, [pc, #816]	; (5514 <main+0x3b8>)
    51e4:	5c9b      	ldrb	r3, [r3, r2]
    51e6:	b2db      	uxtb	r3, r3
    51e8:	425a      	negs	r2, r3
    51ea:	4153      	adcs	r3, r2
    51ec:	b2db      	uxtb	r3, r3
    51ee:	400b      	ands	r3, r1
    51f0:	b2db      	uxtb	r3, r3
    51f2:	2b00      	cmp	r3, #0
    51f4:	d006      	beq.n	5204 <main+0xa8>
			{
				data_handler(rx_buffer_array);
    51f6:	4bc7      	ldr	r3, [pc, #796]	; (5514 <main+0x3b8>)
    51f8:	0018      	movs	r0, r3
    51fa:	4bc7      	ldr	r3, [pc, #796]	; (5518 <main+0x3bc>)
    51fc:	4798      	blx	r3
				reset_buffers();
    51fe:	4bc7      	ldr	r3, [pc, #796]	; (551c <main+0x3c0>)
    5200:	4798      	blx	r3
    5202:	e006      	b.n	5212 <main+0xb6>
			}
			else if (rx_buffer_array[i] == 0)
    5204:	4ac3      	ldr	r2, [pc, #780]	; (5514 <main+0x3b8>)
    5206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5208:	18d3      	adds	r3, r2, r3
    520a:	781b      	ldrb	r3, [r3, #0]
    520c:	b2db      	uxtb	r3, r3
    520e:	2b00      	cmp	r3, #0
    5210:	d007      	beq.n	5222 <main+0xc6>
			delay_ms(1000);
			sb_play_track_by_number(4);*/
		}
		
		
		for (uint32_t i=0;i<sizeof(rx_buffer_array)-1;i++)
    5212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5214:	3301      	adds	r3, #1
    5216:	637b      	str	r3, [r7, #52]	; 0x34
    5218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    521a:	4bc1      	ldr	r3, [pc, #772]	; (5520 <main+0x3c4>)
    521c:	429a      	cmp	r2, r3
    521e:	d9d5      	bls.n	51cc <main+0x70>
    5220:	e000      	b.n	5224 <main+0xc8>
				data_handler(rx_buffer_array);
				reset_buffers();
			}
			else if (rx_buffer_array[i] == 0)
			{
				break;
    5222:	46c0      	nop			; (mov r8, r8)
			}
		}
		
		sb_event_handler(sb_rx_buffer_array);
    5224:	4bbf      	ldr	r3, [pc, #764]	; (5524 <main+0x3c8>)
    5226:	0018      	movs	r0, r3
    5228:	4bbf      	ldr	r3, [pc, #764]	; (5528 <main+0x3cc>)
    522a:	4798      	blx	r3
				delay_ms(250);
				sb_play_track_by_number(2);
			}
			//sb_uart_write(buffer);
		}*/
		if (should_update)
    522c:	4bbf      	ldr	r3, [pc, #764]	; (552c <main+0x3d0>)
    522e:	781b      	ldrb	r3, [r3, #0]
    5230:	2b00      	cmp	r3, #0
    5232:	d006      	beq.n	5242 <main+0xe6>
		{
			should_update = false;
    5234:	4abd      	ldr	r2, [pc, #756]	; (552c <main+0x3d0>)
    5236:	2300      	movs	r3, #0
    5238:	7013      	strb	r3, [r2, #0]
			things_to_do();
    523a:	4bbd      	ldr	r3, [pc, #756]	; (5530 <main+0x3d4>)
    523c:	4798      	blx	r3
			update_all_ports();
    523e:	4bbd      	ldr	r3, [pc, #756]	; (5534 <main+0x3d8>)
    5240:	4798      	blx	r3
		}
		if (execute_order_66)
    5242:	4bbd      	ldr	r3, [pc, #756]	; (5538 <main+0x3dc>)
    5244:	781b      	ldrb	r3, [r3, #0]
    5246:	2b00      	cmp	r3, #0
    5248:	d00e      	beq.n	5268 <main+0x10c>
		{
			system_interrupt_disable_global();
    524a:	4bbc      	ldr	r3, [pc, #752]	; (553c <main+0x3e0>)
    524c:	4798      	blx	r3
			ble_uart_write("EXEC ORDER 66\n");
    524e:	4bbc      	ldr	r3, [pc, #752]	; (5540 <main+0x3e4>)
    5250:	0018      	movs	r0, r3
    5252:	4bbc      	ldr	r3, [pc, #752]	; (5544 <main+0x3e8>)
    5254:	4798      	blx	r3
			execute_order_66 = false;
    5256:	4ab8      	ldr	r2, [pc, #736]	; (5538 <main+0x3dc>)
    5258:	2300      	movs	r3, #0
    525a:	7013      	strb	r3, [r2, #0]
			//init_all_ports();
			mcp23017_reset();
    525c:	4bba      	ldr	r3, [pc, #744]	; (5548 <main+0x3ec>)
    525e:	4798      	blx	r3
			a_okay();
    5260:	4bba      	ldr	r3, [pc, #744]	; (554c <main+0x3f0>)
    5262:	4798      	blx	r3
			system_interrupt_enable_global();
    5264:	4bba      	ldr	r3, [pc, #744]	; (5550 <main+0x3f4>)
    5266:	4798      	blx	r3
		}
		
		if (valve_open)
    5268:	4bba      	ldr	r3, [pc, #744]	; (5554 <main+0x3f8>)
    526a:	781b      	ldrb	r3, [r3, #0]
    526c:	b2db      	uxtb	r3, r3
    526e:	2b00      	cmp	r3, #0
    5270:	d100      	bne.n	5274 <main+0x118>
    5272:	e08f      	b.n	5394 <main+0x238>
		{
			system_interrupt_disable_global();
    5274:	4bb1      	ldr	r3, [pc, #708]	; (553c <main+0x3e0>)
    5276:	4798      	blx	r3
			valve_open = false;
    5278:	4ab6      	ldr	r2, [pc, #728]	; (5554 <main+0x3f8>)
    527a:	2300      	movs	r3, #0
    527c:	7013      	strb	r3, [r2, #0]
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,true);
    527e:	2301      	movs	r3, #1
    5280:	2200      	movs	r2, #0
    5282:	2105      	movs	r1, #5
    5284:	2000      	movs	r0, #0
    5286:	4cb4      	ldr	r4, [pc, #720]	; (5558 <main+0x3fc>)
    5288:	47a0      	blx	r4
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    528a:	2300      	movs	r3, #0
    528c:	2201      	movs	r2, #1
    528e:	2105      	movs	r1, #5
    5290:	2000      	movs	r0, #0
    5292:	4cb1      	ldr	r4, [pc, #708]	; (5558 <main+0x3fc>)
    5294:	47a0      	blx	r4
			update_all_ports();
    5296:	4ba7      	ldr	r3, [pc, #668]	; (5534 <main+0x3d8>)
    5298:	4798      	blx	r3
			delay_ms(300);
    529a:	2000      	movs	r0, #0
    529c:	4b94      	ldr	r3, [pc, #592]	; (54f0 <main+0x394>)
    529e:	4798      	blx	r3
    52a0:	0003      	movs	r3, r0
    52a2:	62bb      	str	r3, [r7, #40]	; 0x28
    52a4:	2300      	movs	r3, #0
    52a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    52a8:	4c92      	ldr	r4, [pc, #584]	; (54f4 <main+0x398>)
    52aa:	2296      	movs	r2, #150	; 0x96
    52ac:	0052      	lsls	r2, r2, #1
    52ae:	2300      	movs	r3, #0
    52b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    52b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    52b4:	47a0      	blx	r4
    52b6:	0003      	movs	r3, r0
    52b8:	000c      	movs	r4, r1
    52ba:	0019      	movs	r1, r3
    52bc:	0022      	movs	r2, r4
    52be:	4b8f      	ldr	r3, [pc, #572]	; (54fc <main+0x3a0>)
    52c0:	2400      	movs	r4, #0
    52c2:	18c9      	adds	r1, r1, r3
    52c4:	4162      	adcs	r2, r4
    52c6:	0008      	movs	r0, r1
    52c8:	0011      	movs	r1, r2
    52ca:	4c8d      	ldr	r4, [pc, #564]	; (5500 <main+0x3a4>)
    52cc:	4a8d      	ldr	r2, [pc, #564]	; (5504 <main+0x3a8>)
    52ce:	2300      	movs	r3, #0
    52d0:	47a0      	blx	r4
    52d2:	0003      	movs	r3, r0
    52d4:	000c      	movs	r4, r1
    52d6:	0018      	movs	r0, r3
    52d8:	4b8b      	ldr	r3, [pc, #556]	; (5508 <main+0x3ac>)
    52da:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    52dc:	2300      	movs	r3, #0
    52de:	2200      	movs	r2, #0
    52e0:	2105      	movs	r1, #5
    52e2:	2000      	movs	r0, #0
    52e4:	4c9c      	ldr	r4, [pc, #624]	; (5558 <main+0x3fc>)
    52e6:	47a0      	blx	r4
			update_all_ports();
    52e8:	4b92      	ldr	r3, [pc, #584]	; (5534 <main+0x3d8>)
    52ea:	4798      	blx	r3
			delay_ms(4000);
    52ec:	2000      	movs	r0, #0
    52ee:	4b80      	ldr	r3, [pc, #512]	; (54f0 <main+0x394>)
    52f0:	4798      	blx	r3
    52f2:	0003      	movs	r3, r0
    52f4:	623b      	str	r3, [r7, #32]
    52f6:	2300      	movs	r3, #0
    52f8:	627b      	str	r3, [r7, #36]	; 0x24
    52fa:	4c7e      	ldr	r4, [pc, #504]	; (54f4 <main+0x398>)
    52fc:	22fa      	movs	r2, #250	; 0xfa
    52fe:	0112      	lsls	r2, r2, #4
    5300:	2300      	movs	r3, #0
    5302:	6a38      	ldr	r0, [r7, #32]
    5304:	6a79      	ldr	r1, [r7, #36]	; 0x24
    5306:	47a0      	blx	r4
    5308:	0003      	movs	r3, r0
    530a:	000c      	movs	r4, r1
    530c:	0019      	movs	r1, r3
    530e:	0022      	movs	r2, r4
    5310:	4b7a      	ldr	r3, [pc, #488]	; (54fc <main+0x3a0>)
    5312:	2400      	movs	r4, #0
    5314:	18c9      	adds	r1, r1, r3
    5316:	4162      	adcs	r2, r4
    5318:	0008      	movs	r0, r1
    531a:	0011      	movs	r1, r2
    531c:	4c78      	ldr	r4, [pc, #480]	; (5500 <main+0x3a4>)
    531e:	4a79      	ldr	r2, [pc, #484]	; (5504 <main+0x3a8>)
    5320:	2300      	movs	r3, #0
    5322:	47a0      	blx	r4
    5324:	0003      	movs	r3, r0
    5326:	000c      	movs	r4, r1
    5328:	0018      	movs	r0, r3
    532a:	4b77      	ldr	r3, [pc, #476]	; (5508 <main+0x3ac>)
    532c:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,true);
    532e:	2301      	movs	r3, #1
    5330:	2200      	movs	r2, #0
    5332:	2105      	movs	r1, #5
    5334:	2000      	movs	r0, #0
    5336:	4c88      	ldr	r4, [pc, #544]	; (5558 <main+0x3fc>)
    5338:	47a0      	blx	r4
			update_all_ports();
    533a:	4b7e      	ldr	r3, [pc, #504]	; (5534 <main+0x3d8>)
    533c:	4798      	blx	r3
			delay_ms(300);
    533e:	2000      	movs	r0, #0
    5340:	4b6b      	ldr	r3, [pc, #428]	; (54f0 <main+0x394>)
    5342:	4798      	blx	r3
    5344:	0003      	movs	r3, r0
    5346:	61bb      	str	r3, [r7, #24]
    5348:	2300      	movs	r3, #0
    534a:	61fb      	str	r3, [r7, #28]
    534c:	4c69      	ldr	r4, [pc, #420]	; (54f4 <main+0x398>)
    534e:	2296      	movs	r2, #150	; 0x96
    5350:	0052      	lsls	r2, r2, #1
    5352:	2300      	movs	r3, #0
    5354:	69b8      	ldr	r0, [r7, #24]
    5356:	69f9      	ldr	r1, [r7, #28]
    5358:	47a0      	blx	r4
    535a:	0003      	movs	r3, r0
    535c:	000c      	movs	r4, r1
    535e:	0019      	movs	r1, r3
    5360:	0022      	movs	r2, r4
    5362:	4b66      	ldr	r3, [pc, #408]	; (54fc <main+0x3a0>)
    5364:	2400      	movs	r4, #0
    5366:	18c9      	adds	r1, r1, r3
    5368:	4162      	adcs	r2, r4
    536a:	0008      	movs	r0, r1
    536c:	0011      	movs	r1, r2
    536e:	4c64      	ldr	r4, [pc, #400]	; (5500 <main+0x3a4>)
    5370:	4a64      	ldr	r2, [pc, #400]	; (5504 <main+0x3a8>)
    5372:	2300      	movs	r3, #0
    5374:	47a0      	blx	r4
    5376:	0003      	movs	r3, r0
    5378:	000c      	movs	r4, r1
    537a:	0018      	movs	r0, r3
    537c:	4b62      	ldr	r3, [pc, #392]	; (5508 <main+0x3ac>)
    537e:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    5380:	2300      	movs	r3, #0
    5382:	2200      	movs	r2, #0
    5384:	2105      	movs	r1, #5
    5386:	2000      	movs	r0, #0
    5388:	4c73      	ldr	r4, [pc, #460]	; (5558 <main+0x3fc>)
    538a:	47a0      	blx	r4
			update_all_ports();
    538c:	4b69      	ldr	r3, [pc, #420]	; (5534 <main+0x3d8>)
    538e:	4798      	blx	r3
			system_interrupt_enable_global();
    5390:	4b6f      	ldr	r3, [pc, #444]	; (5550 <main+0x3f4>)
    5392:	4798      	blx	r3
		}
		if (valve_close)
    5394:	4b71      	ldr	r3, [pc, #452]	; (555c <main+0x400>)
    5396:	781b      	ldrb	r3, [r3, #0]
    5398:	b2db      	uxtb	r3, r3
    539a:	2b00      	cmp	r3, #0
    539c:	d100      	bne.n	53a0 <main+0x244>
    539e:	e08f      	b.n	54c0 <main+0x364>
		{
			system_interrupt_disable_global();
    53a0:	4b66      	ldr	r3, [pc, #408]	; (553c <main+0x3e0>)
    53a2:	4798      	blx	r3
			valve_close = false;
    53a4:	4a6d      	ldr	r2, [pc, #436]	; (555c <main+0x400>)
    53a6:	2300      	movs	r3, #0
    53a8:	7013      	strb	r3, [r2, #0]
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    53aa:	2300      	movs	r3, #0
    53ac:	2200      	movs	r2, #0
    53ae:	2105      	movs	r1, #5
    53b0:	2000      	movs	r0, #0
    53b2:	4c69      	ldr	r4, [pc, #420]	; (5558 <main+0x3fc>)
    53b4:	47a0      	blx	r4
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,true);
    53b6:	2301      	movs	r3, #1
    53b8:	2201      	movs	r2, #1
    53ba:	2105      	movs	r1, #5
    53bc:	2000      	movs	r0, #0
    53be:	4c66      	ldr	r4, [pc, #408]	; (5558 <main+0x3fc>)
    53c0:	47a0      	blx	r4
			update_all_ports();
    53c2:	4b5c      	ldr	r3, [pc, #368]	; (5534 <main+0x3d8>)
    53c4:	4798      	blx	r3
			delay_ms(300);
    53c6:	2000      	movs	r0, #0
    53c8:	4b49      	ldr	r3, [pc, #292]	; (54f0 <main+0x394>)
    53ca:	4798      	blx	r3
    53cc:	0003      	movs	r3, r0
    53ce:	613b      	str	r3, [r7, #16]
    53d0:	2300      	movs	r3, #0
    53d2:	617b      	str	r3, [r7, #20]
    53d4:	4c47      	ldr	r4, [pc, #284]	; (54f4 <main+0x398>)
    53d6:	2296      	movs	r2, #150	; 0x96
    53d8:	0052      	lsls	r2, r2, #1
    53da:	2300      	movs	r3, #0
    53dc:	6938      	ldr	r0, [r7, #16]
    53de:	6979      	ldr	r1, [r7, #20]
    53e0:	47a0      	blx	r4
    53e2:	0003      	movs	r3, r0
    53e4:	000c      	movs	r4, r1
    53e6:	0019      	movs	r1, r3
    53e8:	0022      	movs	r2, r4
    53ea:	4b44      	ldr	r3, [pc, #272]	; (54fc <main+0x3a0>)
    53ec:	2400      	movs	r4, #0
    53ee:	18c9      	adds	r1, r1, r3
    53f0:	4162      	adcs	r2, r4
    53f2:	0008      	movs	r0, r1
    53f4:	0011      	movs	r1, r2
    53f6:	4c42      	ldr	r4, [pc, #264]	; (5500 <main+0x3a4>)
    53f8:	4a42      	ldr	r2, [pc, #264]	; (5504 <main+0x3a8>)
    53fa:	2300      	movs	r3, #0
    53fc:	47a0      	blx	r4
    53fe:	0003      	movs	r3, r0
    5400:	000c      	movs	r4, r1
    5402:	0018      	movs	r0, r3
    5404:	4b40      	ldr	r3, [pc, #256]	; (5508 <main+0x3ac>)
    5406:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    5408:	2300      	movs	r3, #0
    540a:	2201      	movs	r2, #1
    540c:	2105      	movs	r1, #5
    540e:	2000      	movs	r0, #0
    5410:	4c51      	ldr	r4, [pc, #324]	; (5558 <main+0x3fc>)
    5412:	47a0      	blx	r4
			update_all_ports();
    5414:	4b47      	ldr	r3, [pc, #284]	; (5534 <main+0x3d8>)
    5416:	4798      	blx	r3
			delay_ms(4000);
    5418:	2000      	movs	r0, #0
    541a:	4b35      	ldr	r3, [pc, #212]	; (54f0 <main+0x394>)
    541c:	4798      	blx	r3
    541e:	0003      	movs	r3, r0
    5420:	60bb      	str	r3, [r7, #8]
    5422:	2300      	movs	r3, #0
    5424:	60fb      	str	r3, [r7, #12]
    5426:	4c33      	ldr	r4, [pc, #204]	; (54f4 <main+0x398>)
    5428:	22fa      	movs	r2, #250	; 0xfa
    542a:	0112      	lsls	r2, r2, #4
    542c:	2300      	movs	r3, #0
    542e:	68b8      	ldr	r0, [r7, #8]
    5430:	68f9      	ldr	r1, [r7, #12]
    5432:	47a0      	blx	r4
    5434:	0003      	movs	r3, r0
    5436:	000c      	movs	r4, r1
    5438:	0019      	movs	r1, r3
    543a:	0022      	movs	r2, r4
    543c:	4b2f      	ldr	r3, [pc, #188]	; (54fc <main+0x3a0>)
    543e:	2400      	movs	r4, #0
    5440:	18c9      	adds	r1, r1, r3
    5442:	4162      	adcs	r2, r4
    5444:	0008      	movs	r0, r1
    5446:	0011      	movs	r1, r2
    5448:	4c2d      	ldr	r4, [pc, #180]	; (5500 <main+0x3a4>)
    544a:	4a2e      	ldr	r2, [pc, #184]	; (5504 <main+0x3a8>)
    544c:	2300      	movs	r3, #0
    544e:	47a0      	blx	r4
    5450:	0003      	movs	r3, r0
    5452:	000c      	movs	r4, r1
    5454:	0018      	movs	r0, r3
    5456:	4b2c      	ldr	r3, [pc, #176]	; (5508 <main+0x3ac>)
    5458:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,true);
    545a:	2301      	movs	r3, #1
    545c:	2201      	movs	r2, #1
    545e:	2105      	movs	r1, #5
    5460:	2000      	movs	r0, #0
    5462:	4c3d      	ldr	r4, [pc, #244]	; (5558 <main+0x3fc>)
    5464:	47a0      	blx	r4
			update_all_ports();
    5466:	4b33      	ldr	r3, [pc, #204]	; (5534 <main+0x3d8>)
    5468:	4798      	blx	r3
			delay_ms(300);
    546a:	2000      	movs	r0, #0
    546c:	4b20      	ldr	r3, [pc, #128]	; (54f0 <main+0x394>)
    546e:	4798      	blx	r3
    5470:	0003      	movs	r3, r0
    5472:	603b      	str	r3, [r7, #0]
    5474:	2300      	movs	r3, #0
    5476:	607b      	str	r3, [r7, #4]
    5478:	4c1e      	ldr	r4, [pc, #120]	; (54f4 <main+0x398>)
    547a:	2296      	movs	r2, #150	; 0x96
    547c:	0052      	lsls	r2, r2, #1
    547e:	2300      	movs	r3, #0
    5480:	6838      	ldr	r0, [r7, #0]
    5482:	6879      	ldr	r1, [r7, #4]
    5484:	47a0      	blx	r4
    5486:	0003      	movs	r3, r0
    5488:	000c      	movs	r4, r1
    548a:	0019      	movs	r1, r3
    548c:	0022      	movs	r2, r4
    548e:	4b1b      	ldr	r3, [pc, #108]	; (54fc <main+0x3a0>)
    5490:	2400      	movs	r4, #0
    5492:	18c9      	adds	r1, r1, r3
    5494:	4162      	adcs	r2, r4
    5496:	0008      	movs	r0, r1
    5498:	0011      	movs	r1, r2
    549a:	4c19      	ldr	r4, [pc, #100]	; (5500 <main+0x3a4>)
    549c:	4a19      	ldr	r2, [pc, #100]	; (5504 <main+0x3a8>)
    549e:	2300      	movs	r3, #0
    54a0:	47a0      	blx	r4
    54a2:	0003      	movs	r3, r0
    54a4:	000c      	movs	r4, r1
    54a6:	0018      	movs	r0, r3
    54a8:	4b17      	ldr	r3, [pc, #92]	; (5508 <main+0x3ac>)
    54aa:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    54ac:	2300      	movs	r3, #0
    54ae:	2201      	movs	r2, #1
    54b0:	2105      	movs	r1, #5
    54b2:	2000      	movs	r0, #0
    54b4:	4c28      	ldr	r4, [pc, #160]	; (5558 <main+0x3fc>)
    54b6:	47a0      	blx	r4
			update_all_ports();
    54b8:	4b1e      	ldr	r3, [pc, #120]	; (5534 <main+0x3d8>)
    54ba:	4798      	blx	r3
			system_interrupt_enable_global();
    54bc:	4b24      	ldr	r3, [pc, #144]	; (5550 <main+0x3f4>)
    54be:	4798      	blx	r3
		}
		
		if (should_check)
    54c0:	4b27      	ldr	r3, [pc, #156]	; (5560 <main+0x404>)
    54c2:	781b      	ldrb	r3, [r3, #0]
    54c4:	2b00      	cmp	r3, #0
    54c6:	d100      	bne.n	54ca <main+0x36e>
    54c8:	e67b      	b.n	51c2 <main+0x66>
		{
			should_check = false;
    54ca:	4a25      	ldr	r2, [pc, #148]	; (5560 <main+0x404>)
    54cc:	2300      	movs	r3, #0
    54ce:	7013      	strb	r3, [r2, #0]
			mcp23017_check_all();
    54d0:	4b24      	ldr	r3, [pc, #144]	; (5564 <main+0x408>)
    54d2:	4798      	blx	r3
		}
	}
    54d4:	e675      	b.n	51c2 <main+0x66>
    54d6:	46c0      	nop			; (mov r8, r8)
    54d8:	00004fa1 	.word	0x00004fa1
    54dc:	00000181 	.word	0x00000181
    54e0:	00000fa5 	.word	0x00000fa5
    54e4:	000042d5 	.word	0x000042d5
    54e8:	00003a5d 	.word	0x00003a5d
    54ec:	00004161 	.word	0x00004161
    54f0:	00004b41 	.word	0x00004b41
    54f4:	00005895 	.word	0x00005895
    54f8:	000005dc 	.word	0x000005dc
    54fc:	00001b57 	.word	0x00001b57
    5500:	00005855 	.word	0x00005855
    5504:	00001b58 	.word	0x00001b58
    5508:	20000001 	.word	0x20000001
    550c:	00003ae5 	.word	0x00003ae5
    5510:	00003f65 	.word	0x00003f65
    5514:	200004a0 	.word	0x200004a0
    5518:	00001161 	.word	0x00001161
    551c:	000010e9 	.word	0x000010e9
    5520:	000003fe 	.word	0x000003fe
    5524:	2000094c 	.word	0x2000094c
    5528:	00003ba1 	.word	0x00003ba1
    552c:	20000d4c 	.word	0x20000d4c
    5530:	00003865 	.word	0x00003865
    5534:	0000211d 	.word	0x0000211d
    5538:	20000948 	.word	0x20000948
    553c:	00005141 	.word	0x00005141
    5540:	0000726c 	.word	0x0000726c
    5544:	0000102d 	.word	0x0000102d
    5548:	000032b9 	.word	0x000032b9
    554c:	00002a91 	.word	0x00002a91
    5550:	00005125 	.word	0x00005125
    5554:	2000048b 	.word	0x2000048b
    5558:	00002cc9 	.word	0x00002cc9
    555c:	20000488 	.word	0x20000488
    5560:	20000d60 	.word	0x20000d60
    5564:	00002d85 	.word	0x00002d85

00005568 <__aeabi_uidiv>:
    5568:	2200      	movs	r2, #0
    556a:	0843      	lsrs	r3, r0, #1
    556c:	428b      	cmp	r3, r1
    556e:	d374      	bcc.n	565a <__aeabi_uidiv+0xf2>
    5570:	0903      	lsrs	r3, r0, #4
    5572:	428b      	cmp	r3, r1
    5574:	d35f      	bcc.n	5636 <__aeabi_uidiv+0xce>
    5576:	0a03      	lsrs	r3, r0, #8
    5578:	428b      	cmp	r3, r1
    557a:	d344      	bcc.n	5606 <__aeabi_uidiv+0x9e>
    557c:	0b03      	lsrs	r3, r0, #12
    557e:	428b      	cmp	r3, r1
    5580:	d328      	bcc.n	55d4 <__aeabi_uidiv+0x6c>
    5582:	0c03      	lsrs	r3, r0, #16
    5584:	428b      	cmp	r3, r1
    5586:	d30d      	bcc.n	55a4 <__aeabi_uidiv+0x3c>
    5588:	22ff      	movs	r2, #255	; 0xff
    558a:	0209      	lsls	r1, r1, #8
    558c:	ba12      	rev	r2, r2
    558e:	0c03      	lsrs	r3, r0, #16
    5590:	428b      	cmp	r3, r1
    5592:	d302      	bcc.n	559a <__aeabi_uidiv+0x32>
    5594:	1212      	asrs	r2, r2, #8
    5596:	0209      	lsls	r1, r1, #8
    5598:	d065      	beq.n	5666 <__aeabi_uidiv+0xfe>
    559a:	0b03      	lsrs	r3, r0, #12
    559c:	428b      	cmp	r3, r1
    559e:	d319      	bcc.n	55d4 <__aeabi_uidiv+0x6c>
    55a0:	e000      	b.n	55a4 <__aeabi_uidiv+0x3c>
    55a2:	0a09      	lsrs	r1, r1, #8
    55a4:	0bc3      	lsrs	r3, r0, #15
    55a6:	428b      	cmp	r3, r1
    55a8:	d301      	bcc.n	55ae <__aeabi_uidiv+0x46>
    55aa:	03cb      	lsls	r3, r1, #15
    55ac:	1ac0      	subs	r0, r0, r3
    55ae:	4152      	adcs	r2, r2
    55b0:	0b83      	lsrs	r3, r0, #14
    55b2:	428b      	cmp	r3, r1
    55b4:	d301      	bcc.n	55ba <__aeabi_uidiv+0x52>
    55b6:	038b      	lsls	r3, r1, #14
    55b8:	1ac0      	subs	r0, r0, r3
    55ba:	4152      	adcs	r2, r2
    55bc:	0b43      	lsrs	r3, r0, #13
    55be:	428b      	cmp	r3, r1
    55c0:	d301      	bcc.n	55c6 <__aeabi_uidiv+0x5e>
    55c2:	034b      	lsls	r3, r1, #13
    55c4:	1ac0      	subs	r0, r0, r3
    55c6:	4152      	adcs	r2, r2
    55c8:	0b03      	lsrs	r3, r0, #12
    55ca:	428b      	cmp	r3, r1
    55cc:	d301      	bcc.n	55d2 <__aeabi_uidiv+0x6a>
    55ce:	030b      	lsls	r3, r1, #12
    55d0:	1ac0      	subs	r0, r0, r3
    55d2:	4152      	adcs	r2, r2
    55d4:	0ac3      	lsrs	r3, r0, #11
    55d6:	428b      	cmp	r3, r1
    55d8:	d301      	bcc.n	55de <__aeabi_uidiv+0x76>
    55da:	02cb      	lsls	r3, r1, #11
    55dc:	1ac0      	subs	r0, r0, r3
    55de:	4152      	adcs	r2, r2
    55e0:	0a83      	lsrs	r3, r0, #10
    55e2:	428b      	cmp	r3, r1
    55e4:	d301      	bcc.n	55ea <__aeabi_uidiv+0x82>
    55e6:	028b      	lsls	r3, r1, #10
    55e8:	1ac0      	subs	r0, r0, r3
    55ea:	4152      	adcs	r2, r2
    55ec:	0a43      	lsrs	r3, r0, #9
    55ee:	428b      	cmp	r3, r1
    55f0:	d301      	bcc.n	55f6 <__aeabi_uidiv+0x8e>
    55f2:	024b      	lsls	r3, r1, #9
    55f4:	1ac0      	subs	r0, r0, r3
    55f6:	4152      	adcs	r2, r2
    55f8:	0a03      	lsrs	r3, r0, #8
    55fa:	428b      	cmp	r3, r1
    55fc:	d301      	bcc.n	5602 <__aeabi_uidiv+0x9a>
    55fe:	020b      	lsls	r3, r1, #8
    5600:	1ac0      	subs	r0, r0, r3
    5602:	4152      	adcs	r2, r2
    5604:	d2cd      	bcs.n	55a2 <__aeabi_uidiv+0x3a>
    5606:	09c3      	lsrs	r3, r0, #7
    5608:	428b      	cmp	r3, r1
    560a:	d301      	bcc.n	5610 <__aeabi_uidiv+0xa8>
    560c:	01cb      	lsls	r3, r1, #7
    560e:	1ac0      	subs	r0, r0, r3
    5610:	4152      	adcs	r2, r2
    5612:	0983      	lsrs	r3, r0, #6
    5614:	428b      	cmp	r3, r1
    5616:	d301      	bcc.n	561c <__aeabi_uidiv+0xb4>
    5618:	018b      	lsls	r3, r1, #6
    561a:	1ac0      	subs	r0, r0, r3
    561c:	4152      	adcs	r2, r2
    561e:	0943      	lsrs	r3, r0, #5
    5620:	428b      	cmp	r3, r1
    5622:	d301      	bcc.n	5628 <__aeabi_uidiv+0xc0>
    5624:	014b      	lsls	r3, r1, #5
    5626:	1ac0      	subs	r0, r0, r3
    5628:	4152      	adcs	r2, r2
    562a:	0903      	lsrs	r3, r0, #4
    562c:	428b      	cmp	r3, r1
    562e:	d301      	bcc.n	5634 <__aeabi_uidiv+0xcc>
    5630:	010b      	lsls	r3, r1, #4
    5632:	1ac0      	subs	r0, r0, r3
    5634:	4152      	adcs	r2, r2
    5636:	08c3      	lsrs	r3, r0, #3
    5638:	428b      	cmp	r3, r1
    563a:	d301      	bcc.n	5640 <__aeabi_uidiv+0xd8>
    563c:	00cb      	lsls	r3, r1, #3
    563e:	1ac0      	subs	r0, r0, r3
    5640:	4152      	adcs	r2, r2
    5642:	0883      	lsrs	r3, r0, #2
    5644:	428b      	cmp	r3, r1
    5646:	d301      	bcc.n	564c <__aeabi_uidiv+0xe4>
    5648:	008b      	lsls	r3, r1, #2
    564a:	1ac0      	subs	r0, r0, r3
    564c:	4152      	adcs	r2, r2
    564e:	0843      	lsrs	r3, r0, #1
    5650:	428b      	cmp	r3, r1
    5652:	d301      	bcc.n	5658 <__aeabi_uidiv+0xf0>
    5654:	004b      	lsls	r3, r1, #1
    5656:	1ac0      	subs	r0, r0, r3
    5658:	4152      	adcs	r2, r2
    565a:	1a41      	subs	r1, r0, r1
    565c:	d200      	bcs.n	5660 <__aeabi_uidiv+0xf8>
    565e:	4601      	mov	r1, r0
    5660:	4152      	adcs	r2, r2
    5662:	4610      	mov	r0, r2
    5664:	4770      	bx	lr
    5666:	e7ff      	b.n	5668 <__aeabi_uidiv+0x100>
    5668:	b501      	push	{r0, lr}
    566a:	2000      	movs	r0, #0
    566c:	f000 f8f0 	bl	5850 <__aeabi_idiv0>
    5670:	bd02      	pop	{r1, pc}
    5672:	46c0      	nop			; (mov r8, r8)

00005674 <__aeabi_uidivmod>:
    5674:	2900      	cmp	r1, #0
    5676:	d0f7      	beq.n	5668 <__aeabi_uidiv+0x100>
    5678:	e776      	b.n	5568 <__aeabi_uidiv>
    567a:	4770      	bx	lr

0000567c <__aeabi_idiv>:
    567c:	4603      	mov	r3, r0
    567e:	430b      	orrs	r3, r1
    5680:	d47f      	bmi.n	5782 <__aeabi_idiv+0x106>
    5682:	2200      	movs	r2, #0
    5684:	0843      	lsrs	r3, r0, #1
    5686:	428b      	cmp	r3, r1
    5688:	d374      	bcc.n	5774 <__aeabi_idiv+0xf8>
    568a:	0903      	lsrs	r3, r0, #4
    568c:	428b      	cmp	r3, r1
    568e:	d35f      	bcc.n	5750 <__aeabi_idiv+0xd4>
    5690:	0a03      	lsrs	r3, r0, #8
    5692:	428b      	cmp	r3, r1
    5694:	d344      	bcc.n	5720 <__aeabi_idiv+0xa4>
    5696:	0b03      	lsrs	r3, r0, #12
    5698:	428b      	cmp	r3, r1
    569a:	d328      	bcc.n	56ee <__aeabi_idiv+0x72>
    569c:	0c03      	lsrs	r3, r0, #16
    569e:	428b      	cmp	r3, r1
    56a0:	d30d      	bcc.n	56be <__aeabi_idiv+0x42>
    56a2:	22ff      	movs	r2, #255	; 0xff
    56a4:	0209      	lsls	r1, r1, #8
    56a6:	ba12      	rev	r2, r2
    56a8:	0c03      	lsrs	r3, r0, #16
    56aa:	428b      	cmp	r3, r1
    56ac:	d302      	bcc.n	56b4 <__aeabi_idiv+0x38>
    56ae:	1212      	asrs	r2, r2, #8
    56b0:	0209      	lsls	r1, r1, #8
    56b2:	d065      	beq.n	5780 <__aeabi_idiv+0x104>
    56b4:	0b03      	lsrs	r3, r0, #12
    56b6:	428b      	cmp	r3, r1
    56b8:	d319      	bcc.n	56ee <__aeabi_idiv+0x72>
    56ba:	e000      	b.n	56be <__aeabi_idiv+0x42>
    56bc:	0a09      	lsrs	r1, r1, #8
    56be:	0bc3      	lsrs	r3, r0, #15
    56c0:	428b      	cmp	r3, r1
    56c2:	d301      	bcc.n	56c8 <__aeabi_idiv+0x4c>
    56c4:	03cb      	lsls	r3, r1, #15
    56c6:	1ac0      	subs	r0, r0, r3
    56c8:	4152      	adcs	r2, r2
    56ca:	0b83      	lsrs	r3, r0, #14
    56cc:	428b      	cmp	r3, r1
    56ce:	d301      	bcc.n	56d4 <__aeabi_idiv+0x58>
    56d0:	038b      	lsls	r3, r1, #14
    56d2:	1ac0      	subs	r0, r0, r3
    56d4:	4152      	adcs	r2, r2
    56d6:	0b43      	lsrs	r3, r0, #13
    56d8:	428b      	cmp	r3, r1
    56da:	d301      	bcc.n	56e0 <__aeabi_idiv+0x64>
    56dc:	034b      	lsls	r3, r1, #13
    56de:	1ac0      	subs	r0, r0, r3
    56e0:	4152      	adcs	r2, r2
    56e2:	0b03      	lsrs	r3, r0, #12
    56e4:	428b      	cmp	r3, r1
    56e6:	d301      	bcc.n	56ec <__aeabi_idiv+0x70>
    56e8:	030b      	lsls	r3, r1, #12
    56ea:	1ac0      	subs	r0, r0, r3
    56ec:	4152      	adcs	r2, r2
    56ee:	0ac3      	lsrs	r3, r0, #11
    56f0:	428b      	cmp	r3, r1
    56f2:	d301      	bcc.n	56f8 <__aeabi_idiv+0x7c>
    56f4:	02cb      	lsls	r3, r1, #11
    56f6:	1ac0      	subs	r0, r0, r3
    56f8:	4152      	adcs	r2, r2
    56fa:	0a83      	lsrs	r3, r0, #10
    56fc:	428b      	cmp	r3, r1
    56fe:	d301      	bcc.n	5704 <__aeabi_idiv+0x88>
    5700:	028b      	lsls	r3, r1, #10
    5702:	1ac0      	subs	r0, r0, r3
    5704:	4152      	adcs	r2, r2
    5706:	0a43      	lsrs	r3, r0, #9
    5708:	428b      	cmp	r3, r1
    570a:	d301      	bcc.n	5710 <__aeabi_idiv+0x94>
    570c:	024b      	lsls	r3, r1, #9
    570e:	1ac0      	subs	r0, r0, r3
    5710:	4152      	adcs	r2, r2
    5712:	0a03      	lsrs	r3, r0, #8
    5714:	428b      	cmp	r3, r1
    5716:	d301      	bcc.n	571c <__aeabi_idiv+0xa0>
    5718:	020b      	lsls	r3, r1, #8
    571a:	1ac0      	subs	r0, r0, r3
    571c:	4152      	adcs	r2, r2
    571e:	d2cd      	bcs.n	56bc <__aeabi_idiv+0x40>
    5720:	09c3      	lsrs	r3, r0, #7
    5722:	428b      	cmp	r3, r1
    5724:	d301      	bcc.n	572a <__aeabi_idiv+0xae>
    5726:	01cb      	lsls	r3, r1, #7
    5728:	1ac0      	subs	r0, r0, r3
    572a:	4152      	adcs	r2, r2
    572c:	0983      	lsrs	r3, r0, #6
    572e:	428b      	cmp	r3, r1
    5730:	d301      	bcc.n	5736 <__aeabi_idiv+0xba>
    5732:	018b      	lsls	r3, r1, #6
    5734:	1ac0      	subs	r0, r0, r3
    5736:	4152      	adcs	r2, r2
    5738:	0943      	lsrs	r3, r0, #5
    573a:	428b      	cmp	r3, r1
    573c:	d301      	bcc.n	5742 <__aeabi_idiv+0xc6>
    573e:	014b      	lsls	r3, r1, #5
    5740:	1ac0      	subs	r0, r0, r3
    5742:	4152      	adcs	r2, r2
    5744:	0903      	lsrs	r3, r0, #4
    5746:	428b      	cmp	r3, r1
    5748:	d301      	bcc.n	574e <__aeabi_idiv+0xd2>
    574a:	010b      	lsls	r3, r1, #4
    574c:	1ac0      	subs	r0, r0, r3
    574e:	4152      	adcs	r2, r2
    5750:	08c3      	lsrs	r3, r0, #3
    5752:	428b      	cmp	r3, r1
    5754:	d301      	bcc.n	575a <__aeabi_idiv+0xde>
    5756:	00cb      	lsls	r3, r1, #3
    5758:	1ac0      	subs	r0, r0, r3
    575a:	4152      	adcs	r2, r2
    575c:	0883      	lsrs	r3, r0, #2
    575e:	428b      	cmp	r3, r1
    5760:	d301      	bcc.n	5766 <__aeabi_idiv+0xea>
    5762:	008b      	lsls	r3, r1, #2
    5764:	1ac0      	subs	r0, r0, r3
    5766:	4152      	adcs	r2, r2
    5768:	0843      	lsrs	r3, r0, #1
    576a:	428b      	cmp	r3, r1
    576c:	d301      	bcc.n	5772 <__aeabi_idiv+0xf6>
    576e:	004b      	lsls	r3, r1, #1
    5770:	1ac0      	subs	r0, r0, r3
    5772:	4152      	adcs	r2, r2
    5774:	1a41      	subs	r1, r0, r1
    5776:	d200      	bcs.n	577a <__aeabi_idiv+0xfe>
    5778:	4601      	mov	r1, r0
    577a:	4152      	adcs	r2, r2
    577c:	4610      	mov	r0, r2
    577e:	4770      	bx	lr
    5780:	e05d      	b.n	583e <__aeabi_idiv+0x1c2>
    5782:	0fca      	lsrs	r2, r1, #31
    5784:	d000      	beq.n	5788 <__aeabi_idiv+0x10c>
    5786:	4249      	negs	r1, r1
    5788:	1003      	asrs	r3, r0, #32
    578a:	d300      	bcc.n	578e <__aeabi_idiv+0x112>
    578c:	4240      	negs	r0, r0
    578e:	4053      	eors	r3, r2
    5790:	2200      	movs	r2, #0
    5792:	469c      	mov	ip, r3
    5794:	0903      	lsrs	r3, r0, #4
    5796:	428b      	cmp	r3, r1
    5798:	d32d      	bcc.n	57f6 <__aeabi_idiv+0x17a>
    579a:	0a03      	lsrs	r3, r0, #8
    579c:	428b      	cmp	r3, r1
    579e:	d312      	bcc.n	57c6 <__aeabi_idiv+0x14a>
    57a0:	22fc      	movs	r2, #252	; 0xfc
    57a2:	0189      	lsls	r1, r1, #6
    57a4:	ba12      	rev	r2, r2
    57a6:	0a03      	lsrs	r3, r0, #8
    57a8:	428b      	cmp	r3, r1
    57aa:	d30c      	bcc.n	57c6 <__aeabi_idiv+0x14a>
    57ac:	0189      	lsls	r1, r1, #6
    57ae:	1192      	asrs	r2, r2, #6
    57b0:	428b      	cmp	r3, r1
    57b2:	d308      	bcc.n	57c6 <__aeabi_idiv+0x14a>
    57b4:	0189      	lsls	r1, r1, #6
    57b6:	1192      	asrs	r2, r2, #6
    57b8:	428b      	cmp	r3, r1
    57ba:	d304      	bcc.n	57c6 <__aeabi_idiv+0x14a>
    57bc:	0189      	lsls	r1, r1, #6
    57be:	d03a      	beq.n	5836 <__aeabi_idiv+0x1ba>
    57c0:	1192      	asrs	r2, r2, #6
    57c2:	e000      	b.n	57c6 <__aeabi_idiv+0x14a>
    57c4:	0989      	lsrs	r1, r1, #6
    57c6:	09c3      	lsrs	r3, r0, #7
    57c8:	428b      	cmp	r3, r1
    57ca:	d301      	bcc.n	57d0 <__aeabi_idiv+0x154>
    57cc:	01cb      	lsls	r3, r1, #7
    57ce:	1ac0      	subs	r0, r0, r3
    57d0:	4152      	adcs	r2, r2
    57d2:	0983      	lsrs	r3, r0, #6
    57d4:	428b      	cmp	r3, r1
    57d6:	d301      	bcc.n	57dc <__aeabi_idiv+0x160>
    57d8:	018b      	lsls	r3, r1, #6
    57da:	1ac0      	subs	r0, r0, r3
    57dc:	4152      	adcs	r2, r2
    57de:	0943      	lsrs	r3, r0, #5
    57e0:	428b      	cmp	r3, r1
    57e2:	d301      	bcc.n	57e8 <__aeabi_idiv+0x16c>
    57e4:	014b      	lsls	r3, r1, #5
    57e6:	1ac0      	subs	r0, r0, r3
    57e8:	4152      	adcs	r2, r2
    57ea:	0903      	lsrs	r3, r0, #4
    57ec:	428b      	cmp	r3, r1
    57ee:	d301      	bcc.n	57f4 <__aeabi_idiv+0x178>
    57f0:	010b      	lsls	r3, r1, #4
    57f2:	1ac0      	subs	r0, r0, r3
    57f4:	4152      	adcs	r2, r2
    57f6:	08c3      	lsrs	r3, r0, #3
    57f8:	428b      	cmp	r3, r1
    57fa:	d301      	bcc.n	5800 <__aeabi_idiv+0x184>
    57fc:	00cb      	lsls	r3, r1, #3
    57fe:	1ac0      	subs	r0, r0, r3
    5800:	4152      	adcs	r2, r2
    5802:	0883      	lsrs	r3, r0, #2
    5804:	428b      	cmp	r3, r1
    5806:	d301      	bcc.n	580c <__aeabi_idiv+0x190>
    5808:	008b      	lsls	r3, r1, #2
    580a:	1ac0      	subs	r0, r0, r3
    580c:	4152      	adcs	r2, r2
    580e:	d2d9      	bcs.n	57c4 <__aeabi_idiv+0x148>
    5810:	0843      	lsrs	r3, r0, #1
    5812:	428b      	cmp	r3, r1
    5814:	d301      	bcc.n	581a <__aeabi_idiv+0x19e>
    5816:	004b      	lsls	r3, r1, #1
    5818:	1ac0      	subs	r0, r0, r3
    581a:	4152      	adcs	r2, r2
    581c:	1a41      	subs	r1, r0, r1
    581e:	d200      	bcs.n	5822 <__aeabi_idiv+0x1a6>
    5820:	4601      	mov	r1, r0
    5822:	4663      	mov	r3, ip
    5824:	4152      	adcs	r2, r2
    5826:	105b      	asrs	r3, r3, #1
    5828:	4610      	mov	r0, r2
    582a:	d301      	bcc.n	5830 <__aeabi_idiv+0x1b4>
    582c:	4240      	negs	r0, r0
    582e:	2b00      	cmp	r3, #0
    5830:	d500      	bpl.n	5834 <__aeabi_idiv+0x1b8>
    5832:	4249      	negs	r1, r1
    5834:	4770      	bx	lr
    5836:	4663      	mov	r3, ip
    5838:	105b      	asrs	r3, r3, #1
    583a:	d300      	bcc.n	583e <__aeabi_idiv+0x1c2>
    583c:	4240      	negs	r0, r0
    583e:	b501      	push	{r0, lr}
    5840:	2000      	movs	r0, #0
    5842:	f000 f805 	bl	5850 <__aeabi_idiv0>
    5846:	bd02      	pop	{r1, pc}

00005848 <__aeabi_idivmod>:
    5848:	2900      	cmp	r1, #0
    584a:	d0f8      	beq.n	583e <__aeabi_idiv+0x1c2>
    584c:	e716      	b.n	567c <__aeabi_idiv>
    584e:	4770      	bx	lr

00005850 <__aeabi_idiv0>:
    5850:	4770      	bx	lr
    5852:	46c0      	nop			; (mov r8, r8)

00005854 <__aeabi_uldivmod>:
    5854:	2b00      	cmp	r3, #0
    5856:	d111      	bne.n	587c <__aeabi_uldivmod+0x28>
    5858:	2a00      	cmp	r2, #0
    585a:	d10f      	bne.n	587c <__aeabi_uldivmod+0x28>
    585c:	2900      	cmp	r1, #0
    585e:	d100      	bne.n	5862 <__aeabi_uldivmod+0xe>
    5860:	2800      	cmp	r0, #0
    5862:	d002      	beq.n	586a <__aeabi_uldivmod+0x16>
    5864:	2100      	movs	r1, #0
    5866:	43c9      	mvns	r1, r1
    5868:	1c08      	adds	r0, r1, #0
    586a:	b407      	push	{r0, r1, r2}
    586c:	4802      	ldr	r0, [pc, #8]	; (5878 <__aeabi_uldivmod+0x24>)
    586e:	a102      	add	r1, pc, #8	; (adr r1, 5878 <__aeabi_uldivmod+0x24>)
    5870:	1840      	adds	r0, r0, r1
    5872:	9002      	str	r0, [sp, #8]
    5874:	bd03      	pop	{r0, r1, pc}
    5876:	46c0      	nop			; (mov r8, r8)
    5878:	ffffffd9 	.word	0xffffffd9
    587c:	b403      	push	{r0, r1}
    587e:	4668      	mov	r0, sp
    5880:	b501      	push	{r0, lr}
    5882:	9802      	ldr	r0, [sp, #8]
    5884:	f000 f832 	bl	58ec <__udivmoddi4>
    5888:	9b01      	ldr	r3, [sp, #4]
    588a:	469e      	mov	lr, r3
    588c:	b002      	add	sp, #8
    588e:	bc0c      	pop	{r2, r3}
    5890:	4770      	bx	lr
    5892:	46c0      	nop			; (mov r8, r8)

00005894 <__aeabi_lmul>:
    5894:	b5f0      	push	{r4, r5, r6, r7, lr}
    5896:	464f      	mov	r7, r9
    5898:	4646      	mov	r6, r8
    589a:	b4c0      	push	{r6, r7}
    589c:	0416      	lsls	r6, r2, #16
    589e:	0c36      	lsrs	r6, r6, #16
    58a0:	4699      	mov	r9, r3
    58a2:	0033      	movs	r3, r6
    58a4:	0405      	lsls	r5, r0, #16
    58a6:	0c2c      	lsrs	r4, r5, #16
    58a8:	0c07      	lsrs	r7, r0, #16
    58aa:	0c15      	lsrs	r5, r2, #16
    58ac:	4363      	muls	r3, r4
    58ae:	437e      	muls	r6, r7
    58b0:	436f      	muls	r7, r5
    58b2:	4365      	muls	r5, r4
    58b4:	0c1c      	lsrs	r4, r3, #16
    58b6:	19ad      	adds	r5, r5, r6
    58b8:	1964      	adds	r4, r4, r5
    58ba:	469c      	mov	ip, r3
    58bc:	42a6      	cmp	r6, r4
    58be:	d903      	bls.n	58c8 <__aeabi_lmul+0x34>
    58c0:	2380      	movs	r3, #128	; 0x80
    58c2:	025b      	lsls	r3, r3, #9
    58c4:	4698      	mov	r8, r3
    58c6:	4447      	add	r7, r8
    58c8:	4663      	mov	r3, ip
    58ca:	0c25      	lsrs	r5, r4, #16
    58cc:	19ef      	adds	r7, r5, r7
    58ce:	041d      	lsls	r5, r3, #16
    58d0:	464b      	mov	r3, r9
    58d2:	434a      	muls	r2, r1
    58d4:	4343      	muls	r3, r0
    58d6:	0c2d      	lsrs	r5, r5, #16
    58d8:	0424      	lsls	r4, r4, #16
    58da:	1964      	adds	r4, r4, r5
    58dc:	1899      	adds	r1, r3, r2
    58de:	19c9      	adds	r1, r1, r7
    58e0:	0020      	movs	r0, r4
    58e2:	bc0c      	pop	{r2, r3}
    58e4:	4690      	mov	r8, r2
    58e6:	4699      	mov	r9, r3
    58e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58ea:	46c0      	nop			; (mov r8, r8)

000058ec <__udivmoddi4>:
    58ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    58ee:	464d      	mov	r5, r9
    58f0:	4656      	mov	r6, sl
    58f2:	4644      	mov	r4, r8
    58f4:	465f      	mov	r7, fp
    58f6:	b4f0      	push	{r4, r5, r6, r7}
    58f8:	4692      	mov	sl, r2
    58fa:	b083      	sub	sp, #12
    58fc:	0004      	movs	r4, r0
    58fe:	000d      	movs	r5, r1
    5900:	4699      	mov	r9, r3
    5902:	428b      	cmp	r3, r1
    5904:	d82f      	bhi.n	5966 <__udivmoddi4+0x7a>
    5906:	d02c      	beq.n	5962 <__udivmoddi4+0x76>
    5908:	4649      	mov	r1, r9
    590a:	4650      	mov	r0, sl
    590c:	f000 f8cc 	bl	5aa8 <__clzdi2>
    5910:	0029      	movs	r1, r5
    5912:	0006      	movs	r6, r0
    5914:	0020      	movs	r0, r4
    5916:	f000 f8c7 	bl	5aa8 <__clzdi2>
    591a:	1a33      	subs	r3, r6, r0
    591c:	4698      	mov	r8, r3
    591e:	3b20      	subs	r3, #32
    5920:	469b      	mov	fp, r3
    5922:	d500      	bpl.n	5926 <__udivmoddi4+0x3a>
    5924:	e074      	b.n	5a10 <__udivmoddi4+0x124>
    5926:	4653      	mov	r3, sl
    5928:	465a      	mov	r2, fp
    592a:	4093      	lsls	r3, r2
    592c:	001f      	movs	r7, r3
    592e:	4653      	mov	r3, sl
    5930:	4642      	mov	r2, r8
    5932:	4093      	lsls	r3, r2
    5934:	001e      	movs	r6, r3
    5936:	42af      	cmp	r7, r5
    5938:	d829      	bhi.n	598e <__udivmoddi4+0xa2>
    593a:	d026      	beq.n	598a <__udivmoddi4+0x9e>
    593c:	465b      	mov	r3, fp
    593e:	1ba4      	subs	r4, r4, r6
    5940:	41bd      	sbcs	r5, r7
    5942:	2b00      	cmp	r3, #0
    5944:	da00      	bge.n	5948 <__udivmoddi4+0x5c>
    5946:	e079      	b.n	5a3c <__udivmoddi4+0x150>
    5948:	2200      	movs	r2, #0
    594a:	2300      	movs	r3, #0
    594c:	9200      	str	r2, [sp, #0]
    594e:	9301      	str	r3, [sp, #4]
    5950:	2301      	movs	r3, #1
    5952:	465a      	mov	r2, fp
    5954:	4093      	lsls	r3, r2
    5956:	9301      	str	r3, [sp, #4]
    5958:	2301      	movs	r3, #1
    595a:	4642      	mov	r2, r8
    595c:	4093      	lsls	r3, r2
    595e:	9300      	str	r3, [sp, #0]
    5960:	e019      	b.n	5996 <__udivmoddi4+0xaa>
    5962:	4282      	cmp	r2, r0
    5964:	d9d0      	bls.n	5908 <__udivmoddi4+0x1c>
    5966:	2200      	movs	r2, #0
    5968:	2300      	movs	r3, #0
    596a:	9200      	str	r2, [sp, #0]
    596c:	9301      	str	r3, [sp, #4]
    596e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5970:	2b00      	cmp	r3, #0
    5972:	d001      	beq.n	5978 <__udivmoddi4+0x8c>
    5974:	601c      	str	r4, [r3, #0]
    5976:	605d      	str	r5, [r3, #4]
    5978:	9800      	ldr	r0, [sp, #0]
    597a:	9901      	ldr	r1, [sp, #4]
    597c:	b003      	add	sp, #12
    597e:	bc3c      	pop	{r2, r3, r4, r5}
    5980:	4690      	mov	r8, r2
    5982:	4699      	mov	r9, r3
    5984:	46a2      	mov	sl, r4
    5986:	46ab      	mov	fp, r5
    5988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    598a:	42a3      	cmp	r3, r4
    598c:	d9d6      	bls.n	593c <__udivmoddi4+0x50>
    598e:	2200      	movs	r2, #0
    5990:	2300      	movs	r3, #0
    5992:	9200      	str	r2, [sp, #0]
    5994:	9301      	str	r3, [sp, #4]
    5996:	4643      	mov	r3, r8
    5998:	2b00      	cmp	r3, #0
    599a:	d0e8      	beq.n	596e <__udivmoddi4+0x82>
    599c:	07fb      	lsls	r3, r7, #31
    599e:	0872      	lsrs	r2, r6, #1
    59a0:	431a      	orrs	r2, r3
    59a2:	4646      	mov	r6, r8
    59a4:	087b      	lsrs	r3, r7, #1
    59a6:	e00e      	b.n	59c6 <__udivmoddi4+0xda>
    59a8:	42ab      	cmp	r3, r5
    59aa:	d101      	bne.n	59b0 <__udivmoddi4+0xc4>
    59ac:	42a2      	cmp	r2, r4
    59ae:	d80c      	bhi.n	59ca <__udivmoddi4+0xde>
    59b0:	1aa4      	subs	r4, r4, r2
    59b2:	419d      	sbcs	r5, r3
    59b4:	2001      	movs	r0, #1
    59b6:	1924      	adds	r4, r4, r4
    59b8:	416d      	adcs	r5, r5
    59ba:	2100      	movs	r1, #0
    59bc:	3e01      	subs	r6, #1
    59be:	1824      	adds	r4, r4, r0
    59c0:	414d      	adcs	r5, r1
    59c2:	2e00      	cmp	r6, #0
    59c4:	d006      	beq.n	59d4 <__udivmoddi4+0xe8>
    59c6:	42ab      	cmp	r3, r5
    59c8:	d9ee      	bls.n	59a8 <__udivmoddi4+0xbc>
    59ca:	3e01      	subs	r6, #1
    59cc:	1924      	adds	r4, r4, r4
    59ce:	416d      	adcs	r5, r5
    59d0:	2e00      	cmp	r6, #0
    59d2:	d1f8      	bne.n	59c6 <__udivmoddi4+0xda>
    59d4:	465b      	mov	r3, fp
    59d6:	9800      	ldr	r0, [sp, #0]
    59d8:	9901      	ldr	r1, [sp, #4]
    59da:	1900      	adds	r0, r0, r4
    59dc:	4169      	adcs	r1, r5
    59de:	2b00      	cmp	r3, #0
    59e0:	db22      	blt.n	5a28 <__udivmoddi4+0x13c>
    59e2:	002b      	movs	r3, r5
    59e4:	465a      	mov	r2, fp
    59e6:	40d3      	lsrs	r3, r2
    59e8:	002a      	movs	r2, r5
    59ea:	4644      	mov	r4, r8
    59ec:	40e2      	lsrs	r2, r4
    59ee:	001c      	movs	r4, r3
    59f0:	465b      	mov	r3, fp
    59f2:	0015      	movs	r5, r2
    59f4:	2b00      	cmp	r3, #0
    59f6:	db2c      	blt.n	5a52 <__udivmoddi4+0x166>
    59f8:	0026      	movs	r6, r4
    59fa:	409e      	lsls	r6, r3
    59fc:	0033      	movs	r3, r6
    59fe:	0026      	movs	r6, r4
    5a00:	4647      	mov	r7, r8
    5a02:	40be      	lsls	r6, r7
    5a04:	0032      	movs	r2, r6
    5a06:	1a80      	subs	r0, r0, r2
    5a08:	4199      	sbcs	r1, r3
    5a0a:	9000      	str	r0, [sp, #0]
    5a0c:	9101      	str	r1, [sp, #4]
    5a0e:	e7ae      	b.n	596e <__udivmoddi4+0x82>
    5a10:	4642      	mov	r2, r8
    5a12:	2320      	movs	r3, #32
    5a14:	1a9b      	subs	r3, r3, r2
    5a16:	4652      	mov	r2, sl
    5a18:	40da      	lsrs	r2, r3
    5a1a:	4641      	mov	r1, r8
    5a1c:	0013      	movs	r3, r2
    5a1e:	464a      	mov	r2, r9
    5a20:	408a      	lsls	r2, r1
    5a22:	0017      	movs	r7, r2
    5a24:	431f      	orrs	r7, r3
    5a26:	e782      	b.n	592e <__udivmoddi4+0x42>
    5a28:	4642      	mov	r2, r8
    5a2a:	2320      	movs	r3, #32
    5a2c:	1a9b      	subs	r3, r3, r2
    5a2e:	002a      	movs	r2, r5
    5a30:	4646      	mov	r6, r8
    5a32:	409a      	lsls	r2, r3
    5a34:	0023      	movs	r3, r4
    5a36:	40f3      	lsrs	r3, r6
    5a38:	4313      	orrs	r3, r2
    5a3a:	e7d5      	b.n	59e8 <__udivmoddi4+0xfc>
    5a3c:	4642      	mov	r2, r8
    5a3e:	2320      	movs	r3, #32
    5a40:	2100      	movs	r1, #0
    5a42:	1a9b      	subs	r3, r3, r2
    5a44:	2200      	movs	r2, #0
    5a46:	9100      	str	r1, [sp, #0]
    5a48:	9201      	str	r2, [sp, #4]
    5a4a:	2201      	movs	r2, #1
    5a4c:	40da      	lsrs	r2, r3
    5a4e:	9201      	str	r2, [sp, #4]
    5a50:	e782      	b.n	5958 <__udivmoddi4+0x6c>
    5a52:	4642      	mov	r2, r8
    5a54:	2320      	movs	r3, #32
    5a56:	0026      	movs	r6, r4
    5a58:	1a9b      	subs	r3, r3, r2
    5a5a:	40de      	lsrs	r6, r3
    5a5c:	002f      	movs	r7, r5
    5a5e:	46b4      	mov	ip, r6
    5a60:	4097      	lsls	r7, r2
    5a62:	4666      	mov	r6, ip
    5a64:	003b      	movs	r3, r7
    5a66:	4333      	orrs	r3, r6
    5a68:	e7c9      	b.n	59fe <__udivmoddi4+0x112>
    5a6a:	46c0      	nop			; (mov r8, r8)

00005a6c <__clzsi2>:
    5a6c:	211c      	movs	r1, #28
    5a6e:	2301      	movs	r3, #1
    5a70:	041b      	lsls	r3, r3, #16
    5a72:	4298      	cmp	r0, r3
    5a74:	d301      	bcc.n	5a7a <__clzsi2+0xe>
    5a76:	0c00      	lsrs	r0, r0, #16
    5a78:	3910      	subs	r1, #16
    5a7a:	0a1b      	lsrs	r3, r3, #8
    5a7c:	4298      	cmp	r0, r3
    5a7e:	d301      	bcc.n	5a84 <__clzsi2+0x18>
    5a80:	0a00      	lsrs	r0, r0, #8
    5a82:	3908      	subs	r1, #8
    5a84:	091b      	lsrs	r3, r3, #4
    5a86:	4298      	cmp	r0, r3
    5a88:	d301      	bcc.n	5a8e <__clzsi2+0x22>
    5a8a:	0900      	lsrs	r0, r0, #4
    5a8c:	3904      	subs	r1, #4
    5a8e:	a202      	add	r2, pc, #8	; (adr r2, 5a98 <__clzsi2+0x2c>)
    5a90:	5c10      	ldrb	r0, [r2, r0]
    5a92:	1840      	adds	r0, r0, r1
    5a94:	4770      	bx	lr
    5a96:	46c0      	nop			; (mov r8, r8)
    5a98:	02020304 	.word	0x02020304
    5a9c:	01010101 	.word	0x01010101
	...

00005aa8 <__clzdi2>:
    5aa8:	b510      	push	{r4, lr}
    5aaa:	2900      	cmp	r1, #0
    5aac:	d103      	bne.n	5ab6 <__clzdi2+0xe>
    5aae:	f7ff ffdd 	bl	5a6c <__clzsi2>
    5ab2:	3020      	adds	r0, #32
    5ab4:	e002      	b.n	5abc <__clzdi2+0x14>
    5ab6:	1c08      	adds	r0, r1, #0
    5ab8:	f7ff ffd8 	bl	5a6c <__clzsi2>
    5abc:	bd10      	pop	{r4, pc}
    5abe:	46c0      	nop			; (mov r8, r8)

00005ac0 <__libc_init_array>:
    5ac0:	4b0e      	ldr	r3, [pc, #56]	; (5afc <__libc_init_array+0x3c>)
    5ac2:	b570      	push	{r4, r5, r6, lr}
    5ac4:	2500      	movs	r5, #0
    5ac6:	001e      	movs	r6, r3
    5ac8:	4c0d      	ldr	r4, [pc, #52]	; (5b00 <__libc_init_array+0x40>)
    5aca:	1ae4      	subs	r4, r4, r3
    5acc:	10a4      	asrs	r4, r4, #2
    5ace:	42a5      	cmp	r5, r4
    5ad0:	d004      	beq.n	5adc <__libc_init_array+0x1c>
    5ad2:	00ab      	lsls	r3, r5, #2
    5ad4:	58f3      	ldr	r3, [r6, r3]
    5ad6:	4798      	blx	r3
    5ad8:	3501      	adds	r5, #1
    5ada:	e7f8      	b.n	5ace <__libc_init_array+0xe>
    5adc:	f001 fcac 	bl	7438 <_init>
    5ae0:	4b08      	ldr	r3, [pc, #32]	; (5b04 <__libc_init_array+0x44>)
    5ae2:	2500      	movs	r5, #0
    5ae4:	001e      	movs	r6, r3
    5ae6:	4c08      	ldr	r4, [pc, #32]	; (5b08 <__libc_init_array+0x48>)
    5ae8:	1ae4      	subs	r4, r4, r3
    5aea:	10a4      	asrs	r4, r4, #2
    5aec:	42a5      	cmp	r5, r4
    5aee:	d004      	beq.n	5afa <__libc_init_array+0x3a>
    5af0:	00ab      	lsls	r3, r5, #2
    5af2:	58f3      	ldr	r3, [r6, r3]
    5af4:	4798      	blx	r3
    5af6:	3501      	adds	r5, #1
    5af8:	e7f8      	b.n	5aec <__libc_init_array+0x2c>
    5afa:	bd70      	pop	{r4, r5, r6, pc}
    5afc:	00007444 	.word	0x00007444
    5b00:	00007444 	.word	0x00007444
    5b04:	00007444 	.word	0x00007444
    5b08:	00007448 	.word	0x00007448

00005b0c <malloc>:
    5b0c:	b510      	push	{r4, lr}
    5b0e:	4b03      	ldr	r3, [pc, #12]	; (5b1c <malloc+0x10>)
    5b10:	0001      	movs	r1, r0
    5b12:	6818      	ldr	r0, [r3, #0]
    5b14:	f000 f854 	bl	5bc0 <_malloc_r>
    5b18:	bd10      	pop	{r4, pc}
    5b1a:	46c0      	nop			; (mov r8, r8)
    5b1c:	200003cc 	.word	0x200003cc

00005b20 <memcpy>:
    5b20:	2300      	movs	r3, #0
    5b22:	b510      	push	{r4, lr}
    5b24:	429a      	cmp	r2, r3
    5b26:	d003      	beq.n	5b30 <memcpy+0x10>
    5b28:	5ccc      	ldrb	r4, [r1, r3]
    5b2a:	54c4      	strb	r4, [r0, r3]
    5b2c:	3301      	adds	r3, #1
    5b2e:	e7f9      	b.n	5b24 <memcpy+0x4>
    5b30:	bd10      	pop	{r4, pc}
	...

00005b34 <_free_r>:
    5b34:	b530      	push	{r4, r5, lr}
    5b36:	2900      	cmp	r1, #0
    5b38:	d03e      	beq.n	5bb8 <_free_r+0x84>
    5b3a:	3904      	subs	r1, #4
    5b3c:	680b      	ldr	r3, [r1, #0]
    5b3e:	2b00      	cmp	r3, #0
    5b40:	da00      	bge.n	5b44 <_free_r+0x10>
    5b42:	18c9      	adds	r1, r1, r3
    5b44:	4a1d      	ldr	r2, [pc, #116]	; (5bbc <_free_r+0x88>)
    5b46:	6813      	ldr	r3, [r2, #0]
    5b48:	0014      	movs	r4, r2
    5b4a:	2b00      	cmp	r3, #0
    5b4c:	d102      	bne.n	5b54 <_free_r+0x20>
    5b4e:	604b      	str	r3, [r1, #4]
    5b50:	6011      	str	r1, [r2, #0]
    5b52:	e031      	b.n	5bb8 <_free_r+0x84>
    5b54:	428b      	cmp	r3, r1
    5b56:	d90d      	bls.n	5b74 <_free_r+0x40>
    5b58:	680a      	ldr	r2, [r1, #0]
    5b5a:	1888      	adds	r0, r1, r2
    5b5c:	4283      	cmp	r3, r0
    5b5e:	d103      	bne.n	5b68 <_free_r+0x34>
    5b60:	6818      	ldr	r0, [r3, #0]
    5b62:	685b      	ldr	r3, [r3, #4]
    5b64:	1882      	adds	r2, r0, r2
    5b66:	600a      	str	r2, [r1, #0]
    5b68:	604b      	str	r3, [r1, #4]
    5b6a:	6021      	str	r1, [r4, #0]
    5b6c:	e024      	b.n	5bb8 <_free_r+0x84>
    5b6e:	428a      	cmp	r2, r1
    5b70:	d803      	bhi.n	5b7a <_free_r+0x46>
    5b72:	0013      	movs	r3, r2
    5b74:	685a      	ldr	r2, [r3, #4]
    5b76:	2a00      	cmp	r2, #0
    5b78:	d1f9      	bne.n	5b6e <_free_r+0x3a>
    5b7a:	681d      	ldr	r5, [r3, #0]
    5b7c:	195c      	adds	r4, r3, r5
    5b7e:	428c      	cmp	r4, r1
    5b80:	d10b      	bne.n	5b9a <_free_r+0x66>
    5b82:	6809      	ldr	r1, [r1, #0]
    5b84:	1869      	adds	r1, r5, r1
    5b86:	1858      	adds	r0, r3, r1
    5b88:	6019      	str	r1, [r3, #0]
    5b8a:	4282      	cmp	r2, r0
    5b8c:	d114      	bne.n	5bb8 <_free_r+0x84>
    5b8e:	6810      	ldr	r0, [r2, #0]
    5b90:	6852      	ldr	r2, [r2, #4]
    5b92:	1841      	adds	r1, r0, r1
    5b94:	6019      	str	r1, [r3, #0]
    5b96:	605a      	str	r2, [r3, #4]
    5b98:	e00e      	b.n	5bb8 <_free_r+0x84>
    5b9a:	428c      	cmp	r4, r1
    5b9c:	d902      	bls.n	5ba4 <_free_r+0x70>
    5b9e:	230c      	movs	r3, #12
    5ba0:	6003      	str	r3, [r0, #0]
    5ba2:	e009      	b.n	5bb8 <_free_r+0x84>
    5ba4:	6808      	ldr	r0, [r1, #0]
    5ba6:	180c      	adds	r4, r1, r0
    5ba8:	42a2      	cmp	r2, r4
    5baa:	d103      	bne.n	5bb4 <_free_r+0x80>
    5bac:	6814      	ldr	r4, [r2, #0]
    5bae:	6852      	ldr	r2, [r2, #4]
    5bb0:	1820      	adds	r0, r4, r0
    5bb2:	6008      	str	r0, [r1, #0]
    5bb4:	604a      	str	r2, [r1, #4]
    5bb6:	6059      	str	r1, [r3, #4]
    5bb8:	bd30      	pop	{r4, r5, pc}
    5bba:	46c0      	nop			; (mov r8, r8)
    5bbc:	20000424 	.word	0x20000424

00005bc0 <_malloc_r>:
    5bc0:	2303      	movs	r3, #3
    5bc2:	b570      	push	{r4, r5, r6, lr}
    5bc4:	1ccd      	adds	r5, r1, #3
    5bc6:	439d      	bics	r5, r3
    5bc8:	3508      	adds	r5, #8
    5bca:	0006      	movs	r6, r0
    5bcc:	2d0c      	cmp	r5, #12
    5bce:	d201      	bcs.n	5bd4 <_malloc_r+0x14>
    5bd0:	250c      	movs	r5, #12
    5bd2:	e005      	b.n	5be0 <_malloc_r+0x20>
    5bd4:	2d00      	cmp	r5, #0
    5bd6:	da03      	bge.n	5be0 <_malloc_r+0x20>
    5bd8:	230c      	movs	r3, #12
    5bda:	2000      	movs	r0, #0
    5bdc:	6033      	str	r3, [r6, #0]
    5bde:	e040      	b.n	5c62 <_malloc_r+0xa2>
    5be0:	42a9      	cmp	r1, r5
    5be2:	d8f9      	bhi.n	5bd8 <_malloc_r+0x18>
    5be4:	4b1f      	ldr	r3, [pc, #124]	; (5c64 <_malloc_r+0xa4>)
    5be6:	681c      	ldr	r4, [r3, #0]
    5be8:	001a      	movs	r2, r3
    5bea:	0021      	movs	r1, r4
    5bec:	2900      	cmp	r1, #0
    5bee:	d013      	beq.n	5c18 <_malloc_r+0x58>
    5bf0:	680b      	ldr	r3, [r1, #0]
    5bf2:	1b5b      	subs	r3, r3, r5
    5bf4:	d40d      	bmi.n	5c12 <_malloc_r+0x52>
    5bf6:	2b0b      	cmp	r3, #11
    5bf8:	d902      	bls.n	5c00 <_malloc_r+0x40>
    5bfa:	600b      	str	r3, [r1, #0]
    5bfc:	18cc      	adds	r4, r1, r3
    5bfe:	e01e      	b.n	5c3e <_malloc_r+0x7e>
    5c00:	428c      	cmp	r4, r1
    5c02:	d102      	bne.n	5c0a <_malloc_r+0x4a>
    5c04:	6863      	ldr	r3, [r4, #4]
    5c06:	6013      	str	r3, [r2, #0]
    5c08:	e01a      	b.n	5c40 <_malloc_r+0x80>
    5c0a:	684b      	ldr	r3, [r1, #4]
    5c0c:	6063      	str	r3, [r4, #4]
    5c0e:	000c      	movs	r4, r1
    5c10:	e016      	b.n	5c40 <_malloc_r+0x80>
    5c12:	000c      	movs	r4, r1
    5c14:	6849      	ldr	r1, [r1, #4]
    5c16:	e7e9      	b.n	5bec <_malloc_r+0x2c>
    5c18:	4c13      	ldr	r4, [pc, #76]	; (5c68 <_malloc_r+0xa8>)
    5c1a:	6823      	ldr	r3, [r4, #0]
    5c1c:	2b00      	cmp	r3, #0
    5c1e:	d103      	bne.n	5c28 <_malloc_r+0x68>
    5c20:	0030      	movs	r0, r6
    5c22:	f000 f823 	bl	5c6c <_sbrk_r>
    5c26:	6020      	str	r0, [r4, #0]
    5c28:	0029      	movs	r1, r5
    5c2a:	0030      	movs	r0, r6
    5c2c:	f000 f81e 	bl	5c6c <_sbrk_r>
    5c30:	1c43      	adds	r3, r0, #1
    5c32:	d0d1      	beq.n	5bd8 <_malloc_r+0x18>
    5c34:	2303      	movs	r3, #3
    5c36:	1cc4      	adds	r4, r0, #3
    5c38:	439c      	bics	r4, r3
    5c3a:	42a0      	cmp	r0, r4
    5c3c:	d10a      	bne.n	5c54 <_malloc_r+0x94>
    5c3e:	6025      	str	r5, [r4, #0]
    5c40:	0020      	movs	r0, r4
    5c42:	2207      	movs	r2, #7
    5c44:	300b      	adds	r0, #11
    5c46:	1d23      	adds	r3, r4, #4
    5c48:	4390      	bics	r0, r2
    5c4a:	1ac3      	subs	r3, r0, r3
    5c4c:	d009      	beq.n	5c62 <_malloc_r+0xa2>
    5c4e:	425a      	negs	r2, r3
    5c50:	50e2      	str	r2, [r4, r3]
    5c52:	e006      	b.n	5c62 <_malloc_r+0xa2>
    5c54:	1a21      	subs	r1, r4, r0
    5c56:	0030      	movs	r0, r6
    5c58:	f000 f808 	bl	5c6c <_sbrk_r>
    5c5c:	1c43      	adds	r3, r0, #1
    5c5e:	d1ee      	bne.n	5c3e <_malloc_r+0x7e>
    5c60:	e7ba      	b.n	5bd8 <_malloc_r+0x18>
    5c62:	bd70      	pop	{r4, r5, r6, pc}
    5c64:	20000424 	.word	0x20000424
    5c68:	20000420 	.word	0x20000420

00005c6c <_sbrk_r>:
    5c6c:	2300      	movs	r3, #0
    5c6e:	b570      	push	{r4, r5, r6, lr}
    5c70:	4c06      	ldr	r4, [pc, #24]	; (5c8c <_sbrk_r+0x20>)
    5c72:	0005      	movs	r5, r0
    5c74:	0008      	movs	r0, r1
    5c76:	6023      	str	r3, [r4, #0]
    5c78:	f7ff fa36 	bl	50e8 <_sbrk>
    5c7c:	1c43      	adds	r3, r0, #1
    5c7e:	d103      	bne.n	5c88 <_sbrk_r+0x1c>
    5c80:	6823      	ldr	r3, [r4, #0]
    5c82:	2b00      	cmp	r3, #0
    5c84:	d000      	beq.n	5c88 <_sbrk_r+0x1c>
    5c86:	602b      	str	r3, [r5, #0]
    5c88:	bd70      	pop	{r4, r5, r6, pc}
    5c8a:	46c0      	nop			; (mov r8, r8)
    5c8c:	200011e4 	.word	0x200011e4

00005c90 <siprintf>:
    5c90:	b40e      	push	{r1, r2, r3}
    5c92:	b510      	push	{r4, lr}
    5c94:	b09d      	sub	sp, #116	; 0x74
    5c96:	a902      	add	r1, sp, #8
    5c98:	9002      	str	r0, [sp, #8]
    5c9a:	6108      	str	r0, [r1, #16]
    5c9c:	480b      	ldr	r0, [pc, #44]	; (5ccc <siprintf+0x3c>)
    5c9e:	2482      	movs	r4, #130	; 0x82
    5ca0:	6088      	str	r0, [r1, #8]
    5ca2:	6148      	str	r0, [r1, #20]
    5ca4:	2001      	movs	r0, #1
    5ca6:	4240      	negs	r0, r0
    5ca8:	ab1f      	add	r3, sp, #124	; 0x7c
    5caa:	81c8      	strh	r0, [r1, #14]
    5cac:	4808      	ldr	r0, [pc, #32]	; (5cd0 <siprintf+0x40>)
    5cae:	cb04      	ldmia	r3!, {r2}
    5cb0:	00a4      	lsls	r4, r4, #2
    5cb2:	6800      	ldr	r0, [r0, #0]
    5cb4:	9301      	str	r3, [sp, #4]
    5cb6:	818c      	strh	r4, [r1, #12]
    5cb8:	f000 f8e2 	bl	5e80 <_svfiprintf_r>
    5cbc:	2300      	movs	r3, #0
    5cbe:	9a02      	ldr	r2, [sp, #8]
    5cc0:	7013      	strb	r3, [r2, #0]
    5cc2:	b01d      	add	sp, #116	; 0x74
    5cc4:	bc10      	pop	{r4}
    5cc6:	bc08      	pop	{r3}
    5cc8:	b003      	add	sp, #12
    5cca:	4718      	bx	r3
    5ccc:	7fffffff 	.word	0x7fffffff
    5cd0:	200003cc 	.word	0x200003cc

00005cd4 <siscanf>:
    5cd4:	b40e      	push	{r1, r2, r3}
    5cd6:	2381      	movs	r3, #129	; 0x81
    5cd8:	b570      	push	{r4, r5, r6, lr}
    5cda:	b09d      	sub	sp, #116	; 0x74
    5cdc:	ac02      	add	r4, sp, #8
    5cde:	ad21      	add	r5, sp, #132	; 0x84
    5ce0:	009b      	lsls	r3, r3, #2
    5ce2:	cd40      	ldmia	r5!, {r6}
    5ce4:	81a3      	strh	r3, [r4, #12]
    5ce6:	9002      	str	r0, [sp, #8]
    5ce8:	9006      	str	r0, [sp, #24]
    5cea:	f000 f833 	bl	5d54 <strlen>
    5cee:	4b0b      	ldr	r3, [pc, #44]	; (5d1c <siscanf+0x48>)
    5cf0:	6060      	str	r0, [r4, #4]
    5cf2:	6263      	str	r3, [r4, #36]	; 0x24
    5cf4:	2300      	movs	r3, #0
    5cf6:	6160      	str	r0, [r4, #20]
    5cf8:	4809      	ldr	r0, [pc, #36]	; (5d20 <siscanf+0x4c>)
    5cfa:	6363      	str	r3, [r4, #52]	; 0x34
    5cfc:	64a3      	str	r3, [r4, #72]	; 0x48
    5cfe:	3b01      	subs	r3, #1
    5d00:	81e3      	strh	r3, [r4, #14]
    5d02:	0032      	movs	r2, r6
    5d04:	002b      	movs	r3, r5
    5d06:	0021      	movs	r1, r4
    5d08:	6800      	ldr	r0, [r0, #0]
    5d0a:	9501      	str	r5, [sp, #4]
    5d0c:	f000 fa12 	bl	6134 <__ssvfiscanf_r>
    5d10:	b01d      	add	sp, #116	; 0x74
    5d12:	bc70      	pop	{r4, r5, r6}
    5d14:	bc08      	pop	{r3}
    5d16:	b003      	add	sp, #12
    5d18:	4718      	bx	r3
    5d1a:	46c0      	nop			; (mov r8, r8)
    5d1c:	00005d25 	.word	0x00005d25
    5d20:	200003cc 	.word	0x200003cc

00005d24 <__seofread>:
    5d24:	2000      	movs	r0, #0
    5d26:	4770      	bx	lr

00005d28 <strchr>:
    5d28:	0002      	movs	r2, r0
    5d2a:	b2c9      	uxtb	r1, r1
    5d2c:	7813      	ldrb	r3, [r2, #0]
    5d2e:	2b00      	cmp	r3, #0
    5d30:	d003      	beq.n	5d3a <strchr+0x12>
    5d32:	4299      	cmp	r1, r3
    5d34:	d004      	beq.n	5d40 <strchr+0x18>
    5d36:	3201      	adds	r2, #1
    5d38:	e7f8      	b.n	5d2c <strchr+0x4>
    5d3a:	0018      	movs	r0, r3
    5d3c:	2900      	cmp	r1, #0
    5d3e:	d100      	bne.n	5d42 <strchr+0x1a>
    5d40:	0010      	movs	r0, r2
    5d42:	4770      	bx	lr

00005d44 <strcpy>:
    5d44:	1c03      	adds	r3, r0, #0
    5d46:	780a      	ldrb	r2, [r1, #0]
    5d48:	3101      	adds	r1, #1
    5d4a:	701a      	strb	r2, [r3, #0]
    5d4c:	3301      	adds	r3, #1
    5d4e:	2a00      	cmp	r2, #0
    5d50:	d1f9      	bne.n	5d46 <strcpy+0x2>
    5d52:	4770      	bx	lr

00005d54 <strlen>:
    5d54:	2300      	movs	r3, #0
    5d56:	5cc2      	ldrb	r2, [r0, r3]
    5d58:	3301      	adds	r3, #1
    5d5a:	2a00      	cmp	r2, #0
    5d5c:	d1fb      	bne.n	5d56 <strlen+0x2>
    5d5e:	1e58      	subs	r0, r3, #1
    5d60:	4770      	bx	lr

00005d62 <strncmp>:
    5d62:	2300      	movs	r3, #0
    5d64:	b530      	push	{r4, r5, lr}
    5d66:	429a      	cmp	r2, r3
    5d68:	d00b      	beq.n	5d82 <strncmp+0x20>
    5d6a:	3a01      	subs	r2, #1
    5d6c:	5cc4      	ldrb	r4, [r0, r3]
    5d6e:	5ccd      	ldrb	r5, [r1, r3]
    5d70:	42ac      	cmp	r4, r5
    5d72:	d105      	bne.n	5d80 <strncmp+0x1e>
    5d74:	429a      	cmp	r2, r3
    5d76:	d002      	beq.n	5d7e <strncmp+0x1c>
    5d78:	3301      	adds	r3, #1
    5d7a:	2c00      	cmp	r4, #0
    5d7c:	d1f6      	bne.n	5d6c <strncmp+0xa>
    5d7e:	0025      	movs	r5, r4
    5d80:	1b63      	subs	r3, r4, r5
    5d82:	0018      	movs	r0, r3
    5d84:	bd30      	pop	{r4, r5, pc}

00005d86 <strstr>:
    5d86:	b510      	push	{r4, lr}
    5d88:	7803      	ldrb	r3, [r0, #0]
    5d8a:	0002      	movs	r2, r0
    5d8c:	2b00      	cmp	r3, #0
    5d8e:	d105      	bne.n	5d9c <strstr+0x16>
    5d90:	7809      	ldrb	r1, [r1, #0]
    5d92:	0018      	movs	r0, r3
    5d94:	2900      	cmp	r1, #0
    5d96:	d00d      	beq.n	5db4 <strstr+0x2e>
    5d98:	e00f      	b.n	5dba <strstr+0x34>
    5d9a:	3201      	adds	r2, #1
    5d9c:	7813      	ldrb	r3, [r2, #0]
    5d9e:	2b00      	cmp	r3, #0
    5da0:	d00a      	beq.n	5db8 <strstr+0x32>
    5da2:	2300      	movs	r3, #0
    5da4:	5cc8      	ldrb	r0, [r1, r3]
    5da6:	2800      	cmp	r0, #0
    5da8:	d004      	beq.n	5db4 <strstr+0x2e>
    5daa:	5cd4      	ldrb	r4, [r2, r3]
    5dac:	4284      	cmp	r4, r0
    5dae:	d1f4      	bne.n	5d9a <strstr+0x14>
    5db0:	3301      	adds	r3, #1
    5db2:	e7f7      	b.n	5da4 <strstr+0x1e>
    5db4:	0010      	movs	r0, r2
    5db6:	e000      	b.n	5dba <strstr+0x34>
    5db8:	0018      	movs	r0, r3
    5dba:	bd10      	pop	{r4, pc}

00005dbc <__ssputs_r>:
    5dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dbe:	688e      	ldr	r6, [r1, #8]
    5dc0:	b085      	sub	sp, #20
    5dc2:	0007      	movs	r7, r0
    5dc4:	000c      	movs	r4, r1
    5dc6:	9203      	str	r2, [sp, #12]
    5dc8:	9301      	str	r3, [sp, #4]
    5dca:	429e      	cmp	r6, r3
    5dcc:	d843      	bhi.n	5e56 <__ssputs_r+0x9a>
    5dce:	2390      	movs	r3, #144	; 0x90
    5dd0:	898a      	ldrh	r2, [r1, #12]
    5dd2:	00db      	lsls	r3, r3, #3
    5dd4:	421a      	tst	r2, r3
    5dd6:	d03e      	beq.n	5e56 <__ssputs_r+0x9a>
    5dd8:	2503      	movs	r5, #3
    5dda:	6909      	ldr	r1, [r1, #16]
    5ddc:	6823      	ldr	r3, [r4, #0]
    5dde:	9801      	ldr	r0, [sp, #4]
    5de0:	1a5b      	subs	r3, r3, r1
    5de2:	9302      	str	r3, [sp, #8]
    5de4:	6963      	ldr	r3, [r4, #20]
    5de6:	435d      	muls	r5, r3
    5de8:	0feb      	lsrs	r3, r5, #31
    5dea:	195d      	adds	r5, r3, r5
    5dec:	9b02      	ldr	r3, [sp, #8]
    5dee:	106d      	asrs	r5, r5, #1
    5df0:	3301      	adds	r3, #1
    5df2:	181b      	adds	r3, r3, r0
    5df4:	42ab      	cmp	r3, r5
    5df6:	d900      	bls.n	5dfa <__ssputs_r+0x3e>
    5df8:	001d      	movs	r5, r3
    5dfa:	0553      	lsls	r3, r2, #21
    5dfc:	d510      	bpl.n	5e20 <__ssputs_r+0x64>
    5dfe:	0029      	movs	r1, r5
    5e00:	0038      	movs	r0, r7
    5e02:	f7ff fedd 	bl	5bc0 <_malloc_r>
    5e06:	1e06      	subs	r6, r0, #0
    5e08:	d014      	beq.n	5e34 <__ssputs_r+0x78>
    5e0a:	9a02      	ldr	r2, [sp, #8]
    5e0c:	6921      	ldr	r1, [r4, #16]
    5e0e:	f7ff fe87 	bl	5b20 <memcpy>
    5e12:	89a2      	ldrh	r2, [r4, #12]
    5e14:	4b19      	ldr	r3, [pc, #100]	; (5e7c <__ssputs_r+0xc0>)
    5e16:	4013      	ands	r3, r2
    5e18:	2280      	movs	r2, #128	; 0x80
    5e1a:	4313      	orrs	r3, r2
    5e1c:	81a3      	strh	r3, [r4, #12]
    5e1e:	e012      	b.n	5e46 <__ssputs_r+0x8a>
    5e20:	002a      	movs	r2, r5
    5e22:	0038      	movs	r0, r7
    5e24:	f000 ff9c 	bl	6d60 <_realloc_r>
    5e28:	1e06      	subs	r6, r0, #0
    5e2a:	d10c      	bne.n	5e46 <__ssputs_r+0x8a>
    5e2c:	6921      	ldr	r1, [r4, #16]
    5e2e:	0038      	movs	r0, r7
    5e30:	f7ff fe80 	bl	5b34 <_free_r>
    5e34:	230c      	movs	r3, #12
    5e36:	2240      	movs	r2, #64	; 0x40
    5e38:	2001      	movs	r0, #1
    5e3a:	603b      	str	r3, [r7, #0]
    5e3c:	89a3      	ldrh	r3, [r4, #12]
    5e3e:	4240      	negs	r0, r0
    5e40:	4313      	orrs	r3, r2
    5e42:	81a3      	strh	r3, [r4, #12]
    5e44:	e017      	b.n	5e76 <__ssputs_r+0xba>
    5e46:	9b02      	ldr	r3, [sp, #8]
    5e48:	6126      	str	r6, [r4, #16]
    5e4a:	18f6      	adds	r6, r6, r3
    5e4c:	6026      	str	r6, [r4, #0]
    5e4e:	6165      	str	r5, [r4, #20]
    5e50:	9e01      	ldr	r6, [sp, #4]
    5e52:	1aed      	subs	r5, r5, r3
    5e54:	60a5      	str	r5, [r4, #8]
    5e56:	9b01      	ldr	r3, [sp, #4]
    5e58:	42b3      	cmp	r3, r6
    5e5a:	d200      	bcs.n	5e5e <__ssputs_r+0xa2>
    5e5c:	001e      	movs	r6, r3
    5e5e:	0032      	movs	r2, r6
    5e60:	9903      	ldr	r1, [sp, #12]
    5e62:	6820      	ldr	r0, [r4, #0]
    5e64:	f000 ff67 	bl	6d36 <memmove>
    5e68:	2000      	movs	r0, #0
    5e6a:	68a3      	ldr	r3, [r4, #8]
    5e6c:	1b9b      	subs	r3, r3, r6
    5e6e:	60a3      	str	r3, [r4, #8]
    5e70:	6823      	ldr	r3, [r4, #0]
    5e72:	199e      	adds	r6, r3, r6
    5e74:	6026      	str	r6, [r4, #0]
    5e76:	b005      	add	sp, #20
    5e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e7a:	46c0      	nop			; (mov r8, r8)
    5e7c:	fffffb7f 	.word	0xfffffb7f

00005e80 <_svfiprintf_r>:
    5e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e82:	b09f      	sub	sp, #124	; 0x7c
    5e84:	9002      	str	r0, [sp, #8]
    5e86:	9305      	str	r3, [sp, #20]
    5e88:	898b      	ldrh	r3, [r1, #12]
    5e8a:	000f      	movs	r7, r1
    5e8c:	0016      	movs	r6, r2
    5e8e:	061b      	lsls	r3, r3, #24
    5e90:	d510      	bpl.n	5eb4 <_svfiprintf_r+0x34>
    5e92:	690b      	ldr	r3, [r1, #16]
    5e94:	2b00      	cmp	r3, #0
    5e96:	d10d      	bne.n	5eb4 <_svfiprintf_r+0x34>
    5e98:	2140      	movs	r1, #64	; 0x40
    5e9a:	f7ff fe91 	bl	5bc0 <_malloc_r>
    5e9e:	6038      	str	r0, [r7, #0]
    5ea0:	6138      	str	r0, [r7, #16]
    5ea2:	2800      	cmp	r0, #0
    5ea4:	d104      	bne.n	5eb0 <_svfiprintf_r+0x30>
    5ea6:	230c      	movs	r3, #12
    5ea8:	9a02      	ldr	r2, [sp, #8]
    5eaa:	3801      	subs	r0, #1
    5eac:	6013      	str	r3, [r2, #0]
    5eae:	e0d8      	b.n	6062 <_svfiprintf_r+0x1e2>
    5eb0:	2340      	movs	r3, #64	; 0x40
    5eb2:	617b      	str	r3, [r7, #20]
    5eb4:	2300      	movs	r3, #0
    5eb6:	ad06      	add	r5, sp, #24
    5eb8:	616b      	str	r3, [r5, #20]
    5eba:	3320      	adds	r3, #32
    5ebc:	766b      	strb	r3, [r5, #25]
    5ebe:	3310      	adds	r3, #16
    5ec0:	76ab      	strb	r3, [r5, #26]
    5ec2:	0034      	movs	r4, r6
    5ec4:	7823      	ldrb	r3, [r4, #0]
    5ec6:	2b00      	cmp	r3, #0
    5ec8:	d103      	bne.n	5ed2 <_svfiprintf_r+0x52>
    5eca:	1ba3      	subs	r3, r4, r6
    5ecc:	9304      	str	r3, [sp, #16]
    5ece:	d012      	beq.n	5ef6 <_svfiprintf_r+0x76>
    5ed0:	e003      	b.n	5eda <_svfiprintf_r+0x5a>
    5ed2:	2b25      	cmp	r3, #37	; 0x25
    5ed4:	d0f9      	beq.n	5eca <_svfiprintf_r+0x4a>
    5ed6:	3401      	adds	r4, #1
    5ed8:	e7f4      	b.n	5ec4 <_svfiprintf_r+0x44>
    5eda:	1ba3      	subs	r3, r4, r6
    5edc:	0032      	movs	r2, r6
    5ede:	0039      	movs	r1, r7
    5ee0:	9802      	ldr	r0, [sp, #8]
    5ee2:	f7ff ff6b 	bl	5dbc <__ssputs_r>
    5ee6:	1c43      	adds	r3, r0, #1
    5ee8:	d100      	bne.n	5eec <_svfiprintf_r+0x6c>
    5eea:	e0b4      	b.n	6056 <_svfiprintf_r+0x1d6>
    5eec:	696a      	ldr	r2, [r5, #20]
    5eee:	9b04      	ldr	r3, [sp, #16]
    5ef0:	4694      	mov	ip, r2
    5ef2:	4463      	add	r3, ip
    5ef4:	616b      	str	r3, [r5, #20]
    5ef6:	7823      	ldrb	r3, [r4, #0]
    5ef8:	2b00      	cmp	r3, #0
    5efa:	d100      	bne.n	5efe <_svfiprintf_r+0x7e>
    5efc:	e0ab      	b.n	6056 <_svfiprintf_r+0x1d6>
    5efe:	2201      	movs	r2, #1
    5f00:	2300      	movs	r3, #0
    5f02:	4252      	negs	r2, r2
    5f04:	606a      	str	r2, [r5, #4]
    5f06:	a902      	add	r1, sp, #8
    5f08:	3254      	adds	r2, #84	; 0x54
    5f0a:	1852      	adds	r2, r2, r1
    5f0c:	3401      	adds	r4, #1
    5f0e:	602b      	str	r3, [r5, #0]
    5f10:	60eb      	str	r3, [r5, #12]
    5f12:	60ab      	str	r3, [r5, #8]
    5f14:	7013      	strb	r3, [r2, #0]
    5f16:	65ab      	str	r3, [r5, #88]	; 0x58
    5f18:	4e53      	ldr	r6, [pc, #332]	; (6068 <_svfiprintf_r+0x1e8>)
    5f1a:	7821      	ldrb	r1, [r4, #0]
    5f1c:	2205      	movs	r2, #5
    5f1e:	0030      	movs	r0, r6
    5f20:	f000 fefe 	bl	6d20 <memchr>
    5f24:	2800      	cmp	r0, #0
    5f26:	d007      	beq.n	5f38 <_svfiprintf_r+0xb8>
    5f28:	2301      	movs	r3, #1
    5f2a:	1b80      	subs	r0, r0, r6
    5f2c:	4083      	lsls	r3, r0
    5f2e:	682a      	ldr	r2, [r5, #0]
    5f30:	3401      	adds	r4, #1
    5f32:	4313      	orrs	r3, r2
    5f34:	602b      	str	r3, [r5, #0]
    5f36:	e7ef      	b.n	5f18 <_svfiprintf_r+0x98>
    5f38:	682b      	ldr	r3, [r5, #0]
    5f3a:	06da      	lsls	r2, r3, #27
    5f3c:	d504      	bpl.n	5f48 <_svfiprintf_r+0xc8>
    5f3e:	2253      	movs	r2, #83	; 0x53
    5f40:	2120      	movs	r1, #32
    5f42:	a802      	add	r0, sp, #8
    5f44:	1812      	adds	r2, r2, r0
    5f46:	7011      	strb	r1, [r2, #0]
    5f48:	071a      	lsls	r2, r3, #28
    5f4a:	d504      	bpl.n	5f56 <_svfiprintf_r+0xd6>
    5f4c:	2253      	movs	r2, #83	; 0x53
    5f4e:	212b      	movs	r1, #43	; 0x2b
    5f50:	a802      	add	r0, sp, #8
    5f52:	1812      	adds	r2, r2, r0
    5f54:	7011      	strb	r1, [r2, #0]
    5f56:	7822      	ldrb	r2, [r4, #0]
    5f58:	2a2a      	cmp	r2, #42	; 0x2a
    5f5a:	d003      	beq.n	5f64 <_svfiprintf_r+0xe4>
    5f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5f5e:	2000      	movs	r0, #0
    5f60:	210a      	movs	r1, #10
    5f62:	e00e      	b.n	5f82 <_svfiprintf_r+0x102>
    5f64:	9a05      	ldr	r2, [sp, #20]
    5f66:	1d11      	adds	r1, r2, #4
    5f68:	6812      	ldr	r2, [r2, #0]
    5f6a:	9105      	str	r1, [sp, #20]
    5f6c:	2a00      	cmp	r2, #0
    5f6e:	db01      	blt.n	5f74 <_svfiprintf_r+0xf4>
    5f70:	9209      	str	r2, [sp, #36]	; 0x24
    5f72:	e004      	b.n	5f7e <_svfiprintf_r+0xfe>
    5f74:	4252      	negs	r2, r2
    5f76:	60ea      	str	r2, [r5, #12]
    5f78:	2202      	movs	r2, #2
    5f7a:	4313      	orrs	r3, r2
    5f7c:	602b      	str	r3, [r5, #0]
    5f7e:	3401      	adds	r4, #1
    5f80:	e00b      	b.n	5f9a <_svfiprintf_r+0x11a>
    5f82:	7822      	ldrb	r2, [r4, #0]
    5f84:	3a30      	subs	r2, #48	; 0x30
    5f86:	2a09      	cmp	r2, #9
    5f88:	d804      	bhi.n	5f94 <_svfiprintf_r+0x114>
    5f8a:	434b      	muls	r3, r1
    5f8c:	3401      	adds	r4, #1
    5f8e:	189b      	adds	r3, r3, r2
    5f90:	2001      	movs	r0, #1
    5f92:	e7f6      	b.n	5f82 <_svfiprintf_r+0x102>
    5f94:	2800      	cmp	r0, #0
    5f96:	d000      	beq.n	5f9a <_svfiprintf_r+0x11a>
    5f98:	9309      	str	r3, [sp, #36]	; 0x24
    5f9a:	7823      	ldrb	r3, [r4, #0]
    5f9c:	2b2e      	cmp	r3, #46	; 0x2e
    5f9e:	d11e      	bne.n	5fde <_svfiprintf_r+0x15e>
    5fa0:	7863      	ldrb	r3, [r4, #1]
    5fa2:	2b2a      	cmp	r3, #42	; 0x2a
    5fa4:	d10a      	bne.n	5fbc <_svfiprintf_r+0x13c>
    5fa6:	9b05      	ldr	r3, [sp, #20]
    5fa8:	3402      	adds	r4, #2
    5faa:	1d1a      	adds	r2, r3, #4
    5fac:	681b      	ldr	r3, [r3, #0]
    5fae:	9205      	str	r2, [sp, #20]
    5fb0:	2b00      	cmp	r3, #0
    5fb2:	da01      	bge.n	5fb8 <_svfiprintf_r+0x138>
    5fb4:	2301      	movs	r3, #1
    5fb6:	425b      	negs	r3, r3
    5fb8:	9307      	str	r3, [sp, #28]
    5fba:	e010      	b.n	5fde <_svfiprintf_r+0x15e>
    5fbc:	2300      	movs	r3, #0
    5fbe:	200a      	movs	r0, #10
    5fc0:	001a      	movs	r2, r3
    5fc2:	3401      	adds	r4, #1
    5fc4:	606b      	str	r3, [r5, #4]
    5fc6:	7821      	ldrb	r1, [r4, #0]
    5fc8:	3930      	subs	r1, #48	; 0x30
    5fca:	2909      	cmp	r1, #9
    5fcc:	d804      	bhi.n	5fd8 <_svfiprintf_r+0x158>
    5fce:	4342      	muls	r2, r0
    5fd0:	3401      	adds	r4, #1
    5fd2:	1852      	adds	r2, r2, r1
    5fd4:	2301      	movs	r3, #1
    5fd6:	e7f6      	b.n	5fc6 <_svfiprintf_r+0x146>
    5fd8:	2b00      	cmp	r3, #0
    5fda:	d000      	beq.n	5fde <_svfiprintf_r+0x15e>
    5fdc:	9207      	str	r2, [sp, #28]
    5fde:	4e23      	ldr	r6, [pc, #140]	; (606c <_svfiprintf_r+0x1ec>)
    5fe0:	7821      	ldrb	r1, [r4, #0]
    5fe2:	2203      	movs	r2, #3
    5fe4:	0030      	movs	r0, r6
    5fe6:	f000 fe9b 	bl	6d20 <memchr>
    5fea:	2800      	cmp	r0, #0
    5fec:	d006      	beq.n	5ffc <_svfiprintf_r+0x17c>
    5fee:	2340      	movs	r3, #64	; 0x40
    5ff0:	1b80      	subs	r0, r0, r6
    5ff2:	4083      	lsls	r3, r0
    5ff4:	682a      	ldr	r2, [r5, #0]
    5ff6:	3401      	adds	r4, #1
    5ff8:	4313      	orrs	r3, r2
    5ffa:	602b      	str	r3, [r5, #0]
    5ffc:	7821      	ldrb	r1, [r4, #0]
    5ffe:	2206      	movs	r2, #6
    6000:	481b      	ldr	r0, [pc, #108]	; (6070 <_svfiprintf_r+0x1f0>)
    6002:	1c66      	adds	r6, r4, #1
    6004:	7629      	strb	r1, [r5, #24]
    6006:	f000 fe8b 	bl	6d20 <memchr>
    600a:	2800      	cmp	r0, #0
    600c:	d012      	beq.n	6034 <_svfiprintf_r+0x1b4>
    600e:	4b19      	ldr	r3, [pc, #100]	; (6074 <_svfiprintf_r+0x1f4>)
    6010:	2b00      	cmp	r3, #0
    6012:	d106      	bne.n	6022 <_svfiprintf_r+0x1a2>
    6014:	2207      	movs	r2, #7
    6016:	9b05      	ldr	r3, [sp, #20]
    6018:	3307      	adds	r3, #7
    601a:	4393      	bics	r3, r2
    601c:	3308      	adds	r3, #8
    601e:	9305      	str	r3, [sp, #20]
    6020:	e014      	b.n	604c <_svfiprintf_r+0x1cc>
    6022:	ab05      	add	r3, sp, #20
    6024:	9300      	str	r3, [sp, #0]
    6026:	003a      	movs	r2, r7
    6028:	4b13      	ldr	r3, [pc, #76]	; (6078 <_svfiprintf_r+0x1f8>)
    602a:	0029      	movs	r1, r5
    602c:	9802      	ldr	r0, [sp, #8]
    602e:	e000      	b.n	6032 <_svfiprintf_r+0x1b2>
    6030:	bf00      	nop
    6032:	e007      	b.n	6044 <_svfiprintf_r+0x1c4>
    6034:	ab05      	add	r3, sp, #20
    6036:	9300      	str	r3, [sp, #0]
    6038:	003a      	movs	r2, r7
    603a:	4b0f      	ldr	r3, [pc, #60]	; (6078 <_svfiprintf_r+0x1f8>)
    603c:	0029      	movs	r1, r5
    603e:	9802      	ldr	r0, [sp, #8]
    6040:	f000 fa64 	bl	650c <_printf_i>
    6044:	9003      	str	r0, [sp, #12]
    6046:	9b03      	ldr	r3, [sp, #12]
    6048:	3301      	adds	r3, #1
    604a:	d004      	beq.n	6056 <_svfiprintf_r+0x1d6>
    604c:	696b      	ldr	r3, [r5, #20]
    604e:	9a03      	ldr	r2, [sp, #12]
    6050:	189b      	adds	r3, r3, r2
    6052:	616b      	str	r3, [r5, #20]
    6054:	e735      	b.n	5ec2 <_svfiprintf_r+0x42>
    6056:	89bb      	ldrh	r3, [r7, #12]
    6058:	980b      	ldr	r0, [sp, #44]	; 0x2c
    605a:	065b      	lsls	r3, r3, #25
    605c:	d501      	bpl.n	6062 <_svfiprintf_r+0x1e2>
    605e:	2001      	movs	r0, #1
    6060:	4240      	negs	r0, r0
    6062:	b01f      	add	sp, #124	; 0x7c
    6064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6066:	46c0      	nop			; (mov r8, r8)
    6068:	0000727d 	.word	0x0000727d
    606c:	00007283 	.word	0x00007283
    6070:	00007287 	.word	0x00007287
    6074:	00000000 	.word	0x00000000
    6078:	00005dbd 	.word	0x00005dbd

0000607c <_sungetc_r>:
    607c:	b570      	push	{r4, r5, r6, lr}
    607e:	000e      	movs	r6, r1
    6080:	0014      	movs	r4, r2
    6082:	1c4b      	adds	r3, r1, #1
    6084:	d102      	bne.n	608c <_sungetc_r+0x10>
    6086:	2001      	movs	r0, #1
    6088:	4240      	negs	r0, r0
    608a:	e032      	b.n	60f2 <_sungetc_r+0x76>
    608c:	8993      	ldrh	r3, [r2, #12]
    608e:	2220      	movs	r2, #32
    6090:	4393      	bics	r3, r2
    6092:	6b62      	ldr	r2, [r4, #52]	; 0x34
    6094:	81a3      	strh	r3, [r4, #12]
    6096:	b2cd      	uxtb	r5, r1
    6098:	6863      	ldr	r3, [r4, #4]
    609a:	2a00      	cmp	r2, #0
    609c:	d00e      	beq.n	60bc <_sungetc_r+0x40>
    609e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    60a0:	4293      	cmp	r3, r2
    60a2:	da05      	bge.n	60b0 <_sungetc_r+0x34>
    60a4:	6823      	ldr	r3, [r4, #0]
    60a6:	3b01      	subs	r3, #1
    60a8:	6023      	str	r3, [r4, #0]
    60aa:	701e      	strb	r6, [r3, #0]
    60ac:	6863      	ldr	r3, [r4, #4]
    60ae:	e010      	b.n	60d2 <_sungetc_r+0x56>
    60b0:	0021      	movs	r1, r4
    60b2:	f000 fdf7 	bl	6ca4 <__submore>
    60b6:	2800      	cmp	r0, #0
    60b8:	d0f4      	beq.n	60a4 <_sungetc_r+0x28>
    60ba:	e7e4      	b.n	6086 <_sungetc_r+0xa>
    60bc:	6921      	ldr	r1, [r4, #16]
    60be:	6822      	ldr	r2, [r4, #0]
    60c0:	2900      	cmp	r1, #0
    60c2:	d008      	beq.n	60d6 <_sungetc_r+0x5a>
    60c4:	4291      	cmp	r1, r2
    60c6:	d206      	bcs.n	60d6 <_sungetc_r+0x5a>
    60c8:	1e51      	subs	r1, r2, #1
    60ca:	7808      	ldrb	r0, [r1, #0]
    60cc:	4285      	cmp	r5, r0
    60ce:	d102      	bne.n	60d6 <_sungetc_r+0x5a>
    60d0:	6021      	str	r1, [r4, #0]
    60d2:	3301      	adds	r3, #1
    60d4:	e00b      	b.n	60ee <_sungetc_r+0x72>
    60d6:	6423      	str	r3, [r4, #64]	; 0x40
    60d8:	0023      	movs	r3, r4
    60da:	3344      	adds	r3, #68	; 0x44
    60dc:	6363      	str	r3, [r4, #52]	; 0x34
    60de:	2303      	movs	r3, #3
    60e0:	63a3      	str	r3, [r4, #56]	; 0x38
    60e2:	0023      	movs	r3, r4
    60e4:	3346      	adds	r3, #70	; 0x46
    60e6:	63e2      	str	r2, [r4, #60]	; 0x3c
    60e8:	701e      	strb	r6, [r3, #0]
    60ea:	6023      	str	r3, [r4, #0]
    60ec:	2301      	movs	r3, #1
    60ee:	0028      	movs	r0, r5
    60f0:	6063      	str	r3, [r4, #4]
    60f2:	bd70      	pop	{r4, r5, r6, pc}

000060f4 <__ssrefill_r>:
    60f4:	b510      	push	{r4, lr}
    60f6:	000c      	movs	r4, r1
    60f8:	6b49      	ldr	r1, [r1, #52]	; 0x34
    60fa:	2900      	cmp	r1, #0
    60fc:	d00e      	beq.n	611c <__ssrefill_r+0x28>
    60fe:	0023      	movs	r3, r4
    6100:	3344      	adds	r3, #68	; 0x44
    6102:	4299      	cmp	r1, r3
    6104:	d001      	beq.n	610a <__ssrefill_r+0x16>
    6106:	f7ff fd15 	bl	5b34 <_free_r>
    610a:	2000      	movs	r0, #0
    610c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    610e:	6360      	str	r0, [r4, #52]	; 0x34
    6110:	6063      	str	r3, [r4, #4]
    6112:	4283      	cmp	r3, r0
    6114:	d002      	beq.n	611c <__ssrefill_r+0x28>
    6116:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6118:	6023      	str	r3, [r4, #0]
    611a:	e009      	b.n	6130 <__ssrefill_r+0x3c>
    611c:	6923      	ldr	r3, [r4, #16]
    611e:	2220      	movs	r2, #32
    6120:	6023      	str	r3, [r4, #0]
    6122:	2300      	movs	r3, #0
    6124:	2001      	movs	r0, #1
    6126:	6063      	str	r3, [r4, #4]
    6128:	89a3      	ldrh	r3, [r4, #12]
    612a:	4240      	negs	r0, r0
    612c:	4313      	orrs	r3, r2
    612e:	81a3      	strh	r3, [r4, #12]
    6130:	bd10      	pop	{r4, pc}
	...

00006134 <__ssvfiscanf_r>:
    6134:	b5f0      	push	{r4, r5, r6, r7, lr}
    6136:	4cb8      	ldr	r4, [pc, #736]	; (6418 <__ssvfiscanf_r+0x2e4>)
    6138:	000d      	movs	r5, r1
    613a:	44a5      	add	sp, r4
    613c:	9303      	str	r3, [sp, #12]
    613e:	2300      	movs	r3, #0
    6140:	9000      	str	r0, [sp, #0]
    6142:	9348      	str	r3, [sp, #288]	; 0x120
    6144:	9349      	str	r3, [sp, #292]	; 0x124
    6146:	2086      	movs	r0, #134	; 0x86
    6148:	ab05      	add	r3, sp, #20
    614a:	934a      	str	r3, [sp, #296]	; 0x128
    614c:	23be      	movs	r3, #190	; 0xbe
    614e:	0040      	lsls	r0, r0, #1
    6150:	9201      	str	r2, [sp, #4]
    6152:	a902      	add	r1, sp, #8
    6154:	4ab1      	ldr	r2, [pc, #708]	; (641c <__ssvfiscanf_r+0x2e8>)
    6156:	005b      	lsls	r3, r3, #1
    6158:	1809      	adds	r1, r1, r0
    615a:	50ca      	str	r2, [r1, r3]
    615c:	3304      	adds	r3, #4
    615e:	001e      	movs	r6, r3
    6160:	4aaf      	ldr	r2, [pc, #700]	; (6420 <__ssvfiscanf_r+0x2ec>)
    6162:	a902      	add	r1, sp, #8
    6164:	1809      	adds	r1, r1, r0
    6166:	50ca      	str	r2, [r1, r3]
    6168:	9b01      	ldr	r3, [sp, #4]
    616a:	781a      	ldrb	r2, [r3, #0]
    616c:	2a00      	cmp	r2, #0
    616e:	d100      	bne.n	6172 <__ssvfiscanf_r+0x3e>
    6170:	e149      	b.n	6406 <__ssvfiscanf_r+0x2d2>
    6172:	2108      	movs	r1, #8
    6174:	4cab      	ldr	r4, [pc, #684]	; (6424 <__ssvfiscanf_r+0x2f0>)
    6176:	6823      	ldr	r3, [r4, #0]
    6178:	189b      	adds	r3, r3, r2
    617a:	785b      	ldrb	r3, [r3, #1]
    617c:	400b      	ands	r3, r1
    617e:	d023      	beq.n	61c8 <__ssvfiscanf_r+0x94>
    6180:	686b      	ldr	r3, [r5, #4]
    6182:	2b00      	cmp	r3, #0
    6184:	dd11      	ble.n	61aa <__ssvfiscanf_r+0x76>
    6186:	682b      	ldr	r3, [r5, #0]
    6188:	6821      	ldr	r1, [r4, #0]
    618a:	781a      	ldrb	r2, [r3, #0]
    618c:	188a      	adds	r2, r1, r2
    618e:	2108      	movs	r1, #8
    6190:	7852      	ldrb	r2, [r2, #1]
    6192:	420a      	tst	r2, r1
    6194:	d014      	beq.n	61c0 <__ssvfiscanf_r+0x8c>
    6196:	9a49      	ldr	r2, [sp, #292]	; 0x124
    6198:	3301      	adds	r3, #1
    619a:	9202      	str	r2, [sp, #8]
    619c:	3201      	adds	r2, #1
    619e:	9249      	str	r2, [sp, #292]	; 0x124
    61a0:	686a      	ldr	r2, [r5, #4]
    61a2:	602b      	str	r3, [r5, #0]
    61a4:	3a01      	subs	r2, #1
    61a6:	606a      	str	r2, [r5, #4]
    61a8:	e7ea      	b.n	6180 <__ssvfiscanf_r+0x4c>
    61aa:	2286      	movs	r2, #134	; 0x86
    61ac:	ab02      	add	r3, sp, #8
    61ae:	0052      	lsls	r2, r2, #1
    61b0:	189b      	adds	r3, r3, r2
    61b2:	599b      	ldr	r3, [r3, r6]
    61b4:	0029      	movs	r1, r5
    61b6:	9800      	ldr	r0, [sp, #0]
    61b8:	9302      	str	r3, [sp, #8]
    61ba:	4798      	blx	r3
    61bc:	2800      	cmp	r0, #0
    61be:	d0e2      	beq.n	6186 <__ssvfiscanf_r+0x52>
    61c0:	9f01      	ldr	r7, [sp, #4]
    61c2:	3701      	adds	r7, #1
    61c4:	9701      	str	r7, [sp, #4]
    61c6:	e7cf      	b.n	6168 <__ssvfiscanf_r+0x34>
    61c8:	9901      	ldr	r1, [sp, #4]
    61ca:	0014      	movs	r4, r2
    61cc:	1c4f      	adds	r7, r1, #1
    61ce:	2a25      	cmp	r2, #37	; 0x25
    61d0:	d155      	bne.n	627e <__ssvfiscanf_r+0x14a>
    61d2:	9347      	str	r3, [sp, #284]	; 0x11c
    61d4:	9345      	str	r3, [sp, #276]	; 0x114
    61d6:	784b      	ldrb	r3, [r1, #1]
    61d8:	2b2a      	cmp	r3, #42	; 0x2a
    61da:	d102      	bne.n	61e2 <__ssvfiscanf_r+0xae>
    61dc:	3b1a      	subs	r3, #26
    61de:	9345      	str	r3, [sp, #276]	; 0x114
    61e0:	3701      	adds	r7, #1
    61e2:	003c      	movs	r4, r7
    61e4:	220a      	movs	r2, #10
    61e6:	7821      	ldrb	r1, [r4, #0]
    61e8:	000b      	movs	r3, r1
    61ea:	3b30      	subs	r3, #48	; 0x30
    61ec:	2b09      	cmp	r3, #9
    61ee:	d807      	bhi.n	6200 <__ssvfiscanf_r+0xcc>
    61f0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    61f2:	3401      	adds	r4, #1
    61f4:	9301      	str	r3, [sp, #4]
    61f6:	4353      	muls	r3, r2
    61f8:	3b30      	subs	r3, #48	; 0x30
    61fa:	1859      	adds	r1, r3, r1
    61fc:	9147      	str	r1, [sp, #284]	; 0x11c
    61fe:	e7f2      	b.n	61e6 <__ssvfiscanf_r+0xb2>
    6200:	4f89      	ldr	r7, [pc, #548]	; (6428 <__ssvfiscanf_r+0x2f4>)
    6202:	2203      	movs	r2, #3
    6204:	0038      	movs	r0, r7
    6206:	f000 fd8b 	bl	6d20 <memchr>
    620a:	2800      	cmp	r0, #0
    620c:	d007      	beq.n	621e <__ssvfiscanf_r+0xea>
    620e:	2301      	movs	r3, #1
    6210:	1bc0      	subs	r0, r0, r7
    6212:	4083      	lsls	r3, r0
    6214:	9a45      	ldr	r2, [sp, #276]	; 0x114
    6216:	3401      	adds	r4, #1
    6218:	4313      	orrs	r3, r2
    621a:	9201      	str	r2, [sp, #4]
    621c:	9345      	str	r3, [sp, #276]	; 0x114
    621e:	1c67      	adds	r7, r4, #1
    6220:	7824      	ldrb	r4, [r4, #0]
    6222:	2c67      	cmp	r4, #103	; 0x67
    6224:	d818      	bhi.n	6258 <__ssvfiscanf_r+0x124>
    6226:	2c65      	cmp	r4, #101	; 0x65
    6228:	d300      	bcc.n	622c <__ssvfiscanf_r+0xf8>
    622a:	e08b      	b.n	6344 <__ssvfiscanf_r+0x210>
    622c:	2c47      	cmp	r4, #71	; 0x47
    622e:	d808      	bhi.n	6242 <__ssvfiscanf_r+0x10e>
    6230:	2c45      	cmp	r4, #69	; 0x45
    6232:	d300      	bcc.n	6236 <__ssvfiscanf_r+0x102>
    6234:	e086      	b.n	6344 <__ssvfiscanf_r+0x210>
    6236:	2c00      	cmp	r4, #0
    6238:	d100      	bne.n	623c <__ssvfiscanf_r+0x108>
    623a:	e0e6      	b.n	640a <__ssvfiscanf_r+0x2d6>
    623c:	2c25      	cmp	r4, #37	; 0x25
    623e:	d01e      	beq.n	627e <__ssvfiscanf_r+0x14a>
    6240:	e082      	b.n	6348 <__ssvfiscanf_r+0x214>
    6242:	2c5b      	cmp	r4, #91	; 0x5b
    6244:	d056      	beq.n	62f4 <__ssvfiscanf_r+0x1c0>
    6246:	d802      	bhi.n	624e <__ssvfiscanf_r+0x11a>
    6248:	2c58      	cmp	r4, #88	; 0x58
    624a:	d041      	beq.n	62d0 <__ssvfiscanf_r+0x19c>
    624c:	e07c      	b.n	6348 <__ssvfiscanf_r+0x214>
    624e:	2c63      	cmp	r4, #99	; 0x63
    6250:	d05e      	beq.n	6310 <__ssvfiscanf_r+0x1dc>
    6252:	2c64      	cmp	r4, #100	; 0x64
    6254:	d045      	beq.n	62e2 <__ssvfiscanf_r+0x1ae>
    6256:	e077      	b.n	6348 <__ssvfiscanf_r+0x214>
    6258:	2c70      	cmp	r4, #112	; 0x70
    625a:	d033      	beq.n	62c4 <__ssvfiscanf_r+0x190>
    625c:	d807      	bhi.n	626e <__ssvfiscanf_r+0x13a>
    625e:	2c6e      	cmp	r4, #110	; 0x6e
    6260:	d05e      	beq.n	6320 <__ssvfiscanf_r+0x1ec>
    6262:	d840      	bhi.n	62e6 <__ssvfiscanf_r+0x1b2>
    6264:	2c69      	cmp	r4, #105	; 0x69
    6266:	d16f      	bne.n	6348 <__ssvfiscanf_r+0x214>
    6268:	2300      	movs	r3, #0
    626a:	9346      	str	r3, [sp, #280]	; 0x118
    626c:	e040      	b.n	62f0 <__ssvfiscanf_r+0x1bc>
    626e:	2c75      	cmp	r4, #117	; 0x75
    6270:	d037      	beq.n	62e2 <__ssvfiscanf_r+0x1ae>
    6272:	2c78      	cmp	r4, #120	; 0x78
    6274:	d02c      	beq.n	62d0 <__ssvfiscanf_r+0x19c>
    6276:	2302      	movs	r3, #2
    6278:	2c73      	cmp	r4, #115	; 0x73
    627a:	d047      	beq.n	630c <__ssvfiscanf_r+0x1d8>
    627c:	e064      	b.n	6348 <__ssvfiscanf_r+0x214>
    627e:	686b      	ldr	r3, [r5, #4]
    6280:	2b00      	cmp	r3, #0
    6282:	dd0e      	ble.n	62a2 <__ssvfiscanf_r+0x16e>
    6284:	682b      	ldr	r3, [r5, #0]
    6286:	781a      	ldrb	r2, [r3, #0]
    6288:	4294      	cmp	r4, r2
    628a:	d000      	beq.n	628e <__ssvfiscanf_r+0x15a>
    628c:	e0bb      	b.n	6406 <__ssvfiscanf_r+0x2d2>
    628e:	3301      	adds	r3, #1
    6290:	686a      	ldr	r2, [r5, #4]
    6292:	602b      	str	r3, [r5, #0]
    6294:	9b49      	ldr	r3, [sp, #292]	; 0x124
    6296:	3a01      	subs	r2, #1
    6298:	9301      	str	r3, [sp, #4]
    629a:	3301      	adds	r3, #1
    629c:	606a      	str	r2, [r5, #4]
    629e:	9349      	str	r3, [sp, #292]	; 0x124
    62a0:	e790      	b.n	61c4 <__ssvfiscanf_r+0x90>
    62a2:	2286      	movs	r2, #134	; 0x86
    62a4:	ab02      	add	r3, sp, #8
    62a6:	0052      	lsls	r2, r2, #1
    62a8:	189b      	adds	r3, r3, r2
    62aa:	599b      	ldr	r3, [r3, r6]
    62ac:	0029      	movs	r1, r5
    62ae:	9800      	ldr	r0, [sp, #0]
    62b0:	9301      	str	r3, [sp, #4]
    62b2:	4798      	blx	r3
    62b4:	2800      	cmp	r0, #0
    62b6:	d0e5      	beq.n	6284 <__ssvfiscanf_r+0x150>
    62b8:	9848      	ldr	r0, [sp, #288]	; 0x120
    62ba:	2800      	cmp	r0, #0
    62bc:	d000      	beq.n	62c0 <__ssvfiscanf_r+0x18c>
    62be:	e09e      	b.n	63fe <__ssvfiscanf_r+0x2ca>
    62c0:	3801      	subs	r0, #1
    62c2:	e0a4      	b.n	640e <__ssvfiscanf_r+0x2da>
    62c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
    62c6:	9301      	str	r3, [sp, #4]
    62c8:	2320      	movs	r3, #32
    62ca:	9a01      	ldr	r2, [sp, #4]
    62cc:	4313      	orrs	r3, r2
    62ce:	9345      	str	r3, [sp, #276]	; 0x114
    62d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
    62d2:	9301      	str	r3, [sp, #4]
    62d4:	2380      	movs	r3, #128	; 0x80
    62d6:	9a01      	ldr	r2, [sp, #4]
    62d8:	009b      	lsls	r3, r3, #2
    62da:	4313      	orrs	r3, r2
    62dc:	9345      	str	r3, [sp, #276]	; 0x114
    62de:	2310      	movs	r3, #16
    62e0:	e002      	b.n	62e8 <__ssvfiscanf_r+0x1b4>
    62e2:	230a      	movs	r3, #10
    62e4:	e000      	b.n	62e8 <__ssvfiscanf_r+0x1b4>
    62e6:	2308      	movs	r3, #8
    62e8:	9346      	str	r3, [sp, #280]	; 0x118
    62ea:	2304      	movs	r3, #4
    62ec:	2c6e      	cmp	r4, #110	; 0x6e
    62ee:	dc0d      	bgt.n	630c <__ssvfiscanf_r+0x1d8>
    62f0:	2303      	movs	r3, #3
    62f2:	e00b      	b.n	630c <__ssvfiscanf_r+0x1d8>
    62f4:	0039      	movs	r1, r7
    62f6:	a805      	add	r0, sp, #20
    62f8:	f000 fb8c 	bl	6a14 <__sccl>
    62fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
    62fe:	0007      	movs	r7, r0
    6300:	9301      	str	r3, [sp, #4]
    6302:	2340      	movs	r3, #64	; 0x40
    6304:	9a01      	ldr	r2, [sp, #4]
    6306:	4313      	orrs	r3, r2
    6308:	9345      	str	r3, [sp, #276]	; 0x114
    630a:	2301      	movs	r3, #1
    630c:	934b      	str	r3, [sp, #300]	; 0x12c
    630e:	e01f      	b.n	6350 <__ssvfiscanf_r+0x21c>
    6310:	9b45      	ldr	r3, [sp, #276]	; 0x114
    6312:	9301      	str	r3, [sp, #4]
    6314:	2340      	movs	r3, #64	; 0x40
    6316:	9a01      	ldr	r2, [sp, #4]
    6318:	4313      	orrs	r3, r2
    631a:	9345      	str	r3, [sp, #276]	; 0x114
    631c:	2300      	movs	r3, #0
    631e:	e7f5      	b.n	630c <__ssvfiscanf_r+0x1d8>
    6320:	9945      	ldr	r1, [sp, #276]	; 0x114
    6322:	06cb      	lsls	r3, r1, #27
    6324:	d500      	bpl.n	6328 <__ssvfiscanf_r+0x1f4>
    6326:	e74d      	b.n	61c4 <__ssvfiscanf_r+0x90>
    6328:	9b03      	ldr	r3, [sp, #12]
    632a:	9a49      	ldr	r2, [sp, #292]	; 0x124
    632c:	07c8      	lsls	r0, r1, #31
    632e:	d504      	bpl.n	633a <__ssvfiscanf_r+0x206>
    6330:	1d19      	adds	r1, r3, #4
    6332:	9103      	str	r1, [sp, #12]
    6334:	681b      	ldr	r3, [r3, #0]
    6336:	801a      	strh	r2, [r3, #0]
    6338:	e744      	b.n	61c4 <__ssvfiscanf_r+0x90>
    633a:	1d19      	adds	r1, r3, #4
    633c:	9103      	str	r1, [sp, #12]
    633e:	681b      	ldr	r3, [r3, #0]
    6340:	601a      	str	r2, [r3, #0]
    6342:	e73f      	b.n	61c4 <__ssvfiscanf_r+0x90>
    6344:	2305      	movs	r3, #5
    6346:	e7e1      	b.n	630c <__ssvfiscanf_r+0x1d8>
    6348:	2303      	movs	r3, #3
    634a:	934b      	str	r3, [sp, #300]	; 0x12c
    634c:	3307      	adds	r3, #7
    634e:	9346      	str	r3, [sp, #280]	; 0x118
    6350:	686b      	ldr	r3, [r5, #4]
    6352:	2b00      	cmp	r3, #0
    6354:	dd04      	ble.n	6360 <__ssvfiscanf_r+0x22c>
    6356:	9b45      	ldr	r3, [sp, #276]	; 0x114
    6358:	9301      	str	r3, [sp, #4]
    635a:	065b      	lsls	r3, r3, #25
    635c:	d517      	bpl.n	638e <__ssvfiscanf_r+0x25a>
    635e:	e01f      	b.n	63a0 <__ssvfiscanf_r+0x26c>
    6360:	2286      	movs	r2, #134	; 0x86
    6362:	ab02      	add	r3, sp, #8
    6364:	0052      	lsls	r2, r2, #1
    6366:	189b      	adds	r3, r3, r2
    6368:	599b      	ldr	r3, [r3, r6]
    636a:	0029      	movs	r1, r5
    636c:	9800      	ldr	r0, [sp, #0]
    636e:	9301      	str	r3, [sp, #4]
    6370:	4798      	blx	r3
    6372:	2800      	cmp	r0, #0
    6374:	d0ef      	beq.n	6356 <__ssvfiscanf_r+0x222>
    6376:	e79f      	b.n	62b8 <__ssvfiscanf_r+0x184>
    6378:	9a49      	ldr	r2, [sp, #292]	; 0x124
    637a:	9201      	str	r2, [sp, #4]
    637c:	3201      	adds	r2, #1
    637e:	9249      	str	r2, [sp, #292]	; 0x124
    6380:	686a      	ldr	r2, [r5, #4]
    6382:	3a01      	subs	r2, #1
    6384:	606a      	str	r2, [r5, #4]
    6386:	2a00      	cmp	r2, #0
    6388:	dd14      	ble.n	63b4 <__ssvfiscanf_r+0x280>
    638a:	3301      	adds	r3, #1
    638c:	602b      	str	r3, [r5, #0]
    638e:	682b      	ldr	r3, [r5, #0]
    6390:	4924      	ldr	r1, [pc, #144]	; (6424 <__ssvfiscanf_r+0x2f0>)
    6392:	781a      	ldrb	r2, [r3, #0]
    6394:	6809      	ldr	r1, [r1, #0]
    6396:	188a      	adds	r2, r1, r2
    6398:	2108      	movs	r1, #8
    639a:	7852      	ldrb	r2, [r2, #1]
    639c:	420a      	tst	r2, r1
    639e:	d1eb      	bne.n	6378 <__ssvfiscanf_r+0x244>
    63a0:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    63a2:	2b02      	cmp	r3, #2
    63a4:	dc12      	bgt.n	63cc <__ssvfiscanf_r+0x298>
    63a6:	ab03      	add	r3, sp, #12
    63a8:	002a      	movs	r2, r5
    63aa:	a945      	add	r1, sp, #276	; 0x114
    63ac:	9800      	ldr	r0, [sp, #0]
    63ae:	f000 f9cf 	bl	6750 <_scanf_chars>
    63b2:	e01e      	b.n	63f2 <__ssvfiscanf_r+0x2be>
    63b4:	2286      	movs	r2, #134	; 0x86
    63b6:	ab02      	add	r3, sp, #8
    63b8:	0052      	lsls	r2, r2, #1
    63ba:	189b      	adds	r3, r3, r2
    63bc:	599b      	ldr	r3, [r3, r6]
    63be:	0029      	movs	r1, r5
    63c0:	9800      	ldr	r0, [sp, #0]
    63c2:	9301      	str	r3, [sp, #4]
    63c4:	4798      	blx	r3
    63c6:	2800      	cmp	r0, #0
    63c8:	d0e1      	beq.n	638e <__ssvfiscanf_r+0x25a>
    63ca:	e775      	b.n	62b8 <__ssvfiscanf_r+0x184>
    63cc:	2b04      	cmp	r3, #4
    63ce:	dc06      	bgt.n	63de <__ssvfiscanf_r+0x2aa>
    63d0:	ab03      	add	r3, sp, #12
    63d2:	002a      	movs	r2, r5
    63d4:	a945      	add	r1, sp, #276	; 0x114
    63d6:	9800      	ldr	r0, [sp, #0]
    63d8:	f000 fa1c 	bl	6814 <_scanf_i>
    63dc:	e009      	b.n	63f2 <__ssvfiscanf_r+0x2be>
    63de:	4b13      	ldr	r3, [pc, #76]	; (642c <__ssvfiscanf_r+0x2f8>)
    63e0:	2b00      	cmp	r3, #0
    63e2:	d100      	bne.n	63e6 <__ssvfiscanf_r+0x2b2>
    63e4:	e6ee      	b.n	61c4 <__ssvfiscanf_r+0x90>
    63e6:	ab03      	add	r3, sp, #12
    63e8:	002a      	movs	r2, r5
    63ea:	a945      	add	r1, sp, #276	; 0x114
    63ec:	9800      	ldr	r0, [sp, #0]
    63ee:	e000      	b.n	63f2 <__ssvfiscanf_r+0x2be>
    63f0:	bf00      	nop
    63f2:	2801      	cmp	r0, #1
    63f4:	d007      	beq.n	6406 <__ssvfiscanf_r+0x2d2>
    63f6:	2802      	cmp	r0, #2
    63f8:	d000      	beq.n	63fc <__ssvfiscanf_r+0x2c8>
    63fa:	e6e3      	b.n	61c4 <__ssvfiscanf_r+0x90>
    63fc:	e75c      	b.n	62b8 <__ssvfiscanf_r+0x184>
    63fe:	89ab      	ldrh	r3, [r5, #12]
    6400:	065b      	lsls	r3, r3, #25
    6402:	d504      	bpl.n	640e <__ssvfiscanf_r+0x2da>
    6404:	e001      	b.n	640a <__ssvfiscanf_r+0x2d6>
    6406:	9848      	ldr	r0, [sp, #288]	; 0x120
    6408:	e001      	b.n	640e <__ssvfiscanf_r+0x2da>
    640a:	2001      	movs	r0, #1
    640c:	4240      	negs	r0, r0
    640e:	23a7      	movs	r3, #167	; 0xa7
    6410:	009b      	lsls	r3, r3, #2
    6412:	449d      	add	sp, r3
    6414:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6416:	46c0      	nop			; (mov r8, r8)
    6418:	fffffd64 	.word	0xfffffd64
    641c:	0000607d 	.word	0x0000607d
    6420:	000060f5 	.word	0x000060f5
    6424:	200003d0 	.word	0x200003d0
    6428:	00007283 	.word	0x00007283
    642c:	00000000 	.word	0x00000000

00006430 <_printf_common>:
    6430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6432:	0017      	movs	r7, r2
    6434:	9301      	str	r3, [sp, #4]
    6436:	688a      	ldr	r2, [r1, #8]
    6438:	690b      	ldr	r3, [r1, #16]
    643a:	9000      	str	r0, [sp, #0]
    643c:	000c      	movs	r4, r1
    643e:	4293      	cmp	r3, r2
    6440:	da00      	bge.n	6444 <_printf_common+0x14>
    6442:	0013      	movs	r3, r2
    6444:	0022      	movs	r2, r4
    6446:	603b      	str	r3, [r7, #0]
    6448:	3243      	adds	r2, #67	; 0x43
    644a:	7812      	ldrb	r2, [r2, #0]
    644c:	2a00      	cmp	r2, #0
    644e:	d001      	beq.n	6454 <_printf_common+0x24>
    6450:	3301      	adds	r3, #1
    6452:	603b      	str	r3, [r7, #0]
    6454:	6823      	ldr	r3, [r4, #0]
    6456:	069b      	lsls	r3, r3, #26
    6458:	d502      	bpl.n	6460 <_printf_common+0x30>
    645a:	683b      	ldr	r3, [r7, #0]
    645c:	3302      	adds	r3, #2
    645e:	603b      	str	r3, [r7, #0]
    6460:	2506      	movs	r5, #6
    6462:	6823      	ldr	r3, [r4, #0]
    6464:	401d      	ands	r5, r3
    6466:	d01e      	beq.n	64a6 <_printf_common+0x76>
    6468:	0023      	movs	r3, r4
    646a:	3343      	adds	r3, #67	; 0x43
    646c:	781b      	ldrb	r3, [r3, #0]
    646e:	1e5a      	subs	r2, r3, #1
    6470:	4193      	sbcs	r3, r2
    6472:	6822      	ldr	r2, [r4, #0]
    6474:	0692      	lsls	r2, r2, #26
    6476:	d51c      	bpl.n	64b2 <_printf_common+0x82>
    6478:	2030      	movs	r0, #48	; 0x30
    647a:	18e1      	adds	r1, r4, r3
    647c:	3143      	adds	r1, #67	; 0x43
    647e:	7008      	strb	r0, [r1, #0]
    6480:	0021      	movs	r1, r4
    6482:	1c5a      	adds	r2, r3, #1
    6484:	3145      	adds	r1, #69	; 0x45
    6486:	7809      	ldrb	r1, [r1, #0]
    6488:	18a2      	adds	r2, r4, r2
    648a:	3243      	adds	r2, #67	; 0x43
    648c:	3302      	adds	r3, #2
    648e:	7011      	strb	r1, [r2, #0]
    6490:	e00f      	b.n	64b2 <_printf_common+0x82>
    6492:	0022      	movs	r2, r4
    6494:	2301      	movs	r3, #1
    6496:	3219      	adds	r2, #25
    6498:	9901      	ldr	r1, [sp, #4]
    649a:	9800      	ldr	r0, [sp, #0]
    649c:	9e08      	ldr	r6, [sp, #32]
    649e:	47b0      	blx	r6
    64a0:	1c43      	adds	r3, r0, #1
    64a2:	d00e      	beq.n	64c2 <_printf_common+0x92>
    64a4:	3501      	adds	r5, #1
    64a6:	68e3      	ldr	r3, [r4, #12]
    64a8:	683a      	ldr	r2, [r7, #0]
    64aa:	1a9b      	subs	r3, r3, r2
    64ac:	429d      	cmp	r5, r3
    64ae:	dbf0      	blt.n	6492 <_printf_common+0x62>
    64b0:	e7da      	b.n	6468 <_printf_common+0x38>
    64b2:	0022      	movs	r2, r4
    64b4:	9901      	ldr	r1, [sp, #4]
    64b6:	3243      	adds	r2, #67	; 0x43
    64b8:	9800      	ldr	r0, [sp, #0]
    64ba:	9d08      	ldr	r5, [sp, #32]
    64bc:	47a8      	blx	r5
    64be:	1c43      	adds	r3, r0, #1
    64c0:	d102      	bne.n	64c8 <_printf_common+0x98>
    64c2:	2001      	movs	r0, #1
    64c4:	4240      	negs	r0, r0
    64c6:	e020      	b.n	650a <_printf_common+0xda>
    64c8:	2306      	movs	r3, #6
    64ca:	6820      	ldr	r0, [r4, #0]
    64cc:	68e1      	ldr	r1, [r4, #12]
    64ce:	683a      	ldr	r2, [r7, #0]
    64d0:	4003      	ands	r3, r0
    64d2:	2500      	movs	r5, #0
    64d4:	2b04      	cmp	r3, #4
    64d6:	d103      	bne.n	64e0 <_printf_common+0xb0>
    64d8:	1a8d      	subs	r5, r1, r2
    64da:	43eb      	mvns	r3, r5
    64dc:	17db      	asrs	r3, r3, #31
    64de:	401d      	ands	r5, r3
    64e0:	68a3      	ldr	r3, [r4, #8]
    64e2:	6922      	ldr	r2, [r4, #16]
    64e4:	4293      	cmp	r3, r2
    64e6:	dd01      	ble.n	64ec <_printf_common+0xbc>
    64e8:	1a9b      	subs	r3, r3, r2
    64ea:	18ed      	adds	r5, r5, r3
    64ec:	2700      	movs	r7, #0
    64ee:	42bd      	cmp	r5, r7
    64f0:	d00a      	beq.n	6508 <_printf_common+0xd8>
    64f2:	0022      	movs	r2, r4
    64f4:	2301      	movs	r3, #1
    64f6:	321a      	adds	r2, #26
    64f8:	9901      	ldr	r1, [sp, #4]
    64fa:	9800      	ldr	r0, [sp, #0]
    64fc:	9e08      	ldr	r6, [sp, #32]
    64fe:	47b0      	blx	r6
    6500:	1c43      	adds	r3, r0, #1
    6502:	d0de      	beq.n	64c2 <_printf_common+0x92>
    6504:	3701      	adds	r7, #1
    6506:	e7f2      	b.n	64ee <_printf_common+0xbe>
    6508:	2000      	movs	r0, #0
    650a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000650c <_printf_i>:
    650c:	b5f0      	push	{r4, r5, r6, r7, lr}
    650e:	b08b      	sub	sp, #44	; 0x2c
    6510:	9206      	str	r2, [sp, #24]
    6512:	000a      	movs	r2, r1
    6514:	3243      	adds	r2, #67	; 0x43
    6516:	9307      	str	r3, [sp, #28]
    6518:	9005      	str	r0, [sp, #20]
    651a:	9204      	str	r2, [sp, #16]
    651c:	7e0a      	ldrb	r2, [r1, #24]
    651e:	000c      	movs	r4, r1
    6520:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6522:	2a6e      	cmp	r2, #110	; 0x6e
    6524:	d100      	bne.n	6528 <_printf_i+0x1c>
    6526:	e0ab      	b.n	6680 <_printf_i+0x174>
    6528:	d811      	bhi.n	654e <_printf_i+0x42>
    652a:	2a63      	cmp	r2, #99	; 0x63
    652c:	d022      	beq.n	6574 <_printf_i+0x68>
    652e:	d809      	bhi.n	6544 <_printf_i+0x38>
    6530:	2a00      	cmp	r2, #0
    6532:	d100      	bne.n	6536 <_printf_i+0x2a>
    6534:	e0b5      	b.n	66a2 <_printf_i+0x196>
    6536:	2a58      	cmp	r2, #88	; 0x58
    6538:	d000      	beq.n	653c <_printf_i+0x30>
    653a:	e0c5      	b.n	66c8 <_printf_i+0x1bc>
    653c:	3145      	adds	r1, #69	; 0x45
    653e:	700a      	strb	r2, [r1, #0]
    6540:	4a81      	ldr	r2, [pc, #516]	; (6748 <_printf_i+0x23c>)
    6542:	e04f      	b.n	65e4 <_printf_i+0xd8>
    6544:	2a64      	cmp	r2, #100	; 0x64
    6546:	d01d      	beq.n	6584 <_printf_i+0x78>
    6548:	2a69      	cmp	r2, #105	; 0x69
    654a:	d01b      	beq.n	6584 <_printf_i+0x78>
    654c:	e0bc      	b.n	66c8 <_printf_i+0x1bc>
    654e:	2a73      	cmp	r2, #115	; 0x73
    6550:	d100      	bne.n	6554 <_printf_i+0x48>
    6552:	e0aa      	b.n	66aa <_printf_i+0x19e>
    6554:	d809      	bhi.n	656a <_printf_i+0x5e>
    6556:	2a6f      	cmp	r2, #111	; 0x6f
    6558:	d029      	beq.n	65ae <_printf_i+0xa2>
    655a:	2a70      	cmp	r2, #112	; 0x70
    655c:	d000      	beq.n	6560 <_printf_i+0x54>
    655e:	e0b3      	b.n	66c8 <_printf_i+0x1bc>
    6560:	2220      	movs	r2, #32
    6562:	6809      	ldr	r1, [r1, #0]
    6564:	430a      	orrs	r2, r1
    6566:	6022      	str	r2, [r4, #0]
    6568:	e037      	b.n	65da <_printf_i+0xce>
    656a:	2a75      	cmp	r2, #117	; 0x75
    656c:	d01f      	beq.n	65ae <_printf_i+0xa2>
    656e:	2a78      	cmp	r2, #120	; 0x78
    6570:	d033      	beq.n	65da <_printf_i+0xce>
    6572:	e0a9      	b.n	66c8 <_printf_i+0x1bc>
    6574:	000e      	movs	r6, r1
    6576:	681a      	ldr	r2, [r3, #0]
    6578:	3642      	adds	r6, #66	; 0x42
    657a:	1d11      	adds	r1, r2, #4
    657c:	6019      	str	r1, [r3, #0]
    657e:	6813      	ldr	r3, [r2, #0]
    6580:	7033      	strb	r3, [r6, #0]
    6582:	e0a4      	b.n	66ce <_printf_i+0x1c2>
    6584:	6821      	ldr	r1, [r4, #0]
    6586:	681a      	ldr	r2, [r3, #0]
    6588:	0608      	lsls	r0, r1, #24
    658a:	d406      	bmi.n	659a <_printf_i+0x8e>
    658c:	0649      	lsls	r1, r1, #25
    658e:	d504      	bpl.n	659a <_printf_i+0x8e>
    6590:	1d11      	adds	r1, r2, #4
    6592:	6019      	str	r1, [r3, #0]
    6594:	2300      	movs	r3, #0
    6596:	5ed5      	ldrsh	r5, [r2, r3]
    6598:	e002      	b.n	65a0 <_printf_i+0x94>
    659a:	1d11      	adds	r1, r2, #4
    659c:	6019      	str	r1, [r3, #0]
    659e:	6815      	ldr	r5, [r2, #0]
    65a0:	2d00      	cmp	r5, #0
    65a2:	da3b      	bge.n	661c <_printf_i+0x110>
    65a4:	232d      	movs	r3, #45	; 0x2d
    65a6:	9a04      	ldr	r2, [sp, #16]
    65a8:	426d      	negs	r5, r5
    65aa:	7013      	strb	r3, [r2, #0]
    65ac:	e036      	b.n	661c <_printf_i+0x110>
    65ae:	6821      	ldr	r1, [r4, #0]
    65b0:	681a      	ldr	r2, [r3, #0]
    65b2:	0608      	lsls	r0, r1, #24
    65b4:	d406      	bmi.n	65c4 <_printf_i+0xb8>
    65b6:	0649      	lsls	r1, r1, #25
    65b8:	d504      	bpl.n	65c4 <_printf_i+0xb8>
    65ba:	6815      	ldr	r5, [r2, #0]
    65bc:	1d11      	adds	r1, r2, #4
    65be:	6019      	str	r1, [r3, #0]
    65c0:	b2ad      	uxth	r5, r5
    65c2:	e002      	b.n	65ca <_printf_i+0xbe>
    65c4:	1d11      	adds	r1, r2, #4
    65c6:	6019      	str	r1, [r3, #0]
    65c8:	6815      	ldr	r5, [r2, #0]
    65ca:	4b5f      	ldr	r3, [pc, #380]	; (6748 <_printf_i+0x23c>)
    65cc:	7e22      	ldrb	r2, [r4, #24]
    65ce:	9303      	str	r3, [sp, #12]
    65d0:	2708      	movs	r7, #8
    65d2:	2a6f      	cmp	r2, #111	; 0x6f
    65d4:	d01d      	beq.n	6612 <_printf_i+0x106>
    65d6:	270a      	movs	r7, #10
    65d8:	e01b      	b.n	6612 <_printf_i+0x106>
    65da:	0022      	movs	r2, r4
    65dc:	2178      	movs	r1, #120	; 0x78
    65de:	3245      	adds	r2, #69	; 0x45
    65e0:	7011      	strb	r1, [r2, #0]
    65e2:	4a5a      	ldr	r2, [pc, #360]	; (674c <_printf_i+0x240>)
    65e4:	6819      	ldr	r1, [r3, #0]
    65e6:	9203      	str	r2, [sp, #12]
    65e8:	1d08      	adds	r0, r1, #4
    65ea:	6822      	ldr	r2, [r4, #0]
    65ec:	6018      	str	r0, [r3, #0]
    65ee:	680d      	ldr	r5, [r1, #0]
    65f0:	0610      	lsls	r0, r2, #24
    65f2:	d402      	bmi.n	65fa <_printf_i+0xee>
    65f4:	0650      	lsls	r0, r2, #25
    65f6:	d500      	bpl.n	65fa <_printf_i+0xee>
    65f8:	b2ad      	uxth	r5, r5
    65fa:	07d3      	lsls	r3, r2, #31
    65fc:	d502      	bpl.n	6604 <_printf_i+0xf8>
    65fe:	2320      	movs	r3, #32
    6600:	431a      	orrs	r2, r3
    6602:	6022      	str	r2, [r4, #0]
    6604:	2710      	movs	r7, #16
    6606:	2d00      	cmp	r5, #0
    6608:	d103      	bne.n	6612 <_printf_i+0x106>
    660a:	2320      	movs	r3, #32
    660c:	6822      	ldr	r2, [r4, #0]
    660e:	439a      	bics	r2, r3
    6610:	6022      	str	r2, [r4, #0]
    6612:	0023      	movs	r3, r4
    6614:	2200      	movs	r2, #0
    6616:	3343      	adds	r3, #67	; 0x43
    6618:	701a      	strb	r2, [r3, #0]
    661a:	e002      	b.n	6622 <_printf_i+0x116>
    661c:	270a      	movs	r7, #10
    661e:	4b4a      	ldr	r3, [pc, #296]	; (6748 <_printf_i+0x23c>)
    6620:	9303      	str	r3, [sp, #12]
    6622:	6863      	ldr	r3, [r4, #4]
    6624:	60a3      	str	r3, [r4, #8]
    6626:	2b00      	cmp	r3, #0
    6628:	db09      	blt.n	663e <_printf_i+0x132>
    662a:	2204      	movs	r2, #4
    662c:	6821      	ldr	r1, [r4, #0]
    662e:	4391      	bics	r1, r2
    6630:	6021      	str	r1, [r4, #0]
    6632:	2d00      	cmp	r5, #0
    6634:	d105      	bne.n	6642 <_printf_i+0x136>
    6636:	9e04      	ldr	r6, [sp, #16]
    6638:	2b00      	cmp	r3, #0
    663a:	d011      	beq.n	6660 <_printf_i+0x154>
    663c:	e07b      	b.n	6736 <_printf_i+0x22a>
    663e:	2d00      	cmp	r5, #0
    6640:	d079      	beq.n	6736 <_printf_i+0x22a>
    6642:	9e04      	ldr	r6, [sp, #16]
    6644:	0028      	movs	r0, r5
    6646:	0039      	movs	r1, r7
    6648:	f7ff f814 	bl	5674 <__aeabi_uidivmod>
    664c:	9b03      	ldr	r3, [sp, #12]
    664e:	3e01      	subs	r6, #1
    6650:	5c5b      	ldrb	r3, [r3, r1]
    6652:	0028      	movs	r0, r5
    6654:	7033      	strb	r3, [r6, #0]
    6656:	0039      	movs	r1, r7
    6658:	f7fe ff86 	bl	5568 <__aeabi_uidiv>
    665c:	1e05      	subs	r5, r0, #0
    665e:	d1f1      	bne.n	6644 <_printf_i+0x138>
    6660:	2f08      	cmp	r7, #8
    6662:	d109      	bne.n	6678 <_printf_i+0x16c>
    6664:	6823      	ldr	r3, [r4, #0]
    6666:	07db      	lsls	r3, r3, #31
    6668:	d506      	bpl.n	6678 <_printf_i+0x16c>
    666a:	6863      	ldr	r3, [r4, #4]
    666c:	6922      	ldr	r2, [r4, #16]
    666e:	4293      	cmp	r3, r2
    6670:	dc02      	bgt.n	6678 <_printf_i+0x16c>
    6672:	2330      	movs	r3, #48	; 0x30
    6674:	3e01      	subs	r6, #1
    6676:	7033      	strb	r3, [r6, #0]
    6678:	9b04      	ldr	r3, [sp, #16]
    667a:	1b9b      	subs	r3, r3, r6
    667c:	6123      	str	r3, [r4, #16]
    667e:	e02b      	b.n	66d8 <_printf_i+0x1cc>
    6680:	6809      	ldr	r1, [r1, #0]
    6682:	681a      	ldr	r2, [r3, #0]
    6684:	0608      	lsls	r0, r1, #24
    6686:	d407      	bmi.n	6698 <_printf_i+0x18c>
    6688:	0649      	lsls	r1, r1, #25
    668a:	d505      	bpl.n	6698 <_printf_i+0x18c>
    668c:	1d11      	adds	r1, r2, #4
    668e:	6019      	str	r1, [r3, #0]
    6690:	6813      	ldr	r3, [r2, #0]
    6692:	8aa2      	ldrh	r2, [r4, #20]
    6694:	801a      	strh	r2, [r3, #0]
    6696:	e004      	b.n	66a2 <_printf_i+0x196>
    6698:	1d11      	adds	r1, r2, #4
    669a:	6019      	str	r1, [r3, #0]
    669c:	6813      	ldr	r3, [r2, #0]
    669e:	6962      	ldr	r2, [r4, #20]
    66a0:	601a      	str	r2, [r3, #0]
    66a2:	2300      	movs	r3, #0
    66a4:	9e04      	ldr	r6, [sp, #16]
    66a6:	6123      	str	r3, [r4, #16]
    66a8:	e016      	b.n	66d8 <_printf_i+0x1cc>
    66aa:	681a      	ldr	r2, [r3, #0]
    66ac:	1d11      	adds	r1, r2, #4
    66ae:	6019      	str	r1, [r3, #0]
    66b0:	6816      	ldr	r6, [r2, #0]
    66b2:	2100      	movs	r1, #0
    66b4:	6862      	ldr	r2, [r4, #4]
    66b6:	0030      	movs	r0, r6
    66b8:	f000 fb32 	bl	6d20 <memchr>
    66bc:	2800      	cmp	r0, #0
    66be:	d001      	beq.n	66c4 <_printf_i+0x1b8>
    66c0:	1b80      	subs	r0, r0, r6
    66c2:	6060      	str	r0, [r4, #4]
    66c4:	6863      	ldr	r3, [r4, #4]
    66c6:	e003      	b.n	66d0 <_printf_i+0x1c4>
    66c8:	0026      	movs	r6, r4
    66ca:	3642      	adds	r6, #66	; 0x42
    66cc:	7032      	strb	r2, [r6, #0]
    66ce:	2301      	movs	r3, #1
    66d0:	6123      	str	r3, [r4, #16]
    66d2:	2300      	movs	r3, #0
    66d4:	9a04      	ldr	r2, [sp, #16]
    66d6:	7013      	strb	r3, [r2, #0]
    66d8:	9b07      	ldr	r3, [sp, #28]
    66da:	aa09      	add	r2, sp, #36	; 0x24
    66dc:	9300      	str	r3, [sp, #0]
    66de:	0021      	movs	r1, r4
    66e0:	9b06      	ldr	r3, [sp, #24]
    66e2:	9805      	ldr	r0, [sp, #20]
    66e4:	f7ff fea4 	bl	6430 <_printf_common>
    66e8:	1c43      	adds	r3, r0, #1
    66ea:	d102      	bne.n	66f2 <_printf_i+0x1e6>
    66ec:	2001      	movs	r0, #1
    66ee:	4240      	negs	r0, r0
    66f0:	e027      	b.n	6742 <_printf_i+0x236>
    66f2:	6923      	ldr	r3, [r4, #16]
    66f4:	0032      	movs	r2, r6
    66f6:	9906      	ldr	r1, [sp, #24]
    66f8:	9805      	ldr	r0, [sp, #20]
    66fa:	9d07      	ldr	r5, [sp, #28]
    66fc:	47a8      	blx	r5
    66fe:	1c43      	adds	r3, r0, #1
    6700:	d0f4      	beq.n	66ec <_printf_i+0x1e0>
    6702:	6823      	ldr	r3, [r4, #0]
    6704:	2500      	movs	r5, #0
    6706:	079b      	lsls	r3, r3, #30
    6708:	d40f      	bmi.n	672a <_printf_i+0x21e>
    670a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    670c:	68e0      	ldr	r0, [r4, #12]
    670e:	4298      	cmp	r0, r3
    6710:	da17      	bge.n	6742 <_printf_i+0x236>
    6712:	0018      	movs	r0, r3
    6714:	e015      	b.n	6742 <_printf_i+0x236>
    6716:	0022      	movs	r2, r4
    6718:	2301      	movs	r3, #1
    671a:	3219      	adds	r2, #25
    671c:	9906      	ldr	r1, [sp, #24]
    671e:	9805      	ldr	r0, [sp, #20]
    6720:	9e07      	ldr	r6, [sp, #28]
    6722:	47b0      	blx	r6
    6724:	1c43      	adds	r3, r0, #1
    6726:	d0e1      	beq.n	66ec <_printf_i+0x1e0>
    6728:	3501      	adds	r5, #1
    672a:	68e3      	ldr	r3, [r4, #12]
    672c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    672e:	1a9b      	subs	r3, r3, r2
    6730:	429d      	cmp	r5, r3
    6732:	dbf0      	blt.n	6716 <_printf_i+0x20a>
    6734:	e7e9      	b.n	670a <_printf_i+0x1fe>
    6736:	0026      	movs	r6, r4
    6738:	9b03      	ldr	r3, [sp, #12]
    673a:	3642      	adds	r6, #66	; 0x42
    673c:	781b      	ldrb	r3, [r3, #0]
    673e:	7033      	strb	r3, [r6, #0]
    6740:	e78e      	b.n	6660 <_printf_i+0x154>
    6742:	b00b      	add	sp, #44	; 0x2c
    6744:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6746:	46c0      	nop			; (mov r8, r8)
    6748:	0000728e 	.word	0x0000728e
    674c:	0000729f 	.word	0x0000729f

00006750 <_scanf_chars>:
    6750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6752:	0015      	movs	r5, r2
    6754:	688a      	ldr	r2, [r1, #8]
    6756:	9001      	str	r0, [sp, #4]
    6758:	000c      	movs	r4, r1
    675a:	2a00      	cmp	r2, #0
    675c:	d106      	bne.n	676c <_scanf_chars+0x1c>
    675e:	698a      	ldr	r2, [r1, #24]
    6760:	1e51      	subs	r1, r2, #1
    6762:	418a      	sbcs	r2, r1
    6764:	2101      	movs	r1, #1
    6766:	4252      	negs	r2, r2
    6768:	430a      	orrs	r2, r1
    676a:	60a2      	str	r2, [r4, #8]
    676c:	6822      	ldr	r2, [r4, #0]
    676e:	06d2      	lsls	r2, r2, #27
    6770:	d403      	bmi.n	677a <_scanf_chars+0x2a>
    6772:	681a      	ldr	r2, [r3, #0]
    6774:	1d11      	adds	r1, r2, #4
    6776:	6019      	str	r1, [r3, #0]
    6778:	6817      	ldr	r7, [r2, #0]
    677a:	2600      	movs	r6, #0
    677c:	69a0      	ldr	r0, [r4, #24]
    677e:	2800      	cmp	r0, #0
    6780:	d11e      	bne.n	67c0 <_scanf_chars+0x70>
    6782:	2210      	movs	r2, #16
    6784:	6823      	ldr	r3, [r4, #0]
    6786:	3601      	adds	r6, #1
    6788:	4213      	tst	r3, r2
    678a:	d103      	bne.n	6794 <_scanf_chars+0x44>
    678c:	682b      	ldr	r3, [r5, #0]
    678e:	781b      	ldrb	r3, [r3, #0]
    6790:	703b      	strb	r3, [r7, #0]
    6792:	3701      	adds	r7, #1
    6794:	682a      	ldr	r2, [r5, #0]
    6796:	686b      	ldr	r3, [r5, #4]
    6798:	3201      	adds	r2, #1
    679a:	602a      	str	r2, [r5, #0]
    679c:	68a2      	ldr	r2, [r4, #8]
    679e:	3b01      	subs	r3, #1
    67a0:	3a01      	subs	r2, #1
    67a2:	606b      	str	r3, [r5, #4]
    67a4:	60a2      	str	r2, [r4, #8]
    67a6:	2a00      	cmp	r2, #0
    67a8:	d01e      	beq.n	67e8 <_scanf_chars+0x98>
    67aa:	2b00      	cmp	r3, #0
    67ac:	dce6      	bgt.n	677c <_scanf_chars+0x2c>
    67ae:	23c0      	movs	r3, #192	; 0xc0
    67b0:	005b      	lsls	r3, r3, #1
    67b2:	58e3      	ldr	r3, [r4, r3]
    67b4:	0029      	movs	r1, r5
    67b6:	9801      	ldr	r0, [sp, #4]
    67b8:	4798      	blx	r3
    67ba:	2800      	cmp	r0, #0
    67bc:	d0de      	beq.n	677c <_scanf_chars+0x2c>
    67be:	e013      	b.n	67e8 <_scanf_chars+0x98>
    67c0:	2801      	cmp	r0, #1
    67c2:	d106      	bne.n	67d2 <_scanf_chars+0x82>
    67c4:	682b      	ldr	r3, [r5, #0]
    67c6:	6962      	ldr	r2, [r4, #20]
    67c8:	781b      	ldrb	r3, [r3, #0]
    67ca:	5cd3      	ldrb	r3, [r2, r3]
    67cc:	2b00      	cmp	r3, #0
    67ce:	d1d8      	bne.n	6782 <_scanf_chars+0x32>
    67d0:	e01a      	b.n	6808 <_scanf_chars+0xb8>
    67d2:	2802      	cmp	r0, #2
    67d4:	d108      	bne.n	67e8 <_scanf_chars+0x98>
    67d6:	682b      	ldr	r3, [r5, #0]
    67d8:	4a0d      	ldr	r2, [pc, #52]	; (6810 <_scanf_chars+0xc0>)
    67da:	781b      	ldrb	r3, [r3, #0]
    67dc:	6812      	ldr	r2, [r2, #0]
    67de:	18d3      	adds	r3, r2, r3
    67e0:	2208      	movs	r2, #8
    67e2:	785b      	ldrb	r3, [r3, #1]
    67e4:	4213      	tst	r3, r2
    67e6:	d0cc      	beq.n	6782 <_scanf_chars+0x32>
    67e8:	2310      	movs	r3, #16
    67ea:	6822      	ldr	r2, [r4, #0]
    67ec:	4013      	ands	r3, r2
    67ee:	d106      	bne.n	67fe <_scanf_chars+0xae>
    67f0:	68e2      	ldr	r2, [r4, #12]
    67f2:	3201      	adds	r2, #1
    67f4:	60e2      	str	r2, [r4, #12]
    67f6:	69a2      	ldr	r2, [r4, #24]
    67f8:	2a00      	cmp	r2, #0
    67fa:	d000      	beq.n	67fe <_scanf_chars+0xae>
    67fc:	703b      	strb	r3, [r7, #0]
    67fe:	6923      	ldr	r3, [r4, #16]
    6800:	2000      	movs	r0, #0
    6802:	199e      	adds	r6, r3, r6
    6804:	6126      	str	r6, [r4, #16]
    6806:	e001      	b.n	680c <_scanf_chars+0xbc>
    6808:	2e00      	cmp	r6, #0
    680a:	d1ed      	bne.n	67e8 <_scanf_chars+0x98>
    680c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    680e:	46c0      	nop			; (mov r8, r8)
    6810:	200003d0 	.word	0x200003d0

00006814 <_scanf_i>:
    6814:	b5f0      	push	{r4, r5, r6, r7, lr}
    6816:	000c      	movs	r4, r1
    6818:	b08d      	sub	sp, #52	; 0x34
    681a:	9302      	str	r3, [sp, #8]
    681c:	4b77      	ldr	r3, [pc, #476]	; (69fc <_scanf_i+0x1e8>)
    681e:	9005      	str	r0, [sp, #20]
    6820:	0016      	movs	r6, r2
    6822:	aa09      	add	r2, sp, #36	; 0x24
    6824:	cb23      	ldmia	r3!, {r0, r1, r5}
    6826:	c223      	stmia	r2!, {r0, r1, r5}
    6828:	4b75      	ldr	r3, [pc, #468]	; (6a00 <_scanf_i+0x1ec>)
    682a:	9306      	str	r3, [sp, #24]
    682c:	69a3      	ldr	r3, [r4, #24]
    682e:	2b03      	cmp	r3, #3
    6830:	d001      	beq.n	6836 <_scanf_i+0x22>
    6832:	4b74      	ldr	r3, [pc, #464]	; (6a04 <_scanf_i+0x1f0>)
    6834:	9306      	str	r3, [sp, #24]
    6836:	2200      	movs	r2, #0
    6838:	68a3      	ldr	r3, [r4, #8]
    683a:	9204      	str	r2, [sp, #16]
    683c:	325d      	adds	r2, #93	; 0x5d
    683e:	1e59      	subs	r1, r3, #1
    6840:	32ff      	adds	r2, #255	; 0xff
    6842:	4291      	cmp	r1, r2
    6844:	d905      	bls.n	6852 <_scanf_i+0x3e>
    6846:	3b5e      	subs	r3, #94	; 0x5e
    6848:	3bff      	subs	r3, #255	; 0xff
    684a:	9304      	str	r3, [sp, #16]
    684c:	235e      	movs	r3, #94	; 0x5e
    684e:	33ff      	adds	r3, #255	; 0xff
    6850:	60a3      	str	r3, [r4, #8]
    6852:	0023      	movs	r3, r4
    6854:	331c      	adds	r3, #28
    6856:	9301      	str	r3, [sp, #4]
    6858:	23d0      	movs	r3, #208	; 0xd0
    685a:	2700      	movs	r7, #0
    685c:	6822      	ldr	r2, [r4, #0]
    685e:	011b      	lsls	r3, r3, #4
    6860:	4313      	orrs	r3, r2
    6862:	6023      	str	r3, [r4, #0]
    6864:	9b01      	ldr	r3, [sp, #4]
    6866:	9303      	str	r3, [sp, #12]
    6868:	6833      	ldr	r3, [r6, #0]
    686a:	a809      	add	r0, sp, #36	; 0x24
    686c:	7819      	ldrb	r1, [r3, #0]
    686e:	00bb      	lsls	r3, r7, #2
    6870:	2202      	movs	r2, #2
    6872:	5818      	ldr	r0, [r3, r0]
    6874:	f000 fa54 	bl	6d20 <memchr>
    6878:	2800      	cmp	r0, #0
    687a:	d03b      	beq.n	68f4 <_scanf_i+0xe0>
    687c:	2f01      	cmp	r7, #1
    687e:	d10d      	bne.n	689c <_scanf_i+0x88>
    6880:	6863      	ldr	r3, [r4, #4]
    6882:	2b00      	cmp	r3, #0
    6884:	d106      	bne.n	6894 <_scanf_i+0x80>
    6886:	3308      	adds	r3, #8
    6888:	6822      	ldr	r2, [r4, #0]
    688a:	6063      	str	r3, [r4, #4]
    688c:	33f9      	adds	r3, #249	; 0xf9
    688e:	33ff      	adds	r3, #255	; 0xff
    6890:	4313      	orrs	r3, r2
    6892:	6023      	str	r3, [r4, #0]
    6894:	4b5c      	ldr	r3, [pc, #368]	; (6a08 <_scanf_i+0x1f4>)
    6896:	6822      	ldr	r2, [r4, #0]
    6898:	4013      	ands	r3, r2
    689a:	e00e      	b.n	68ba <_scanf_i+0xa6>
    689c:	2f02      	cmp	r7, #2
    689e:	d10d      	bne.n	68bc <_scanf_i+0xa8>
    68a0:	21c0      	movs	r1, #192	; 0xc0
    68a2:	2280      	movs	r2, #128	; 0x80
    68a4:	6823      	ldr	r3, [r4, #0]
    68a6:	00c9      	lsls	r1, r1, #3
    68a8:	4019      	ands	r1, r3
    68aa:	0092      	lsls	r2, r2, #2
    68ac:	4291      	cmp	r1, r2
    68ae:	d124      	bne.n	68fa <_scanf_i+0xe6>
    68b0:	3af1      	subs	r2, #241	; 0xf1
    68b2:	3aff      	subs	r2, #255	; 0xff
    68b4:	6062      	str	r2, [r4, #4]
    68b6:	32f0      	adds	r2, #240	; 0xf0
    68b8:	4313      	orrs	r3, r2
    68ba:	6023      	str	r3, [r4, #0]
    68bc:	68a3      	ldr	r3, [r4, #8]
    68be:	1e5a      	subs	r2, r3, #1
    68c0:	60a2      	str	r2, [r4, #8]
    68c2:	2b00      	cmp	r3, #0
    68c4:	d016      	beq.n	68f4 <_scanf_i+0xe0>
    68c6:	9b03      	ldr	r3, [sp, #12]
    68c8:	1c5d      	adds	r5, r3, #1
    68ca:	6833      	ldr	r3, [r6, #0]
    68cc:	1c5a      	adds	r2, r3, #1
    68ce:	6032      	str	r2, [r6, #0]
    68d0:	781b      	ldrb	r3, [r3, #0]
    68d2:	9a03      	ldr	r2, [sp, #12]
    68d4:	9503      	str	r5, [sp, #12]
    68d6:	7013      	strb	r3, [r2, #0]
    68d8:	6873      	ldr	r3, [r6, #4]
    68da:	3b01      	subs	r3, #1
    68dc:	6073      	str	r3, [r6, #4]
    68de:	2b00      	cmp	r3, #0
    68e0:	dc08      	bgt.n	68f4 <_scanf_i+0xe0>
    68e2:	23c0      	movs	r3, #192	; 0xc0
    68e4:	005b      	lsls	r3, r3, #1
    68e6:	58e3      	ldr	r3, [r4, r3]
    68e8:	0031      	movs	r1, r6
    68ea:	9805      	ldr	r0, [sp, #20]
    68ec:	9307      	str	r3, [sp, #28]
    68ee:	4798      	blx	r3
    68f0:	2800      	cmp	r0, #0
    68f2:	d147      	bne.n	6984 <_scanf_i+0x170>
    68f4:	3701      	adds	r7, #1
    68f6:	2f03      	cmp	r7, #3
    68f8:	d1b6      	bne.n	6868 <_scanf_i+0x54>
    68fa:	6863      	ldr	r3, [r4, #4]
    68fc:	2b00      	cmp	r3, #0
    68fe:	d101      	bne.n	6904 <_scanf_i+0xf0>
    6900:	330a      	adds	r3, #10
    6902:	6063      	str	r3, [r4, #4]
    6904:	2110      	movs	r1, #16
    6906:	2700      	movs	r7, #0
    6908:	6863      	ldr	r3, [r4, #4]
    690a:	6960      	ldr	r0, [r4, #20]
    690c:	1ac9      	subs	r1, r1, r3
    690e:	4b3f      	ldr	r3, [pc, #252]	; (6a0c <_scanf_i+0x1f8>)
    6910:	18c9      	adds	r1, r1, r3
    6912:	f000 f87f 	bl	6a14 <__sccl>
    6916:	9d03      	ldr	r5, [sp, #12]
    6918:	68a3      	ldr	r3, [r4, #8]
    691a:	2b00      	cmp	r3, #0
    691c:	d033      	beq.n	6986 <_scanf_i+0x172>
    691e:	6832      	ldr	r2, [r6, #0]
    6920:	6960      	ldr	r0, [r4, #20]
    6922:	7811      	ldrb	r1, [r2, #0]
    6924:	5c40      	ldrb	r0, [r0, r1]
    6926:	2800      	cmp	r0, #0
    6928:	d02d      	beq.n	6986 <_scanf_i+0x172>
    692a:	2930      	cmp	r1, #48	; 0x30
    692c:	d10d      	bne.n	694a <_scanf_i+0x136>
    692e:	2080      	movs	r0, #128	; 0x80
    6930:	6821      	ldr	r1, [r4, #0]
    6932:	0100      	lsls	r0, r0, #4
    6934:	4201      	tst	r1, r0
    6936:	d008      	beq.n	694a <_scanf_i+0x136>
    6938:	9a04      	ldr	r2, [sp, #16]
    693a:	3701      	adds	r7, #1
    693c:	2a00      	cmp	r2, #0
    693e:	d00b      	beq.n	6958 <_scanf_i+0x144>
    6940:	3a01      	subs	r2, #1
    6942:	3301      	adds	r3, #1
    6944:	9204      	str	r2, [sp, #16]
    6946:	60a3      	str	r3, [r4, #8]
    6948:	e006      	b.n	6958 <_scanf_i+0x144>
    694a:	6821      	ldr	r1, [r4, #0]
    694c:	4b30      	ldr	r3, [pc, #192]	; (6a10 <_scanf_i+0x1fc>)
    694e:	400b      	ands	r3, r1
    6950:	6023      	str	r3, [r4, #0]
    6952:	7813      	ldrb	r3, [r2, #0]
    6954:	702b      	strb	r3, [r5, #0]
    6956:	3501      	adds	r5, #1
    6958:	6873      	ldr	r3, [r6, #4]
    695a:	3b01      	subs	r3, #1
    695c:	6073      	str	r3, [r6, #4]
    695e:	2b00      	cmp	r3, #0
    6960:	dd03      	ble.n	696a <_scanf_i+0x156>
    6962:	6833      	ldr	r3, [r6, #0]
    6964:	3301      	adds	r3, #1
    6966:	6033      	str	r3, [r6, #0]
    6968:	e008      	b.n	697c <_scanf_i+0x168>
    696a:	23c0      	movs	r3, #192	; 0xc0
    696c:	005b      	lsls	r3, r3, #1
    696e:	58e3      	ldr	r3, [r4, r3]
    6970:	0031      	movs	r1, r6
    6972:	9805      	ldr	r0, [sp, #20]
    6974:	9303      	str	r3, [sp, #12]
    6976:	4798      	blx	r3
    6978:	2800      	cmp	r0, #0
    697a:	d104      	bne.n	6986 <_scanf_i+0x172>
    697c:	68a3      	ldr	r3, [r4, #8]
    697e:	3b01      	subs	r3, #1
    6980:	60a3      	str	r3, [r4, #8]
    6982:	e7c9      	b.n	6918 <_scanf_i+0x104>
    6984:	2700      	movs	r7, #0
    6986:	6823      	ldr	r3, [r4, #0]
    6988:	05db      	lsls	r3, r3, #23
    698a:	d50e      	bpl.n	69aa <_scanf_i+0x196>
    698c:	9b01      	ldr	r3, [sp, #4]
    698e:	429d      	cmp	r5, r3
    6990:	d907      	bls.n	69a2 <_scanf_i+0x18e>
    6992:	23be      	movs	r3, #190	; 0xbe
    6994:	3d01      	subs	r5, #1
    6996:	005b      	lsls	r3, r3, #1
    6998:	7829      	ldrb	r1, [r5, #0]
    699a:	58e3      	ldr	r3, [r4, r3]
    699c:	0032      	movs	r2, r6
    699e:	9805      	ldr	r0, [sp, #20]
    69a0:	4798      	blx	r3
    69a2:	9b01      	ldr	r3, [sp, #4]
    69a4:	2001      	movs	r0, #1
    69a6:	429d      	cmp	r5, r3
    69a8:	d025      	beq.n	69f6 <_scanf_i+0x1e2>
    69aa:	2210      	movs	r2, #16
    69ac:	6823      	ldr	r3, [r4, #0]
    69ae:	401a      	ands	r2, r3
    69b0:	d11a      	bne.n	69e8 <_scanf_i+0x1d4>
    69b2:	702a      	strb	r2, [r5, #0]
    69b4:	6863      	ldr	r3, [r4, #4]
    69b6:	9901      	ldr	r1, [sp, #4]
    69b8:	9805      	ldr	r0, [sp, #20]
    69ba:	9e06      	ldr	r6, [sp, #24]
    69bc:	47b0      	blx	r6
    69be:	9b02      	ldr	r3, [sp, #8]
    69c0:	6822      	ldr	r2, [r4, #0]
    69c2:	681b      	ldr	r3, [r3, #0]
    69c4:	0691      	lsls	r1, r2, #26
    69c6:	d407      	bmi.n	69d8 <_scanf_i+0x1c4>
    69c8:	07d1      	lsls	r1, r2, #31
    69ca:	d505      	bpl.n	69d8 <_scanf_i+0x1c4>
    69cc:	9902      	ldr	r1, [sp, #8]
    69ce:	1d1a      	adds	r2, r3, #4
    69d0:	600a      	str	r2, [r1, #0]
    69d2:	681b      	ldr	r3, [r3, #0]
    69d4:	8018      	strh	r0, [r3, #0]
    69d6:	e004      	b.n	69e2 <_scanf_i+0x1ce>
    69d8:	9902      	ldr	r1, [sp, #8]
    69da:	1d1a      	adds	r2, r3, #4
    69dc:	600a      	str	r2, [r1, #0]
    69de:	681b      	ldr	r3, [r3, #0]
    69e0:	6018      	str	r0, [r3, #0]
    69e2:	68e3      	ldr	r3, [r4, #12]
    69e4:	3301      	adds	r3, #1
    69e6:	60e3      	str	r3, [r4, #12]
    69e8:	2000      	movs	r0, #0
    69ea:	9b01      	ldr	r3, [sp, #4]
    69ec:	1aed      	subs	r5, r5, r3
    69ee:	6923      	ldr	r3, [r4, #16]
    69f0:	19ed      	adds	r5, r5, r7
    69f2:	195d      	adds	r5, r3, r5
    69f4:	6125      	str	r5, [r4, #16]
    69f6:	b00d      	add	sp, #52	; 0x34
    69f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69fa:	46c0      	nop			; (mov r8, r8)
    69fc:	000072b0 	.word	0x000072b0
    6a00:	00006a79 	.word	0x00006a79
    6a04:	00006b9d 	.word	0x00006b9d
    6a08:	fffffaff 	.word	0xfffffaff
    6a0c:	000072bc 	.word	0x000072bc
    6a10:	fffff6ff 	.word	0xfffff6ff

00006a14 <__sccl>:
    6a14:	b570      	push	{r4, r5, r6, lr}
    6a16:	780b      	ldrb	r3, [r1, #0]
    6a18:	2b5e      	cmp	r3, #94	; 0x5e
    6a1a:	d002      	beq.n	6a22 <__sccl+0xe>
    6a1c:	1c4a      	adds	r2, r1, #1
    6a1e:	2500      	movs	r5, #0
    6a20:	e002      	b.n	6a28 <__sccl+0x14>
    6a22:	2501      	movs	r5, #1
    6a24:	784b      	ldrb	r3, [r1, #1]
    6a26:	1c8a      	adds	r2, r1, #2
    6a28:	0001      	movs	r1, r0
    6a2a:	1c44      	adds	r4, r0, #1
    6a2c:	34ff      	adds	r4, #255	; 0xff
    6a2e:	700d      	strb	r5, [r1, #0]
    6a30:	3101      	adds	r1, #1
    6a32:	42a1      	cmp	r1, r4
    6a34:	d1fb      	bne.n	6a2e <__sccl+0x1a>
    6a36:	2b00      	cmp	r3, #0
    6a38:	d101      	bne.n	6a3e <__sccl+0x2a>
    6a3a:	1e50      	subs	r0, r2, #1
    6a3c:	e01b      	b.n	6a76 <__sccl+0x62>
    6a3e:	2101      	movs	r1, #1
    6a40:	404d      	eors	r5, r1
    6a42:	0011      	movs	r1, r2
    6a44:	54c5      	strb	r5, [r0, r3]
    6a46:	780c      	ldrb	r4, [r1, #0]
    6a48:	1c4a      	adds	r2, r1, #1
    6a4a:	2c2d      	cmp	r4, #45	; 0x2d
    6a4c:	d007      	beq.n	6a5e <__sccl+0x4a>
    6a4e:	2c5d      	cmp	r4, #93	; 0x5d
    6a50:	d010      	beq.n	6a74 <__sccl+0x60>
    6a52:	2c00      	cmp	r4, #0
    6a54:	d001      	beq.n	6a5a <__sccl+0x46>
    6a56:	0023      	movs	r3, r4
    6a58:	e7f3      	b.n	6a42 <__sccl+0x2e>
    6a5a:	0008      	movs	r0, r1
    6a5c:	e00b      	b.n	6a76 <__sccl+0x62>
    6a5e:	784e      	ldrb	r6, [r1, #1]
    6a60:	2e5d      	cmp	r6, #93	; 0x5d
    6a62:	d0f8      	beq.n	6a56 <__sccl+0x42>
    6a64:	42b3      	cmp	r3, r6
    6a66:	dcf6      	bgt.n	6a56 <__sccl+0x42>
    6a68:	3102      	adds	r1, #2
    6a6a:	3301      	adds	r3, #1
    6a6c:	54c5      	strb	r5, [r0, r3]
    6a6e:	429e      	cmp	r6, r3
    6a70:	dcfb      	bgt.n	6a6a <__sccl+0x56>
    6a72:	e7e8      	b.n	6a46 <__sccl+0x32>
    6a74:	0010      	movs	r0, r2
    6a76:	bd70      	pop	{r4, r5, r6, pc}

00006a78 <_strtol_r>:
    6a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a7a:	001e      	movs	r6, r3
    6a7c:	4b45      	ldr	r3, [pc, #276]	; (6b94 <_strtol_r+0x11c>)
    6a7e:	b087      	sub	sp, #28
    6a80:	681b      	ldr	r3, [r3, #0]
    6a82:	9201      	str	r2, [sp, #4]
    6a84:	9302      	str	r3, [sp, #8]
    6a86:	2208      	movs	r2, #8
    6a88:	000b      	movs	r3, r1
    6a8a:	9005      	str	r0, [sp, #20]
    6a8c:	9103      	str	r1, [sp, #12]
    6a8e:	781c      	ldrb	r4, [r3, #0]
    6a90:	9902      	ldr	r1, [sp, #8]
    6a92:	1c5d      	adds	r5, r3, #1
    6a94:	1909      	adds	r1, r1, r4
    6a96:	7848      	ldrb	r0, [r1, #1]
    6a98:	4010      	ands	r0, r2
    6a9a:	d001      	beq.n	6aa0 <_strtol_r+0x28>
    6a9c:	002b      	movs	r3, r5
    6a9e:	e7f6      	b.n	6a8e <_strtol_r+0x16>
    6aa0:	2c2d      	cmp	r4, #45	; 0x2d
    6aa2:	d104      	bne.n	6aae <_strtol_r+0x36>
    6aa4:	1c9d      	adds	r5, r3, #2
    6aa6:	785c      	ldrb	r4, [r3, #1]
    6aa8:	2301      	movs	r3, #1
    6aaa:	9300      	str	r3, [sp, #0]
    6aac:	e004      	b.n	6ab8 <_strtol_r+0x40>
    6aae:	9000      	str	r0, [sp, #0]
    6ab0:	2c2b      	cmp	r4, #43	; 0x2b
    6ab2:	d101      	bne.n	6ab8 <_strtol_r+0x40>
    6ab4:	785c      	ldrb	r4, [r3, #1]
    6ab6:	1c9d      	adds	r5, r3, #2
    6ab8:	2e00      	cmp	r6, #0
    6aba:	d002      	beq.n	6ac2 <_strtol_r+0x4a>
    6abc:	2e10      	cmp	r6, #16
    6abe:	d10a      	bne.n	6ad6 <_strtol_r+0x5e>
    6ac0:	e062      	b.n	6b88 <_strtol_r+0x110>
    6ac2:	2c30      	cmp	r4, #48	; 0x30
    6ac4:	d15e      	bne.n	6b84 <_strtol_r+0x10c>
    6ac6:	2220      	movs	r2, #32
    6ac8:	782b      	ldrb	r3, [r5, #0]
    6aca:	4393      	bics	r3, r2
    6acc:	2b58      	cmp	r3, #88	; 0x58
    6ace:	d154      	bne.n	6b7a <_strtol_r+0x102>
    6ad0:	2610      	movs	r6, #16
    6ad2:	786c      	ldrb	r4, [r5, #1]
    6ad4:	3502      	adds	r5, #2
    6ad6:	9f00      	ldr	r7, [sp, #0]
    6ad8:	0031      	movs	r1, r6
    6ada:	1e7b      	subs	r3, r7, #1
    6adc:	419f      	sbcs	r7, r3
    6ade:	4b2e      	ldr	r3, [pc, #184]	; (6b98 <_strtol_r+0x120>)
    6ae0:	18ff      	adds	r7, r7, r3
    6ae2:	0038      	movs	r0, r7
    6ae4:	f7fe fdc6 	bl	5674 <__aeabi_uidivmod>
    6ae8:	0038      	movs	r0, r7
    6aea:	9104      	str	r1, [sp, #16]
    6aec:	0031      	movs	r1, r6
    6aee:	f7fe fd3b 	bl	5568 <__aeabi_uidiv>
    6af2:	2300      	movs	r3, #0
    6af4:	2203      	movs	r2, #3
    6af6:	0007      	movs	r7, r0
    6af8:	4694      	mov	ip, r2
    6afa:	0018      	movs	r0, r3
    6afc:	9a02      	ldr	r2, [sp, #8]
    6afe:	1912      	adds	r2, r2, r4
    6b00:	7851      	ldrb	r1, [r2, #1]
    6b02:	2204      	movs	r2, #4
    6b04:	4211      	tst	r1, r2
    6b06:	d001      	beq.n	6b0c <_strtol_r+0x94>
    6b08:	3c30      	subs	r4, #48	; 0x30
    6b0a:	e007      	b.n	6b1c <_strtol_r+0xa4>
    6b0c:	4662      	mov	r2, ip
    6b0e:	4011      	ands	r1, r2
    6b10:	d017      	beq.n	6b42 <_strtol_r+0xca>
    6b12:	2237      	movs	r2, #55	; 0x37
    6b14:	2901      	cmp	r1, #1
    6b16:	d000      	beq.n	6b1a <_strtol_r+0xa2>
    6b18:	3220      	adds	r2, #32
    6b1a:	1aa4      	subs	r4, r4, r2
    6b1c:	42a6      	cmp	r6, r4
    6b1e:	dd10      	ble.n	6b42 <_strtol_r+0xca>
    6b20:	1c5a      	adds	r2, r3, #1
    6b22:	d00b      	beq.n	6b3c <_strtol_r+0xc4>
    6b24:	42b8      	cmp	r0, r7
    6b26:	d807      	bhi.n	6b38 <_strtol_r+0xc0>
    6b28:	d102      	bne.n	6b30 <_strtol_r+0xb8>
    6b2a:	9b04      	ldr	r3, [sp, #16]
    6b2c:	429c      	cmp	r4, r3
    6b2e:	dc03      	bgt.n	6b38 <_strtol_r+0xc0>
    6b30:	4370      	muls	r0, r6
    6b32:	2301      	movs	r3, #1
    6b34:	1820      	adds	r0, r4, r0
    6b36:	e001      	b.n	6b3c <_strtol_r+0xc4>
    6b38:	2301      	movs	r3, #1
    6b3a:	425b      	negs	r3, r3
    6b3c:	782c      	ldrb	r4, [r5, #0]
    6b3e:	3501      	adds	r5, #1
    6b40:	e7dc      	b.n	6afc <_strtol_r+0x84>
    6b42:	1c5a      	adds	r2, r3, #1
    6b44:	d10b      	bne.n	6b5e <_strtol_r+0xe6>
    6b46:	9800      	ldr	r0, [sp, #0]
    6b48:	9a05      	ldr	r2, [sp, #20]
    6b4a:	1e43      	subs	r3, r0, #1
    6b4c:	4198      	sbcs	r0, r3
    6b4e:	4b12      	ldr	r3, [pc, #72]	; (6b98 <_strtol_r+0x120>)
    6b50:	18c0      	adds	r0, r0, r3
    6b52:	2322      	movs	r3, #34	; 0x22
    6b54:	6013      	str	r3, [r2, #0]
    6b56:	9b01      	ldr	r3, [sp, #4]
    6b58:	2b00      	cmp	r3, #0
    6b5a:	d10a      	bne.n	6b72 <_strtol_r+0xfa>
    6b5c:	e017      	b.n	6b8e <_strtol_r+0x116>
    6b5e:	9a00      	ldr	r2, [sp, #0]
    6b60:	2a00      	cmp	r2, #0
    6b62:	d000      	beq.n	6b66 <_strtol_r+0xee>
    6b64:	4240      	negs	r0, r0
    6b66:	9a01      	ldr	r2, [sp, #4]
    6b68:	2a00      	cmp	r2, #0
    6b6a:	d010      	beq.n	6b8e <_strtol_r+0x116>
    6b6c:	9a03      	ldr	r2, [sp, #12]
    6b6e:	2b00      	cmp	r3, #0
    6b70:	d000      	beq.n	6b74 <_strtol_r+0xfc>
    6b72:	1e6a      	subs	r2, r5, #1
    6b74:	9b01      	ldr	r3, [sp, #4]
    6b76:	601a      	str	r2, [r3, #0]
    6b78:	e009      	b.n	6b8e <_strtol_r+0x116>
    6b7a:	2430      	movs	r4, #48	; 0x30
    6b7c:	2e00      	cmp	r6, #0
    6b7e:	d1aa      	bne.n	6ad6 <_strtol_r+0x5e>
    6b80:	2608      	movs	r6, #8
    6b82:	e7a8      	b.n	6ad6 <_strtol_r+0x5e>
    6b84:	260a      	movs	r6, #10
    6b86:	e7a6      	b.n	6ad6 <_strtol_r+0x5e>
    6b88:	2c30      	cmp	r4, #48	; 0x30
    6b8a:	d09c      	beq.n	6ac6 <_strtol_r+0x4e>
    6b8c:	e7a3      	b.n	6ad6 <_strtol_r+0x5e>
    6b8e:	b007      	add	sp, #28
    6b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b92:	46c0      	nop			; (mov r8, r8)
    6b94:	200003d0 	.word	0x200003d0
    6b98:	7fffffff 	.word	0x7fffffff

00006b9c <_strtoul_r>:
    6b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b9e:	001e      	movs	r6, r3
    6ba0:	4b3f      	ldr	r3, [pc, #252]	; (6ca0 <_strtoul_r+0x104>)
    6ba2:	b087      	sub	sp, #28
    6ba4:	681b      	ldr	r3, [r3, #0]
    6ba6:	9104      	str	r1, [sp, #16]
    6ba8:	9302      	str	r3, [sp, #8]
    6baa:	0017      	movs	r7, r2
    6bac:	000b      	movs	r3, r1
    6bae:	2108      	movs	r1, #8
    6bb0:	9005      	str	r0, [sp, #20]
    6bb2:	781c      	ldrb	r4, [r3, #0]
    6bb4:	9a02      	ldr	r2, [sp, #8]
    6bb6:	1c5d      	adds	r5, r3, #1
    6bb8:	1912      	adds	r2, r2, r4
    6bba:	7852      	ldrb	r2, [r2, #1]
    6bbc:	400a      	ands	r2, r1
    6bbe:	d001      	beq.n	6bc4 <_strtoul_r+0x28>
    6bc0:	002b      	movs	r3, r5
    6bc2:	e7f6      	b.n	6bb2 <_strtoul_r+0x16>
    6bc4:	2c2d      	cmp	r4, #45	; 0x2d
    6bc6:	d104      	bne.n	6bd2 <_strtoul_r+0x36>
    6bc8:	1c9d      	adds	r5, r3, #2
    6bca:	785c      	ldrb	r4, [r3, #1]
    6bcc:	2301      	movs	r3, #1
    6bce:	9301      	str	r3, [sp, #4]
    6bd0:	e004      	b.n	6bdc <_strtoul_r+0x40>
    6bd2:	9201      	str	r2, [sp, #4]
    6bd4:	2c2b      	cmp	r4, #43	; 0x2b
    6bd6:	d101      	bne.n	6bdc <_strtoul_r+0x40>
    6bd8:	785c      	ldrb	r4, [r3, #1]
    6bda:	1c9d      	adds	r5, r3, #2
    6bdc:	2e00      	cmp	r6, #0
    6bde:	d002      	beq.n	6be6 <_strtoul_r+0x4a>
    6be0:	2e10      	cmp	r6, #16
    6be2:	d10a      	bne.n	6bfa <_strtoul_r+0x5e>
    6be4:	e057      	b.n	6c96 <_strtoul_r+0xfa>
    6be6:	2c30      	cmp	r4, #48	; 0x30
    6be8:	d153      	bne.n	6c92 <_strtoul_r+0xf6>
    6bea:	2220      	movs	r2, #32
    6bec:	782b      	ldrb	r3, [r5, #0]
    6bee:	4393      	bics	r3, r2
    6bf0:	2b58      	cmp	r3, #88	; 0x58
    6bf2:	d149      	bne.n	6c88 <_strtoul_r+0xec>
    6bf4:	2610      	movs	r6, #16
    6bf6:	786c      	ldrb	r4, [r5, #1]
    6bf8:	3502      	adds	r5, #2
    6bfa:	2001      	movs	r0, #1
    6bfc:	0031      	movs	r1, r6
    6bfe:	4240      	negs	r0, r0
    6c00:	f7fe fcb2 	bl	5568 <__aeabi_uidiv>
    6c04:	9003      	str	r0, [sp, #12]
    6c06:	2001      	movs	r0, #1
    6c08:	0031      	movs	r1, r6
    6c0a:	4240      	negs	r0, r0
    6c0c:	f7fe fd32 	bl	5674 <__aeabi_uidivmod>
    6c10:	2300      	movs	r3, #0
    6c12:	468c      	mov	ip, r1
    6c14:	0018      	movs	r0, r3
    6c16:	9a02      	ldr	r2, [sp, #8]
    6c18:	1912      	adds	r2, r2, r4
    6c1a:	7851      	ldrb	r1, [r2, #1]
    6c1c:	2204      	movs	r2, #4
    6c1e:	4211      	tst	r1, r2
    6c20:	d001      	beq.n	6c26 <_strtoul_r+0x8a>
    6c22:	3c30      	subs	r4, #48	; 0x30
    6c24:	e007      	b.n	6c36 <_strtoul_r+0x9a>
    6c26:	2203      	movs	r2, #3
    6c28:	4011      	ands	r1, r2
    6c2a:	d017      	beq.n	6c5c <_strtoul_r+0xc0>
    6c2c:	3234      	adds	r2, #52	; 0x34
    6c2e:	2901      	cmp	r1, #1
    6c30:	d000      	beq.n	6c34 <_strtoul_r+0x98>
    6c32:	3220      	adds	r2, #32
    6c34:	1aa4      	subs	r4, r4, r2
    6c36:	42a6      	cmp	r6, r4
    6c38:	dd10      	ble.n	6c5c <_strtoul_r+0xc0>
    6c3a:	2b00      	cmp	r3, #0
    6c3c:	db09      	blt.n	6c52 <_strtoul_r+0xb6>
    6c3e:	9b03      	ldr	r3, [sp, #12]
    6c40:	4298      	cmp	r0, r3
    6c42:	d806      	bhi.n	6c52 <_strtoul_r+0xb6>
    6c44:	d101      	bne.n	6c4a <_strtoul_r+0xae>
    6c46:	4564      	cmp	r4, ip
    6c48:	dc03      	bgt.n	6c52 <_strtoul_r+0xb6>
    6c4a:	4370      	muls	r0, r6
    6c4c:	2301      	movs	r3, #1
    6c4e:	1820      	adds	r0, r4, r0
    6c50:	e001      	b.n	6c56 <_strtoul_r+0xba>
    6c52:	2301      	movs	r3, #1
    6c54:	425b      	negs	r3, r3
    6c56:	782c      	ldrb	r4, [r5, #0]
    6c58:	3501      	adds	r5, #1
    6c5a:	e7dc      	b.n	6c16 <_strtoul_r+0x7a>
    6c5c:	2b00      	cmp	r3, #0
    6c5e:	da07      	bge.n	6c70 <_strtoul_r+0xd4>
    6c60:	2322      	movs	r3, #34	; 0x22
    6c62:	2001      	movs	r0, #1
    6c64:	9a05      	ldr	r2, [sp, #20]
    6c66:	4240      	negs	r0, r0
    6c68:	6013      	str	r3, [r2, #0]
    6c6a:	2f00      	cmp	r7, #0
    6c6c:	d109      	bne.n	6c82 <_strtoul_r+0xe6>
    6c6e:	e015      	b.n	6c9c <_strtoul_r+0x100>
    6c70:	9a01      	ldr	r2, [sp, #4]
    6c72:	2a00      	cmp	r2, #0
    6c74:	d000      	beq.n	6c78 <_strtoul_r+0xdc>
    6c76:	4240      	negs	r0, r0
    6c78:	2f00      	cmp	r7, #0
    6c7a:	d00f      	beq.n	6c9c <_strtoul_r+0x100>
    6c7c:	9a04      	ldr	r2, [sp, #16]
    6c7e:	2b00      	cmp	r3, #0
    6c80:	d000      	beq.n	6c84 <_strtoul_r+0xe8>
    6c82:	1e6a      	subs	r2, r5, #1
    6c84:	603a      	str	r2, [r7, #0]
    6c86:	e009      	b.n	6c9c <_strtoul_r+0x100>
    6c88:	2430      	movs	r4, #48	; 0x30
    6c8a:	2e00      	cmp	r6, #0
    6c8c:	d1b5      	bne.n	6bfa <_strtoul_r+0x5e>
    6c8e:	2608      	movs	r6, #8
    6c90:	e7b3      	b.n	6bfa <_strtoul_r+0x5e>
    6c92:	260a      	movs	r6, #10
    6c94:	e7b1      	b.n	6bfa <_strtoul_r+0x5e>
    6c96:	2c30      	cmp	r4, #48	; 0x30
    6c98:	d0a7      	beq.n	6bea <_strtoul_r+0x4e>
    6c9a:	e7ae      	b.n	6bfa <_strtoul_r+0x5e>
    6c9c:	b007      	add	sp, #28
    6c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ca0:	200003d0 	.word	0x200003d0

00006ca4 <__submore>:
    6ca4:	000b      	movs	r3, r1
    6ca6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6ca8:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    6caa:	3344      	adds	r3, #68	; 0x44
    6cac:	000c      	movs	r4, r1
    6cae:	429d      	cmp	r5, r3
    6cb0:	d11b      	bne.n	6cea <__submore+0x46>
    6cb2:	2680      	movs	r6, #128	; 0x80
    6cb4:	00f6      	lsls	r6, r6, #3
    6cb6:	0031      	movs	r1, r6
    6cb8:	f7fe ff82 	bl	5bc0 <_malloc_r>
    6cbc:	2800      	cmp	r0, #0
    6cbe:	d102      	bne.n	6cc6 <__submore+0x22>
    6cc0:	2001      	movs	r0, #1
    6cc2:	4240      	negs	r0, r0
    6cc4:	e025      	b.n	6d12 <__submore+0x6e>
    6cc6:	0023      	movs	r3, r4
    6cc8:	6360      	str	r0, [r4, #52]	; 0x34
    6cca:	63a6      	str	r6, [r4, #56]	; 0x38
    6ccc:	3346      	adds	r3, #70	; 0x46
    6cce:	781a      	ldrb	r2, [r3, #0]
    6cd0:	4b10      	ldr	r3, [pc, #64]	; (6d14 <__submore+0x70>)
    6cd2:	54c2      	strb	r2, [r0, r3]
    6cd4:	0023      	movs	r3, r4
    6cd6:	3345      	adds	r3, #69	; 0x45
    6cd8:	781a      	ldrb	r2, [r3, #0]
    6cda:	4b0f      	ldr	r3, [pc, #60]	; (6d18 <__submore+0x74>)
    6cdc:	54c2      	strb	r2, [r0, r3]
    6cde:	782a      	ldrb	r2, [r5, #0]
    6ce0:	4b0e      	ldr	r3, [pc, #56]	; (6d1c <__submore+0x78>)
    6ce2:	54c2      	strb	r2, [r0, r3]
    6ce4:	18c0      	adds	r0, r0, r3
    6ce6:	6020      	str	r0, [r4, #0]
    6ce8:	e012      	b.n	6d10 <__submore+0x6c>
    6cea:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    6cec:	0029      	movs	r1, r5
    6cee:	0073      	lsls	r3, r6, #1
    6cf0:	001a      	movs	r2, r3
    6cf2:	9301      	str	r3, [sp, #4]
    6cf4:	f000 f834 	bl	6d60 <_realloc_r>
    6cf8:	1e05      	subs	r5, r0, #0
    6cfa:	d0e1      	beq.n	6cc0 <__submore+0x1c>
    6cfc:	1987      	adds	r7, r0, r6
    6cfe:	0001      	movs	r1, r0
    6d00:	0032      	movs	r2, r6
    6d02:	0038      	movs	r0, r7
    6d04:	f7fe ff0c 	bl	5b20 <memcpy>
    6d08:	9b01      	ldr	r3, [sp, #4]
    6d0a:	6027      	str	r7, [r4, #0]
    6d0c:	6365      	str	r5, [r4, #52]	; 0x34
    6d0e:	63a3      	str	r3, [r4, #56]	; 0x38
    6d10:	2000      	movs	r0, #0
    6d12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6d14:	000003ff 	.word	0x000003ff
    6d18:	000003fe 	.word	0x000003fe
    6d1c:	000003fd 	.word	0x000003fd

00006d20 <memchr>:
    6d20:	b2c9      	uxtb	r1, r1
    6d22:	1882      	adds	r2, r0, r2
    6d24:	4290      	cmp	r0, r2
    6d26:	d004      	beq.n	6d32 <memchr+0x12>
    6d28:	7803      	ldrb	r3, [r0, #0]
    6d2a:	428b      	cmp	r3, r1
    6d2c:	d002      	beq.n	6d34 <memchr+0x14>
    6d2e:	3001      	adds	r0, #1
    6d30:	e7f8      	b.n	6d24 <memchr+0x4>
    6d32:	2000      	movs	r0, #0
    6d34:	4770      	bx	lr

00006d36 <memmove>:
    6d36:	b510      	push	{r4, lr}
    6d38:	4288      	cmp	r0, r1
    6d3a:	d902      	bls.n	6d42 <memmove+0xc>
    6d3c:	188b      	adds	r3, r1, r2
    6d3e:	4298      	cmp	r0, r3
    6d40:	d301      	bcc.n	6d46 <memmove+0x10>
    6d42:	2300      	movs	r3, #0
    6d44:	e005      	b.n	6d52 <memmove+0x1c>
    6d46:	1a9b      	subs	r3, r3, r2
    6d48:	3a01      	subs	r2, #1
    6d4a:	d308      	bcc.n	6d5e <memmove+0x28>
    6d4c:	5c99      	ldrb	r1, [r3, r2]
    6d4e:	5481      	strb	r1, [r0, r2]
    6d50:	e7fa      	b.n	6d48 <memmove+0x12>
    6d52:	4293      	cmp	r3, r2
    6d54:	d003      	beq.n	6d5e <memmove+0x28>
    6d56:	5ccc      	ldrb	r4, [r1, r3]
    6d58:	54c4      	strb	r4, [r0, r3]
    6d5a:	3301      	adds	r3, #1
    6d5c:	e7f9      	b.n	6d52 <memmove+0x1c>
    6d5e:	bd10      	pop	{r4, pc}

00006d60 <_realloc_r>:
    6d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d62:	0006      	movs	r6, r0
    6d64:	000c      	movs	r4, r1
    6d66:	0015      	movs	r5, r2
    6d68:	2900      	cmp	r1, #0
    6d6a:	d104      	bne.n	6d76 <_realloc_r+0x16>
    6d6c:	0011      	movs	r1, r2
    6d6e:	f7fe ff27 	bl	5bc0 <_malloc_r>
    6d72:	0004      	movs	r4, r0
    6d74:	e018      	b.n	6da8 <_realloc_r+0x48>
    6d76:	2a00      	cmp	r2, #0
    6d78:	d103      	bne.n	6d82 <_realloc_r+0x22>
    6d7a:	f7fe fedb 	bl	5b34 <_free_r>
    6d7e:	002c      	movs	r4, r5
    6d80:	e012      	b.n	6da8 <_realloc_r+0x48>
    6d82:	f000 f813 	bl	6dac <_malloc_usable_size_r>
    6d86:	4285      	cmp	r5, r0
    6d88:	d90e      	bls.n	6da8 <_realloc_r+0x48>
    6d8a:	0029      	movs	r1, r5
    6d8c:	0030      	movs	r0, r6
    6d8e:	f7fe ff17 	bl	5bc0 <_malloc_r>
    6d92:	1e07      	subs	r7, r0, #0
    6d94:	d007      	beq.n	6da6 <_realloc_r+0x46>
    6d96:	0021      	movs	r1, r4
    6d98:	002a      	movs	r2, r5
    6d9a:	f7fe fec1 	bl	5b20 <memcpy>
    6d9e:	0021      	movs	r1, r4
    6da0:	0030      	movs	r0, r6
    6da2:	f7fe fec7 	bl	5b34 <_free_r>
    6da6:	003c      	movs	r4, r7
    6da8:	0020      	movs	r0, r4
    6daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006dac <_malloc_usable_size_r>:
    6dac:	1f0b      	subs	r3, r1, #4
    6dae:	681a      	ldr	r2, [r3, #0]
    6db0:	1f10      	subs	r0, r2, #4
    6db2:	2a00      	cmp	r2, #0
    6db4:	da04      	bge.n	6dc0 <_malloc_usable_size_r+0x14>
    6db6:	1889      	adds	r1, r1, r2
    6db8:	3904      	subs	r1, #4
    6dba:	680b      	ldr	r3, [r1, #0]
    6dbc:	18d0      	adds	r0, r2, r3
    6dbe:	3804      	subs	r0, #4
    6dc0:	4770      	bx	lr
    6dc2:	0000      	movs	r0, r0
    6dc4:	410d0a0d 	.word	0x410d0a0d
    6dc8:	72666164 	.word	0x72666164
    6dcc:	00746975 	.word	0x00746975
    6dd0:	0a313023 	.word	0x0a313023
    6dd4:	00000000 	.word	0x00000000
    6dd8:	00303054 	.word	0x00303054
    6ddc:	00000a4c 	.word	0x00000a4c
    6de0:	64253054 	.word	0x64253054
    6de4:	00000000 	.word	0x00000000
    6de8:	20626f62 	.word	0x20626f62
    6dec:	20736177 	.word	0x20736177
    6df0:	6e756f66 	.word	0x6e756f66
    6df4:	00000064 	.word	0x00000064
    6df8:	204d5750 	.word	0x204d5750
    6dfc:	00006425 	.word	0x00006425
    6e00:	6425203a 	.word	0x6425203a
    6e04:	00000000 	.word	0x00000000
    6e08:	31414846 	.word	0x31414846
    6e0c:	00000000 	.word	0x00000000
    6e10:	00202d20 	.word	0x00202d20
    6e14:	004b4341 	.word	0x004b4341
    6e18:	30414846 	.word	0x30414846
    6e1c:	00000000 	.word	0x00000000
    6e20:	20414b42 	.word	0x20414b42
    6e24:	00000031 	.word	0x00000031
    6e28:	20414b42 	.word	0x20414b42
    6e2c:	00000030 	.word	0x00000030
    6e30:	204c4b42 	.word	0x204c4b42
    6e34:	00000031 	.word	0x00000031
    6e38:	204c4b42 	.word	0x204c4b42
    6e3c:	00000030 	.word	0x00000030
    6e40:	20524b42 	.word	0x20524b42
    6e44:	00000031 	.word	0x00000031
    6e48:	20524b42 	.word	0x20524b42
    6e4c:	00000030 	.word	0x00000030
    6e50:	314e5248 	.word	0x314e5248
    6e54:	00003120 	.word	0x00003120
    6e58:	314e5248 	.word	0x314e5248
    6e5c:	00003020 	.word	0x00003020
    6e60:	324e5248 	.word	0x324e5248
    6e64:	00003120 	.word	0x00003120
    6e68:	324e5248 	.word	0x324e5248
    6e6c:	00003020 	.word	0x00003020
    6e70:	334e5248 	.word	0x334e5248
    6e74:	00003120 	.word	0x00003120
    6e78:	334e5248 	.word	0x334e5248
    6e7c:	00003020 	.word	0x00003020
    6e80:	344e5248 	.word	0x344e5248
    6e84:	00003120 	.word	0x00003120
    6e88:	344e5248 	.word	0x344e5248
    6e8c:	00003020 	.word	0x00003020
    6e90:	00004253 	.word	0x00004253
    6e94:	64254253 	.word	0x64254253
    6e98:	0000000a 	.word	0x0000000a
    6e9c:	53524253 	.word	0x53524253
    6ea0:	32342054 	.word	0x32342054
    6ea4:	00000000 	.word	0x00000000
    6ea8:	203a4253 	.word	0x203a4253
    6eac:	45534552 	.word	0x45534552
    6eb0:	4e495454 	.word	0x4e495454
    6eb4:	00000047 	.word	0x00000047
    6eb8:	20545250 	.word	0x20545250
    6ebc:	00000031 	.word	0x00000031
    6ec0:	20545250 	.word	0x20545250
    6ec4:	00000030 	.word	0x00000030
    6ec8:	20525457 	.word	0x20525457
    6ecc:	00000031 	.word	0x00000031
    6ed0:	20415453 	.word	0x20415453
    6ed4:	00000031 	.word	0x00000031
    6ed8:	20415453 	.word	0x20415453
    6edc:	00000030 	.word	0x00000030
    6ee0:	2044454c 	.word	0x2044454c
    6ee4:	00000031 	.word	0x00000031
    6ee8:	2044454c 	.word	0x2044454c
    6eec:	00000030 	.word	0x00000030
    6ef0:	204c4448 	.word	0x204c4448
    6ef4:	00000031 	.word	0x00000031
    6ef8:	204c4448 	.word	0x204c4448
    6efc:	00000030 	.word	0x00000030
    6f00:	41495242 	.word	0x41495242
    6f04:	0031204e 	.word	0x0031204e
    6f08:	41495242 	.word	0x41495242
    6f0c:	0030204e 	.word	0x0030204e
    6f10:	48534c46 	.word	0x48534c46
    6f14:	00312031 	.word	0x00312031
    6f18:	48534c46 	.word	0x48534c46
    6f1c:	00302031 	.word	0x00302031
    6f20:	48534c46 	.word	0x48534c46
    6f24:	00312032 	.word	0x00312032
    6f28:	48534c46 	.word	0x48534c46
    6f2c:	00302032 	.word	0x00302032
    6f30:	48534c46 	.word	0x48534c46
    6f34:	00312033 	.word	0x00312033
    6f38:	48534c46 	.word	0x48534c46
    6f3c:	00302033 	.word	0x00302033
    6f40:	48534c46 	.word	0x48534c46
    6f44:	31204446 	.word	0x31204446
    6f48:	00000000 	.word	0x00000000
    6f4c:	48534c46 	.word	0x48534c46
    6f50:	30204446 	.word	0x30204446
    6f54:	00000000 	.word	0x00000000
    6f58:	5254534d 	.word	0x5254534d
    6f5c:	20545352 	.word	0x20545352
    6f60:	00003234 	.word	0x00003234
    6f64:	45534552 	.word	0x45534552
    6f68:	43412054 	.word	0x43412054
    6f6c:	00000a4b 	.word	0x00000a4b
    6f70:	52524e4d 	.word	0x52524e4d
    6f74:	34205453 	.word	0x34205453
    6f78:	00000032 	.word	0x00000032
    6f7c:	4f4e494d 	.word	0x4f4e494d
    6f80:	45522052 	.word	0x45522052
    6f84:	20544553 	.word	0x20544553
    6f88:	0a4b4341 	.word	0x0a4b4341
    6f8c:	00000000 	.word	0x00000000
    6f90:	4f4e494d 	.word	0x4f4e494d
    6f94:	45522052 	.word	0x45522052
    6f98:	20544553 	.word	0x20544553
    6f9c:	454e4f44 	.word	0x454e4f44
    6fa0:	0000000a 	.word	0x0000000a
    6fa4:	54545250 	.word	0x54545250
    6fa8:	30485352 	.word	0x30485352
    6fac:	00000000 	.word	0x00000000
    6fb0:	54545250 	.word	0x54545250
    6fb4:	30485352 	.word	0x30485352
    6fb8:	00642520 	.word	0x00642520
    6fbc:	54545250 	.word	0x54545250
    6fc0:	31485352 	.word	0x31485352
    6fc4:	00000000 	.word	0x00000000
    6fc8:	54545250 	.word	0x54545250
    6fcc:	31485352 	.word	0x31485352
    6fd0:	00642520 	.word	0x00642520
    6fd4:	54545250 	.word	0x54545250
    6fd8:	32485352 	.word	0x32485352
    6fdc:	00000000 	.word	0x00000000
    6fe0:	54545250 	.word	0x54545250
    6fe4:	32485352 	.word	0x32485352
    6fe8:	00642520 	.word	0x00642520
    6fec:	54545250 	.word	0x54545250
    6ff0:	33485352 	.word	0x33485352
    6ff4:	00000000 	.word	0x00000000
    6ff8:	54545250 	.word	0x54545250
    6ffc:	33485352 	.word	0x33485352
    7000:	00642520 	.word	0x00642520
    7004:	54545250 	.word	0x54545250
    7008:	34485352 	.word	0x34485352
    700c:	00000000 	.word	0x00000000
    7010:	54545250 	.word	0x54545250
    7014:	34485352 	.word	0x34485352
    7018:	00642520 	.word	0x00642520
    701c:	54545250 	.word	0x54545250
    7020:	35485352 	.word	0x35485352
    7024:	00000000 	.word	0x00000000
    7028:	54545250 	.word	0x54545250
    702c:	35485352 	.word	0x35485352
    7030:	00642520 	.word	0x00642520
    7034:	54545250 	.word	0x54545250
    7038:	36485352 	.word	0x36485352
    703c:	00000000 	.word	0x00000000
    7040:	54545250 	.word	0x54545250
    7044:	36485352 	.word	0x36485352
    7048:	00642520 	.word	0x00642520
    704c:	54545250 	.word	0x54545250
    7050:	37485352 	.word	0x37485352
    7054:	00000000 	.word	0x00000000
    7058:	54545250 	.word	0x54545250
    705c:	37485352 	.word	0x37485352
    7060:	00642520 	.word	0x00642520
    7064:	20564f43 	.word	0x20564f43
    7068:	00000031 	.word	0x00000031
    706c:	20564f43 	.word	0x20564f43
    7070:	00000030 	.word	0x00000030
    7074:	52545250 	.word	0x52545250
    7078:	00313256 	.word	0x00313256
    707c:	52545250 	.word	0x52545250
    7080:	20313256 	.word	0x20313256
    7084:	00006425 	.word	0x00006425
    7088:	52545250 	.word	0x52545250
    708c:	00303256 	.word	0x00303256
    7090:	5254534d 	.word	0x5254534d
    7094:	20545354 	.word	0x20545354
    7098:	00003234 	.word	0x00003234
    709c:	52444441 	.word	0x52444441
    70a0:	6425203a 	.word	0x6425203a
    70a4:	203e2d20 	.word	0x203e2d20
    70a8:	000a6425 	.word	0x000a6425
    70ac:	3a525245 	.word	0x3a525245
    70b0:	25642520 	.word	0x25642520
    70b4:	25642564 	.word	0x25642564
    70b8:	25642564 	.word	0x25642564
    70bc:	25642564 	.word	0x25642564
    70c0:	000a0d64 	.word	0x000a0d64
    70c4:	25203a45 	.word	0x25203a45
    70c8:	202d2064 	.word	0x202d2064
    70cc:	000a6425 	.word	0x000a6425
    70d0:	204c4c41 	.word	0x204c4c41
    70d4:	00004b4f 	.word	0x00004b4f
    70d8:	00002450 	.word	0x00002450
    70dc:	00002462 	.word	0x00002462
    70e0:	00002474 	.word	0x00002474
    70e4:	00002486 	.word	0x00002486
    70e8:	000024a4 	.word	0x000024a4
    70ec:	000024b6 	.word	0x000024b6
    70f0:	000024c8 	.word	0x000024c8
    70f4:	000024da 	.word	0x000024da
    70f8:	000024ec 	.word	0x000024ec
    70fc:	000024fe 	.word	0x000024fe
    7100:	00002510 	.word	0x00002510
    7104:	00002522 	.word	0x00002522
    7108:	00002534 	.word	0x00002534
    710c:	00002588 	.word	0x00002588
    7110:	000025a6 	.word	0x000025a6
    7114:	000025c0 	.word	0x000025c0
    7118:	000025da 	.word	0x000025da
    711c:	000025f4 	.word	0x000025f4
    7120:	0000260e 	.word	0x0000260e
    7124:	00002628 	.word	0x00002628
    7128:	00002666 	.word	0x00002666
    712c:	000026bc 	.word	0x000026bc
    7130:	00002712 	.word	0x00002712
    7134:	00002768 	.word	0x00002768
    7138:	64343025 	.word	0x64343025
    713c:	34302520 	.word	0x34302520
    7140:	30252064 	.word	0x30252064
    7144:	25206434 	.word	0x25206434
    7148:	20643430 	.word	0x20643430
    714c:	64343025 	.word	0x64343025
    7150:	34302520 	.word	0x34302520
    7154:	000a0d64 	.word	0x000a0d64
    7158:	45444e55 	.word	0x45444e55
    715c:	454e4946 	.word	0x454e4946
    7160:	49462044 	.word	0x49462044
    7164:	0000454c 	.word	0x0000454c
    7168:	00412f4e 	.word	0x00412f4e
    716c:	66616441 	.word	0x66616441
    7170:	74697572 	.word	0x74697572
    7174:	20584620 	.word	0x20584620
    7178:	6e756f53 	.word	0x6e756f53
    717c:	6f422064 	.word	0x6f422064
    7180:	00647261 	.word	0x00647261
    7184:	656c6946 	.word	0x656c6946
    7188:	00002073 	.word	0x00002073
    718c:	656c6946 	.word	0x656c6946
    7190:	64252073 	.word	0x64252073
    7194:	00000a0d 	.word	0x00000a0d
    7198:	20544146 	.word	0x20544146
    719c:	00000000 	.word	0x00000000
    71a0:	20544146 	.word	0x20544146
    71a4:	0a0d7825 	.word	0x0a0d7825
    71a8:	00000000 	.word	0x00000000
    71ac:	00000a4c 	.word	0x00000a4c
    71b0:	69466f4e 	.word	0x69466f4e
    71b4:	0000656c 	.word	0x0000656c
    71b8:	656e6f64 	.word	0x656e6f64
    71bc:	00000000 	.word	0x00000000
    71c0:	79616c70 	.word	0x79616c70
    71c4:	00000000 	.word	0x00000000
    71c8:	00564157 	.word	0x00564157
    71cc:	0047474f 	.word	0x0047474f
    71d0:	700d0a0d 	.word	0x700d0a0d
    71d4:	0979616c 	.word	0x0979616c
    71d8:	54096425 	.word	0x54096425
    71dc:	20206425 	.word	0x20206425
    71e0:	25202020 	.word	0x25202020
    71e4:	0a5e5b33 	.word	0x0a5e5b33
    71e8:	0000005d 	.word	0x0000005d
    71ec:	700d0a0d 	.word	0x700d0a0d
    71f0:	0979616c 	.word	0x0979616c
    71f4:	25096425 	.word	0x25096425
    71f8:	20202073 	.word	0x20202073
    71fc:	33252020 	.word	0x33252020
    7200:	5d0a5e5b 	.word	0x5d0a5e5b
    7204:	00000000 	.word	0x00000000
    7208:	000a0d09 	.word	0x000a0d09
    720c:	25733825 	.word	0x25733825
    7210:	64257333 	.word	0x64257333
    7214:	00000009 	.word	0x00000009
    7218:	0a642523 	.word	0x0a642523
    721c:	00000000 	.word	0x00000000
    7220:	00000a71 	.word	0x00000a71
    7224:	0000452e 	.word	0x0000452e
    7228:	000045a6 	.word	0x000045a6
    722c:	000045a6 	.word	0x000045a6
    7230:	0000454c 	.word	0x0000454c
    7234:	00004546 	.word	0x00004546
    7238:	00004552 	.word	0x00004552
    723c:	00004534 	.word	0x00004534
    7240:	00004558 	.word	0x00004558
    7244:	0000458c 	.word	0x0000458c
    7248:	00004680 	.word	0x00004680
    724c:	000046d0 	.word	0x000046d0
    7250:	000046d0 	.word	0x000046d0
    7254:	000046cc 	.word	0x000046cc
    7258:	00004672 	.word	0x00004672
    725c:	00004692 	.word	0x00004692
    7260:	00004662 	.word	0x00004662
    7264:	000046a4 	.word	0x000046a4
    7268:	000046b6 	.word	0x000046b6
    726c:	43455845 	.word	0x43455845
    7270:	44524f20 	.word	0x44524f20
    7274:	36205245 	.word	0x36205245
    7278:	0a36      	.short	0x0a36
    727a:	00          	.byte	0x00
    727b:	43          	.byte	0x43
    727c:	00          	.byte	0x00
    727d:	23          	.byte	0x23
    727e:	302d      	.short	0x302d
    7280:	6800202b 	.word	0x6800202b
    7284:	65004c6c 	.word	0x65004c6c
    7288:	46456766 	.word	0x46456766
    728c:	0047      	.short	0x0047
    728e:	3130      	.short	0x3130
    7290:	35343332 	.word	0x35343332
    7294:	39383736 	.word	0x39383736
    7298:	44434241 	.word	0x44434241
    729c:	30004645 	.word	0x30004645
    72a0:	34333231 	.word	0x34333231
    72a4:	38373635 	.word	0x38373635
    72a8:	63626139 	.word	0x63626139
    72ac:	00666564 	.word	0x00666564
    72b0:	000072ce 	.word	0x000072ce
    72b4:	000072d1 	.word	0x000072d1
    72b8:	000072d4 	.word	0x000072d4
    72bc:	61462d41 	.word	0x61462d41
    72c0:	3938662d 	.word	0x3938662d
    72c4:	33323130 	.word	0x33323130
    72c8:	37363534 	.word	0x37363534
    72cc:	2d2b005d 	.word	0x2d2b005d
    72d0:	00303000 	.word	0x00303000
    72d4:	5878      	.short	0x5878
	...

000072d7 <_ctype_>:
    72d7:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    72e7:	2020 2020 2020 2020 2020 2020 2020 2020                     
    72f7:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    7307:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    7317:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    7327:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    7337:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    7347:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    7357:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000073d8 <__sf_fake_stdin>:
	...

000073f8 <__sf_fake_stdout>:
	...

00007418 <__sf_fake_stderr>:
	...

00007438 <_init>:
    7438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    743a:	46c0      	nop			; (mov r8, r8)
    743c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    743e:	bc08      	pop	{r3}
    7440:	469e      	mov	lr, r3
    7442:	4770      	bx	lr

00007444 <__init_array_start>:
    7444:	000000dd 	.word	0x000000dd

00007448 <_fini>:
    7448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    744a:	46c0      	nop			; (mov r8, r8)
    744c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    744e:	bc08      	pop	{r3}
    7450:	469e      	mov	lr, r3
    7452:	4770      	bx	lr

00007454 <__fini_array_start>:
    7454:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <test_bob>:
2000000c:	5750 004d                                   PWM.

20000010 <bool_map_1>:
	...
20000018:	0100 0000 0000 0000 0000 0001 0000 0000     ................
20000028:	0000 0100 0000 0000 0000 0000 0001 0000     ................
20000038:	0000 0000 0100 0000 0000 0000 0000 0001     ................
20000048:	0000 0000 0000 0100 0000 0000 0000 0001     ................
20000058:	0000 0000 0100 0000 0000 0000 0001 0000     ................
20000068:	0000 0100 0000 0000 0000 0001 0000 0000     ................
20000078:	0100 0000 0000 0000 0001 0000 0000 0000     ................
20000088:	0000 0100 0001 0000 0000 0001 0100 0000     ................
20000098:	0100 0000 0000 0001 0001 0000 0000 0100     ................
200000a8:	0100 0000 0000 0001 0000 0001 0100 0000     ................
200000b8:	0000 0100 0001 0000 0000 0000 0000 0000     ................
200000c8:	0000 0100 0001 0000 0000 0000 0000 0000     ................
200000d8:	0101 0101 0101 0101                         ........

200000e0 <mcp23017_data>:
200000e0:	0000 0000 0020 0000 0000 0000 0000 0000     .... ...........
200000f0:	0001 0000 0021 0000 0000 0000 0000 0000     ....!...........
20000100:	0001 0000 0022 0000 0000 0000 0000 0000     ...."...........
20000110:	0001 0000 0023 0000 0000 0000 0000 0000     ....#...........
20000120:	0001 0000 0024 0000 0000 0000 0000 0000     ....$...........
20000130:	0001 0000 0025 0000 0000 0000 0000 0000     ....%...........
20000140:	0000 0000 0026 0000 0000 0000 0000 0000     ....&...........
20000150:	0000 0000 0027 0000 0000 0000 0000 0000     ....'...........

20000160 <duty_cycle.13731>:
20000160:	003e 0000                                   >...

20000164 <soundboard_instance>:
	...
2000017c:	7158 0000 7168 0000 0000 0000 0000 0000     Xq..hq..........
2000018c:	0001 0000 7158 0000 7168 0000 0000 0000     ....Xq..hq......
2000019c:	0000 0000 0002 0000 7158 0000 7168 0000     ........Xq..hq..
	...
200001b4:	0003 0000 7158 0000 7168 0000 0000 0000     ....Xq..hq......
200001c4:	0000 0000 0004 0000 7158 0000 7168 0000     ........Xq..hq..
	...
200001dc:	0005 0000 7158 0000 7168 0000 0000 0000     ....Xq..hq......
200001ec:	0000 0000 0006 0000 7158 0000 7168 0000     ........Xq..hq..
	...
20000204:	0007 0000 7158 0000 7168 0000 0000 0000     ....Xq..hq......
20000214:	0000 0000 0008 0000 7158 0000 7168 0000     ........Xq..hq..
	...
2000022c:	0009 0000 7158 0000 7168 0000 0000 0000     ....Xq..hq......
2000023c:	0000 0000 000a 0000 7158 0000 7168 0000     ........Xq..hq..
	...
20000254:	000b 0000 7158 0000 7168 0000 0000 0000     ....Xq..hq......
20000264:	0000 0000 000c 0000 7158 0000 7168 0000     ........Xq..hq..
	...
2000027c:	000d 0000 7158 0000 7168 0000 0000 0000     ....Xq..hq......
2000028c:	0000 0000 000e 0000 7158 0000 7168 0000     ........Xq..hq..
	...
200002a4:	000f 0000 7158 0000 7168 0000 0000 0000     ....Xq..hq......
200002b4:	0000 0000 0010 0000 7158 0000 7168 0000     ........Xq..hq..
	...
200002cc:	0011 0000 7158 0000 7168 0000 0000 0000     ....Xq..hq......
200002dc:	0000 0000 0012 0000 7158 0000 7168 0000     ........Xq..hq..
	...
200002f4:	0013 0000 7158 0000 7168 0000 0000 0000     ....Xq..hq......
20000304:	0000 0000 0014 0000 7158 0000 7168 0000     ........Xq..hq..
	...
2000031c:	0015 0000 7158 0000 7168 0000 0000 0000     ....Xq..hq......
2000032c:	0000 0000 0016 0000 7158 0000 7168 0000     ........Xq..hq..
	...
20000344:	0017 0000 7158 0000 7168 0000 0000 0000     ....Xq..hq......
20000354:	0000 0000 0018 0000 7158 0000 7168 0000     ........Xq..hq..
20000364:	0000 0000                                   ....

20000368 <g_interrupt_enabled>:
20000368:	0001 0000                                   ....

2000036c <impure_data>:
2000036c:	0000 0000 73d8 0000 73f8 0000 7418 0000     .....s...s...t..
	...
2000038c:	727b 0000 0000 0000 0000 0000 0000 0000     {r..............
	...

200003cc <_impure_ptr>:
200003cc:	036c 2000                                   l.. 

200003d0 <__ctype_ptr__>:
200003d0:	72d7 0000                                   .r..
