
ElectrifyEverything.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009ccc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00009ccc  00009ccc  00019ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000000fc  20000000  00009cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000027c  200000fc  00009dd0  000200fc  2**2
                  ALLOC
  4 .stack        00002000  20000378  0000a04c  000200fc  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
  7 .debug_info   000401a3  00000000  00000000  0002017d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000046c6  00000000  00000000  00060320  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003806  00000000  00000000  000649e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ac8  00000000  00000000  000681ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000918  00000000  00000000  00068cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001de00  00000000  00000000  000695cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013dde  00000000  00000000  000873cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008a3e9  00000000  00000000  0009b1aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002b64  00000000  00000000  00125594  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002378 	.word	0x20002378
       4:	00005d9d 	.word	0x00005d9d
       8:	00005e95 	.word	0x00005e95
       c:	00005e95 	.word	0x00005e95
	...
      2c:	00005e95 	.word	0x00005e95
	...
      38:	00005e95 	.word	0x00005e95
      3c:	00005e95 	.word	0x00005e95
      40:	00005e95 	.word	0x00005e95
      44:	00005e95 	.word	0x00005e95
      48:	00001d61 	.word	0x00001d61
      4c:	00005e95 	.word	0x00005e95
      50:	00000a29 	.word	0x00000a29
      54:	00005e95 	.word	0x00005e95
      58:	00005e95 	.word	0x00005e95
      5c:	00005e95 	.word	0x00005e95
      60:	00005e95 	.word	0x00005e95
      64:	00005e95 	.word	0x00005e95
      68:	00005e95 	.word	0x00005e95
      6c:	00002085 	.word	0x00002085
      70:	00005e95 	.word	0x00005e95
      74:	00005e95 	.word	0x00005e95
      78:	00005e95 	.word	0x00005e95
      7c:	00005e95 	.word	0x00005e95
      80:	00005e95 	.word	0x00005e95
      84:	00005e95 	.word	0x00005e95
      88:	00004969 	.word	0x00004969
      8c:	00005e95 	.word	0x00005e95
      90:	00005e95 	.word	0x00005e95
	...
      9c:	00005e95 	.word	0x00005e95
      a0:	00005e95 	.word	0x00005e95
      a4:	00005e95 	.word	0x00005e95
      a8:	00005e95 	.word	0x00005e95
      ac:	00005e95 	.word	0x00005e95
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000fc 	.word	0x200000fc
      d4:	00000000 	.word	0x00000000
      d8:	00009cd4 	.word	0x00009cd4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000100 	.word	0x20000100
     108:	00009cd4 	.word	0x00009cd4
     10c:	00009cd4 	.word	0x00009cd4
     110:	00000000 	.word	0x00000000

00000114 <wdt_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void wdt_get_config_defaults(
		struct wdt_conf *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
     122:	687b      	ldr	r3, [r7, #4]
     124:	2201      	movs	r2, #1
     126:	705a      	strb	r2, [r3, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21) && !(SAMR30)
	config->clock_source         = GCLK_GENERATOR_4;
     128:	687b      	ldr	r3, [r7, #4]
     12a:	2204      	movs	r2, #4
     12c:	709a      	strb	r2, [r3, #2]
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
     12e:	687b      	ldr	r3, [r7, #4]
     130:	220c      	movs	r2, #12
     132:	70da      	strb	r2, [r3, #3]
	config->window_period        = WDT_PERIOD_NONE;
     134:	687b      	ldr	r3, [r7, #4]
     136:	2200      	movs	r2, #0
     138:	711a      	strb	r2, [r3, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
     13a:	687b      	ldr	r3, [r7, #4]
     13c:	2200      	movs	r2, #0
     13e:	715a      	strb	r2, [r3, #5]
}
     140:	46c0      	nop			; (mov r8, r8)
     142:	46bd      	mov	sp, r7
     144:	b002      	add	sp, #8
     146:	bd80      	pop	{r7, pc}

00000148 <wdt_init>:
 *  Author: Andreas
 */ 
#include "wdt.h"

void wdt_init()
{
     148:	b580      	push	{r7, lr}
     14a:	b082      	sub	sp, #8
     14c:	af00      	add	r7, sp, #0
	struct wdt_conf config_wdt;
	wdt_get_config_defaults(&config_wdt);
     14e:	003b      	movs	r3, r7
     150:	0018      	movs	r0, r3
     152:	4b09      	ldr	r3, [pc, #36]	; (178 <wdt_init+0x30>)
     154:	4798      	blx	r3
	
	config_wdt.always_on = false;
     156:	003b      	movs	r3, r7
     158:	2200      	movs	r2, #0
     15a:	701a      	strb	r2, [r3, #0]
	config_wdt.timeout_period = WDT_PERIOD_4096CLK;
     15c:	003b      	movs	r3, r7
     15e:	220a      	movs	r2, #10
     160:	70da      	strb	r2, [r3, #3]
	config_wdt.early_warning_period = WDT_PERIOD_2048CLK;
     162:	003b      	movs	r3, r7
     164:	2209      	movs	r2, #9
     166:	715a      	strb	r2, [r3, #5]
	
	wdt_set_config(&config_wdt);
     168:	003b      	movs	r3, r7
     16a:	0018      	movs	r0, r3
     16c:	4b03      	ldr	r3, [pc, #12]	; (17c <wdt_init+0x34>)
     16e:	4798      	blx	r3
	//wdt_init_cb();
}
     170:	46c0      	nop			; (mov r8, r8)
     172:	46bd      	mov	sp, r7
     174:	b002      	add	sp, #8
     176:	bd80      	pop	{r7, pc}
     178:	00000115 	.word	0x00000115
     17c:	00001bcd 	.word	0x00001bcd

00000180 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
     180:	b580      	push	{r7, lr}
     182:	af00      	add	r7, sp, #0
}
     184:	46c0      	nop			; (mov r8, r8)
     186:	46bd      	mov	sp, r7
     188:	bd80      	pop	{r7, pc}
     18a:	46c0      	nop			; (mov r8, r8)

0000018c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     18c:	b580      	push	{r7, lr}
     18e:	b082      	sub	sp, #8
     190:	af00      	add	r7, sp, #0
     192:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     194:	687b      	ldr	r3, [r7, #4]
     196:	2200      	movs	r2, #0
     198:	701a      	strb	r2, [r3, #0]
}
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	46bd      	mov	sp, r7
     19e:	b002      	add	sp, #8
     1a0:	bd80      	pop	{r7, pc}
     1a2:	46c0      	nop			; (mov r8, r8)

000001a4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     1a4:	b580      	push	{r7, lr}
     1a6:	b082      	sub	sp, #8
     1a8:	af00      	add	r7, sp, #0
     1aa:	0002      	movs	r2, r0
     1ac:	6039      	str	r1, [r7, #0]
     1ae:	1dfb      	adds	r3, r7, #7
     1b0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     1b2:	1dfb      	adds	r3, r7, #7
     1b4:	781b      	ldrb	r3, [r3, #0]
     1b6:	2b01      	cmp	r3, #1
     1b8:	d00a      	beq.n	1d0 <system_apb_clock_set_mask+0x2c>
     1ba:	2b02      	cmp	r3, #2
     1bc:	d00f      	beq.n	1de <system_apb_clock_set_mask+0x3a>
     1be:	2b00      	cmp	r3, #0
     1c0:	d114      	bne.n	1ec <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     1c2:	4b0e      	ldr	r3, [pc, #56]	; (1fc <system_apb_clock_set_mask+0x58>)
     1c4:	4a0d      	ldr	r2, [pc, #52]	; (1fc <system_apb_clock_set_mask+0x58>)
     1c6:	6991      	ldr	r1, [r2, #24]
     1c8:	683a      	ldr	r2, [r7, #0]
     1ca:	430a      	orrs	r2, r1
     1cc:	619a      	str	r2, [r3, #24]
			break;
     1ce:	e00f      	b.n	1f0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     1d0:	4b0a      	ldr	r3, [pc, #40]	; (1fc <system_apb_clock_set_mask+0x58>)
     1d2:	4a0a      	ldr	r2, [pc, #40]	; (1fc <system_apb_clock_set_mask+0x58>)
     1d4:	69d1      	ldr	r1, [r2, #28]
     1d6:	683a      	ldr	r2, [r7, #0]
     1d8:	430a      	orrs	r2, r1
     1da:	61da      	str	r2, [r3, #28]
			break;
     1dc:	e008      	b.n	1f0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1de:	4b07      	ldr	r3, [pc, #28]	; (1fc <system_apb_clock_set_mask+0x58>)
     1e0:	4a06      	ldr	r2, [pc, #24]	; (1fc <system_apb_clock_set_mask+0x58>)
     1e2:	6a11      	ldr	r1, [r2, #32]
     1e4:	683a      	ldr	r2, [r7, #0]
     1e6:	430a      	orrs	r2, r1
     1e8:	621a      	str	r2, [r3, #32]
			break;
     1ea:	e001      	b.n	1f0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     1ec:	2317      	movs	r3, #23
     1ee:	e000      	b.n	1f2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     1f0:	2300      	movs	r3, #0
}
     1f2:	0018      	movs	r0, r3
     1f4:	46bd      	mov	sp, r7
     1f6:	b002      	add	sp, #8
     1f8:	bd80      	pop	{r7, pc}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	40000400 	.word	0x40000400

00000200 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     200:	b580      	push	{r7, lr}
     202:	b082      	sub	sp, #8
     204:	af00      	add	r7, sp, #0
     206:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     208:	687b      	ldr	r3, [r7, #4]
     20a:	2280      	movs	r2, #128	; 0x80
     20c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     20e:	687b      	ldr	r3, [r7, #4]
     210:	2200      	movs	r2, #0
     212:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     214:	687b      	ldr	r3, [r7, #4]
     216:	2201      	movs	r2, #1
     218:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     21a:	687b      	ldr	r3, [r7, #4]
     21c:	2200      	movs	r2, #0
     21e:	70da      	strb	r2, [r3, #3]
}
     220:	46c0      	nop			; (mov r8, r8)
     222:	46bd      	mov	sp, r7
     224:	b002      	add	sp, #8
     226:	bd80      	pop	{r7, pc}

00000228 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     228:	b580      	push	{r7, lr}
     22a:	b082      	sub	sp, #8
     22c:	af00      	add	r7, sp, #0
     22e:	0002      	movs	r2, r0
     230:	1dfb      	adds	r3, r7, #7
     232:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     234:	1dfb      	adds	r3, r7, #7
     236:	781b      	ldrb	r3, [r3, #0]
     238:	2b00      	cmp	r3, #0
     23a:	d002      	beq.n	242 <system_voltage_reference_enable+0x1a>
     23c:	2b01      	cmp	r3, #1
     23e:	d007      	beq.n	250 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
     240:	e00d      	b.n	25e <system_voltage_reference_enable+0x36>
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     242:	4b08      	ldr	r3, [pc, #32]	; (264 <system_voltage_reference_enable+0x3c>)
     244:	4a07      	ldr	r2, [pc, #28]	; (264 <system_voltage_reference_enable+0x3c>)
     246:	6c12      	ldr	r2, [r2, #64]	; 0x40
     248:	2102      	movs	r1, #2
     24a:	430a      	orrs	r2, r1
     24c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     24e:	e006      	b.n	25e <system_voltage_reference_enable+0x36>

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     250:	4b04      	ldr	r3, [pc, #16]	; (264 <system_voltage_reference_enable+0x3c>)
     252:	4a04      	ldr	r2, [pc, #16]	; (264 <system_voltage_reference_enable+0x3c>)
     254:	6c12      	ldr	r2, [r2, #64]	; 0x40
     256:	2104      	movs	r1, #4
     258:	430a      	orrs	r2, r1
     25a:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     25c:	46c0      	nop			; (mov r8, r8)

		default:
			Assert(false);
			return;
	}
}
     25e:	46bd      	mov	sp, r7
     260:	b002      	add	sp, #8
     262:	bd80      	pop	{r7, pc}
     264:	40000800 	.word	0x40000800

00000268 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     268:	b580      	push	{r7, lr}
     26a:	b084      	sub	sp, #16
     26c:	af00      	add	r7, sp, #0
     26e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     270:	687b      	ldr	r3, [r7, #4]
     272:	681b      	ldr	r3, [r3, #0]
     274:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     276:	68fb      	ldr	r3, [r7, #12]
     278:	7e5b      	ldrb	r3, [r3, #25]
     27a:	b2db      	uxtb	r3, r3
     27c:	b25b      	sxtb	r3, r3
     27e:	2b00      	cmp	r3, #0
     280:	da01      	bge.n	286 <adc_is_syncing+0x1e>
		return true;
     282:	2301      	movs	r3, #1
     284:	e000      	b.n	288 <adc_is_syncing+0x20>
	}

	return false;
     286:	2300      	movs	r3, #0
}
     288:	0018      	movs	r0, r3
     28a:	46bd      	mov	sp, r7
     28c:	b004      	add	sp, #16
     28e:	bd80      	pop	{r7, pc}

00000290 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     290:	b580      	push	{r7, lr}
     292:	b082      	sub	sp, #8
     294:	af00      	add	r7, sp, #0
     296:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     298:	687b      	ldr	r3, [r7, #4]
     29a:	2200      	movs	r2, #0
     29c:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     29e:	687b      	ldr	r3, [r7, #4]
     2a0:	2200      	movs	r2, #0
     2a2:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     2a4:	687b      	ldr	r3, [r7, #4]
     2a6:	2200      	movs	r2, #0
     2a8:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	2200      	movs	r2, #0
     2ae:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     2b0:	687b      	ldr	r3, [r7, #4]
     2b2:	2200      	movs	r2, #0
     2b4:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     2b6:	687b      	ldr	r3, [r7, #4]
     2b8:	2200      	movs	r2, #0
     2ba:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     2bc:	687b      	ldr	r3, [r7, #4]
     2be:	2200      	movs	r2, #0
     2c0:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     2c2:	687b      	ldr	r3, [r7, #4]
     2c4:	2200      	movs	r2, #0
     2c6:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     2c8:	687b      	ldr	r3, [r7, #4]
     2ca:	2200      	movs	r2, #0
     2cc:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     2ce:	687b      	ldr	r3, [r7, #4]
     2d0:	22c0      	movs	r2, #192	; 0xc0
     2d2:	0152      	lsls	r2, r2, #5
     2d4:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     2d6:	687b      	ldr	r3, [r7, #4]
     2d8:	2200      	movs	r2, #0
     2da:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     2dc:	687b      	ldr	r3, [r7, #4]
     2de:	2200      	movs	r2, #0
     2e0:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
     2e2:	687b      	ldr	r3, [r7, #4]
     2e4:	2200      	movs	r2, #0
     2e6:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	2200      	movs	r2, #0
     2ec:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
     2ee:	687b      	ldr	r3, [r7, #4]
     2f0:	2200      	movs	r2, #0
     2f2:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     2f4:	687b      	ldr	r3, [r7, #4]
     2f6:	222a      	movs	r2, #42	; 0x2a
     2f8:	2100      	movs	r1, #0
     2fa:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	2200      	movs	r2, #0
     300:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
     302:	687b      	ldr	r3, [r7, #4]
     304:	2200      	movs	r2, #0
     306:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
     308:	687b      	ldr	r3, [r7, #4]
     30a:	2224      	movs	r2, #36	; 0x24
     30c:	2100      	movs	r1, #0
     30e:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     310:	687b      	ldr	r3, [r7, #4]
     312:	2200      	movs	r2, #0
     314:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     316:	687b      	ldr	r3, [r7, #4]
     318:	2200      	movs	r2, #0
     31a:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	2200      	movs	r2, #0
     320:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
     322:	687b      	ldr	r3, [r7, #4]
     324:	222b      	movs	r2, #43	; 0x2b
     326:	2100      	movs	r1, #0
     328:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
     32a:	687b      	ldr	r3, [r7, #4]
     32c:	222c      	movs	r2, #44	; 0x2c
     32e:	2100      	movs	r1, #0
     330:	5499      	strb	r1, [r3, r2]
}
     332:	46c0      	nop			; (mov r8, r8)
     334:	46bd      	mov	sp, r7
     336:	b002      	add	sp, #8
     338:	bd80      	pop	{r7, pc}
     33a:	46c0      	nop			; (mov r8, r8)

0000033c <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     33c:	b580      	push	{r7, lr}
     33e:	b098      	sub	sp, #96	; 0x60
     340:	af00      	add	r7, sp, #0
     342:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     344:	230c      	movs	r3, #12
     346:	18fa      	adds	r2, r7, r3
     348:	4b15      	ldr	r3, [pc, #84]	; (3a0 <_adc_configure_ain_pin+0x64>)
     34a:	0010      	movs	r0, r2
     34c:	0019      	movs	r1, r3
     34e:	2350      	movs	r3, #80	; 0x50
     350:	001a      	movs	r2, r3
     352:	4b14      	ldr	r3, [pc, #80]	; (3a4 <_adc_configure_ain_pin+0x68>)
     354:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     356:	4b14      	ldr	r3, [pc, #80]	; (3a8 <_adc_configure_ain_pin+0x6c>)
     358:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	2b13      	cmp	r3, #19
     35e:	d81a      	bhi.n	396 <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     360:	230c      	movs	r3, #12
     362:	18fb      	adds	r3, r7, r3
     364:	687a      	ldr	r2, [r7, #4]
     366:	0092      	lsls	r2, r2, #2
     368:	58d3      	ldr	r3, [r2, r3]
     36a:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     36c:	2308      	movs	r3, #8
     36e:	18fb      	adds	r3, r7, r3
     370:	0018      	movs	r0, r3
     372:	4b0e      	ldr	r3, [pc, #56]	; (3ac <_adc_configure_ain_pin+0x70>)
     374:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     376:	2308      	movs	r3, #8
     378:	18fb      	adds	r3, r7, r3
     37a:	2200      	movs	r2, #0
     37c:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     37e:	2308      	movs	r3, #8
     380:	18fb      	adds	r3, r7, r3
     382:	2201      	movs	r2, #1
     384:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     388:	b2db      	uxtb	r3, r3
     38a:	2208      	movs	r2, #8
     38c:	18ba      	adds	r2, r7, r2
     38e:	0011      	movs	r1, r2
     390:	0018      	movs	r0, r3
     392:	4b07      	ldr	r3, [pc, #28]	; (3b0 <_adc_configure_ain_pin+0x74>)
     394:	4798      	blx	r3
	}
}
     396:	46c0      	nop			; (mov r8, r8)
     398:	46bd      	mov	sp, r7
     39a:	b018      	add	sp, #96	; 0x60
     39c:	bd80      	pop	{r7, pc}
     39e:	46c0      	nop			; (mov r8, r8)
     3a0:	000094bc 	.word	0x000094bc
     3a4:	00008279 	.word	0x00008279
     3a8:	0000ffff 	.word	0x0000ffff
     3ac:	00000201 	.word	0x00000201
     3b0:	00005d15 	.word	0x00005d15

000003b4 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b6:	b089      	sub	sp, #36	; 0x24
     3b8:	af00      	add	r7, sp, #0
     3ba:	6078      	str	r0, [r7, #4]
     3bc:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
     3be:	231f      	movs	r3, #31
     3c0:	18fb      	adds	r3, r7, r3
     3c2:	2200      	movs	r2, #0
     3c4:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     3c6:	2310      	movs	r3, #16
     3c8:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3ca:	2317      	movs	r3, #23
     3cc:	18fb      	adds	r3, r7, r3
     3ce:	2200      	movs	r2, #0
     3d0:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     3d2:	687b      	ldr	r3, [r7, #4]
     3d4:	681b      	ldr	r3, [r3, #0]
     3d6:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     3d8:	230c      	movs	r3, #12
     3da:	18fb      	adds	r3, r7, r3
     3dc:	0018      	movs	r0, r3
     3de:	4bce      	ldr	r3, [pc, #824]	; (718 <_adc_set_config+0x364>)
     3e0:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     3e2:	683b      	ldr	r3, [r7, #0]
     3e4:	781a      	ldrb	r2, [r3, #0]
     3e6:	230c      	movs	r3, #12
     3e8:	18fb      	adds	r3, r7, r3
     3ea:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     3ec:	230c      	movs	r3, #12
     3ee:	18fb      	adds	r3, r7, r3
     3f0:	0019      	movs	r1, r3
     3f2:	201e      	movs	r0, #30
     3f4:	4bc9      	ldr	r3, [pc, #804]	; (71c <_adc_set_config+0x368>)
     3f6:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     3f8:	201e      	movs	r0, #30
     3fa:	4bc9      	ldr	r3, [pc, #804]	; (720 <_adc_set_config+0x36c>)
     3fc:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     3fe:	683b      	ldr	r3, [r7, #0]
     400:	222c      	movs	r2, #44	; 0x2c
     402:	5c9b      	ldrb	r3, [r3, r2]
     404:	2b00      	cmp	r3, #0
     406:	d040      	beq.n	48a <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
     408:	2316      	movs	r3, #22
     40a:	18fb      	adds	r3, r7, r3
     40c:	683a      	ldr	r2, [r7, #0]
     40e:	212b      	movs	r1, #43	; 0x2b
     410:	5c52      	ldrb	r2, [r2, r1]
     412:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     414:	683b      	ldr	r3, [r7, #0]
     416:	7b19      	ldrb	r1, [r3, #12]
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     418:	2315      	movs	r3, #21
     41a:	18fb      	adds	r3, r7, r3
     41c:	2216      	movs	r2, #22
     41e:	18ba      	adds	r2, r7, r2
     420:	7812      	ldrb	r2, [r2, #0]
     422:	188a      	adds	r2, r1, r2
     424:	701a      	strb	r2, [r3, #0]
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
     426:	683b      	ldr	r3, [r7, #0]
     428:	222c      	movs	r2, #44	; 0x2c
     42a:	5c99      	ldrb	r1, [r3, r2]
	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     42c:	230f      	movs	r3, #15
     42e:	18fb      	adds	r3, r7, r3
     430:	2215      	movs	r2, #21
     432:	18ba      	adds	r2, r7, r2
     434:	7812      	ldrb	r2, [r2, #0]
     436:	188a      	adds	r2, r1, r2
     438:	701a      	strb	r2, [r3, #0]
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     43a:	e018      	b.n	46e <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     43c:	2316      	movs	r3, #22
     43e:	18fb      	adds	r3, r7, r3
     440:	781b      	ldrb	r3, [r3, #0]
     442:	220f      	movs	r2, #15
     444:	4013      	ands	r3, r2
     446:	683a      	ldr	r2, [r7, #0]
     448:	7b12      	ldrb	r2, [r2, #12]
     44a:	189b      	adds	r3, r3, r2
     44c:	0018      	movs	r0, r3
     44e:	4bb5      	ldr	r3, [pc, #724]	; (724 <_adc_set_config+0x370>)
     450:	4798      	blx	r3
			start_pin++;
     452:	2315      	movs	r3, #21
     454:	18fb      	adds	r3, r7, r3
     456:	781a      	ldrb	r2, [r3, #0]
     458:	2315      	movs	r3, #21
     45a:	18fb      	adds	r3, r7, r3
     45c:	3201      	adds	r2, #1
     45e:	701a      	strb	r2, [r3, #0]
			offset++;
     460:	2316      	movs	r3, #22
     462:	18fb      	adds	r3, r7, r3
     464:	781a      	ldrb	r2, [r3, #0]
     466:	2316      	movs	r3, #22
     468:	18fb      	adds	r3, r7, r3
     46a:	3201      	adds	r2, #1
     46c:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     46e:	2315      	movs	r3, #21
     470:	18fa      	adds	r2, r7, r3
     472:	230f      	movs	r3, #15
     474:	18fb      	adds	r3, r7, r3
     476:	7812      	ldrb	r2, [r2, #0]
     478:	781b      	ldrb	r3, [r3, #0]
     47a:	429a      	cmp	r2, r3
     47c:	d3de      	bcc.n	43c <_adc_set_config+0x88>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     47e:	683b      	ldr	r3, [r7, #0]
     480:	89db      	ldrh	r3, [r3, #14]
     482:	0018      	movs	r0, r3
     484:	4ba7      	ldr	r3, [pc, #668]	; (724 <_adc_set_config+0x370>)
     486:	4798      	blx	r3
     488:	e009      	b.n	49e <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
     48a:	683b      	ldr	r3, [r7, #0]
     48c:	7b1b      	ldrb	r3, [r3, #12]
     48e:	0018      	movs	r0, r3
     490:	4ba4      	ldr	r3, [pc, #656]	; (724 <_adc_set_config+0x370>)
     492:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
     494:	683b      	ldr	r3, [r7, #0]
     496:	89db      	ldrh	r3, [r3, #14]
     498:	0018      	movs	r0, r3
     49a:	4ba2      	ldr	r3, [pc, #648]	; (724 <_adc_set_config+0x370>)
     49c:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     49e:	683b      	ldr	r3, [r7, #0]
     4a0:	7d5b      	ldrb	r3, [r3, #21]
     4a2:	009b      	lsls	r3, r3, #2
     4a4:	b2da      	uxtb	r2, r3
     4a6:	693b      	ldr	r3, [r7, #16]
     4a8:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     4aa:	683b      	ldr	r3, [r7, #0]
     4ac:	7d9b      	ldrb	r3, [r3, #22]
     4ae:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     4b0:	b25a      	sxtb	r2, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);
     4b2:	683b      	ldr	r3, [r7, #0]
     4b4:	785b      	ldrb	r3, [r3, #1]

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     4b6:	b25b      	sxtb	r3, r3
     4b8:	4313      	orrs	r3, r2
     4ba:	b25b      	sxtb	r3, r3
     4bc:	b2da      	uxtb	r2, r3
     4be:	693b      	ldr	r3, [r7, #16]
     4c0:	705a      	strb	r2, [r3, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     4c2:	683b      	ldr	r3, [r7, #0]
     4c4:	791b      	ldrb	r3, [r3, #4]
     4c6:	2b34      	cmp	r3, #52	; 0x34
     4c8:	d846      	bhi.n	558 <_adc_set_config+0x1a4>
     4ca:	009a      	lsls	r2, r3, #2
     4cc:	4b96      	ldr	r3, [pc, #600]	; (728 <_adc_set_config+0x374>)
     4ce:	18d3      	adds	r3, r2, r3
     4d0:	681b      	ldr	r3, [r3, #0]
     4d2:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     4d4:	231f      	movs	r3, #31
     4d6:	18fb      	adds	r3, r7, r3
     4d8:	683a      	ldr	r2, [r7, #0]
     4da:	7c52      	ldrb	r2, [r2, #17]
     4dc:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     4de:	2317      	movs	r3, #23
     4e0:	18fb      	adds	r3, r7, r3
     4e2:	683a      	ldr	r2, [r7, #0]
     4e4:	7c12      	ldrb	r2, [r2, #16]
     4e6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4e8:	2310      	movs	r3, #16
     4ea:	61bb      	str	r3, [r7, #24]
		break;
     4ec:	e036      	b.n	55c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     4ee:	231f      	movs	r3, #31
     4f0:	18fb      	adds	r3, r7, r3
     4f2:	2201      	movs	r2, #1
     4f4:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     4f6:	2317      	movs	r3, #23
     4f8:	18fb      	adds	r3, r7, r3
     4fa:	2202      	movs	r2, #2
     4fc:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4fe:	2310      	movs	r3, #16
     500:	61bb      	str	r3, [r7, #24]
		break;
     502:	e02b      	b.n	55c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     504:	231f      	movs	r3, #31
     506:	18fb      	adds	r3, r7, r3
     508:	2202      	movs	r2, #2
     50a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     50c:	2317      	movs	r3, #23
     50e:	18fb      	adds	r3, r7, r3
     510:	2204      	movs	r2, #4
     512:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     514:	2310      	movs	r3, #16
     516:	61bb      	str	r3, [r7, #24]
		break;
     518:	e020      	b.n	55c <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     51a:	231f      	movs	r3, #31
     51c:	18fb      	adds	r3, r7, r3
     51e:	2201      	movs	r2, #1
     520:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     522:	2317      	movs	r3, #23
     524:	18fb      	adds	r3, r7, r3
     526:	2206      	movs	r2, #6
     528:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     52a:	2310      	movs	r3, #16
     52c:	61bb      	str	r3, [r7, #24]
		break;
     52e:	e015      	b.n	55c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     530:	231f      	movs	r3, #31
     532:	18fb      	adds	r3, r7, r3
     534:	2200      	movs	r2, #0
     536:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     538:	2317      	movs	r3, #23
     53a:	18fb      	adds	r3, r7, r3
     53c:	2208      	movs	r2, #8
     53e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     540:	2310      	movs	r3, #16
     542:	61bb      	str	r3, [r7, #24]
		break;
     544:	e00a      	b.n	55c <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     546:	2330      	movs	r3, #48	; 0x30
     548:	61bb      	str	r3, [r7, #24]
		break;
     54a:	e007      	b.n	55c <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     54c:	2320      	movs	r3, #32
     54e:	61bb      	str	r3, [r7, #24]
		break;
     550:	e004      	b.n	55c <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     552:	2300      	movs	r3, #0
     554:	61bb      	str	r3, [r7, #24]
		break;
     556:	e001      	b.n	55c <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     558:	2317      	movs	r3, #23
     55a:	e1ae      	b.n	8ba <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     55c:	231f      	movs	r3, #31
     55e:	18fb      	adds	r3, r7, r3
     560:	781b      	ldrb	r3, [r3, #0]
     562:	011b      	lsls	r3, r3, #4
     564:	b2db      	uxtb	r3, r3
     566:	2270      	movs	r2, #112	; 0x70
     568:	4013      	ands	r3, r2
     56a:	b2da      	uxtb	r2, r3
     56c:	2317      	movs	r3, #23
     56e:	18fb      	adds	r3, r7, r3
     570:	781b      	ldrb	r3, [r3, #0]
     572:	4313      	orrs	r3, r2
     574:	b2da      	uxtb	r2, r3
     576:	693b      	ldr	r3, [r7, #16]
     578:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     57a:	683b      	ldr	r3, [r7, #0]
     57c:	7ddb      	ldrb	r3, [r3, #23]
     57e:	2b3f      	cmp	r3, #63	; 0x3f
     580:	d901      	bls.n	586 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
     582:	2317      	movs	r3, #23
     584:	e199      	b.n	8ba <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
     586:	683b      	ldr	r3, [r7, #0]
     588:	7dda      	ldrb	r2, [r3, #23]
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     58a:	693b      	ldr	r3, [r7, #16]
     58c:	70da      	strb	r2, [r3, #3]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     58e:	46c0      	nop			; (mov r8, r8)
     590:	687b      	ldr	r3, [r7, #4]
     592:	0018      	movs	r0, r3
     594:	4b65      	ldr	r3, [pc, #404]	; (72c <_adc_set_config+0x378>)
     596:	4798      	blx	r3
     598:	1e03      	subs	r3, r0, #0
     59a:	d1f9      	bne.n	590 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
     59c:	683b      	ldr	r3, [r7, #0]
     59e:	885a      	ldrh	r2, [r3, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     5a0:	69bb      	ldr	r3, [r7, #24]
     5a2:	b29b      	uxth	r3, r3
     5a4:	4313      	orrs	r3, r2
     5a6:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     5a8:	683b      	ldr	r3, [r7, #0]
     5aa:	2124      	movs	r1, #36	; 0x24
     5ac:	5c5b      	ldrb	r3, [r3, r1]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     5ae:	b29b      	uxth	r3, r3
     5b0:	00db      	lsls	r3, r3, #3
     5b2:	b29b      	uxth	r3, r3
     5b4:	4313      	orrs	r3, r2
     5b6:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     5b8:	683b      	ldr	r3, [r7, #0]
     5ba:	7d1b      	ldrb	r3, [r3, #20]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     5bc:	b29b      	uxth	r3, r3
     5be:	009b      	lsls	r3, r3, #2
     5c0:	b29b      	uxth	r3, r3
     5c2:	4313      	orrs	r3, r2
     5c4:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     5c6:	683b      	ldr	r3, [r7, #0]
     5c8:	7c9b      	ldrb	r3, [r3, #18]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     5ca:	b29b      	uxth	r3, r3
     5cc:	18db      	adds	r3, r3, r3
     5ce:	b29b      	uxth	r3, r3
     5d0:	4313      	orrs	r3, r2
     5d2:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     5d4:	683b      	ldr	r3, [r7, #0]
     5d6:	7cdb      	ldrb	r3, [r3, #19]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     5d8:	b29b      	uxth	r3, r3
     5da:	4313      	orrs	r3, r2
     5dc:	b29a      	uxth	r2, r3
     5de:	693b      	ldr	r3, [r7, #16]
     5e0:	809a      	strh	r2, [r3, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     5e2:	683b      	ldr	r3, [r7, #0]
     5e4:	7e1b      	ldrb	r3, [r3, #24]
     5e6:	2b00      	cmp	r3, #0
     5e8:	d100      	bne.n	5ec <_adc_set_config+0x238>
     5ea:	e0c4      	b.n	776 <_adc_set_config+0x3c2>
		switch (resolution) {
     5ec:	69bb      	ldr	r3, [r7, #24]
     5ee:	2b10      	cmp	r3, #16
     5f0:	d100      	bne.n	5f4 <_adc_set_config+0x240>
     5f2:	e076      	b.n	6e2 <_adc_set_config+0x32e>
     5f4:	d802      	bhi.n	5fc <_adc_set_config+0x248>
     5f6:	2b00      	cmp	r3, #0
     5f8:	d04d      	beq.n	696 <_adc_set_config+0x2e2>
     5fa:	e0bc      	b.n	776 <_adc_set_config+0x3c2>
     5fc:	2b20      	cmp	r3, #32
     5fe:	d023      	beq.n	648 <_adc_set_config+0x294>
     600:	2b30      	cmp	r3, #48	; 0x30
     602:	d000      	beq.n	606 <_adc_set_config+0x252>
     604:	e0b7      	b.n	776 <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     606:	683b      	ldr	r3, [r7, #0]
     608:	7cdb      	ldrb	r3, [r3, #19]
     60a:	2b00      	cmp	r3, #0
     60c:	d011      	beq.n	632 <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
     60e:	683b      	ldr	r3, [r7, #0]
     610:	69db      	ldr	r3, [r3, #28]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     612:	2b7f      	cmp	r3, #127	; 0x7f
     614:	dc0b      	bgt.n	62e <_adc_set_config+0x27a>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     616:	683b      	ldr	r3, [r7, #0]
     618:	69db      	ldr	r3, [r3, #28]
	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
     61a:	3380      	adds	r3, #128	; 0x80
     61c:	db07      	blt.n	62e <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
     61e:	683b      	ldr	r3, [r7, #0]
     620:	6a1b      	ldr	r3, [r3, #32]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     622:	2b7f      	cmp	r3, #127	; 0x7f
     624:	dc03      	bgt.n	62e <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
     626:	683b      	ldr	r3, [r7, #0]
     628:	6a1b      	ldr	r3, [r3, #32]
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
     62a:	3380      	adds	r3, #128	; 0x80
     62c:	da01      	bge.n	632 <_adc_set_config+0x27e>
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     62e:	2317      	movs	r3, #23
     630:	e143      	b.n	8ba <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
     632:	683b      	ldr	r3, [r7, #0]
     634:	69db      	ldr	r3, [r3, #28]
     636:	2bff      	cmp	r3, #255	; 0xff
     638:	dc04      	bgt.n	644 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
     63a:	683b      	ldr	r3, [r7, #0]
     63c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     63e:	2bff      	cmp	r3, #255	; 0xff
     640:	dc00      	bgt.n	644 <_adc_set_config+0x290>
     642:	e091      	b.n	768 <_adc_set_config+0x3b4>
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     644:	2317      	movs	r3, #23
     646:	e138      	b.n	8ba <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     648:	683b      	ldr	r3, [r7, #0]
     64a:	7cdb      	ldrb	r3, [r3, #19]
     64c:	2b00      	cmp	r3, #0
     64e:	d015      	beq.n	67c <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
     650:	683b      	ldr	r3, [r7, #0]
     652:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     654:	4a36      	ldr	r2, [pc, #216]	; (730 <_adc_set_config+0x37c>)
     656:	4293      	cmp	r3, r2
     658:	dc0e      	bgt.n	678 <_adc_set_config+0x2c4>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     65a:	683b      	ldr	r3, [r7, #0]
     65c:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
     65e:	4a35      	ldr	r2, [pc, #212]	; (734 <_adc_set_config+0x380>)
     660:	4293      	cmp	r3, r2
     662:	db09      	blt.n	678 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     664:	683b      	ldr	r3, [r7, #0]
     666:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     668:	4a31      	ldr	r2, [pc, #196]	; (730 <_adc_set_config+0x37c>)
     66a:	4293      	cmp	r3, r2
     66c:	dc04      	bgt.n	678 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
     66e:	683b      	ldr	r3, [r7, #0]
     670:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     672:	4a30      	ldr	r2, [pc, #192]	; (734 <_adc_set_config+0x380>)
     674:	4293      	cmp	r3, r2
     676:	da01      	bge.n	67c <_adc_set_config+0x2c8>
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     678:	2317      	movs	r3, #23
     67a:	e11e      	b.n	8ba <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
     67c:	683b      	ldr	r3, [r7, #0]
     67e:	69db      	ldr	r3, [r3, #28]
     680:	4a2d      	ldr	r2, [pc, #180]	; (738 <_adc_set_config+0x384>)
     682:	4293      	cmp	r3, r2
     684:	dc05      	bgt.n	692 <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
     686:	683b      	ldr	r3, [r7, #0]
     688:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     68a:	4a2b      	ldr	r2, [pc, #172]	; (738 <_adc_set_config+0x384>)
     68c:	4293      	cmp	r3, r2
     68e:	dc00      	bgt.n	692 <_adc_set_config+0x2de>
     690:	e06c      	b.n	76c <_adc_set_config+0x3b8>
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     692:	2317      	movs	r3, #23
     694:	e111      	b.n	8ba <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     696:	683b      	ldr	r3, [r7, #0]
     698:	7cdb      	ldrb	r3, [r3, #19]
     69a:	2b00      	cmp	r3, #0
     69c:	d015      	beq.n	6ca <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
     69e:	683b      	ldr	r3, [r7, #0]
     6a0:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     6a2:	4a26      	ldr	r2, [pc, #152]	; (73c <_adc_set_config+0x388>)
     6a4:	4293      	cmp	r3, r2
     6a6:	dc0e      	bgt.n	6c6 <_adc_set_config+0x312>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     6a8:	683b      	ldr	r3, [r7, #0]
     6aa:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
     6ac:	4a24      	ldr	r2, [pc, #144]	; (740 <_adc_set_config+0x38c>)
     6ae:	4293      	cmp	r3, r2
     6b0:	db09      	blt.n	6c6 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
     6b2:	683b      	ldr	r3, [r7, #0]
     6b4:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     6b6:	4a21      	ldr	r2, [pc, #132]	; (73c <_adc_set_config+0x388>)
     6b8:	4293      	cmp	r3, r2
     6ba:	dc04      	bgt.n	6c6 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
     6bc:	683b      	ldr	r3, [r7, #0]
     6be:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
     6c0:	4a1f      	ldr	r2, [pc, #124]	; (740 <_adc_set_config+0x38c>)
     6c2:	4293      	cmp	r3, r2
     6c4:	da01      	bge.n	6ca <_adc_set_config+0x316>
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6c6:	2317      	movs	r3, #23
     6c8:	e0f7      	b.n	8ba <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
     6ca:	683b      	ldr	r3, [r7, #0]
     6cc:	69db      	ldr	r3, [r3, #28]
     6ce:	4a1d      	ldr	r2, [pc, #116]	; (744 <_adc_set_config+0x390>)
     6d0:	4293      	cmp	r3, r2
     6d2:	dc04      	bgt.n	6de <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
     6d4:	683b      	ldr	r3, [r7, #0]
     6d6:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     6d8:	4a1a      	ldr	r2, [pc, #104]	; (744 <_adc_set_config+0x390>)
     6da:	4293      	cmp	r3, r2
     6dc:	dd48      	ble.n	770 <_adc_set_config+0x3bc>
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6de:	2317      	movs	r3, #23
     6e0:	e0eb      	b.n	8ba <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     6e2:	683b      	ldr	r3, [r7, #0]
     6e4:	7cdb      	ldrb	r3, [r3, #19]
     6e6:	2b00      	cmp	r3, #0
     6e8:	d032      	beq.n	750 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
     6ea:	683b      	ldr	r3, [r7, #0]
     6ec:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     6ee:	4a16      	ldr	r2, [pc, #88]	; (748 <_adc_set_config+0x394>)
     6f0:	4293      	cmp	r3, r2
     6f2:	dc0e      	bgt.n	712 <_adc_set_config+0x35e>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     6f4:	683b      	ldr	r3, [r7, #0]
     6f6:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
     6f8:	4a14      	ldr	r2, [pc, #80]	; (74c <_adc_set_config+0x398>)
     6fa:	4293      	cmp	r3, r2
     6fc:	db09      	blt.n	712 <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
     6fe:	683b      	ldr	r3, [r7, #0]
     700:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     702:	4a11      	ldr	r2, [pc, #68]	; (748 <_adc_set_config+0x394>)
     704:	4293      	cmp	r3, r2
     706:	dc04      	bgt.n	712 <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
     708:	683b      	ldr	r3, [r7, #0]
     70a:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
     70c:	4a0f      	ldr	r2, [pc, #60]	; (74c <_adc_set_config+0x398>)
     70e:	4293      	cmp	r3, r2
     710:	da1e      	bge.n	750 <_adc_set_config+0x39c>
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     712:	2317      	movs	r3, #23
     714:	e0d1      	b.n	8ba <_adc_set_config+0x506>
     716:	46c0      	nop			; (mov r8, r8)
     718:	0000018d 	.word	0x0000018d
     71c:	000059e1 	.word	0x000059e1
     720:	00005a25 	.word	0x00005a25
     724:	0000033d 	.word	0x0000033d
     728:	0000950c 	.word	0x0000950c
     72c:	00000269 	.word	0x00000269
     730:	000001ff 	.word	0x000001ff
     734:	fffffe00 	.word	0xfffffe00
     738:	000003ff 	.word	0x000003ff
     73c:	000007ff 	.word	0x000007ff
     740:	fffff800 	.word	0xfffff800
     744:	00000fff 	.word	0x00000fff
     748:	00007fff 	.word	0x00007fff
     74c:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
     750:	683b      	ldr	r3, [r7, #0]
     752:	69db      	ldr	r3, [r3, #28]
     754:	4a5b      	ldr	r2, [pc, #364]	; (8c4 <_adc_set_config+0x510>)
     756:	4293      	cmp	r3, r2
     758:	dc04      	bgt.n	764 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
     75a:	683b      	ldr	r3, [r7, #0]
     75c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     75e:	4a59      	ldr	r2, [pc, #356]	; (8c4 <_adc_set_config+0x510>)
     760:	4293      	cmp	r3, r2
     762:	dd07      	ble.n	774 <_adc_set_config+0x3c0>
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     764:	2317      	movs	r3, #23
     766:	e0a8      	b.n	8ba <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
     768:	46c0      	nop			; (mov r8, r8)
     76a:	e004      	b.n	776 <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
     76c:	46c0      	nop			; (mov r8, r8)
     76e:	e002      	b.n	776 <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
     770:	46c0      	nop			; (mov r8, r8)
     772:	e000      	b.n	776 <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
     774:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
     776:	46c0      	nop			; (mov r8, r8)
     778:	687b      	ldr	r3, [r7, #4]
     77a:	0018      	movs	r0, r3
     77c:	4b52      	ldr	r3, [pc, #328]	; (8c8 <_adc_set_config+0x514>)
     77e:	4798      	blx	r3
     780:	1e03      	subs	r3, r0, #0
     782:	d1f9      	bne.n	778 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     784:	683b      	ldr	r3, [r7, #0]
     786:	7e1a      	ldrb	r2, [r3, #24]
     788:	693b      	ldr	r3, [r7, #16]
     78a:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     78c:	46c0      	nop			; (mov r8, r8)
     78e:	687b      	ldr	r3, [r7, #4]
     790:	0018      	movs	r0, r3
     792:	4b4d      	ldr	r3, [pc, #308]	; (8c8 <_adc_set_config+0x514>)
     794:	4798      	blx	r3
     796:	1e03      	subs	r3, r0, #0
     798:	d1f9      	bne.n	78e <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     79a:	683b      	ldr	r3, [r7, #0]
     79c:	69db      	ldr	r3, [r3, #28]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     79e:	b29a      	uxth	r2, r3
     7a0:	693b      	ldr	r3, [r7, #16]
     7a2:	839a      	strh	r2, [r3, #28]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
     7a4:	46c0      	nop			; (mov r8, r8)
     7a6:	687b      	ldr	r3, [r7, #4]
     7a8:	0018      	movs	r0, r3
     7aa:	4b47      	ldr	r3, [pc, #284]	; (8c8 <_adc_set_config+0x514>)
     7ac:	4798      	blx	r3
     7ae:	1e03      	subs	r3, r0, #0
     7b0:	d1f9      	bne.n	7a6 <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     7b2:	683b      	ldr	r3, [r7, #0]
     7b4:	6a1b      	ldr	r3, [r3, #32]
     7b6:	b29a      	uxth	r2, r3
     7b8:	693b      	ldr	r3, [r7, #16]
     7ba:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     7bc:	2314      	movs	r3, #20
     7be:	18fb      	adds	r3, r7, r3
     7c0:	683a      	ldr	r2, [r7, #0]
     7c2:	212c      	movs	r1, #44	; 0x2c
     7c4:	5c52      	ldrb	r2, [r2, r1]
     7c6:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
     7c8:	2314      	movs	r3, #20
     7ca:	18fb      	adds	r3, r7, r3
     7cc:	781b      	ldrb	r3, [r3, #0]
     7ce:	2b00      	cmp	r3, #0
     7d0:	d006      	beq.n	7e0 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     7d2:	2314      	movs	r3, #20
     7d4:	18fb      	adds	r3, r7, r3
     7d6:	781a      	ldrb	r2, [r3, #0]
     7d8:	2314      	movs	r3, #20
     7da:	18fb      	adds	r3, r7, r3
     7dc:	3a01      	subs	r2, #1
     7de:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     7e0:	2314      	movs	r3, #20
     7e2:	18fb      	adds	r3, r7, r3
     7e4:	781b      	ldrb	r3, [r3, #0]
     7e6:	2b0f      	cmp	r3, #15
     7e8:	d804      	bhi.n	7f4 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     7ea:	683b      	ldr	r3, [r7, #0]
     7ec:	222b      	movs	r2, #43	; 0x2b
     7ee:	5c9b      	ldrb	r3, [r3, r2]
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     7f0:	2b0f      	cmp	r3, #15
     7f2:	d901      	bls.n	7f8 <_adc_set_config+0x444>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     7f4:	2317      	movs	r3, #23
     7f6:	e060      	b.n	8ba <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
     7f8:	46c0      	nop			; (mov r8, r8)
     7fa:	687b      	ldr	r3, [r7, #4]
     7fc:	0018      	movs	r0, r3
     7fe:	4b32      	ldr	r3, [pc, #200]	; (8c8 <_adc_set_config+0x514>)
     800:	4798      	blx	r3
     802:	1e03      	subs	r3, r0, #0
     804:	d1f9      	bne.n	7fa <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     806:	683b      	ldr	r3, [r7, #0]
     808:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
     80a:	683a      	ldr	r2, [r7, #0]
     80c:	212b      	movs	r1, #43	; 0x2b
     80e:	5c52      	ldrb	r2, [r2, r1]
     810:	0512      	lsls	r2, r2, #20
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     812:	4313      	orrs	r3, r2
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     814:	2214      	movs	r2, #20
     816:	18ba      	adds	r2, r7, r2
     818:	7812      	ldrb	r2, [r2, #0]
     81a:	0412      	lsls	r2, r2, #16

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     81c:	4313      	orrs	r3, r2
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
     81e:	683a      	ldr	r2, [r7, #0]
     820:	89d2      	ldrh	r2, [r2, #14]
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     822:	4313      	orrs	r3, r2
			config->negative_input |
			config->positive_input;
     824:	683a      	ldr	r2, [r7, #0]
     826:	7b12      	ldrb	r2, [r2, #12]
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
     828:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     82a:	693b      	ldr	r3, [r7, #16]
     82c:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     82e:	683b      	ldr	r3, [r7, #0]
     830:	222a      	movs	r2, #42	; 0x2a
     832:	5c9a      	ldrb	r2, [r3, r2]
     834:	693b      	ldr	r3, [r7, #16]
     836:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     838:	693b      	ldr	r3, [r7, #16]
     83a:	220f      	movs	r2, #15
     83c:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     83e:	683b      	ldr	r3, [r7, #0]
     840:	2224      	movs	r2, #36	; 0x24
     842:	5c9b      	ldrb	r3, [r3, r2]
     844:	2b00      	cmp	r3, #0
     846:	d01e      	beq.n	886 <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     848:	683b      	ldr	r3, [r7, #0]
     84a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     84c:	4a1f      	ldr	r2, [pc, #124]	; (8cc <_adc_set_config+0x518>)
     84e:	4293      	cmp	r3, r2
     850:	d901      	bls.n	856 <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
     852:	2317      	movs	r3, #23
     854:	e031      	b.n	8ba <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     856:	683b      	ldr	r3, [r7, #0]
     858:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     85a:	693b      	ldr	r3, [r7, #16]
     85c:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     85e:	683b      	ldr	r3, [r7, #0]
     860:	2228      	movs	r2, #40	; 0x28
     862:	5e9b      	ldrsh	r3, [r3, r2]
     864:	4a1a      	ldr	r2, [pc, #104]	; (8d0 <_adc_set_config+0x51c>)
     866:	4293      	cmp	r3, r2
     868:	dc05      	bgt.n	876 <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
     86a:	683b      	ldr	r3, [r7, #0]
     86c:	2228      	movs	r2, #40	; 0x28
     86e:	5e9b      	ldrsh	r3, [r3, r2]
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     870:	4a18      	ldr	r2, [pc, #96]	; (8d4 <_adc_set_config+0x520>)
     872:	4293      	cmp	r3, r2
     874:	da01      	bge.n	87a <_adc_set_config+0x4c6>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
     876:	2317      	movs	r3, #23
     878:	e01f      	b.n	8ba <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     87a:	683b      	ldr	r3, [r7, #0]
     87c:	2228      	movs	r2, #40	; 0x28
     87e:	5e9b      	ldrsh	r3, [r3, r2]
     880:	b29a      	uxth	r2, r3
     882:	693b      	ldr	r3, [r7, #16]
     884:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     886:	4b14      	ldr	r3, [pc, #80]	; (8d8 <_adc_set_config+0x524>)
     888:	681b      	ldr	r3, [r3, #0]
     88a:	08db      	lsrs	r3, r3, #3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     88c:	b29b      	uxth	r3, r3
     88e:	021b      	lsls	r3, r3, #8
     890:	b29a      	uxth	r2, r3
     892:	23e0      	movs	r3, #224	; 0xe0
     894:	00db      	lsls	r3, r3, #3
     896:	4013      	ands	r3, r2
     898:	b29a      	uxth	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     89a:	4b10      	ldr	r3, [pc, #64]	; (8dc <_adc_set_config+0x528>)
     89c:	685c      	ldr	r4, [r3, #4]
     89e:	681b      	ldr	r3, [r3, #0]
     8a0:	0161      	lsls	r1, r4, #5
     8a2:	0edd      	lsrs	r5, r3, #27
     8a4:	430d      	orrs	r5, r1
     8a6:	0ee6      	lsrs	r6, r4, #27
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     8a8:	b2ab      	uxth	r3, r5
     8aa:	21ff      	movs	r1, #255	; 0xff
     8ac:	400b      	ands	r3, r1
     8ae:	b29b      	uxth	r3, r3
     8b0:	4313      	orrs	r3, r2
     8b2:	b29a      	uxth	r2, r3
     8b4:	693b      	ldr	r3, [r7, #16]
     8b6:	851a      	strh	r2, [r3, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     8b8:	2300      	movs	r3, #0
}
     8ba:	0018      	movs	r0, r3
     8bc:	46bd      	mov	sp, r7
     8be:	b009      	add	sp, #36	; 0x24
     8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	0000ffff 	.word	0x0000ffff
     8c8:	00000269 	.word	0x00000269
     8cc:	00000fff 	.word	0x00000fff
     8d0:	000007ff 	.word	0x000007ff
     8d4:	fffff800 	.word	0xfffff800
     8d8:	00806024 	.word	0x00806024
     8dc:	00806020 	.word	0x00806020

000008e0 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     8e0:	b580      	push	{r7, lr}
     8e2:	b084      	sub	sp, #16
     8e4:	af00      	add	r7, sp, #0
     8e6:	60f8      	str	r0, [r7, #12]
     8e8:	60b9      	str	r1, [r7, #8]
     8ea:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     8ec:	68fb      	ldr	r3, [r7, #12]
     8ee:	68ba      	ldr	r2, [r7, #8]
     8f0:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
     8f2:	2380      	movs	r3, #128	; 0x80
     8f4:	025b      	lsls	r3, r3, #9
     8f6:	0019      	movs	r1, r3
     8f8:	2002      	movs	r0, #2
     8fa:	4b15      	ldr	r3, [pc, #84]	; (950 <adc_init+0x70>)
     8fc:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     8fe:	68bb      	ldr	r3, [r7, #8]
     900:	781b      	ldrb	r3, [r3, #0]
     902:	b2db      	uxtb	r3, r3
     904:	001a      	movs	r2, r3
     906:	2301      	movs	r3, #1
     908:	4013      	ands	r3, r2
     90a:	d001      	beq.n	910 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     90c:	2305      	movs	r3, #5
     90e:	e01a      	b.n	946 <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     910:	68bb      	ldr	r3, [r7, #8]
     912:	781b      	ldrb	r3, [r3, #0]
     914:	b2db      	uxtb	r3, r3
     916:	001a      	movs	r2, r3
     918:	2302      	movs	r3, #2
     91a:	4013      	ands	r3, r2
     91c:	d001      	beq.n	922 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     91e:	231c      	movs	r3, #28
     920:	e011      	b.n	946 <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     922:	687b      	ldr	r3, [r7, #4]
     924:	785a      	ldrb	r2, [r3, #1]
     926:	68fb      	ldr	r3, [r7, #12]
     928:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     92a:	68fb      	ldr	r3, [r7, #12]
     92c:	791b      	ldrb	r3, [r3, #4]
     92e:	2b00      	cmp	r3, #0
     930:	d102      	bne.n	938 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
     932:	2001      	movs	r0, #1
     934:	4b07      	ldr	r3, [pc, #28]	; (954 <adc_init+0x74>)
     936:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     938:	687a      	ldr	r2, [r7, #4]
     93a:	68fb      	ldr	r3, [r7, #12]
     93c:	0011      	movs	r1, r2
     93e:	0018      	movs	r0, r3
     940:	4b05      	ldr	r3, [pc, #20]	; (958 <adc_init+0x78>)
     942:	4798      	blx	r3
     944:	0003      	movs	r3, r0
}
     946:	0018      	movs	r0, r3
     948:	46bd      	mov	sp, r7
     94a:	b004      	add	sp, #16
     94c:	bd80      	pop	{r7, pc}
     94e:	46c0      	nop			; (mov r8, r8)
     950:	000001a5 	.word	0x000001a5
     954:	00000229 	.word	0x00000229
     958:	000003b5 	.word	0x000003b5

0000095c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     95c:	b580      	push	{r7, lr}
     95e:	b084      	sub	sp, #16
     960:	af00      	add	r7, sp, #0
     962:	0002      	movs	r2, r0
     964:	1dfb      	adds	r3, r7, #7
     966:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     968:	230f      	movs	r3, #15
     96a:	18fb      	adds	r3, r7, r3
     96c:	1dfa      	adds	r2, r7, #7
     96e:	7812      	ldrb	r2, [r2, #0]
     970:	0952      	lsrs	r2, r2, #5
     972:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     974:	230f      	movs	r3, #15
     976:	18fb      	adds	r3, r7, r3
     978:	781b      	ldrb	r3, [r3, #0]
     97a:	2b00      	cmp	r3, #0
     97c:	d10c      	bne.n	998 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     97e:	4b09      	ldr	r3, [pc, #36]	; (9a4 <_extint_get_eic_from_channel+0x48>)
     980:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     982:	230f      	movs	r3, #15
     984:	18fb      	adds	r3, r7, r3
     986:	781b      	ldrb	r3, [r3, #0]
     988:	009b      	lsls	r3, r3, #2
     98a:	2210      	movs	r2, #16
     98c:	4694      	mov	ip, r2
     98e:	44bc      	add	ip, r7
     990:	4463      	add	r3, ip
     992:	3b08      	subs	r3, #8
     994:	681b      	ldr	r3, [r3, #0]
     996:	e000      	b.n	99a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     998:	2300      	movs	r3, #0
	}
}
     99a:	0018      	movs	r0, r3
     99c:	46bd      	mov	sp, r7
     99e:	b004      	add	sp, #16
     9a0:	bd80      	pop	{r7, pc}
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	40001800 	.word	0x40001800

000009a8 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     9a8:	b580      	push	{r7, lr}
     9aa:	b084      	sub	sp, #16
     9ac:	af00      	add	r7, sp, #0
     9ae:	0002      	movs	r2, r0
     9b0:	1dfb      	adds	r3, r7, #7
     9b2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     9b4:	1dfb      	adds	r3, r7, #7
     9b6:	781b      	ldrb	r3, [r3, #0]
     9b8:	0018      	movs	r0, r3
     9ba:	4b0b      	ldr	r3, [pc, #44]	; (9e8 <extint_chan_is_detected+0x40>)
     9bc:	4798      	blx	r3
     9be:	0003      	movs	r3, r0
     9c0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     9c2:	1dfb      	adds	r3, r7, #7
     9c4:	781b      	ldrb	r3, [r3, #0]
     9c6:	221f      	movs	r2, #31
     9c8:	4013      	ands	r3, r2
     9ca:	2201      	movs	r2, #1
     9cc:	409a      	lsls	r2, r3
     9ce:	0013      	movs	r3, r2
     9d0:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     9d2:	68fb      	ldr	r3, [r7, #12]
     9d4:	691b      	ldr	r3, [r3, #16]
     9d6:	68ba      	ldr	r2, [r7, #8]
     9d8:	4013      	ands	r3, r2
     9da:	1e5a      	subs	r2, r3, #1
     9dc:	4193      	sbcs	r3, r2
     9de:	b2db      	uxtb	r3, r3
}
     9e0:	0018      	movs	r0, r3
     9e2:	46bd      	mov	sp, r7
     9e4:	b004      	add	sp, #16
     9e6:	bd80      	pop	{r7, pc}
     9e8:	0000095d 	.word	0x0000095d

000009ec <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     9ec:	b580      	push	{r7, lr}
     9ee:	b084      	sub	sp, #16
     9f0:	af00      	add	r7, sp, #0
     9f2:	0002      	movs	r2, r0
     9f4:	1dfb      	adds	r3, r7, #7
     9f6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     9f8:	1dfb      	adds	r3, r7, #7
     9fa:	781b      	ldrb	r3, [r3, #0]
     9fc:	0018      	movs	r0, r3
     9fe:	4b09      	ldr	r3, [pc, #36]	; (a24 <extint_chan_clear_detected+0x38>)
     a00:	4798      	blx	r3
     a02:	0003      	movs	r3, r0
     a04:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     a06:	1dfb      	adds	r3, r7, #7
     a08:	781b      	ldrb	r3, [r3, #0]
     a0a:	221f      	movs	r2, #31
     a0c:	4013      	ands	r3, r2
     a0e:	2201      	movs	r2, #1
     a10:	409a      	lsls	r2, r3
     a12:	0013      	movs	r3, r2
     a14:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     a16:	68fb      	ldr	r3, [r7, #12]
     a18:	68ba      	ldr	r2, [r7, #8]
     a1a:	611a      	str	r2, [r3, #16]
}
     a1c:	46c0      	nop			; (mov r8, r8)
     a1e:	46bd      	mov	sp, r7
     a20:	b004      	add	sp, #16
     a22:	bd80      	pop	{r7, pc}
     a24:	0000095d 	.word	0x0000095d

00000a28 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     a28:	b580      	push	{r7, lr}
     a2a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     a2c:	4b15      	ldr	r3, [pc, #84]	; (a84 <EIC_Handler+0x5c>)
     a2e:	2200      	movs	r2, #0
     a30:	701a      	strb	r2, [r3, #0]
     a32:	e020      	b.n	a76 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     a34:	4b13      	ldr	r3, [pc, #76]	; (a84 <EIC_Handler+0x5c>)
     a36:	781b      	ldrb	r3, [r3, #0]
     a38:	0018      	movs	r0, r3
     a3a:	4b13      	ldr	r3, [pc, #76]	; (a88 <EIC_Handler+0x60>)
     a3c:	4798      	blx	r3
     a3e:	1e03      	subs	r3, r0, #0
     a40:	d013      	beq.n	a6a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     a42:	4b10      	ldr	r3, [pc, #64]	; (a84 <EIC_Handler+0x5c>)
     a44:	781b      	ldrb	r3, [r3, #0]
     a46:	0018      	movs	r0, r3
     a48:	4b10      	ldr	r3, [pc, #64]	; (a8c <EIC_Handler+0x64>)
     a4a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     a4c:	4b0d      	ldr	r3, [pc, #52]	; (a84 <EIC_Handler+0x5c>)
     a4e:	781b      	ldrb	r3, [r3, #0]
     a50:	001a      	movs	r2, r3
     a52:	4b0f      	ldr	r3, [pc, #60]	; (a90 <EIC_Handler+0x68>)
     a54:	0092      	lsls	r2, r2, #2
     a56:	58d3      	ldr	r3, [r2, r3]
     a58:	2b00      	cmp	r3, #0
     a5a:	d006      	beq.n	a6a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     a5c:	4b09      	ldr	r3, [pc, #36]	; (a84 <EIC_Handler+0x5c>)
     a5e:	781b      	ldrb	r3, [r3, #0]
     a60:	001a      	movs	r2, r3
     a62:	4b0b      	ldr	r3, [pc, #44]	; (a90 <EIC_Handler+0x68>)
     a64:	0092      	lsls	r2, r2, #2
     a66:	58d3      	ldr	r3, [r2, r3]
     a68:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     a6a:	4b06      	ldr	r3, [pc, #24]	; (a84 <EIC_Handler+0x5c>)
     a6c:	781b      	ldrb	r3, [r3, #0]
     a6e:	3301      	adds	r3, #1
     a70:	b2da      	uxtb	r2, r3
     a72:	4b04      	ldr	r3, [pc, #16]	; (a84 <EIC_Handler+0x5c>)
     a74:	701a      	strb	r2, [r3, #0]
     a76:	4b03      	ldr	r3, [pc, #12]	; (a84 <EIC_Handler+0x5c>)
     a78:	781b      	ldrb	r3, [r3, #0]
     a7a:	2b0f      	cmp	r3, #15
     a7c:	d9da      	bls.n	a34 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     a7e:	46c0      	nop			; (mov r8, r8)
     a80:	46bd      	mov	sp, r7
     a82:	bd80      	pop	{r7, pc}
     a84:	20000150 	.word	0x20000150
     a88:	000009a9 	.word	0x000009a9
     a8c:	000009ed 	.word	0x000009ed
     a90:	20000154 	.word	0x20000154

00000a94 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     a94:	b580      	push	{r7, lr}
     a96:	b082      	sub	sp, #8
     a98:	af00      	add	r7, sp, #0
     a9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     a9c:	687b      	ldr	r3, [r7, #4]
     a9e:	2200      	movs	r2, #0
     aa0:	701a      	strb	r2, [r3, #0]
}
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	46bd      	mov	sp, r7
     aa6:	b002      	add	sp, #8
     aa8:	bd80      	pop	{r7, pc}
     aaa:	46c0      	nop			; (mov r8, r8)

00000aac <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     aac:	b580      	push	{r7, lr}
     aae:	b082      	sub	sp, #8
     ab0:	af00      	add	r7, sp, #0
     ab2:	0002      	movs	r2, r0
     ab4:	6039      	str	r1, [r7, #0]
     ab6:	1dfb      	adds	r3, r7, #7
     ab8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     aba:	1dfb      	adds	r3, r7, #7
     abc:	781b      	ldrb	r3, [r3, #0]
     abe:	2b01      	cmp	r3, #1
     ac0:	d00a      	beq.n	ad8 <system_apb_clock_set_mask+0x2c>
     ac2:	2b02      	cmp	r3, #2
     ac4:	d00f      	beq.n	ae6 <system_apb_clock_set_mask+0x3a>
     ac6:	2b00      	cmp	r3, #0
     ac8:	d114      	bne.n	af4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     aca:	4b0e      	ldr	r3, [pc, #56]	; (b04 <system_apb_clock_set_mask+0x58>)
     acc:	4a0d      	ldr	r2, [pc, #52]	; (b04 <system_apb_clock_set_mask+0x58>)
     ace:	6991      	ldr	r1, [r2, #24]
     ad0:	683a      	ldr	r2, [r7, #0]
     ad2:	430a      	orrs	r2, r1
     ad4:	619a      	str	r2, [r3, #24]
			break;
     ad6:	e00f      	b.n	af8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     ad8:	4b0a      	ldr	r3, [pc, #40]	; (b04 <system_apb_clock_set_mask+0x58>)
     ada:	4a0a      	ldr	r2, [pc, #40]	; (b04 <system_apb_clock_set_mask+0x58>)
     adc:	69d1      	ldr	r1, [r2, #28]
     ade:	683a      	ldr	r2, [r7, #0]
     ae0:	430a      	orrs	r2, r1
     ae2:	61da      	str	r2, [r3, #28]
			break;
     ae4:	e008      	b.n	af8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     ae6:	4b07      	ldr	r3, [pc, #28]	; (b04 <system_apb_clock_set_mask+0x58>)
     ae8:	4a06      	ldr	r2, [pc, #24]	; (b04 <system_apb_clock_set_mask+0x58>)
     aea:	6a11      	ldr	r1, [r2, #32]
     aec:	683a      	ldr	r2, [r7, #0]
     aee:	430a      	orrs	r2, r1
     af0:	621a      	str	r2, [r3, #32]
			break;
     af2:	e001      	b.n	af8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     af4:	2317      	movs	r3, #23
     af6:	e000      	b.n	afa <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     af8:	2300      	movs	r3, #0
}
     afa:	0018      	movs	r0, r3
     afc:	46bd      	mov	sp, r7
     afe:	b002      	add	sp, #8
     b00:	bd80      	pop	{r7, pc}
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	40000400 	.word	0x40000400

00000b08 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     b08:	b580      	push	{r7, lr}
     b0a:	b082      	sub	sp, #8
     b0c:	af00      	add	r7, sp, #0
     b0e:	0002      	movs	r2, r0
     b10:	1dfb      	adds	r3, r7, #7
     b12:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     b14:	4b06      	ldr	r3, [pc, #24]	; (b30 <system_interrupt_enable+0x28>)
     b16:	1dfa      	adds	r2, r7, #7
     b18:	7812      	ldrb	r2, [r2, #0]
     b1a:	0011      	movs	r1, r2
     b1c:	221f      	movs	r2, #31
     b1e:	400a      	ands	r2, r1
     b20:	2101      	movs	r1, #1
     b22:	4091      	lsls	r1, r2
     b24:	000a      	movs	r2, r1
     b26:	601a      	str	r2, [r3, #0]
}
     b28:	46c0      	nop			; (mov r8, r8)
     b2a:	46bd      	mov	sp, r7
     b2c:	b002      	add	sp, #8
     b2e:	bd80      	pop	{r7, pc}
     b30:	e000e100 	.word	0xe000e100

00000b34 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     b34:	b580      	push	{r7, lr}
     b36:	b082      	sub	sp, #8
     b38:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     b3a:	4b0f      	ldr	r3, [pc, #60]	; (b78 <extint_is_syncing+0x44>)
     b3c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     b3e:	2300      	movs	r3, #0
     b40:	607b      	str	r3, [r7, #4]
     b42:	e011      	b.n	b68 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     b44:	687b      	ldr	r3, [r7, #4]
     b46:	009b      	lsls	r3, r3, #2
     b48:	2208      	movs	r2, #8
     b4a:	4694      	mov	ip, r2
     b4c:	44bc      	add	ip, r7
     b4e:	4463      	add	r3, ip
     b50:	3b08      	subs	r3, #8
     b52:	681b      	ldr	r3, [r3, #0]
     b54:	785b      	ldrb	r3, [r3, #1]
     b56:	b2db      	uxtb	r3, r3
     b58:	b25b      	sxtb	r3, r3
     b5a:	2b00      	cmp	r3, #0
     b5c:	da01      	bge.n	b62 <extint_is_syncing+0x2e>
			return true;
     b5e:	2301      	movs	r3, #1
     b60:	e006      	b.n	b70 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     b62:	687b      	ldr	r3, [r7, #4]
     b64:	3301      	adds	r3, #1
     b66:	607b      	str	r3, [r7, #4]
     b68:	687b      	ldr	r3, [r7, #4]
     b6a:	2b00      	cmp	r3, #0
     b6c:	d0ea      	beq.n	b44 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
     b6e:	2300      	movs	r3, #0
}
     b70:	0018      	movs	r0, r3
     b72:	46bd      	mov	sp, r7
     b74:	b002      	add	sp, #8
     b76:	bd80      	pop	{r7, pc}
     b78:	40001800 	.word	0x40001800

00000b7c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     b7c:	b580      	push	{r7, lr}
     b7e:	b084      	sub	sp, #16
     b80:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     b82:	4b2d      	ldr	r3, [pc, #180]	; (c38 <_system_extint_init+0xbc>)
     b84:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     b86:	2140      	movs	r1, #64	; 0x40
     b88:	2000      	movs	r0, #0
     b8a:	4b2c      	ldr	r3, [pc, #176]	; (c3c <_system_extint_init+0xc0>)
     b8c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     b8e:	003b      	movs	r3, r7
     b90:	0018      	movs	r0, r3
     b92:	4b2b      	ldr	r3, [pc, #172]	; (c40 <_system_extint_init+0xc4>)
     b94:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     b96:	003b      	movs	r3, r7
     b98:	2200      	movs	r2, #0
     b9a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     b9c:	003b      	movs	r3, r7
     b9e:	0019      	movs	r1, r3
     ba0:	2005      	movs	r0, #5
     ba2:	4b28      	ldr	r3, [pc, #160]	; (c44 <_system_extint_init+0xc8>)
     ba4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     ba6:	2005      	movs	r0, #5
     ba8:	4b27      	ldr	r3, [pc, #156]	; (c48 <_system_extint_init+0xcc>)
     baa:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     bac:	2300      	movs	r3, #0
     bae:	60fb      	str	r3, [r7, #12]
     bb0:	e018      	b.n	be4 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     bb2:	68fb      	ldr	r3, [r7, #12]
     bb4:	009b      	lsls	r3, r3, #2
     bb6:	2210      	movs	r2, #16
     bb8:	4694      	mov	ip, r2
     bba:	44bc      	add	ip, r7
     bbc:	4463      	add	r3, ip
     bbe:	3b0c      	subs	r3, #12
     bc0:	681a      	ldr	r2, [r3, #0]
     bc2:	68fb      	ldr	r3, [r7, #12]
     bc4:	009b      	lsls	r3, r3, #2
     bc6:	2110      	movs	r1, #16
     bc8:	468c      	mov	ip, r1
     bca:	44bc      	add	ip, r7
     bcc:	4463      	add	r3, ip
     bce:	3b0c      	subs	r3, #12
     bd0:	681b      	ldr	r3, [r3, #0]
     bd2:	781b      	ldrb	r3, [r3, #0]
     bd4:	b2db      	uxtb	r3, r3
     bd6:	2101      	movs	r1, #1
     bd8:	430b      	orrs	r3, r1
     bda:	b2db      	uxtb	r3, r3
     bdc:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     bde:	68fb      	ldr	r3, [r7, #12]
     be0:	3301      	adds	r3, #1
     be2:	60fb      	str	r3, [r7, #12]
     be4:	68fb      	ldr	r3, [r7, #12]
     be6:	2b00      	cmp	r3, #0
     be8:	d0e3      	beq.n	bb2 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	4b17      	ldr	r3, [pc, #92]	; (c4c <_system_extint_init+0xd0>)
     bee:	4798      	blx	r3
     bf0:	1e03      	subs	r3, r0, #0
     bf2:	d1fb      	bne.n	bec <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     bf4:	230b      	movs	r3, #11
     bf6:	18fb      	adds	r3, r7, r3
     bf8:	2200      	movs	r2, #0
     bfa:	701a      	strb	r2, [r3, #0]
     bfc:	e00d      	b.n	c1a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     bfe:	230b      	movs	r3, #11
     c00:	18fb      	adds	r3, r7, r3
     c02:	781a      	ldrb	r2, [r3, #0]
     c04:	4b12      	ldr	r3, [pc, #72]	; (c50 <_system_extint_init+0xd4>)
     c06:	0092      	lsls	r2, r2, #2
     c08:	2100      	movs	r1, #0
     c0a:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     c0c:	230b      	movs	r3, #11
     c0e:	18fb      	adds	r3, r7, r3
     c10:	781a      	ldrb	r2, [r3, #0]
     c12:	230b      	movs	r3, #11
     c14:	18fb      	adds	r3, r7, r3
     c16:	3201      	adds	r2, #1
     c18:	701a      	strb	r2, [r3, #0]
     c1a:	230b      	movs	r3, #11
     c1c:	18fb      	adds	r3, r7, r3
     c1e:	781b      	ldrb	r3, [r3, #0]
     c20:	2b0f      	cmp	r3, #15
     c22:	d9ec      	bls.n	bfe <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     c24:	2004      	movs	r0, #4
     c26:	4b0b      	ldr	r3, [pc, #44]	; (c54 <_system_extint_init+0xd8>)
     c28:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     c2a:	4b0b      	ldr	r3, [pc, #44]	; (c58 <_system_extint_init+0xdc>)
     c2c:	4798      	blx	r3
}
     c2e:	46c0      	nop			; (mov r8, r8)
     c30:	46bd      	mov	sp, r7
     c32:	b004      	add	sp, #16
     c34:	bd80      	pop	{r7, pc}
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	40001800 	.word	0x40001800
     c3c:	00000aad 	.word	0x00000aad
     c40:	00000a95 	.word	0x00000a95
     c44:	000059e1 	.word	0x000059e1
     c48:	00005a25 	.word	0x00005a25
     c4c:	00000b35 	.word	0x00000b35
     c50:	20000154 	.word	0x20000154
     c54:	00000b09 	.word	0x00000b09
     c58:	00000c5d 	.word	0x00000c5d

00000c5c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     c5c:	b580      	push	{r7, lr}
     c5e:	b082      	sub	sp, #8
     c60:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     c62:	4b15      	ldr	r3, [pc, #84]	; (cb8 <_extint_enable+0x5c>)
     c64:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     c66:	2300      	movs	r3, #0
     c68:	607b      	str	r3, [r7, #4]
     c6a:	e018      	b.n	c9e <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     c6c:	687b      	ldr	r3, [r7, #4]
     c6e:	009b      	lsls	r3, r3, #2
     c70:	2208      	movs	r2, #8
     c72:	4694      	mov	ip, r2
     c74:	44bc      	add	ip, r7
     c76:	4463      	add	r3, ip
     c78:	3b08      	subs	r3, #8
     c7a:	681a      	ldr	r2, [r3, #0]
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	009b      	lsls	r3, r3, #2
     c80:	2108      	movs	r1, #8
     c82:	468c      	mov	ip, r1
     c84:	44bc      	add	ip, r7
     c86:	4463      	add	r3, ip
     c88:	3b08      	subs	r3, #8
     c8a:	681b      	ldr	r3, [r3, #0]
     c8c:	781b      	ldrb	r3, [r3, #0]
     c8e:	b2db      	uxtb	r3, r3
     c90:	2102      	movs	r1, #2
     c92:	430b      	orrs	r3, r1
     c94:	b2db      	uxtb	r3, r3
     c96:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     c98:	687b      	ldr	r3, [r7, #4]
     c9a:	3301      	adds	r3, #1
     c9c:	607b      	str	r3, [r7, #4]
     c9e:	687b      	ldr	r3, [r7, #4]
     ca0:	2b00      	cmp	r3, #0
     ca2:	d0e3      	beq.n	c6c <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     ca4:	46c0      	nop			; (mov r8, r8)
     ca6:	4b05      	ldr	r3, [pc, #20]	; (cbc <_extint_enable+0x60>)
     ca8:	4798      	blx	r3
     caa:	1e03      	subs	r3, r0, #0
     cac:	d1fb      	bne.n	ca6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     cae:	46c0      	nop			; (mov r8, r8)
     cb0:	46bd      	mov	sp, r7
     cb2:	b002      	add	sp, #8
     cb4:	bd80      	pop	{r7, pc}
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	40001800 	.word	0x40001800
     cbc:	00000b35 	.word	0x00000b35

00000cc0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     cc0:	b580      	push	{r7, lr}
     cc2:	b082      	sub	sp, #8
     cc4:	af00      	add	r7, sp, #0
     cc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     cc8:	687b      	ldr	r3, [r7, #4]
     cca:	2280      	movs	r2, #128	; 0x80
     ccc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     cce:	687b      	ldr	r3, [r7, #4]
     cd0:	2200      	movs	r2, #0
     cd2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     cd4:	687b      	ldr	r3, [r7, #4]
     cd6:	2201      	movs	r2, #1
     cd8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     cda:	687b      	ldr	r3, [r7, #4]
     cdc:	2200      	movs	r2, #0
     cde:	70da      	strb	r2, [r3, #3]
}
     ce0:	46c0      	nop			; (mov r8, r8)
     ce2:	46bd      	mov	sp, r7
     ce4:	b002      	add	sp, #8
     ce6:	bd80      	pop	{r7, pc}

00000ce8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     ce8:	b580      	push	{r7, lr}
     cea:	b084      	sub	sp, #16
     cec:	af00      	add	r7, sp, #0
     cee:	0002      	movs	r2, r0
     cf0:	6039      	str	r1, [r7, #0]
     cf2:	1dfb      	adds	r3, r7, #7
     cf4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     cf6:	230c      	movs	r3, #12
     cf8:	18fb      	adds	r3, r7, r3
     cfa:	0018      	movs	r0, r3
     cfc:	4b10      	ldr	r3, [pc, #64]	; (d40 <port_pin_set_config+0x58>)
     cfe:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     d00:	230c      	movs	r3, #12
     d02:	18fb      	adds	r3, r7, r3
     d04:	2280      	movs	r2, #128	; 0x80
     d06:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     d08:	683b      	ldr	r3, [r7, #0]
     d0a:	781a      	ldrb	r2, [r3, #0]
     d0c:	230c      	movs	r3, #12
     d0e:	18fb      	adds	r3, r7, r3
     d10:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     d12:	683b      	ldr	r3, [r7, #0]
     d14:	785a      	ldrb	r2, [r3, #1]
     d16:	230c      	movs	r3, #12
     d18:	18fb      	adds	r3, r7, r3
     d1a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     d1c:	683b      	ldr	r3, [r7, #0]
     d1e:	789a      	ldrb	r2, [r3, #2]
     d20:	230c      	movs	r3, #12
     d22:	18fb      	adds	r3, r7, r3
     d24:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     d26:	230c      	movs	r3, #12
     d28:	18fa      	adds	r2, r7, r3
     d2a:	1dfb      	adds	r3, r7, #7
     d2c:	781b      	ldrb	r3, [r3, #0]
     d2e:	0011      	movs	r1, r2
     d30:	0018      	movs	r0, r3
     d32:	4b04      	ldr	r3, [pc, #16]	; (d44 <port_pin_set_config+0x5c>)
     d34:	4798      	blx	r3
}
     d36:	46c0      	nop			; (mov r8, r8)
     d38:	46bd      	mov	sp, r7
     d3a:	b004      	add	sp, #16
     d3c:	bd80      	pop	{r7, pc}
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	00000cc1 	.word	0x00000cc1
     d44:	00005d15 	.word	0x00005d15

00000d48 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     d48:	b580      	push	{r7, lr}
     d4a:	b082      	sub	sp, #8
     d4c:	af00      	add	r7, sp, #0
     d4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     d50:	687b      	ldr	r3, [r7, #4]
     d52:	2200      	movs	r2, #0
     d54:	701a      	strb	r2, [r3, #0]
}
     d56:	46c0      	nop			; (mov r8, r8)
     d58:	46bd      	mov	sp, r7
     d5a:	b002      	add	sp, #8
     d5c:	bd80      	pop	{r7, pc}
     d5e:	46c0      	nop			; (mov r8, r8)

00000d60 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     d60:	b580      	push	{r7, lr}
     d62:	b082      	sub	sp, #8
     d64:	af00      	add	r7, sp, #0
     d66:	0002      	movs	r2, r0
     d68:	6039      	str	r1, [r7, #0]
     d6a:	1dfb      	adds	r3, r7, #7
     d6c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     d6e:	1dfb      	adds	r3, r7, #7
     d70:	781b      	ldrb	r3, [r3, #0]
     d72:	2b01      	cmp	r3, #1
     d74:	d00a      	beq.n	d8c <system_apb_clock_set_mask+0x2c>
     d76:	2b02      	cmp	r3, #2
     d78:	d00f      	beq.n	d9a <system_apb_clock_set_mask+0x3a>
     d7a:	2b00      	cmp	r3, #0
     d7c:	d114      	bne.n	da8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     d7e:	4b0e      	ldr	r3, [pc, #56]	; (db8 <system_apb_clock_set_mask+0x58>)
     d80:	4a0d      	ldr	r2, [pc, #52]	; (db8 <system_apb_clock_set_mask+0x58>)
     d82:	6991      	ldr	r1, [r2, #24]
     d84:	683a      	ldr	r2, [r7, #0]
     d86:	430a      	orrs	r2, r1
     d88:	619a      	str	r2, [r3, #24]
			break;
     d8a:	e00f      	b.n	dac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     d8c:	4b0a      	ldr	r3, [pc, #40]	; (db8 <system_apb_clock_set_mask+0x58>)
     d8e:	4a0a      	ldr	r2, [pc, #40]	; (db8 <system_apb_clock_set_mask+0x58>)
     d90:	69d1      	ldr	r1, [r2, #28]
     d92:	683a      	ldr	r2, [r7, #0]
     d94:	430a      	orrs	r2, r1
     d96:	61da      	str	r2, [r3, #28]
			break;
     d98:	e008      	b.n	dac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     d9a:	4b07      	ldr	r3, [pc, #28]	; (db8 <system_apb_clock_set_mask+0x58>)
     d9c:	4a06      	ldr	r2, [pc, #24]	; (db8 <system_apb_clock_set_mask+0x58>)
     d9e:	6a11      	ldr	r1, [r2, #32]
     da0:	683a      	ldr	r2, [r7, #0]
     da2:	430a      	orrs	r2, r1
     da4:	621a      	str	r2, [r3, #32]
			break;
     da6:	e001      	b.n	dac <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     da8:	2317      	movs	r3, #23
     daa:	e000      	b.n	dae <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     dac:	2300      	movs	r3, #0
}
     dae:	0018      	movs	r0, r3
     db0:	46bd      	mov	sp, r7
     db2:	b002      	add	sp, #8
     db4:	bd80      	pop	{r7, pc}
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	40000400 	.word	0x40000400

00000dbc <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     dbc:	b580      	push	{r7, lr}
     dbe:	b082      	sub	sp, #8
     dc0:	af00      	add	r7, sp, #0
     dc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     dc4:	687b      	ldr	r3, [r7, #4]
     dc6:	2280      	movs	r2, #128	; 0x80
     dc8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     dca:	687b      	ldr	r3, [r7, #4]
     dcc:	2200      	movs	r2, #0
     dce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     dd0:	687b      	ldr	r3, [r7, #4]
     dd2:	2201      	movs	r2, #1
     dd4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     dd6:	687b      	ldr	r3, [r7, #4]
     dd8:	2200      	movs	r2, #0
     dda:	70da      	strb	r2, [r3, #3]
}
     ddc:	46c0      	nop			; (mov r8, r8)
     dde:	46bd      	mov	sp, r7
     de0:	b002      	add	sp, #8
     de2:	bd80      	pop	{r7, pc}

00000de4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     de4:	b580      	push	{r7, lr}
     de6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     de8:	4b05      	ldr	r3, [pc, #20]	; (e00 <system_is_debugger_present+0x1c>)
     dea:	789b      	ldrb	r3, [r3, #2]
     dec:	b2db      	uxtb	r3, r3
     dee:	001a      	movs	r2, r3
     df0:	2302      	movs	r3, #2
     df2:	4013      	ands	r3, r2
     df4:	1e5a      	subs	r2, r3, #1
     df6:	4193      	sbcs	r3, r2
     df8:	b2db      	uxtb	r3, r3
}
     dfa:	0018      	movs	r0, r3
     dfc:	46bd      	mov	sp, r7
     dfe:	bd80      	pop	{r7, pc}
     e00:	41002000 	.word	0x41002000

00000e04 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     e04:	b580      	push	{r7, lr}
     e06:	b084      	sub	sp, #16
     e08:	af00      	add	r7, sp, #0
     e0a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     e0c:	687b      	ldr	r3, [r7, #4]
     e0e:	681b      	ldr	r3, [r3, #0]
     e10:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     e12:	68fb      	ldr	r3, [r7, #12]
     e14:	69db      	ldr	r3, [r3, #28]
     e16:	2207      	movs	r2, #7
     e18:	4013      	ands	r3, r2
     e1a:	1e5a      	subs	r2, r3, #1
     e1c:	4193      	sbcs	r3, r2
     e1e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     e20:	0018      	movs	r0, r3
     e22:	46bd      	mov	sp, r7
     e24:	b004      	add	sp, #16
     e26:	bd80      	pop	{r7, pc}

00000e28 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     e28:	b580      	push	{r7, lr}
     e2a:	b082      	sub	sp, #8
     e2c:	af00      	add	r7, sp, #0
     e2e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     e30:	46c0      	nop			; (mov r8, r8)
     e32:	687b      	ldr	r3, [r7, #4]
     e34:	0018      	movs	r0, r3
     e36:	4b04      	ldr	r3, [pc, #16]	; (e48 <_i2c_master_wait_for_sync+0x20>)
     e38:	4798      	blx	r3
     e3a:	1e03      	subs	r3, r0, #0
     e3c:	d1f9      	bne.n	e32 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     e3e:	46c0      	nop			; (mov r8, r8)
     e40:	46bd      	mov	sp, r7
     e42:	b002      	add	sp, #8
     e44:	bd80      	pop	{r7, pc}
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	00000e05 	.word	0x00000e05

00000e4c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
     e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e4e:	b095      	sub	sp, #84	; 0x54
     e50:	af00      	add	r7, sp, #0
     e52:	60f8      	str	r0, [r7, #12]
     e54:	60b9      	str	r1, [r7, #8]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
     e56:	2300      	movs	r3, #0
     e58:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t tmp_baud_hs = 0;
     e5a:	2300      	movs	r3, #0
     e5c:	64bb      	str	r3, [r7, #72]	; 0x48
	int32_t tmp_baudlow_hs = 0;
     e5e:	2300      	movs	r3, #0
     e60:	647b      	str	r3, [r7, #68]	; 0x44
	enum status_code tmp_status_code = STATUS_OK;
     e62:	233b      	movs	r3, #59	; 0x3b
     e64:	2208      	movs	r2, #8
     e66:	4694      	mov	ip, r2
     e68:	44bc      	add	ip, r7
     e6a:	4463      	add	r3, ip
     e6c:	2200      	movs	r2, #0
     e6e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     e70:	68fb      	ldr	r3, [r7, #12]
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	633b      	str	r3, [r7, #48]	; 0x30
	Sercom *const sercom_hw = module->hw;
     e76:	68fb      	ldr	r3, [r7, #12]
     e78:	681b      	ldr	r3, [r3, #0]
     e7a:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     e7c:	2323      	movs	r3, #35	; 0x23
     e7e:	2208      	movs	r2, #8
     e80:	18ba      	adds	r2, r7, r2
     e82:	18d4      	adds	r4, r2, r3
     e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e86:	0018      	movs	r0, r3
     e88:	4bdb      	ldr	r3, [pc, #876]	; (11f8 <_i2c_master_set_config+0x3ac>)
     e8a:	4798      	blx	r3
     e8c:	0003      	movs	r3, r0
     e8e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     e90:	230c      	movs	r3, #12
     e92:	2208      	movs	r2, #8
     e94:	4694      	mov	ip, r2
     e96:	44bc      	add	ip, r7
     e98:	4463      	add	r3, ip
     e9a:	0018      	movs	r0, r3
     e9c:	4bd7      	ldr	r3, [pc, #860]	; (11fc <_i2c_master_set_config+0x3b0>)
     e9e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
     ea0:	68bb      	ldr	r3, [r7, #8]
     ea2:	69db      	ldr	r3, [r3, #28]
     ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pad1 = config->pinmux_pad1;
     ea6:	68bb      	ldr	r3, [r7, #8]
     ea8:	6a1b      	ldr	r3, [r3, #32]
     eaa:	63bb      	str	r3, [r7, #56]	; 0x38

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     eae:	2b00      	cmp	r3, #0
     eb0:	d106      	bne.n	ec0 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     eb4:	2100      	movs	r1, #0
     eb6:	0018      	movs	r0, r3
     eb8:	4bd1      	ldr	r3, [pc, #836]	; (1200 <_i2c_master_set_config+0x3b4>)
     eba:	4798      	blx	r3
     ebc:	0003      	movs	r3, r0
     ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ec2:	b2da      	uxtb	r2, r3
     ec4:	230c      	movs	r3, #12
     ec6:	2108      	movs	r1, #8
     ec8:	468c      	mov	ip, r1
     eca:	44bc      	add	ip, r7
     ecc:	4463      	add	r3, ip
     ece:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     ed0:	230c      	movs	r3, #12
     ed2:	2208      	movs	r2, #8
     ed4:	4694      	mov	ip, r2
     ed6:	44bc      	add	ip, r7
     ed8:	4463      	add	r3, ip
     eda:	2202      	movs	r2, #2
     edc:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ee0:	0c1b      	lsrs	r3, r3, #16
     ee2:	b2db      	uxtb	r3, r3
     ee4:	220c      	movs	r2, #12
     ee6:	2108      	movs	r1, #8
     ee8:	468c      	mov	ip, r1
     eea:	44bc      	add	ip, r7
     eec:	4462      	add	r2, ip
     eee:	0011      	movs	r1, r2
     ef0:	0018      	movs	r0, r3
     ef2:	4bc4      	ldr	r3, [pc, #784]	; (1204 <_i2c_master_set_config+0x3b8>)
     ef4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ef8:	2b00      	cmp	r3, #0
     efa:	d106      	bne.n	f0a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     efe:	2101      	movs	r1, #1
     f00:	0018      	movs	r0, r3
     f02:	4bbf      	ldr	r3, [pc, #764]	; (1200 <_i2c_master_set_config+0x3b4>)
     f04:	4798      	blx	r3
     f06:	0003      	movs	r3, r0
     f08:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f0c:	b2da      	uxtb	r2, r3
     f0e:	230c      	movs	r3, #12
     f10:	2108      	movs	r1, #8
     f12:	468c      	mov	ip, r1
     f14:	44bc      	add	ip, r7
     f16:	4463      	add	r3, ip
     f18:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     f1a:	230c      	movs	r3, #12
     f1c:	2208      	movs	r2, #8
     f1e:	4694      	mov	ip, r2
     f20:	44bc      	add	ip, r7
     f22:	4463      	add	r3, ip
     f24:	2202      	movs	r2, #2
     f26:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f2a:	0c1b      	lsrs	r3, r3, #16
     f2c:	b2db      	uxtb	r3, r3
     f2e:	220c      	movs	r2, #12
     f30:	2108      	movs	r1, #8
     f32:	468c      	mov	ip, r1
     f34:	44bc      	add	ip, r7
     f36:	4462      	add	r2, ip
     f38:	0011      	movs	r1, r2
     f3a:	0018      	movs	r0, r3
     f3c:	4bb1      	ldr	r3, [pc, #708]	; (1204 <_i2c_master_set_config+0x3b8>)
     f3e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     f40:	68bb      	ldr	r3, [r7, #8]
     f42:	8a9a      	ldrh	r2, [r3, #20]
     f44:	68fb      	ldr	r3, [r7, #12]
     f46:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     f48:	68bb      	ldr	r3, [r7, #8]
     f4a:	8ada      	ldrh	r2, [r3, #22]
     f4c:	68fb      	ldr	r3, [r7, #12]
     f4e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     f50:	68bb      	ldr	r3, [r7, #8]
     f52:	7e1b      	ldrb	r3, [r3, #24]
     f54:	2b00      	cmp	r3, #0
     f56:	d103      	bne.n	f60 <_i2c_master_set_config+0x114>
     f58:	4bab      	ldr	r3, [pc, #684]	; (1208 <_i2c_master_set_config+0x3bc>)
     f5a:	4798      	blx	r3
     f5c:	1e03      	subs	r3, r0, #0
     f5e:	d002      	beq.n	f66 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     f60:	2380      	movs	r3, #128	; 0x80
     f62:	64fb      	str	r3, [r7, #76]	; 0x4c
     f64:	e001      	b.n	f6a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
     f66:	2300      	movs	r3, #0
     f68:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     f6a:	68bb      	ldr	r3, [r7, #8]
     f6c:	691b      	ldr	r3, [r3, #16]
     f6e:	2b00      	cmp	r3, #0
     f70:	d004      	beq.n	f7c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
     f72:	68bb      	ldr	r3, [r7, #8]
     f74:	691b      	ldr	r3, [r3, #16]
     f76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f78:	4313      	orrs	r3, r2
     f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     f7c:	68bb      	ldr	r3, [r7, #8]
     f7e:	689b      	ldr	r3, [r3, #8]
     f80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f82:	4313      	orrs	r3, r2
     f84:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     f86:	68bb      	ldr	r3, [r7, #8]
     f88:	2224      	movs	r2, #36	; 0x24
     f8a:	5c9b      	ldrb	r3, [r3, r2]
     f8c:	2b00      	cmp	r3, #0
     f8e:	d004      	beq.n	f9a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f92:	2280      	movs	r2, #128	; 0x80
     f94:	05d2      	lsls	r2, r2, #23
     f96:	4313      	orrs	r3, r2
     f98:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     f9a:	68bb      	ldr	r3, [r7, #8]
     f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f9e:	2b00      	cmp	r3, #0
     fa0:	d004      	beq.n	fac <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
     fa2:	68bb      	ldr	r3, [r7, #8]
     fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     fa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     fa8:	4313      	orrs	r3, r2
     faa:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     fac:	68bb      	ldr	r3, [r7, #8]
     fae:	222c      	movs	r2, #44	; 0x2c
     fb0:	5c9b      	ldrb	r3, [r3, r2]
     fb2:	2b00      	cmp	r3, #0
     fb4:	d105      	bne.n	fc2 <_i2c_master_set_config+0x176>
     fb6:	68bb      	ldr	r3, [r7, #8]
     fb8:	689a      	ldr	r2, [r3, #8]
     fba:	2380      	movs	r3, #128	; 0x80
     fbc:	049b      	lsls	r3, r3, #18
     fbe:	429a      	cmp	r2, r3
     fc0:	d104      	bne.n	fcc <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     fc4:	2280      	movs	r2, #128	; 0x80
     fc6:	0512      	lsls	r2, r2, #20
     fc8:	4313      	orrs	r3, r2
     fca:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     fcc:	68bb      	ldr	r3, [r7, #8]
     fce:	222d      	movs	r2, #45	; 0x2d
     fd0:	5c9b      	ldrb	r3, [r3, r2]
     fd2:	2b00      	cmp	r3, #0
     fd4:	d004      	beq.n	fe0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     fd8:	2280      	movs	r2, #128	; 0x80
     fda:	0412      	lsls	r2, r2, #16
     fdc:	4313      	orrs	r3, r2
     fde:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     fe0:	68bb      	ldr	r3, [r7, #8]
     fe2:	222e      	movs	r2, #46	; 0x2e
     fe4:	5c9b      	ldrb	r3, [r3, r2]
     fe6:	2b00      	cmp	r3, #0
     fe8:	d004      	beq.n	ff4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     fec:	2280      	movs	r2, #128	; 0x80
     fee:	03d2      	lsls	r2, r2, #15
     ff0:	4313      	orrs	r3, r2
     ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ff6:	681a      	ldr	r2, [r3, #0]
     ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     ffa:	431a      	orrs	r2, r3
     ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ffe:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    1000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1002:	2280      	movs	r2, #128	; 0x80
    1004:	0052      	lsls	r2, r2, #1
    1006:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    1008:	2323      	movs	r3, #35	; 0x23
    100a:	2208      	movs	r2, #8
    100c:	4694      	mov	ip, r2
    100e:	44bc      	add	ip, r7
    1010:	4463      	add	r3, ip
    1012:	781b      	ldrb	r3, [r3, #0]
    1014:	3314      	adds	r3, #20
    1016:	b2db      	uxtb	r3, r3
    1018:	0018      	movs	r0, r3
    101a:	4b7c      	ldr	r3, [pc, #496]	; (120c <_i2c_master_set_config+0x3c0>)
    101c:	4798      	blx	r3
    101e:	0003      	movs	r3, r0
    1020:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fscl        = 1000 * config->baud_rate;
    1022:	68bb      	ldr	r3, [r7, #8]
    1024:	681b      	ldr	r3, [r3, #0]
    1026:	22fa      	movs	r2, #250	; 0xfa
    1028:	0092      	lsls	r2, r2, #2
    102a:	4353      	muls	r3, r2
    102c:	623b      	str	r3, [r7, #32]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    102e:	68bb      	ldr	r3, [r7, #8]
    1030:	685b      	ldr	r3, [r3, #4]
    1032:	22fa      	movs	r2, #250	; 0xfa
    1034:	0092      	lsls	r2, r2, #2
    1036:	4353      	muls	r3, r2
    1038:	61fb      	str	r3, [r7, #28]
	uint32_t trise       = config->sda_scl_rise_time_ns;
    103a:	68bb      	ldr	r3, [r7, #8]
    103c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    103e:	61bb      	str	r3, [r7, #24]
	
	tmp_baud = (int32_t)(div_ceil(
    1040:	4b73      	ldr	r3, [pc, #460]	; (1210 <_i2c_master_set_config+0x3c4>)
    1042:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1044:	4798      	blx	r3
    1046:	0005      	movs	r5, r0
    1048:	000e      	movs	r6, r1
    104a:	4b71      	ldr	r3, [pc, #452]	; (1210 <_i2c_master_set_config+0x3c4>)
    104c:	6a38      	ldr	r0, [r7, #32]
    104e:	4798      	blx	r3
    1050:	6038      	str	r0, [r7, #0]
    1052:	6079      	str	r1, [r7, #4]
    1054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1056:	69ba      	ldr	r2, [r7, #24]
    1058:	435a      	muls	r2, r3
    105a:	4b6d      	ldr	r3, [pc, #436]	; (1210 <_i2c_master_set_config+0x3c4>)
    105c:	0010      	movs	r0, r2
    105e:	4798      	blx	r3
    1060:	4c6c      	ldr	r4, [pc, #432]	; (1214 <_i2c_master_set_config+0x3c8>)
    1062:	4a6d      	ldr	r2, [pc, #436]	; (1218 <_i2c_master_set_config+0x3cc>)
    1064:	4b6d      	ldr	r3, [pc, #436]	; (121c <_i2c_master_set_config+0x3d0>)
    1066:	47a0      	blx	r4
    1068:	0003      	movs	r3, r0
    106a:	000c      	movs	r4, r1
    106c:	0018      	movs	r0, r3
    106e:	0021      	movs	r1, r4
    1070:	4c6b      	ldr	r4, [pc, #428]	; (1220 <_i2c_master_set_config+0x3d4>)
    1072:	2200      	movs	r2, #0
    1074:	4b6b      	ldr	r3, [pc, #428]	; (1224 <_i2c_master_set_config+0x3d8>)
    1076:	47a0      	blx	r4
    1078:	0003      	movs	r3, r0
    107a:	000c      	movs	r4, r1
    107c:	001a      	movs	r2, r3
    107e:	0023      	movs	r3, r4
    1080:	4c64      	ldr	r4, [pc, #400]	; (1214 <_i2c_master_set_config+0x3c8>)
    1082:	6838      	ldr	r0, [r7, #0]
    1084:	6879      	ldr	r1, [r7, #4]
    1086:	47a0      	blx	r4
    1088:	0003      	movs	r3, r0
    108a:	000c      	movs	r4, r1
    108c:	001a      	movs	r2, r3
    108e:	0023      	movs	r3, r4
    1090:	4c65      	ldr	r4, [pc, #404]	; (1228 <_i2c_master_set_config+0x3dc>)
    1092:	0028      	movs	r0, r5
    1094:	0031      	movs	r1, r6
    1096:	47a0      	blx	r4
    1098:	0003      	movs	r3, r0
    109a:	000c      	movs	r4, r1
    109c:	001d      	movs	r5, r3
    109e:	0026      	movs	r6, r4
    10a0:	6a3b      	ldr	r3, [r7, #32]
    10a2:	005a      	lsls	r2, r3, #1
    10a4:	4b5a      	ldr	r3, [pc, #360]	; (1210 <_i2c_master_set_config+0x3c4>)
    10a6:	0010      	movs	r0, r2
    10a8:	4798      	blx	r3
    10aa:	0002      	movs	r2, r0
    10ac:	000b      	movs	r3, r1
    10ae:	4c5c      	ldr	r4, [pc, #368]	; (1220 <_i2c_master_set_config+0x3d4>)
    10b0:	0028      	movs	r0, r5
    10b2:	0031      	movs	r1, r6
    10b4:	47a0      	blx	r4
    10b6:	0003      	movs	r3, r0
    10b8:	000c      	movs	r4, r1
    10ba:	0018      	movs	r0, r3
    10bc:	0021      	movs	r1, r4
    10be:	4c5a      	ldr	r4, [pc, #360]	; (1228 <_i2c_master_set_config+0x3dc>)
    10c0:	2200      	movs	r2, #0
    10c2:	4b5a      	ldr	r3, [pc, #360]	; (122c <_i2c_master_set_config+0x3e0>)
    10c4:	47a0      	blx	r4
    10c6:	0003      	movs	r3, r0
    10c8:	000c      	movs	r4, r1
    10ca:	001d      	movs	r5, r3
    10cc:	0026      	movs	r6, r4
    10ce:	6a3b      	ldr	r3, [r7, #32]
    10d0:	005a      	lsls	r2, r3, #1
    10d2:	4b4f      	ldr	r3, [pc, #316]	; (1210 <_i2c_master_set_config+0x3c4>)
    10d4:	0010      	movs	r0, r2
    10d6:	4798      	blx	r3
    10d8:	0002      	movs	r2, r0
    10da:	000b      	movs	r3, r1
    10dc:	4c54      	ldr	r4, [pc, #336]	; (1230 <_i2c_master_set_config+0x3e4>)
    10de:	0028      	movs	r0, r5
    10e0:	0031      	movs	r1, r6
    10e2:	47a0      	blx	r4
    10e4:	0003      	movs	r3, r0
    10e6:	000c      	movs	r4, r1
    10e8:	0019      	movs	r1, r3
    10ea:	0022      	movs	r2, r4
    10ec:	4b51      	ldr	r3, [pc, #324]	; (1234 <_i2c_master_set_config+0x3e8>)
    10ee:	0008      	movs	r0, r1
    10f0:	0011      	movs	r1, r2
    10f2:	4798      	blx	r3
    10f4:	0003      	movs	r3, r0
    10f6:	637b      	str	r3, [r7, #52]	; 0x34
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    10f8:	68bb      	ldr	r3, [r7, #8]
    10fa:	689a      	ldr	r2, [r3, #8]
    10fc:	2380      	movs	r3, #128	; 0x80
    10fe:	049b      	lsls	r3, r3, #18
    1100:	429a      	cmp	r2, r3
    1102:	d145      	bne.n	1190 <_i2c_master_set_config+0x344>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    1104:	4b42      	ldr	r3, [pc, #264]	; (1210 <_i2c_master_set_config+0x3c4>)
    1106:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1108:	4798      	blx	r3
    110a:	4c45      	ldr	r4, [pc, #276]	; (1220 <_i2c_master_set_config+0x3d4>)
    110c:	0002      	movs	r2, r0
    110e:	000b      	movs	r3, r1
    1110:	47a0      	blx	r4
    1112:	0003      	movs	r3, r0
    1114:	000c      	movs	r4, r1
    1116:	001d      	movs	r5, r3
    1118:	0026      	movs	r6, r4
    111a:	4b3d      	ldr	r3, [pc, #244]	; (1210 <_i2c_master_set_config+0x3c4>)
    111c:	69f8      	ldr	r0, [r7, #28]
    111e:	4798      	blx	r3
    1120:	4c3c      	ldr	r4, [pc, #240]	; (1214 <_i2c_master_set_config+0x3c8>)
    1122:	2200      	movs	r2, #0
    1124:	4b44      	ldr	r3, [pc, #272]	; (1238 <_i2c_master_set_config+0x3ec>)
    1126:	47a0      	blx	r4
    1128:	0003      	movs	r3, r0
    112a:	000c      	movs	r4, r1
    112c:	001a      	movs	r2, r3
    112e:	0023      	movs	r3, r4
    1130:	4c3f      	ldr	r4, [pc, #252]	; (1230 <_i2c_master_set_config+0x3e4>)
    1132:	0028      	movs	r0, r5
    1134:	0031      	movs	r1, r6
    1136:	47a0      	blx	r4
    1138:	0003      	movs	r3, r0
    113a:	000c      	movs	r4, r1
    113c:	0018      	movs	r0, r3
    113e:	0021      	movs	r1, r4
    1140:	4c39      	ldr	r4, [pc, #228]	; (1228 <_i2c_master_set_config+0x3dc>)
    1142:	2200      	movs	r2, #0
    1144:	4b39      	ldr	r3, [pc, #228]	; (122c <_i2c_master_set_config+0x3e0>)
    1146:	47a0      	blx	r4
    1148:	0003      	movs	r3, r0
    114a:	000c      	movs	r4, r1
    114c:	0019      	movs	r1, r3
    114e:	0022      	movs	r2, r4
    1150:	4b38      	ldr	r3, [pc, #224]	; (1234 <_i2c_master_set_config+0x3e8>)
    1152:	0008      	movs	r0, r1
    1154:	0011      	movs	r1, r2
    1156:	4798      	blx	r3
    1158:	0003      	movs	r3, r0
    115a:	647b      	str	r3, [r7, #68]	; 0x44
		if (tmp_baudlow_hs) {
    115c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    115e:	2b00      	cmp	r3, #0
    1160:	d009      	beq.n	1176 <_i2c_master_set_config+0x32a>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    1162:	4b36      	ldr	r3, [pc, #216]	; (123c <_i2c_master_set_config+0x3f0>)
    1164:	69f9      	ldr	r1, [r7, #28]
    1166:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1168:	4798      	blx	r3
    116a:	0003      	movs	r3, r0
    116c:	1e9a      	subs	r2, r3, #2
    116e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1170:	1ad3      	subs	r3, r2, r3
    1172:	64bb      	str	r3, [r7, #72]	; 0x48
    1174:	e00c      	b.n	1190 <_i2c_master_set_config+0x344>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    1176:	69fb      	ldr	r3, [r7, #28]
    1178:	005a      	lsls	r2, r3, #1
    117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    117c:	18d3      	adds	r3, r2, r3
    117e:	1e5a      	subs	r2, r3, #1
    1180:	69fb      	ldr	r3, [r7, #28]
    1182:	0059      	lsls	r1, r3, #1
    1184:	4b2d      	ldr	r3, [pc, #180]	; (123c <_i2c_master_set_config+0x3f0>)
    1186:	0010      	movs	r0, r2
    1188:	4798      	blx	r3
    118a:	0003      	movs	r3, r0
    118c:	3b01      	subs	r3, #1
    118e:	64bb      	str	r3, [r7, #72]	; 0x48
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1192:	2bff      	cmp	r3, #255	; 0xff
    1194:	dc08      	bgt.n	11a8 <_i2c_master_set_config+0x35c>
    1196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1198:	2b00      	cmp	r3, #0
    119a:	db05      	blt.n	11a8 <_i2c_master_set_config+0x35c>
    119c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    119e:	2bff      	cmp	r3, #255	; 0xff
    11a0:	dc02      	bgt.n	11a8 <_i2c_master_set_config+0x35c>
    11a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    11a4:	2b00      	cmp	r3, #0
    11a6:	da06      	bge.n	11b6 <_i2c_master_set_config+0x36a>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    11a8:	233b      	movs	r3, #59	; 0x3b
    11aa:	2208      	movs	r2, #8
    11ac:	4694      	mov	ip, r2
    11ae:	44bc      	add	ip, r7
    11b0:	4463      	add	r3, ip
    11b2:	2240      	movs	r2, #64	; 0x40
    11b4:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    11b6:	233b      	movs	r3, #59	; 0x3b
    11b8:	2208      	movs	r2, #8
    11ba:	4694      	mov	ip, r2
    11bc:	44bc      	add	ip, r7
    11be:	4463      	add	r3, ip
    11c0:	781b      	ldrb	r3, [r3, #0]
    11c2:	2b40      	cmp	r3, #64	; 0x40
    11c4:	d00e      	beq.n	11e4 <_i2c_master_set_config+0x398>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    11c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11c8:	22ff      	movs	r2, #255	; 0xff
    11ca:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    11cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    11ce:	041b      	lsls	r3, r3, #16
    11d0:	0019      	movs	r1, r3
    11d2:	23ff      	movs	r3, #255	; 0xff
    11d4:	041b      	lsls	r3, r3, #16
    11d6:	400b      	ands	r3, r1
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    11d8:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    11da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    11dc:	0612      	lsls	r2, r2, #24
    11de:	431a      	orrs	r2, r3
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    11e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11e2:	60da      	str	r2, [r3, #12]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
	}

	return tmp_status_code;
    11e4:	233b      	movs	r3, #59	; 0x3b
    11e6:	2208      	movs	r2, #8
    11e8:	4694      	mov	ip, r2
    11ea:	44bc      	add	ip, r7
    11ec:	4463      	add	r3, ip
    11ee:	781b      	ldrb	r3, [r3, #0]
}
    11f0:	0018      	movs	r0, r3
    11f2:	46bd      	mov	sp, r7
    11f4:	b015      	add	sp, #84	; 0x54
    11f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11f8:	00001ad1 	.word	0x00001ad1
    11fc:	00000dbd 	.word	0x00000dbd
    1200:	00001915 	.word	0x00001915
    1204:	00005d15 	.word	0x00005d15
    1208:	00000de5 	.word	0x00000de5
    120c:	00005b4d 	.word	0x00005b4d
    1210:	00008169 	.word	0x00008169
    1214:	00007561 	.word	0x00007561
    1218:	e826d695 	.word	0xe826d695
    121c:	3e112e0b 	.word	0x3e112e0b
    1220:	000068dd 	.word	0x000068dd
    1224:	40240000 	.word	0x40240000
    1228:	00007a55 	.word	0x00007a55
    122c:	3ff00000 	.word	0x3ff00000
    1230:	00006f35 	.word	0x00006f35
    1234:	000080fd 	.word	0x000080fd
    1238:	40080000 	.word	0x40080000
    123c:	000063d9 	.word	0x000063d9

00001240 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1240:	b580      	push	{r7, lr}
    1242:	b08a      	sub	sp, #40	; 0x28
    1244:	af00      	add	r7, sp, #0
    1246:	60f8      	str	r0, [r7, #12]
    1248:	60b9      	str	r1, [r7, #8]
    124a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    124c:	68fb      	ldr	r3, [r7, #12]
    124e:	68ba      	ldr	r2, [r7, #8]
    1250:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1252:	68fb      	ldr	r3, [r7, #12]
    1254:	681b      	ldr	r3, [r3, #0]
    1256:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1258:	68fb      	ldr	r3, [r7, #12]
    125a:	681b      	ldr	r3, [r3, #0]
    125c:	0018      	movs	r0, r3
    125e:	4b25      	ldr	r3, [pc, #148]	; (12f4 <i2c_master_init+0xb4>)
    1260:	4798      	blx	r3
    1262:	0003      	movs	r3, r0
    1264:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1266:	6a3b      	ldr	r3, [r7, #32]
    1268:	3302      	adds	r3, #2
    126a:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    126c:	6a3b      	ldr	r3, [r7, #32]
    126e:	3314      	adds	r3, #20
    1270:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1272:	2201      	movs	r2, #1
    1274:	69fb      	ldr	r3, [r7, #28]
    1276:	409a      	lsls	r2, r3
    1278:	0013      	movs	r3, r2
    127a:	0019      	movs	r1, r3
    127c:	2002      	movs	r0, #2
    127e:	4b1e      	ldr	r3, [pc, #120]	; (12f8 <i2c_master_init+0xb8>)
    1280:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1282:	2314      	movs	r3, #20
    1284:	18fb      	adds	r3, r7, r3
    1286:	0018      	movs	r0, r3
    1288:	4b1c      	ldr	r3, [pc, #112]	; (12fc <i2c_master_init+0xbc>)
    128a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    128c:	687b      	ldr	r3, [r7, #4]
    128e:	7b1a      	ldrb	r2, [r3, #12]
    1290:	2314      	movs	r3, #20
    1292:	18fb      	adds	r3, r7, r3
    1294:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1296:	69bb      	ldr	r3, [r7, #24]
    1298:	b2db      	uxtb	r3, r3
    129a:	2214      	movs	r2, #20
    129c:	18ba      	adds	r2, r7, r2
    129e:	0011      	movs	r1, r2
    12a0:	0018      	movs	r0, r3
    12a2:	4b17      	ldr	r3, [pc, #92]	; (1300 <i2c_master_init+0xc0>)
    12a4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    12a6:	69bb      	ldr	r3, [r7, #24]
    12a8:	b2db      	uxtb	r3, r3
    12aa:	0018      	movs	r0, r3
    12ac:	4b15      	ldr	r3, [pc, #84]	; (1304 <i2c_master_init+0xc4>)
    12ae:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    12b0:	687b      	ldr	r3, [r7, #4]
    12b2:	7b1b      	ldrb	r3, [r3, #12]
    12b4:	2100      	movs	r1, #0
    12b6:	0018      	movs	r0, r3
    12b8:	4b13      	ldr	r3, [pc, #76]	; (1308 <i2c_master_init+0xc8>)
    12ba:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    12bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12be:	681b      	ldr	r3, [r3, #0]
    12c0:	2202      	movs	r2, #2
    12c2:	4013      	ands	r3, r2
    12c4:	d001      	beq.n	12ca <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    12c6:	231c      	movs	r3, #28
    12c8:	e010      	b.n	12ec <i2c_master_init+0xac>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    12ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12cc:	681b      	ldr	r3, [r3, #0]
    12ce:	2201      	movs	r2, #1
    12d0:	4013      	ands	r3, r2
    12d2:	d001      	beq.n	12d8 <i2c_master_init+0x98>
		return STATUS_BUSY;
    12d4:	2305      	movs	r3, #5
    12d6:	e009      	b.n	12ec <i2c_master_init+0xac>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    12d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12da:	2214      	movs	r2, #20
    12dc:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    12de:	687a      	ldr	r2, [r7, #4]
    12e0:	68fb      	ldr	r3, [r7, #12]
    12e2:	0011      	movs	r1, r2
    12e4:	0018      	movs	r0, r3
    12e6:	4b09      	ldr	r3, [pc, #36]	; (130c <i2c_master_init+0xcc>)
    12e8:	4798      	blx	r3
    12ea:	0003      	movs	r3, r0
}
    12ec:	0018      	movs	r0, r3
    12ee:	46bd      	mov	sp, r7
    12f0:	b00a      	add	sp, #40	; 0x28
    12f2:	bd80      	pop	{r7, pc}
    12f4:	00001ad1 	.word	0x00001ad1
    12f8:	00000d61 	.word	0x00000d61
    12fc:	00000d49 	.word	0x00000d49
    1300:	000059e1 	.word	0x000059e1
    1304:	00005a25 	.word	0x00005a25
    1308:	00001889 	.word	0x00001889
    130c:	00000e4d 	.word	0x00000e4d

00001310 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    1310:	b580      	push	{r7, lr}
    1312:	b084      	sub	sp, #16
    1314:	af00      	add	r7, sp, #0
    1316:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	681b      	ldr	r3, [r3, #0]
    131c:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    131e:	68fb      	ldr	r3, [r7, #12]
    1320:	7e1b      	ldrb	r3, [r3, #24]
    1322:	b2db      	uxtb	r3, r3
    1324:	001a      	movs	r2, r3
    1326:	2302      	movs	r3, #2
    1328:	4013      	ands	r3, r2
    132a:	d00b      	beq.n	1344 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    132c:	68fb      	ldr	r3, [r7, #12]
    132e:	2202      	movs	r2, #2
    1330:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1332:	68fb      	ldr	r3, [r7, #12]
    1334:	8b5b      	ldrh	r3, [r3, #26]
    1336:	b29b      	uxth	r3, r3
    1338:	001a      	movs	r2, r3
    133a:	2302      	movs	r3, #2
    133c:	4013      	ands	r3, r2
    133e:	d011      	beq.n	1364 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1340:	2341      	movs	r3, #65	; 0x41
    1342:	e010      	b.n	1366 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1344:	68fb      	ldr	r3, [r7, #12]
    1346:	8b5b      	ldrh	r3, [r3, #26]
    1348:	b29b      	uxth	r3, r3
    134a:	001a      	movs	r2, r3
    134c:	2304      	movs	r3, #4
    134e:	4013      	ands	r3, r2
    1350:	d008      	beq.n	1364 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1352:	68fb      	ldr	r3, [r7, #12]
    1354:	685b      	ldr	r3, [r3, #4]
    1356:	22c0      	movs	r2, #192	; 0xc0
    1358:	0292      	lsls	r2, r2, #10
    135a:	431a      	orrs	r2, r3
    135c:	68fb      	ldr	r3, [r7, #12]
    135e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    1360:	2318      	movs	r3, #24
    1362:	e000      	b.n	1366 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    1364:	2300      	movs	r3, #0
}
    1366:	0018      	movs	r0, r3
    1368:	46bd      	mov	sp, r7
    136a:	b004      	add	sp, #16
    136c:	bd80      	pop	{r7, pc}
    136e:	46c0      	nop			; (mov r8, r8)

00001370 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1370:	b580      	push	{r7, lr}
    1372:	b084      	sub	sp, #16
    1374:	af00      	add	r7, sp, #0
    1376:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1378:	687b      	ldr	r3, [r7, #4]
    137a:	681b      	ldr	r3, [r3, #0]
    137c:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    137e:	230e      	movs	r3, #14
    1380:	18fb      	adds	r3, r7, r3
    1382:	2200      	movs	r2, #0
    1384:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1386:	e00f      	b.n	13a8 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    1388:	230e      	movs	r3, #14
    138a:	18fb      	adds	r3, r7, r3
    138c:	220e      	movs	r2, #14
    138e:	18ba      	adds	r2, r7, r2
    1390:	8812      	ldrh	r2, [r2, #0]
    1392:	3201      	adds	r2, #1
    1394:	801a      	strh	r2, [r3, #0]
    1396:	687b      	ldr	r3, [r7, #4]
    1398:	891b      	ldrh	r3, [r3, #8]
    139a:	220e      	movs	r2, #14
    139c:	18ba      	adds	r2, r7, r2
    139e:	8812      	ldrh	r2, [r2, #0]
    13a0:	429a      	cmp	r2, r3
    13a2:	d301      	bcc.n	13a8 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    13a4:	2312      	movs	r3, #18
    13a6:	e00e      	b.n	13c6 <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    13a8:	68bb      	ldr	r3, [r7, #8]
    13aa:	7e1b      	ldrb	r3, [r3, #24]
    13ac:	b2db      	uxtb	r3, r3
    13ae:	001a      	movs	r2, r3
    13b0:	2301      	movs	r3, #1
    13b2:	4013      	ands	r3, r2
    13b4:	d106      	bne.n	13c4 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    13b6:	68bb      	ldr	r3, [r7, #8]
    13b8:	7e1b      	ldrb	r3, [r3, #24]
    13ba:	b2db      	uxtb	r3, r3
    13bc:	001a      	movs	r2, r3
    13be:	2302      	movs	r3, #2
    13c0:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    13c2:	d0e1      	beq.n	1388 <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    13c4:	2300      	movs	r3, #0
}
    13c6:	0018      	movs	r0, r3
    13c8:	46bd      	mov	sp, r7
    13ca:	b004      	add	sp, #16
    13cc:	bd80      	pop	{r7, pc}
    13ce:	46c0      	nop			; (mov r8, r8)

000013d0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    13d0:	b590      	push	{r4, r7, lr}
    13d2:	b085      	sub	sp, #20
    13d4:	af00      	add	r7, sp, #0
    13d6:	6078      	str	r0, [r7, #4]
    13d8:	000a      	movs	r2, r1
    13da:	1cfb      	adds	r3, r7, #3
    13dc:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13de:	687b      	ldr	r3, [r7, #4]
    13e0:	681b      	ldr	r3, [r3, #0]
    13e2:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    13e4:	68fb      	ldr	r3, [r7, #12]
    13e6:	685b      	ldr	r3, [r3, #4]
    13e8:	2280      	movs	r2, #128	; 0x80
    13ea:	02d2      	lsls	r2, r2, #11
    13ec:	431a      	orrs	r2, r3
    13ee:	68fb      	ldr	r3, [r7, #12]
    13f0:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    13f2:	1cfb      	adds	r3, r7, #3
    13f4:	781a      	ldrb	r2, [r3, #0]
    13f6:	68fb      	ldr	r3, [r7, #12]
    13f8:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    13fa:	230b      	movs	r3, #11
    13fc:	18fc      	adds	r4, r7, r3
    13fe:	687b      	ldr	r3, [r7, #4]
    1400:	0018      	movs	r0, r3
    1402:	4b07      	ldr	r3, [pc, #28]	; (1420 <_i2c_master_send_hs_master_code+0x50>)
    1404:	4798      	blx	r3
    1406:	0003      	movs	r3, r0
    1408:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    140a:	68fb      	ldr	r3, [r7, #12]
    140c:	2201      	movs	r2, #1
    140e:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    1410:	230b      	movs	r3, #11
    1412:	18fb      	adds	r3, r7, r3
    1414:	781b      	ldrb	r3, [r3, #0]
}
    1416:	0018      	movs	r0, r3
    1418:	46bd      	mov	sp, r7
    141a:	b005      	add	sp, #20
    141c:	bd90      	pop	{r4, r7, pc}
    141e:	46c0      	nop			; (mov r8, r8)
    1420:	00001371 	.word	0x00001371

00001424 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1424:	b590      	push	{r4, r7, lr}
    1426:	b087      	sub	sp, #28
    1428:	af00      	add	r7, sp, #0
    142a:	6078      	str	r0, [r7, #4]
    142c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    142e:	687b      	ldr	r3, [r7, #4]
    1430:	681b      	ldr	r3, [r3, #0]
    1432:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1434:	2314      	movs	r3, #20
    1436:	18fb      	adds	r3, r7, r3
    1438:	683a      	ldr	r2, [r7, #0]
    143a:	8852      	ldrh	r2, [r2, #2]
    143c:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    143e:	2312      	movs	r3, #18
    1440:	18fb      	adds	r3, r7, r3
    1442:	2200      	movs	r2, #0
    1444:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1446:	68fb      	ldr	r3, [r7, #12]
    1448:	681b      	ldr	r3, [r3, #0]
    144a:	011b      	lsls	r3, r3, #4
    144c:	0fdb      	lsrs	r3, r3, #31
    144e:	b2db      	uxtb	r3, r3
    1450:	001a      	movs	r2, r3
    1452:	230b      	movs	r3, #11
    1454:	18fb      	adds	r3, r7, r3
    1456:	1e51      	subs	r1, r2, #1
    1458:	418a      	sbcs	r2, r1
    145a:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    145c:	683b      	ldr	r3, [r7, #0]
    145e:	7a5b      	ldrb	r3, [r3, #9]
    1460:	2b00      	cmp	r3, #0
    1462:	d006      	beq.n	1472 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1464:	683b      	ldr	r3, [r7, #0]
    1466:	7a9a      	ldrb	r2, [r3, #10]
    1468:	687b      	ldr	r3, [r7, #4]
    146a:	0011      	movs	r1, r2
    146c:	0018      	movs	r0, r3
    146e:	4b85      	ldr	r3, [pc, #532]	; (1684 <_i2c_master_read_packet+0x260>)
    1470:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1472:	68fb      	ldr	r3, [r7, #12]
    1474:	685b      	ldr	r3, [r3, #4]
    1476:	4a84      	ldr	r2, [pc, #528]	; (1688 <_i2c_master_read_packet+0x264>)
    1478:	401a      	ands	r2, r3
    147a:	68fb      	ldr	r3, [r7, #12]
    147c:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    147e:	683b      	ldr	r3, [r7, #0]
    1480:	7a1b      	ldrb	r3, [r3, #8]
    1482:	2b00      	cmp	r3, #0
    1484:	d042      	beq.n	150c <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1486:	683b      	ldr	r3, [r7, #0]
    1488:	881b      	ldrh	r3, [r3, #0]
    148a:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    148c:	683b      	ldr	r3, [r7, #0]
    148e:	7a5b      	ldrb	r3, [r3, #9]
    1490:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1492:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1494:	001a      	movs	r2, r3
    1496:	2380      	movs	r3, #128	; 0x80
    1498:	021b      	lsls	r3, r3, #8
    149a:	431a      	orrs	r2, r3
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    149c:	68fb      	ldr	r3, [r7, #12]
    149e:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    14a0:	2317      	movs	r3, #23
    14a2:	18fc      	adds	r4, r7, r3
    14a4:	687b      	ldr	r3, [r7, #4]
    14a6:	0018      	movs	r0, r3
    14a8:	4b78      	ldr	r3, [pc, #480]	; (168c <_i2c_master_read_packet+0x268>)
    14aa:	4798      	blx	r3
    14ac:	0003      	movs	r3, r0
    14ae:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    14b0:	68fb      	ldr	r3, [r7, #12]
    14b2:	685b      	ldr	r3, [r3, #4]
    14b4:	4a74      	ldr	r2, [pc, #464]	; (1688 <_i2c_master_read_packet+0x264>)
    14b6:	401a      	ands	r2, r3
    14b8:	68fb      	ldr	r3, [r7, #12]
    14ba:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    14bc:	2317      	movs	r3, #23
    14be:	18fb      	adds	r3, r7, r3
    14c0:	781b      	ldrb	r3, [r3, #0]
    14c2:	2b00      	cmp	r3, #0
    14c4:	d107      	bne.n	14d6 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    14c6:	2317      	movs	r3, #23
    14c8:	18fc      	adds	r4, r7, r3
    14ca:	687b      	ldr	r3, [r7, #4]
    14cc:	0018      	movs	r0, r3
    14ce:	4b70      	ldr	r3, [pc, #448]	; (1690 <_i2c_master_read_packet+0x26c>)
    14d0:	4798      	blx	r3
    14d2:	0003      	movs	r3, r0
    14d4:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    14d6:	2317      	movs	r3, #23
    14d8:	18fb      	adds	r3, r7, r3
    14da:	781b      	ldrb	r3, [r3, #0]
    14dc:	2b00      	cmp	r3, #0
    14de:	d111      	bne.n	1504 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    14e0:	683b      	ldr	r3, [r7, #0]
    14e2:	881b      	ldrh	r3, [r3, #0]
    14e4:	0a1b      	lsrs	r3, r3, #8
    14e6:	b29b      	uxth	r3, r3
    14e8:	2278      	movs	r2, #120	; 0x78
    14ea:	4313      	orrs	r3, r2
    14ec:	b29b      	uxth	r3, r3
    14ee:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    14f0:	683b      	ldr	r3, [r7, #0]
    14f2:	7a5b      	ldrb	r3, [r3, #9]
    14f4:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    14f6:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    14f8:	2201      	movs	r2, #1
    14fa:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    14fc:	001a      	movs	r2, r3
    14fe:	68fb      	ldr	r3, [r7, #12]
    1500:	625a      	str	r2, [r3, #36]	; 0x24
    1502:	e00f      	b.n	1524 <_i2c_master_read_packet+0x100>
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    1504:	2317      	movs	r3, #23
    1506:	18fb      	adds	r3, r7, r3
    1508:	781b      	ldrb	r3, [r3, #0]
    150a:	e0b6      	b.n	167a <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    150c:	683b      	ldr	r3, [r7, #0]
    150e:	881b      	ldrh	r3, [r3, #0]
    1510:	005b      	lsls	r3, r3, #1
    1512:	2201      	movs	r2, #1
    1514:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1516:	683b      	ldr	r3, [r7, #0]
    1518:	7a5b      	ldrb	r3, [r3, #9]
    151a:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    151c:	4313      	orrs	r3, r2
    151e:	001a      	movs	r2, r3
    1520:	68fb      	ldr	r3, [r7, #12]
    1522:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1524:	2317      	movs	r3, #23
    1526:	18fc      	adds	r4, r7, r3
    1528:	687b      	ldr	r3, [r7, #4]
    152a:	0018      	movs	r0, r3
    152c:	4b57      	ldr	r3, [pc, #348]	; (168c <_i2c_master_read_packet+0x268>)
    152e:	4798      	blx	r3
    1530:	0003      	movs	r3, r0
    1532:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1534:	230b      	movs	r3, #11
    1536:	18fb      	adds	r3, r7, r3
    1538:	781b      	ldrb	r3, [r3, #0]
    153a:	2b00      	cmp	r3, #0
    153c:	d00b      	beq.n	1556 <_i2c_master_read_packet+0x132>
    153e:	683b      	ldr	r3, [r7, #0]
    1540:	885b      	ldrh	r3, [r3, #2]
    1542:	2b01      	cmp	r3, #1
    1544:	d107      	bne.n	1556 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1546:	68fb      	ldr	r3, [r7, #12]
    1548:	685b      	ldr	r3, [r3, #4]
    154a:	2280      	movs	r2, #128	; 0x80
    154c:	02d2      	lsls	r2, r2, #11
    154e:	431a      	orrs	r2, r3
    1550:	68fb      	ldr	r3, [r7, #12]
    1552:	605a      	str	r2, [r3, #4]
    1554:	e005      	b.n	1562 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    1556:	68fb      	ldr	r3, [r7, #12]
    1558:	685b      	ldr	r3, [r3, #4]
    155a:	4a4b      	ldr	r2, [pc, #300]	; (1688 <_i2c_master_read_packet+0x264>)
    155c:	401a      	ands	r2, r3
    155e:	68fb      	ldr	r3, [r7, #12]
    1560:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1562:	2317      	movs	r3, #23
    1564:	18fb      	adds	r3, r7, r3
    1566:	781b      	ldrb	r3, [r3, #0]
    1568:	2b00      	cmp	r3, #0
    156a:	d107      	bne.n	157c <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    156c:	2317      	movs	r3, #23
    156e:	18fc      	adds	r4, r7, r3
    1570:	687b      	ldr	r3, [r7, #4]
    1572:	0018      	movs	r0, r3
    1574:	4b46      	ldr	r3, [pc, #280]	; (1690 <_i2c_master_read_packet+0x26c>)
    1576:	4798      	blx	r3
    1578:	0003      	movs	r3, r0
    157a:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    157c:	2317      	movs	r3, #23
    157e:	18fb      	adds	r3, r7, r3
    1580:	781b      	ldrb	r3, [r3, #0]
    1582:	2b00      	cmp	r3, #0
    1584:	d000      	beq.n	1588 <_i2c_master_read_packet+0x164>
    1586:	e075      	b.n	1674 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    1588:	e04b      	b.n	1622 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    158a:	68fb      	ldr	r3, [r7, #12]
    158c:	8b5b      	ldrh	r3, [r3, #26]
    158e:	b29b      	uxth	r3, r3
    1590:	001a      	movs	r2, r3
    1592:	2320      	movs	r3, #32
    1594:	4013      	ands	r3, r2
    1596:	d101      	bne.n	159c <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    1598:	2341      	movs	r3, #65	; 0x41
    159a:	e06e      	b.n	167a <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    159c:	687b      	ldr	r3, [r7, #4]
    159e:	7adb      	ldrb	r3, [r3, #11]
    15a0:	2b00      	cmp	r3, #0
    15a2:	d01e      	beq.n	15e2 <_i2c_master_read_packet+0x1be>
    15a4:	230b      	movs	r3, #11
    15a6:	18fb      	adds	r3, r7, r3
    15a8:	781b      	ldrb	r3, [r3, #0]
    15aa:	2201      	movs	r2, #1
    15ac:	4053      	eors	r3, r2
    15ae:	b2db      	uxtb	r3, r3
    15b0:	2b00      	cmp	r3, #0
    15b2:	d004      	beq.n	15be <_i2c_master_read_packet+0x19a>
    15b4:	2314      	movs	r3, #20
    15b6:	18fb      	adds	r3, r7, r3
    15b8:	881b      	ldrh	r3, [r3, #0]
    15ba:	2b00      	cmp	r3, #0
    15bc:	d009      	beq.n	15d2 <_i2c_master_read_packet+0x1ae>
    15be:	230b      	movs	r3, #11
    15c0:	18fb      	adds	r3, r7, r3
    15c2:	781b      	ldrb	r3, [r3, #0]
    15c4:	2b00      	cmp	r3, #0
    15c6:	d00c      	beq.n	15e2 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    15c8:	2314      	movs	r3, #20
    15ca:	18fb      	adds	r3, r7, r3
    15cc:	881b      	ldrh	r3, [r3, #0]
    15ce:	2b01      	cmp	r3, #1
    15d0:	d107      	bne.n	15e2 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    15d2:	68fb      	ldr	r3, [r7, #12]
    15d4:	685b      	ldr	r3, [r3, #4]
    15d6:	2280      	movs	r2, #128	; 0x80
    15d8:	02d2      	lsls	r2, r2, #11
    15da:	431a      	orrs	r2, r3
    15dc:	68fb      	ldr	r3, [r7, #12]
    15de:	605a      	str	r2, [r3, #4]
    15e0:	e01a      	b.n	1618 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    15e2:	687b      	ldr	r3, [r7, #4]
    15e4:	0018      	movs	r0, r3
    15e6:	4b2b      	ldr	r3, [pc, #172]	; (1694 <_i2c_master_read_packet+0x270>)
    15e8:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    15ea:	683b      	ldr	r3, [r7, #0]
    15ec:	685a      	ldr	r2, [r3, #4]
    15ee:	2312      	movs	r3, #18
    15f0:	18fb      	adds	r3, r7, r3
    15f2:	881b      	ldrh	r3, [r3, #0]
    15f4:	2112      	movs	r1, #18
    15f6:	1879      	adds	r1, r7, r1
    15f8:	1c58      	adds	r0, r3, #1
    15fa:	8008      	strh	r0, [r1, #0]
    15fc:	18d3      	adds	r3, r2, r3
    15fe:	68fa      	ldr	r2, [r7, #12]
    1600:	2128      	movs	r1, #40	; 0x28
    1602:	5c52      	ldrb	r2, [r2, r1]
    1604:	b2d2      	uxtb	r2, r2
    1606:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    1608:	2317      	movs	r3, #23
    160a:	18fc      	adds	r4, r7, r3
    160c:	687b      	ldr	r3, [r7, #4]
    160e:	0018      	movs	r0, r3
    1610:	4b1e      	ldr	r3, [pc, #120]	; (168c <_i2c_master_read_packet+0x268>)
    1612:	4798      	blx	r3
    1614:	0003      	movs	r3, r0
    1616:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1618:	2317      	movs	r3, #23
    161a:	18fb      	adds	r3, r7, r3
    161c:	781b      	ldrb	r3, [r3, #0]
    161e:	2b00      	cmp	r3, #0
    1620:	d109      	bne.n	1636 <_i2c_master_read_packet+0x212>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
    1622:	2314      	movs	r3, #20
    1624:	18fb      	adds	r3, r7, r3
    1626:	881b      	ldrh	r3, [r3, #0]
    1628:	2214      	movs	r2, #20
    162a:	18ba      	adds	r2, r7, r2
    162c:	1e59      	subs	r1, r3, #1
    162e:	8011      	strh	r1, [r2, #0]
    1630:	2b00      	cmp	r3, #0
    1632:	d1aa      	bne.n	158a <_i2c_master_read_packet+0x166>
    1634:	e000      	b.n	1638 <_i2c_master_read_packet+0x214>
				tmp_status = _i2c_master_wait_for_bus(module);
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    1636:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    1638:	687b      	ldr	r3, [r7, #4]
    163a:	7a9b      	ldrb	r3, [r3, #10]
    163c:	2b00      	cmp	r3, #0
    163e:	d00a      	beq.n	1656 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    1640:	687b      	ldr	r3, [r7, #4]
    1642:	0018      	movs	r0, r3
    1644:	4b13      	ldr	r3, [pc, #76]	; (1694 <_i2c_master_read_packet+0x270>)
    1646:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1648:	68fb      	ldr	r3, [r7, #12]
    164a:	685b      	ldr	r3, [r3, #4]
    164c:	22c0      	movs	r2, #192	; 0xc0
    164e:	0292      	lsls	r2, r2, #10
    1650:	431a      	orrs	r2, r3
    1652:	68fb      	ldr	r3, [r7, #12]
    1654:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    1656:	687b      	ldr	r3, [r7, #4]
    1658:	0018      	movs	r0, r3
    165a:	4b0e      	ldr	r3, [pc, #56]	; (1694 <_i2c_master_read_packet+0x270>)
    165c:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    165e:	683b      	ldr	r3, [r7, #0]
    1660:	685a      	ldr	r2, [r3, #4]
    1662:	2312      	movs	r3, #18
    1664:	18fb      	adds	r3, r7, r3
    1666:	881b      	ldrh	r3, [r3, #0]
    1668:	18d3      	adds	r3, r2, r3
    166a:	68fa      	ldr	r2, [r7, #12]
    166c:	2128      	movs	r1, #40	; 0x28
    166e:	5c52      	ldrb	r2, [r2, r1]
    1670:	b2d2      	uxtb	r2, r2
    1672:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    1674:	2317      	movs	r3, #23
    1676:	18fb      	adds	r3, r7, r3
    1678:	781b      	ldrb	r3, [r3, #0]
}
    167a:	0018      	movs	r0, r3
    167c:	46bd      	mov	sp, r7
    167e:	b007      	add	sp, #28
    1680:	bd90      	pop	{r4, r7, pc}
    1682:	46c0      	nop			; (mov r8, r8)
    1684:	000013d1 	.word	0x000013d1
    1688:	fffbffff 	.word	0xfffbffff
    168c:	00001371 	.word	0x00001371
    1690:	00001311 	.word	0x00001311
    1694:	00000e29 	.word	0x00000e29

00001698 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1698:	b580      	push	{r7, lr}
    169a:	b082      	sub	sp, #8
    169c:	af00      	add	r7, sp, #0
    169e:	6078      	str	r0, [r7, #4]
    16a0:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    16a2:	687b      	ldr	r3, [r7, #4]
    16a4:	2201      	movs	r2, #1
    16a6:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	2201      	movs	r2, #1
    16ac:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    16ae:	683a      	ldr	r2, [r7, #0]
    16b0:	687b      	ldr	r3, [r7, #4]
    16b2:	0011      	movs	r1, r2
    16b4:	0018      	movs	r0, r3
    16b6:	4b03      	ldr	r3, [pc, #12]	; (16c4 <i2c_master_read_packet_wait+0x2c>)
    16b8:	4798      	blx	r3
    16ba:	0003      	movs	r3, r0
}
    16bc:	0018      	movs	r0, r3
    16be:	46bd      	mov	sp, r7
    16c0:	b002      	add	sp, #8
    16c2:	bd80      	pop	{r7, pc}
    16c4:	00001425 	.word	0x00001425

000016c8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    16c8:	b590      	push	{r4, r7, lr}
    16ca:	b087      	sub	sp, #28
    16cc:	af00      	add	r7, sp, #0
    16ce:	6078      	str	r0, [r7, #4]
    16d0:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16d2:	687b      	ldr	r3, [r7, #4]
    16d4:	681b      	ldr	r3, [r3, #0]
    16d6:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    16d8:	2314      	movs	r3, #20
    16da:	18fb      	adds	r3, r7, r3
    16dc:	683a      	ldr	r2, [r7, #0]
    16de:	8852      	ldrh	r2, [r2, #2]
    16e0:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	0018      	movs	r0, r3
    16e6:	4b51      	ldr	r3, [pc, #324]	; (182c <_i2c_master_write_packet+0x164>)
    16e8:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    16ea:	683b      	ldr	r3, [r7, #0]
    16ec:	7a5b      	ldrb	r3, [r3, #9]
    16ee:	2b00      	cmp	r3, #0
    16f0:	d006      	beq.n	1700 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    16f2:	683b      	ldr	r3, [r7, #0]
    16f4:	7a9a      	ldrb	r2, [r3, #10]
    16f6:	687b      	ldr	r3, [r7, #4]
    16f8:	0011      	movs	r1, r2
    16fa:	0018      	movs	r0, r3
    16fc:	4b4c      	ldr	r3, [pc, #304]	; (1830 <_i2c_master_write_packet+0x168>)
    16fe:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1700:	68fb      	ldr	r3, [r7, #12]
    1702:	685b      	ldr	r3, [r3, #4]
    1704:	4a4b      	ldr	r2, [pc, #300]	; (1834 <_i2c_master_write_packet+0x16c>)
    1706:	401a      	ands	r2, r3
    1708:	68fb      	ldr	r3, [r7, #12]
    170a:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    170c:	683b      	ldr	r3, [r7, #0]
    170e:	7a1b      	ldrb	r3, [r3, #8]
    1710:	2b00      	cmp	r3, #0
    1712:	d00d      	beq.n	1730 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1714:	683b      	ldr	r3, [r7, #0]
    1716:	881b      	ldrh	r3, [r3, #0]
    1718:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    171a:	683b      	ldr	r3, [r7, #0]
    171c:	7a5b      	ldrb	r3, [r3, #9]
    171e:	039b      	lsls	r3, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1720:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1722:	001a      	movs	r2, r3
    1724:	2380      	movs	r3, #128	; 0x80
    1726:	021b      	lsls	r3, r3, #8
    1728:	431a      	orrs	r2, r3
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    172a:	68fb      	ldr	r3, [r7, #12]
    172c:	625a      	str	r2, [r3, #36]	; 0x24
    172e:	e009      	b.n	1744 <_i2c_master_write_packet+0x7c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1730:	683b      	ldr	r3, [r7, #0]
    1732:	881b      	ldrh	r3, [r3, #0]
    1734:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1736:	683b      	ldr	r3, [r7, #0]
    1738:	7a5b      	ldrb	r3, [r3, #9]
    173a:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    173c:	4313      	orrs	r3, r2
    173e:	001a      	movs	r2, r3
    1740:	68fb      	ldr	r3, [r7, #12]
    1742:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1744:	2317      	movs	r3, #23
    1746:	18fc      	adds	r4, r7, r3
    1748:	687b      	ldr	r3, [r7, #4]
    174a:	0018      	movs	r0, r3
    174c:	4b3a      	ldr	r3, [pc, #232]	; (1838 <_i2c_master_write_packet+0x170>)
    174e:	4798      	blx	r3
    1750:	0003      	movs	r3, r0
    1752:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1754:	2317      	movs	r3, #23
    1756:	18fb      	adds	r3, r7, r3
    1758:	781b      	ldrb	r3, [r3, #0]
    175a:	2b00      	cmp	r3, #0
    175c:	d107      	bne.n	176e <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    175e:	2317      	movs	r3, #23
    1760:	18fc      	adds	r4, r7, r3
    1762:	687b      	ldr	r3, [r7, #4]
    1764:	0018      	movs	r0, r3
    1766:	4b35      	ldr	r3, [pc, #212]	; (183c <_i2c_master_write_packet+0x174>)
    1768:	4798      	blx	r3
    176a:	0003      	movs	r3, r0
    176c:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    176e:	2317      	movs	r3, #23
    1770:	18fb      	adds	r3, r7, r3
    1772:	781b      	ldrb	r3, [r3, #0]
    1774:	2b00      	cmp	r3, #0
    1776:	d152      	bne.n	181e <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    1778:	2312      	movs	r3, #18
    177a:	18fb      	adds	r3, r7, r3
    177c:	2200      	movs	r2, #0
    177e:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    1780:	e033      	b.n	17ea <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1782:	68fb      	ldr	r3, [r7, #12]
    1784:	8b5b      	ldrh	r3, [r3, #26]
    1786:	b29b      	uxth	r3, r3
    1788:	001a      	movs	r2, r3
    178a:	2320      	movs	r3, #32
    178c:	4013      	ands	r3, r2
    178e:	d101      	bne.n	1794 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    1790:	2341      	movs	r3, #65	; 0x41
    1792:	e047      	b.n	1824 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    1794:	687b      	ldr	r3, [r7, #4]
    1796:	0018      	movs	r0, r3
    1798:	4b24      	ldr	r3, [pc, #144]	; (182c <_i2c_master_write_packet+0x164>)
    179a:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	685a      	ldr	r2, [r3, #4]
    17a0:	2312      	movs	r3, #18
    17a2:	18fb      	adds	r3, r7, r3
    17a4:	881b      	ldrh	r3, [r3, #0]
    17a6:	2112      	movs	r1, #18
    17a8:	1879      	adds	r1, r7, r1
    17aa:	1c58      	adds	r0, r3, #1
    17ac:	8008      	strh	r0, [r1, #0]
    17ae:	18d3      	adds	r3, r2, r3
    17b0:	7819      	ldrb	r1, [r3, #0]
    17b2:	68fb      	ldr	r3, [r7, #12]
    17b4:	2228      	movs	r2, #40	; 0x28
    17b6:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    17b8:	2317      	movs	r3, #23
    17ba:	18fc      	adds	r4, r7, r3
    17bc:	687b      	ldr	r3, [r7, #4]
    17be:	0018      	movs	r0, r3
    17c0:	4b1d      	ldr	r3, [pc, #116]	; (1838 <_i2c_master_write_packet+0x170>)
    17c2:	4798      	blx	r3
    17c4:	0003      	movs	r3, r0
    17c6:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    17c8:	2317      	movs	r3, #23
    17ca:	18fb      	adds	r3, r7, r3
    17cc:	781b      	ldrb	r3, [r3, #0]
    17ce:	2b00      	cmp	r3, #0
    17d0:	d115      	bne.n	17fe <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    17d2:	68fb      	ldr	r3, [r7, #12]
    17d4:	8b5b      	ldrh	r3, [r3, #26]
    17d6:	b29b      	uxth	r3, r3
    17d8:	001a      	movs	r2, r3
    17da:	2304      	movs	r3, #4
    17dc:	4013      	ands	r3, r2
    17de:	d004      	beq.n	17ea <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    17e0:	2317      	movs	r3, #23
    17e2:	18fb      	adds	r3, r7, r3
    17e4:	221e      	movs	r2, #30
    17e6:	701a      	strb	r2, [r3, #0]
				break;
    17e8:	e00a      	b.n	1800 <_i2c_master_write_packet+0x138>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    17ea:	2314      	movs	r3, #20
    17ec:	18fb      	adds	r3, r7, r3
    17ee:	881b      	ldrh	r3, [r3, #0]
    17f0:	2214      	movs	r2, #20
    17f2:	18ba      	adds	r2, r7, r2
    17f4:	1e59      	subs	r1, r3, #1
    17f6:	8011      	strh	r1, [r2, #0]
    17f8:	2b00      	cmp	r3, #0
    17fa:	d1c2      	bne.n	1782 <_i2c_master_write_packet+0xba>
    17fc:	e000      	b.n	1800 <_i2c_master_write_packet+0x138>
			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    17fe:	46c0      	nop			; (mov r8, r8)
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
    1800:	687b      	ldr	r3, [r7, #4]
    1802:	7a9b      	ldrb	r3, [r3, #10]
    1804:	2b00      	cmp	r3, #0
    1806:	d00a      	beq.n	181e <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    1808:	687b      	ldr	r3, [r7, #4]
    180a:	0018      	movs	r0, r3
    180c:	4b07      	ldr	r3, [pc, #28]	; (182c <_i2c_master_write_packet+0x164>)
    180e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1810:	68fb      	ldr	r3, [r7, #12]
    1812:	685b      	ldr	r3, [r3, #4]
    1814:	22c0      	movs	r2, #192	; 0xc0
    1816:	0292      	lsls	r2, r2, #10
    1818:	431a      	orrs	r2, r3
    181a:	68fb      	ldr	r3, [r7, #12]
    181c:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    181e:	2317      	movs	r3, #23
    1820:	18fb      	adds	r3, r7, r3
    1822:	781b      	ldrb	r3, [r3, #0]
}
    1824:	0018      	movs	r0, r3
    1826:	46bd      	mov	sp, r7
    1828:	b007      	add	sp, #28
    182a:	bd90      	pop	{r4, r7, pc}
    182c:	00000e29 	.word	0x00000e29
    1830:	000013d1 	.word	0x000013d1
    1834:	fffbffff 	.word	0xfffbffff
    1838:	00001371 	.word	0x00001371
    183c:	00001311 	.word	0x00001311

00001840 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1840:	b580      	push	{r7, lr}
    1842:	b082      	sub	sp, #8
    1844:	af00      	add	r7, sp, #0
    1846:	6078      	str	r0, [r7, #4]
    1848:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    184a:	687b      	ldr	r3, [r7, #4]
    184c:	2201      	movs	r2, #1
    184e:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1850:	687b      	ldr	r3, [r7, #4]
    1852:	2201      	movs	r2, #1
    1854:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    1856:	683a      	ldr	r2, [r7, #0]
    1858:	687b      	ldr	r3, [r7, #4]
    185a:	0011      	movs	r1, r2
    185c:	0018      	movs	r0, r3
    185e:	4b03      	ldr	r3, [pc, #12]	; (186c <i2c_master_write_packet_wait+0x2c>)
    1860:	4798      	blx	r3
    1862:	0003      	movs	r3, r0
}
    1864:	0018      	movs	r0, r3
    1866:	46bd      	mov	sp, r7
    1868:	b002      	add	sp, #8
    186a:	bd80      	pop	{r7, pc}
    186c:	000016c9 	.word	0x000016c9

00001870 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1870:	b580      	push	{r7, lr}
    1872:	b082      	sub	sp, #8
    1874:	af00      	add	r7, sp, #0
    1876:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1878:	687b      	ldr	r3, [r7, #4]
    187a:	2200      	movs	r2, #0
    187c:	701a      	strb	r2, [r3, #0]
}
    187e:	46c0      	nop			; (mov r8, r8)
    1880:	46bd      	mov	sp, r7
    1882:	b002      	add	sp, #8
    1884:	bd80      	pop	{r7, pc}
    1886:	46c0      	nop			; (mov r8, r8)

00001888 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1888:	b580      	push	{r7, lr}
    188a:	b084      	sub	sp, #16
    188c:	af00      	add	r7, sp, #0
    188e:	0002      	movs	r2, r0
    1890:	1dfb      	adds	r3, r7, #7
    1892:	701a      	strb	r2, [r3, #0]
    1894:	1dbb      	adds	r3, r7, #6
    1896:	1c0a      	adds	r2, r1, #0
    1898:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    189a:	4b1a      	ldr	r3, [pc, #104]	; (1904 <sercom_set_gclk_generator+0x7c>)
    189c:	781b      	ldrb	r3, [r3, #0]
    189e:	2201      	movs	r2, #1
    18a0:	4053      	eors	r3, r2
    18a2:	b2db      	uxtb	r3, r3
    18a4:	2b00      	cmp	r3, #0
    18a6:	d103      	bne.n	18b0 <sercom_set_gclk_generator+0x28>
    18a8:	1dbb      	adds	r3, r7, #6
    18aa:	781b      	ldrb	r3, [r3, #0]
    18ac:	2b00      	cmp	r3, #0
    18ae:	d01b      	beq.n	18e8 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    18b0:	230c      	movs	r3, #12
    18b2:	18fb      	adds	r3, r7, r3
    18b4:	0018      	movs	r0, r3
    18b6:	4b14      	ldr	r3, [pc, #80]	; (1908 <sercom_set_gclk_generator+0x80>)
    18b8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    18ba:	230c      	movs	r3, #12
    18bc:	18fb      	adds	r3, r7, r3
    18be:	1dfa      	adds	r2, r7, #7
    18c0:	7812      	ldrb	r2, [r2, #0]
    18c2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    18c4:	230c      	movs	r3, #12
    18c6:	18fb      	adds	r3, r7, r3
    18c8:	0019      	movs	r1, r3
    18ca:	2013      	movs	r0, #19
    18cc:	4b0f      	ldr	r3, [pc, #60]	; (190c <sercom_set_gclk_generator+0x84>)
    18ce:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    18d0:	2013      	movs	r0, #19
    18d2:	4b0f      	ldr	r3, [pc, #60]	; (1910 <sercom_set_gclk_generator+0x88>)
    18d4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    18d6:	4b0b      	ldr	r3, [pc, #44]	; (1904 <sercom_set_gclk_generator+0x7c>)
    18d8:	1dfa      	adds	r2, r7, #7
    18da:	7812      	ldrb	r2, [r2, #0]
    18dc:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    18de:	4b09      	ldr	r3, [pc, #36]	; (1904 <sercom_set_gclk_generator+0x7c>)
    18e0:	2201      	movs	r2, #1
    18e2:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    18e4:	2300      	movs	r3, #0
    18e6:	e008      	b.n	18fa <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    18e8:	4b06      	ldr	r3, [pc, #24]	; (1904 <sercom_set_gclk_generator+0x7c>)
    18ea:	785b      	ldrb	r3, [r3, #1]
    18ec:	1dfa      	adds	r2, r7, #7
    18ee:	7812      	ldrb	r2, [r2, #0]
    18f0:	429a      	cmp	r2, r3
    18f2:	d101      	bne.n	18f8 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    18f4:	2300      	movs	r3, #0
    18f6:	e000      	b.n	18fa <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    18f8:	231d      	movs	r3, #29
}
    18fa:	0018      	movs	r0, r3
    18fc:	46bd      	mov	sp, r7
    18fe:	b004      	add	sp, #16
    1900:	bd80      	pop	{r7, pc}
    1902:	46c0      	nop			; (mov r8, r8)
    1904:	20000118 	.word	0x20000118
    1908:	00001871 	.word	0x00001871
    190c:	000059e1 	.word	0x000059e1
    1910:	00005a25 	.word	0x00005a25

00001914 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    1914:	b580      	push	{r7, lr}
    1916:	b082      	sub	sp, #8
    1918:	af00      	add	r7, sp, #0
    191a:	6078      	str	r0, [r7, #4]
    191c:	000a      	movs	r2, r1
    191e:	1cfb      	adds	r3, r7, #3
    1920:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    1922:	687b      	ldr	r3, [r7, #4]
    1924:	4a4d      	ldr	r2, [pc, #308]	; (1a5c <_sercom_get_default_pad+0x148>)
    1926:	4293      	cmp	r3, r2
    1928:	d03f      	beq.n	19aa <_sercom_get_default_pad+0x96>
    192a:	4a4c      	ldr	r2, [pc, #304]	; (1a5c <_sercom_get_default_pad+0x148>)
    192c:	4293      	cmp	r3, r2
    192e:	d806      	bhi.n	193e <_sercom_get_default_pad+0x2a>
    1930:	4a4b      	ldr	r2, [pc, #300]	; (1a60 <_sercom_get_default_pad+0x14c>)
    1932:	4293      	cmp	r3, r2
    1934:	d00f      	beq.n	1956 <_sercom_get_default_pad+0x42>
    1936:	4a4b      	ldr	r2, [pc, #300]	; (1a64 <_sercom_get_default_pad+0x150>)
    1938:	4293      	cmp	r3, r2
    193a:	d021      	beq.n	1980 <_sercom_get_default_pad+0x6c>
    193c:	e089      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    193e:	4a4a      	ldr	r2, [pc, #296]	; (1a68 <_sercom_get_default_pad+0x154>)
    1940:	4293      	cmp	r3, r2
    1942:	d100      	bne.n	1946 <_sercom_get_default_pad+0x32>
    1944:	e05b      	b.n	19fe <_sercom_get_default_pad+0xea>
    1946:	4a49      	ldr	r2, [pc, #292]	; (1a6c <_sercom_get_default_pad+0x158>)
    1948:	4293      	cmp	r3, r2
    194a:	d100      	bne.n	194e <_sercom_get_default_pad+0x3a>
    194c:	e06c      	b.n	1a28 <_sercom_get_default_pad+0x114>
    194e:	4a48      	ldr	r2, [pc, #288]	; (1a70 <_sercom_get_default_pad+0x15c>)
    1950:	4293      	cmp	r3, r2
    1952:	d03f      	beq.n	19d4 <_sercom_get_default_pad+0xc0>
    1954:	e07d      	b.n	1a52 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1956:	1cfb      	adds	r3, r7, #3
    1958:	781b      	ldrb	r3, [r3, #0]
    195a:	2b01      	cmp	r3, #1
    195c:	d00a      	beq.n	1974 <_sercom_get_default_pad+0x60>
    195e:	dc02      	bgt.n	1966 <_sercom_get_default_pad+0x52>
    1960:	2b00      	cmp	r3, #0
    1962:	d005      	beq.n	1970 <_sercom_get_default_pad+0x5c>
    1964:	e075      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    1966:	2b02      	cmp	r3, #2
    1968:	d006      	beq.n	1978 <_sercom_get_default_pad+0x64>
    196a:	2b03      	cmp	r3, #3
    196c:	d006      	beq.n	197c <_sercom_get_default_pad+0x68>
    196e:	e070      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    1970:	4b40      	ldr	r3, [pc, #256]	; (1a74 <_sercom_get_default_pad+0x160>)
    1972:	e06f      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1974:	4b40      	ldr	r3, [pc, #256]	; (1a78 <_sercom_get_default_pad+0x164>)
    1976:	e06d      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1978:	4b40      	ldr	r3, [pc, #256]	; (1a7c <_sercom_get_default_pad+0x168>)
    197a:	e06b      	b.n	1a54 <_sercom_get_default_pad+0x140>
    197c:	4b40      	ldr	r3, [pc, #256]	; (1a80 <_sercom_get_default_pad+0x16c>)
    197e:	e069      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1980:	1cfb      	adds	r3, r7, #3
    1982:	781b      	ldrb	r3, [r3, #0]
    1984:	2b01      	cmp	r3, #1
    1986:	d00a      	beq.n	199e <_sercom_get_default_pad+0x8a>
    1988:	dc02      	bgt.n	1990 <_sercom_get_default_pad+0x7c>
    198a:	2b00      	cmp	r3, #0
    198c:	d005      	beq.n	199a <_sercom_get_default_pad+0x86>
    198e:	e060      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    1990:	2b02      	cmp	r3, #2
    1992:	d006      	beq.n	19a2 <_sercom_get_default_pad+0x8e>
    1994:	2b03      	cmp	r3, #3
    1996:	d006      	beq.n	19a6 <_sercom_get_default_pad+0x92>
    1998:	e05b      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    199a:	2303      	movs	r3, #3
    199c:	e05a      	b.n	1a54 <_sercom_get_default_pad+0x140>
    199e:	4b39      	ldr	r3, [pc, #228]	; (1a84 <_sercom_get_default_pad+0x170>)
    19a0:	e058      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19a2:	4b39      	ldr	r3, [pc, #228]	; (1a88 <_sercom_get_default_pad+0x174>)
    19a4:	e056      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19a6:	4b39      	ldr	r3, [pc, #228]	; (1a8c <_sercom_get_default_pad+0x178>)
    19a8:	e054      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19aa:	1cfb      	adds	r3, r7, #3
    19ac:	781b      	ldrb	r3, [r3, #0]
    19ae:	2b01      	cmp	r3, #1
    19b0:	d00a      	beq.n	19c8 <_sercom_get_default_pad+0xb4>
    19b2:	dc02      	bgt.n	19ba <_sercom_get_default_pad+0xa6>
    19b4:	2b00      	cmp	r3, #0
    19b6:	d005      	beq.n	19c4 <_sercom_get_default_pad+0xb0>
    19b8:	e04b      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    19ba:	2b02      	cmp	r3, #2
    19bc:	d006      	beq.n	19cc <_sercom_get_default_pad+0xb8>
    19be:	2b03      	cmp	r3, #3
    19c0:	d006      	beq.n	19d0 <_sercom_get_default_pad+0xbc>
    19c2:	e046      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    19c4:	4b32      	ldr	r3, [pc, #200]	; (1a90 <_sercom_get_default_pad+0x17c>)
    19c6:	e045      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19c8:	4b32      	ldr	r3, [pc, #200]	; (1a94 <_sercom_get_default_pad+0x180>)
    19ca:	e043      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19cc:	4b32      	ldr	r3, [pc, #200]	; (1a98 <_sercom_get_default_pad+0x184>)
    19ce:	e041      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19d0:	4b32      	ldr	r3, [pc, #200]	; (1a9c <_sercom_get_default_pad+0x188>)
    19d2:	e03f      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19d4:	1cfb      	adds	r3, r7, #3
    19d6:	781b      	ldrb	r3, [r3, #0]
    19d8:	2b01      	cmp	r3, #1
    19da:	d00a      	beq.n	19f2 <_sercom_get_default_pad+0xde>
    19dc:	dc02      	bgt.n	19e4 <_sercom_get_default_pad+0xd0>
    19de:	2b00      	cmp	r3, #0
    19e0:	d005      	beq.n	19ee <_sercom_get_default_pad+0xda>
    19e2:	e036      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    19e4:	2b02      	cmp	r3, #2
    19e6:	d006      	beq.n	19f6 <_sercom_get_default_pad+0xe2>
    19e8:	2b03      	cmp	r3, #3
    19ea:	d006      	beq.n	19fa <_sercom_get_default_pad+0xe6>
    19ec:	e031      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    19ee:	4b2c      	ldr	r3, [pc, #176]	; (1aa0 <_sercom_get_default_pad+0x18c>)
    19f0:	e030      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19f2:	4b2c      	ldr	r3, [pc, #176]	; (1aa4 <_sercom_get_default_pad+0x190>)
    19f4:	e02e      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19f6:	4b2c      	ldr	r3, [pc, #176]	; (1aa8 <_sercom_get_default_pad+0x194>)
    19f8:	e02c      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19fa:	4b2c      	ldr	r3, [pc, #176]	; (1aac <_sercom_get_default_pad+0x198>)
    19fc:	e02a      	b.n	1a54 <_sercom_get_default_pad+0x140>
    19fe:	1cfb      	adds	r3, r7, #3
    1a00:	781b      	ldrb	r3, [r3, #0]
    1a02:	2b01      	cmp	r3, #1
    1a04:	d00a      	beq.n	1a1c <_sercom_get_default_pad+0x108>
    1a06:	dc02      	bgt.n	1a0e <_sercom_get_default_pad+0xfa>
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d005      	beq.n	1a18 <_sercom_get_default_pad+0x104>
    1a0c:	e021      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    1a0e:	2b02      	cmp	r3, #2
    1a10:	d006      	beq.n	1a20 <_sercom_get_default_pad+0x10c>
    1a12:	2b03      	cmp	r3, #3
    1a14:	d006      	beq.n	1a24 <_sercom_get_default_pad+0x110>
    1a16:	e01c      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    1a18:	4b25      	ldr	r3, [pc, #148]	; (1ab0 <_sercom_get_default_pad+0x19c>)
    1a1a:	e01b      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1a1c:	4b25      	ldr	r3, [pc, #148]	; (1ab4 <_sercom_get_default_pad+0x1a0>)
    1a1e:	e019      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1a20:	4b25      	ldr	r3, [pc, #148]	; (1ab8 <_sercom_get_default_pad+0x1a4>)
    1a22:	e017      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1a24:	4b25      	ldr	r3, [pc, #148]	; (1abc <_sercom_get_default_pad+0x1a8>)
    1a26:	e015      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1a28:	1cfb      	adds	r3, r7, #3
    1a2a:	781b      	ldrb	r3, [r3, #0]
    1a2c:	2b01      	cmp	r3, #1
    1a2e:	d00a      	beq.n	1a46 <_sercom_get_default_pad+0x132>
    1a30:	dc02      	bgt.n	1a38 <_sercom_get_default_pad+0x124>
    1a32:	2b00      	cmp	r3, #0
    1a34:	d005      	beq.n	1a42 <_sercom_get_default_pad+0x12e>
    1a36:	e00c      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    1a38:	2b02      	cmp	r3, #2
    1a3a:	d006      	beq.n	1a4a <_sercom_get_default_pad+0x136>
    1a3c:	2b03      	cmp	r3, #3
    1a3e:	d006      	beq.n	1a4e <_sercom_get_default_pad+0x13a>
    1a40:	e007      	b.n	1a52 <_sercom_get_default_pad+0x13e>
    1a42:	4b1f      	ldr	r3, [pc, #124]	; (1ac0 <_sercom_get_default_pad+0x1ac>)
    1a44:	e006      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1a46:	4b1f      	ldr	r3, [pc, #124]	; (1ac4 <_sercom_get_default_pad+0x1b0>)
    1a48:	e004      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1a4a:	4b1f      	ldr	r3, [pc, #124]	; (1ac8 <_sercom_get_default_pad+0x1b4>)
    1a4c:	e002      	b.n	1a54 <_sercom_get_default_pad+0x140>
    1a4e:	4b1f      	ldr	r3, [pc, #124]	; (1acc <_sercom_get_default_pad+0x1b8>)
    1a50:	e000      	b.n	1a54 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    1a52:	2300      	movs	r3, #0
}
    1a54:	0018      	movs	r0, r3
    1a56:	46bd      	mov	sp, r7
    1a58:	b002      	add	sp, #8
    1a5a:	bd80      	pop	{r7, pc}
    1a5c:	42001000 	.word	0x42001000
    1a60:	42000800 	.word	0x42000800
    1a64:	42000c00 	.word	0x42000c00
    1a68:	42001800 	.word	0x42001800
    1a6c:	42001c00 	.word	0x42001c00
    1a70:	42001400 	.word	0x42001400
    1a74:	00040003 	.word	0x00040003
    1a78:	00050003 	.word	0x00050003
    1a7c:	00060003 	.word	0x00060003
    1a80:	00070003 	.word	0x00070003
    1a84:	00010003 	.word	0x00010003
    1a88:	001e0003 	.word	0x001e0003
    1a8c:	001f0003 	.word	0x001f0003
    1a90:	00080003 	.word	0x00080003
    1a94:	00090003 	.word	0x00090003
    1a98:	000a0003 	.word	0x000a0003
    1a9c:	000b0003 	.word	0x000b0003
    1aa0:	00100003 	.word	0x00100003
    1aa4:	00110003 	.word	0x00110003
    1aa8:	00120003 	.word	0x00120003
    1aac:	00130003 	.word	0x00130003
    1ab0:	000c0003 	.word	0x000c0003
    1ab4:	000d0003 	.word	0x000d0003
    1ab8:	000e0003 	.word	0x000e0003
    1abc:	000f0003 	.word	0x000f0003
    1ac0:	00160003 	.word	0x00160003
    1ac4:	00170003 	.word	0x00170003
    1ac8:	00180003 	.word	0x00180003
    1acc:	00190003 	.word	0x00190003

00001ad0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1ad0:	b590      	push	{r4, r7, lr}
    1ad2:	b08b      	sub	sp, #44	; 0x2c
    1ad4:	af00      	add	r7, sp, #0
    1ad6:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1ad8:	230c      	movs	r3, #12
    1ada:	18fb      	adds	r3, r7, r3
    1adc:	4a0f      	ldr	r2, [pc, #60]	; (1b1c <_sercom_get_sercom_inst_index+0x4c>)
    1ade:	ca13      	ldmia	r2!, {r0, r1, r4}
    1ae0:	c313      	stmia	r3!, {r0, r1, r4}
    1ae2:	ca13      	ldmia	r2!, {r0, r1, r4}
    1ae4:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1ae6:	2300      	movs	r3, #0
    1ae8:	627b      	str	r3, [r7, #36]	; 0x24
    1aea:	e00e      	b.n	1b0a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1aec:	230c      	movs	r3, #12
    1aee:	18fb      	adds	r3, r7, r3
    1af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1af2:	0092      	lsls	r2, r2, #2
    1af4:	58d3      	ldr	r3, [r2, r3]
    1af6:	1e1a      	subs	r2, r3, #0
    1af8:	687b      	ldr	r3, [r7, #4]
    1afa:	429a      	cmp	r2, r3
    1afc:	d102      	bne.n	1b04 <_sercom_get_sercom_inst_index+0x34>
			return i;
    1afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b00:	b2db      	uxtb	r3, r3
    1b02:	e006      	b.n	1b12 <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b06:	3301      	adds	r3, #1
    1b08:	627b      	str	r3, [r7, #36]	; 0x24
    1b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b0c:	2b05      	cmp	r3, #5
    1b0e:	d9ed      	bls.n	1aec <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1b10:	2300      	movs	r3, #0
}
    1b12:	0018      	movs	r0, r3
    1b14:	46bd      	mov	sp, r7
    1b16:	b00b      	add	sp, #44	; 0x2c
    1b18:	bd90      	pop	{r4, r7, pc}
    1b1a:	46c0      	nop			; (mov r8, r8)
    1b1c:	000095e0 	.word	0x000095e0

00001b20 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1b20:	b580      	push	{r7, lr}
    1b22:	b082      	sub	sp, #8
    1b24:	af00      	add	r7, sp, #0
    1b26:	0002      	movs	r2, r0
    1b28:	6039      	str	r1, [r7, #0]
    1b2a:	1dfb      	adds	r3, r7, #7
    1b2c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1b2e:	1dfb      	adds	r3, r7, #7
    1b30:	781b      	ldrb	r3, [r3, #0]
    1b32:	2b01      	cmp	r3, #1
    1b34:	d00a      	beq.n	1b4c <system_apb_clock_set_mask+0x2c>
    1b36:	2b02      	cmp	r3, #2
    1b38:	d00f      	beq.n	1b5a <system_apb_clock_set_mask+0x3a>
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d114      	bne.n	1b68 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1b3e:	4b0e      	ldr	r3, [pc, #56]	; (1b78 <system_apb_clock_set_mask+0x58>)
    1b40:	4a0d      	ldr	r2, [pc, #52]	; (1b78 <system_apb_clock_set_mask+0x58>)
    1b42:	6991      	ldr	r1, [r2, #24]
    1b44:	683a      	ldr	r2, [r7, #0]
    1b46:	430a      	orrs	r2, r1
    1b48:	619a      	str	r2, [r3, #24]
			break;
    1b4a:	e00f      	b.n	1b6c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1b4c:	4b0a      	ldr	r3, [pc, #40]	; (1b78 <system_apb_clock_set_mask+0x58>)
    1b4e:	4a0a      	ldr	r2, [pc, #40]	; (1b78 <system_apb_clock_set_mask+0x58>)
    1b50:	69d1      	ldr	r1, [r2, #28]
    1b52:	683a      	ldr	r2, [r7, #0]
    1b54:	430a      	orrs	r2, r1
    1b56:	61da      	str	r2, [r3, #28]
			break;
    1b58:	e008      	b.n	1b6c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1b5a:	4b07      	ldr	r3, [pc, #28]	; (1b78 <system_apb_clock_set_mask+0x58>)
    1b5c:	4a06      	ldr	r2, [pc, #24]	; (1b78 <system_apb_clock_set_mask+0x58>)
    1b5e:	6a11      	ldr	r1, [r2, #32]
    1b60:	683a      	ldr	r2, [r7, #0]
    1b62:	430a      	orrs	r2, r1
    1b64:	621a      	str	r2, [r3, #32]
			break;
    1b66:	e001      	b.n	1b6c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1b68:	2317      	movs	r3, #23
    1b6a:	e000      	b.n	1b6e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1b6c:	2300      	movs	r3, #0
}
    1b6e:	0018      	movs	r0, r3
    1b70:	46bd      	mov	sp, r7
    1b72:	b002      	add	sp, #8
    1b74:	bd80      	pop	{r7, pc}
    1b76:	46c0      	nop			; (mov r8, r8)
    1b78:	40000400 	.word	0x40000400

00001b7c <wdt_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool wdt_is_syncing(void)
{
    1b7c:	b580      	push	{r7, lr}
    1b7e:	b082      	sub	sp, #8
    1b80:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1b82:	4b07      	ldr	r3, [pc, #28]	; (1ba0 <wdt_is_syncing+0x24>)
    1b84:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	79db      	ldrb	r3, [r3, #7]
    1b8a:	b2db      	uxtb	r3, r3
    1b8c:	b25b      	sxtb	r3, r3
    1b8e:	2b00      	cmp	r3, #0
    1b90:	da01      	bge.n	1b96 <wdt_is_syncing+0x1a>
#endif
		return true;
    1b92:	2301      	movs	r3, #1
    1b94:	e000      	b.n	1b98 <wdt_is_syncing+0x1c>
	}

	return false;
    1b96:	2300      	movs	r3, #0
}
    1b98:	0018      	movs	r0, r3
    1b9a:	46bd      	mov	sp, r7
    1b9c:	b002      	add	sp, #8
    1b9e:	bd80      	pop	{r7, pc}
    1ba0:	40001000 	.word	0x40001000

00001ba4 <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
    1ba4:	b580      	push	{r7, lr}
    1ba6:	b082      	sub	sp, #8
    1ba8:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1baa:	4b07      	ldr	r3, [pc, #28]	; (1bc8 <wdt_is_locked+0x24>)
    1bac:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    1bae:	687b      	ldr	r3, [r7, #4]
    1bb0:	781b      	ldrb	r3, [r3, #0]
    1bb2:	b2db      	uxtb	r3, r3
    1bb4:	001a      	movs	r2, r3
    1bb6:	2380      	movs	r3, #128	; 0x80
    1bb8:	4013      	ands	r3, r2
    1bba:	1e5a      	subs	r2, r3, #1
    1bbc:	4193      	sbcs	r3, r2
    1bbe:	b2db      	uxtb	r3, r3
#endif
}
    1bc0:	0018      	movs	r0, r3
    1bc2:	46bd      	mov	sp, r7
    1bc4:	b002      	add	sp, #8
    1bc6:	bd80      	pop	{r7, pc}
    1bc8:	40001000 	.word	0x40001000

00001bcc <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    1bcc:	b580      	push	{r7, lr}
    1bce:	b086      	sub	sp, #24
    1bd0:	af00      	add	r7, sp, #0
    1bd2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
    1bd4:	4b54      	ldr	r3, [pc, #336]	; (1d28 <wdt_set_config+0x15c>)
    1bd6:	613b      	str	r3, [r7, #16]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);
    1bd8:	2110      	movs	r1, #16
    1bda:	2000      	movs	r0, #0
    1bdc:	4b53      	ldr	r3, [pc, #332]	; (1d2c <wdt_set_config+0x160>)
    1bde:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    1be0:	4b53      	ldr	r3, [pc, #332]	; (1d30 <wdt_set_config+0x164>)
    1be2:	4798      	blx	r3
    1be4:	1e03      	subs	r3, r0, #0
    1be6:	d001      	beq.n	1bec <wdt_set_config+0x20>
		return STATUS_ERR_IO;
    1be8:	2310      	movs	r3, #16
    1bea:	e098      	b.n	1d1e <wdt_set_config+0x152>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    1bec:	687b      	ldr	r3, [r7, #4]
    1bee:	78db      	ldrb	r3, [r3, #3]
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d101      	bne.n	1bf8 <wdt_set_config+0x2c>
		return STATUS_ERR_INVALID_ARG;
    1bf4:	2317      	movs	r3, #23
    1bf6:	e092      	b.n	1d1e <wdt_set_config+0x152>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	78da      	ldrb	r2, [r3, #3]
    1bfc:	687b      	ldr	r3, [r7, #4]
    1bfe:	791b      	ldrb	r3, [r3, #4]
    1c00:	429a      	cmp	r2, r3
    1c02:	d305      	bcc.n	1c10 <wdt_set_config+0x44>
			(config->timeout_period < config->early_warning_period)) {
    1c04:	687b      	ldr	r3, [r7, #4]
    1c06:	78da      	ldrb	r2, [r3, #3]
    1c08:	687b      	ldr	r3, [r7, #4]
    1c0a:	795b      	ldrb	r3, [r3, #5]
		return STATUS_ERR_INVALID_ARG;
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    1c0c:	429a      	cmp	r2, r3
    1c0e:	d201      	bcs.n	1c14 <wdt_set_config+0x48>
			(config->timeout_period < config->early_warning_period)) {
		return STATUS_ERR_INVALID_ARG;
    1c10:	2317      	movs	r3, #23
    1c12:	e084      	b.n	1d1e <wdt_set_config+0x152>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    1c14:	693b      	ldr	r3, [r7, #16]
    1c16:	781b      	ldrb	r3, [r3, #0]
    1c18:	b2db      	uxtb	r3, r3
    1c1a:	2202      	movs	r2, #2
    1c1c:	4393      	bics	r3, r2
    1c1e:	b2da      	uxtb	r2, r3
    1c20:	693b      	ldr	r3, [r7, #16]
    1c22:	701a      	strb	r2, [r3, #0]

	while (wdt_is_syncing()) {
    1c24:	46c0      	nop			; (mov r8, r8)
    1c26:	4b43      	ldr	r3, [pc, #268]	; (1d34 <wdt_set_config+0x168>)
    1c28:	4798      	blx	r3
    1c2a:	1e03      	subs	r3, r0, #0
    1c2c:	d1fb      	bne.n	1c26 <wdt_set_config+0x5a>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
    1c2e:	687b      	ldr	r3, [r7, #4]
    1c30:	785b      	ldrb	r3, [r3, #1]
    1c32:	2201      	movs	r2, #1
    1c34:	4053      	eors	r3, r2
    1c36:	b2db      	uxtb	r3, r3
    1c38:	2b00      	cmp	r3, #0
    1c3a:	d001      	beq.n	1c40 <wdt_set_config+0x74>
		return STATUS_OK;
    1c3c:	2300      	movs	r3, #0
    1c3e:	e06e      	b.n	1d1e <wdt_set_config+0x152>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
    1c40:	687b      	ldr	r3, [r7, #4]
    1c42:	789a      	ldrb	r2, [r3, #2]
    1c44:	230c      	movs	r3, #12
    1c46:	18fb      	adds	r3, r7, r3
    1c48:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    1c4a:	230c      	movs	r3, #12
    1c4c:	18fb      	adds	r3, r7, r3
    1c4e:	0019      	movs	r1, r3
    1c50:	2003      	movs	r0, #3
    1c52:	4b39      	ldr	r3, [pc, #228]	; (1d38 <wdt_set_config+0x16c>)
    1c54:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    1c56:	2003      	movs	r0, #3
    1c58:	4b38      	ldr	r3, [pc, #224]	; (1d3c <wdt_set_config+0x170>)
    1c5a:	4798      	blx	r3
	if (config->always_on) {
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	781b      	ldrb	r3, [r3, #0]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d002      	beq.n	1c6a <wdt_set_config+0x9e>
		system_gclk_chan_lock(WDT_GCLK_ID);
    1c64:	2003      	movs	r0, #3
    1c66:	4b36      	ldr	r3, [pc, #216]	; (1d40 <wdt_set_config+0x174>)
    1c68:	4798      	blx	r3
	}

	uint32_t new_config = 0;
    1c6a:	2300      	movs	r3, #0
    1c6c:	617b      	str	r3, [r7, #20]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    1c6e:	687b      	ldr	r3, [r7, #4]
    1c70:	78db      	ldrb	r3, [r3, #3]
    1c72:	3b01      	subs	r3, #1
    1c74:	001a      	movs	r2, r3
    1c76:	697b      	ldr	r3, [r7, #20]
    1c78:	4313      	orrs	r3, r2
    1c7a:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
    1c7c:	687b      	ldr	r3, [r7, #4]
    1c7e:	791b      	ldrb	r3, [r3, #4]
    1c80:	2b00      	cmp	r3, #0
    1c82:	d010      	beq.n	1ca6 <wdt_set_config+0xda>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    1c84:	693b      	ldr	r3, [r7, #16]
    1c86:	781b      	ldrb	r3, [r3, #0]
    1c88:	b2db      	uxtb	r3, r3
    1c8a:	2204      	movs	r2, #4
    1c8c:	4313      	orrs	r3, r2
    1c8e:	b2da      	uxtb	r2, r3
    1c90:	693b      	ldr	r3, [r7, #16]
    1c92:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	791b      	ldrb	r3, [r3, #4]
    1c98:	3b01      	subs	r3, #1
    1c9a:	011b      	lsls	r3, r3, #4
    1c9c:	001a      	movs	r2, r3
    1c9e:	697b      	ldr	r3, [r7, #20]
    1ca0:	4313      	orrs	r3, r2
    1ca2:	617b      	str	r3, [r7, #20]
    1ca4:	e007      	b.n	1cb6 <wdt_set_config+0xea>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    1ca6:	693b      	ldr	r3, [r7, #16]
    1ca8:	781b      	ldrb	r3, [r3, #0]
    1caa:	b2db      	uxtb	r3, r3
    1cac:	2204      	movs	r2, #4
    1cae:	4393      	bics	r3, r2
    1cb0:	b2da      	uxtb	r2, r3
    1cb2:	693b      	ldr	r3, [r7, #16]
    1cb4:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    1cb6:	46c0      	nop			; (mov r8, r8)
    1cb8:	4b1e      	ldr	r3, [pc, #120]	; (1d34 <wdt_set_config+0x168>)
    1cba:	4798      	blx	r3
    1cbc:	1e03      	subs	r3, r0, #0
    1cbe:	d1fb      	bne.n	1cb8 <wdt_set_config+0xec>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
    1cc0:	697b      	ldr	r3, [r7, #20]
    1cc2:	b2da      	uxtb	r2, r3
    1cc4:	693b      	ldr	r3, [r7, #16]
    1cc6:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    1cc8:	687b      	ldr	r3, [r7, #4]
    1cca:	795b      	ldrb	r3, [r3, #5]
    1ccc:	2b00      	cmp	r3, #0
    1cce:	d00a      	beq.n	1ce6 <wdt_set_config+0x11a>
		while (wdt_is_syncing()) {
    1cd0:	46c0      	nop			; (mov r8, r8)
    1cd2:	4b18      	ldr	r3, [pc, #96]	; (1d34 <wdt_set_config+0x168>)
    1cd4:	4798      	blx	r3
    1cd6:	1e03      	subs	r3, r0, #0
    1cd8:	d1fb      	bne.n	1cd2 <wdt_set_config+0x106>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    1cda:	687b      	ldr	r3, [r7, #4]
    1cdc:	795b      	ldrb	r3, [r3, #5]
    1cde:	3b01      	subs	r3, #1
    1ce0:	b2da      	uxtb	r2, r3
    1ce2:	693b      	ldr	r3, [r7, #16]
    1ce4:	709a      	strb	r2, [r3, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
    1ce6:	687b      	ldr	r3, [r7, #4]
    1ce8:	781b      	ldrb	r3, [r3, #0]
    1cea:	2b00      	cmp	r3, #0
    1cec:	d009      	beq.n	1d02 <wdt_set_config+0x136>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    1cee:	693b      	ldr	r3, [r7, #16]
    1cf0:	781b      	ldrb	r3, [r3, #0]
    1cf2:	b2db      	uxtb	r3, r3
    1cf4:	2280      	movs	r2, #128	; 0x80
    1cf6:	4252      	negs	r2, r2
    1cf8:	4313      	orrs	r3, r2
    1cfa:	b2da      	uxtb	r2, r3
    1cfc:	693b      	ldr	r3, [r7, #16]
    1cfe:	701a      	strb	r2, [r3, #0]
    1d00:	e007      	b.n	1d12 <wdt_set_config+0x146>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    1d02:	693b      	ldr	r3, [r7, #16]
    1d04:	781b      	ldrb	r3, [r3, #0]
    1d06:	b2db      	uxtb	r3, r3
    1d08:	2202      	movs	r2, #2
    1d0a:	4313      	orrs	r3, r2
    1d0c:	b2da      	uxtb	r2, r3
    1d0e:	693b      	ldr	r3, [r7, #16]
    1d10:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    1d12:	46c0      	nop			; (mov r8, r8)
    1d14:	4b07      	ldr	r3, [pc, #28]	; (1d34 <wdt_set_config+0x168>)
    1d16:	4798      	blx	r3
    1d18:	1e03      	subs	r3, r0, #0
    1d1a:	d1fb      	bne.n	1d14 <wdt_set_config+0x148>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
    1d1c:	2300      	movs	r3, #0
}
    1d1e:	0018      	movs	r0, r3
    1d20:	46bd      	mov	sp, r7
    1d22:	b006      	add	sp, #24
    1d24:	bd80      	pop	{r7, pc}
    1d26:	46c0      	nop			; (mov r8, r8)
    1d28:	40001000 	.word	0x40001000
    1d2c:	00001b21 	.word	0x00001b21
    1d30:	00001ba5 	.word	0x00001ba5
    1d34:	00001b7d 	.word	0x00001b7d
    1d38:	000059e1 	.word	0x000059e1
    1d3c:	00005a25 	.word	0x00005a25
    1d40:	00005b05 	.word	0x00005b05

00001d44 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    1d44:	b580      	push	{r7, lr}
    1d46:	b082      	sub	sp, #8
    1d48:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1d4a:	4b04      	ldr	r3, [pc, #16]	; (1d5c <wdt_clear_early_warning+0x18>)
    1d4c:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    1d4e:	687b      	ldr	r3, [r7, #4]
    1d50:	2201      	movs	r2, #1
    1d52:	719a      	strb	r2, [r3, #6]
}
    1d54:	46c0      	nop			; (mov r8, r8)
    1d56:	46bd      	mov	sp, r7
    1d58:	b002      	add	sp, #8
    1d5a:	bd80      	pop	{r7, pc}
    1d5c:	40001000 	.word	0x40001000

00001d60 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    1d60:	b580      	push	{r7, lr}
    1d62:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    1d64:	4b05      	ldr	r3, [pc, #20]	; (1d7c <WDT_Handler+0x1c>)
    1d66:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    1d68:	4b05      	ldr	r3, [pc, #20]	; (1d80 <WDT_Handler+0x20>)
    1d6a:	681b      	ldr	r3, [r3, #0]
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	d002      	beq.n	1d76 <WDT_Handler+0x16>
		wdt_early_warning_callback();
    1d70:	4b03      	ldr	r3, [pc, #12]	; (1d80 <WDT_Handler+0x20>)
    1d72:	681b      	ldr	r3, [r3, #0]
    1d74:	4798      	blx	r3
	}
}
    1d76:	46c0      	nop			; (mov r8, r8)
    1d78:	46bd      	mov	sp, r7
    1d7a:	bd80      	pop	{r7, pc}
    1d7c:	00001d45 	.word	0x00001d45
    1d80:	20000194 	.word	0x20000194

00001d84 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1d84:	b580      	push	{r7, lr}
    1d86:	b082      	sub	sp, #8
    1d88:	af00      	add	r7, sp, #0
    1d8a:	0002      	movs	r2, r0
    1d8c:	1dfb      	adds	r3, r7, #7
    1d8e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1d90:	4b06      	ldr	r3, [pc, #24]	; (1dac <NVIC_EnableIRQ+0x28>)
    1d92:	1dfa      	adds	r2, r7, #7
    1d94:	7812      	ldrb	r2, [r2, #0]
    1d96:	0011      	movs	r1, r2
    1d98:	221f      	movs	r2, #31
    1d9a:	400a      	ands	r2, r1
    1d9c:	2101      	movs	r1, #1
    1d9e:	4091      	lsls	r1, r2
    1da0:	000a      	movs	r2, r1
    1da2:	601a      	str	r2, [r3, #0]
}
    1da4:	46c0      	nop			; (mov r8, r8)
    1da6:	46bd      	mov	sp, r7
    1da8:	b002      	add	sp, #8
    1daa:	bd80      	pop	{r7, pc}
    1dac:	e000e100 	.word	0xe000e100

00001db0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1db0:	b5b0      	push	{r4, r5, r7, lr}
    1db2:	b082      	sub	sp, #8
    1db4:	af00      	add	r7, sp, #0
    1db6:	0002      	movs	r2, r0
    1db8:	6039      	str	r1, [r7, #0]
    1dba:	1dfb      	adds	r3, r7, #7
    1dbc:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    1dbe:	1dfb      	adds	r3, r7, #7
    1dc0:	781b      	ldrb	r3, [r3, #0]
    1dc2:	2b7f      	cmp	r3, #127	; 0x7f
    1dc4:	d932      	bls.n	1e2c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1dc6:	4c2f      	ldr	r4, [pc, #188]	; (1e84 <NVIC_SetPriority+0xd4>)
    1dc8:	1dfb      	adds	r3, r7, #7
    1dca:	781b      	ldrb	r3, [r3, #0]
    1dcc:	001a      	movs	r2, r3
    1dce:	230f      	movs	r3, #15
    1dd0:	4013      	ands	r3, r2
    1dd2:	3b08      	subs	r3, #8
    1dd4:	0899      	lsrs	r1, r3, #2
    1dd6:	4a2b      	ldr	r2, [pc, #172]	; (1e84 <NVIC_SetPriority+0xd4>)
    1dd8:	1dfb      	adds	r3, r7, #7
    1dda:	781b      	ldrb	r3, [r3, #0]
    1ddc:	0018      	movs	r0, r3
    1dde:	230f      	movs	r3, #15
    1de0:	4003      	ands	r3, r0
    1de2:	3b08      	subs	r3, #8
    1de4:	089b      	lsrs	r3, r3, #2
    1de6:	3306      	adds	r3, #6
    1de8:	009b      	lsls	r3, r3, #2
    1dea:	18d3      	adds	r3, r2, r3
    1dec:	3304      	adds	r3, #4
    1dee:	681b      	ldr	r3, [r3, #0]
    1df0:	1dfa      	adds	r2, r7, #7
    1df2:	7812      	ldrb	r2, [r2, #0]
    1df4:	0010      	movs	r0, r2
    1df6:	2203      	movs	r2, #3
    1df8:	4002      	ands	r2, r0
    1dfa:	00d2      	lsls	r2, r2, #3
    1dfc:	20ff      	movs	r0, #255	; 0xff
    1dfe:	4090      	lsls	r0, r2
    1e00:	0002      	movs	r2, r0
    1e02:	43d2      	mvns	r2, r2
    1e04:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    1e06:	683b      	ldr	r3, [r7, #0]
    1e08:	019b      	lsls	r3, r3, #6
    1e0a:	20ff      	movs	r0, #255	; 0xff
    1e0c:	4018      	ands	r0, r3
    1e0e:	1dfb      	adds	r3, r7, #7
    1e10:	781b      	ldrb	r3, [r3, #0]
    1e12:	001d      	movs	r5, r3
    1e14:	2303      	movs	r3, #3
    1e16:	402b      	ands	r3, r5
    1e18:	00db      	lsls	r3, r3, #3
    1e1a:	4098      	lsls	r0, r3
    1e1c:	0003      	movs	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1e1e:	431a      	orrs	r2, r3
    1e20:	1d8b      	adds	r3, r1, #6
    1e22:	009b      	lsls	r3, r3, #2
    1e24:	18e3      	adds	r3, r4, r3
    1e26:	3304      	adds	r3, #4
    1e28:	601a      	str	r2, [r3, #0]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    1e2a:	e027      	b.n	1e7c <NVIC_SetPriority+0xcc>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1e2c:	4c16      	ldr	r4, [pc, #88]	; (1e88 <NVIC_SetPriority+0xd8>)
    1e2e:	1dfb      	adds	r3, r7, #7
    1e30:	781b      	ldrb	r3, [r3, #0]
    1e32:	b25b      	sxtb	r3, r3
    1e34:	089b      	lsrs	r3, r3, #2
    1e36:	4914      	ldr	r1, [pc, #80]	; (1e88 <NVIC_SetPriority+0xd8>)
    1e38:	1dfa      	adds	r2, r7, #7
    1e3a:	7812      	ldrb	r2, [r2, #0]
    1e3c:	b252      	sxtb	r2, r2
    1e3e:	0892      	lsrs	r2, r2, #2
    1e40:	32c0      	adds	r2, #192	; 0xc0
    1e42:	0092      	lsls	r2, r2, #2
    1e44:	5852      	ldr	r2, [r2, r1]
    1e46:	1df9      	adds	r1, r7, #7
    1e48:	7809      	ldrb	r1, [r1, #0]
    1e4a:	0008      	movs	r0, r1
    1e4c:	2103      	movs	r1, #3
    1e4e:	4001      	ands	r1, r0
    1e50:	00c9      	lsls	r1, r1, #3
    1e52:	20ff      	movs	r0, #255	; 0xff
    1e54:	4088      	lsls	r0, r1
    1e56:	0001      	movs	r1, r0
    1e58:	43c9      	mvns	r1, r1
    1e5a:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    1e5c:	683a      	ldr	r2, [r7, #0]
    1e5e:	0192      	lsls	r2, r2, #6
    1e60:	20ff      	movs	r0, #255	; 0xff
    1e62:	4010      	ands	r0, r2
    1e64:	1dfa      	adds	r2, r7, #7
    1e66:	7812      	ldrb	r2, [r2, #0]
    1e68:	0015      	movs	r5, r2
    1e6a:	2203      	movs	r2, #3
    1e6c:	402a      	ands	r2, r5
    1e6e:	00d2      	lsls	r2, r2, #3
    1e70:	4090      	lsls	r0, r2
    1e72:	0002      	movs	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1e74:	430a      	orrs	r2, r1
    1e76:	33c0      	adds	r3, #192	; 0xc0
    1e78:	009b      	lsls	r3, r3, #2
    1e7a:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    1e7c:	46c0      	nop			; (mov r8, r8)
    1e7e:	46bd      	mov	sp, r7
    1e80:	b002      	add	sp, #8
    1e82:	bdb0      	pop	{r4, r5, r7, pc}
    1e84:	e000ed00 	.word	0xe000ed00
    1e88:	e000e100 	.word	0xe000e100

00001e8c <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    1e8c:	b580      	push	{r7, lr}
    1e8e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    1e90:	4b04      	ldr	r3, [pc, #16]	; (1ea4 <system_interrupt_enable_global+0x18>)
    1e92:	2201      	movs	r2, #1
    1e94:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1e96:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1e9a:	b662      	cpsie	i
}
    1e9c:	46c0      	nop			; (mov r8, r8)
    1e9e:	46bd      	mov	sp, r7
    1ea0:	bd80      	pop	{r7, pc}
    1ea2:	46c0      	nop			; (mov r8, r8)
    1ea4:	20000091 	.word	0x20000091

00001ea8 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    1ea8:	b580      	push	{r7, lr}
    1eaa:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1eac:	b672      	cpsid	i
    1eae:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1eb2:	4b03      	ldr	r3, [pc, #12]	; (1ec0 <system_interrupt_disable_global+0x18>)
    1eb4:	2200      	movs	r2, #0
    1eb6:	701a      	strb	r2, [r3, #0]
}
    1eb8:	46c0      	nop			; (mov r8, r8)
    1eba:	46bd      	mov	sp, r7
    1ebc:	bd80      	pop	{r7, pc}
    1ebe:	46c0      	nop			; (mov r8, r8)
    1ec0:	20000091 	.word	0x20000091

00001ec4 <uart_clk_init>:
	SERCOM_RX_PAD_3
} SercomRXPad;


void uart_clk_init(void)
{
    1ec4:	b580      	push	{r7, lr}
    1ec6:	af00      	add	r7, sp, #0
	// Start the Software Reset and wait for it to finish
	BLE_UART_SERCOM->USART.CTRLA.bit.SWRST = 1 ;
    1ec8:	4a13      	ldr	r2, [pc, #76]	; (1f18 <uart_clk_init+0x54>)
    1eca:	6813      	ldr	r3, [r2, #0]
    1ecc:	2101      	movs	r1, #1
    1ece:	430b      	orrs	r3, r1
    1ed0:	6013      	str	r3, [r2, #0]
	while ( BLE_UART_SERCOM->USART.CTRLA.bit.SWRST || BLE_UART_SERCOM->USART.SYNCBUSY.bit.SWRST );
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	4b10      	ldr	r3, [pc, #64]	; (1f18 <uart_clk_init+0x54>)
    1ed6:	681b      	ldr	r3, [r3, #0]
    1ed8:	07db      	lsls	r3, r3, #31
    1eda:	0fdb      	lsrs	r3, r3, #31
    1edc:	b2db      	uxtb	r3, r3
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d1f8      	bne.n	1ed4 <uart_clk_init+0x10>
    1ee2:	4b0d      	ldr	r3, [pc, #52]	; (1f18 <uart_clk_init+0x54>)
    1ee4:	69db      	ldr	r3, [r3, #28]
    1ee6:	07db      	lsls	r3, r3, #31
    1ee8:	0fdb      	lsrs	r3, r3, #31
    1eea:	b2db      	uxtb	r3, r3
    1eec:	2b00      	cmp	r3, #0
    1eee:	d1f1      	bne.n	1ed4 <uart_clk_init+0x10>
	
	// Turn on peripheral clock for SERCOM being used
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM2;
    1ef0:	4b0a      	ldr	r3, [pc, #40]	; (1f1c <uart_clk_init+0x58>)
    1ef2:	4a0a      	ldr	r2, [pc, #40]	; (1f1c <uart_clk_init+0x58>)
    1ef4:	6a12      	ldr	r2, [r2, #32]
    1ef6:	2110      	movs	r1, #16
    1ef8:	430a      	orrs	r2, r1
    1efa:	621a      	str	r2, [r3, #32]

	//Setting clock
	GCLK->CLKCTRL.reg =
    1efc:	4b08      	ldr	r3, [pc, #32]	; (1f20 <uart_clk_init+0x5c>)
    1efe:	4a09      	ldr	r2, [pc, #36]	; (1f24 <uart_clk_init+0x60>)
    1f00:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID( GCM_SERCOM2_CORE )	|	// connected  SERCOMx to
	GCLK_CLKCTRL_GEN_GCLK0		|	// generic Clock Generator 0
	GCLK_CLKCTRL_CLKEN;			// and enable it

	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY ); // Wait for synchronization
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	4b06      	ldr	r3, [pc, #24]	; (1f20 <uart_clk_init+0x5c>)
    1f06:	785b      	ldrb	r3, [r3, #1]
    1f08:	b2db      	uxtb	r3, r3
    1f0a:	b25b      	sxtb	r3, r3
    1f0c:	2b00      	cmp	r3, #0
    1f0e:	dbf9      	blt.n	1f04 <uart_clk_init+0x40>
}
    1f10:	46c0      	nop			; (mov r8, r8)
    1f12:	46bd      	mov	sp, r7
    1f14:	bd80      	pop	{r7, pc}
    1f16:	46c0      	nop			; (mov r8, r8)
    1f18:	42001000 	.word	0x42001000
    1f1c:	40000400 	.word	0x40000400
    1f20:	40000c00 	.word	0x40000c00
    1f24:	00004016 	.word	0x00004016

00001f28 <uart_pin_init>:

void uart_pin_init(void)
{
    1f28:	b580      	push	{r7, lr}
    1f2a:	b082      	sub	sp, #8
    1f2c:	af00      	add	r7, sp, #0
	PORT->Group[PORTGROUP_A].DIRCLR.reg = PORT_PA08;	// RX as input
    1f2e:	4b1c      	ldr	r3, [pc, #112]	; (1fa0 <uart_pin_init+0x78>)
    1f30:	2280      	movs	r2, #128	; 0x80
    1f32:	0052      	lsls	r2, r2, #1
    1f34:	605a      	str	r2, [r3, #4]
	
	PORT->Group[PORTGROUP_A].DIRSET.reg = PORT_PA10;	// TX as output
    1f36:	4b1a      	ldr	r3, [pc, #104]	; (1fa0 <uart_pin_init+0x78>)
    1f38:	2280      	movs	r2, #128	; 0x80
    1f3a:	00d2      	lsls	r2, r2, #3
    1f3c:	609a      	str	r2, [r3, #8]
	PORT->Group[PORTGROUP_A].OUTSET.reg = PORT_PA10;	// TX idle state is high
    1f3e:	4b18      	ldr	r3, [pc, #96]	; (1fa0 <uart_pin_init+0x78>)
    1f40:	2280      	movs	r2, #128	; 0x80
    1f42:	00d2      	lsls	r2, r2, #3
    1f44:	619a      	str	r2, [r3, #24]

	// set port multiplexer for peripheral TX
	// =======================================
	uint32_t temp = (PORT->Group[PORTGROUP_A].PMUX[TX_PIN>>1].reg) & PORT_PMUX_PMUXO( GPIO_SERCOM_ALT_D );
    1f46:	4a16      	ldr	r2, [pc, #88]	; (1fa0 <uart_pin_init+0x78>)
    1f48:	2335      	movs	r3, #53	; 0x35
    1f4a:	5cd3      	ldrb	r3, [r2, r3]
    1f4c:	b2db      	uxtb	r3, r3
    1f4e:	001a      	movs	r2, r3
    1f50:	2330      	movs	r3, #48	; 0x30
    1f52:	4013      	ands	r3, r2
    1f54:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[TX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( GPIO_SERCOM_ALT_D );
    1f56:	4a12      	ldr	r2, [pc, #72]	; (1fa0 <uart_pin_init+0x78>)
    1f58:	687b      	ldr	r3, [r7, #4]
    1f5a:	b2db      	uxtb	r3, r3
    1f5c:	2103      	movs	r1, #3
    1f5e:	430b      	orrs	r3, r1
    1f60:	b2d9      	uxtb	r1, r3
    1f62:	2335      	movs	r3, #53	; 0x35
    1f64:	54d1      	strb	r1, [r2, r3]
	
	PORT->Group[PORTGROUP_A].PINCFG[TX_PIN].reg = PORT_PINCFG_PMUXEN ; // Enable port mux
    1f66:	4a0e      	ldr	r2, [pc, #56]	; (1fa0 <uart_pin_init+0x78>)
    1f68:	234a      	movs	r3, #74	; 0x4a
    1f6a:	2101      	movs	r1, #1
    1f6c:	54d1      	strb	r1, [r2, r3]
	temp = (PORT->Group[PORTGROUP_A].PMUX[RX_PIN>>1].reg) & PORT_PMUX_PMUXO( GPIO_SERCOM_ALT_D );
    1f6e:	4a0c      	ldr	r2, [pc, #48]	; (1fa0 <uart_pin_init+0x78>)
    1f70:	2334      	movs	r3, #52	; 0x34
    1f72:	5cd3      	ldrb	r3, [r2, r3]
    1f74:	b2db      	uxtb	r3, r3
    1f76:	001a      	movs	r2, r3
    1f78:	2330      	movs	r3, #48	; 0x30
    1f7a:	4013      	ands	r3, r2
    1f7c:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[RX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( GPIO_SERCOM_ALT_D );
    1f7e:	4a08      	ldr	r2, [pc, #32]	; (1fa0 <uart_pin_init+0x78>)
    1f80:	687b      	ldr	r3, [r7, #4]
    1f82:	b2db      	uxtb	r3, r3
    1f84:	2103      	movs	r1, #3
    1f86:	430b      	orrs	r3, r1
    1f88:	b2d9      	uxtb	r1, r3
    1f8a:	2334      	movs	r3, #52	; 0x34
    1f8c:	54d1      	strb	r1, [r2, r3]
	PORT->Group[PORTGROUP_A].PINCFG[RX_PIN].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN; // Enable port mux
    1f8e:	4a04      	ldr	r2, [pc, #16]	; (1fa0 <uart_pin_init+0x78>)
    1f90:	2348      	movs	r3, #72	; 0x48
    1f92:	2103      	movs	r1, #3
    1f94:	54d1      	strb	r1, [r2, r3]
}
    1f96:	46c0      	nop			; (mov r8, r8)
    1f98:	46bd      	mov	sp, r7
    1f9a:	b002      	add	sp, #8
    1f9c:	bd80      	pop	{r7, pc}
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	41004400 	.word	0x41004400

00001fa4 <ble_uart_init>:

void ble_uart_init(void)
{	
    1fa4:	b580      	push	{r7, lr}
    1fa6:	af00      	add	r7, sp, #0
	uart_clk_init();
    1fa8:	4b18      	ldr	r3, [pc, #96]	; (200c <STACK_SIZE+0xc>)
    1faa:	4798      	blx	r3
	uart_pin_init();
    1fac:	4b18      	ldr	r3, [pc, #96]	; (2010 <STACK_SIZE+0x10>)
    1fae:	4798      	blx	r3
	
	
	
	BLE_UART_SERCOM->USART.CTRLA.reg =
    1fb0:	4b18      	ldr	r3, [pc, #96]	; (2014 <STACK_SIZE+0x14>)
    1fb2:	4a19      	ldr	r2, [pc, #100]	; (2018 <STACK_SIZE+0x18>)
    1fb4:	601a      	str	r2, [r3, #0]
	
	
	// Asynchronous arithmetic mode
	// 65535 * ( 1 - sampleRateValue * baudrate / SystemCoreClock);
	// 65535 - 65535 * (sampleRateValue * baudrate / SystemCoreClock));
	BLE_UART_SERCOM->USART.BAUD.reg = 65535.0f * ( 1.0f - (16.0 * (float)(BAUDRATE)) / (float)(SYSTEM_CLK));
    1fb6:	4b17      	ldr	r3, [pc, #92]	; (2014 <STACK_SIZE+0x14>)
    1fb8:	4a18      	ldr	r2, [pc, #96]	; (201c <STACK_SIZE+0x1c>)
    1fba:	819a      	strh	r2, [r3, #12]
	//BLE_UART_SERCOM->USART.BAUD.bit.BAUD = 9600;
	
	BLE_UART_SERCOM->USART.CTRLB.reg =
    1fbc:	4b15      	ldr	r3, [pc, #84]	; (2014 <STACK_SIZE+0x14>)
    1fbe:	22c0      	movs	r2, #192	; 0xc0
    1fc0:	0292      	lsls	r2, r2, #10
    1fc2:	605a      	str	r2, [r3, #4]
	SERCOM_USART_CTRLB_CHSIZE(0)	|	// 8 bit character size
	SERCOM_USART_CTRLB_TXEN			|	// Enable Transmit
	SERCOM_USART_CTRLB_RXEN;			// Enable Receive

	// Get Synced
	while (BLE_UART_SERCOM->USART.SYNCBUSY.bit.CTRLB);
    1fc4:	46c0      	nop			; (mov r8, r8)
    1fc6:	4b13      	ldr	r3, [pc, #76]	; (2014 <STACK_SIZE+0x14>)
    1fc8:	69db      	ldr	r3, [r3, #28]
    1fca:	075b      	lsls	r3, r3, #29
    1fcc:	0fdb      	lsrs	r3, r3, #31
    1fce:	b2db      	uxtb	r3, r3
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	d1f8      	bne.n	1fc6 <ble_uart_init+0x22>

	//Set the Interrupt to use
	BLE_UART_SERCOM->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;	// Interrupt on received complete
    1fd4:	4b0f      	ldr	r3, [pc, #60]	; (2014 <STACK_SIZE+0x14>)
    1fd6:	2204      	movs	r2, #4
    1fd8:	759a      	strb	r2, [r3, #22]
	
	// Enable interrupts
	NVIC_EnableIRQ(SERCOM2_IRQn);
    1fda:	200b      	movs	r0, #11
    1fdc:	4b10      	ldr	r3, [pc, #64]	; (2020 <STACK_SIZE+0x20>)
    1fde:	4798      	blx	r3
	NVIC_SetPriority(SERCOM2_IRQn,1);
    1fe0:	2101      	movs	r1, #1
    1fe2:	200b      	movs	r0, #11
    1fe4:	4b0f      	ldr	r3, [pc, #60]	; (2024 <STACK_SIZE+0x24>)
    1fe6:	4798      	blx	r3
	
	// enable the peripheral block
	BLE_UART_SERCOM->USART.CTRLA.bit.ENABLE = 0x1u;
    1fe8:	4a0a      	ldr	r2, [pc, #40]	; (2014 <STACK_SIZE+0x14>)
    1fea:	6813      	ldr	r3, [r2, #0]
    1fec:	2102      	movs	r1, #2
    1fee:	430b      	orrs	r3, r1
    1ff0:	6013      	str	r3, [r2, #0]
	
	// Wait for sercom to enable
	while(BLE_UART_SERCOM->USART.SYNCBUSY.bit.ENABLE);
    1ff2:	46c0      	nop			; (mov r8, r8)
    1ff4:	4b07      	ldr	r3, [pc, #28]	; (2014 <STACK_SIZE+0x14>)
    1ff6:	69db      	ldr	r3, [r3, #28]
    1ff8:	079b      	lsls	r3, r3, #30
    1ffa:	0fdb      	lsrs	r3, r3, #31
    1ffc:	b2db      	uxtb	r3, r3
    1ffe:	2b00      	cmp	r3, #0
    2000:	d1f8      	bne.n	1ff4 <ble_uart_init+0x50>
	
	reset_buffers();
    2002:	4b09      	ldr	r3, [pc, #36]	; (2028 <STACK_SIZE+0x28>)
    2004:	4798      	blx	r3
}
    2006:	46c0      	nop			; (mov r8, r8)
    2008:	46bd      	mov	sp, r7
    200a:	bd80      	pop	{r7, pc}
    200c:	00001ec5 	.word	0x00001ec5
    2010:	00001f29 	.word	0x00001f29
    2014:	42001000 	.word	0x42001000
    2018:	40010084 	.word	0x40010084
    201c:	fffffb14 	.word	0xfffffb14
    2020:	00001d85 	.word	0x00001d85
    2024:	00001db1 	.word	0x00001db1
    2028:	000020e1 	.word	0x000020e1

0000202c <ble_uart_write>:

void ble_uart_write(char buffer[])
{
    202c:	b580      	push	{r7, lr}
    202e:	b084      	sub	sp, #16
    2030:	af00      	add	r7, sp, #0
    2032:	6078      	str	r0, [r7, #4]
	system_interrupt_disable_global();
    2034:	4b10      	ldr	r3, [pc, #64]	; (2078 <ble_uart_write+0x4c>)
    2036:	4798      	blx	r3
	uint32_t i = 0;
    2038:	2300      	movs	r3, #0
    203a:	60fb      	str	r3, [r7, #12]
	while(buffer[i] != '\0')
    203c:	e00f      	b.n	205e <ble_uart_write+0x32>
	{
		if(BLE_UART_SERCOM->USART.INTFLAG.bit.DRE == 1)
    203e:	4b0f      	ldr	r3, [pc, #60]	; (207c <ble_uart_write+0x50>)
    2040:	7e1b      	ldrb	r3, [r3, #24]
    2042:	07db      	lsls	r3, r3, #31
    2044:	0fdb      	lsrs	r3, r3, #31
    2046:	b2db      	uxtb	r3, r3
    2048:	2b01      	cmp	r3, #1
    204a:	d108      	bne.n	205e <ble_uart_write+0x32>
		{
			BLE_UART_SERCOM->USART.DATA.reg = (uint16_t)buffer[i++];
    204c:	490b      	ldr	r1, [pc, #44]	; (207c <ble_uart_write+0x50>)
    204e:	68fb      	ldr	r3, [r7, #12]
    2050:	1c5a      	adds	r2, r3, #1
    2052:	60fa      	str	r2, [r7, #12]
    2054:	687a      	ldr	r2, [r7, #4]
    2056:	18d3      	adds	r3, r2, r3
    2058:	781b      	ldrb	r3, [r3, #0]
    205a:	b29b      	uxth	r3, r3
    205c:	850b      	strh	r3, [r1, #40]	; 0x28

void ble_uart_write(char buffer[])
{
	system_interrupt_disable_global();
	uint32_t i = 0;
	while(buffer[i] != '\0')
    205e:	687a      	ldr	r2, [r7, #4]
    2060:	68fb      	ldr	r3, [r7, #12]
    2062:	18d3      	adds	r3, r2, r3
    2064:	781b      	ldrb	r3, [r3, #0]
    2066:	2b00      	cmp	r3, #0
    2068:	d1e9      	bne.n	203e <ble_uart_write+0x12>
		if(BLE_UART_SERCOM->USART.INTFLAG.bit.DRE == 1)
		{
			BLE_UART_SERCOM->USART.DATA.reg = (uint16_t)buffer[i++];
		}
	}
	system_interrupt_enable_global();
    206a:	4b05      	ldr	r3, [pc, #20]	; (2080 <ble_uart_write+0x54>)
    206c:	4798      	blx	r3
}
    206e:	46c0      	nop			; (mov r8, r8)
    2070:	46bd      	mov	sp, r7
    2072:	b004      	add	sp, #16
    2074:	bd80      	pop	{r7, pc}
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	00001ea9 	.word	0x00001ea9
    207c:	42001000 	.word	0x42001000
    2080:	00001e8d 	.word	0x00001e8d

00002084 <SERCOM2_Handler>:
	BLE_UART_SERCOM->USART.DATA.reg = data;
}


void SERCOM2_Handler()
{
    2084:	b580      	push	{r7, lr}
    2086:	af00      	add	r7, sp, #0
	if (BLE_UART_SERCOM->USART.INTFLAG.bit.RXC)
    2088:	4b12      	ldr	r3, [pc, #72]	; (20d4 <SERCOM2_Handler+0x50>)
    208a:	7e1b      	ldrb	r3, [r3, #24]
    208c:	075b      	lsls	r3, r3, #29
    208e:	0fdb      	lsrs	r3, r3, #31
    2090:	b2db      	uxtb	r3, r3
    2092:	2b00      	cmp	r3, #0
    2094:	d01a      	beq.n	20cc <SERCOM2_Handler+0x48>
	{
		//while (BLE_UART_SERCOM->USART.INTFLAG.bit.DRE != 0 )
		//{
			// Got a character
			if (buff_count > 127)
    2096:	4b10      	ldr	r3, [pc, #64]	; (20d8 <SERCOM2_Handler+0x54>)
    2098:	681b      	ldr	r3, [r3, #0]
    209a:	2b7f      	cmp	r3, #127	; 0x7f
    209c:	dd0b      	ble.n	20b6 <SERCOM2_Handler+0x32>
			{
				buff_count = 0;
    209e:	4b0e      	ldr	r3, [pc, #56]	; (20d8 <SERCOM2_Handler+0x54>)
    20a0:	2200      	movs	r2, #0
    20a2:	601a      	str	r2, [r3, #0]
				rx_buffer_array[buff_count] = (uint8_t) BLE_UART_SERCOM->USART.DATA.reg;
    20a4:	4b0c      	ldr	r3, [pc, #48]	; (20d8 <SERCOM2_Handler+0x54>)
    20a6:	681b      	ldr	r3, [r3, #0]
    20a8:	4a0a      	ldr	r2, [pc, #40]	; (20d4 <SERCOM2_Handler+0x50>)
    20aa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    20ac:	b292      	uxth	r2, r2
    20ae:	b2d1      	uxtb	r1, r2
    20b0:	4a0a      	ldr	r2, [pc, #40]	; (20dc <SERCOM2_Handler+0x58>)
    20b2:	54d1      	strb	r1, [r2, r3]
				rx_buffer_array[buff_count++] = (uint8_t)BLE_UART_SERCOM->USART.DATA.reg;
			}
		//}

	}
}
    20b4:	e00a      	b.n	20cc <SERCOM2_Handler+0x48>
				buff_count = 0;
				rx_buffer_array[buff_count] = (uint8_t) BLE_UART_SERCOM->USART.DATA.reg;
			}
			else
			{
				rx_buffer_array[buff_count++] = (uint8_t)BLE_UART_SERCOM->USART.DATA.reg;
    20b6:	4b08      	ldr	r3, [pc, #32]	; (20d8 <SERCOM2_Handler+0x54>)
    20b8:	681b      	ldr	r3, [r3, #0]
    20ba:	1c59      	adds	r1, r3, #1
    20bc:	4a06      	ldr	r2, [pc, #24]	; (20d8 <SERCOM2_Handler+0x54>)
    20be:	6011      	str	r1, [r2, #0]
    20c0:	4a04      	ldr	r2, [pc, #16]	; (20d4 <SERCOM2_Handler+0x50>)
    20c2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    20c4:	b292      	uxth	r2, r2
    20c6:	b2d1      	uxtb	r1, r2
    20c8:	4a04      	ldr	r2, [pc, #16]	; (20dc <SERCOM2_Handler+0x58>)
    20ca:	54d1      	strb	r1, [r2, r3]
			}
		//}

	}
}
    20cc:	46c0      	nop			; (mov r8, r8)
    20ce:	46bd      	mov	sp, r7
    20d0:	bd80      	pop	{r7, pc}
    20d2:	46c0      	nop			; (mov r8, r8)
    20d4:	42001000 	.word	0x42001000
    20d8:	2000011c 	.word	0x2000011c
    20dc:	200001c4 	.word	0x200001c4

000020e0 <reset_buffers>:

void reset_buffers()
{
    20e0:	b580      	push	{r7, lr}
    20e2:	b082      	sub	sp, #8
    20e4:	af00      	add	r7, sp, #0
	for (int k=0;k<sizeof(rx_buffer_array);k++)
    20e6:	2300      	movs	r3, #0
    20e8:	607b      	str	r3, [r7, #4]
    20ea:	e007      	b.n	20fc <reset_buffers+0x1c>
	{
		rx_buffer_array[k] = 0;
    20ec:	4a08      	ldr	r2, [pc, #32]	; (2110 <reset_buffers+0x30>)
    20ee:	687b      	ldr	r3, [r7, #4]
    20f0:	18d3      	adds	r3, r2, r3
    20f2:	2200      	movs	r2, #0
    20f4:	701a      	strb	r2, [r3, #0]
	}
}

void reset_buffers()
{
	for (int k=0;k<sizeof(rx_buffer_array);k++)
    20f6:	687b      	ldr	r3, [r7, #4]
    20f8:	3301      	adds	r3, #1
    20fa:	607b      	str	r3, [r7, #4]
    20fc:	687b      	ldr	r3, [r7, #4]
    20fe:	2b7f      	cmp	r3, #127	; 0x7f
    2100:	d9f4      	bls.n	20ec <reset_buffers+0xc>
	{
		rx_buffer_array[k] = 0;
	}
	buff_count = 0;
    2102:	4b04      	ldr	r3, [pc, #16]	; (2114 <reset_buffers+0x34>)
    2104:	2200      	movs	r2, #0
    2106:	601a      	str	r2, [r3, #0]
}
    2108:	46c0      	nop			; (mov r8, r8)
    210a:	46bd      	mov	sp, r7
    210c:	b002      	add	sp, #8
    210e:	bd80      	pop	{r7, pc}
    2110:	200001c4 	.word	0x200001c4
    2114:	2000011c 	.word	0x2000011c

00002118 <data_handler>:




void data_handler(char buffer[])
{
    2118:	b5f0      	push	{r4, r5, r6, r7, lr}
    211a:	b097      	sub	sp, #92	; 0x5c
    211c:	af00      	add	r7, sp, #0
    211e:	60f8      	str	r0, [r7, #12]
	int buf_s = strlen(buffer);
    2120:	68fb      	ldr	r3, [r7, #12]
    2122:	0018      	movs	r0, r3
    2124:	4be8      	ldr	r3, [pc, #928]	; (24c8 <data_handler+0x3b0>)
    2126:	4798      	blx	r3
    2128:	0003      	movs	r3, r0
    212a:	657b      	str	r3, [r7, #84]	; 0x54
	if (strncmp(buffer,test_bob,3) == 0)
    212c:	49e7      	ldr	r1, [pc, #924]	; (24cc <data_handler+0x3b4>)
    212e:	68fb      	ldr	r3, [r7, #12]
    2130:	2203      	movs	r2, #3
    2132:	0018      	movs	r0, r3
    2134:	4be6      	ldr	r3, [pc, #920]	; (24d0 <data_handler+0x3b8>)
    2136:	4798      	blx	r3
    2138:	1e03      	subs	r3, r0, #0
    213a:	d132      	bne.n	21a2 <data_handler+0x8a>
	{
		ble_uart_write("bob was found");
    213c:	4be5      	ldr	r3, [pc, #916]	; (24d4 <data_handler+0x3bc>)
    213e:	0018      	movs	r0, r3
    2140:	4be5      	ldr	r3, [pc, #916]	; (24d8 <data_handler+0x3c0>)
    2142:	4798      	blx	r3
		
		if (strlen(buffer) > strlen(test_bob))
    2144:	68fb      	ldr	r3, [r7, #12]
    2146:	0018      	movs	r0, r3
    2148:	4bdf      	ldr	r3, [pc, #892]	; (24c8 <data_handler+0x3b0>)
    214a:	4798      	blx	r3
    214c:	0004      	movs	r4, r0
    214e:	4bdf      	ldr	r3, [pc, #892]	; (24cc <data_handler+0x3b4>)
    2150:	0018      	movs	r0, r3
    2152:	4bdd      	ldr	r3, [pc, #884]	; (24c8 <data_handler+0x3b0>)
    2154:	4798      	blx	r3
    2156:	0003      	movs	r3, r0
    2158:	429c      	cmp	r4, r3
    215a:	d922      	bls.n	21a2 <data_handler+0x8a>
		{
			int arg1;
			sscanf(buffer,"PWM %d",&arg1);
    215c:	2348      	movs	r3, #72	; 0x48
    215e:	2208      	movs	r2, #8
    2160:	18ba      	adds	r2, r7, r2
    2162:	18d2      	adds	r2, r2, r3
    2164:	49dd      	ldr	r1, [pc, #884]	; (24dc <data_handler+0x3c4>)
    2166:	68fb      	ldr	r3, [r7, #12]
    2168:	0018      	movs	r0, r3
    216a:	4bdd      	ldr	r3, [pc, #884]	; (24e0 <data_handler+0x3c8>)
    216c:	4798      	blx	r3
			//arg1 = buffer[4]-'0';
			if (arg1 < 1)
    216e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2170:	2b00      	cmp	r3, #0
    2172:	dc01      	bgt.n	2178 <data_handler+0x60>
			{
				arg1 = 1;
    2174:	2301      	movs	r3, #1
    2176:	653b      	str	r3, [r7, #80]	; 0x50
			}
			pwm_bob = arg1;
    2178:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    217a:	4bda      	ldr	r3, [pc, #872]	; (24e4 <data_handler+0x3cc>)
    217c:	601a      	str	r2, [r3, #0]
			char string_buffer[32];
			sprintf(string_buffer,": %d",arg1);
    217e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2180:	49d9      	ldr	r1, [pc, #868]	; (24e8 <data_handler+0x3d0>)
    2182:	2308      	movs	r3, #8
    2184:	2008      	movs	r0, #8
    2186:	4684      	mov	ip, r0
    2188:	44bc      	add	ip, r7
    218a:	4463      	add	r3, ip
    218c:	0018      	movs	r0, r3
    218e:	4bd7      	ldr	r3, [pc, #860]	; (24ec <data_handler+0x3d4>)
    2190:	4798      	blx	r3
			ble_uart_write(string_buffer);
    2192:	2308      	movs	r3, #8
    2194:	2208      	movs	r2, #8
    2196:	4694      	mov	ip, r2
    2198:	44bc      	add	ip, r7
    219a:	4463      	add	r3, ip
    219c:	0018      	movs	r0, r3
    219e:	4bce      	ldr	r3, [pc, #824]	; (24d8 <data_handler+0x3c0>)
    21a0:	4798      	blx	r3
		}
	}


	if(strncmp(buffer,FLASH_ALL_ON,4) == 0)
    21a2:	49d3      	ldr	r1, [pc, #844]	; (24f0 <data_handler+0x3d8>)
    21a4:	68fb      	ldr	r3, [r7, #12]
    21a6:	2204      	movs	r2, #4
    21a8:	0018      	movs	r0, r3
    21aa:	4bc9      	ldr	r3, [pc, #804]	; (24d0 <data_handler+0x3b8>)
    21ac:	4798      	blx	r3
    21ae:	1e03      	subs	r3, r0, #0
    21b0:	d000      	beq.n	21b4 <data_handler+0x9c>
    21b2:	e082      	b.n	22ba <data_handler+0x1a2>
	{
		configure_pin(POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_PIN,true);
    21b4:	2301      	movs	r3, #1
    21b6:	2200      	movs	r2, #0
    21b8:	2100      	movs	r1, #0
    21ba:	2001      	movs	r0, #1
    21bc:	4ccd      	ldr	r4, [pc, #820]	; (24f4 <data_handler+0x3dc>)
    21be:	47a0      	blx	r4



		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    21c0:	2301      	movs	r3, #1
    21c2:	2200      	movs	r2, #0
    21c4:	2101      	movs	r1, #1
    21c6:	2000      	movs	r0, #0
    21c8:	4cca      	ldr	r4, [pc, #808]	; (24f4 <data_handler+0x3dc>)
    21ca:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    21cc:	2301      	movs	r3, #1
    21ce:	2200      	movs	r2, #0
    21d0:	2102      	movs	r1, #2
    21d2:	2000      	movs	r0, #0
    21d4:	4cc7      	ldr	r4, [pc, #796]	; (24f4 <data_handler+0x3dc>)
    21d6:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    21d8:	2301      	movs	r3, #1
    21da:	2200      	movs	r2, #0
    21dc:	2103      	movs	r1, #3
    21de:	2000      	movs	r0, #0
    21e0:	4cc4      	ldr	r4, [pc, #784]	; (24f4 <data_handler+0x3dc>)
    21e2:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    21e4:	2301      	movs	r3, #1
    21e6:	2200      	movs	r2, #0
    21e8:	2104      	movs	r1, #4
    21ea:	2000      	movs	r0, #0
    21ec:	4cc1      	ldr	r4, [pc, #772]	; (24f4 <data_handler+0x3dc>)
    21ee:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,true);
    21f0:	2301      	movs	r3, #1
    21f2:	2201      	movs	r2, #1
    21f4:	2102      	movs	r1, #2
    21f6:	2000      	movs	r0, #0
    21f8:	4cbe      	ldr	r4, [pc, #760]	; (24f4 <data_handler+0x3dc>)
    21fa:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,true);
    21fc:	2301      	movs	r3, #1
    21fe:	2201      	movs	r2, #1
    2200:	2101      	movs	r1, #1
    2202:	2000      	movs	r0, #0
    2204:	4cbb      	ldr	r4, [pc, #748]	; (24f4 <data_handler+0x3dc>)
    2206:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,true);
    2208:	2301      	movs	r3, #1
    220a:	2202      	movs	r2, #2
    220c:	2102      	movs	r1, #2
    220e:	2000      	movs	r0, #0
    2210:	4cb8      	ldr	r4, [pc, #736]	; (24f4 <data_handler+0x3dc>)
    2212:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,true);
    2214:	2301      	movs	r3, #1
    2216:	2202      	movs	r2, #2
    2218:	2101      	movs	r1, #1
    221a:	2000      	movs	r0, #0
    221c:	4cb5      	ldr	r4, [pc, #724]	; (24f4 <data_handler+0x3dc>)
    221e:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,true);
    2220:	2301      	movs	r3, #1
    2222:	2202      	movs	r2, #2
    2224:	2104      	movs	r1, #4
    2226:	2000      	movs	r0, #0
    2228:	4cb2      	ldr	r4, [pc, #712]	; (24f4 <data_handler+0x3dc>)
    222a:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,true);
    222c:	2301      	movs	r3, #1
    222e:	2202      	movs	r2, #2
    2230:	2103      	movs	r1, #3
    2232:	2000      	movs	r0, #0
    2234:	4caf      	ldr	r4, [pc, #700]	; (24f4 <data_handler+0x3dc>)
    2236:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,true);
    2238:	2301      	movs	r3, #1
    223a:	2201      	movs	r2, #1
    223c:	2103      	movs	r1, #3
    223e:	2000      	movs	r0, #0
    2240:	4cac      	ldr	r4, [pc, #688]	; (24f4 <data_handler+0x3dc>)
    2242:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,true);
    2244:	2301      	movs	r3, #1
    2246:	2201      	movs	r2, #1
    2248:	2104      	movs	r1, #4
    224a:	2000      	movs	r0, #0
    224c:	4ca9      	ldr	r4, [pc, #676]	; (24f4 <data_handler+0x3dc>)
    224e:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,true);
    2250:	2301      	movs	r3, #1
    2252:	2203      	movs	r2, #3
    2254:	2102      	movs	r1, #2
    2256:	2000      	movs	r0, #0
    2258:	4ca6      	ldr	r4, [pc, #664]	; (24f4 <data_handler+0x3dc>)
    225a:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,true);
    225c:	2301      	movs	r3, #1
    225e:	2203      	movs	r2, #3
    2260:	2101      	movs	r1, #1
    2262:	2000      	movs	r0, #0
    2264:	4ca3      	ldr	r4, [pc, #652]	; (24f4 <data_handler+0x3dc>)
    2266:	47a0      	blx	r4
		
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR, SUB_LEFT_PIN,true);
    2268:	2301      	movs	r3, #1
    226a:	2203      	movs	r2, #3
    226c:	2103      	movs	r1, #3
    226e:	2000      	movs	r0, #0
    2270:	4ca0      	ldr	r4, [pc, #640]	; (24f4 <data_handler+0x3dc>)
    2272:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR, SUB_RIGHT_PIN,true);
    2274:	2301      	movs	r3, #1
    2276:	2204      	movs	r2, #4
    2278:	2103      	movs	r1, #3
    227a:	2000      	movs	r0, #0
    227c:	4c9d      	ldr	r4, [pc, #628]	; (24f4 <data_handler+0x3dc>)
    227e:	47a0      	blx	r4
		
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,true);
    2280:	2301      	movs	r3, #1
    2282:	2204      	movs	r2, #4
    2284:	2101      	movs	r1, #1
    2286:	2000      	movs	r0, #0
    2288:	4c9a      	ldr	r4, [pc, #616]	; (24f4 <data_handler+0x3dc>)
    228a:	47a0      	blx	r4
		
		configure_pin(CABIN_FRONT_RIGHT_PORT,CABIN_FRONT_RIGHT_ADR,CABIN_FRONT_RIGHT_PIN,true);
    228c:	2301      	movs	r3, #1
    228e:	2203      	movs	r2, #3
    2290:	2105      	movs	r1, #5
    2292:	2000      	movs	r0, #0
    2294:	4c97      	ldr	r4, [pc, #604]	; (24f4 <data_handler+0x3dc>)
    2296:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_LEFT_PORT,CABIN_FRONT_LEFT_ADR,CABIN_FRONT_LEFT_PIN,true);
    2298:	2301      	movs	r3, #1
    229a:	2202      	movs	r2, #2
    229c:	2105      	movs	r1, #5
    229e:	2000      	movs	r0, #0
    22a0:	4c94      	ldr	r4, [pc, #592]	; (24f4 <data_handler+0x3dc>)
    22a2:	47a0      	blx	r4
		configure_pin(CABIN_BACKSEAT_PORT,CABIN_BACKSEAT_ADR,CABIN_BACKSEAT_PIN,true);
    22a4:	2301      	movs	r3, #1
    22a6:	2204      	movs	r2, #4
    22a8:	2105      	movs	r1, #5
    22aa:	2000      	movs	r0, #0
    22ac:	4c91      	ldr	r4, [pc, #580]	; (24f4 <data_handler+0x3dc>)
    22ae:	47a0      	blx	r4
		
		flash_all = true;
    22b0:	4b91      	ldr	r3, [pc, #580]	; (24f8 <data_handler+0x3e0>)
    22b2:	2201      	movs	r2, #1
    22b4:	701a      	strb	r2, [r3, #0]
    22b6:	f000 fdf6 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,FLASH_ALL_OFF,4) == 0)
    22ba:	4990      	ldr	r1, [pc, #576]	; (24fc <data_handler+0x3e4>)
    22bc:	68fb      	ldr	r3, [r7, #12]
    22be:	2204      	movs	r2, #4
    22c0:	0018      	movs	r0, r3
    22c2:	4b83      	ldr	r3, [pc, #524]	; (24d0 <data_handler+0x3b8>)
    22c4:	4798      	blx	r3
    22c6:	1e03      	subs	r3, r0, #0
    22c8:	d17c      	bne.n	23c4 <data_handler+0x2ac>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    22ca:	2300      	movs	r3, #0
    22cc:	2200      	movs	r2, #0
    22ce:	2101      	movs	r1, #1
    22d0:	2000      	movs	r0, #0
    22d2:	4c88      	ldr	r4, [pc, #544]	; (24f4 <data_handler+0x3dc>)
    22d4:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    22d6:	2300      	movs	r3, #0
    22d8:	2200      	movs	r2, #0
    22da:	2102      	movs	r1, #2
    22dc:	2000      	movs	r0, #0
    22de:	4c85      	ldr	r4, [pc, #532]	; (24f4 <data_handler+0x3dc>)
    22e0:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    22e2:	2300      	movs	r3, #0
    22e4:	2200      	movs	r2, #0
    22e6:	2103      	movs	r1, #3
    22e8:	2000      	movs	r0, #0
    22ea:	4c82      	ldr	r4, [pc, #520]	; (24f4 <data_handler+0x3dc>)
    22ec:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    22ee:	2300      	movs	r3, #0
    22f0:	2200      	movs	r2, #0
    22f2:	2104      	movs	r1, #4
    22f4:	2000      	movs	r0, #0
    22f6:	4c7f      	ldr	r4, [pc, #508]	; (24f4 <data_handler+0x3dc>)
    22f8:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,false);
    22fa:	2300      	movs	r3, #0
    22fc:	2201      	movs	r2, #1
    22fe:	2102      	movs	r1, #2
    2300:	2000      	movs	r0, #0
    2302:	4c7c      	ldr	r4, [pc, #496]	; (24f4 <data_handler+0x3dc>)
    2304:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,false);
    2306:	2300      	movs	r3, #0
    2308:	2201      	movs	r2, #1
    230a:	2101      	movs	r1, #1
    230c:	2000      	movs	r0, #0
    230e:	4c79      	ldr	r4, [pc, #484]	; (24f4 <data_handler+0x3dc>)
    2310:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,false);
    2312:	2300      	movs	r3, #0
    2314:	2202      	movs	r2, #2
    2316:	2102      	movs	r1, #2
    2318:	2000      	movs	r0, #0
    231a:	4c76      	ldr	r4, [pc, #472]	; (24f4 <data_handler+0x3dc>)
    231c:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,false);
    231e:	2300      	movs	r3, #0
    2320:	2202      	movs	r2, #2
    2322:	2101      	movs	r1, #1
    2324:	2000      	movs	r0, #0
    2326:	4c73      	ldr	r4, [pc, #460]	; (24f4 <data_handler+0x3dc>)
    2328:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,false);
    232a:	2300      	movs	r3, #0
    232c:	2202      	movs	r2, #2
    232e:	2104      	movs	r1, #4
    2330:	2000      	movs	r0, #0
    2332:	4c70      	ldr	r4, [pc, #448]	; (24f4 <data_handler+0x3dc>)
    2334:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,false);
    2336:	2300      	movs	r3, #0
    2338:	2202      	movs	r2, #2
    233a:	2103      	movs	r1, #3
    233c:	2000      	movs	r0, #0
    233e:	4c6d      	ldr	r4, [pc, #436]	; (24f4 <data_handler+0x3dc>)
    2340:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,false);
    2342:	2300      	movs	r3, #0
    2344:	2201      	movs	r2, #1
    2346:	2103      	movs	r1, #3
    2348:	2000      	movs	r0, #0
    234a:	4c6a      	ldr	r4, [pc, #424]	; (24f4 <data_handler+0x3dc>)
    234c:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,false);
    234e:	2300      	movs	r3, #0
    2350:	2201      	movs	r2, #1
    2352:	2104      	movs	r1, #4
    2354:	2000      	movs	r0, #0
    2356:	4c67      	ldr	r4, [pc, #412]	; (24f4 <data_handler+0x3dc>)
    2358:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,false);
    235a:	2300      	movs	r3, #0
    235c:	2203      	movs	r2, #3
    235e:	2102      	movs	r1, #2
    2360:	2000      	movs	r0, #0
    2362:	4c64      	ldr	r4, [pc, #400]	; (24f4 <data_handler+0x3dc>)
    2364:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,false);
    2366:	2300      	movs	r3, #0
    2368:	2203      	movs	r2, #3
    236a:	2101      	movs	r1, #1
    236c:	2000      	movs	r0, #0
    236e:	4c61      	ldr	r4, [pc, #388]	; (24f4 <data_handler+0x3dc>)
    2370:	47a0      	blx	r4
		
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR,SUB_LEFT_PIN,false);
    2372:	2300      	movs	r3, #0
    2374:	2203      	movs	r2, #3
    2376:	2103      	movs	r1, #3
    2378:	2000      	movs	r0, #0
    237a:	4c5e      	ldr	r4, [pc, #376]	; (24f4 <data_handler+0x3dc>)
    237c:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR,SUB_RIGHT_PIN,false);
    237e:	2300      	movs	r3, #0
    2380:	2204      	movs	r2, #4
    2382:	2103      	movs	r1, #3
    2384:	2000      	movs	r0, #0
    2386:	4c5b      	ldr	r4, [pc, #364]	; (24f4 <data_handler+0x3dc>)
    2388:	47a0      	blx	r4
		
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,false);
    238a:	2300      	movs	r3, #0
    238c:	2204      	movs	r2, #4
    238e:	2101      	movs	r1, #1
    2390:	2000      	movs	r0, #0
    2392:	4c58      	ldr	r4, [pc, #352]	; (24f4 <data_handler+0x3dc>)
    2394:	47a0      	blx	r4
		
		configure_pin(CABIN_FRONT_RIGHT_PORT,CABIN_FRONT_RIGHT_ADR,CABIN_FRONT_RIGHT_PIN,false);
    2396:	2300      	movs	r3, #0
    2398:	2203      	movs	r2, #3
    239a:	2105      	movs	r1, #5
    239c:	2000      	movs	r0, #0
    239e:	4c55      	ldr	r4, [pc, #340]	; (24f4 <data_handler+0x3dc>)
    23a0:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_LEFT_PORT,CABIN_FRONT_LEFT_ADR,CABIN_FRONT_LEFT_PIN,false);
    23a2:	2300      	movs	r3, #0
    23a4:	2202      	movs	r2, #2
    23a6:	2105      	movs	r1, #5
    23a8:	2000      	movs	r0, #0
    23aa:	4c52      	ldr	r4, [pc, #328]	; (24f4 <data_handler+0x3dc>)
    23ac:	47a0      	blx	r4
		configure_pin(CABIN_BACKSEAT_PORT,CABIN_BACKSEAT_ADR,CABIN_BACKSEAT_PIN,false);
    23ae:	2300      	movs	r3, #0
    23b0:	2204      	movs	r2, #4
    23b2:	2105      	movs	r1, #5
    23b4:	2000      	movs	r0, #0
    23b6:	4c4f      	ldr	r4, [pc, #316]	; (24f4 <data_handler+0x3dc>)
    23b8:	47a0      	blx	r4
		
		flash_all = false;
    23ba:	4b4f      	ldr	r3, [pc, #316]	; (24f8 <data_handler+0x3e0>)
    23bc:	2200      	movs	r2, #0
    23be:	701a      	strb	r2, [r3, #0]
    23c0:	f000 fd71 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,BLINK_ALL_ON,5) == 0)
    23c4:	494e      	ldr	r1, [pc, #312]	; (2500 <data_handler+0x3e8>)
    23c6:	68fb      	ldr	r3, [r7, #12]
    23c8:	2205      	movs	r2, #5
    23ca:	0018      	movs	r0, r3
    23cc:	4b40      	ldr	r3, [pc, #256]	; (24d0 <data_handler+0x3b8>)
    23ce:	4798      	blx	r3
    23d0:	1e03      	subs	r3, r0, #0
    23d2:	d10a      	bne.n	23ea <data_handler+0x2d2>
	{
		blink_left = true;
    23d4:	4b4b      	ldr	r3, [pc, #300]	; (2504 <data_handler+0x3ec>)
    23d6:	2201      	movs	r2, #1
    23d8:	701a      	strb	r2, [r3, #0]
		blink_right = true;
    23da:	4b4b      	ldr	r3, [pc, #300]	; (2508 <data_handler+0x3f0>)
    23dc:	2201      	movs	r2, #1
    23de:	701a      	strb	r2, [r3, #0]
		blink_all = true;
    23e0:	4b4a      	ldr	r3, [pc, #296]	; (250c <data_handler+0x3f4>)
    23e2:	2201      	movs	r2, #1
    23e4:	701a      	strb	r2, [r3, #0]
    23e6:	f000 fd5e 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,BLINK_ALL_OFF,5) == 0)
    23ea:	4949      	ldr	r1, [pc, #292]	; (2510 <data_handler+0x3f8>)
    23ec:	68fb      	ldr	r3, [r7, #12]
    23ee:	2205      	movs	r2, #5
    23f0:	0018      	movs	r0, r3
    23f2:	4b37      	ldr	r3, [pc, #220]	; (24d0 <data_handler+0x3b8>)
    23f4:	4798      	blx	r3
    23f6:	1e03      	subs	r3, r0, #0
    23f8:	d10a      	bne.n	2410 <data_handler+0x2f8>
	{
		blink_left = false;
    23fa:	4b42      	ldr	r3, [pc, #264]	; (2504 <data_handler+0x3ec>)
    23fc:	2200      	movs	r2, #0
    23fe:	701a      	strb	r2, [r3, #0]
		blink_right = false;
    2400:	4b41      	ldr	r3, [pc, #260]	; (2508 <data_handler+0x3f0>)
    2402:	2200      	movs	r2, #0
    2404:	701a      	strb	r2, [r3, #0]
		blink_all = false;
    2406:	4b41      	ldr	r3, [pc, #260]	; (250c <data_handler+0x3f4>)
    2408:	2200      	movs	r2, #0
    240a:	701a      	strb	r2, [r3, #0]
    240c:	f000 fd4b 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,BLINK_LEFT_ON,5) == 0)
    2410:	4940      	ldr	r1, [pc, #256]	; (2514 <data_handler+0x3fc>)
    2412:	68fb      	ldr	r3, [r7, #12]
    2414:	2205      	movs	r2, #5
    2416:	0018      	movs	r0, r3
    2418:	4b2d      	ldr	r3, [pc, #180]	; (24d0 <data_handler+0x3b8>)
    241a:	4798      	blx	r3
    241c:	1e03      	subs	r3, r0, #0
    241e:	d104      	bne.n	242a <data_handler+0x312>
	{
		blink_left = true;
    2420:	4b38      	ldr	r3, [pc, #224]	; (2504 <data_handler+0x3ec>)
    2422:	2201      	movs	r2, #1
    2424:	701a      	strb	r2, [r3, #0]
    2426:	f000 fd3e 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,BLINK_LEFT_OFF,5) == 0)
    242a:	493b      	ldr	r1, [pc, #236]	; (2518 <data_handler+0x400>)
    242c:	68fb      	ldr	r3, [r7, #12]
    242e:	2205      	movs	r2, #5
    2430:	0018      	movs	r0, r3
    2432:	4b27      	ldr	r3, [pc, #156]	; (24d0 <data_handler+0x3b8>)
    2434:	4798      	blx	r3
    2436:	1e03      	subs	r3, r0, #0
    2438:	d104      	bne.n	2444 <data_handler+0x32c>
	{
		blink_left = false;
    243a:	4b32      	ldr	r3, [pc, #200]	; (2504 <data_handler+0x3ec>)
    243c:	2200      	movs	r2, #0
    243e:	701a      	strb	r2, [r3, #0]
    2440:	f000 fd31 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,BLINK_RIGHT_ON,5) == 0)
    2444:	4935      	ldr	r1, [pc, #212]	; (251c <data_handler+0x404>)
    2446:	68fb      	ldr	r3, [r7, #12]
    2448:	2205      	movs	r2, #5
    244a:	0018      	movs	r0, r3
    244c:	4b20      	ldr	r3, [pc, #128]	; (24d0 <data_handler+0x3b8>)
    244e:	4798      	blx	r3
    2450:	1e03      	subs	r3, r0, #0
    2452:	d104      	bne.n	245e <data_handler+0x346>
	{
		blink_right = true;
    2454:	4b2c      	ldr	r3, [pc, #176]	; (2508 <data_handler+0x3f0>)
    2456:	2201      	movs	r2, #1
    2458:	701a      	strb	r2, [r3, #0]
    245a:	f000 fd24 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,BLINK_RIGHT_OFF,5) == 0)
    245e:	4930      	ldr	r1, [pc, #192]	; (2520 <data_handler+0x408>)
    2460:	68fb      	ldr	r3, [r7, #12]
    2462:	2205      	movs	r2, #5
    2464:	0018      	movs	r0, r3
    2466:	4b1a      	ldr	r3, [pc, #104]	; (24d0 <data_handler+0x3b8>)
    2468:	4798      	blx	r3
    246a:	1e03      	subs	r3, r0, #0
    246c:	d104      	bne.n	2478 <data_handler+0x360>
	{
		blink_right = false;
    246e:	4b26      	ldr	r3, [pc, #152]	; (2508 <data_handler+0x3f0>)
    2470:	2200      	movs	r2, #0
    2472:	701a      	strb	r2, [r3, #0]
    2474:	f000 fd17 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,HORN_0_ON,6) == 0)
    2478:	492a      	ldr	r1, [pc, #168]	; (2524 <data_handler+0x40c>)
    247a:	68fb      	ldr	r3, [r7, #12]
    247c:	2206      	movs	r2, #6
    247e:	0018      	movs	r0, r3
    2480:	4b13      	ldr	r3, [pc, #76]	; (24d0 <data_handler+0x3b8>)
    2482:	4798      	blx	r3
    2484:	1e03      	subs	r3, r0, #0
    2486:	d104      	bne.n	2492 <data_handler+0x37a>
	{
		horn0 = true;
    2488:	4b27      	ldr	r3, [pc, #156]	; (2528 <data_handler+0x410>)
    248a:	2201      	movs	r2, #1
    248c:	701a      	strb	r2, [r3, #0]
    248e:	f000 fd0a 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,HORN_0_OFF,6) == 0)
    2492:	4926      	ldr	r1, [pc, #152]	; (252c <data_handler+0x414>)
    2494:	68fb      	ldr	r3, [r7, #12]
    2496:	2206      	movs	r2, #6
    2498:	0018      	movs	r0, r3
    249a:	4b0d      	ldr	r3, [pc, #52]	; (24d0 <data_handler+0x3b8>)
    249c:	4798      	blx	r3
    249e:	1e03      	subs	r3, r0, #0
    24a0:	d104      	bne.n	24ac <data_handler+0x394>
	{
		horn0 = false;
    24a2:	4b21      	ldr	r3, [pc, #132]	; (2528 <data_handler+0x410>)
    24a4:	2200      	movs	r2, #0
    24a6:	701a      	strb	r2, [r3, #0]
    24a8:	f000 fcfd 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,HORN_1_ON,6) == 0)
    24ac:	4920      	ldr	r1, [pc, #128]	; (2530 <data_handler+0x418>)
    24ae:	68fb      	ldr	r3, [r7, #12]
    24b0:	2206      	movs	r2, #6
    24b2:	0018      	movs	r0, r3
    24b4:	4b06      	ldr	r3, [pc, #24]	; (24d0 <data_handler+0x3b8>)
    24b6:	4798      	blx	r3
    24b8:	1e03      	subs	r3, r0, #0
    24ba:	d13d      	bne.n	2538 <data_handler+0x420>
	{
		horn1 = true;
    24bc:	4b1d      	ldr	r3, [pc, #116]	; (2534 <data_handler+0x41c>)
    24be:	2201      	movs	r2, #1
    24c0:	701a      	strb	r2, [r3, #0]
    24c2:	f000 fcf0 	bl	2ea6 <data_handler+0xd8e>
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	00008325 	.word	0x00008325
    24cc:	2000000c 	.word	0x2000000c
    24d0:	00008333 	.word	0x00008333
    24d4:	000095f8 	.word	0x000095f8
    24d8:	0000202d 	.word	0x0000202d
    24dc:	00009608 	.word	0x00009608
    24e0:	000082d1 	.word	0x000082d1
    24e4:	200002ec 	.word	0x200002ec
    24e8:	00009610 	.word	0x00009610
    24ec:	0000828d 	.word	0x0000828d
    24f0:	00009618 	.word	0x00009618
    24f4:	00003ad9 	.word	0x00003ad9
    24f8:	2000025e 	.word	0x2000025e
    24fc:	00009620 	.word	0x00009620
    2500:	00009628 	.word	0x00009628
    2504:	200001ad 	.word	0x200001ad
    2508:	2000025d 	.word	0x2000025d
    250c:	2000025a 	.word	0x2000025a
    2510:	00009630 	.word	0x00009630
    2514:	00009638 	.word	0x00009638
    2518:	00009640 	.word	0x00009640
    251c:	00009648 	.word	0x00009648
    2520:	00009650 	.word	0x00009650
    2524:	00009658 	.word	0x00009658
    2528:	20000260 	.word	0x20000260
    252c:	00009660 	.word	0x00009660
    2530:	00009668 	.word	0x00009668
    2534:	200001ae 	.word	0x200001ae
	}
	else if(strncmp(buffer,HORN_1_OFF,6) == 0)
    2538:	49c6      	ldr	r1, [pc, #792]	; (2854 <data_handler+0x73c>)
    253a:	68fb      	ldr	r3, [r7, #12]
    253c:	2206      	movs	r2, #6
    253e:	0018      	movs	r0, r3
    2540:	4bc5      	ldr	r3, [pc, #788]	; (2858 <data_handler+0x740>)
    2542:	4798      	blx	r3
    2544:	1e03      	subs	r3, r0, #0
    2546:	d104      	bne.n	2552 <data_handler+0x43a>
	{
		horn1 = false;
    2548:	4bc4      	ldr	r3, [pc, #784]	; (285c <data_handler+0x744>)
    254a:	2200      	movs	r2, #0
    254c:	701a      	strb	r2, [r3, #0]
    254e:	f000 fcaa 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,HORN_2_ON,6) == 0)
    2552:	49c3      	ldr	r1, [pc, #780]	; (2860 <data_handler+0x748>)
    2554:	68fb      	ldr	r3, [r7, #12]
    2556:	2206      	movs	r2, #6
    2558:	0018      	movs	r0, r3
    255a:	4bbf      	ldr	r3, [pc, #764]	; (2858 <data_handler+0x740>)
    255c:	4798      	blx	r3
    255e:	1e03      	subs	r3, r0, #0
    2560:	d104      	bne.n	256c <data_handler+0x454>
	{
		horn2 = true;
    2562:	4bc0      	ldr	r3, [pc, #768]	; (2864 <data_handler+0x74c>)
    2564:	2201      	movs	r2, #1
    2566:	701a      	strb	r2, [r3, #0]
    2568:	f000 fc9d 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,HORN_2_OFF,6) == 0)
    256c:	49be      	ldr	r1, [pc, #760]	; (2868 <data_handler+0x750>)
    256e:	68fb      	ldr	r3, [r7, #12]
    2570:	2206      	movs	r2, #6
    2572:	0018      	movs	r0, r3
    2574:	4bb8      	ldr	r3, [pc, #736]	; (2858 <data_handler+0x740>)
    2576:	4798      	blx	r3
    2578:	1e03      	subs	r3, r0, #0
    257a:	d104      	bne.n	2586 <data_handler+0x46e>
	{
		horn2 = false;
    257c:	4bb9      	ldr	r3, [pc, #740]	; (2864 <data_handler+0x74c>)
    257e:	2200      	movs	r2, #0
    2580:	701a      	strb	r2, [r3, #0]
    2582:	f000 fc90 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,HORN_3_ON,6) == 0)
    2586:	49b9      	ldr	r1, [pc, #740]	; (286c <data_handler+0x754>)
    2588:	68fb      	ldr	r3, [r7, #12]
    258a:	2206      	movs	r2, #6
    258c:	0018      	movs	r0, r3
    258e:	4bb2      	ldr	r3, [pc, #712]	; (2858 <data_handler+0x740>)
    2590:	4798      	blx	r3
    2592:	1e03      	subs	r3, r0, #0
    2594:	d104      	bne.n	25a0 <data_handler+0x488>
	{
		horn3 = true;
    2596:	4bb6      	ldr	r3, [pc, #728]	; (2870 <data_handler+0x758>)
    2598:	2201      	movs	r2, #1
    259a:	701a      	strb	r2, [r3, #0]
    259c:	f000 fc83 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,HORN_3_OFF,6) == 0)
    25a0:	49b4      	ldr	r1, [pc, #720]	; (2874 <data_handler+0x75c>)
    25a2:	68fb      	ldr	r3, [r7, #12]
    25a4:	2206      	movs	r2, #6
    25a6:	0018      	movs	r0, r3
    25a8:	4bab      	ldr	r3, [pc, #684]	; (2858 <data_handler+0x740>)
    25aa:	4798      	blx	r3
    25ac:	1e03      	subs	r3, r0, #0
    25ae:	d104      	bne.n	25ba <data_handler+0x4a2>
	{
		horn3 = false;
    25b0:	4baf      	ldr	r3, [pc, #700]	; (2870 <data_handler+0x758>)
    25b2:	2200      	movs	r2, #0
    25b4:	701a      	strb	r2, [r3, #0]
    25b6:	f000 fc76 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_0_ON,6) == 0)
    25ba:	49af      	ldr	r1, [pc, #700]	; (2878 <data_handler+0x760>)
    25bc:	68fb      	ldr	r3, [r7, #12]
    25be:	2206      	movs	r2, #6
    25c0:	0018      	movs	r0, r3
    25c2:	4ba5      	ldr	r3, [pc, #660]	; (2858 <data_handler+0x740>)
    25c4:	4798      	blx	r3
    25c6:	1e03      	subs	r3, r0, #0
    25c8:	d104      	bne.n	25d4 <data_handler+0x4bc>
	{
		press_sb_btn_once(SB_PIN_BTN00);
    25ca:	200b      	movs	r0, #11
    25cc:	4bab      	ldr	r3, [pc, #684]	; (287c <data_handler+0x764>)
    25ce:	4798      	blx	r3
    25d0:	f000 fc69 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_0_OFF,6) == 0)
    25d4:	49aa      	ldr	r1, [pc, #680]	; (2880 <data_handler+0x768>)
    25d6:	68fb      	ldr	r3, [r7, #12]
    25d8:	2206      	movs	r2, #6
    25da:	0018      	movs	r0, r3
    25dc:	4b9e      	ldr	r3, [pc, #632]	; (2858 <data_handler+0x740>)
    25de:	4798      	blx	r3
    25e0:	1e03      	subs	r3, r0, #0
    25e2:	d104      	bne.n	25ee <data_handler+0x4d6>
	{
		release_sb_btn(SB_PIN_BTN00);
    25e4:	200b      	movs	r0, #11
    25e6:	4ba7      	ldr	r3, [pc, #668]	; (2884 <data_handler+0x76c>)
    25e8:	4798      	blx	r3
    25ea:	f000 fc5c 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_1_ON,6) == 0)
    25ee:	49a6      	ldr	r1, [pc, #664]	; (2888 <data_handler+0x770>)
    25f0:	68fb      	ldr	r3, [r7, #12]
    25f2:	2206      	movs	r2, #6
    25f4:	0018      	movs	r0, r3
    25f6:	4b98      	ldr	r3, [pc, #608]	; (2858 <data_handler+0x740>)
    25f8:	4798      	blx	r3
    25fa:	1e03      	subs	r3, r0, #0
    25fc:	d104      	bne.n	2608 <data_handler+0x4f0>
	{
		press_sb_btn_once(SB_PIN_BTN01);
    25fe:	200c      	movs	r0, #12
    2600:	4b9e      	ldr	r3, [pc, #632]	; (287c <data_handler+0x764>)
    2602:	4798      	blx	r3
    2604:	f000 fc4f 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_1_OFF,6) == 0)
    2608:	49a0      	ldr	r1, [pc, #640]	; (288c <data_handler+0x774>)
    260a:	68fb      	ldr	r3, [r7, #12]
    260c:	2206      	movs	r2, #6
    260e:	0018      	movs	r0, r3
    2610:	4b91      	ldr	r3, [pc, #580]	; (2858 <data_handler+0x740>)
    2612:	4798      	blx	r3
    2614:	1e03      	subs	r3, r0, #0
    2616:	d104      	bne.n	2622 <data_handler+0x50a>
	{
		release_sb_btn(SB_PIN_BTN01);
    2618:	200c      	movs	r0, #12
    261a:	4b9a      	ldr	r3, [pc, #616]	; (2884 <data_handler+0x76c>)
    261c:	4798      	blx	r3
    261e:	f000 fc42 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_2_ON,6) == 0)
    2622:	499b      	ldr	r1, [pc, #620]	; (2890 <data_handler+0x778>)
    2624:	68fb      	ldr	r3, [r7, #12]
    2626:	2206      	movs	r2, #6
    2628:	0018      	movs	r0, r3
    262a:	4b8b      	ldr	r3, [pc, #556]	; (2858 <data_handler+0x740>)
    262c:	4798      	blx	r3
    262e:	1e03      	subs	r3, r0, #0
    2630:	d104      	bne.n	263c <data_handler+0x524>
	{
		press_sb_btn_once(SB_PIN_BTN02);
    2632:	200d      	movs	r0, #13
    2634:	4b91      	ldr	r3, [pc, #580]	; (287c <data_handler+0x764>)
    2636:	4798      	blx	r3
    2638:	f000 fc35 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_2_OFF,6) == 0)
    263c:	4995      	ldr	r1, [pc, #596]	; (2894 <data_handler+0x77c>)
    263e:	68fb      	ldr	r3, [r7, #12]
    2640:	2206      	movs	r2, #6
    2642:	0018      	movs	r0, r3
    2644:	4b84      	ldr	r3, [pc, #528]	; (2858 <data_handler+0x740>)
    2646:	4798      	blx	r3
    2648:	1e03      	subs	r3, r0, #0
    264a:	d104      	bne.n	2656 <data_handler+0x53e>
	{
		release_sb_btn(SB_PIN_BTN02);
    264c:	200d      	movs	r0, #13
    264e:	4b8d      	ldr	r3, [pc, #564]	; (2884 <data_handler+0x76c>)
    2650:	4798      	blx	r3
    2652:	f000 fc28 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_3_ON,6) == 0)
    2656:	4990      	ldr	r1, [pc, #576]	; (2898 <data_handler+0x780>)
    2658:	68fb      	ldr	r3, [r7, #12]
    265a:	2206      	movs	r2, #6
    265c:	0018      	movs	r0, r3
    265e:	4b7e      	ldr	r3, [pc, #504]	; (2858 <data_handler+0x740>)
    2660:	4798      	blx	r3
    2662:	1e03      	subs	r3, r0, #0
    2664:	d104      	bne.n	2670 <data_handler+0x558>
	{
		press_sb_btn_once(SB_PIN_BTN03);
    2666:	200e      	movs	r0, #14
    2668:	4b84      	ldr	r3, [pc, #528]	; (287c <data_handler+0x764>)
    266a:	4798      	blx	r3
    266c:	f000 fc1b 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_3_OFF,6) == 0)
    2670:	498a      	ldr	r1, [pc, #552]	; (289c <data_handler+0x784>)
    2672:	68fb      	ldr	r3, [r7, #12]
    2674:	2206      	movs	r2, #6
    2676:	0018      	movs	r0, r3
    2678:	4b77      	ldr	r3, [pc, #476]	; (2858 <data_handler+0x740>)
    267a:	4798      	blx	r3
    267c:	1e03      	subs	r3, r0, #0
    267e:	d104      	bne.n	268a <data_handler+0x572>
	{
		release_sb_btn(SB_PIN_BTN03);
    2680:	200e      	movs	r0, #14
    2682:	4b80      	ldr	r3, [pc, #512]	; (2884 <data_handler+0x76c>)
    2684:	4798      	blx	r3
    2686:	f000 fc0e 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_4_ON,6) == 0)
    268a:	4985      	ldr	r1, [pc, #532]	; (28a0 <data_handler+0x788>)
    268c:	68fb      	ldr	r3, [r7, #12]
    268e:	2206      	movs	r2, #6
    2690:	0018      	movs	r0, r3
    2692:	4b71      	ldr	r3, [pc, #452]	; (2858 <data_handler+0x740>)
    2694:	4798      	blx	r3
    2696:	1e03      	subs	r3, r0, #0
    2698:	d104      	bne.n	26a4 <data_handler+0x58c>
	{
		press_sb_btn_once(SB_PIN_BTN04);
    269a:	200f      	movs	r0, #15
    269c:	4b77      	ldr	r3, [pc, #476]	; (287c <data_handler+0x764>)
    269e:	4798      	blx	r3
    26a0:	f000 fc01 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_4_OFF,6) == 0)
    26a4:	497f      	ldr	r1, [pc, #508]	; (28a4 <data_handler+0x78c>)
    26a6:	68fb      	ldr	r3, [r7, #12]
    26a8:	2206      	movs	r2, #6
    26aa:	0018      	movs	r0, r3
    26ac:	4b6a      	ldr	r3, [pc, #424]	; (2858 <data_handler+0x740>)
    26ae:	4798      	blx	r3
    26b0:	1e03      	subs	r3, r0, #0
    26b2:	d104      	bne.n	26be <data_handler+0x5a6>
	{
		release_sb_btn(SB_PIN_BTN04);
    26b4:	200f      	movs	r0, #15
    26b6:	4b73      	ldr	r3, [pc, #460]	; (2884 <data_handler+0x76c>)
    26b8:	4798      	blx	r3
    26ba:	f000 fbf4 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_5_ON,6) == 0)
    26be:	497a      	ldr	r1, [pc, #488]	; (28a8 <data_handler+0x790>)
    26c0:	68fb      	ldr	r3, [r7, #12]
    26c2:	2206      	movs	r2, #6
    26c4:	0018      	movs	r0, r3
    26c6:	4b64      	ldr	r3, [pc, #400]	; (2858 <data_handler+0x740>)
    26c8:	4798      	blx	r3
    26ca:	1e03      	subs	r3, r0, #0
    26cc:	d104      	bne.n	26d8 <data_handler+0x5c0>
	{
		press_sb_btn_once(SB_PIN_BTN05);
    26ce:	2010      	movs	r0, #16
    26d0:	4b6a      	ldr	r3, [pc, #424]	; (287c <data_handler+0x764>)
    26d2:	4798      	blx	r3
    26d4:	f000 fbe7 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_5_OFF,6) == 0)
    26d8:	4974      	ldr	r1, [pc, #464]	; (28ac <data_handler+0x794>)
    26da:	68fb      	ldr	r3, [r7, #12]
    26dc:	2206      	movs	r2, #6
    26de:	0018      	movs	r0, r3
    26e0:	4b5d      	ldr	r3, [pc, #372]	; (2858 <data_handler+0x740>)
    26e2:	4798      	blx	r3
    26e4:	1e03      	subs	r3, r0, #0
    26e6:	d104      	bne.n	26f2 <data_handler+0x5da>
	{
		release_sb_btn(SB_PIN_BTN05);
    26e8:	2010      	movs	r0, #16
    26ea:	4b66      	ldr	r3, [pc, #408]	; (2884 <data_handler+0x76c>)
    26ec:	4798      	blx	r3
    26ee:	f000 fbda 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_6_ON,6) == 0)
    26f2:	496f      	ldr	r1, [pc, #444]	; (28b0 <data_handler+0x798>)
    26f4:	68fb      	ldr	r3, [r7, #12]
    26f6:	2206      	movs	r2, #6
    26f8:	0018      	movs	r0, r3
    26fa:	4b57      	ldr	r3, [pc, #348]	; (2858 <data_handler+0x740>)
    26fc:	4798      	blx	r3
    26fe:	1e03      	subs	r3, r0, #0
    2700:	d104      	bne.n	270c <data_handler+0x5f4>
	{
		press_sb_btn_once(SB_PIN_BTN06);
    2702:	2011      	movs	r0, #17
    2704:	4b5d      	ldr	r3, [pc, #372]	; (287c <data_handler+0x764>)
    2706:	4798      	blx	r3
    2708:	f000 fbcd 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_6_OFF,6) == 0)
    270c:	4969      	ldr	r1, [pc, #420]	; (28b4 <data_handler+0x79c>)
    270e:	68fb      	ldr	r3, [r7, #12]
    2710:	2206      	movs	r2, #6
    2712:	0018      	movs	r0, r3
    2714:	4b50      	ldr	r3, [pc, #320]	; (2858 <data_handler+0x740>)
    2716:	4798      	blx	r3
    2718:	1e03      	subs	r3, r0, #0
    271a:	d104      	bne.n	2726 <data_handler+0x60e>
	{
		release_sb_btn(SB_PIN_BTN06);
    271c:	2011      	movs	r0, #17
    271e:	4b59      	ldr	r3, [pc, #356]	; (2884 <data_handler+0x76c>)
    2720:	4798      	blx	r3
    2722:	f000 fbc0 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_7_ON,6) == 0)
    2726:	4964      	ldr	r1, [pc, #400]	; (28b8 <data_handler+0x7a0>)
    2728:	68fb      	ldr	r3, [r7, #12]
    272a:	2206      	movs	r2, #6
    272c:	0018      	movs	r0, r3
    272e:	4b4a      	ldr	r3, [pc, #296]	; (2858 <data_handler+0x740>)
    2730:	4798      	blx	r3
    2732:	1e03      	subs	r3, r0, #0
    2734:	d104      	bne.n	2740 <data_handler+0x628>
	{
		press_sb_btn_once(SB_PIN_BTN07);
    2736:	2012      	movs	r0, #18
    2738:	4b50      	ldr	r3, [pc, #320]	; (287c <data_handler+0x764>)
    273a:	4798      	blx	r3
    273c:	f000 fbb3 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_7_OFF,6) == 0)
    2740:	495e      	ldr	r1, [pc, #376]	; (28bc <data_handler+0x7a4>)
    2742:	68fb      	ldr	r3, [r7, #12]
    2744:	2206      	movs	r2, #6
    2746:	0018      	movs	r0, r3
    2748:	4b43      	ldr	r3, [pc, #268]	; (2858 <data_handler+0x740>)
    274a:	4798      	blx	r3
    274c:	1e03      	subs	r3, r0, #0
    274e:	d104      	bne.n	275a <data_handler+0x642>
	{
		release_sb_btn(SB_PIN_BTN07);
    2750:	2012      	movs	r0, #18
    2752:	4b4c      	ldr	r3, [pc, #304]	; (2884 <data_handler+0x76c>)
    2754:	4798      	blx	r3
    2756:	f000 fba6 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_8_ON,6) == 0)
    275a:	4959      	ldr	r1, [pc, #356]	; (28c0 <data_handler+0x7a8>)
    275c:	68fb      	ldr	r3, [r7, #12]
    275e:	2206      	movs	r2, #6
    2760:	0018      	movs	r0, r3
    2762:	4b3d      	ldr	r3, [pc, #244]	; (2858 <data_handler+0x740>)
    2764:	4798      	blx	r3
    2766:	1e03      	subs	r3, r0, #0
    2768:	d104      	bne.n	2774 <data_handler+0x65c>
	{
		press_sb_btn_once(SB_PIN_BTN08);
    276a:	2013      	movs	r0, #19
    276c:	4b43      	ldr	r3, [pc, #268]	; (287c <data_handler+0x764>)
    276e:	4798      	blx	r3
    2770:	f000 fb99 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_8_OFF,6) == 0)
    2774:	4953      	ldr	r1, [pc, #332]	; (28c4 <data_handler+0x7ac>)
    2776:	68fb      	ldr	r3, [r7, #12]
    2778:	2206      	movs	r2, #6
    277a:	0018      	movs	r0, r3
    277c:	4b36      	ldr	r3, [pc, #216]	; (2858 <data_handler+0x740>)
    277e:	4798      	blx	r3
    2780:	1e03      	subs	r3, r0, #0
    2782:	d104      	bne.n	278e <data_handler+0x676>
	{
		release_sb_btn(SB_PIN_BTN08);
    2784:	2013      	movs	r0, #19
    2786:	4b3f      	ldr	r3, [pc, #252]	; (2884 <data_handler+0x76c>)
    2788:	4798      	blx	r3
    278a:	f000 fb8c 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_9_ON,6) == 0)
    278e:	494e      	ldr	r1, [pc, #312]	; (28c8 <data_handler+0x7b0>)
    2790:	68fb      	ldr	r3, [r7, #12]
    2792:	2206      	movs	r2, #6
    2794:	0018      	movs	r0, r3
    2796:	4b30      	ldr	r3, [pc, #192]	; (2858 <data_handler+0x740>)
    2798:	4798      	blx	r3
    279a:	1e03      	subs	r3, r0, #0
    279c:	d104      	bne.n	27a8 <data_handler+0x690>
	{
		press_sb_btn_once(SB_PIN_BTN09);
    279e:	2014      	movs	r0, #20
    27a0:	4b36      	ldr	r3, [pc, #216]	; (287c <data_handler+0x764>)
    27a2:	4798      	blx	r3
    27a4:	f000 fb7f 	bl	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_9_OFF,6) == 0)
    27a8:	4948      	ldr	r1, [pc, #288]	; (28cc <data_handler+0x7b4>)
    27aa:	68fb      	ldr	r3, [r7, #12]
    27ac:	2206      	movs	r2, #6
    27ae:	0018      	movs	r0, r3
    27b0:	4b29      	ldr	r3, [pc, #164]	; (2858 <data_handler+0x740>)
    27b2:	4798      	blx	r3
    27b4:	1e03      	subs	r3, r0, #0
    27b6:	d103      	bne.n	27c0 <data_handler+0x6a8>
	{
		release_sb_btn(SB_PIN_BTN09);
    27b8:	2014      	movs	r0, #20
    27ba:	4b32      	ldr	r3, [pc, #200]	; (2884 <data_handler+0x76c>)
    27bc:	4798      	blx	r3
    27be:	e372      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_10_ON,6) == 0)
    27c0:	4943      	ldr	r1, [pc, #268]	; (28d0 <data_handler+0x7b8>)
    27c2:	68fb      	ldr	r3, [r7, #12]
    27c4:	2206      	movs	r2, #6
    27c6:	0018      	movs	r0, r3
    27c8:	4b23      	ldr	r3, [pc, #140]	; (2858 <data_handler+0x740>)
    27ca:	4798      	blx	r3
    27cc:	1e03      	subs	r3, r0, #0
    27ce:	d103      	bne.n	27d8 <data_handler+0x6c0>
	{
		press_sb_btn_once(SB_PIN_BTN10);
    27d0:	2015      	movs	r0, #21
    27d2:	4b2a      	ldr	r3, [pc, #168]	; (287c <data_handler+0x764>)
    27d4:	4798      	blx	r3
    27d6:	e366      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,SOUND_10_OFF,6) == 0)
    27d8:	493e      	ldr	r1, [pc, #248]	; (28d4 <data_handler+0x7bc>)
    27da:	68fb      	ldr	r3, [r7, #12]
    27dc:	2206      	movs	r2, #6
    27de:	0018      	movs	r0, r3
    27e0:	4b1d      	ldr	r3, [pc, #116]	; (2858 <data_handler+0x740>)
    27e2:	4798      	blx	r3
    27e4:	1e03      	subs	r3, r0, #0
    27e6:	d103      	bne.n	27f0 <data_handler+0x6d8>
	{
		release_sb_btn(SB_PIN_BTN10);
    27e8:	2015      	movs	r0, #21
    27ea:	4b26      	ldr	r3, [pc, #152]	; (2884 <data_handler+0x76c>)
    27ec:	4798      	blx	r3
    27ee:	e35a      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,PARTY_ON,5) == 0)
    27f0:	4939      	ldr	r1, [pc, #228]	; (28d8 <data_handler+0x7c0>)
    27f2:	68fb      	ldr	r3, [r7, #12]
    27f4:	2205      	movs	r2, #5
    27f6:	0018      	movs	r0, r3
    27f8:	4b17      	ldr	r3, [pc, #92]	; (2858 <data_handler+0x740>)
    27fa:	4798      	blx	r3
    27fc:	1e03      	subs	r3, r0, #0
    27fe:	d103      	bne.n	2808 <data_handler+0x6f0>
	{
		party = true;
    2800:	4b36      	ldr	r3, [pc, #216]	; (28dc <data_handler+0x7c4>)
    2802:	2201      	movs	r2, #1
    2804:	701a      	strb	r2, [r3, #0]
    2806:	e34e      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,PARTY_OFF,5) == 0)
    2808:	4935      	ldr	r1, [pc, #212]	; (28e0 <data_handler+0x7c8>)
    280a:	68fb      	ldr	r3, [r7, #12]
    280c:	2205      	movs	r2, #5
    280e:	0018      	movs	r0, r3
    2810:	4b11      	ldr	r3, [pc, #68]	; (2858 <data_handler+0x740>)
    2812:	4798      	blx	r3
    2814:	1e03      	subs	r3, r0, #0
    2816:	d105      	bne.n	2824 <data_handler+0x70c>
	{
		party = false;
    2818:	4b30      	ldr	r3, [pc, #192]	; (28dc <data_handler+0x7c4>)
    281a:	2200      	movs	r2, #0
    281c:	701a      	strb	r2, [r3, #0]
		reset_all_lights();
    281e:	4b31      	ldr	r3, [pc, #196]	; (28e4 <data_handler+0x7cc>)
    2820:	4798      	blx	r3
    2822:	e340      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
    2824:	4930      	ldr	r1, [pc, #192]	; (28e8 <data_handler+0x7d0>)
    2826:	68fb      	ldr	r3, [r7, #12]
    2828:	2205      	movs	r2, #5
    282a:	0018      	movs	r0, r3
    282c:	4b0a      	ldr	r3, [pc, #40]	; (2858 <data_handler+0x740>)
    282e:	4798      	blx	r3
    2830:	1e03      	subs	r3, r0, #0
    2832:	d103      	bne.n	283c <data_handler+0x724>
	{
		water = true;
    2834:	4b2d      	ldr	r3, [pc, #180]	; (28ec <data_handler+0x7d4>)
    2836:	2201      	movs	r2, #1
    2838:	701a      	strb	r2, [r3, #0]
    283a:	e334      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
    283c:	492a      	ldr	r1, [pc, #168]	; (28e8 <data_handler+0x7d0>)
    283e:	68fb      	ldr	r3, [r7, #12]
    2840:	2205      	movs	r2, #5
    2842:	0018      	movs	r0, r3
    2844:	4b04      	ldr	r3, [pc, #16]	; (2858 <data_handler+0x740>)
    2846:	4798      	blx	r3
    2848:	1e03      	subs	r3, r0, #0
    284a:	d151      	bne.n	28f0 <data_handler+0x7d8>
	{
		water = false;
    284c:	4b27      	ldr	r3, [pc, #156]	; (28ec <data_handler+0x7d4>)
    284e:	2200      	movs	r2, #0
    2850:	701a      	strb	r2, [r3, #0]
    2852:	e328      	b.n	2ea6 <data_handler+0xd8e>
    2854:	00009670 	.word	0x00009670
    2858:	00008333 	.word	0x00008333
    285c:	200001ae 	.word	0x200001ae
    2860:	00009678 	.word	0x00009678
    2864:	20000245 	.word	0x20000245
    2868:	00009680 	.word	0x00009680
    286c:	00009688 	.word	0x00009688
    2870:	20000266 	.word	0x20000266
    2874:	00009690 	.word	0x00009690
    2878:	00009698 	.word	0x00009698
    287c:	00004cc9 	.word	0x00004cc9
    2880:	000096a0 	.word	0x000096a0
    2884:	00004d59 	.word	0x00004d59
    2888:	000096a8 	.word	0x000096a8
    288c:	000096b0 	.word	0x000096b0
    2890:	000096b8 	.word	0x000096b8
    2894:	000096c0 	.word	0x000096c0
    2898:	000096c8 	.word	0x000096c8
    289c:	000096d0 	.word	0x000096d0
    28a0:	000096d8 	.word	0x000096d8
    28a4:	000096e0 	.word	0x000096e0
    28a8:	000096e8 	.word	0x000096e8
    28ac:	000096f0 	.word	0x000096f0
    28b0:	000096f8 	.word	0x000096f8
    28b4:	00009700 	.word	0x00009700
    28b8:	00009708 	.word	0x00009708
    28bc:	00009710 	.word	0x00009710
    28c0:	00009718 	.word	0x00009718
    28c4:	00009720 	.word	0x00009720
    28c8:	00009728 	.word	0x00009728
    28cc:	00009730 	.word	0x00009730
    28d0:	00009738 	.word	0x00009738
    28d4:	00009740 	.word	0x00009740
    28d8:	00009748 	.word	0x00009748
    28dc:	20000259 	.word	0x20000259
    28e0:	00009750 	.word	0x00009750
    28e4:	00003865 	.word	0x00003865
    28e8:	00009758 	.word	0x00009758
    28ec:	20000199 	.word	0x20000199
	}
	else if(strncmp(buffer,START_ON,5) == 0)
    28f0:	49c2      	ldr	r1, [pc, #776]	; (2bfc <data_handler+0xae4>)
    28f2:	68fb      	ldr	r3, [r7, #12]
    28f4:	2205      	movs	r2, #5
    28f6:	0018      	movs	r0, r3
    28f8:	4bc1      	ldr	r3, [pc, #772]	; (2c00 <data_handler+0xae8>)
    28fa:	4798      	blx	r3
    28fc:	1e03      	subs	r3, r0, #0
    28fe:	d103      	bne.n	2908 <data_handler+0x7f0>
	{
		start = true;
    2900:	4bc0      	ldr	r3, [pc, #768]	; (2c04 <data_handler+0xaec>)
    2902:	2201      	movs	r2, #1
    2904:	701a      	strb	r2, [r3, #0]
    2906:	e2ce      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,START_OFF,5) == 0)
    2908:	49bf      	ldr	r1, [pc, #764]	; (2c08 <data_handler+0xaf0>)
    290a:	68fb      	ldr	r3, [r7, #12]
    290c:	2205      	movs	r2, #5
    290e:	0018      	movs	r0, r3
    2910:	4bbb      	ldr	r3, [pc, #748]	; (2c00 <data_handler+0xae8>)
    2912:	4798      	blx	r3
    2914:	1e03      	subs	r3, r0, #0
    2916:	d103      	bne.n	2920 <data_handler+0x808>
	{
		start = false;
    2918:	4bba      	ldr	r3, [pc, #744]	; (2c04 <data_handler+0xaec>)
    291a:	2200      	movs	r2, #0
    291c:	701a      	strb	r2, [r3, #0]
    291e:	e2c2      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,LED_BAR_ON,5) == 0)
    2920:	49ba      	ldr	r1, [pc, #744]	; (2c0c <data_handler+0xaf4>)
    2922:	68fb      	ldr	r3, [r7, #12]
    2924:	2205      	movs	r2, #5
    2926:	0018      	movs	r0, r3
    2928:	4bb5      	ldr	r3, [pc, #724]	; (2c00 <data_handler+0xae8>)
    292a:	4798      	blx	r3
    292c:	1e03      	subs	r3, r0, #0
    292e:	d115      	bne.n	295c <data_handler+0x844>
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,true);
    2930:	2301      	movs	r3, #1
    2932:	2202      	movs	r2, #2
    2934:	2101      	movs	r1, #1
    2936:	2000      	movs	r0, #0
    2938:	4cb5      	ldr	r4, [pc, #724]	; (2c10 <data_handler+0xaf8>)
    293a:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,true);
    293c:	2301      	movs	r3, #1
    293e:	2202      	movs	r2, #2
    2940:	2102      	movs	r1, #2
    2942:	2000      	movs	r0, #0
    2944:	4cb2      	ldr	r4, [pc, #712]	; (2c10 <data_handler+0xaf8>)
    2946:	47a0      	blx	r4
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,true);
    2948:	2301      	movs	r3, #1
    294a:	2204      	movs	r2, #4
    294c:	2101      	movs	r1, #1
    294e:	2000      	movs	r0, #0
    2950:	4caf      	ldr	r4, [pc, #700]	; (2c10 <data_handler+0xaf8>)
    2952:	47a0      	blx	r4
		led_bar = true;
    2954:	4baf      	ldr	r3, [pc, #700]	; (2c14 <data_handler+0xafc>)
    2956:	2201      	movs	r2, #1
    2958:	701a      	strb	r2, [r3, #0]
    295a:	e2a4      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,LED_BAR_OFF,5) == 0)
    295c:	49ae      	ldr	r1, [pc, #696]	; (2c18 <data_handler+0xb00>)
    295e:	68fb      	ldr	r3, [r7, #12]
    2960:	2205      	movs	r2, #5
    2962:	0018      	movs	r0, r3
    2964:	4ba6      	ldr	r3, [pc, #664]	; (2c00 <data_handler+0xae8>)
    2966:	4798      	blx	r3
    2968:	1e03      	subs	r3, r0, #0
    296a:	d115      	bne.n	2998 <data_handler+0x880>
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,false);
    296c:	2300      	movs	r3, #0
    296e:	2202      	movs	r2, #2
    2970:	2101      	movs	r1, #1
    2972:	2000      	movs	r0, #0
    2974:	4ca6      	ldr	r4, [pc, #664]	; (2c10 <data_handler+0xaf8>)
    2976:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,false);
    2978:	2300      	movs	r3, #0
    297a:	2202      	movs	r2, #2
    297c:	2102      	movs	r1, #2
    297e:	2000      	movs	r0, #0
    2980:	4ca3      	ldr	r4, [pc, #652]	; (2c10 <data_handler+0xaf8>)
    2982:	47a0      	blx	r4
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,false);
    2984:	2300      	movs	r3, #0
    2986:	2204      	movs	r2, #4
    2988:	2101      	movs	r1, #1
    298a:	2000      	movs	r0, #0
    298c:	4ca0      	ldr	r4, [pc, #640]	; (2c10 <data_handler+0xaf8>)
    298e:	47a0      	blx	r4
		led_bar = false;
    2990:	4ba0      	ldr	r3, [pc, #640]	; (2c14 <data_handler+0xafc>)
    2992:	2200      	movs	r2, #0
    2994:	701a      	strb	r2, [r3, #0]
    2996:	e286      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,HDL_ON,5) == 0)
    2998:	49a0      	ldr	r1, [pc, #640]	; (2c1c <data_handler+0xb04>)
    299a:	68fb      	ldr	r3, [r7, #12]
    299c:	2205      	movs	r2, #5
    299e:	0018      	movs	r0, r3
    29a0:	4b97      	ldr	r3, [pc, #604]	; (2c00 <data_handler+0xae8>)
    29a2:	4798      	blx	r3
    29a4:	1e03      	subs	r3, r0, #0
    29a6:	d124      	bne.n	29f2 <data_handler+0x8da>
	{
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,true);
    29a8:	2301      	movs	r3, #1
    29aa:	2201      	movs	r2, #1
    29ac:	2102      	movs	r1, #2
    29ae:	2000      	movs	r0, #0
    29b0:	4c97      	ldr	r4, [pc, #604]	; (2c10 <data_handler+0xaf8>)
    29b2:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,true);
    29b4:	2301      	movs	r3, #1
    29b6:	2201      	movs	r2, #1
    29b8:	2101      	movs	r1, #1
    29ba:	2000      	movs	r0, #0
    29bc:	4c94      	ldr	r4, [pc, #592]	; (2c10 <data_handler+0xaf8>)
    29be:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    29c0:	2301      	movs	r3, #1
    29c2:	2200      	movs	r2, #0
    29c4:	2101      	movs	r1, #1
    29c6:	2000      	movs	r0, #0
    29c8:	4c91      	ldr	r4, [pc, #580]	; (2c10 <data_handler+0xaf8>)
    29ca:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    29cc:	2301      	movs	r3, #1
    29ce:	2200      	movs	r2, #0
    29d0:	2102      	movs	r1, #2
    29d2:	2000      	movs	r0, #0
    29d4:	4c8e      	ldr	r4, [pc, #568]	; (2c10 <data_handler+0xaf8>)
    29d6:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    29d8:	2301      	movs	r3, #1
    29da:	2200      	movs	r2, #0
    29dc:	2103      	movs	r1, #3
    29de:	2000      	movs	r0, #0
    29e0:	4c8b      	ldr	r4, [pc, #556]	; (2c10 <data_handler+0xaf8>)
    29e2:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    29e4:	2301      	movs	r3, #1
    29e6:	2200      	movs	r2, #0
    29e8:	2104      	movs	r1, #4
    29ea:	2000      	movs	r0, #0
    29ec:	4c88      	ldr	r4, [pc, #544]	; (2c10 <data_handler+0xaf8>)
    29ee:	47a0      	blx	r4
    29f0:	e259      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,HDL_OFF,5) == 0)
    29f2:	498b      	ldr	r1, [pc, #556]	; (2c20 <data_handler+0xb08>)
    29f4:	68fb      	ldr	r3, [r7, #12]
    29f6:	2205      	movs	r2, #5
    29f8:	0018      	movs	r0, r3
    29fa:	4b81      	ldr	r3, [pc, #516]	; (2c00 <data_handler+0xae8>)
    29fc:	4798      	blx	r3
    29fe:	1e03      	subs	r3, r0, #0
    2a00:	d124      	bne.n	2a4c <data_handler+0x934>
	{
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,false);
    2a02:	2300      	movs	r3, #0
    2a04:	2201      	movs	r2, #1
    2a06:	2102      	movs	r1, #2
    2a08:	2000      	movs	r0, #0
    2a0a:	4c81      	ldr	r4, [pc, #516]	; (2c10 <data_handler+0xaf8>)
    2a0c:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,false);
    2a0e:	2300      	movs	r3, #0
    2a10:	2201      	movs	r2, #1
    2a12:	2101      	movs	r1, #1
    2a14:	2000      	movs	r0, #0
    2a16:	4c7e      	ldr	r4, [pc, #504]	; (2c10 <data_handler+0xaf8>)
    2a18:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    2a1a:	2300      	movs	r3, #0
    2a1c:	2200      	movs	r2, #0
    2a1e:	2101      	movs	r1, #1
    2a20:	2000      	movs	r0, #0
    2a22:	4c7b      	ldr	r4, [pc, #492]	; (2c10 <data_handler+0xaf8>)
    2a24:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    2a26:	2300      	movs	r3, #0
    2a28:	2200      	movs	r2, #0
    2a2a:	2102      	movs	r1, #2
    2a2c:	2000      	movs	r0, #0
    2a2e:	4c78      	ldr	r4, [pc, #480]	; (2c10 <data_handler+0xaf8>)
    2a30:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    2a32:	2300      	movs	r3, #0
    2a34:	2200      	movs	r2, #0
    2a36:	2103      	movs	r1, #3
    2a38:	2000      	movs	r0, #0
    2a3a:	4c75      	ldr	r4, [pc, #468]	; (2c10 <data_handler+0xaf8>)
    2a3c:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    2a3e:	2300      	movs	r3, #0
    2a40:	2200      	movs	r2, #0
    2a42:	2104      	movs	r1, #4
    2a44:	2000      	movs	r0, #0
    2a46:	4c72      	ldr	r4, [pc, #456]	; (2c10 <data_handler+0xaf8>)
    2a48:	47a0      	blx	r4
    2a4a:	e22c      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,BRIAN_ON,7) == 0)
    2a4c:	4975      	ldr	r1, [pc, #468]	; (2c24 <data_handler+0xb0c>)
    2a4e:	68fb      	ldr	r3, [r7, #12]
    2a50:	2207      	movs	r2, #7
    2a52:	0018      	movs	r0, r3
    2a54:	4b6a      	ldr	r3, [pc, #424]	; (2c00 <data_handler+0xae8>)
    2a56:	4798      	blx	r3
    2a58:	1e03      	subs	r3, r0, #0
    2a5a:	d124      	bne.n	2aa6 <data_handler+0x98e>
	{
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,true);
    2a5c:	2301      	movs	r3, #1
    2a5e:	2203      	movs	r2, #3
    2a60:	2102      	movs	r1, #2
    2a62:	2000      	movs	r0, #0
    2a64:	4c6a      	ldr	r4, [pc, #424]	; (2c10 <data_handler+0xaf8>)
    2a66:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,true);
    2a68:	2301      	movs	r3, #1
    2a6a:	2203      	movs	r2, #3
    2a6c:	2101      	movs	r1, #1
    2a6e:	2000      	movs	r0, #0
    2a70:	4c67      	ldr	r4, [pc, #412]	; (2c10 <data_handler+0xaf8>)
    2a72:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    2a74:	2301      	movs	r3, #1
    2a76:	2200      	movs	r2, #0
    2a78:	2101      	movs	r1, #1
    2a7a:	2000      	movs	r0, #0
    2a7c:	4c64      	ldr	r4, [pc, #400]	; (2c10 <data_handler+0xaf8>)
    2a7e:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    2a80:	2301      	movs	r3, #1
    2a82:	2200      	movs	r2, #0
    2a84:	2102      	movs	r1, #2
    2a86:	2000      	movs	r0, #0
    2a88:	4c61      	ldr	r4, [pc, #388]	; (2c10 <data_handler+0xaf8>)
    2a8a:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    2a8c:	2301      	movs	r3, #1
    2a8e:	2200      	movs	r2, #0
    2a90:	2103      	movs	r1, #3
    2a92:	2000      	movs	r0, #0
    2a94:	4c5e      	ldr	r4, [pc, #376]	; (2c10 <data_handler+0xaf8>)
    2a96:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    2a98:	2301      	movs	r3, #1
    2a9a:	2200      	movs	r2, #0
    2a9c:	2104      	movs	r1, #4
    2a9e:	2000      	movs	r0, #0
    2aa0:	4c5b      	ldr	r4, [pc, #364]	; (2c10 <data_handler+0xaf8>)
    2aa2:	47a0      	blx	r4
    2aa4:	e1ff      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,BRIAN_OFF,7) == 0)
    2aa6:	4960      	ldr	r1, [pc, #384]	; (2c28 <data_handler+0xb10>)
    2aa8:	68fb      	ldr	r3, [r7, #12]
    2aaa:	2207      	movs	r2, #7
    2aac:	0018      	movs	r0, r3
    2aae:	4b54      	ldr	r3, [pc, #336]	; (2c00 <data_handler+0xae8>)
    2ab0:	4798      	blx	r3
    2ab2:	1e03      	subs	r3, r0, #0
    2ab4:	d124      	bne.n	2b00 <data_handler+0x9e8>
	{
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,false);
    2ab6:	2300      	movs	r3, #0
    2ab8:	2203      	movs	r2, #3
    2aba:	2102      	movs	r1, #2
    2abc:	2000      	movs	r0, #0
    2abe:	4c54      	ldr	r4, [pc, #336]	; (2c10 <data_handler+0xaf8>)
    2ac0:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,false);
    2ac2:	2300      	movs	r3, #0
    2ac4:	2203      	movs	r2, #3
    2ac6:	2101      	movs	r1, #1
    2ac8:	2000      	movs	r0, #0
    2aca:	4c51      	ldr	r4, [pc, #324]	; (2c10 <data_handler+0xaf8>)
    2acc:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    2ace:	2300      	movs	r3, #0
    2ad0:	2200      	movs	r2, #0
    2ad2:	2101      	movs	r1, #1
    2ad4:	2000      	movs	r0, #0
    2ad6:	4c4e      	ldr	r4, [pc, #312]	; (2c10 <data_handler+0xaf8>)
    2ad8:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    2ada:	2300      	movs	r3, #0
    2adc:	2200      	movs	r2, #0
    2ade:	2102      	movs	r1, #2
    2ae0:	2000      	movs	r0, #0
    2ae2:	4c4b      	ldr	r4, [pc, #300]	; (2c10 <data_handler+0xaf8>)
    2ae4:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    2ae6:	2300      	movs	r3, #0
    2ae8:	2200      	movs	r2, #0
    2aea:	2103      	movs	r1, #3
    2aec:	2000      	movs	r0, #0
    2aee:	4c48      	ldr	r4, [pc, #288]	; (2c10 <data_handler+0xaf8>)
    2af0:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    2af2:	2300      	movs	r3, #0
    2af4:	2200      	movs	r2, #0
    2af6:	2104      	movs	r1, #4
    2af8:	2000      	movs	r0, #0
    2afa:	4c45      	ldr	r4, [pc, #276]	; (2c10 <data_handler+0xaf8>)
    2afc:	47a0      	blx	r4
    2afe:	e1d2      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,FLASHY1_ON,7) == 0)
    2b00:	494a      	ldr	r1, [pc, #296]	; (2c2c <data_handler+0xb14>)
    2b02:	68fb      	ldr	r3, [r7, #12]
    2b04:	2207      	movs	r2, #7
    2b06:	0018      	movs	r0, r3
    2b08:	4b3d      	ldr	r3, [pc, #244]	; (2c00 <data_handler+0xae8>)
    2b0a:	4798      	blx	r3
    2b0c:	1e03      	subs	r3, r0, #0
    2b0e:	d103      	bne.n	2b18 <data_handler+0xa00>
	{
		flashy1 = true;
    2b10:	4b47      	ldr	r3, [pc, #284]	; (2c30 <data_handler+0xb18>)
    2b12:	2201      	movs	r2, #1
    2b14:	701a      	strb	r2, [r3, #0]
    2b16:	e1c6      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,FLASHY1_OFF,7) == 0)
    2b18:	4946      	ldr	r1, [pc, #280]	; (2c34 <data_handler+0xb1c>)
    2b1a:	68fb      	ldr	r3, [r7, #12]
    2b1c:	2207      	movs	r2, #7
    2b1e:	0018      	movs	r0, r3
    2b20:	4b37      	ldr	r3, [pc, #220]	; (2c00 <data_handler+0xae8>)
    2b22:	4798      	blx	r3
    2b24:	1e03      	subs	r3, r0, #0
    2b26:	d105      	bne.n	2b34 <data_handler+0xa1c>
	{
		flashy1 = false;
    2b28:	4b41      	ldr	r3, [pc, #260]	; (2c30 <data_handler+0xb18>)
    2b2a:	2200      	movs	r2, #0
    2b2c:	701a      	strb	r2, [r3, #0]
		reset_all_lights();
    2b2e:	4b42      	ldr	r3, [pc, #264]	; (2c38 <data_handler+0xb20>)
    2b30:	4798      	blx	r3
    2b32:	e1b8      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,FLASHY2_ON,7) == 0)
    2b34:	4941      	ldr	r1, [pc, #260]	; (2c3c <data_handler+0xb24>)
    2b36:	68fb      	ldr	r3, [r7, #12]
    2b38:	2207      	movs	r2, #7
    2b3a:	0018      	movs	r0, r3
    2b3c:	4b30      	ldr	r3, [pc, #192]	; (2c00 <data_handler+0xae8>)
    2b3e:	4798      	blx	r3
    2b40:	1e03      	subs	r3, r0, #0
    2b42:	d103      	bne.n	2b4c <data_handler+0xa34>
	{
		flashy2 = true;
    2b44:	4b3e      	ldr	r3, [pc, #248]	; (2c40 <data_handler+0xb28>)
    2b46:	2201      	movs	r2, #1
    2b48:	701a      	strb	r2, [r3, #0]
    2b4a:	e1ac      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,FLASHY2_OFF,7) == 0)
    2b4c:	493d      	ldr	r1, [pc, #244]	; (2c44 <data_handler+0xb2c>)
    2b4e:	68fb      	ldr	r3, [r7, #12]
    2b50:	2207      	movs	r2, #7
    2b52:	0018      	movs	r0, r3
    2b54:	4b2a      	ldr	r3, [pc, #168]	; (2c00 <data_handler+0xae8>)
    2b56:	4798      	blx	r3
    2b58:	1e03      	subs	r3, r0, #0
    2b5a:	d105      	bne.n	2b68 <data_handler+0xa50>
	{
		reset_all_lights();
    2b5c:	4b36      	ldr	r3, [pc, #216]	; (2c38 <data_handler+0xb20>)
    2b5e:	4798      	blx	r3
		flashy2 = false;
    2b60:	4b37      	ldr	r3, [pc, #220]	; (2c40 <data_handler+0xb28>)
    2b62:	2200      	movs	r2, #0
    2b64:	701a      	strb	r2, [r3, #0]
    2b66:	e19e      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,FLASHYFADE_ON,8) == 0)
    2b68:	4937      	ldr	r1, [pc, #220]	; (2c48 <data_handler+0xb30>)
    2b6a:	68fb      	ldr	r3, [r7, #12]
    2b6c:	2208      	movs	r2, #8
    2b6e:	0018      	movs	r0, r3
    2b70:	4b23      	ldr	r3, [pc, #140]	; (2c00 <data_handler+0xae8>)
    2b72:	4798      	blx	r3
    2b74:	1e03      	subs	r3, r0, #0
    2b76:	d103      	bne.n	2b80 <data_handler+0xa68>
	{
		flashyfade = true;
    2b78:	4b34      	ldr	r3, [pc, #208]	; (2c4c <data_handler+0xb34>)
    2b7a:	2201      	movs	r2, #1
    2b7c:	701a      	strb	r2, [r3, #0]
    2b7e:	e192      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if(strncmp(buffer,FLASHYFADE_OFF,8) == 0)
    2b80:	4933      	ldr	r1, [pc, #204]	; (2c50 <data_handler+0xb38>)
    2b82:	68fb      	ldr	r3, [r7, #12]
    2b84:	2208      	movs	r2, #8
    2b86:	0018      	movs	r0, r3
    2b88:	4b1d      	ldr	r3, [pc, #116]	; (2c00 <data_handler+0xae8>)
    2b8a:	4798      	blx	r3
    2b8c:	1e03      	subs	r3, r0, #0
    2b8e:	d105      	bne.n	2b9c <data_handler+0xa84>
	{
		reset_all_lights();
    2b90:	4b29      	ldr	r3, [pc, #164]	; (2c38 <data_handler+0xb20>)
    2b92:	4798      	blx	r3
		flashyfade = false;
    2b94:	4b2d      	ldr	r3, [pc, #180]	; (2c4c <data_handler+0xb34>)
    2b96:	2200      	movs	r2, #0
    2b98:	701a      	strb	r2, [r3, #0]
    2b9a:	e184      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if (strncmp(buffer,MASTER_RESET,10) == 0)
    2b9c:	492d      	ldr	r1, [pc, #180]	; (2c54 <data_handler+0xb3c>)
    2b9e:	68fb      	ldr	r3, [r7, #12]
    2ba0:	220a      	movs	r2, #10
    2ba2:	0018      	movs	r0, r3
    2ba4:	4b16      	ldr	r3, [pc, #88]	; (2c00 <data_handler+0xae8>)
    2ba6:	4798      	blx	r3
    2ba8:	1e03      	subs	r3, r0, #0
    2baa:	d167      	bne.n	2c7c <data_handler+0xb64>
	{
		ble_uart_write("RESET ACK\n");
    2bac:	4b2a      	ldr	r3, [pc, #168]	; (2c58 <data_handler+0xb40>)
    2bae:	0018      	movs	r0, r3
    2bb0:	4b2a      	ldr	r3, [pc, #168]	; (2c5c <data_handler+0xb44>)
    2bb2:	4798      	blx	r3
		delay_ms(250);
    2bb4:	2000      	movs	r0, #0
    2bb6:	4b2a      	ldr	r3, [pc, #168]	; (2c60 <data_handler+0xb48>)
    2bb8:	4798      	blx	r3
    2bba:	0003      	movs	r3, r0
    2bbc:	603b      	str	r3, [r7, #0]
    2bbe:	2300      	movs	r3, #0
    2bc0:	607b      	str	r3, [r7, #4]
    2bc2:	4c28      	ldr	r4, [pc, #160]	; (2c64 <data_handler+0xb4c>)
    2bc4:	22fa      	movs	r2, #250	; 0xfa
    2bc6:	2300      	movs	r3, #0
    2bc8:	6838      	ldr	r0, [r7, #0]
    2bca:	6879      	ldr	r1, [r7, #4]
    2bcc:	47a0      	blx	r4
    2bce:	0003      	movs	r3, r0
    2bd0:	000c      	movs	r4, r1
    2bd2:	0019      	movs	r1, r3
    2bd4:	0022      	movs	r2, r4
    2bd6:	4b24      	ldr	r3, [pc, #144]	; (2c68 <data_handler+0xb50>)
    2bd8:	2400      	movs	r4, #0
    2bda:	18c9      	adds	r1, r1, r3
    2bdc:	4162      	adcs	r2, r4
    2bde:	0008      	movs	r0, r1
    2be0:	0011      	movs	r1, r2
    2be2:	4c22      	ldr	r4, [pc, #136]	; (2c6c <data_handler+0xb54>)
    2be4:	4a22      	ldr	r2, [pc, #136]	; (2c70 <data_handler+0xb58>)
    2be6:	2300      	movs	r3, #0
    2be8:	47a0      	blx	r4
    2bea:	0003      	movs	r3, r0
    2bec:	000c      	movs	r4, r1
    2bee:	0018      	movs	r0, r3
    2bf0:	4b20      	ldr	r3, [pc, #128]	; (2c74 <data_handler+0xb5c>)
    2bf2:	4798      	blx	r3
		wdt_init();
    2bf4:	4b20      	ldr	r3, [pc, #128]	; (2c78 <data_handler+0xb60>)
    2bf6:	4798      	blx	r3
		while (1)
		{
			//
		}
    2bf8:	e7fe      	b.n	2bf8 <data_handler+0xae0>
    2bfa:	46c0      	nop			; (mov r8, r8)
    2bfc:	00009760 	.word	0x00009760
    2c00:	00008333 	.word	0x00008333
    2c04:	20000265 	.word	0x20000265
    2c08:	00009768 	.word	0x00009768
    2c0c:	00009770 	.word	0x00009770
    2c10:	00003ad9 	.word	0x00003ad9
    2c14:	20000244 	.word	0x20000244
    2c18:	00009778 	.word	0x00009778
    2c1c:	00009780 	.word	0x00009780
    2c20:	00009788 	.word	0x00009788
    2c24:	00009790 	.word	0x00009790
    2c28:	00009798 	.word	0x00009798
    2c2c:	000097a0 	.word	0x000097a0
    2c30:	200001b3 	.word	0x200001b3
    2c34:	000097a8 	.word	0x000097a8
    2c38:	00003865 	.word	0x00003865
    2c3c:	000097b0 	.word	0x000097b0
    2c40:	20000247 	.word	0x20000247
    2c44:	000097b8 	.word	0x000097b8
    2c48:	000097c0 	.word	0x000097c0
    2c4c:	20000263 	.word	0x20000263
    2c50:	000097cc 	.word	0x000097cc
    2c54:	000097d8 	.word	0x000097d8
    2c58:	000097e4 	.word	0x000097e4
    2c5c:	0000202d 	.word	0x0000202d
    2c60:	00005909 	.word	0x00005909
    2c64:	00006705 	.word	0x00006705
    2c68:	00001b57 	.word	0x00001b57
    2c6c:	000066c5 	.word	0x000066c5
    2c70:	00001b58 	.word	0x00001b58
    2c74:	20000001 	.word	0x20000001
    2c78:	00000149 	.word	0x00000149
	}
	else if (strncmp(buffer,MINOR_RESET,sizeof(MINOR_RESET)-1) == 0)
    2c7c:	498e      	ldr	r1, [pc, #568]	; (2eb8 <data_handler+0xda0>)
    2c7e:	68fb      	ldr	r3, [r7, #12]
    2c80:	2209      	movs	r2, #9
    2c82:	0018      	movs	r0, r3
    2c84:	4b8d      	ldr	r3, [pc, #564]	; (2ebc <data_handler+0xda4>)
    2c86:	4798      	blx	r3
    2c88:	1e03      	subs	r3, r0, #0
    2c8a:	d12f      	bne.n	2cec <data_handler+0xbd4>
	{
		ble_uart_write("MINOR RESET ACK\n");
    2c8c:	4b8c      	ldr	r3, [pc, #560]	; (2ec0 <data_handler+0xda8>)
    2c8e:	0018      	movs	r0, r3
    2c90:	4b8c      	ldr	r3, [pc, #560]	; (2ec4 <data_handler+0xdac>)
    2c92:	4798      	blx	r3
		delay_ms(250);
    2c94:	2000      	movs	r0, #0
    2c96:	4b8c      	ldr	r3, [pc, #560]	; (2ec8 <data_handler+0xdb0>)
    2c98:	4798      	blx	r3
    2c9a:	0003      	movs	r3, r0
    2c9c:	001d      	movs	r5, r3
    2c9e:	2300      	movs	r3, #0
    2ca0:	001e      	movs	r6, r3
    2ca2:	4c8a      	ldr	r4, [pc, #552]	; (2ecc <data_handler+0xdb4>)
    2ca4:	22fa      	movs	r2, #250	; 0xfa
    2ca6:	2300      	movs	r3, #0
    2ca8:	0028      	movs	r0, r5
    2caa:	0031      	movs	r1, r6
    2cac:	47a0      	blx	r4
    2cae:	0003      	movs	r3, r0
    2cb0:	000c      	movs	r4, r1
    2cb2:	0019      	movs	r1, r3
    2cb4:	0022      	movs	r2, r4
    2cb6:	4b86      	ldr	r3, [pc, #536]	; (2ed0 <data_handler+0xdb8>)
    2cb8:	2400      	movs	r4, #0
    2cba:	18c9      	adds	r1, r1, r3
    2cbc:	4162      	adcs	r2, r4
    2cbe:	0008      	movs	r0, r1
    2cc0:	0011      	movs	r1, r2
    2cc2:	4c84      	ldr	r4, [pc, #528]	; (2ed4 <data_handler+0xdbc>)
    2cc4:	4a84      	ldr	r2, [pc, #528]	; (2ed8 <data_handler+0xdc0>)
    2cc6:	2300      	movs	r3, #0
    2cc8:	47a0      	blx	r4
    2cca:	0003      	movs	r3, r0
    2ccc:	000c      	movs	r4, r1
    2cce:	0018      	movs	r0, r3
    2cd0:	4b82      	ldr	r3, [pc, #520]	; (2edc <data_handler+0xdc4>)
    2cd2:	4798      	blx	r3
		sounds_reset();
    2cd4:	4b82      	ldr	r3, [pc, #520]	; (2ee0 <data_handler+0xdc8>)
    2cd6:	4798      	blx	r3
		init_all_ports();
    2cd8:	4b82      	ldr	r3, [pc, #520]	; (2ee4 <data_handler+0xdcc>)
    2cda:	4798      	blx	r3
		party = false;
    2cdc:	4b82      	ldr	r3, [pc, #520]	; (2ee8 <data_handler+0xdd0>)
    2cde:	2200      	movs	r2, #0
    2ce0:	701a      	strb	r2, [r3, #0]
		ble_uart_write("MINOR RESET DONE\n");
    2ce2:	4b82      	ldr	r3, [pc, #520]	; (2eec <data_handler+0xdd4>)
    2ce4:	0018      	movs	r0, r3
    2ce6:	4b77      	ldr	r3, [pc, #476]	; (2ec4 <data_handler+0xdac>)
    2ce8:	4798      	blx	r3
    2cea:	e0dc      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if (strncmp(buffer,PARTY_TRESH_0,sizeof(PARTY_TRESH_0)-1)  == 0)
    2cec:	4980      	ldr	r1, [pc, #512]	; (2ef0 <data_handler+0xdd8>)
    2cee:	68fb      	ldr	r3, [r7, #12]
    2cf0:	2208      	movs	r2, #8
    2cf2:	0018      	movs	r0, r3
    2cf4:	4b71      	ldr	r3, [pc, #452]	; (2ebc <data_handler+0xda4>)
    2cf6:	4798      	blx	r3
    2cf8:	1e03      	subs	r3, r0, #0
    2cfa:	d10f      	bne.n	2d1c <data_handler+0xc04>
	{
		int temp = sizeof(PARTY_TRESH_0);//party_treshold;
    2cfc:	2309      	movs	r3, #9
    2cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
		sscanf(buffer,"PRTTRSH0 %d",&temp);
    2d00:	2344      	movs	r3, #68	; 0x44
    2d02:	2208      	movs	r2, #8
    2d04:	18ba      	adds	r2, r7, r2
    2d06:	18d2      	adds	r2, r2, r3
    2d08:	497a      	ldr	r1, [pc, #488]	; (2ef4 <data_handler+0xddc>)
    2d0a:	68fb      	ldr	r3, [r7, #12]
    2d0c:	0018      	movs	r0, r3
    2d0e:	4b7a      	ldr	r3, [pc, #488]	; (2ef8 <data_handler+0xde0>)
    2d10:	4798      	blx	r3
		party_thresholds[0] = (uint16_t)temp;
    2d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2d14:	b29a      	uxth	r2, r3
    2d16:	4b79      	ldr	r3, [pc, #484]	; (2efc <data_handler+0xde4>)
    2d18:	801a      	strh	r2, [r3, #0]
    2d1a:	e0c4      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if (strncmp(buffer,PARTY_TRESH_1,sizeof(PARTY_TRESH_1)-1) == 0)
    2d1c:	4978      	ldr	r1, [pc, #480]	; (2f00 <data_handler+0xde8>)
    2d1e:	68fb      	ldr	r3, [r7, #12]
    2d20:	2208      	movs	r2, #8
    2d22:	0018      	movs	r0, r3
    2d24:	4b65      	ldr	r3, [pc, #404]	; (2ebc <data_handler+0xda4>)
    2d26:	4798      	blx	r3
    2d28:	1e03      	subs	r3, r0, #0
    2d2a:	d10f      	bne.n	2d4c <data_handler+0xc34>
	{
		int temp = party_treshold;
    2d2c:	4b75      	ldr	r3, [pc, #468]	; (2f04 <data_handler+0xdec>)
    2d2e:	64bb      	str	r3, [r7, #72]	; 0x48
		sscanf(buffer,"PRTTRSH1 %d",&temp);
    2d30:	2340      	movs	r3, #64	; 0x40
    2d32:	2208      	movs	r2, #8
    2d34:	18ba      	adds	r2, r7, r2
    2d36:	18d2      	adds	r2, r2, r3
    2d38:	4973      	ldr	r1, [pc, #460]	; (2f08 <data_handler+0xdf0>)
    2d3a:	68fb      	ldr	r3, [r7, #12]
    2d3c:	0018      	movs	r0, r3
    2d3e:	4b6e      	ldr	r3, [pc, #440]	; (2ef8 <data_handler+0xde0>)
    2d40:	4798      	blx	r3
		party_thresholds[1] = (uint16_t)temp;
    2d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2d44:	b29a      	uxth	r2, r3
    2d46:	4b6d      	ldr	r3, [pc, #436]	; (2efc <data_handler+0xde4>)
    2d48:	805a      	strh	r2, [r3, #2]
    2d4a:	e0ac      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if (strncmp(buffer,PARTY_TRESH_2,sizeof(PARTY_TRESH_2)-1) == 0)
    2d4c:	496f      	ldr	r1, [pc, #444]	; (2f0c <data_handler+0xdf4>)
    2d4e:	68fb      	ldr	r3, [r7, #12]
    2d50:	2208      	movs	r2, #8
    2d52:	0018      	movs	r0, r3
    2d54:	4b59      	ldr	r3, [pc, #356]	; (2ebc <data_handler+0xda4>)
    2d56:	4798      	blx	r3
    2d58:	1e03      	subs	r3, r0, #0
    2d5a:	d10f      	bne.n	2d7c <data_handler+0xc64>
	{
		int temp = party_treshold;
    2d5c:	4b69      	ldr	r3, [pc, #420]	; (2f04 <data_handler+0xdec>)
    2d5e:	647b      	str	r3, [r7, #68]	; 0x44
		sscanf(buffer,"PRTTRSH2 %d",&temp);
    2d60:	233c      	movs	r3, #60	; 0x3c
    2d62:	2208      	movs	r2, #8
    2d64:	18ba      	adds	r2, r7, r2
    2d66:	18d2      	adds	r2, r2, r3
    2d68:	4969      	ldr	r1, [pc, #420]	; (2f10 <data_handler+0xdf8>)
    2d6a:	68fb      	ldr	r3, [r7, #12]
    2d6c:	0018      	movs	r0, r3
    2d6e:	4b62      	ldr	r3, [pc, #392]	; (2ef8 <data_handler+0xde0>)
    2d70:	4798      	blx	r3
		party_thresholds[2] = (uint16_t)temp;
    2d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2d74:	b29a      	uxth	r2, r3
    2d76:	4b61      	ldr	r3, [pc, #388]	; (2efc <data_handler+0xde4>)
    2d78:	809a      	strh	r2, [r3, #4]
    2d7a:	e094      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if (strncmp(buffer,PARTY_TRESH_3,sizeof(PARTY_TRESH_3)-1) == 0)
    2d7c:	4965      	ldr	r1, [pc, #404]	; (2f14 <data_handler+0xdfc>)
    2d7e:	68fb      	ldr	r3, [r7, #12]
    2d80:	2208      	movs	r2, #8
    2d82:	0018      	movs	r0, r3
    2d84:	4b4d      	ldr	r3, [pc, #308]	; (2ebc <data_handler+0xda4>)
    2d86:	4798      	blx	r3
    2d88:	1e03      	subs	r3, r0, #0
    2d8a:	d10f      	bne.n	2dac <data_handler+0xc94>
	{
		int temp = party_treshold;
    2d8c:	4b5d      	ldr	r3, [pc, #372]	; (2f04 <data_handler+0xdec>)
    2d8e:	643b      	str	r3, [r7, #64]	; 0x40
		sscanf(buffer,"PRTTRSH3 %d",&temp);
    2d90:	2338      	movs	r3, #56	; 0x38
    2d92:	2208      	movs	r2, #8
    2d94:	18ba      	adds	r2, r7, r2
    2d96:	18d2      	adds	r2, r2, r3
    2d98:	495f      	ldr	r1, [pc, #380]	; (2f18 <data_handler+0xe00>)
    2d9a:	68fb      	ldr	r3, [r7, #12]
    2d9c:	0018      	movs	r0, r3
    2d9e:	4b56      	ldr	r3, [pc, #344]	; (2ef8 <data_handler+0xde0>)
    2da0:	4798      	blx	r3
		party_thresholds[3] = (uint16_t)temp;
    2da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2da4:	b29a      	uxth	r2, r3
    2da6:	4b55      	ldr	r3, [pc, #340]	; (2efc <data_handler+0xde4>)
    2da8:	80da      	strh	r2, [r3, #6]
    2daa:	e07c      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if (strncmp(buffer,PARTY_TRESH_4,sizeof(PARTY_TRESH_4)-1) == 0)
    2dac:	495b      	ldr	r1, [pc, #364]	; (2f1c <data_handler+0xe04>)
    2dae:	68fb      	ldr	r3, [r7, #12]
    2db0:	2208      	movs	r2, #8
    2db2:	0018      	movs	r0, r3
    2db4:	4b41      	ldr	r3, [pc, #260]	; (2ebc <data_handler+0xda4>)
    2db6:	4798      	blx	r3
    2db8:	1e03      	subs	r3, r0, #0
    2dba:	d10f      	bne.n	2ddc <data_handler+0xcc4>
	{
		int temp = party_treshold;
    2dbc:	4b51      	ldr	r3, [pc, #324]	; (2f04 <data_handler+0xdec>)
    2dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
		sscanf(buffer,"PRTTRSH4 %d",&temp);
    2dc0:	2334      	movs	r3, #52	; 0x34
    2dc2:	2208      	movs	r2, #8
    2dc4:	18ba      	adds	r2, r7, r2
    2dc6:	18d2      	adds	r2, r2, r3
    2dc8:	4955      	ldr	r1, [pc, #340]	; (2f20 <data_handler+0xe08>)
    2dca:	68fb      	ldr	r3, [r7, #12]
    2dcc:	0018      	movs	r0, r3
    2dce:	4b4a      	ldr	r3, [pc, #296]	; (2ef8 <data_handler+0xde0>)
    2dd0:	4798      	blx	r3
		party_thresholds[4] = (uint16_t)temp;
    2dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2dd4:	b29a      	uxth	r2, r3
    2dd6:	4b49      	ldr	r3, [pc, #292]	; (2efc <data_handler+0xde4>)
    2dd8:	811a      	strh	r2, [r3, #8]
    2dda:	e064      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if (strncmp(buffer,PARTY_TRESH_5,sizeof(PARTY_TRESH_5)-1) == 0)
    2ddc:	4951      	ldr	r1, [pc, #324]	; (2f24 <data_handler+0xe0c>)
    2dde:	68fb      	ldr	r3, [r7, #12]
    2de0:	2208      	movs	r2, #8
    2de2:	0018      	movs	r0, r3
    2de4:	4b35      	ldr	r3, [pc, #212]	; (2ebc <data_handler+0xda4>)
    2de6:	4798      	blx	r3
    2de8:	1e03      	subs	r3, r0, #0
    2dea:	d10f      	bne.n	2e0c <data_handler+0xcf4>
	{
		int temp = party_treshold;
    2dec:	4b45      	ldr	r3, [pc, #276]	; (2f04 <data_handler+0xdec>)
    2dee:	63bb      	str	r3, [r7, #56]	; 0x38
		sscanf(buffer,"PRTTRSH5 %d",&temp);
    2df0:	2330      	movs	r3, #48	; 0x30
    2df2:	2208      	movs	r2, #8
    2df4:	18ba      	adds	r2, r7, r2
    2df6:	18d2      	adds	r2, r2, r3
    2df8:	494b      	ldr	r1, [pc, #300]	; (2f28 <data_handler+0xe10>)
    2dfa:	68fb      	ldr	r3, [r7, #12]
    2dfc:	0018      	movs	r0, r3
    2dfe:	4b3e      	ldr	r3, [pc, #248]	; (2ef8 <data_handler+0xde0>)
    2e00:	4798      	blx	r3
		party_thresholds[5] = (uint16_t)temp;
    2e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e04:	b29a      	uxth	r2, r3
    2e06:	4b3d      	ldr	r3, [pc, #244]	; (2efc <data_handler+0xde4>)
    2e08:	815a      	strh	r2, [r3, #10]
    2e0a:	e04c      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if (strncmp(buffer,PARTY_TRESH_6,sizeof(PARTY_TRESH_6)-1) == 0)
    2e0c:	4947      	ldr	r1, [pc, #284]	; (2f2c <data_handler+0xe14>)
    2e0e:	68fb      	ldr	r3, [r7, #12]
    2e10:	2208      	movs	r2, #8
    2e12:	0018      	movs	r0, r3
    2e14:	4b29      	ldr	r3, [pc, #164]	; (2ebc <data_handler+0xda4>)
    2e16:	4798      	blx	r3
    2e18:	1e03      	subs	r3, r0, #0
    2e1a:	d10f      	bne.n	2e3c <data_handler+0xd24>
	{
		int temp = party_treshold;
    2e1c:	4b39      	ldr	r3, [pc, #228]	; (2f04 <data_handler+0xdec>)
    2e1e:	637b      	str	r3, [r7, #52]	; 0x34
		sscanf(buffer,"PRTTRSH6 %d",&temp);
    2e20:	232c      	movs	r3, #44	; 0x2c
    2e22:	2208      	movs	r2, #8
    2e24:	18ba      	adds	r2, r7, r2
    2e26:	18d2      	adds	r2, r2, r3
    2e28:	4941      	ldr	r1, [pc, #260]	; (2f30 <data_handler+0xe18>)
    2e2a:	68fb      	ldr	r3, [r7, #12]
    2e2c:	0018      	movs	r0, r3
    2e2e:	4b32      	ldr	r3, [pc, #200]	; (2ef8 <data_handler+0xde0>)
    2e30:	4798      	blx	r3
		party_thresholds[6] = (uint16_t)temp;
    2e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e34:	b29a      	uxth	r2, r3
    2e36:	4b31      	ldr	r3, [pc, #196]	; (2efc <data_handler+0xde4>)
    2e38:	819a      	strh	r2, [r3, #12]
    2e3a:	e034      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if (strncmp(buffer,PARTY_TRESH_7,sizeof(PARTY_TRESH_7)-1) == 0)
    2e3c:	493d      	ldr	r1, [pc, #244]	; (2f34 <data_handler+0xe1c>)
    2e3e:	68fb      	ldr	r3, [r7, #12]
    2e40:	2208      	movs	r2, #8
    2e42:	0018      	movs	r0, r3
    2e44:	4b1d      	ldr	r3, [pc, #116]	; (2ebc <data_handler+0xda4>)
    2e46:	4798      	blx	r3
    2e48:	1e03      	subs	r3, r0, #0
    2e4a:	d10f      	bne.n	2e6c <data_handler+0xd54>
	{
		int temp = party_treshold;
    2e4c:	4b2d      	ldr	r3, [pc, #180]	; (2f04 <data_handler+0xdec>)
    2e4e:	633b      	str	r3, [r7, #48]	; 0x30
		sscanf(buffer,"PRTTRSH7 %d",&temp);
    2e50:	2328      	movs	r3, #40	; 0x28
    2e52:	2208      	movs	r2, #8
    2e54:	18ba      	adds	r2, r7, r2
    2e56:	18d2      	adds	r2, r2, r3
    2e58:	4937      	ldr	r1, [pc, #220]	; (2f38 <data_handler+0xe20>)
    2e5a:	68fb      	ldr	r3, [r7, #12]
    2e5c:	0018      	movs	r0, r3
    2e5e:	4b26      	ldr	r3, [pc, #152]	; (2ef8 <data_handler+0xde0>)
    2e60:	4798      	blx	r3
		party_thresholds[7] = (uint16_t)temp;
    2e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e64:	b29a      	uxth	r2, r3
    2e66:	4b25      	ldr	r3, [pc, #148]	; (2efc <data_handler+0xde4>)
    2e68:	81da      	strh	r2, [r3, #14]
    2e6a:	e01c      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if (strncmp(buffer,CUT_OUT_VALVE_ON,sizeof(CUT_OUT_VALVE_ON)-1) == 0)
    2e6c:	4933      	ldr	r1, [pc, #204]	; (2f3c <data_handler+0xe24>)
    2e6e:	68fb      	ldr	r3, [r7, #12]
    2e70:	2205      	movs	r2, #5
    2e72:	0018      	movs	r0, r3
    2e74:	4b11      	ldr	r3, [pc, #68]	; (2ebc <data_handler+0xda4>)
    2e76:	4798      	blx	r3
    2e78:	1e03      	subs	r3, r0, #0
    2e7a:	d106      	bne.n	2e8a <data_handler+0xd72>
	{
		valve_open = true;
    2e7c:	4b30      	ldr	r3, [pc, #192]	; (2f40 <data_handler+0xe28>)
    2e7e:	2201      	movs	r2, #1
    2e80:	701a      	strb	r2, [r3, #0]
		valve_close = false;
    2e82:	4b30      	ldr	r3, [pc, #192]	; (2f44 <data_handler+0xe2c>)
    2e84:	2200      	movs	r2, #0
    2e86:	701a      	strb	r2, [r3, #0]
    2e88:	e00d      	b.n	2ea6 <data_handler+0xd8e>
	}
	else if (strncmp(buffer,CUT_OUT_VALVE_OFF,sizeof(CUT_OUT_VALVE_OFF)-1) == 0)
    2e8a:	492f      	ldr	r1, [pc, #188]	; (2f48 <data_handler+0xe30>)
    2e8c:	68fb      	ldr	r3, [r7, #12]
    2e8e:	2205      	movs	r2, #5
    2e90:	0018      	movs	r0, r3
    2e92:	4b0a      	ldr	r3, [pc, #40]	; (2ebc <data_handler+0xda4>)
    2e94:	4798      	blx	r3
    2e96:	1e03      	subs	r3, r0, #0
    2e98:	d105      	bne.n	2ea6 <data_handler+0xd8e>
	{
		valve_open = false;
    2e9a:	4b29      	ldr	r3, [pc, #164]	; (2f40 <data_handler+0xe28>)
    2e9c:	2200      	movs	r2, #0
    2e9e:	701a      	strb	r2, [r3, #0]
		valve_close = true;
    2ea0:	4b28      	ldr	r3, [pc, #160]	; (2f44 <data_handler+0xe2c>)
    2ea2:	2201      	movs	r2, #1
    2ea4:	701a      	strb	r2, [r3, #0]
	}
	ble_uart_write("ACK");
    2ea6:	4b29      	ldr	r3, [pc, #164]	; (2f4c <data_handler+0xe34>)
    2ea8:	0018      	movs	r0, r3
    2eaa:	4b06      	ldr	r3, [pc, #24]	; (2ec4 <data_handler+0xdac>)
    2eac:	4798      	blx	r3
}
    2eae:	46c0      	nop			; (mov r8, r8)
    2eb0:	46bd      	mov	sp, r7
    2eb2:	b017      	add	sp, #92	; 0x5c
    2eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2eb6:	46c0      	nop			; (mov r8, r8)
    2eb8:	000097f0 	.word	0x000097f0
    2ebc:	00008333 	.word	0x00008333
    2ec0:	000097fc 	.word	0x000097fc
    2ec4:	0000202d 	.word	0x0000202d
    2ec8:	00005909 	.word	0x00005909
    2ecc:	00006705 	.word	0x00006705
    2ed0:	00001b57 	.word	0x00001b57
    2ed4:	000066c5 	.word	0x000066c5
    2ed8:	00001b58 	.word	0x00001b58
    2edc:	20000001 	.word	0x20000001
    2ee0:	00004d7d 	.word	0x00004d7d
    2ee4:	00003fbd 	.word	0x00003fbd
    2ee8:	20000259 	.word	0x20000259
    2eec:	00009810 	.word	0x00009810
    2ef0:	00009824 	.word	0x00009824
    2ef4:	00009830 	.word	0x00009830
    2ef8:	000082d1 	.word	0x000082d1
    2efc:	200001b4 	.word	0x200001b4
    2f00:	0000983c 	.word	0x0000983c
    2f04:	000009c4 	.word	0x000009c4
    2f08:	00009848 	.word	0x00009848
    2f0c:	00009854 	.word	0x00009854
    2f10:	00009860 	.word	0x00009860
    2f14:	0000986c 	.word	0x0000986c
    2f18:	00009878 	.word	0x00009878
    2f1c:	00009884 	.word	0x00009884
    2f20:	00009890 	.word	0x00009890
    2f24:	0000989c 	.word	0x0000989c
    2f28:	000098a8 	.word	0x000098a8
    2f2c:	000098b4 	.word	0x000098b4
    2f30:	000098c0 	.word	0x000098c0
    2f34:	000098cc 	.word	0x000098cc
    2f38:	000098d8 	.word	0x000098d8
    2f3c:	000098e4 	.word	0x000098e4
    2f40:	200001b2 	.word	0x200001b2
    2f44:	200001b0 	.word	0x200001b0
    2f48:	000098ec 	.word	0x000098ec
    2f4c:	000098f4 	.word	0x000098f4

00002f50 <update_all_ports>:

void update_all_ports()
{
    2f50:	b580      	push	{r7, lr}
    2f52:	b082      	sub	sp, #8
    2f54:	af00      	add	r7, sp, #0
	else
	{
		data[1] = 0x00;
	}*/

	if (!port_update_ongoing)
    2f56:	4b26      	ldr	r3, [pc, #152]	; (2ff0 <update_all_ports+0xa0>)
    2f58:	781b      	ldrb	r3, [r3, #0]
    2f5a:	2201      	movs	r2, #1
    2f5c:	4053      	eors	r3, r2
    2f5e:	b2db      	uxtb	r3, r3
    2f60:	2b00      	cmp	r3, #0
    2f62:	d040      	beq.n	2fe6 <update_all_ports+0x96>
	{
		port_update_ongoing = true;
    2f64:	4b22      	ldr	r3, [pc, #136]	; (2ff0 <update_all_ports+0xa0>)
    2f66:	2201      	movs	r2, #1
    2f68:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<8;i++)
    2f6a:	2300      	movs	r3, #0
    2f6c:	607b      	str	r3, [r7, #4]
    2f6e:	e034      	b.n	2fda <update_all_ports+0x8a>
		{
			mcp23017_data.devices[i].outputs.pa7 = 1;
    2f70:	4a20      	ldr	r2, [pc, #128]	; (2ff4 <update_all_ports+0xa4>)
    2f72:	687b      	ldr	r3, [r7, #4]
    2f74:	2108      	movs	r1, #8
    2f76:	011b      	lsls	r3, r3, #4
    2f78:	18d3      	adds	r3, r2, r3
    2f7a:	185b      	adds	r3, r3, r1
    2f7c:	781a      	ldrb	r2, [r3, #0]
    2f7e:	2180      	movs	r1, #128	; 0x80
    2f80:	4249      	negs	r1, r1
    2f82:	430a      	orrs	r2, r1
    2f84:	701a      	strb	r2, [r3, #0]
			mcp23017_data.devices[i].outputs.pb7 = 1;
    2f86:	4a1b      	ldr	r2, [pc, #108]	; (2ff4 <update_all_ports+0xa4>)
    2f88:	687b      	ldr	r3, [r7, #4]
    2f8a:	2108      	movs	r1, #8
    2f8c:	011b      	lsls	r3, r3, #4
    2f8e:	18d3      	adds	r3, r2, r3
    2f90:	185b      	adds	r3, r3, r1
    2f92:	785a      	ldrb	r2, [r3, #1]
    2f94:	2180      	movs	r1, #128	; 0x80
    2f96:	4249      	negs	r1, r1
    2f98:	430a      	orrs	r2, r1
    2f9a:	705a      	strb	r2, [r3, #1]
			mcp23017_data.devices[i].status = mcp23017_set_pins(MCP23017_I2C_ADDR_000+i,mcp23017_data.devices[i].outputs.ports[0],mcp23017_data.devices[i].outputs.ports[1]);
    2f9c:	687b      	ldr	r3, [r7, #4]
    2f9e:	b2db      	uxtb	r3, r3
    2fa0:	3320      	adds	r3, #32
    2fa2:	b2d8      	uxtb	r0, r3
    2fa4:	4a13      	ldr	r2, [pc, #76]	; (2ff4 <update_all_ports+0xa4>)
    2fa6:	687b      	ldr	r3, [r7, #4]
    2fa8:	011b      	lsls	r3, r3, #4
    2faa:	18d3      	adds	r3, r2, r3
    2fac:	3308      	adds	r3, #8
    2fae:	7819      	ldrb	r1, [r3, #0]
    2fb0:	4a10      	ldr	r2, [pc, #64]	; (2ff4 <update_all_ports+0xa4>)
    2fb2:	687b      	ldr	r3, [r7, #4]
    2fb4:	011b      	lsls	r3, r3, #4
    2fb6:	18d3      	adds	r3, r2, r3
    2fb8:	3309      	adds	r3, #9
    2fba:	781b      	ldrb	r3, [r3, #0]
    2fbc:	001a      	movs	r2, r3
    2fbe:	4b0e      	ldr	r3, [pc, #56]	; (2ff8 <update_all_ports+0xa8>)
    2fc0:	4798      	blx	r3
    2fc2:	0003      	movs	r3, r0
    2fc4:	0019      	movs	r1, r3
    2fc6:	4a0b      	ldr	r2, [pc, #44]	; (2ff4 <update_all_ports+0xa4>)
    2fc8:	687b      	ldr	r3, [r7, #4]
    2fca:	011b      	lsls	r3, r3, #4
    2fcc:	18d3      	adds	r3, r2, r3
    2fce:	3303      	adds	r3, #3
    2fd0:	1c0a      	adds	r2, r1, #0
    2fd2:	701a      	strb	r2, [r3, #0]
	}*/

	if (!port_update_ongoing)
	{
		port_update_ongoing = true;
		for (int i=0;i<8;i++)
    2fd4:	687b      	ldr	r3, [r7, #4]
    2fd6:	3301      	adds	r3, #1
    2fd8:	607b      	str	r3, [r7, #4]
    2fda:	687b      	ldr	r3, [r7, #4]
    2fdc:	2b07      	cmp	r3, #7
    2fde:	ddc7      	ble.n	2f70 <update_all_ports+0x20>
			mcp23017_data.devices[i].outputs.pb7 = 1;
			mcp23017_data.devices[i].status = mcp23017_set_pins(MCP23017_I2C_ADDR_000+i,mcp23017_data.devices[i].outputs.ports[0],mcp23017_data.devices[i].outputs.ports[1]);
			//data_LED[0][i] |= 0x80;
			//data_LED[1][i] |= 0x80;
		}
		port_update_ongoing = false;
    2fe0:	4b03      	ldr	r3, [pc, #12]	; (2ff0 <update_all_ports+0xa0>)
    2fe2:	2200      	movs	r2, #0
    2fe4:	701a      	strb	r2, [r3, #0]
	/*
	for(int i=0;i<8;i++)
	{
		mcp23017_set_pins(MCP23017_I2C_ADDR_000+i,(uint8_t)data[1],(uint8_t)data[1]);
	}*/
}
    2fe6:	46c0      	nop			; (mov r8, r8)
    2fe8:	46bd      	mov	sp, r7
    2fea:	b002      	add	sp, #8
    2fec:	bd80      	pop	{r7, pc}
    2fee:	46c0      	nop			; (mov r8, r8)
    2ff0:	2000025f 	.word	0x2000025f
    2ff4:	20000010 	.word	0x20000010
    2ff8:	00004095 	.word	0x00004095

00002ffc <party_lights>:
	}
}


void party_lights(uint16_t party_vals[])
{
    2ffc:	b590      	push	{r4, r7, lr}
    2ffe:	b083      	sub	sp, #12
    3000:	af00      	add	r7, sp, #0
    3002:	6078      	str	r0, [r7, #4]
	if (party_vals[0] > party_thresholds[0])
    3004:	687b      	ldr	r3, [r7, #4]
    3006:	881a      	ldrh	r2, [r3, #0]
    3008:	4b94      	ldr	r3, [pc, #592]	; (325c <party_lights+0x260>)
    300a:	881b      	ldrh	r3, [r3, #0]
    300c:	429a      	cmp	r2, r3
    300e:	d918      	bls.n	3042 <party_lights+0x46>
	{
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR,SUB_LEFT_PIN,true);
    3010:	2301      	movs	r3, #1
    3012:	2203      	movs	r2, #3
    3014:	2103      	movs	r1, #3
    3016:	2000      	movs	r0, #0
    3018:	4c91      	ldr	r4, [pc, #580]	; (3260 <party_lights+0x264>)
    301a:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR,SUB_RIGHT_PIN,true);
    301c:	2301      	movs	r3, #1
    301e:	2204      	movs	r2, #4
    3020:	2103      	movs	r1, #3
    3022:	2000      	movs	r0, #0
    3024:	4c8e      	ldr	r4, [pc, #568]	; (3260 <party_lights+0x264>)
    3026:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    3028:	2301      	movs	r3, #1
    302a:	2201      	movs	r2, #1
    302c:	2104      	movs	r1, #4
    302e:	2000      	movs	r0, #0
    3030:	4c8b      	ldr	r4, [pc, #556]	; (3260 <party_lights+0x264>)
    3032:	47a0      	blx	r4
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    3034:	2301      	movs	r3, #1
    3036:	2201      	movs	r2, #1
    3038:	2103      	movs	r1, #3
    303a:	2000      	movs	r0, #0
    303c:	4c88      	ldr	r4, [pc, #544]	; (3260 <party_lights+0x264>)
    303e:	47a0      	blx	r4
    3040:	e017      	b.n	3072 <party_lights+0x76>
		//configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
		//configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
	}
	else
	{
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR, SUB_LEFT_PIN,false);
    3042:	2300      	movs	r3, #0
    3044:	2203      	movs	r2, #3
    3046:	2103      	movs	r1, #3
    3048:	2000      	movs	r0, #0
    304a:	4c85      	ldr	r4, [pc, #532]	; (3260 <party_lights+0x264>)
    304c:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR, SUB_RIGHT_PIN,false);
    304e:	2300      	movs	r3, #0
    3050:	2204      	movs	r2, #4
    3052:	2103      	movs	r1, #3
    3054:	2000      	movs	r0, #0
    3056:	4c82      	ldr	r4, [pc, #520]	; (3260 <party_lights+0x264>)
    3058:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    305a:	2300      	movs	r3, #0
    305c:	2201      	movs	r2, #1
    305e:	2104      	movs	r1, #4
    3060:	2000      	movs	r0, #0
    3062:	4c7f      	ldr	r4, [pc, #508]	; (3260 <party_lights+0x264>)
    3064:	47a0      	blx	r4
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    3066:	2300      	movs	r3, #0
    3068:	2201      	movs	r2, #1
    306a:	2103      	movs	r1, #3
    306c:	2000      	movs	r0, #0
    306e:	4c7c      	ldr	r4, [pc, #496]	; (3260 <party_lights+0x264>)
    3070:	47a0      	blx	r4
		//configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
		//configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
	}
	if (party_vals[1] > party_thresholds[1])
    3072:	687b      	ldr	r3, [r7, #4]
    3074:	3302      	adds	r3, #2
    3076:	881a      	ldrh	r2, [r3, #0]
    3078:	4b78      	ldr	r3, [pc, #480]	; (325c <party_lights+0x260>)
    307a:	885b      	ldrh	r3, [r3, #2]
    307c:	429a      	cmp	r2, r3
    307e:	d92a      	bls.n	30d6 <party_lights+0xda>
	{
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    3080:	2301      	movs	r3, #1
    3082:	2200      	movs	r2, #0
    3084:	2102      	movs	r1, #2
    3086:	2000      	movs	r0, #0
    3088:	4c75      	ldr	r4, [pc, #468]	; (3260 <party_lights+0x264>)
    308a:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    308c:	2301      	movs	r3, #1
    308e:	2200      	movs	r2, #0
    3090:	2101      	movs	r1, #1
    3092:	2000      	movs	r0, #0
    3094:	4c72      	ldr	r4, [pc, #456]	; (3260 <party_lights+0x264>)
    3096:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    3098:	2301      	movs	r3, #1
    309a:	2200      	movs	r2, #0
    309c:	2104      	movs	r1, #4
    309e:	2000      	movs	r0, #0
    30a0:	4c6f      	ldr	r4, [pc, #444]	; (3260 <party_lights+0x264>)
    30a2:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    30a4:	2301      	movs	r3, #1
    30a6:	2200      	movs	r2, #0
    30a8:	2103      	movs	r1, #3
    30aa:	2000      	movs	r0, #0
    30ac:	4c6c      	ldr	r4, [pc, #432]	; (3260 <party_lights+0x264>)
    30ae:	47a0      	blx	r4
		
		configure_pin(CABIN_FRONT_RIGHT_PORT,CABIN_FRONT_RIGHT_ADR,CABIN_FRONT_RIGHT_PIN,true);
    30b0:	2301      	movs	r3, #1
    30b2:	2203      	movs	r2, #3
    30b4:	2105      	movs	r1, #5
    30b6:	2000      	movs	r0, #0
    30b8:	4c69      	ldr	r4, [pc, #420]	; (3260 <party_lights+0x264>)
    30ba:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_LEFT_PORT,CABIN_FRONT_LEFT_ADR,CABIN_FRONT_LEFT_PIN,true);
    30bc:	2301      	movs	r3, #1
    30be:	2202      	movs	r2, #2
    30c0:	2105      	movs	r1, #5
    30c2:	2000      	movs	r0, #0
    30c4:	4c66      	ldr	r4, [pc, #408]	; (3260 <party_lights+0x264>)
    30c6:	47a0      	blx	r4
		configure_pin(CABIN_BACKSEAT_PORT,CABIN_BACKSEAT_ADR,CABIN_BACKSEAT_PIN,true);	}
    30c8:	2301      	movs	r3, #1
    30ca:	2204      	movs	r2, #4
    30cc:	2105      	movs	r1, #5
    30ce:	2000      	movs	r0, #0
    30d0:	4c63      	ldr	r4, [pc, #396]	; (3260 <party_lights+0x264>)
    30d2:	47a0      	blx	r4
    30d4:	e029      	b.n	312a <party_lights+0x12e>
	else
	{
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,false);
    30d6:	2300      	movs	r3, #0
    30d8:	2200      	movs	r2, #0
    30da:	2102      	movs	r1, #2
    30dc:	2000      	movs	r0, #0
    30de:	4c60      	ldr	r4, [pc, #384]	; (3260 <party_lights+0x264>)
    30e0:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,false);
    30e2:	2300      	movs	r3, #0
    30e4:	2200      	movs	r2, #0
    30e6:	2101      	movs	r1, #1
    30e8:	2000      	movs	r0, #0
    30ea:	4c5d      	ldr	r4, [pc, #372]	; (3260 <party_lights+0x264>)
    30ec:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    30ee:	2300      	movs	r3, #0
    30f0:	2200      	movs	r2, #0
    30f2:	2104      	movs	r1, #4
    30f4:	2000      	movs	r0, #0
    30f6:	4c5a      	ldr	r4, [pc, #360]	; (3260 <party_lights+0x264>)
    30f8:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    30fa:	2300      	movs	r3, #0
    30fc:	2200      	movs	r2, #0
    30fe:	2103      	movs	r1, #3
    3100:	2000      	movs	r0, #0
    3102:	4c57      	ldr	r4, [pc, #348]	; (3260 <party_lights+0x264>)
    3104:	47a0      	blx	r4
		
		configure_pin(CABIN_FRONT_RIGHT_PORT,CABIN_FRONT_RIGHT_ADR,CABIN_FRONT_RIGHT_PIN,false);
    3106:	2300      	movs	r3, #0
    3108:	2203      	movs	r2, #3
    310a:	2105      	movs	r1, #5
    310c:	2000      	movs	r0, #0
    310e:	4c54      	ldr	r4, [pc, #336]	; (3260 <party_lights+0x264>)
    3110:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_LEFT_PORT,CABIN_FRONT_LEFT_ADR,CABIN_FRONT_LEFT_PIN,false);
    3112:	2300      	movs	r3, #0
    3114:	2202      	movs	r2, #2
    3116:	2105      	movs	r1, #5
    3118:	2000      	movs	r0, #0
    311a:	4c51      	ldr	r4, [pc, #324]	; (3260 <party_lights+0x264>)
    311c:	47a0      	blx	r4
		configure_pin(CABIN_BACKSEAT_PORT,CABIN_BACKSEAT_ADR,CABIN_BACKSEAT_PIN,false);
    311e:	2300      	movs	r3, #0
    3120:	2204      	movs	r2, #4
    3122:	2105      	movs	r1, #5
    3124:	2000      	movs	r0, #0
    3126:	4c4e      	ldr	r4, [pc, #312]	; (3260 <party_lights+0x264>)
    3128:	47a0      	blx	r4
	}
	if (party_vals[2] > party_thresholds[2])
    312a:	687b      	ldr	r3, [r7, #4]
    312c:	3304      	adds	r3, #4
    312e:	881a      	ldrh	r2, [r3, #0]
    3130:	4b4a      	ldr	r3, [pc, #296]	; (325c <party_lights+0x260>)
    3132:	889b      	ldrh	r3, [r3, #4]
    3134:	429a      	cmp	r2, r3
    3136:	d90c      	bls.n	3152 <party_lights+0x156>
	{
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    3138:	2301      	movs	r3, #1
    313a:	2201      	movs	r2, #1
    313c:	2102      	movs	r1, #2
    313e:	2000      	movs	r0, #0
    3140:	4c47      	ldr	r4, [pc, #284]	; (3260 <party_lights+0x264>)
    3142:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    3144:	2301      	movs	r3, #1
    3146:	2201      	movs	r2, #1
    3148:	2101      	movs	r1, #1
    314a:	2000      	movs	r0, #0
    314c:	4c44      	ldr	r4, [pc, #272]	; (3260 <party_lights+0x264>)
    314e:	47a0      	blx	r4
    3150:	e00b      	b.n	316a <party_lights+0x16e>
	}
	else
	{
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    3152:	2300      	movs	r3, #0
    3154:	2201      	movs	r2, #1
    3156:	2102      	movs	r1, #2
    3158:	2000      	movs	r0, #0
    315a:	4c41      	ldr	r4, [pc, #260]	; (3260 <party_lights+0x264>)
    315c:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    315e:	2300      	movs	r3, #0
    3160:	2201      	movs	r2, #1
    3162:	2101      	movs	r1, #1
    3164:	2000      	movs	r0, #0
    3166:	4c3e      	ldr	r4, [pc, #248]	; (3260 <party_lights+0x264>)
    3168:	47a0      	blx	r4
	}
	if (party_vals[3] > party_thresholds[3])
    316a:	687b      	ldr	r3, [r7, #4]
    316c:	3306      	adds	r3, #6
    316e:	881a      	ldrh	r2, [r3, #0]
    3170:	4b3a      	ldr	r3, [pc, #232]	; (325c <party_lights+0x260>)
    3172:	88db      	ldrh	r3, [r3, #6]
    3174:	429a      	cmp	r2, r3
    3176:	d90c      	bls.n	3192 <party_lights+0x196>
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    3178:	2301      	movs	r3, #1
    317a:	2202      	movs	r2, #2
    317c:	2102      	movs	r1, #2
    317e:	2000      	movs	r0, #0
    3180:	4c37      	ldr	r4, [pc, #220]	; (3260 <party_lights+0x264>)
    3182:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    3184:	2301      	movs	r3, #1
    3186:	2202      	movs	r2, #2
    3188:	2101      	movs	r1, #1
    318a:	2000      	movs	r0, #0
    318c:	4c34      	ldr	r4, [pc, #208]	; (3260 <party_lights+0x264>)
    318e:	47a0      	blx	r4
    3190:	e00b      	b.n	31aa <party_lights+0x1ae>
	}
	else
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    3192:	2300      	movs	r3, #0
    3194:	2202      	movs	r2, #2
    3196:	2102      	movs	r1, #2
    3198:	2000      	movs	r0, #0
    319a:	4c31      	ldr	r4, [pc, #196]	; (3260 <party_lights+0x264>)
    319c:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    319e:	2300      	movs	r3, #0
    31a0:	2202      	movs	r2, #2
    31a2:	2101      	movs	r1, #1
    31a4:	2000      	movs	r0, #0
    31a6:	4c2e      	ldr	r4, [pc, #184]	; (3260 <party_lights+0x264>)
    31a8:	47a0      	blx	r4
	}
	if (party_vals[4] > party_thresholds[4])
    31aa:	687b      	ldr	r3, [r7, #4]
    31ac:	3308      	adds	r3, #8
    31ae:	881a      	ldrh	r2, [r3, #0]
    31b0:	4b2a      	ldr	r3, [pc, #168]	; (325c <party_lights+0x260>)
    31b2:	891b      	ldrh	r3, [r3, #8]
    31b4:	429a      	cmp	r2, r3
    31b6:	d90c      	bls.n	31d2 <party_lights+0x1d6>
	{
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    31b8:	2301      	movs	r3, #1
    31ba:	2202      	movs	r2, #2
    31bc:	2104      	movs	r1, #4
    31be:	2000      	movs	r0, #0
    31c0:	4c27      	ldr	r4, [pc, #156]	; (3260 <party_lights+0x264>)
    31c2:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    31c4:	2301      	movs	r3, #1
    31c6:	2202      	movs	r2, #2
    31c8:	2103      	movs	r1, #3
    31ca:	2000      	movs	r0, #0
    31cc:	4c24      	ldr	r4, [pc, #144]	; (3260 <party_lights+0x264>)
    31ce:	47a0      	blx	r4
    31d0:	e00b      	b.n	31ea <party_lights+0x1ee>
	}
	else
	{
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,false);
    31d2:	2300      	movs	r3, #0
    31d4:	2202      	movs	r2, #2
    31d6:	2104      	movs	r1, #4
    31d8:	2000      	movs	r0, #0
    31da:	4c21      	ldr	r4, [pc, #132]	; (3260 <party_lights+0x264>)
    31dc:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,false);
    31de:	2300      	movs	r3, #0
    31e0:	2202      	movs	r2, #2
    31e2:	2103      	movs	r1, #3
    31e4:	2000      	movs	r0, #0
    31e6:	4c1e      	ldr	r4, [pc, #120]	; (3260 <party_lights+0x264>)
    31e8:	47a0      	blx	r4
	}
	if (party_vals[5] > party_thresholds[5])
    31ea:	687b      	ldr	r3, [r7, #4]
    31ec:	330a      	adds	r3, #10
    31ee:	881a      	ldrh	r2, [r3, #0]
    31f0:	4b1a      	ldr	r3, [pc, #104]	; (325c <party_lights+0x260>)
    31f2:	895b      	ldrh	r3, [r3, #10]
    31f4:	429a      	cmp	r2, r3
    31f6:	d90c      	bls.n	3212 <party_lights+0x216>
	{
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    31f8:	2301      	movs	r3, #1
    31fa:	2203      	movs	r2, #3
    31fc:	2101      	movs	r1, #1
    31fe:	2000      	movs	r0, #0
    3200:	4c17      	ldr	r4, [pc, #92]	; (3260 <party_lights+0x264>)
    3202:	47a0      	blx	r4
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    3204:	2301      	movs	r3, #1
    3206:	2203      	movs	r2, #3
    3208:	2102      	movs	r1, #2
    320a:	2000      	movs	r0, #0
    320c:	4c14      	ldr	r4, [pc, #80]	; (3260 <party_lights+0x264>)
    320e:	47a0      	blx	r4
    3210:	e00b      	b.n	322a <party_lights+0x22e>
	}
	else
	{
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    3212:	2300      	movs	r3, #0
    3214:	2203      	movs	r2, #3
    3216:	2101      	movs	r1, #1
    3218:	2000      	movs	r0, #0
    321a:	4c11      	ldr	r4, [pc, #68]	; (3260 <party_lights+0x264>)
    321c:	47a0      	blx	r4
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    321e:	2300      	movs	r3, #0
    3220:	2203      	movs	r2, #3
    3222:	2102      	movs	r1, #2
    3224:	2000      	movs	r0, #0
    3226:	4c0e      	ldr	r4, [pc, #56]	; (3260 <party_lights+0x264>)
    3228:	47a0      	blx	r4
	}
	if (party_vals[6] > party_thresholds[6])
    322a:	687b      	ldr	r3, [r7, #4]
    322c:	330c      	adds	r3, #12
    322e:	881a      	ldrh	r2, [r3, #0]
    3230:	4b0a      	ldr	r3, [pc, #40]	; (325c <party_lights+0x260>)
    3232:	899b      	ldrh	r3, [r3, #12]
    3234:	429a      	cmp	r2, r3
    3236:	d906      	bls.n	3246 <party_lights+0x24a>
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    3238:	2301      	movs	r3, #1
    323a:	2204      	movs	r2, #4
    323c:	2101      	movs	r1, #1
    323e:	2000      	movs	r0, #0
    3240:	4c07      	ldr	r4, [pc, #28]	; (3260 <party_lights+0x264>)
    3242:	47a0      	blx	r4
	}
	else
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
	}
}
    3244:	e005      	b.n	3252 <party_lights+0x256>
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
	}
	else
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    3246:	2300      	movs	r3, #0
    3248:	2204      	movs	r2, #4
    324a:	2101      	movs	r1, #1
    324c:	2000      	movs	r0, #0
    324e:	4c04      	ldr	r4, [pc, #16]	; (3260 <party_lights+0x264>)
    3250:	47a0      	blx	r4
	}
}
    3252:	46c0      	nop			; (mov r8, r8)
    3254:	46bd      	mov	sp, r7
    3256:	b003      	add	sp, #12
    3258:	bd90      	pop	{r4, r7, pc}
    325a:	46c0      	nop			; (mov r8, r8)
    325c:	200001b4 	.word	0x200001b4
    3260:	00003ad9 	.word	0x00003ad9

00003264 <flashy_flash1>:

void flashy_flash1()
{
    3264:	b5b0      	push	{r4, r5, r7, lr}
    3266:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
    3268:	4b7c      	ldr	r3, [pc, #496]	; (345c <flashy_flash1+0x1f8>)
    326a:	781b      	ldrb	r3, [r3, #0]
    326c:	2b13      	cmp	r3, #19
    326e:	d900      	bls.n	3272 <flashy_flash1+0xe>
    3270:	e0ea      	b.n	3448 <flashy_flash1+0x1e4>
    3272:	009a      	lsls	r2, r3, #2
    3274:	4b7a      	ldr	r3, [pc, #488]	; (3460 <flashy_flash1+0x1fc>)
    3276:	18d3      	adds	r3, r2, r3
    3278:	681b      	ldr	r3, [r3, #0]
    327a:	469f      	mov	pc, r3
	{
		case 0:
			reset_all_lights();
    327c:	4b79      	ldr	r3, [pc, #484]	; (3464 <flashy_flash1+0x200>)
    327e:	4798      	blx	r3
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    3280:	2301      	movs	r3, #1
    3282:	2202      	movs	r2, #2
    3284:	2102      	movs	r1, #2
    3286:	2000      	movs	r0, #0
    3288:	4c77      	ldr	r4, [pc, #476]	; (3468 <flashy_flash1+0x204>)
    328a:	47a0      	blx	r4
			state++;
    328c:	4b73      	ldr	r3, [pc, #460]	; (345c <flashy_flash1+0x1f8>)
    328e:	781b      	ldrb	r3, [r3, #0]
    3290:	3301      	adds	r3, #1
    3292:	b2da      	uxtb	r2, r3
    3294:	4b71      	ldr	r3, [pc, #452]	; (345c <flashy_flash1+0x1f8>)
    3296:	701a      	strb	r2, [r3, #0]
			break;
    3298:	e0dc      	b.n	3454 <flashy_flash1+0x1f0>
		case 1:
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    329a:	2300      	movs	r3, #0
    329c:	2202      	movs	r2, #2
    329e:	2102      	movs	r1, #2
    32a0:	2000      	movs	r0, #0
    32a2:	4c71      	ldr	r4, [pc, #452]	; (3468 <flashy_flash1+0x204>)
    32a4:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    32a6:	2301      	movs	r3, #1
    32a8:	2201      	movs	r2, #1
    32aa:	2102      	movs	r1, #2
    32ac:	2000      	movs	r0, #0
    32ae:	4c6e      	ldr	r4, [pc, #440]	; (3468 <flashy_flash1+0x204>)
    32b0:	47a0      	blx	r4
			state++;
    32b2:	4b6a      	ldr	r3, [pc, #424]	; (345c <flashy_flash1+0x1f8>)
    32b4:	781b      	ldrb	r3, [r3, #0]
    32b6:	3301      	adds	r3, #1
    32b8:	b2da      	uxtb	r2, r3
    32ba:	4b68      	ldr	r3, [pc, #416]	; (345c <flashy_flash1+0x1f8>)
    32bc:	701a      	strb	r2, [r3, #0]
			break;
    32be:	e0c9      	b.n	3454 <flashy_flash1+0x1f0>
		case 2:
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    32c0:	2300      	movs	r3, #0
    32c2:	2201      	movs	r2, #1
    32c4:	2102      	movs	r1, #2
    32c6:	2000      	movs	r0, #0
    32c8:	4c67      	ldr	r4, [pc, #412]	; (3468 <flashy_flash1+0x204>)
    32ca:	47a0      	blx	r4
			configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    32cc:	2301      	movs	r3, #1
    32ce:	2200      	movs	r2, #0
    32d0:	2102      	movs	r1, #2
    32d2:	2000      	movs	r0, #0
    32d4:	4c64      	ldr	r4, [pc, #400]	; (3468 <flashy_flash1+0x204>)
    32d6:	47a0      	blx	r4
			state++;
    32d8:	4b60      	ldr	r3, [pc, #384]	; (345c <flashy_flash1+0x1f8>)
    32da:	781b      	ldrb	r3, [r3, #0]
    32dc:	3301      	adds	r3, #1
    32de:	b2da      	uxtb	r2, r3
    32e0:	4b5e      	ldr	r3, [pc, #376]	; (345c <flashy_flash1+0x1f8>)
    32e2:	701a      	strb	r2, [r3, #0]
			break;
    32e4:	e0b6      	b.n	3454 <flashy_flash1+0x1f0>
		case 3:
			configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,false);
    32e6:	2300      	movs	r3, #0
    32e8:	2200      	movs	r2, #0
    32ea:	2102      	movs	r1, #2
    32ec:	2000      	movs	r0, #0
    32ee:	4c5e      	ldr	r4, [pc, #376]	; (3468 <flashy_flash1+0x204>)
    32f0:	47a0      	blx	r4
			configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    32f2:	2301      	movs	r3, #1
    32f4:	2200      	movs	r2, #0
    32f6:	2101      	movs	r1, #1
    32f8:	2000      	movs	r0, #0
    32fa:	4c5b      	ldr	r4, [pc, #364]	; (3468 <flashy_flash1+0x204>)
    32fc:	47a0      	blx	r4
			state++;
    32fe:	4b57      	ldr	r3, [pc, #348]	; (345c <flashy_flash1+0x1f8>)
    3300:	781b      	ldrb	r3, [r3, #0]
    3302:	3301      	adds	r3, #1
    3304:	b2da      	uxtb	r2, r3
    3306:	4b55      	ldr	r3, [pc, #340]	; (345c <flashy_flash1+0x1f8>)
    3308:	701a      	strb	r2, [r3, #0]
			break;
    330a:	e0a3      	b.n	3454 <flashy_flash1+0x1f0>
		case 4:
			configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,false);
    330c:	2300      	movs	r3, #0
    330e:	2200      	movs	r2, #0
    3310:	2101      	movs	r1, #1
    3312:	2000      	movs	r0, #0
    3314:	4c54      	ldr	r4, [pc, #336]	; (3468 <flashy_flash1+0x204>)
    3316:	47a0      	blx	r4
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    3318:	2301      	movs	r3, #1
    331a:	2201      	movs	r2, #1
    331c:	2101      	movs	r1, #1
    331e:	2000      	movs	r0, #0
    3320:	4c51      	ldr	r4, [pc, #324]	; (3468 <flashy_flash1+0x204>)
    3322:	47a0      	blx	r4
			state++;
    3324:	4b4d      	ldr	r3, [pc, #308]	; (345c <flashy_flash1+0x1f8>)
    3326:	781b      	ldrb	r3, [r3, #0]
    3328:	3301      	adds	r3, #1
    332a:	b2da      	uxtb	r2, r3
    332c:	4b4b      	ldr	r3, [pc, #300]	; (345c <flashy_flash1+0x1f8>)
    332e:	701a      	strb	r2, [r3, #0]
			break;
    3330:	e090      	b.n	3454 <flashy_flash1+0x1f0>
		case 5:
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    3332:	2300      	movs	r3, #0
    3334:	2201      	movs	r2, #1
    3336:	2101      	movs	r1, #1
    3338:	2000      	movs	r0, #0
    333a:	4c4b      	ldr	r4, [pc, #300]	; (3468 <flashy_flash1+0x204>)
    333c:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    333e:	2301      	movs	r3, #1
    3340:	2202      	movs	r2, #2
    3342:	2101      	movs	r1, #1
    3344:	2000      	movs	r0, #0
    3346:	4c48      	ldr	r4, [pc, #288]	; (3468 <flashy_flash1+0x204>)
    3348:	47a0      	blx	r4
			state++;
    334a:	4b44      	ldr	r3, [pc, #272]	; (345c <flashy_flash1+0x1f8>)
    334c:	781b      	ldrb	r3, [r3, #0]
    334e:	3301      	adds	r3, #1
    3350:	b2da      	uxtb	r2, r3
    3352:	4b42      	ldr	r3, [pc, #264]	; (345c <flashy_flash1+0x1f8>)
    3354:	701a      	strb	r2, [r3, #0]
			break;
    3356:	e07d      	b.n	3454 <flashy_flash1+0x1f0>
		case 6:
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    3358:	2300      	movs	r3, #0
    335a:	2202      	movs	r2, #2
    335c:	2101      	movs	r1, #1
    335e:	2000      	movs	r0, #0
    3360:	4c41      	ldr	r4, [pc, #260]	; (3468 <flashy_flash1+0x204>)
    3362:	47a0      	blx	r4
			configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    3364:	2301      	movs	r3, #1
    3366:	2202      	movs	r2, #2
    3368:	2103      	movs	r1, #3
    336a:	2000      	movs	r0, #0
    336c:	4c3e      	ldr	r4, [pc, #248]	; (3468 <flashy_flash1+0x204>)
    336e:	47a0      	blx	r4
			state++;
    3370:	4b3a      	ldr	r3, [pc, #232]	; (345c <flashy_flash1+0x1f8>)
    3372:	781b      	ldrb	r3, [r3, #0]
    3374:	3301      	adds	r3, #1
    3376:	b2da      	uxtb	r2, r3
    3378:	4b38      	ldr	r3, [pc, #224]	; (345c <flashy_flash1+0x1f8>)
    337a:	701a      	strb	r2, [r3, #0]
			break;
    337c:	e06a      	b.n	3454 <flashy_flash1+0x1f0>
		case 7:
			configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,false);
    337e:	2300      	movs	r3, #0
    3380:	2202      	movs	r2, #2
    3382:	2103      	movs	r1, #3
    3384:	2000      	movs	r0, #0
    3386:	4c38      	ldr	r4, [pc, #224]	; (3468 <flashy_flash1+0x204>)
    3388:	47a0      	blx	r4
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    338a:	2301      	movs	r3, #1
    338c:	2201      	movs	r2, #1
    338e:	2103      	movs	r1, #3
    3390:	2000      	movs	r0, #0
    3392:	4c35      	ldr	r4, [pc, #212]	; (3468 <flashy_flash1+0x204>)
    3394:	47a0      	blx	r4
			state++;
    3396:	4b31      	ldr	r3, [pc, #196]	; (345c <flashy_flash1+0x1f8>)
    3398:	781b      	ldrb	r3, [r3, #0]
    339a:	3301      	adds	r3, #1
    339c:	b2da      	uxtb	r2, r3
    339e:	4b2f      	ldr	r3, [pc, #188]	; (345c <flashy_flash1+0x1f8>)
    33a0:	701a      	strb	r2, [r3, #0]
			break;
    33a2:	e057      	b.n	3454 <flashy_flash1+0x1f0>
		case 8:
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    33a4:	2300      	movs	r3, #0
    33a6:	2201      	movs	r2, #1
    33a8:	2103      	movs	r1, #3
    33aa:	2000      	movs	r0, #0
    33ac:	4c2e      	ldr	r4, [pc, #184]	; (3468 <flashy_flash1+0x204>)
    33ae:	47a0      	blx	r4
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    33b0:	2301      	movs	r3, #1
    33b2:	2200      	movs	r2, #0
    33b4:	2103      	movs	r1, #3
    33b6:	2000      	movs	r0, #0
    33b8:	4c2b      	ldr	r4, [pc, #172]	; (3468 <flashy_flash1+0x204>)
    33ba:	47a0      	blx	r4
			state++;
    33bc:	4b27      	ldr	r3, [pc, #156]	; (345c <flashy_flash1+0x1f8>)
    33be:	781b      	ldrb	r3, [r3, #0]
    33c0:	3301      	adds	r3, #1
    33c2:	b2da      	uxtb	r2, r3
    33c4:	4b25      	ldr	r3, [pc, #148]	; (345c <flashy_flash1+0x1f8>)
    33c6:	701a      	strb	r2, [r3, #0]
			break;
    33c8:	e044      	b.n	3454 <flashy_flash1+0x1f0>
		case 9:
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    33ca:	2300      	movs	r3, #0
    33cc:	2200      	movs	r2, #0
    33ce:	2103      	movs	r1, #3
    33d0:	2000      	movs	r0, #0
    33d2:	4c25      	ldr	r4, [pc, #148]	; (3468 <flashy_flash1+0x204>)
    33d4:	47a0      	blx	r4
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    33d6:	2301      	movs	r3, #1
    33d8:	2201      	movs	r2, #1
    33da:	2104      	movs	r1, #4
    33dc:	2000      	movs	r0, #0
    33de:	4c22      	ldr	r4, [pc, #136]	; (3468 <flashy_flash1+0x204>)
    33e0:	47a0      	blx	r4
			state++;
    33e2:	4b1e      	ldr	r3, [pc, #120]	; (345c <flashy_flash1+0x1f8>)
    33e4:	781b      	ldrb	r3, [r3, #0]
    33e6:	3301      	adds	r3, #1
    33e8:	b2da      	uxtb	r2, r3
    33ea:	4b1c      	ldr	r3, [pc, #112]	; (345c <flashy_flash1+0x1f8>)
    33ec:	701a      	strb	r2, [r3, #0]
			break;
    33ee:	e031      	b.n	3454 <flashy_flash1+0x1f0>
		case 10:
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    33f0:	2300      	movs	r3, #0
    33f2:	2201      	movs	r2, #1
    33f4:	2104      	movs	r1, #4
    33f6:	2000      	movs	r0, #0
    33f8:	4c1b      	ldr	r4, [pc, #108]	; (3468 <flashy_flash1+0x204>)
    33fa:	47a0      	blx	r4
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    33fc:	2301      	movs	r3, #1
    33fe:	2200      	movs	r2, #0
    3400:	2104      	movs	r1, #4
    3402:	2000      	movs	r0, #0
    3404:	4c18      	ldr	r4, [pc, #96]	; (3468 <flashy_flash1+0x204>)
    3406:	47a0      	blx	r4
			state++;
    3408:	4b14      	ldr	r3, [pc, #80]	; (345c <flashy_flash1+0x1f8>)
    340a:	781b      	ldrb	r3, [r3, #0]
    340c:	3301      	adds	r3, #1
    340e:	b2da      	uxtb	r2, r3
    3410:	4b12      	ldr	r3, [pc, #72]	; (345c <flashy_flash1+0x1f8>)
    3412:	701a      	strb	r2, [r3, #0]
			break;
    3414:	e01e      	b.n	3454 <flashy_flash1+0x1f0>
		case 11:
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    3416:	2300      	movs	r3, #0
    3418:	2200      	movs	r2, #0
    341a:	2104      	movs	r1, #4
    341c:	2000      	movs	r0, #0
    341e:	4c12      	ldr	r4, [pc, #72]	; (3468 <flashy_flash1+0x204>)
    3420:	47a0      	blx	r4
			configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    3422:	2301      	movs	r3, #1
    3424:	2202      	movs	r2, #2
    3426:	2104      	movs	r1, #4
    3428:	2000      	movs	r0, #0
    342a:	4c0f      	ldr	r4, [pc, #60]	; (3468 <flashy_flash1+0x204>)
    342c:	47a0      	blx	r4
			state++;
    342e:	4b0b      	ldr	r3, [pc, #44]	; (345c <flashy_flash1+0x1f8>)
    3430:	781b      	ldrb	r3, [r3, #0]
    3432:	3301      	adds	r3, #1
    3434:	b2da      	uxtb	r2, r3
    3436:	4b09      	ldr	r3, [pc, #36]	; (345c <flashy_flash1+0x1f8>)
    3438:	701a      	strb	r2, [r3, #0]
			break;
    343a:	e00b      	b.n	3454 <flashy_flash1+0x1f0>
		case 18:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
			state++;
			break;*/
		case 19:
			reset_all_lights();
    343c:	4b09      	ldr	r3, [pc, #36]	; (3464 <flashy_flash1+0x200>)
    343e:	4798      	blx	r3
			state = 0;
    3440:	4b06      	ldr	r3, [pc, #24]	; (345c <flashy_flash1+0x1f8>)
    3442:	2200      	movs	r2, #0
    3444:	701a      	strb	r2, [r3, #0]
			break;
    3446:	e005      	b.n	3454 <flashy_flash1+0x1f0>
			
		default:
			reset_all_lights();
    3448:	4b06      	ldr	r3, [pc, #24]	; (3464 <flashy_flash1+0x200>)
    344a:	4798      	blx	r3
			state = 0;
    344c:	4b03      	ldr	r3, [pc, #12]	; (345c <flashy_flash1+0x1f8>)
    344e:	2200      	movs	r2, #0
    3450:	701a      	strb	r2, [r3, #0]
			break;
    3452:	46c0      	nop			; (mov r8, r8)
	}
}
    3454:	46c0      	nop			; (mov r8, r8)
    3456:	46bd      	mov	sp, r7
    3458:	bdb0      	pop	{r4, r5, r7, pc}
    345a:	46c0      	nop			; (mov r8, r8)
    345c:	20000120 	.word	0x20000120
    3460:	00009920 	.word	0x00009920
    3464:	00003865 	.word	0x00003865
    3468:	00003ad9 	.word	0x00003ad9

0000346c <flashy_flash2>:

void flashy_flash2()
{
    346c:	b5b0      	push	{r4, r5, r7, lr}
    346e:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
    3470:	4b8e      	ldr	r3, [pc, #568]	; (36ac <flashy_flash2+0x240>)
    3472:	781b      	ldrb	r3, [r3, #0]
    3474:	2b0a      	cmp	r3, #10
    3476:	d900      	bls.n	347a <flashy_flash2+0xe>
    3478:	e110      	b.n	369c <flashy_flash2+0x230>
    347a:	009a      	lsls	r2, r3, #2
    347c:	4b8c      	ldr	r3, [pc, #560]	; (36b0 <flashy_flash2+0x244>)
    347e:	18d3      	adds	r3, r2, r3
    3480:	681b      	ldr	r3, [r3, #0]
    3482:	469f      	mov	pc, r3
	{
		case 0:
			reset_all_lights();
    3484:	4b8b      	ldr	r3, [pc, #556]	; (36b4 <flashy_flash2+0x248>)
    3486:	4798      	blx	r3
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    3488:	2301      	movs	r3, #1
    348a:	2204      	movs	r2, #4
    348c:	2101      	movs	r1, #1
    348e:	2000      	movs	r0, #0
    3490:	4c89      	ldr	r4, [pc, #548]	; (36b8 <flashy_flash2+0x24c>)
    3492:	47a0      	blx	r4
			state++;
    3494:	4b85      	ldr	r3, [pc, #532]	; (36ac <flashy_flash2+0x240>)
    3496:	781b      	ldrb	r3, [r3, #0]
    3498:	3301      	adds	r3, #1
    349a:	b2da      	uxtb	r2, r3
    349c:	4b83      	ldr	r3, [pc, #524]	; (36ac <flashy_flash2+0x240>)
    349e:	701a      	strb	r2, [r3, #0]
			break;
    34a0:	e101      	b.n	36a6 <flashy_flash2+0x23a>
		case 1:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    34a2:	2300      	movs	r3, #0
    34a4:	2204      	movs	r2, #4
    34a6:	2101      	movs	r1, #1
    34a8:	2000      	movs	r0, #0
    34aa:	4c83      	ldr	r4, [pc, #524]	; (36b8 <flashy_flash2+0x24c>)
    34ac:	47a0      	blx	r4
			state++;
    34ae:	4b7f      	ldr	r3, [pc, #508]	; (36ac <flashy_flash2+0x240>)
    34b0:	781b      	ldrb	r3, [r3, #0]
    34b2:	3301      	adds	r3, #1
    34b4:	b2da      	uxtb	r2, r3
    34b6:	4b7d      	ldr	r3, [pc, #500]	; (36ac <flashy_flash2+0x240>)
    34b8:	701a      	strb	r2, [r3, #0]
			break;
    34ba:	e0f4      	b.n	36a6 <flashy_flash2+0x23a>
		case 2:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    34bc:	2301      	movs	r3, #1
    34be:	2204      	movs	r2, #4
    34c0:	2101      	movs	r1, #1
    34c2:	2000      	movs	r0, #0
    34c4:	4c7c      	ldr	r4, [pc, #496]	; (36b8 <flashy_flash2+0x24c>)
    34c6:	47a0      	blx	r4
			state++;
    34c8:	4b78      	ldr	r3, [pc, #480]	; (36ac <flashy_flash2+0x240>)
    34ca:	781b      	ldrb	r3, [r3, #0]
    34cc:	3301      	adds	r3, #1
    34ce:	b2da      	uxtb	r2, r3
    34d0:	4b76      	ldr	r3, [pc, #472]	; (36ac <flashy_flash2+0x240>)
    34d2:	701a      	strb	r2, [r3, #0]
			break;
    34d4:	e0e7      	b.n	36a6 <flashy_flash2+0x23a>
		case 3:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    34d6:	2300      	movs	r3, #0
    34d8:	2204      	movs	r2, #4
    34da:	2101      	movs	r1, #1
    34dc:	2000      	movs	r0, #0
    34de:	4c76      	ldr	r4, [pc, #472]	; (36b8 <flashy_flash2+0x24c>)
    34e0:	47a0      	blx	r4
			state++;
    34e2:	4b72      	ldr	r3, [pc, #456]	; (36ac <flashy_flash2+0x240>)
    34e4:	781b      	ldrb	r3, [r3, #0]
    34e6:	3301      	adds	r3, #1
    34e8:	b2da      	uxtb	r2, r3
    34ea:	4b70      	ldr	r3, [pc, #448]	; (36ac <flashy_flash2+0x240>)
    34ec:	701a      	strb	r2, [r3, #0]
			break;
    34ee:	e0da      	b.n	36a6 <flashy_flash2+0x23a>
		case 4:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    34f0:	2301      	movs	r3, #1
    34f2:	2204      	movs	r2, #4
    34f4:	2101      	movs	r1, #1
    34f6:	2000      	movs	r0, #0
    34f8:	4c6f      	ldr	r4, [pc, #444]	; (36b8 <flashy_flash2+0x24c>)
    34fa:	47a0      	blx	r4
			state++;
    34fc:	4b6b      	ldr	r3, [pc, #428]	; (36ac <flashy_flash2+0x240>)
    34fe:	781b      	ldrb	r3, [r3, #0]
    3500:	3301      	adds	r3, #1
    3502:	b2da      	uxtb	r2, r3
    3504:	4b69      	ldr	r3, [pc, #420]	; (36ac <flashy_flash2+0x240>)
    3506:	701a      	strb	r2, [r3, #0]
			break;
    3508:	e0cd      	b.n	36a6 <flashy_flash2+0x23a>
		case 5:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    350a:	2300      	movs	r3, #0
    350c:	2204      	movs	r2, #4
    350e:	2101      	movs	r1, #1
    3510:	2000      	movs	r0, #0
    3512:	4c69      	ldr	r4, [pc, #420]	; (36b8 <flashy_flash2+0x24c>)
    3514:	47a0      	blx	r4
			state++;
    3516:	4b65      	ldr	r3, [pc, #404]	; (36ac <flashy_flash2+0x240>)
    3518:	781b      	ldrb	r3, [r3, #0]
    351a:	3301      	adds	r3, #1
    351c:	b2da      	uxtb	r2, r3
    351e:	4b63      	ldr	r3, [pc, #396]	; (36ac <flashy_flash2+0x240>)
    3520:	701a      	strb	r2, [r3, #0]
			break;
    3522:	e0c0      	b.n	36a6 <flashy_flash2+0x23a>
		case 6:
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    3524:	2301      	movs	r3, #1
    3526:	2202      	movs	r2, #2
    3528:	2101      	movs	r1, #1
    352a:	2000      	movs	r0, #0
    352c:	4c62      	ldr	r4, [pc, #392]	; (36b8 <flashy_flash2+0x24c>)
    352e:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    3530:	2301      	movs	r3, #1
    3532:	2202      	movs	r2, #2
    3534:	2102      	movs	r1, #2
    3536:	2000      	movs	r0, #0
    3538:	4c5f      	ldr	r4, [pc, #380]	; (36b8 <flashy_flash2+0x24c>)
    353a:	47a0      	blx	r4
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    353c:	2301      	movs	r3, #1
    353e:	2201      	movs	r2, #1
    3540:	2103      	movs	r1, #3
    3542:	2000      	movs	r0, #0
    3544:	4c5c      	ldr	r4, [pc, #368]	; (36b8 <flashy_flash2+0x24c>)
    3546:	47a0      	blx	r4
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    3548:	2301      	movs	r3, #1
    354a:	2201      	movs	r2, #1
    354c:	2104      	movs	r1, #4
    354e:	2000      	movs	r0, #0
    3550:	4c59      	ldr	r4, [pc, #356]	; (36b8 <flashy_flash2+0x24c>)
    3552:	47a0      	blx	r4
			state++;
    3554:	4b55      	ldr	r3, [pc, #340]	; (36ac <flashy_flash2+0x240>)
    3556:	781b      	ldrb	r3, [r3, #0]
    3558:	3301      	adds	r3, #1
    355a:	b2da      	uxtb	r2, r3
    355c:	4b53      	ldr	r3, [pc, #332]	; (36ac <flashy_flash2+0x240>)
    355e:	701a      	strb	r2, [r3, #0]
			break;
    3560:	e0a1      	b.n	36a6 <flashy_flash2+0x23a>
		case 7:
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    3562:	2300      	movs	r3, #0
    3564:	2202      	movs	r2, #2
    3566:	2101      	movs	r1, #1
    3568:	2000      	movs	r0, #0
    356a:	4c53      	ldr	r4, [pc, #332]	; (36b8 <flashy_flash2+0x24c>)
    356c:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    356e:	2300      	movs	r3, #0
    3570:	2202      	movs	r2, #2
    3572:	2102      	movs	r1, #2
    3574:	2000      	movs	r0, #0
    3576:	4c50      	ldr	r4, [pc, #320]	; (36b8 <flashy_flash2+0x24c>)
    3578:	47a0      	blx	r4
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    357a:	2301      	movs	r3, #1
    357c:	2201      	movs	r2, #1
    357e:	2101      	movs	r1, #1
    3580:	2000      	movs	r0, #0
    3582:	4c4d      	ldr	r4, [pc, #308]	; (36b8 <flashy_flash2+0x24c>)
    3584:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    3586:	2301      	movs	r3, #1
    3588:	2201      	movs	r2, #1
    358a:	2102      	movs	r1, #2
    358c:	2000      	movs	r0, #0
    358e:	4c4a      	ldr	r4, [pc, #296]	; (36b8 <flashy_flash2+0x24c>)
    3590:	47a0      	blx	r4
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    3592:	2300      	movs	r3, #0
    3594:	2201      	movs	r2, #1
    3596:	2103      	movs	r1, #3
    3598:	2000      	movs	r0, #0
    359a:	4c47      	ldr	r4, [pc, #284]	; (36b8 <flashy_flash2+0x24c>)
    359c:	47a0      	blx	r4
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    359e:	2300      	movs	r3, #0
    35a0:	2201      	movs	r2, #1
    35a2:	2104      	movs	r1, #4
    35a4:	2000      	movs	r0, #0
    35a6:	4c44      	ldr	r4, [pc, #272]	; (36b8 <flashy_flash2+0x24c>)
    35a8:	47a0      	blx	r4
			state++;
    35aa:	4b40      	ldr	r3, [pc, #256]	; (36ac <flashy_flash2+0x240>)
    35ac:	781b      	ldrb	r3, [r3, #0]
    35ae:	3301      	adds	r3, #1
    35b0:	b2da      	uxtb	r2, r3
    35b2:	4b3e      	ldr	r3, [pc, #248]	; (36ac <flashy_flash2+0x240>)
    35b4:	701a      	strb	r2, [r3, #0]
			break;
    35b6:	e076      	b.n	36a6 <flashy_flash2+0x23a>
		case 8:
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    35b8:	2300      	movs	r3, #0
    35ba:	2201      	movs	r2, #1
    35bc:	2101      	movs	r1, #1
    35be:	2000      	movs	r0, #0
    35c0:	4c3d      	ldr	r4, [pc, #244]	; (36b8 <flashy_flash2+0x24c>)
    35c2:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    35c4:	2300      	movs	r3, #0
    35c6:	2201      	movs	r2, #1
    35c8:	2102      	movs	r1, #2
    35ca:	2000      	movs	r0, #0
    35cc:	4c3a      	ldr	r4, [pc, #232]	; (36b8 <flashy_flash2+0x24c>)
    35ce:	47a0      	blx	r4
			configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    35d0:	2301      	movs	r3, #1
    35d2:	2203      	movs	r2, #3
    35d4:	2101      	movs	r1, #1
    35d6:	2000      	movs	r0, #0
    35d8:	4c37      	ldr	r4, [pc, #220]	; (36b8 <flashy_flash2+0x24c>)
    35da:	47a0      	blx	r4
			configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    35dc:	2301      	movs	r3, #1
    35de:	2203      	movs	r2, #3
    35e0:	2102      	movs	r1, #2
    35e2:	2000      	movs	r0, #0
    35e4:	4c34      	ldr	r4, [pc, #208]	; (36b8 <flashy_flash2+0x24c>)
    35e6:	47a0      	blx	r4
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    35e8:	2301      	movs	r3, #1
    35ea:	2200      	movs	r2, #0
    35ec:	2103      	movs	r1, #3
    35ee:	2000      	movs	r0, #0
    35f0:	4c31      	ldr	r4, [pc, #196]	; (36b8 <flashy_flash2+0x24c>)
    35f2:	47a0      	blx	r4
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    35f4:	2301      	movs	r3, #1
    35f6:	2200      	movs	r2, #0
    35f8:	2104      	movs	r1, #4
    35fa:	2000      	movs	r0, #0
    35fc:	4c2e      	ldr	r4, [pc, #184]	; (36b8 <flashy_flash2+0x24c>)
    35fe:	47a0      	blx	r4
			state++;
    3600:	4b2a      	ldr	r3, [pc, #168]	; (36ac <flashy_flash2+0x240>)
    3602:	781b      	ldrb	r3, [r3, #0]
    3604:	3301      	adds	r3, #1
    3606:	b2da      	uxtb	r2, r3
    3608:	4b28      	ldr	r3, [pc, #160]	; (36ac <flashy_flash2+0x240>)
    360a:	701a      	strb	r2, [r3, #0]
			break;
    360c:	e04b      	b.n	36a6 <flashy_flash2+0x23a>
		case 9:
			configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    360e:	2300      	movs	r3, #0
    3610:	2203      	movs	r2, #3
    3612:	2101      	movs	r1, #1
    3614:	2000      	movs	r0, #0
    3616:	4c28      	ldr	r4, [pc, #160]	; (36b8 <flashy_flash2+0x24c>)
    3618:	47a0      	blx	r4
			configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    361a:	2300      	movs	r3, #0
    361c:	2203      	movs	r2, #3
    361e:	2102      	movs	r1, #2
    3620:	2000      	movs	r0, #0
    3622:	4c25      	ldr	r4, [pc, #148]	; (36b8 <flashy_flash2+0x24c>)
    3624:	47a0      	blx	r4
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    3626:	2301      	movs	r3, #1
    3628:	2201      	movs	r2, #1
    362a:	2101      	movs	r1, #1
    362c:	2000      	movs	r0, #0
    362e:	4c22      	ldr	r4, [pc, #136]	; (36b8 <flashy_flash2+0x24c>)
    3630:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    3632:	2301      	movs	r3, #1
    3634:	2201      	movs	r2, #1
    3636:	2102      	movs	r1, #2
    3638:	2000      	movs	r0, #0
    363a:	4c1f      	ldr	r4, [pc, #124]	; (36b8 <flashy_flash2+0x24c>)
    363c:	47a0      	blx	r4
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    363e:	2300      	movs	r3, #0
    3640:	2200      	movs	r2, #0
    3642:	2103      	movs	r1, #3
    3644:	2000      	movs	r0, #0
    3646:	4c1c      	ldr	r4, [pc, #112]	; (36b8 <flashy_flash2+0x24c>)
    3648:	47a0      	blx	r4
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    364a:	2300      	movs	r3, #0
    364c:	2200      	movs	r2, #0
    364e:	2104      	movs	r1, #4
    3650:	2000      	movs	r0, #0
    3652:	4c19      	ldr	r4, [pc, #100]	; (36b8 <flashy_flash2+0x24c>)
    3654:	47a0      	blx	r4
			state++;
    3656:	4b15      	ldr	r3, [pc, #84]	; (36ac <flashy_flash2+0x240>)
    3658:	781b      	ldrb	r3, [r3, #0]
    365a:	3301      	adds	r3, #1
    365c:	b2da      	uxtb	r2, r3
    365e:	4b13      	ldr	r3, [pc, #76]	; (36ac <flashy_flash2+0x240>)
    3660:	701a      	strb	r2, [r3, #0]
			break;
    3662:	e020      	b.n	36a6 <flashy_flash2+0x23a>
		case 10:
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    3664:	2300      	movs	r3, #0
    3666:	2201      	movs	r2, #1
    3668:	2101      	movs	r1, #1
    366a:	2000      	movs	r0, #0
    366c:	4c12      	ldr	r4, [pc, #72]	; (36b8 <flashy_flash2+0x24c>)
    366e:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    3670:	2300      	movs	r3, #0
    3672:	2201      	movs	r2, #1
    3674:	2102      	movs	r1, #2
    3676:	2000      	movs	r0, #0
    3678:	4c0f      	ldr	r4, [pc, #60]	; (36b8 <flashy_flash2+0x24c>)
    367a:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    367c:	2301      	movs	r3, #1
    367e:	2202      	movs	r2, #2
    3680:	2101      	movs	r1, #1
    3682:	2000      	movs	r0, #0
    3684:	4c0c      	ldr	r4, [pc, #48]	; (36b8 <flashy_flash2+0x24c>)
    3686:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    3688:	2301      	movs	r3, #1
    368a:	2202      	movs	r2, #2
    368c:	2102      	movs	r1, #2
    368e:	2000      	movs	r0, #0
    3690:	4c09      	ldr	r4, [pc, #36]	; (36b8 <flashy_flash2+0x24c>)
    3692:	47a0      	blx	r4
			state = 0;
    3694:	4b05      	ldr	r3, [pc, #20]	; (36ac <flashy_flash2+0x240>)
    3696:	2200      	movs	r2, #0
    3698:	701a      	strb	r2, [r3, #0]
			break;
    369a:	e004      	b.n	36a6 <flashy_flash2+0x23a>
		default:
			reset_all_lights();
    369c:	4b05      	ldr	r3, [pc, #20]	; (36b4 <flashy_flash2+0x248>)
    369e:	4798      	blx	r3
			state = 0;
    36a0:	4b02      	ldr	r3, [pc, #8]	; (36ac <flashy_flash2+0x240>)
    36a2:	2200      	movs	r2, #0
    36a4:	701a      	strb	r2, [r3, #0]
	}
}
    36a6:	46c0      	nop			; (mov r8, r8)
    36a8:	46bd      	mov	sp, r7
    36aa:	bdb0      	pop	{r4, r5, r7, pc}
    36ac:	20000121 	.word	0x20000121
    36b0:	00009970 	.word	0x00009970
    36b4:	00003865 	.word	0x00003865
    36b8:	00003ad9 	.word	0x00003ad9

000036bc <flashy_fades>:

void flashy_fades()
{
    36bc:	b5b0      	push	{r4, r5, r7, lr}
    36be:	af00      	add	r7, sp, #0
	static uint8_t pwm_val = 0;
	static uint8_t duty_cycle = 10;
	
	if (pwm_val > duty_cycle)
    36c0:	4b65      	ldr	r3, [pc, #404]	; (3858 <flashy_fades+0x19c>)
    36c2:	781a      	ldrb	r2, [r3, #0]
    36c4:	4b65      	ldr	r3, [pc, #404]	; (385c <flashy_fades+0x1a0>)
    36c6:	781b      	ldrb	r3, [r3, #0]
    36c8:	429a      	cmp	r2, r3
    36ca:	d954      	bls.n	3776 <flashy_fades+0xba>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    36cc:	2301      	movs	r3, #1
    36ce:	2200      	movs	r2, #0
    36d0:	2101      	movs	r1, #1
    36d2:	2000      	movs	r0, #0
    36d4:	4c62      	ldr	r4, [pc, #392]	; (3860 <flashy_fades+0x1a4>)
    36d6:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    36d8:	2301      	movs	r3, #1
    36da:	2200      	movs	r2, #0
    36dc:	2102      	movs	r1, #2
    36de:	2000      	movs	r0, #0
    36e0:	4c5f      	ldr	r4, [pc, #380]	; (3860 <flashy_fades+0x1a4>)
    36e2:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    36e4:	2301      	movs	r3, #1
    36e6:	2200      	movs	r2, #0
    36e8:	2103      	movs	r1, #3
    36ea:	2000      	movs	r0, #0
    36ec:	4c5c      	ldr	r4, [pc, #368]	; (3860 <flashy_fades+0x1a4>)
    36ee:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    36f0:	2301      	movs	r3, #1
    36f2:	2200      	movs	r2, #0
    36f4:	2104      	movs	r1, #4
    36f6:	2000      	movs	r0, #0
    36f8:	4c59      	ldr	r4, [pc, #356]	; (3860 <flashy_fades+0x1a4>)
    36fa:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    36fc:	2301      	movs	r3, #1
    36fe:	2201      	movs	r2, #1
    3700:	2102      	movs	r1, #2
    3702:	2000      	movs	r0, #0
    3704:	4c56      	ldr	r4, [pc, #344]	; (3860 <flashy_fades+0x1a4>)
    3706:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    3708:	2301      	movs	r3, #1
    370a:	2201      	movs	r2, #1
    370c:	2101      	movs	r1, #1
    370e:	2000      	movs	r0, #0
    3710:	4c53      	ldr	r4, [pc, #332]	; (3860 <flashy_fades+0x1a4>)
    3712:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    3714:	2301      	movs	r3, #1
    3716:	2202      	movs	r2, #2
    3718:	2102      	movs	r1, #2
    371a:	2000      	movs	r0, #0
    371c:	4c50      	ldr	r4, [pc, #320]	; (3860 <flashy_fades+0x1a4>)
    371e:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    3720:	2301      	movs	r3, #1
    3722:	2202      	movs	r2, #2
    3724:	2101      	movs	r1, #1
    3726:	2000      	movs	r0, #0
    3728:	4c4d      	ldr	r4, [pc, #308]	; (3860 <flashy_fades+0x1a4>)
    372a:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    372c:	2301      	movs	r3, #1
    372e:	2202      	movs	r2, #2
    3730:	2104      	movs	r1, #4
    3732:	2000      	movs	r0, #0
    3734:	4c4a      	ldr	r4, [pc, #296]	; (3860 <flashy_fades+0x1a4>)
    3736:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    3738:	2301      	movs	r3, #1
    373a:	2202      	movs	r2, #2
    373c:	2103      	movs	r1, #3
    373e:	2000      	movs	r0, #0
    3740:	4c47      	ldr	r4, [pc, #284]	; (3860 <flashy_fades+0x1a4>)
    3742:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    3744:	2301      	movs	r3, #1
    3746:	2201      	movs	r2, #1
    3748:	2103      	movs	r1, #3
    374a:	2000      	movs	r0, #0
    374c:	4c44      	ldr	r4, [pc, #272]	; (3860 <flashy_fades+0x1a4>)
    374e:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    3750:	2301      	movs	r3, #1
    3752:	2201      	movs	r2, #1
    3754:	2104      	movs	r1, #4
    3756:	2000      	movs	r0, #0
    3758:	4c41      	ldr	r4, [pc, #260]	; (3860 <flashy_fades+0x1a4>)
    375a:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    375c:	2301      	movs	r3, #1
    375e:	2203      	movs	r2, #3
    3760:	2102      	movs	r1, #2
    3762:	2000      	movs	r0, #0
    3764:	4c3e      	ldr	r4, [pc, #248]	; (3860 <flashy_fades+0x1a4>)
    3766:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    3768:	2301      	movs	r3, #1
    376a:	2203      	movs	r2, #3
    376c:	2101      	movs	r1, #1
    376e:	2000      	movs	r0, #0
    3770:	4c3b      	ldr	r4, [pc, #236]	; (3860 <flashy_fades+0x1a4>)
    3772:	47a0      	blx	r4
    3774:	e053      	b.n	381e <flashy_fades+0x162>
	}
	else
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,false);
    3776:	2300      	movs	r3, #0
    3778:	2200      	movs	r2, #0
    377a:	2101      	movs	r1, #1
    377c:	2000      	movs	r0, #0
    377e:	4c38      	ldr	r4, [pc, #224]	; (3860 <flashy_fades+0x1a4>)
    3780:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,false);
    3782:	2300      	movs	r3, #0
    3784:	2200      	movs	r2, #0
    3786:	2102      	movs	r1, #2
    3788:	2000      	movs	r0, #0
    378a:	4c35      	ldr	r4, [pc, #212]	; (3860 <flashy_fades+0x1a4>)
    378c:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    378e:	2300      	movs	r3, #0
    3790:	2200      	movs	r2, #0
    3792:	2103      	movs	r1, #3
    3794:	2000      	movs	r0, #0
    3796:	4c32      	ldr	r4, [pc, #200]	; (3860 <flashy_fades+0x1a4>)
    3798:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    379a:	2300      	movs	r3, #0
    379c:	2200      	movs	r2, #0
    379e:	2104      	movs	r1, #4
    37a0:	2000      	movs	r0, #0
    37a2:	4c2f      	ldr	r4, [pc, #188]	; (3860 <flashy_fades+0x1a4>)
    37a4:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    37a6:	2300      	movs	r3, #0
    37a8:	2201      	movs	r2, #1
    37aa:	2102      	movs	r1, #2
    37ac:	2000      	movs	r0, #0
    37ae:	4c2c      	ldr	r4, [pc, #176]	; (3860 <flashy_fades+0x1a4>)
    37b0:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    37b2:	2300      	movs	r3, #0
    37b4:	2201      	movs	r2, #1
    37b6:	2101      	movs	r1, #1
    37b8:	2000      	movs	r0, #0
    37ba:	4c29      	ldr	r4, [pc, #164]	; (3860 <flashy_fades+0x1a4>)
    37bc:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    37be:	2300      	movs	r3, #0
    37c0:	2202      	movs	r2, #2
    37c2:	2102      	movs	r1, #2
    37c4:	2000      	movs	r0, #0
    37c6:	4c26      	ldr	r4, [pc, #152]	; (3860 <flashy_fades+0x1a4>)
    37c8:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    37ca:	2300      	movs	r3, #0
    37cc:	2202      	movs	r2, #2
    37ce:	2101      	movs	r1, #1
    37d0:	2000      	movs	r0, #0
    37d2:	4c23      	ldr	r4, [pc, #140]	; (3860 <flashy_fades+0x1a4>)
    37d4:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,false);
    37d6:	2300      	movs	r3, #0
    37d8:	2202      	movs	r2, #2
    37da:	2104      	movs	r1, #4
    37dc:	2000      	movs	r0, #0
    37de:	4c20      	ldr	r4, [pc, #128]	; (3860 <flashy_fades+0x1a4>)
    37e0:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,false);
    37e2:	2300      	movs	r3, #0
    37e4:	2202      	movs	r2, #2
    37e6:	2103      	movs	r1, #3
    37e8:	2000      	movs	r0, #0
    37ea:	4c1d      	ldr	r4, [pc, #116]	; (3860 <flashy_fades+0x1a4>)
    37ec:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    37ee:	2300      	movs	r3, #0
    37f0:	2201      	movs	r2, #1
    37f2:	2103      	movs	r1, #3
    37f4:	2000      	movs	r0, #0
    37f6:	4c1a      	ldr	r4, [pc, #104]	; (3860 <flashy_fades+0x1a4>)
    37f8:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    37fa:	2300      	movs	r3, #0
    37fc:	2201      	movs	r2, #1
    37fe:	2104      	movs	r1, #4
    3800:	2000      	movs	r0, #0
    3802:	4c17      	ldr	r4, [pc, #92]	; (3860 <flashy_fades+0x1a4>)
    3804:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    3806:	2300      	movs	r3, #0
    3808:	2203      	movs	r2, #3
    380a:	2102      	movs	r1, #2
    380c:	2000      	movs	r0, #0
    380e:	4c14      	ldr	r4, [pc, #80]	; (3860 <flashy_fades+0x1a4>)
    3810:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    3812:	2300      	movs	r3, #0
    3814:	2203      	movs	r2, #3
    3816:	2101      	movs	r1, #1
    3818:	2000      	movs	r0, #0
    381a:	4c11      	ldr	r4, [pc, #68]	; (3860 <flashy_fades+0x1a4>)
    381c:	47a0      	blx	r4
	}
	
	pwm_val++;
    381e:	4b0e      	ldr	r3, [pc, #56]	; (3858 <flashy_fades+0x19c>)
    3820:	781b      	ldrb	r3, [r3, #0]
    3822:	3301      	adds	r3, #1
    3824:	b2da      	uxtb	r2, r3
    3826:	4b0c      	ldr	r3, [pc, #48]	; (3858 <flashy_fades+0x19c>)
    3828:	701a      	strb	r2, [r3, #0]
	if (pwm_val >= PWM_FREQ)
    382a:	4b0b      	ldr	r3, [pc, #44]	; (3858 <flashy_fades+0x19c>)
    382c:	781b      	ldrb	r3, [r3, #0]
    382e:	2bc7      	cmp	r3, #199	; 0xc7
    3830:	d90f      	bls.n	3852 <flashy_fades+0x196>
	{
		pwm_val = 0;
    3832:	4b09      	ldr	r3, [pc, #36]	; (3858 <flashy_fades+0x19c>)
    3834:	2200      	movs	r2, #0
    3836:	701a      	strb	r2, [r3, #0]
		duty_cycle += 10;
    3838:	4b08      	ldr	r3, [pc, #32]	; (385c <flashy_fades+0x1a0>)
    383a:	781b      	ldrb	r3, [r3, #0]
    383c:	330a      	adds	r3, #10
    383e:	b2da      	uxtb	r2, r3
    3840:	4b06      	ldr	r3, [pc, #24]	; (385c <flashy_fades+0x1a0>)
    3842:	701a      	strb	r2, [r3, #0]
		if (duty_cycle >= PWM_FREQ)
    3844:	4b05      	ldr	r3, [pc, #20]	; (385c <flashy_fades+0x1a0>)
    3846:	781b      	ldrb	r3, [r3, #0]
    3848:	2bc7      	cmp	r3, #199	; 0xc7
    384a:	d902      	bls.n	3852 <flashy_fades+0x196>
		{
			duty_cycle = 10;
    384c:	4b03      	ldr	r3, [pc, #12]	; (385c <flashy_fades+0x1a0>)
    384e:	220a      	movs	r2, #10
    3850:	701a      	strb	r2, [r3, #0]
		}
	}
	
}
    3852:	46c0      	nop			; (mov r8, r8)
    3854:	46bd      	mov	sp, r7
    3856:	bdb0      	pop	{r4, r5, r7, pc}
    3858:	20000122 	.word	0x20000122
    385c:	20000090 	.word	0x20000090
    3860:	00003ad9 	.word	0x00003ad9

00003864 <reset_all_lights>:

void reset_all_lights()
{
    3864:	b580      	push	{r7, lr}
    3866:	b082      	sub	sp, #8
    3868:	af00      	add	r7, sp, #0
	for (int i=0;i<8;i++)
    386a:	2300      	movs	r3, #0
    386c:	607b      	str	r3, [r7, #4]
    386e:	e00d      	b.n	388c <reset_all_lights+0x28>
	{
		data_LED[0][i] = 0x80;
    3870:	4a0a      	ldr	r2, [pc, #40]	; (389c <reset_all_lights+0x38>)
    3872:	687b      	ldr	r3, [r7, #4]
    3874:	18d3      	adds	r3, r2, r3
    3876:	2280      	movs	r2, #128	; 0x80
    3878:	701a      	strb	r2, [r3, #0]
		data_LED[1][i] = 0x80;
    387a:	4a08      	ldr	r2, [pc, #32]	; (389c <reset_all_lights+0x38>)
    387c:	687b      	ldr	r3, [r7, #4]
    387e:	18d3      	adds	r3, r2, r3
    3880:	3308      	adds	r3, #8
    3882:	2280      	movs	r2, #128	; 0x80
    3884:	701a      	strb	r2, [r3, #0]
	
}

void reset_all_lights()
{
	for (int i=0;i<8;i++)
    3886:	687b      	ldr	r3, [r7, #4]
    3888:	3301      	adds	r3, #1
    388a:	607b      	str	r3, [r7, #4]
    388c:	687b      	ldr	r3, [r7, #4]
    388e:	2b07      	cmp	r3, #7
    3890:	ddee      	ble.n	3870 <reset_all_lights+0xc>
	{
		data_LED[0][i] = 0x80;
		data_LED[1][i] = 0x80;
	}
}
    3892:	46c0      	nop			; (mov r8, r8)
    3894:	46bd      	mov	sp, r7
    3896:	b002      	add	sp, #8
    3898:	bd80      	pop	{r7, pc}
    389a:	46c0      	nop			; (mov r8, r8)
    389c:	2000019c 	.word	0x2000019c

000038a0 <a_okay>:

bool a_okay()
{
    38a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    38a2:	464f      	mov	r7, r9
    38a4:	4646      	mov	r6, r8
    38a6:	b4c0      	push	{r6, r7}
    38a8:	b095      	sub	sp, #84	; 0x54
    38aa:	af06      	add	r7, sp, #24
	char buffer[32];
	uint8_t states[8];
	mcp23017_read_all_ports(read_data,states);
    38ac:	2308      	movs	r3, #8
    38ae:	18fa      	adds	r2, r7, r3
    38b0:	4b81      	ldr	r3, [pc, #516]	; (3ab8 <a_okay+0x218>)
    38b2:	0011      	movs	r1, r2
    38b4:	0018      	movs	r0, r3
    38b6:	4b81      	ldr	r3, [pc, #516]	; (3abc <a_okay+0x21c>)
    38b8:	4798      	blx	r3
	
	bool return_val = true;
    38ba:	232f      	movs	r3, #47	; 0x2f
    38bc:	2208      	movs	r2, #8
    38be:	4694      	mov	ip, r2
    38c0:	44bc      	add	ip, r7
    38c2:	4463      	add	r3, ip
    38c4:	2201      	movs	r2, #1
    38c6:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
    38c8:	2300      	movs	r3, #0
    38ca:	633b      	str	r3, [r7, #48]	; 0x30
    38cc:	e0a2      	b.n	3a14 <a_okay+0x174>
	{
		if (mcp23017_data.devices[i].should_be_enabled)
    38ce:	4b7c      	ldr	r3, [pc, #496]	; (3ac0 <a_okay+0x220>)
    38d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    38d2:	0112      	lsls	r2, r2, #4
    38d4:	5cd3      	ldrb	r3, [r2, r3]
    38d6:	2b00      	cmp	r3, #0
    38d8:	d06e      	beq.n	39b8 <a_okay+0x118>
		{
			mcp23017_data.devices[i].output_errors.ports[0] = mcp23017_data.devices[i].outputs.ports[0] - read_data[0][i];
    38da:	4a79      	ldr	r2, [pc, #484]	; (3ac0 <a_okay+0x220>)
    38dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38de:	011b      	lsls	r3, r3, #4
    38e0:	18d3      	adds	r3, r2, r3
    38e2:	3308      	adds	r3, #8
    38e4:	781a      	ldrb	r2, [r3, #0]
    38e6:	4974      	ldr	r1, [pc, #464]	; (3ab8 <a_okay+0x218>)
    38e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38ea:	18cb      	adds	r3, r1, r3
    38ec:	781b      	ldrb	r3, [r3, #0]
    38ee:	1ad3      	subs	r3, r2, r3
    38f0:	b2d9      	uxtb	r1, r3
    38f2:	4a73      	ldr	r2, [pc, #460]	; (3ac0 <a_okay+0x220>)
    38f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38f6:	011b      	lsls	r3, r3, #4
    38f8:	18d3      	adds	r3, r2, r3
    38fa:	330c      	adds	r3, #12
    38fc:	1c0a      	adds	r2, r1, #0
    38fe:	701a      	strb	r2, [r3, #0]
			mcp23017_data.devices[i].output_errors.ports[1] = mcp23017_data.devices[i].outputs.ports[1] - read_data[1][i];
    3900:	4a6f      	ldr	r2, [pc, #444]	; (3ac0 <a_okay+0x220>)
    3902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3904:	011b      	lsls	r3, r3, #4
    3906:	18d3      	adds	r3, r2, r3
    3908:	3309      	adds	r3, #9
    390a:	781a      	ldrb	r2, [r3, #0]
    390c:	496a      	ldr	r1, [pc, #424]	; (3ab8 <a_okay+0x218>)
    390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3910:	18cb      	adds	r3, r1, r3
    3912:	3308      	adds	r3, #8
    3914:	781b      	ldrb	r3, [r3, #0]
    3916:	1ad3      	subs	r3, r2, r3
    3918:	b2d9      	uxtb	r1, r3
    391a:	4a69      	ldr	r2, [pc, #420]	; (3ac0 <a_okay+0x220>)
    391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    391e:	011b      	lsls	r3, r3, #4
    3920:	18d3      	adds	r3, r2, r3
    3922:	330d      	adds	r3, #13
    3924:	1c0a      	adds	r2, r1, #0
    3926:	701a      	strb	r2, [r3, #0]
			
			if ((mcp23017_data.devices[i].output_errors.ports[0] + mcp23017_data.devices[i].output_errors.ports[1]) > 0)
    3928:	4a65      	ldr	r2, [pc, #404]	; (3ac0 <a_okay+0x220>)
    392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    392c:	011b      	lsls	r3, r3, #4
    392e:	18d3      	adds	r3, r2, r3
    3930:	330c      	adds	r3, #12
    3932:	781b      	ldrb	r3, [r3, #0]
    3934:	0019      	movs	r1, r3
    3936:	4a62      	ldr	r2, [pc, #392]	; (3ac0 <a_okay+0x220>)
    3938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    393a:	011b      	lsls	r3, r3, #4
    393c:	18d3      	adds	r3, r2, r3
    393e:	330d      	adds	r3, #13
    3940:	781b      	ldrb	r3, [r3, #0]
    3942:	18cb      	adds	r3, r1, r3
    3944:	2b00      	cmp	r3, #0
    3946:	dd06      	ble.n	3956 <a_okay+0xb6>
			{
				mcp23017_data.devices[i].error_detected = true;
    3948:	4a5d      	ldr	r2, [pc, #372]	; (3ac0 <a_okay+0x220>)
    394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    394c:	011b      	lsls	r3, r3, #4
    394e:	18d3      	adds	r3, r2, r3
    3950:	3302      	adds	r3, #2
    3952:	2201      	movs	r2, #1
    3954:	701a      	strb	r2, [r3, #0]
			}
			
			if ((read_data[0][i] & ~0x80) != (mcp23017_data.devices[i].outputs.ports[0] & ~0x80))
    3956:	4a58      	ldr	r2, [pc, #352]	; (3ab8 <a_okay+0x218>)
    3958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    395a:	18d3      	adds	r3, r2, r3
    395c:	781a      	ldrb	r2, [r3, #0]
    395e:	4958      	ldr	r1, [pc, #352]	; (3ac0 <a_okay+0x220>)
    3960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3962:	011b      	lsls	r3, r3, #4
    3964:	18cb      	adds	r3, r1, r3
    3966:	3308      	adds	r3, #8
    3968:	781b      	ldrb	r3, [r3, #0]
    396a:	4053      	eors	r3, r2
    396c:	b2db      	uxtb	r3, r3
    396e:	001a      	movs	r2, r3
    3970:	2380      	movs	r3, #128	; 0x80
    3972:	439a      	bics	r2, r3
    3974:	1e13      	subs	r3, r2, #0
    3976:	d006      	beq.n	3986 <a_okay+0xe6>
			{
				return_val = false;
    3978:	232f      	movs	r3, #47	; 0x2f
    397a:	2208      	movs	r2, #8
    397c:	4694      	mov	ip, r2
    397e:	44bc      	add	ip, r7
    3980:	4463      	add	r3, ip
    3982:	2200      	movs	r2, #0
    3984:	701a      	strb	r2, [r3, #0]
			}
			if ((read_data[1][i] & ~0x80) != (mcp23017_data.devices[i].outputs.ports[1] & ~0x80))
    3986:	4a4c      	ldr	r2, [pc, #304]	; (3ab8 <a_okay+0x218>)
    3988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    398a:	18d3      	adds	r3, r2, r3
    398c:	3308      	adds	r3, #8
    398e:	781a      	ldrb	r2, [r3, #0]
    3990:	494b      	ldr	r1, [pc, #300]	; (3ac0 <a_okay+0x220>)
    3992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3994:	011b      	lsls	r3, r3, #4
    3996:	18cb      	adds	r3, r1, r3
    3998:	3309      	adds	r3, #9
    399a:	781b      	ldrb	r3, [r3, #0]
    399c:	4053      	eors	r3, r2
    399e:	b2db      	uxtb	r3, r3
    39a0:	001a      	movs	r2, r3
    39a2:	2380      	movs	r3, #128	; 0x80
    39a4:	439a      	bics	r2, r3
    39a6:	1e13      	subs	r3, r2, #0
    39a8:	d006      	beq.n	39b8 <a_okay+0x118>
			{
				return_val = false;
    39aa:	232f      	movs	r3, #47	; 0x2f
    39ac:	2208      	movs	r2, #8
    39ae:	4694      	mov	ip, r2
    39b0:	44bc      	add	ip, r7
    39b2:	4463      	add	r3, ip
    39b4:	2200      	movs	r2, #0
    39b6:	701a      	strb	r2, [r3, #0]
			}
		}
		mcp23017_data.devices[i].status = states[i];
    39b8:	2308      	movs	r3, #8
    39ba:	18fa      	adds	r2, r7, r3
    39bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39be:	18d3      	adds	r3, r2, r3
    39c0:	7819      	ldrb	r1, [r3, #0]
    39c2:	4a3f      	ldr	r2, [pc, #252]	; (3ac0 <a_okay+0x220>)
    39c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39c6:	011b      	lsls	r3, r3, #4
    39c8:	18d3      	adds	r3, r2, r3
    39ca:	3303      	adds	r3, #3
    39cc:	1c0a      	adds	r2, r1, #0
    39ce:	701a      	strb	r2, [r3, #0]
		sprintf(buffer,"ADDR: %d -> %d\n",i,mcp23017_data.devices[i].status);
    39d0:	4a3b      	ldr	r2, [pc, #236]	; (3ac0 <a_okay+0x220>)
    39d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39d4:	011b      	lsls	r3, r3, #4
    39d6:	18d3      	adds	r3, r2, r3
    39d8:	3303      	adds	r3, #3
    39da:	781b      	ldrb	r3, [r3, #0]
    39dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    39de:	4939      	ldr	r1, [pc, #228]	; (3ac4 <a_okay+0x224>)
    39e0:	2008      	movs	r0, #8
    39e2:	2408      	movs	r4, #8
    39e4:	46a4      	mov	ip, r4
    39e6:	44bc      	add	ip, r7
    39e8:	4460      	add	r0, ip
    39ea:	4c37      	ldr	r4, [pc, #220]	; (3ac8 <a_okay+0x228>)
    39ec:	47a0      	blx	r4
		ble_uart_write(buffer);
    39ee:	2308      	movs	r3, #8
    39f0:	2208      	movs	r2, #8
    39f2:	4694      	mov	ip, r2
    39f4:	44bc      	add	ip, r7
    39f6:	4463      	add	r3, ip
    39f8:	0018      	movs	r0, r3
    39fa:	4b34      	ldr	r3, [pc, #208]	; (3acc <a_okay+0x22c>)
    39fc:	4798      	blx	r3
		uart_write(buffer);
    39fe:	2308      	movs	r3, #8
    3a00:	2208      	movs	r2, #8
    3a02:	4694      	mov	ip, r2
    3a04:	44bc      	add	ip, r7
    3a06:	4463      	add	r3, ip
    3a08:	0018      	movs	r0, r3
    3a0a:	4b31      	ldr	r3, [pc, #196]	; (3ad0 <a_okay+0x230>)
    3a0c:	4798      	blx	r3
	char buffer[32];
	uint8_t states[8];
	mcp23017_read_all_ports(read_data,states);
	
	bool return_val = true;
	for (int i=0;i<8;i++)
    3a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3a10:	3301      	adds	r3, #1
    3a12:	633b      	str	r3, [r7, #48]	; 0x30
    3a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3a16:	2b07      	cmp	r3, #7
    3a18:	dc00      	bgt.n	3a1c <a_okay+0x17c>
    3a1a:	e758      	b.n	38ce <a_okay+0x2e>
		mcp23017_data.devices[i].status = states[i];
		sprintf(buffer,"ADDR: %d -> %d\n",i,mcp23017_data.devices[i].status);
		ble_uart_write(buffer);
		uart_write(buffer);
	}
	sprintf(buffer,"ERR: %d%d%d%d%d%d%d%d\r\n",mcp23017_data.devices[7].error_detected,mcp23017_data.devices[6].error_detected,mcp23017_data.devices[5].error_detected,mcp23017_data.devices[4].error_detected,mcp23017_data.devices[3].error_detected,mcp23017_data.devices[2].error_detected,mcp23017_data.devices[1].error_detected,mcp23017_data.devices[0].error_detected);
    3a1c:	4b28      	ldr	r3, [pc, #160]	; (3ac0 <a_okay+0x220>)
    3a1e:	2272      	movs	r2, #114	; 0x72
    3a20:	5c9b      	ldrb	r3, [r3, r2]
    3a22:	607b      	str	r3, [r7, #4]
    3a24:	4b26      	ldr	r3, [pc, #152]	; (3ac0 <a_okay+0x220>)
    3a26:	2262      	movs	r2, #98	; 0x62
    3a28:	5c9b      	ldrb	r3, [r3, r2]
    3a2a:	603b      	str	r3, [r7, #0]
    3a2c:	4b24      	ldr	r3, [pc, #144]	; (3ac0 <a_okay+0x220>)
    3a2e:	2252      	movs	r2, #82	; 0x52
    3a30:	5c9b      	ldrb	r3, [r3, r2]
    3a32:	001c      	movs	r4, r3
    3a34:	4b22      	ldr	r3, [pc, #136]	; (3ac0 <a_okay+0x220>)
    3a36:	2242      	movs	r2, #66	; 0x42
    3a38:	5c9b      	ldrb	r3, [r3, r2]
    3a3a:	001d      	movs	r5, r3
    3a3c:	4b20      	ldr	r3, [pc, #128]	; (3ac0 <a_okay+0x220>)
    3a3e:	2232      	movs	r2, #50	; 0x32
    3a40:	5c9b      	ldrb	r3, [r3, r2]
    3a42:	001e      	movs	r6, r3
    3a44:	4b1e      	ldr	r3, [pc, #120]	; (3ac0 <a_okay+0x220>)
    3a46:	2222      	movs	r2, #34	; 0x22
    3a48:	5c9b      	ldrb	r3, [r3, r2]
    3a4a:	001a      	movs	r2, r3
    3a4c:	4b1c      	ldr	r3, [pc, #112]	; (3ac0 <a_okay+0x220>)
    3a4e:	7c9b      	ldrb	r3, [r3, #18]
    3a50:	469c      	mov	ip, r3
    3a52:	4b1b      	ldr	r3, [pc, #108]	; (3ac0 <a_okay+0x220>)
    3a54:	789b      	ldrb	r3, [r3, #2]
    3a56:	4699      	mov	r9, r3
    3a58:	491e      	ldr	r1, [pc, #120]	; (3ad4 <a_okay+0x234>)
    3a5a:	2008      	movs	r0, #8
    3a5c:	2308      	movs	r3, #8
    3a5e:	4698      	mov	r8, r3
    3a60:	44b8      	add	r8, r7
    3a62:	4440      	add	r0, r8
    3a64:	464b      	mov	r3, r9
    3a66:	9305      	str	r3, [sp, #20]
    3a68:	4663      	mov	r3, ip
    3a6a:	9304      	str	r3, [sp, #16]
    3a6c:	9203      	str	r2, [sp, #12]
    3a6e:	9602      	str	r6, [sp, #8]
    3a70:	9501      	str	r5, [sp, #4]
    3a72:	9400      	str	r4, [sp, #0]
    3a74:	683b      	ldr	r3, [r7, #0]
    3a76:	687a      	ldr	r2, [r7, #4]
    3a78:	4c13      	ldr	r4, [pc, #76]	; (3ac8 <a_okay+0x228>)
    3a7a:	47a0      	blx	r4
	ble_uart_write(buffer);
    3a7c:	2308      	movs	r3, #8
    3a7e:	2208      	movs	r2, #8
    3a80:	4694      	mov	ip, r2
    3a82:	44bc      	add	ip, r7
    3a84:	4463      	add	r3, ip
    3a86:	0018      	movs	r0, r3
    3a88:	4b10      	ldr	r3, [pc, #64]	; (3acc <a_okay+0x22c>)
    3a8a:	4798      	blx	r3
	uart_write(buffer);
    3a8c:	2308      	movs	r3, #8
    3a8e:	2208      	movs	r2, #8
    3a90:	4694      	mov	ip, r2
    3a92:	44bc      	add	ip, r7
    3a94:	4463      	add	r3, ip
    3a96:	0018      	movs	r0, r3
    3a98:	4b0d      	ldr	r3, [pc, #52]	; (3ad0 <a_okay+0x230>)
    3a9a:	4798      	blx	r3
	
	return return_val;
    3a9c:	232f      	movs	r3, #47	; 0x2f
    3a9e:	2208      	movs	r2, #8
    3aa0:	4694      	mov	ip, r2
    3aa2:	44bc      	add	ip, r7
    3aa4:	4463      	add	r3, ip
    3aa6:	781b      	ldrb	r3, [r3, #0]
}
    3aa8:	0018      	movs	r0, r3
    3aaa:	46bd      	mov	sp, r7
    3aac:	b00f      	add	sp, #60	; 0x3c
    3aae:	bc0c      	pop	{r2, r3}
    3ab0:	4690      	mov	r8, r2
    3ab2:	4699      	mov	r9, r3
    3ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ab6:	46c0      	nop			; (mov r8, r8)
    3ab8:	20000248 	.word	0x20000248
    3abc:	0000412d 	.word	0x0000412d
    3ac0:	20000010 	.word	0x20000010
    3ac4:	000098f8 	.word	0x000098f8
    3ac8:	0000828d 	.word	0x0000828d
    3acc:	0000202d 	.word	0x0000202d
    3ad0:	00005095 	.word	0x00005095
    3ad4:	00009908 	.word	0x00009908

00003ad8 <configure_pin>:

void configure_pin(uint8_t port, uint8_t addr, uint8_t pin, bool value)
{
    3ad8:	b5b0      	push	{r4, r5, r7, lr}
    3ada:	b082      	sub	sp, #8
    3adc:	af00      	add	r7, sp, #0
    3ade:	0005      	movs	r5, r0
    3ae0:	000c      	movs	r4, r1
    3ae2:	0010      	movs	r0, r2
    3ae4:	0019      	movs	r1, r3
    3ae6:	1dfb      	adds	r3, r7, #7
    3ae8:	1c2a      	adds	r2, r5, #0
    3aea:	701a      	strb	r2, [r3, #0]
    3aec:	1dbb      	adds	r3, r7, #6
    3aee:	1c22      	adds	r2, r4, #0
    3af0:	701a      	strb	r2, [r3, #0]
    3af2:	1d7b      	adds	r3, r7, #5
    3af4:	1c02      	adds	r2, r0, #0
    3af6:	701a      	strb	r2, [r3, #0]
    3af8:	1d3b      	adds	r3, r7, #4
    3afa:	1c0a      	adds	r2, r1, #0
    3afc:	701a      	strb	r2, [r3, #0]
	if(value)
    3afe:	1d3b      	adds	r3, r7, #4
    3b00:	781b      	ldrb	r3, [r3, #0]
    3b02:	2b00      	cmp	r3, #0
    3b04:	d01f      	beq.n	3b46 <configure_pin+0x6e>
	{
		mcp23017_data.devices[addr].outputs.ports[port] |= (1 << pin);
    3b06:	1dbb      	adds	r3, r7, #6
    3b08:	781a      	ldrb	r2, [r3, #0]
    3b0a:	1dfb      	adds	r3, r7, #7
    3b0c:	781b      	ldrb	r3, [r3, #0]
    3b0e:	1db9      	adds	r1, r7, #6
    3b10:	7808      	ldrb	r0, [r1, #0]
    3b12:	1df9      	adds	r1, r7, #7
    3b14:	7809      	ldrb	r1, [r1, #0]
    3b16:	4c1e      	ldr	r4, [pc, #120]	; (3b90 <configure_pin+0xb8>)
    3b18:	0100      	lsls	r0, r0, #4
    3b1a:	1820      	adds	r0, r4, r0
    3b1c:	1841      	adds	r1, r0, r1
    3b1e:	3108      	adds	r1, #8
    3b20:	7809      	ldrb	r1, [r1, #0]
    3b22:	b248      	sxtb	r0, r1
    3b24:	1d79      	adds	r1, r7, #5
    3b26:	7809      	ldrb	r1, [r1, #0]
    3b28:	2401      	movs	r4, #1
    3b2a:	408c      	lsls	r4, r1
    3b2c:	0021      	movs	r1, r4
    3b2e:	b249      	sxtb	r1, r1
    3b30:	4301      	orrs	r1, r0
    3b32:	b249      	sxtb	r1, r1
    3b34:	b2c8      	uxtb	r0, r1
    3b36:	4916      	ldr	r1, [pc, #88]	; (3b90 <configure_pin+0xb8>)
    3b38:	0112      	lsls	r2, r2, #4
    3b3a:	188a      	adds	r2, r1, r2
    3b3c:	18d3      	adds	r3, r2, r3
    3b3e:	3308      	adds	r3, #8
    3b40:	1c02      	adds	r2, r0, #0
    3b42:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		mcp23017_data.devices[addr].outputs.ports[port] &= ~(1 << pin);
	}
}
    3b44:	e020      	b.n	3b88 <configure_pin+0xb0>
	{
		mcp23017_data.devices[addr].outputs.ports[port] |= (1 << pin);
	}
	else
	{
		mcp23017_data.devices[addr].outputs.ports[port] &= ~(1 << pin);
    3b46:	1dbb      	adds	r3, r7, #6
    3b48:	781a      	ldrb	r2, [r3, #0]
    3b4a:	1dfb      	adds	r3, r7, #7
    3b4c:	781b      	ldrb	r3, [r3, #0]
    3b4e:	1db9      	adds	r1, r7, #6
    3b50:	7808      	ldrb	r0, [r1, #0]
    3b52:	1df9      	adds	r1, r7, #7
    3b54:	7809      	ldrb	r1, [r1, #0]
    3b56:	4c0e      	ldr	r4, [pc, #56]	; (3b90 <configure_pin+0xb8>)
    3b58:	0100      	lsls	r0, r0, #4
    3b5a:	1820      	adds	r0, r4, r0
    3b5c:	1841      	adds	r1, r0, r1
    3b5e:	3108      	adds	r1, #8
    3b60:	7809      	ldrb	r1, [r1, #0]
    3b62:	b249      	sxtb	r1, r1
    3b64:	1d78      	adds	r0, r7, #5
    3b66:	7800      	ldrb	r0, [r0, #0]
    3b68:	2401      	movs	r4, #1
    3b6a:	4084      	lsls	r4, r0
    3b6c:	0020      	movs	r0, r4
    3b6e:	b240      	sxtb	r0, r0
    3b70:	43c0      	mvns	r0, r0
    3b72:	b240      	sxtb	r0, r0
    3b74:	4001      	ands	r1, r0
    3b76:	b249      	sxtb	r1, r1
    3b78:	b2c8      	uxtb	r0, r1
    3b7a:	4905      	ldr	r1, [pc, #20]	; (3b90 <configure_pin+0xb8>)
    3b7c:	0112      	lsls	r2, r2, #4
    3b7e:	188a      	adds	r2, r1, r2
    3b80:	18d3      	adds	r3, r2, r3
    3b82:	3308      	adds	r3, #8
    3b84:	1c02      	adds	r2, r0, #0
    3b86:	701a      	strb	r2, [r3, #0]
	}
}
    3b88:	46c0      	nop			; (mov r8, r8)
    3b8a:	46bd      	mov	sp, r7
    3b8c:	b002      	add	sp, #8
    3b8e:	bdb0      	pop	{r4, r5, r7, pc}
    3b90:	20000010 	.word	0x20000010

00003b94 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    3b94:	b580      	push	{r7, lr}
    3b96:	b084      	sub	sp, #16
    3b98:	af00      	add	r7, sp, #0
    3b9a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3b9c:	687b      	ldr	r3, [r7, #4]
    3b9e:	681b      	ldr	r3, [r3, #0]
    3ba0:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3ba2:	68fb      	ldr	r3, [r7, #12]
    3ba4:	69db      	ldr	r3, [r3, #28]
    3ba6:	2207      	movs	r2, #7
    3ba8:	4013      	ands	r3, r2
    3baa:	1e5a      	subs	r2, r3, #1
    3bac:	4193      	sbcs	r3, r2
    3bae:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    3bb0:	0018      	movs	r0, r3
    3bb2:	46bd      	mov	sp, r7
    3bb4:	b004      	add	sp, #16
    3bb6:	bd80      	pop	{r7, pc}

00003bb8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    3bb8:	b580      	push	{r7, lr}
    3bba:	b082      	sub	sp, #8
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    3bc0:	46c0      	nop			; (mov r8, r8)
    3bc2:	687b      	ldr	r3, [r7, #4]
    3bc4:	0018      	movs	r0, r3
    3bc6:	4b04      	ldr	r3, [pc, #16]	; (3bd8 <_i2c_master_wait_for_sync+0x20>)
    3bc8:	4798      	blx	r3
    3bca:	1e03      	subs	r3, r0, #0
    3bcc:	d1f9      	bne.n	3bc2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    3bce:	46c0      	nop			; (mov r8, r8)
    3bd0:	46bd      	mov	sp, r7
    3bd2:	b002      	add	sp, #8
    3bd4:	bd80      	pop	{r7, pc}
    3bd6:	46c0      	nop			; (mov r8, r8)
    3bd8:	00003b95 	.word	0x00003b95

00003bdc <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    3bdc:	b580      	push	{r7, lr}
    3bde:	b082      	sub	sp, #8
    3be0:	af00      	add	r7, sp, #0
    3be2:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    3be4:	687b      	ldr	r3, [r7, #4]
    3be6:	2264      	movs	r2, #100	; 0x64
    3be8:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    3bea:	687b      	ldr	r3, [r7, #4]
    3bec:	4a1b      	ldr	r2, [pc, #108]	; (3c5c <i2c_master_get_config_defaults+0x80>)
    3bee:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    3bf0:	687b      	ldr	r3, [r7, #4]
    3bf2:	2200      	movs	r2, #0
    3bf4:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    3bf6:	687b      	ldr	r3, [r7, #4]
    3bf8:	2200      	movs	r2, #0
    3bfa:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    3bfc:	687b      	ldr	r3, [r7, #4]
    3bfe:	2200      	movs	r2, #0
    3c00:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    3c02:	687b      	ldr	r3, [r7, #4]
    3c04:	2280      	movs	r2, #128	; 0x80
    3c06:	0392      	lsls	r2, r2, #14
    3c08:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    3c0a:	687b      	ldr	r3, [r7, #4]
    3c0c:	2201      	movs	r2, #1
    3c0e:	4252      	negs	r2, r2
    3c10:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    3c12:	687b      	ldr	r3, [r7, #4]
    3c14:	2201      	movs	r2, #1
    3c16:	4252      	negs	r2, r2
    3c18:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    3c1a:	687b      	ldr	r3, [r7, #4]
    3c1c:	2200      	movs	r2, #0
    3c1e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    3c20:	687b      	ldr	r3, [r7, #4]
    3c22:	2200      	movs	r2, #0
    3c24:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	2224      	movs	r2, #36	; 0x24
    3c2a:	2100      	movs	r1, #0
    3c2c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    3c2e:	687b      	ldr	r3, [r7, #4]
    3c30:	2200      	movs	r2, #0
    3c32:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    3c34:	687b      	ldr	r3, [r7, #4]
    3c36:	222c      	movs	r2, #44	; 0x2c
    3c38:	2100      	movs	r1, #0
    3c3a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    3c3c:	687b      	ldr	r3, [r7, #4]
    3c3e:	222d      	movs	r2, #45	; 0x2d
    3c40:	2100      	movs	r1, #0
    3c42:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    3c44:	687b      	ldr	r3, [r7, #4]
    3c46:	222e      	movs	r2, #46	; 0x2e
    3c48:	2100      	movs	r1, #0
    3c4a:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    3c4c:	687b      	ldr	r3, [r7, #4]
    3c4e:	22d7      	movs	r2, #215	; 0xd7
    3c50:	861a      	strh	r2, [r3, #48]	; 0x30
}
    3c52:	46c0      	nop			; (mov r8, r8)
    3c54:	46bd      	mov	sp, r7
    3c56:	b002      	add	sp, #8
    3c58:	bd80      	pop	{r7, pc}
    3c5a:	46c0      	nop			; (mov r8, r8)
    3c5c:	00000d48 	.word	0x00000d48

00003c60 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    3c60:	b580      	push	{r7, lr}
    3c62:	b084      	sub	sp, #16
    3c64:	af00      	add	r7, sp, #0
    3c66:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3c68:	687b      	ldr	r3, [r7, #4]
    3c6a:	681b      	ldr	r3, [r3, #0]
    3c6c:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    3c6e:	2300      	movs	r3, #0
    3c70:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    3c72:	687b      	ldr	r3, [r7, #4]
    3c74:	0018      	movs	r0, r3
    3c76:	4b10      	ldr	r3, [pc, #64]	; (3cb8 <i2c_master_enable+0x58>)
    3c78:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    3c7a:	68bb      	ldr	r3, [r7, #8]
    3c7c:	681b      	ldr	r3, [r3, #0]
    3c7e:	2202      	movs	r2, #2
    3c80:	431a      	orrs	r2, r3
    3c82:	68bb      	ldr	r3, [r7, #8]
    3c84:	601a      	str	r2, [r3, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    3c86:	e00c      	b.n	3ca2 <i2c_master_enable+0x42>
		timeout_counter++;
    3c88:	68fb      	ldr	r3, [r7, #12]
    3c8a:	3301      	adds	r3, #1
    3c8c:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    3c8e:	687b      	ldr	r3, [r7, #4]
    3c90:	88db      	ldrh	r3, [r3, #6]
    3c92:	1e1a      	subs	r2, r3, #0
    3c94:	68fb      	ldr	r3, [r7, #12]
    3c96:	429a      	cmp	r2, r3
    3c98:	d803      	bhi.n	3ca2 <i2c_master_enable+0x42>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    3c9a:	68bb      	ldr	r3, [r7, #8]
    3c9c:	2210      	movs	r2, #16
    3c9e:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    3ca0:	e006      	b.n	3cb0 <i2c_master_enable+0x50>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    3ca2:	68bb      	ldr	r3, [r7, #8]
    3ca4:	8b5b      	ldrh	r3, [r3, #26]
    3ca6:	b29b      	uxth	r3, r3
    3ca8:	001a      	movs	r2, r3
    3caa:	2310      	movs	r3, #16
    3cac:	4013      	ands	r3, r2
    3cae:	d0eb      	beq.n	3c88 <i2c_master_enable+0x28>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
			/* Workaround #1 */
			return;
		}
	}
}
    3cb0:	46bd      	mov	sp, r7
    3cb2:	b004      	add	sp, #16
    3cb4:	bd80      	pop	{r7, pc}
    3cb6:	46c0      	nop			; (mov r8, r8)
    3cb8:	00003bb9 	.word	0x00003bb9

00003cbc <configure_i2c_master>:
 */ 

#include "i2c.h"

void configure_i2c_master(void)
{
    3cbc:	b580      	push	{r7, lr}
    3cbe:	b08e      	sub	sp, #56	; 0x38
    3cc0:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    3cc2:	1d3b      	adds	r3, r7, #4
    3cc4:	0018      	movs	r0, r3
    3cc6:	4b0e      	ldr	r3, [pc, #56]	; (3d00 <configure_i2c_master+0x44>)
    3cc8:	4798      	blx	r3
	/* Change buffer timeout to something longer. */
	config_i2c_master.buffer_timeout = 10000;
    3cca:	1d3b      	adds	r3, r7, #4
    3ccc:	4a0d      	ldr	r2, [pc, #52]	; (3d04 <configure_i2c_master+0x48>)
    3cce:	82da      	strh	r2, [r3, #22]
	config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_100KHZ;
    3cd0:	1d3b      	adds	r3, r7, #4
    3cd2:	2264      	movs	r2, #100	; 0x64
    3cd4:	601a      	str	r2, [r3, #0]
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    3cd6:	1d3b      	adds	r3, r7, #4
    3cd8:	4a0b      	ldr	r2, [pc, #44]	; (3d08 <configure_i2c_master+0x4c>)
    3cda:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    3cdc:	1d3b      	adds	r3, r7, #4
    3cde:	4a0b      	ldr	r2, [pc, #44]	; (3d0c <configure_i2c_master+0x50>)
    3ce0:	621a      	str	r2, [r3, #32]
	/* Initialize and enable device with config. */
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
    3ce2:	1d3a      	adds	r2, r7, #4
    3ce4:	490a      	ldr	r1, [pc, #40]	; (3d10 <configure_i2c_master+0x54>)
    3ce6:	4b0b      	ldr	r3, [pc, #44]	; (3d14 <configure_i2c_master+0x58>)
    3ce8:	0018      	movs	r0, r3
    3cea:	4b0b      	ldr	r3, [pc, #44]	; (3d18 <configure_i2c_master+0x5c>)
    3cec:	4798      	blx	r3
	i2c_master_enable(&i2c_master_instance);
    3cee:	4b09      	ldr	r3, [pc, #36]	; (3d14 <configure_i2c_master+0x58>)
    3cf0:	0018      	movs	r0, r3
    3cf2:	4b0a      	ldr	r3, [pc, #40]	; (3d1c <configure_i2c_master+0x60>)
    3cf4:	4798      	blx	r3
}
    3cf6:	46c0      	nop			; (mov r8, r8)
    3cf8:	46bd      	mov	sp, r7
    3cfa:	b00e      	add	sp, #56	; 0x38
    3cfc:	bd80      	pop	{r7, pc}
    3cfe:	46c0      	nop			; (mov r8, r8)
    3d00:	00003bdd 	.word	0x00003bdd
    3d04:	00002710 	.word	0x00002710
    3d08:	00160002 	.word	0x00160002
    3d0c:	00170002 	.word	0x00170002
    3d10:	42001400 	.word	0x42001400
    3d14:	20000314 	.word	0x20000314
    3d18:	00001241 	.word	0x00001241
    3d1c:	00003c61 	.word	0x00003c61

00003d20 <i2c_write>:

uint8_t i2c_write(uint8_t address,uint8_t* data, uint8_t data_size)
{
    3d20:	b580      	push	{r7, lr}
    3d22:	b086      	sub	sp, #24
    3d24:	af00      	add	r7, sp, #0
    3d26:	6039      	str	r1, [r7, #0]
    3d28:	0011      	movs	r1, r2
    3d2a:	1dfb      	adds	r3, r7, #7
    3d2c:	1c02      	adds	r2, r0, #0
    3d2e:	701a      	strb	r2, [r3, #0]
    3d30:	1dbb      	adds	r3, r7, #6
    3d32:	1c0a      	adds	r2, r1, #0
    3d34:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
    3d36:	1dfb      	adds	r3, r7, #7
    3d38:	781b      	ldrb	r3, [r3, #0]
    3d3a:	b29a      	uxth	r2, r3
    3d3c:	2308      	movs	r3, #8
    3d3e:	18fb      	adds	r3, r7, r3
    3d40:	801a      	strh	r2, [r3, #0]
    3d42:	1dbb      	adds	r3, r7, #6
    3d44:	781b      	ldrb	r3, [r3, #0]
    3d46:	b29a      	uxth	r2, r3
    3d48:	2308      	movs	r3, #8
    3d4a:	18fb      	adds	r3, r7, r3
    3d4c:	805a      	strh	r2, [r3, #2]
    3d4e:	2308      	movs	r3, #8
    3d50:	18fb      	adds	r3, r7, r3
    3d52:	683a      	ldr	r2, [r7, #0]
    3d54:	605a      	str	r2, [r3, #4]
    3d56:	2308      	movs	r3, #8
    3d58:	18fb      	adds	r3, r7, r3
    3d5a:	2200      	movs	r2, #0
    3d5c:	721a      	strb	r2, [r3, #8]
    3d5e:	2308      	movs	r3, #8
    3d60:	18fb      	adds	r3, r7, r3
    3d62:	2200      	movs	r2, #0
    3d64:	725a      	strb	r2, [r3, #9]
    3d66:	2308      	movs	r3, #8
    3d68:	18fb      	adds	r3, r7, r3
    3d6a:	2200      	movs	r2, #0
    3d6c:	729a      	strb	r2, [r3, #10]
		.data        = data,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	uint16_t timeout = 0;
    3d6e:	2316      	movs	r3, #22
    3d70:	18fb      	adds	r3, r7, r3
    3d72:	2200      	movs	r2, #0
    3d74:	801a      	strh	r2, [r3, #0]

	return i2c_master_write_packet_wait(&i2c_master_instance,&packet);
    3d76:	2308      	movs	r3, #8
    3d78:	18fa      	adds	r2, r7, r3
    3d7a:	4b05      	ldr	r3, [pc, #20]	; (3d90 <i2c_write+0x70>)
    3d7c:	0011      	movs	r1, r2
    3d7e:	0018      	movs	r0, r3
    3d80:	4b04      	ldr	r3, [pc, #16]	; (3d94 <i2c_write+0x74>)
    3d82:	4798      	blx	r3
    3d84:	0003      	movs	r3, r0
	{
		if (timeout++ == I2C_TIMEOUT) {
			break;
		}
	}*/
}
    3d86:	0018      	movs	r0, r3
    3d88:	46bd      	mov	sp, r7
    3d8a:	b006      	add	sp, #24
    3d8c:	bd80      	pop	{r7, pc}
    3d8e:	46c0      	nop			; (mov r8, r8)
    3d90:	20000314 	.word	0x20000314
    3d94:	00001841 	.word	0x00001841

00003d98 <i2c_read>:
	}	
	return found_array;
}

uint8_t i2c_read(uint8_t addr,uint8_t reg, uint8_t data_length,uint8_t* data_ptr)
{
    3d98:	b590      	push	{r4, r7, lr}
    3d9a:	b08b      	sub	sp, #44	; 0x2c
    3d9c:	af00      	add	r7, sp, #0
    3d9e:	0004      	movs	r4, r0
    3da0:	0008      	movs	r0, r1
    3da2:	0011      	movs	r1, r2
    3da4:	603b      	str	r3, [r7, #0]
    3da6:	1dfb      	adds	r3, r7, #7
    3da8:	1c22      	adds	r2, r4, #0
    3daa:	701a      	strb	r2, [r3, #0]
    3dac:	1dbb      	adds	r3, r7, #6
    3dae:	1c02      	adds	r2, r0, #0
    3db0:	701a      	strb	r2, [r3, #0]
    3db2:	1d7b      	adds	r3, r7, #5
    3db4:	1c0a      	adds	r2, r1, #0
    3db6:	701a      	strb	r2, [r3, #0]
	//uint8_t read_datab[data_length];
	uint8_t state = 0;
    3db8:	2325      	movs	r3, #37	; 0x25
    3dba:	18fb      	adds	r3, r7, r3
    3dbc:	2200      	movs	r2, #0
    3dbe:	701a      	strb	r2, [r3, #0]
	//uint8_t address = (addr << 1) + 1;
	
	uint8_t data[2];
	data[0] = reg;
    3dc0:	2320      	movs	r3, #32
    3dc2:	18fb      	adds	r3, r7, r3
    3dc4:	1dba      	adds	r2, r7, #6
    3dc6:	7812      	ldrb	r2, [r2, #0]
    3dc8:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
    3dca:	2320      	movs	r3, #32
    3dcc:	18fb      	adds	r3, r7, r3
    3dce:	22ff      	movs	r2, #255	; 0xff
    3dd0:	705a      	strb	r2, [r3, #1]
	
	struct i2c_master_packet packet = {
    3dd2:	1dfb      	adds	r3, r7, #7
    3dd4:	781b      	ldrb	r3, [r3, #0]
    3dd6:	b29b      	uxth	r3, r3
    3dd8:	2280      	movs	r2, #128	; 0x80
    3dda:	0052      	lsls	r2, r2, #1
    3ddc:	4313      	orrs	r3, r2
    3dde:	b29a      	uxth	r2, r3
    3de0:	2314      	movs	r3, #20
    3de2:	18fb      	adds	r3, r7, r3
    3de4:	801a      	strh	r2, [r3, #0]
    3de6:	1d7b      	adds	r3, r7, #5
    3de8:	781b      	ldrb	r3, [r3, #0]
    3dea:	b29a      	uxth	r2, r3
    3dec:	2314      	movs	r3, #20
    3dee:	18fb      	adds	r3, r7, r3
    3df0:	805a      	strh	r2, [r3, #2]
    3df2:	2314      	movs	r3, #20
    3df4:	18fb      	adds	r3, r7, r3
    3df6:	2220      	movs	r2, #32
    3df8:	18ba      	adds	r2, r7, r2
    3dfa:	605a      	str	r2, [r3, #4]
    3dfc:	2314      	movs	r3, #20
    3dfe:	18fb      	adds	r3, r7, r3
    3e00:	2200      	movs	r2, #0
    3e02:	721a      	strb	r2, [r3, #8]
    3e04:	2314      	movs	r3, #20
    3e06:	18fb      	adds	r3, r7, r3
    3e08:	2200      	movs	r2, #0
    3e0a:	725a      	strb	r2, [r3, #9]
    3e0c:	2314      	movs	r3, #20
    3e0e:	18fb      	adds	r3, r7, r3
    3e10:	2200      	movs	r2, #0
    3e12:	729a      	strb	r2, [r3, #10]
		.data        = data,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	uint16_t timeout = 0;
    3e14:	2326      	movs	r3, #38	; 0x26
    3e16:	18fb      	adds	r3, r7, r3
    3e18:	2200      	movs	r2, #0
    3e1a:	801a      	strh	r2, [r3, #0]

	do
	{
		state = i2c_master_write_packet_wait(&i2c_master_instance,&packet);
    3e1c:	2325      	movs	r3, #37	; 0x25
    3e1e:	18fc      	adds	r4, r7, r3
    3e20:	2314      	movs	r3, #20
    3e22:	18fa      	adds	r2, r7, r3
    3e24:	4b23      	ldr	r3, [pc, #140]	; (3eb4 <i2c_read+0x11c>)
    3e26:	0011      	movs	r1, r2
    3e28:	0018      	movs	r0, r3
    3e2a:	4b23      	ldr	r3, [pc, #140]	; (3eb8 <i2c_read+0x120>)
    3e2c:	4798      	blx	r3
    3e2e:	0003      	movs	r3, r0
    3e30:	7023      	strb	r3, [r4, #0]
		if (timeout++ == I2C_TIMEOUT) {
    3e32:	2326      	movs	r3, #38	; 0x26
    3e34:	18fb      	adds	r3, r7, r3
    3e36:	881b      	ldrh	r3, [r3, #0]
    3e38:	2226      	movs	r2, #38	; 0x26
    3e3a:	18ba      	adds	r2, r7, r2
    3e3c:	1c59      	adds	r1, r3, #1
    3e3e:	8011      	strh	r1, [r2, #0]
    3e40:	2b0a      	cmp	r3, #10
    3e42:	d103      	bne.n	3e4c <i2c_read+0xb4>
			return state;
    3e44:	2325      	movs	r3, #37	; 0x25
    3e46:	18fb      	adds	r3, r7, r3
    3e48:	781b      	ldrb	r3, [r3, #0]
    3e4a:	e02e      	b.n	3eaa <i2c_read+0x112>
			break;
		}
	}
	while (state != STATUS_OK);
    3e4c:	2325      	movs	r3, #37	; 0x25
    3e4e:	18fb      	adds	r3, r7, r3
    3e50:	781b      	ldrb	r3, [r3, #0]
    3e52:	2b00      	cmp	r3, #0
    3e54:	d1e2      	bne.n	3e1c <i2c_read+0x84>
	
	struct i2c_master_packet read_packet = {
    3e56:	1dfb      	adds	r3, r7, #7
    3e58:	781b      	ldrb	r3, [r3, #0]
    3e5a:	b29a      	uxth	r2, r3
    3e5c:	2308      	movs	r3, #8
    3e5e:	18fb      	adds	r3, r7, r3
    3e60:	801a      	strh	r2, [r3, #0]
    3e62:	1d7b      	adds	r3, r7, #5
    3e64:	781b      	ldrb	r3, [r3, #0]
    3e66:	b29a      	uxth	r2, r3
    3e68:	2308      	movs	r3, #8
    3e6a:	18fb      	adds	r3, r7, r3
    3e6c:	805a      	strh	r2, [r3, #2]
    3e6e:	2308      	movs	r3, #8
    3e70:	18fb      	adds	r3, r7, r3
    3e72:	683a      	ldr	r2, [r7, #0]
    3e74:	605a      	str	r2, [r3, #4]
    3e76:	2308      	movs	r3, #8
    3e78:	18fb      	adds	r3, r7, r3
    3e7a:	2200      	movs	r2, #0
    3e7c:	721a      	strb	r2, [r3, #8]
    3e7e:	2308      	movs	r3, #8
    3e80:	18fb      	adds	r3, r7, r3
    3e82:	2200      	movs	r2, #0
    3e84:	725a      	strb	r2, [r3, #9]
    3e86:	2308      	movs	r3, #8
    3e88:	18fb      	adds	r3, r7, r3
    3e8a:	2200      	movs	r2, #0
    3e8c:	729a      	strb	r2, [r3, #10]
		.data        = data_ptr,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	state = i2c_master_read_packet_wait(&i2c_master_instance,&read_packet);
    3e8e:	2325      	movs	r3, #37	; 0x25
    3e90:	18fc      	adds	r4, r7, r3
    3e92:	2308      	movs	r3, #8
    3e94:	18fa      	adds	r2, r7, r3
    3e96:	4b07      	ldr	r3, [pc, #28]	; (3eb4 <i2c_read+0x11c>)
    3e98:	0011      	movs	r1, r2
    3e9a:	0018      	movs	r0, r3
    3e9c:	4b07      	ldr	r3, [pc, #28]	; (3ebc <i2c_read+0x124>)
    3e9e:	4798      	blx	r3
    3ea0:	0003      	movs	r3, r0
    3ea2:	7023      	strb	r3, [r4, #0]
	return state;
    3ea4:	2325      	movs	r3, #37	; 0x25
    3ea6:	18fb      	adds	r3, r7, r3
    3ea8:	781b      	ldrb	r3, [r3, #0]
}
    3eaa:	0018      	movs	r0, r3
    3eac:	46bd      	mov	sp, r7
    3eae:	b00b      	add	sp, #44	; 0x2c
    3eb0:	bd90      	pop	{r4, r7, pc}
    3eb2:	46c0      	nop			; (mov r8, r8)
    3eb4:	20000314 	.word	0x20000314
    3eb8:	00001841 	.word	0x00001841
    3ebc:	00001699 	.word	0x00001699

00003ec0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3ec0:	b580      	push	{r7, lr}
    3ec2:	b084      	sub	sp, #16
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	0002      	movs	r2, r0
    3ec8:	1dfb      	adds	r3, r7, #7
    3eca:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3ecc:	230f      	movs	r3, #15
    3ece:	18fb      	adds	r3, r7, r3
    3ed0:	1dfa      	adds	r2, r7, #7
    3ed2:	7812      	ldrb	r2, [r2, #0]
    3ed4:	09d2      	lsrs	r2, r2, #7
    3ed6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3ed8:	230e      	movs	r3, #14
    3eda:	18fb      	adds	r3, r7, r3
    3edc:	1dfa      	adds	r2, r7, #7
    3ede:	7812      	ldrb	r2, [r2, #0]
    3ee0:	0952      	lsrs	r2, r2, #5
    3ee2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3ee4:	4b0d      	ldr	r3, [pc, #52]	; (3f1c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3ee6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3ee8:	230f      	movs	r3, #15
    3eea:	18fb      	adds	r3, r7, r3
    3eec:	781b      	ldrb	r3, [r3, #0]
    3eee:	2b00      	cmp	r3, #0
    3ef0:	d10f      	bne.n	3f12 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3ef2:	230f      	movs	r3, #15
    3ef4:	18fb      	adds	r3, r7, r3
    3ef6:	781b      	ldrb	r3, [r3, #0]
    3ef8:	009b      	lsls	r3, r3, #2
    3efa:	2210      	movs	r2, #16
    3efc:	4694      	mov	ip, r2
    3efe:	44bc      	add	ip, r7
    3f00:	4463      	add	r3, ip
    3f02:	3b08      	subs	r3, #8
    3f04:	681a      	ldr	r2, [r3, #0]
    3f06:	230e      	movs	r3, #14
    3f08:	18fb      	adds	r3, r7, r3
    3f0a:	781b      	ldrb	r3, [r3, #0]
    3f0c:	01db      	lsls	r3, r3, #7
    3f0e:	18d3      	adds	r3, r2, r3
    3f10:	e000      	b.n	3f14 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3f12:	2300      	movs	r3, #0
	}
}
    3f14:	0018      	movs	r0, r3
    3f16:	46bd      	mov	sp, r7
    3f18:	b004      	add	sp, #16
    3f1a:	bd80      	pop	{r7, pc}
    3f1c:	41004400 	.word	0x41004400

00003f20 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3f20:	b580      	push	{r7, lr}
    3f22:	b082      	sub	sp, #8
    3f24:	af00      	add	r7, sp, #0
    3f26:	0002      	movs	r2, r0
    3f28:	1dfb      	adds	r3, r7, #7
    3f2a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3f2c:	1dfb      	adds	r3, r7, #7
    3f2e:	781b      	ldrb	r3, [r3, #0]
    3f30:	0018      	movs	r0, r3
    3f32:	4b03      	ldr	r3, [pc, #12]	; (3f40 <port_get_group_from_gpio_pin+0x20>)
    3f34:	4798      	blx	r3
    3f36:	0003      	movs	r3, r0
}
    3f38:	0018      	movs	r0, r3
    3f3a:	46bd      	mov	sp, r7
    3f3c:	b002      	add	sp, #8
    3f3e:	bd80      	pop	{r7, pc}
    3f40:	00003ec1 	.word	0x00003ec1

00003f44 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3f44:	b580      	push	{r7, lr}
    3f46:	b082      	sub	sp, #8
    3f48:	af00      	add	r7, sp, #0
    3f4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3f4c:	687b      	ldr	r3, [r7, #4]
    3f4e:	2200      	movs	r2, #0
    3f50:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3f52:	687b      	ldr	r3, [r7, #4]
    3f54:	2201      	movs	r2, #1
    3f56:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3f58:	687b      	ldr	r3, [r7, #4]
    3f5a:	2200      	movs	r2, #0
    3f5c:	709a      	strb	r2, [r3, #2]
}
    3f5e:	46c0      	nop			; (mov r8, r8)
    3f60:	46bd      	mov	sp, r7
    3f62:	b002      	add	sp, #8
    3f64:	bd80      	pop	{r7, pc}
    3f66:	46c0      	nop			; (mov r8, r8)

00003f68 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3f68:	b580      	push	{r7, lr}
    3f6a:	b084      	sub	sp, #16
    3f6c:	af00      	add	r7, sp, #0
    3f6e:	0002      	movs	r2, r0
    3f70:	1dfb      	adds	r3, r7, #7
    3f72:	701a      	strb	r2, [r3, #0]
    3f74:	1dbb      	adds	r3, r7, #6
    3f76:	1c0a      	adds	r2, r1, #0
    3f78:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3f7a:	1dfb      	adds	r3, r7, #7
    3f7c:	781b      	ldrb	r3, [r3, #0]
    3f7e:	0018      	movs	r0, r3
    3f80:	4b0d      	ldr	r3, [pc, #52]	; (3fb8 <port_pin_set_output_level+0x50>)
    3f82:	4798      	blx	r3
    3f84:	0003      	movs	r3, r0
    3f86:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3f88:	1dfb      	adds	r3, r7, #7
    3f8a:	781b      	ldrb	r3, [r3, #0]
    3f8c:	221f      	movs	r2, #31
    3f8e:	4013      	ands	r3, r2
    3f90:	2201      	movs	r2, #1
    3f92:	409a      	lsls	r2, r3
    3f94:	0013      	movs	r3, r2
    3f96:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3f98:	1dbb      	adds	r3, r7, #6
    3f9a:	781b      	ldrb	r3, [r3, #0]
    3f9c:	2b00      	cmp	r3, #0
    3f9e:	d003      	beq.n	3fa8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3fa0:	68fb      	ldr	r3, [r7, #12]
    3fa2:	68ba      	ldr	r2, [r7, #8]
    3fa4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3fa6:	e002      	b.n	3fae <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3fa8:	68fb      	ldr	r3, [r7, #12]
    3faa:	68ba      	ldr	r2, [r7, #8]
    3fac:	615a      	str	r2, [r3, #20]
	}
}
    3fae:	46c0      	nop			; (mov r8, r8)
    3fb0:	46bd      	mov	sp, r7
    3fb2:	b004      	add	sp, #16
    3fb4:	bd80      	pop	{r7, pc}
    3fb6:	46c0      	nop			; (mov r8, r8)
    3fb8:	00003f21 	.word	0x00003f21

00003fbc <init_all_ports>:
	data[1] = 0xFF;
	state = i2c_write(MCP23017_I2C_ADDR_000,(uint8_t *)data,2);
}

uint8_t init_all_ports(void)
{
    3fbc:	b590      	push	{r4, r7, lr}
    3fbe:	b085      	sub	sp, #20
    3fc0:	af00      	add	r7, sp, #0
	uint8_t states = 0;
    3fc2:	230f      	movs	r3, #15
    3fc4:	18fb      	adds	r3, r7, r3
    3fc6:	2200      	movs	r2, #0
    3fc8:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[1] = 0x00;
    3fca:	1d3b      	adds	r3, r7, #4
    3fcc:	2200      	movs	r2, #0
    3fce:	705a      	strb	r2, [r3, #1]
	
	for (int i=0;i<8;i++)
    3fd0:	2300      	movs	r3, #0
    3fd2:	60bb      	str	r3, [r7, #8]
    3fd4:	e036      	b.n	4044 <init_all_ports+0x88>
	{
		data[0] = MCP23017_IODIRA;
    3fd6:	1d3b      	adds	r3, r7, #4
    3fd8:	2200      	movs	r2, #0
    3fda:	701a      	strb	r2, [r3, #0]
		uint8_t state = i2c_write(MCP23017_I2C_ADDR_000+i,(uint8_t *)data,2);
    3fdc:	68bb      	ldr	r3, [r7, #8]
    3fde:	b2db      	uxtb	r3, r3
    3fe0:	3320      	adds	r3, #32
    3fe2:	b2db      	uxtb	r3, r3
    3fe4:	1dfc      	adds	r4, r7, #7
    3fe6:	1d39      	adds	r1, r7, #4
    3fe8:	2202      	movs	r2, #2
    3fea:	0018      	movs	r0, r3
    3fec:	4b28      	ldr	r3, [pc, #160]	; (4090 <init_all_ports+0xd4>)
    3fee:	4798      	blx	r3
    3ff0:	0003      	movs	r3, r0
    3ff2:	7023      	strb	r3, [r4, #0]
		if (state == STATUS_OK)
    3ff4:	1dfb      	adds	r3, r7, #7
    3ff6:	781b      	ldrb	r3, [r3, #0]
    3ff8:	2b00      	cmp	r3, #0
    3ffa:	d120      	bne.n	403e <init_all_ports+0x82>
		{
			data[0] = MCP23017_IODIRB;
    3ffc:	1d3b      	adds	r3, r7, #4
    3ffe:	2201      	movs	r2, #1
    4000:	701a      	strb	r2, [r3, #0]
			state = i2c_write(MCP23017_I2C_ADDR_000+i,(uint8_t *)data,2);
    4002:	68bb      	ldr	r3, [r7, #8]
    4004:	b2db      	uxtb	r3, r3
    4006:	3320      	adds	r3, #32
    4008:	b2db      	uxtb	r3, r3
    400a:	1dfc      	adds	r4, r7, #7
    400c:	1d39      	adds	r1, r7, #4
    400e:	2202      	movs	r2, #2
    4010:	0018      	movs	r0, r3
    4012:	4b1f      	ldr	r3, [pc, #124]	; (4090 <init_all_ports+0xd4>)
    4014:	4798      	blx	r3
    4016:	0003      	movs	r3, r0
    4018:	7023      	strb	r3, [r4, #0]
			if (state == STATUS_OK)
    401a:	1dfb      	adds	r3, r7, #7
    401c:	781b      	ldrb	r3, [r3, #0]
    401e:	2b00      	cmp	r3, #0
    4020:	d10d      	bne.n	403e <init_all_ports+0x82>
			{
				states |= (1 << i);
    4022:	2201      	movs	r2, #1
    4024:	68bb      	ldr	r3, [r7, #8]
    4026:	409a      	lsls	r2, r3
    4028:	0013      	movs	r3, r2
    402a:	b25a      	sxtb	r2, r3
    402c:	230f      	movs	r3, #15
    402e:	18fb      	adds	r3, r7, r3
    4030:	781b      	ldrb	r3, [r3, #0]
    4032:	b25b      	sxtb	r3, r3
    4034:	4313      	orrs	r3, r2
    4036:	b25a      	sxtb	r2, r3
    4038:	230f      	movs	r3, #15
    403a:	18fb      	adds	r3, r7, r3
    403c:	701a      	strb	r2, [r3, #0]
{
	uint8_t states = 0;
	uint8_t data[2];
	data[1] = 0x00;
	
	for (int i=0;i<8;i++)
    403e:	68bb      	ldr	r3, [r7, #8]
    4040:	3301      	adds	r3, #1
    4042:	60bb      	str	r3, [r7, #8]
    4044:	68bb      	ldr	r3, [r7, #8]
    4046:	2b07      	cmp	r3, #7
    4048:	ddc5      	ble.n	3fd6 <init_all_ports+0x1a>
				states |= (1 << i);
			}
		}
	}
	
	data[1] = 0x80;
    404a:	1d3b      	adds	r3, r7, #4
    404c:	2280      	movs	r2, #128	; 0x80
    404e:	705a      	strb	r2, [r3, #1]
	data[0] = MCP23017_GPIOA;
    4050:	1d3b      	adds	r3, r7, #4
    4052:	2212      	movs	r2, #18
    4054:	701a      	strb	r2, [r3, #0]
	uint8_t state = i2c_write(MCP23017_I2C_ADDR_001,(uint8_t *)data,2);
    4056:	1dbc      	adds	r4, r7, #6
    4058:	1d3b      	adds	r3, r7, #4
    405a:	2202      	movs	r2, #2
    405c:	0019      	movs	r1, r3
    405e:	2021      	movs	r0, #33	; 0x21
    4060:	4b0b      	ldr	r3, [pc, #44]	; (4090 <init_all_ports+0xd4>)
    4062:	4798      	blx	r3
    4064:	0003      	movs	r3, r0
    4066:	7023      	strb	r3, [r4, #0]
	data[0] = MCP23017_GPIOB;
    4068:	1d3b      	adds	r3, r7, #4
    406a:	2213      	movs	r2, #19
    406c:	701a      	strb	r2, [r3, #0]
	state = i2c_write(MCP23017_I2C_ADDR_001,(uint8_t *)data,2);
    406e:	1dbc      	adds	r4, r7, #6
    4070:	1d3b      	adds	r3, r7, #4
    4072:	2202      	movs	r2, #2
    4074:	0019      	movs	r1, r3
    4076:	2021      	movs	r0, #33	; 0x21
    4078:	4b05      	ldr	r3, [pc, #20]	; (4090 <init_all_ports+0xd4>)
    407a:	4798      	blx	r3
    407c:	0003      	movs	r3, r0
    407e:	7023      	strb	r3, [r4, #0]
	
	return states;
    4080:	230f      	movs	r3, #15
    4082:	18fb      	adds	r3, r7, r3
    4084:	781b      	ldrb	r3, [r3, #0]
}
    4086:	0018      	movs	r0, r3
    4088:	46bd      	mov	sp, r7
    408a:	b005      	add	sp, #20
    408c:	bd90      	pop	{r4, r7, pc}
    408e:	46c0      	nop			; (mov r8, r8)
    4090:	00003d21 	.word	0x00003d21

00004094 <mcp23017_set_pins>:
	data[0] = MCP23017_GPIOB;
	state = i2c_write(MCP23017_I2C_ADDR_000,(uint8_t *)data,2);	
}

uint8_t mcp23017_set_pins(uint8_t addr, uint8_t porta, uint8_t portb)
{
    4094:	b590      	push	{r4, r7, lr}
    4096:	b085      	sub	sp, #20
    4098:	af00      	add	r7, sp, #0
    409a:	0004      	movs	r4, r0
    409c:	0008      	movs	r0, r1
    409e:	0011      	movs	r1, r2
    40a0:	1dfb      	adds	r3, r7, #7
    40a2:	1c22      	adds	r2, r4, #0
    40a4:	701a      	strb	r2, [r3, #0]
    40a6:	1dbb      	adds	r3, r7, #6
    40a8:	1c02      	adds	r2, r0, #0
    40aa:	701a      	strb	r2, [r3, #0]
    40ac:	1d7b      	adds	r3, r7, #5
    40ae:	1c0a      	adds	r2, r1, #0
    40b0:	701a      	strb	r2, [r3, #0]
	uint8_t state = 0x00;
    40b2:	230f      	movs	r3, #15
    40b4:	18fb      	adds	r3, r7, r3
    40b6:	2200      	movs	r2, #0
    40b8:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = MCP23017_GPIOA;
    40ba:	230c      	movs	r3, #12
    40bc:	18fb      	adds	r3, r7, r3
    40be:	2212      	movs	r2, #18
    40c0:	701a      	strb	r2, [r3, #0]
	data[1] = porta;
    40c2:	230c      	movs	r3, #12
    40c4:	18fb      	adds	r3, r7, r3
    40c6:	1dba      	adds	r2, r7, #6
    40c8:	7812      	ldrb	r2, [r2, #0]
    40ca:	705a      	strb	r2, [r3, #1]
	state = i2c_write(addr,(uint8_t *)data,2);
    40cc:	230f      	movs	r3, #15
    40ce:	18fc      	adds	r4, r7, r3
    40d0:	230c      	movs	r3, #12
    40d2:	18f9      	adds	r1, r7, r3
    40d4:	1dfb      	adds	r3, r7, #7
    40d6:	781b      	ldrb	r3, [r3, #0]
    40d8:	2202      	movs	r2, #2
    40da:	0018      	movs	r0, r3
    40dc:	4b12      	ldr	r3, [pc, #72]	; (4128 <mcp23017_set_pins+0x94>)
    40de:	4798      	blx	r3
    40e0:	0003      	movs	r3, r0
    40e2:	7023      	strb	r3, [r4, #0]
	data[0] = MCP23017_GPIOB;
    40e4:	230c      	movs	r3, #12
    40e6:	18fb      	adds	r3, r7, r3
    40e8:	2213      	movs	r2, #19
    40ea:	701a      	strb	r2, [r3, #0]
	data[1] = portb;
    40ec:	230c      	movs	r3, #12
    40ee:	18fb      	adds	r3, r7, r3
    40f0:	1d7a      	adds	r2, r7, #5
    40f2:	7812      	ldrb	r2, [r2, #0]
    40f4:	705a      	strb	r2, [r3, #1]
	state |= i2c_write(addr,(uint8_t *)data,2);
    40f6:	230c      	movs	r3, #12
    40f8:	18f9      	adds	r1, r7, r3
    40fa:	1dfb      	adds	r3, r7, #7
    40fc:	781b      	ldrb	r3, [r3, #0]
    40fe:	2202      	movs	r2, #2
    4100:	0018      	movs	r0, r3
    4102:	4b09      	ldr	r3, [pc, #36]	; (4128 <mcp23017_set_pins+0x94>)
    4104:	4798      	blx	r3
    4106:	0003      	movs	r3, r0
    4108:	0019      	movs	r1, r3
    410a:	230f      	movs	r3, #15
    410c:	18fb      	adds	r3, r7, r3
    410e:	220f      	movs	r2, #15
    4110:	18ba      	adds	r2, r7, r2
    4112:	7812      	ldrb	r2, [r2, #0]
    4114:	430a      	orrs	r2, r1
    4116:	701a      	strb	r2, [r3, #0]
	
	return state;
    4118:	230f      	movs	r3, #15
    411a:	18fb      	adds	r3, r7, r3
    411c:	781b      	ldrb	r3, [r3, #0]
}
    411e:	0018      	movs	r0, r3
    4120:	46bd      	mov	sp, r7
    4122:	b005      	add	sp, #20
    4124:	bd90      	pop	{r4, r7, pc}
    4126:	46c0      	nop			; (mov r8, r8)
    4128:	00003d21 	.word	0x00003d21

0000412c <mcp23017_read_all_ports>:

uint8_t data_being_read[8][2];

void mcp23017_read_all_ports(uint8_t read_data_ptr[2][8], uint8_t states[8])
{
    412c:	b5b0      	push	{r4, r5, r7, lr}
    412e:	b084      	sub	sp, #16
    4130:	af00      	add	r7, sp, #0
    4132:	6078      	str	r0, [r7, #4]
    4134:	6039      	str	r1, [r7, #0]
	uint8_t state = 0x00;
    4136:	230e      	movs	r3, #14
    4138:	18fb      	adds	r3, r7, r3
    413a:	2200      	movs	r2, #0
    413c:	701a      	strb	r2, [r3, #0]
	//uint8_t data = 0x00;
	for (uint8_t i=0;i<8;i++)
    413e:	230f      	movs	r3, #15
    4140:	18fb      	adds	r3, r7, r3
    4142:	2200      	movs	r2, #0
    4144:	701a      	strb	r2, [r3, #0]
    4146:	e03e      	b.n	41c6 <mcp23017_read_all_ports+0x9a>
	{
		//data = 0x00;
		//data_being_read[i][0] = 0;
		//read_data_ptr[i][0] = 0;
		state = i2c_read(MCP23017_I2C_ADDR_000+i,MCP23017_GPIOA, 1,(uint8_t *)&read_data_ptr[0][i]);
    4148:	230f      	movs	r3, #15
    414a:	18fb      	adds	r3, r7, r3
    414c:	781b      	ldrb	r3, [r3, #0]
    414e:	3320      	adds	r3, #32
    4150:	b2d8      	uxtb	r0, r3
    4152:	230f      	movs	r3, #15
    4154:	18fb      	adds	r3, r7, r3
    4156:	781b      	ldrb	r3, [r3, #0]
    4158:	687a      	ldr	r2, [r7, #4]
    415a:	18d3      	adds	r3, r2, r3
    415c:	220e      	movs	r2, #14
    415e:	18bc      	adds	r4, r7, r2
    4160:	2201      	movs	r2, #1
    4162:	2112      	movs	r1, #18
    4164:	4d1c      	ldr	r5, [pc, #112]	; (41d8 <mcp23017_read_all_ports+0xac>)
    4166:	47a8      	blx	r5
    4168:	0003      	movs	r3, r0
    416a:	7023      	strb	r3, [r4, #0]
		//read_data[i][0] = data;
		//data_being_read[i][0] = data;
		//read_data_ptr[i][1] = 0;
		state |= i2c_read(MCP23017_I2C_ADDR_000+i,MCP23017_GPIOB, 1,(uint8_t *)&read_data_ptr[1][i]);
    416c:	230f      	movs	r3, #15
    416e:	18fb      	adds	r3, r7, r3
    4170:	781b      	ldrb	r3, [r3, #0]
    4172:	3320      	adds	r3, #32
    4174:	b2d8      	uxtb	r0, r3
    4176:	687b      	ldr	r3, [r7, #4]
    4178:	3308      	adds	r3, #8
    417a:	001a      	movs	r2, r3
    417c:	230f      	movs	r3, #15
    417e:	18fb      	adds	r3, r7, r3
    4180:	781b      	ldrb	r3, [r3, #0]
    4182:	18d3      	adds	r3, r2, r3
    4184:	2201      	movs	r2, #1
    4186:	2113      	movs	r1, #19
    4188:	4c13      	ldr	r4, [pc, #76]	; (41d8 <mcp23017_read_all_ports+0xac>)
    418a:	47a0      	blx	r4
    418c:	0003      	movs	r3, r0
    418e:	0019      	movs	r1, r3
    4190:	230e      	movs	r3, #14
    4192:	18fb      	adds	r3, r7, r3
    4194:	220e      	movs	r2, #14
    4196:	18ba      	adds	r2, r7, r2
    4198:	7812      	ldrb	r2, [r2, #0]
    419a:	430a      	orrs	r2, r1
    419c:	701a      	strb	r2, [r3, #0]
		//data_being_read[i][1] = data;
		//read_data[i][1] = data;
		states[i] = state;
    419e:	230f      	movs	r3, #15
    41a0:	18fb      	adds	r3, r7, r3
    41a2:	781b      	ldrb	r3, [r3, #0]
    41a4:	683a      	ldr	r2, [r7, #0]
    41a6:	18d3      	adds	r3, r2, r3
    41a8:	220e      	movs	r2, #14
    41aa:	18ba      	adds	r2, r7, r2
    41ac:	7812      	ldrb	r2, [r2, #0]
    41ae:	701a      	strb	r2, [r3, #0]
		state = 0x00;
    41b0:	230e      	movs	r3, #14
    41b2:	18fb      	adds	r3, r7, r3
    41b4:	2200      	movs	r2, #0
    41b6:	701a      	strb	r2, [r3, #0]

void mcp23017_read_all_ports(uint8_t read_data_ptr[2][8], uint8_t states[8])
{
	uint8_t state = 0x00;
	//uint8_t data = 0x00;
	for (uint8_t i=0;i<8;i++)
    41b8:	230f      	movs	r3, #15
    41ba:	18fb      	adds	r3, r7, r3
    41bc:	781a      	ldrb	r2, [r3, #0]
    41be:	230f      	movs	r3, #15
    41c0:	18fb      	adds	r3, r7, r3
    41c2:	3201      	adds	r2, #1
    41c4:	701a      	strb	r2, [r3, #0]
    41c6:	230f      	movs	r3, #15
    41c8:	18fb      	adds	r3, r7, r3
    41ca:	781b      	ldrb	r3, [r3, #0]
    41cc:	2b07      	cmp	r3, #7
    41ce:	d9bb      	bls.n	4148 <mcp23017_read_all_ports+0x1c>
		states[i] = state;
		state = 0x00;
	}
	//read_data = data_being_read;
	//return state;
}
    41d0:	46c0      	nop			; (mov r8, r8)
    41d2:	46bd      	mov	sp, r7
    41d4:	b004      	add	sp, #16
    41d6:	bdb0      	pop	{r4, r5, r7, pc}
    41d8:	00003d99 	.word	0x00003d99

000041dc <mcp23017_pin_init>:

void mcp23017_pin_init(void)
{
    41dc:	b580      	push	{r7, lr}
    41de:	b082      	sub	sp, #8
    41e0:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    41e2:	1d3b      	adds	r3, r7, #4
    41e4:	0018      	movs	r0, r3
    41e6:	4b0a      	ldr	r3, [pc, #40]	; (4210 <mcp23017_pin_init+0x34>)
    41e8:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    41ea:	1d3b      	adds	r3, r7, #4
    41ec:	2201      	movs	r2, #1
    41ee:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    41f0:	1d3b      	adds	r3, r7, #4
    41f2:	2201      	movs	r2, #1
    41f4:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(MCP23017_PWR_PIN,&config_port_pin);
    41f6:	1d3b      	adds	r3, r7, #4
    41f8:	0019      	movs	r1, r3
    41fa:	2007      	movs	r0, #7
    41fc:	4b05      	ldr	r3, [pc, #20]	; (4214 <mcp23017_pin_init+0x38>)
    41fe:	4798      	blx	r3
	port_pin_set_output_level(MCP23017_PWR_PIN,true);
    4200:	2101      	movs	r1, #1
    4202:	2007      	movs	r0, #7
    4204:	4b04      	ldr	r3, [pc, #16]	; (4218 <mcp23017_pin_init+0x3c>)
    4206:	4798      	blx	r3
}
    4208:	46c0      	nop			; (mov r8, r8)
    420a:	46bd      	mov	sp, r7
    420c:	b002      	add	sp, #8
    420e:	bd80      	pop	{r7, pc}
    4210:	00003f45 	.word	0x00003f45
    4214:	00000ce9 	.word	0x00000ce9
    4218:	00003f69 	.word	0x00003f69

0000421c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    421c:	b580      	push	{r7, lr}
    421e:	b084      	sub	sp, #16
    4220:	af00      	add	r7, sp, #0
    4222:	0002      	movs	r2, r0
    4224:	1dfb      	adds	r3, r7, #7
    4226:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4228:	230f      	movs	r3, #15
    422a:	18fb      	adds	r3, r7, r3
    422c:	1dfa      	adds	r2, r7, #7
    422e:	7812      	ldrb	r2, [r2, #0]
    4230:	09d2      	lsrs	r2, r2, #7
    4232:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4234:	230e      	movs	r3, #14
    4236:	18fb      	adds	r3, r7, r3
    4238:	1dfa      	adds	r2, r7, #7
    423a:	7812      	ldrb	r2, [r2, #0]
    423c:	0952      	lsrs	r2, r2, #5
    423e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4240:	4b0d      	ldr	r3, [pc, #52]	; (4278 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4242:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4244:	230f      	movs	r3, #15
    4246:	18fb      	adds	r3, r7, r3
    4248:	781b      	ldrb	r3, [r3, #0]
    424a:	2b00      	cmp	r3, #0
    424c:	d10f      	bne.n	426e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    424e:	230f      	movs	r3, #15
    4250:	18fb      	adds	r3, r7, r3
    4252:	781b      	ldrb	r3, [r3, #0]
    4254:	009b      	lsls	r3, r3, #2
    4256:	2210      	movs	r2, #16
    4258:	4694      	mov	ip, r2
    425a:	44bc      	add	ip, r7
    425c:	4463      	add	r3, ip
    425e:	3b08      	subs	r3, #8
    4260:	681a      	ldr	r2, [r3, #0]
    4262:	230e      	movs	r3, #14
    4264:	18fb      	adds	r3, r7, r3
    4266:	781b      	ldrb	r3, [r3, #0]
    4268:	01db      	lsls	r3, r3, #7
    426a:	18d3      	adds	r3, r2, r3
    426c:	e000      	b.n	4270 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    426e:	2300      	movs	r3, #0
	}
}
    4270:	0018      	movs	r0, r3
    4272:	46bd      	mov	sp, r7
    4274:	b004      	add	sp, #16
    4276:	bd80      	pop	{r7, pc}
    4278:	41004400 	.word	0x41004400

0000427c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    427c:	b580      	push	{r7, lr}
    427e:	b084      	sub	sp, #16
    4280:	af00      	add	r7, sp, #0
    4282:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    4284:	687b      	ldr	r3, [r7, #4]
    4286:	681b      	ldr	r3, [r3, #0]
    4288:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    428a:	68fb      	ldr	r3, [r7, #12]
    428c:	7e5b      	ldrb	r3, [r3, #25]
    428e:	b2db      	uxtb	r3, r3
    4290:	b25b      	sxtb	r3, r3
    4292:	2b00      	cmp	r3, #0
    4294:	da01      	bge.n	429a <adc_is_syncing+0x1e>
		return true;
    4296:	2301      	movs	r3, #1
    4298:	e000      	b.n	429c <adc_is_syncing+0x20>
	}

	return false;
    429a:	2300      	movs	r3, #0
}
    429c:	0018      	movs	r0, r3
    429e:	46bd      	mov	sp, r7
    42a0:	b004      	add	sp, #16
    42a2:	bd80      	pop	{r7, pc}

000042a4 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    42a4:	b580      	push	{r7, lr}
    42a6:	b086      	sub	sp, #24
    42a8:	af00      	add	r7, sp, #0
    42aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    42ac:	687b      	ldr	r3, [r7, #4]
    42ae:	681b      	ldr	r3, [r3, #0]
    42b0:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    42b2:	693b      	ldr	r3, [r7, #16]
    42b4:	7e1b      	ldrb	r3, [r3, #24]
    42b6:	b2db      	uxtb	r3, r3
    42b8:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    42ba:	2300      	movs	r3, #0
    42bc:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    42be:	68fb      	ldr	r3, [r7, #12]
    42c0:	2201      	movs	r2, #1
    42c2:	4013      	ands	r3, r2
    42c4:	d003      	beq.n	42ce <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    42c6:	697b      	ldr	r3, [r7, #20]
    42c8:	2201      	movs	r2, #1
    42ca:	4313      	orrs	r3, r2
    42cc:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    42ce:	68fb      	ldr	r3, [r7, #12]
    42d0:	2204      	movs	r2, #4
    42d2:	4013      	ands	r3, r2
    42d4:	d003      	beq.n	42de <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    42d6:	697b      	ldr	r3, [r7, #20]
    42d8:	2202      	movs	r2, #2
    42da:	4313      	orrs	r3, r2
    42dc:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    42de:	68fb      	ldr	r3, [r7, #12]
    42e0:	2202      	movs	r2, #2
    42e2:	4013      	ands	r3, r2
    42e4:	d003      	beq.n	42ee <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    42e6:	697b      	ldr	r3, [r7, #20]
    42e8:	2204      	movs	r2, #4
    42ea:	4313      	orrs	r3, r2
    42ec:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    42ee:	697b      	ldr	r3, [r7, #20]
}
    42f0:	0018      	movs	r0, r3
    42f2:	46bd      	mov	sp, r7
    42f4:	b006      	add	sp, #24
    42f6:	bd80      	pop	{r7, pc}

000042f8 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    42f8:	b580      	push	{r7, lr}
    42fa:	b084      	sub	sp, #16
    42fc:	af00      	add	r7, sp, #0
    42fe:	6078      	str	r0, [r7, #4]
    4300:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4302:	687b      	ldr	r3, [r7, #4]
    4304:	681b      	ldr	r3, [r3, #0]
    4306:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    4308:	2300      	movs	r3, #0
    430a:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    430c:	683b      	ldr	r3, [r7, #0]
    430e:	2201      	movs	r2, #1
    4310:	4013      	ands	r3, r2
    4312:	d003      	beq.n	431c <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    4314:	68fb      	ldr	r3, [r7, #12]
    4316:	2201      	movs	r2, #1
    4318:	4313      	orrs	r3, r2
    431a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    431c:	683b      	ldr	r3, [r7, #0]
    431e:	2202      	movs	r2, #2
    4320:	4013      	ands	r3, r2
    4322:	d003      	beq.n	432c <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    4324:	68fb      	ldr	r3, [r7, #12]
    4326:	2204      	movs	r2, #4
    4328:	4313      	orrs	r3, r2
    432a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    432c:	683b      	ldr	r3, [r7, #0]
    432e:	2204      	movs	r2, #4
    4330:	4013      	ands	r3, r2
    4332:	d003      	beq.n	433c <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    4334:	68fb      	ldr	r3, [r7, #12]
    4336:	2202      	movs	r2, #2
    4338:	4313      	orrs	r3, r2
    433a:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    433c:	68fb      	ldr	r3, [r7, #12]
    433e:	b2da      	uxtb	r2, r3
    4340:	68bb      	ldr	r3, [r7, #8]
    4342:	761a      	strb	r2, [r3, #24]
}
    4344:	46c0      	nop			; (mov r8, r8)
    4346:	46bd      	mov	sp, r7
    4348:	b004      	add	sp, #16
    434a:	bd80      	pop	{r7, pc}

0000434c <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    434c:	b580      	push	{r7, lr}
    434e:	b084      	sub	sp, #16
    4350:	af00      	add	r7, sp, #0
    4352:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4354:	687b      	ldr	r3, [r7, #4]
    4356:	681b      	ldr	r3, [r3, #0]
    4358:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    435a:	46c0      	nop			; (mov r8, r8)
    435c:	687b      	ldr	r3, [r7, #4]
    435e:	0018      	movs	r0, r3
    4360:	4b0e      	ldr	r3, [pc, #56]	; (439c <adc_enable+0x50>)
    4362:	4798      	blx	r3
    4364:	1e03      	subs	r3, r0, #0
    4366:	d1f9      	bne.n	435c <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    4368:	68fb      	ldr	r3, [r7, #12]
    436a:	220f      	movs	r2, #15
    436c:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    436e:	68fb      	ldr	r3, [r7, #12]
    4370:	220f      	movs	r2, #15
    4372:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    4374:	68fb      	ldr	r3, [r7, #12]
    4376:	781b      	ldrb	r3, [r3, #0]
    4378:	b2db      	uxtb	r3, r3
    437a:	2202      	movs	r2, #2
    437c:	4313      	orrs	r3, r2
    437e:	b2da      	uxtb	r2, r3
    4380:	68fb      	ldr	r3, [r7, #12]
    4382:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    4384:	46c0      	nop			; (mov r8, r8)
    4386:	687b      	ldr	r3, [r7, #4]
    4388:	0018      	movs	r0, r3
    438a:	4b04      	ldr	r3, [pc, #16]	; (439c <adc_enable+0x50>)
    438c:	4798      	blx	r3
    438e:	1e03      	subs	r3, r0, #0
    4390:	d1f9      	bne.n	4386 <adc_enable+0x3a>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    4392:	2300      	movs	r3, #0
}
    4394:	0018      	movs	r0, r3
    4396:	46bd      	mov	sp, r7
    4398:	b004      	add	sp, #16
    439a:	bd80      	pop	{r7, pc}
    439c:	0000427d 	.word	0x0000427d

000043a0 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    43a0:	b580      	push	{r7, lr}
    43a2:	b084      	sub	sp, #16
    43a4:	af00      	add	r7, sp, #0
    43a6:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    43a8:	687b      	ldr	r3, [r7, #4]
    43aa:	681b      	ldr	r3, [r3, #0]
    43ac:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    43ae:	46c0      	nop			; (mov r8, r8)
    43b0:	687b      	ldr	r3, [r7, #4]
    43b2:	0018      	movs	r0, r3
    43b4:	4b0b      	ldr	r3, [pc, #44]	; (43e4 <adc_start_conversion+0x44>)
    43b6:	4798      	blx	r3
    43b8:	1e03      	subs	r3, r0, #0
    43ba:	d1f9      	bne.n	43b0 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    43bc:	68fb      	ldr	r3, [r7, #12]
    43be:	7b1b      	ldrb	r3, [r3, #12]
    43c0:	b2db      	uxtb	r3, r3
    43c2:	2202      	movs	r2, #2
    43c4:	4313      	orrs	r3, r2
    43c6:	b2da      	uxtb	r2, r3
    43c8:	68fb      	ldr	r3, [r7, #12]
    43ca:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    43cc:	46c0      	nop			; (mov r8, r8)
    43ce:	687b      	ldr	r3, [r7, #4]
    43d0:	0018      	movs	r0, r3
    43d2:	4b04      	ldr	r3, [pc, #16]	; (43e4 <adc_start_conversion+0x44>)
    43d4:	4798      	blx	r3
    43d6:	1e03      	subs	r3, r0, #0
    43d8:	d1f9      	bne.n	43ce <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    43da:	46c0      	nop			; (mov r8, r8)
    43dc:	46bd      	mov	sp, r7
    43de:	b004      	add	sp, #16
    43e0:	bd80      	pop	{r7, pc}
    43e2:	46c0      	nop			; (mov r8, r8)
    43e4:	0000427d 	.word	0x0000427d

000043e8 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    43e8:	b580      	push	{r7, lr}
    43ea:	b084      	sub	sp, #16
    43ec:	af00      	add	r7, sp, #0
    43ee:	6078      	str	r0, [r7, #4]
    43f0:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    43f2:	687b      	ldr	r3, [r7, #4]
    43f4:	0018      	movs	r0, r3
    43f6:	4b18      	ldr	r3, [pc, #96]	; (4458 <adc_read+0x70>)
    43f8:	4798      	blx	r3
    43fa:	0002      	movs	r2, r0
    43fc:	2301      	movs	r3, #1
    43fe:	4013      	ands	r3, r2
    4400:	d101      	bne.n	4406 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    4402:	2305      	movs	r3, #5
    4404:	e023      	b.n	444e <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	681b      	ldr	r3, [r3, #0]
    440a:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    440c:	46c0      	nop			; (mov r8, r8)
    440e:	687b      	ldr	r3, [r7, #4]
    4410:	0018      	movs	r0, r3
    4412:	4b12      	ldr	r3, [pc, #72]	; (445c <adc_read+0x74>)
    4414:	4798      	blx	r3
    4416:	1e03      	subs	r3, r0, #0
    4418:	d1f9      	bne.n	440e <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    441a:	68fb      	ldr	r3, [r7, #12]
    441c:	8b5b      	ldrh	r3, [r3, #26]
    441e:	b29a      	uxth	r2, r3
    4420:	683b      	ldr	r3, [r7, #0]
    4422:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    4424:	687b      	ldr	r3, [r7, #4]
    4426:	2101      	movs	r1, #1
    4428:	0018      	movs	r0, r3
    442a:	4b0d      	ldr	r3, [pc, #52]	; (4460 <adc_read+0x78>)
    442c:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    442e:	687b      	ldr	r3, [r7, #4]
    4430:	0018      	movs	r0, r3
    4432:	4b09      	ldr	r3, [pc, #36]	; (4458 <adc_read+0x70>)
    4434:	4798      	blx	r3
    4436:	0002      	movs	r2, r0
    4438:	2304      	movs	r3, #4
    443a:	4013      	ands	r3, r2
    443c:	d006      	beq.n	444c <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    443e:	687b      	ldr	r3, [r7, #4]
    4440:	2104      	movs	r1, #4
    4442:	0018      	movs	r0, r3
    4444:	4b06      	ldr	r3, [pc, #24]	; (4460 <adc_read+0x78>)
    4446:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    4448:	231e      	movs	r3, #30
    444a:	e000      	b.n	444e <adc_read+0x66>
	}

	return STATUS_OK;
    444c:	2300      	movs	r3, #0
}
    444e:	0018      	movs	r0, r3
    4450:	46bd      	mov	sp, r7
    4452:	b004      	add	sp, #16
    4454:	bd80      	pop	{r7, pc}
    4456:	46c0      	nop			; (mov r8, r8)
    4458:	000042a5 	.word	0x000042a5
    445c:	0000427d 	.word	0x0000427d
    4460:	000042f9 	.word	0x000042f9

00004464 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4464:	b580      	push	{r7, lr}
    4466:	b082      	sub	sp, #8
    4468:	af00      	add	r7, sp, #0
    446a:	0002      	movs	r2, r0
    446c:	1dfb      	adds	r3, r7, #7
    446e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4470:	1dfb      	adds	r3, r7, #7
    4472:	781b      	ldrb	r3, [r3, #0]
    4474:	0018      	movs	r0, r3
    4476:	4b03      	ldr	r3, [pc, #12]	; (4484 <port_get_group_from_gpio_pin+0x20>)
    4478:	4798      	blx	r3
    447a:	0003      	movs	r3, r0
}
    447c:	0018      	movs	r0, r3
    447e:	46bd      	mov	sp, r7
    4480:	b002      	add	sp, #8
    4482:	bd80      	pop	{r7, pc}
    4484:	0000421d 	.word	0x0000421d

00004488 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    4488:	b580      	push	{r7, lr}
    448a:	b082      	sub	sp, #8
    448c:	af00      	add	r7, sp, #0
    448e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    4490:	687b      	ldr	r3, [r7, #4]
    4492:	2200      	movs	r2, #0
    4494:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4496:	687b      	ldr	r3, [r7, #4]
    4498:	2201      	movs	r2, #1
    449a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    449c:	687b      	ldr	r3, [r7, #4]
    449e:	2200      	movs	r2, #0
    44a0:	709a      	strb	r2, [r3, #2]
}
    44a2:	46c0      	nop			; (mov r8, r8)
    44a4:	46bd      	mov	sp, r7
    44a6:	b002      	add	sp, #8
    44a8:	bd80      	pop	{r7, pc}
    44aa:	46c0      	nop			; (mov r8, r8)

000044ac <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    44ac:	b580      	push	{r7, lr}
    44ae:	b084      	sub	sp, #16
    44b0:	af00      	add	r7, sp, #0
    44b2:	0002      	movs	r2, r0
    44b4:	1dfb      	adds	r3, r7, #7
    44b6:	701a      	strb	r2, [r3, #0]
    44b8:	1dbb      	adds	r3, r7, #6
    44ba:	1c0a      	adds	r2, r1, #0
    44bc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    44be:	1dfb      	adds	r3, r7, #7
    44c0:	781b      	ldrb	r3, [r3, #0]
    44c2:	0018      	movs	r0, r3
    44c4:	4b0d      	ldr	r3, [pc, #52]	; (44fc <port_pin_set_output_level+0x50>)
    44c6:	4798      	blx	r3
    44c8:	0003      	movs	r3, r0
    44ca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    44cc:	1dfb      	adds	r3, r7, #7
    44ce:	781b      	ldrb	r3, [r3, #0]
    44d0:	221f      	movs	r2, #31
    44d2:	4013      	ands	r3, r2
    44d4:	2201      	movs	r2, #1
    44d6:	409a      	lsls	r2, r3
    44d8:	0013      	movs	r3, r2
    44da:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    44dc:	1dbb      	adds	r3, r7, #6
    44de:	781b      	ldrb	r3, [r3, #0]
    44e0:	2b00      	cmp	r3, #0
    44e2:	d003      	beq.n	44ec <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    44e4:	68fb      	ldr	r3, [r7, #12]
    44e6:	68ba      	ldr	r2, [r7, #8]
    44e8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    44ea:	e002      	b.n	44f2 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    44ec:	68fb      	ldr	r3, [r7, #12]
    44ee:	68ba      	ldr	r2, [r7, #8]
    44f0:	615a      	str	r2, [r3, #20]
	}
}
    44f2:	46c0      	nop			; (mov r8, r8)
    44f4:	46bd      	mov	sp, r7
    44f6:	b004      	add	sp, #16
    44f8:	bd80      	pop	{r7, pc}
    44fa:	46c0      	nop			; (mov r8, r8)
    44fc:	00004465 	.word	0x00004465

00004500 <msgeq7_init>:
#include "msgeq7.h"

struct adc_module adc_instance;

void msgeq7_init()
{
    4500:	b580      	push	{r7, lr}
    4502:	af00      	add	r7, sp, #0
	msgeq7_port_init();
    4504:	4b03      	ldr	r3, [pc, #12]	; (4514 <msgeq7_init+0x14>)
    4506:	4798      	blx	r3
	msgeq7_adc_init();
    4508:	4b03      	ldr	r3, [pc, #12]	; (4518 <msgeq7_init+0x18>)
    450a:	4798      	blx	r3
}
    450c:	46c0      	nop			; (mov r8, r8)
    450e:	46bd      	mov	sp, r7
    4510:	bd80      	pop	{r7, pc}
    4512:	46c0      	nop			; (mov r8, r8)
    4514:	0000451d 	.word	0x0000451d
    4518:	00004575 	.word	0x00004575

0000451c <msgeq7_port_init>:

void msgeq7_port_init()
{
    451c:	b580      	push	{r7, lr}
    451e:	b082      	sub	sp, #8
    4520:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    4522:	1d3b      	adds	r3, r7, #4
    4524:	0018      	movs	r0, r3
    4526:	4b10      	ldr	r3, [pc, #64]	; (4568 <msgeq7_port_init+0x4c>)
    4528:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    452a:	1d3b      	adds	r3, r7, #4
    452c:	2202      	movs	r2, #2
    452e:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4530:	1d3b      	adds	r3, r7, #4
    4532:	2201      	movs	r2, #1
    4534:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(MSGEQ7_PIN_RESET,&config_port_pin);
    4536:	1d3b      	adds	r3, r7, #4
    4538:	0019      	movs	r1, r3
    453a:	2019      	movs	r0, #25
    453c:	4b0b      	ldr	r3, [pc, #44]	; (456c <msgeq7_port_init+0x50>)
    453e:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_RESET,false);
    4540:	2100      	movs	r1, #0
    4542:	2019      	movs	r0, #25
    4544:	4b0a      	ldr	r3, [pc, #40]	; (4570 <msgeq7_port_init+0x54>)
    4546:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    4548:	1d3b      	adds	r3, r7, #4
    454a:	2201      	movs	r2, #1
    454c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(MSGEQ7_PIN_STROBE,&config_port_pin);
    454e:	1d3b      	adds	r3, r7, #4
    4550:	0019      	movs	r1, r3
    4552:	2018      	movs	r0, #24
    4554:	4b05      	ldr	r3, [pc, #20]	; (456c <msgeq7_port_init+0x50>)
    4556:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_STROBE,true);
    4558:	2101      	movs	r1, #1
    455a:	2018      	movs	r0, #24
    455c:	4b04      	ldr	r3, [pc, #16]	; (4570 <msgeq7_port_init+0x54>)
    455e:	4798      	blx	r3
}
    4560:	46c0      	nop			; (mov r8, r8)
    4562:	46bd      	mov	sp, r7
    4564:	b002      	add	sp, #8
    4566:	bd80      	pop	{r7, pc}
    4568:	00004489 	.word	0x00004489
    456c:	00000ce9 	.word	0x00000ce9
    4570:	000044ad 	.word	0x000044ad

00004574 <msgeq7_adc_init>:

void msgeq7_adc_init()
{
    4574:	b580      	push	{r7, lr}
    4576:	b08c      	sub	sp, #48	; 0x30
    4578:	af00      	add	r7, sp, #0
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    457a:	003b      	movs	r3, r7
    457c:	0018      	movs	r0, r3
    457e:	4b0e      	ldr	r3, [pc, #56]	; (45b8 <msgeq7_adc_init+0x44>)
    4580:	4798      	blx	r3
	
	config_adc.gain_factor = ADC_GAIN_FACTOR_1X;
    4582:	003b      	movs	r3, r7
    4584:	2200      	movs	r2, #0
    4586:	609a      	str	r2, [r3, #8]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN2; //PIN_PB08
    4588:	003b      	movs	r3, r7
    458a:	2202      	movs	r2, #2
    458c:	731a      	strb	r2, [r3, #12]
	config_adc.differential_mode = false;
    458e:	003b      	movs	r3, r7
    4590:	2200      	movs	r2, #0
    4592:	74da      	strb	r2, [r3, #19]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    4594:	003b      	movs	r3, r7
    4596:	22c0      	movs	r2, #192	; 0xc0
    4598:	0152      	lsls	r2, r2, #5
    459a:	81da      	strh	r2, [r3, #14]
	
	adc_init(&adc_instance, ADC, &config_adc);
    459c:	003a      	movs	r2, r7
    459e:	4907      	ldr	r1, [pc, #28]	; (45bc <msgeq7_adc_init+0x48>)
    45a0:	4b07      	ldr	r3, [pc, #28]	; (45c0 <msgeq7_adc_init+0x4c>)
    45a2:	0018      	movs	r0, r3
    45a4:	4b07      	ldr	r3, [pc, #28]	; (45c4 <msgeq7_adc_init+0x50>)
    45a6:	4798      	blx	r3
	adc_enable(&adc_instance);
    45a8:	4b05      	ldr	r3, [pc, #20]	; (45c0 <msgeq7_adc_init+0x4c>)
    45aa:	0018      	movs	r0, r3
    45ac:	4b06      	ldr	r3, [pc, #24]	; (45c8 <msgeq7_adc_init+0x54>)
    45ae:	4798      	blx	r3
}
    45b0:	46c0      	nop			; (mov r8, r8)
    45b2:	46bd      	mov	sp, r7
    45b4:	b00c      	add	sp, #48	; 0x30
    45b6:	bd80      	pop	{r7, pc}
    45b8:	00000291 	.word	0x00000291
    45bc:	42004000 	.word	0x42004000
    45c0:	20000320 	.word	0x20000320
    45c4:	000008e1 	.word	0x000008e1
    45c8:	0000434d 	.word	0x0000434d

000045cc <single_conversion>:


uint16_t single_conversion()
{
    45cc:	b580      	push	{r7, lr}
    45ce:	b082      	sub	sp, #8
    45d0:	af00      	add	r7, sp, #0
	adc_start_conversion(&adc_instance);
    45d2:	4b09      	ldr	r3, [pc, #36]	; (45f8 <single_conversion+0x2c>)
    45d4:	0018      	movs	r0, r3
    45d6:	4b09      	ldr	r3, [pc, #36]	; (45fc <single_conversion+0x30>)
    45d8:	4798      	blx	r3
	uint16_t result;

	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
    45da:	1dba      	adds	r2, r7, #6
    45dc:	4b06      	ldr	r3, [pc, #24]	; (45f8 <single_conversion+0x2c>)
    45de:	0011      	movs	r1, r2
    45e0:	0018      	movs	r0, r3
    45e2:	4b07      	ldr	r3, [pc, #28]	; (4600 <single_conversion+0x34>)
    45e4:	4798      	blx	r3
    45e6:	1e03      	subs	r3, r0, #0
    45e8:	2b05      	cmp	r3, #5
    45ea:	d0f6      	beq.n	45da <single_conversion+0xe>
	return result;
    45ec:	1dbb      	adds	r3, r7, #6
    45ee:	881b      	ldrh	r3, [r3, #0]
}
    45f0:	0018      	movs	r0, r3
    45f2:	46bd      	mov	sp, r7
    45f4:	b002      	add	sp, #8
    45f6:	bd80      	pop	{r7, pc}
    45f8:	20000320 	.word	0x20000320
    45fc:	000043a1 	.word	0x000043a1
    4600:	000043e9 	.word	0x000043e9

00004604 <msgeq7_all_bands>:

void msgeq7_all_bands(uint16_t bands[])
{
    4604:	b5f0      	push	{r4, r5, r6, r7, lr}
    4606:	b08f      	sub	sp, #60	; 0x3c
    4608:	af00      	add	r7, sp, #0
    460a:	62f8      	str	r0, [r7, #44]	; 0x2c
	port_pin_set_output_level(MSGEQ7_PIN_RESET,true);
    460c:	2101      	movs	r1, #1
    460e:	2019      	movs	r0, #25
    4610:	4b53      	ldr	r3, [pc, #332]	; (4760 <msgeq7_all_bands+0x15c>)
    4612:	4798      	blx	r3
	delay_us(1);
    4614:	2000      	movs	r0, #0
    4616:	4b53      	ldr	r3, [pc, #332]	; (4764 <msgeq7_all_bands+0x160>)
    4618:	4798      	blx	r3
    461a:	0003      	movs	r3, r0
    461c:	613b      	str	r3, [r7, #16]
    461e:	2300      	movs	r3, #0
    4620:	617b      	str	r3, [r7, #20]
    4622:	4b51      	ldr	r3, [pc, #324]	; (4768 <msgeq7_all_bands+0x164>)
    4624:	2400      	movs	r4, #0
    4626:	6938      	ldr	r0, [r7, #16]
    4628:	6979      	ldr	r1, [r7, #20]
    462a:	18c0      	adds	r0, r0, r3
    462c:	4161      	adcs	r1, r4
    462e:	4c4f      	ldr	r4, [pc, #316]	; (476c <msgeq7_all_bands+0x168>)
    4630:	4a4f      	ldr	r2, [pc, #316]	; (4770 <msgeq7_all_bands+0x16c>)
    4632:	2300      	movs	r3, #0
    4634:	47a0      	blx	r4
    4636:	0003      	movs	r3, r0
    4638:	000c      	movs	r4, r1
    463a:	0018      	movs	r0, r3
    463c:	4b4d      	ldr	r3, [pc, #308]	; (4774 <msgeq7_all_bands+0x170>)
    463e:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_RESET,false);
    4640:	2100      	movs	r1, #0
    4642:	2019      	movs	r0, #25
    4644:	4b46      	ldr	r3, [pc, #280]	; (4760 <msgeq7_all_bands+0x15c>)
    4646:	4798      	blx	r3
	delay_us(75);
    4648:	2000      	movs	r0, #0
    464a:	4b46      	ldr	r3, [pc, #280]	; (4764 <msgeq7_all_bands+0x160>)
    464c:	4798      	blx	r3
    464e:	0003      	movs	r3, r0
    4650:	61bb      	str	r3, [r7, #24]
    4652:	2300      	movs	r3, #0
    4654:	61fb      	str	r3, [r7, #28]
    4656:	69bb      	ldr	r3, [r7, #24]
    4658:	69fc      	ldr	r4, [r7, #28]
    465a:	0f9a      	lsrs	r2, r3, #30
    465c:	00a0      	lsls	r0, r4, #2
    465e:	6278      	str	r0, [r7, #36]	; 0x24
    4660:	6a78      	ldr	r0, [r7, #36]	; 0x24
    4662:	4310      	orrs	r0, r2
    4664:	6278      	str	r0, [r7, #36]	; 0x24
    4666:	009b      	lsls	r3, r3, #2
    4668:	623b      	str	r3, [r7, #32]
    466a:	6a3b      	ldr	r3, [r7, #32]
    466c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    466e:	69b9      	ldr	r1, [r7, #24]
    4670:	69fa      	ldr	r2, [r7, #28]
    4672:	185b      	adds	r3, r3, r1
    4674:	4154      	adcs	r4, r2
    4676:	0f1a      	lsrs	r2, r3, #28
    4678:	0126      	lsls	r6, r4, #4
    467a:	4316      	orrs	r6, r2
    467c:	011d      	lsls	r5, r3, #4
    467e:	1aed      	subs	r5, r5, r3
    4680:	41a6      	sbcs	r6, r4
    4682:	002b      	movs	r3, r5
    4684:	0034      	movs	r4, r6
    4686:	4938      	ldr	r1, [pc, #224]	; (4768 <msgeq7_all_bands+0x164>)
    4688:	2200      	movs	r2, #0
    468a:	185b      	adds	r3, r3, r1
    468c:	4154      	adcs	r4, r2
    468e:	0018      	movs	r0, r3
    4690:	0021      	movs	r1, r4
    4692:	4c36      	ldr	r4, [pc, #216]	; (476c <msgeq7_all_bands+0x168>)
    4694:	4a36      	ldr	r2, [pc, #216]	; (4770 <msgeq7_all_bands+0x16c>)
    4696:	2300      	movs	r3, #0
    4698:	47a0      	blx	r4
    469a:	0003      	movs	r3, r0
    469c:	000c      	movs	r4, r1
    469e:	0018      	movs	r0, r3
    46a0:	4b34      	ldr	r3, [pc, #208]	; (4774 <msgeq7_all_bands+0x170>)
    46a2:	4798      	blx	r3
	
	for (int i=0;i<7;i++)
    46a4:	2300      	movs	r3, #0
    46a6:	637b      	str	r3, [r7, #52]	; 0x34
    46a8:	e052      	b.n	4750 <msgeq7_all_bands+0x14c>
	{
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,false);
    46aa:	2100      	movs	r1, #0
    46ac:	2018      	movs	r0, #24
    46ae:	4b2c      	ldr	r3, [pc, #176]	; (4760 <msgeq7_all_bands+0x15c>)
    46b0:	4798      	blx	r3
		delay_us(40);
    46b2:	2000      	movs	r0, #0
    46b4:	4b2b      	ldr	r3, [pc, #172]	; (4764 <msgeq7_all_bands+0x160>)
    46b6:	4798      	blx	r3
    46b8:	0003      	movs	r3, r0
    46ba:	60bb      	str	r3, [r7, #8]
    46bc:	2300      	movs	r3, #0
    46be:	60fb      	str	r3, [r7, #12]
    46c0:	4c2d      	ldr	r4, [pc, #180]	; (4778 <msgeq7_all_bands+0x174>)
    46c2:	2228      	movs	r2, #40	; 0x28
    46c4:	2300      	movs	r3, #0
    46c6:	68b8      	ldr	r0, [r7, #8]
    46c8:	68f9      	ldr	r1, [r7, #12]
    46ca:	47a0      	blx	r4
    46cc:	0003      	movs	r3, r0
    46ce:	000c      	movs	r4, r1
    46d0:	0019      	movs	r1, r3
    46d2:	0022      	movs	r2, r4
    46d4:	4b24      	ldr	r3, [pc, #144]	; (4768 <msgeq7_all_bands+0x164>)
    46d6:	2400      	movs	r4, #0
    46d8:	18c9      	adds	r1, r1, r3
    46da:	4162      	adcs	r2, r4
    46dc:	0008      	movs	r0, r1
    46de:	0011      	movs	r1, r2
    46e0:	4c22      	ldr	r4, [pc, #136]	; (476c <msgeq7_all_bands+0x168>)
    46e2:	4a23      	ldr	r2, [pc, #140]	; (4770 <msgeq7_all_bands+0x16c>)
    46e4:	2300      	movs	r3, #0
    46e6:	47a0      	blx	r4
    46e8:	0003      	movs	r3, r0
    46ea:	000c      	movs	r4, r1
    46ec:	0018      	movs	r0, r3
    46ee:	4b21      	ldr	r3, [pc, #132]	; (4774 <msgeq7_all_bands+0x170>)
    46f0:	4798      	blx	r3
		bands[i] = single_conversion();
    46f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    46f4:	005b      	lsls	r3, r3, #1
    46f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    46f8:	18d4      	adds	r4, r2, r3
    46fa:	4b20      	ldr	r3, [pc, #128]	; (477c <msgeq7_all_bands+0x178>)
    46fc:	4798      	blx	r3
    46fe:	0003      	movs	r3, r0
    4700:	8023      	strh	r3, [r4, #0]
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,true);
    4702:	2101      	movs	r1, #1
    4704:	2018      	movs	r0, #24
    4706:	4b16      	ldr	r3, [pc, #88]	; (4760 <msgeq7_all_bands+0x15c>)
    4708:	4798      	blx	r3
		delay_us(40);
    470a:	2000      	movs	r0, #0
    470c:	4b15      	ldr	r3, [pc, #84]	; (4764 <msgeq7_all_bands+0x160>)
    470e:	4798      	blx	r3
    4710:	0003      	movs	r3, r0
    4712:	603b      	str	r3, [r7, #0]
    4714:	2300      	movs	r3, #0
    4716:	607b      	str	r3, [r7, #4]
    4718:	4c17      	ldr	r4, [pc, #92]	; (4778 <msgeq7_all_bands+0x174>)
    471a:	2228      	movs	r2, #40	; 0x28
    471c:	2300      	movs	r3, #0
    471e:	6838      	ldr	r0, [r7, #0]
    4720:	6879      	ldr	r1, [r7, #4]
    4722:	47a0      	blx	r4
    4724:	0003      	movs	r3, r0
    4726:	000c      	movs	r4, r1
    4728:	0019      	movs	r1, r3
    472a:	0022      	movs	r2, r4
    472c:	4b0e      	ldr	r3, [pc, #56]	; (4768 <msgeq7_all_bands+0x164>)
    472e:	2400      	movs	r4, #0
    4730:	18c9      	adds	r1, r1, r3
    4732:	4162      	adcs	r2, r4
    4734:	0008      	movs	r0, r1
    4736:	0011      	movs	r1, r2
    4738:	4c0c      	ldr	r4, [pc, #48]	; (476c <msgeq7_all_bands+0x168>)
    473a:	4a0d      	ldr	r2, [pc, #52]	; (4770 <msgeq7_all_bands+0x16c>)
    473c:	2300      	movs	r3, #0
    473e:	47a0      	blx	r4
    4740:	0003      	movs	r3, r0
    4742:	000c      	movs	r4, r1
    4744:	0018      	movs	r0, r3
    4746:	4b0b      	ldr	r3, [pc, #44]	; (4774 <msgeq7_all_bands+0x170>)
    4748:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_RESET,true);
	delay_us(1);
	port_pin_set_output_level(MSGEQ7_PIN_RESET,false);
	delay_us(75);
	
	for (int i=0;i<7;i++)
    474a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    474c:	3301      	adds	r3, #1
    474e:	637b      	str	r3, [r7, #52]	; 0x34
    4750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4752:	2b06      	cmp	r3, #6
    4754:	dda9      	ble.n	46aa <msgeq7_all_bands+0xa6>
		delay_us(40);
		bands[i] = single_conversion();
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,true);
		delay_us(40);
	}
    4756:	46c0      	nop			; (mov r8, r8)
    4758:	46bd      	mov	sp, r7
    475a:	b00f      	add	sp, #60	; 0x3c
    475c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    475e:	46c0      	nop			; (mov r8, r8)
    4760:	000044ad 	.word	0x000044ad
    4764:	00005909 	.word	0x00005909
    4768:	006acfbf 	.word	0x006acfbf
    476c:	000066c5 	.word	0x000066c5
    4770:	006acfc0 	.word	0x006acfc0
    4774:	20000001 	.word	0x20000001
    4778:	00006705 	.word	0x00006705
    477c:	000045cd 	.word	0x000045cd

00004780 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    4780:	b580      	push	{r7, lr}
    4782:	b082      	sub	sp, #8
    4784:	af00      	add	r7, sp, #0
    4786:	0002      	movs	r2, r0
    4788:	1dfb      	adds	r3, r7, #7
    478a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    478c:	4b06      	ldr	r3, [pc, #24]	; (47a8 <NVIC_EnableIRQ+0x28>)
    478e:	1dfa      	adds	r2, r7, #7
    4790:	7812      	ldrb	r2, [r2, #0]
    4792:	0011      	movs	r1, r2
    4794:	221f      	movs	r2, #31
    4796:	400a      	ands	r2, r1
    4798:	2101      	movs	r1, #1
    479a:	4091      	lsls	r1, r2
    479c:	000a      	movs	r2, r1
    479e:	601a      	str	r2, [r3, #0]
}
    47a0:	46c0      	nop			; (mov r8, r8)
    47a2:	46bd      	mov	sp, r7
    47a4:	b002      	add	sp, #8
    47a6:	bd80      	pop	{r7, pc}
    47a8:	e000e100 	.word	0xe000e100

000047ac <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    47ac:	b5b0      	push	{r4, r5, r7, lr}
    47ae:	b082      	sub	sp, #8
    47b0:	af00      	add	r7, sp, #0
    47b2:	0002      	movs	r2, r0
    47b4:	6039      	str	r1, [r7, #0]
    47b6:	1dfb      	adds	r3, r7, #7
    47b8:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    47ba:	1dfb      	adds	r3, r7, #7
    47bc:	781b      	ldrb	r3, [r3, #0]
    47be:	2b7f      	cmp	r3, #127	; 0x7f
    47c0:	d932      	bls.n	4828 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    47c2:	4c2f      	ldr	r4, [pc, #188]	; (4880 <NVIC_SetPriority+0xd4>)
    47c4:	1dfb      	adds	r3, r7, #7
    47c6:	781b      	ldrb	r3, [r3, #0]
    47c8:	001a      	movs	r2, r3
    47ca:	230f      	movs	r3, #15
    47cc:	4013      	ands	r3, r2
    47ce:	3b08      	subs	r3, #8
    47d0:	0899      	lsrs	r1, r3, #2
    47d2:	4a2b      	ldr	r2, [pc, #172]	; (4880 <NVIC_SetPriority+0xd4>)
    47d4:	1dfb      	adds	r3, r7, #7
    47d6:	781b      	ldrb	r3, [r3, #0]
    47d8:	0018      	movs	r0, r3
    47da:	230f      	movs	r3, #15
    47dc:	4003      	ands	r3, r0
    47de:	3b08      	subs	r3, #8
    47e0:	089b      	lsrs	r3, r3, #2
    47e2:	3306      	adds	r3, #6
    47e4:	009b      	lsls	r3, r3, #2
    47e6:	18d3      	adds	r3, r2, r3
    47e8:	3304      	adds	r3, #4
    47ea:	681b      	ldr	r3, [r3, #0]
    47ec:	1dfa      	adds	r2, r7, #7
    47ee:	7812      	ldrb	r2, [r2, #0]
    47f0:	0010      	movs	r0, r2
    47f2:	2203      	movs	r2, #3
    47f4:	4002      	ands	r2, r0
    47f6:	00d2      	lsls	r2, r2, #3
    47f8:	20ff      	movs	r0, #255	; 0xff
    47fa:	4090      	lsls	r0, r2
    47fc:	0002      	movs	r2, r0
    47fe:	43d2      	mvns	r2, r2
    4800:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    4802:	683b      	ldr	r3, [r7, #0]
    4804:	019b      	lsls	r3, r3, #6
    4806:	20ff      	movs	r0, #255	; 0xff
    4808:	4018      	ands	r0, r3
    480a:	1dfb      	adds	r3, r7, #7
    480c:	781b      	ldrb	r3, [r3, #0]
    480e:	001d      	movs	r5, r3
    4810:	2303      	movs	r3, #3
    4812:	402b      	ands	r3, r5
    4814:	00db      	lsls	r3, r3, #3
    4816:	4098      	lsls	r0, r3
    4818:	0003      	movs	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    481a:	431a      	orrs	r2, r3
    481c:	1d8b      	adds	r3, r1, #6
    481e:	009b      	lsls	r3, r3, #2
    4820:	18e3      	adds	r3, r4, r3
    4822:	3304      	adds	r3, #4
    4824:	601a      	str	r2, [r3, #0]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    4826:	e027      	b.n	4878 <NVIC_SetPriority+0xcc>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    4828:	4c16      	ldr	r4, [pc, #88]	; (4884 <NVIC_SetPriority+0xd8>)
    482a:	1dfb      	adds	r3, r7, #7
    482c:	781b      	ldrb	r3, [r3, #0]
    482e:	b25b      	sxtb	r3, r3
    4830:	089b      	lsrs	r3, r3, #2
    4832:	4914      	ldr	r1, [pc, #80]	; (4884 <NVIC_SetPriority+0xd8>)
    4834:	1dfa      	adds	r2, r7, #7
    4836:	7812      	ldrb	r2, [r2, #0]
    4838:	b252      	sxtb	r2, r2
    483a:	0892      	lsrs	r2, r2, #2
    483c:	32c0      	adds	r2, #192	; 0xc0
    483e:	0092      	lsls	r2, r2, #2
    4840:	5852      	ldr	r2, [r2, r1]
    4842:	1df9      	adds	r1, r7, #7
    4844:	7809      	ldrb	r1, [r1, #0]
    4846:	0008      	movs	r0, r1
    4848:	2103      	movs	r1, #3
    484a:	4001      	ands	r1, r0
    484c:	00c9      	lsls	r1, r1, #3
    484e:	20ff      	movs	r0, #255	; 0xff
    4850:	4088      	lsls	r0, r1
    4852:	0001      	movs	r1, r0
    4854:	43c9      	mvns	r1, r1
    4856:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    4858:	683a      	ldr	r2, [r7, #0]
    485a:	0192      	lsls	r2, r2, #6
    485c:	20ff      	movs	r0, #255	; 0xff
    485e:	4010      	ands	r0, r2
    4860:	1dfa      	adds	r2, r7, #7
    4862:	7812      	ldrb	r2, [r2, #0]
    4864:	0015      	movs	r5, r2
    4866:	2203      	movs	r2, #3
    4868:	402a      	ands	r2, r5
    486a:	00d2      	lsls	r2, r2, #3
    486c:	4090      	lsls	r0, r2
    486e:	0002      	movs	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    4870:	430a      	orrs	r2, r1
    4872:	33c0      	adds	r3, #192	; 0xc0
    4874:	009b      	lsls	r3, r3, #2
    4876:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    4878:	46c0      	nop			; (mov r8, r8)
    487a:	46bd      	mov	sp, r7
    487c:	b002      	add	sp, #8
    487e:	bdb0      	pop	{r4, r5, r7, pc}
    4880:	e000ed00 	.word	0xe000ed00
    4884:	e000e100 	.word	0xe000e100

00004888 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    4888:	b580      	push	{r7, lr}
    488a:	b082      	sub	sp, #8
    488c:	af00      	add	r7, sp, #0
    488e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    4890:	687b      	ldr	r3, [r7, #4]
    4892:	2200      	movs	r2, #0
    4894:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4896:	687b      	ldr	r3, [r7, #4]
    4898:	2201      	movs	r2, #1
    489a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    489c:	687b      	ldr	r3, [r7, #4]
    489e:	2200      	movs	r2, #0
    48a0:	709a      	strb	r2, [r3, #2]
}
    48a2:	46c0      	nop			; (mov r8, r8)
    48a4:	46bd      	mov	sp, r7
    48a6:	b002      	add	sp, #8
    48a8:	bd80      	pop	{r7, pc}
    48aa:	46c0      	nop			; (mov r8, r8)

000048ac <pwm_port>:
#include "ble_uart.h"
#include "i2c.h"
#include "uart.h"

void pwm_port()
{
    48ac:	b580      	push	{r7, lr}
    48ae:	b082      	sub	sp, #8
    48b0:	af00      	add	r7, sp, #0
	pwm_count = 0;
    48b2:	4b0b      	ldr	r3, [pc, #44]	; (48e0 <pwm_port+0x34>)
    48b4:	2200      	movs	r2, #0
    48b6:	601a      	str	r2, [r3, #0]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    48b8:	1d3b      	adds	r3, r7, #4
    48ba:	0018      	movs	r0, r3
    48bc:	4b09      	ldr	r3, [pc, #36]	; (48e4 <pwm_port+0x38>)
    48be:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    48c0:	1d3b      	adds	r3, r7, #4
    48c2:	2200      	movs	r2, #0
    48c4:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    48c6:	1d3b      	adds	r3, r7, #4
    48c8:	2201      	movs	r2, #1
    48ca:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA02,&config_port_pin);
    48cc:	1d3b      	adds	r3, r7, #4
    48ce:	0019      	movs	r1, r3
    48d0:	2002      	movs	r0, #2
    48d2:	4b05      	ldr	r3, [pc, #20]	; (48e8 <pwm_port+0x3c>)
    48d4:	4798      	blx	r3
}
    48d6:	46c0      	nop			; (mov r8, r8)
    48d8:	46bd      	mov	sp, r7
    48da:	b002      	add	sp, #8
    48dc:	bd80      	pop	{r7, pc}
    48de:	46c0      	nop			; (mov r8, r8)
    48e0:	20000310 	.word	0x20000310
    48e4:	00004889 	.word	0x00004889
    48e8:	00000ce9 	.word	0x00000ce9

000048ec <init_TC3>:

void init_TC3()
{	
    48ec:	b580      	push	{r7, lr}
    48ee:	af00      	add	r7, sp, #0
	PM->APBCMASK.reg |= PM_APBCMASK_TC3;
    48f0:	4b15      	ldr	r3, [pc, #84]	; (4948 <init_TC3+0x5c>)
    48f2:	4a15      	ldr	r2, [pc, #84]	; (4948 <init_TC3+0x5c>)
    48f4:	6a12      	ldr	r2, [r2, #32]
    48f6:	2180      	movs	r1, #128	; 0x80
    48f8:	0109      	lsls	r1, r1, #4
    48fa:	430a      	orrs	r2, r1
    48fc:	621a      	str	r2, [r3, #32]

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_ID_TCC2_TC3;
    48fe:	4b13      	ldr	r3, [pc, #76]	; (494c <init_TC3+0x60>)
    4900:	4a13      	ldr	r2, [pc, #76]	; (4950 <init_TC3+0x64>)
    4902:	805a      	strh	r2, [r3, #2]
	
	TC3->COUNT16.CTRLA.reg = TC_CTRLA_MODE_COUNT16 | TC_CTRLA_WAVEGEN_MFRQ |
    4904:	4b13      	ldr	r3, [pc, #76]	; (4954 <init_TC3+0x68>)
    4906:	4a14      	ldr	r2, [pc, #80]	; (4958 <init_TC3+0x6c>)
    4908:	801a      	strh	r2, [r3, #0]
	TC_CTRLA_PRESCALER_DIV1 | TC_CTRLA_PRESCSYNC_RESYNC;

	TC3->COUNT16.COUNT.reg = 0;
    490a:	4b12      	ldr	r3, [pc, #72]	; (4954 <init_TC3+0x68>)
    490c:	2200      	movs	r2, #0
    490e:	821a      	strh	r2, [r3, #16]
	TC3->COUNT16.CC[0].reg = COMPARE_MATCH;
    4910:	4b10      	ldr	r3, [pc, #64]	; (4954 <init_TC3+0x68>)
    4912:	4a12      	ldr	r2, [pc, #72]	; (495c <init_TC3+0x70>)
    4914:	831a      	strh	r2, [r3, #24]
	
	
	TC3->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    4916:	4a0f      	ldr	r2, [pc, #60]	; (4954 <init_TC3+0x68>)
    4918:	4b0e      	ldr	r3, [pc, #56]	; (4954 <init_TC3+0x68>)
    491a:	881b      	ldrh	r3, [r3, #0]
    491c:	b29b      	uxth	r3, r3
    491e:	2102      	movs	r1, #2
    4920:	430b      	orrs	r3, r1
    4922:	b29b      	uxth	r3, r3
    4924:	8013      	strh	r3, [r2, #0]
	TC3->COUNT16.DBGCTRL.reg = TC_DBGCTRL_DBGRUN;
    4926:	4b0b      	ldr	r3, [pc, #44]	; (4954 <init_TC3+0x68>)
    4928:	2201      	movs	r2, #1
    492a:	721a      	strb	r2, [r3, #8]
	TC3->COUNT16.INTENSET.reg = TC_INTENSET_MC0;
    492c:	4b09      	ldr	r3, [pc, #36]	; (4954 <init_TC3+0x68>)
    492e:	2210      	movs	r2, #16
    4930:	735a      	strb	r2, [r3, #13]
	NVIC_EnableIRQ(TC3_IRQn);
    4932:	2012      	movs	r0, #18
    4934:	4b0a      	ldr	r3, [pc, #40]	; (4960 <init_TC3+0x74>)
    4936:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,2);
    4938:	2102      	movs	r1, #2
    493a:	2012      	movs	r0, #18
    493c:	4b09      	ldr	r3, [pc, #36]	; (4964 <init_TC3+0x78>)
    493e:	4798      	blx	r3
	/*PORT->Group[0].DIRSET.reg=18;
	PORT->Group[0].PINCFG[18].bit.PMUXEN=1;
	PORT->Group[0].PMUX[9].bit.PMUXE = 4;*/
}
    4940:	46c0      	nop			; (mov r8, r8)
    4942:	46bd      	mov	sp, r7
    4944:	bd80      	pop	{r7, pc}
    4946:	46c0      	nop			; (mov r8, r8)
    4948:	40000400 	.word	0x40000400
    494c:	40000c00 	.word	0x40000c00
    4950:	0000401b 	.word	0x0000401b
    4954:	42002c00 	.word	0x42002c00
    4958:	00002020 	.word	0x00002020
    495c:	ffff9c40 	.word	0xffff9c40
    4960:	00004781 	.word	0x00004781
    4964:	000047ad 	.word	0x000047ad

00004968 <TC3_Handler>:
uint16_t values_bands[6];

bool a_okayish = true;
char buffer[64];
void TC3_Handler()
{
    4968:	b580      	push	{r7, lr}
    496a:	af00      	add	r7, sp, #0
	static bool blink_state = false;
	// Overflow interrupt triggered
	if ( TC3->COUNT16.INTFLAG.bit.OVF == 1 )
    496c:	4b10      	ldr	r3, [pc, #64]	; (49b0 <TC3_Handler+0x48>)
    496e:	7b9b      	ldrb	r3, [r3, #14]
    4970:	07db      	lsls	r3, r3, #31
    4972:	0fdb      	lsrs	r3, r3, #31
    4974:	b2db      	uxtb	r3, r3
    4976:	2b01      	cmp	r3, #1
    4978:	d116      	bne.n	49a8 <TC3_Handler+0x40>
	{
		should_update = true;	
    497a:	4b0e      	ldr	r3, [pc, #56]	; (49b4 <TC3_Handler+0x4c>)
    497c:	2201      	movs	r2, #1
    497e:	701a      	strb	r2, [r3, #0]
		pwm_count++;
    4980:	4b0d      	ldr	r3, [pc, #52]	; (49b8 <TC3_Handler+0x50>)
    4982:	681b      	ldr	r3, [r3, #0]
    4984:	1c5a      	adds	r2, r3, #1
    4986:	4b0c      	ldr	r3, [pc, #48]	; (49b8 <TC3_Handler+0x50>)
    4988:	601a      	str	r2, [r3, #0]
		
		

		if (pwm_count > PWM_FREQ)
    498a:	4b0b      	ldr	r3, [pc, #44]	; (49b8 <TC3_Handler+0x50>)
    498c:	681b      	ldr	r3, [r3, #0]
    498e:	2bc8      	cmp	r3, #200	; 0xc8
    4990:	dd07      	ble.n	49a2 <TC3_Handler+0x3a>
		{
			/*if ((seconds % 300) == 0)
			{
				execute_order_66 = true;
			}*/
			seconds++;
    4992:	4b0a      	ldr	r3, [pc, #40]	; (49bc <TC3_Handler+0x54>)
    4994:	681b      	ldr	r3, [r3, #0]
    4996:	1c5a      	adds	r2, r3, #1
    4998:	4b08      	ldr	r3, [pc, #32]	; (49bc <TC3_Handler+0x54>)
    499a:	601a      	str	r2, [r3, #0]
			if (party)
			{
				sprintf(buffer,"%d %d %d %d %d %d",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
				ble_uart_write(buffer);
			}*/
			pwm_count = 0;
    499c:	4b06      	ldr	r3, [pc, #24]	; (49b8 <TC3_Handler+0x50>)
    499e:	2200      	movs	r2, #0
    49a0:	601a      	str	r2, [r3, #0]
		}
		TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0;
    49a2:	4b03      	ldr	r3, [pc, #12]	; (49b0 <TC3_Handler+0x48>)
    49a4:	2210      	movs	r2, #16
    49a6:	739a      	strb	r2, [r3, #14]
	}
}
    49a8:	46c0      	nop			; (mov r8, r8)
    49aa:	46bd      	mov	sp, r7
    49ac:	bd80      	pop	{r7, pc}
    49ae:	46c0      	nop			; (mov r8, r8)
    49b0:	42002c00 	.word	0x42002c00
    49b4:	200002e9 	.word	0x200002e9
    49b8:	20000310 	.word	0x20000310
    49bc:	200002f0 	.word	0x200002f0

000049c0 <things_to_do>:

void things_to_do(void)
{
    49c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    49c2:	b087      	sub	sp, #28
    49c4:	af04      	add	r7, sp, #16
	if (party)
    49c6:	4b27      	ldr	r3, [pc, #156]	; (4a64 <things_to_do+0xa4>)
    49c8:	781b      	ldrb	r3, [r3, #0]
    49ca:	b2db      	uxtb	r3, r3
    49cc:	2b00      	cmp	r3, #0
    49ce:	d026      	beq.n	4a1e <things_to_do+0x5e>
	{
		msgeq7_all_bands(values_bands);
    49d0:	4b25      	ldr	r3, [pc, #148]	; (4a68 <things_to_do+0xa8>)
    49d2:	0018      	movs	r0, r3
    49d4:	4b25      	ldr	r3, [pc, #148]	; (4a6c <things_to_do+0xac>)
    49d6:	4798      	blx	r3
		party_lights(values_bands);
    49d8:	4b23      	ldr	r3, [pc, #140]	; (4a68 <things_to_do+0xa8>)
    49da:	0018      	movs	r0, r3
    49dc:	4b24      	ldr	r3, [pc, #144]	; (4a70 <things_to_do+0xb0>)
    49de:	4798      	blx	r3
		sprintf(buffer,"%04d %04d %04d %04d %04d %04d\r\n",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
    49e0:	4b21      	ldr	r3, [pc, #132]	; (4a68 <things_to_do+0xa8>)
    49e2:	881b      	ldrh	r3, [r3, #0]
    49e4:	001e      	movs	r6, r3
    49e6:	4b20      	ldr	r3, [pc, #128]	; (4a68 <things_to_do+0xa8>)
    49e8:	885b      	ldrh	r3, [r3, #2]
    49ea:	607b      	str	r3, [r7, #4]
    49ec:	4b1e      	ldr	r3, [pc, #120]	; (4a68 <things_to_do+0xa8>)
    49ee:	889b      	ldrh	r3, [r3, #4]
    49f0:	001a      	movs	r2, r3
    49f2:	4b1d      	ldr	r3, [pc, #116]	; (4a68 <things_to_do+0xa8>)
    49f4:	88db      	ldrh	r3, [r3, #6]
    49f6:	001c      	movs	r4, r3
    49f8:	4b1b      	ldr	r3, [pc, #108]	; (4a68 <things_to_do+0xa8>)
    49fa:	891b      	ldrh	r3, [r3, #8]
    49fc:	001d      	movs	r5, r3
    49fe:	4b1a      	ldr	r3, [pc, #104]	; (4a68 <things_to_do+0xa8>)
    4a00:	895b      	ldrh	r3, [r3, #10]
    4a02:	491c      	ldr	r1, [pc, #112]	; (4a74 <things_to_do+0xb4>)
    4a04:	481c      	ldr	r0, [pc, #112]	; (4a78 <things_to_do+0xb8>)
    4a06:	9303      	str	r3, [sp, #12]
    4a08:	9502      	str	r5, [sp, #8]
    4a0a:	9401      	str	r4, [sp, #4]
    4a0c:	9200      	str	r2, [sp, #0]
    4a0e:	687b      	ldr	r3, [r7, #4]
    4a10:	0032      	movs	r2, r6
    4a12:	4c1a      	ldr	r4, [pc, #104]	; (4a7c <things_to_do+0xbc>)
    4a14:	47a0      	blx	r4
		uart_write(&buffer);
    4a16:	4b18      	ldr	r3, [pc, #96]	; (4a78 <things_to_do+0xb8>)
    4a18:	0018      	movs	r0, r3
    4a1a:	4b19      	ldr	r3, [pc, #100]	; (4a80 <things_to_do+0xc0>)
    4a1c:	4798      	blx	r3
		
	}
	if ((pwm_count % 25) == 0)
    4a1e:	4b19      	ldr	r3, [pc, #100]	; (4a84 <things_to_do+0xc4>)
    4a20:	681a      	ldr	r2, [r3, #0]
    4a22:	4b19      	ldr	r3, [pc, #100]	; (4a88 <things_to_do+0xc8>)
    4a24:	2119      	movs	r1, #25
    4a26:	0010      	movs	r0, r2
    4a28:	4798      	blx	r3
    4a2a:	1e0b      	subs	r3, r1, #0
    4a2c:	d10e      	bne.n	4a4c <things_to_do+0x8c>
	{
		if (flashy2)
    4a2e:	4b17      	ldr	r3, [pc, #92]	; (4a8c <things_to_do+0xcc>)
    4a30:	781b      	ldrb	r3, [r3, #0]
    4a32:	b2db      	uxtb	r3, r3
    4a34:	2b00      	cmp	r3, #0
    4a36:	d002      	beq.n	4a3e <things_to_do+0x7e>
		{
			flashy_flash1();
    4a38:	4b15      	ldr	r3, [pc, #84]	; (4a90 <things_to_do+0xd0>)
    4a3a:	4798      	blx	r3
    4a3c:	e006      	b.n	4a4c <things_to_do+0x8c>
		}
		else if (flashy1)
    4a3e:	4b15      	ldr	r3, [pc, #84]	; (4a94 <things_to_do+0xd4>)
    4a40:	781b      	ldrb	r3, [r3, #0]
    4a42:	b2db      	uxtb	r3, r3
    4a44:	2b00      	cmp	r3, #0
    4a46:	d001      	beq.n	4a4c <things_to_do+0x8c>
		{
			flashy_flash2();
    4a48:	4b13      	ldr	r3, [pc, #76]	; (4a98 <things_to_do+0xd8>)
    4a4a:	4798      	blx	r3
		}
	}
	if (flashyfade)
    4a4c:	4b13      	ldr	r3, [pc, #76]	; (4a9c <things_to_do+0xdc>)
    4a4e:	781b      	ldrb	r3, [r3, #0]
    4a50:	b2db      	uxtb	r3, r3
    4a52:	2b00      	cmp	r3, #0
    4a54:	d001      	beq.n	4a5a <things_to_do+0x9a>
	{
		flashy_fades();
    4a56:	4b12      	ldr	r3, [pc, #72]	; (4aa0 <things_to_do+0xe0>)
    4a58:	4798      	blx	r3
	/*if (party)
	{
		sprintf(buffer,"%d %d %d %d %d %d\r\n",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
		ble_uart_write(buffer);
	}*/
}
    4a5a:	46c0      	nop			; (mov r8, r8)
    4a5c:	46bd      	mov	sp, r7
    4a5e:	b003      	add	sp, #12
    4a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a62:	46c0      	nop			; (mov r8, r8)
    4a64:	20000259 	.word	0x20000259
    4a68:	20000368 	.word	0x20000368
    4a6c:	00004605 	.word	0x00004605
    4a70:	00002ffd 	.word	0x00002ffd
    4a74:	0000999c 	.word	0x0000999c
    4a78:	20000328 	.word	0x20000328
    4a7c:	0000828d 	.word	0x0000828d
    4a80:	00005095 	.word	0x00005095
    4a84:	20000310 	.word	0x20000310
    4a88:	000066b9 	.word	0x000066b9
    4a8c:	20000247 	.word	0x20000247
    4a90:	00003265 	.word	0x00003265
    4a94:	200001b3 	.word	0x200001b3
    4a98:	0000346d 	.word	0x0000346d
    4a9c:	20000263 	.word	0x20000263
    4aa0:	000036bd 	.word	0x000036bd

00004aa4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4aa4:	b580      	push	{r7, lr}
    4aa6:	b084      	sub	sp, #16
    4aa8:	af00      	add	r7, sp, #0
    4aaa:	0002      	movs	r2, r0
    4aac:	1dfb      	adds	r3, r7, #7
    4aae:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4ab0:	230f      	movs	r3, #15
    4ab2:	18fb      	adds	r3, r7, r3
    4ab4:	1dfa      	adds	r2, r7, #7
    4ab6:	7812      	ldrb	r2, [r2, #0]
    4ab8:	09d2      	lsrs	r2, r2, #7
    4aba:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4abc:	230e      	movs	r3, #14
    4abe:	18fb      	adds	r3, r7, r3
    4ac0:	1dfa      	adds	r2, r7, #7
    4ac2:	7812      	ldrb	r2, [r2, #0]
    4ac4:	0952      	lsrs	r2, r2, #5
    4ac6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4ac8:	4b0d      	ldr	r3, [pc, #52]	; (4b00 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4aca:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4acc:	230f      	movs	r3, #15
    4ace:	18fb      	adds	r3, r7, r3
    4ad0:	781b      	ldrb	r3, [r3, #0]
    4ad2:	2b00      	cmp	r3, #0
    4ad4:	d10f      	bne.n	4af6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4ad6:	230f      	movs	r3, #15
    4ad8:	18fb      	adds	r3, r7, r3
    4ada:	781b      	ldrb	r3, [r3, #0]
    4adc:	009b      	lsls	r3, r3, #2
    4ade:	2210      	movs	r2, #16
    4ae0:	4694      	mov	ip, r2
    4ae2:	44bc      	add	ip, r7
    4ae4:	4463      	add	r3, ip
    4ae6:	3b08      	subs	r3, #8
    4ae8:	681a      	ldr	r2, [r3, #0]
    4aea:	230e      	movs	r3, #14
    4aec:	18fb      	adds	r3, r7, r3
    4aee:	781b      	ldrb	r3, [r3, #0]
    4af0:	01db      	lsls	r3, r3, #7
    4af2:	18d3      	adds	r3, r2, r3
    4af4:	e000      	b.n	4af8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4af6:	2300      	movs	r3, #0
	}
}
    4af8:	0018      	movs	r0, r3
    4afa:	46bd      	mov	sp, r7
    4afc:	b004      	add	sp, #16
    4afe:	bd80      	pop	{r7, pc}
    4b00:	41004400 	.word	0x41004400

00004b04 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4b04:	b580      	push	{r7, lr}
    4b06:	b082      	sub	sp, #8
    4b08:	af00      	add	r7, sp, #0
    4b0a:	0002      	movs	r2, r0
    4b0c:	1dfb      	adds	r3, r7, #7
    4b0e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4b10:	1dfb      	adds	r3, r7, #7
    4b12:	781b      	ldrb	r3, [r3, #0]
    4b14:	0018      	movs	r0, r3
    4b16:	4b03      	ldr	r3, [pc, #12]	; (4b24 <port_get_group_from_gpio_pin+0x20>)
    4b18:	4798      	blx	r3
    4b1a:	0003      	movs	r3, r0
}
    4b1c:	0018      	movs	r0, r3
    4b1e:	46bd      	mov	sp, r7
    4b20:	b002      	add	sp, #8
    4b22:	bd80      	pop	{r7, pc}
    4b24:	00004aa5 	.word	0x00004aa5

00004b28 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    4b28:	b580      	push	{r7, lr}
    4b2a:	b082      	sub	sp, #8
    4b2c:	af00      	add	r7, sp, #0
    4b2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    4b30:	687b      	ldr	r3, [r7, #4]
    4b32:	2200      	movs	r2, #0
    4b34:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4b36:	687b      	ldr	r3, [r7, #4]
    4b38:	2201      	movs	r2, #1
    4b3a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    4b3c:	687b      	ldr	r3, [r7, #4]
    4b3e:	2200      	movs	r2, #0
    4b40:	709a      	strb	r2, [r3, #2]
}
    4b42:	46c0      	nop			; (mov r8, r8)
    4b44:	46bd      	mov	sp, r7
    4b46:	b002      	add	sp, #8
    4b48:	bd80      	pop	{r7, pc}
    4b4a:	46c0      	nop			; (mov r8, r8)

00004b4c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    4b4c:	b580      	push	{r7, lr}
    4b4e:	b084      	sub	sp, #16
    4b50:	af00      	add	r7, sp, #0
    4b52:	0002      	movs	r2, r0
    4b54:	1dfb      	adds	r3, r7, #7
    4b56:	701a      	strb	r2, [r3, #0]
    4b58:	1dbb      	adds	r3, r7, #6
    4b5a:	1c0a      	adds	r2, r1, #0
    4b5c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4b5e:	1dfb      	adds	r3, r7, #7
    4b60:	781b      	ldrb	r3, [r3, #0]
    4b62:	0018      	movs	r0, r3
    4b64:	4b0d      	ldr	r3, [pc, #52]	; (4b9c <port_pin_set_output_level+0x50>)
    4b66:	4798      	blx	r3
    4b68:	0003      	movs	r3, r0
    4b6a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4b6c:	1dfb      	adds	r3, r7, #7
    4b6e:	781b      	ldrb	r3, [r3, #0]
    4b70:	221f      	movs	r2, #31
    4b72:	4013      	ands	r3, r2
    4b74:	2201      	movs	r2, #1
    4b76:	409a      	lsls	r2, r3
    4b78:	0013      	movs	r3, r2
    4b7a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4b7c:	1dbb      	adds	r3, r7, #6
    4b7e:	781b      	ldrb	r3, [r3, #0]
    4b80:	2b00      	cmp	r3, #0
    4b82:	d003      	beq.n	4b8c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4b84:	68fb      	ldr	r3, [r7, #12]
    4b86:	68ba      	ldr	r2, [r7, #8]
    4b88:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    4b8a:	e002      	b.n	4b92 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4b8c:	68fb      	ldr	r3, [r7, #12]
    4b8e:	68ba      	ldr	r2, [r7, #8]
    4b90:	615a      	str	r2, [r3, #20]
	}
}
    4b92:	46c0      	nop			; (mov r8, r8)
    4b94:	46bd      	mov	sp, r7
    4b96:	b004      	add	sp, #16
    4b98:	bd80      	pop	{r7, pc}
    4b9a:	46c0      	nop			; (mov r8, r8)
    4b9c:	00004b05 	.word	0x00004b05

00004ba0 <sounds_init_pins>:
 *  Author: Andreas
 */ 
#include "sounds.h"

void sounds_init_pins(void)
{
    4ba0:	b580      	push	{r7, lr}
    4ba2:	b082      	sub	sp, #8
    4ba4:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    4ba6:	1d3b      	adds	r3, r7, #4
    4ba8:	0018      	movs	r0, r3
    4baa:	4b44      	ldr	r3, [pc, #272]	; (4cbc <sounds_init_pins+0x11c>)
    4bac:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    4bae:	1d3b      	adds	r3, r7, #4
    4bb0:	2201      	movs	r2, #1
    4bb2:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4bb4:	1d3b      	adds	r3, r7, #4
    4bb6:	2201      	movs	r2, #1
    4bb8:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SOUNDS_PIN_SS,&config_port_pin);
    4bba:	1d3b      	adds	r3, r7, #4
    4bbc:	0019      	movs	r1, r3
    4bbe:	2005      	movs	r0, #5
    4bc0:	4b3f      	ldr	r3, [pc, #252]	; (4cc0 <sounds_init_pins+0x120>)
    4bc2:	4798      	blx	r3
	//port_pin_set_config(SOUNDS_PIN_SPDT_SEL1,&config_port_pin);
	//port_pin_set_config(SOUNDS_PIN_SPDT_SEL2,&config_port_pin);
	
	port_pin_set_config(SB_PIN_RESET,&config_port_pin);
    4bc4:	1d3b      	adds	r3, r7, #4
    4bc6:	0019      	movs	r1, r3
    4bc8:	201c      	movs	r0, #28
    4bca:	4b3d      	ldr	r3, [pc, #244]	; (4cc0 <sounds_init_pins+0x120>)
    4bcc:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_RESET,true);
    4bce:	2101      	movs	r1, #1
    4bd0:	201c      	movs	r0, #28
    4bd2:	4b3c      	ldr	r3, [pc, #240]	; (4cc4 <sounds_init_pins+0x124>)
    4bd4:	4798      	blx	r3
	
	
	
	
	port_pin_set_config(SB_PIN_BTN00,&config_port_pin);
    4bd6:	1d3b      	adds	r3, r7, #4
    4bd8:	0019      	movs	r1, r3
    4bda:	200b      	movs	r0, #11
    4bdc:	4b38      	ldr	r3, [pc, #224]	; (4cc0 <sounds_init_pins+0x120>)
    4bde:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN00,true);
    4be0:	2101      	movs	r1, #1
    4be2:	200b      	movs	r0, #11
    4be4:	4b37      	ldr	r3, [pc, #220]	; (4cc4 <sounds_init_pins+0x124>)
    4be6:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN01,&config_port_pin);
    4be8:	1d3b      	adds	r3, r7, #4
    4bea:	0019      	movs	r1, r3
    4bec:	200c      	movs	r0, #12
    4bee:	4b34      	ldr	r3, [pc, #208]	; (4cc0 <sounds_init_pins+0x120>)
    4bf0:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN01,true);
    4bf2:	2101      	movs	r1, #1
    4bf4:	200c      	movs	r0, #12
    4bf6:	4b33      	ldr	r3, [pc, #204]	; (4cc4 <sounds_init_pins+0x124>)
    4bf8:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN02,&config_port_pin);
    4bfa:	1d3b      	adds	r3, r7, #4
    4bfc:	0019      	movs	r1, r3
    4bfe:	200d      	movs	r0, #13
    4c00:	4b2f      	ldr	r3, [pc, #188]	; (4cc0 <sounds_init_pins+0x120>)
    4c02:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN02,true);
    4c04:	2101      	movs	r1, #1
    4c06:	200d      	movs	r0, #13
    4c08:	4b2e      	ldr	r3, [pc, #184]	; (4cc4 <sounds_init_pins+0x124>)
    4c0a:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN03,&config_port_pin);
    4c0c:	1d3b      	adds	r3, r7, #4
    4c0e:	0019      	movs	r1, r3
    4c10:	200e      	movs	r0, #14
    4c12:	4b2b      	ldr	r3, [pc, #172]	; (4cc0 <sounds_init_pins+0x120>)
    4c14:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN03,true);
    4c16:	2101      	movs	r1, #1
    4c18:	200e      	movs	r0, #14
    4c1a:	4b2a      	ldr	r3, [pc, #168]	; (4cc4 <sounds_init_pins+0x124>)
    4c1c:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN04,&config_port_pin);
    4c1e:	1d3b      	adds	r3, r7, #4
    4c20:	0019      	movs	r1, r3
    4c22:	200f      	movs	r0, #15
    4c24:	4b26      	ldr	r3, [pc, #152]	; (4cc0 <sounds_init_pins+0x120>)
    4c26:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN04,true);
    4c28:	2101      	movs	r1, #1
    4c2a:	200f      	movs	r0, #15
    4c2c:	4b25      	ldr	r3, [pc, #148]	; (4cc4 <sounds_init_pins+0x124>)
    4c2e:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN05,&config_port_pin);
    4c30:	1d3b      	adds	r3, r7, #4
    4c32:	0019      	movs	r1, r3
    4c34:	2010      	movs	r0, #16
    4c36:	4b22      	ldr	r3, [pc, #136]	; (4cc0 <sounds_init_pins+0x120>)
    4c38:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN05,true);
    4c3a:	2101      	movs	r1, #1
    4c3c:	2010      	movs	r0, #16
    4c3e:	4b21      	ldr	r3, [pc, #132]	; (4cc4 <sounds_init_pins+0x124>)
    4c40:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN06,&config_port_pin);
    4c42:	1d3b      	adds	r3, r7, #4
    4c44:	0019      	movs	r1, r3
    4c46:	2011      	movs	r0, #17
    4c48:	4b1d      	ldr	r3, [pc, #116]	; (4cc0 <sounds_init_pins+0x120>)
    4c4a:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN06,true);
    4c4c:	2101      	movs	r1, #1
    4c4e:	2011      	movs	r0, #17
    4c50:	4b1c      	ldr	r3, [pc, #112]	; (4cc4 <sounds_init_pins+0x124>)
    4c52:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN07,&config_port_pin);
    4c54:	1d3b      	adds	r3, r7, #4
    4c56:	0019      	movs	r1, r3
    4c58:	2012      	movs	r0, #18
    4c5a:	4b19      	ldr	r3, [pc, #100]	; (4cc0 <sounds_init_pins+0x120>)
    4c5c:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN07,true);
    4c5e:	2101      	movs	r1, #1
    4c60:	2012      	movs	r0, #18
    4c62:	4b18      	ldr	r3, [pc, #96]	; (4cc4 <sounds_init_pins+0x124>)
    4c64:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN08,&config_port_pin);
    4c66:	1d3b      	adds	r3, r7, #4
    4c68:	0019      	movs	r1, r3
    4c6a:	2013      	movs	r0, #19
    4c6c:	4b14      	ldr	r3, [pc, #80]	; (4cc0 <sounds_init_pins+0x120>)
    4c6e:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN08,true);
    4c70:	2101      	movs	r1, #1
    4c72:	2013      	movs	r0, #19
    4c74:	4b13      	ldr	r3, [pc, #76]	; (4cc4 <sounds_init_pins+0x124>)
    4c76:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN09,&config_port_pin);
    4c78:	1d3b      	adds	r3, r7, #4
    4c7a:	0019      	movs	r1, r3
    4c7c:	2014      	movs	r0, #20
    4c7e:	4b10      	ldr	r3, [pc, #64]	; (4cc0 <sounds_init_pins+0x120>)
    4c80:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN09,true);
    4c82:	2101      	movs	r1, #1
    4c84:	2014      	movs	r0, #20
    4c86:	4b0f      	ldr	r3, [pc, #60]	; (4cc4 <sounds_init_pins+0x124>)
    4c88:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN10,&config_port_pin);
    4c8a:	1d3b      	adds	r3, r7, #4
    4c8c:	0019      	movs	r1, r3
    4c8e:	2015      	movs	r0, #21
    4c90:	4b0b      	ldr	r3, [pc, #44]	; (4cc0 <sounds_init_pins+0x120>)
    4c92:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN10,true);
    4c94:	2101      	movs	r1, #1
    4c96:	2015      	movs	r0, #21
    4c98:	4b0a      	ldr	r3, [pc, #40]	; (4cc4 <sounds_init_pins+0x124>)
    4c9a:	4798      	blx	r3
	
	config_port_pin.direction = PORT_PIN_PULL_UP;
    4c9c:	1d3b      	adds	r3, r7, #4
    4c9e:	2201      	movs	r2, #1
    4ca0:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SB_PIN_UG,&config_port_pin);
    4ca2:	1d3b      	adds	r3, r7, #4
    4ca4:	0019      	movs	r1, r3
    4ca6:	201b      	movs	r0, #27
    4ca8:	4b05      	ldr	r3, [pc, #20]	; (4cc0 <sounds_init_pins+0x120>)
    4caa:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_UG,true);
    4cac:	2101      	movs	r1, #1
    4cae:	201b      	movs	r0, #27
    4cb0:	4b04      	ldr	r3, [pc, #16]	; (4cc4 <sounds_init_pins+0x124>)
    4cb2:	4798      	blx	r3
}
    4cb4:	46c0      	nop			; (mov r8, r8)
    4cb6:	46bd      	mov	sp, r7
    4cb8:	b002      	add	sp, #8
    4cba:	bd80      	pop	{r7, pc}
    4cbc:	00004b29 	.word	0x00004b29
    4cc0:	00000ce9 	.word	0x00000ce9
    4cc4:	00004b4d 	.word	0x00004b4d

00004cc8 <press_sb_btn_once>:
	port_pin_set_output_level(SOUNDS_PIN_SPDT_SEL1,false);
	port_pin_set_output_level(SOUNDS_PIN_SPDT_SEL2,false);
}*/

void press_sb_btn_once(uint8_t btn)
{
    4cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cca:	b083      	sub	sp, #12
    4ccc:	af00      	add	r7, sp, #0
    4cce:	0002      	movs	r2, r0
    4cd0:	1dfb      	adds	r3, r7, #7
    4cd2:	701a      	strb	r2, [r3, #0]
	sounds_reset();
    4cd4:	4b18      	ldr	r3, [pc, #96]	; (4d38 <press_sb_btn_once+0x70>)
    4cd6:	4798      	blx	r3
	/*for (int i=0;i<11;i++)
	{
		if (i+11 == btn)
		{*/
			port_pin_set_output_level(btn,false);
    4cd8:	1dfb      	adds	r3, r7, #7
    4cda:	781b      	ldrb	r3, [r3, #0]
    4cdc:	2100      	movs	r1, #0
    4cde:	0018      	movs	r0, r3
    4ce0:	4b16      	ldr	r3, [pc, #88]	; (4d3c <press_sb_btn_once+0x74>)
    4ce2:	4798      	blx	r3
		else
		{
			port_pin_set_output_level(i+11,true);
		}
	}*/
	delay_ms(150);
    4ce4:	2000      	movs	r0, #0
    4ce6:	4b16      	ldr	r3, [pc, #88]	; (4d40 <press_sb_btn_once+0x78>)
    4ce8:	4798      	blx	r3
    4cea:	0003      	movs	r3, r0
    4cec:	001d      	movs	r5, r3
    4cee:	2300      	movs	r3, #0
    4cf0:	001e      	movs	r6, r3
    4cf2:	4c14      	ldr	r4, [pc, #80]	; (4d44 <press_sb_btn_once+0x7c>)
    4cf4:	2296      	movs	r2, #150	; 0x96
    4cf6:	2300      	movs	r3, #0
    4cf8:	0028      	movs	r0, r5
    4cfa:	0031      	movs	r1, r6
    4cfc:	47a0      	blx	r4
    4cfe:	0003      	movs	r3, r0
    4d00:	000c      	movs	r4, r1
    4d02:	0019      	movs	r1, r3
    4d04:	0022      	movs	r2, r4
    4d06:	4b10      	ldr	r3, [pc, #64]	; (4d48 <press_sb_btn_once+0x80>)
    4d08:	2400      	movs	r4, #0
    4d0a:	18c9      	adds	r1, r1, r3
    4d0c:	4162      	adcs	r2, r4
    4d0e:	0008      	movs	r0, r1
    4d10:	0011      	movs	r1, r2
    4d12:	4c0e      	ldr	r4, [pc, #56]	; (4d4c <press_sb_btn_once+0x84>)
    4d14:	4a0e      	ldr	r2, [pc, #56]	; (4d50 <press_sb_btn_once+0x88>)
    4d16:	2300      	movs	r3, #0
    4d18:	47a0      	blx	r4
    4d1a:	0003      	movs	r3, r0
    4d1c:	000c      	movs	r4, r1
    4d1e:	0018      	movs	r0, r3
    4d20:	4b0c      	ldr	r3, [pc, #48]	; (4d54 <press_sb_btn_once+0x8c>)
    4d22:	4798      	blx	r3
	port_pin_set_output_level(btn,true);
    4d24:	1dfb      	adds	r3, r7, #7
    4d26:	781b      	ldrb	r3, [r3, #0]
    4d28:	2101      	movs	r1, #1
    4d2a:	0018      	movs	r0, r3
    4d2c:	4b03      	ldr	r3, [pc, #12]	; (4d3c <press_sb_btn_once+0x74>)
    4d2e:	4798      	blx	r3
}
    4d30:	46c0      	nop			; (mov r8, r8)
    4d32:	46bd      	mov	sp, r7
    4d34:	b003      	add	sp, #12
    4d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d38:	00004d7d 	.word	0x00004d7d
    4d3c:	00004b4d 	.word	0x00004b4d
    4d40:	00005909 	.word	0x00005909
    4d44:	00006705 	.word	0x00006705
    4d48:	00001b57 	.word	0x00001b57
    4d4c:	000066c5 	.word	0x000066c5
    4d50:	00001b58 	.word	0x00001b58
    4d54:	20000001 	.word	0x20000001

00004d58 <release_sb_btn>:
{
	port_pin_set_output_level(btn,false);
}

void release_sb_btn(uint8_t btn)
{
    4d58:	b580      	push	{r7, lr}
    4d5a:	b082      	sub	sp, #8
    4d5c:	af00      	add	r7, sp, #0
    4d5e:	0002      	movs	r2, r0
    4d60:	1dfb      	adds	r3, r7, #7
    4d62:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(btn,true);
    4d64:	1dfb      	adds	r3, r7, #7
    4d66:	781b      	ldrb	r3, [r3, #0]
    4d68:	2101      	movs	r1, #1
    4d6a:	0018      	movs	r0, r3
    4d6c:	4b02      	ldr	r3, [pc, #8]	; (4d78 <release_sb_btn+0x20>)
    4d6e:	4798      	blx	r3
}
    4d70:	46c0      	nop			; (mov r8, r8)
    4d72:	46bd      	mov	sp, r7
    4d74:	b002      	add	sp, #8
    4d76:	bd80      	pop	{r7, pc}
    4d78:	00004b4d 	.word	0x00004b4d

00004d7c <sounds_reset>:
{
	mcp23017_set_pins(MTH_ADDR,0x00,0x00);
}

void sounds_reset(void)
{
    4d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d7e:	b083      	sub	sp, #12
    4d80:	af00      	add	r7, sp, #0
	port_pin_set_output_level(SB_PIN_RESET,false);
    4d82:	2100      	movs	r1, #0
    4d84:	201c      	movs	r0, #28
    4d86:	4b35      	ldr	r3, [pc, #212]	; (4e5c <sounds_reset+0xe0>)
    4d88:	4798      	blx	r3
	delay_ms(50);
    4d8a:	2000      	movs	r0, #0
    4d8c:	4b34      	ldr	r3, [pc, #208]	; (4e60 <sounds_reset+0xe4>)
    4d8e:	4798      	blx	r3
    4d90:	0003      	movs	r3, r0
    4d92:	603b      	str	r3, [r7, #0]
    4d94:	2300      	movs	r3, #0
    4d96:	607b      	str	r3, [r7, #4]
    4d98:	4c32      	ldr	r4, [pc, #200]	; (4e64 <sounds_reset+0xe8>)
    4d9a:	2232      	movs	r2, #50	; 0x32
    4d9c:	2300      	movs	r3, #0
    4d9e:	6838      	ldr	r0, [r7, #0]
    4da0:	6879      	ldr	r1, [r7, #4]
    4da2:	47a0      	blx	r4
    4da4:	0003      	movs	r3, r0
    4da6:	000c      	movs	r4, r1
    4da8:	0019      	movs	r1, r3
    4daa:	0022      	movs	r2, r4
    4dac:	4b2e      	ldr	r3, [pc, #184]	; (4e68 <sounds_reset+0xec>)
    4dae:	2400      	movs	r4, #0
    4db0:	18c9      	adds	r1, r1, r3
    4db2:	4162      	adcs	r2, r4
    4db4:	0008      	movs	r0, r1
    4db6:	0011      	movs	r1, r2
    4db8:	4c2c      	ldr	r4, [pc, #176]	; (4e6c <sounds_reset+0xf0>)
    4dba:	4a2d      	ldr	r2, [pc, #180]	; (4e70 <sounds_reset+0xf4>)
    4dbc:	2300      	movs	r3, #0
    4dbe:	47a0      	blx	r4
    4dc0:	0003      	movs	r3, r0
    4dc2:	000c      	movs	r4, r1
    4dc4:	0018      	movs	r0, r3
    4dc6:	4b2b      	ldr	r3, [pc, #172]	; (4e74 <sounds_reset+0xf8>)
    4dc8:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_RESET,true);
    4dca:	2101      	movs	r1, #1
    4dcc:	201c      	movs	r0, #28
    4dce:	4b23      	ldr	r3, [pc, #140]	; (4e5c <sounds_reset+0xe0>)
    4dd0:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN00);
    4dd2:	200b      	movs	r0, #11
    4dd4:	4b28      	ldr	r3, [pc, #160]	; (4e78 <sounds_reset+0xfc>)
    4dd6:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN01);
    4dd8:	200c      	movs	r0, #12
    4dda:	4b27      	ldr	r3, [pc, #156]	; (4e78 <sounds_reset+0xfc>)
    4ddc:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN02);
    4dde:	200d      	movs	r0, #13
    4de0:	4b25      	ldr	r3, [pc, #148]	; (4e78 <sounds_reset+0xfc>)
    4de2:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN03);
    4de4:	200e      	movs	r0, #14
    4de6:	4b24      	ldr	r3, [pc, #144]	; (4e78 <sounds_reset+0xfc>)
    4de8:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN04);
    4dea:	200f      	movs	r0, #15
    4dec:	4b22      	ldr	r3, [pc, #136]	; (4e78 <sounds_reset+0xfc>)
    4dee:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN05);
    4df0:	2010      	movs	r0, #16
    4df2:	4b21      	ldr	r3, [pc, #132]	; (4e78 <sounds_reset+0xfc>)
    4df4:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN06);
    4df6:	2011      	movs	r0, #17
    4df8:	4b1f      	ldr	r3, [pc, #124]	; (4e78 <sounds_reset+0xfc>)
    4dfa:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN07);
    4dfc:	2012      	movs	r0, #18
    4dfe:	4b1e      	ldr	r3, [pc, #120]	; (4e78 <sounds_reset+0xfc>)
    4e00:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN08);
    4e02:	2013      	movs	r0, #19
    4e04:	4b1c      	ldr	r3, [pc, #112]	; (4e78 <sounds_reset+0xfc>)
    4e06:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN09);
    4e08:	2014      	movs	r0, #20
    4e0a:	4b1b      	ldr	r3, [pc, #108]	; (4e78 <sounds_reset+0xfc>)
    4e0c:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN10);
    4e0e:	2015      	movs	r0, #21
    4e10:	4b19      	ldr	r3, [pc, #100]	; (4e78 <sounds_reset+0xfc>)
    4e12:	4798      	blx	r3
	delay_ms(150);
    4e14:	2000      	movs	r0, #0
    4e16:	4b12      	ldr	r3, [pc, #72]	; (4e60 <sounds_reset+0xe4>)
    4e18:	4798      	blx	r3
    4e1a:	0003      	movs	r3, r0
    4e1c:	001d      	movs	r5, r3
    4e1e:	2300      	movs	r3, #0
    4e20:	001e      	movs	r6, r3
    4e22:	4c10      	ldr	r4, [pc, #64]	; (4e64 <sounds_reset+0xe8>)
    4e24:	2296      	movs	r2, #150	; 0x96
    4e26:	2300      	movs	r3, #0
    4e28:	0028      	movs	r0, r5
    4e2a:	0031      	movs	r1, r6
    4e2c:	47a0      	blx	r4
    4e2e:	0003      	movs	r3, r0
    4e30:	000c      	movs	r4, r1
    4e32:	0019      	movs	r1, r3
    4e34:	0022      	movs	r2, r4
    4e36:	4b0c      	ldr	r3, [pc, #48]	; (4e68 <sounds_reset+0xec>)
    4e38:	2400      	movs	r4, #0
    4e3a:	18c9      	adds	r1, r1, r3
    4e3c:	4162      	adcs	r2, r4
    4e3e:	0008      	movs	r0, r1
    4e40:	0011      	movs	r1, r2
    4e42:	4c0a      	ldr	r4, [pc, #40]	; (4e6c <sounds_reset+0xf0>)
    4e44:	4a0a      	ldr	r2, [pc, #40]	; (4e70 <sounds_reset+0xf4>)
    4e46:	2300      	movs	r3, #0
    4e48:	47a0      	blx	r4
    4e4a:	0003      	movs	r3, r0
    4e4c:	000c      	movs	r4, r1
    4e4e:	0018      	movs	r0, r3
    4e50:	4b08      	ldr	r3, [pc, #32]	; (4e74 <sounds_reset+0xf8>)
    4e52:	4798      	blx	r3

    4e54:	46c0      	nop			; (mov r8, r8)
    4e56:	46bd      	mov	sp, r7
    4e58:	b003      	add	sp, #12
    4e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e5c:	00004b4d 	.word	0x00004b4d
    4e60:	00005909 	.word	0x00005909
    4e64:	00006705 	.word	0x00006705
    4e68:	00001b57 	.word	0x00001b57
    4e6c:	000066c5 	.word	0x000066c5
    4e70:	00001b58 	.word	0x00001b58
    4e74:	20000001 	.word	0x20000001
    4e78:	00004d59 	.word	0x00004d59

00004e7c <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    4e7c:	b580      	push	{r7, lr}
    4e7e:	b082      	sub	sp, #8
    4e80:	af00      	add	r7, sp, #0
    4e82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4e84:	687b      	ldr	r3, [r7, #4]
    4e86:	2280      	movs	r2, #128	; 0x80
    4e88:	05d2      	lsls	r2, r2, #23
    4e8a:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4e8c:	687b      	ldr	r3, [r7, #4]
    4e8e:	2200      	movs	r2, #0
    4e90:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    4e92:	687b      	ldr	r3, [r7, #4]
    4e94:	22ff      	movs	r2, #255	; 0xff
    4e96:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    4e98:	687b      	ldr	r3, [r7, #4]
    4e9a:	2200      	movs	r2, #0
    4e9c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4e9e:	687b      	ldr	r3, [r7, #4]
    4ea0:	2200      	movs	r2, #0
    4ea2:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    4ea4:	687b      	ldr	r3, [r7, #4]
    4ea6:	2296      	movs	r2, #150	; 0x96
    4ea8:	0192      	lsls	r2, r2, #6
    4eaa:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    4eac:	687b      	ldr	r3, [r7, #4]
    4eae:	2224      	movs	r2, #36	; 0x24
    4eb0:	2101      	movs	r1, #1
    4eb2:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	2225      	movs	r2, #37	; 0x25
    4eb8:	2101      	movs	r1, #1
    4eba:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    4ebc:	687b      	ldr	r3, [r7, #4]
    4ebe:	2226      	movs	r2, #38	; 0x26
    4ec0:	2100      	movs	r1, #0
    4ec2:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    4ec4:	687b      	ldr	r3, [r7, #4]
    4ec6:	2227      	movs	r2, #39	; 0x27
    4ec8:	2100      	movs	r1, #0
    4eca:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    4ecc:	687b      	ldr	r3, [r7, #4]
    4ece:	2200      	movs	r2, #0
    4ed0:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    4ed2:	687b      	ldr	r3, [r7, #4]
    4ed4:	2288      	movs	r2, #136	; 0x88
    4ed6:	0352      	lsls	r2, r2, #13
    4ed8:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    4eda:	687b      	ldr	r3, [r7, #4]
    4edc:	222c      	movs	r2, #44	; 0x2c
    4ede:	2100      	movs	r1, #0
    4ee0:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    4ee2:	687b      	ldr	r3, [r7, #4]
    4ee4:	222d      	movs	r2, #45	; 0x2d
    4ee6:	2100      	movs	r1, #0
    4ee8:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    4eea:	687b      	ldr	r3, [r7, #4]
    4eec:	2200      	movs	r2, #0
    4eee:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    4ef0:	687b      	ldr	r3, [r7, #4]
    4ef2:	2200      	movs	r2, #0
    4ef4:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    4ef6:	687b      	ldr	r3, [r7, #4]
    4ef8:	2200      	movs	r2, #0
    4efa:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    4efc:	687b      	ldr	r3, [r7, #4]
    4efe:	2200      	movs	r2, #0
    4f00:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4f02:	687b      	ldr	r3, [r7, #4]
    4f04:	2200      	movs	r2, #0
    4f06:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4f08:	687b      	ldr	r3, [r7, #4]
    4f0a:	2200      	movs	r2, #0
    4f0c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4f0e:	687b      	ldr	r3, [r7, #4]
    4f10:	2200      	movs	r2, #0
    4f12:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    4f14:	687b      	ldr	r3, [r7, #4]
    4f16:	2200      	movs	r2, #0
    4f18:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    4f1a:	687b      	ldr	r3, [r7, #4]
    4f1c:	2200      	movs	r2, #0
    4f1e:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    4f20:	687b      	ldr	r3, [r7, #4]
    4f22:	2200      	movs	r2, #0
    4f24:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    4f26:	687b      	ldr	r3, [r7, #4]
    4f28:	2213      	movs	r2, #19
    4f2a:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    4f2c:	687b      	ldr	r3, [r7, #4]
    4f2e:	2200      	movs	r2, #0
    4f30:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    4f32:	46c0      	nop			; (mov r8, r8)
    4f34:	46bd      	mov	sp, r7
    4f36:	b002      	add	sp, #8
    4f38:	bd80      	pop	{r7, pc}
    4f3a:	46c0      	nop			; (mov r8, r8)

00004f3c <uart_init>:


volatile uint8_t uart_rx_buffer[MAX_RX_BUFFER_LENGTH];

void uart_init(void)
{		
    4f3c:	b580      	push	{r7, lr}
    4f3e:	b092      	sub	sp, #72	; 0x48
    4f40:	af00      	add	r7, sp, #0
 	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    4f42:	1d3b      	adds	r3, r7, #4
    4f44:	0018      	movs	r0, r3
    4f46:	4b49      	ldr	r3, [pc, #292]	; (506c <uart_init+0x130>)
    4f48:	4798      	blx	r3
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    4f4a:	1d3b      	adds	r3, r7, #4
    4f4c:	2280      	movs	r2, #128	; 0x80
    4f4e:	0352      	lsls	r2, r2, #13
    4f50:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    4f52:	1d3b      	adds	r3, r7, #4
    4f54:	4a46      	ldr	r2, [pc, #280]	; (5070 <uart_init+0x134>)
    4f56:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    4f58:	1d3b      	adds	r3, r7, #4
    4f5a:	4a46      	ldr	r2, [pc, #280]	; (5074 <uart_init+0x138>)
    4f5c:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    4f5e:	1d3b      	adds	r3, r7, #4
    4f60:	2201      	movs	r2, #1
    4f62:	4252      	negs	r2, r2
    4f64:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    4f66:	1d3b      	adds	r3, r7, #4
    4f68:	2201      	movs	r2, #1
    4f6a:	4252      	negs	r2, r2
    4f6c:	63da      	str	r2, [r3, #60]	; 0x3c
	//usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
	usart_conf.generator_source = GCLK_GENERATOR_3;
    4f6e:	1d3b      	adds	r3, r7, #4
    4f70:	222d      	movs	r2, #45	; 0x2d
    4f72:	2103      	movs	r1, #3
    4f74:	5499      	strb	r1, [r3, r2]
	//usart_conf.stopbits = USART_STOPBITS_1;
	
		// Start the Software Reset and wait for it to finish
	CONF_STDIO_USART_MODULE->USART.CTRLA.bit.SWRST = 1 ;
    4f76:	4a40      	ldr	r2, [pc, #256]	; (5078 <uart_init+0x13c>)
    4f78:	6813      	ldr	r3, [r2, #0]
    4f7a:	2101      	movs	r1, #1
    4f7c:	430b      	orrs	r3, r1
    4f7e:	6013      	str	r3, [r2, #0]
	while ( CONF_STDIO_USART_MODULE->USART.CTRLA.bit.SWRST || CONF_STDIO_USART_MODULE->USART.SYNCBUSY.bit.SWRST );
    4f80:	46c0      	nop			; (mov r8, r8)
    4f82:	4b3d      	ldr	r3, [pc, #244]	; (5078 <uart_init+0x13c>)
    4f84:	681b      	ldr	r3, [r3, #0]
    4f86:	07db      	lsls	r3, r3, #31
    4f88:	0fdb      	lsrs	r3, r3, #31
    4f8a:	b2db      	uxtb	r3, r3
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	d1f8      	bne.n	4f82 <uart_init+0x46>
    4f90:	4b39      	ldr	r3, [pc, #228]	; (5078 <uart_init+0x13c>)
    4f92:	69db      	ldr	r3, [r3, #28]
    4f94:	07db      	lsls	r3, r3, #31
    4f96:	0fdb      	lsrs	r3, r3, #31
    4f98:	b2db      	uxtb	r3, r3
    4f9a:	2b00      	cmp	r3, #0
    4f9c:	d1f1      	bne.n	4f82 <uart_init+0x46>
	
	// Turn on peripheral clock for SERCOM being used
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;
    4f9e:	4b37      	ldr	r3, [pc, #220]	; (507c <uart_init+0x140>)
    4fa0:	4a36      	ldr	r2, [pc, #216]	; (507c <uart_init+0x140>)
    4fa2:	6a12      	ldr	r2, [r2, #32]
    4fa4:	2180      	movs	r1, #128	; 0x80
    4fa6:	430a      	orrs	r2, r1
    4fa8:	621a      	str	r2, [r3, #32]

	//Setting clock
	GCLK->CLKCTRL.reg =
    4faa:	4b35      	ldr	r3, [pc, #212]	; (5080 <uart_init+0x144>)
    4fac:	4a35      	ldr	r2, [pc, #212]	; (5084 <uart_init+0x148>)
    4fae:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID( (0x19U) )	|	// connected  SERCOMx to
	GCLK_CLKCTRL_GEN_GCLK3		|	// generic Clock Generator 0
	GCLK_CLKCTRL_CLKEN;			// and enable it

	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY ); // Wait for synchronization
    4fb0:	46c0      	nop			; (mov r8, r8)
    4fb2:	4b33      	ldr	r3, [pc, #204]	; (5080 <uart_init+0x144>)
    4fb4:	785b      	ldrb	r3, [r3, #1]
    4fb6:	b2db      	uxtb	r3, r3
    4fb8:	b25b      	sxtb	r3, r3
    4fba:	2b00      	cmp	r3, #0
    4fbc:	dbf9      	blt.n	4fb2 <uart_init+0x76>
	
	
	PORT->Group[1].DIRCLR.reg = PORT_PB03;	// RX as input
    4fbe:	4a32      	ldr	r2, [pc, #200]	; (5088 <uart_init+0x14c>)
    4fc0:	2384      	movs	r3, #132	; 0x84
    4fc2:	2108      	movs	r1, #8
    4fc4:	50d1      	str	r1, [r2, r3]
	
	PORT->Group[1].DIRSET.reg = PORT_PB02;	// TX as output
    4fc6:	4a30      	ldr	r2, [pc, #192]	; (5088 <uart_init+0x14c>)
    4fc8:	2388      	movs	r3, #136	; 0x88
    4fca:	2104      	movs	r1, #4
    4fcc:	50d1      	str	r1, [r2, r3]
	PORT->Group[1].OUTSET.reg = PORT_PB02;	// TX idle state is high
    4fce:	4a2e      	ldr	r2, [pc, #184]	; (5088 <uart_init+0x14c>)
    4fd0:	2398      	movs	r3, #152	; 0x98
    4fd2:	2104      	movs	r1, #4
    4fd4:	50d1      	str	r1, [r2, r3]

	// set port multiplexer for peripheral TX
	// =======================================
	uint32_t temp = (PORT->Group[1].PMUX[2>>1].reg) & PORT_PMUX_PMUXO( 3 );
    4fd6:	4a2c      	ldr	r2, [pc, #176]	; (5088 <uart_init+0x14c>)
    4fd8:	23b1      	movs	r3, #177	; 0xb1
    4fda:	5cd3      	ldrb	r3, [r2, r3]
    4fdc:	b2db      	uxtb	r3, r3
    4fde:	001a      	movs	r2, r3
    4fe0:	2330      	movs	r3, #48	; 0x30
    4fe2:	4013      	ands	r3, r2
    4fe4:	647b      	str	r3, [r7, #68]	; 0x44
	PORT->Group[1].PMUX[2>>1].reg = temp | PORT_PMUX_PMUXE( 3 );
    4fe6:	4a28      	ldr	r2, [pc, #160]	; (5088 <uart_init+0x14c>)
    4fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4fea:	b2db      	uxtb	r3, r3
    4fec:	2103      	movs	r1, #3
    4fee:	430b      	orrs	r3, r1
    4ff0:	b2d9      	uxtb	r1, r3
    4ff2:	23b1      	movs	r3, #177	; 0xb1
    4ff4:	54d1      	strb	r1, [r2, r3]
	
	PORT->Group[1].PINCFG[2].reg = PORT_PINCFG_PMUXEN ; // Enable port mux
    4ff6:	4a24      	ldr	r2, [pc, #144]	; (5088 <uart_init+0x14c>)
    4ff8:	23c2      	movs	r3, #194	; 0xc2
    4ffa:	2101      	movs	r1, #1
    4ffc:	54d1      	strb	r1, [r2, r3]
	temp = (PORT->Group[1].PMUX[3>>1].reg) & PORT_PMUX_PMUXO( 3 );
    4ffe:	4a22      	ldr	r2, [pc, #136]	; (5088 <uart_init+0x14c>)
    5000:	23b1      	movs	r3, #177	; 0xb1
    5002:	5cd3      	ldrb	r3, [r2, r3]
    5004:	b2db      	uxtb	r3, r3
    5006:	001a      	movs	r2, r3
    5008:	2330      	movs	r3, #48	; 0x30
    500a:	4013      	ands	r3, r2
    500c:	647b      	str	r3, [r7, #68]	; 0x44
	PORT->Group[1].PMUX[3>>1].reg = temp | PORT_PMUX_PMUXE( 3 );
    500e:	4a1e      	ldr	r2, [pc, #120]	; (5088 <uart_init+0x14c>)
    5010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5012:	b2db      	uxtb	r3, r3
    5014:	2103      	movs	r1, #3
    5016:	430b      	orrs	r3, r1
    5018:	b2d9      	uxtb	r1, r3
    501a:	23b1      	movs	r3, #177	; 0xb1
    501c:	54d1      	strb	r1, [r2, r3]
	PORT->Group[1].PINCFG[3].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN; // Enable port mux
    501e:	4a1a      	ldr	r2, [pc, #104]	; (5088 <uart_init+0x14c>)
    5020:	23c3      	movs	r3, #195	; 0xc3
    5022:	2103      	movs	r1, #3
    5024:	54d1      	strb	r1, [r2, r3]
	
		
	CONF_STDIO_USART_MODULE->USART.CTRLA.reg =
    5026:	4b14      	ldr	r3, [pc, #80]	; (5078 <uart_init+0x13c>)
    5028:	4a18      	ldr	r2, [pc, #96]	; (508c <uart_init+0x150>)
    502a:	601a      	str	r2, [r3, #0]
	
	
	// Asynchronous arithmetic mode
	// 65535 * ( 1 - sampleRateValue * baudrate / SystemCoreClock);
	// 65535 - 65535 * (sampleRateValue * baudrate / SystemCoreClock));
	CONF_STDIO_USART_MODULE->USART.BAUD.reg = 65535.0f * ( 1.0f - (16.0 * (float)(BAUDRATE)) / (float)(SYSTEM_CLK));
    502c:	4b12      	ldr	r3, [pc, #72]	; (5078 <uart_init+0x13c>)
    502e:	4a18      	ldr	r2, [pc, #96]	; (5090 <uart_init+0x154>)
    5030:	819a      	strh	r2, [r3, #12]
	//BLE_UART_SERCOM->USART.BAUD.bit.BAUD = 9600;
	
	CONF_STDIO_USART_MODULE->USART.CTRLB.reg =
    5032:	4b11      	ldr	r3, [pc, #68]	; (5078 <uart_init+0x13c>)
    5034:	22c0      	movs	r2, #192	; 0xc0
    5036:	0292      	lsls	r2, r2, #10
    5038:	605a      	str	r2, [r3, #4]
	SERCOM_USART_CTRLB_CHSIZE(0)	|	// 8 bit character size
	SERCOM_USART_CTRLB_TXEN			|	// Enable Transmit
	SERCOM_USART_CTRLB_RXEN;			// Enable Receive

	// Get Synced
	while (CONF_STDIO_USART_MODULE->USART.SYNCBUSY.bit.CTRLB);
    503a:	46c0      	nop			; (mov r8, r8)
    503c:	4b0e      	ldr	r3, [pc, #56]	; (5078 <uart_init+0x13c>)
    503e:	69db      	ldr	r3, [r3, #28]
    5040:	075b      	lsls	r3, r3, #29
    5042:	0fdb      	lsrs	r3, r3, #31
    5044:	b2db      	uxtb	r3, r3
    5046:	2b00      	cmp	r3, #0
    5048:	d1f8      	bne.n	503c <uart_init+0x100>
	/*// Enable interrupts
	NVIC_EnableIRQ(SERCOM2_IRQn);
	NVIC_SetPriority(SERCOM2_IRQn,1);*/
	
	// enable the peripheral block
	CONF_STDIO_USART_MODULE->USART.CTRLA.bit.ENABLE = 0x1u;
    504a:	4a0b      	ldr	r2, [pc, #44]	; (5078 <uart_init+0x13c>)
    504c:	6813      	ldr	r3, [r2, #0]
    504e:	2102      	movs	r1, #2
    5050:	430b      	orrs	r3, r1
    5052:	6013      	str	r3, [r2, #0]
	
	// Wait for sercom to enable
	while(CONF_STDIO_USART_MODULE->USART.SYNCBUSY.bit.ENABLE);
    5054:	46c0      	nop			; (mov r8, r8)
    5056:	4b08      	ldr	r3, [pc, #32]	; (5078 <uart_init+0x13c>)
    5058:	69db      	ldr	r3, [r3, #28]
    505a:	079b      	lsls	r3, r3, #30
    505c:	0fdb      	lsrs	r3, r3, #31
    505e:	b2db      	uxtb	r3, r3
    5060:	2b00      	cmp	r3, #0
    5062:	d1f8      	bne.n	5056 <uart_init+0x11a>
	
}
    5064:	46c0      	nop			; (mov r8, r8)
    5066:	46bd      	mov	sp, r7
    5068:	b012      	add	sp, #72	; 0x48
    506a:	bd80      	pop	{r7, pc}
    506c:	00004e7d 	.word	0x00004e7d
    5070:	00220003 	.word	0x00220003
    5074:	00230003 	.word	0x00230003
    5078:	42001c00 	.word	0x42001c00
    507c:	40000400 	.word	0x40000400
    5080:	40000c00 	.word	0x40000c00
    5084:	00004319 	.word	0x00004319
    5088:	41004400 	.word	0x41004400
    508c:	40100084 	.word	0x40100084
    5090:	ffffc503 	.word	0xffffc503

00005094 <uart_write>:
{
	usart_read_buffer_job(&uart_instance,(uint8_t *)uart_rx_buffer, MAX_RX_BUFFER_LENGTH);
}

void uart_write(uint8_t* data)
{
    5094:	b580      	push	{r7, lr}
    5096:	b084      	sub	sp, #16
    5098:	af00      	add	r7, sp, #0
    509a:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
    509c:	2300      	movs	r3, #0
    509e:	60fb      	str	r3, [r7, #12]
	while(data[i] != '\0')
    50a0:	e00f      	b.n	50c2 <uart_write+0x2e>
	{
		if(CONF_STDIO_USART_MODULE->USART.INTFLAG.bit.DRE == 1)
    50a2:	4b0d      	ldr	r3, [pc, #52]	; (50d8 <uart_write+0x44>)
    50a4:	7e1b      	ldrb	r3, [r3, #24]
    50a6:	07db      	lsls	r3, r3, #31
    50a8:	0fdb      	lsrs	r3, r3, #31
    50aa:	b2db      	uxtb	r3, r3
    50ac:	2b01      	cmp	r3, #1
    50ae:	d108      	bne.n	50c2 <uart_write+0x2e>
		{
			CONF_STDIO_USART_MODULE->USART.DATA.reg = (uint16_t)data[i++];
    50b0:	4909      	ldr	r1, [pc, #36]	; (50d8 <uart_write+0x44>)
    50b2:	68fb      	ldr	r3, [r7, #12]
    50b4:	1c5a      	adds	r2, r3, #1
    50b6:	60fa      	str	r2, [r7, #12]
    50b8:	687a      	ldr	r2, [r7, #4]
    50ba:	18d3      	adds	r3, r2, r3
    50bc:	781b      	ldrb	r3, [r3, #0]
    50be:	b29b      	uxth	r3, r3
    50c0:	850b      	strh	r3, [r1, #40]	; 0x28
}

void uart_write(uint8_t* data)
{
	uint32_t i = 0;
	while(data[i] != '\0')
    50c2:	687a      	ldr	r2, [r7, #4]
    50c4:	68fb      	ldr	r3, [r7, #12]
    50c6:	18d3      	adds	r3, r2, r3
    50c8:	781b      	ldrb	r3, [r3, #0]
    50ca:	2b00      	cmp	r3, #0
    50cc:	d1e9      	bne.n	50a2 <uart_write+0xe>
		if(CONF_STDIO_USART_MODULE->USART.INTFLAG.bit.DRE == 1)
		{
			CONF_STDIO_USART_MODULE->USART.DATA.reg = (uint16_t)data[i++];
		}
	}
}
    50ce:	46c0      	nop			; (mov r8, r8)
    50d0:	46bd      	mov	sp, r7
    50d2:	b004      	add	sp, #16
    50d4:	bd80      	pop	{r7, pc}
    50d6:	46c0      	nop			; (mov r8, r8)
    50d8:	42001c00 	.word	0x42001c00

000050dc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    50dc:	b580      	push	{r7, lr}
    50de:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    50e0:	46c0      	nop			; (mov r8, r8)
    50e2:	46bd      	mov	sp, r7
    50e4:	bd80      	pop	{r7, pc}
    50e6:	46c0      	nop			; (mov r8, r8)

000050e8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    50e8:	b580      	push	{r7, lr}
    50ea:	b082      	sub	sp, #8
    50ec:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    50ee:	4b10      	ldr	r3, [pc, #64]	; (5130 <cpu_irq_enter_critical+0x48>)
    50f0:	681b      	ldr	r3, [r3, #0]
    50f2:	2b00      	cmp	r3, #0
    50f4:	d112      	bne.n	511c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    50f6:	f3ef 8310 	mrs	r3, PRIMASK
    50fa:	607b      	str	r3, [r7, #4]
  return(result);
    50fc:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    50fe:	2b00      	cmp	r3, #0
    5100:	d109      	bne.n	5116 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5102:	b672      	cpsid	i
    5104:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    5108:	4b0a      	ldr	r3, [pc, #40]	; (5134 <cpu_irq_enter_critical+0x4c>)
    510a:	2200      	movs	r2, #0
    510c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    510e:	4b0a      	ldr	r3, [pc, #40]	; (5138 <cpu_irq_enter_critical+0x50>)
    5110:	2201      	movs	r2, #1
    5112:	701a      	strb	r2, [r3, #0]
    5114:	e002      	b.n	511c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    5116:	4b08      	ldr	r3, [pc, #32]	; (5138 <cpu_irq_enter_critical+0x50>)
    5118:	2200      	movs	r2, #0
    511a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    511c:	4b04      	ldr	r3, [pc, #16]	; (5130 <cpu_irq_enter_critical+0x48>)
    511e:	681b      	ldr	r3, [r3, #0]
    5120:	1c5a      	adds	r2, r3, #1
    5122:	4b03      	ldr	r3, [pc, #12]	; (5130 <cpu_irq_enter_critical+0x48>)
    5124:	601a      	str	r2, [r3, #0]
}
    5126:	46c0      	nop			; (mov r8, r8)
    5128:	46bd      	mov	sp, r7
    512a:	b002      	add	sp, #8
    512c:	bd80      	pop	{r7, pc}
    512e:	46c0      	nop			; (mov r8, r8)
    5130:	20000124 	.word	0x20000124
    5134:	20000091 	.word	0x20000091
    5138:	20000128 	.word	0x20000128

0000513c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    513c:	b580      	push	{r7, lr}
    513e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    5140:	4b0b      	ldr	r3, [pc, #44]	; (5170 <cpu_irq_leave_critical+0x34>)
    5142:	681b      	ldr	r3, [r3, #0]
    5144:	1e5a      	subs	r2, r3, #1
    5146:	4b0a      	ldr	r3, [pc, #40]	; (5170 <cpu_irq_leave_critical+0x34>)
    5148:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    514a:	4b09      	ldr	r3, [pc, #36]	; (5170 <cpu_irq_leave_critical+0x34>)
    514c:	681b      	ldr	r3, [r3, #0]
    514e:	2b00      	cmp	r3, #0
    5150:	d10a      	bne.n	5168 <cpu_irq_leave_critical+0x2c>
    5152:	4b08      	ldr	r3, [pc, #32]	; (5174 <cpu_irq_leave_critical+0x38>)
    5154:	781b      	ldrb	r3, [r3, #0]
    5156:	b2db      	uxtb	r3, r3
    5158:	2b00      	cmp	r3, #0
    515a:	d005      	beq.n	5168 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    515c:	4b06      	ldr	r3, [pc, #24]	; (5178 <cpu_irq_leave_critical+0x3c>)
    515e:	2201      	movs	r2, #1
    5160:	701a      	strb	r2, [r3, #0]
    5162:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    5166:	b662      	cpsie	i
	}
}
    5168:	46c0      	nop			; (mov r8, r8)
    516a:	46bd      	mov	sp, r7
    516c:	bd80      	pop	{r7, pc}
    516e:	46c0      	nop			; (mov r8, r8)
    5170:	20000124 	.word	0x20000124
    5174:	20000128 	.word	0x20000128
    5178:	20000091 	.word	0x20000091

0000517c <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    517c:	b580      	push	{r7, lr}
    517e:	b082      	sub	sp, #8
    5180:	af00      	add	r7, sp, #0
    5182:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    5184:	687b      	ldr	r3, [r7, #4]
    5186:	2201      	movs	r2, #1
    5188:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    518a:	687b      	ldr	r3, [r7, #4]
    518c:	2200      	movs	r2, #0
    518e:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    5190:	687b      	ldr	r3, [r7, #4]
    5192:	2206      	movs	r2, #6
    5194:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    5196:	687b      	ldr	r3, [r7, #4]
    5198:	2200      	movs	r2, #0
    519a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    519c:	687b      	ldr	r3, [r7, #4]
    519e:	2200      	movs	r2, #0
    51a0:	725a      	strb	r2, [r3, #9]
}
    51a2:	46c0      	nop			; (mov r8, r8)
    51a4:	46bd      	mov	sp, r7
    51a6:	b002      	add	sp, #8
    51a8:	bd80      	pop	{r7, pc}
    51aa:	46c0      	nop			; (mov r8, r8)

000051ac <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    51ac:	b580      	push	{r7, lr}
    51ae:	b082      	sub	sp, #8
    51b0:	af00      	add	r7, sp, #0
    51b2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    51b4:	687b      	ldr	r3, [r7, #4]
    51b6:	2203      	movs	r2, #3
    51b8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    51ba:	687b      	ldr	r3, [r7, #4]
    51bc:	2200      	movs	r2, #0
    51be:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    51c0:	687b      	ldr	r3, [r7, #4]
    51c2:	2201      	movs	r2, #1
    51c4:	709a      	strb	r2, [r3, #2]
}
    51c6:	46c0      	nop			; (mov r8, r8)
    51c8:	46bd      	mov	sp, r7
    51ca:	b002      	add	sp, #8
    51cc:	bd80      	pop	{r7, pc}
    51ce:	46c0      	nop			; (mov r8, r8)

000051d0 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    51d0:	b580      	push	{r7, lr}
    51d2:	b082      	sub	sp, #8
    51d4:	af00      	add	r7, sp, #0
    51d6:	0002      	movs	r2, r0
    51d8:	1dfb      	adds	r3, r7, #7
    51da:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    51dc:	4a03      	ldr	r2, [pc, #12]	; (51ec <system_cpu_clock_set_divider+0x1c>)
    51de:	1dfb      	adds	r3, r7, #7
    51e0:	781b      	ldrb	r3, [r3, #0]
    51e2:	7213      	strb	r3, [r2, #8]
}
    51e4:	46c0      	nop			; (mov r8, r8)
    51e6:	46bd      	mov	sp, r7
    51e8:	b002      	add	sp, #8
    51ea:	bd80      	pop	{r7, pc}
    51ec:	40000400 	.word	0x40000400

000051f0 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    51f0:	b580      	push	{r7, lr}
    51f2:	b082      	sub	sp, #8
    51f4:	af00      	add	r7, sp, #0
    51f6:	0002      	movs	r2, r0
    51f8:	1dfb      	adds	r3, r7, #7
    51fa:	701a      	strb	r2, [r3, #0]
    51fc:	1dbb      	adds	r3, r7, #6
    51fe:	1c0a      	adds	r2, r1, #0
    5200:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5202:	1dfb      	adds	r3, r7, #7
    5204:	781b      	ldrb	r3, [r3, #0]
    5206:	2b01      	cmp	r3, #1
    5208:	d008      	beq.n	521c <system_apb_clock_set_divider+0x2c>
    520a:	2b02      	cmp	r3, #2
    520c:	d00b      	beq.n	5226 <system_apb_clock_set_divider+0x36>
    520e:	2b00      	cmp	r3, #0
    5210:	d10e      	bne.n	5230 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    5212:	4a0b      	ldr	r2, [pc, #44]	; (5240 <system_apb_clock_set_divider+0x50>)
    5214:	1dbb      	adds	r3, r7, #6
    5216:	781b      	ldrb	r3, [r3, #0]
    5218:	7253      	strb	r3, [r2, #9]
			break;
    521a:	e00b      	b.n	5234 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    521c:	4a08      	ldr	r2, [pc, #32]	; (5240 <system_apb_clock_set_divider+0x50>)
    521e:	1dbb      	adds	r3, r7, #6
    5220:	781b      	ldrb	r3, [r3, #0]
    5222:	7293      	strb	r3, [r2, #10]
			break;
    5224:	e006      	b.n	5234 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    5226:	4a06      	ldr	r2, [pc, #24]	; (5240 <system_apb_clock_set_divider+0x50>)
    5228:	1dbb      	adds	r3, r7, #6
    522a:	781b      	ldrb	r3, [r3, #0]
    522c:	72d3      	strb	r3, [r2, #11]
			break;
    522e:	e001      	b.n	5234 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5230:	2317      	movs	r3, #23
    5232:	e000      	b.n	5236 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    5234:	2300      	movs	r3, #0
}
    5236:	0018      	movs	r0, r3
    5238:	46bd      	mov	sp, r7
    523a:	b002      	add	sp, #8
    523c:	bd80      	pop	{r7, pc}
    523e:	46c0      	nop			; (mov r8, r8)
    5240:	40000400 	.word	0x40000400

00005244 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    5244:	b580      	push	{r7, lr}
    5246:	b082      	sub	sp, #8
    5248:	af00      	add	r7, sp, #0
    524a:	0002      	movs	r2, r0
    524c:	1dfb      	adds	r3, r7, #7
    524e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5250:	4a08      	ldr	r2, [pc, #32]	; (5274 <system_flash_set_waitstates+0x30>)
    5252:	1dfb      	adds	r3, r7, #7
    5254:	781b      	ldrb	r3, [r3, #0]
    5256:	210f      	movs	r1, #15
    5258:	400b      	ands	r3, r1
    525a:	b2d9      	uxtb	r1, r3
    525c:	6853      	ldr	r3, [r2, #4]
    525e:	200f      	movs	r0, #15
    5260:	4001      	ands	r1, r0
    5262:	0049      	lsls	r1, r1, #1
    5264:	201e      	movs	r0, #30
    5266:	4383      	bics	r3, r0
    5268:	430b      	orrs	r3, r1
    526a:	6053      	str	r3, [r2, #4]
}
    526c:	46c0      	nop			; (mov r8, r8)
    526e:	46bd      	mov	sp, r7
    5270:	b002      	add	sp, #8
    5272:	bd80      	pop	{r7, pc}
    5274:	41004000 	.word	0x41004000

00005278 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    5278:	b580      	push	{r7, lr}
    527a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    527c:	46c0      	nop			; (mov r8, r8)
    527e:	4b04      	ldr	r3, [pc, #16]	; (5290 <_system_dfll_wait_for_sync+0x18>)
    5280:	68db      	ldr	r3, [r3, #12]
    5282:	2210      	movs	r2, #16
    5284:	4013      	ands	r3, r2
    5286:	d0fa      	beq.n	527e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    5288:	46c0      	nop			; (mov r8, r8)
    528a:	46bd      	mov	sp, r7
    528c:	bd80      	pop	{r7, pc}
    528e:	46c0      	nop			; (mov r8, r8)
    5290:	40000800 	.word	0x40000800

00005294 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    5294:	b580      	push	{r7, lr}
    5296:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5298:	4b0c      	ldr	r3, [pc, #48]	; (52cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    529a:	2202      	movs	r2, #2
    529c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    529e:	4b0c      	ldr	r3, [pc, #48]	; (52d0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    52a0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    52a2:	4a0a      	ldr	r2, [pc, #40]	; (52cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    52a4:	4b0b      	ldr	r3, [pc, #44]	; (52d4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    52a6:	689b      	ldr	r3, [r3, #8]
    52a8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    52aa:	4a08      	ldr	r2, [pc, #32]	; (52cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    52ac:	4b09      	ldr	r3, [pc, #36]	; (52d4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    52ae:	685b      	ldr	r3, [r3, #4]
    52b0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    52b2:	4b06      	ldr	r3, [pc, #24]	; (52cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    52b4:	2200      	movs	r2, #0
    52b6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    52b8:	4b05      	ldr	r3, [pc, #20]	; (52d0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    52ba:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    52bc:	4a03      	ldr	r2, [pc, #12]	; (52cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    52be:	4b05      	ldr	r3, [pc, #20]	; (52d4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    52c0:	681b      	ldr	r3, [r3, #0]
    52c2:	b29b      	uxth	r3, r3
    52c4:	8493      	strh	r3, [r2, #36]	; 0x24
}
    52c6:	46c0      	nop			; (mov r8, r8)
    52c8:	46bd      	mov	sp, r7
    52ca:	bd80      	pop	{r7, pc}
    52cc:	40000800 	.word	0x40000800
    52d0:	00005279 	.word	0x00005279
    52d4:	2000012c 	.word	0x2000012c

000052d8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    52d8:	b580      	push	{r7, lr}
    52da:	b082      	sub	sp, #8
    52dc:	af00      	add	r7, sp, #0
    52de:	0002      	movs	r2, r0
    52e0:	1dfb      	adds	r3, r7, #7
    52e2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    52e4:	1dfb      	adds	r3, r7, #7
    52e6:	781b      	ldrb	r3, [r3, #0]
    52e8:	2b08      	cmp	r3, #8
    52ea:	d840      	bhi.n	536e <system_clock_source_get_hz+0x96>
    52ec:	009a      	lsls	r2, r3, #2
    52ee:	4b22      	ldr	r3, [pc, #136]	; (5378 <system_clock_source_get_hz+0xa0>)
    52f0:	18d3      	adds	r3, r2, r3
    52f2:	681b      	ldr	r3, [r3, #0]
    52f4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    52f6:	4b21      	ldr	r3, [pc, #132]	; (537c <system_clock_source_get_hz+0xa4>)
    52f8:	691b      	ldr	r3, [r3, #16]
    52fa:	e039      	b.n	5370 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    52fc:	4b20      	ldr	r3, [pc, #128]	; (5380 <system_clock_source_get_hz+0xa8>)
    52fe:	6a1b      	ldr	r3, [r3, #32]
    5300:	059b      	lsls	r3, r3, #22
    5302:	0f9b      	lsrs	r3, r3, #30
    5304:	b2db      	uxtb	r3, r3
    5306:	001a      	movs	r2, r3
    5308:	4b1e      	ldr	r3, [pc, #120]	; (5384 <system_clock_source_get_hz+0xac>)
    530a:	40d3      	lsrs	r3, r2
    530c:	e030      	b.n	5370 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    530e:	2380      	movs	r3, #128	; 0x80
    5310:	021b      	lsls	r3, r3, #8
    5312:	e02d      	b.n	5370 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    5314:	2380      	movs	r3, #128	; 0x80
    5316:	021b      	lsls	r3, r3, #8
    5318:	e02a      	b.n	5370 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    531a:	4b18      	ldr	r3, [pc, #96]	; (537c <system_clock_source_get_hz+0xa4>)
    531c:	695b      	ldr	r3, [r3, #20]
    531e:	e027      	b.n	5370 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5320:	4b16      	ldr	r3, [pc, #88]	; (537c <system_clock_source_get_hz+0xa4>)
    5322:	681b      	ldr	r3, [r3, #0]
    5324:	2202      	movs	r2, #2
    5326:	4013      	ands	r3, r2
    5328:	d101      	bne.n	532e <system_clock_source_get_hz+0x56>
			return 0;
    532a:	2300      	movs	r3, #0
    532c:	e020      	b.n	5370 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    532e:	4b16      	ldr	r3, [pc, #88]	; (5388 <system_clock_source_get_hz+0xb0>)
    5330:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    5332:	4b12      	ldr	r3, [pc, #72]	; (537c <system_clock_source_get_hz+0xa4>)
    5334:	681b      	ldr	r3, [r3, #0]
    5336:	2204      	movs	r2, #4
    5338:	4013      	ands	r3, r2
    533a:	d009      	beq.n	5350 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    533c:	2000      	movs	r0, #0
    533e:	4b13      	ldr	r3, [pc, #76]	; (538c <system_clock_source_get_hz+0xb4>)
    5340:	4798      	blx	r3
    5342:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    5344:	4b0d      	ldr	r3, [pc, #52]	; (537c <system_clock_source_get_hz+0xa4>)
    5346:	689b      	ldr	r3, [r3, #8]
    5348:	041b      	lsls	r3, r3, #16
    534a:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    534c:	4353      	muls	r3, r2
    534e:	e00f      	b.n	5370 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    5350:	4b0f      	ldr	r3, [pc, #60]	; (5390 <system_clock_source_get_hz+0xb8>)
    5352:	e00d      	b.n	5370 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5354:	4a0a      	ldr	r2, [pc, #40]	; (5380 <system_clock_source_get_hz+0xa8>)
    5356:	2350      	movs	r3, #80	; 0x50
    5358:	5cd3      	ldrb	r3, [r2, r3]
    535a:	b2db      	uxtb	r3, r3
    535c:	001a      	movs	r2, r3
    535e:	2304      	movs	r3, #4
    5360:	4013      	ands	r3, r2
    5362:	d101      	bne.n	5368 <system_clock_source_get_hz+0x90>
			return 0;
    5364:	2300      	movs	r3, #0
    5366:	e003      	b.n	5370 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    5368:	4b04      	ldr	r3, [pc, #16]	; (537c <system_clock_source_get_hz+0xa4>)
    536a:	68db      	ldr	r3, [r3, #12]
    536c:	e000      	b.n	5370 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    536e:	2300      	movs	r3, #0
	}
}
    5370:	0018      	movs	r0, r3
    5372:	46bd      	mov	sp, r7
    5374:	b002      	add	sp, #8
    5376:	bd80      	pop	{r7, pc}
    5378:	000099bc 	.word	0x000099bc
    537c:	2000012c 	.word	0x2000012c
    5380:	40000800 	.word	0x40000800
    5384:	007a1200 	.word	0x007a1200
    5388:	00005279 	.word	0x00005279
    538c:	00005b4d 	.word	0x00005b4d
    5390:	02dc6c00 	.word	0x02dc6c00

00005394 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5394:	b580      	push	{r7, lr}
    5396:	b084      	sub	sp, #16
    5398:	af00      	add	r7, sp, #0
    539a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    539c:	4b1a      	ldr	r3, [pc, #104]	; (5408 <system_clock_source_osc8m_set_config+0x74>)
    539e:	6a1b      	ldr	r3, [r3, #32]
    53a0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    53a2:	687b      	ldr	r3, [r7, #4]
    53a4:	781b      	ldrb	r3, [r3, #0]
    53a6:	1c1a      	adds	r2, r3, #0
    53a8:	2303      	movs	r3, #3
    53aa:	4013      	ands	r3, r2
    53ac:	b2da      	uxtb	r2, r3
    53ae:	230d      	movs	r3, #13
    53b0:	18fb      	adds	r3, r7, r3
    53b2:	2103      	movs	r1, #3
    53b4:	400a      	ands	r2, r1
    53b6:	0010      	movs	r0, r2
    53b8:	781a      	ldrb	r2, [r3, #0]
    53ba:	2103      	movs	r1, #3
    53bc:	438a      	bics	r2, r1
    53be:	1c11      	adds	r1, r2, #0
    53c0:	1c02      	adds	r2, r0, #0
    53c2:	430a      	orrs	r2, r1
    53c4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    53c6:	687b      	ldr	r3, [r7, #4]
    53c8:	789a      	ldrb	r2, [r3, #2]
    53ca:	230c      	movs	r3, #12
    53cc:	18fb      	adds	r3, r7, r3
    53ce:	01d0      	lsls	r0, r2, #7
    53d0:	781a      	ldrb	r2, [r3, #0]
    53d2:	217f      	movs	r1, #127	; 0x7f
    53d4:	400a      	ands	r2, r1
    53d6:	1c11      	adds	r1, r2, #0
    53d8:	1c02      	adds	r2, r0, #0
    53da:	430a      	orrs	r2, r1
    53dc:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    53de:	687b      	ldr	r3, [r7, #4]
    53e0:	785a      	ldrb	r2, [r3, #1]
    53e2:	230c      	movs	r3, #12
    53e4:	18fb      	adds	r3, r7, r3
    53e6:	2101      	movs	r1, #1
    53e8:	400a      	ands	r2, r1
    53ea:	0190      	lsls	r0, r2, #6
    53ec:	781a      	ldrb	r2, [r3, #0]
    53ee:	2140      	movs	r1, #64	; 0x40
    53f0:	438a      	bics	r2, r1
    53f2:	1c11      	adds	r1, r2, #0
    53f4:	1c02      	adds	r2, r0, #0
    53f6:	430a      	orrs	r2, r1
    53f8:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    53fa:	4b03      	ldr	r3, [pc, #12]	; (5408 <system_clock_source_osc8m_set_config+0x74>)
    53fc:	68fa      	ldr	r2, [r7, #12]
    53fe:	621a      	str	r2, [r3, #32]
}
    5400:	46c0      	nop			; (mov r8, r8)
    5402:	46bd      	mov	sp, r7
    5404:	b004      	add	sp, #16
    5406:	bd80      	pop	{r7, pc}
    5408:	40000800 	.word	0x40000800

0000540c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    540c:	b580      	push	{r7, lr}
    540e:	b082      	sub	sp, #8
    5410:	af00      	add	r7, sp, #0
    5412:	0002      	movs	r2, r0
    5414:	1dfb      	adds	r3, r7, #7
    5416:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5418:	1dfb      	adds	r3, r7, #7
    541a:	781b      	ldrb	r3, [r3, #0]
    541c:	2b08      	cmp	r3, #8
    541e:	d83b      	bhi.n	5498 <system_clock_source_enable+0x8c>
    5420:	009a      	lsls	r2, r3, #2
    5422:	4b21      	ldr	r3, [pc, #132]	; (54a8 <system_clock_source_enable+0x9c>)
    5424:	18d3      	adds	r3, r2, r3
    5426:	681b      	ldr	r3, [r3, #0]
    5428:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    542a:	4b20      	ldr	r3, [pc, #128]	; (54ac <system_clock_source_enable+0xa0>)
    542c:	4a1f      	ldr	r2, [pc, #124]	; (54ac <system_clock_source_enable+0xa0>)
    542e:	6a12      	ldr	r2, [r2, #32]
    5430:	2102      	movs	r1, #2
    5432:	430a      	orrs	r2, r1
    5434:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    5436:	2300      	movs	r3, #0
    5438:	e031      	b.n	549e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    543a:	4b1c      	ldr	r3, [pc, #112]	; (54ac <system_clock_source_enable+0xa0>)
    543c:	4a1b      	ldr	r2, [pc, #108]	; (54ac <system_clock_source_enable+0xa0>)
    543e:	6992      	ldr	r2, [r2, #24]
    5440:	2102      	movs	r1, #2
    5442:	430a      	orrs	r2, r1
    5444:	619a      	str	r2, [r3, #24]
		break;
    5446:	e029      	b.n	549c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5448:	4a18      	ldr	r2, [pc, #96]	; (54ac <system_clock_source_enable+0xa0>)
    544a:	4b18      	ldr	r3, [pc, #96]	; (54ac <system_clock_source_enable+0xa0>)
    544c:	8a1b      	ldrh	r3, [r3, #16]
    544e:	b29b      	uxth	r3, r3
    5450:	2102      	movs	r1, #2
    5452:	430b      	orrs	r3, r1
    5454:	b29b      	uxth	r3, r3
    5456:	8213      	strh	r3, [r2, #16]
		break;
    5458:	e020      	b.n	549c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    545a:	4a14      	ldr	r2, [pc, #80]	; (54ac <system_clock_source_enable+0xa0>)
    545c:	4b13      	ldr	r3, [pc, #76]	; (54ac <system_clock_source_enable+0xa0>)
    545e:	8a9b      	ldrh	r3, [r3, #20]
    5460:	b29b      	uxth	r3, r3
    5462:	2102      	movs	r1, #2
    5464:	430b      	orrs	r3, r1
    5466:	b29b      	uxth	r3, r3
    5468:	8293      	strh	r3, [r2, #20]
		break;
    546a:	e017      	b.n	549c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    546c:	4b10      	ldr	r3, [pc, #64]	; (54b0 <system_clock_source_enable+0xa4>)
    546e:	681b      	ldr	r3, [r3, #0]
    5470:	2202      	movs	r2, #2
    5472:	431a      	orrs	r2, r3
    5474:	4b0e      	ldr	r3, [pc, #56]	; (54b0 <system_clock_source_enable+0xa4>)
    5476:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    5478:	4b0e      	ldr	r3, [pc, #56]	; (54b4 <system_clock_source_enable+0xa8>)
    547a:	4798      	blx	r3
		break;
    547c:	e00e      	b.n	549c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    547e:	4a0b      	ldr	r2, [pc, #44]	; (54ac <system_clock_source_enable+0xa0>)
    5480:	490a      	ldr	r1, [pc, #40]	; (54ac <system_clock_source_enable+0xa0>)
    5482:	2344      	movs	r3, #68	; 0x44
    5484:	5ccb      	ldrb	r3, [r1, r3]
    5486:	b2db      	uxtb	r3, r3
    5488:	2102      	movs	r1, #2
    548a:	430b      	orrs	r3, r1
    548c:	b2d9      	uxtb	r1, r3
    548e:	2344      	movs	r3, #68	; 0x44
    5490:	54d1      	strb	r1, [r2, r3]
		break;
    5492:	e003      	b.n	549c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    5494:	2300      	movs	r3, #0
    5496:	e002      	b.n	549e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5498:	2317      	movs	r3, #23
    549a:	e000      	b.n	549e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    549c:	2300      	movs	r3, #0
}
    549e:	0018      	movs	r0, r3
    54a0:	46bd      	mov	sp, r7
    54a2:	b002      	add	sp, #8
    54a4:	bd80      	pop	{r7, pc}
    54a6:	46c0      	nop			; (mov r8, r8)
    54a8:	000099e0 	.word	0x000099e0
    54ac:	40000800 	.word	0x40000800
    54b0:	2000012c 	.word	0x2000012c
    54b4:	00005295 	.word	0x00005295

000054b8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    54b8:	b580      	push	{r7, lr}
    54ba:	b082      	sub	sp, #8
    54bc:	af00      	add	r7, sp, #0
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
#elif CONF_CLOCK_GCLK_5_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    54be:	003b      	movs	r3, r7
    54c0:	2205      	movs	r2, #5
    54c2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    54c4:	2300      	movs	r3, #0
    54c6:	607b      	str	r3, [r7, #4]
    54c8:	e009      	b.n	54de <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    54ca:	687b      	ldr	r3, [r7, #4]
    54cc:	b2db      	uxtb	r3, r3
    54ce:	003a      	movs	r2, r7
    54d0:	0011      	movs	r1, r2
    54d2:	0018      	movs	r0, r3
    54d4:	4b05      	ldr	r3, [pc, #20]	; (54ec <_switch_peripheral_gclk+0x34>)
    54d6:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    54d8:	687b      	ldr	r3, [r7, #4]
    54da:	3301      	adds	r3, #1
    54dc:	607b      	str	r3, [r7, #4]
    54de:	687b      	ldr	r3, [r7, #4]
    54e0:	2b24      	cmp	r3, #36	; 0x24
    54e2:	d9f2      	bls.n	54ca <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    54e4:	46c0      	nop			; (mov r8, r8)
    54e6:	46bd      	mov	sp, r7
    54e8:	b002      	add	sp, #8
    54ea:	bd80      	pop	{r7, pc}
    54ec:	000059e1 	.word	0x000059e1

000054f0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    54f0:	b580      	push	{r7, lr}
    54f2:	b0a0      	sub	sp, #128	; 0x80
    54f4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    54f6:	4b63      	ldr	r3, [pc, #396]	; (5684 <system_clock_init+0x194>)
    54f8:	22c2      	movs	r2, #194	; 0xc2
    54fa:	00d2      	lsls	r2, r2, #3
    54fc:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    54fe:	2000      	movs	r0, #0
    5500:	4b61      	ldr	r3, [pc, #388]	; (5688 <system_clock_init+0x198>)
    5502:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    5504:	4b61      	ldr	r3, [pc, #388]	; (568c <system_clock_init+0x19c>)
    5506:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    5508:	237c      	movs	r3, #124	; 0x7c
    550a:	18fb      	adds	r3, r7, r3
    550c:	0018      	movs	r0, r3
    550e:	4b60      	ldr	r3, [pc, #384]	; (5690 <system_clock_init+0x1a0>)
    5510:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    5512:	237c      	movs	r3, #124	; 0x7c
    5514:	18fb      	adds	r3, r7, r3
    5516:	2200      	movs	r2, #0
    5518:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    551a:	237c      	movs	r3, #124	; 0x7c
    551c:	18fb      	adds	r3, r7, r3
    551e:	2201      	movs	r2, #1
    5520:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    5522:	237c      	movs	r3, #124	; 0x7c
    5524:	18fb      	adds	r3, r7, r3
    5526:	2200      	movs	r2, #0
    5528:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    552a:	237c      	movs	r3, #124	; 0x7c
    552c:	18fb      	adds	r3, r7, r3
    552e:	0018      	movs	r0, r3
    5530:	4b58      	ldr	r3, [pc, #352]	; (5694 <system_clock_init+0x1a4>)
    5532:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5534:	2006      	movs	r0, #6
    5536:	4b58      	ldr	r3, [pc, #352]	; (5698 <system_clock_init+0x1a8>)
    5538:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    553a:	4b58      	ldr	r3, [pc, #352]	; (569c <system_clock_init+0x1ac>)
    553c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    553e:	2364      	movs	r3, #100	; 0x64
    5540:	18fb      	adds	r3, r7, r3
    5542:	0018      	movs	r0, r3
    5544:	4b56      	ldr	r3, [pc, #344]	; (56a0 <system_clock_init+0x1b0>)
    5546:	4798      	blx	r3
    5548:	2364      	movs	r3, #100	; 0x64
    554a:	18fb      	adds	r3, r7, r3
    554c:	2206      	movs	r2, #6
    554e:	701a      	strb	r2, [r3, #0]
    5550:	2364      	movs	r3, #100	; 0x64
    5552:	18fb      	adds	r3, r7, r3
    5554:	2201      	movs	r2, #1
    5556:	605a      	str	r2, [r3, #4]
    5558:	2364      	movs	r3, #100	; 0x64
    555a:	18fb      	adds	r3, r7, r3
    555c:	2201      	movs	r2, #1
    555e:	721a      	strb	r2, [r3, #8]
    5560:	2364      	movs	r3, #100	; 0x64
    5562:	18fb      	adds	r3, r7, r3
    5564:	2200      	movs	r2, #0
    5566:	725a      	strb	r2, [r3, #9]
    5568:	2364      	movs	r3, #100	; 0x64
    556a:	18fb      	adds	r3, r7, r3
    556c:	0019      	movs	r1, r3
    556e:	2001      	movs	r0, #1
    5570:	4b4c      	ldr	r3, [pc, #304]	; (56a4 <system_clock_init+0x1b4>)
    5572:	4798      	blx	r3
    5574:	2001      	movs	r0, #1
    5576:	4b4c      	ldr	r3, [pc, #304]	; (56a8 <system_clock_init+0x1b8>)
    5578:	4798      	blx	r3
    557a:	2358      	movs	r3, #88	; 0x58
    557c:	18fb      	adds	r3, r7, r3
    557e:	0018      	movs	r0, r3
    5580:	4b47      	ldr	r3, [pc, #284]	; (56a0 <system_clock_init+0x1b0>)
    5582:	4798      	blx	r3
    5584:	2358      	movs	r3, #88	; 0x58
    5586:	18fb      	adds	r3, r7, r3
    5588:	2206      	movs	r2, #6
    558a:	701a      	strb	r2, [r3, #0]
    558c:	2358      	movs	r3, #88	; 0x58
    558e:	18fb      	adds	r3, r7, r3
    5590:	2201      	movs	r2, #1
    5592:	605a      	str	r2, [r3, #4]
    5594:	2358      	movs	r3, #88	; 0x58
    5596:	18fb      	adds	r3, r7, r3
    5598:	2201      	movs	r2, #1
    559a:	721a      	strb	r2, [r3, #8]
    559c:	2358      	movs	r3, #88	; 0x58
    559e:	18fb      	adds	r3, r7, r3
    55a0:	2200      	movs	r2, #0
    55a2:	725a      	strb	r2, [r3, #9]
    55a4:	2358      	movs	r3, #88	; 0x58
    55a6:	18fb      	adds	r3, r7, r3
    55a8:	0019      	movs	r1, r3
    55aa:	2002      	movs	r0, #2
    55ac:	4b3d      	ldr	r3, [pc, #244]	; (56a4 <system_clock_init+0x1b4>)
    55ae:	4798      	blx	r3
    55b0:	2002      	movs	r0, #2
    55b2:	4b3d      	ldr	r3, [pc, #244]	; (56a8 <system_clock_init+0x1b8>)
    55b4:	4798      	blx	r3
    55b6:	234c      	movs	r3, #76	; 0x4c
    55b8:	18fb      	adds	r3, r7, r3
    55ba:	0018      	movs	r0, r3
    55bc:	4b38      	ldr	r3, [pc, #224]	; (56a0 <system_clock_init+0x1b0>)
    55be:	4798      	blx	r3
    55c0:	234c      	movs	r3, #76	; 0x4c
    55c2:	18fb      	adds	r3, r7, r3
    55c4:	2206      	movs	r2, #6
    55c6:	701a      	strb	r2, [r3, #0]
    55c8:	234c      	movs	r3, #76	; 0x4c
    55ca:	18fb      	adds	r3, r7, r3
    55cc:	2201      	movs	r2, #1
    55ce:	605a      	str	r2, [r3, #4]
    55d0:	234c      	movs	r3, #76	; 0x4c
    55d2:	18fb      	adds	r3, r7, r3
    55d4:	2201      	movs	r2, #1
    55d6:	721a      	strb	r2, [r3, #8]
    55d8:	234c      	movs	r3, #76	; 0x4c
    55da:	18fb      	adds	r3, r7, r3
    55dc:	2200      	movs	r2, #0
    55de:	725a      	strb	r2, [r3, #9]
    55e0:	234c      	movs	r3, #76	; 0x4c
    55e2:	18fb      	adds	r3, r7, r3
    55e4:	0019      	movs	r1, r3
    55e6:	2003      	movs	r0, #3
    55e8:	4b2e      	ldr	r3, [pc, #184]	; (56a4 <system_clock_init+0x1b4>)
    55ea:	4798      	blx	r3
    55ec:	2003      	movs	r0, #3
    55ee:	4b2e      	ldr	r3, [pc, #184]	; (56a8 <system_clock_init+0x1b8>)
    55f0:	4798      	blx	r3
    55f2:	2340      	movs	r3, #64	; 0x40
    55f4:	18fb      	adds	r3, r7, r3
    55f6:	0018      	movs	r0, r3
    55f8:	4b29      	ldr	r3, [pc, #164]	; (56a0 <system_clock_init+0x1b0>)
    55fa:	4798      	blx	r3
    55fc:	2340      	movs	r3, #64	; 0x40
    55fe:	18fb      	adds	r3, r7, r3
    5600:	2206      	movs	r2, #6
    5602:	701a      	strb	r2, [r3, #0]
    5604:	2340      	movs	r3, #64	; 0x40
    5606:	18fb      	adds	r3, r7, r3
    5608:	2201      	movs	r2, #1
    560a:	605a      	str	r2, [r3, #4]
    560c:	2340      	movs	r3, #64	; 0x40
    560e:	18fb      	adds	r3, r7, r3
    5610:	2200      	movs	r2, #0
    5612:	721a      	strb	r2, [r3, #8]
    5614:	2340      	movs	r3, #64	; 0x40
    5616:	18fb      	adds	r3, r7, r3
    5618:	2200      	movs	r2, #0
    561a:	725a      	strb	r2, [r3, #9]
    561c:	2340      	movs	r3, #64	; 0x40
    561e:	18fb      	adds	r3, r7, r3
    5620:	0019      	movs	r1, r3
    5622:	2004      	movs	r0, #4
    5624:	4b1f      	ldr	r3, [pc, #124]	; (56a4 <system_clock_init+0x1b4>)
    5626:	4798      	blx	r3
    5628:	2004      	movs	r0, #4
    562a:	4b1f      	ldr	r3, [pc, #124]	; (56a8 <system_clock_init+0x1b8>)
    562c:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    562e:	2000      	movs	r0, #0
    5630:	4b1e      	ldr	r3, [pc, #120]	; (56ac <system_clock_init+0x1bc>)
    5632:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    5634:	2100      	movs	r1, #0
    5636:	2000      	movs	r0, #0
    5638:	4b1d      	ldr	r3, [pc, #116]	; (56b0 <system_clock_init+0x1c0>)
    563a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    563c:	2100      	movs	r1, #0
    563e:	2001      	movs	r0, #1
    5640:	4b1b      	ldr	r3, [pc, #108]	; (56b0 <system_clock_init+0x1c0>)
    5642:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    5644:	2100      	movs	r1, #0
    5646:	2002      	movs	r0, #2
    5648:	4b19      	ldr	r3, [pc, #100]	; (56b0 <system_clock_init+0x1c0>)
    564a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    564c:	1d3b      	adds	r3, r7, #4
    564e:	0018      	movs	r0, r3
    5650:	4b13      	ldr	r3, [pc, #76]	; (56a0 <system_clock_init+0x1b0>)
    5652:	4798      	blx	r3
    5654:	1d3b      	adds	r3, r7, #4
    5656:	2206      	movs	r2, #6
    5658:	701a      	strb	r2, [r3, #0]
    565a:	1d3b      	adds	r3, r7, #4
    565c:	2201      	movs	r2, #1
    565e:	605a      	str	r2, [r3, #4]
    5660:	1d3b      	adds	r3, r7, #4
    5662:	2201      	movs	r2, #1
    5664:	721a      	strb	r2, [r3, #8]
    5666:	1d3b      	adds	r3, r7, #4
    5668:	2200      	movs	r2, #0
    566a:	725a      	strb	r2, [r3, #9]
    566c:	1d3b      	adds	r3, r7, #4
    566e:	0019      	movs	r1, r3
    5670:	2000      	movs	r0, #0
    5672:	4b0c      	ldr	r3, [pc, #48]	; (56a4 <system_clock_init+0x1b4>)
    5674:	4798      	blx	r3
    5676:	2000      	movs	r0, #0
    5678:	4b0b      	ldr	r3, [pc, #44]	; (56a8 <system_clock_init+0x1b8>)
    567a:	4798      	blx	r3
#endif
}
    567c:	46c0      	nop			; (mov r8, r8)
    567e:	46bd      	mov	sp, r7
    5680:	b020      	add	sp, #128	; 0x80
    5682:	bd80      	pop	{r7, pc}
    5684:	40000800 	.word	0x40000800
    5688:	00005245 	.word	0x00005245
    568c:	000054b9 	.word	0x000054b9
    5690:	000051ad 	.word	0x000051ad
    5694:	00005395 	.word	0x00005395
    5698:	0000540d 	.word	0x0000540d
    569c:	00005759 	.word	0x00005759
    56a0:	0000517d 	.word	0x0000517d
    56a4:	00005789 	.word	0x00005789
    56a8:	000058ad 	.word	0x000058ad
    56ac:	000051d1 	.word	0x000051d1
    56b0:	000051f1 	.word	0x000051f1

000056b4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    56b4:	b580      	push	{r7, lr}
    56b6:	b082      	sub	sp, #8
    56b8:	af00      	add	r7, sp, #0
    56ba:	0002      	movs	r2, r0
    56bc:	6039      	str	r1, [r7, #0]
    56be:	1dfb      	adds	r3, r7, #7
    56c0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    56c2:	1dfb      	adds	r3, r7, #7
    56c4:	781b      	ldrb	r3, [r3, #0]
    56c6:	2b01      	cmp	r3, #1
    56c8:	d00a      	beq.n	56e0 <system_apb_clock_set_mask+0x2c>
    56ca:	2b02      	cmp	r3, #2
    56cc:	d00f      	beq.n	56ee <system_apb_clock_set_mask+0x3a>
    56ce:	2b00      	cmp	r3, #0
    56d0:	d114      	bne.n	56fc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    56d2:	4b0e      	ldr	r3, [pc, #56]	; (570c <system_apb_clock_set_mask+0x58>)
    56d4:	4a0d      	ldr	r2, [pc, #52]	; (570c <system_apb_clock_set_mask+0x58>)
    56d6:	6991      	ldr	r1, [r2, #24]
    56d8:	683a      	ldr	r2, [r7, #0]
    56da:	430a      	orrs	r2, r1
    56dc:	619a      	str	r2, [r3, #24]
			break;
    56de:	e00f      	b.n	5700 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    56e0:	4b0a      	ldr	r3, [pc, #40]	; (570c <system_apb_clock_set_mask+0x58>)
    56e2:	4a0a      	ldr	r2, [pc, #40]	; (570c <system_apb_clock_set_mask+0x58>)
    56e4:	69d1      	ldr	r1, [r2, #28]
    56e6:	683a      	ldr	r2, [r7, #0]
    56e8:	430a      	orrs	r2, r1
    56ea:	61da      	str	r2, [r3, #28]
			break;
    56ec:	e008      	b.n	5700 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    56ee:	4b07      	ldr	r3, [pc, #28]	; (570c <system_apb_clock_set_mask+0x58>)
    56f0:	4a06      	ldr	r2, [pc, #24]	; (570c <system_apb_clock_set_mask+0x58>)
    56f2:	6a11      	ldr	r1, [r2, #32]
    56f4:	683a      	ldr	r2, [r7, #0]
    56f6:	430a      	orrs	r2, r1
    56f8:	621a      	str	r2, [r3, #32]
			break;
    56fa:	e001      	b.n	5700 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    56fc:	2317      	movs	r3, #23
    56fe:	e000      	b.n	5702 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5700:	2300      	movs	r3, #0
}
    5702:	0018      	movs	r0, r3
    5704:	46bd      	mov	sp, r7
    5706:	b002      	add	sp, #8
    5708:	bd80      	pop	{r7, pc}
    570a:	46c0      	nop			; (mov r8, r8)
    570c:	40000400 	.word	0x40000400

00005710 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    5710:	b580      	push	{r7, lr}
    5712:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    5714:	4b02      	ldr	r3, [pc, #8]	; (5720 <system_interrupt_enter_critical_section+0x10>)
    5716:	4798      	blx	r3
}
    5718:	46c0      	nop			; (mov r8, r8)
    571a:	46bd      	mov	sp, r7
    571c:	bd80      	pop	{r7, pc}
    571e:	46c0      	nop			; (mov r8, r8)
    5720:	000050e9 	.word	0x000050e9

00005724 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    5724:	b580      	push	{r7, lr}
    5726:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    5728:	4b02      	ldr	r3, [pc, #8]	; (5734 <system_interrupt_leave_critical_section+0x10>)
    572a:	4798      	blx	r3
}
    572c:	46c0      	nop			; (mov r8, r8)
    572e:	46bd      	mov	sp, r7
    5730:	bd80      	pop	{r7, pc}
    5732:	46c0      	nop			; (mov r8, r8)
    5734:	0000513d 	.word	0x0000513d

00005738 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    5738:	b580      	push	{r7, lr}
    573a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    573c:	4b05      	ldr	r3, [pc, #20]	; (5754 <system_gclk_is_syncing+0x1c>)
    573e:	785b      	ldrb	r3, [r3, #1]
    5740:	b2db      	uxtb	r3, r3
    5742:	b25b      	sxtb	r3, r3
    5744:	2b00      	cmp	r3, #0
    5746:	da01      	bge.n	574c <system_gclk_is_syncing+0x14>
		return true;
    5748:	2301      	movs	r3, #1
    574a:	e000      	b.n	574e <system_gclk_is_syncing+0x16>
	}

	return false;
    574c:	2300      	movs	r3, #0
}
    574e:	0018      	movs	r0, r3
    5750:	46bd      	mov	sp, r7
    5752:	bd80      	pop	{r7, pc}
    5754:	40000c00 	.word	0x40000c00

00005758 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    5758:	b580      	push	{r7, lr}
    575a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    575c:	2108      	movs	r1, #8
    575e:	2000      	movs	r0, #0
    5760:	4b07      	ldr	r3, [pc, #28]	; (5780 <system_gclk_init+0x28>)
    5762:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5764:	4b07      	ldr	r3, [pc, #28]	; (5784 <system_gclk_init+0x2c>)
    5766:	2201      	movs	r2, #1
    5768:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    576a:	46c0      	nop			; (mov r8, r8)
    576c:	4b05      	ldr	r3, [pc, #20]	; (5784 <system_gclk_init+0x2c>)
    576e:	781b      	ldrb	r3, [r3, #0]
    5770:	b2db      	uxtb	r3, r3
    5772:	001a      	movs	r2, r3
    5774:	2301      	movs	r3, #1
    5776:	4013      	ands	r3, r2
    5778:	d1f8      	bne.n	576c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    577a:	46c0      	nop			; (mov r8, r8)
    577c:	46bd      	mov	sp, r7
    577e:	bd80      	pop	{r7, pc}
    5780:	000056b5 	.word	0x000056b5
    5784:	40000c00 	.word	0x40000c00

00005788 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5788:	b580      	push	{r7, lr}
    578a:	b086      	sub	sp, #24
    578c:	af00      	add	r7, sp, #0
    578e:	0002      	movs	r2, r0
    5790:	6039      	str	r1, [r7, #0]
    5792:	1dfb      	adds	r3, r7, #7
    5794:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    5796:	1dfb      	adds	r3, r7, #7
    5798:	781b      	ldrb	r3, [r3, #0]
    579a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    579c:	1dfb      	adds	r3, r7, #7
    579e:	781b      	ldrb	r3, [r3, #0]
    57a0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    57a2:	683b      	ldr	r3, [r7, #0]
    57a4:	781b      	ldrb	r3, [r3, #0]
    57a6:	021b      	lsls	r3, r3, #8
    57a8:	001a      	movs	r2, r3
    57aa:	697b      	ldr	r3, [r7, #20]
    57ac:	4313      	orrs	r3, r2
    57ae:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    57b0:	683b      	ldr	r3, [r7, #0]
    57b2:	785b      	ldrb	r3, [r3, #1]
    57b4:	2b00      	cmp	r3, #0
    57b6:	d004      	beq.n	57c2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    57b8:	697b      	ldr	r3, [r7, #20]
    57ba:	2280      	movs	r2, #128	; 0x80
    57bc:	02d2      	lsls	r2, r2, #11
    57be:	4313      	orrs	r3, r2
    57c0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    57c2:	683b      	ldr	r3, [r7, #0]
    57c4:	7a5b      	ldrb	r3, [r3, #9]
    57c6:	2b00      	cmp	r3, #0
    57c8:	d004      	beq.n	57d4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    57ca:	697b      	ldr	r3, [r7, #20]
    57cc:	2280      	movs	r2, #128	; 0x80
    57ce:	0312      	lsls	r2, r2, #12
    57d0:	4313      	orrs	r3, r2
    57d2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    57d4:	683b      	ldr	r3, [r7, #0]
    57d6:	685b      	ldr	r3, [r3, #4]
    57d8:	2b01      	cmp	r3, #1
    57da:	d92c      	bls.n	5836 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    57dc:	683b      	ldr	r3, [r7, #0]
    57de:	685a      	ldr	r2, [r3, #4]
    57e0:	683b      	ldr	r3, [r7, #0]
    57e2:	685b      	ldr	r3, [r3, #4]
    57e4:	3b01      	subs	r3, #1
    57e6:	4013      	ands	r3, r2
    57e8:	d11a      	bne.n	5820 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    57ea:	2300      	movs	r3, #0
    57ec:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    57ee:	2302      	movs	r3, #2
    57f0:	60bb      	str	r3, [r7, #8]
    57f2:	e005      	b.n	5800 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    57f4:	68fb      	ldr	r3, [r7, #12]
    57f6:	3301      	adds	r3, #1
    57f8:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    57fa:	68bb      	ldr	r3, [r7, #8]
    57fc:	005b      	lsls	r3, r3, #1
    57fe:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5800:	683b      	ldr	r3, [r7, #0]
    5802:	685a      	ldr	r2, [r3, #4]
    5804:	68bb      	ldr	r3, [r7, #8]
    5806:	429a      	cmp	r2, r3
    5808:	d8f4      	bhi.n	57f4 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    580a:	68fb      	ldr	r3, [r7, #12]
    580c:	021b      	lsls	r3, r3, #8
    580e:	693a      	ldr	r2, [r7, #16]
    5810:	4313      	orrs	r3, r2
    5812:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5814:	697b      	ldr	r3, [r7, #20]
    5816:	2280      	movs	r2, #128	; 0x80
    5818:	0352      	lsls	r2, r2, #13
    581a:	4313      	orrs	r3, r2
    581c:	617b      	str	r3, [r7, #20]
    581e:	e00a      	b.n	5836 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5820:	683b      	ldr	r3, [r7, #0]
    5822:	685b      	ldr	r3, [r3, #4]
    5824:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    5826:	693a      	ldr	r2, [r7, #16]
    5828:	4313      	orrs	r3, r2
    582a:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    582c:	697b      	ldr	r3, [r7, #20]
    582e:	2280      	movs	r2, #128	; 0x80
    5830:	0292      	lsls	r2, r2, #10
    5832:	4313      	orrs	r3, r2
    5834:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5836:	683b      	ldr	r3, [r7, #0]
    5838:	7a1b      	ldrb	r3, [r3, #8]
    583a:	2b00      	cmp	r3, #0
    583c:	d004      	beq.n	5848 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    583e:	697b      	ldr	r3, [r7, #20]
    5840:	2280      	movs	r2, #128	; 0x80
    5842:	0392      	lsls	r2, r2, #14
    5844:	4313      	orrs	r3, r2
    5846:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    5848:	46c0      	nop			; (mov r8, r8)
    584a:	4b13      	ldr	r3, [pc, #76]	; (5898 <system_gclk_gen_set_config+0x110>)
    584c:	4798      	blx	r3
    584e:	1e03      	subs	r3, r0, #0
    5850:	d1fb      	bne.n	584a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5852:	4b12      	ldr	r3, [pc, #72]	; (589c <system_gclk_gen_set_config+0x114>)
    5854:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5856:	4a12      	ldr	r2, [pc, #72]	; (58a0 <system_gclk_gen_set_config+0x118>)
    5858:	1dfb      	adds	r3, r7, #7
    585a:	781b      	ldrb	r3, [r3, #0]
    585c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    585e:	46c0      	nop			; (mov r8, r8)
    5860:	4b0d      	ldr	r3, [pc, #52]	; (5898 <system_gclk_gen_set_config+0x110>)
    5862:	4798      	blx	r3
    5864:	1e03      	subs	r3, r0, #0
    5866:	d1fb      	bne.n	5860 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5868:	4b0e      	ldr	r3, [pc, #56]	; (58a4 <system_gclk_gen_set_config+0x11c>)
    586a:	693a      	ldr	r2, [r7, #16]
    586c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    586e:	46c0      	nop			; (mov r8, r8)
    5870:	4b09      	ldr	r3, [pc, #36]	; (5898 <system_gclk_gen_set_config+0x110>)
    5872:	4798      	blx	r3
    5874:	1e03      	subs	r3, r0, #0
    5876:	d1fb      	bne.n	5870 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5878:	4b0a      	ldr	r3, [pc, #40]	; (58a4 <system_gclk_gen_set_config+0x11c>)
    587a:	4a0a      	ldr	r2, [pc, #40]	; (58a4 <system_gclk_gen_set_config+0x11c>)
    587c:	6851      	ldr	r1, [r2, #4]
    587e:	2280      	movs	r2, #128	; 0x80
    5880:	0252      	lsls	r2, r2, #9
    5882:	4011      	ands	r1, r2
    5884:	697a      	ldr	r2, [r7, #20]
    5886:	430a      	orrs	r2, r1
    5888:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    588a:	4b07      	ldr	r3, [pc, #28]	; (58a8 <system_gclk_gen_set_config+0x120>)
    588c:	4798      	blx	r3
}
    588e:	46c0      	nop			; (mov r8, r8)
    5890:	46bd      	mov	sp, r7
    5892:	b006      	add	sp, #24
    5894:	bd80      	pop	{r7, pc}
    5896:	46c0      	nop			; (mov r8, r8)
    5898:	00005739 	.word	0x00005739
    589c:	00005711 	.word	0x00005711
    58a0:	40000c08 	.word	0x40000c08
    58a4:	40000c00 	.word	0x40000c00
    58a8:	00005725 	.word	0x00005725

000058ac <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    58ac:	b580      	push	{r7, lr}
    58ae:	b082      	sub	sp, #8
    58b0:	af00      	add	r7, sp, #0
    58b2:	0002      	movs	r2, r0
    58b4:	1dfb      	adds	r3, r7, #7
    58b6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    58b8:	46c0      	nop			; (mov r8, r8)
    58ba:	4b0e      	ldr	r3, [pc, #56]	; (58f4 <system_gclk_gen_enable+0x48>)
    58bc:	4798      	blx	r3
    58be:	1e03      	subs	r3, r0, #0
    58c0:	d1fb      	bne.n	58ba <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    58c2:	4b0d      	ldr	r3, [pc, #52]	; (58f8 <system_gclk_gen_enable+0x4c>)
    58c4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    58c6:	4a0d      	ldr	r2, [pc, #52]	; (58fc <system_gclk_gen_enable+0x50>)
    58c8:	1dfb      	adds	r3, r7, #7
    58ca:	781b      	ldrb	r3, [r3, #0]
    58cc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    58ce:	46c0      	nop			; (mov r8, r8)
    58d0:	4b08      	ldr	r3, [pc, #32]	; (58f4 <system_gclk_gen_enable+0x48>)
    58d2:	4798      	blx	r3
    58d4:	1e03      	subs	r3, r0, #0
    58d6:	d1fb      	bne.n	58d0 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    58d8:	4b09      	ldr	r3, [pc, #36]	; (5900 <system_gclk_gen_enable+0x54>)
    58da:	4a09      	ldr	r2, [pc, #36]	; (5900 <system_gclk_gen_enable+0x54>)
    58dc:	6852      	ldr	r2, [r2, #4]
    58de:	2180      	movs	r1, #128	; 0x80
    58e0:	0249      	lsls	r1, r1, #9
    58e2:	430a      	orrs	r2, r1
    58e4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    58e6:	4b07      	ldr	r3, [pc, #28]	; (5904 <system_gclk_gen_enable+0x58>)
    58e8:	4798      	blx	r3
}
    58ea:	46c0      	nop			; (mov r8, r8)
    58ec:	46bd      	mov	sp, r7
    58ee:	b002      	add	sp, #8
    58f0:	bd80      	pop	{r7, pc}
    58f2:	46c0      	nop			; (mov r8, r8)
    58f4:	00005739 	.word	0x00005739
    58f8:	00005711 	.word	0x00005711
    58fc:	40000c04 	.word	0x40000c04
    5900:	40000c00 	.word	0x40000c00
    5904:	00005725 	.word	0x00005725

00005908 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5908:	b580      	push	{r7, lr}
    590a:	b086      	sub	sp, #24
    590c:	af00      	add	r7, sp, #0
    590e:	0002      	movs	r2, r0
    5910:	1dfb      	adds	r3, r7, #7
    5912:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    5914:	46c0      	nop			; (mov r8, r8)
    5916:	4b2a      	ldr	r3, [pc, #168]	; (59c0 <system_gclk_gen_get_hz+0xb8>)
    5918:	4798      	blx	r3
    591a:	1e03      	subs	r3, r0, #0
    591c:	d1fb      	bne.n	5916 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    591e:	4b29      	ldr	r3, [pc, #164]	; (59c4 <system_gclk_gen_get_hz+0xbc>)
    5920:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5922:	4a29      	ldr	r2, [pc, #164]	; (59c8 <system_gclk_gen_get_hz+0xc0>)
    5924:	1dfb      	adds	r3, r7, #7
    5926:	781b      	ldrb	r3, [r3, #0]
    5928:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    592a:	46c0      	nop			; (mov r8, r8)
    592c:	4b24      	ldr	r3, [pc, #144]	; (59c0 <system_gclk_gen_get_hz+0xb8>)
    592e:	4798      	blx	r3
    5930:	1e03      	subs	r3, r0, #0
    5932:	d1fb      	bne.n	592c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5934:	4b25      	ldr	r3, [pc, #148]	; (59cc <system_gclk_gen_get_hz+0xc4>)
    5936:	685b      	ldr	r3, [r3, #4]
    5938:	04db      	lsls	r3, r3, #19
    593a:	0edb      	lsrs	r3, r3, #27
    593c:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    593e:	0018      	movs	r0, r3
    5940:	4b23      	ldr	r3, [pc, #140]	; (59d0 <system_gclk_gen_get_hz+0xc8>)
    5942:	4798      	blx	r3
    5944:	0003      	movs	r3, r0
    5946:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5948:	4a1f      	ldr	r2, [pc, #124]	; (59c8 <system_gclk_gen_get_hz+0xc0>)
    594a:	1dfb      	adds	r3, r7, #7
    594c:	781b      	ldrb	r3, [r3, #0]
    594e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5950:	4b1e      	ldr	r3, [pc, #120]	; (59cc <system_gclk_gen_get_hz+0xc4>)
    5952:	685b      	ldr	r3, [r3, #4]
    5954:	02db      	lsls	r3, r3, #11
    5956:	0fdb      	lsrs	r3, r3, #31
    5958:	b2da      	uxtb	r2, r3
    595a:	2313      	movs	r3, #19
    595c:	18fb      	adds	r3, r7, r3
    595e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5960:	4a1c      	ldr	r2, [pc, #112]	; (59d4 <system_gclk_gen_get_hz+0xcc>)
    5962:	1dfb      	adds	r3, r7, #7
    5964:	781b      	ldrb	r3, [r3, #0]
    5966:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    5968:	46c0      	nop			; (mov r8, r8)
    596a:	4b15      	ldr	r3, [pc, #84]	; (59c0 <system_gclk_gen_get_hz+0xb8>)
    596c:	4798      	blx	r3
    596e:	1e03      	subs	r3, r0, #0
    5970:	d1fb      	bne.n	596a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    5972:	4b16      	ldr	r3, [pc, #88]	; (59cc <system_gclk_gen_get_hz+0xc4>)
    5974:	689b      	ldr	r3, [r3, #8]
    5976:	021b      	lsls	r3, r3, #8
    5978:	0c1b      	lsrs	r3, r3, #16
    597a:	b29b      	uxth	r3, r3
    597c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    597e:	4b16      	ldr	r3, [pc, #88]	; (59d8 <system_gclk_gen_get_hz+0xd0>)
    5980:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5982:	2313      	movs	r3, #19
    5984:	18fb      	adds	r3, r7, r3
    5986:	781b      	ldrb	r3, [r3, #0]
    5988:	2b00      	cmp	r3, #0
    598a:	d109      	bne.n	59a0 <system_gclk_gen_get_hz+0x98>
    598c:	68fb      	ldr	r3, [r7, #12]
    598e:	2b01      	cmp	r3, #1
    5990:	d906      	bls.n	59a0 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    5992:	4b12      	ldr	r3, [pc, #72]	; (59dc <system_gclk_gen_get_hz+0xd4>)
    5994:	68f9      	ldr	r1, [r7, #12]
    5996:	6978      	ldr	r0, [r7, #20]
    5998:	4798      	blx	r3
    599a:	0003      	movs	r3, r0
    599c:	617b      	str	r3, [r7, #20]
    599e:	e00a      	b.n	59b6 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    59a0:	2313      	movs	r3, #19
    59a2:	18fb      	adds	r3, r7, r3
    59a4:	781b      	ldrb	r3, [r3, #0]
    59a6:	2b00      	cmp	r3, #0
    59a8:	d005      	beq.n	59b6 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    59aa:	68fb      	ldr	r3, [r7, #12]
    59ac:	3301      	adds	r3, #1
    59ae:	697a      	ldr	r2, [r7, #20]
    59b0:	40da      	lsrs	r2, r3
    59b2:	0013      	movs	r3, r2
    59b4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    59b6:	697b      	ldr	r3, [r7, #20]
}
    59b8:	0018      	movs	r0, r3
    59ba:	46bd      	mov	sp, r7
    59bc:	b006      	add	sp, #24
    59be:	bd80      	pop	{r7, pc}
    59c0:	00005739 	.word	0x00005739
    59c4:	00005711 	.word	0x00005711
    59c8:	40000c04 	.word	0x40000c04
    59cc:	40000c00 	.word	0x40000c00
    59d0:	000052d9 	.word	0x000052d9
    59d4:	40000c08 	.word	0x40000c08
    59d8:	00005725 	.word	0x00005725
    59dc:	000063d9 	.word	0x000063d9

000059e0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    59e0:	b580      	push	{r7, lr}
    59e2:	b084      	sub	sp, #16
    59e4:	af00      	add	r7, sp, #0
    59e6:	0002      	movs	r2, r0
    59e8:	6039      	str	r1, [r7, #0]
    59ea:	1dfb      	adds	r3, r7, #7
    59ec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    59ee:	1dfb      	adds	r3, r7, #7
    59f0:	781b      	ldrb	r3, [r3, #0]
    59f2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    59f4:	683b      	ldr	r3, [r7, #0]
    59f6:	781b      	ldrb	r3, [r3, #0]
    59f8:	021b      	lsls	r3, r3, #8
    59fa:	001a      	movs	r2, r3
    59fc:	68fb      	ldr	r3, [r7, #12]
    59fe:	4313      	orrs	r3, r2
    5a00:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    5a02:	1dfb      	adds	r3, r7, #7
    5a04:	781b      	ldrb	r3, [r3, #0]
    5a06:	0018      	movs	r0, r3
    5a08:	4b04      	ldr	r3, [pc, #16]	; (5a1c <system_gclk_chan_set_config+0x3c>)
    5a0a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    5a0c:	4b04      	ldr	r3, [pc, #16]	; (5a20 <system_gclk_chan_set_config+0x40>)
    5a0e:	68fa      	ldr	r2, [r7, #12]
    5a10:	b292      	uxth	r2, r2
    5a12:	805a      	strh	r2, [r3, #2]
}
    5a14:	46c0      	nop			; (mov r8, r8)
    5a16:	46bd      	mov	sp, r7
    5a18:	b004      	add	sp, #16
    5a1a:	bd80      	pop	{r7, pc}
    5a1c:	00005a6d 	.word	0x00005a6d
    5a20:	40000c00 	.word	0x40000c00

00005a24 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5a24:	b580      	push	{r7, lr}
    5a26:	b082      	sub	sp, #8
    5a28:	af00      	add	r7, sp, #0
    5a2a:	0002      	movs	r2, r0
    5a2c:	1dfb      	adds	r3, r7, #7
    5a2e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5a30:	4b0a      	ldr	r3, [pc, #40]	; (5a5c <system_gclk_chan_enable+0x38>)
    5a32:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5a34:	4a0a      	ldr	r2, [pc, #40]	; (5a60 <system_gclk_chan_enable+0x3c>)
    5a36:	1dfb      	adds	r3, r7, #7
    5a38:	781b      	ldrb	r3, [r3, #0]
    5a3a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5a3c:	4909      	ldr	r1, [pc, #36]	; (5a64 <system_gclk_chan_enable+0x40>)
    5a3e:	4b09      	ldr	r3, [pc, #36]	; (5a64 <system_gclk_chan_enable+0x40>)
    5a40:	885b      	ldrh	r3, [r3, #2]
    5a42:	b29b      	uxth	r3, r3
    5a44:	2280      	movs	r2, #128	; 0x80
    5a46:	01d2      	lsls	r2, r2, #7
    5a48:	4313      	orrs	r3, r2
    5a4a:	b29b      	uxth	r3, r3
    5a4c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    5a4e:	4b06      	ldr	r3, [pc, #24]	; (5a68 <system_gclk_chan_enable+0x44>)
    5a50:	4798      	blx	r3
}
    5a52:	46c0      	nop			; (mov r8, r8)
    5a54:	46bd      	mov	sp, r7
    5a56:	b002      	add	sp, #8
    5a58:	bd80      	pop	{r7, pc}
    5a5a:	46c0      	nop			; (mov r8, r8)
    5a5c:	00005711 	.word	0x00005711
    5a60:	40000c02 	.word	0x40000c02
    5a64:	40000c00 	.word	0x40000c00
    5a68:	00005725 	.word	0x00005725

00005a6c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5a6c:	b580      	push	{r7, lr}
    5a6e:	b084      	sub	sp, #16
    5a70:	af00      	add	r7, sp, #0
    5a72:	0002      	movs	r2, r0
    5a74:	1dfb      	adds	r3, r7, #7
    5a76:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5a78:	4b1c      	ldr	r3, [pc, #112]	; (5aec <system_gclk_chan_disable+0x80>)
    5a7a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5a7c:	4a1c      	ldr	r2, [pc, #112]	; (5af0 <system_gclk_chan_disable+0x84>)
    5a7e:	1dfb      	adds	r3, r7, #7
    5a80:	781b      	ldrb	r3, [r3, #0]
    5a82:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5a84:	4b1b      	ldr	r3, [pc, #108]	; (5af4 <system_gclk_chan_disable+0x88>)
    5a86:	885b      	ldrh	r3, [r3, #2]
    5a88:	051b      	lsls	r3, r3, #20
    5a8a:	0f1b      	lsrs	r3, r3, #28
    5a8c:	b2db      	uxtb	r3, r3
    5a8e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    5a90:	4a18      	ldr	r2, [pc, #96]	; (5af4 <system_gclk_chan_disable+0x88>)
    5a92:	8853      	ldrh	r3, [r2, #2]
    5a94:	4918      	ldr	r1, [pc, #96]	; (5af8 <system_gclk_chan_disable+0x8c>)
    5a96:	400b      	ands	r3, r1
    5a98:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5a9a:	4a16      	ldr	r2, [pc, #88]	; (5af4 <system_gclk_chan_disable+0x88>)
    5a9c:	4b15      	ldr	r3, [pc, #84]	; (5af4 <system_gclk_chan_disable+0x88>)
    5a9e:	885b      	ldrh	r3, [r3, #2]
    5aa0:	b29b      	uxth	r3, r3
    5aa2:	4916      	ldr	r1, [pc, #88]	; (5afc <system_gclk_chan_disable+0x90>)
    5aa4:	400b      	ands	r3, r1
    5aa6:	b29b      	uxth	r3, r3
    5aa8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    5aaa:	46c0      	nop			; (mov r8, r8)
    5aac:	4b11      	ldr	r3, [pc, #68]	; (5af4 <system_gclk_chan_disable+0x88>)
    5aae:	885b      	ldrh	r3, [r3, #2]
    5ab0:	b29b      	uxth	r3, r3
    5ab2:	001a      	movs	r2, r3
    5ab4:	2380      	movs	r3, #128	; 0x80
    5ab6:	01db      	lsls	r3, r3, #7
    5ab8:	4013      	ands	r3, r2
    5aba:	d1f7      	bne.n	5aac <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    5abc:	4a0d      	ldr	r2, [pc, #52]	; (5af4 <system_gclk_chan_disable+0x88>)
    5abe:	68fb      	ldr	r3, [r7, #12]
    5ac0:	b2db      	uxtb	r3, r3
    5ac2:	1c19      	adds	r1, r3, #0
    5ac4:	230f      	movs	r3, #15
    5ac6:	400b      	ands	r3, r1
    5ac8:	b2d9      	uxtb	r1, r3
    5aca:	8853      	ldrh	r3, [r2, #2]
    5acc:	1c08      	adds	r0, r1, #0
    5ace:	210f      	movs	r1, #15
    5ad0:	4001      	ands	r1, r0
    5ad2:	0208      	lsls	r0, r1, #8
    5ad4:	4908      	ldr	r1, [pc, #32]	; (5af8 <system_gclk_chan_disable+0x8c>)
    5ad6:	400b      	ands	r3, r1
    5ad8:	1c19      	adds	r1, r3, #0
    5ada:	1c03      	adds	r3, r0, #0
    5adc:	430b      	orrs	r3, r1
    5ade:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    5ae0:	4b07      	ldr	r3, [pc, #28]	; (5b00 <system_gclk_chan_disable+0x94>)
    5ae2:	4798      	blx	r3
}
    5ae4:	46c0      	nop			; (mov r8, r8)
    5ae6:	46bd      	mov	sp, r7
    5ae8:	b004      	add	sp, #16
    5aea:	bd80      	pop	{r7, pc}
    5aec:	00005711 	.word	0x00005711
    5af0:	40000c02 	.word	0x40000c02
    5af4:	40000c00 	.word	0x40000c00
    5af8:	fffff0ff 	.word	0xfffff0ff
    5afc:	ffffbfff 	.word	0xffffbfff
    5b00:	00005725 	.word	0x00005725

00005b04 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    5b04:	b580      	push	{r7, lr}
    5b06:	b082      	sub	sp, #8
    5b08:	af00      	add	r7, sp, #0
    5b0a:	0002      	movs	r2, r0
    5b0c:	1dfb      	adds	r3, r7, #7
    5b0e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5b10:	4b09      	ldr	r3, [pc, #36]	; (5b38 <system_gclk_chan_lock+0x34>)
    5b12:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5b14:	4a09      	ldr	r2, [pc, #36]	; (5b3c <system_gclk_chan_lock+0x38>)
    5b16:	1dfb      	adds	r3, r7, #7
    5b18:	781b      	ldrb	r3, [r3, #0]
    5b1a:	7013      	strb	r3, [r2, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    5b1c:	4a08      	ldr	r2, [pc, #32]	; (5b40 <system_gclk_chan_lock+0x3c>)
    5b1e:	4b08      	ldr	r3, [pc, #32]	; (5b40 <system_gclk_chan_lock+0x3c>)
    5b20:	885b      	ldrh	r3, [r3, #2]
    5b22:	b29b      	uxth	r3, r3
    5b24:	4907      	ldr	r1, [pc, #28]	; (5b44 <system_gclk_chan_lock+0x40>)
    5b26:	430b      	orrs	r3, r1
    5b28:	b29b      	uxth	r3, r3
    5b2a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    5b2c:	4b06      	ldr	r3, [pc, #24]	; (5b48 <system_gclk_chan_lock+0x44>)
    5b2e:	4798      	blx	r3
}
    5b30:	46c0      	nop			; (mov r8, r8)
    5b32:	46bd      	mov	sp, r7
    5b34:	b002      	add	sp, #8
    5b36:	bd80      	pop	{r7, pc}
    5b38:	00005711 	.word	0x00005711
    5b3c:	40000c02 	.word	0x40000c02
    5b40:	40000c00 	.word	0x40000c00
    5b44:	ffffc000 	.word	0xffffc000
    5b48:	00005725 	.word	0x00005725

00005b4c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    5b4c:	b580      	push	{r7, lr}
    5b4e:	b084      	sub	sp, #16
    5b50:	af00      	add	r7, sp, #0
    5b52:	0002      	movs	r2, r0
    5b54:	1dfb      	adds	r3, r7, #7
    5b56:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    5b58:	4b0d      	ldr	r3, [pc, #52]	; (5b90 <system_gclk_chan_get_hz+0x44>)
    5b5a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5b5c:	4a0d      	ldr	r2, [pc, #52]	; (5b94 <system_gclk_chan_get_hz+0x48>)
    5b5e:	1dfb      	adds	r3, r7, #7
    5b60:	781b      	ldrb	r3, [r3, #0]
    5b62:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    5b64:	4b0c      	ldr	r3, [pc, #48]	; (5b98 <system_gclk_chan_get_hz+0x4c>)
    5b66:	885b      	ldrh	r3, [r3, #2]
    5b68:	051b      	lsls	r3, r3, #20
    5b6a:	0f1b      	lsrs	r3, r3, #28
    5b6c:	b2da      	uxtb	r2, r3
    5b6e:	230f      	movs	r3, #15
    5b70:	18fb      	adds	r3, r7, r3
    5b72:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    5b74:	4b09      	ldr	r3, [pc, #36]	; (5b9c <system_gclk_chan_get_hz+0x50>)
    5b76:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5b78:	230f      	movs	r3, #15
    5b7a:	18fb      	adds	r3, r7, r3
    5b7c:	781b      	ldrb	r3, [r3, #0]
    5b7e:	0018      	movs	r0, r3
    5b80:	4b07      	ldr	r3, [pc, #28]	; (5ba0 <system_gclk_chan_get_hz+0x54>)
    5b82:	4798      	blx	r3
    5b84:	0003      	movs	r3, r0
}
    5b86:	0018      	movs	r0, r3
    5b88:	46bd      	mov	sp, r7
    5b8a:	b004      	add	sp, #16
    5b8c:	bd80      	pop	{r7, pc}
    5b8e:	46c0      	nop			; (mov r8, r8)
    5b90:	00005711 	.word	0x00005711
    5b94:	40000c02 	.word	0x40000c02
    5b98:	40000c00 	.word	0x40000c00
    5b9c:	00005725 	.word	0x00005725
    5ba0:	00005909 	.word	0x00005909

00005ba4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5ba4:	b580      	push	{r7, lr}
    5ba6:	b084      	sub	sp, #16
    5ba8:	af00      	add	r7, sp, #0
    5baa:	0002      	movs	r2, r0
    5bac:	1dfb      	adds	r3, r7, #7
    5bae:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5bb0:	230f      	movs	r3, #15
    5bb2:	18fb      	adds	r3, r7, r3
    5bb4:	1dfa      	adds	r2, r7, #7
    5bb6:	7812      	ldrb	r2, [r2, #0]
    5bb8:	09d2      	lsrs	r2, r2, #7
    5bba:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5bbc:	230e      	movs	r3, #14
    5bbe:	18fb      	adds	r3, r7, r3
    5bc0:	1dfa      	adds	r2, r7, #7
    5bc2:	7812      	ldrb	r2, [r2, #0]
    5bc4:	0952      	lsrs	r2, r2, #5
    5bc6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5bc8:	4b0d      	ldr	r3, [pc, #52]	; (5c00 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    5bca:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    5bcc:	230f      	movs	r3, #15
    5bce:	18fb      	adds	r3, r7, r3
    5bd0:	781b      	ldrb	r3, [r3, #0]
    5bd2:	2b00      	cmp	r3, #0
    5bd4:	d10f      	bne.n	5bf6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5bd6:	230f      	movs	r3, #15
    5bd8:	18fb      	adds	r3, r7, r3
    5bda:	781b      	ldrb	r3, [r3, #0]
    5bdc:	009b      	lsls	r3, r3, #2
    5bde:	2210      	movs	r2, #16
    5be0:	4694      	mov	ip, r2
    5be2:	44bc      	add	ip, r7
    5be4:	4463      	add	r3, ip
    5be6:	3b08      	subs	r3, #8
    5be8:	681a      	ldr	r2, [r3, #0]
    5bea:	230e      	movs	r3, #14
    5bec:	18fb      	adds	r3, r7, r3
    5bee:	781b      	ldrb	r3, [r3, #0]
    5bf0:	01db      	lsls	r3, r3, #7
    5bf2:	18d3      	adds	r3, r2, r3
    5bf4:	e000      	b.n	5bf8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    5bf6:	2300      	movs	r3, #0
	}
}
    5bf8:	0018      	movs	r0, r3
    5bfa:	46bd      	mov	sp, r7
    5bfc:	b004      	add	sp, #16
    5bfe:	bd80      	pop	{r7, pc}
    5c00:	41004400 	.word	0x41004400

00005c04 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5c04:	b580      	push	{r7, lr}
    5c06:	b088      	sub	sp, #32
    5c08:	af00      	add	r7, sp, #0
    5c0a:	60f8      	str	r0, [r7, #12]
    5c0c:	60b9      	str	r1, [r7, #8]
    5c0e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    5c10:	2300      	movs	r3, #0
    5c12:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5c14:	687b      	ldr	r3, [r7, #4]
    5c16:	78db      	ldrb	r3, [r3, #3]
    5c18:	2201      	movs	r2, #1
    5c1a:	4053      	eors	r3, r2
    5c1c:	b2db      	uxtb	r3, r3
    5c1e:	2b00      	cmp	r3, #0
    5c20:	d035      	beq.n	5c8e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    5c22:	687b      	ldr	r3, [r7, #4]
    5c24:	781b      	ldrb	r3, [r3, #0]
    5c26:	2b80      	cmp	r3, #128	; 0x80
    5c28:	d00b      	beq.n	5c42 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    5c2a:	69fb      	ldr	r3, [r7, #28]
    5c2c:	2280      	movs	r2, #128	; 0x80
    5c2e:	0252      	lsls	r2, r2, #9
    5c30:	4313      	orrs	r3, r2
    5c32:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    5c34:	687b      	ldr	r3, [r7, #4]
    5c36:	781b      	ldrb	r3, [r3, #0]
    5c38:	061b      	lsls	r3, r3, #24
    5c3a:	001a      	movs	r2, r3
    5c3c:	69fb      	ldr	r3, [r7, #28]
    5c3e:	4313      	orrs	r3, r2
    5c40:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5c42:	687b      	ldr	r3, [r7, #4]
    5c44:	785b      	ldrb	r3, [r3, #1]
    5c46:	2b00      	cmp	r3, #0
    5c48:	d003      	beq.n	5c52 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5c4a:	687b      	ldr	r3, [r7, #4]
    5c4c:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5c4e:	2b02      	cmp	r3, #2
    5c50:	d110      	bne.n	5c74 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    5c52:	69fb      	ldr	r3, [r7, #28]
    5c54:	2280      	movs	r2, #128	; 0x80
    5c56:	0292      	lsls	r2, r2, #10
    5c58:	4313      	orrs	r3, r2
    5c5a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5c5c:	687b      	ldr	r3, [r7, #4]
    5c5e:	789b      	ldrb	r3, [r3, #2]
    5c60:	2b00      	cmp	r3, #0
    5c62:	d004      	beq.n	5c6e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    5c64:	69fb      	ldr	r3, [r7, #28]
    5c66:	2280      	movs	r2, #128	; 0x80
    5c68:	02d2      	lsls	r2, r2, #11
    5c6a:	4313      	orrs	r3, r2
    5c6c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5c6e:	68fb      	ldr	r3, [r7, #12]
    5c70:	68ba      	ldr	r2, [r7, #8]
    5c72:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5c74:	687b      	ldr	r3, [r7, #4]
    5c76:	785b      	ldrb	r3, [r3, #1]
    5c78:	2b01      	cmp	r3, #1
    5c7a:	d003      	beq.n	5c84 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5c7c:	687b      	ldr	r3, [r7, #4]
    5c7e:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5c80:	2b02      	cmp	r3, #2
    5c82:	d107      	bne.n	5c94 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5c84:	69fb      	ldr	r3, [r7, #28]
    5c86:	4a22      	ldr	r2, [pc, #136]	; (5d10 <_system_pinmux_config+0x10c>)
    5c88:	4013      	ands	r3, r2
    5c8a:	61fb      	str	r3, [r7, #28]
    5c8c:	e002      	b.n	5c94 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    5c8e:	68fb      	ldr	r3, [r7, #12]
    5c90:	68ba      	ldr	r2, [r7, #8]
    5c92:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5c94:	68bb      	ldr	r3, [r7, #8]
    5c96:	041b      	lsls	r3, r3, #16
    5c98:	0c1b      	lsrs	r3, r3, #16
    5c9a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5c9c:	68bb      	ldr	r3, [r7, #8]
    5c9e:	0c1b      	lsrs	r3, r3, #16
    5ca0:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5ca2:	69ba      	ldr	r2, [r7, #24]
    5ca4:	69fb      	ldr	r3, [r7, #28]
    5ca6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5ca8:	22a0      	movs	r2, #160	; 0xa0
    5caa:	05d2      	lsls	r2, r2, #23
    5cac:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5cae:	68fb      	ldr	r3, [r7, #12]
    5cb0:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5cb2:	697a      	ldr	r2, [r7, #20]
    5cb4:	69fb      	ldr	r3, [r7, #28]
    5cb6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5cb8:	22d0      	movs	r2, #208	; 0xd0
    5cba:	0612      	lsls	r2, r2, #24
    5cbc:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5cbe:	68fb      	ldr	r3, [r7, #12]
    5cc0:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5cc2:	687b      	ldr	r3, [r7, #4]
    5cc4:	78db      	ldrb	r3, [r3, #3]
    5cc6:	2201      	movs	r2, #1
    5cc8:	4053      	eors	r3, r2
    5cca:	b2db      	uxtb	r3, r3
    5ccc:	2b00      	cmp	r3, #0
    5cce:	d01a      	beq.n	5d06 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5cd0:	69fa      	ldr	r2, [r7, #28]
    5cd2:	2380      	movs	r3, #128	; 0x80
    5cd4:	02db      	lsls	r3, r3, #11
    5cd6:	4013      	ands	r3, r2
    5cd8:	d00a      	beq.n	5cf0 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5cda:	687b      	ldr	r3, [r7, #4]
    5cdc:	789b      	ldrb	r3, [r3, #2]
    5cde:	2b01      	cmp	r3, #1
    5ce0:	d103      	bne.n	5cea <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    5ce2:	68fb      	ldr	r3, [r7, #12]
    5ce4:	68ba      	ldr	r2, [r7, #8]
    5ce6:	619a      	str	r2, [r3, #24]
    5ce8:	e002      	b.n	5cf0 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    5cea:	68fb      	ldr	r3, [r7, #12]
    5cec:	68ba      	ldr	r2, [r7, #8]
    5cee:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5cf0:	687b      	ldr	r3, [r7, #4]
    5cf2:	785b      	ldrb	r3, [r3, #1]
    5cf4:	2b01      	cmp	r3, #1
    5cf6:	d003      	beq.n	5d00 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5cf8:	687b      	ldr	r3, [r7, #4]
    5cfa:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5cfc:	2b02      	cmp	r3, #2
    5cfe:	d102      	bne.n	5d06 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    5d00:	68fb      	ldr	r3, [r7, #12]
    5d02:	68ba      	ldr	r2, [r7, #8]
    5d04:	609a      	str	r2, [r3, #8]
		}
	}
}
    5d06:	46c0      	nop			; (mov r8, r8)
    5d08:	46bd      	mov	sp, r7
    5d0a:	b008      	add	sp, #32
    5d0c:	bd80      	pop	{r7, pc}
    5d0e:	46c0      	nop			; (mov r8, r8)
    5d10:	fffbffff 	.word	0xfffbffff

00005d14 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5d14:	b580      	push	{r7, lr}
    5d16:	b084      	sub	sp, #16
    5d18:	af00      	add	r7, sp, #0
    5d1a:	0002      	movs	r2, r0
    5d1c:	6039      	str	r1, [r7, #0]
    5d1e:	1dfb      	adds	r3, r7, #7
    5d20:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5d22:	1dfb      	adds	r3, r7, #7
    5d24:	781b      	ldrb	r3, [r3, #0]
    5d26:	0018      	movs	r0, r3
    5d28:	4b0a      	ldr	r3, [pc, #40]	; (5d54 <system_pinmux_pin_set_config+0x40>)
    5d2a:	4798      	blx	r3
    5d2c:	0003      	movs	r3, r0
    5d2e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5d30:	1dfb      	adds	r3, r7, #7
    5d32:	781b      	ldrb	r3, [r3, #0]
    5d34:	221f      	movs	r2, #31
    5d36:	4013      	ands	r3, r2
    5d38:	2201      	movs	r2, #1
    5d3a:	409a      	lsls	r2, r3
    5d3c:	0013      	movs	r3, r2
    5d3e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    5d40:	683a      	ldr	r2, [r7, #0]
    5d42:	68b9      	ldr	r1, [r7, #8]
    5d44:	68fb      	ldr	r3, [r7, #12]
    5d46:	0018      	movs	r0, r3
    5d48:	4b03      	ldr	r3, [pc, #12]	; (5d58 <system_pinmux_pin_set_config+0x44>)
    5d4a:	4798      	blx	r3
}
    5d4c:	46c0      	nop			; (mov r8, r8)
    5d4e:	46bd      	mov	sp, r7
    5d50:	b004      	add	sp, #16
    5d52:	bd80      	pop	{r7, pc}
    5d54:	00005ba5 	.word	0x00005ba5
    5d58:	00005c05 	.word	0x00005c05

00005d5c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    5d5c:	b580      	push	{r7, lr}
    5d5e:	af00      	add	r7, sp, #0
	return;
    5d60:	46c0      	nop			; (mov r8, r8)
}
    5d62:	46bd      	mov	sp, r7
    5d64:	bd80      	pop	{r7, pc}
    5d66:	46c0      	nop			; (mov r8, r8)

00005d68 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5d68:	b580      	push	{r7, lr}
    5d6a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    5d6c:	4b06      	ldr	r3, [pc, #24]	; (5d88 <system_init+0x20>)
    5d6e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5d70:	4b06      	ldr	r3, [pc, #24]	; (5d8c <system_init+0x24>)
    5d72:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5d74:	4b06      	ldr	r3, [pc, #24]	; (5d90 <system_init+0x28>)
    5d76:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5d78:	4b06      	ldr	r3, [pc, #24]	; (5d94 <system_init+0x2c>)
    5d7a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    5d7c:	4b06      	ldr	r3, [pc, #24]	; (5d98 <system_init+0x30>)
    5d7e:	4798      	blx	r3
}
    5d80:	46c0      	nop			; (mov r8, r8)
    5d82:	46bd      	mov	sp, r7
    5d84:	bd80      	pop	{r7, pc}
    5d86:	46c0      	nop			; (mov r8, r8)
    5d88:	000054f1 	.word	0x000054f1
    5d8c:	000050dd 	.word	0x000050dd
    5d90:	00005d5d 	.word	0x00005d5d
    5d94:	00000b7d 	.word	0x00000b7d
    5d98:	00005d5d 	.word	0x00005d5d

00005d9c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    5d9c:	b580      	push	{r7, lr}
    5d9e:	b082      	sub	sp, #8
    5da0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    5da2:	4b2f      	ldr	r3, [pc, #188]	; (5e60 <Reset_Handler+0xc4>)
    5da4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    5da6:	4b2f      	ldr	r3, [pc, #188]	; (5e64 <Reset_Handler+0xc8>)
    5da8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    5daa:	687a      	ldr	r2, [r7, #4]
    5dac:	683b      	ldr	r3, [r7, #0]
    5dae:	429a      	cmp	r2, r3
    5db0:	d00c      	beq.n	5dcc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    5db2:	e007      	b.n	5dc4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    5db4:	683b      	ldr	r3, [r7, #0]
    5db6:	1d1a      	adds	r2, r3, #4
    5db8:	603a      	str	r2, [r7, #0]
    5dba:	687a      	ldr	r2, [r7, #4]
    5dbc:	1d11      	adds	r1, r2, #4
    5dbe:	6079      	str	r1, [r7, #4]
    5dc0:	6812      	ldr	r2, [r2, #0]
    5dc2:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    5dc4:	683a      	ldr	r2, [r7, #0]
    5dc6:	4b28      	ldr	r3, [pc, #160]	; (5e68 <Reset_Handler+0xcc>)
    5dc8:	429a      	cmp	r2, r3
    5dca:	d3f3      	bcc.n	5db4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5dcc:	4b27      	ldr	r3, [pc, #156]	; (5e6c <Reset_Handler+0xd0>)
    5dce:	603b      	str	r3, [r7, #0]
    5dd0:	e004      	b.n	5ddc <Reset_Handler+0x40>
                *pDest++ = 0;
    5dd2:	683b      	ldr	r3, [r7, #0]
    5dd4:	1d1a      	adds	r2, r3, #4
    5dd6:	603a      	str	r2, [r7, #0]
    5dd8:	2200      	movs	r2, #0
    5dda:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5ddc:	683a      	ldr	r2, [r7, #0]
    5dde:	4b24      	ldr	r3, [pc, #144]	; (5e70 <Reset_Handler+0xd4>)
    5de0:	429a      	cmp	r2, r3
    5de2:	d3f6      	bcc.n	5dd2 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    5de4:	4b23      	ldr	r3, [pc, #140]	; (5e74 <Reset_Handler+0xd8>)
    5de6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5de8:	4b23      	ldr	r3, [pc, #140]	; (5e78 <Reset_Handler+0xdc>)
    5dea:	687a      	ldr	r2, [r7, #4]
    5dec:	21ff      	movs	r1, #255	; 0xff
    5dee:	438a      	bics	r2, r1
    5df0:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    5df2:	4a22      	ldr	r2, [pc, #136]	; (5e7c <Reset_Handler+0xe0>)
    5df4:	2390      	movs	r3, #144	; 0x90
    5df6:	005b      	lsls	r3, r3, #1
    5df8:	2102      	movs	r1, #2
    5dfa:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5dfc:	4a20      	ldr	r2, [pc, #128]	; (5e80 <Reset_Handler+0xe4>)
    5dfe:	78d3      	ldrb	r3, [r2, #3]
    5e00:	2103      	movs	r1, #3
    5e02:	438b      	bics	r3, r1
    5e04:	1c19      	adds	r1, r3, #0
    5e06:	2302      	movs	r3, #2
    5e08:	430b      	orrs	r3, r1
    5e0a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5e0c:	4a1c      	ldr	r2, [pc, #112]	; (5e80 <Reset_Handler+0xe4>)
    5e0e:	78d3      	ldrb	r3, [r2, #3]
    5e10:	210c      	movs	r1, #12
    5e12:	438b      	bics	r3, r1
    5e14:	1c19      	adds	r1, r3, #0
    5e16:	2308      	movs	r3, #8
    5e18:	430b      	orrs	r3, r1
    5e1a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    5e1c:	4a19      	ldr	r2, [pc, #100]	; (5e84 <Reset_Handler+0xe8>)
    5e1e:	7b93      	ldrb	r3, [r2, #14]
    5e20:	2130      	movs	r1, #48	; 0x30
    5e22:	438b      	bics	r3, r1
    5e24:	1c19      	adds	r1, r3, #0
    5e26:	2320      	movs	r3, #32
    5e28:	430b      	orrs	r3, r1
    5e2a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    5e2c:	4a15      	ldr	r2, [pc, #84]	; (5e84 <Reset_Handler+0xe8>)
    5e2e:	7b93      	ldrb	r3, [r2, #14]
    5e30:	210c      	movs	r1, #12
    5e32:	438b      	bics	r3, r1
    5e34:	1c19      	adds	r1, r3, #0
    5e36:	2308      	movs	r3, #8
    5e38:	430b      	orrs	r3, r1
    5e3a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5e3c:	4a11      	ldr	r2, [pc, #68]	; (5e84 <Reset_Handler+0xe8>)
    5e3e:	7b93      	ldrb	r3, [r2, #14]
    5e40:	2103      	movs	r1, #3
    5e42:	438b      	bics	r3, r1
    5e44:	1c19      	adds	r1, r3, #0
    5e46:	2302      	movs	r3, #2
    5e48:	430b      	orrs	r3, r1
    5e4a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    5e4c:	4a0e      	ldr	r2, [pc, #56]	; (5e88 <Reset_Handler+0xec>)
    5e4e:	6853      	ldr	r3, [r2, #4]
    5e50:	2180      	movs	r1, #128	; 0x80
    5e52:	430b      	orrs	r3, r1
    5e54:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    5e56:	4b0d      	ldr	r3, [pc, #52]	; (5e8c <Reset_Handler+0xf0>)
    5e58:	4798      	blx	r3

        /* Branch to main function */
        main();
    5e5a:	4b0d      	ldr	r3, [pc, #52]	; (5e90 <Reset_Handler+0xf4>)
    5e5c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    5e5e:	e7fe      	b.n	5e5e <Reset_Handler+0xc2>
    5e60:	00009cd4 	.word	0x00009cd4
    5e64:	20000000 	.word	0x20000000
    5e68:	200000fc 	.word	0x200000fc
    5e6c:	200000fc 	.word	0x200000fc
    5e70:	20000378 	.word	0x20000378
    5e74:	00000000 	.word	0x00000000
    5e78:	e000ed00 	.word	0xe000ed00
    5e7c:	41007000 	.word	0x41007000
    5e80:	41005000 	.word	0x41005000
    5e84:	41004800 	.word	0x41004800
    5e88:	41004000 	.word	0x41004000
    5e8c:	0000822d 	.word	0x0000822d
    5e90:	00005f25 	.word	0x00005f25

00005e94 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5e94:	b580      	push	{r7, lr}
    5e96:	b082      	sub	sp, #8
    5e98:	af00      	add	r7, sp, #0
	int32_t phantomISR = 9999;
    5e9a:	4b04      	ldr	r3, [pc, #16]	; (5eac <Dummy_Handler+0x18>)
    5e9c:	607b      	str	r3, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5e9e:	f3ef 8305 	mrs	r3, IPSR
    5ea2:	603b      	str	r3, [r7, #0]
  return(result);
    5ea4:	683b      	ldr	r3, [r7, #0]
        while (1) {
			phantomISR = __get_IPSR();
    5ea6:	607b      	str	r3, [r7, #4]
        }
    5ea8:	e7f9      	b.n	5e9e <Dummy_Handler+0xa>
    5eaa:	46c0      	nop			; (mov r8, r8)
    5eac:	0000270f 	.word	0x0000270f

00005eb0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    5eb0:	b580      	push	{r7, lr}
    5eb2:	b084      	sub	sp, #16
    5eb4:	af00      	add	r7, sp, #0
    5eb6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    5eb8:	4b0a      	ldr	r3, [pc, #40]	; (5ee4 <_sbrk+0x34>)
    5eba:	681b      	ldr	r3, [r3, #0]
    5ebc:	2b00      	cmp	r3, #0
    5ebe:	d102      	bne.n	5ec6 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    5ec0:	4b08      	ldr	r3, [pc, #32]	; (5ee4 <_sbrk+0x34>)
    5ec2:	4a09      	ldr	r2, [pc, #36]	; (5ee8 <_sbrk+0x38>)
    5ec4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    5ec6:	4b07      	ldr	r3, [pc, #28]	; (5ee4 <_sbrk+0x34>)
    5ec8:	681b      	ldr	r3, [r3, #0]
    5eca:	60fb      	str	r3, [r7, #12]

	heap += incr;
    5ecc:	4b05      	ldr	r3, [pc, #20]	; (5ee4 <_sbrk+0x34>)
    5ece:	681a      	ldr	r2, [r3, #0]
    5ed0:	687b      	ldr	r3, [r7, #4]
    5ed2:	18d2      	adds	r2, r2, r3
    5ed4:	4b03      	ldr	r3, [pc, #12]	; (5ee4 <_sbrk+0x34>)
    5ed6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    5ed8:	68fb      	ldr	r3, [r7, #12]
}
    5eda:	0018      	movs	r0, r3
    5edc:	46bd      	mov	sp, r7
    5ede:	b004      	add	sp, #16
    5ee0:	bd80      	pop	{r7, pc}
    5ee2:	46c0      	nop			; (mov r8, r8)
    5ee4:	20000144 	.word	0x20000144
    5ee8:	20002378 	.word	0x20002378

00005eec <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    5eec:	b580      	push	{r7, lr}
    5eee:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    5ef0:	4b04      	ldr	r3, [pc, #16]	; (5f04 <system_interrupt_enable_global+0x18>)
    5ef2:	2201      	movs	r2, #1
    5ef4:	701a      	strb	r2, [r3, #0]
    5ef6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    5efa:	b662      	cpsie	i
}
    5efc:	46c0      	nop			; (mov r8, r8)
    5efe:	46bd      	mov	sp, r7
    5f00:	bd80      	pop	{r7, pc}
    5f02:	46c0      	nop			; (mov r8, r8)
    5f04:	20000091 	.word	0x20000091

00005f08 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    5f08:	b580      	push	{r7, lr}
    5f0a:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5f0c:	b672      	cpsid	i
    5f0e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5f12:	4b03      	ldr	r3, [pc, #12]	; (5f20 <system_interrupt_disable_global+0x18>)
    5f14:	2200      	movs	r2, #0
    5f16:	701a      	strb	r2, [r3, #0]
}
    5f18:	46c0      	nop			; (mov r8, r8)
    5f1a:	46bd      	mov	sp, r7
    5f1c:	bd80      	pop	{r7, pc}
    5f1e:	46c0      	nop			; (mov r8, r8)
    5f20:	20000091 	.word	0x20000091

00005f24 <main>:
char buffer[32];



int main (void)
{
    5f24:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f26:	b08f      	sub	sp, #60	; 0x3c
    5f28:	af00      	add	r7, sp, #0
	
	system_init();
    5f2a:	4b57      	ldr	r3, [pc, #348]	; (6088 <main+0x164>)
    5f2c:	4798      	blx	r3
	delay_init();
    5f2e:	4b57      	ldr	r3, [pc, #348]	; (608c <main+0x168>)
    5f30:	4798      	blx	r3
	ble_uart_init();
    5f32:	4b57      	ldr	r3, [pc, #348]	; (6090 <main+0x16c>)
    5f34:	4798      	blx	r3
	uart_init();
    5f36:	4b57      	ldr	r3, [pc, #348]	; (6094 <main+0x170>)
    5f38:	4798      	blx	r3
	sprintf(buffer,"\n<-------------------->\n");
    5f3a:	4a57      	ldr	r2, [pc, #348]	; (6098 <main+0x174>)
    5f3c:	4b57      	ldr	r3, [pc, #348]	; (609c <main+0x178>)
    5f3e:	0010      	movs	r0, r2
    5f40:	0019      	movs	r1, r3
    5f42:	2319      	movs	r3, #25
    5f44:	001a      	movs	r2, r3
    5f46:	4b56      	ldr	r3, [pc, #344]	; (60a0 <main+0x17c>)
    5f48:	4798      	blx	r3
	ble_uart_write(buffer);
    5f4a:	4b53      	ldr	r3, [pc, #332]	; (6098 <main+0x174>)
    5f4c:	0018      	movs	r0, r3
    5f4e:	4b55      	ldr	r3, [pc, #340]	; (60a4 <main+0x180>)
    5f50:	4798      	blx	r3
	uart_write(buffer);
    5f52:	4b51      	ldr	r3, [pc, #324]	; (6098 <main+0x174>)
    5f54:	0018      	movs	r0, r3
    5f56:	4b54      	ldr	r3, [pc, #336]	; (60a8 <main+0x184>)
    5f58:	4798      	blx	r3
	delay_ms(2000);
    5f5a:	2000      	movs	r0, #0
    5f5c:	4b53      	ldr	r3, [pc, #332]	; (60ac <main+0x188>)
    5f5e:	4798      	blx	r3
    5f60:	0003      	movs	r3, r0
    5f62:	001d      	movs	r5, r3
    5f64:	2300      	movs	r3, #0
    5f66:	001e      	movs	r6, r3
    5f68:	4c51      	ldr	r4, [pc, #324]	; (60b0 <main+0x18c>)
    5f6a:	22fa      	movs	r2, #250	; 0xfa
    5f6c:	00d2      	lsls	r2, r2, #3
    5f6e:	2300      	movs	r3, #0
    5f70:	0028      	movs	r0, r5
    5f72:	0031      	movs	r1, r6
    5f74:	47a0      	blx	r4
    5f76:	0003      	movs	r3, r0
    5f78:	000c      	movs	r4, r1
    5f7a:	0019      	movs	r1, r3
    5f7c:	0022      	movs	r2, r4
    5f7e:	4b4d      	ldr	r3, [pc, #308]	; (60b4 <main+0x190>)
    5f80:	2400      	movs	r4, #0
    5f82:	18c9      	adds	r1, r1, r3
    5f84:	4162      	adcs	r2, r4
    5f86:	0008      	movs	r0, r1
    5f88:	0011      	movs	r1, r2
    5f8a:	4c4b      	ldr	r4, [pc, #300]	; (60b8 <main+0x194>)
    5f8c:	4a4b      	ldr	r2, [pc, #300]	; (60bc <main+0x198>)
    5f8e:	2300      	movs	r3, #0
    5f90:	47a0      	blx	r4
    5f92:	0003      	movs	r3, r0
    5f94:	000c      	movs	r4, r1
    5f96:	0018      	movs	r0, r3
    5f98:	4b49      	ldr	r3, [pc, #292]	; (60c0 <main+0x19c>)
    5f9a:	4798      	blx	r3
	sprintf(buffer,"Master Board Started\n");
    5f9c:	4a3e      	ldr	r2, [pc, #248]	; (6098 <main+0x174>)
    5f9e:	4b49      	ldr	r3, [pc, #292]	; (60c4 <main+0x1a0>)
    5fa0:	0010      	movs	r0, r2
    5fa2:	0019      	movs	r1, r3
    5fa4:	2316      	movs	r3, #22
    5fa6:	001a      	movs	r2, r3
    5fa8:	4b3d      	ldr	r3, [pc, #244]	; (60a0 <main+0x17c>)
    5faa:	4798      	blx	r3
	ble_uart_write(buffer);
    5fac:	4b3a      	ldr	r3, [pc, #232]	; (6098 <main+0x174>)
    5fae:	0018      	movs	r0, r3
    5fb0:	4b3c      	ldr	r3, [pc, #240]	; (60a4 <main+0x180>)
    5fb2:	4798      	blx	r3
	uart_write(buffer);
    5fb4:	4b38      	ldr	r3, [pc, #224]	; (6098 <main+0x174>)
    5fb6:	0018      	movs	r0, r3
    5fb8:	4b3b      	ldr	r3, [pc, #236]	; (60a8 <main+0x184>)
    5fba:	4798      	blx	r3
	sprintf(buffer,"SOFTWARE_VERSION: %d\r\n", SOFTWARE_VERSION);
    5fbc:	4942      	ldr	r1, [pc, #264]	; (60c8 <main+0x1a4>)
    5fbe:	4b36      	ldr	r3, [pc, #216]	; (6098 <main+0x174>)
    5fc0:	222a      	movs	r2, #42	; 0x2a
    5fc2:	0018      	movs	r0, r3
    5fc4:	4b41      	ldr	r3, [pc, #260]	; (60cc <main+0x1a8>)
    5fc6:	4798      	blx	r3
	ble_uart_write(buffer);
    5fc8:	4b33      	ldr	r3, [pc, #204]	; (6098 <main+0x174>)
    5fca:	0018      	movs	r0, r3
    5fcc:	4b35      	ldr	r3, [pc, #212]	; (60a4 <main+0x180>)
    5fce:	4798      	blx	r3
	uart_write(buffer);
    5fd0:	4b31      	ldr	r3, [pc, #196]	; (6098 <main+0x174>)
    5fd2:	0018      	movs	r0, r3
    5fd4:	4b34      	ldr	r3, [pc, #208]	; (60a8 <main+0x184>)
    5fd6:	4798      	blx	r3
	sprintf(buffer,"<-------------------->\n\n");
    5fd8:	4a2f      	ldr	r2, [pc, #188]	; (6098 <main+0x174>)
    5fda:	4b3d      	ldr	r3, [pc, #244]	; (60d0 <main+0x1ac>)
    5fdc:	0010      	movs	r0, r2
    5fde:	0019      	movs	r1, r3
    5fe0:	2319      	movs	r3, #25
    5fe2:	001a      	movs	r2, r3
    5fe4:	4b2e      	ldr	r3, [pc, #184]	; (60a0 <main+0x17c>)
    5fe6:	4798      	blx	r3
	ble_uart_write(buffer);
    5fe8:	4b2b      	ldr	r3, [pc, #172]	; (6098 <main+0x174>)
    5fea:	0018      	movs	r0, r3
    5fec:	4b2d      	ldr	r3, [pc, #180]	; (60a4 <main+0x180>)
    5fee:	4798      	blx	r3
	uart_write(buffer);
    5ff0:	4b29      	ldr	r3, [pc, #164]	; (6098 <main+0x174>)
    5ff2:	0018      	movs	r0, r3
    5ff4:	4b2c      	ldr	r3, [pc, #176]	; (60a8 <main+0x184>)
    5ff6:	4798      	blx	r3
	mcp23017_pin_init();
    5ff8:	4b36      	ldr	r3, [pc, #216]	; (60d4 <main+0x1b0>)
    5ffa:	4798      	blx	r3
	
	configure_i2c_master();
    5ffc:	4b36      	ldr	r3, [pc, #216]	; (60d8 <main+0x1b4>)
    5ffe:	4798      	blx	r3
	
	uint8_t states = init_all_ports();
    6000:	2333      	movs	r3, #51	; 0x33
    6002:	18fc      	adds	r4, r7, r3
    6004:	4b35      	ldr	r3, [pc, #212]	; (60dc <main+0x1b8>)
    6006:	4798      	blx	r3
    6008:	0003      	movs	r3, r0
    600a:	7023      	strb	r3, [r4, #0]
	
	//ble_uart_write(buffer);
	

	
	sounds_init_pins();
    600c:	4b34      	ldr	r3, [pc, #208]	; (60e0 <main+0x1bc>)
    600e:	4798      	blx	r3
	
	//sounds_reset();
	
	pwm_port();
    6010:	4b34      	ldr	r3, [pc, #208]	; (60e4 <main+0x1c0>)
    6012:	4798      	blx	r3
	init_TC3();
    6014:	4b34      	ldr	r3, [pc, #208]	; (60e8 <main+0x1c4>)
    6016:	4798      	blx	r3
	
	msgeq7_init();
    6018:	4b34      	ldr	r3, [pc, #208]	; (60ec <main+0x1c8>)
    601a:	4798      	blx	r3
	//select_sample();
	
	//party = true;
	
	party_thresholds[0] = 1375;
    601c:	4a34      	ldr	r2, [pc, #208]	; (60f0 <main+0x1cc>)
    601e:	4b35      	ldr	r3, [pc, #212]	; (60f4 <main+0x1d0>)
    6020:	8013      	strh	r3, [r2, #0]
	party_thresholds[1] = 1550;
    6022:	4a33      	ldr	r2, [pc, #204]	; (60f0 <main+0x1cc>)
    6024:	4b34      	ldr	r3, [pc, #208]	; (60f8 <main+0x1d4>)
    6026:	8053      	strh	r3, [r2, #2]
	party_thresholds[2] = 1400;
    6028:	4a31      	ldr	r2, [pc, #196]	; (60f0 <main+0x1cc>)
    602a:	23af      	movs	r3, #175	; 0xaf
    602c:	00db      	lsls	r3, r3, #3
    602e:	8093      	strh	r3, [r2, #4]
	party_thresholds[3] = 2500;
    6030:	4a2f      	ldr	r2, [pc, #188]	; (60f0 <main+0x1cc>)
    6032:	4b32      	ldr	r3, [pc, #200]	; (60fc <main+0x1d8>)
    6034:	80d3      	strh	r3, [r2, #6]
	party_thresholds[4] = 3000;
    6036:	4a2e      	ldr	r2, [pc, #184]	; (60f0 <main+0x1cc>)
    6038:	4b31      	ldr	r3, [pc, #196]	; (6100 <main+0x1dc>)
    603a:	8113      	strh	r3, [r2, #8]
	party_thresholds[5] = 2000;
    603c:	4a2c      	ldr	r2, [pc, #176]	; (60f0 <main+0x1cc>)
    603e:	23fa      	movs	r3, #250	; 0xfa
    6040:	00db      	lsls	r3, r3, #3
    6042:	8153      	strh	r3, [r2, #10]
	party_thresholds[6] = 2375;
    6044:	4a2a      	ldr	r2, [pc, #168]	; (60f0 <main+0x1cc>)
    6046:	4b2f      	ldr	r3, [pc, #188]	; (6104 <main+0x1e0>)
    6048:	8193      	strh	r3, [r2, #12]
	 
	
	while (1)
	{
		for (int i=0;i<sizeof(rx_buffer_array);i++)
    604a:	2300      	movs	r3, #0
    604c:	637b      	str	r3, [r7, #52]	; 0x34
    604e:	e017      	b.n	6080 <main+0x15c>
		{
			if (rx_buffer_array[i] == '\n')
    6050:	4a2d      	ldr	r2, [pc, #180]	; (6108 <main+0x1e4>)
    6052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6054:	18d3      	adds	r3, r2, r3
    6056:	781b      	ldrb	r3, [r3, #0]
    6058:	b2db      	uxtb	r3, r3
    605a:	2b0a      	cmp	r3, #10
    605c:	d106      	bne.n	606c <main+0x148>
			{
				data_handler(rx_buffer_array);
    605e:	4b2a      	ldr	r3, [pc, #168]	; (6108 <main+0x1e4>)
    6060:	0018      	movs	r0, r3
    6062:	4b2a      	ldr	r3, [pc, #168]	; (610c <main+0x1e8>)
    6064:	4798      	blx	r3
				reset_buffers();
    6066:	4b2a      	ldr	r3, [pc, #168]	; (6110 <main+0x1ec>)
    6068:	4798      	blx	r3
    606a:	e006      	b.n	607a <main+0x156>
			}
			else if (rx_buffer_array[i] == 0)
    606c:	4a26      	ldr	r2, [pc, #152]	; (6108 <main+0x1e4>)
    606e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6070:	18d3      	adds	r3, r2, r3
    6072:	781b      	ldrb	r3, [r3, #0]
    6074:	b2db      	uxtb	r3, r3
    6076:	2b00      	cmp	r3, #0
    6078:	d04c      	beq.n	6114 <main+0x1f0>
	party_thresholds[6] = 2375;
	 
	
	while (1)
	{
		for (int i=0;i<sizeof(rx_buffer_array);i++)
    607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    607c:	3301      	adds	r3, #1
    607e:	637b      	str	r3, [r7, #52]	; 0x34
    6080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6082:	2b7f      	cmp	r3, #127	; 0x7f
    6084:	d9e4      	bls.n	6050 <main+0x12c>
    6086:	e046      	b.n	6116 <main+0x1f2>
    6088:	00005d69 	.word	0x00005d69
    608c:	00000181 	.word	0x00000181
    6090:	00001fa5 	.word	0x00001fa5
    6094:	00004f3d 	.word	0x00004f3d
    6098:	20000328 	.word	0x20000328
    609c:	00009a04 	.word	0x00009a04
    60a0:	00008279 	.word	0x00008279
    60a4:	0000202d 	.word	0x0000202d
    60a8:	00005095 	.word	0x00005095
    60ac:	00005909 	.word	0x00005909
    60b0:	00006705 	.word	0x00006705
    60b4:	00001b57 	.word	0x00001b57
    60b8:	000066c5 	.word	0x000066c5
    60bc:	00001b58 	.word	0x00001b58
    60c0:	20000001 	.word	0x20000001
    60c4:	00009a20 	.word	0x00009a20
    60c8:	00009a38 	.word	0x00009a38
    60cc:	0000828d 	.word	0x0000828d
    60d0:	00009a50 	.word	0x00009a50
    60d4:	000041dd 	.word	0x000041dd
    60d8:	00003cbd 	.word	0x00003cbd
    60dc:	00003fbd 	.word	0x00003fbd
    60e0:	00004ba1 	.word	0x00004ba1
    60e4:	000048ad 	.word	0x000048ad
    60e8:	000048ed 	.word	0x000048ed
    60ec:	00004501 	.word	0x00004501
    60f0:	200001b4 	.word	0x200001b4
    60f4:	0000055f 	.word	0x0000055f
    60f8:	0000060e 	.word	0x0000060e
    60fc:	000009c4 	.word	0x000009c4
    6100:	00000bb8 	.word	0x00000bb8
    6104:	00000947 	.word	0x00000947
    6108:	200001c4 	.word	0x200001c4
    610c:	00002119 	.word	0x00002119
    6110:	000020e1 	.word	0x000020e1
				data_handler(rx_buffer_array);
				reset_buffers();
			}
			else if (rx_buffer_array[i] == 0)
			{
				break;
    6114:	46c0      	nop			; (mov r8, r8)
			}
		}
		
		if (should_update)
    6116:	4ba0      	ldr	r3, [pc, #640]	; (6398 <main+0x474>)
    6118:	781b      	ldrb	r3, [r3, #0]
    611a:	2b00      	cmp	r3, #0
    611c:	d006      	beq.n	612c <main+0x208>
		{
			should_update = false;
    611e:	4a9e      	ldr	r2, [pc, #632]	; (6398 <main+0x474>)
    6120:	2300      	movs	r3, #0
    6122:	7013      	strb	r3, [r2, #0]
			things_to_do();
    6124:	4b9d      	ldr	r3, [pc, #628]	; (639c <main+0x478>)
    6126:	4798      	blx	r3
			update_all_ports();
    6128:	4b9d      	ldr	r3, [pc, #628]	; (63a0 <main+0x47c>)
    612a:	4798      	blx	r3
		}
		if (execute_order_66)
    612c:	4b9d      	ldr	r3, [pc, #628]	; (63a4 <main+0x480>)
    612e:	781b      	ldrb	r3, [r3, #0]
    6130:	2b00      	cmp	r3, #0
    6132:	d004      	beq.n	613e <main+0x21a>
		{
			execute_order_66 = false;
    6134:	4a9b      	ldr	r2, [pc, #620]	; (63a4 <main+0x480>)
    6136:	2300      	movs	r3, #0
    6138:	7013      	strb	r3, [r2, #0]
			a_okay();
    613a:	4b9b      	ldr	r3, [pc, #620]	; (63a8 <main+0x484>)
    613c:	4798      	blx	r3
		}
		
		if (valve_open)
    613e:	4b9b      	ldr	r3, [pc, #620]	; (63ac <main+0x488>)
    6140:	781b      	ldrb	r3, [r3, #0]
    6142:	b2db      	uxtb	r3, r3
    6144:	2b00      	cmp	r3, #0
    6146:	d100      	bne.n	614a <main+0x226>
    6148:	e08f      	b.n	626a <main+0x346>
		{
			system_interrupt_disable_global();
    614a:	4b99      	ldr	r3, [pc, #612]	; (63b0 <main+0x48c>)
    614c:	4798      	blx	r3
			valve_open = false;
    614e:	4a97      	ldr	r2, [pc, #604]	; (63ac <main+0x488>)
    6150:	2300      	movs	r3, #0
    6152:	7013      	strb	r3, [r2, #0]
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,true);
    6154:	2301      	movs	r3, #1
    6156:	2200      	movs	r2, #0
    6158:	2105      	movs	r1, #5
    615a:	2000      	movs	r0, #0
    615c:	4c95      	ldr	r4, [pc, #596]	; (63b4 <main+0x490>)
    615e:	47a0      	blx	r4
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    6160:	2300      	movs	r3, #0
    6162:	2201      	movs	r2, #1
    6164:	2105      	movs	r1, #5
    6166:	2000      	movs	r0, #0
    6168:	4c92      	ldr	r4, [pc, #584]	; (63b4 <main+0x490>)
    616a:	47a0      	blx	r4
			update_all_ports();
    616c:	4b8c      	ldr	r3, [pc, #560]	; (63a0 <main+0x47c>)
    616e:	4798      	blx	r3
			delay_ms(300);
    6170:	2000      	movs	r0, #0
    6172:	4b91      	ldr	r3, [pc, #580]	; (63b8 <main+0x494>)
    6174:	4798      	blx	r3
    6176:	0003      	movs	r3, r0
    6178:	62bb      	str	r3, [r7, #40]	; 0x28
    617a:	2300      	movs	r3, #0
    617c:	62fb      	str	r3, [r7, #44]	; 0x2c
    617e:	4c8f      	ldr	r4, [pc, #572]	; (63bc <main+0x498>)
    6180:	2296      	movs	r2, #150	; 0x96
    6182:	0052      	lsls	r2, r2, #1
    6184:	2300      	movs	r3, #0
    6186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    6188:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    618a:	47a0      	blx	r4
    618c:	0003      	movs	r3, r0
    618e:	000c      	movs	r4, r1
    6190:	0019      	movs	r1, r3
    6192:	0022      	movs	r2, r4
    6194:	4b8a      	ldr	r3, [pc, #552]	; (63c0 <main+0x49c>)
    6196:	2400      	movs	r4, #0
    6198:	18c9      	adds	r1, r1, r3
    619a:	4162      	adcs	r2, r4
    619c:	0008      	movs	r0, r1
    619e:	0011      	movs	r1, r2
    61a0:	4c88      	ldr	r4, [pc, #544]	; (63c4 <main+0x4a0>)
    61a2:	4a89      	ldr	r2, [pc, #548]	; (63c8 <main+0x4a4>)
    61a4:	2300      	movs	r3, #0
    61a6:	47a0      	blx	r4
    61a8:	0003      	movs	r3, r0
    61aa:	000c      	movs	r4, r1
    61ac:	0018      	movs	r0, r3
    61ae:	4b87      	ldr	r3, [pc, #540]	; (63cc <main+0x4a8>)
    61b0:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    61b2:	2300      	movs	r3, #0
    61b4:	2200      	movs	r2, #0
    61b6:	2105      	movs	r1, #5
    61b8:	2000      	movs	r0, #0
    61ba:	4c7e      	ldr	r4, [pc, #504]	; (63b4 <main+0x490>)
    61bc:	47a0      	blx	r4
			update_all_ports();
    61be:	4b78      	ldr	r3, [pc, #480]	; (63a0 <main+0x47c>)
    61c0:	4798      	blx	r3
			delay_ms(4000);
    61c2:	2000      	movs	r0, #0
    61c4:	4b7c      	ldr	r3, [pc, #496]	; (63b8 <main+0x494>)
    61c6:	4798      	blx	r3
    61c8:	0003      	movs	r3, r0
    61ca:	623b      	str	r3, [r7, #32]
    61cc:	2300      	movs	r3, #0
    61ce:	627b      	str	r3, [r7, #36]	; 0x24
    61d0:	4c7a      	ldr	r4, [pc, #488]	; (63bc <main+0x498>)
    61d2:	22fa      	movs	r2, #250	; 0xfa
    61d4:	0112      	lsls	r2, r2, #4
    61d6:	2300      	movs	r3, #0
    61d8:	6a38      	ldr	r0, [r7, #32]
    61da:	6a79      	ldr	r1, [r7, #36]	; 0x24
    61dc:	47a0      	blx	r4
    61de:	0003      	movs	r3, r0
    61e0:	000c      	movs	r4, r1
    61e2:	0019      	movs	r1, r3
    61e4:	0022      	movs	r2, r4
    61e6:	4b76      	ldr	r3, [pc, #472]	; (63c0 <main+0x49c>)
    61e8:	2400      	movs	r4, #0
    61ea:	18c9      	adds	r1, r1, r3
    61ec:	4162      	adcs	r2, r4
    61ee:	0008      	movs	r0, r1
    61f0:	0011      	movs	r1, r2
    61f2:	4c74      	ldr	r4, [pc, #464]	; (63c4 <main+0x4a0>)
    61f4:	4a74      	ldr	r2, [pc, #464]	; (63c8 <main+0x4a4>)
    61f6:	2300      	movs	r3, #0
    61f8:	47a0      	blx	r4
    61fa:	0003      	movs	r3, r0
    61fc:	000c      	movs	r4, r1
    61fe:	0018      	movs	r0, r3
    6200:	4b72      	ldr	r3, [pc, #456]	; (63cc <main+0x4a8>)
    6202:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,true);
    6204:	2301      	movs	r3, #1
    6206:	2200      	movs	r2, #0
    6208:	2105      	movs	r1, #5
    620a:	2000      	movs	r0, #0
    620c:	4c69      	ldr	r4, [pc, #420]	; (63b4 <main+0x490>)
    620e:	47a0      	blx	r4
			update_all_ports();
    6210:	4b63      	ldr	r3, [pc, #396]	; (63a0 <main+0x47c>)
    6212:	4798      	blx	r3
			delay_ms(300);
    6214:	2000      	movs	r0, #0
    6216:	4b68      	ldr	r3, [pc, #416]	; (63b8 <main+0x494>)
    6218:	4798      	blx	r3
    621a:	0003      	movs	r3, r0
    621c:	61bb      	str	r3, [r7, #24]
    621e:	2300      	movs	r3, #0
    6220:	61fb      	str	r3, [r7, #28]
    6222:	4c66      	ldr	r4, [pc, #408]	; (63bc <main+0x498>)
    6224:	2296      	movs	r2, #150	; 0x96
    6226:	0052      	lsls	r2, r2, #1
    6228:	2300      	movs	r3, #0
    622a:	69b8      	ldr	r0, [r7, #24]
    622c:	69f9      	ldr	r1, [r7, #28]
    622e:	47a0      	blx	r4
    6230:	0003      	movs	r3, r0
    6232:	000c      	movs	r4, r1
    6234:	0019      	movs	r1, r3
    6236:	0022      	movs	r2, r4
    6238:	4b61      	ldr	r3, [pc, #388]	; (63c0 <main+0x49c>)
    623a:	2400      	movs	r4, #0
    623c:	18c9      	adds	r1, r1, r3
    623e:	4162      	adcs	r2, r4
    6240:	0008      	movs	r0, r1
    6242:	0011      	movs	r1, r2
    6244:	4c5f      	ldr	r4, [pc, #380]	; (63c4 <main+0x4a0>)
    6246:	4a60      	ldr	r2, [pc, #384]	; (63c8 <main+0x4a4>)
    6248:	2300      	movs	r3, #0
    624a:	47a0      	blx	r4
    624c:	0003      	movs	r3, r0
    624e:	000c      	movs	r4, r1
    6250:	0018      	movs	r0, r3
    6252:	4b5e      	ldr	r3, [pc, #376]	; (63cc <main+0x4a8>)
    6254:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    6256:	2300      	movs	r3, #0
    6258:	2200      	movs	r2, #0
    625a:	2105      	movs	r1, #5
    625c:	2000      	movs	r0, #0
    625e:	4c55      	ldr	r4, [pc, #340]	; (63b4 <main+0x490>)
    6260:	47a0      	blx	r4
			update_all_ports();
    6262:	4b4f      	ldr	r3, [pc, #316]	; (63a0 <main+0x47c>)
    6264:	4798      	blx	r3
			system_interrupt_enable_global();
    6266:	4b5a      	ldr	r3, [pc, #360]	; (63d0 <main+0x4ac>)
    6268:	4798      	blx	r3
		}
		if (valve_close)
    626a:	4b5a      	ldr	r3, [pc, #360]	; (63d4 <main+0x4b0>)
    626c:	781b      	ldrb	r3, [r3, #0]
    626e:	b2db      	uxtb	r3, r3
    6270:	2b00      	cmp	r3, #0
    6272:	d100      	bne.n	6276 <main+0x352>
    6274:	e6e9      	b.n	604a <main+0x126>
		{
			system_interrupt_disable_global();
    6276:	4b4e      	ldr	r3, [pc, #312]	; (63b0 <main+0x48c>)
    6278:	4798      	blx	r3
			valve_close = false;
    627a:	4a56      	ldr	r2, [pc, #344]	; (63d4 <main+0x4b0>)
    627c:	2300      	movs	r3, #0
    627e:	7013      	strb	r3, [r2, #0]
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    6280:	2300      	movs	r3, #0
    6282:	2200      	movs	r2, #0
    6284:	2105      	movs	r1, #5
    6286:	2000      	movs	r0, #0
    6288:	4c4a      	ldr	r4, [pc, #296]	; (63b4 <main+0x490>)
    628a:	47a0      	blx	r4
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,true);
    628c:	2301      	movs	r3, #1
    628e:	2201      	movs	r2, #1
    6290:	2105      	movs	r1, #5
    6292:	2000      	movs	r0, #0
    6294:	4c47      	ldr	r4, [pc, #284]	; (63b4 <main+0x490>)
    6296:	47a0      	blx	r4
			update_all_ports();
    6298:	4b41      	ldr	r3, [pc, #260]	; (63a0 <main+0x47c>)
    629a:	4798      	blx	r3
			delay_ms(300);
    629c:	2000      	movs	r0, #0
    629e:	4b46      	ldr	r3, [pc, #280]	; (63b8 <main+0x494>)
    62a0:	4798      	blx	r3
    62a2:	0003      	movs	r3, r0
    62a4:	613b      	str	r3, [r7, #16]
    62a6:	2300      	movs	r3, #0
    62a8:	617b      	str	r3, [r7, #20]
    62aa:	4c44      	ldr	r4, [pc, #272]	; (63bc <main+0x498>)
    62ac:	2296      	movs	r2, #150	; 0x96
    62ae:	0052      	lsls	r2, r2, #1
    62b0:	2300      	movs	r3, #0
    62b2:	6938      	ldr	r0, [r7, #16]
    62b4:	6979      	ldr	r1, [r7, #20]
    62b6:	47a0      	blx	r4
    62b8:	0003      	movs	r3, r0
    62ba:	000c      	movs	r4, r1
    62bc:	0019      	movs	r1, r3
    62be:	0022      	movs	r2, r4
    62c0:	4b3f      	ldr	r3, [pc, #252]	; (63c0 <main+0x49c>)
    62c2:	2400      	movs	r4, #0
    62c4:	18c9      	adds	r1, r1, r3
    62c6:	4162      	adcs	r2, r4
    62c8:	0008      	movs	r0, r1
    62ca:	0011      	movs	r1, r2
    62cc:	4c3d      	ldr	r4, [pc, #244]	; (63c4 <main+0x4a0>)
    62ce:	4a3e      	ldr	r2, [pc, #248]	; (63c8 <main+0x4a4>)
    62d0:	2300      	movs	r3, #0
    62d2:	47a0      	blx	r4
    62d4:	0003      	movs	r3, r0
    62d6:	000c      	movs	r4, r1
    62d8:	0018      	movs	r0, r3
    62da:	4b3c      	ldr	r3, [pc, #240]	; (63cc <main+0x4a8>)
    62dc:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    62de:	2300      	movs	r3, #0
    62e0:	2201      	movs	r2, #1
    62e2:	2105      	movs	r1, #5
    62e4:	2000      	movs	r0, #0
    62e6:	4c33      	ldr	r4, [pc, #204]	; (63b4 <main+0x490>)
    62e8:	47a0      	blx	r4
			update_all_ports();
    62ea:	4b2d      	ldr	r3, [pc, #180]	; (63a0 <main+0x47c>)
    62ec:	4798      	blx	r3
			delay_ms(4000);
    62ee:	2000      	movs	r0, #0
    62f0:	4b31      	ldr	r3, [pc, #196]	; (63b8 <main+0x494>)
    62f2:	4798      	blx	r3
    62f4:	0003      	movs	r3, r0
    62f6:	60bb      	str	r3, [r7, #8]
    62f8:	2300      	movs	r3, #0
    62fa:	60fb      	str	r3, [r7, #12]
    62fc:	4c2f      	ldr	r4, [pc, #188]	; (63bc <main+0x498>)
    62fe:	22fa      	movs	r2, #250	; 0xfa
    6300:	0112      	lsls	r2, r2, #4
    6302:	2300      	movs	r3, #0
    6304:	68b8      	ldr	r0, [r7, #8]
    6306:	68f9      	ldr	r1, [r7, #12]
    6308:	47a0      	blx	r4
    630a:	0003      	movs	r3, r0
    630c:	000c      	movs	r4, r1
    630e:	0019      	movs	r1, r3
    6310:	0022      	movs	r2, r4
    6312:	4b2b      	ldr	r3, [pc, #172]	; (63c0 <main+0x49c>)
    6314:	2400      	movs	r4, #0
    6316:	18c9      	adds	r1, r1, r3
    6318:	4162      	adcs	r2, r4
    631a:	0008      	movs	r0, r1
    631c:	0011      	movs	r1, r2
    631e:	4c29      	ldr	r4, [pc, #164]	; (63c4 <main+0x4a0>)
    6320:	4a29      	ldr	r2, [pc, #164]	; (63c8 <main+0x4a4>)
    6322:	2300      	movs	r3, #0
    6324:	47a0      	blx	r4
    6326:	0003      	movs	r3, r0
    6328:	000c      	movs	r4, r1
    632a:	0018      	movs	r0, r3
    632c:	4b27      	ldr	r3, [pc, #156]	; (63cc <main+0x4a8>)
    632e:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,true);
    6330:	2301      	movs	r3, #1
    6332:	2201      	movs	r2, #1
    6334:	2105      	movs	r1, #5
    6336:	2000      	movs	r0, #0
    6338:	4c1e      	ldr	r4, [pc, #120]	; (63b4 <main+0x490>)
    633a:	47a0      	blx	r4
			update_all_ports();
    633c:	4b18      	ldr	r3, [pc, #96]	; (63a0 <main+0x47c>)
    633e:	4798      	blx	r3
			delay_ms(300);
    6340:	2000      	movs	r0, #0
    6342:	4b1d      	ldr	r3, [pc, #116]	; (63b8 <main+0x494>)
    6344:	4798      	blx	r3
    6346:	0003      	movs	r3, r0
    6348:	603b      	str	r3, [r7, #0]
    634a:	2300      	movs	r3, #0
    634c:	607b      	str	r3, [r7, #4]
    634e:	4c1b      	ldr	r4, [pc, #108]	; (63bc <main+0x498>)
    6350:	2296      	movs	r2, #150	; 0x96
    6352:	0052      	lsls	r2, r2, #1
    6354:	2300      	movs	r3, #0
    6356:	6838      	ldr	r0, [r7, #0]
    6358:	6879      	ldr	r1, [r7, #4]
    635a:	47a0      	blx	r4
    635c:	0003      	movs	r3, r0
    635e:	000c      	movs	r4, r1
    6360:	0019      	movs	r1, r3
    6362:	0022      	movs	r2, r4
    6364:	4b16      	ldr	r3, [pc, #88]	; (63c0 <main+0x49c>)
    6366:	2400      	movs	r4, #0
    6368:	18c9      	adds	r1, r1, r3
    636a:	4162      	adcs	r2, r4
    636c:	0008      	movs	r0, r1
    636e:	0011      	movs	r1, r2
    6370:	4c14      	ldr	r4, [pc, #80]	; (63c4 <main+0x4a0>)
    6372:	4a15      	ldr	r2, [pc, #84]	; (63c8 <main+0x4a4>)
    6374:	2300      	movs	r3, #0
    6376:	47a0      	blx	r4
    6378:	0003      	movs	r3, r0
    637a:	000c      	movs	r4, r1
    637c:	0018      	movs	r0, r3
    637e:	4b13      	ldr	r3, [pc, #76]	; (63cc <main+0x4a8>)
    6380:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    6382:	2300      	movs	r3, #0
    6384:	2201      	movs	r2, #1
    6386:	2105      	movs	r1, #5
    6388:	2000      	movs	r0, #0
    638a:	4c0a      	ldr	r4, [pc, #40]	; (63b4 <main+0x490>)
    638c:	47a0      	blx	r4
			update_all_ports();
    638e:	4b04      	ldr	r3, [pc, #16]	; (63a0 <main+0x47c>)
    6390:	4798      	blx	r3
			
			system_interrupt_enable_global();
    6392:	4b0f      	ldr	r3, [pc, #60]	; (63d0 <main+0x4ac>)
    6394:	4798      	blx	r3
		

		


	}
    6396:	e658      	b.n	604a <main+0x126>
    6398:	200002e9 	.word	0x200002e9
    639c:	000049c1 	.word	0x000049c1
    63a0:	00002f51 	.word	0x00002f51
    63a4:	200002e8 	.word	0x200002e8
    63a8:	000038a1 	.word	0x000038a1
    63ac:	200001b2 	.word	0x200001b2
    63b0:	00005f09 	.word	0x00005f09
    63b4:	00003ad9 	.word	0x00003ad9
    63b8:	00005909 	.word	0x00005909
    63bc:	00006705 	.word	0x00006705
    63c0:	00001b57 	.word	0x00001b57
    63c4:	000066c5 	.word	0x000066c5
    63c8:	00001b58 	.word	0x00001b58
    63cc:	20000001 	.word	0x20000001
    63d0:	00005eed 	.word	0x00005eed
    63d4:	200001b0 	.word	0x200001b0

000063d8 <__aeabi_uidiv>:
    63d8:	2200      	movs	r2, #0
    63da:	0843      	lsrs	r3, r0, #1
    63dc:	428b      	cmp	r3, r1
    63de:	d374      	bcc.n	64ca <__aeabi_uidiv+0xf2>
    63e0:	0903      	lsrs	r3, r0, #4
    63e2:	428b      	cmp	r3, r1
    63e4:	d35f      	bcc.n	64a6 <__aeabi_uidiv+0xce>
    63e6:	0a03      	lsrs	r3, r0, #8
    63e8:	428b      	cmp	r3, r1
    63ea:	d344      	bcc.n	6476 <__aeabi_uidiv+0x9e>
    63ec:	0b03      	lsrs	r3, r0, #12
    63ee:	428b      	cmp	r3, r1
    63f0:	d328      	bcc.n	6444 <__aeabi_uidiv+0x6c>
    63f2:	0c03      	lsrs	r3, r0, #16
    63f4:	428b      	cmp	r3, r1
    63f6:	d30d      	bcc.n	6414 <__aeabi_uidiv+0x3c>
    63f8:	22ff      	movs	r2, #255	; 0xff
    63fa:	0209      	lsls	r1, r1, #8
    63fc:	ba12      	rev	r2, r2
    63fe:	0c03      	lsrs	r3, r0, #16
    6400:	428b      	cmp	r3, r1
    6402:	d302      	bcc.n	640a <__aeabi_uidiv+0x32>
    6404:	1212      	asrs	r2, r2, #8
    6406:	0209      	lsls	r1, r1, #8
    6408:	d065      	beq.n	64d6 <__aeabi_uidiv+0xfe>
    640a:	0b03      	lsrs	r3, r0, #12
    640c:	428b      	cmp	r3, r1
    640e:	d319      	bcc.n	6444 <__aeabi_uidiv+0x6c>
    6410:	e000      	b.n	6414 <__aeabi_uidiv+0x3c>
    6412:	0a09      	lsrs	r1, r1, #8
    6414:	0bc3      	lsrs	r3, r0, #15
    6416:	428b      	cmp	r3, r1
    6418:	d301      	bcc.n	641e <__aeabi_uidiv+0x46>
    641a:	03cb      	lsls	r3, r1, #15
    641c:	1ac0      	subs	r0, r0, r3
    641e:	4152      	adcs	r2, r2
    6420:	0b83      	lsrs	r3, r0, #14
    6422:	428b      	cmp	r3, r1
    6424:	d301      	bcc.n	642a <__aeabi_uidiv+0x52>
    6426:	038b      	lsls	r3, r1, #14
    6428:	1ac0      	subs	r0, r0, r3
    642a:	4152      	adcs	r2, r2
    642c:	0b43      	lsrs	r3, r0, #13
    642e:	428b      	cmp	r3, r1
    6430:	d301      	bcc.n	6436 <__aeabi_uidiv+0x5e>
    6432:	034b      	lsls	r3, r1, #13
    6434:	1ac0      	subs	r0, r0, r3
    6436:	4152      	adcs	r2, r2
    6438:	0b03      	lsrs	r3, r0, #12
    643a:	428b      	cmp	r3, r1
    643c:	d301      	bcc.n	6442 <__aeabi_uidiv+0x6a>
    643e:	030b      	lsls	r3, r1, #12
    6440:	1ac0      	subs	r0, r0, r3
    6442:	4152      	adcs	r2, r2
    6444:	0ac3      	lsrs	r3, r0, #11
    6446:	428b      	cmp	r3, r1
    6448:	d301      	bcc.n	644e <__aeabi_uidiv+0x76>
    644a:	02cb      	lsls	r3, r1, #11
    644c:	1ac0      	subs	r0, r0, r3
    644e:	4152      	adcs	r2, r2
    6450:	0a83      	lsrs	r3, r0, #10
    6452:	428b      	cmp	r3, r1
    6454:	d301      	bcc.n	645a <__aeabi_uidiv+0x82>
    6456:	028b      	lsls	r3, r1, #10
    6458:	1ac0      	subs	r0, r0, r3
    645a:	4152      	adcs	r2, r2
    645c:	0a43      	lsrs	r3, r0, #9
    645e:	428b      	cmp	r3, r1
    6460:	d301      	bcc.n	6466 <__aeabi_uidiv+0x8e>
    6462:	024b      	lsls	r3, r1, #9
    6464:	1ac0      	subs	r0, r0, r3
    6466:	4152      	adcs	r2, r2
    6468:	0a03      	lsrs	r3, r0, #8
    646a:	428b      	cmp	r3, r1
    646c:	d301      	bcc.n	6472 <__aeabi_uidiv+0x9a>
    646e:	020b      	lsls	r3, r1, #8
    6470:	1ac0      	subs	r0, r0, r3
    6472:	4152      	adcs	r2, r2
    6474:	d2cd      	bcs.n	6412 <__aeabi_uidiv+0x3a>
    6476:	09c3      	lsrs	r3, r0, #7
    6478:	428b      	cmp	r3, r1
    647a:	d301      	bcc.n	6480 <__aeabi_uidiv+0xa8>
    647c:	01cb      	lsls	r3, r1, #7
    647e:	1ac0      	subs	r0, r0, r3
    6480:	4152      	adcs	r2, r2
    6482:	0983      	lsrs	r3, r0, #6
    6484:	428b      	cmp	r3, r1
    6486:	d301      	bcc.n	648c <__aeabi_uidiv+0xb4>
    6488:	018b      	lsls	r3, r1, #6
    648a:	1ac0      	subs	r0, r0, r3
    648c:	4152      	adcs	r2, r2
    648e:	0943      	lsrs	r3, r0, #5
    6490:	428b      	cmp	r3, r1
    6492:	d301      	bcc.n	6498 <__aeabi_uidiv+0xc0>
    6494:	014b      	lsls	r3, r1, #5
    6496:	1ac0      	subs	r0, r0, r3
    6498:	4152      	adcs	r2, r2
    649a:	0903      	lsrs	r3, r0, #4
    649c:	428b      	cmp	r3, r1
    649e:	d301      	bcc.n	64a4 <__aeabi_uidiv+0xcc>
    64a0:	010b      	lsls	r3, r1, #4
    64a2:	1ac0      	subs	r0, r0, r3
    64a4:	4152      	adcs	r2, r2
    64a6:	08c3      	lsrs	r3, r0, #3
    64a8:	428b      	cmp	r3, r1
    64aa:	d301      	bcc.n	64b0 <__aeabi_uidiv+0xd8>
    64ac:	00cb      	lsls	r3, r1, #3
    64ae:	1ac0      	subs	r0, r0, r3
    64b0:	4152      	adcs	r2, r2
    64b2:	0883      	lsrs	r3, r0, #2
    64b4:	428b      	cmp	r3, r1
    64b6:	d301      	bcc.n	64bc <__aeabi_uidiv+0xe4>
    64b8:	008b      	lsls	r3, r1, #2
    64ba:	1ac0      	subs	r0, r0, r3
    64bc:	4152      	adcs	r2, r2
    64be:	0843      	lsrs	r3, r0, #1
    64c0:	428b      	cmp	r3, r1
    64c2:	d301      	bcc.n	64c8 <__aeabi_uidiv+0xf0>
    64c4:	004b      	lsls	r3, r1, #1
    64c6:	1ac0      	subs	r0, r0, r3
    64c8:	4152      	adcs	r2, r2
    64ca:	1a41      	subs	r1, r0, r1
    64cc:	d200      	bcs.n	64d0 <__aeabi_uidiv+0xf8>
    64ce:	4601      	mov	r1, r0
    64d0:	4152      	adcs	r2, r2
    64d2:	4610      	mov	r0, r2
    64d4:	4770      	bx	lr
    64d6:	e7ff      	b.n	64d8 <__aeabi_uidiv+0x100>
    64d8:	b501      	push	{r0, lr}
    64da:	2000      	movs	r0, #0
    64dc:	f000 f8f0 	bl	66c0 <__aeabi_idiv0>
    64e0:	bd02      	pop	{r1, pc}
    64e2:	46c0      	nop			; (mov r8, r8)

000064e4 <__aeabi_uidivmod>:
    64e4:	2900      	cmp	r1, #0
    64e6:	d0f7      	beq.n	64d8 <__aeabi_uidiv+0x100>
    64e8:	e776      	b.n	63d8 <__aeabi_uidiv>
    64ea:	4770      	bx	lr

000064ec <__aeabi_idiv>:
    64ec:	4603      	mov	r3, r0
    64ee:	430b      	orrs	r3, r1
    64f0:	d47f      	bmi.n	65f2 <__aeabi_idiv+0x106>
    64f2:	2200      	movs	r2, #0
    64f4:	0843      	lsrs	r3, r0, #1
    64f6:	428b      	cmp	r3, r1
    64f8:	d374      	bcc.n	65e4 <__aeabi_idiv+0xf8>
    64fa:	0903      	lsrs	r3, r0, #4
    64fc:	428b      	cmp	r3, r1
    64fe:	d35f      	bcc.n	65c0 <__aeabi_idiv+0xd4>
    6500:	0a03      	lsrs	r3, r0, #8
    6502:	428b      	cmp	r3, r1
    6504:	d344      	bcc.n	6590 <__aeabi_idiv+0xa4>
    6506:	0b03      	lsrs	r3, r0, #12
    6508:	428b      	cmp	r3, r1
    650a:	d328      	bcc.n	655e <__aeabi_idiv+0x72>
    650c:	0c03      	lsrs	r3, r0, #16
    650e:	428b      	cmp	r3, r1
    6510:	d30d      	bcc.n	652e <__aeabi_idiv+0x42>
    6512:	22ff      	movs	r2, #255	; 0xff
    6514:	0209      	lsls	r1, r1, #8
    6516:	ba12      	rev	r2, r2
    6518:	0c03      	lsrs	r3, r0, #16
    651a:	428b      	cmp	r3, r1
    651c:	d302      	bcc.n	6524 <__aeabi_idiv+0x38>
    651e:	1212      	asrs	r2, r2, #8
    6520:	0209      	lsls	r1, r1, #8
    6522:	d065      	beq.n	65f0 <__aeabi_idiv+0x104>
    6524:	0b03      	lsrs	r3, r0, #12
    6526:	428b      	cmp	r3, r1
    6528:	d319      	bcc.n	655e <__aeabi_idiv+0x72>
    652a:	e000      	b.n	652e <__aeabi_idiv+0x42>
    652c:	0a09      	lsrs	r1, r1, #8
    652e:	0bc3      	lsrs	r3, r0, #15
    6530:	428b      	cmp	r3, r1
    6532:	d301      	bcc.n	6538 <__aeabi_idiv+0x4c>
    6534:	03cb      	lsls	r3, r1, #15
    6536:	1ac0      	subs	r0, r0, r3
    6538:	4152      	adcs	r2, r2
    653a:	0b83      	lsrs	r3, r0, #14
    653c:	428b      	cmp	r3, r1
    653e:	d301      	bcc.n	6544 <__aeabi_idiv+0x58>
    6540:	038b      	lsls	r3, r1, #14
    6542:	1ac0      	subs	r0, r0, r3
    6544:	4152      	adcs	r2, r2
    6546:	0b43      	lsrs	r3, r0, #13
    6548:	428b      	cmp	r3, r1
    654a:	d301      	bcc.n	6550 <__aeabi_idiv+0x64>
    654c:	034b      	lsls	r3, r1, #13
    654e:	1ac0      	subs	r0, r0, r3
    6550:	4152      	adcs	r2, r2
    6552:	0b03      	lsrs	r3, r0, #12
    6554:	428b      	cmp	r3, r1
    6556:	d301      	bcc.n	655c <__aeabi_idiv+0x70>
    6558:	030b      	lsls	r3, r1, #12
    655a:	1ac0      	subs	r0, r0, r3
    655c:	4152      	adcs	r2, r2
    655e:	0ac3      	lsrs	r3, r0, #11
    6560:	428b      	cmp	r3, r1
    6562:	d301      	bcc.n	6568 <__aeabi_idiv+0x7c>
    6564:	02cb      	lsls	r3, r1, #11
    6566:	1ac0      	subs	r0, r0, r3
    6568:	4152      	adcs	r2, r2
    656a:	0a83      	lsrs	r3, r0, #10
    656c:	428b      	cmp	r3, r1
    656e:	d301      	bcc.n	6574 <__aeabi_idiv+0x88>
    6570:	028b      	lsls	r3, r1, #10
    6572:	1ac0      	subs	r0, r0, r3
    6574:	4152      	adcs	r2, r2
    6576:	0a43      	lsrs	r3, r0, #9
    6578:	428b      	cmp	r3, r1
    657a:	d301      	bcc.n	6580 <__aeabi_idiv+0x94>
    657c:	024b      	lsls	r3, r1, #9
    657e:	1ac0      	subs	r0, r0, r3
    6580:	4152      	adcs	r2, r2
    6582:	0a03      	lsrs	r3, r0, #8
    6584:	428b      	cmp	r3, r1
    6586:	d301      	bcc.n	658c <__aeabi_idiv+0xa0>
    6588:	020b      	lsls	r3, r1, #8
    658a:	1ac0      	subs	r0, r0, r3
    658c:	4152      	adcs	r2, r2
    658e:	d2cd      	bcs.n	652c <__aeabi_idiv+0x40>
    6590:	09c3      	lsrs	r3, r0, #7
    6592:	428b      	cmp	r3, r1
    6594:	d301      	bcc.n	659a <__aeabi_idiv+0xae>
    6596:	01cb      	lsls	r3, r1, #7
    6598:	1ac0      	subs	r0, r0, r3
    659a:	4152      	adcs	r2, r2
    659c:	0983      	lsrs	r3, r0, #6
    659e:	428b      	cmp	r3, r1
    65a0:	d301      	bcc.n	65a6 <__aeabi_idiv+0xba>
    65a2:	018b      	lsls	r3, r1, #6
    65a4:	1ac0      	subs	r0, r0, r3
    65a6:	4152      	adcs	r2, r2
    65a8:	0943      	lsrs	r3, r0, #5
    65aa:	428b      	cmp	r3, r1
    65ac:	d301      	bcc.n	65b2 <__aeabi_idiv+0xc6>
    65ae:	014b      	lsls	r3, r1, #5
    65b0:	1ac0      	subs	r0, r0, r3
    65b2:	4152      	adcs	r2, r2
    65b4:	0903      	lsrs	r3, r0, #4
    65b6:	428b      	cmp	r3, r1
    65b8:	d301      	bcc.n	65be <__aeabi_idiv+0xd2>
    65ba:	010b      	lsls	r3, r1, #4
    65bc:	1ac0      	subs	r0, r0, r3
    65be:	4152      	adcs	r2, r2
    65c0:	08c3      	lsrs	r3, r0, #3
    65c2:	428b      	cmp	r3, r1
    65c4:	d301      	bcc.n	65ca <__aeabi_idiv+0xde>
    65c6:	00cb      	lsls	r3, r1, #3
    65c8:	1ac0      	subs	r0, r0, r3
    65ca:	4152      	adcs	r2, r2
    65cc:	0883      	lsrs	r3, r0, #2
    65ce:	428b      	cmp	r3, r1
    65d0:	d301      	bcc.n	65d6 <__aeabi_idiv+0xea>
    65d2:	008b      	lsls	r3, r1, #2
    65d4:	1ac0      	subs	r0, r0, r3
    65d6:	4152      	adcs	r2, r2
    65d8:	0843      	lsrs	r3, r0, #1
    65da:	428b      	cmp	r3, r1
    65dc:	d301      	bcc.n	65e2 <__aeabi_idiv+0xf6>
    65de:	004b      	lsls	r3, r1, #1
    65e0:	1ac0      	subs	r0, r0, r3
    65e2:	4152      	adcs	r2, r2
    65e4:	1a41      	subs	r1, r0, r1
    65e6:	d200      	bcs.n	65ea <__aeabi_idiv+0xfe>
    65e8:	4601      	mov	r1, r0
    65ea:	4152      	adcs	r2, r2
    65ec:	4610      	mov	r0, r2
    65ee:	4770      	bx	lr
    65f0:	e05d      	b.n	66ae <__aeabi_idiv+0x1c2>
    65f2:	0fca      	lsrs	r2, r1, #31
    65f4:	d000      	beq.n	65f8 <__aeabi_idiv+0x10c>
    65f6:	4249      	negs	r1, r1
    65f8:	1003      	asrs	r3, r0, #32
    65fa:	d300      	bcc.n	65fe <__aeabi_idiv+0x112>
    65fc:	4240      	negs	r0, r0
    65fe:	4053      	eors	r3, r2
    6600:	2200      	movs	r2, #0
    6602:	469c      	mov	ip, r3
    6604:	0903      	lsrs	r3, r0, #4
    6606:	428b      	cmp	r3, r1
    6608:	d32d      	bcc.n	6666 <__aeabi_idiv+0x17a>
    660a:	0a03      	lsrs	r3, r0, #8
    660c:	428b      	cmp	r3, r1
    660e:	d312      	bcc.n	6636 <__aeabi_idiv+0x14a>
    6610:	22fc      	movs	r2, #252	; 0xfc
    6612:	0189      	lsls	r1, r1, #6
    6614:	ba12      	rev	r2, r2
    6616:	0a03      	lsrs	r3, r0, #8
    6618:	428b      	cmp	r3, r1
    661a:	d30c      	bcc.n	6636 <__aeabi_idiv+0x14a>
    661c:	0189      	lsls	r1, r1, #6
    661e:	1192      	asrs	r2, r2, #6
    6620:	428b      	cmp	r3, r1
    6622:	d308      	bcc.n	6636 <__aeabi_idiv+0x14a>
    6624:	0189      	lsls	r1, r1, #6
    6626:	1192      	asrs	r2, r2, #6
    6628:	428b      	cmp	r3, r1
    662a:	d304      	bcc.n	6636 <__aeabi_idiv+0x14a>
    662c:	0189      	lsls	r1, r1, #6
    662e:	d03a      	beq.n	66a6 <__aeabi_idiv+0x1ba>
    6630:	1192      	asrs	r2, r2, #6
    6632:	e000      	b.n	6636 <__aeabi_idiv+0x14a>
    6634:	0989      	lsrs	r1, r1, #6
    6636:	09c3      	lsrs	r3, r0, #7
    6638:	428b      	cmp	r3, r1
    663a:	d301      	bcc.n	6640 <__aeabi_idiv+0x154>
    663c:	01cb      	lsls	r3, r1, #7
    663e:	1ac0      	subs	r0, r0, r3
    6640:	4152      	adcs	r2, r2
    6642:	0983      	lsrs	r3, r0, #6
    6644:	428b      	cmp	r3, r1
    6646:	d301      	bcc.n	664c <__aeabi_idiv+0x160>
    6648:	018b      	lsls	r3, r1, #6
    664a:	1ac0      	subs	r0, r0, r3
    664c:	4152      	adcs	r2, r2
    664e:	0943      	lsrs	r3, r0, #5
    6650:	428b      	cmp	r3, r1
    6652:	d301      	bcc.n	6658 <__aeabi_idiv+0x16c>
    6654:	014b      	lsls	r3, r1, #5
    6656:	1ac0      	subs	r0, r0, r3
    6658:	4152      	adcs	r2, r2
    665a:	0903      	lsrs	r3, r0, #4
    665c:	428b      	cmp	r3, r1
    665e:	d301      	bcc.n	6664 <__aeabi_idiv+0x178>
    6660:	010b      	lsls	r3, r1, #4
    6662:	1ac0      	subs	r0, r0, r3
    6664:	4152      	adcs	r2, r2
    6666:	08c3      	lsrs	r3, r0, #3
    6668:	428b      	cmp	r3, r1
    666a:	d301      	bcc.n	6670 <__aeabi_idiv+0x184>
    666c:	00cb      	lsls	r3, r1, #3
    666e:	1ac0      	subs	r0, r0, r3
    6670:	4152      	adcs	r2, r2
    6672:	0883      	lsrs	r3, r0, #2
    6674:	428b      	cmp	r3, r1
    6676:	d301      	bcc.n	667c <__aeabi_idiv+0x190>
    6678:	008b      	lsls	r3, r1, #2
    667a:	1ac0      	subs	r0, r0, r3
    667c:	4152      	adcs	r2, r2
    667e:	d2d9      	bcs.n	6634 <__aeabi_idiv+0x148>
    6680:	0843      	lsrs	r3, r0, #1
    6682:	428b      	cmp	r3, r1
    6684:	d301      	bcc.n	668a <__aeabi_idiv+0x19e>
    6686:	004b      	lsls	r3, r1, #1
    6688:	1ac0      	subs	r0, r0, r3
    668a:	4152      	adcs	r2, r2
    668c:	1a41      	subs	r1, r0, r1
    668e:	d200      	bcs.n	6692 <__aeabi_idiv+0x1a6>
    6690:	4601      	mov	r1, r0
    6692:	4663      	mov	r3, ip
    6694:	4152      	adcs	r2, r2
    6696:	105b      	asrs	r3, r3, #1
    6698:	4610      	mov	r0, r2
    669a:	d301      	bcc.n	66a0 <__aeabi_idiv+0x1b4>
    669c:	4240      	negs	r0, r0
    669e:	2b00      	cmp	r3, #0
    66a0:	d500      	bpl.n	66a4 <__aeabi_idiv+0x1b8>
    66a2:	4249      	negs	r1, r1
    66a4:	4770      	bx	lr
    66a6:	4663      	mov	r3, ip
    66a8:	105b      	asrs	r3, r3, #1
    66aa:	d300      	bcc.n	66ae <__aeabi_idiv+0x1c2>
    66ac:	4240      	negs	r0, r0
    66ae:	b501      	push	{r0, lr}
    66b0:	2000      	movs	r0, #0
    66b2:	f000 f805 	bl	66c0 <__aeabi_idiv0>
    66b6:	bd02      	pop	{r1, pc}

000066b8 <__aeabi_idivmod>:
    66b8:	2900      	cmp	r1, #0
    66ba:	d0f8      	beq.n	66ae <__aeabi_idiv+0x1c2>
    66bc:	e716      	b.n	64ec <__aeabi_idiv>
    66be:	4770      	bx	lr

000066c0 <__aeabi_idiv0>:
    66c0:	4770      	bx	lr
    66c2:	46c0      	nop			; (mov r8, r8)

000066c4 <__aeabi_uldivmod>:
    66c4:	2b00      	cmp	r3, #0
    66c6:	d111      	bne.n	66ec <__aeabi_uldivmod+0x28>
    66c8:	2a00      	cmp	r2, #0
    66ca:	d10f      	bne.n	66ec <__aeabi_uldivmod+0x28>
    66cc:	2900      	cmp	r1, #0
    66ce:	d100      	bne.n	66d2 <__aeabi_uldivmod+0xe>
    66d0:	2800      	cmp	r0, #0
    66d2:	d002      	beq.n	66da <__aeabi_uldivmod+0x16>
    66d4:	2100      	movs	r1, #0
    66d6:	43c9      	mvns	r1, r1
    66d8:	1c08      	adds	r0, r1, #0
    66da:	b407      	push	{r0, r1, r2}
    66dc:	4802      	ldr	r0, [pc, #8]	; (66e8 <__aeabi_uldivmod+0x24>)
    66de:	a102      	add	r1, pc, #8	; (adr r1, 66e8 <__aeabi_uldivmod+0x24>)
    66e0:	1840      	adds	r0, r0, r1
    66e2:	9002      	str	r0, [sp, #8]
    66e4:	bd03      	pop	{r0, r1, pc}
    66e6:	46c0      	nop			; (mov r8, r8)
    66e8:	ffffffd9 	.word	0xffffffd9
    66ec:	b403      	push	{r0, r1}
    66ee:	4668      	mov	r0, sp
    66f0:	b501      	push	{r0, lr}
    66f2:	9802      	ldr	r0, [sp, #8]
    66f4:	f000 f832 	bl	675c <__udivmoddi4>
    66f8:	9b01      	ldr	r3, [sp, #4]
    66fa:	469e      	mov	lr, r3
    66fc:	b002      	add	sp, #8
    66fe:	bc0c      	pop	{r2, r3}
    6700:	4770      	bx	lr
    6702:	46c0      	nop			; (mov r8, r8)

00006704 <__aeabi_lmul>:
    6704:	b5f0      	push	{r4, r5, r6, r7, lr}
    6706:	464f      	mov	r7, r9
    6708:	4646      	mov	r6, r8
    670a:	b4c0      	push	{r6, r7}
    670c:	0416      	lsls	r6, r2, #16
    670e:	0c36      	lsrs	r6, r6, #16
    6710:	4699      	mov	r9, r3
    6712:	0033      	movs	r3, r6
    6714:	0405      	lsls	r5, r0, #16
    6716:	0c2c      	lsrs	r4, r5, #16
    6718:	0c07      	lsrs	r7, r0, #16
    671a:	0c15      	lsrs	r5, r2, #16
    671c:	4363      	muls	r3, r4
    671e:	437e      	muls	r6, r7
    6720:	436f      	muls	r7, r5
    6722:	4365      	muls	r5, r4
    6724:	0c1c      	lsrs	r4, r3, #16
    6726:	19ad      	adds	r5, r5, r6
    6728:	1964      	adds	r4, r4, r5
    672a:	469c      	mov	ip, r3
    672c:	42a6      	cmp	r6, r4
    672e:	d903      	bls.n	6738 <__aeabi_lmul+0x34>
    6730:	2380      	movs	r3, #128	; 0x80
    6732:	025b      	lsls	r3, r3, #9
    6734:	4698      	mov	r8, r3
    6736:	4447      	add	r7, r8
    6738:	4663      	mov	r3, ip
    673a:	0c25      	lsrs	r5, r4, #16
    673c:	19ef      	adds	r7, r5, r7
    673e:	041d      	lsls	r5, r3, #16
    6740:	464b      	mov	r3, r9
    6742:	434a      	muls	r2, r1
    6744:	4343      	muls	r3, r0
    6746:	0c2d      	lsrs	r5, r5, #16
    6748:	0424      	lsls	r4, r4, #16
    674a:	1964      	adds	r4, r4, r5
    674c:	1899      	adds	r1, r3, r2
    674e:	19c9      	adds	r1, r1, r7
    6750:	0020      	movs	r0, r4
    6752:	bc0c      	pop	{r2, r3}
    6754:	4690      	mov	r8, r2
    6756:	4699      	mov	r9, r3
    6758:	bdf0      	pop	{r4, r5, r6, r7, pc}
    675a:	46c0      	nop			; (mov r8, r8)

0000675c <__udivmoddi4>:
    675c:	b5f0      	push	{r4, r5, r6, r7, lr}
    675e:	464d      	mov	r5, r9
    6760:	4656      	mov	r6, sl
    6762:	4644      	mov	r4, r8
    6764:	465f      	mov	r7, fp
    6766:	b4f0      	push	{r4, r5, r6, r7}
    6768:	4692      	mov	sl, r2
    676a:	b083      	sub	sp, #12
    676c:	0004      	movs	r4, r0
    676e:	000d      	movs	r5, r1
    6770:	4699      	mov	r9, r3
    6772:	428b      	cmp	r3, r1
    6774:	d82f      	bhi.n	67d6 <__udivmoddi4+0x7a>
    6776:	d02c      	beq.n	67d2 <__udivmoddi4+0x76>
    6778:	4649      	mov	r1, r9
    677a:	4650      	mov	r0, sl
    677c:	f001 fd4a 	bl	8214 <__clzdi2>
    6780:	0029      	movs	r1, r5
    6782:	0006      	movs	r6, r0
    6784:	0020      	movs	r0, r4
    6786:	f001 fd45 	bl	8214 <__clzdi2>
    678a:	1a33      	subs	r3, r6, r0
    678c:	4698      	mov	r8, r3
    678e:	3b20      	subs	r3, #32
    6790:	469b      	mov	fp, r3
    6792:	d500      	bpl.n	6796 <__udivmoddi4+0x3a>
    6794:	e074      	b.n	6880 <__udivmoddi4+0x124>
    6796:	4653      	mov	r3, sl
    6798:	465a      	mov	r2, fp
    679a:	4093      	lsls	r3, r2
    679c:	001f      	movs	r7, r3
    679e:	4653      	mov	r3, sl
    67a0:	4642      	mov	r2, r8
    67a2:	4093      	lsls	r3, r2
    67a4:	001e      	movs	r6, r3
    67a6:	42af      	cmp	r7, r5
    67a8:	d829      	bhi.n	67fe <__udivmoddi4+0xa2>
    67aa:	d026      	beq.n	67fa <__udivmoddi4+0x9e>
    67ac:	465b      	mov	r3, fp
    67ae:	1ba4      	subs	r4, r4, r6
    67b0:	41bd      	sbcs	r5, r7
    67b2:	2b00      	cmp	r3, #0
    67b4:	da00      	bge.n	67b8 <__udivmoddi4+0x5c>
    67b6:	e079      	b.n	68ac <__udivmoddi4+0x150>
    67b8:	2200      	movs	r2, #0
    67ba:	2300      	movs	r3, #0
    67bc:	9200      	str	r2, [sp, #0]
    67be:	9301      	str	r3, [sp, #4]
    67c0:	2301      	movs	r3, #1
    67c2:	465a      	mov	r2, fp
    67c4:	4093      	lsls	r3, r2
    67c6:	9301      	str	r3, [sp, #4]
    67c8:	2301      	movs	r3, #1
    67ca:	4642      	mov	r2, r8
    67cc:	4093      	lsls	r3, r2
    67ce:	9300      	str	r3, [sp, #0]
    67d0:	e019      	b.n	6806 <__udivmoddi4+0xaa>
    67d2:	4282      	cmp	r2, r0
    67d4:	d9d0      	bls.n	6778 <__udivmoddi4+0x1c>
    67d6:	2200      	movs	r2, #0
    67d8:	2300      	movs	r3, #0
    67da:	9200      	str	r2, [sp, #0]
    67dc:	9301      	str	r3, [sp, #4]
    67de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    67e0:	2b00      	cmp	r3, #0
    67e2:	d001      	beq.n	67e8 <__udivmoddi4+0x8c>
    67e4:	601c      	str	r4, [r3, #0]
    67e6:	605d      	str	r5, [r3, #4]
    67e8:	9800      	ldr	r0, [sp, #0]
    67ea:	9901      	ldr	r1, [sp, #4]
    67ec:	b003      	add	sp, #12
    67ee:	bc3c      	pop	{r2, r3, r4, r5}
    67f0:	4690      	mov	r8, r2
    67f2:	4699      	mov	r9, r3
    67f4:	46a2      	mov	sl, r4
    67f6:	46ab      	mov	fp, r5
    67f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67fa:	42a3      	cmp	r3, r4
    67fc:	d9d6      	bls.n	67ac <__udivmoddi4+0x50>
    67fe:	2200      	movs	r2, #0
    6800:	2300      	movs	r3, #0
    6802:	9200      	str	r2, [sp, #0]
    6804:	9301      	str	r3, [sp, #4]
    6806:	4643      	mov	r3, r8
    6808:	2b00      	cmp	r3, #0
    680a:	d0e8      	beq.n	67de <__udivmoddi4+0x82>
    680c:	07fb      	lsls	r3, r7, #31
    680e:	0872      	lsrs	r2, r6, #1
    6810:	431a      	orrs	r2, r3
    6812:	4646      	mov	r6, r8
    6814:	087b      	lsrs	r3, r7, #1
    6816:	e00e      	b.n	6836 <__udivmoddi4+0xda>
    6818:	42ab      	cmp	r3, r5
    681a:	d101      	bne.n	6820 <__udivmoddi4+0xc4>
    681c:	42a2      	cmp	r2, r4
    681e:	d80c      	bhi.n	683a <__udivmoddi4+0xde>
    6820:	1aa4      	subs	r4, r4, r2
    6822:	419d      	sbcs	r5, r3
    6824:	2001      	movs	r0, #1
    6826:	1924      	adds	r4, r4, r4
    6828:	416d      	adcs	r5, r5
    682a:	2100      	movs	r1, #0
    682c:	3e01      	subs	r6, #1
    682e:	1824      	adds	r4, r4, r0
    6830:	414d      	adcs	r5, r1
    6832:	2e00      	cmp	r6, #0
    6834:	d006      	beq.n	6844 <__udivmoddi4+0xe8>
    6836:	42ab      	cmp	r3, r5
    6838:	d9ee      	bls.n	6818 <__udivmoddi4+0xbc>
    683a:	3e01      	subs	r6, #1
    683c:	1924      	adds	r4, r4, r4
    683e:	416d      	adcs	r5, r5
    6840:	2e00      	cmp	r6, #0
    6842:	d1f8      	bne.n	6836 <__udivmoddi4+0xda>
    6844:	465b      	mov	r3, fp
    6846:	9800      	ldr	r0, [sp, #0]
    6848:	9901      	ldr	r1, [sp, #4]
    684a:	1900      	adds	r0, r0, r4
    684c:	4169      	adcs	r1, r5
    684e:	2b00      	cmp	r3, #0
    6850:	db22      	blt.n	6898 <__udivmoddi4+0x13c>
    6852:	002b      	movs	r3, r5
    6854:	465a      	mov	r2, fp
    6856:	40d3      	lsrs	r3, r2
    6858:	002a      	movs	r2, r5
    685a:	4644      	mov	r4, r8
    685c:	40e2      	lsrs	r2, r4
    685e:	001c      	movs	r4, r3
    6860:	465b      	mov	r3, fp
    6862:	0015      	movs	r5, r2
    6864:	2b00      	cmp	r3, #0
    6866:	db2c      	blt.n	68c2 <__udivmoddi4+0x166>
    6868:	0026      	movs	r6, r4
    686a:	409e      	lsls	r6, r3
    686c:	0033      	movs	r3, r6
    686e:	0026      	movs	r6, r4
    6870:	4647      	mov	r7, r8
    6872:	40be      	lsls	r6, r7
    6874:	0032      	movs	r2, r6
    6876:	1a80      	subs	r0, r0, r2
    6878:	4199      	sbcs	r1, r3
    687a:	9000      	str	r0, [sp, #0]
    687c:	9101      	str	r1, [sp, #4]
    687e:	e7ae      	b.n	67de <__udivmoddi4+0x82>
    6880:	4642      	mov	r2, r8
    6882:	2320      	movs	r3, #32
    6884:	1a9b      	subs	r3, r3, r2
    6886:	4652      	mov	r2, sl
    6888:	40da      	lsrs	r2, r3
    688a:	4641      	mov	r1, r8
    688c:	0013      	movs	r3, r2
    688e:	464a      	mov	r2, r9
    6890:	408a      	lsls	r2, r1
    6892:	0017      	movs	r7, r2
    6894:	431f      	orrs	r7, r3
    6896:	e782      	b.n	679e <__udivmoddi4+0x42>
    6898:	4642      	mov	r2, r8
    689a:	2320      	movs	r3, #32
    689c:	1a9b      	subs	r3, r3, r2
    689e:	002a      	movs	r2, r5
    68a0:	4646      	mov	r6, r8
    68a2:	409a      	lsls	r2, r3
    68a4:	0023      	movs	r3, r4
    68a6:	40f3      	lsrs	r3, r6
    68a8:	4313      	orrs	r3, r2
    68aa:	e7d5      	b.n	6858 <__udivmoddi4+0xfc>
    68ac:	4642      	mov	r2, r8
    68ae:	2320      	movs	r3, #32
    68b0:	2100      	movs	r1, #0
    68b2:	1a9b      	subs	r3, r3, r2
    68b4:	2200      	movs	r2, #0
    68b6:	9100      	str	r1, [sp, #0]
    68b8:	9201      	str	r2, [sp, #4]
    68ba:	2201      	movs	r2, #1
    68bc:	40da      	lsrs	r2, r3
    68be:	9201      	str	r2, [sp, #4]
    68c0:	e782      	b.n	67c8 <__udivmoddi4+0x6c>
    68c2:	4642      	mov	r2, r8
    68c4:	2320      	movs	r3, #32
    68c6:	0026      	movs	r6, r4
    68c8:	1a9b      	subs	r3, r3, r2
    68ca:	40de      	lsrs	r6, r3
    68cc:	002f      	movs	r7, r5
    68ce:	46b4      	mov	ip, r6
    68d0:	4097      	lsls	r7, r2
    68d2:	4666      	mov	r6, ip
    68d4:	003b      	movs	r3, r7
    68d6:	4333      	orrs	r3, r6
    68d8:	e7c9      	b.n	686e <__udivmoddi4+0x112>
    68da:	46c0      	nop			; (mov r8, r8)

000068dc <__aeabi_dadd>:
    68dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68de:	4656      	mov	r6, sl
    68e0:	465f      	mov	r7, fp
    68e2:	464d      	mov	r5, r9
    68e4:	4644      	mov	r4, r8
    68e6:	b4f0      	push	{r4, r5, r6, r7}
    68e8:	000f      	movs	r7, r1
    68ea:	0ffd      	lsrs	r5, r7, #31
    68ec:	46aa      	mov	sl, r5
    68ee:	0309      	lsls	r1, r1, #12
    68f0:	007c      	lsls	r4, r7, #1
    68f2:	002e      	movs	r6, r5
    68f4:	005f      	lsls	r7, r3, #1
    68f6:	0f45      	lsrs	r5, r0, #29
    68f8:	0a49      	lsrs	r1, r1, #9
    68fa:	0d7f      	lsrs	r7, r7, #21
    68fc:	4329      	orrs	r1, r5
    68fe:	00c5      	lsls	r5, r0, #3
    6900:	0318      	lsls	r0, r3, #12
    6902:	46bc      	mov	ip, r7
    6904:	0a40      	lsrs	r0, r0, #9
    6906:	0f57      	lsrs	r7, r2, #29
    6908:	0d64      	lsrs	r4, r4, #21
    690a:	0fdb      	lsrs	r3, r3, #31
    690c:	4338      	orrs	r0, r7
    690e:	00d2      	lsls	r2, r2, #3
    6910:	459a      	cmp	sl, r3
    6912:	d100      	bne.n	6916 <__aeabi_dadd+0x3a>
    6914:	e0aa      	b.n	6a6c <__aeabi_dadd+0x190>
    6916:	4666      	mov	r6, ip
    6918:	1ba6      	subs	r6, r4, r6
    691a:	2e00      	cmp	r6, #0
    691c:	dc00      	bgt.n	6920 <__aeabi_dadd+0x44>
    691e:	e0ff      	b.n	6b20 <__aeabi_dadd+0x244>
    6920:	4663      	mov	r3, ip
    6922:	2b00      	cmp	r3, #0
    6924:	d139      	bne.n	699a <__aeabi_dadd+0xbe>
    6926:	0003      	movs	r3, r0
    6928:	4313      	orrs	r3, r2
    692a:	d000      	beq.n	692e <__aeabi_dadd+0x52>
    692c:	e0d9      	b.n	6ae2 <__aeabi_dadd+0x206>
    692e:	076b      	lsls	r3, r5, #29
    6930:	d009      	beq.n	6946 <__aeabi_dadd+0x6a>
    6932:	230f      	movs	r3, #15
    6934:	402b      	ands	r3, r5
    6936:	2b04      	cmp	r3, #4
    6938:	d005      	beq.n	6946 <__aeabi_dadd+0x6a>
    693a:	1d2b      	adds	r3, r5, #4
    693c:	42ab      	cmp	r3, r5
    693e:	41ad      	sbcs	r5, r5
    6940:	426d      	negs	r5, r5
    6942:	1949      	adds	r1, r1, r5
    6944:	001d      	movs	r5, r3
    6946:	020b      	lsls	r3, r1, #8
    6948:	d400      	bmi.n	694c <__aeabi_dadd+0x70>
    694a:	e082      	b.n	6a52 <__aeabi_dadd+0x176>
    694c:	4bca      	ldr	r3, [pc, #808]	; (6c78 <__aeabi_dadd+0x39c>)
    694e:	3401      	adds	r4, #1
    6950:	429c      	cmp	r4, r3
    6952:	d100      	bne.n	6956 <__aeabi_dadd+0x7a>
    6954:	e0fe      	b.n	6b54 <__aeabi_dadd+0x278>
    6956:	000a      	movs	r2, r1
    6958:	4656      	mov	r6, sl
    695a:	4bc8      	ldr	r3, [pc, #800]	; (6c7c <__aeabi_dadd+0x3a0>)
    695c:	08ed      	lsrs	r5, r5, #3
    695e:	401a      	ands	r2, r3
    6960:	0750      	lsls	r0, r2, #29
    6962:	0564      	lsls	r4, r4, #21
    6964:	0252      	lsls	r2, r2, #9
    6966:	4305      	orrs	r5, r0
    6968:	0b12      	lsrs	r2, r2, #12
    696a:	0d64      	lsrs	r4, r4, #21
    696c:	2100      	movs	r1, #0
    696e:	0312      	lsls	r2, r2, #12
    6970:	0d0b      	lsrs	r3, r1, #20
    6972:	051b      	lsls	r3, r3, #20
    6974:	0564      	lsls	r4, r4, #21
    6976:	0b12      	lsrs	r2, r2, #12
    6978:	431a      	orrs	r2, r3
    697a:	0863      	lsrs	r3, r4, #1
    697c:	4cc0      	ldr	r4, [pc, #768]	; (6c80 <__aeabi_dadd+0x3a4>)
    697e:	07f6      	lsls	r6, r6, #31
    6980:	4014      	ands	r4, r2
    6982:	431c      	orrs	r4, r3
    6984:	0064      	lsls	r4, r4, #1
    6986:	0864      	lsrs	r4, r4, #1
    6988:	4334      	orrs	r4, r6
    698a:	0028      	movs	r0, r5
    698c:	0021      	movs	r1, r4
    698e:	bc3c      	pop	{r2, r3, r4, r5}
    6990:	4690      	mov	r8, r2
    6992:	4699      	mov	r9, r3
    6994:	46a2      	mov	sl, r4
    6996:	46ab      	mov	fp, r5
    6998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    699a:	4bb7      	ldr	r3, [pc, #732]	; (6c78 <__aeabi_dadd+0x39c>)
    699c:	429c      	cmp	r4, r3
    699e:	d0c6      	beq.n	692e <__aeabi_dadd+0x52>
    69a0:	2380      	movs	r3, #128	; 0x80
    69a2:	041b      	lsls	r3, r3, #16
    69a4:	4318      	orrs	r0, r3
    69a6:	2e38      	cmp	r6, #56	; 0x38
    69a8:	dd00      	ble.n	69ac <__aeabi_dadd+0xd0>
    69aa:	e0eb      	b.n	6b84 <__aeabi_dadd+0x2a8>
    69ac:	2e1f      	cmp	r6, #31
    69ae:	dd00      	ble.n	69b2 <__aeabi_dadd+0xd6>
    69b0:	e11e      	b.n	6bf0 <__aeabi_dadd+0x314>
    69b2:	2320      	movs	r3, #32
    69b4:	1b9b      	subs	r3, r3, r6
    69b6:	469c      	mov	ip, r3
    69b8:	0003      	movs	r3, r0
    69ba:	4667      	mov	r7, ip
    69bc:	40bb      	lsls	r3, r7
    69be:	4698      	mov	r8, r3
    69c0:	0013      	movs	r3, r2
    69c2:	4647      	mov	r7, r8
    69c4:	40f3      	lsrs	r3, r6
    69c6:	433b      	orrs	r3, r7
    69c8:	4667      	mov	r7, ip
    69ca:	40ba      	lsls	r2, r7
    69cc:	1e57      	subs	r7, r2, #1
    69ce:	41ba      	sbcs	r2, r7
    69d0:	4313      	orrs	r3, r2
    69d2:	0002      	movs	r2, r0
    69d4:	40f2      	lsrs	r2, r6
    69d6:	1aeb      	subs	r3, r5, r3
    69d8:	429d      	cmp	r5, r3
    69da:	41b6      	sbcs	r6, r6
    69dc:	001d      	movs	r5, r3
    69de:	1a8a      	subs	r2, r1, r2
    69e0:	4276      	negs	r6, r6
    69e2:	1b91      	subs	r1, r2, r6
    69e4:	020b      	lsls	r3, r1, #8
    69e6:	d531      	bpl.n	6a4c <__aeabi_dadd+0x170>
    69e8:	024a      	lsls	r2, r1, #9
    69ea:	0a56      	lsrs	r6, r2, #9
    69ec:	2e00      	cmp	r6, #0
    69ee:	d100      	bne.n	69f2 <__aeabi_dadd+0x116>
    69f0:	e0b4      	b.n	6b5c <__aeabi_dadd+0x280>
    69f2:	0030      	movs	r0, r6
    69f4:	f001 fbf0 	bl	81d8 <__clzsi2>
    69f8:	0003      	movs	r3, r0
    69fa:	3b08      	subs	r3, #8
    69fc:	2b1f      	cmp	r3, #31
    69fe:	dd00      	ble.n	6a02 <__aeabi_dadd+0x126>
    6a00:	e0b5      	b.n	6b6e <__aeabi_dadd+0x292>
    6a02:	2220      	movs	r2, #32
    6a04:	0029      	movs	r1, r5
    6a06:	1ad2      	subs	r2, r2, r3
    6a08:	40d1      	lsrs	r1, r2
    6a0a:	409e      	lsls	r6, r3
    6a0c:	000a      	movs	r2, r1
    6a0e:	409d      	lsls	r5, r3
    6a10:	4332      	orrs	r2, r6
    6a12:	429c      	cmp	r4, r3
    6a14:	dd00      	ble.n	6a18 <__aeabi_dadd+0x13c>
    6a16:	e0b1      	b.n	6b7c <__aeabi_dadd+0x2a0>
    6a18:	1b1c      	subs	r4, r3, r4
    6a1a:	1c63      	adds	r3, r4, #1
    6a1c:	2b1f      	cmp	r3, #31
    6a1e:	dd00      	ble.n	6a22 <__aeabi_dadd+0x146>
    6a20:	e0d5      	b.n	6bce <__aeabi_dadd+0x2f2>
    6a22:	2120      	movs	r1, #32
    6a24:	0014      	movs	r4, r2
    6a26:	0028      	movs	r0, r5
    6a28:	1ac9      	subs	r1, r1, r3
    6a2a:	408c      	lsls	r4, r1
    6a2c:	40d8      	lsrs	r0, r3
    6a2e:	408d      	lsls	r5, r1
    6a30:	4304      	orrs	r4, r0
    6a32:	40da      	lsrs	r2, r3
    6a34:	1e68      	subs	r0, r5, #1
    6a36:	4185      	sbcs	r5, r0
    6a38:	0011      	movs	r1, r2
    6a3a:	4325      	orrs	r5, r4
    6a3c:	2400      	movs	r4, #0
    6a3e:	e776      	b.n	692e <__aeabi_dadd+0x52>
    6a40:	4641      	mov	r1, r8
    6a42:	4331      	orrs	r1, r6
    6a44:	d100      	bne.n	6a48 <__aeabi_dadd+0x16c>
    6a46:	e234      	b.n	6eb2 <__aeabi_dadd+0x5d6>
    6a48:	0031      	movs	r1, r6
    6a4a:	4645      	mov	r5, r8
    6a4c:	076b      	lsls	r3, r5, #29
    6a4e:	d000      	beq.n	6a52 <__aeabi_dadd+0x176>
    6a50:	e76f      	b.n	6932 <__aeabi_dadd+0x56>
    6a52:	4656      	mov	r6, sl
    6a54:	0748      	lsls	r0, r1, #29
    6a56:	08ed      	lsrs	r5, r5, #3
    6a58:	08c9      	lsrs	r1, r1, #3
    6a5a:	4305      	orrs	r5, r0
    6a5c:	4b86      	ldr	r3, [pc, #536]	; (6c78 <__aeabi_dadd+0x39c>)
    6a5e:	429c      	cmp	r4, r3
    6a60:	d035      	beq.n	6ace <__aeabi_dadd+0x1f2>
    6a62:	030a      	lsls	r2, r1, #12
    6a64:	0564      	lsls	r4, r4, #21
    6a66:	0b12      	lsrs	r2, r2, #12
    6a68:	0d64      	lsrs	r4, r4, #21
    6a6a:	e77f      	b.n	696c <__aeabi_dadd+0x90>
    6a6c:	4663      	mov	r3, ip
    6a6e:	1ae3      	subs	r3, r4, r3
    6a70:	469b      	mov	fp, r3
    6a72:	2b00      	cmp	r3, #0
    6a74:	dc00      	bgt.n	6a78 <__aeabi_dadd+0x19c>
    6a76:	e08b      	b.n	6b90 <__aeabi_dadd+0x2b4>
    6a78:	4667      	mov	r7, ip
    6a7a:	2f00      	cmp	r7, #0
    6a7c:	d03c      	beq.n	6af8 <__aeabi_dadd+0x21c>
    6a7e:	4f7e      	ldr	r7, [pc, #504]	; (6c78 <__aeabi_dadd+0x39c>)
    6a80:	42bc      	cmp	r4, r7
    6a82:	d100      	bne.n	6a86 <__aeabi_dadd+0x1aa>
    6a84:	e753      	b.n	692e <__aeabi_dadd+0x52>
    6a86:	2780      	movs	r7, #128	; 0x80
    6a88:	043f      	lsls	r7, r7, #16
    6a8a:	4338      	orrs	r0, r7
    6a8c:	465b      	mov	r3, fp
    6a8e:	2b38      	cmp	r3, #56	; 0x38
    6a90:	dc00      	bgt.n	6a94 <__aeabi_dadd+0x1b8>
    6a92:	e0f7      	b.n	6c84 <__aeabi_dadd+0x3a8>
    6a94:	4302      	orrs	r2, r0
    6a96:	1e50      	subs	r0, r2, #1
    6a98:	4182      	sbcs	r2, r0
    6a9a:	2000      	movs	r0, #0
    6a9c:	b2d2      	uxtb	r2, r2
    6a9e:	1953      	adds	r3, r2, r5
    6aa0:	1842      	adds	r2, r0, r1
    6aa2:	42ab      	cmp	r3, r5
    6aa4:	4189      	sbcs	r1, r1
    6aa6:	001d      	movs	r5, r3
    6aa8:	4249      	negs	r1, r1
    6aaa:	1889      	adds	r1, r1, r2
    6aac:	020b      	lsls	r3, r1, #8
    6aae:	d5cd      	bpl.n	6a4c <__aeabi_dadd+0x170>
    6ab0:	4b71      	ldr	r3, [pc, #452]	; (6c78 <__aeabi_dadd+0x39c>)
    6ab2:	3401      	adds	r4, #1
    6ab4:	429c      	cmp	r4, r3
    6ab6:	d100      	bne.n	6aba <__aeabi_dadd+0x1de>
    6ab8:	e13d      	b.n	6d36 <__aeabi_dadd+0x45a>
    6aba:	2001      	movs	r0, #1
    6abc:	4a6f      	ldr	r2, [pc, #444]	; (6c7c <__aeabi_dadd+0x3a0>)
    6abe:	086b      	lsrs	r3, r5, #1
    6ac0:	400a      	ands	r2, r1
    6ac2:	4028      	ands	r0, r5
    6ac4:	4318      	orrs	r0, r3
    6ac6:	07d5      	lsls	r5, r2, #31
    6ac8:	4305      	orrs	r5, r0
    6aca:	0851      	lsrs	r1, r2, #1
    6acc:	e72f      	b.n	692e <__aeabi_dadd+0x52>
    6ace:	002b      	movs	r3, r5
    6ad0:	430b      	orrs	r3, r1
    6ad2:	d100      	bne.n	6ad6 <__aeabi_dadd+0x1fa>
    6ad4:	e1cb      	b.n	6e6e <__aeabi_dadd+0x592>
    6ad6:	2380      	movs	r3, #128	; 0x80
    6ad8:	031b      	lsls	r3, r3, #12
    6ada:	430b      	orrs	r3, r1
    6adc:	031a      	lsls	r2, r3, #12
    6ade:	0b12      	lsrs	r2, r2, #12
    6ae0:	e744      	b.n	696c <__aeabi_dadd+0x90>
    6ae2:	3e01      	subs	r6, #1
    6ae4:	2e00      	cmp	r6, #0
    6ae6:	d16d      	bne.n	6bc4 <__aeabi_dadd+0x2e8>
    6ae8:	1aae      	subs	r6, r5, r2
    6aea:	42b5      	cmp	r5, r6
    6aec:	419b      	sbcs	r3, r3
    6aee:	1a09      	subs	r1, r1, r0
    6af0:	425b      	negs	r3, r3
    6af2:	1ac9      	subs	r1, r1, r3
    6af4:	0035      	movs	r5, r6
    6af6:	e775      	b.n	69e4 <__aeabi_dadd+0x108>
    6af8:	0007      	movs	r7, r0
    6afa:	4317      	orrs	r7, r2
    6afc:	d100      	bne.n	6b00 <__aeabi_dadd+0x224>
    6afe:	e716      	b.n	692e <__aeabi_dadd+0x52>
    6b00:	2301      	movs	r3, #1
    6b02:	425b      	negs	r3, r3
    6b04:	469c      	mov	ip, r3
    6b06:	44e3      	add	fp, ip
    6b08:	465b      	mov	r3, fp
    6b0a:	2b00      	cmp	r3, #0
    6b0c:	d000      	beq.n	6b10 <__aeabi_dadd+0x234>
    6b0e:	e0e0      	b.n	6cd2 <__aeabi_dadd+0x3f6>
    6b10:	18aa      	adds	r2, r5, r2
    6b12:	42aa      	cmp	r2, r5
    6b14:	419b      	sbcs	r3, r3
    6b16:	1809      	adds	r1, r1, r0
    6b18:	425b      	negs	r3, r3
    6b1a:	1859      	adds	r1, r3, r1
    6b1c:	0015      	movs	r5, r2
    6b1e:	e7c5      	b.n	6aac <__aeabi_dadd+0x1d0>
    6b20:	2e00      	cmp	r6, #0
    6b22:	d175      	bne.n	6c10 <__aeabi_dadd+0x334>
    6b24:	1c66      	adds	r6, r4, #1
    6b26:	0576      	lsls	r6, r6, #21
    6b28:	0d76      	lsrs	r6, r6, #21
    6b2a:	2e01      	cmp	r6, #1
    6b2c:	dc00      	bgt.n	6b30 <__aeabi_dadd+0x254>
    6b2e:	e0f3      	b.n	6d18 <__aeabi_dadd+0x43c>
    6b30:	1aae      	subs	r6, r5, r2
    6b32:	46b0      	mov	r8, r6
    6b34:	4545      	cmp	r5, r8
    6b36:	41bf      	sbcs	r7, r7
    6b38:	1a0e      	subs	r6, r1, r0
    6b3a:	427f      	negs	r7, r7
    6b3c:	1bf6      	subs	r6, r6, r7
    6b3e:	0237      	lsls	r7, r6, #8
    6b40:	d400      	bmi.n	6b44 <__aeabi_dadd+0x268>
    6b42:	e08f      	b.n	6c64 <__aeabi_dadd+0x388>
    6b44:	1b55      	subs	r5, r2, r5
    6b46:	42aa      	cmp	r2, r5
    6b48:	41b6      	sbcs	r6, r6
    6b4a:	1a41      	subs	r1, r0, r1
    6b4c:	4276      	negs	r6, r6
    6b4e:	1b8e      	subs	r6, r1, r6
    6b50:	469a      	mov	sl, r3
    6b52:	e74b      	b.n	69ec <__aeabi_dadd+0x110>
    6b54:	4656      	mov	r6, sl
    6b56:	2200      	movs	r2, #0
    6b58:	2500      	movs	r5, #0
    6b5a:	e707      	b.n	696c <__aeabi_dadd+0x90>
    6b5c:	0028      	movs	r0, r5
    6b5e:	f001 fb3b 	bl	81d8 <__clzsi2>
    6b62:	3020      	adds	r0, #32
    6b64:	0003      	movs	r3, r0
    6b66:	3b08      	subs	r3, #8
    6b68:	2b1f      	cmp	r3, #31
    6b6a:	dc00      	bgt.n	6b6e <__aeabi_dadd+0x292>
    6b6c:	e749      	b.n	6a02 <__aeabi_dadd+0x126>
    6b6e:	002a      	movs	r2, r5
    6b70:	3828      	subs	r0, #40	; 0x28
    6b72:	4082      	lsls	r2, r0
    6b74:	2500      	movs	r5, #0
    6b76:	429c      	cmp	r4, r3
    6b78:	dc00      	bgt.n	6b7c <__aeabi_dadd+0x2a0>
    6b7a:	e74d      	b.n	6a18 <__aeabi_dadd+0x13c>
    6b7c:	493f      	ldr	r1, [pc, #252]	; (6c7c <__aeabi_dadd+0x3a0>)
    6b7e:	1ae4      	subs	r4, r4, r3
    6b80:	4011      	ands	r1, r2
    6b82:	e6d4      	b.n	692e <__aeabi_dadd+0x52>
    6b84:	4302      	orrs	r2, r0
    6b86:	1e50      	subs	r0, r2, #1
    6b88:	4182      	sbcs	r2, r0
    6b8a:	b2d3      	uxtb	r3, r2
    6b8c:	2200      	movs	r2, #0
    6b8e:	e722      	b.n	69d6 <__aeabi_dadd+0xfa>
    6b90:	2b00      	cmp	r3, #0
    6b92:	d000      	beq.n	6b96 <__aeabi_dadd+0x2ba>
    6b94:	e0f3      	b.n	6d7e <__aeabi_dadd+0x4a2>
    6b96:	1c63      	adds	r3, r4, #1
    6b98:	469c      	mov	ip, r3
    6b9a:	055b      	lsls	r3, r3, #21
    6b9c:	0d5b      	lsrs	r3, r3, #21
    6b9e:	2b01      	cmp	r3, #1
    6ba0:	dc00      	bgt.n	6ba4 <__aeabi_dadd+0x2c8>
    6ba2:	e09f      	b.n	6ce4 <__aeabi_dadd+0x408>
    6ba4:	4b34      	ldr	r3, [pc, #208]	; (6c78 <__aeabi_dadd+0x39c>)
    6ba6:	459c      	cmp	ip, r3
    6ba8:	d100      	bne.n	6bac <__aeabi_dadd+0x2d0>
    6baa:	e0c3      	b.n	6d34 <__aeabi_dadd+0x458>
    6bac:	18aa      	adds	r2, r5, r2
    6bae:	1809      	adds	r1, r1, r0
    6bb0:	42aa      	cmp	r2, r5
    6bb2:	4180      	sbcs	r0, r0
    6bb4:	4240      	negs	r0, r0
    6bb6:	1841      	adds	r1, r0, r1
    6bb8:	07cd      	lsls	r5, r1, #31
    6bba:	0852      	lsrs	r2, r2, #1
    6bbc:	4315      	orrs	r5, r2
    6bbe:	0849      	lsrs	r1, r1, #1
    6bc0:	4664      	mov	r4, ip
    6bc2:	e6b4      	b.n	692e <__aeabi_dadd+0x52>
    6bc4:	4b2c      	ldr	r3, [pc, #176]	; (6c78 <__aeabi_dadd+0x39c>)
    6bc6:	429c      	cmp	r4, r3
    6bc8:	d000      	beq.n	6bcc <__aeabi_dadd+0x2f0>
    6bca:	e6ec      	b.n	69a6 <__aeabi_dadd+0xca>
    6bcc:	e6af      	b.n	692e <__aeabi_dadd+0x52>
    6bce:	0011      	movs	r1, r2
    6bd0:	3c1f      	subs	r4, #31
    6bd2:	40e1      	lsrs	r1, r4
    6bd4:	000c      	movs	r4, r1
    6bd6:	2b20      	cmp	r3, #32
    6bd8:	d100      	bne.n	6bdc <__aeabi_dadd+0x300>
    6bda:	e07f      	b.n	6cdc <__aeabi_dadd+0x400>
    6bdc:	2140      	movs	r1, #64	; 0x40
    6bde:	1acb      	subs	r3, r1, r3
    6be0:	409a      	lsls	r2, r3
    6be2:	4315      	orrs	r5, r2
    6be4:	1e6a      	subs	r2, r5, #1
    6be6:	4195      	sbcs	r5, r2
    6be8:	2100      	movs	r1, #0
    6bea:	4325      	orrs	r5, r4
    6bec:	2400      	movs	r4, #0
    6bee:	e72d      	b.n	6a4c <__aeabi_dadd+0x170>
    6bf0:	0033      	movs	r3, r6
    6bf2:	0007      	movs	r7, r0
    6bf4:	3b20      	subs	r3, #32
    6bf6:	40df      	lsrs	r7, r3
    6bf8:	003b      	movs	r3, r7
    6bfa:	2e20      	cmp	r6, #32
    6bfc:	d070      	beq.n	6ce0 <__aeabi_dadd+0x404>
    6bfe:	2740      	movs	r7, #64	; 0x40
    6c00:	1bbe      	subs	r6, r7, r6
    6c02:	40b0      	lsls	r0, r6
    6c04:	4302      	orrs	r2, r0
    6c06:	1e50      	subs	r0, r2, #1
    6c08:	4182      	sbcs	r2, r0
    6c0a:	4313      	orrs	r3, r2
    6c0c:	2200      	movs	r2, #0
    6c0e:	e6e2      	b.n	69d6 <__aeabi_dadd+0xfa>
    6c10:	2c00      	cmp	r4, #0
    6c12:	d04f      	beq.n	6cb4 <__aeabi_dadd+0x3d8>
    6c14:	4c18      	ldr	r4, [pc, #96]	; (6c78 <__aeabi_dadd+0x39c>)
    6c16:	45a4      	cmp	ip, r4
    6c18:	d100      	bne.n	6c1c <__aeabi_dadd+0x340>
    6c1a:	e0ab      	b.n	6d74 <__aeabi_dadd+0x498>
    6c1c:	2480      	movs	r4, #128	; 0x80
    6c1e:	0424      	lsls	r4, r4, #16
    6c20:	4276      	negs	r6, r6
    6c22:	4321      	orrs	r1, r4
    6c24:	2e38      	cmp	r6, #56	; 0x38
    6c26:	dd00      	ble.n	6c2a <__aeabi_dadd+0x34e>
    6c28:	e0df      	b.n	6dea <__aeabi_dadd+0x50e>
    6c2a:	2e1f      	cmp	r6, #31
    6c2c:	dd00      	ble.n	6c30 <__aeabi_dadd+0x354>
    6c2e:	e143      	b.n	6eb8 <__aeabi_dadd+0x5dc>
    6c30:	2720      	movs	r7, #32
    6c32:	1bbc      	subs	r4, r7, r6
    6c34:	46a1      	mov	r9, r4
    6c36:	000c      	movs	r4, r1
    6c38:	464f      	mov	r7, r9
    6c3a:	40bc      	lsls	r4, r7
    6c3c:	46a0      	mov	r8, r4
    6c3e:	002c      	movs	r4, r5
    6c40:	4647      	mov	r7, r8
    6c42:	40f4      	lsrs	r4, r6
    6c44:	433c      	orrs	r4, r7
    6c46:	464f      	mov	r7, r9
    6c48:	40bd      	lsls	r5, r7
    6c4a:	1e6f      	subs	r7, r5, #1
    6c4c:	41bd      	sbcs	r5, r7
    6c4e:	40f1      	lsrs	r1, r6
    6c50:	432c      	orrs	r4, r5
    6c52:	1b15      	subs	r5, r2, r4
    6c54:	42aa      	cmp	r2, r5
    6c56:	4192      	sbcs	r2, r2
    6c58:	1a41      	subs	r1, r0, r1
    6c5a:	4252      	negs	r2, r2
    6c5c:	1a89      	subs	r1, r1, r2
    6c5e:	4664      	mov	r4, ip
    6c60:	469a      	mov	sl, r3
    6c62:	e6bf      	b.n	69e4 <__aeabi_dadd+0x108>
    6c64:	4641      	mov	r1, r8
    6c66:	4645      	mov	r5, r8
    6c68:	4331      	orrs	r1, r6
    6c6a:	d000      	beq.n	6c6e <__aeabi_dadd+0x392>
    6c6c:	e6be      	b.n	69ec <__aeabi_dadd+0x110>
    6c6e:	2600      	movs	r6, #0
    6c70:	2400      	movs	r4, #0
    6c72:	2500      	movs	r5, #0
    6c74:	e6f2      	b.n	6a5c <__aeabi_dadd+0x180>
    6c76:	46c0      	nop			; (mov r8, r8)
    6c78:	000007ff 	.word	0x000007ff
    6c7c:	ff7fffff 	.word	0xff7fffff
    6c80:	800fffff 	.word	0x800fffff
    6c84:	2b1f      	cmp	r3, #31
    6c86:	dc59      	bgt.n	6d3c <__aeabi_dadd+0x460>
    6c88:	2720      	movs	r7, #32
    6c8a:	1aff      	subs	r7, r7, r3
    6c8c:	46bc      	mov	ip, r7
    6c8e:	0007      	movs	r7, r0
    6c90:	4663      	mov	r3, ip
    6c92:	409f      	lsls	r7, r3
    6c94:	465b      	mov	r3, fp
    6c96:	46b9      	mov	r9, r7
    6c98:	0017      	movs	r7, r2
    6c9a:	40df      	lsrs	r7, r3
    6c9c:	46b8      	mov	r8, r7
    6c9e:	464f      	mov	r7, r9
    6ca0:	4643      	mov	r3, r8
    6ca2:	431f      	orrs	r7, r3
    6ca4:	4663      	mov	r3, ip
    6ca6:	409a      	lsls	r2, r3
    6ca8:	1e53      	subs	r3, r2, #1
    6caa:	419a      	sbcs	r2, r3
    6cac:	465b      	mov	r3, fp
    6cae:	433a      	orrs	r2, r7
    6cb0:	40d8      	lsrs	r0, r3
    6cb2:	e6f4      	b.n	6a9e <__aeabi_dadd+0x1c2>
    6cb4:	000c      	movs	r4, r1
    6cb6:	432c      	orrs	r4, r5
    6cb8:	d05c      	beq.n	6d74 <__aeabi_dadd+0x498>
    6cba:	43f6      	mvns	r6, r6
    6cbc:	2e00      	cmp	r6, #0
    6cbe:	d155      	bne.n	6d6c <__aeabi_dadd+0x490>
    6cc0:	1b55      	subs	r5, r2, r5
    6cc2:	42aa      	cmp	r2, r5
    6cc4:	41a4      	sbcs	r4, r4
    6cc6:	1a41      	subs	r1, r0, r1
    6cc8:	4264      	negs	r4, r4
    6cca:	1b09      	subs	r1, r1, r4
    6ccc:	469a      	mov	sl, r3
    6cce:	4664      	mov	r4, ip
    6cd0:	e688      	b.n	69e4 <__aeabi_dadd+0x108>
    6cd2:	4f96      	ldr	r7, [pc, #600]	; (6f2c <__aeabi_dadd+0x650>)
    6cd4:	42bc      	cmp	r4, r7
    6cd6:	d000      	beq.n	6cda <__aeabi_dadd+0x3fe>
    6cd8:	e6d8      	b.n	6a8c <__aeabi_dadd+0x1b0>
    6cda:	e628      	b.n	692e <__aeabi_dadd+0x52>
    6cdc:	2200      	movs	r2, #0
    6cde:	e780      	b.n	6be2 <__aeabi_dadd+0x306>
    6ce0:	2000      	movs	r0, #0
    6ce2:	e78f      	b.n	6c04 <__aeabi_dadd+0x328>
    6ce4:	000b      	movs	r3, r1
    6ce6:	432b      	orrs	r3, r5
    6ce8:	2c00      	cmp	r4, #0
    6cea:	d000      	beq.n	6cee <__aeabi_dadd+0x412>
    6cec:	e0c2      	b.n	6e74 <__aeabi_dadd+0x598>
    6cee:	2b00      	cmp	r3, #0
    6cf0:	d100      	bne.n	6cf4 <__aeabi_dadd+0x418>
    6cf2:	e101      	b.n	6ef8 <__aeabi_dadd+0x61c>
    6cf4:	0003      	movs	r3, r0
    6cf6:	4313      	orrs	r3, r2
    6cf8:	d100      	bne.n	6cfc <__aeabi_dadd+0x420>
    6cfa:	e618      	b.n	692e <__aeabi_dadd+0x52>
    6cfc:	18ab      	adds	r3, r5, r2
    6cfe:	42ab      	cmp	r3, r5
    6d00:	41b6      	sbcs	r6, r6
    6d02:	1809      	adds	r1, r1, r0
    6d04:	4276      	negs	r6, r6
    6d06:	1871      	adds	r1, r6, r1
    6d08:	020a      	lsls	r2, r1, #8
    6d0a:	d400      	bmi.n	6d0e <__aeabi_dadd+0x432>
    6d0c:	e109      	b.n	6f22 <__aeabi_dadd+0x646>
    6d0e:	4a88      	ldr	r2, [pc, #544]	; (6f30 <__aeabi_dadd+0x654>)
    6d10:	001d      	movs	r5, r3
    6d12:	4011      	ands	r1, r2
    6d14:	4664      	mov	r4, ip
    6d16:	e60a      	b.n	692e <__aeabi_dadd+0x52>
    6d18:	2c00      	cmp	r4, #0
    6d1a:	d15b      	bne.n	6dd4 <__aeabi_dadd+0x4f8>
    6d1c:	000e      	movs	r6, r1
    6d1e:	432e      	orrs	r6, r5
    6d20:	d000      	beq.n	6d24 <__aeabi_dadd+0x448>
    6d22:	e08a      	b.n	6e3a <__aeabi_dadd+0x55e>
    6d24:	0001      	movs	r1, r0
    6d26:	4311      	orrs	r1, r2
    6d28:	d100      	bne.n	6d2c <__aeabi_dadd+0x450>
    6d2a:	e0c2      	b.n	6eb2 <__aeabi_dadd+0x5d6>
    6d2c:	0001      	movs	r1, r0
    6d2e:	0015      	movs	r5, r2
    6d30:	469a      	mov	sl, r3
    6d32:	e5fc      	b.n	692e <__aeabi_dadd+0x52>
    6d34:	4664      	mov	r4, ip
    6d36:	2100      	movs	r1, #0
    6d38:	2500      	movs	r5, #0
    6d3a:	e68f      	b.n	6a5c <__aeabi_dadd+0x180>
    6d3c:	2320      	movs	r3, #32
    6d3e:	425b      	negs	r3, r3
    6d40:	469c      	mov	ip, r3
    6d42:	44dc      	add	ip, fp
    6d44:	4663      	mov	r3, ip
    6d46:	0007      	movs	r7, r0
    6d48:	40df      	lsrs	r7, r3
    6d4a:	465b      	mov	r3, fp
    6d4c:	46bc      	mov	ip, r7
    6d4e:	2b20      	cmp	r3, #32
    6d50:	d100      	bne.n	6d54 <__aeabi_dadd+0x478>
    6d52:	e0ac      	b.n	6eae <__aeabi_dadd+0x5d2>
    6d54:	2340      	movs	r3, #64	; 0x40
    6d56:	465f      	mov	r7, fp
    6d58:	1bdb      	subs	r3, r3, r7
    6d5a:	4098      	lsls	r0, r3
    6d5c:	4302      	orrs	r2, r0
    6d5e:	1e50      	subs	r0, r2, #1
    6d60:	4182      	sbcs	r2, r0
    6d62:	4663      	mov	r3, ip
    6d64:	4313      	orrs	r3, r2
    6d66:	001a      	movs	r2, r3
    6d68:	2000      	movs	r0, #0
    6d6a:	e698      	b.n	6a9e <__aeabi_dadd+0x1c2>
    6d6c:	4c6f      	ldr	r4, [pc, #444]	; (6f2c <__aeabi_dadd+0x650>)
    6d6e:	45a4      	cmp	ip, r4
    6d70:	d000      	beq.n	6d74 <__aeabi_dadd+0x498>
    6d72:	e757      	b.n	6c24 <__aeabi_dadd+0x348>
    6d74:	0001      	movs	r1, r0
    6d76:	0015      	movs	r5, r2
    6d78:	4664      	mov	r4, ip
    6d7a:	469a      	mov	sl, r3
    6d7c:	e5d7      	b.n	692e <__aeabi_dadd+0x52>
    6d7e:	2c00      	cmp	r4, #0
    6d80:	d139      	bne.n	6df6 <__aeabi_dadd+0x51a>
    6d82:	000c      	movs	r4, r1
    6d84:	432c      	orrs	r4, r5
    6d86:	d06e      	beq.n	6e66 <__aeabi_dadd+0x58a>
    6d88:	43db      	mvns	r3, r3
    6d8a:	2b00      	cmp	r3, #0
    6d8c:	d01a      	beq.n	6dc4 <__aeabi_dadd+0x4e8>
    6d8e:	4c67      	ldr	r4, [pc, #412]	; (6f2c <__aeabi_dadd+0x650>)
    6d90:	45a4      	cmp	ip, r4
    6d92:	d068      	beq.n	6e66 <__aeabi_dadd+0x58a>
    6d94:	2b38      	cmp	r3, #56	; 0x38
    6d96:	dd00      	ble.n	6d9a <__aeabi_dadd+0x4be>
    6d98:	e0a4      	b.n	6ee4 <__aeabi_dadd+0x608>
    6d9a:	2b1f      	cmp	r3, #31
    6d9c:	dd00      	ble.n	6da0 <__aeabi_dadd+0x4c4>
    6d9e:	e0ae      	b.n	6efe <__aeabi_dadd+0x622>
    6da0:	2420      	movs	r4, #32
    6da2:	000f      	movs	r7, r1
    6da4:	1ae4      	subs	r4, r4, r3
    6da6:	40a7      	lsls	r7, r4
    6da8:	46b9      	mov	r9, r7
    6daa:	002f      	movs	r7, r5
    6dac:	40df      	lsrs	r7, r3
    6dae:	46b8      	mov	r8, r7
    6db0:	46a3      	mov	fp, r4
    6db2:	464f      	mov	r7, r9
    6db4:	4644      	mov	r4, r8
    6db6:	4327      	orrs	r7, r4
    6db8:	465c      	mov	r4, fp
    6dba:	40a5      	lsls	r5, r4
    6dbc:	1e6c      	subs	r4, r5, #1
    6dbe:	41a5      	sbcs	r5, r4
    6dc0:	40d9      	lsrs	r1, r3
    6dc2:	433d      	orrs	r5, r7
    6dc4:	18ad      	adds	r5, r5, r2
    6dc6:	4295      	cmp	r5, r2
    6dc8:	419b      	sbcs	r3, r3
    6dca:	1809      	adds	r1, r1, r0
    6dcc:	425b      	negs	r3, r3
    6dce:	1859      	adds	r1, r3, r1
    6dd0:	4664      	mov	r4, ip
    6dd2:	e66b      	b.n	6aac <__aeabi_dadd+0x1d0>
    6dd4:	000c      	movs	r4, r1
    6dd6:	432c      	orrs	r4, r5
    6dd8:	d115      	bne.n	6e06 <__aeabi_dadd+0x52a>
    6dda:	0001      	movs	r1, r0
    6ddc:	4311      	orrs	r1, r2
    6dde:	d07b      	beq.n	6ed8 <__aeabi_dadd+0x5fc>
    6de0:	0001      	movs	r1, r0
    6de2:	0015      	movs	r5, r2
    6de4:	469a      	mov	sl, r3
    6de6:	4c51      	ldr	r4, [pc, #324]	; (6f2c <__aeabi_dadd+0x650>)
    6de8:	e5a1      	b.n	692e <__aeabi_dadd+0x52>
    6dea:	430d      	orrs	r5, r1
    6dec:	1e69      	subs	r1, r5, #1
    6dee:	418d      	sbcs	r5, r1
    6df0:	2100      	movs	r1, #0
    6df2:	b2ec      	uxtb	r4, r5
    6df4:	e72d      	b.n	6c52 <__aeabi_dadd+0x376>
    6df6:	4c4d      	ldr	r4, [pc, #308]	; (6f2c <__aeabi_dadd+0x650>)
    6df8:	45a4      	cmp	ip, r4
    6dfa:	d034      	beq.n	6e66 <__aeabi_dadd+0x58a>
    6dfc:	2480      	movs	r4, #128	; 0x80
    6dfe:	0424      	lsls	r4, r4, #16
    6e00:	425b      	negs	r3, r3
    6e02:	4321      	orrs	r1, r4
    6e04:	e7c6      	b.n	6d94 <__aeabi_dadd+0x4b8>
    6e06:	0004      	movs	r4, r0
    6e08:	4314      	orrs	r4, r2
    6e0a:	d04e      	beq.n	6eaa <__aeabi_dadd+0x5ce>
    6e0c:	08ed      	lsrs	r5, r5, #3
    6e0e:	074c      	lsls	r4, r1, #29
    6e10:	432c      	orrs	r4, r5
    6e12:	2580      	movs	r5, #128	; 0x80
    6e14:	08c9      	lsrs	r1, r1, #3
    6e16:	032d      	lsls	r5, r5, #12
    6e18:	4229      	tst	r1, r5
    6e1a:	d008      	beq.n	6e2e <__aeabi_dadd+0x552>
    6e1c:	08c6      	lsrs	r6, r0, #3
    6e1e:	422e      	tst	r6, r5
    6e20:	d105      	bne.n	6e2e <__aeabi_dadd+0x552>
    6e22:	08d2      	lsrs	r2, r2, #3
    6e24:	0741      	lsls	r1, r0, #29
    6e26:	4311      	orrs	r1, r2
    6e28:	000c      	movs	r4, r1
    6e2a:	469a      	mov	sl, r3
    6e2c:	0031      	movs	r1, r6
    6e2e:	0f62      	lsrs	r2, r4, #29
    6e30:	00c9      	lsls	r1, r1, #3
    6e32:	00e5      	lsls	r5, r4, #3
    6e34:	4311      	orrs	r1, r2
    6e36:	4c3d      	ldr	r4, [pc, #244]	; (6f2c <__aeabi_dadd+0x650>)
    6e38:	e579      	b.n	692e <__aeabi_dadd+0x52>
    6e3a:	0006      	movs	r6, r0
    6e3c:	4316      	orrs	r6, r2
    6e3e:	d100      	bne.n	6e42 <__aeabi_dadd+0x566>
    6e40:	e575      	b.n	692e <__aeabi_dadd+0x52>
    6e42:	1aae      	subs	r6, r5, r2
    6e44:	46b0      	mov	r8, r6
    6e46:	4545      	cmp	r5, r8
    6e48:	41bf      	sbcs	r7, r7
    6e4a:	1a0e      	subs	r6, r1, r0
    6e4c:	427f      	negs	r7, r7
    6e4e:	1bf6      	subs	r6, r6, r7
    6e50:	0237      	lsls	r7, r6, #8
    6e52:	d400      	bmi.n	6e56 <__aeabi_dadd+0x57a>
    6e54:	e5f4      	b.n	6a40 <__aeabi_dadd+0x164>
    6e56:	1b55      	subs	r5, r2, r5
    6e58:	42aa      	cmp	r2, r5
    6e5a:	41b6      	sbcs	r6, r6
    6e5c:	1a41      	subs	r1, r0, r1
    6e5e:	4276      	negs	r6, r6
    6e60:	1b89      	subs	r1, r1, r6
    6e62:	469a      	mov	sl, r3
    6e64:	e563      	b.n	692e <__aeabi_dadd+0x52>
    6e66:	0001      	movs	r1, r0
    6e68:	0015      	movs	r5, r2
    6e6a:	4664      	mov	r4, ip
    6e6c:	e55f      	b.n	692e <__aeabi_dadd+0x52>
    6e6e:	2200      	movs	r2, #0
    6e70:	2500      	movs	r5, #0
    6e72:	e57b      	b.n	696c <__aeabi_dadd+0x90>
    6e74:	2b00      	cmp	r3, #0
    6e76:	d03b      	beq.n	6ef0 <__aeabi_dadd+0x614>
    6e78:	0003      	movs	r3, r0
    6e7a:	4313      	orrs	r3, r2
    6e7c:	d015      	beq.n	6eaa <__aeabi_dadd+0x5ce>
    6e7e:	08ed      	lsrs	r5, r5, #3
    6e80:	074b      	lsls	r3, r1, #29
    6e82:	432b      	orrs	r3, r5
    6e84:	2580      	movs	r5, #128	; 0x80
    6e86:	08c9      	lsrs	r1, r1, #3
    6e88:	032d      	lsls	r5, r5, #12
    6e8a:	4229      	tst	r1, r5
    6e8c:	d007      	beq.n	6e9e <__aeabi_dadd+0x5c2>
    6e8e:	08c4      	lsrs	r4, r0, #3
    6e90:	422c      	tst	r4, r5
    6e92:	d104      	bne.n	6e9e <__aeabi_dadd+0x5c2>
    6e94:	0741      	lsls	r1, r0, #29
    6e96:	000b      	movs	r3, r1
    6e98:	0021      	movs	r1, r4
    6e9a:	08d2      	lsrs	r2, r2, #3
    6e9c:	4313      	orrs	r3, r2
    6e9e:	00c9      	lsls	r1, r1, #3
    6ea0:	0f5a      	lsrs	r2, r3, #29
    6ea2:	4311      	orrs	r1, r2
    6ea4:	00dd      	lsls	r5, r3, #3
    6ea6:	4c21      	ldr	r4, [pc, #132]	; (6f2c <__aeabi_dadd+0x650>)
    6ea8:	e541      	b.n	692e <__aeabi_dadd+0x52>
    6eaa:	4c20      	ldr	r4, [pc, #128]	; (6f2c <__aeabi_dadd+0x650>)
    6eac:	e53f      	b.n	692e <__aeabi_dadd+0x52>
    6eae:	2000      	movs	r0, #0
    6eb0:	e754      	b.n	6d5c <__aeabi_dadd+0x480>
    6eb2:	2600      	movs	r6, #0
    6eb4:	2500      	movs	r5, #0
    6eb6:	e5d1      	b.n	6a5c <__aeabi_dadd+0x180>
    6eb8:	0034      	movs	r4, r6
    6eba:	000f      	movs	r7, r1
    6ebc:	3c20      	subs	r4, #32
    6ebe:	40e7      	lsrs	r7, r4
    6ec0:	003c      	movs	r4, r7
    6ec2:	2e20      	cmp	r6, #32
    6ec4:	d02b      	beq.n	6f1e <__aeabi_dadd+0x642>
    6ec6:	2740      	movs	r7, #64	; 0x40
    6ec8:	1bbe      	subs	r6, r7, r6
    6eca:	40b1      	lsls	r1, r6
    6ecc:	430d      	orrs	r5, r1
    6ece:	1e69      	subs	r1, r5, #1
    6ed0:	418d      	sbcs	r5, r1
    6ed2:	2100      	movs	r1, #0
    6ed4:	432c      	orrs	r4, r5
    6ed6:	e6bc      	b.n	6c52 <__aeabi_dadd+0x376>
    6ed8:	2180      	movs	r1, #128	; 0x80
    6eda:	2600      	movs	r6, #0
    6edc:	0309      	lsls	r1, r1, #12
    6ede:	4c13      	ldr	r4, [pc, #76]	; (6f2c <__aeabi_dadd+0x650>)
    6ee0:	2500      	movs	r5, #0
    6ee2:	e5bb      	b.n	6a5c <__aeabi_dadd+0x180>
    6ee4:	430d      	orrs	r5, r1
    6ee6:	1e69      	subs	r1, r5, #1
    6ee8:	418d      	sbcs	r5, r1
    6eea:	2100      	movs	r1, #0
    6eec:	b2ed      	uxtb	r5, r5
    6eee:	e769      	b.n	6dc4 <__aeabi_dadd+0x4e8>
    6ef0:	0001      	movs	r1, r0
    6ef2:	0015      	movs	r5, r2
    6ef4:	4c0d      	ldr	r4, [pc, #52]	; (6f2c <__aeabi_dadd+0x650>)
    6ef6:	e51a      	b.n	692e <__aeabi_dadd+0x52>
    6ef8:	0001      	movs	r1, r0
    6efa:	0015      	movs	r5, r2
    6efc:	e517      	b.n	692e <__aeabi_dadd+0x52>
    6efe:	001c      	movs	r4, r3
    6f00:	000f      	movs	r7, r1
    6f02:	3c20      	subs	r4, #32
    6f04:	40e7      	lsrs	r7, r4
    6f06:	003c      	movs	r4, r7
    6f08:	2b20      	cmp	r3, #32
    6f0a:	d00c      	beq.n	6f26 <__aeabi_dadd+0x64a>
    6f0c:	2740      	movs	r7, #64	; 0x40
    6f0e:	1afb      	subs	r3, r7, r3
    6f10:	4099      	lsls	r1, r3
    6f12:	430d      	orrs	r5, r1
    6f14:	1e69      	subs	r1, r5, #1
    6f16:	418d      	sbcs	r5, r1
    6f18:	2100      	movs	r1, #0
    6f1a:	4325      	orrs	r5, r4
    6f1c:	e752      	b.n	6dc4 <__aeabi_dadd+0x4e8>
    6f1e:	2100      	movs	r1, #0
    6f20:	e7d4      	b.n	6ecc <__aeabi_dadd+0x5f0>
    6f22:	001d      	movs	r5, r3
    6f24:	e592      	b.n	6a4c <__aeabi_dadd+0x170>
    6f26:	2100      	movs	r1, #0
    6f28:	e7f3      	b.n	6f12 <__aeabi_dadd+0x636>
    6f2a:	46c0      	nop			; (mov r8, r8)
    6f2c:	000007ff 	.word	0x000007ff
    6f30:	ff7fffff 	.word	0xff7fffff

00006f34 <__aeabi_ddiv>:
    6f34:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f36:	4656      	mov	r6, sl
    6f38:	464d      	mov	r5, r9
    6f3a:	4644      	mov	r4, r8
    6f3c:	465f      	mov	r7, fp
    6f3e:	b4f0      	push	{r4, r5, r6, r7}
    6f40:	001d      	movs	r5, r3
    6f42:	030e      	lsls	r6, r1, #12
    6f44:	004c      	lsls	r4, r1, #1
    6f46:	0fcb      	lsrs	r3, r1, #31
    6f48:	b087      	sub	sp, #28
    6f4a:	0007      	movs	r7, r0
    6f4c:	4692      	mov	sl, r2
    6f4e:	4681      	mov	r9, r0
    6f50:	0b36      	lsrs	r6, r6, #12
    6f52:	0d64      	lsrs	r4, r4, #21
    6f54:	4698      	mov	r8, r3
    6f56:	d06a      	beq.n	702e <__aeabi_ddiv+0xfa>
    6f58:	4b6d      	ldr	r3, [pc, #436]	; (7110 <__aeabi_ddiv+0x1dc>)
    6f5a:	429c      	cmp	r4, r3
    6f5c:	d035      	beq.n	6fca <__aeabi_ddiv+0x96>
    6f5e:	2280      	movs	r2, #128	; 0x80
    6f60:	0f43      	lsrs	r3, r0, #29
    6f62:	0412      	lsls	r2, r2, #16
    6f64:	4313      	orrs	r3, r2
    6f66:	00f6      	lsls	r6, r6, #3
    6f68:	431e      	orrs	r6, r3
    6f6a:	00c3      	lsls	r3, r0, #3
    6f6c:	4699      	mov	r9, r3
    6f6e:	4b69      	ldr	r3, [pc, #420]	; (7114 <__aeabi_ddiv+0x1e0>)
    6f70:	2700      	movs	r7, #0
    6f72:	469c      	mov	ip, r3
    6f74:	2300      	movs	r3, #0
    6f76:	4464      	add	r4, ip
    6f78:	9302      	str	r3, [sp, #8]
    6f7a:	032b      	lsls	r3, r5, #12
    6f7c:	0068      	lsls	r0, r5, #1
    6f7e:	0b1b      	lsrs	r3, r3, #12
    6f80:	0fed      	lsrs	r5, r5, #31
    6f82:	4651      	mov	r1, sl
    6f84:	469b      	mov	fp, r3
    6f86:	0d40      	lsrs	r0, r0, #21
    6f88:	9500      	str	r5, [sp, #0]
    6f8a:	d100      	bne.n	6f8e <__aeabi_ddiv+0x5a>
    6f8c:	e078      	b.n	7080 <__aeabi_ddiv+0x14c>
    6f8e:	4b60      	ldr	r3, [pc, #384]	; (7110 <__aeabi_ddiv+0x1dc>)
    6f90:	4298      	cmp	r0, r3
    6f92:	d06c      	beq.n	706e <__aeabi_ddiv+0x13a>
    6f94:	465b      	mov	r3, fp
    6f96:	00da      	lsls	r2, r3, #3
    6f98:	0f4b      	lsrs	r3, r1, #29
    6f9a:	2180      	movs	r1, #128	; 0x80
    6f9c:	0409      	lsls	r1, r1, #16
    6f9e:	430b      	orrs	r3, r1
    6fa0:	4313      	orrs	r3, r2
    6fa2:	469b      	mov	fp, r3
    6fa4:	4653      	mov	r3, sl
    6fa6:	00d9      	lsls	r1, r3, #3
    6fa8:	4b5a      	ldr	r3, [pc, #360]	; (7114 <__aeabi_ddiv+0x1e0>)
    6faa:	469c      	mov	ip, r3
    6fac:	2300      	movs	r3, #0
    6fae:	4460      	add	r0, ip
    6fb0:	4642      	mov	r2, r8
    6fb2:	1a20      	subs	r0, r4, r0
    6fb4:	406a      	eors	r2, r5
    6fb6:	4692      	mov	sl, r2
    6fb8:	9001      	str	r0, [sp, #4]
    6fba:	431f      	orrs	r7, r3
    6fbc:	2f0f      	cmp	r7, #15
    6fbe:	d900      	bls.n	6fc2 <__aeabi_ddiv+0x8e>
    6fc0:	e0b0      	b.n	7124 <__aeabi_ddiv+0x1f0>
    6fc2:	4855      	ldr	r0, [pc, #340]	; (7118 <__aeabi_ddiv+0x1e4>)
    6fc4:	00bf      	lsls	r7, r7, #2
    6fc6:	59c0      	ldr	r0, [r0, r7]
    6fc8:	4687      	mov	pc, r0
    6fca:	4337      	orrs	r7, r6
    6fcc:	d000      	beq.n	6fd0 <__aeabi_ddiv+0x9c>
    6fce:	e088      	b.n	70e2 <__aeabi_ddiv+0x1ae>
    6fd0:	2300      	movs	r3, #0
    6fd2:	4699      	mov	r9, r3
    6fd4:	3302      	adds	r3, #2
    6fd6:	2708      	movs	r7, #8
    6fd8:	2600      	movs	r6, #0
    6fda:	9302      	str	r3, [sp, #8]
    6fdc:	e7cd      	b.n	6f7a <__aeabi_ddiv+0x46>
    6fde:	4643      	mov	r3, r8
    6fe0:	46b3      	mov	fp, r6
    6fe2:	4649      	mov	r1, r9
    6fe4:	9300      	str	r3, [sp, #0]
    6fe6:	9b02      	ldr	r3, [sp, #8]
    6fe8:	9a00      	ldr	r2, [sp, #0]
    6fea:	4692      	mov	sl, r2
    6fec:	2b02      	cmp	r3, #2
    6fee:	d000      	beq.n	6ff2 <__aeabi_ddiv+0xbe>
    6ff0:	e1bf      	b.n	7372 <__aeabi_ddiv+0x43e>
    6ff2:	2100      	movs	r1, #0
    6ff4:	4653      	mov	r3, sl
    6ff6:	2201      	movs	r2, #1
    6ff8:	2600      	movs	r6, #0
    6ffa:	4689      	mov	r9, r1
    6ffc:	401a      	ands	r2, r3
    6ffe:	4b44      	ldr	r3, [pc, #272]	; (7110 <__aeabi_ddiv+0x1dc>)
    7000:	2100      	movs	r1, #0
    7002:	0336      	lsls	r6, r6, #12
    7004:	0d0c      	lsrs	r4, r1, #20
    7006:	0524      	lsls	r4, r4, #20
    7008:	0b36      	lsrs	r6, r6, #12
    700a:	4326      	orrs	r6, r4
    700c:	4c43      	ldr	r4, [pc, #268]	; (711c <__aeabi_ddiv+0x1e8>)
    700e:	051b      	lsls	r3, r3, #20
    7010:	4026      	ands	r6, r4
    7012:	431e      	orrs	r6, r3
    7014:	0076      	lsls	r6, r6, #1
    7016:	07d2      	lsls	r2, r2, #31
    7018:	0876      	lsrs	r6, r6, #1
    701a:	4316      	orrs	r6, r2
    701c:	4648      	mov	r0, r9
    701e:	0031      	movs	r1, r6
    7020:	b007      	add	sp, #28
    7022:	bc3c      	pop	{r2, r3, r4, r5}
    7024:	4690      	mov	r8, r2
    7026:	4699      	mov	r9, r3
    7028:	46a2      	mov	sl, r4
    702a:	46ab      	mov	fp, r5
    702c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    702e:	0033      	movs	r3, r6
    7030:	4303      	orrs	r3, r0
    7032:	d04f      	beq.n	70d4 <__aeabi_ddiv+0x1a0>
    7034:	2e00      	cmp	r6, #0
    7036:	d100      	bne.n	703a <__aeabi_ddiv+0x106>
    7038:	e1bc      	b.n	73b4 <__aeabi_ddiv+0x480>
    703a:	0030      	movs	r0, r6
    703c:	f001 f8cc 	bl	81d8 <__clzsi2>
    7040:	0003      	movs	r3, r0
    7042:	3b0b      	subs	r3, #11
    7044:	2b1c      	cmp	r3, #28
    7046:	dd00      	ble.n	704a <__aeabi_ddiv+0x116>
    7048:	e1ad      	b.n	73a6 <__aeabi_ddiv+0x472>
    704a:	221d      	movs	r2, #29
    704c:	0001      	movs	r1, r0
    704e:	1ad3      	subs	r3, r2, r3
    7050:	3908      	subs	r1, #8
    7052:	003a      	movs	r2, r7
    7054:	408f      	lsls	r7, r1
    7056:	408e      	lsls	r6, r1
    7058:	40da      	lsrs	r2, r3
    705a:	46b9      	mov	r9, r7
    705c:	4316      	orrs	r6, r2
    705e:	4b30      	ldr	r3, [pc, #192]	; (7120 <__aeabi_ddiv+0x1ec>)
    7060:	2700      	movs	r7, #0
    7062:	469c      	mov	ip, r3
    7064:	2300      	movs	r3, #0
    7066:	4460      	add	r0, ip
    7068:	4244      	negs	r4, r0
    706a:	9302      	str	r3, [sp, #8]
    706c:	e785      	b.n	6f7a <__aeabi_ddiv+0x46>
    706e:	4653      	mov	r3, sl
    7070:	465a      	mov	r2, fp
    7072:	4313      	orrs	r3, r2
    7074:	d12c      	bne.n	70d0 <__aeabi_ddiv+0x19c>
    7076:	2300      	movs	r3, #0
    7078:	2100      	movs	r1, #0
    707a:	469b      	mov	fp, r3
    707c:	3302      	adds	r3, #2
    707e:	e797      	b.n	6fb0 <__aeabi_ddiv+0x7c>
    7080:	430b      	orrs	r3, r1
    7082:	d020      	beq.n	70c6 <__aeabi_ddiv+0x192>
    7084:	465b      	mov	r3, fp
    7086:	2b00      	cmp	r3, #0
    7088:	d100      	bne.n	708c <__aeabi_ddiv+0x158>
    708a:	e19e      	b.n	73ca <__aeabi_ddiv+0x496>
    708c:	4658      	mov	r0, fp
    708e:	f001 f8a3 	bl	81d8 <__clzsi2>
    7092:	0003      	movs	r3, r0
    7094:	3b0b      	subs	r3, #11
    7096:	2b1c      	cmp	r3, #28
    7098:	dd00      	ble.n	709c <__aeabi_ddiv+0x168>
    709a:	e18f      	b.n	73bc <__aeabi_ddiv+0x488>
    709c:	0002      	movs	r2, r0
    709e:	4659      	mov	r1, fp
    70a0:	3a08      	subs	r2, #8
    70a2:	4091      	lsls	r1, r2
    70a4:	468b      	mov	fp, r1
    70a6:	211d      	movs	r1, #29
    70a8:	1acb      	subs	r3, r1, r3
    70aa:	4651      	mov	r1, sl
    70ac:	40d9      	lsrs	r1, r3
    70ae:	000b      	movs	r3, r1
    70b0:	4659      	mov	r1, fp
    70b2:	430b      	orrs	r3, r1
    70b4:	4651      	mov	r1, sl
    70b6:	469b      	mov	fp, r3
    70b8:	4091      	lsls	r1, r2
    70ba:	4b19      	ldr	r3, [pc, #100]	; (7120 <__aeabi_ddiv+0x1ec>)
    70bc:	469c      	mov	ip, r3
    70be:	4460      	add	r0, ip
    70c0:	4240      	negs	r0, r0
    70c2:	2300      	movs	r3, #0
    70c4:	e774      	b.n	6fb0 <__aeabi_ddiv+0x7c>
    70c6:	2300      	movs	r3, #0
    70c8:	2100      	movs	r1, #0
    70ca:	469b      	mov	fp, r3
    70cc:	3301      	adds	r3, #1
    70ce:	e76f      	b.n	6fb0 <__aeabi_ddiv+0x7c>
    70d0:	2303      	movs	r3, #3
    70d2:	e76d      	b.n	6fb0 <__aeabi_ddiv+0x7c>
    70d4:	2300      	movs	r3, #0
    70d6:	4699      	mov	r9, r3
    70d8:	3301      	adds	r3, #1
    70da:	2704      	movs	r7, #4
    70dc:	2600      	movs	r6, #0
    70de:	9302      	str	r3, [sp, #8]
    70e0:	e74b      	b.n	6f7a <__aeabi_ddiv+0x46>
    70e2:	2303      	movs	r3, #3
    70e4:	270c      	movs	r7, #12
    70e6:	9302      	str	r3, [sp, #8]
    70e8:	e747      	b.n	6f7a <__aeabi_ddiv+0x46>
    70ea:	2201      	movs	r2, #1
    70ec:	1ad5      	subs	r5, r2, r3
    70ee:	2d38      	cmp	r5, #56	; 0x38
    70f0:	dc00      	bgt.n	70f4 <__aeabi_ddiv+0x1c0>
    70f2:	e1b0      	b.n	7456 <__aeabi_ddiv+0x522>
    70f4:	4653      	mov	r3, sl
    70f6:	401a      	ands	r2, r3
    70f8:	2100      	movs	r1, #0
    70fa:	2300      	movs	r3, #0
    70fc:	2600      	movs	r6, #0
    70fe:	4689      	mov	r9, r1
    7100:	e77e      	b.n	7000 <__aeabi_ddiv+0xcc>
    7102:	2300      	movs	r3, #0
    7104:	2680      	movs	r6, #128	; 0x80
    7106:	4699      	mov	r9, r3
    7108:	2200      	movs	r2, #0
    710a:	0336      	lsls	r6, r6, #12
    710c:	4b00      	ldr	r3, [pc, #0]	; (7110 <__aeabi_ddiv+0x1dc>)
    710e:	e777      	b.n	7000 <__aeabi_ddiv+0xcc>
    7110:	000007ff 	.word	0x000007ff
    7114:	fffffc01 	.word	0xfffffc01
    7118:	00009a6c 	.word	0x00009a6c
    711c:	800fffff 	.word	0x800fffff
    7120:	000003f3 	.word	0x000003f3
    7124:	455e      	cmp	r6, fp
    7126:	d900      	bls.n	712a <__aeabi_ddiv+0x1f6>
    7128:	e172      	b.n	7410 <__aeabi_ddiv+0x4dc>
    712a:	d100      	bne.n	712e <__aeabi_ddiv+0x1fa>
    712c:	e16d      	b.n	740a <__aeabi_ddiv+0x4d6>
    712e:	9b01      	ldr	r3, [sp, #4]
    7130:	464d      	mov	r5, r9
    7132:	3b01      	subs	r3, #1
    7134:	9301      	str	r3, [sp, #4]
    7136:	2300      	movs	r3, #0
    7138:	0034      	movs	r4, r6
    713a:	9302      	str	r3, [sp, #8]
    713c:	465b      	mov	r3, fp
    713e:	021e      	lsls	r6, r3, #8
    7140:	0e0b      	lsrs	r3, r1, #24
    7142:	431e      	orrs	r6, r3
    7144:	020b      	lsls	r3, r1, #8
    7146:	9303      	str	r3, [sp, #12]
    7148:	0c33      	lsrs	r3, r6, #16
    714a:	4699      	mov	r9, r3
    714c:	0433      	lsls	r3, r6, #16
    714e:	0c1b      	lsrs	r3, r3, #16
    7150:	4649      	mov	r1, r9
    7152:	0020      	movs	r0, r4
    7154:	9300      	str	r3, [sp, #0]
    7156:	f7ff f93f 	bl	63d8 <__aeabi_uidiv>
    715a:	9b00      	ldr	r3, [sp, #0]
    715c:	0037      	movs	r7, r6
    715e:	4343      	muls	r3, r0
    7160:	0006      	movs	r6, r0
    7162:	4649      	mov	r1, r9
    7164:	0020      	movs	r0, r4
    7166:	4698      	mov	r8, r3
    7168:	f7ff f9bc 	bl	64e4 <__aeabi_uidivmod>
    716c:	0c2c      	lsrs	r4, r5, #16
    716e:	0409      	lsls	r1, r1, #16
    7170:	430c      	orrs	r4, r1
    7172:	45a0      	cmp	r8, r4
    7174:	d909      	bls.n	718a <__aeabi_ddiv+0x256>
    7176:	19e4      	adds	r4, r4, r7
    7178:	1e73      	subs	r3, r6, #1
    717a:	42a7      	cmp	r7, r4
    717c:	d900      	bls.n	7180 <__aeabi_ddiv+0x24c>
    717e:	e15c      	b.n	743a <__aeabi_ddiv+0x506>
    7180:	45a0      	cmp	r8, r4
    7182:	d800      	bhi.n	7186 <__aeabi_ddiv+0x252>
    7184:	e159      	b.n	743a <__aeabi_ddiv+0x506>
    7186:	3e02      	subs	r6, #2
    7188:	19e4      	adds	r4, r4, r7
    718a:	4643      	mov	r3, r8
    718c:	1ae4      	subs	r4, r4, r3
    718e:	4649      	mov	r1, r9
    7190:	0020      	movs	r0, r4
    7192:	f7ff f921 	bl	63d8 <__aeabi_uidiv>
    7196:	0003      	movs	r3, r0
    7198:	9a00      	ldr	r2, [sp, #0]
    719a:	4680      	mov	r8, r0
    719c:	4353      	muls	r3, r2
    719e:	4649      	mov	r1, r9
    71a0:	0020      	movs	r0, r4
    71a2:	469b      	mov	fp, r3
    71a4:	f7ff f99e 	bl	64e4 <__aeabi_uidivmod>
    71a8:	042a      	lsls	r2, r5, #16
    71aa:	0409      	lsls	r1, r1, #16
    71ac:	0c12      	lsrs	r2, r2, #16
    71ae:	430a      	orrs	r2, r1
    71b0:	4593      	cmp	fp, r2
    71b2:	d90d      	bls.n	71d0 <__aeabi_ddiv+0x29c>
    71b4:	4643      	mov	r3, r8
    71b6:	19d2      	adds	r2, r2, r7
    71b8:	3b01      	subs	r3, #1
    71ba:	4297      	cmp	r7, r2
    71bc:	d900      	bls.n	71c0 <__aeabi_ddiv+0x28c>
    71be:	e13a      	b.n	7436 <__aeabi_ddiv+0x502>
    71c0:	4593      	cmp	fp, r2
    71c2:	d800      	bhi.n	71c6 <__aeabi_ddiv+0x292>
    71c4:	e137      	b.n	7436 <__aeabi_ddiv+0x502>
    71c6:	2302      	movs	r3, #2
    71c8:	425b      	negs	r3, r3
    71ca:	469c      	mov	ip, r3
    71cc:	19d2      	adds	r2, r2, r7
    71ce:	44e0      	add	r8, ip
    71d0:	465b      	mov	r3, fp
    71d2:	1ad2      	subs	r2, r2, r3
    71d4:	4643      	mov	r3, r8
    71d6:	0436      	lsls	r6, r6, #16
    71d8:	4333      	orrs	r3, r6
    71da:	469b      	mov	fp, r3
    71dc:	9903      	ldr	r1, [sp, #12]
    71de:	0c18      	lsrs	r0, r3, #16
    71e0:	0c0b      	lsrs	r3, r1, #16
    71e2:	001d      	movs	r5, r3
    71e4:	9305      	str	r3, [sp, #20]
    71e6:	0409      	lsls	r1, r1, #16
    71e8:	465b      	mov	r3, fp
    71ea:	0c09      	lsrs	r1, r1, #16
    71ec:	000c      	movs	r4, r1
    71ee:	041b      	lsls	r3, r3, #16
    71f0:	0c1b      	lsrs	r3, r3, #16
    71f2:	4344      	muls	r4, r0
    71f4:	9104      	str	r1, [sp, #16]
    71f6:	4359      	muls	r1, r3
    71f8:	436b      	muls	r3, r5
    71fa:	4368      	muls	r0, r5
    71fc:	191b      	adds	r3, r3, r4
    71fe:	0c0d      	lsrs	r5, r1, #16
    7200:	18eb      	adds	r3, r5, r3
    7202:	429c      	cmp	r4, r3
    7204:	d903      	bls.n	720e <__aeabi_ddiv+0x2da>
    7206:	2480      	movs	r4, #128	; 0x80
    7208:	0264      	lsls	r4, r4, #9
    720a:	46a4      	mov	ip, r4
    720c:	4460      	add	r0, ip
    720e:	0c1c      	lsrs	r4, r3, #16
    7210:	0409      	lsls	r1, r1, #16
    7212:	041b      	lsls	r3, r3, #16
    7214:	0c09      	lsrs	r1, r1, #16
    7216:	1820      	adds	r0, r4, r0
    7218:	185d      	adds	r5, r3, r1
    721a:	4282      	cmp	r2, r0
    721c:	d200      	bcs.n	7220 <__aeabi_ddiv+0x2ec>
    721e:	e0de      	b.n	73de <__aeabi_ddiv+0x4aa>
    7220:	d100      	bne.n	7224 <__aeabi_ddiv+0x2f0>
    7222:	e0d7      	b.n	73d4 <__aeabi_ddiv+0x4a0>
    7224:	1a16      	subs	r6, r2, r0
    7226:	9b02      	ldr	r3, [sp, #8]
    7228:	469c      	mov	ip, r3
    722a:	1b5d      	subs	r5, r3, r5
    722c:	45ac      	cmp	ip, r5
    722e:	419b      	sbcs	r3, r3
    7230:	425b      	negs	r3, r3
    7232:	1af6      	subs	r6, r6, r3
    7234:	42b7      	cmp	r7, r6
    7236:	d100      	bne.n	723a <__aeabi_ddiv+0x306>
    7238:	e106      	b.n	7448 <__aeabi_ddiv+0x514>
    723a:	4649      	mov	r1, r9
    723c:	0030      	movs	r0, r6
    723e:	f7ff f8cb 	bl	63d8 <__aeabi_uidiv>
    7242:	9b00      	ldr	r3, [sp, #0]
    7244:	0004      	movs	r4, r0
    7246:	4343      	muls	r3, r0
    7248:	4649      	mov	r1, r9
    724a:	0030      	movs	r0, r6
    724c:	4698      	mov	r8, r3
    724e:	f7ff f949 	bl	64e4 <__aeabi_uidivmod>
    7252:	0c2e      	lsrs	r6, r5, #16
    7254:	0409      	lsls	r1, r1, #16
    7256:	430e      	orrs	r6, r1
    7258:	45b0      	cmp	r8, r6
    725a:	d909      	bls.n	7270 <__aeabi_ddiv+0x33c>
    725c:	19f6      	adds	r6, r6, r7
    725e:	1e63      	subs	r3, r4, #1
    7260:	42b7      	cmp	r7, r6
    7262:	d900      	bls.n	7266 <__aeabi_ddiv+0x332>
    7264:	e0f3      	b.n	744e <__aeabi_ddiv+0x51a>
    7266:	45b0      	cmp	r8, r6
    7268:	d800      	bhi.n	726c <__aeabi_ddiv+0x338>
    726a:	e0f0      	b.n	744e <__aeabi_ddiv+0x51a>
    726c:	3c02      	subs	r4, #2
    726e:	19f6      	adds	r6, r6, r7
    7270:	4643      	mov	r3, r8
    7272:	1af3      	subs	r3, r6, r3
    7274:	4649      	mov	r1, r9
    7276:	0018      	movs	r0, r3
    7278:	9302      	str	r3, [sp, #8]
    727a:	f7ff f8ad 	bl	63d8 <__aeabi_uidiv>
    727e:	9b00      	ldr	r3, [sp, #0]
    7280:	0006      	movs	r6, r0
    7282:	4343      	muls	r3, r0
    7284:	4649      	mov	r1, r9
    7286:	9802      	ldr	r0, [sp, #8]
    7288:	4698      	mov	r8, r3
    728a:	f7ff f92b 	bl	64e4 <__aeabi_uidivmod>
    728e:	042d      	lsls	r5, r5, #16
    7290:	0409      	lsls	r1, r1, #16
    7292:	0c2d      	lsrs	r5, r5, #16
    7294:	430d      	orrs	r5, r1
    7296:	45a8      	cmp	r8, r5
    7298:	d909      	bls.n	72ae <__aeabi_ddiv+0x37a>
    729a:	19ed      	adds	r5, r5, r7
    729c:	1e73      	subs	r3, r6, #1
    729e:	42af      	cmp	r7, r5
    72a0:	d900      	bls.n	72a4 <__aeabi_ddiv+0x370>
    72a2:	e0d6      	b.n	7452 <__aeabi_ddiv+0x51e>
    72a4:	45a8      	cmp	r8, r5
    72a6:	d800      	bhi.n	72aa <__aeabi_ddiv+0x376>
    72a8:	e0d3      	b.n	7452 <__aeabi_ddiv+0x51e>
    72aa:	3e02      	subs	r6, #2
    72ac:	19ed      	adds	r5, r5, r7
    72ae:	0424      	lsls	r4, r4, #16
    72b0:	0021      	movs	r1, r4
    72b2:	4643      	mov	r3, r8
    72b4:	4331      	orrs	r1, r6
    72b6:	9e04      	ldr	r6, [sp, #16]
    72b8:	9a05      	ldr	r2, [sp, #20]
    72ba:	0030      	movs	r0, r6
    72bc:	1aed      	subs	r5, r5, r3
    72be:	040b      	lsls	r3, r1, #16
    72c0:	0c0c      	lsrs	r4, r1, #16
    72c2:	0c1b      	lsrs	r3, r3, #16
    72c4:	4358      	muls	r0, r3
    72c6:	4366      	muls	r6, r4
    72c8:	4353      	muls	r3, r2
    72ca:	4354      	muls	r4, r2
    72cc:	199a      	adds	r2, r3, r6
    72ce:	0c03      	lsrs	r3, r0, #16
    72d0:	189b      	adds	r3, r3, r2
    72d2:	429e      	cmp	r6, r3
    72d4:	d903      	bls.n	72de <__aeabi_ddiv+0x3aa>
    72d6:	2280      	movs	r2, #128	; 0x80
    72d8:	0252      	lsls	r2, r2, #9
    72da:	4694      	mov	ip, r2
    72dc:	4464      	add	r4, ip
    72de:	0c1a      	lsrs	r2, r3, #16
    72e0:	0400      	lsls	r0, r0, #16
    72e2:	041b      	lsls	r3, r3, #16
    72e4:	0c00      	lsrs	r0, r0, #16
    72e6:	1914      	adds	r4, r2, r4
    72e8:	181b      	adds	r3, r3, r0
    72ea:	42a5      	cmp	r5, r4
    72ec:	d350      	bcc.n	7390 <__aeabi_ddiv+0x45c>
    72ee:	d04d      	beq.n	738c <__aeabi_ddiv+0x458>
    72f0:	2301      	movs	r3, #1
    72f2:	4319      	orrs	r1, r3
    72f4:	4a96      	ldr	r2, [pc, #600]	; (7550 <__aeabi_ddiv+0x61c>)
    72f6:	9b01      	ldr	r3, [sp, #4]
    72f8:	4694      	mov	ip, r2
    72fa:	4463      	add	r3, ip
    72fc:	2b00      	cmp	r3, #0
    72fe:	dc00      	bgt.n	7302 <__aeabi_ddiv+0x3ce>
    7300:	e6f3      	b.n	70ea <__aeabi_ddiv+0x1b6>
    7302:	074a      	lsls	r2, r1, #29
    7304:	d009      	beq.n	731a <__aeabi_ddiv+0x3e6>
    7306:	220f      	movs	r2, #15
    7308:	400a      	ands	r2, r1
    730a:	2a04      	cmp	r2, #4
    730c:	d005      	beq.n	731a <__aeabi_ddiv+0x3e6>
    730e:	1d0a      	adds	r2, r1, #4
    7310:	428a      	cmp	r2, r1
    7312:	4189      	sbcs	r1, r1
    7314:	4249      	negs	r1, r1
    7316:	448b      	add	fp, r1
    7318:	0011      	movs	r1, r2
    731a:	465a      	mov	r2, fp
    731c:	01d2      	lsls	r2, r2, #7
    731e:	d508      	bpl.n	7332 <__aeabi_ddiv+0x3fe>
    7320:	465a      	mov	r2, fp
    7322:	4b8c      	ldr	r3, [pc, #560]	; (7554 <__aeabi_ddiv+0x620>)
    7324:	401a      	ands	r2, r3
    7326:	4693      	mov	fp, r2
    7328:	2280      	movs	r2, #128	; 0x80
    732a:	00d2      	lsls	r2, r2, #3
    732c:	4694      	mov	ip, r2
    732e:	9b01      	ldr	r3, [sp, #4]
    7330:	4463      	add	r3, ip
    7332:	4a89      	ldr	r2, [pc, #548]	; (7558 <__aeabi_ddiv+0x624>)
    7334:	4293      	cmp	r3, r2
    7336:	dd00      	ble.n	733a <__aeabi_ddiv+0x406>
    7338:	e65b      	b.n	6ff2 <__aeabi_ddiv+0xbe>
    733a:	465a      	mov	r2, fp
    733c:	08c9      	lsrs	r1, r1, #3
    733e:	0750      	lsls	r0, r2, #29
    7340:	4308      	orrs	r0, r1
    7342:	0256      	lsls	r6, r2, #9
    7344:	4651      	mov	r1, sl
    7346:	2201      	movs	r2, #1
    7348:	055b      	lsls	r3, r3, #21
    734a:	4681      	mov	r9, r0
    734c:	0b36      	lsrs	r6, r6, #12
    734e:	0d5b      	lsrs	r3, r3, #21
    7350:	400a      	ands	r2, r1
    7352:	e655      	b.n	7000 <__aeabi_ddiv+0xcc>
    7354:	2380      	movs	r3, #128	; 0x80
    7356:	031b      	lsls	r3, r3, #12
    7358:	421e      	tst	r6, r3
    735a:	d011      	beq.n	7380 <__aeabi_ddiv+0x44c>
    735c:	465a      	mov	r2, fp
    735e:	421a      	tst	r2, r3
    7360:	d10e      	bne.n	7380 <__aeabi_ddiv+0x44c>
    7362:	465e      	mov	r6, fp
    7364:	431e      	orrs	r6, r3
    7366:	0336      	lsls	r6, r6, #12
    7368:	0b36      	lsrs	r6, r6, #12
    736a:	002a      	movs	r2, r5
    736c:	4689      	mov	r9, r1
    736e:	4b7b      	ldr	r3, [pc, #492]	; (755c <__aeabi_ddiv+0x628>)
    7370:	e646      	b.n	7000 <__aeabi_ddiv+0xcc>
    7372:	2b03      	cmp	r3, #3
    7374:	d100      	bne.n	7378 <__aeabi_ddiv+0x444>
    7376:	e0e1      	b.n	753c <__aeabi_ddiv+0x608>
    7378:	2b01      	cmp	r3, #1
    737a:	d1bb      	bne.n	72f4 <__aeabi_ddiv+0x3c0>
    737c:	401a      	ands	r2, r3
    737e:	e6bb      	b.n	70f8 <__aeabi_ddiv+0x1c4>
    7380:	431e      	orrs	r6, r3
    7382:	0336      	lsls	r6, r6, #12
    7384:	0b36      	lsrs	r6, r6, #12
    7386:	4642      	mov	r2, r8
    7388:	4b74      	ldr	r3, [pc, #464]	; (755c <__aeabi_ddiv+0x628>)
    738a:	e639      	b.n	7000 <__aeabi_ddiv+0xcc>
    738c:	2b00      	cmp	r3, #0
    738e:	d0b1      	beq.n	72f4 <__aeabi_ddiv+0x3c0>
    7390:	197d      	adds	r5, r7, r5
    7392:	1e4a      	subs	r2, r1, #1
    7394:	42af      	cmp	r7, r5
    7396:	d952      	bls.n	743e <__aeabi_ddiv+0x50a>
    7398:	0011      	movs	r1, r2
    739a:	42a5      	cmp	r5, r4
    739c:	d1a8      	bne.n	72f0 <__aeabi_ddiv+0x3bc>
    739e:	9a03      	ldr	r2, [sp, #12]
    73a0:	429a      	cmp	r2, r3
    73a2:	d1a5      	bne.n	72f0 <__aeabi_ddiv+0x3bc>
    73a4:	e7a6      	b.n	72f4 <__aeabi_ddiv+0x3c0>
    73a6:	0003      	movs	r3, r0
    73a8:	003e      	movs	r6, r7
    73aa:	3b28      	subs	r3, #40	; 0x28
    73ac:	409e      	lsls	r6, r3
    73ae:	2300      	movs	r3, #0
    73b0:	4699      	mov	r9, r3
    73b2:	e654      	b.n	705e <__aeabi_ddiv+0x12a>
    73b4:	f000 ff10 	bl	81d8 <__clzsi2>
    73b8:	3020      	adds	r0, #32
    73ba:	e641      	b.n	7040 <__aeabi_ddiv+0x10c>
    73bc:	0003      	movs	r3, r0
    73be:	4652      	mov	r2, sl
    73c0:	3b28      	subs	r3, #40	; 0x28
    73c2:	409a      	lsls	r2, r3
    73c4:	2100      	movs	r1, #0
    73c6:	4693      	mov	fp, r2
    73c8:	e677      	b.n	70ba <__aeabi_ddiv+0x186>
    73ca:	4650      	mov	r0, sl
    73cc:	f000 ff04 	bl	81d8 <__clzsi2>
    73d0:	3020      	adds	r0, #32
    73d2:	e65e      	b.n	7092 <__aeabi_ddiv+0x15e>
    73d4:	9b02      	ldr	r3, [sp, #8]
    73d6:	2600      	movs	r6, #0
    73d8:	42ab      	cmp	r3, r5
    73da:	d300      	bcc.n	73de <__aeabi_ddiv+0x4aa>
    73dc:	e723      	b.n	7226 <__aeabi_ddiv+0x2f2>
    73de:	9e03      	ldr	r6, [sp, #12]
    73e0:	9902      	ldr	r1, [sp, #8]
    73e2:	46b4      	mov	ip, r6
    73e4:	4461      	add	r1, ip
    73e6:	4688      	mov	r8, r1
    73e8:	45b0      	cmp	r8, r6
    73ea:	41b6      	sbcs	r6, r6
    73ec:	465b      	mov	r3, fp
    73ee:	4276      	negs	r6, r6
    73f0:	19f6      	adds	r6, r6, r7
    73f2:	18b2      	adds	r2, r6, r2
    73f4:	3b01      	subs	r3, #1
    73f6:	9102      	str	r1, [sp, #8]
    73f8:	4297      	cmp	r7, r2
    73fa:	d213      	bcs.n	7424 <__aeabi_ddiv+0x4f0>
    73fc:	4290      	cmp	r0, r2
    73fe:	d84f      	bhi.n	74a0 <__aeabi_ddiv+0x56c>
    7400:	d100      	bne.n	7404 <__aeabi_ddiv+0x4d0>
    7402:	e08e      	b.n	7522 <__aeabi_ddiv+0x5ee>
    7404:	1a16      	subs	r6, r2, r0
    7406:	469b      	mov	fp, r3
    7408:	e70d      	b.n	7226 <__aeabi_ddiv+0x2f2>
    740a:	4589      	cmp	r9, r1
    740c:	d200      	bcs.n	7410 <__aeabi_ddiv+0x4dc>
    740e:	e68e      	b.n	712e <__aeabi_ddiv+0x1fa>
    7410:	0874      	lsrs	r4, r6, #1
    7412:	464b      	mov	r3, r9
    7414:	07f6      	lsls	r6, r6, #31
    7416:	0035      	movs	r5, r6
    7418:	085b      	lsrs	r3, r3, #1
    741a:	431d      	orrs	r5, r3
    741c:	464b      	mov	r3, r9
    741e:	07db      	lsls	r3, r3, #31
    7420:	9302      	str	r3, [sp, #8]
    7422:	e68b      	b.n	713c <__aeabi_ddiv+0x208>
    7424:	4297      	cmp	r7, r2
    7426:	d1ed      	bne.n	7404 <__aeabi_ddiv+0x4d0>
    7428:	9903      	ldr	r1, [sp, #12]
    742a:	9c02      	ldr	r4, [sp, #8]
    742c:	42a1      	cmp	r1, r4
    742e:	d9e5      	bls.n	73fc <__aeabi_ddiv+0x4c8>
    7430:	1a3e      	subs	r6, r7, r0
    7432:	469b      	mov	fp, r3
    7434:	e6f7      	b.n	7226 <__aeabi_ddiv+0x2f2>
    7436:	4698      	mov	r8, r3
    7438:	e6ca      	b.n	71d0 <__aeabi_ddiv+0x29c>
    743a:	001e      	movs	r6, r3
    743c:	e6a5      	b.n	718a <__aeabi_ddiv+0x256>
    743e:	42ac      	cmp	r4, r5
    7440:	d83e      	bhi.n	74c0 <__aeabi_ddiv+0x58c>
    7442:	d074      	beq.n	752e <__aeabi_ddiv+0x5fa>
    7444:	0011      	movs	r1, r2
    7446:	e753      	b.n	72f0 <__aeabi_ddiv+0x3bc>
    7448:	2101      	movs	r1, #1
    744a:	4249      	negs	r1, r1
    744c:	e752      	b.n	72f4 <__aeabi_ddiv+0x3c0>
    744e:	001c      	movs	r4, r3
    7450:	e70e      	b.n	7270 <__aeabi_ddiv+0x33c>
    7452:	001e      	movs	r6, r3
    7454:	e72b      	b.n	72ae <__aeabi_ddiv+0x37a>
    7456:	2d1f      	cmp	r5, #31
    7458:	dc3c      	bgt.n	74d4 <__aeabi_ddiv+0x5a0>
    745a:	2320      	movs	r3, #32
    745c:	000a      	movs	r2, r1
    745e:	4658      	mov	r0, fp
    7460:	1b5b      	subs	r3, r3, r5
    7462:	4098      	lsls	r0, r3
    7464:	40ea      	lsrs	r2, r5
    7466:	4099      	lsls	r1, r3
    7468:	4302      	orrs	r2, r0
    746a:	1e48      	subs	r0, r1, #1
    746c:	4181      	sbcs	r1, r0
    746e:	465e      	mov	r6, fp
    7470:	4311      	orrs	r1, r2
    7472:	40ee      	lsrs	r6, r5
    7474:	074b      	lsls	r3, r1, #29
    7476:	d009      	beq.n	748c <__aeabi_ddiv+0x558>
    7478:	230f      	movs	r3, #15
    747a:	400b      	ands	r3, r1
    747c:	2b04      	cmp	r3, #4
    747e:	d005      	beq.n	748c <__aeabi_ddiv+0x558>
    7480:	000b      	movs	r3, r1
    7482:	1d19      	adds	r1, r3, #4
    7484:	4299      	cmp	r1, r3
    7486:	419b      	sbcs	r3, r3
    7488:	425b      	negs	r3, r3
    748a:	18f6      	adds	r6, r6, r3
    748c:	0233      	lsls	r3, r6, #8
    748e:	d53c      	bpl.n	750a <__aeabi_ddiv+0x5d6>
    7490:	4653      	mov	r3, sl
    7492:	2201      	movs	r2, #1
    7494:	2100      	movs	r1, #0
    7496:	401a      	ands	r2, r3
    7498:	2600      	movs	r6, #0
    749a:	2301      	movs	r3, #1
    749c:	4689      	mov	r9, r1
    749e:	e5af      	b.n	7000 <__aeabi_ddiv+0xcc>
    74a0:	2302      	movs	r3, #2
    74a2:	425b      	negs	r3, r3
    74a4:	469c      	mov	ip, r3
    74a6:	9c03      	ldr	r4, [sp, #12]
    74a8:	44e3      	add	fp, ip
    74aa:	46a4      	mov	ip, r4
    74ac:	9b02      	ldr	r3, [sp, #8]
    74ae:	4463      	add	r3, ip
    74b0:	4698      	mov	r8, r3
    74b2:	45a0      	cmp	r8, r4
    74b4:	41b6      	sbcs	r6, r6
    74b6:	4276      	negs	r6, r6
    74b8:	19f6      	adds	r6, r6, r7
    74ba:	9302      	str	r3, [sp, #8]
    74bc:	18b2      	adds	r2, r6, r2
    74be:	e6b1      	b.n	7224 <__aeabi_ddiv+0x2f0>
    74c0:	9803      	ldr	r0, [sp, #12]
    74c2:	1e8a      	subs	r2, r1, #2
    74c4:	0041      	lsls	r1, r0, #1
    74c6:	4281      	cmp	r1, r0
    74c8:	41b6      	sbcs	r6, r6
    74ca:	4276      	negs	r6, r6
    74cc:	19f6      	adds	r6, r6, r7
    74ce:	19ad      	adds	r5, r5, r6
    74d0:	9103      	str	r1, [sp, #12]
    74d2:	e761      	b.n	7398 <__aeabi_ddiv+0x464>
    74d4:	221f      	movs	r2, #31
    74d6:	4252      	negs	r2, r2
    74d8:	1ad3      	subs	r3, r2, r3
    74da:	465a      	mov	r2, fp
    74dc:	40da      	lsrs	r2, r3
    74de:	0013      	movs	r3, r2
    74e0:	2d20      	cmp	r5, #32
    74e2:	d029      	beq.n	7538 <__aeabi_ddiv+0x604>
    74e4:	2240      	movs	r2, #64	; 0x40
    74e6:	4658      	mov	r0, fp
    74e8:	1b55      	subs	r5, r2, r5
    74ea:	40a8      	lsls	r0, r5
    74ec:	4301      	orrs	r1, r0
    74ee:	1e48      	subs	r0, r1, #1
    74f0:	4181      	sbcs	r1, r0
    74f2:	2007      	movs	r0, #7
    74f4:	430b      	orrs	r3, r1
    74f6:	4018      	ands	r0, r3
    74f8:	2600      	movs	r6, #0
    74fa:	2800      	cmp	r0, #0
    74fc:	d009      	beq.n	7512 <__aeabi_ddiv+0x5de>
    74fe:	220f      	movs	r2, #15
    7500:	2600      	movs	r6, #0
    7502:	401a      	ands	r2, r3
    7504:	0019      	movs	r1, r3
    7506:	2a04      	cmp	r2, #4
    7508:	d1bb      	bne.n	7482 <__aeabi_ddiv+0x54e>
    750a:	000b      	movs	r3, r1
    750c:	0770      	lsls	r0, r6, #29
    750e:	0276      	lsls	r6, r6, #9
    7510:	0b36      	lsrs	r6, r6, #12
    7512:	08db      	lsrs	r3, r3, #3
    7514:	4303      	orrs	r3, r0
    7516:	4699      	mov	r9, r3
    7518:	2201      	movs	r2, #1
    751a:	4653      	mov	r3, sl
    751c:	401a      	ands	r2, r3
    751e:	2300      	movs	r3, #0
    7520:	e56e      	b.n	7000 <__aeabi_ddiv+0xcc>
    7522:	9902      	ldr	r1, [sp, #8]
    7524:	428d      	cmp	r5, r1
    7526:	d8bb      	bhi.n	74a0 <__aeabi_ddiv+0x56c>
    7528:	469b      	mov	fp, r3
    752a:	2600      	movs	r6, #0
    752c:	e67b      	b.n	7226 <__aeabi_ddiv+0x2f2>
    752e:	9803      	ldr	r0, [sp, #12]
    7530:	4298      	cmp	r0, r3
    7532:	d3c5      	bcc.n	74c0 <__aeabi_ddiv+0x58c>
    7534:	0011      	movs	r1, r2
    7536:	e732      	b.n	739e <__aeabi_ddiv+0x46a>
    7538:	2000      	movs	r0, #0
    753a:	e7d7      	b.n	74ec <__aeabi_ddiv+0x5b8>
    753c:	2680      	movs	r6, #128	; 0x80
    753e:	465b      	mov	r3, fp
    7540:	0336      	lsls	r6, r6, #12
    7542:	431e      	orrs	r6, r3
    7544:	0336      	lsls	r6, r6, #12
    7546:	0b36      	lsrs	r6, r6, #12
    7548:	9a00      	ldr	r2, [sp, #0]
    754a:	4689      	mov	r9, r1
    754c:	4b03      	ldr	r3, [pc, #12]	; (755c <__aeabi_ddiv+0x628>)
    754e:	e557      	b.n	7000 <__aeabi_ddiv+0xcc>
    7550:	000003ff 	.word	0x000003ff
    7554:	feffffff 	.word	0xfeffffff
    7558:	000007fe 	.word	0x000007fe
    755c:	000007ff 	.word	0x000007ff

00007560 <__aeabi_dmul>:
    7560:	b5f0      	push	{r4, r5, r6, r7, lr}
    7562:	465f      	mov	r7, fp
    7564:	4656      	mov	r6, sl
    7566:	464d      	mov	r5, r9
    7568:	4644      	mov	r4, r8
    756a:	b4f0      	push	{r4, r5, r6, r7}
    756c:	030d      	lsls	r5, r1, #12
    756e:	4699      	mov	r9, r3
    7570:	004e      	lsls	r6, r1, #1
    7572:	0b2b      	lsrs	r3, r5, #12
    7574:	b087      	sub	sp, #28
    7576:	0007      	movs	r7, r0
    7578:	4692      	mov	sl, r2
    757a:	4680      	mov	r8, r0
    757c:	469b      	mov	fp, r3
    757e:	0d76      	lsrs	r6, r6, #21
    7580:	0fcc      	lsrs	r4, r1, #31
    7582:	2e00      	cmp	r6, #0
    7584:	d069      	beq.n	765a <__aeabi_dmul+0xfa>
    7586:	4b6d      	ldr	r3, [pc, #436]	; (773c <__aeabi_dmul+0x1dc>)
    7588:	429e      	cmp	r6, r3
    758a:	d035      	beq.n	75f8 <__aeabi_dmul+0x98>
    758c:	465b      	mov	r3, fp
    758e:	2280      	movs	r2, #128	; 0x80
    7590:	00dd      	lsls	r5, r3, #3
    7592:	0412      	lsls	r2, r2, #16
    7594:	0f43      	lsrs	r3, r0, #29
    7596:	4313      	orrs	r3, r2
    7598:	432b      	orrs	r3, r5
    759a:	469b      	mov	fp, r3
    759c:	00c3      	lsls	r3, r0, #3
    759e:	4698      	mov	r8, r3
    75a0:	4b67      	ldr	r3, [pc, #412]	; (7740 <__aeabi_dmul+0x1e0>)
    75a2:	2700      	movs	r7, #0
    75a4:	469c      	mov	ip, r3
    75a6:	2300      	movs	r3, #0
    75a8:	4466      	add	r6, ip
    75aa:	9301      	str	r3, [sp, #4]
    75ac:	464a      	mov	r2, r9
    75ae:	0315      	lsls	r5, r2, #12
    75b0:	0050      	lsls	r0, r2, #1
    75b2:	0fd2      	lsrs	r2, r2, #31
    75b4:	4653      	mov	r3, sl
    75b6:	0b2d      	lsrs	r5, r5, #12
    75b8:	0d40      	lsrs	r0, r0, #21
    75ba:	4691      	mov	r9, r2
    75bc:	d100      	bne.n	75c0 <__aeabi_dmul+0x60>
    75be:	e076      	b.n	76ae <__aeabi_dmul+0x14e>
    75c0:	4a5e      	ldr	r2, [pc, #376]	; (773c <__aeabi_dmul+0x1dc>)
    75c2:	4290      	cmp	r0, r2
    75c4:	d06c      	beq.n	76a0 <__aeabi_dmul+0x140>
    75c6:	2280      	movs	r2, #128	; 0x80
    75c8:	0f5b      	lsrs	r3, r3, #29
    75ca:	0412      	lsls	r2, r2, #16
    75cc:	4313      	orrs	r3, r2
    75ce:	4a5c      	ldr	r2, [pc, #368]	; (7740 <__aeabi_dmul+0x1e0>)
    75d0:	00ed      	lsls	r5, r5, #3
    75d2:	4694      	mov	ip, r2
    75d4:	431d      	orrs	r5, r3
    75d6:	4653      	mov	r3, sl
    75d8:	2200      	movs	r2, #0
    75da:	00db      	lsls	r3, r3, #3
    75dc:	4460      	add	r0, ip
    75de:	4649      	mov	r1, r9
    75e0:	1836      	adds	r6, r6, r0
    75e2:	1c70      	adds	r0, r6, #1
    75e4:	4061      	eors	r1, r4
    75e6:	9002      	str	r0, [sp, #8]
    75e8:	4317      	orrs	r7, r2
    75ea:	2f0f      	cmp	r7, #15
    75ec:	d900      	bls.n	75f0 <__aeabi_dmul+0x90>
    75ee:	e0af      	b.n	7750 <__aeabi_dmul+0x1f0>
    75f0:	4854      	ldr	r0, [pc, #336]	; (7744 <__aeabi_dmul+0x1e4>)
    75f2:	00bf      	lsls	r7, r7, #2
    75f4:	59c7      	ldr	r7, [r0, r7]
    75f6:	46bf      	mov	pc, r7
    75f8:	465b      	mov	r3, fp
    75fa:	431f      	orrs	r7, r3
    75fc:	d000      	beq.n	7600 <__aeabi_dmul+0xa0>
    75fe:	e088      	b.n	7712 <__aeabi_dmul+0x1b2>
    7600:	2300      	movs	r3, #0
    7602:	469b      	mov	fp, r3
    7604:	4698      	mov	r8, r3
    7606:	3302      	adds	r3, #2
    7608:	2708      	movs	r7, #8
    760a:	9301      	str	r3, [sp, #4]
    760c:	e7ce      	b.n	75ac <__aeabi_dmul+0x4c>
    760e:	4649      	mov	r1, r9
    7610:	2a02      	cmp	r2, #2
    7612:	d06a      	beq.n	76ea <__aeabi_dmul+0x18a>
    7614:	2a03      	cmp	r2, #3
    7616:	d100      	bne.n	761a <__aeabi_dmul+0xba>
    7618:	e209      	b.n	7a2e <__aeabi_dmul+0x4ce>
    761a:	2a01      	cmp	r2, #1
    761c:	d000      	beq.n	7620 <__aeabi_dmul+0xc0>
    761e:	e1bb      	b.n	7998 <__aeabi_dmul+0x438>
    7620:	4011      	ands	r1, r2
    7622:	2200      	movs	r2, #0
    7624:	2300      	movs	r3, #0
    7626:	2500      	movs	r5, #0
    7628:	4690      	mov	r8, r2
    762a:	b2cc      	uxtb	r4, r1
    762c:	2100      	movs	r1, #0
    762e:	032d      	lsls	r5, r5, #12
    7630:	0d0a      	lsrs	r2, r1, #20
    7632:	0512      	lsls	r2, r2, #20
    7634:	0b2d      	lsrs	r5, r5, #12
    7636:	4315      	orrs	r5, r2
    7638:	4a43      	ldr	r2, [pc, #268]	; (7748 <__aeabi_dmul+0x1e8>)
    763a:	051b      	lsls	r3, r3, #20
    763c:	4015      	ands	r5, r2
    763e:	431d      	orrs	r5, r3
    7640:	006d      	lsls	r5, r5, #1
    7642:	07e4      	lsls	r4, r4, #31
    7644:	086d      	lsrs	r5, r5, #1
    7646:	4325      	orrs	r5, r4
    7648:	4640      	mov	r0, r8
    764a:	0029      	movs	r1, r5
    764c:	b007      	add	sp, #28
    764e:	bc3c      	pop	{r2, r3, r4, r5}
    7650:	4690      	mov	r8, r2
    7652:	4699      	mov	r9, r3
    7654:	46a2      	mov	sl, r4
    7656:	46ab      	mov	fp, r5
    7658:	bdf0      	pop	{r4, r5, r6, r7, pc}
    765a:	4303      	orrs	r3, r0
    765c:	d052      	beq.n	7704 <__aeabi_dmul+0x1a4>
    765e:	465b      	mov	r3, fp
    7660:	2b00      	cmp	r3, #0
    7662:	d100      	bne.n	7666 <__aeabi_dmul+0x106>
    7664:	e18a      	b.n	797c <__aeabi_dmul+0x41c>
    7666:	4658      	mov	r0, fp
    7668:	f000 fdb6 	bl	81d8 <__clzsi2>
    766c:	0003      	movs	r3, r0
    766e:	3b0b      	subs	r3, #11
    7670:	2b1c      	cmp	r3, #28
    7672:	dd00      	ble.n	7676 <__aeabi_dmul+0x116>
    7674:	e17b      	b.n	796e <__aeabi_dmul+0x40e>
    7676:	221d      	movs	r2, #29
    7678:	1ad3      	subs	r3, r2, r3
    767a:	003a      	movs	r2, r7
    767c:	0001      	movs	r1, r0
    767e:	465d      	mov	r5, fp
    7680:	40da      	lsrs	r2, r3
    7682:	3908      	subs	r1, #8
    7684:	408d      	lsls	r5, r1
    7686:	0013      	movs	r3, r2
    7688:	408f      	lsls	r7, r1
    768a:	432b      	orrs	r3, r5
    768c:	469b      	mov	fp, r3
    768e:	46b8      	mov	r8, r7
    7690:	4b2e      	ldr	r3, [pc, #184]	; (774c <__aeabi_dmul+0x1ec>)
    7692:	2700      	movs	r7, #0
    7694:	469c      	mov	ip, r3
    7696:	2300      	movs	r3, #0
    7698:	4460      	add	r0, ip
    769a:	4246      	negs	r6, r0
    769c:	9301      	str	r3, [sp, #4]
    769e:	e785      	b.n	75ac <__aeabi_dmul+0x4c>
    76a0:	4652      	mov	r2, sl
    76a2:	432a      	orrs	r2, r5
    76a4:	d12c      	bne.n	7700 <__aeabi_dmul+0x1a0>
    76a6:	2500      	movs	r5, #0
    76a8:	2300      	movs	r3, #0
    76aa:	2202      	movs	r2, #2
    76ac:	e797      	b.n	75de <__aeabi_dmul+0x7e>
    76ae:	4652      	mov	r2, sl
    76b0:	432a      	orrs	r2, r5
    76b2:	d021      	beq.n	76f8 <__aeabi_dmul+0x198>
    76b4:	2d00      	cmp	r5, #0
    76b6:	d100      	bne.n	76ba <__aeabi_dmul+0x15a>
    76b8:	e154      	b.n	7964 <__aeabi_dmul+0x404>
    76ba:	0028      	movs	r0, r5
    76bc:	f000 fd8c 	bl	81d8 <__clzsi2>
    76c0:	0003      	movs	r3, r0
    76c2:	3b0b      	subs	r3, #11
    76c4:	2b1c      	cmp	r3, #28
    76c6:	dd00      	ble.n	76ca <__aeabi_dmul+0x16a>
    76c8:	e146      	b.n	7958 <__aeabi_dmul+0x3f8>
    76ca:	211d      	movs	r1, #29
    76cc:	1acb      	subs	r3, r1, r3
    76ce:	4651      	mov	r1, sl
    76d0:	0002      	movs	r2, r0
    76d2:	40d9      	lsrs	r1, r3
    76d4:	4653      	mov	r3, sl
    76d6:	3a08      	subs	r2, #8
    76d8:	4095      	lsls	r5, r2
    76da:	4093      	lsls	r3, r2
    76dc:	430d      	orrs	r5, r1
    76de:	4a1b      	ldr	r2, [pc, #108]	; (774c <__aeabi_dmul+0x1ec>)
    76e0:	4694      	mov	ip, r2
    76e2:	4460      	add	r0, ip
    76e4:	4240      	negs	r0, r0
    76e6:	2200      	movs	r2, #0
    76e8:	e779      	b.n	75de <__aeabi_dmul+0x7e>
    76ea:	2401      	movs	r4, #1
    76ec:	2200      	movs	r2, #0
    76ee:	400c      	ands	r4, r1
    76f0:	4b12      	ldr	r3, [pc, #72]	; (773c <__aeabi_dmul+0x1dc>)
    76f2:	2500      	movs	r5, #0
    76f4:	4690      	mov	r8, r2
    76f6:	e799      	b.n	762c <__aeabi_dmul+0xcc>
    76f8:	2500      	movs	r5, #0
    76fa:	2300      	movs	r3, #0
    76fc:	2201      	movs	r2, #1
    76fe:	e76e      	b.n	75de <__aeabi_dmul+0x7e>
    7700:	2203      	movs	r2, #3
    7702:	e76c      	b.n	75de <__aeabi_dmul+0x7e>
    7704:	2300      	movs	r3, #0
    7706:	469b      	mov	fp, r3
    7708:	4698      	mov	r8, r3
    770a:	3301      	adds	r3, #1
    770c:	2704      	movs	r7, #4
    770e:	9301      	str	r3, [sp, #4]
    7710:	e74c      	b.n	75ac <__aeabi_dmul+0x4c>
    7712:	2303      	movs	r3, #3
    7714:	270c      	movs	r7, #12
    7716:	9301      	str	r3, [sp, #4]
    7718:	e748      	b.n	75ac <__aeabi_dmul+0x4c>
    771a:	2300      	movs	r3, #0
    771c:	2580      	movs	r5, #128	; 0x80
    771e:	4698      	mov	r8, r3
    7720:	2400      	movs	r4, #0
    7722:	032d      	lsls	r5, r5, #12
    7724:	4b05      	ldr	r3, [pc, #20]	; (773c <__aeabi_dmul+0x1dc>)
    7726:	e781      	b.n	762c <__aeabi_dmul+0xcc>
    7728:	465d      	mov	r5, fp
    772a:	4643      	mov	r3, r8
    772c:	9a01      	ldr	r2, [sp, #4]
    772e:	e76f      	b.n	7610 <__aeabi_dmul+0xb0>
    7730:	465d      	mov	r5, fp
    7732:	4643      	mov	r3, r8
    7734:	0021      	movs	r1, r4
    7736:	9a01      	ldr	r2, [sp, #4]
    7738:	e76a      	b.n	7610 <__aeabi_dmul+0xb0>
    773a:	46c0      	nop			; (mov r8, r8)
    773c:	000007ff 	.word	0x000007ff
    7740:	fffffc01 	.word	0xfffffc01
    7744:	00009aac 	.word	0x00009aac
    7748:	800fffff 	.word	0x800fffff
    774c:	000003f3 	.word	0x000003f3
    7750:	4642      	mov	r2, r8
    7752:	0c12      	lsrs	r2, r2, #16
    7754:	4691      	mov	r9, r2
    7756:	0c1a      	lsrs	r2, r3, #16
    7758:	4694      	mov	ip, r2
    775a:	4642      	mov	r2, r8
    775c:	0417      	lsls	r7, r2, #16
    775e:	464a      	mov	r2, r9
    7760:	041b      	lsls	r3, r3, #16
    7762:	0c1b      	lsrs	r3, r3, #16
    7764:	435a      	muls	r2, r3
    7766:	4660      	mov	r0, ip
    7768:	4690      	mov	r8, r2
    776a:	464a      	mov	r2, r9
    776c:	4342      	muls	r2, r0
    776e:	0010      	movs	r0, r2
    7770:	9203      	str	r2, [sp, #12]
    7772:	4662      	mov	r2, ip
    7774:	001c      	movs	r4, r3
    7776:	0c3f      	lsrs	r7, r7, #16
    7778:	437a      	muls	r2, r7
    777a:	437c      	muls	r4, r7
    777c:	4442      	add	r2, r8
    777e:	9201      	str	r2, [sp, #4]
    7780:	0c22      	lsrs	r2, r4, #16
    7782:	4692      	mov	sl, r2
    7784:	9a01      	ldr	r2, [sp, #4]
    7786:	4452      	add	r2, sl
    7788:	4590      	cmp	r8, r2
    778a:	d906      	bls.n	779a <__aeabi_dmul+0x23a>
    778c:	4682      	mov	sl, r0
    778e:	2080      	movs	r0, #128	; 0x80
    7790:	0240      	lsls	r0, r0, #9
    7792:	4680      	mov	r8, r0
    7794:	44c2      	add	sl, r8
    7796:	4650      	mov	r0, sl
    7798:	9003      	str	r0, [sp, #12]
    779a:	0c10      	lsrs	r0, r2, #16
    779c:	9004      	str	r0, [sp, #16]
    779e:	4648      	mov	r0, r9
    77a0:	0424      	lsls	r4, r4, #16
    77a2:	0c24      	lsrs	r4, r4, #16
    77a4:	0412      	lsls	r2, r2, #16
    77a6:	1912      	adds	r2, r2, r4
    77a8:	9205      	str	r2, [sp, #20]
    77aa:	0c2a      	lsrs	r2, r5, #16
    77ac:	042d      	lsls	r5, r5, #16
    77ae:	0c2d      	lsrs	r5, r5, #16
    77b0:	4368      	muls	r0, r5
    77b2:	002c      	movs	r4, r5
    77b4:	4682      	mov	sl, r0
    77b6:	4648      	mov	r0, r9
    77b8:	437c      	muls	r4, r7
    77ba:	4350      	muls	r0, r2
    77bc:	4681      	mov	r9, r0
    77be:	0c20      	lsrs	r0, r4, #16
    77c0:	4680      	mov	r8, r0
    77c2:	4357      	muls	r7, r2
    77c4:	4457      	add	r7, sl
    77c6:	4447      	add	r7, r8
    77c8:	45ba      	cmp	sl, r7
    77ca:	d903      	bls.n	77d4 <__aeabi_dmul+0x274>
    77cc:	2080      	movs	r0, #128	; 0x80
    77ce:	0240      	lsls	r0, r0, #9
    77d0:	4680      	mov	r8, r0
    77d2:	44c1      	add	r9, r8
    77d4:	0c38      	lsrs	r0, r7, #16
    77d6:	043f      	lsls	r7, r7, #16
    77d8:	46b8      	mov	r8, r7
    77da:	4448      	add	r0, r9
    77dc:	0424      	lsls	r4, r4, #16
    77de:	0c24      	lsrs	r4, r4, #16
    77e0:	9001      	str	r0, [sp, #4]
    77e2:	9804      	ldr	r0, [sp, #16]
    77e4:	44a0      	add	r8, r4
    77e6:	4440      	add	r0, r8
    77e8:	9004      	str	r0, [sp, #16]
    77ea:	4658      	mov	r0, fp
    77ec:	0c00      	lsrs	r0, r0, #16
    77ee:	4681      	mov	r9, r0
    77f0:	4658      	mov	r0, fp
    77f2:	0404      	lsls	r4, r0, #16
    77f4:	0c20      	lsrs	r0, r4, #16
    77f6:	4682      	mov	sl, r0
    77f8:	0007      	movs	r7, r0
    77fa:	4648      	mov	r0, r9
    77fc:	435f      	muls	r7, r3
    77fe:	464c      	mov	r4, r9
    7800:	4343      	muls	r3, r0
    7802:	4660      	mov	r0, ip
    7804:	4360      	muls	r0, r4
    7806:	4664      	mov	r4, ip
    7808:	4683      	mov	fp, r0
    780a:	4650      	mov	r0, sl
    780c:	4344      	muls	r4, r0
    780e:	0c38      	lsrs	r0, r7, #16
    7810:	4684      	mov	ip, r0
    7812:	18e4      	adds	r4, r4, r3
    7814:	4464      	add	r4, ip
    7816:	42a3      	cmp	r3, r4
    7818:	d903      	bls.n	7822 <__aeabi_dmul+0x2c2>
    781a:	2380      	movs	r3, #128	; 0x80
    781c:	025b      	lsls	r3, r3, #9
    781e:	469c      	mov	ip, r3
    7820:	44e3      	add	fp, ip
    7822:	4648      	mov	r0, r9
    7824:	043f      	lsls	r7, r7, #16
    7826:	0c23      	lsrs	r3, r4, #16
    7828:	0c3f      	lsrs	r7, r7, #16
    782a:	0424      	lsls	r4, r4, #16
    782c:	19e4      	adds	r4, r4, r7
    782e:	4657      	mov	r7, sl
    7830:	4368      	muls	r0, r5
    7832:	436f      	muls	r7, r5
    7834:	4684      	mov	ip, r0
    7836:	464d      	mov	r5, r9
    7838:	4650      	mov	r0, sl
    783a:	4355      	muls	r5, r2
    783c:	4342      	muls	r2, r0
    783e:	0c38      	lsrs	r0, r7, #16
    7840:	4681      	mov	r9, r0
    7842:	4462      	add	r2, ip
    7844:	444a      	add	r2, r9
    7846:	445b      	add	r3, fp
    7848:	4594      	cmp	ip, r2
    784a:	d903      	bls.n	7854 <__aeabi_dmul+0x2f4>
    784c:	2080      	movs	r0, #128	; 0x80
    784e:	0240      	lsls	r0, r0, #9
    7850:	4684      	mov	ip, r0
    7852:	4465      	add	r5, ip
    7854:	9803      	ldr	r0, [sp, #12]
    7856:	043f      	lsls	r7, r7, #16
    7858:	4683      	mov	fp, r0
    785a:	9804      	ldr	r0, [sp, #16]
    785c:	0c3f      	lsrs	r7, r7, #16
    785e:	4684      	mov	ip, r0
    7860:	44e3      	add	fp, ip
    7862:	45c3      	cmp	fp, r8
    7864:	4180      	sbcs	r0, r0
    7866:	4240      	negs	r0, r0
    7868:	4682      	mov	sl, r0
    786a:	0410      	lsls	r0, r2, #16
    786c:	4684      	mov	ip, r0
    786e:	9801      	ldr	r0, [sp, #4]
    7870:	4467      	add	r7, ip
    7872:	4684      	mov	ip, r0
    7874:	4467      	add	r7, ip
    7876:	44a3      	add	fp, r4
    7878:	46bc      	mov	ip, r7
    787a:	45a3      	cmp	fp, r4
    787c:	41a4      	sbcs	r4, r4
    787e:	4699      	mov	r9, r3
    7880:	44d4      	add	ip, sl
    7882:	4264      	negs	r4, r4
    7884:	4287      	cmp	r7, r0
    7886:	41bf      	sbcs	r7, r7
    7888:	45d4      	cmp	ip, sl
    788a:	4180      	sbcs	r0, r0
    788c:	44e1      	add	r9, ip
    788e:	46a0      	mov	r8, r4
    7890:	4599      	cmp	r9, r3
    7892:	419b      	sbcs	r3, r3
    7894:	427f      	negs	r7, r7
    7896:	4240      	negs	r0, r0
    7898:	44c8      	add	r8, r9
    789a:	4307      	orrs	r7, r0
    789c:	0c12      	lsrs	r2, r2, #16
    789e:	18ba      	adds	r2, r7, r2
    78a0:	45a0      	cmp	r8, r4
    78a2:	41a4      	sbcs	r4, r4
    78a4:	425f      	negs	r7, r3
    78a6:	003b      	movs	r3, r7
    78a8:	4264      	negs	r4, r4
    78aa:	4323      	orrs	r3, r4
    78ac:	18d7      	adds	r7, r2, r3
    78ae:	4643      	mov	r3, r8
    78b0:	197d      	adds	r5, r7, r5
    78b2:	0ddb      	lsrs	r3, r3, #23
    78b4:	026d      	lsls	r5, r5, #9
    78b6:	431d      	orrs	r5, r3
    78b8:	465b      	mov	r3, fp
    78ba:	025a      	lsls	r2, r3, #9
    78bc:	9b05      	ldr	r3, [sp, #20]
    78be:	431a      	orrs	r2, r3
    78c0:	1e53      	subs	r3, r2, #1
    78c2:	419a      	sbcs	r2, r3
    78c4:	465b      	mov	r3, fp
    78c6:	0ddb      	lsrs	r3, r3, #23
    78c8:	431a      	orrs	r2, r3
    78ca:	4643      	mov	r3, r8
    78cc:	025b      	lsls	r3, r3, #9
    78ce:	4313      	orrs	r3, r2
    78d0:	01ea      	lsls	r2, r5, #7
    78d2:	d507      	bpl.n	78e4 <__aeabi_dmul+0x384>
    78d4:	2201      	movs	r2, #1
    78d6:	085c      	lsrs	r4, r3, #1
    78d8:	4013      	ands	r3, r2
    78da:	4323      	orrs	r3, r4
    78dc:	07ea      	lsls	r2, r5, #31
    78de:	9e02      	ldr	r6, [sp, #8]
    78e0:	4313      	orrs	r3, r2
    78e2:	086d      	lsrs	r5, r5, #1
    78e4:	4a57      	ldr	r2, [pc, #348]	; (7a44 <__aeabi_dmul+0x4e4>)
    78e6:	18b2      	adds	r2, r6, r2
    78e8:	2a00      	cmp	r2, #0
    78ea:	dd4b      	ble.n	7984 <__aeabi_dmul+0x424>
    78ec:	0758      	lsls	r0, r3, #29
    78ee:	d009      	beq.n	7904 <__aeabi_dmul+0x3a4>
    78f0:	200f      	movs	r0, #15
    78f2:	4018      	ands	r0, r3
    78f4:	2804      	cmp	r0, #4
    78f6:	d005      	beq.n	7904 <__aeabi_dmul+0x3a4>
    78f8:	1d18      	adds	r0, r3, #4
    78fa:	4298      	cmp	r0, r3
    78fc:	419b      	sbcs	r3, r3
    78fe:	425b      	negs	r3, r3
    7900:	18ed      	adds	r5, r5, r3
    7902:	0003      	movs	r3, r0
    7904:	01e8      	lsls	r0, r5, #7
    7906:	d504      	bpl.n	7912 <__aeabi_dmul+0x3b2>
    7908:	4a4f      	ldr	r2, [pc, #316]	; (7a48 <__aeabi_dmul+0x4e8>)
    790a:	4015      	ands	r5, r2
    790c:	2280      	movs	r2, #128	; 0x80
    790e:	00d2      	lsls	r2, r2, #3
    7910:	18b2      	adds	r2, r6, r2
    7912:	484e      	ldr	r0, [pc, #312]	; (7a4c <__aeabi_dmul+0x4ec>)
    7914:	4282      	cmp	r2, r0
    7916:	dd00      	ble.n	791a <__aeabi_dmul+0x3ba>
    7918:	e6e7      	b.n	76ea <__aeabi_dmul+0x18a>
    791a:	2401      	movs	r4, #1
    791c:	08db      	lsrs	r3, r3, #3
    791e:	0768      	lsls	r0, r5, #29
    7920:	4318      	orrs	r0, r3
    7922:	026d      	lsls	r5, r5, #9
    7924:	0553      	lsls	r3, r2, #21
    7926:	4680      	mov	r8, r0
    7928:	0b2d      	lsrs	r5, r5, #12
    792a:	0d5b      	lsrs	r3, r3, #21
    792c:	400c      	ands	r4, r1
    792e:	e67d      	b.n	762c <__aeabi_dmul+0xcc>
    7930:	2280      	movs	r2, #128	; 0x80
    7932:	4659      	mov	r1, fp
    7934:	0312      	lsls	r2, r2, #12
    7936:	4211      	tst	r1, r2
    7938:	d008      	beq.n	794c <__aeabi_dmul+0x3ec>
    793a:	4215      	tst	r5, r2
    793c:	d106      	bne.n	794c <__aeabi_dmul+0x3ec>
    793e:	4315      	orrs	r5, r2
    7940:	032d      	lsls	r5, r5, #12
    7942:	4698      	mov	r8, r3
    7944:	0b2d      	lsrs	r5, r5, #12
    7946:	464c      	mov	r4, r9
    7948:	4b41      	ldr	r3, [pc, #260]	; (7a50 <__aeabi_dmul+0x4f0>)
    794a:	e66f      	b.n	762c <__aeabi_dmul+0xcc>
    794c:	465d      	mov	r5, fp
    794e:	4315      	orrs	r5, r2
    7950:	032d      	lsls	r5, r5, #12
    7952:	0b2d      	lsrs	r5, r5, #12
    7954:	4b3e      	ldr	r3, [pc, #248]	; (7a50 <__aeabi_dmul+0x4f0>)
    7956:	e669      	b.n	762c <__aeabi_dmul+0xcc>
    7958:	0003      	movs	r3, r0
    795a:	4655      	mov	r5, sl
    795c:	3b28      	subs	r3, #40	; 0x28
    795e:	409d      	lsls	r5, r3
    7960:	2300      	movs	r3, #0
    7962:	e6bc      	b.n	76de <__aeabi_dmul+0x17e>
    7964:	4650      	mov	r0, sl
    7966:	f000 fc37 	bl	81d8 <__clzsi2>
    796a:	3020      	adds	r0, #32
    796c:	e6a8      	b.n	76c0 <__aeabi_dmul+0x160>
    796e:	0003      	movs	r3, r0
    7970:	3b28      	subs	r3, #40	; 0x28
    7972:	409f      	lsls	r7, r3
    7974:	2300      	movs	r3, #0
    7976:	46bb      	mov	fp, r7
    7978:	4698      	mov	r8, r3
    797a:	e689      	b.n	7690 <__aeabi_dmul+0x130>
    797c:	f000 fc2c 	bl	81d8 <__clzsi2>
    7980:	3020      	adds	r0, #32
    7982:	e673      	b.n	766c <__aeabi_dmul+0x10c>
    7984:	2401      	movs	r4, #1
    7986:	1aa6      	subs	r6, r4, r2
    7988:	2e38      	cmp	r6, #56	; 0x38
    798a:	dd07      	ble.n	799c <__aeabi_dmul+0x43c>
    798c:	2200      	movs	r2, #0
    798e:	400c      	ands	r4, r1
    7990:	2300      	movs	r3, #0
    7992:	2500      	movs	r5, #0
    7994:	4690      	mov	r8, r2
    7996:	e649      	b.n	762c <__aeabi_dmul+0xcc>
    7998:	9e02      	ldr	r6, [sp, #8]
    799a:	e7a3      	b.n	78e4 <__aeabi_dmul+0x384>
    799c:	2e1f      	cmp	r6, #31
    799e:	dc20      	bgt.n	79e2 <__aeabi_dmul+0x482>
    79a0:	2220      	movs	r2, #32
    79a2:	002c      	movs	r4, r5
    79a4:	0018      	movs	r0, r3
    79a6:	1b92      	subs	r2, r2, r6
    79a8:	40f0      	lsrs	r0, r6
    79aa:	4094      	lsls	r4, r2
    79ac:	4093      	lsls	r3, r2
    79ae:	4304      	orrs	r4, r0
    79b0:	1e58      	subs	r0, r3, #1
    79b2:	4183      	sbcs	r3, r0
    79b4:	431c      	orrs	r4, r3
    79b6:	40f5      	lsrs	r5, r6
    79b8:	0763      	lsls	r3, r4, #29
    79ba:	d009      	beq.n	79d0 <__aeabi_dmul+0x470>
    79bc:	230f      	movs	r3, #15
    79be:	4023      	ands	r3, r4
    79c0:	2b04      	cmp	r3, #4
    79c2:	d005      	beq.n	79d0 <__aeabi_dmul+0x470>
    79c4:	0023      	movs	r3, r4
    79c6:	1d1c      	adds	r4, r3, #4
    79c8:	429c      	cmp	r4, r3
    79ca:	4192      	sbcs	r2, r2
    79cc:	4252      	negs	r2, r2
    79ce:	18ad      	adds	r5, r5, r2
    79d0:	022b      	lsls	r3, r5, #8
    79d2:	d51f      	bpl.n	7a14 <__aeabi_dmul+0x4b4>
    79d4:	2401      	movs	r4, #1
    79d6:	2200      	movs	r2, #0
    79d8:	400c      	ands	r4, r1
    79da:	2301      	movs	r3, #1
    79dc:	2500      	movs	r5, #0
    79de:	4690      	mov	r8, r2
    79e0:	e624      	b.n	762c <__aeabi_dmul+0xcc>
    79e2:	201f      	movs	r0, #31
    79e4:	002c      	movs	r4, r5
    79e6:	4240      	negs	r0, r0
    79e8:	1a82      	subs	r2, r0, r2
    79ea:	40d4      	lsrs	r4, r2
    79ec:	2e20      	cmp	r6, #32
    79ee:	d01c      	beq.n	7a2a <__aeabi_dmul+0x4ca>
    79f0:	2240      	movs	r2, #64	; 0x40
    79f2:	1b96      	subs	r6, r2, r6
    79f4:	40b5      	lsls	r5, r6
    79f6:	432b      	orrs	r3, r5
    79f8:	1e58      	subs	r0, r3, #1
    79fa:	4183      	sbcs	r3, r0
    79fc:	2007      	movs	r0, #7
    79fe:	4323      	orrs	r3, r4
    7a00:	4018      	ands	r0, r3
    7a02:	2500      	movs	r5, #0
    7a04:	2800      	cmp	r0, #0
    7a06:	d009      	beq.n	7a1c <__aeabi_dmul+0x4bc>
    7a08:	220f      	movs	r2, #15
    7a0a:	2500      	movs	r5, #0
    7a0c:	401a      	ands	r2, r3
    7a0e:	001c      	movs	r4, r3
    7a10:	2a04      	cmp	r2, #4
    7a12:	d1d8      	bne.n	79c6 <__aeabi_dmul+0x466>
    7a14:	0023      	movs	r3, r4
    7a16:	0768      	lsls	r0, r5, #29
    7a18:	026d      	lsls	r5, r5, #9
    7a1a:	0b2d      	lsrs	r5, r5, #12
    7a1c:	2401      	movs	r4, #1
    7a1e:	08db      	lsrs	r3, r3, #3
    7a20:	4303      	orrs	r3, r0
    7a22:	4698      	mov	r8, r3
    7a24:	400c      	ands	r4, r1
    7a26:	2300      	movs	r3, #0
    7a28:	e600      	b.n	762c <__aeabi_dmul+0xcc>
    7a2a:	2500      	movs	r5, #0
    7a2c:	e7e3      	b.n	79f6 <__aeabi_dmul+0x496>
    7a2e:	2280      	movs	r2, #128	; 0x80
    7a30:	2401      	movs	r4, #1
    7a32:	0312      	lsls	r2, r2, #12
    7a34:	4315      	orrs	r5, r2
    7a36:	032d      	lsls	r5, r5, #12
    7a38:	4698      	mov	r8, r3
    7a3a:	0b2d      	lsrs	r5, r5, #12
    7a3c:	400c      	ands	r4, r1
    7a3e:	4b04      	ldr	r3, [pc, #16]	; (7a50 <__aeabi_dmul+0x4f0>)
    7a40:	e5f4      	b.n	762c <__aeabi_dmul+0xcc>
    7a42:	46c0      	nop			; (mov r8, r8)
    7a44:	000003ff 	.word	0x000003ff
    7a48:	feffffff 	.word	0xfeffffff
    7a4c:	000007fe 	.word	0x000007fe
    7a50:	000007ff 	.word	0x000007ff

00007a54 <__aeabi_dsub>:
    7a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a56:	4657      	mov	r7, sl
    7a58:	464e      	mov	r6, r9
    7a5a:	4645      	mov	r5, r8
    7a5c:	b4e0      	push	{r5, r6, r7}
    7a5e:	000e      	movs	r6, r1
    7a60:	0011      	movs	r1, r2
    7a62:	0ff2      	lsrs	r2, r6, #31
    7a64:	4692      	mov	sl, r2
    7a66:	00c5      	lsls	r5, r0, #3
    7a68:	0f42      	lsrs	r2, r0, #29
    7a6a:	0318      	lsls	r0, r3, #12
    7a6c:	0337      	lsls	r7, r6, #12
    7a6e:	0074      	lsls	r4, r6, #1
    7a70:	0a40      	lsrs	r0, r0, #9
    7a72:	0f4e      	lsrs	r6, r1, #29
    7a74:	0a7f      	lsrs	r7, r7, #9
    7a76:	4330      	orrs	r0, r6
    7a78:	4ecf      	ldr	r6, [pc, #828]	; (7db8 <__aeabi_dsub+0x364>)
    7a7a:	4317      	orrs	r7, r2
    7a7c:	005a      	lsls	r2, r3, #1
    7a7e:	0d64      	lsrs	r4, r4, #21
    7a80:	0d52      	lsrs	r2, r2, #21
    7a82:	0fdb      	lsrs	r3, r3, #31
    7a84:	00c9      	lsls	r1, r1, #3
    7a86:	42b2      	cmp	r2, r6
    7a88:	d100      	bne.n	7a8c <__aeabi_dsub+0x38>
    7a8a:	e0e5      	b.n	7c58 <__aeabi_dsub+0x204>
    7a8c:	2601      	movs	r6, #1
    7a8e:	4073      	eors	r3, r6
    7a90:	1aa6      	subs	r6, r4, r2
    7a92:	46b4      	mov	ip, r6
    7a94:	4553      	cmp	r3, sl
    7a96:	d100      	bne.n	7a9a <__aeabi_dsub+0x46>
    7a98:	e0af      	b.n	7bfa <__aeabi_dsub+0x1a6>
    7a9a:	2e00      	cmp	r6, #0
    7a9c:	dc00      	bgt.n	7aa0 <__aeabi_dsub+0x4c>
    7a9e:	e10d      	b.n	7cbc <__aeabi_dsub+0x268>
    7aa0:	2a00      	cmp	r2, #0
    7aa2:	d13a      	bne.n	7b1a <__aeabi_dsub+0xc6>
    7aa4:	0003      	movs	r3, r0
    7aa6:	430b      	orrs	r3, r1
    7aa8:	d000      	beq.n	7aac <__aeabi_dsub+0x58>
    7aaa:	e0e4      	b.n	7c76 <__aeabi_dsub+0x222>
    7aac:	076b      	lsls	r3, r5, #29
    7aae:	d009      	beq.n	7ac4 <__aeabi_dsub+0x70>
    7ab0:	230f      	movs	r3, #15
    7ab2:	402b      	ands	r3, r5
    7ab4:	2b04      	cmp	r3, #4
    7ab6:	d005      	beq.n	7ac4 <__aeabi_dsub+0x70>
    7ab8:	1d2b      	adds	r3, r5, #4
    7aba:	42ab      	cmp	r3, r5
    7abc:	41ad      	sbcs	r5, r5
    7abe:	426d      	negs	r5, r5
    7ac0:	197f      	adds	r7, r7, r5
    7ac2:	001d      	movs	r5, r3
    7ac4:	023b      	lsls	r3, r7, #8
    7ac6:	d400      	bmi.n	7aca <__aeabi_dsub+0x76>
    7ac8:	e088      	b.n	7bdc <__aeabi_dsub+0x188>
    7aca:	4bbb      	ldr	r3, [pc, #748]	; (7db8 <__aeabi_dsub+0x364>)
    7acc:	3401      	adds	r4, #1
    7ace:	429c      	cmp	r4, r3
    7ad0:	d100      	bne.n	7ad4 <__aeabi_dsub+0x80>
    7ad2:	e110      	b.n	7cf6 <__aeabi_dsub+0x2a2>
    7ad4:	003a      	movs	r2, r7
    7ad6:	4bb9      	ldr	r3, [pc, #740]	; (7dbc <__aeabi_dsub+0x368>)
    7ad8:	4651      	mov	r1, sl
    7ada:	401a      	ands	r2, r3
    7adc:	2301      	movs	r3, #1
    7ade:	0750      	lsls	r0, r2, #29
    7ae0:	08ed      	lsrs	r5, r5, #3
    7ae2:	0252      	lsls	r2, r2, #9
    7ae4:	0564      	lsls	r4, r4, #21
    7ae6:	4305      	orrs	r5, r0
    7ae8:	0b12      	lsrs	r2, r2, #12
    7aea:	0d64      	lsrs	r4, r4, #21
    7aec:	400b      	ands	r3, r1
    7aee:	2100      	movs	r1, #0
    7af0:	0028      	movs	r0, r5
    7af2:	0312      	lsls	r2, r2, #12
    7af4:	0d0d      	lsrs	r5, r1, #20
    7af6:	0b12      	lsrs	r2, r2, #12
    7af8:	0564      	lsls	r4, r4, #21
    7afa:	052d      	lsls	r5, r5, #20
    7afc:	4315      	orrs	r5, r2
    7afe:	0862      	lsrs	r2, r4, #1
    7b00:	4caf      	ldr	r4, [pc, #700]	; (7dc0 <__aeabi_dsub+0x36c>)
    7b02:	07db      	lsls	r3, r3, #31
    7b04:	402c      	ands	r4, r5
    7b06:	4314      	orrs	r4, r2
    7b08:	0064      	lsls	r4, r4, #1
    7b0a:	0864      	lsrs	r4, r4, #1
    7b0c:	431c      	orrs	r4, r3
    7b0e:	0021      	movs	r1, r4
    7b10:	bc1c      	pop	{r2, r3, r4}
    7b12:	4690      	mov	r8, r2
    7b14:	4699      	mov	r9, r3
    7b16:	46a2      	mov	sl, r4
    7b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b1a:	4ba7      	ldr	r3, [pc, #668]	; (7db8 <__aeabi_dsub+0x364>)
    7b1c:	429c      	cmp	r4, r3
    7b1e:	d0c5      	beq.n	7aac <__aeabi_dsub+0x58>
    7b20:	2380      	movs	r3, #128	; 0x80
    7b22:	041b      	lsls	r3, r3, #16
    7b24:	4318      	orrs	r0, r3
    7b26:	4663      	mov	r3, ip
    7b28:	2b38      	cmp	r3, #56	; 0x38
    7b2a:	dd00      	ble.n	7b2e <__aeabi_dsub+0xda>
    7b2c:	e0fd      	b.n	7d2a <__aeabi_dsub+0x2d6>
    7b2e:	2b1f      	cmp	r3, #31
    7b30:	dd00      	ble.n	7b34 <__aeabi_dsub+0xe0>
    7b32:	e130      	b.n	7d96 <__aeabi_dsub+0x342>
    7b34:	4662      	mov	r2, ip
    7b36:	2320      	movs	r3, #32
    7b38:	1a9b      	subs	r3, r3, r2
    7b3a:	0002      	movs	r2, r0
    7b3c:	409a      	lsls	r2, r3
    7b3e:	4666      	mov	r6, ip
    7b40:	4690      	mov	r8, r2
    7b42:	000a      	movs	r2, r1
    7b44:	4099      	lsls	r1, r3
    7b46:	40f2      	lsrs	r2, r6
    7b48:	4646      	mov	r6, r8
    7b4a:	1e4b      	subs	r3, r1, #1
    7b4c:	4199      	sbcs	r1, r3
    7b4e:	4332      	orrs	r2, r6
    7b50:	4311      	orrs	r1, r2
    7b52:	4663      	mov	r3, ip
    7b54:	0002      	movs	r2, r0
    7b56:	40da      	lsrs	r2, r3
    7b58:	1a69      	subs	r1, r5, r1
    7b5a:	428d      	cmp	r5, r1
    7b5c:	419b      	sbcs	r3, r3
    7b5e:	000d      	movs	r5, r1
    7b60:	1aba      	subs	r2, r7, r2
    7b62:	425b      	negs	r3, r3
    7b64:	1ad7      	subs	r7, r2, r3
    7b66:	023b      	lsls	r3, r7, #8
    7b68:	d535      	bpl.n	7bd6 <__aeabi_dsub+0x182>
    7b6a:	027a      	lsls	r2, r7, #9
    7b6c:	0a53      	lsrs	r3, r2, #9
    7b6e:	4698      	mov	r8, r3
    7b70:	4643      	mov	r3, r8
    7b72:	2b00      	cmp	r3, #0
    7b74:	d100      	bne.n	7b78 <__aeabi_dsub+0x124>
    7b76:	e0c4      	b.n	7d02 <__aeabi_dsub+0x2ae>
    7b78:	4640      	mov	r0, r8
    7b7a:	f000 fb2d 	bl	81d8 <__clzsi2>
    7b7e:	0003      	movs	r3, r0
    7b80:	3b08      	subs	r3, #8
    7b82:	2b1f      	cmp	r3, #31
    7b84:	dd00      	ble.n	7b88 <__aeabi_dsub+0x134>
    7b86:	e0c5      	b.n	7d14 <__aeabi_dsub+0x2c0>
    7b88:	2220      	movs	r2, #32
    7b8a:	0029      	movs	r1, r5
    7b8c:	1ad2      	subs	r2, r2, r3
    7b8e:	4647      	mov	r7, r8
    7b90:	40d1      	lsrs	r1, r2
    7b92:	409f      	lsls	r7, r3
    7b94:	000a      	movs	r2, r1
    7b96:	409d      	lsls	r5, r3
    7b98:	433a      	orrs	r2, r7
    7b9a:	429c      	cmp	r4, r3
    7b9c:	dd00      	ble.n	7ba0 <__aeabi_dsub+0x14c>
    7b9e:	e0c0      	b.n	7d22 <__aeabi_dsub+0x2ce>
    7ba0:	1b1c      	subs	r4, r3, r4
    7ba2:	1c63      	adds	r3, r4, #1
    7ba4:	2b1f      	cmp	r3, #31
    7ba6:	dd00      	ble.n	7baa <__aeabi_dsub+0x156>
    7ba8:	e0e4      	b.n	7d74 <__aeabi_dsub+0x320>
    7baa:	2120      	movs	r1, #32
    7bac:	0014      	movs	r4, r2
    7bae:	0028      	movs	r0, r5
    7bb0:	1ac9      	subs	r1, r1, r3
    7bb2:	40d8      	lsrs	r0, r3
    7bb4:	408c      	lsls	r4, r1
    7bb6:	408d      	lsls	r5, r1
    7bb8:	4304      	orrs	r4, r0
    7bba:	40da      	lsrs	r2, r3
    7bbc:	1e68      	subs	r0, r5, #1
    7bbe:	4185      	sbcs	r5, r0
    7bc0:	0017      	movs	r7, r2
    7bc2:	4325      	orrs	r5, r4
    7bc4:	2400      	movs	r4, #0
    7bc6:	e771      	b.n	7aac <__aeabi_dsub+0x58>
    7bc8:	4642      	mov	r2, r8
    7bca:	4663      	mov	r3, ip
    7bcc:	431a      	orrs	r2, r3
    7bce:	d100      	bne.n	7bd2 <__aeabi_dsub+0x17e>
    7bd0:	e24c      	b.n	806c <__aeabi_dsub+0x618>
    7bd2:	4667      	mov	r7, ip
    7bd4:	4645      	mov	r5, r8
    7bd6:	076b      	lsls	r3, r5, #29
    7bd8:	d000      	beq.n	7bdc <__aeabi_dsub+0x188>
    7bda:	e769      	b.n	7ab0 <__aeabi_dsub+0x5c>
    7bdc:	2301      	movs	r3, #1
    7bde:	4651      	mov	r1, sl
    7be0:	0778      	lsls	r0, r7, #29
    7be2:	08ed      	lsrs	r5, r5, #3
    7be4:	08fa      	lsrs	r2, r7, #3
    7be6:	400b      	ands	r3, r1
    7be8:	4305      	orrs	r5, r0
    7bea:	4973      	ldr	r1, [pc, #460]	; (7db8 <__aeabi_dsub+0x364>)
    7bec:	428c      	cmp	r4, r1
    7bee:	d038      	beq.n	7c62 <__aeabi_dsub+0x20e>
    7bf0:	0312      	lsls	r2, r2, #12
    7bf2:	0564      	lsls	r4, r4, #21
    7bf4:	0b12      	lsrs	r2, r2, #12
    7bf6:	0d64      	lsrs	r4, r4, #21
    7bf8:	e779      	b.n	7aee <__aeabi_dsub+0x9a>
    7bfa:	2e00      	cmp	r6, #0
    7bfc:	dc00      	bgt.n	7c00 <__aeabi_dsub+0x1ac>
    7bfe:	e09a      	b.n	7d36 <__aeabi_dsub+0x2e2>
    7c00:	2a00      	cmp	r2, #0
    7c02:	d047      	beq.n	7c94 <__aeabi_dsub+0x240>
    7c04:	4a6c      	ldr	r2, [pc, #432]	; (7db8 <__aeabi_dsub+0x364>)
    7c06:	4294      	cmp	r4, r2
    7c08:	d100      	bne.n	7c0c <__aeabi_dsub+0x1b8>
    7c0a:	e74f      	b.n	7aac <__aeabi_dsub+0x58>
    7c0c:	2280      	movs	r2, #128	; 0x80
    7c0e:	0412      	lsls	r2, r2, #16
    7c10:	4310      	orrs	r0, r2
    7c12:	4662      	mov	r2, ip
    7c14:	2a38      	cmp	r2, #56	; 0x38
    7c16:	dc00      	bgt.n	7c1a <__aeabi_dsub+0x1c6>
    7c18:	e108      	b.n	7e2c <__aeabi_dsub+0x3d8>
    7c1a:	4301      	orrs	r1, r0
    7c1c:	1e48      	subs	r0, r1, #1
    7c1e:	4181      	sbcs	r1, r0
    7c20:	2200      	movs	r2, #0
    7c22:	b2c9      	uxtb	r1, r1
    7c24:	1949      	adds	r1, r1, r5
    7c26:	19d2      	adds	r2, r2, r7
    7c28:	42a9      	cmp	r1, r5
    7c2a:	41bf      	sbcs	r7, r7
    7c2c:	000d      	movs	r5, r1
    7c2e:	427f      	negs	r7, r7
    7c30:	18bf      	adds	r7, r7, r2
    7c32:	023a      	lsls	r2, r7, #8
    7c34:	d400      	bmi.n	7c38 <__aeabi_dsub+0x1e4>
    7c36:	e142      	b.n	7ebe <__aeabi_dsub+0x46a>
    7c38:	4a5f      	ldr	r2, [pc, #380]	; (7db8 <__aeabi_dsub+0x364>)
    7c3a:	3401      	adds	r4, #1
    7c3c:	4294      	cmp	r4, r2
    7c3e:	d100      	bne.n	7c42 <__aeabi_dsub+0x1ee>
    7c40:	e14e      	b.n	7ee0 <__aeabi_dsub+0x48c>
    7c42:	2001      	movs	r0, #1
    7c44:	4a5d      	ldr	r2, [pc, #372]	; (7dbc <__aeabi_dsub+0x368>)
    7c46:	0869      	lsrs	r1, r5, #1
    7c48:	403a      	ands	r2, r7
    7c4a:	4028      	ands	r0, r5
    7c4c:	4308      	orrs	r0, r1
    7c4e:	07d5      	lsls	r5, r2, #31
    7c50:	4305      	orrs	r5, r0
    7c52:	0857      	lsrs	r7, r2, #1
    7c54:	469a      	mov	sl, r3
    7c56:	e729      	b.n	7aac <__aeabi_dsub+0x58>
    7c58:	0006      	movs	r6, r0
    7c5a:	430e      	orrs	r6, r1
    7c5c:	d000      	beq.n	7c60 <__aeabi_dsub+0x20c>
    7c5e:	e717      	b.n	7a90 <__aeabi_dsub+0x3c>
    7c60:	e714      	b.n	7a8c <__aeabi_dsub+0x38>
    7c62:	0029      	movs	r1, r5
    7c64:	4311      	orrs	r1, r2
    7c66:	d100      	bne.n	7c6a <__aeabi_dsub+0x216>
    7c68:	e1f9      	b.n	805e <__aeabi_dsub+0x60a>
    7c6a:	2180      	movs	r1, #128	; 0x80
    7c6c:	0309      	lsls	r1, r1, #12
    7c6e:	430a      	orrs	r2, r1
    7c70:	0312      	lsls	r2, r2, #12
    7c72:	0b12      	lsrs	r2, r2, #12
    7c74:	e73b      	b.n	7aee <__aeabi_dsub+0x9a>
    7c76:	2301      	movs	r3, #1
    7c78:	425b      	negs	r3, r3
    7c7a:	4698      	mov	r8, r3
    7c7c:	44c4      	add	ip, r8
    7c7e:	4663      	mov	r3, ip
    7c80:	2b00      	cmp	r3, #0
    7c82:	d172      	bne.n	7d6a <__aeabi_dsub+0x316>
    7c84:	1a69      	subs	r1, r5, r1
    7c86:	428d      	cmp	r5, r1
    7c88:	419b      	sbcs	r3, r3
    7c8a:	1a3f      	subs	r7, r7, r0
    7c8c:	425b      	negs	r3, r3
    7c8e:	1aff      	subs	r7, r7, r3
    7c90:	000d      	movs	r5, r1
    7c92:	e768      	b.n	7b66 <__aeabi_dsub+0x112>
    7c94:	0002      	movs	r2, r0
    7c96:	430a      	orrs	r2, r1
    7c98:	d100      	bne.n	7c9c <__aeabi_dsub+0x248>
    7c9a:	e707      	b.n	7aac <__aeabi_dsub+0x58>
    7c9c:	2201      	movs	r2, #1
    7c9e:	4252      	negs	r2, r2
    7ca0:	4690      	mov	r8, r2
    7ca2:	44c4      	add	ip, r8
    7ca4:	4662      	mov	r2, ip
    7ca6:	2a00      	cmp	r2, #0
    7ca8:	d000      	beq.n	7cac <__aeabi_dsub+0x258>
    7caa:	e0e6      	b.n	7e7a <__aeabi_dsub+0x426>
    7cac:	1869      	adds	r1, r5, r1
    7cae:	42a9      	cmp	r1, r5
    7cb0:	41b6      	sbcs	r6, r6
    7cb2:	183f      	adds	r7, r7, r0
    7cb4:	4276      	negs	r6, r6
    7cb6:	19f7      	adds	r7, r6, r7
    7cb8:	000d      	movs	r5, r1
    7cba:	e7ba      	b.n	7c32 <__aeabi_dsub+0x1de>
    7cbc:	2e00      	cmp	r6, #0
    7cbe:	d000      	beq.n	7cc2 <__aeabi_dsub+0x26e>
    7cc0:	e080      	b.n	7dc4 <__aeabi_dsub+0x370>
    7cc2:	1c62      	adds	r2, r4, #1
    7cc4:	0552      	lsls	r2, r2, #21
    7cc6:	0d52      	lsrs	r2, r2, #21
    7cc8:	2a01      	cmp	r2, #1
    7cca:	dc00      	bgt.n	7cce <__aeabi_dsub+0x27a>
    7ccc:	e0f9      	b.n	7ec2 <__aeabi_dsub+0x46e>
    7cce:	1a6a      	subs	r2, r5, r1
    7cd0:	4691      	mov	r9, r2
    7cd2:	454d      	cmp	r5, r9
    7cd4:	41b6      	sbcs	r6, r6
    7cd6:	1a3a      	subs	r2, r7, r0
    7cd8:	4276      	negs	r6, r6
    7cda:	1b92      	subs	r2, r2, r6
    7cdc:	4690      	mov	r8, r2
    7cde:	0212      	lsls	r2, r2, #8
    7ce0:	d400      	bmi.n	7ce4 <__aeabi_dsub+0x290>
    7ce2:	e099      	b.n	7e18 <__aeabi_dsub+0x3c4>
    7ce4:	1b4d      	subs	r5, r1, r5
    7ce6:	42a9      	cmp	r1, r5
    7ce8:	4189      	sbcs	r1, r1
    7cea:	1bc7      	subs	r7, r0, r7
    7cec:	4249      	negs	r1, r1
    7cee:	1a7a      	subs	r2, r7, r1
    7cf0:	4690      	mov	r8, r2
    7cf2:	469a      	mov	sl, r3
    7cf4:	e73c      	b.n	7b70 <__aeabi_dsub+0x11c>
    7cf6:	4652      	mov	r2, sl
    7cf8:	2301      	movs	r3, #1
    7cfa:	2500      	movs	r5, #0
    7cfc:	4013      	ands	r3, r2
    7cfe:	2200      	movs	r2, #0
    7d00:	e6f5      	b.n	7aee <__aeabi_dsub+0x9a>
    7d02:	0028      	movs	r0, r5
    7d04:	f000 fa68 	bl	81d8 <__clzsi2>
    7d08:	3020      	adds	r0, #32
    7d0a:	0003      	movs	r3, r0
    7d0c:	3b08      	subs	r3, #8
    7d0e:	2b1f      	cmp	r3, #31
    7d10:	dc00      	bgt.n	7d14 <__aeabi_dsub+0x2c0>
    7d12:	e739      	b.n	7b88 <__aeabi_dsub+0x134>
    7d14:	002a      	movs	r2, r5
    7d16:	3828      	subs	r0, #40	; 0x28
    7d18:	4082      	lsls	r2, r0
    7d1a:	2500      	movs	r5, #0
    7d1c:	429c      	cmp	r4, r3
    7d1e:	dc00      	bgt.n	7d22 <__aeabi_dsub+0x2ce>
    7d20:	e73e      	b.n	7ba0 <__aeabi_dsub+0x14c>
    7d22:	4f26      	ldr	r7, [pc, #152]	; (7dbc <__aeabi_dsub+0x368>)
    7d24:	1ae4      	subs	r4, r4, r3
    7d26:	4017      	ands	r7, r2
    7d28:	e6c0      	b.n	7aac <__aeabi_dsub+0x58>
    7d2a:	4301      	orrs	r1, r0
    7d2c:	1e48      	subs	r0, r1, #1
    7d2e:	4181      	sbcs	r1, r0
    7d30:	2200      	movs	r2, #0
    7d32:	b2c9      	uxtb	r1, r1
    7d34:	e710      	b.n	7b58 <__aeabi_dsub+0x104>
    7d36:	2e00      	cmp	r6, #0
    7d38:	d000      	beq.n	7d3c <__aeabi_dsub+0x2e8>
    7d3a:	e0f1      	b.n	7f20 <__aeabi_dsub+0x4cc>
    7d3c:	1c62      	adds	r2, r4, #1
    7d3e:	4694      	mov	ip, r2
    7d40:	0552      	lsls	r2, r2, #21
    7d42:	0d52      	lsrs	r2, r2, #21
    7d44:	2a01      	cmp	r2, #1
    7d46:	dc00      	bgt.n	7d4a <__aeabi_dsub+0x2f6>
    7d48:	e0a0      	b.n	7e8c <__aeabi_dsub+0x438>
    7d4a:	4a1b      	ldr	r2, [pc, #108]	; (7db8 <__aeabi_dsub+0x364>)
    7d4c:	4594      	cmp	ip, r2
    7d4e:	d100      	bne.n	7d52 <__aeabi_dsub+0x2fe>
    7d50:	e0c5      	b.n	7ede <__aeabi_dsub+0x48a>
    7d52:	1869      	adds	r1, r5, r1
    7d54:	42a9      	cmp	r1, r5
    7d56:	4192      	sbcs	r2, r2
    7d58:	183f      	adds	r7, r7, r0
    7d5a:	4252      	negs	r2, r2
    7d5c:	19d2      	adds	r2, r2, r7
    7d5e:	0849      	lsrs	r1, r1, #1
    7d60:	07d5      	lsls	r5, r2, #31
    7d62:	430d      	orrs	r5, r1
    7d64:	0857      	lsrs	r7, r2, #1
    7d66:	4664      	mov	r4, ip
    7d68:	e6a0      	b.n	7aac <__aeabi_dsub+0x58>
    7d6a:	4b13      	ldr	r3, [pc, #76]	; (7db8 <__aeabi_dsub+0x364>)
    7d6c:	429c      	cmp	r4, r3
    7d6e:	d000      	beq.n	7d72 <__aeabi_dsub+0x31e>
    7d70:	e6d9      	b.n	7b26 <__aeabi_dsub+0xd2>
    7d72:	e69b      	b.n	7aac <__aeabi_dsub+0x58>
    7d74:	0011      	movs	r1, r2
    7d76:	3c1f      	subs	r4, #31
    7d78:	40e1      	lsrs	r1, r4
    7d7a:	000c      	movs	r4, r1
    7d7c:	2b20      	cmp	r3, #32
    7d7e:	d100      	bne.n	7d82 <__aeabi_dsub+0x32e>
    7d80:	e080      	b.n	7e84 <__aeabi_dsub+0x430>
    7d82:	2140      	movs	r1, #64	; 0x40
    7d84:	1acb      	subs	r3, r1, r3
    7d86:	409a      	lsls	r2, r3
    7d88:	4315      	orrs	r5, r2
    7d8a:	1e6a      	subs	r2, r5, #1
    7d8c:	4195      	sbcs	r5, r2
    7d8e:	2700      	movs	r7, #0
    7d90:	4325      	orrs	r5, r4
    7d92:	2400      	movs	r4, #0
    7d94:	e71f      	b.n	7bd6 <__aeabi_dsub+0x182>
    7d96:	4663      	mov	r3, ip
    7d98:	0002      	movs	r2, r0
    7d9a:	3b20      	subs	r3, #32
    7d9c:	40da      	lsrs	r2, r3
    7d9e:	4663      	mov	r3, ip
    7da0:	2b20      	cmp	r3, #32
    7da2:	d071      	beq.n	7e88 <__aeabi_dsub+0x434>
    7da4:	2340      	movs	r3, #64	; 0x40
    7da6:	4666      	mov	r6, ip
    7da8:	1b9b      	subs	r3, r3, r6
    7daa:	4098      	lsls	r0, r3
    7dac:	4301      	orrs	r1, r0
    7dae:	1e48      	subs	r0, r1, #1
    7db0:	4181      	sbcs	r1, r0
    7db2:	4311      	orrs	r1, r2
    7db4:	2200      	movs	r2, #0
    7db6:	e6cf      	b.n	7b58 <__aeabi_dsub+0x104>
    7db8:	000007ff 	.word	0x000007ff
    7dbc:	ff7fffff 	.word	0xff7fffff
    7dc0:	800fffff 	.word	0x800fffff
    7dc4:	2c00      	cmp	r4, #0
    7dc6:	d048      	beq.n	7e5a <__aeabi_dsub+0x406>
    7dc8:	4cca      	ldr	r4, [pc, #808]	; (80f4 <__aeabi_dsub+0x6a0>)
    7dca:	42a2      	cmp	r2, r4
    7dcc:	d100      	bne.n	7dd0 <__aeabi_dsub+0x37c>
    7dce:	e0a2      	b.n	7f16 <__aeabi_dsub+0x4c2>
    7dd0:	4274      	negs	r4, r6
    7dd2:	46a1      	mov	r9, r4
    7dd4:	2480      	movs	r4, #128	; 0x80
    7dd6:	0424      	lsls	r4, r4, #16
    7dd8:	4327      	orrs	r7, r4
    7dda:	464c      	mov	r4, r9
    7ddc:	2c38      	cmp	r4, #56	; 0x38
    7dde:	dd00      	ble.n	7de2 <__aeabi_dsub+0x38e>
    7de0:	e0db      	b.n	7f9a <__aeabi_dsub+0x546>
    7de2:	2c1f      	cmp	r4, #31
    7de4:	dd00      	ble.n	7de8 <__aeabi_dsub+0x394>
    7de6:	e144      	b.n	8072 <__aeabi_dsub+0x61e>
    7de8:	464e      	mov	r6, r9
    7dea:	2420      	movs	r4, #32
    7dec:	1ba4      	subs	r4, r4, r6
    7dee:	003e      	movs	r6, r7
    7df0:	40a6      	lsls	r6, r4
    7df2:	46a2      	mov	sl, r4
    7df4:	46b0      	mov	r8, r6
    7df6:	464c      	mov	r4, r9
    7df8:	002e      	movs	r6, r5
    7dfa:	40e6      	lsrs	r6, r4
    7dfc:	46b4      	mov	ip, r6
    7dfe:	4646      	mov	r6, r8
    7e00:	4664      	mov	r4, ip
    7e02:	4326      	orrs	r6, r4
    7e04:	4654      	mov	r4, sl
    7e06:	40a5      	lsls	r5, r4
    7e08:	1e6c      	subs	r4, r5, #1
    7e0a:	41a5      	sbcs	r5, r4
    7e0c:	0034      	movs	r4, r6
    7e0e:	432c      	orrs	r4, r5
    7e10:	464d      	mov	r5, r9
    7e12:	40ef      	lsrs	r7, r5
    7e14:	1b0d      	subs	r5, r1, r4
    7e16:	e028      	b.n	7e6a <__aeabi_dsub+0x416>
    7e18:	464a      	mov	r2, r9
    7e1a:	4643      	mov	r3, r8
    7e1c:	464d      	mov	r5, r9
    7e1e:	431a      	orrs	r2, r3
    7e20:	d000      	beq.n	7e24 <__aeabi_dsub+0x3d0>
    7e22:	e6a5      	b.n	7b70 <__aeabi_dsub+0x11c>
    7e24:	2300      	movs	r3, #0
    7e26:	2400      	movs	r4, #0
    7e28:	2500      	movs	r5, #0
    7e2a:	e6de      	b.n	7bea <__aeabi_dsub+0x196>
    7e2c:	2a1f      	cmp	r2, #31
    7e2e:	dc5a      	bgt.n	7ee6 <__aeabi_dsub+0x492>
    7e30:	4666      	mov	r6, ip
    7e32:	2220      	movs	r2, #32
    7e34:	1b92      	subs	r2, r2, r6
    7e36:	0006      	movs	r6, r0
    7e38:	4096      	lsls	r6, r2
    7e3a:	4691      	mov	r9, r2
    7e3c:	46b0      	mov	r8, r6
    7e3e:	4662      	mov	r2, ip
    7e40:	000e      	movs	r6, r1
    7e42:	40d6      	lsrs	r6, r2
    7e44:	4642      	mov	r2, r8
    7e46:	4316      	orrs	r6, r2
    7e48:	464a      	mov	r2, r9
    7e4a:	4091      	lsls	r1, r2
    7e4c:	1e4a      	subs	r2, r1, #1
    7e4e:	4191      	sbcs	r1, r2
    7e50:	0002      	movs	r2, r0
    7e52:	4660      	mov	r0, ip
    7e54:	4331      	orrs	r1, r6
    7e56:	40c2      	lsrs	r2, r0
    7e58:	e6e4      	b.n	7c24 <__aeabi_dsub+0x1d0>
    7e5a:	003c      	movs	r4, r7
    7e5c:	432c      	orrs	r4, r5
    7e5e:	d05a      	beq.n	7f16 <__aeabi_dsub+0x4c2>
    7e60:	43f4      	mvns	r4, r6
    7e62:	46a1      	mov	r9, r4
    7e64:	2c00      	cmp	r4, #0
    7e66:	d152      	bne.n	7f0e <__aeabi_dsub+0x4ba>
    7e68:	1b4d      	subs	r5, r1, r5
    7e6a:	42a9      	cmp	r1, r5
    7e6c:	4189      	sbcs	r1, r1
    7e6e:	1bc7      	subs	r7, r0, r7
    7e70:	4249      	negs	r1, r1
    7e72:	1a7f      	subs	r7, r7, r1
    7e74:	0014      	movs	r4, r2
    7e76:	469a      	mov	sl, r3
    7e78:	e675      	b.n	7b66 <__aeabi_dsub+0x112>
    7e7a:	4a9e      	ldr	r2, [pc, #632]	; (80f4 <__aeabi_dsub+0x6a0>)
    7e7c:	4294      	cmp	r4, r2
    7e7e:	d000      	beq.n	7e82 <__aeabi_dsub+0x42e>
    7e80:	e6c7      	b.n	7c12 <__aeabi_dsub+0x1be>
    7e82:	e613      	b.n	7aac <__aeabi_dsub+0x58>
    7e84:	2200      	movs	r2, #0
    7e86:	e77f      	b.n	7d88 <__aeabi_dsub+0x334>
    7e88:	2000      	movs	r0, #0
    7e8a:	e78f      	b.n	7dac <__aeabi_dsub+0x358>
    7e8c:	2c00      	cmp	r4, #0
    7e8e:	d000      	beq.n	7e92 <__aeabi_dsub+0x43e>
    7e90:	e0c8      	b.n	8024 <__aeabi_dsub+0x5d0>
    7e92:	003b      	movs	r3, r7
    7e94:	432b      	orrs	r3, r5
    7e96:	d100      	bne.n	7e9a <__aeabi_dsub+0x446>
    7e98:	e10f      	b.n	80ba <__aeabi_dsub+0x666>
    7e9a:	0003      	movs	r3, r0
    7e9c:	430b      	orrs	r3, r1
    7e9e:	d100      	bne.n	7ea2 <__aeabi_dsub+0x44e>
    7ea0:	e604      	b.n	7aac <__aeabi_dsub+0x58>
    7ea2:	1869      	adds	r1, r5, r1
    7ea4:	42a9      	cmp	r1, r5
    7ea6:	419b      	sbcs	r3, r3
    7ea8:	183f      	adds	r7, r7, r0
    7eaa:	425b      	negs	r3, r3
    7eac:	19df      	adds	r7, r3, r7
    7eae:	023b      	lsls	r3, r7, #8
    7eb0:	d400      	bmi.n	7eb4 <__aeabi_dsub+0x460>
    7eb2:	e11a      	b.n	80ea <__aeabi_dsub+0x696>
    7eb4:	4b90      	ldr	r3, [pc, #576]	; (80f8 <__aeabi_dsub+0x6a4>)
    7eb6:	000d      	movs	r5, r1
    7eb8:	401f      	ands	r7, r3
    7eba:	4664      	mov	r4, ip
    7ebc:	e5f6      	b.n	7aac <__aeabi_dsub+0x58>
    7ebe:	469a      	mov	sl, r3
    7ec0:	e689      	b.n	7bd6 <__aeabi_dsub+0x182>
    7ec2:	003a      	movs	r2, r7
    7ec4:	432a      	orrs	r2, r5
    7ec6:	2c00      	cmp	r4, #0
    7ec8:	d15c      	bne.n	7f84 <__aeabi_dsub+0x530>
    7eca:	2a00      	cmp	r2, #0
    7ecc:	d175      	bne.n	7fba <__aeabi_dsub+0x566>
    7ece:	0002      	movs	r2, r0
    7ed0:	430a      	orrs	r2, r1
    7ed2:	d100      	bne.n	7ed6 <__aeabi_dsub+0x482>
    7ed4:	e0ca      	b.n	806c <__aeabi_dsub+0x618>
    7ed6:	0007      	movs	r7, r0
    7ed8:	000d      	movs	r5, r1
    7eda:	469a      	mov	sl, r3
    7edc:	e5e6      	b.n	7aac <__aeabi_dsub+0x58>
    7ede:	4664      	mov	r4, ip
    7ee0:	2200      	movs	r2, #0
    7ee2:	2500      	movs	r5, #0
    7ee4:	e681      	b.n	7bea <__aeabi_dsub+0x196>
    7ee6:	4662      	mov	r2, ip
    7ee8:	0006      	movs	r6, r0
    7eea:	3a20      	subs	r2, #32
    7eec:	40d6      	lsrs	r6, r2
    7eee:	4662      	mov	r2, ip
    7ef0:	46b0      	mov	r8, r6
    7ef2:	2a20      	cmp	r2, #32
    7ef4:	d100      	bne.n	7ef8 <__aeabi_dsub+0x4a4>
    7ef6:	e0b7      	b.n	8068 <__aeabi_dsub+0x614>
    7ef8:	2240      	movs	r2, #64	; 0x40
    7efa:	4666      	mov	r6, ip
    7efc:	1b92      	subs	r2, r2, r6
    7efe:	4090      	lsls	r0, r2
    7f00:	4301      	orrs	r1, r0
    7f02:	4642      	mov	r2, r8
    7f04:	1e48      	subs	r0, r1, #1
    7f06:	4181      	sbcs	r1, r0
    7f08:	4311      	orrs	r1, r2
    7f0a:	2200      	movs	r2, #0
    7f0c:	e68a      	b.n	7c24 <__aeabi_dsub+0x1d0>
    7f0e:	4c79      	ldr	r4, [pc, #484]	; (80f4 <__aeabi_dsub+0x6a0>)
    7f10:	42a2      	cmp	r2, r4
    7f12:	d000      	beq.n	7f16 <__aeabi_dsub+0x4c2>
    7f14:	e761      	b.n	7dda <__aeabi_dsub+0x386>
    7f16:	0007      	movs	r7, r0
    7f18:	000d      	movs	r5, r1
    7f1a:	0014      	movs	r4, r2
    7f1c:	469a      	mov	sl, r3
    7f1e:	e5c5      	b.n	7aac <__aeabi_dsub+0x58>
    7f20:	2c00      	cmp	r4, #0
    7f22:	d141      	bne.n	7fa8 <__aeabi_dsub+0x554>
    7f24:	003c      	movs	r4, r7
    7f26:	432c      	orrs	r4, r5
    7f28:	d078      	beq.n	801c <__aeabi_dsub+0x5c8>
    7f2a:	43f4      	mvns	r4, r6
    7f2c:	46a1      	mov	r9, r4
    7f2e:	2c00      	cmp	r4, #0
    7f30:	d020      	beq.n	7f74 <__aeabi_dsub+0x520>
    7f32:	4c70      	ldr	r4, [pc, #448]	; (80f4 <__aeabi_dsub+0x6a0>)
    7f34:	42a2      	cmp	r2, r4
    7f36:	d071      	beq.n	801c <__aeabi_dsub+0x5c8>
    7f38:	464c      	mov	r4, r9
    7f3a:	2c38      	cmp	r4, #56	; 0x38
    7f3c:	dd00      	ble.n	7f40 <__aeabi_dsub+0x4ec>
    7f3e:	e0b2      	b.n	80a6 <__aeabi_dsub+0x652>
    7f40:	2c1f      	cmp	r4, #31
    7f42:	dd00      	ble.n	7f46 <__aeabi_dsub+0x4f2>
    7f44:	e0bc      	b.n	80c0 <__aeabi_dsub+0x66c>
    7f46:	2620      	movs	r6, #32
    7f48:	1b34      	subs	r4, r6, r4
    7f4a:	46a2      	mov	sl, r4
    7f4c:	003c      	movs	r4, r7
    7f4e:	4656      	mov	r6, sl
    7f50:	40b4      	lsls	r4, r6
    7f52:	464e      	mov	r6, r9
    7f54:	46a0      	mov	r8, r4
    7f56:	002c      	movs	r4, r5
    7f58:	40f4      	lsrs	r4, r6
    7f5a:	46a4      	mov	ip, r4
    7f5c:	4644      	mov	r4, r8
    7f5e:	4666      	mov	r6, ip
    7f60:	4334      	orrs	r4, r6
    7f62:	46a4      	mov	ip, r4
    7f64:	4654      	mov	r4, sl
    7f66:	40a5      	lsls	r5, r4
    7f68:	4664      	mov	r4, ip
    7f6a:	1e6e      	subs	r6, r5, #1
    7f6c:	41b5      	sbcs	r5, r6
    7f6e:	4325      	orrs	r5, r4
    7f70:	464c      	mov	r4, r9
    7f72:	40e7      	lsrs	r7, r4
    7f74:	186d      	adds	r5, r5, r1
    7f76:	428d      	cmp	r5, r1
    7f78:	4189      	sbcs	r1, r1
    7f7a:	183f      	adds	r7, r7, r0
    7f7c:	4249      	negs	r1, r1
    7f7e:	19cf      	adds	r7, r1, r7
    7f80:	0014      	movs	r4, r2
    7f82:	e656      	b.n	7c32 <__aeabi_dsub+0x1de>
    7f84:	2a00      	cmp	r2, #0
    7f86:	d12f      	bne.n	7fe8 <__aeabi_dsub+0x594>
    7f88:	0002      	movs	r2, r0
    7f8a:	430a      	orrs	r2, r1
    7f8c:	d100      	bne.n	7f90 <__aeabi_dsub+0x53c>
    7f8e:	e084      	b.n	809a <__aeabi_dsub+0x646>
    7f90:	0007      	movs	r7, r0
    7f92:	000d      	movs	r5, r1
    7f94:	469a      	mov	sl, r3
    7f96:	4c57      	ldr	r4, [pc, #348]	; (80f4 <__aeabi_dsub+0x6a0>)
    7f98:	e588      	b.n	7aac <__aeabi_dsub+0x58>
    7f9a:	433d      	orrs	r5, r7
    7f9c:	1e6f      	subs	r7, r5, #1
    7f9e:	41bd      	sbcs	r5, r7
    7fa0:	b2ec      	uxtb	r4, r5
    7fa2:	2700      	movs	r7, #0
    7fa4:	1b0d      	subs	r5, r1, r4
    7fa6:	e760      	b.n	7e6a <__aeabi_dsub+0x416>
    7fa8:	4c52      	ldr	r4, [pc, #328]	; (80f4 <__aeabi_dsub+0x6a0>)
    7faa:	42a2      	cmp	r2, r4
    7fac:	d036      	beq.n	801c <__aeabi_dsub+0x5c8>
    7fae:	4274      	negs	r4, r6
    7fb0:	2680      	movs	r6, #128	; 0x80
    7fb2:	0436      	lsls	r6, r6, #16
    7fb4:	46a1      	mov	r9, r4
    7fb6:	4337      	orrs	r7, r6
    7fb8:	e7be      	b.n	7f38 <__aeabi_dsub+0x4e4>
    7fba:	0002      	movs	r2, r0
    7fbc:	430a      	orrs	r2, r1
    7fbe:	d100      	bne.n	7fc2 <__aeabi_dsub+0x56e>
    7fc0:	e574      	b.n	7aac <__aeabi_dsub+0x58>
    7fc2:	1a6a      	subs	r2, r5, r1
    7fc4:	4690      	mov	r8, r2
    7fc6:	4545      	cmp	r5, r8
    7fc8:	41b6      	sbcs	r6, r6
    7fca:	1a3a      	subs	r2, r7, r0
    7fcc:	4276      	negs	r6, r6
    7fce:	1b92      	subs	r2, r2, r6
    7fd0:	4694      	mov	ip, r2
    7fd2:	0212      	lsls	r2, r2, #8
    7fd4:	d400      	bmi.n	7fd8 <__aeabi_dsub+0x584>
    7fd6:	e5f7      	b.n	7bc8 <__aeabi_dsub+0x174>
    7fd8:	1b4d      	subs	r5, r1, r5
    7fda:	42a9      	cmp	r1, r5
    7fdc:	4189      	sbcs	r1, r1
    7fde:	1bc7      	subs	r7, r0, r7
    7fe0:	4249      	negs	r1, r1
    7fe2:	1a7f      	subs	r7, r7, r1
    7fe4:	469a      	mov	sl, r3
    7fe6:	e561      	b.n	7aac <__aeabi_dsub+0x58>
    7fe8:	0002      	movs	r2, r0
    7fea:	430a      	orrs	r2, r1
    7fec:	d03a      	beq.n	8064 <__aeabi_dsub+0x610>
    7fee:	08ed      	lsrs	r5, r5, #3
    7ff0:	077c      	lsls	r4, r7, #29
    7ff2:	432c      	orrs	r4, r5
    7ff4:	2580      	movs	r5, #128	; 0x80
    7ff6:	08fa      	lsrs	r2, r7, #3
    7ff8:	032d      	lsls	r5, r5, #12
    7ffa:	422a      	tst	r2, r5
    7ffc:	d008      	beq.n	8010 <__aeabi_dsub+0x5bc>
    7ffe:	08c7      	lsrs	r7, r0, #3
    8000:	422f      	tst	r7, r5
    8002:	d105      	bne.n	8010 <__aeabi_dsub+0x5bc>
    8004:	0745      	lsls	r5, r0, #29
    8006:	002c      	movs	r4, r5
    8008:	003a      	movs	r2, r7
    800a:	469a      	mov	sl, r3
    800c:	08c9      	lsrs	r1, r1, #3
    800e:	430c      	orrs	r4, r1
    8010:	0f67      	lsrs	r7, r4, #29
    8012:	00d2      	lsls	r2, r2, #3
    8014:	00e5      	lsls	r5, r4, #3
    8016:	4317      	orrs	r7, r2
    8018:	4c36      	ldr	r4, [pc, #216]	; (80f4 <__aeabi_dsub+0x6a0>)
    801a:	e547      	b.n	7aac <__aeabi_dsub+0x58>
    801c:	0007      	movs	r7, r0
    801e:	000d      	movs	r5, r1
    8020:	0014      	movs	r4, r2
    8022:	e543      	b.n	7aac <__aeabi_dsub+0x58>
    8024:	003a      	movs	r2, r7
    8026:	432a      	orrs	r2, r5
    8028:	d043      	beq.n	80b2 <__aeabi_dsub+0x65e>
    802a:	0002      	movs	r2, r0
    802c:	430a      	orrs	r2, r1
    802e:	d019      	beq.n	8064 <__aeabi_dsub+0x610>
    8030:	08ed      	lsrs	r5, r5, #3
    8032:	077c      	lsls	r4, r7, #29
    8034:	432c      	orrs	r4, r5
    8036:	2580      	movs	r5, #128	; 0x80
    8038:	08fa      	lsrs	r2, r7, #3
    803a:	032d      	lsls	r5, r5, #12
    803c:	422a      	tst	r2, r5
    803e:	d007      	beq.n	8050 <__aeabi_dsub+0x5fc>
    8040:	08c6      	lsrs	r6, r0, #3
    8042:	422e      	tst	r6, r5
    8044:	d104      	bne.n	8050 <__aeabi_dsub+0x5fc>
    8046:	0747      	lsls	r7, r0, #29
    8048:	003c      	movs	r4, r7
    804a:	0032      	movs	r2, r6
    804c:	08c9      	lsrs	r1, r1, #3
    804e:	430c      	orrs	r4, r1
    8050:	00d7      	lsls	r7, r2, #3
    8052:	0f62      	lsrs	r2, r4, #29
    8054:	00e5      	lsls	r5, r4, #3
    8056:	4317      	orrs	r7, r2
    8058:	469a      	mov	sl, r3
    805a:	4c26      	ldr	r4, [pc, #152]	; (80f4 <__aeabi_dsub+0x6a0>)
    805c:	e526      	b.n	7aac <__aeabi_dsub+0x58>
    805e:	2200      	movs	r2, #0
    8060:	2500      	movs	r5, #0
    8062:	e544      	b.n	7aee <__aeabi_dsub+0x9a>
    8064:	4c23      	ldr	r4, [pc, #140]	; (80f4 <__aeabi_dsub+0x6a0>)
    8066:	e521      	b.n	7aac <__aeabi_dsub+0x58>
    8068:	2000      	movs	r0, #0
    806a:	e749      	b.n	7f00 <__aeabi_dsub+0x4ac>
    806c:	2300      	movs	r3, #0
    806e:	2500      	movs	r5, #0
    8070:	e5bb      	b.n	7bea <__aeabi_dsub+0x196>
    8072:	464c      	mov	r4, r9
    8074:	003e      	movs	r6, r7
    8076:	3c20      	subs	r4, #32
    8078:	40e6      	lsrs	r6, r4
    807a:	464c      	mov	r4, r9
    807c:	46b4      	mov	ip, r6
    807e:	2c20      	cmp	r4, #32
    8080:	d031      	beq.n	80e6 <__aeabi_dsub+0x692>
    8082:	2440      	movs	r4, #64	; 0x40
    8084:	464e      	mov	r6, r9
    8086:	1ba6      	subs	r6, r4, r6
    8088:	40b7      	lsls	r7, r6
    808a:	433d      	orrs	r5, r7
    808c:	1e6c      	subs	r4, r5, #1
    808e:	41a5      	sbcs	r5, r4
    8090:	4664      	mov	r4, ip
    8092:	432c      	orrs	r4, r5
    8094:	2700      	movs	r7, #0
    8096:	1b0d      	subs	r5, r1, r4
    8098:	e6e7      	b.n	7e6a <__aeabi_dsub+0x416>
    809a:	2280      	movs	r2, #128	; 0x80
    809c:	2300      	movs	r3, #0
    809e:	0312      	lsls	r2, r2, #12
    80a0:	4c14      	ldr	r4, [pc, #80]	; (80f4 <__aeabi_dsub+0x6a0>)
    80a2:	2500      	movs	r5, #0
    80a4:	e5a1      	b.n	7bea <__aeabi_dsub+0x196>
    80a6:	433d      	orrs	r5, r7
    80a8:	1e6f      	subs	r7, r5, #1
    80aa:	41bd      	sbcs	r5, r7
    80ac:	2700      	movs	r7, #0
    80ae:	b2ed      	uxtb	r5, r5
    80b0:	e760      	b.n	7f74 <__aeabi_dsub+0x520>
    80b2:	0007      	movs	r7, r0
    80b4:	000d      	movs	r5, r1
    80b6:	4c0f      	ldr	r4, [pc, #60]	; (80f4 <__aeabi_dsub+0x6a0>)
    80b8:	e4f8      	b.n	7aac <__aeabi_dsub+0x58>
    80ba:	0007      	movs	r7, r0
    80bc:	000d      	movs	r5, r1
    80be:	e4f5      	b.n	7aac <__aeabi_dsub+0x58>
    80c0:	464e      	mov	r6, r9
    80c2:	003c      	movs	r4, r7
    80c4:	3e20      	subs	r6, #32
    80c6:	40f4      	lsrs	r4, r6
    80c8:	46a0      	mov	r8, r4
    80ca:	464c      	mov	r4, r9
    80cc:	2c20      	cmp	r4, #32
    80ce:	d00e      	beq.n	80ee <__aeabi_dsub+0x69a>
    80d0:	2440      	movs	r4, #64	; 0x40
    80d2:	464e      	mov	r6, r9
    80d4:	1ba4      	subs	r4, r4, r6
    80d6:	40a7      	lsls	r7, r4
    80d8:	433d      	orrs	r5, r7
    80da:	1e6f      	subs	r7, r5, #1
    80dc:	41bd      	sbcs	r5, r7
    80de:	4644      	mov	r4, r8
    80e0:	2700      	movs	r7, #0
    80e2:	4325      	orrs	r5, r4
    80e4:	e746      	b.n	7f74 <__aeabi_dsub+0x520>
    80e6:	2700      	movs	r7, #0
    80e8:	e7cf      	b.n	808a <__aeabi_dsub+0x636>
    80ea:	000d      	movs	r5, r1
    80ec:	e573      	b.n	7bd6 <__aeabi_dsub+0x182>
    80ee:	2700      	movs	r7, #0
    80f0:	e7f2      	b.n	80d8 <__aeabi_dsub+0x684>
    80f2:	46c0      	nop			; (mov r8, r8)
    80f4:	000007ff 	.word	0x000007ff
    80f8:	ff7fffff 	.word	0xff7fffff

000080fc <__aeabi_d2iz>:
    80fc:	030b      	lsls	r3, r1, #12
    80fe:	b530      	push	{r4, r5, lr}
    8100:	4d13      	ldr	r5, [pc, #76]	; (8150 <__aeabi_d2iz+0x54>)
    8102:	0b1a      	lsrs	r2, r3, #12
    8104:	004b      	lsls	r3, r1, #1
    8106:	0d5b      	lsrs	r3, r3, #21
    8108:	0fc9      	lsrs	r1, r1, #31
    810a:	2400      	movs	r4, #0
    810c:	42ab      	cmp	r3, r5
    810e:	dd11      	ble.n	8134 <__aeabi_d2iz+0x38>
    8110:	4c10      	ldr	r4, [pc, #64]	; (8154 <__aeabi_d2iz+0x58>)
    8112:	42a3      	cmp	r3, r4
    8114:	dc10      	bgt.n	8138 <__aeabi_d2iz+0x3c>
    8116:	2480      	movs	r4, #128	; 0x80
    8118:	0364      	lsls	r4, r4, #13
    811a:	4322      	orrs	r2, r4
    811c:	4c0e      	ldr	r4, [pc, #56]	; (8158 <__aeabi_d2iz+0x5c>)
    811e:	1ae4      	subs	r4, r4, r3
    8120:	2c1f      	cmp	r4, #31
    8122:	dd0c      	ble.n	813e <__aeabi_d2iz+0x42>
    8124:	480d      	ldr	r0, [pc, #52]	; (815c <__aeabi_d2iz+0x60>)
    8126:	1ac3      	subs	r3, r0, r3
    8128:	40da      	lsrs	r2, r3
    812a:	0013      	movs	r3, r2
    812c:	425c      	negs	r4, r3
    812e:	2900      	cmp	r1, #0
    8130:	d100      	bne.n	8134 <__aeabi_d2iz+0x38>
    8132:	001c      	movs	r4, r3
    8134:	0020      	movs	r0, r4
    8136:	bd30      	pop	{r4, r5, pc}
    8138:	4b09      	ldr	r3, [pc, #36]	; (8160 <__aeabi_d2iz+0x64>)
    813a:	18cc      	adds	r4, r1, r3
    813c:	e7fa      	b.n	8134 <__aeabi_d2iz+0x38>
    813e:	40e0      	lsrs	r0, r4
    8140:	4c08      	ldr	r4, [pc, #32]	; (8164 <__aeabi_d2iz+0x68>)
    8142:	46a4      	mov	ip, r4
    8144:	4463      	add	r3, ip
    8146:	409a      	lsls	r2, r3
    8148:	0013      	movs	r3, r2
    814a:	4303      	orrs	r3, r0
    814c:	e7ee      	b.n	812c <__aeabi_d2iz+0x30>
    814e:	46c0      	nop			; (mov r8, r8)
    8150:	000003fe 	.word	0x000003fe
    8154:	0000041d 	.word	0x0000041d
    8158:	00000433 	.word	0x00000433
    815c:	00000413 	.word	0x00000413
    8160:	7fffffff 	.word	0x7fffffff
    8164:	fffffbed 	.word	0xfffffbed

00008168 <__aeabi_ui2d>:
    8168:	b570      	push	{r4, r5, r6, lr}
    816a:	1e05      	subs	r5, r0, #0
    816c:	d028      	beq.n	81c0 <__aeabi_ui2d+0x58>
    816e:	f000 f833 	bl	81d8 <__clzsi2>
    8172:	4b15      	ldr	r3, [pc, #84]	; (81c8 <__aeabi_ui2d+0x60>)
    8174:	4a15      	ldr	r2, [pc, #84]	; (81cc <__aeabi_ui2d+0x64>)
    8176:	1a1b      	subs	r3, r3, r0
    8178:	1ad2      	subs	r2, r2, r3
    817a:	2a1f      	cmp	r2, #31
    817c:	dd16      	ble.n	81ac <__aeabi_ui2d+0x44>
    817e:	002c      	movs	r4, r5
    8180:	4a13      	ldr	r2, [pc, #76]	; (81d0 <__aeabi_ui2d+0x68>)
    8182:	2500      	movs	r5, #0
    8184:	1ad2      	subs	r2, r2, r3
    8186:	4094      	lsls	r4, r2
    8188:	055a      	lsls	r2, r3, #21
    818a:	0324      	lsls	r4, r4, #12
    818c:	0b24      	lsrs	r4, r4, #12
    818e:	0d52      	lsrs	r2, r2, #21
    8190:	2100      	movs	r1, #0
    8192:	0324      	lsls	r4, r4, #12
    8194:	0d0b      	lsrs	r3, r1, #20
    8196:	0b24      	lsrs	r4, r4, #12
    8198:	051b      	lsls	r3, r3, #20
    819a:	4323      	orrs	r3, r4
    819c:	4c0d      	ldr	r4, [pc, #52]	; (81d4 <__aeabi_ui2d+0x6c>)
    819e:	0512      	lsls	r2, r2, #20
    81a0:	4023      	ands	r3, r4
    81a2:	4313      	orrs	r3, r2
    81a4:	005b      	lsls	r3, r3, #1
    81a6:	0028      	movs	r0, r5
    81a8:	0859      	lsrs	r1, r3, #1
    81aa:	bd70      	pop	{r4, r5, r6, pc}
    81ac:	210b      	movs	r1, #11
    81ae:	002c      	movs	r4, r5
    81b0:	1a08      	subs	r0, r1, r0
    81b2:	40c4      	lsrs	r4, r0
    81b4:	4095      	lsls	r5, r2
    81b6:	0324      	lsls	r4, r4, #12
    81b8:	055a      	lsls	r2, r3, #21
    81ba:	0b24      	lsrs	r4, r4, #12
    81bc:	0d52      	lsrs	r2, r2, #21
    81be:	e7e7      	b.n	8190 <__aeabi_ui2d+0x28>
    81c0:	2200      	movs	r2, #0
    81c2:	2400      	movs	r4, #0
    81c4:	e7e4      	b.n	8190 <__aeabi_ui2d+0x28>
    81c6:	46c0      	nop			; (mov r8, r8)
    81c8:	0000041e 	.word	0x0000041e
    81cc:	00000433 	.word	0x00000433
    81d0:	00000413 	.word	0x00000413
    81d4:	800fffff 	.word	0x800fffff

000081d8 <__clzsi2>:
    81d8:	211c      	movs	r1, #28
    81da:	2301      	movs	r3, #1
    81dc:	041b      	lsls	r3, r3, #16
    81de:	4298      	cmp	r0, r3
    81e0:	d301      	bcc.n	81e6 <__clzsi2+0xe>
    81e2:	0c00      	lsrs	r0, r0, #16
    81e4:	3910      	subs	r1, #16
    81e6:	0a1b      	lsrs	r3, r3, #8
    81e8:	4298      	cmp	r0, r3
    81ea:	d301      	bcc.n	81f0 <__clzsi2+0x18>
    81ec:	0a00      	lsrs	r0, r0, #8
    81ee:	3908      	subs	r1, #8
    81f0:	091b      	lsrs	r3, r3, #4
    81f2:	4298      	cmp	r0, r3
    81f4:	d301      	bcc.n	81fa <__clzsi2+0x22>
    81f6:	0900      	lsrs	r0, r0, #4
    81f8:	3904      	subs	r1, #4
    81fa:	a202      	add	r2, pc, #8	; (adr r2, 8204 <__clzsi2+0x2c>)
    81fc:	5c10      	ldrb	r0, [r2, r0]
    81fe:	1840      	adds	r0, r0, r1
    8200:	4770      	bx	lr
    8202:	46c0      	nop			; (mov r8, r8)
    8204:	02020304 	.word	0x02020304
    8208:	01010101 	.word	0x01010101
	...

00008214 <__clzdi2>:
    8214:	b510      	push	{r4, lr}
    8216:	2900      	cmp	r1, #0
    8218:	d103      	bne.n	8222 <__clzdi2+0xe>
    821a:	f7ff ffdd 	bl	81d8 <__clzsi2>
    821e:	3020      	adds	r0, #32
    8220:	e002      	b.n	8228 <__clzdi2+0x14>
    8222:	1c08      	adds	r0, r1, #0
    8224:	f7ff ffd8 	bl	81d8 <__clzsi2>
    8228:	bd10      	pop	{r4, pc}
    822a:	46c0      	nop			; (mov r8, r8)

0000822c <__libc_init_array>:
    822c:	4b0e      	ldr	r3, [pc, #56]	; (8268 <__libc_init_array+0x3c>)
    822e:	b570      	push	{r4, r5, r6, lr}
    8230:	2500      	movs	r5, #0
    8232:	001e      	movs	r6, r3
    8234:	4c0d      	ldr	r4, [pc, #52]	; (826c <__libc_init_array+0x40>)
    8236:	1ae4      	subs	r4, r4, r3
    8238:	10a4      	asrs	r4, r4, #2
    823a:	42a5      	cmp	r5, r4
    823c:	d004      	beq.n	8248 <__libc_init_array+0x1c>
    823e:	00ab      	lsls	r3, r5, #2
    8240:	58f3      	ldr	r3, [r6, r3]
    8242:	4798      	blx	r3
    8244:	3501      	adds	r5, #1
    8246:	e7f8      	b.n	823a <__libc_init_array+0xe>
    8248:	f001 fd30 	bl	9cac <_init>
    824c:	4b08      	ldr	r3, [pc, #32]	; (8270 <__libc_init_array+0x44>)
    824e:	2500      	movs	r5, #0
    8250:	001e      	movs	r6, r3
    8252:	4c08      	ldr	r4, [pc, #32]	; (8274 <__libc_init_array+0x48>)
    8254:	1ae4      	subs	r4, r4, r3
    8256:	10a4      	asrs	r4, r4, #2
    8258:	42a5      	cmp	r5, r4
    825a:	d004      	beq.n	8266 <__libc_init_array+0x3a>
    825c:	00ab      	lsls	r3, r5, #2
    825e:	58f3      	ldr	r3, [r6, r3]
    8260:	4798      	blx	r3
    8262:	3501      	adds	r5, #1
    8264:	e7f8      	b.n	8258 <__libc_init_array+0x2c>
    8266:	bd70      	pop	{r4, r5, r6, pc}
    8268:	00009cb8 	.word	0x00009cb8
    826c:	00009cb8 	.word	0x00009cb8
    8270:	00009cb8 	.word	0x00009cb8
    8274:	00009cbc 	.word	0x00009cbc

00008278 <memcpy>:
    8278:	2300      	movs	r3, #0
    827a:	b510      	push	{r4, lr}
    827c:	429a      	cmp	r2, r3
    827e:	d003      	beq.n	8288 <memcpy+0x10>
    8280:	5ccc      	ldrb	r4, [r1, r3]
    8282:	54c4      	strb	r4, [r0, r3]
    8284:	3301      	adds	r3, #1
    8286:	e7f9      	b.n	827c <memcpy+0x4>
    8288:	bd10      	pop	{r4, pc}
	...

0000828c <siprintf>:
    828c:	b40e      	push	{r1, r2, r3}
    828e:	b510      	push	{r4, lr}
    8290:	b09d      	sub	sp, #116	; 0x74
    8292:	a902      	add	r1, sp, #8
    8294:	9002      	str	r0, [sp, #8]
    8296:	6108      	str	r0, [r1, #16]
    8298:	480b      	ldr	r0, [pc, #44]	; (82c8 <siprintf+0x3c>)
    829a:	2482      	movs	r4, #130	; 0x82
    829c:	6088      	str	r0, [r1, #8]
    829e:	6148      	str	r0, [r1, #20]
    82a0:	2001      	movs	r0, #1
    82a2:	4240      	negs	r0, r0
    82a4:	ab1f      	add	r3, sp, #124	; 0x7c
    82a6:	81c8      	strh	r0, [r1, #14]
    82a8:	4808      	ldr	r0, [pc, #32]	; (82cc <siprintf+0x40>)
    82aa:	cb04      	ldmia	r3!, {r2}
    82ac:	00a4      	lsls	r4, r4, #2
    82ae:	6800      	ldr	r0, [r0, #0]
    82b0:	9301      	str	r3, [sp, #4]
    82b2:	818c      	strh	r4, [r1, #12]
    82b4:	f000 f8b2 	bl	841c <_svfiprintf_r>
    82b8:	2300      	movs	r3, #0
    82ba:	9a02      	ldr	r2, [sp, #8]
    82bc:	7013      	strb	r3, [r2, #0]
    82be:	b01d      	add	sp, #116	; 0x74
    82c0:	bc10      	pop	{r4}
    82c2:	bc08      	pop	{r3}
    82c4:	b003      	add	sp, #12
    82c6:	4718      	bx	r3
    82c8:	7fffffff 	.word	0x7fffffff
    82cc:	200000f4 	.word	0x200000f4

000082d0 <siscanf>:
    82d0:	b40e      	push	{r1, r2, r3}
    82d2:	2381      	movs	r3, #129	; 0x81
    82d4:	b570      	push	{r4, r5, r6, lr}
    82d6:	b09d      	sub	sp, #116	; 0x74
    82d8:	ac02      	add	r4, sp, #8
    82da:	ad21      	add	r5, sp, #132	; 0x84
    82dc:	009b      	lsls	r3, r3, #2
    82de:	cd40      	ldmia	r5!, {r6}
    82e0:	81a3      	strh	r3, [r4, #12]
    82e2:	9002      	str	r0, [sp, #8]
    82e4:	9006      	str	r0, [sp, #24]
    82e6:	f000 f81d 	bl	8324 <strlen>
    82ea:	4b0b      	ldr	r3, [pc, #44]	; (8318 <siscanf+0x48>)
    82ec:	6060      	str	r0, [r4, #4]
    82ee:	6263      	str	r3, [r4, #36]	; 0x24
    82f0:	2300      	movs	r3, #0
    82f2:	6160      	str	r0, [r4, #20]
    82f4:	4809      	ldr	r0, [pc, #36]	; (831c <siscanf+0x4c>)
    82f6:	6363      	str	r3, [r4, #52]	; 0x34
    82f8:	64a3      	str	r3, [r4, #72]	; 0x48
    82fa:	3b01      	subs	r3, #1
    82fc:	81e3      	strh	r3, [r4, #14]
    82fe:	0032      	movs	r2, r6
    8300:	002b      	movs	r3, r5
    8302:	0021      	movs	r1, r4
    8304:	6800      	ldr	r0, [r0, #0]
    8306:	9501      	str	r5, [sp, #4]
    8308:	f000 f9e2 	bl	86d0 <__ssvfiscanf_r>
    830c:	b01d      	add	sp, #116	; 0x74
    830e:	bc70      	pop	{r4, r5, r6}
    8310:	bc08      	pop	{r3}
    8312:	b003      	add	sp, #12
    8314:	4718      	bx	r3
    8316:	46c0      	nop			; (mov r8, r8)
    8318:	00008321 	.word	0x00008321
    831c:	200000f4 	.word	0x200000f4

00008320 <__seofread>:
    8320:	2000      	movs	r0, #0
    8322:	4770      	bx	lr

00008324 <strlen>:
    8324:	2300      	movs	r3, #0
    8326:	5cc2      	ldrb	r2, [r0, r3]
    8328:	3301      	adds	r3, #1
    832a:	2a00      	cmp	r2, #0
    832c:	d1fb      	bne.n	8326 <strlen+0x2>
    832e:	1e58      	subs	r0, r3, #1
    8330:	4770      	bx	lr

00008332 <strncmp>:
    8332:	2300      	movs	r3, #0
    8334:	b530      	push	{r4, r5, lr}
    8336:	429a      	cmp	r2, r3
    8338:	d00b      	beq.n	8352 <strncmp+0x20>
    833a:	3a01      	subs	r2, #1
    833c:	5cc4      	ldrb	r4, [r0, r3]
    833e:	5ccd      	ldrb	r5, [r1, r3]
    8340:	42ac      	cmp	r4, r5
    8342:	d105      	bne.n	8350 <strncmp+0x1e>
    8344:	429a      	cmp	r2, r3
    8346:	d002      	beq.n	834e <strncmp+0x1c>
    8348:	3301      	adds	r3, #1
    834a:	2c00      	cmp	r4, #0
    834c:	d1f6      	bne.n	833c <strncmp+0xa>
    834e:	0025      	movs	r5, r4
    8350:	1b63      	subs	r3, r4, r5
    8352:	0018      	movs	r0, r3
    8354:	bd30      	pop	{r4, r5, pc}
	...

00008358 <__ssputs_r>:
    8358:	b5f0      	push	{r4, r5, r6, r7, lr}
    835a:	688e      	ldr	r6, [r1, #8]
    835c:	b085      	sub	sp, #20
    835e:	0007      	movs	r7, r0
    8360:	000c      	movs	r4, r1
    8362:	9203      	str	r2, [sp, #12]
    8364:	9301      	str	r3, [sp, #4]
    8366:	429e      	cmp	r6, r3
    8368:	d843      	bhi.n	83f2 <__ssputs_r+0x9a>
    836a:	2390      	movs	r3, #144	; 0x90
    836c:	898a      	ldrh	r2, [r1, #12]
    836e:	00db      	lsls	r3, r3, #3
    8370:	421a      	tst	r2, r3
    8372:	d03e      	beq.n	83f2 <__ssputs_r+0x9a>
    8374:	2503      	movs	r5, #3
    8376:	6909      	ldr	r1, [r1, #16]
    8378:	6823      	ldr	r3, [r4, #0]
    837a:	9801      	ldr	r0, [sp, #4]
    837c:	1a5b      	subs	r3, r3, r1
    837e:	9302      	str	r3, [sp, #8]
    8380:	6963      	ldr	r3, [r4, #20]
    8382:	435d      	muls	r5, r3
    8384:	0feb      	lsrs	r3, r5, #31
    8386:	195d      	adds	r5, r3, r5
    8388:	9b02      	ldr	r3, [sp, #8]
    838a:	106d      	asrs	r5, r5, #1
    838c:	3301      	adds	r3, #1
    838e:	181b      	adds	r3, r3, r0
    8390:	42ab      	cmp	r3, r5
    8392:	d900      	bls.n	8396 <__ssputs_r+0x3e>
    8394:	001d      	movs	r5, r3
    8396:	0553      	lsls	r3, r2, #21
    8398:	d510      	bpl.n	83bc <__ssputs_r+0x64>
    839a:	0029      	movs	r1, r5
    839c:	0038      	movs	r0, r7
    839e:	f000 fff3 	bl	9388 <_malloc_r>
    83a2:	1e06      	subs	r6, r0, #0
    83a4:	d014      	beq.n	83d0 <__ssputs_r+0x78>
    83a6:	9a02      	ldr	r2, [sp, #8]
    83a8:	6921      	ldr	r1, [r4, #16]
    83aa:	f7ff ff65 	bl	8278 <memcpy>
    83ae:	89a2      	ldrh	r2, [r4, #12]
    83b0:	4b19      	ldr	r3, [pc, #100]	; (8418 <__ssputs_r+0xc0>)
    83b2:	4013      	ands	r3, r2
    83b4:	2280      	movs	r2, #128	; 0x80
    83b6:	4313      	orrs	r3, r2
    83b8:	81a3      	strh	r3, [r4, #12]
    83ba:	e012      	b.n	83e2 <__ssputs_r+0x8a>
    83bc:	002a      	movs	r2, r5
    83be:	0038      	movs	r0, r7
    83c0:	f001 f838 	bl	9434 <_realloc_r>
    83c4:	1e06      	subs	r6, r0, #0
    83c6:	d10c      	bne.n	83e2 <__ssputs_r+0x8a>
    83c8:	6921      	ldr	r1, [r4, #16]
    83ca:	0038      	movs	r0, r7
    83cc:	f000 ff96 	bl	92fc <_free_r>
    83d0:	230c      	movs	r3, #12
    83d2:	2240      	movs	r2, #64	; 0x40
    83d4:	2001      	movs	r0, #1
    83d6:	603b      	str	r3, [r7, #0]
    83d8:	89a3      	ldrh	r3, [r4, #12]
    83da:	4240      	negs	r0, r0
    83dc:	4313      	orrs	r3, r2
    83de:	81a3      	strh	r3, [r4, #12]
    83e0:	e017      	b.n	8412 <__ssputs_r+0xba>
    83e2:	9b02      	ldr	r3, [sp, #8]
    83e4:	6126      	str	r6, [r4, #16]
    83e6:	18f6      	adds	r6, r6, r3
    83e8:	6026      	str	r6, [r4, #0]
    83ea:	6165      	str	r5, [r4, #20]
    83ec:	9e01      	ldr	r6, [sp, #4]
    83ee:	1aed      	subs	r5, r5, r3
    83f0:	60a5      	str	r5, [r4, #8]
    83f2:	9b01      	ldr	r3, [sp, #4]
    83f4:	42b3      	cmp	r3, r6
    83f6:	d200      	bcs.n	83fa <__ssputs_r+0xa2>
    83f8:	001e      	movs	r6, r3
    83fa:	0032      	movs	r2, r6
    83fc:	9903      	ldr	r1, [sp, #12]
    83fe:	6820      	ldr	r0, [r4, #0]
    8400:	f000 ff67 	bl	92d2 <memmove>
    8404:	2000      	movs	r0, #0
    8406:	68a3      	ldr	r3, [r4, #8]
    8408:	1b9b      	subs	r3, r3, r6
    840a:	60a3      	str	r3, [r4, #8]
    840c:	6823      	ldr	r3, [r4, #0]
    840e:	199e      	adds	r6, r3, r6
    8410:	6026      	str	r6, [r4, #0]
    8412:	b005      	add	sp, #20
    8414:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8416:	46c0      	nop			; (mov r8, r8)
    8418:	fffffb7f 	.word	0xfffffb7f

0000841c <_svfiprintf_r>:
    841c:	b5f0      	push	{r4, r5, r6, r7, lr}
    841e:	b09f      	sub	sp, #124	; 0x7c
    8420:	9002      	str	r0, [sp, #8]
    8422:	9305      	str	r3, [sp, #20]
    8424:	898b      	ldrh	r3, [r1, #12]
    8426:	000f      	movs	r7, r1
    8428:	0016      	movs	r6, r2
    842a:	061b      	lsls	r3, r3, #24
    842c:	d510      	bpl.n	8450 <_svfiprintf_r+0x34>
    842e:	690b      	ldr	r3, [r1, #16]
    8430:	2b00      	cmp	r3, #0
    8432:	d10d      	bne.n	8450 <_svfiprintf_r+0x34>
    8434:	2140      	movs	r1, #64	; 0x40
    8436:	f000 ffa7 	bl	9388 <_malloc_r>
    843a:	6038      	str	r0, [r7, #0]
    843c:	6138      	str	r0, [r7, #16]
    843e:	2800      	cmp	r0, #0
    8440:	d104      	bne.n	844c <_svfiprintf_r+0x30>
    8442:	230c      	movs	r3, #12
    8444:	9a02      	ldr	r2, [sp, #8]
    8446:	3801      	subs	r0, #1
    8448:	6013      	str	r3, [r2, #0]
    844a:	e0d8      	b.n	85fe <_svfiprintf_r+0x1e2>
    844c:	2340      	movs	r3, #64	; 0x40
    844e:	617b      	str	r3, [r7, #20]
    8450:	2300      	movs	r3, #0
    8452:	ad06      	add	r5, sp, #24
    8454:	616b      	str	r3, [r5, #20]
    8456:	3320      	adds	r3, #32
    8458:	766b      	strb	r3, [r5, #25]
    845a:	3310      	adds	r3, #16
    845c:	76ab      	strb	r3, [r5, #26]
    845e:	0034      	movs	r4, r6
    8460:	7823      	ldrb	r3, [r4, #0]
    8462:	2b00      	cmp	r3, #0
    8464:	d103      	bne.n	846e <_svfiprintf_r+0x52>
    8466:	1ba3      	subs	r3, r4, r6
    8468:	9304      	str	r3, [sp, #16]
    846a:	d012      	beq.n	8492 <_svfiprintf_r+0x76>
    846c:	e003      	b.n	8476 <_svfiprintf_r+0x5a>
    846e:	2b25      	cmp	r3, #37	; 0x25
    8470:	d0f9      	beq.n	8466 <_svfiprintf_r+0x4a>
    8472:	3401      	adds	r4, #1
    8474:	e7f4      	b.n	8460 <_svfiprintf_r+0x44>
    8476:	1ba3      	subs	r3, r4, r6
    8478:	0032      	movs	r2, r6
    847a:	0039      	movs	r1, r7
    847c:	9802      	ldr	r0, [sp, #8]
    847e:	f7ff ff6b 	bl	8358 <__ssputs_r>
    8482:	1c43      	adds	r3, r0, #1
    8484:	d100      	bne.n	8488 <_svfiprintf_r+0x6c>
    8486:	e0b4      	b.n	85f2 <_svfiprintf_r+0x1d6>
    8488:	696a      	ldr	r2, [r5, #20]
    848a:	9b04      	ldr	r3, [sp, #16]
    848c:	4694      	mov	ip, r2
    848e:	4463      	add	r3, ip
    8490:	616b      	str	r3, [r5, #20]
    8492:	7823      	ldrb	r3, [r4, #0]
    8494:	2b00      	cmp	r3, #0
    8496:	d100      	bne.n	849a <_svfiprintf_r+0x7e>
    8498:	e0ab      	b.n	85f2 <_svfiprintf_r+0x1d6>
    849a:	2201      	movs	r2, #1
    849c:	2300      	movs	r3, #0
    849e:	4252      	negs	r2, r2
    84a0:	606a      	str	r2, [r5, #4]
    84a2:	a902      	add	r1, sp, #8
    84a4:	3254      	adds	r2, #84	; 0x54
    84a6:	1852      	adds	r2, r2, r1
    84a8:	3401      	adds	r4, #1
    84aa:	602b      	str	r3, [r5, #0]
    84ac:	60eb      	str	r3, [r5, #12]
    84ae:	60ab      	str	r3, [r5, #8]
    84b0:	7013      	strb	r3, [r2, #0]
    84b2:	65ab      	str	r3, [r5, #88]	; 0x58
    84b4:	4e53      	ldr	r6, [pc, #332]	; (8604 <_svfiprintf_r+0x1e8>)
    84b6:	7821      	ldrb	r1, [r4, #0]
    84b8:	2205      	movs	r2, #5
    84ba:	0030      	movs	r0, r6
    84bc:	f000 fefe 	bl	92bc <memchr>
    84c0:	2800      	cmp	r0, #0
    84c2:	d007      	beq.n	84d4 <_svfiprintf_r+0xb8>
    84c4:	2301      	movs	r3, #1
    84c6:	1b80      	subs	r0, r0, r6
    84c8:	4083      	lsls	r3, r0
    84ca:	682a      	ldr	r2, [r5, #0]
    84cc:	3401      	adds	r4, #1
    84ce:	4313      	orrs	r3, r2
    84d0:	602b      	str	r3, [r5, #0]
    84d2:	e7ef      	b.n	84b4 <_svfiprintf_r+0x98>
    84d4:	682b      	ldr	r3, [r5, #0]
    84d6:	06da      	lsls	r2, r3, #27
    84d8:	d504      	bpl.n	84e4 <_svfiprintf_r+0xc8>
    84da:	2253      	movs	r2, #83	; 0x53
    84dc:	2120      	movs	r1, #32
    84de:	a802      	add	r0, sp, #8
    84e0:	1812      	adds	r2, r2, r0
    84e2:	7011      	strb	r1, [r2, #0]
    84e4:	071a      	lsls	r2, r3, #28
    84e6:	d504      	bpl.n	84f2 <_svfiprintf_r+0xd6>
    84e8:	2253      	movs	r2, #83	; 0x53
    84ea:	212b      	movs	r1, #43	; 0x2b
    84ec:	a802      	add	r0, sp, #8
    84ee:	1812      	adds	r2, r2, r0
    84f0:	7011      	strb	r1, [r2, #0]
    84f2:	7822      	ldrb	r2, [r4, #0]
    84f4:	2a2a      	cmp	r2, #42	; 0x2a
    84f6:	d003      	beq.n	8500 <_svfiprintf_r+0xe4>
    84f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    84fa:	2000      	movs	r0, #0
    84fc:	210a      	movs	r1, #10
    84fe:	e00e      	b.n	851e <_svfiprintf_r+0x102>
    8500:	9a05      	ldr	r2, [sp, #20]
    8502:	1d11      	adds	r1, r2, #4
    8504:	6812      	ldr	r2, [r2, #0]
    8506:	9105      	str	r1, [sp, #20]
    8508:	2a00      	cmp	r2, #0
    850a:	db01      	blt.n	8510 <_svfiprintf_r+0xf4>
    850c:	9209      	str	r2, [sp, #36]	; 0x24
    850e:	e004      	b.n	851a <_svfiprintf_r+0xfe>
    8510:	4252      	negs	r2, r2
    8512:	60ea      	str	r2, [r5, #12]
    8514:	2202      	movs	r2, #2
    8516:	4313      	orrs	r3, r2
    8518:	602b      	str	r3, [r5, #0]
    851a:	3401      	adds	r4, #1
    851c:	e00b      	b.n	8536 <_svfiprintf_r+0x11a>
    851e:	7822      	ldrb	r2, [r4, #0]
    8520:	3a30      	subs	r2, #48	; 0x30
    8522:	2a09      	cmp	r2, #9
    8524:	d804      	bhi.n	8530 <_svfiprintf_r+0x114>
    8526:	434b      	muls	r3, r1
    8528:	3401      	adds	r4, #1
    852a:	189b      	adds	r3, r3, r2
    852c:	2001      	movs	r0, #1
    852e:	e7f6      	b.n	851e <_svfiprintf_r+0x102>
    8530:	2800      	cmp	r0, #0
    8532:	d000      	beq.n	8536 <_svfiprintf_r+0x11a>
    8534:	9309      	str	r3, [sp, #36]	; 0x24
    8536:	7823      	ldrb	r3, [r4, #0]
    8538:	2b2e      	cmp	r3, #46	; 0x2e
    853a:	d11e      	bne.n	857a <_svfiprintf_r+0x15e>
    853c:	7863      	ldrb	r3, [r4, #1]
    853e:	2b2a      	cmp	r3, #42	; 0x2a
    8540:	d10a      	bne.n	8558 <_svfiprintf_r+0x13c>
    8542:	9b05      	ldr	r3, [sp, #20]
    8544:	3402      	adds	r4, #2
    8546:	1d1a      	adds	r2, r3, #4
    8548:	681b      	ldr	r3, [r3, #0]
    854a:	9205      	str	r2, [sp, #20]
    854c:	2b00      	cmp	r3, #0
    854e:	da01      	bge.n	8554 <_svfiprintf_r+0x138>
    8550:	2301      	movs	r3, #1
    8552:	425b      	negs	r3, r3
    8554:	9307      	str	r3, [sp, #28]
    8556:	e010      	b.n	857a <_svfiprintf_r+0x15e>
    8558:	2300      	movs	r3, #0
    855a:	200a      	movs	r0, #10
    855c:	001a      	movs	r2, r3
    855e:	3401      	adds	r4, #1
    8560:	606b      	str	r3, [r5, #4]
    8562:	7821      	ldrb	r1, [r4, #0]
    8564:	3930      	subs	r1, #48	; 0x30
    8566:	2909      	cmp	r1, #9
    8568:	d804      	bhi.n	8574 <_svfiprintf_r+0x158>
    856a:	4342      	muls	r2, r0
    856c:	3401      	adds	r4, #1
    856e:	1852      	adds	r2, r2, r1
    8570:	2301      	movs	r3, #1
    8572:	e7f6      	b.n	8562 <_svfiprintf_r+0x146>
    8574:	2b00      	cmp	r3, #0
    8576:	d000      	beq.n	857a <_svfiprintf_r+0x15e>
    8578:	9207      	str	r2, [sp, #28]
    857a:	4e23      	ldr	r6, [pc, #140]	; (8608 <_svfiprintf_r+0x1ec>)
    857c:	7821      	ldrb	r1, [r4, #0]
    857e:	2203      	movs	r2, #3
    8580:	0030      	movs	r0, r6
    8582:	f000 fe9b 	bl	92bc <memchr>
    8586:	2800      	cmp	r0, #0
    8588:	d006      	beq.n	8598 <_svfiprintf_r+0x17c>
    858a:	2340      	movs	r3, #64	; 0x40
    858c:	1b80      	subs	r0, r0, r6
    858e:	4083      	lsls	r3, r0
    8590:	682a      	ldr	r2, [r5, #0]
    8592:	3401      	adds	r4, #1
    8594:	4313      	orrs	r3, r2
    8596:	602b      	str	r3, [r5, #0]
    8598:	7821      	ldrb	r1, [r4, #0]
    859a:	2206      	movs	r2, #6
    859c:	481b      	ldr	r0, [pc, #108]	; (860c <_svfiprintf_r+0x1f0>)
    859e:	1c66      	adds	r6, r4, #1
    85a0:	7629      	strb	r1, [r5, #24]
    85a2:	f000 fe8b 	bl	92bc <memchr>
    85a6:	2800      	cmp	r0, #0
    85a8:	d012      	beq.n	85d0 <_svfiprintf_r+0x1b4>
    85aa:	4b19      	ldr	r3, [pc, #100]	; (8610 <_svfiprintf_r+0x1f4>)
    85ac:	2b00      	cmp	r3, #0
    85ae:	d106      	bne.n	85be <_svfiprintf_r+0x1a2>
    85b0:	2207      	movs	r2, #7
    85b2:	9b05      	ldr	r3, [sp, #20]
    85b4:	3307      	adds	r3, #7
    85b6:	4393      	bics	r3, r2
    85b8:	3308      	adds	r3, #8
    85ba:	9305      	str	r3, [sp, #20]
    85bc:	e014      	b.n	85e8 <_svfiprintf_r+0x1cc>
    85be:	ab05      	add	r3, sp, #20
    85c0:	9300      	str	r3, [sp, #0]
    85c2:	003a      	movs	r2, r7
    85c4:	4b13      	ldr	r3, [pc, #76]	; (8614 <_svfiprintf_r+0x1f8>)
    85c6:	0029      	movs	r1, r5
    85c8:	9802      	ldr	r0, [sp, #8]
    85ca:	e000      	b.n	85ce <_svfiprintf_r+0x1b2>
    85cc:	bf00      	nop
    85ce:	e007      	b.n	85e0 <_svfiprintf_r+0x1c4>
    85d0:	ab05      	add	r3, sp, #20
    85d2:	9300      	str	r3, [sp, #0]
    85d4:	003a      	movs	r2, r7
    85d6:	4b0f      	ldr	r3, [pc, #60]	; (8614 <_svfiprintf_r+0x1f8>)
    85d8:	0029      	movs	r1, r5
    85da:	9802      	ldr	r0, [sp, #8]
    85dc:	f000 fa64 	bl	8aa8 <_printf_i>
    85e0:	9003      	str	r0, [sp, #12]
    85e2:	9b03      	ldr	r3, [sp, #12]
    85e4:	3301      	adds	r3, #1
    85e6:	d004      	beq.n	85f2 <_svfiprintf_r+0x1d6>
    85e8:	696b      	ldr	r3, [r5, #20]
    85ea:	9a03      	ldr	r2, [sp, #12]
    85ec:	189b      	adds	r3, r3, r2
    85ee:	616b      	str	r3, [r5, #20]
    85f0:	e735      	b.n	845e <_svfiprintf_r+0x42>
    85f2:	89bb      	ldrh	r3, [r7, #12]
    85f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    85f6:	065b      	lsls	r3, r3, #25
    85f8:	d501      	bpl.n	85fe <_svfiprintf_r+0x1e2>
    85fa:	2001      	movs	r0, #1
    85fc:	4240      	negs	r0, r0
    85fe:	b01f      	add	sp, #124	; 0x7c
    8600:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8602:	46c0      	nop			; (mov r8, r8)
    8604:	00009aee 	.word	0x00009aee
    8608:	00009af4 	.word	0x00009af4
    860c:	00009af8 	.word	0x00009af8
    8610:	00000000 	.word	0x00000000
    8614:	00008359 	.word	0x00008359

00008618 <_sungetc_r>:
    8618:	b570      	push	{r4, r5, r6, lr}
    861a:	000e      	movs	r6, r1
    861c:	0014      	movs	r4, r2
    861e:	1c4b      	adds	r3, r1, #1
    8620:	d102      	bne.n	8628 <_sungetc_r+0x10>
    8622:	2001      	movs	r0, #1
    8624:	4240      	negs	r0, r0
    8626:	e032      	b.n	868e <_sungetc_r+0x76>
    8628:	8993      	ldrh	r3, [r2, #12]
    862a:	2220      	movs	r2, #32
    862c:	4393      	bics	r3, r2
    862e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8630:	81a3      	strh	r3, [r4, #12]
    8632:	b2cd      	uxtb	r5, r1
    8634:	6863      	ldr	r3, [r4, #4]
    8636:	2a00      	cmp	r2, #0
    8638:	d00e      	beq.n	8658 <_sungetc_r+0x40>
    863a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    863c:	4293      	cmp	r3, r2
    863e:	da05      	bge.n	864c <_sungetc_r+0x34>
    8640:	6823      	ldr	r3, [r4, #0]
    8642:	3b01      	subs	r3, #1
    8644:	6023      	str	r3, [r4, #0]
    8646:	701e      	strb	r6, [r3, #0]
    8648:	6863      	ldr	r3, [r4, #4]
    864a:	e010      	b.n	866e <_sungetc_r+0x56>
    864c:	0021      	movs	r1, r4
    864e:	f000 fdf7 	bl	9240 <__submore>
    8652:	2800      	cmp	r0, #0
    8654:	d0f4      	beq.n	8640 <_sungetc_r+0x28>
    8656:	e7e4      	b.n	8622 <_sungetc_r+0xa>
    8658:	6921      	ldr	r1, [r4, #16]
    865a:	6822      	ldr	r2, [r4, #0]
    865c:	2900      	cmp	r1, #0
    865e:	d008      	beq.n	8672 <_sungetc_r+0x5a>
    8660:	4291      	cmp	r1, r2
    8662:	d206      	bcs.n	8672 <_sungetc_r+0x5a>
    8664:	1e51      	subs	r1, r2, #1
    8666:	7808      	ldrb	r0, [r1, #0]
    8668:	4285      	cmp	r5, r0
    866a:	d102      	bne.n	8672 <_sungetc_r+0x5a>
    866c:	6021      	str	r1, [r4, #0]
    866e:	3301      	adds	r3, #1
    8670:	e00b      	b.n	868a <_sungetc_r+0x72>
    8672:	6423      	str	r3, [r4, #64]	; 0x40
    8674:	0023      	movs	r3, r4
    8676:	3344      	adds	r3, #68	; 0x44
    8678:	6363      	str	r3, [r4, #52]	; 0x34
    867a:	2303      	movs	r3, #3
    867c:	63a3      	str	r3, [r4, #56]	; 0x38
    867e:	0023      	movs	r3, r4
    8680:	3346      	adds	r3, #70	; 0x46
    8682:	63e2      	str	r2, [r4, #60]	; 0x3c
    8684:	701e      	strb	r6, [r3, #0]
    8686:	6023      	str	r3, [r4, #0]
    8688:	2301      	movs	r3, #1
    868a:	0028      	movs	r0, r5
    868c:	6063      	str	r3, [r4, #4]
    868e:	bd70      	pop	{r4, r5, r6, pc}

00008690 <__ssrefill_r>:
    8690:	b510      	push	{r4, lr}
    8692:	000c      	movs	r4, r1
    8694:	6b49      	ldr	r1, [r1, #52]	; 0x34
    8696:	2900      	cmp	r1, #0
    8698:	d00e      	beq.n	86b8 <__ssrefill_r+0x28>
    869a:	0023      	movs	r3, r4
    869c:	3344      	adds	r3, #68	; 0x44
    869e:	4299      	cmp	r1, r3
    86a0:	d001      	beq.n	86a6 <__ssrefill_r+0x16>
    86a2:	f000 fe2b 	bl	92fc <_free_r>
    86a6:	2000      	movs	r0, #0
    86a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    86aa:	6360      	str	r0, [r4, #52]	; 0x34
    86ac:	6063      	str	r3, [r4, #4]
    86ae:	4283      	cmp	r3, r0
    86b0:	d002      	beq.n	86b8 <__ssrefill_r+0x28>
    86b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    86b4:	6023      	str	r3, [r4, #0]
    86b6:	e009      	b.n	86cc <__ssrefill_r+0x3c>
    86b8:	6923      	ldr	r3, [r4, #16]
    86ba:	2220      	movs	r2, #32
    86bc:	6023      	str	r3, [r4, #0]
    86be:	2300      	movs	r3, #0
    86c0:	2001      	movs	r0, #1
    86c2:	6063      	str	r3, [r4, #4]
    86c4:	89a3      	ldrh	r3, [r4, #12]
    86c6:	4240      	negs	r0, r0
    86c8:	4313      	orrs	r3, r2
    86ca:	81a3      	strh	r3, [r4, #12]
    86cc:	bd10      	pop	{r4, pc}
	...

000086d0 <__ssvfiscanf_r>:
    86d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    86d2:	4cb8      	ldr	r4, [pc, #736]	; (89b4 <__ssvfiscanf_r+0x2e4>)
    86d4:	000d      	movs	r5, r1
    86d6:	44a5      	add	sp, r4
    86d8:	9303      	str	r3, [sp, #12]
    86da:	2300      	movs	r3, #0
    86dc:	9000      	str	r0, [sp, #0]
    86de:	9348      	str	r3, [sp, #288]	; 0x120
    86e0:	9349      	str	r3, [sp, #292]	; 0x124
    86e2:	2086      	movs	r0, #134	; 0x86
    86e4:	ab05      	add	r3, sp, #20
    86e6:	934a      	str	r3, [sp, #296]	; 0x128
    86e8:	23be      	movs	r3, #190	; 0xbe
    86ea:	0040      	lsls	r0, r0, #1
    86ec:	9201      	str	r2, [sp, #4]
    86ee:	a902      	add	r1, sp, #8
    86f0:	4ab1      	ldr	r2, [pc, #708]	; (89b8 <__ssvfiscanf_r+0x2e8>)
    86f2:	005b      	lsls	r3, r3, #1
    86f4:	1809      	adds	r1, r1, r0
    86f6:	50ca      	str	r2, [r1, r3]
    86f8:	3304      	adds	r3, #4
    86fa:	001e      	movs	r6, r3
    86fc:	4aaf      	ldr	r2, [pc, #700]	; (89bc <__ssvfiscanf_r+0x2ec>)
    86fe:	a902      	add	r1, sp, #8
    8700:	1809      	adds	r1, r1, r0
    8702:	50ca      	str	r2, [r1, r3]
    8704:	9b01      	ldr	r3, [sp, #4]
    8706:	781a      	ldrb	r2, [r3, #0]
    8708:	2a00      	cmp	r2, #0
    870a:	d100      	bne.n	870e <__ssvfiscanf_r+0x3e>
    870c:	e149      	b.n	89a2 <__ssvfiscanf_r+0x2d2>
    870e:	2108      	movs	r1, #8
    8710:	4cab      	ldr	r4, [pc, #684]	; (89c0 <__ssvfiscanf_r+0x2f0>)
    8712:	6823      	ldr	r3, [r4, #0]
    8714:	189b      	adds	r3, r3, r2
    8716:	785b      	ldrb	r3, [r3, #1]
    8718:	400b      	ands	r3, r1
    871a:	d023      	beq.n	8764 <__ssvfiscanf_r+0x94>
    871c:	686b      	ldr	r3, [r5, #4]
    871e:	2b00      	cmp	r3, #0
    8720:	dd11      	ble.n	8746 <__ssvfiscanf_r+0x76>
    8722:	682b      	ldr	r3, [r5, #0]
    8724:	6821      	ldr	r1, [r4, #0]
    8726:	781a      	ldrb	r2, [r3, #0]
    8728:	188a      	adds	r2, r1, r2
    872a:	2108      	movs	r1, #8
    872c:	7852      	ldrb	r2, [r2, #1]
    872e:	420a      	tst	r2, r1
    8730:	d014      	beq.n	875c <__ssvfiscanf_r+0x8c>
    8732:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8734:	3301      	adds	r3, #1
    8736:	9202      	str	r2, [sp, #8]
    8738:	3201      	adds	r2, #1
    873a:	9249      	str	r2, [sp, #292]	; 0x124
    873c:	686a      	ldr	r2, [r5, #4]
    873e:	602b      	str	r3, [r5, #0]
    8740:	3a01      	subs	r2, #1
    8742:	606a      	str	r2, [r5, #4]
    8744:	e7ea      	b.n	871c <__ssvfiscanf_r+0x4c>
    8746:	2286      	movs	r2, #134	; 0x86
    8748:	ab02      	add	r3, sp, #8
    874a:	0052      	lsls	r2, r2, #1
    874c:	189b      	adds	r3, r3, r2
    874e:	599b      	ldr	r3, [r3, r6]
    8750:	0029      	movs	r1, r5
    8752:	9800      	ldr	r0, [sp, #0]
    8754:	9302      	str	r3, [sp, #8]
    8756:	4798      	blx	r3
    8758:	2800      	cmp	r0, #0
    875a:	d0e2      	beq.n	8722 <__ssvfiscanf_r+0x52>
    875c:	9f01      	ldr	r7, [sp, #4]
    875e:	3701      	adds	r7, #1
    8760:	9701      	str	r7, [sp, #4]
    8762:	e7cf      	b.n	8704 <__ssvfiscanf_r+0x34>
    8764:	9901      	ldr	r1, [sp, #4]
    8766:	0014      	movs	r4, r2
    8768:	1c4f      	adds	r7, r1, #1
    876a:	2a25      	cmp	r2, #37	; 0x25
    876c:	d155      	bne.n	881a <__ssvfiscanf_r+0x14a>
    876e:	9347      	str	r3, [sp, #284]	; 0x11c
    8770:	9345      	str	r3, [sp, #276]	; 0x114
    8772:	784b      	ldrb	r3, [r1, #1]
    8774:	2b2a      	cmp	r3, #42	; 0x2a
    8776:	d102      	bne.n	877e <__ssvfiscanf_r+0xae>
    8778:	3b1a      	subs	r3, #26
    877a:	9345      	str	r3, [sp, #276]	; 0x114
    877c:	3701      	adds	r7, #1
    877e:	003c      	movs	r4, r7
    8780:	220a      	movs	r2, #10
    8782:	7821      	ldrb	r1, [r4, #0]
    8784:	000b      	movs	r3, r1
    8786:	3b30      	subs	r3, #48	; 0x30
    8788:	2b09      	cmp	r3, #9
    878a:	d807      	bhi.n	879c <__ssvfiscanf_r+0xcc>
    878c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    878e:	3401      	adds	r4, #1
    8790:	9301      	str	r3, [sp, #4]
    8792:	4353      	muls	r3, r2
    8794:	3b30      	subs	r3, #48	; 0x30
    8796:	1859      	adds	r1, r3, r1
    8798:	9147      	str	r1, [sp, #284]	; 0x11c
    879a:	e7f2      	b.n	8782 <__ssvfiscanf_r+0xb2>
    879c:	4f89      	ldr	r7, [pc, #548]	; (89c4 <__ssvfiscanf_r+0x2f4>)
    879e:	2203      	movs	r2, #3
    87a0:	0038      	movs	r0, r7
    87a2:	f000 fd8b 	bl	92bc <memchr>
    87a6:	2800      	cmp	r0, #0
    87a8:	d007      	beq.n	87ba <__ssvfiscanf_r+0xea>
    87aa:	2301      	movs	r3, #1
    87ac:	1bc0      	subs	r0, r0, r7
    87ae:	4083      	lsls	r3, r0
    87b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
    87b2:	3401      	adds	r4, #1
    87b4:	4313      	orrs	r3, r2
    87b6:	9201      	str	r2, [sp, #4]
    87b8:	9345      	str	r3, [sp, #276]	; 0x114
    87ba:	1c67      	adds	r7, r4, #1
    87bc:	7824      	ldrb	r4, [r4, #0]
    87be:	2c67      	cmp	r4, #103	; 0x67
    87c0:	d818      	bhi.n	87f4 <__ssvfiscanf_r+0x124>
    87c2:	2c65      	cmp	r4, #101	; 0x65
    87c4:	d300      	bcc.n	87c8 <__ssvfiscanf_r+0xf8>
    87c6:	e08b      	b.n	88e0 <__ssvfiscanf_r+0x210>
    87c8:	2c47      	cmp	r4, #71	; 0x47
    87ca:	d808      	bhi.n	87de <__ssvfiscanf_r+0x10e>
    87cc:	2c45      	cmp	r4, #69	; 0x45
    87ce:	d300      	bcc.n	87d2 <__ssvfiscanf_r+0x102>
    87d0:	e086      	b.n	88e0 <__ssvfiscanf_r+0x210>
    87d2:	2c00      	cmp	r4, #0
    87d4:	d100      	bne.n	87d8 <__ssvfiscanf_r+0x108>
    87d6:	e0e6      	b.n	89a6 <__ssvfiscanf_r+0x2d6>
    87d8:	2c25      	cmp	r4, #37	; 0x25
    87da:	d01e      	beq.n	881a <__ssvfiscanf_r+0x14a>
    87dc:	e082      	b.n	88e4 <__ssvfiscanf_r+0x214>
    87de:	2c5b      	cmp	r4, #91	; 0x5b
    87e0:	d056      	beq.n	8890 <__ssvfiscanf_r+0x1c0>
    87e2:	d802      	bhi.n	87ea <__ssvfiscanf_r+0x11a>
    87e4:	2c58      	cmp	r4, #88	; 0x58
    87e6:	d041      	beq.n	886c <__ssvfiscanf_r+0x19c>
    87e8:	e07c      	b.n	88e4 <__ssvfiscanf_r+0x214>
    87ea:	2c63      	cmp	r4, #99	; 0x63
    87ec:	d05e      	beq.n	88ac <__ssvfiscanf_r+0x1dc>
    87ee:	2c64      	cmp	r4, #100	; 0x64
    87f0:	d045      	beq.n	887e <__ssvfiscanf_r+0x1ae>
    87f2:	e077      	b.n	88e4 <__ssvfiscanf_r+0x214>
    87f4:	2c70      	cmp	r4, #112	; 0x70
    87f6:	d033      	beq.n	8860 <__ssvfiscanf_r+0x190>
    87f8:	d807      	bhi.n	880a <__ssvfiscanf_r+0x13a>
    87fa:	2c6e      	cmp	r4, #110	; 0x6e
    87fc:	d05e      	beq.n	88bc <__ssvfiscanf_r+0x1ec>
    87fe:	d840      	bhi.n	8882 <__ssvfiscanf_r+0x1b2>
    8800:	2c69      	cmp	r4, #105	; 0x69
    8802:	d16f      	bne.n	88e4 <__ssvfiscanf_r+0x214>
    8804:	2300      	movs	r3, #0
    8806:	9346      	str	r3, [sp, #280]	; 0x118
    8808:	e040      	b.n	888c <__ssvfiscanf_r+0x1bc>
    880a:	2c75      	cmp	r4, #117	; 0x75
    880c:	d037      	beq.n	887e <__ssvfiscanf_r+0x1ae>
    880e:	2c78      	cmp	r4, #120	; 0x78
    8810:	d02c      	beq.n	886c <__ssvfiscanf_r+0x19c>
    8812:	2302      	movs	r3, #2
    8814:	2c73      	cmp	r4, #115	; 0x73
    8816:	d047      	beq.n	88a8 <__ssvfiscanf_r+0x1d8>
    8818:	e064      	b.n	88e4 <__ssvfiscanf_r+0x214>
    881a:	686b      	ldr	r3, [r5, #4]
    881c:	2b00      	cmp	r3, #0
    881e:	dd0e      	ble.n	883e <__ssvfiscanf_r+0x16e>
    8820:	682b      	ldr	r3, [r5, #0]
    8822:	781a      	ldrb	r2, [r3, #0]
    8824:	4294      	cmp	r4, r2
    8826:	d000      	beq.n	882a <__ssvfiscanf_r+0x15a>
    8828:	e0bb      	b.n	89a2 <__ssvfiscanf_r+0x2d2>
    882a:	3301      	adds	r3, #1
    882c:	686a      	ldr	r2, [r5, #4]
    882e:	602b      	str	r3, [r5, #0]
    8830:	9b49      	ldr	r3, [sp, #292]	; 0x124
    8832:	3a01      	subs	r2, #1
    8834:	9301      	str	r3, [sp, #4]
    8836:	3301      	adds	r3, #1
    8838:	606a      	str	r2, [r5, #4]
    883a:	9349      	str	r3, [sp, #292]	; 0x124
    883c:	e790      	b.n	8760 <__ssvfiscanf_r+0x90>
    883e:	2286      	movs	r2, #134	; 0x86
    8840:	ab02      	add	r3, sp, #8
    8842:	0052      	lsls	r2, r2, #1
    8844:	189b      	adds	r3, r3, r2
    8846:	599b      	ldr	r3, [r3, r6]
    8848:	0029      	movs	r1, r5
    884a:	9800      	ldr	r0, [sp, #0]
    884c:	9301      	str	r3, [sp, #4]
    884e:	4798      	blx	r3
    8850:	2800      	cmp	r0, #0
    8852:	d0e5      	beq.n	8820 <__ssvfiscanf_r+0x150>
    8854:	9848      	ldr	r0, [sp, #288]	; 0x120
    8856:	2800      	cmp	r0, #0
    8858:	d000      	beq.n	885c <__ssvfiscanf_r+0x18c>
    885a:	e09e      	b.n	899a <__ssvfiscanf_r+0x2ca>
    885c:	3801      	subs	r0, #1
    885e:	e0a4      	b.n	89aa <__ssvfiscanf_r+0x2da>
    8860:	9b45      	ldr	r3, [sp, #276]	; 0x114
    8862:	9301      	str	r3, [sp, #4]
    8864:	2320      	movs	r3, #32
    8866:	9a01      	ldr	r2, [sp, #4]
    8868:	4313      	orrs	r3, r2
    886a:	9345      	str	r3, [sp, #276]	; 0x114
    886c:	9b45      	ldr	r3, [sp, #276]	; 0x114
    886e:	9301      	str	r3, [sp, #4]
    8870:	2380      	movs	r3, #128	; 0x80
    8872:	9a01      	ldr	r2, [sp, #4]
    8874:	009b      	lsls	r3, r3, #2
    8876:	4313      	orrs	r3, r2
    8878:	9345      	str	r3, [sp, #276]	; 0x114
    887a:	2310      	movs	r3, #16
    887c:	e002      	b.n	8884 <__ssvfiscanf_r+0x1b4>
    887e:	230a      	movs	r3, #10
    8880:	e000      	b.n	8884 <__ssvfiscanf_r+0x1b4>
    8882:	2308      	movs	r3, #8
    8884:	9346      	str	r3, [sp, #280]	; 0x118
    8886:	2304      	movs	r3, #4
    8888:	2c6e      	cmp	r4, #110	; 0x6e
    888a:	dc0d      	bgt.n	88a8 <__ssvfiscanf_r+0x1d8>
    888c:	2303      	movs	r3, #3
    888e:	e00b      	b.n	88a8 <__ssvfiscanf_r+0x1d8>
    8890:	0039      	movs	r1, r7
    8892:	a805      	add	r0, sp, #20
    8894:	f000 fb8c 	bl	8fb0 <__sccl>
    8898:	9b45      	ldr	r3, [sp, #276]	; 0x114
    889a:	0007      	movs	r7, r0
    889c:	9301      	str	r3, [sp, #4]
    889e:	2340      	movs	r3, #64	; 0x40
    88a0:	9a01      	ldr	r2, [sp, #4]
    88a2:	4313      	orrs	r3, r2
    88a4:	9345      	str	r3, [sp, #276]	; 0x114
    88a6:	2301      	movs	r3, #1
    88a8:	934b      	str	r3, [sp, #300]	; 0x12c
    88aa:	e01f      	b.n	88ec <__ssvfiscanf_r+0x21c>
    88ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
    88ae:	9301      	str	r3, [sp, #4]
    88b0:	2340      	movs	r3, #64	; 0x40
    88b2:	9a01      	ldr	r2, [sp, #4]
    88b4:	4313      	orrs	r3, r2
    88b6:	9345      	str	r3, [sp, #276]	; 0x114
    88b8:	2300      	movs	r3, #0
    88ba:	e7f5      	b.n	88a8 <__ssvfiscanf_r+0x1d8>
    88bc:	9945      	ldr	r1, [sp, #276]	; 0x114
    88be:	06cb      	lsls	r3, r1, #27
    88c0:	d500      	bpl.n	88c4 <__ssvfiscanf_r+0x1f4>
    88c2:	e74d      	b.n	8760 <__ssvfiscanf_r+0x90>
    88c4:	9b03      	ldr	r3, [sp, #12]
    88c6:	9a49      	ldr	r2, [sp, #292]	; 0x124
    88c8:	07c8      	lsls	r0, r1, #31
    88ca:	d504      	bpl.n	88d6 <__ssvfiscanf_r+0x206>
    88cc:	1d19      	adds	r1, r3, #4
    88ce:	9103      	str	r1, [sp, #12]
    88d0:	681b      	ldr	r3, [r3, #0]
    88d2:	801a      	strh	r2, [r3, #0]
    88d4:	e744      	b.n	8760 <__ssvfiscanf_r+0x90>
    88d6:	1d19      	adds	r1, r3, #4
    88d8:	9103      	str	r1, [sp, #12]
    88da:	681b      	ldr	r3, [r3, #0]
    88dc:	601a      	str	r2, [r3, #0]
    88de:	e73f      	b.n	8760 <__ssvfiscanf_r+0x90>
    88e0:	2305      	movs	r3, #5
    88e2:	e7e1      	b.n	88a8 <__ssvfiscanf_r+0x1d8>
    88e4:	2303      	movs	r3, #3
    88e6:	934b      	str	r3, [sp, #300]	; 0x12c
    88e8:	3307      	adds	r3, #7
    88ea:	9346      	str	r3, [sp, #280]	; 0x118
    88ec:	686b      	ldr	r3, [r5, #4]
    88ee:	2b00      	cmp	r3, #0
    88f0:	dd04      	ble.n	88fc <__ssvfiscanf_r+0x22c>
    88f2:	9b45      	ldr	r3, [sp, #276]	; 0x114
    88f4:	9301      	str	r3, [sp, #4]
    88f6:	065b      	lsls	r3, r3, #25
    88f8:	d517      	bpl.n	892a <__ssvfiscanf_r+0x25a>
    88fa:	e01f      	b.n	893c <__ssvfiscanf_r+0x26c>
    88fc:	2286      	movs	r2, #134	; 0x86
    88fe:	ab02      	add	r3, sp, #8
    8900:	0052      	lsls	r2, r2, #1
    8902:	189b      	adds	r3, r3, r2
    8904:	599b      	ldr	r3, [r3, r6]
    8906:	0029      	movs	r1, r5
    8908:	9800      	ldr	r0, [sp, #0]
    890a:	9301      	str	r3, [sp, #4]
    890c:	4798      	blx	r3
    890e:	2800      	cmp	r0, #0
    8910:	d0ef      	beq.n	88f2 <__ssvfiscanf_r+0x222>
    8912:	e79f      	b.n	8854 <__ssvfiscanf_r+0x184>
    8914:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8916:	9201      	str	r2, [sp, #4]
    8918:	3201      	adds	r2, #1
    891a:	9249      	str	r2, [sp, #292]	; 0x124
    891c:	686a      	ldr	r2, [r5, #4]
    891e:	3a01      	subs	r2, #1
    8920:	606a      	str	r2, [r5, #4]
    8922:	2a00      	cmp	r2, #0
    8924:	dd14      	ble.n	8950 <__ssvfiscanf_r+0x280>
    8926:	3301      	adds	r3, #1
    8928:	602b      	str	r3, [r5, #0]
    892a:	682b      	ldr	r3, [r5, #0]
    892c:	4924      	ldr	r1, [pc, #144]	; (89c0 <__ssvfiscanf_r+0x2f0>)
    892e:	781a      	ldrb	r2, [r3, #0]
    8930:	6809      	ldr	r1, [r1, #0]
    8932:	188a      	adds	r2, r1, r2
    8934:	2108      	movs	r1, #8
    8936:	7852      	ldrb	r2, [r2, #1]
    8938:	420a      	tst	r2, r1
    893a:	d1eb      	bne.n	8914 <__ssvfiscanf_r+0x244>
    893c:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    893e:	2b02      	cmp	r3, #2
    8940:	dc12      	bgt.n	8968 <__ssvfiscanf_r+0x298>
    8942:	ab03      	add	r3, sp, #12
    8944:	002a      	movs	r2, r5
    8946:	a945      	add	r1, sp, #276	; 0x114
    8948:	9800      	ldr	r0, [sp, #0]
    894a:	f000 f9cf 	bl	8cec <_scanf_chars>
    894e:	e01e      	b.n	898e <__ssvfiscanf_r+0x2be>
    8950:	2286      	movs	r2, #134	; 0x86
    8952:	ab02      	add	r3, sp, #8
    8954:	0052      	lsls	r2, r2, #1
    8956:	189b      	adds	r3, r3, r2
    8958:	599b      	ldr	r3, [r3, r6]
    895a:	0029      	movs	r1, r5
    895c:	9800      	ldr	r0, [sp, #0]
    895e:	9301      	str	r3, [sp, #4]
    8960:	4798      	blx	r3
    8962:	2800      	cmp	r0, #0
    8964:	d0e1      	beq.n	892a <__ssvfiscanf_r+0x25a>
    8966:	e775      	b.n	8854 <__ssvfiscanf_r+0x184>
    8968:	2b04      	cmp	r3, #4
    896a:	dc06      	bgt.n	897a <__ssvfiscanf_r+0x2aa>
    896c:	ab03      	add	r3, sp, #12
    896e:	002a      	movs	r2, r5
    8970:	a945      	add	r1, sp, #276	; 0x114
    8972:	9800      	ldr	r0, [sp, #0]
    8974:	f000 fa1c 	bl	8db0 <_scanf_i>
    8978:	e009      	b.n	898e <__ssvfiscanf_r+0x2be>
    897a:	4b13      	ldr	r3, [pc, #76]	; (89c8 <__ssvfiscanf_r+0x2f8>)
    897c:	2b00      	cmp	r3, #0
    897e:	d100      	bne.n	8982 <__ssvfiscanf_r+0x2b2>
    8980:	e6ee      	b.n	8760 <__ssvfiscanf_r+0x90>
    8982:	ab03      	add	r3, sp, #12
    8984:	002a      	movs	r2, r5
    8986:	a945      	add	r1, sp, #276	; 0x114
    8988:	9800      	ldr	r0, [sp, #0]
    898a:	e000      	b.n	898e <__ssvfiscanf_r+0x2be>
    898c:	bf00      	nop
    898e:	2801      	cmp	r0, #1
    8990:	d007      	beq.n	89a2 <__ssvfiscanf_r+0x2d2>
    8992:	2802      	cmp	r0, #2
    8994:	d000      	beq.n	8998 <__ssvfiscanf_r+0x2c8>
    8996:	e6e3      	b.n	8760 <__ssvfiscanf_r+0x90>
    8998:	e75c      	b.n	8854 <__ssvfiscanf_r+0x184>
    899a:	89ab      	ldrh	r3, [r5, #12]
    899c:	065b      	lsls	r3, r3, #25
    899e:	d504      	bpl.n	89aa <__ssvfiscanf_r+0x2da>
    89a0:	e001      	b.n	89a6 <__ssvfiscanf_r+0x2d6>
    89a2:	9848      	ldr	r0, [sp, #288]	; 0x120
    89a4:	e001      	b.n	89aa <__ssvfiscanf_r+0x2da>
    89a6:	2001      	movs	r0, #1
    89a8:	4240      	negs	r0, r0
    89aa:	23a7      	movs	r3, #167	; 0xa7
    89ac:	009b      	lsls	r3, r3, #2
    89ae:	449d      	add	sp, r3
    89b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89b2:	46c0      	nop			; (mov r8, r8)
    89b4:	fffffd64 	.word	0xfffffd64
    89b8:	00008619 	.word	0x00008619
    89bc:	00008691 	.word	0x00008691
    89c0:	200000f8 	.word	0x200000f8
    89c4:	00009af4 	.word	0x00009af4
    89c8:	00000000 	.word	0x00000000

000089cc <_printf_common>:
    89cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    89ce:	0017      	movs	r7, r2
    89d0:	9301      	str	r3, [sp, #4]
    89d2:	688a      	ldr	r2, [r1, #8]
    89d4:	690b      	ldr	r3, [r1, #16]
    89d6:	9000      	str	r0, [sp, #0]
    89d8:	000c      	movs	r4, r1
    89da:	4293      	cmp	r3, r2
    89dc:	da00      	bge.n	89e0 <_printf_common+0x14>
    89de:	0013      	movs	r3, r2
    89e0:	0022      	movs	r2, r4
    89e2:	603b      	str	r3, [r7, #0]
    89e4:	3243      	adds	r2, #67	; 0x43
    89e6:	7812      	ldrb	r2, [r2, #0]
    89e8:	2a00      	cmp	r2, #0
    89ea:	d001      	beq.n	89f0 <_printf_common+0x24>
    89ec:	3301      	adds	r3, #1
    89ee:	603b      	str	r3, [r7, #0]
    89f0:	6823      	ldr	r3, [r4, #0]
    89f2:	069b      	lsls	r3, r3, #26
    89f4:	d502      	bpl.n	89fc <_printf_common+0x30>
    89f6:	683b      	ldr	r3, [r7, #0]
    89f8:	3302      	adds	r3, #2
    89fa:	603b      	str	r3, [r7, #0]
    89fc:	2506      	movs	r5, #6
    89fe:	6823      	ldr	r3, [r4, #0]
    8a00:	401d      	ands	r5, r3
    8a02:	d01e      	beq.n	8a42 <_printf_common+0x76>
    8a04:	0023      	movs	r3, r4
    8a06:	3343      	adds	r3, #67	; 0x43
    8a08:	781b      	ldrb	r3, [r3, #0]
    8a0a:	1e5a      	subs	r2, r3, #1
    8a0c:	4193      	sbcs	r3, r2
    8a0e:	6822      	ldr	r2, [r4, #0]
    8a10:	0692      	lsls	r2, r2, #26
    8a12:	d51c      	bpl.n	8a4e <_printf_common+0x82>
    8a14:	2030      	movs	r0, #48	; 0x30
    8a16:	18e1      	adds	r1, r4, r3
    8a18:	3143      	adds	r1, #67	; 0x43
    8a1a:	7008      	strb	r0, [r1, #0]
    8a1c:	0021      	movs	r1, r4
    8a1e:	1c5a      	adds	r2, r3, #1
    8a20:	3145      	adds	r1, #69	; 0x45
    8a22:	7809      	ldrb	r1, [r1, #0]
    8a24:	18a2      	adds	r2, r4, r2
    8a26:	3243      	adds	r2, #67	; 0x43
    8a28:	3302      	adds	r3, #2
    8a2a:	7011      	strb	r1, [r2, #0]
    8a2c:	e00f      	b.n	8a4e <_printf_common+0x82>
    8a2e:	0022      	movs	r2, r4
    8a30:	2301      	movs	r3, #1
    8a32:	3219      	adds	r2, #25
    8a34:	9901      	ldr	r1, [sp, #4]
    8a36:	9800      	ldr	r0, [sp, #0]
    8a38:	9e08      	ldr	r6, [sp, #32]
    8a3a:	47b0      	blx	r6
    8a3c:	1c43      	adds	r3, r0, #1
    8a3e:	d00e      	beq.n	8a5e <_printf_common+0x92>
    8a40:	3501      	adds	r5, #1
    8a42:	68e3      	ldr	r3, [r4, #12]
    8a44:	683a      	ldr	r2, [r7, #0]
    8a46:	1a9b      	subs	r3, r3, r2
    8a48:	429d      	cmp	r5, r3
    8a4a:	dbf0      	blt.n	8a2e <_printf_common+0x62>
    8a4c:	e7da      	b.n	8a04 <_printf_common+0x38>
    8a4e:	0022      	movs	r2, r4
    8a50:	9901      	ldr	r1, [sp, #4]
    8a52:	3243      	adds	r2, #67	; 0x43
    8a54:	9800      	ldr	r0, [sp, #0]
    8a56:	9d08      	ldr	r5, [sp, #32]
    8a58:	47a8      	blx	r5
    8a5a:	1c43      	adds	r3, r0, #1
    8a5c:	d102      	bne.n	8a64 <_printf_common+0x98>
    8a5e:	2001      	movs	r0, #1
    8a60:	4240      	negs	r0, r0
    8a62:	e020      	b.n	8aa6 <_printf_common+0xda>
    8a64:	2306      	movs	r3, #6
    8a66:	6820      	ldr	r0, [r4, #0]
    8a68:	68e1      	ldr	r1, [r4, #12]
    8a6a:	683a      	ldr	r2, [r7, #0]
    8a6c:	4003      	ands	r3, r0
    8a6e:	2500      	movs	r5, #0
    8a70:	2b04      	cmp	r3, #4
    8a72:	d103      	bne.n	8a7c <_printf_common+0xb0>
    8a74:	1a8d      	subs	r5, r1, r2
    8a76:	43eb      	mvns	r3, r5
    8a78:	17db      	asrs	r3, r3, #31
    8a7a:	401d      	ands	r5, r3
    8a7c:	68a3      	ldr	r3, [r4, #8]
    8a7e:	6922      	ldr	r2, [r4, #16]
    8a80:	4293      	cmp	r3, r2
    8a82:	dd01      	ble.n	8a88 <_printf_common+0xbc>
    8a84:	1a9b      	subs	r3, r3, r2
    8a86:	18ed      	adds	r5, r5, r3
    8a88:	2700      	movs	r7, #0
    8a8a:	42bd      	cmp	r5, r7
    8a8c:	d00a      	beq.n	8aa4 <_printf_common+0xd8>
    8a8e:	0022      	movs	r2, r4
    8a90:	2301      	movs	r3, #1
    8a92:	321a      	adds	r2, #26
    8a94:	9901      	ldr	r1, [sp, #4]
    8a96:	9800      	ldr	r0, [sp, #0]
    8a98:	9e08      	ldr	r6, [sp, #32]
    8a9a:	47b0      	blx	r6
    8a9c:	1c43      	adds	r3, r0, #1
    8a9e:	d0de      	beq.n	8a5e <_printf_common+0x92>
    8aa0:	3701      	adds	r7, #1
    8aa2:	e7f2      	b.n	8a8a <_printf_common+0xbe>
    8aa4:	2000      	movs	r0, #0
    8aa6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00008aa8 <_printf_i>:
    8aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8aaa:	b08b      	sub	sp, #44	; 0x2c
    8aac:	9206      	str	r2, [sp, #24]
    8aae:	000a      	movs	r2, r1
    8ab0:	3243      	adds	r2, #67	; 0x43
    8ab2:	9307      	str	r3, [sp, #28]
    8ab4:	9005      	str	r0, [sp, #20]
    8ab6:	9204      	str	r2, [sp, #16]
    8ab8:	7e0a      	ldrb	r2, [r1, #24]
    8aba:	000c      	movs	r4, r1
    8abc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8abe:	2a6e      	cmp	r2, #110	; 0x6e
    8ac0:	d100      	bne.n	8ac4 <_printf_i+0x1c>
    8ac2:	e0ab      	b.n	8c1c <_printf_i+0x174>
    8ac4:	d811      	bhi.n	8aea <_printf_i+0x42>
    8ac6:	2a63      	cmp	r2, #99	; 0x63
    8ac8:	d022      	beq.n	8b10 <_printf_i+0x68>
    8aca:	d809      	bhi.n	8ae0 <_printf_i+0x38>
    8acc:	2a00      	cmp	r2, #0
    8ace:	d100      	bne.n	8ad2 <_printf_i+0x2a>
    8ad0:	e0b5      	b.n	8c3e <_printf_i+0x196>
    8ad2:	2a58      	cmp	r2, #88	; 0x58
    8ad4:	d000      	beq.n	8ad8 <_printf_i+0x30>
    8ad6:	e0c5      	b.n	8c64 <_printf_i+0x1bc>
    8ad8:	3145      	adds	r1, #69	; 0x45
    8ada:	700a      	strb	r2, [r1, #0]
    8adc:	4a81      	ldr	r2, [pc, #516]	; (8ce4 <_printf_i+0x23c>)
    8ade:	e04f      	b.n	8b80 <_printf_i+0xd8>
    8ae0:	2a64      	cmp	r2, #100	; 0x64
    8ae2:	d01d      	beq.n	8b20 <_printf_i+0x78>
    8ae4:	2a69      	cmp	r2, #105	; 0x69
    8ae6:	d01b      	beq.n	8b20 <_printf_i+0x78>
    8ae8:	e0bc      	b.n	8c64 <_printf_i+0x1bc>
    8aea:	2a73      	cmp	r2, #115	; 0x73
    8aec:	d100      	bne.n	8af0 <_printf_i+0x48>
    8aee:	e0aa      	b.n	8c46 <_printf_i+0x19e>
    8af0:	d809      	bhi.n	8b06 <_printf_i+0x5e>
    8af2:	2a6f      	cmp	r2, #111	; 0x6f
    8af4:	d029      	beq.n	8b4a <_printf_i+0xa2>
    8af6:	2a70      	cmp	r2, #112	; 0x70
    8af8:	d000      	beq.n	8afc <_printf_i+0x54>
    8afa:	e0b3      	b.n	8c64 <_printf_i+0x1bc>
    8afc:	2220      	movs	r2, #32
    8afe:	6809      	ldr	r1, [r1, #0]
    8b00:	430a      	orrs	r2, r1
    8b02:	6022      	str	r2, [r4, #0]
    8b04:	e037      	b.n	8b76 <_printf_i+0xce>
    8b06:	2a75      	cmp	r2, #117	; 0x75
    8b08:	d01f      	beq.n	8b4a <_printf_i+0xa2>
    8b0a:	2a78      	cmp	r2, #120	; 0x78
    8b0c:	d033      	beq.n	8b76 <_printf_i+0xce>
    8b0e:	e0a9      	b.n	8c64 <_printf_i+0x1bc>
    8b10:	000e      	movs	r6, r1
    8b12:	681a      	ldr	r2, [r3, #0]
    8b14:	3642      	adds	r6, #66	; 0x42
    8b16:	1d11      	adds	r1, r2, #4
    8b18:	6019      	str	r1, [r3, #0]
    8b1a:	6813      	ldr	r3, [r2, #0]
    8b1c:	7033      	strb	r3, [r6, #0]
    8b1e:	e0a4      	b.n	8c6a <_printf_i+0x1c2>
    8b20:	6821      	ldr	r1, [r4, #0]
    8b22:	681a      	ldr	r2, [r3, #0]
    8b24:	0608      	lsls	r0, r1, #24
    8b26:	d406      	bmi.n	8b36 <_printf_i+0x8e>
    8b28:	0649      	lsls	r1, r1, #25
    8b2a:	d504      	bpl.n	8b36 <_printf_i+0x8e>
    8b2c:	1d11      	adds	r1, r2, #4
    8b2e:	6019      	str	r1, [r3, #0]
    8b30:	2300      	movs	r3, #0
    8b32:	5ed5      	ldrsh	r5, [r2, r3]
    8b34:	e002      	b.n	8b3c <_printf_i+0x94>
    8b36:	1d11      	adds	r1, r2, #4
    8b38:	6019      	str	r1, [r3, #0]
    8b3a:	6815      	ldr	r5, [r2, #0]
    8b3c:	2d00      	cmp	r5, #0
    8b3e:	da3b      	bge.n	8bb8 <_printf_i+0x110>
    8b40:	232d      	movs	r3, #45	; 0x2d
    8b42:	9a04      	ldr	r2, [sp, #16]
    8b44:	426d      	negs	r5, r5
    8b46:	7013      	strb	r3, [r2, #0]
    8b48:	e036      	b.n	8bb8 <_printf_i+0x110>
    8b4a:	6821      	ldr	r1, [r4, #0]
    8b4c:	681a      	ldr	r2, [r3, #0]
    8b4e:	0608      	lsls	r0, r1, #24
    8b50:	d406      	bmi.n	8b60 <_printf_i+0xb8>
    8b52:	0649      	lsls	r1, r1, #25
    8b54:	d504      	bpl.n	8b60 <_printf_i+0xb8>
    8b56:	6815      	ldr	r5, [r2, #0]
    8b58:	1d11      	adds	r1, r2, #4
    8b5a:	6019      	str	r1, [r3, #0]
    8b5c:	b2ad      	uxth	r5, r5
    8b5e:	e002      	b.n	8b66 <_printf_i+0xbe>
    8b60:	1d11      	adds	r1, r2, #4
    8b62:	6019      	str	r1, [r3, #0]
    8b64:	6815      	ldr	r5, [r2, #0]
    8b66:	4b5f      	ldr	r3, [pc, #380]	; (8ce4 <_printf_i+0x23c>)
    8b68:	7e22      	ldrb	r2, [r4, #24]
    8b6a:	9303      	str	r3, [sp, #12]
    8b6c:	2708      	movs	r7, #8
    8b6e:	2a6f      	cmp	r2, #111	; 0x6f
    8b70:	d01d      	beq.n	8bae <_printf_i+0x106>
    8b72:	270a      	movs	r7, #10
    8b74:	e01b      	b.n	8bae <_printf_i+0x106>
    8b76:	0022      	movs	r2, r4
    8b78:	2178      	movs	r1, #120	; 0x78
    8b7a:	3245      	adds	r2, #69	; 0x45
    8b7c:	7011      	strb	r1, [r2, #0]
    8b7e:	4a5a      	ldr	r2, [pc, #360]	; (8ce8 <_printf_i+0x240>)
    8b80:	6819      	ldr	r1, [r3, #0]
    8b82:	9203      	str	r2, [sp, #12]
    8b84:	1d08      	adds	r0, r1, #4
    8b86:	6822      	ldr	r2, [r4, #0]
    8b88:	6018      	str	r0, [r3, #0]
    8b8a:	680d      	ldr	r5, [r1, #0]
    8b8c:	0610      	lsls	r0, r2, #24
    8b8e:	d402      	bmi.n	8b96 <_printf_i+0xee>
    8b90:	0650      	lsls	r0, r2, #25
    8b92:	d500      	bpl.n	8b96 <_printf_i+0xee>
    8b94:	b2ad      	uxth	r5, r5
    8b96:	07d3      	lsls	r3, r2, #31
    8b98:	d502      	bpl.n	8ba0 <_printf_i+0xf8>
    8b9a:	2320      	movs	r3, #32
    8b9c:	431a      	orrs	r2, r3
    8b9e:	6022      	str	r2, [r4, #0]
    8ba0:	2710      	movs	r7, #16
    8ba2:	2d00      	cmp	r5, #0
    8ba4:	d103      	bne.n	8bae <_printf_i+0x106>
    8ba6:	2320      	movs	r3, #32
    8ba8:	6822      	ldr	r2, [r4, #0]
    8baa:	439a      	bics	r2, r3
    8bac:	6022      	str	r2, [r4, #0]
    8bae:	0023      	movs	r3, r4
    8bb0:	2200      	movs	r2, #0
    8bb2:	3343      	adds	r3, #67	; 0x43
    8bb4:	701a      	strb	r2, [r3, #0]
    8bb6:	e002      	b.n	8bbe <_printf_i+0x116>
    8bb8:	270a      	movs	r7, #10
    8bba:	4b4a      	ldr	r3, [pc, #296]	; (8ce4 <_printf_i+0x23c>)
    8bbc:	9303      	str	r3, [sp, #12]
    8bbe:	6863      	ldr	r3, [r4, #4]
    8bc0:	60a3      	str	r3, [r4, #8]
    8bc2:	2b00      	cmp	r3, #0
    8bc4:	db09      	blt.n	8bda <_printf_i+0x132>
    8bc6:	2204      	movs	r2, #4
    8bc8:	6821      	ldr	r1, [r4, #0]
    8bca:	4391      	bics	r1, r2
    8bcc:	6021      	str	r1, [r4, #0]
    8bce:	2d00      	cmp	r5, #0
    8bd0:	d105      	bne.n	8bde <_printf_i+0x136>
    8bd2:	9e04      	ldr	r6, [sp, #16]
    8bd4:	2b00      	cmp	r3, #0
    8bd6:	d011      	beq.n	8bfc <_printf_i+0x154>
    8bd8:	e07b      	b.n	8cd2 <_printf_i+0x22a>
    8bda:	2d00      	cmp	r5, #0
    8bdc:	d079      	beq.n	8cd2 <_printf_i+0x22a>
    8bde:	9e04      	ldr	r6, [sp, #16]
    8be0:	0028      	movs	r0, r5
    8be2:	0039      	movs	r1, r7
    8be4:	f7fd fc7e 	bl	64e4 <__aeabi_uidivmod>
    8be8:	9b03      	ldr	r3, [sp, #12]
    8bea:	3e01      	subs	r6, #1
    8bec:	5c5b      	ldrb	r3, [r3, r1]
    8bee:	0028      	movs	r0, r5
    8bf0:	7033      	strb	r3, [r6, #0]
    8bf2:	0039      	movs	r1, r7
    8bf4:	f7fd fbf0 	bl	63d8 <__aeabi_uidiv>
    8bf8:	1e05      	subs	r5, r0, #0
    8bfa:	d1f1      	bne.n	8be0 <_printf_i+0x138>
    8bfc:	2f08      	cmp	r7, #8
    8bfe:	d109      	bne.n	8c14 <_printf_i+0x16c>
    8c00:	6823      	ldr	r3, [r4, #0]
    8c02:	07db      	lsls	r3, r3, #31
    8c04:	d506      	bpl.n	8c14 <_printf_i+0x16c>
    8c06:	6863      	ldr	r3, [r4, #4]
    8c08:	6922      	ldr	r2, [r4, #16]
    8c0a:	4293      	cmp	r3, r2
    8c0c:	dc02      	bgt.n	8c14 <_printf_i+0x16c>
    8c0e:	2330      	movs	r3, #48	; 0x30
    8c10:	3e01      	subs	r6, #1
    8c12:	7033      	strb	r3, [r6, #0]
    8c14:	9b04      	ldr	r3, [sp, #16]
    8c16:	1b9b      	subs	r3, r3, r6
    8c18:	6123      	str	r3, [r4, #16]
    8c1a:	e02b      	b.n	8c74 <_printf_i+0x1cc>
    8c1c:	6809      	ldr	r1, [r1, #0]
    8c1e:	681a      	ldr	r2, [r3, #0]
    8c20:	0608      	lsls	r0, r1, #24
    8c22:	d407      	bmi.n	8c34 <_printf_i+0x18c>
    8c24:	0649      	lsls	r1, r1, #25
    8c26:	d505      	bpl.n	8c34 <_printf_i+0x18c>
    8c28:	1d11      	adds	r1, r2, #4
    8c2a:	6019      	str	r1, [r3, #0]
    8c2c:	6813      	ldr	r3, [r2, #0]
    8c2e:	8aa2      	ldrh	r2, [r4, #20]
    8c30:	801a      	strh	r2, [r3, #0]
    8c32:	e004      	b.n	8c3e <_printf_i+0x196>
    8c34:	1d11      	adds	r1, r2, #4
    8c36:	6019      	str	r1, [r3, #0]
    8c38:	6813      	ldr	r3, [r2, #0]
    8c3a:	6962      	ldr	r2, [r4, #20]
    8c3c:	601a      	str	r2, [r3, #0]
    8c3e:	2300      	movs	r3, #0
    8c40:	9e04      	ldr	r6, [sp, #16]
    8c42:	6123      	str	r3, [r4, #16]
    8c44:	e016      	b.n	8c74 <_printf_i+0x1cc>
    8c46:	681a      	ldr	r2, [r3, #0]
    8c48:	1d11      	adds	r1, r2, #4
    8c4a:	6019      	str	r1, [r3, #0]
    8c4c:	6816      	ldr	r6, [r2, #0]
    8c4e:	2100      	movs	r1, #0
    8c50:	6862      	ldr	r2, [r4, #4]
    8c52:	0030      	movs	r0, r6
    8c54:	f000 fb32 	bl	92bc <memchr>
    8c58:	2800      	cmp	r0, #0
    8c5a:	d001      	beq.n	8c60 <_printf_i+0x1b8>
    8c5c:	1b80      	subs	r0, r0, r6
    8c5e:	6060      	str	r0, [r4, #4]
    8c60:	6863      	ldr	r3, [r4, #4]
    8c62:	e003      	b.n	8c6c <_printf_i+0x1c4>
    8c64:	0026      	movs	r6, r4
    8c66:	3642      	adds	r6, #66	; 0x42
    8c68:	7032      	strb	r2, [r6, #0]
    8c6a:	2301      	movs	r3, #1
    8c6c:	6123      	str	r3, [r4, #16]
    8c6e:	2300      	movs	r3, #0
    8c70:	9a04      	ldr	r2, [sp, #16]
    8c72:	7013      	strb	r3, [r2, #0]
    8c74:	9b07      	ldr	r3, [sp, #28]
    8c76:	aa09      	add	r2, sp, #36	; 0x24
    8c78:	9300      	str	r3, [sp, #0]
    8c7a:	0021      	movs	r1, r4
    8c7c:	9b06      	ldr	r3, [sp, #24]
    8c7e:	9805      	ldr	r0, [sp, #20]
    8c80:	f7ff fea4 	bl	89cc <_printf_common>
    8c84:	1c43      	adds	r3, r0, #1
    8c86:	d102      	bne.n	8c8e <_printf_i+0x1e6>
    8c88:	2001      	movs	r0, #1
    8c8a:	4240      	negs	r0, r0
    8c8c:	e027      	b.n	8cde <_printf_i+0x236>
    8c8e:	6923      	ldr	r3, [r4, #16]
    8c90:	0032      	movs	r2, r6
    8c92:	9906      	ldr	r1, [sp, #24]
    8c94:	9805      	ldr	r0, [sp, #20]
    8c96:	9d07      	ldr	r5, [sp, #28]
    8c98:	47a8      	blx	r5
    8c9a:	1c43      	adds	r3, r0, #1
    8c9c:	d0f4      	beq.n	8c88 <_printf_i+0x1e0>
    8c9e:	6823      	ldr	r3, [r4, #0]
    8ca0:	2500      	movs	r5, #0
    8ca2:	079b      	lsls	r3, r3, #30
    8ca4:	d40f      	bmi.n	8cc6 <_printf_i+0x21e>
    8ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8ca8:	68e0      	ldr	r0, [r4, #12]
    8caa:	4298      	cmp	r0, r3
    8cac:	da17      	bge.n	8cde <_printf_i+0x236>
    8cae:	0018      	movs	r0, r3
    8cb0:	e015      	b.n	8cde <_printf_i+0x236>
    8cb2:	0022      	movs	r2, r4
    8cb4:	2301      	movs	r3, #1
    8cb6:	3219      	adds	r2, #25
    8cb8:	9906      	ldr	r1, [sp, #24]
    8cba:	9805      	ldr	r0, [sp, #20]
    8cbc:	9e07      	ldr	r6, [sp, #28]
    8cbe:	47b0      	blx	r6
    8cc0:	1c43      	adds	r3, r0, #1
    8cc2:	d0e1      	beq.n	8c88 <_printf_i+0x1e0>
    8cc4:	3501      	adds	r5, #1
    8cc6:	68e3      	ldr	r3, [r4, #12]
    8cc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8cca:	1a9b      	subs	r3, r3, r2
    8ccc:	429d      	cmp	r5, r3
    8cce:	dbf0      	blt.n	8cb2 <_printf_i+0x20a>
    8cd0:	e7e9      	b.n	8ca6 <_printf_i+0x1fe>
    8cd2:	0026      	movs	r6, r4
    8cd4:	9b03      	ldr	r3, [sp, #12]
    8cd6:	3642      	adds	r6, #66	; 0x42
    8cd8:	781b      	ldrb	r3, [r3, #0]
    8cda:	7033      	strb	r3, [r6, #0]
    8cdc:	e78e      	b.n	8bfc <_printf_i+0x154>
    8cde:	b00b      	add	sp, #44	; 0x2c
    8ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ce2:	46c0      	nop			; (mov r8, r8)
    8ce4:	00009aff 	.word	0x00009aff
    8ce8:	00009b10 	.word	0x00009b10

00008cec <_scanf_chars>:
    8cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8cee:	0015      	movs	r5, r2
    8cf0:	688a      	ldr	r2, [r1, #8]
    8cf2:	9001      	str	r0, [sp, #4]
    8cf4:	000c      	movs	r4, r1
    8cf6:	2a00      	cmp	r2, #0
    8cf8:	d106      	bne.n	8d08 <_scanf_chars+0x1c>
    8cfa:	698a      	ldr	r2, [r1, #24]
    8cfc:	1e51      	subs	r1, r2, #1
    8cfe:	418a      	sbcs	r2, r1
    8d00:	2101      	movs	r1, #1
    8d02:	4252      	negs	r2, r2
    8d04:	430a      	orrs	r2, r1
    8d06:	60a2      	str	r2, [r4, #8]
    8d08:	6822      	ldr	r2, [r4, #0]
    8d0a:	06d2      	lsls	r2, r2, #27
    8d0c:	d403      	bmi.n	8d16 <_scanf_chars+0x2a>
    8d0e:	681a      	ldr	r2, [r3, #0]
    8d10:	1d11      	adds	r1, r2, #4
    8d12:	6019      	str	r1, [r3, #0]
    8d14:	6817      	ldr	r7, [r2, #0]
    8d16:	2600      	movs	r6, #0
    8d18:	69a0      	ldr	r0, [r4, #24]
    8d1a:	2800      	cmp	r0, #0
    8d1c:	d11e      	bne.n	8d5c <_scanf_chars+0x70>
    8d1e:	2210      	movs	r2, #16
    8d20:	6823      	ldr	r3, [r4, #0]
    8d22:	3601      	adds	r6, #1
    8d24:	4213      	tst	r3, r2
    8d26:	d103      	bne.n	8d30 <_scanf_chars+0x44>
    8d28:	682b      	ldr	r3, [r5, #0]
    8d2a:	781b      	ldrb	r3, [r3, #0]
    8d2c:	703b      	strb	r3, [r7, #0]
    8d2e:	3701      	adds	r7, #1
    8d30:	682a      	ldr	r2, [r5, #0]
    8d32:	686b      	ldr	r3, [r5, #4]
    8d34:	3201      	adds	r2, #1
    8d36:	602a      	str	r2, [r5, #0]
    8d38:	68a2      	ldr	r2, [r4, #8]
    8d3a:	3b01      	subs	r3, #1
    8d3c:	3a01      	subs	r2, #1
    8d3e:	606b      	str	r3, [r5, #4]
    8d40:	60a2      	str	r2, [r4, #8]
    8d42:	2a00      	cmp	r2, #0
    8d44:	d01e      	beq.n	8d84 <_scanf_chars+0x98>
    8d46:	2b00      	cmp	r3, #0
    8d48:	dce6      	bgt.n	8d18 <_scanf_chars+0x2c>
    8d4a:	23c0      	movs	r3, #192	; 0xc0
    8d4c:	005b      	lsls	r3, r3, #1
    8d4e:	58e3      	ldr	r3, [r4, r3]
    8d50:	0029      	movs	r1, r5
    8d52:	9801      	ldr	r0, [sp, #4]
    8d54:	4798      	blx	r3
    8d56:	2800      	cmp	r0, #0
    8d58:	d0de      	beq.n	8d18 <_scanf_chars+0x2c>
    8d5a:	e013      	b.n	8d84 <_scanf_chars+0x98>
    8d5c:	2801      	cmp	r0, #1
    8d5e:	d106      	bne.n	8d6e <_scanf_chars+0x82>
    8d60:	682b      	ldr	r3, [r5, #0]
    8d62:	6962      	ldr	r2, [r4, #20]
    8d64:	781b      	ldrb	r3, [r3, #0]
    8d66:	5cd3      	ldrb	r3, [r2, r3]
    8d68:	2b00      	cmp	r3, #0
    8d6a:	d1d8      	bne.n	8d1e <_scanf_chars+0x32>
    8d6c:	e01a      	b.n	8da4 <_scanf_chars+0xb8>
    8d6e:	2802      	cmp	r0, #2
    8d70:	d108      	bne.n	8d84 <_scanf_chars+0x98>
    8d72:	682b      	ldr	r3, [r5, #0]
    8d74:	4a0d      	ldr	r2, [pc, #52]	; (8dac <_scanf_chars+0xc0>)
    8d76:	781b      	ldrb	r3, [r3, #0]
    8d78:	6812      	ldr	r2, [r2, #0]
    8d7a:	18d3      	adds	r3, r2, r3
    8d7c:	2208      	movs	r2, #8
    8d7e:	785b      	ldrb	r3, [r3, #1]
    8d80:	4213      	tst	r3, r2
    8d82:	d0cc      	beq.n	8d1e <_scanf_chars+0x32>
    8d84:	2310      	movs	r3, #16
    8d86:	6822      	ldr	r2, [r4, #0]
    8d88:	4013      	ands	r3, r2
    8d8a:	d106      	bne.n	8d9a <_scanf_chars+0xae>
    8d8c:	68e2      	ldr	r2, [r4, #12]
    8d8e:	3201      	adds	r2, #1
    8d90:	60e2      	str	r2, [r4, #12]
    8d92:	69a2      	ldr	r2, [r4, #24]
    8d94:	2a00      	cmp	r2, #0
    8d96:	d000      	beq.n	8d9a <_scanf_chars+0xae>
    8d98:	703b      	strb	r3, [r7, #0]
    8d9a:	6923      	ldr	r3, [r4, #16]
    8d9c:	2000      	movs	r0, #0
    8d9e:	199e      	adds	r6, r3, r6
    8da0:	6126      	str	r6, [r4, #16]
    8da2:	e001      	b.n	8da8 <_scanf_chars+0xbc>
    8da4:	2e00      	cmp	r6, #0
    8da6:	d1ed      	bne.n	8d84 <_scanf_chars+0x98>
    8da8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8daa:	46c0      	nop			; (mov r8, r8)
    8dac:	200000f8 	.word	0x200000f8

00008db0 <_scanf_i>:
    8db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8db2:	000c      	movs	r4, r1
    8db4:	b08d      	sub	sp, #52	; 0x34
    8db6:	9302      	str	r3, [sp, #8]
    8db8:	4b77      	ldr	r3, [pc, #476]	; (8f98 <_scanf_i+0x1e8>)
    8dba:	9005      	str	r0, [sp, #20]
    8dbc:	0016      	movs	r6, r2
    8dbe:	aa09      	add	r2, sp, #36	; 0x24
    8dc0:	cb23      	ldmia	r3!, {r0, r1, r5}
    8dc2:	c223      	stmia	r2!, {r0, r1, r5}
    8dc4:	4b75      	ldr	r3, [pc, #468]	; (8f9c <_scanf_i+0x1ec>)
    8dc6:	9306      	str	r3, [sp, #24]
    8dc8:	69a3      	ldr	r3, [r4, #24]
    8dca:	2b03      	cmp	r3, #3
    8dcc:	d001      	beq.n	8dd2 <_scanf_i+0x22>
    8dce:	4b74      	ldr	r3, [pc, #464]	; (8fa0 <_scanf_i+0x1f0>)
    8dd0:	9306      	str	r3, [sp, #24]
    8dd2:	2200      	movs	r2, #0
    8dd4:	68a3      	ldr	r3, [r4, #8]
    8dd6:	9204      	str	r2, [sp, #16]
    8dd8:	325d      	adds	r2, #93	; 0x5d
    8dda:	1e59      	subs	r1, r3, #1
    8ddc:	32ff      	adds	r2, #255	; 0xff
    8dde:	4291      	cmp	r1, r2
    8de0:	d905      	bls.n	8dee <_scanf_i+0x3e>
    8de2:	3b5e      	subs	r3, #94	; 0x5e
    8de4:	3bff      	subs	r3, #255	; 0xff
    8de6:	9304      	str	r3, [sp, #16]
    8de8:	235e      	movs	r3, #94	; 0x5e
    8dea:	33ff      	adds	r3, #255	; 0xff
    8dec:	60a3      	str	r3, [r4, #8]
    8dee:	0023      	movs	r3, r4
    8df0:	331c      	adds	r3, #28
    8df2:	9301      	str	r3, [sp, #4]
    8df4:	23d0      	movs	r3, #208	; 0xd0
    8df6:	2700      	movs	r7, #0
    8df8:	6822      	ldr	r2, [r4, #0]
    8dfa:	011b      	lsls	r3, r3, #4
    8dfc:	4313      	orrs	r3, r2
    8dfe:	6023      	str	r3, [r4, #0]
    8e00:	9b01      	ldr	r3, [sp, #4]
    8e02:	9303      	str	r3, [sp, #12]
    8e04:	6833      	ldr	r3, [r6, #0]
    8e06:	a809      	add	r0, sp, #36	; 0x24
    8e08:	7819      	ldrb	r1, [r3, #0]
    8e0a:	00bb      	lsls	r3, r7, #2
    8e0c:	2202      	movs	r2, #2
    8e0e:	5818      	ldr	r0, [r3, r0]
    8e10:	f000 fa54 	bl	92bc <memchr>
    8e14:	2800      	cmp	r0, #0
    8e16:	d03b      	beq.n	8e90 <_scanf_i+0xe0>
    8e18:	2f01      	cmp	r7, #1
    8e1a:	d10d      	bne.n	8e38 <_scanf_i+0x88>
    8e1c:	6863      	ldr	r3, [r4, #4]
    8e1e:	2b00      	cmp	r3, #0
    8e20:	d106      	bne.n	8e30 <_scanf_i+0x80>
    8e22:	3308      	adds	r3, #8
    8e24:	6822      	ldr	r2, [r4, #0]
    8e26:	6063      	str	r3, [r4, #4]
    8e28:	33f9      	adds	r3, #249	; 0xf9
    8e2a:	33ff      	adds	r3, #255	; 0xff
    8e2c:	4313      	orrs	r3, r2
    8e2e:	6023      	str	r3, [r4, #0]
    8e30:	4b5c      	ldr	r3, [pc, #368]	; (8fa4 <_scanf_i+0x1f4>)
    8e32:	6822      	ldr	r2, [r4, #0]
    8e34:	4013      	ands	r3, r2
    8e36:	e00e      	b.n	8e56 <_scanf_i+0xa6>
    8e38:	2f02      	cmp	r7, #2
    8e3a:	d10d      	bne.n	8e58 <_scanf_i+0xa8>
    8e3c:	21c0      	movs	r1, #192	; 0xc0
    8e3e:	2280      	movs	r2, #128	; 0x80
    8e40:	6823      	ldr	r3, [r4, #0]
    8e42:	00c9      	lsls	r1, r1, #3
    8e44:	4019      	ands	r1, r3
    8e46:	0092      	lsls	r2, r2, #2
    8e48:	4291      	cmp	r1, r2
    8e4a:	d124      	bne.n	8e96 <_scanf_i+0xe6>
    8e4c:	3af1      	subs	r2, #241	; 0xf1
    8e4e:	3aff      	subs	r2, #255	; 0xff
    8e50:	6062      	str	r2, [r4, #4]
    8e52:	32f0      	adds	r2, #240	; 0xf0
    8e54:	4313      	orrs	r3, r2
    8e56:	6023      	str	r3, [r4, #0]
    8e58:	68a3      	ldr	r3, [r4, #8]
    8e5a:	1e5a      	subs	r2, r3, #1
    8e5c:	60a2      	str	r2, [r4, #8]
    8e5e:	2b00      	cmp	r3, #0
    8e60:	d016      	beq.n	8e90 <_scanf_i+0xe0>
    8e62:	9b03      	ldr	r3, [sp, #12]
    8e64:	1c5d      	adds	r5, r3, #1
    8e66:	6833      	ldr	r3, [r6, #0]
    8e68:	1c5a      	adds	r2, r3, #1
    8e6a:	6032      	str	r2, [r6, #0]
    8e6c:	781b      	ldrb	r3, [r3, #0]
    8e6e:	9a03      	ldr	r2, [sp, #12]
    8e70:	9503      	str	r5, [sp, #12]
    8e72:	7013      	strb	r3, [r2, #0]
    8e74:	6873      	ldr	r3, [r6, #4]
    8e76:	3b01      	subs	r3, #1
    8e78:	6073      	str	r3, [r6, #4]
    8e7a:	2b00      	cmp	r3, #0
    8e7c:	dc08      	bgt.n	8e90 <_scanf_i+0xe0>
    8e7e:	23c0      	movs	r3, #192	; 0xc0
    8e80:	005b      	lsls	r3, r3, #1
    8e82:	58e3      	ldr	r3, [r4, r3]
    8e84:	0031      	movs	r1, r6
    8e86:	9805      	ldr	r0, [sp, #20]
    8e88:	9307      	str	r3, [sp, #28]
    8e8a:	4798      	blx	r3
    8e8c:	2800      	cmp	r0, #0
    8e8e:	d147      	bne.n	8f20 <_scanf_i+0x170>
    8e90:	3701      	adds	r7, #1
    8e92:	2f03      	cmp	r7, #3
    8e94:	d1b6      	bne.n	8e04 <_scanf_i+0x54>
    8e96:	6863      	ldr	r3, [r4, #4]
    8e98:	2b00      	cmp	r3, #0
    8e9a:	d101      	bne.n	8ea0 <_scanf_i+0xf0>
    8e9c:	330a      	adds	r3, #10
    8e9e:	6063      	str	r3, [r4, #4]
    8ea0:	2110      	movs	r1, #16
    8ea2:	2700      	movs	r7, #0
    8ea4:	6863      	ldr	r3, [r4, #4]
    8ea6:	6960      	ldr	r0, [r4, #20]
    8ea8:	1ac9      	subs	r1, r1, r3
    8eaa:	4b3f      	ldr	r3, [pc, #252]	; (8fa8 <_scanf_i+0x1f8>)
    8eac:	18c9      	adds	r1, r1, r3
    8eae:	f000 f87f 	bl	8fb0 <__sccl>
    8eb2:	9d03      	ldr	r5, [sp, #12]
    8eb4:	68a3      	ldr	r3, [r4, #8]
    8eb6:	2b00      	cmp	r3, #0
    8eb8:	d033      	beq.n	8f22 <_scanf_i+0x172>
    8eba:	6832      	ldr	r2, [r6, #0]
    8ebc:	6960      	ldr	r0, [r4, #20]
    8ebe:	7811      	ldrb	r1, [r2, #0]
    8ec0:	5c40      	ldrb	r0, [r0, r1]
    8ec2:	2800      	cmp	r0, #0
    8ec4:	d02d      	beq.n	8f22 <_scanf_i+0x172>
    8ec6:	2930      	cmp	r1, #48	; 0x30
    8ec8:	d10d      	bne.n	8ee6 <_scanf_i+0x136>
    8eca:	2080      	movs	r0, #128	; 0x80
    8ecc:	6821      	ldr	r1, [r4, #0]
    8ece:	0100      	lsls	r0, r0, #4
    8ed0:	4201      	tst	r1, r0
    8ed2:	d008      	beq.n	8ee6 <_scanf_i+0x136>
    8ed4:	9a04      	ldr	r2, [sp, #16]
    8ed6:	3701      	adds	r7, #1
    8ed8:	2a00      	cmp	r2, #0
    8eda:	d00b      	beq.n	8ef4 <_scanf_i+0x144>
    8edc:	3a01      	subs	r2, #1
    8ede:	3301      	adds	r3, #1
    8ee0:	9204      	str	r2, [sp, #16]
    8ee2:	60a3      	str	r3, [r4, #8]
    8ee4:	e006      	b.n	8ef4 <_scanf_i+0x144>
    8ee6:	6821      	ldr	r1, [r4, #0]
    8ee8:	4b30      	ldr	r3, [pc, #192]	; (8fac <_scanf_i+0x1fc>)
    8eea:	400b      	ands	r3, r1
    8eec:	6023      	str	r3, [r4, #0]
    8eee:	7813      	ldrb	r3, [r2, #0]
    8ef0:	702b      	strb	r3, [r5, #0]
    8ef2:	3501      	adds	r5, #1
    8ef4:	6873      	ldr	r3, [r6, #4]
    8ef6:	3b01      	subs	r3, #1
    8ef8:	6073      	str	r3, [r6, #4]
    8efa:	2b00      	cmp	r3, #0
    8efc:	dd03      	ble.n	8f06 <_scanf_i+0x156>
    8efe:	6833      	ldr	r3, [r6, #0]
    8f00:	3301      	adds	r3, #1
    8f02:	6033      	str	r3, [r6, #0]
    8f04:	e008      	b.n	8f18 <_scanf_i+0x168>
    8f06:	23c0      	movs	r3, #192	; 0xc0
    8f08:	005b      	lsls	r3, r3, #1
    8f0a:	58e3      	ldr	r3, [r4, r3]
    8f0c:	0031      	movs	r1, r6
    8f0e:	9805      	ldr	r0, [sp, #20]
    8f10:	9303      	str	r3, [sp, #12]
    8f12:	4798      	blx	r3
    8f14:	2800      	cmp	r0, #0
    8f16:	d104      	bne.n	8f22 <_scanf_i+0x172>
    8f18:	68a3      	ldr	r3, [r4, #8]
    8f1a:	3b01      	subs	r3, #1
    8f1c:	60a3      	str	r3, [r4, #8]
    8f1e:	e7c9      	b.n	8eb4 <_scanf_i+0x104>
    8f20:	2700      	movs	r7, #0
    8f22:	6823      	ldr	r3, [r4, #0]
    8f24:	05db      	lsls	r3, r3, #23
    8f26:	d50e      	bpl.n	8f46 <_scanf_i+0x196>
    8f28:	9b01      	ldr	r3, [sp, #4]
    8f2a:	429d      	cmp	r5, r3
    8f2c:	d907      	bls.n	8f3e <_scanf_i+0x18e>
    8f2e:	23be      	movs	r3, #190	; 0xbe
    8f30:	3d01      	subs	r5, #1
    8f32:	005b      	lsls	r3, r3, #1
    8f34:	7829      	ldrb	r1, [r5, #0]
    8f36:	58e3      	ldr	r3, [r4, r3]
    8f38:	0032      	movs	r2, r6
    8f3a:	9805      	ldr	r0, [sp, #20]
    8f3c:	4798      	blx	r3
    8f3e:	9b01      	ldr	r3, [sp, #4]
    8f40:	2001      	movs	r0, #1
    8f42:	429d      	cmp	r5, r3
    8f44:	d025      	beq.n	8f92 <_scanf_i+0x1e2>
    8f46:	2210      	movs	r2, #16
    8f48:	6823      	ldr	r3, [r4, #0]
    8f4a:	401a      	ands	r2, r3
    8f4c:	d11a      	bne.n	8f84 <_scanf_i+0x1d4>
    8f4e:	702a      	strb	r2, [r5, #0]
    8f50:	6863      	ldr	r3, [r4, #4]
    8f52:	9901      	ldr	r1, [sp, #4]
    8f54:	9805      	ldr	r0, [sp, #20]
    8f56:	9e06      	ldr	r6, [sp, #24]
    8f58:	47b0      	blx	r6
    8f5a:	9b02      	ldr	r3, [sp, #8]
    8f5c:	6822      	ldr	r2, [r4, #0]
    8f5e:	681b      	ldr	r3, [r3, #0]
    8f60:	0691      	lsls	r1, r2, #26
    8f62:	d407      	bmi.n	8f74 <_scanf_i+0x1c4>
    8f64:	07d1      	lsls	r1, r2, #31
    8f66:	d505      	bpl.n	8f74 <_scanf_i+0x1c4>
    8f68:	9902      	ldr	r1, [sp, #8]
    8f6a:	1d1a      	adds	r2, r3, #4
    8f6c:	600a      	str	r2, [r1, #0]
    8f6e:	681b      	ldr	r3, [r3, #0]
    8f70:	8018      	strh	r0, [r3, #0]
    8f72:	e004      	b.n	8f7e <_scanf_i+0x1ce>
    8f74:	9902      	ldr	r1, [sp, #8]
    8f76:	1d1a      	adds	r2, r3, #4
    8f78:	600a      	str	r2, [r1, #0]
    8f7a:	681b      	ldr	r3, [r3, #0]
    8f7c:	6018      	str	r0, [r3, #0]
    8f7e:	68e3      	ldr	r3, [r4, #12]
    8f80:	3301      	adds	r3, #1
    8f82:	60e3      	str	r3, [r4, #12]
    8f84:	2000      	movs	r0, #0
    8f86:	9b01      	ldr	r3, [sp, #4]
    8f88:	1aed      	subs	r5, r5, r3
    8f8a:	6923      	ldr	r3, [r4, #16]
    8f8c:	19ed      	adds	r5, r5, r7
    8f8e:	195d      	adds	r5, r3, r5
    8f90:	6125      	str	r5, [r4, #16]
    8f92:	b00d      	add	sp, #52	; 0x34
    8f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f96:	46c0      	nop			; (mov r8, r8)
    8f98:	00009b24 	.word	0x00009b24
    8f9c:	00009015 	.word	0x00009015
    8fa0:	00009139 	.word	0x00009139
    8fa4:	fffffaff 	.word	0xfffffaff
    8fa8:	00009b30 	.word	0x00009b30
    8fac:	fffff6ff 	.word	0xfffff6ff

00008fb0 <__sccl>:
    8fb0:	b570      	push	{r4, r5, r6, lr}
    8fb2:	780b      	ldrb	r3, [r1, #0]
    8fb4:	2b5e      	cmp	r3, #94	; 0x5e
    8fb6:	d002      	beq.n	8fbe <__sccl+0xe>
    8fb8:	1c4a      	adds	r2, r1, #1
    8fba:	2500      	movs	r5, #0
    8fbc:	e002      	b.n	8fc4 <__sccl+0x14>
    8fbe:	2501      	movs	r5, #1
    8fc0:	784b      	ldrb	r3, [r1, #1]
    8fc2:	1c8a      	adds	r2, r1, #2
    8fc4:	0001      	movs	r1, r0
    8fc6:	1c44      	adds	r4, r0, #1
    8fc8:	34ff      	adds	r4, #255	; 0xff
    8fca:	700d      	strb	r5, [r1, #0]
    8fcc:	3101      	adds	r1, #1
    8fce:	42a1      	cmp	r1, r4
    8fd0:	d1fb      	bne.n	8fca <__sccl+0x1a>
    8fd2:	2b00      	cmp	r3, #0
    8fd4:	d101      	bne.n	8fda <__sccl+0x2a>
    8fd6:	1e50      	subs	r0, r2, #1
    8fd8:	e01b      	b.n	9012 <__sccl+0x62>
    8fda:	2101      	movs	r1, #1
    8fdc:	404d      	eors	r5, r1
    8fde:	0011      	movs	r1, r2
    8fe0:	54c5      	strb	r5, [r0, r3]
    8fe2:	780c      	ldrb	r4, [r1, #0]
    8fe4:	1c4a      	adds	r2, r1, #1
    8fe6:	2c2d      	cmp	r4, #45	; 0x2d
    8fe8:	d007      	beq.n	8ffa <__sccl+0x4a>
    8fea:	2c5d      	cmp	r4, #93	; 0x5d
    8fec:	d010      	beq.n	9010 <__sccl+0x60>
    8fee:	2c00      	cmp	r4, #0
    8ff0:	d001      	beq.n	8ff6 <__sccl+0x46>
    8ff2:	0023      	movs	r3, r4
    8ff4:	e7f3      	b.n	8fde <__sccl+0x2e>
    8ff6:	0008      	movs	r0, r1
    8ff8:	e00b      	b.n	9012 <__sccl+0x62>
    8ffa:	784e      	ldrb	r6, [r1, #1]
    8ffc:	2e5d      	cmp	r6, #93	; 0x5d
    8ffe:	d0f8      	beq.n	8ff2 <__sccl+0x42>
    9000:	42b3      	cmp	r3, r6
    9002:	dcf6      	bgt.n	8ff2 <__sccl+0x42>
    9004:	3102      	adds	r1, #2
    9006:	3301      	adds	r3, #1
    9008:	54c5      	strb	r5, [r0, r3]
    900a:	429e      	cmp	r6, r3
    900c:	dcfb      	bgt.n	9006 <__sccl+0x56>
    900e:	e7e8      	b.n	8fe2 <__sccl+0x32>
    9010:	0010      	movs	r0, r2
    9012:	bd70      	pop	{r4, r5, r6, pc}

00009014 <_strtol_r>:
    9014:	b5f0      	push	{r4, r5, r6, r7, lr}
    9016:	001e      	movs	r6, r3
    9018:	4b45      	ldr	r3, [pc, #276]	; (9130 <_strtol_r+0x11c>)
    901a:	b087      	sub	sp, #28
    901c:	681b      	ldr	r3, [r3, #0]
    901e:	9201      	str	r2, [sp, #4]
    9020:	9302      	str	r3, [sp, #8]
    9022:	2208      	movs	r2, #8
    9024:	000b      	movs	r3, r1
    9026:	9005      	str	r0, [sp, #20]
    9028:	9103      	str	r1, [sp, #12]
    902a:	781c      	ldrb	r4, [r3, #0]
    902c:	9902      	ldr	r1, [sp, #8]
    902e:	1c5d      	adds	r5, r3, #1
    9030:	1909      	adds	r1, r1, r4
    9032:	7848      	ldrb	r0, [r1, #1]
    9034:	4010      	ands	r0, r2
    9036:	d001      	beq.n	903c <_strtol_r+0x28>
    9038:	002b      	movs	r3, r5
    903a:	e7f6      	b.n	902a <_strtol_r+0x16>
    903c:	2c2d      	cmp	r4, #45	; 0x2d
    903e:	d104      	bne.n	904a <_strtol_r+0x36>
    9040:	1c9d      	adds	r5, r3, #2
    9042:	785c      	ldrb	r4, [r3, #1]
    9044:	2301      	movs	r3, #1
    9046:	9300      	str	r3, [sp, #0]
    9048:	e004      	b.n	9054 <_strtol_r+0x40>
    904a:	9000      	str	r0, [sp, #0]
    904c:	2c2b      	cmp	r4, #43	; 0x2b
    904e:	d101      	bne.n	9054 <_strtol_r+0x40>
    9050:	785c      	ldrb	r4, [r3, #1]
    9052:	1c9d      	adds	r5, r3, #2
    9054:	2e00      	cmp	r6, #0
    9056:	d002      	beq.n	905e <_strtol_r+0x4a>
    9058:	2e10      	cmp	r6, #16
    905a:	d10a      	bne.n	9072 <_strtol_r+0x5e>
    905c:	e062      	b.n	9124 <_strtol_r+0x110>
    905e:	2c30      	cmp	r4, #48	; 0x30
    9060:	d15e      	bne.n	9120 <_strtol_r+0x10c>
    9062:	2220      	movs	r2, #32
    9064:	782b      	ldrb	r3, [r5, #0]
    9066:	4393      	bics	r3, r2
    9068:	2b58      	cmp	r3, #88	; 0x58
    906a:	d154      	bne.n	9116 <_strtol_r+0x102>
    906c:	2610      	movs	r6, #16
    906e:	786c      	ldrb	r4, [r5, #1]
    9070:	3502      	adds	r5, #2
    9072:	9f00      	ldr	r7, [sp, #0]
    9074:	0031      	movs	r1, r6
    9076:	1e7b      	subs	r3, r7, #1
    9078:	419f      	sbcs	r7, r3
    907a:	4b2e      	ldr	r3, [pc, #184]	; (9134 <_strtol_r+0x120>)
    907c:	18ff      	adds	r7, r7, r3
    907e:	0038      	movs	r0, r7
    9080:	f7fd fa30 	bl	64e4 <__aeabi_uidivmod>
    9084:	0038      	movs	r0, r7
    9086:	9104      	str	r1, [sp, #16]
    9088:	0031      	movs	r1, r6
    908a:	f7fd f9a5 	bl	63d8 <__aeabi_uidiv>
    908e:	2300      	movs	r3, #0
    9090:	2203      	movs	r2, #3
    9092:	0007      	movs	r7, r0
    9094:	4694      	mov	ip, r2
    9096:	0018      	movs	r0, r3
    9098:	9a02      	ldr	r2, [sp, #8]
    909a:	1912      	adds	r2, r2, r4
    909c:	7851      	ldrb	r1, [r2, #1]
    909e:	2204      	movs	r2, #4
    90a0:	4211      	tst	r1, r2
    90a2:	d001      	beq.n	90a8 <_strtol_r+0x94>
    90a4:	3c30      	subs	r4, #48	; 0x30
    90a6:	e007      	b.n	90b8 <_strtol_r+0xa4>
    90a8:	4662      	mov	r2, ip
    90aa:	4011      	ands	r1, r2
    90ac:	d017      	beq.n	90de <_strtol_r+0xca>
    90ae:	2237      	movs	r2, #55	; 0x37
    90b0:	2901      	cmp	r1, #1
    90b2:	d000      	beq.n	90b6 <_strtol_r+0xa2>
    90b4:	3220      	adds	r2, #32
    90b6:	1aa4      	subs	r4, r4, r2
    90b8:	42a6      	cmp	r6, r4
    90ba:	dd10      	ble.n	90de <_strtol_r+0xca>
    90bc:	1c5a      	adds	r2, r3, #1
    90be:	d00b      	beq.n	90d8 <_strtol_r+0xc4>
    90c0:	42b8      	cmp	r0, r7
    90c2:	d807      	bhi.n	90d4 <_strtol_r+0xc0>
    90c4:	d102      	bne.n	90cc <_strtol_r+0xb8>
    90c6:	9b04      	ldr	r3, [sp, #16]
    90c8:	429c      	cmp	r4, r3
    90ca:	dc03      	bgt.n	90d4 <_strtol_r+0xc0>
    90cc:	4370      	muls	r0, r6
    90ce:	2301      	movs	r3, #1
    90d0:	1820      	adds	r0, r4, r0
    90d2:	e001      	b.n	90d8 <_strtol_r+0xc4>
    90d4:	2301      	movs	r3, #1
    90d6:	425b      	negs	r3, r3
    90d8:	782c      	ldrb	r4, [r5, #0]
    90da:	3501      	adds	r5, #1
    90dc:	e7dc      	b.n	9098 <_strtol_r+0x84>
    90de:	1c5a      	adds	r2, r3, #1
    90e0:	d10b      	bne.n	90fa <_strtol_r+0xe6>
    90e2:	9800      	ldr	r0, [sp, #0]
    90e4:	9a05      	ldr	r2, [sp, #20]
    90e6:	1e43      	subs	r3, r0, #1
    90e8:	4198      	sbcs	r0, r3
    90ea:	4b12      	ldr	r3, [pc, #72]	; (9134 <_strtol_r+0x120>)
    90ec:	18c0      	adds	r0, r0, r3
    90ee:	2322      	movs	r3, #34	; 0x22
    90f0:	6013      	str	r3, [r2, #0]
    90f2:	9b01      	ldr	r3, [sp, #4]
    90f4:	2b00      	cmp	r3, #0
    90f6:	d10a      	bne.n	910e <_strtol_r+0xfa>
    90f8:	e017      	b.n	912a <_strtol_r+0x116>
    90fa:	9a00      	ldr	r2, [sp, #0]
    90fc:	2a00      	cmp	r2, #0
    90fe:	d000      	beq.n	9102 <_strtol_r+0xee>
    9100:	4240      	negs	r0, r0
    9102:	9a01      	ldr	r2, [sp, #4]
    9104:	2a00      	cmp	r2, #0
    9106:	d010      	beq.n	912a <_strtol_r+0x116>
    9108:	9a03      	ldr	r2, [sp, #12]
    910a:	2b00      	cmp	r3, #0
    910c:	d000      	beq.n	9110 <_strtol_r+0xfc>
    910e:	1e6a      	subs	r2, r5, #1
    9110:	9b01      	ldr	r3, [sp, #4]
    9112:	601a      	str	r2, [r3, #0]
    9114:	e009      	b.n	912a <_strtol_r+0x116>
    9116:	2430      	movs	r4, #48	; 0x30
    9118:	2e00      	cmp	r6, #0
    911a:	d1aa      	bne.n	9072 <_strtol_r+0x5e>
    911c:	2608      	movs	r6, #8
    911e:	e7a8      	b.n	9072 <_strtol_r+0x5e>
    9120:	260a      	movs	r6, #10
    9122:	e7a6      	b.n	9072 <_strtol_r+0x5e>
    9124:	2c30      	cmp	r4, #48	; 0x30
    9126:	d09c      	beq.n	9062 <_strtol_r+0x4e>
    9128:	e7a3      	b.n	9072 <_strtol_r+0x5e>
    912a:	b007      	add	sp, #28
    912c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    912e:	46c0      	nop			; (mov r8, r8)
    9130:	200000f8 	.word	0x200000f8
    9134:	7fffffff 	.word	0x7fffffff

00009138 <_strtoul_r>:
    9138:	b5f0      	push	{r4, r5, r6, r7, lr}
    913a:	001e      	movs	r6, r3
    913c:	4b3f      	ldr	r3, [pc, #252]	; (923c <_strtoul_r+0x104>)
    913e:	b087      	sub	sp, #28
    9140:	681b      	ldr	r3, [r3, #0]
    9142:	9104      	str	r1, [sp, #16]
    9144:	9302      	str	r3, [sp, #8]
    9146:	0017      	movs	r7, r2
    9148:	000b      	movs	r3, r1
    914a:	2108      	movs	r1, #8
    914c:	9005      	str	r0, [sp, #20]
    914e:	781c      	ldrb	r4, [r3, #0]
    9150:	9a02      	ldr	r2, [sp, #8]
    9152:	1c5d      	adds	r5, r3, #1
    9154:	1912      	adds	r2, r2, r4
    9156:	7852      	ldrb	r2, [r2, #1]
    9158:	400a      	ands	r2, r1
    915a:	d001      	beq.n	9160 <_strtoul_r+0x28>
    915c:	002b      	movs	r3, r5
    915e:	e7f6      	b.n	914e <_strtoul_r+0x16>
    9160:	2c2d      	cmp	r4, #45	; 0x2d
    9162:	d104      	bne.n	916e <_strtoul_r+0x36>
    9164:	1c9d      	adds	r5, r3, #2
    9166:	785c      	ldrb	r4, [r3, #1]
    9168:	2301      	movs	r3, #1
    916a:	9301      	str	r3, [sp, #4]
    916c:	e004      	b.n	9178 <_strtoul_r+0x40>
    916e:	9201      	str	r2, [sp, #4]
    9170:	2c2b      	cmp	r4, #43	; 0x2b
    9172:	d101      	bne.n	9178 <_strtoul_r+0x40>
    9174:	785c      	ldrb	r4, [r3, #1]
    9176:	1c9d      	adds	r5, r3, #2
    9178:	2e00      	cmp	r6, #0
    917a:	d002      	beq.n	9182 <_strtoul_r+0x4a>
    917c:	2e10      	cmp	r6, #16
    917e:	d10a      	bne.n	9196 <_strtoul_r+0x5e>
    9180:	e057      	b.n	9232 <_strtoul_r+0xfa>
    9182:	2c30      	cmp	r4, #48	; 0x30
    9184:	d153      	bne.n	922e <_strtoul_r+0xf6>
    9186:	2220      	movs	r2, #32
    9188:	782b      	ldrb	r3, [r5, #0]
    918a:	4393      	bics	r3, r2
    918c:	2b58      	cmp	r3, #88	; 0x58
    918e:	d149      	bne.n	9224 <_strtoul_r+0xec>
    9190:	2610      	movs	r6, #16
    9192:	786c      	ldrb	r4, [r5, #1]
    9194:	3502      	adds	r5, #2
    9196:	2001      	movs	r0, #1
    9198:	0031      	movs	r1, r6
    919a:	4240      	negs	r0, r0
    919c:	f7fd f91c 	bl	63d8 <__aeabi_uidiv>
    91a0:	9003      	str	r0, [sp, #12]
    91a2:	2001      	movs	r0, #1
    91a4:	0031      	movs	r1, r6
    91a6:	4240      	negs	r0, r0
    91a8:	f7fd f99c 	bl	64e4 <__aeabi_uidivmod>
    91ac:	2300      	movs	r3, #0
    91ae:	468c      	mov	ip, r1
    91b0:	0018      	movs	r0, r3
    91b2:	9a02      	ldr	r2, [sp, #8]
    91b4:	1912      	adds	r2, r2, r4
    91b6:	7851      	ldrb	r1, [r2, #1]
    91b8:	2204      	movs	r2, #4
    91ba:	4211      	tst	r1, r2
    91bc:	d001      	beq.n	91c2 <_strtoul_r+0x8a>
    91be:	3c30      	subs	r4, #48	; 0x30
    91c0:	e007      	b.n	91d2 <_strtoul_r+0x9a>
    91c2:	2203      	movs	r2, #3
    91c4:	4011      	ands	r1, r2
    91c6:	d017      	beq.n	91f8 <_strtoul_r+0xc0>
    91c8:	3234      	adds	r2, #52	; 0x34
    91ca:	2901      	cmp	r1, #1
    91cc:	d000      	beq.n	91d0 <_strtoul_r+0x98>
    91ce:	3220      	adds	r2, #32
    91d0:	1aa4      	subs	r4, r4, r2
    91d2:	42a6      	cmp	r6, r4
    91d4:	dd10      	ble.n	91f8 <_strtoul_r+0xc0>
    91d6:	2b00      	cmp	r3, #0
    91d8:	db09      	blt.n	91ee <_strtoul_r+0xb6>
    91da:	9b03      	ldr	r3, [sp, #12]
    91dc:	4298      	cmp	r0, r3
    91de:	d806      	bhi.n	91ee <_strtoul_r+0xb6>
    91e0:	d101      	bne.n	91e6 <_strtoul_r+0xae>
    91e2:	4564      	cmp	r4, ip
    91e4:	dc03      	bgt.n	91ee <_strtoul_r+0xb6>
    91e6:	4370      	muls	r0, r6
    91e8:	2301      	movs	r3, #1
    91ea:	1820      	adds	r0, r4, r0
    91ec:	e001      	b.n	91f2 <_strtoul_r+0xba>
    91ee:	2301      	movs	r3, #1
    91f0:	425b      	negs	r3, r3
    91f2:	782c      	ldrb	r4, [r5, #0]
    91f4:	3501      	adds	r5, #1
    91f6:	e7dc      	b.n	91b2 <_strtoul_r+0x7a>
    91f8:	2b00      	cmp	r3, #0
    91fa:	da07      	bge.n	920c <_strtoul_r+0xd4>
    91fc:	2322      	movs	r3, #34	; 0x22
    91fe:	2001      	movs	r0, #1
    9200:	9a05      	ldr	r2, [sp, #20]
    9202:	4240      	negs	r0, r0
    9204:	6013      	str	r3, [r2, #0]
    9206:	2f00      	cmp	r7, #0
    9208:	d109      	bne.n	921e <_strtoul_r+0xe6>
    920a:	e015      	b.n	9238 <_strtoul_r+0x100>
    920c:	9a01      	ldr	r2, [sp, #4]
    920e:	2a00      	cmp	r2, #0
    9210:	d000      	beq.n	9214 <_strtoul_r+0xdc>
    9212:	4240      	negs	r0, r0
    9214:	2f00      	cmp	r7, #0
    9216:	d00f      	beq.n	9238 <_strtoul_r+0x100>
    9218:	9a04      	ldr	r2, [sp, #16]
    921a:	2b00      	cmp	r3, #0
    921c:	d000      	beq.n	9220 <_strtoul_r+0xe8>
    921e:	1e6a      	subs	r2, r5, #1
    9220:	603a      	str	r2, [r7, #0]
    9222:	e009      	b.n	9238 <_strtoul_r+0x100>
    9224:	2430      	movs	r4, #48	; 0x30
    9226:	2e00      	cmp	r6, #0
    9228:	d1b5      	bne.n	9196 <_strtoul_r+0x5e>
    922a:	2608      	movs	r6, #8
    922c:	e7b3      	b.n	9196 <_strtoul_r+0x5e>
    922e:	260a      	movs	r6, #10
    9230:	e7b1      	b.n	9196 <_strtoul_r+0x5e>
    9232:	2c30      	cmp	r4, #48	; 0x30
    9234:	d0a7      	beq.n	9186 <_strtoul_r+0x4e>
    9236:	e7ae      	b.n	9196 <_strtoul_r+0x5e>
    9238:	b007      	add	sp, #28
    923a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    923c:	200000f8 	.word	0x200000f8

00009240 <__submore>:
    9240:	000b      	movs	r3, r1
    9242:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9244:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    9246:	3344      	adds	r3, #68	; 0x44
    9248:	000c      	movs	r4, r1
    924a:	429d      	cmp	r5, r3
    924c:	d11b      	bne.n	9286 <__submore+0x46>
    924e:	2680      	movs	r6, #128	; 0x80
    9250:	00f6      	lsls	r6, r6, #3
    9252:	0031      	movs	r1, r6
    9254:	f000 f898 	bl	9388 <_malloc_r>
    9258:	2800      	cmp	r0, #0
    925a:	d102      	bne.n	9262 <__submore+0x22>
    925c:	2001      	movs	r0, #1
    925e:	4240      	negs	r0, r0
    9260:	e025      	b.n	92ae <__submore+0x6e>
    9262:	0023      	movs	r3, r4
    9264:	6360      	str	r0, [r4, #52]	; 0x34
    9266:	63a6      	str	r6, [r4, #56]	; 0x38
    9268:	3346      	adds	r3, #70	; 0x46
    926a:	781a      	ldrb	r2, [r3, #0]
    926c:	4b10      	ldr	r3, [pc, #64]	; (92b0 <__submore+0x70>)
    926e:	54c2      	strb	r2, [r0, r3]
    9270:	0023      	movs	r3, r4
    9272:	3345      	adds	r3, #69	; 0x45
    9274:	781a      	ldrb	r2, [r3, #0]
    9276:	4b0f      	ldr	r3, [pc, #60]	; (92b4 <__submore+0x74>)
    9278:	54c2      	strb	r2, [r0, r3]
    927a:	782a      	ldrb	r2, [r5, #0]
    927c:	4b0e      	ldr	r3, [pc, #56]	; (92b8 <__submore+0x78>)
    927e:	54c2      	strb	r2, [r0, r3]
    9280:	18c0      	adds	r0, r0, r3
    9282:	6020      	str	r0, [r4, #0]
    9284:	e012      	b.n	92ac <__submore+0x6c>
    9286:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    9288:	0029      	movs	r1, r5
    928a:	0073      	lsls	r3, r6, #1
    928c:	001a      	movs	r2, r3
    928e:	9301      	str	r3, [sp, #4]
    9290:	f000 f8d0 	bl	9434 <_realloc_r>
    9294:	1e05      	subs	r5, r0, #0
    9296:	d0e1      	beq.n	925c <__submore+0x1c>
    9298:	1987      	adds	r7, r0, r6
    929a:	0001      	movs	r1, r0
    929c:	0032      	movs	r2, r6
    929e:	0038      	movs	r0, r7
    92a0:	f7fe ffea 	bl	8278 <memcpy>
    92a4:	9b01      	ldr	r3, [sp, #4]
    92a6:	6027      	str	r7, [r4, #0]
    92a8:	6365      	str	r5, [r4, #52]	; 0x34
    92aa:	63a3      	str	r3, [r4, #56]	; 0x38
    92ac:	2000      	movs	r0, #0
    92ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    92b0:	000003ff 	.word	0x000003ff
    92b4:	000003fe 	.word	0x000003fe
    92b8:	000003fd 	.word	0x000003fd

000092bc <memchr>:
    92bc:	b2c9      	uxtb	r1, r1
    92be:	1882      	adds	r2, r0, r2
    92c0:	4290      	cmp	r0, r2
    92c2:	d004      	beq.n	92ce <memchr+0x12>
    92c4:	7803      	ldrb	r3, [r0, #0]
    92c6:	428b      	cmp	r3, r1
    92c8:	d002      	beq.n	92d0 <memchr+0x14>
    92ca:	3001      	adds	r0, #1
    92cc:	e7f8      	b.n	92c0 <memchr+0x4>
    92ce:	2000      	movs	r0, #0
    92d0:	4770      	bx	lr

000092d2 <memmove>:
    92d2:	b510      	push	{r4, lr}
    92d4:	4288      	cmp	r0, r1
    92d6:	d902      	bls.n	92de <memmove+0xc>
    92d8:	188b      	adds	r3, r1, r2
    92da:	4298      	cmp	r0, r3
    92dc:	d301      	bcc.n	92e2 <memmove+0x10>
    92de:	2300      	movs	r3, #0
    92e0:	e005      	b.n	92ee <memmove+0x1c>
    92e2:	1a9b      	subs	r3, r3, r2
    92e4:	3a01      	subs	r2, #1
    92e6:	d308      	bcc.n	92fa <memmove+0x28>
    92e8:	5c99      	ldrb	r1, [r3, r2]
    92ea:	5481      	strb	r1, [r0, r2]
    92ec:	e7fa      	b.n	92e4 <memmove+0x12>
    92ee:	4293      	cmp	r3, r2
    92f0:	d003      	beq.n	92fa <memmove+0x28>
    92f2:	5ccc      	ldrb	r4, [r1, r3]
    92f4:	54c4      	strb	r4, [r0, r3]
    92f6:	3301      	adds	r3, #1
    92f8:	e7f9      	b.n	92ee <memmove+0x1c>
    92fa:	bd10      	pop	{r4, pc}

000092fc <_free_r>:
    92fc:	b530      	push	{r4, r5, lr}
    92fe:	2900      	cmp	r1, #0
    9300:	d03e      	beq.n	9380 <_free_r+0x84>
    9302:	3904      	subs	r1, #4
    9304:	680b      	ldr	r3, [r1, #0]
    9306:	2b00      	cmp	r3, #0
    9308:	da00      	bge.n	930c <_free_r+0x10>
    930a:	18c9      	adds	r1, r1, r3
    930c:	4a1d      	ldr	r2, [pc, #116]	; (9384 <_free_r+0x88>)
    930e:	6813      	ldr	r3, [r2, #0]
    9310:	0014      	movs	r4, r2
    9312:	2b00      	cmp	r3, #0
    9314:	d102      	bne.n	931c <_free_r+0x20>
    9316:	604b      	str	r3, [r1, #4]
    9318:	6011      	str	r1, [r2, #0]
    931a:	e031      	b.n	9380 <_free_r+0x84>
    931c:	428b      	cmp	r3, r1
    931e:	d90d      	bls.n	933c <_free_r+0x40>
    9320:	680a      	ldr	r2, [r1, #0]
    9322:	1888      	adds	r0, r1, r2
    9324:	4283      	cmp	r3, r0
    9326:	d103      	bne.n	9330 <_free_r+0x34>
    9328:	6818      	ldr	r0, [r3, #0]
    932a:	685b      	ldr	r3, [r3, #4]
    932c:	1882      	adds	r2, r0, r2
    932e:	600a      	str	r2, [r1, #0]
    9330:	604b      	str	r3, [r1, #4]
    9332:	6021      	str	r1, [r4, #0]
    9334:	e024      	b.n	9380 <_free_r+0x84>
    9336:	428a      	cmp	r2, r1
    9338:	d803      	bhi.n	9342 <_free_r+0x46>
    933a:	0013      	movs	r3, r2
    933c:	685a      	ldr	r2, [r3, #4]
    933e:	2a00      	cmp	r2, #0
    9340:	d1f9      	bne.n	9336 <_free_r+0x3a>
    9342:	681d      	ldr	r5, [r3, #0]
    9344:	195c      	adds	r4, r3, r5
    9346:	428c      	cmp	r4, r1
    9348:	d10b      	bne.n	9362 <_free_r+0x66>
    934a:	6809      	ldr	r1, [r1, #0]
    934c:	1869      	adds	r1, r5, r1
    934e:	1858      	adds	r0, r3, r1
    9350:	6019      	str	r1, [r3, #0]
    9352:	4282      	cmp	r2, r0
    9354:	d114      	bne.n	9380 <_free_r+0x84>
    9356:	6810      	ldr	r0, [r2, #0]
    9358:	6852      	ldr	r2, [r2, #4]
    935a:	1841      	adds	r1, r0, r1
    935c:	6019      	str	r1, [r3, #0]
    935e:	605a      	str	r2, [r3, #4]
    9360:	e00e      	b.n	9380 <_free_r+0x84>
    9362:	428c      	cmp	r4, r1
    9364:	d902      	bls.n	936c <_free_r+0x70>
    9366:	230c      	movs	r3, #12
    9368:	6003      	str	r3, [r0, #0]
    936a:	e009      	b.n	9380 <_free_r+0x84>
    936c:	6808      	ldr	r0, [r1, #0]
    936e:	180c      	adds	r4, r1, r0
    9370:	42a2      	cmp	r2, r4
    9372:	d103      	bne.n	937c <_free_r+0x80>
    9374:	6814      	ldr	r4, [r2, #0]
    9376:	6852      	ldr	r2, [r2, #4]
    9378:	1820      	adds	r0, r4, r0
    937a:	6008      	str	r0, [r1, #0]
    937c:	604a      	str	r2, [r1, #4]
    937e:	6059      	str	r1, [r3, #4]
    9380:	bd30      	pop	{r4, r5, pc}
    9382:	46c0      	nop			; (mov r8, r8)
    9384:	2000014c 	.word	0x2000014c

00009388 <_malloc_r>:
    9388:	2303      	movs	r3, #3
    938a:	b570      	push	{r4, r5, r6, lr}
    938c:	1ccd      	adds	r5, r1, #3
    938e:	439d      	bics	r5, r3
    9390:	3508      	adds	r5, #8
    9392:	0006      	movs	r6, r0
    9394:	2d0c      	cmp	r5, #12
    9396:	d201      	bcs.n	939c <_malloc_r+0x14>
    9398:	250c      	movs	r5, #12
    939a:	e005      	b.n	93a8 <_malloc_r+0x20>
    939c:	2d00      	cmp	r5, #0
    939e:	da03      	bge.n	93a8 <_malloc_r+0x20>
    93a0:	230c      	movs	r3, #12
    93a2:	2000      	movs	r0, #0
    93a4:	6033      	str	r3, [r6, #0]
    93a6:	e040      	b.n	942a <_malloc_r+0xa2>
    93a8:	42a9      	cmp	r1, r5
    93aa:	d8f9      	bhi.n	93a0 <_malloc_r+0x18>
    93ac:	4b1f      	ldr	r3, [pc, #124]	; (942c <_malloc_r+0xa4>)
    93ae:	681c      	ldr	r4, [r3, #0]
    93b0:	001a      	movs	r2, r3
    93b2:	0021      	movs	r1, r4
    93b4:	2900      	cmp	r1, #0
    93b6:	d013      	beq.n	93e0 <_malloc_r+0x58>
    93b8:	680b      	ldr	r3, [r1, #0]
    93ba:	1b5b      	subs	r3, r3, r5
    93bc:	d40d      	bmi.n	93da <_malloc_r+0x52>
    93be:	2b0b      	cmp	r3, #11
    93c0:	d902      	bls.n	93c8 <_malloc_r+0x40>
    93c2:	600b      	str	r3, [r1, #0]
    93c4:	18cc      	adds	r4, r1, r3
    93c6:	e01e      	b.n	9406 <_malloc_r+0x7e>
    93c8:	428c      	cmp	r4, r1
    93ca:	d102      	bne.n	93d2 <_malloc_r+0x4a>
    93cc:	6863      	ldr	r3, [r4, #4]
    93ce:	6013      	str	r3, [r2, #0]
    93d0:	e01a      	b.n	9408 <_malloc_r+0x80>
    93d2:	684b      	ldr	r3, [r1, #4]
    93d4:	6063      	str	r3, [r4, #4]
    93d6:	000c      	movs	r4, r1
    93d8:	e016      	b.n	9408 <_malloc_r+0x80>
    93da:	000c      	movs	r4, r1
    93dc:	6849      	ldr	r1, [r1, #4]
    93de:	e7e9      	b.n	93b4 <_malloc_r+0x2c>
    93e0:	4c13      	ldr	r4, [pc, #76]	; (9430 <_malloc_r+0xa8>)
    93e2:	6823      	ldr	r3, [r4, #0]
    93e4:	2b00      	cmp	r3, #0
    93e6:	d103      	bne.n	93f0 <_malloc_r+0x68>
    93e8:	0030      	movs	r0, r6
    93ea:	f000 f849 	bl	9480 <_sbrk_r>
    93ee:	6020      	str	r0, [r4, #0]
    93f0:	0029      	movs	r1, r5
    93f2:	0030      	movs	r0, r6
    93f4:	f000 f844 	bl	9480 <_sbrk_r>
    93f8:	1c43      	adds	r3, r0, #1
    93fa:	d0d1      	beq.n	93a0 <_malloc_r+0x18>
    93fc:	2303      	movs	r3, #3
    93fe:	1cc4      	adds	r4, r0, #3
    9400:	439c      	bics	r4, r3
    9402:	42a0      	cmp	r0, r4
    9404:	d10a      	bne.n	941c <_malloc_r+0x94>
    9406:	6025      	str	r5, [r4, #0]
    9408:	0020      	movs	r0, r4
    940a:	2207      	movs	r2, #7
    940c:	300b      	adds	r0, #11
    940e:	1d23      	adds	r3, r4, #4
    9410:	4390      	bics	r0, r2
    9412:	1ac3      	subs	r3, r0, r3
    9414:	d009      	beq.n	942a <_malloc_r+0xa2>
    9416:	425a      	negs	r2, r3
    9418:	50e2      	str	r2, [r4, r3]
    941a:	e006      	b.n	942a <_malloc_r+0xa2>
    941c:	1a21      	subs	r1, r4, r0
    941e:	0030      	movs	r0, r6
    9420:	f000 f82e 	bl	9480 <_sbrk_r>
    9424:	1c43      	adds	r3, r0, #1
    9426:	d1ee      	bne.n	9406 <_malloc_r+0x7e>
    9428:	e7ba      	b.n	93a0 <_malloc_r+0x18>
    942a:	bd70      	pop	{r4, r5, r6, pc}
    942c:	2000014c 	.word	0x2000014c
    9430:	20000148 	.word	0x20000148

00009434 <_realloc_r>:
    9434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9436:	0006      	movs	r6, r0
    9438:	000c      	movs	r4, r1
    943a:	0015      	movs	r5, r2
    943c:	2900      	cmp	r1, #0
    943e:	d104      	bne.n	944a <_realloc_r+0x16>
    9440:	0011      	movs	r1, r2
    9442:	f7ff ffa1 	bl	9388 <_malloc_r>
    9446:	0004      	movs	r4, r0
    9448:	e018      	b.n	947c <_realloc_r+0x48>
    944a:	2a00      	cmp	r2, #0
    944c:	d103      	bne.n	9456 <_realloc_r+0x22>
    944e:	f7ff ff55 	bl	92fc <_free_r>
    9452:	002c      	movs	r4, r5
    9454:	e012      	b.n	947c <_realloc_r+0x48>
    9456:	f000 f825 	bl	94a4 <_malloc_usable_size_r>
    945a:	4285      	cmp	r5, r0
    945c:	d90e      	bls.n	947c <_realloc_r+0x48>
    945e:	0029      	movs	r1, r5
    9460:	0030      	movs	r0, r6
    9462:	f7ff ff91 	bl	9388 <_malloc_r>
    9466:	1e07      	subs	r7, r0, #0
    9468:	d007      	beq.n	947a <_realloc_r+0x46>
    946a:	0021      	movs	r1, r4
    946c:	002a      	movs	r2, r5
    946e:	f7fe ff03 	bl	8278 <memcpy>
    9472:	0021      	movs	r1, r4
    9474:	0030      	movs	r0, r6
    9476:	f7ff ff41 	bl	92fc <_free_r>
    947a:	003c      	movs	r4, r7
    947c:	0020      	movs	r0, r4
    947e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009480 <_sbrk_r>:
    9480:	2300      	movs	r3, #0
    9482:	b570      	push	{r4, r5, r6, lr}
    9484:	4c06      	ldr	r4, [pc, #24]	; (94a0 <_sbrk_r+0x20>)
    9486:	0005      	movs	r5, r0
    9488:	0008      	movs	r0, r1
    948a:	6023      	str	r3, [r4, #0]
    948c:	f7fc fd10 	bl	5eb0 <_sbrk>
    9490:	1c43      	adds	r3, r0, #1
    9492:	d103      	bne.n	949c <_sbrk_r+0x1c>
    9494:	6823      	ldr	r3, [r4, #0]
    9496:	2b00      	cmp	r3, #0
    9498:	d000      	beq.n	949c <_sbrk_r+0x1c>
    949a:	602b      	str	r3, [r5, #0]
    949c:	bd70      	pop	{r4, r5, r6, pc}
    949e:	46c0      	nop			; (mov r8, r8)
    94a0:	20000374 	.word	0x20000374

000094a4 <_malloc_usable_size_r>:
    94a4:	1f0b      	subs	r3, r1, #4
    94a6:	681a      	ldr	r2, [r3, #0]
    94a8:	1f10      	subs	r0, r2, #4
    94aa:	2a00      	cmp	r2, #0
    94ac:	da04      	bge.n	94b8 <_malloc_usable_size_r+0x14>
    94ae:	1889      	adds	r1, r1, r2
    94b0:	3904      	subs	r1, #4
    94b2:	680b      	ldr	r3, [r1, #0]
    94b4:	18d0      	adds	r0, r2, r3
    94b6:	3804      	subs	r0, #4
    94b8:	4770      	bx	lr
    94ba:	0000      	movs	r0, r0
    94bc:	00000002 	.word	0x00000002
    94c0:	00000003 	.word	0x00000003
    94c4:	00000028 	.word	0x00000028
    94c8:	00000029 	.word	0x00000029
    94cc:	00000004 	.word	0x00000004
    94d0:	00000005 	.word	0x00000005
    94d4:	00000006 	.word	0x00000006
    94d8:	00000007 	.word	0x00000007
    94dc:	0000ffff 	.word	0x0000ffff
    94e0:	0000ffff 	.word	0x0000ffff
    94e4:	00000022 	.word	0x00000022
    94e8:	00000023 	.word	0x00000023
    94ec:	0000ffff 	.word	0x0000ffff
    94f0:	0000ffff 	.word	0x0000ffff
    94f4:	0000ffff 	.word	0x0000ffff
    94f8:	0000ffff 	.word	0x0000ffff
    94fc:	00000008 	.word	0x00000008
    9500:	00000009 	.word	0x00000009
    9504:	0000000a 	.word	0x0000000a
    9508:	0000000b 	.word	0x0000000b
    950c:	00000552 	.word	0x00000552
    9510:	00000558 	.word	0x00000558
    9514:	00000558 	.word	0x00000558
    9518:	00000558 	.word	0x00000558
    951c:	00000558 	.word	0x00000558
    9520:	00000558 	.word	0x00000558
    9524:	00000558 	.word	0x00000558
    9528:	00000558 	.word	0x00000558
    952c:	00000558 	.word	0x00000558
    9530:	00000558 	.word	0x00000558
    9534:	00000558 	.word	0x00000558
    9538:	00000558 	.word	0x00000558
    953c:	00000558 	.word	0x00000558
    9540:	00000558 	.word	0x00000558
    9544:	00000558 	.word	0x00000558
    9548:	00000558 	.word	0x00000558
    954c:	00000530 	.word	0x00000530
    9550:	00000558 	.word	0x00000558
    9554:	00000558 	.word	0x00000558
    9558:	00000558 	.word	0x00000558
    955c:	00000558 	.word	0x00000558
    9560:	00000558 	.word	0x00000558
    9564:	00000558 	.word	0x00000558
    9568:	00000558 	.word	0x00000558
    956c:	00000558 	.word	0x00000558
    9570:	00000558 	.word	0x00000558
    9574:	00000558 	.word	0x00000558
    9578:	00000558 	.word	0x00000558
    957c:	00000558 	.word	0x00000558
    9580:	00000558 	.word	0x00000558
    9584:	00000558 	.word	0x00000558
    9588:	00000558 	.word	0x00000558
    958c:	0000054c 	.word	0x0000054c
    9590:	00000558 	.word	0x00000558
    9594:	00000558 	.word	0x00000558
    9598:	00000558 	.word	0x00000558
    959c:	00000558 	.word	0x00000558
    95a0:	00000558 	.word	0x00000558
    95a4:	00000558 	.word	0x00000558
    95a8:	00000558 	.word	0x00000558
    95ac:	00000558 	.word	0x00000558
    95b0:	00000558 	.word	0x00000558
    95b4:	00000558 	.word	0x00000558
    95b8:	00000558 	.word	0x00000558
    95bc:	00000558 	.word	0x00000558
    95c0:	00000558 	.word	0x00000558
    95c4:	00000558 	.word	0x00000558
    95c8:	00000558 	.word	0x00000558
    95cc:	00000546 	.word	0x00000546
    95d0:	000004ee 	.word	0x000004ee
    95d4:	00000504 	.word	0x00000504
    95d8:	0000051a 	.word	0x0000051a
    95dc:	000004d4 	.word	0x000004d4
    95e0:	42000800 	.word	0x42000800
    95e4:	42000c00 	.word	0x42000c00
    95e8:	42001000 	.word	0x42001000
    95ec:	42001400 	.word	0x42001400
    95f0:	42001800 	.word	0x42001800
    95f4:	42001c00 	.word	0x42001c00
    95f8:	20626f62 	.word	0x20626f62
    95fc:	20736177 	.word	0x20736177
    9600:	6e756f66 	.word	0x6e756f66
    9604:	00000064 	.word	0x00000064
    9608:	204d5750 	.word	0x204d5750
    960c:	00006425 	.word	0x00006425
    9610:	6425203a 	.word	0x6425203a
    9614:	00000000 	.word	0x00000000
    9618:	31414846 	.word	0x31414846
    961c:	00000000 	.word	0x00000000
    9620:	30414846 	.word	0x30414846
    9624:	00000000 	.word	0x00000000
    9628:	20414b42 	.word	0x20414b42
    962c:	00000031 	.word	0x00000031
    9630:	20414b42 	.word	0x20414b42
    9634:	00000030 	.word	0x00000030
    9638:	204c4b42 	.word	0x204c4b42
    963c:	00000031 	.word	0x00000031
    9640:	204c4b42 	.word	0x204c4b42
    9644:	00000030 	.word	0x00000030
    9648:	20524b42 	.word	0x20524b42
    964c:	00000031 	.word	0x00000031
    9650:	20524b42 	.word	0x20524b42
    9654:	00000030 	.word	0x00000030
    9658:	314e5248 	.word	0x314e5248
    965c:	00003120 	.word	0x00003120
    9660:	314e5248 	.word	0x314e5248
    9664:	00003020 	.word	0x00003020
    9668:	324e5248 	.word	0x324e5248
    966c:	00003120 	.word	0x00003120
    9670:	324e5248 	.word	0x324e5248
    9674:	00003020 	.word	0x00003020
    9678:	334e5248 	.word	0x334e5248
    967c:	00003120 	.word	0x00003120
    9680:	334e5248 	.word	0x334e5248
    9684:	00003020 	.word	0x00003020
    9688:	344e5248 	.word	0x344e5248
    968c:	00003120 	.word	0x00003120
    9690:	344e5248 	.word	0x344e5248
    9694:	00003020 	.word	0x00003020
    9698:	30304253 	.word	0x30304253
    969c:	00003120 	.word	0x00003120
    96a0:	30304253 	.word	0x30304253
    96a4:	00003020 	.word	0x00003020
    96a8:	31304253 	.word	0x31304253
    96ac:	00003120 	.word	0x00003120
    96b0:	31304253 	.word	0x31304253
    96b4:	00003020 	.word	0x00003020
    96b8:	32304253 	.word	0x32304253
    96bc:	00003120 	.word	0x00003120
    96c0:	32304253 	.word	0x32304253
    96c4:	00003020 	.word	0x00003020
    96c8:	33304253 	.word	0x33304253
    96cc:	00003120 	.word	0x00003120
    96d0:	33304253 	.word	0x33304253
    96d4:	00003020 	.word	0x00003020
    96d8:	34304253 	.word	0x34304253
    96dc:	00003120 	.word	0x00003120
    96e0:	34304253 	.word	0x34304253
    96e4:	00003020 	.word	0x00003020
    96e8:	35304253 	.word	0x35304253
    96ec:	00003120 	.word	0x00003120
    96f0:	35304253 	.word	0x35304253
    96f4:	00003020 	.word	0x00003020
    96f8:	36304253 	.word	0x36304253
    96fc:	00003120 	.word	0x00003120
    9700:	36304253 	.word	0x36304253
    9704:	00003020 	.word	0x00003020
    9708:	37304253 	.word	0x37304253
    970c:	00003120 	.word	0x00003120
    9710:	37304253 	.word	0x37304253
    9714:	00003020 	.word	0x00003020
    9718:	38304253 	.word	0x38304253
    971c:	00003120 	.word	0x00003120
    9720:	38304253 	.word	0x38304253
    9724:	00003020 	.word	0x00003020
    9728:	39304253 	.word	0x39304253
    972c:	00003120 	.word	0x00003120
    9730:	39304253 	.word	0x39304253
    9734:	00003020 	.word	0x00003020
    9738:	30314253 	.word	0x30314253
    973c:	00003120 	.word	0x00003120
    9740:	30314253 	.word	0x30314253
    9744:	00003020 	.word	0x00003020
    9748:	20545250 	.word	0x20545250
    974c:	00000031 	.word	0x00000031
    9750:	20545250 	.word	0x20545250
    9754:	00000030 	.word	0x00000030
    9758:	20525457 	.word	0x20525457
    975c:	00000031 	.word	0x00000031
    9760:	20415453 	.word	0x20415453
    9764:	00000031 	.word	0x00000031
    9768:	20415453 	.word	0x20415453
    976c:	00000030 	.word	0x00000030
    9770:	2044454c 	.word	0x2044454c
    9774:	00000031 	.word	0x00000031
    9778:	2044454c 	.word	0x2044454c
    977c:	00000030 	.word	0x00000030
    9780:	204c4448 	.word	0x204c4448
    9784:	00000031 	.word	0x00000031
    9788:	204c4448 	.word	0x204c4448
    978c:	00000030 	.word	0x00000030
    9790:	41495242 	.word	0x41495242
    9794:	0031204e 	.word	0x0031204e
    9798:	41495242 	.word	0x41495242
    979c:	0030204e 	.word	0x0030204e
    97a0:	48534c46 	.word	0x48534c46
    97a4:	00312031 	.word	0x00312031
    97a8:	48534c46 	.word	0x48534c46
    97ac:	00302031 	.word	0x00302031
    97b0:	48534c46 	.word	0x48534c46
    97b4:	00312032 	.word	0x00312032
    97b8:	48534c46 	.word	0x48534c46
    97bc:	00302032 	.word	0x00302032
    97c0:	48534c46 	.word	0x48534c46
    97c4:	31204446 	.word	0x31204446
    97c8:	00000000 	.word	0x00000000
    97cc:	48534c46 	.word	0x48534c46
    97d0:	30204446 	.word	0x30204446
    97d4:	00000000 	.word	0x00000000
    97d8:	5254534d 	.word	0x5254534d
    97dc:	20545352 	.word	0x20545352
    97e0:	00003234 	.word	0x00003234
    97e4:	45534552 	.word	0x45534552
    97e8:	43412054 	.word	0x43412054
    97ec:	00000a4b 	.word	0x00000a4b
    97f0:	52524e4d 	.word	0x52524e4d
    97f4:	34205453 	.word	0x34205453
    97f8:	00000032 	.word	0x00000032
    97fc:	4f4e494d 	.word	0x4f4e494d
    9800:	45522052 	.word	0x45522052
    9804:	20544553 	.word	0x20544553
    9808:	0a4b4341 	.word	0x0a4b4341
    980c:	00000000 	.word	0x00000000
    9810:	4f4e494d 	.word	0x4f4e494d
    9814:	45522052 	.word	0x45522052
    9818:	20544553 	.word	0x20544553
    981c:	454e4f44 	.word	0x454e4f44
    9820:	0000000a 	.word	0x0000000a
    9824:	54545250 	.word	0x54545250
    9828:	30485352 	.word	0x30485352
    982c:	00000000 	.word	0x00000000
    9830:	54545250 	.word	0x54545250
    9834:	30485352 	.word	0x30485352
    9838:	00642520 	.word	0x00642520
    983c:	54545250 	.word	0x54545250
    9840:	31485352 	.word	0x31485352
    9844:	00000000 	.word	0x00000000
    9848:	54545250 	.word	0x54545250
    984c:	31485352 	.word	0x31485352
    9850:	00642520 	.word	0x00642520
    9854:	54545250 	.word	0x54545250
    9858:	32485352 	.word	0x32485352
    985c:	00000000 	.word	0x00000000
    9860:	54545250 	.word	0x54545250
    9864:	32485352 	.word	0x32485352
    9868:	00642520 	.word	0x00642520
    986c:	54545250 	.word	0x54545250
    9870:	33485352 	.word	0x33485352
    9874:	00000000 	.word	0x00000000
    9878:	54545250 	.word	0x54545250
    987c:	33485352 	.word	0x33485352
    9880:	00642520 	.word	0x00642520
    9884:	54545250 	.word	0x54545250
    9888:	34485352 	.word	0x34485352
    988c:	00000000 	.word	0x00000000
    9890:	54545250 	.word	0x54545250
    9894:	34485352 	.word	0x34485352
    9898:	00642520 	.word	0x00642520
    989c:	54545250 	.word	0x54545250
    98a0:	35485352 	.word	0x35485352
    98a4:	00000000 	.word	0x00000000
    98a8:	54545250 	.word	0x54545250
    98ac:	35485352 	.word	0x35485352
    98b0:	00642520 	.word	0x00642520
    98b4:	54545250 	.word	0x54545250
    98b8:	36485352 	.word	0x36485352
    98bc:	00000000 	.word	0x00000000
    98c0:	54545250 	.word	0x54545250
    98c4:	36485352 	.word	0x36485352
    98c8:	00642520 	.word	0x00642520
    98cc:	54545250 	.word	0x54545250
    98d0:	37485352 	.word	0x37485352
    98d4:	00000000 	.word	0x00000000
    98d8:	54545250 	.word	0x54545250
    98dc:	37485352 	.word	0x37485352
    98e0:	00642520 	.word	0x00642520
    98e4:	20564f43 	.word	0x20564f43
    98e8:	00000031 	.word	0x00000031
    98ec:	20564f43 	.word	0x20564f43
    98f0:	00000030 	.word	0x00000030
    98f4:	004b4341 	.word	0x004b4341
    98f8:	52444441 	.word	0x52444441
    98fc:	6425203a 	.word	0x6425203a
    9900:	203e2d20 	.word	0x203e2d20
    9904:	000a6425 	.word	0x000a6425
    9908:	3a525245 	.word	0x3a525245
    990c:	25642520 	.word	0x25642520
    9910:	25642564 	.word	0x25642564
    9914:	25642564 	.word	0x25642564
    9918:	25642564 	.word	0x25642564
    991c:	000a0d64 	.word	0x000a0d64
    9920:	0000327c 	.word	0x0000327c
    9924:	0000329a 	.word	0x0000329a
    9928:	000032c0 	.word	0x000032c0
    992c:	000032e6 	.word	0x000032e6
    9930:	0000330c 	.word	0x0000330c
    9934:	00003332 	.word	0x00003332
    9938:	00003358 	.word	0x00003358
    993c:	0000337e 	.word	0x0000337e
    9940:	000033a4 	.word	0x000033a4
    9944:	000033ca 	.word	0x000033ca
    9948:	000033f0 	.word	0x000033f0
    994c:	00003416 	.word	0x00003416
    9950:	00003448 	.word	0x00003448
    9954:	00003448 	.word	0x00003448
    9958:	00003448 	.word	0x00003448
    995c:	00003448 	.word	0x00003448
    9960:	00003448 	.word	0x00003448
    9964:	00003448 	.word	0x00003448
    9968:	00003448 	.word	0x00003448
    996c:	0000343c 	.word	0x0000343c
    9970:	00003484 	.word	0x00003484
    9974:	000034a2 	.word	0x000034a2
    9978:	000034bc 	.word	0x000034bc
    997c:	000034d6 	.word	0x000034d6
    9980:	000034f0 	.word	0x000034f0
    9984:	0000350a 	.word	0x0000350a
    9988:	00003524 	.word	0x00003524
    998c:	00003562 	.word	0x00003562
    9990:	000035b8 	.word	0x000035b8
    9994:	0000360e 	.word	0x0000360e
    9998:	00003664 	.word	0x00003664
    999c:	64343025 	.word	0x64343025
    99a0:	34302520 	.word	0x34302520
    99a4:	30252064 	.word	0x30252064
    99a8:	25206434 	.word	0x25206434
    99ac:	20643430 	.word	0x20643430
    99b0:	64343025 	.word	0x64343025
    99b4:	34302520 	.word	0x34302520
    99b8:	000a0d64 	.word	0x000a0d64
    99bc:	000052f6 	.word	0x000052f6
    99c0:	0000536e 	.word	0x0000536e
    99c4:	0000536e 	.word	0x0000536e
    99c8:	00005314 	.word	0x00005314
    99cc:	0000530e 	.word	0x0000530e
    99d0:	0000531a 	.word	0x0000531a
    99d4:	000052fc 	.word	0x000052fc
    99d8:	00005320 	.word	0x00005320
    99dc:	00005354 	.word	0x00005354
    99e0:	00005448 	.word	0x00005448
    99e4:	00005498 	.word	0x00005498
    99e8:	00005498 	.word	0x00005498
    99ec:	00005494 	.word	0x00005494
    99f0:	0000543a 	.word	0x0000543a
    99f4:	0000545a 	.word	0x0000545a
    99f8:	0000542a 	.word	0x0000542a
    99fc:	0000546c 	.word	0x0000546c
    9a00:	0000547e 	.word	0x0000547e
    9a04:	2d2d3c0a 	.word	0x2d2d3c0a
    9a08:	2d2d2d2d 	.word	0x2d2d2d2d
    9a0c:	2d2d2d2d 	.word	0x2d2d2d2d
    9a10:	2d2d2d2d 	.word	0x2d2d2d2d
    9a14:	2d2d2d2d 	.word	0x2d2d2d2d
    9a18:	0a3e2d2d 	.word	0x0a3e2d2d
    9a1c:	00000000 	.word	0x00000000
    9a20:	7473614d 	.word	0x7473614d
    9a24:	42207265 	.word	0x42207265
    9a28:	6472616f 	.word	0x6472616f
    9a2c:	61745320 	.word	0x61745320
    9a30:	64657472 	.word	0x64657472
    9a34:	0000000a 	.word	0x0000000a
    9a38:	54464f53 	.word	0x54464f53
    9a3c:	45524157 	.word	0x45524157
    9a40:	5245565f 	.word	0x5245565f
    9a44:	4e4f4953 	.word	0x4e4f4953
    9a48:	6425203a 	.word	0x6425203a
    9a4c:	00000a0d 	.word	0x00000a0d
    9a50:	2d2d2d3c 	.word	0x2d2d2d3c
    9a54:	2d2d2d2d 	.word	0x2d2d2d2d
    9a58:	2d2d2d2d 	.word	0x2d2d2d2d
    9a5c:	2d2d2d2d 	.word	0x2d2d2d2d
    9a60:	2d2d2d2d 	.word	0x2d2d2d2d
    9a64:	0a0a3e2d 	.word	0x0a0a3e2d
    9a68:	00000000 	.word	0x00000000
    9a6c:	00007124 	.word	0x00007124
    9a70:	00006ff2 	.word	0x00006ff2
    9a74:	000070f8 	.word	0x000070f8
    9a78:	00006fe8 	.word	0x00006fe8
    9a7c:	000070f8 	.word	0x000070f8
    9a80:	00007102 	.word	0x00007102
    9a84:	000070f8 	.word	0x000070f8
    9a88:	00006fe8 	.word	0x00006fe8
    9a8c:	00006ff2 	.word	0x00006ff2
    9a90:	00006ff2 	.word	0x00006ff2
    9a94:	00007102 	.word	0x00007102
    9a98:	00006fe8 	.word	0x00006fe8
    9a9c:	00006fde 	.word	0x00006fde
    9aa0:	00006fde 	.word	0x00006fde
    9aa4:	00006fde 	.word	0x00006fde
    9aa8:	00007354 	.word	0x00007354
    9aac:	00007750 	.word	0x00007750
    9ab0:	00007610 	.word	0x00007610
    9ab4:	00007610 	.word	0x00007610
    9ab8:	0000760e 	.word	0x0000760e
    9abc:	00007728 	.word	0x00007728
    9ac0:	00007728 	.word	0x00007728
    9ac4:	0000771a 	.word	0x0000771a
    9ac8:	0000760e 	.word	0x0000760e
    9acc:	00007728 	.word	0x00007728
    9ad0:	0000771a 	.word	0x0000771a
    9ad4:	00007728 	.word	0x00007728
    9ad8:	0000760e 	.word	0x0000760e
    9adc:	00007730 	.word	0x00007730
    9ae0:	00007730 	.word	0x00007730
    9ae4:	00007730 	.word	0x00007730
    9ae8:	00007930 	.word	0x00007930
    9aec:	0043      	.short	0x0043
    9aee:	2d23      	.short	0x2d23
    9af0:	00202b30 	.word	0x00202b30
    9af4:	004c6c68 	.word	0x004c6c68
    9af8:	45676665 	.word	0x45676665
    9afc:	4746      	.short	0x4746
    9afe:	00          	.byte	0x00
    9aff:	30          	.byte	0x30
    9b00:	34333231 	.word	0x34333231
    9b04:	38373635 	.word	0x38373635
    9b08:	43424139 	.word	0x43424139
    9b0c:	00464544 	.word	0x00464544
    9b10:	33323130 	.word	0x33323130
    9b14:	37363534 	.word	0x37363534
    9b18:	62613938 	.word	0x62613938
    9b1c:	66656463 	.word	0x66656463
    9b20:	00000000 	.word	0x00000000
    9b24:	00009b42 	.word	0x00009b42
    9b28:	00009b45 	.word	0x00009b45
    9b2c:	00009b48 	.word	0x00009b48
    9b30:	61462d41 	.word	0x61462d41
    9b34:	3938662d 	.word	0x3938662d
    9b38:	33323130 	.word	0x33323130
    9b3c:	37363534 	.word	0x37363534
    9b40:	2d2b005d 	.word	0x2d2b005d
    9b44:	00303000 	.word	0x00303000
    9b48:	5878      	.short	0x5878
	...

00009b4b <_ctype_>:
    9b4b:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    9b5b:	2020 2020 2020 2020 2020 2020 2020 2020                     
    9b6b:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    9b7b:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    9b8b:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    9b9b:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    9bab:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    9bbb:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    9bcb:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00009c4c <__sf_fake_stdin>:
	...

00009c6c <__sf_fake_stdout>:
	...

00009c8c <__sf_fake_stderr>:
	...

00009cac <_init>:
    9cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9cae:	46c0      	nop			; (mov r8, r8)
    9cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9cb2:	bc08      	pop	{r3}
    9cb4:	469e      	mov	lr, r3
    9cb6:	4770      	bx	lr

00009cb8 <__init_array_start>:
    9cb8:	000000dd 	.word	0x000000dd

00009cbc <_fini>:
    9cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9cbe:	46c0      	nop			; (mov r8, r8)
    9cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9cc2:	bc08      	pop	{r3}
    9cc4:	469e      	mov	lr, r3
    9cc6:	4770      	bx	lr

00009cc8 <__fini_array_start>:
    9cc8:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <test_bob>:
2000000c:	5750 004d                                   PWM.

20000010 <mcp23017_data>:
20000010:	0000 0000 0020 0000 0000 0000 0000 0000     .... ...........
20000020:	0001 0000 0021 0000 0000 0000 0000 0000     ....!...........
20000030:	0001 0000 0022 0000 0000 0000 0000 0000     ...."...........
20000040:	0001 0000 0023 0000 0000 0000 0000 0000     ....#...........
20000050:	0001 0000 0024 0000 0000 0000 0000 0000     ....$...........
20000060:	0001 0000 0025 0000 0000 0000 0000 0000     ....%...........
20000070:	0000 0000 0026 0000 0000 0000 0000 0000     ....&...........
20000080:	0000 0000 0027 0000 0000 0000 0000 0000     ....'...........

20000090 <duty_cycle.13664>:
20000090:	010a                                             .

20000091 <g_interrupt_enabled>:
20000091:	0001 0000                                        ...

20000094 <impure_data>:
20000094:	0000 0000 9c4c 0000 9c6c 0000 9c8c 0000     ....L...l.......
	...
200000b4:	9aec 0000 0000 0000 0000 0000 0000 0000     ................
	...

200000f4 <_impure_ptr>:
200000f4:	0094 2000                                   ... 

200000f8 <__ctype_ptr__>:
200000f8:	9b4b 0000                                   K...
