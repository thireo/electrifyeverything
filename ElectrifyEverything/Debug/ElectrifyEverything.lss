
ElectrifyEverything.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009d54  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00009d54  00009d54  00019d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000264  20000000  00009d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000027c  20000264  00009fc0  00020264  2**2
                  ALLOC
  4 .stack        00002000  200004e0  0000a23c  00020264  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0004a95a  00000000  00000000  000202e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000523b  00000000  00000000  0006ac3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003806  00000000  00000000  0006fe7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ac8  00000000  00000000  00073680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000918  00000000  00000000  00074148  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001e4ad  00000000  00000000  00074a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001508f  00000000  00000000  00092f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008abc1  00000000  00000000  000a7f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002d00  00000000  00000000  00132b60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 24 00 20 b5 5d 00 00 ad 5e 00 00 ad 5e 00 00     .$. .]...^...^..
	...
      2c:	ad 5e 00 00 00 00 00 00 00 00 00 00 ad 5e 00 00     .^...........^..
      3c:	ad 5e 00 00 ad 5e 00 00 ad 5e 00 00 59 1d 00 00     .^...^...^..Y...
      4c:	ad 5e 00 00 25 0a 00 00 ad 5e 00 00 ad 5e 00 00     .^..%....^...^..
      5c:	ad 5e 00 00 ad 5e 00 00 ad 5e 00 00 ad 5e 00 00     .^...^...^...^..
      6c:	7d 20 00 00 ad 5e 00 00 ad 5e 00 00 ad 5e 00 00     } ...^...^...^..
      7c:	ad 5e 00 00 ad 5e 00 00 ad 5e 00 00 8d 49 00 00     .^...^...^...I..
      8c:	ad 5e 00 00 ad 5e 00 00 00 00 00 00 00 00 00 00     .^...^..........
      9c:	ad 5e 00 00 ad 5e 00 00 ad 5e 00 00 ad 5e 00 00     .^...^...^...^..
      ac:	ad 5e 00 00 00 00 00 00                             .^......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000264 	.word	0x20000264
      d4:	00000000 	.word	0x00000000
      d8:	00009d5c 	.word	0x00009d5c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000268 	.word	0x20000268
     108:	00009d5c 	.word	0x00009d5c
     10c:	00009d5c 	.word	0x00009d5c
     110:	00000000 	.word	0x00000000

00000114 <wdt_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void wdt_get_config_defaults(
		struct wdt_conf *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
     122:	687b      	ldr	r3, [r7, #4]
     124:	2201      	movs	r2, #1
     126:	705a      	strb	r2, [r3, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21) && !(SAMR30)
	config->clock_source         = GCLK_GENERATOR_4;
     128:	687b      	ldr	r3, [r7, #4]
     12a:	2204      	movs	r2, #4
     12c:	709a      	strb	r2, [r3, #2]
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
     12e:	687b      	ldr	r3, [r7, #4]
     130:	220c      	movs	r2, #12
     132:	70da      	strb	r2, [r3, #3]
	config->window_period        = WDT_PERIOD_NONE;
     134:	687b      	ldr	r3, [r7, #4]
     136:	2200      	movs	r2, #0
     138:	711a      	strb	r2, [r3, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
     13a:	687b      	ldr	r3, [r7, #4]
     13c:	2200      	movs	r2, #0
     13e:	715a      	strb	r2, [r3, #5]
}
     140:	46c0      	nop			; (mov r8, r8)
     142:	46bd      	mov	sp, r7
     144:	b002      	add	sp, #8
     146:	bd80      	pop	{r7, pc}

00000148 <wdt_init>:
 *  Author: Andreas
 */ 
#include "wdt.h"

void wdt_init()
{
     148:	b580      	push	{r7, lr}
     14a:	b082      	sub	sp, #8
     14c:	af00      	add	r7, sp, #0
	struct wdt_conf config_wdt;
	wdt_get_config_defaults(&config_wdt);
     14e:	003b      	movs	r3, r7
     150:	0018      	movs	r0, r3
     152:	4b09      	ldr	r3, [pc, #36]	; (178 <wdt_init+0x30>)
     154:	4798      	blx	r3
	
	config_wdt.always_on = false;
     156:	003b      	movs	r3, r7
     158:	2200      	movs	r2, #0
     15a:	701a      	strb	r2, [r3, #0]
	config_wdt.timeout_period = WDT_PERIOD_4096CLK;
     15c:	003b      	movs	r3, r7
     15e:	220a      	movs	r2, #10
     160:	70da      	strb	r2, [r3, #3]
	config_wdt.early_warning_period = WDT_PERIOD_2048CLK;
     162:	003b      	movs	r3, r7
     164:	2209      	movs	r2, #9
     166:	715a      	strb	r2, [r3, #5]
	
	wdt_set_config(&config_wdt);
     168:	003b      	movs	r3, r7
     16a:	0018      	movs	r0, r3
     16c:	4b03      	ldr	r3, [pc, #12]	; (17c <wdt_init+0x34>)
     16e:	4798      	blx	r3
	//wdt_init_cb();
}
     170:	46c0      	nop			; (mov r8, r8)
     172:	46bd      	mov	sp, r7
     174:	b002      	add	sp, #8
     176:	bd80      	pop	{r7, pc}
     178:	00000115 	.word	0x00000115
     17c:	00001bc5 	.word	0x00001bc5

00000180 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
     180:	b580      	push	{r7, lr}
     182:	af00      	add	r7, sp, #0
}
     184:	46c0      	nop			; (mov r8, r8)
     186:	46bd      	mov	sp, r7
     188:	bd80      	pop	{r7, pc}

0000018a <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     18a:	b580      	push	{r7, lr}
     18c:	b082      	sub	sp, #8
     18e:	af00      	add	r7, sp, #0
     190:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     192:	687b      	ldr	r3, [r7, #4]
     194:	2200      	movs	r2, #0
     196:	701a      	strb	r2, [r3, #0]
}
     198:	46c0      	nop			; (mov r8, r8)
     19a:	46bd      	mov	sp, r7
     19c:	b002      	add	sp, #8
     19e:	bd80      	pop	{r7, pc}

000001a0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	0002      	movs	r2, r0
     1a8:	6039      	str	r1, [r7, #0]
     1aa:	1dfb      	adds	r3, r7, #7
     1ac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     1ae:	1dfb      	adds	r3, r7, #7
     1b0:	781b      	ldrb	r3, [r3, #0]
     1b2:	2b01      	cmp	r3, #1
     1b4:	d00a      	beq.n	1cc <system_apb_clock_set_mask+0x2c>
     1b6:	2b02      	cmp	r3, #2
     1b8:	d00f      	beq.n	1da <system_apb_clock_set_mask+0x3a>
     1ba:	2b00      	cmp	r3, #0
     1bc:	d114      	bne.n	1e8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <system_apb_clock_set_mask+0x58>)
     1c0:	4a0d      	ldr	r2, [pc, #52]	; (1f8 <system_apb_clock_set_mask+0x58>)
     1c2:	6991      	ldr	r1, [r2, #24]
     1c4:	683a      	ldr	r2, [r7, #0]
     1c6:	430a      	orrs	r2, r1
     1c8:	619a      	str	r2, [r3, #24]
			break;
     1ca:	e00f      	b.n	1ec <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     1cc:	4b0a      	ldr	r3, [pc, #40]	; (1f8 <system_apb_clock_set_mask+0x58>)
     1ce:	4a0a      	ldr	r2, [pc, #40]	; (1f8 <system_apb_clock_set_mask+0x58>)
     1d0:	69d1      	ldr	r1, [r2, #28]
     1d2:	683a      	ldr	r2, [r7, #0]
     1d4:	430a      	orrs	r2, r1
     1d6:	61da      	str	r2, [r3, #28]
			break;
     1d8:	e008      	b.n	1ec <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1da:	4b07      	ldr	r3, [pc, #28]	; (1f8 <system_apb_clock_set_mask+0x58>)
     1dc:	4a06      	ldr	r2, [pc, #24]	; (1f8 <system_apb_clock_set_mask+0x58>)
     1de:	6a11      	ldr	r1, [r2, #32]
     1e0:	683a      	ldr	r2, [r7, #0]
     1e2:	430a      	orrs	r2, r1
     1e4:	621a      	str	r2, [r3, #32]
			break;
     1e6:	e001      	b.n	1ec <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     1e8:	2317      	movs	r3, #23
     1ea:	e000      	b.n	1ee <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     1ec:	2300      	movs	r3, #0
}
     1ee:	0018      	movs	r0, r3
     1f0:	46bd      	mov	sp, r7
     1f2:	b002      	add	sp, #8
     1f4:	bd80      	pop	{r7, pc}
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	40000400 	.word	0x40000400

000001fc <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b082      	sub	sp, #8
     200:	af00      	add	r7, sp, #0
     202:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     204:	687b      	ldr	r3, [r7, #4]
     206:	2280      	movs	r2, #128	; 0x80
     208:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     20a:	687b      	ldr	r3, [r7, #4]
     20c:	2200      	movs	r2, #0
     20e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     210:	687b      	ldr	r3, [r7, #4]
     212:	2201      	movs	r2, #1
     214:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     216:	687b      	ldr	r3, [r7, #4]
     218:	2200      	movs	r2, #0
     21a:	70da      	strb	r2, [r3, #3]
}
     21c:	46c0      	nop			; (mov r8, r8)
     21e:	46bd      	mov	sp, r7
     220:	b002      	add	sp, #8
     222:	bd80      	pop	{r7, pc}

00000224 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     224:	b580      	push	{r7, lr}
     226:	b082      	sub	sp, #8
     228:	af00      	add	r7, sp, #0
     22a:	0002      	movs	r2, r0
     22c:	1dfb      	adds	r3, r7, #7
     22e:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     230:	1dfb      	adds	r3, r7, #7
     232:	781b      	ldrb	r3, [r3, #0]
     234:	2b00      	cmp	r3, #0
     236:	d002      	beq.n	23e <system_voltage_reference_enable+0x1a>
     238:	2b01      	cmp	r3, #1
     23a:	d007      	beq.n	24c <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
     23c:	e00d      	b.n	25a <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     23e:	4b08      	ldr	r3, [pc, #32]	; (260 <system_voltage_reference_enable+0x3c>)
     240:	4a07      	ldr	r2, [pc, #28]	; (260 <system_voltage_reference_enable+0x3c>)
     242:	6c12      	ldr	r2, [r2, #64]	; 0x40
     244:	2102      	movs	r1, #2
     246:	430a      	orrs	r2, r1
     248:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     24a:	e006      	b.n	25a <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     24c:	4b04      	ldr	r3, [pc, #16]	; (260 <system_voltage_reference_enable+0x3c>)
     24e:	4a04      	ldr	r2, [pc, #16]	; (260 <system_voltage_reference_enable+0x3c>)
     250:	6c12      	ldr	r2, [r2, #64]	; 0x40
     252:	2104      	movs	r1, #4
     254:	430a      	orrs	r2, r1
     256:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     258:	46c0      	nop			; (mov r8, r8)
	}
}
     25a:	46bd      	mov	sp, r7
     25c:	b002      	add	sp, #8
     25e:	bd80      	pop	{r7, pc}
     260:	40000800 	.word	0x40000800

00000264 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     264:	b580      	push	{r7, lr}
     266:	b084      	sub	sp, #16
     268:	af00      	add	r7, sp, #0
     26a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     26c:	687b      	ldr	r3, [r7, #4]
     26e:	681b      	ldr	r3, [r3, #0]
     270:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     272:	68fb      	ldr	r3, [r7, #12]
     274:	7e5b      	ldrb	r3, [r3, #25]
     276:	b2db      	uxtb	r3, r3
     278:	b25b      	sxtb	r3, r3
     27a:	2b00      	cmp	r3, #0
     27c:	da01      	bge.n	282 <adc_is_syncing+0x1e>
		return true;
     27e:	2301      	movs	r3, #1
     280:	e000      	b.n	284 <adc_is_syncing+0x20>
	}

	return false;
     282:	2300      	movs	r3, #0
}
     284:	0018      	movs	r0, r3
     286:	46bd      	mov	sp, r7
     288:	b004      	add	sp, #16
     28a:	bd80      	pop	{r7, pc}

0000028c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     28c:	b580      	push	{r7, lr}
     28e:	b082      	sub	sp, #8
     290:	af00      	add	r7, sp, #0
     292:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     294:	687b      	ldr	r3, [r7, #4]
     296:	2200      	movs	r2, #0
     298:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     29a:	687b      	ldr	r3, [r7, #4]
     29c:	2200      	movs	r2, #0
     29e:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	2200      	movs	r2, #0
     2a4:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     2a6:	687b      	ldr	r3, [r7, #4]
     2a8:	2200      	movs	r2, #0
     2aa:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     2ac:	687b      	ldr	r3, [r7, #4]
     2ae:	2200      	movs	r2, #0
     2b0:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     2b2:	687b      	ldr	r3, [r7, #4]
     2b4:	2200      	movs	r2, #0
     2b6:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	2200      	movs	r2, #0
     2bc:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     2be:	687b      	ldr	r3, [r7, #4]
     2c0:	2200      	movs	r2, #0
     2c2:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     2c4:	687b      	ldr	r3, [r7, #4]
     2c6:	2200      	movs	r2, #0
     2c8:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     2ca:	687b      	ldr	r3, [r7, #4]
     2cc:	22c0      	movs	r2, #192	; 0xc0
     2ce:	0152      	lsls	r2, r2, #5
     2d0:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     2d2:	687b      	ldr	r3, [r7, #4]
     2d4:	2200      	movs	r2, #0
     2d6:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	2200      	movs	r2, #0
     2dc:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
     2de:	687b      	ldr	r3, [r7, #4]
     2e0:	2200      	movs	r2, #0
     2e2:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
     2e4:	687b      	ldr	r3, [r7, #4]
     2e6:	2200      	movs	r2, #0
     2e8:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
     2ea:	687b      	ldr	r3, [r7, #4]
     2ec:	2200      	movs	r2, #0
     2ee:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     2f0:	687b      	ldr	r3, [r7, #4]
     2f2:	222a      	movs	r2, #42	; 0x2a
     2f4:	2100      	movs	r1, #0
     2f6:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     2f8:	687b      	ldr	r3, [r7, #4]
     2fa:	2200      	movs	r2, #0
     2fc:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
     2fe:	687b      	ldr	r3, [r7, #4]
     300:	2200      	movs	r2, #0
     302:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
     304:	687b      	ldr	r3, [r7, #4]
     306:	2224      	movs	r2, #36	; 0x24
     308:	2100      	movs	r1, #0
     30a:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     30c:	687b      	ldr	r3, [r7, #4]
     30e:	2200      	movs	r2, #0
     310:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     312:	687b      	ldr	r3, [r7, #4]
     314:	2200      	movs	r2, #0
     316:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     318:	687b      	ldr	r3, [r7, #4]
     31a:	2200      	movs	r2, #0
     31c:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
     31e:	687b      	ldr	r3, [r7, #4]
     320:	222b      	movs	r2, #43	; 0x2b
     322:	2100      	movs	r1, #0
     324:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
     326:	687b      	ldr	r3, [r7, #4]
     328:	222c      	movs	r2, #44	; 0x2c
     32a:	2100      	movs	r1, #0
     32c:	5499      	strb	r1, [r3, r2]
}
     32e:	46c0      	nop			; (mov r8, r8)
     330:	46bd      	mov	sp, r7
     332:	b002      	add	sp, #8
     334:	bd80      	pop	{r7, pc}
	...

00000338 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     338:	b580      	push	{r7, lr}
     33a:	b098      	sub	sp, #96	; 0x60
     33c:	af00      	add	r7, sp, #0
     33e:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     340:	230c      	movs	r3, #12
     342:	18fa      	adds	r2, r7, r3
     344:	4b15      	ldr	r3, [pc, #84]	; (39c <_adc_configure_ain_pin+0x64>)
     346:	0010      	movs	r0, r2
     348:	0019      	movs	r1, r3
     34a:	2350      	movs	r3, #80	; 0x50
     34c:	001a      	movs	r2, r3
     34e:	4b14      	ldr	r3, [pc, #80]	; (3a0 <_adc_configure_ain_pin+0x68>)
     350:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     352:	4b14      	ldr	r3, [pc, #80]	; (3a4 <_adc_configure_ain_pin+0x6c>)
     354:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
     356:	687b      	ldr	r3, [r7, #4]
     358:	2b13      	cmp	r3, #19
     35a:	d81a      	bhi.n	392 <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     35c:	230c      	movs	r3, #12
     35e:	18fb      	adds	r3, r7, r3
     360:	687a      	ldr	r2, [r7, #4]
     362:	0092      	lsls	r2, r2, #2
     364:	58d3      	ldr	r3, [r2, r3]
     366:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     368:	2308      	movs	r3, #8
     36a:	18fb      	adds	r3, r7, r3
     36c:	0018      	movs	r0, r3
     36e:	4b0e      	ldr	r3, [pc, #56]	; (3a8 <_adc_configure_ain_pin+0x70>)
     370:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     372:	2308      	movs	r3, #8
     374:	18fb      	adds	r3, r7, r3
     376:	2200      	movs	r2, #0
     378:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     37a:	2308      	movs	r3, #8
     37c:	18fb      	adds	r3, r7, r3
     37e:	2201      	movs	r2, #1
     380:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     384:	b2db      	uxtb	r3, r3
     386:	2208      	movs	r2, #8
     388:	18ba      	adds	r2, r7, r2
     38a:	0011      	movs	r1, r2
     38c:	0018      	movs	r0, r3
     38e:	4b07      	ldr	r3, [pc, #28]	; (3ac <_adc_configure_ain_pin+0x74>)
     390:	4798      	blx	r3
	}
}
     392:	46c0      	nop			; (mov r8, r8)
     394:	46bd      	mov	sp, r7
     396:	b018      	add	sp, #96	; 0x60
     398:	bd80      	pop	{r7, pc}
     39a:	46c0      	nop			; (mov r8, r8)
     39c:	00009520 	.word	0x00009520
     3a0:	00008231 	.word	0x00008231
     3a4:	0000ffff 	.word	0x0000ffff
     3a8:	000001fd 	.word	0x000001fd
     3ac:	00005d2d 	.word	0x00005d2d

000003b0 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b2:	b089      	sub	sp, #36	; 0x24
     3b4:	af00      	add	r7, sp, #0
     3b6:	6078      	str	r0, [r7, #4]
     3b8:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
     3ba:	231f      	movs	r3, #31
     3bc:	18fb      	adds	r3, r7, r3
     3be:	2200      	movs	r2, #0
     3c0:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     3c2:	2310      	movs	r3, #16
     3c4:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3c6:	2317      	movs	r3, #23
     3c8:	18fb      	adds	r3, r7, r3
     3ca:	2200      	movs	r2, #0
     3cc:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     3ce:	687b      	ldr	r3, [r7, #4]
     3d0:	681b      	ldr	r3, [r3, #0]
     3d2:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     3d4:	230c      	movs	r3, #12
     3d6:	18fb      	adds	r3, r7, r3
     3d8:	0018      	movs	r0, r3
     3da:	4bce      	ldr	r3, [pc, #824]	; (714 <_adc_set_config+0x364>)
     3dc:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     3de:	683b      	ldr	r3, [r7, #0]
     3e0:	781a      	ldrb	r2, [r3, #0]
     3e2:	230c      	movs	r3, #12
     3e4:	18fb      	adds	r3, r7, r3
     3e6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     3e8:	230c      	movs	r3, #12
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	0019      	movs	r1, r3
     3ee:	201e      	movs	r0, #30
     3f0:	4bc9      	ldr	r3, [pc, #804]	; (718 <_adc_set_config+0x368>)
     3f2:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     3f4:	201e      	movs	r0, #30
     3f6:	4bc9      	ldr	r3, [pc, #804]	; (71c <_adc_set_config+0x36c>)
     3f8:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     3fa:	683b      	ldr	r3, [r7, #0]
     3fc:	222c      	movs	r2, #44	; 0x2c
     3fe:	5c9b      	ldrb	r3, [r3, r2]
     400:	2b00      	cmp	r3, #0
     402:	d040      	beq.n	486 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
     404:	2316      	movs	r3, #22
     406:	18fb      	adds	r3, r7, r3
     408:	683a      	ldr	r2, [r7, #0]
     40a:	212b      	movs	r1, #43	; 0x2b
     40c:	5c52      	ldrb	r2, [r2, r1]
     40e:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     410:	683b      	ldr	r3, [r7, #0]
     412:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
     414:	2315      	movs	r3, #21
     416:	18fb      	adds	r3, r7, r3
     418:	2216      	movs	r2, #22
     41a:	18ba      	adds	r2, r7, r2
     41c:	7812      	ldrb	r2, [r2, #0]
     41e:	188a      	adds	r2, r1, r2
     420:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
     422:	683b      	ldr	r3, [r7, #0]
     424:	222c      	movs	r2, #44	; 0x2c
     426:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
     428:	230f      	movs	r3, #15
     42a:	18fb      	adds	r3, r7, r3
     42c:	2215      	movs	r2, #21
     42e:	18ba      	adds	r2, r7, r2
     430:	7812      	ldrb	r2, [r2, #0]
     432:	188a      	adds	r2, r1, r2
     434:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
     436:	e018      	b.n	46a <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     438:	2316      	movs	r3, #22
     43a:	18fb      	adds	r3, r7, r3
     43c:	781b      	ldrb	r3, [r3, #0]
     43e:	220f      	movs	r2, #15
     440:	4013      	ands	r3, r2
     442:	683a      	ldr	r2, [r7, #0]
     444:	7b12      	ldrb	r2, [r2, #12]
     446:	189b      	adds	r3, r3, r2
     448:	0018      	movs	r0, r3
     44a:	4bb5      	ldr	r3, [pc, #724]	; (720 <_adc_set_config+0x370>)
     44c:	4798      	blx	r3
			start_pin++;
     44e:	2315      	movs	r3, #21
     450:	18fb      	adds	r3, r7, r3
     452:	781a      	ldrb	r2, [r3, #0]
     454:	2315      	movs	r3, #21
     456:	18fb      	adds	r3, r7, r3
     458:	3201      	adds	r2, #1
     45a:	701a      	strb	r2, [r3, #0]
			offset++;
     45c:	2316      	movs	r3, #22
     45e:	18fb      	adds	r3, r7, r3
     460:	781a      	ldrb	r2, [r3, #0]
     462:	2316      	movs	r3, #22
     464:	18fb      	adds	r3, r7, r3
     466:	3201      	adds	r2, #1
     468:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
     46a:	2315      	movs	r3, #21
     46c:	18fa      	adds	r2, r7, r3
     46e:	230f      	movs	r3, #15
     470:	18fb      	adds	r3, r7, r3
     472:	7812      	ldrb	r2, [r2, #0]
     474:	781b      	ldrb	r3, [r3, #0]
     476:	429a      	cmp	r2, r3
     478:	d3de      	bcc.n	438 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
     47a:	683b      	ldr	r3, [r7, #0]
     47c:	89db      	ldrh	r3, [r3, #14]
     47e:	0018      	movs	r0, r3
     480:	4ba7      	ldr	r3, [pc, #668]	; (720 <_adc_set_config+0x370>)
     482:	4798      	blx	r3
     484:	e009      	b.n	49a <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
     486:	683b      	ldr	r3, [r7, #0]
     488:	7b1b      	ldrb	r3, [r3, #12]
     48a:	0018      	movs	r0, r3
     48c:	4ba4      	ldr	r3, [pc, #656]	; (720 <_adc_set_config+0x370>)
     48e:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
     490:	683b      	ldr	r3, [r7, #0]
     492:	89db      	ldrh	r3, [r3, #14]
     494:	0018      	movs	r0, r3
     496:	4ba2      	ldr	r3, [pc, #648]	; (720 <_adc_set_config+0x370>)
     498:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     49a:	683b      	ldr	r3, [r7, #0]
     49c:	7d5b      	ldrb	r3, [r3, #21]
     49e:	009b      	lsls	r3, r3, #2
     4a0:	b2da      	uxtb	r2, r3
     4a2:	693b      	ldr	r3, [r7, #16]
     4a4:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     4a6:	683b      	ldr	r3, [r7, #0]
     4a8:	7d9b      	ldrb	r3, [r3, #22]
     4aa:	01db      	lsls	r3, r3, #7
     4ac:	b25a      	sxtb	r2, r3
			(config->reference);
     4ae:	683b      	ldr	r3, [r7, #0]
     4b0:	785b      	ldrb	r3, [r3, #1]
     4b2:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     4b4:	4313      	orrs	r3, r2
     4b6:	b25b      	sxtb	r3, r3
     4b8:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
     4ba:	693b      	ldr	r3, [r7, #16]
     4bc:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     4be:	683b      	ldr	r3, [r7, #0]
     4c0:	791b      	ldrb	r3, [r3, #4]
     4c2:	2b34      	cmp	r3, #52	; 0x34
     4c4:	d846      	bhi.n	554 <_adc_set_config+0x1a4>
     4c6:	009a      	lsls	r2, r3, #2
     4c8:	4b96      	ldr	r3, [pc, #600]	; (724 <_adc_set_config+0x374>)
     4ca:	18d3      	adds	r3, r2, r3
     4cc:	681b      	ldr	r3, [r3, #0]
     4ce:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     4d0:	231f      	movs	r3, #31
     4d2:	18fb      	adds	r3, r7, r3
     4d4:	683a      	ldr	r2, [r7, #0]
     4d6:	7c52      	ldrb	r2, [r2, #17]
     4d8:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     4da:	2317      	movs	r3, #23
     4dc:	18fb      	adds	r3, r7, r3
     4de:	683a      	ldr	r2, [r7, #0]
     4e0:	7c12      	ldrb	r2, [r2, #16]
     4e2:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4e4:	2310      	movs	r3, #16
     4e6:	61bb      	str	r3, [r7, #24]
		break;
     4e8:	e036      	b.n	558 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     4ea:	231f      	movs	r3, #31
     4ec:	18fb      	adds	r3, r7, r3
     4ee:	2201      	movs	r2, #1
     4f0:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     4f2:	2317      	movs	r3, #23
     4f4:	18fb      	adds	r3, r7, r3
     4f6:	2202      	movs	r2, #2
     4f8:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4fa:	2310      	movs	r3, #16
     4fc:	61bb      	str	r3, [r7, #24]
		break;
     4fe:	e02b      	b.n	558 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     500:	231f      	movs	r3, #31
     502:	18fb      	adds	r3, r7, r3
     504:	2202      	movs	r2, #2
     506:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     508:	2317      	movs	r3, #23
     50a:	18fb      	adds	r3, r7, r3
     50c:	2204      	movs	r2, #4
     50e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     510:	2310      	movs	r3, #16
     512:	61bb      	str	r3, [r7, #24]
		break;
     514:	e020      	b.n	558 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     516:	231f      	movs	r3, #31
     518:	18fb      	adds	r3, r7, r3
     51a:	2201      	movs	r2, #1
     51c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     51e:	2317      	movs	r3, #23
     520:	18fb      	adds	r3, r7, r3
     522:	2206      	movs	r2, #6
     524:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     526:	2310      	movs	r3, #16
     528:	61bb      	str	r3, [r7, #24]
		break;
     52a:	e015      	b.n	558 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     52c:	231f      	movs	r3, #31
     52e:	18fb      	adds	r3, r7, r3
     530:	2200      	movs	r2, #0
     532:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     534:	2317      	movs	r3, #23
     536:	18fb      	adds	r3, r7, r3
     538:	2208      	movs	r2, #8
     53a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     53c:	2310      	movs	r3, #16
     53e:	61bb      	str	r3, [r7, #24]
		break;
     540:	e00a      	b.n	558 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     542:	2330      	movs	r3, #48	; 0x30
     544:	61bb      	str	r3, [r7, #24]
		break;
     546:	e007      	b.n	558 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     548:	2320      	movs	r3, #32
     54a:	61bb      	str	r3, [r7, #24]
		break;
     54c:	e004      	b.n	558 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     54e:	2300      	movs	r3, #0
     550:	61bb      	str	r3, [r7, #24]
		break;
     552:	e001      	b.n	558 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     554:	2317      	movs	r3, #23
     556:	e1ae      	b.n	8b6 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     558:	231f      	movs	r3, #31
     55a:	18fb      	adds	r3, r7, r3
     55c:	781b      	ldrb	r3, [r3, #0]
     55e:	011b      	lsls	r3, r3, #4
     560:	b2db      	uxtb	r3, r3
     562:	2270      	movs	r2, #112	; 0x70
     564:	4013      	ands	r3, r2
     566:	b2da      	uxtb	r2, r3
     568:	2317      	movs	r3, #23
     56a:	18fb      	adds	r3, r7, r3
     56c:	781b      	ldrb	r3, [r3, #0]
     56e:	4313      	orrs	r3, r2
     570:	b2da      	uxtb	r2, r3
     572:	693b      	ldr	r3, [r7, #16]
     574:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     576:	683b      	ldr	r3, [r7, #0]
     578:	7ddb      	ldrb	r3, [r3, #23]
     57a:	2b3f      	cmp	r3, #63	; 0x3f
     57c:	d901      	bls.n	582 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
     57e:	2317      	movs	r3, #23
     580:	e199      	b.n	8b6 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
     582:	683b      	ldr	r3, [r7, #0]
     584:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
     586:	693b      	ldr	r3, [r7, #16]
     588:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	687b      	ldr	r3, [r7, #4]
     58e:	0018      	movs	r0, r3
     590:	4b65      	ldr	r3, [pc, #404]	; (728 <_adc_set_config+0x378>)
     592:	4798      	blx	r3
     594:	1e03      	subs	r3, r0, #0
     596:	d1f9      	bne.n	58c <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
     598:	683b      	ldr	r3, [r7, #0]
     59a:	885a      	ldrh	r2, [r3, #2]
     59c:	69bb      	ldr	r3, [r7, #24]
     59e:	b29b      	uxth	r3, r3
     5a0:	4313      	orrs	r3, r2
     5a2:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     5a4:	683b      	ldr	r3, [r7, #0]
     5a6:	2124      	movs	r1, #36	; 0x24
     5a8:	5c5b      	ldrb	r3, [r3, r1]
     5aa:	b29b      	uxth	r3, r3
     5ac:	00db      	lsls	r3, r3, #3
     5ae:	b29b      	uxth	r3, r3
			resolution |
     5b0:	4313      	orrs	r3, r2
     5b2:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     5b4:	683b      	ldr	r3, [r7, #0]
     5b6:	7d1b      	ldrb	r3, [r3, #20]
     5b8:	b29b      	uxth	r3, r3
     5ba:	009b      	lsls	r3, r3, #2
     5bc:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     5be:	4313      	orrs	r3, r2
     5c0:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     5c2:	683b      	ldr	r3, [r7, #0]
     5c4:	7c9b      	ldrb	r3, [r3, #18]
     5c6:	b29b      	uxth	r3, r3
     5c8:	18db      	adds	r3, r3, r3
     5ca:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     5cc:	4313      	orrs	r3, r2
     5ce:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     5d0:	683b      	ldr	r3, [r7, #0]
     5d2:	7cdb      	ldrb	r3, [r3, #19]
     5d4:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     5d6:	4313      	orrs	r3, r2
     5d8:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
     5da:	693b      	ldr	r3, [r7, #16]
     5dc:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     5de:	683b      	ldr	r3, [r7, #0]
     5e0:	7e1b      	ldrb	r3, [r3, #24]
     5e2:	2b00      	cmp	r3, #0
     5e4:	d100      	bne.n	5e8 <_adc_set_config+0x238>
     5e6:	e0c4      	b.n	772 <_adc_set_config+0x3c2>
		switch (resolution) {
     5e8:	69bb      	ldr	r3, [r7, #24]
     5ea:	2b10      	cmp	r3, #16
     5ec:	d100      	bne.n	5f0 <_adc_set_config+0x240>
     5ee:	e076      	b.n	6de <_adc_set_config+0x32e>
     5f0:	d802      	bhi.n	5f8 <_adc_set_config+0x248>
     5f2:	2b00      	cmp	r3, #0
     5f4:	d04d      	beq.n	692 <_adc_set_config+0x2e2>
     5f6:	e0bc      	b.n	772 <_adc_set_config+0x3c2>
     5f8:	2b20      	cmp	r3, #32
     5fa:	d023      	beq.n	644 <_adc_set_config+0x294>
     5fc:	2b30      	cmp	r3, #48	; 0x30
     5fe:	d000      	beq.n	602 <_adc_set_config+0x252>
     600:	e0b7      	b.n	772 <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     602:	683b      	ldr	r3, [r7, #0]
     604:	7cdb      	ldrb	r3, [r3, #19]
     606:	2b00      	cmp	r3, #0
     608:	d011      	beq.n	62e <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
     60a:	683b      	ldr	r3, [r7, #0]
     60c:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     60e:	2b7f      	cmp	r3, #127	; 0x7f
     610:	dc0b      	bgt.n	62a <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
     612:	683b      	ldr	r3, [r7, #0]
     614:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
     616:	3380      	adds	r3, #128	; 0x80
     618:	db07      	blt.n	62a <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
     61a:	683b      	ldr	r3, [r7, #0]
     61c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
     61e:	2b7f      	cmp	r3, #127	; 0x7f
     620:	dc03      	bgt.n	62a <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
     622:	683b      	ldr	r3, [r7, #0]
     624:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
     626:	3380      	adds	r3, #128	; 0x80
     628:	da01      	bge.n	62e <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     62a:	2317      	movs	r3, #23
     62c:	e143      	b.n	8b6 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
     62e:	683b      	ldr	r3, [r7, #0]
     630:	69db      	ldr	r3, [r3, #28]
     632:	2bff      	cmp	r3, #255	; 0xff
     634:	dc04      	bgt.n	640 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
     636:	683b      	ldr	r3, [r7, #0]
     638:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
     63a:	2bff      	cmp	r3, #255	; 0xff
     63c:	dc00      	bgt.n	640 <_adc_set_config+0x290>
     63e:	e091      	b.n	764 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     640:	2317      	movs	r3, #23
     642:	e138      	b.n	8b6 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     644:	683b      	ldr	r3, [r7, #0]
     646:	7cdb      	ldrb	r3, [r3, #19]
     648:	2b00      	cmp	r3, #0
     64a:	d015      	beq.n	678 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
     64c:	683b      	ldr	r3, [r7, #0]
     64e:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     650:	4a36      	ldr	r2, [pc, #216]	; (72c <_adc_set_config+0x37c>)
     652:	4293      	cmp	r3, r2
     654:	dc0e      	bgt.n	674 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
     656:	683b      	ldr	r3, [r7, #0]
     658:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
     65a:	4a35      	ldr	r2, [pc, #212]	; (730 <_adc_set_config+0x380>)
     65c:	4293      	cmp	r3, r2
     65e:	db09      	blt.n	674 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
     660:	683b      	ldr	r3, [r7, #0]
     662:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
     664:	4a31      	ldr	r2, [pc, #196]	; (72c <_adc_set_config+0x37c>)
     666:	4293      	cmp	r3, r2
     668:	dc04      	bgt.n	674 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
     66a:	683b      	ldr	r3, [r7, #0]
     66c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
     66e:	4a30      	ldr	r2, [pc, #192]	; (730 <_adc_set_config+0x380>)
     670:	4293      	cmp	r3, r2
     672:	da01      	bge.n	678 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     674:	2317      	movs	r3, #23
     676:	e11e      	b.n	8b6 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
     678:	683b      	ldr	r3, [r7, #0]
     67a:	69db      	ldr	r3, [r3, #28]
     67c:	4a2d      	ldr	r2, [pc, #180]	; (734 <_adc_set_config+0x384>)
     67e:	4293      	cmp	r3, r2
     680:	dc05      	bgt.n	68e <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
     682:	683b      	ldr	r3, [r7, #0]
     684:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
     686:	4a2b      	ldr	r2, [pc, #172]	; (734 <_adc_set_config+0x384>)
     688:	4293      	cmp	r3, r2
     68a:	dc00      	bgt.n	68e <_adc_set_config+0x2de>
     68c:	e06c      	b.n	768 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     68e:	2317      	movs	r3, #23
     690:	e111      	b.n	8b6 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     692:	683b      	ldr	r3, [r7, #0]
     694:	7cdb      	ldrb	r3, [r3, #19]
     696:	2b00      	cmp	r3, #0
     698:	d015      	beq.n	6c6 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
     69a:	683b      	ldr	r3, [r7, #0]
     69c:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     69e:	4a26      	ldr	r2, [pc, #152]	; (738 <_adc_set_config+0x388>)
     6a0:	4293      	cmp	r3, r2
     6a2:	dc0e      	bgt.n	6c2 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
     6a4:	683b      	ldr	r3, [r7, #0]
     6a6:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
     6a8:	4a24      	ldr	r2, [pc, #144]	; (73c <_adc_set_config+0x38c>)
     6aa:	4293      	cmp	r3, r2
     6ac:	db09      	blt.n	6c2 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
     6ae:	683b      	ldr	r3, [r7, #0]
     6b0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
     6b2:	4a21      	ldr	r2, [pc, #132]	; (738 <_adc_set_config+0x388>)
     6b4:	4293      	cmp	r3, r2
     6b6:	dc04      	bgt.n	6c2 <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
     6b8:	683b      	ldr	r3, [r7, #0]
     6ba:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
     6bc:	4a1f      	ldr	r2, [pc, #124]	; (73c <_adc_set_config+0x38c>)
     6be:	4293      	cmp	r3, r2
     6c0:	da01      	bge.n	6c6 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6c2:	2317      	movs	r3, #23
     6c4:	e0f7      	b.n	8b6 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
     6c6:	683b      	ldr	r3, [r7, #0]
     6c8:	69db      	ldr	r3, [r3, #28]
     6ca:	4a1d      	ldr	r2, [pc, #116]	; (740 <_adc_set_config+0x390>)
     6cc:	4293      	cmp	r3, r2
     6ce:	dc04      	bgt.n	6da <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
     6d0:	683b      	ldr	r3, [r7, #0]
     6d2:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
     6d4:	4a1a      	ldr	r2, [pc, #104]	; (740 <_adc_set_config+0x390>)
     6d6:	4293      	cmp	r3, r2
     6d8:	dd48      	ble.n	76c <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6da:	2317      	movs	r3, #23
     6dc:	e0eb      	b.n	8b6 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     6de:	683b      	ldr	r3, [r7, #0]
     6e0:	7cdb      	ldrb	r3, [r3, #19]
     6e2:	2b00      	cmp	r3, #0
     6e4:	d032      	beq.n	74c <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
     6e6:	683b      	ldr	r3, [r7, #0]
     6e8:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     6ea:	4a16      	ldr	r2, [pc, #88]	; (744 <_adc_set_config+0x394>)
     6ec:	4293      	cmp	r3, r2
     6ee:	dc0e      	bgt.n	70e <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
     6f0:	683b      	ldr	r3, [r7, #0]
     6f2:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
     6f4:	4a14      	ldr	r2, [pc, #80]	; (748 <_adc_set_config+0x398>)
     6f6:	4293      	cmp	r3, r2
     6f8:	db09      	blt.n	70e <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
     6fa:	683b      	ldr	r3, [r7, #0]
     6fc:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
     6fe:	4a11      	ldr	r2, [pc, #68]	; (744 <_adc_set_config+0x394>)
     700:	4293      	cmp	r3, r2
     702:	dc04      	bgt.n	70e <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
     704:	683b      	ldr	r3, [r7, #0]
     706:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
     708:	4a0f      	ldr	r2, [pc, #60]	; (748 <_adc_set_config+0x398>)
     70a:	4293      	cmp	r3, r2
     70c:	da1e      	bge.n	74c <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     70e:	2317      	movs	r3, #23
     710:	e0d1      	b.n	8b6 <_adc_set_config+0x506>
     712:	46c0      	nop			; (mov r8, r8)
     714:	0000018b 	.word	0x0000018b
     718:	000059f9 	.word	0x000059f9
     71c:	00005a3d 	.word	0x00005a3d
     720:	00000339 	.word	0x00000339
     724:	00009570 	.word	0x00009570
     728:	00000265 	.word	0x00000265
     72c:	000001ff 	.word	0x000001ff
     730:	fffffe00 	.word	0xfffffe00
     734:	000003ff 	.word	0x000003ff
     738:	000007ff 	.word	0x000007ff
     73c:	fffff800 	.word	0xfffff800
     740:	00000fff 	.word	0x00000fff
     744:	00007fff 	.word	0x00007fff
     748:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
     74c:	683b      	ldr	r3, [r7, #0]
     74e:	69db      	ldr	r3, [r3, #28]
     750:	4a5b      	ldr	r2, [pc, #364]	; (8c0 <_adc_set_config+0x510>)
     752:	4293      	cmp	r3, r2
     754:	dc04      	bgt.n	760 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
     756:	683b      	ldr	r3, [r7, #0]
     758:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
     75a:	4a59      	ldr	r2, [pc, #356]	; (8c0 <_adc_set_config+0x510>)
     75c:	4293      	cmp	r3, r2
     75e:	dd07      	ble.n	770 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     760:	2317      	movs	r3, #23
     762:	e0a8      	b.n	8b6 <_adc_set_config+0x506>
			break;
     764:	46c0      	nop			; (mov r8, r8)
     766:	e004      	b.n	772 <_adc_set_config+0x3c2>
			break;
     768:	46c0      	nop			; (mov r8, r8)
     76a:	e002      	b.n	772 <_adc_set_config+0x3c2>
			break;
     76c:	46c0      	nop			; (mov r8, r8)
     76e:	e000      	b.n	772 <_adc_set_config+0x3c2>
			}
			break;
     770:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
     772:	46c0      	nop			; (mov r8, r8)
     774:	687b      	ldr	r3, [r7, #4]
     776:	0018      	movs	r0, r3
     778:	4b52      	ldr	r3, [pc, #328]	; (8c4 <_adc_set_config+0x514>)
     77a:	4798      	blx	r3
     77c:	1e03      	subs	r3, r0, #0
     77e:	d1f9      	bne.n	774 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     780:	683b      	ldr	r3, [r7, #0]
     782:	7e1a      	ldrb	r2, [r3, #24]
     784:	693b      	ldr	r3, [r7, #16]
     786:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     788:	46c0      	nop			; (mov r8, r8)
     78a:	687b      	ldr	r3, [r7, #4]
     78c:	0018      	movs	r0, r3
     78e:	4b4d      	ldr	r3, [pc, #308]	; (8c4 <_adc_set_config+0x514>)
     790:	4798      	blx	r3
     792:	1e03      	subs	r3, r0, #0
     794:	d1f9      	bne.n	78a <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     796:	683b      	ldr	r3, [r7, #0]
     798:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
     79a:	b29a      	uxth	r2, r3
     79c:	693b      	ldr	r3, [r7, #16]
     79e:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
     7a0:	46c0      	nop			; (mov r8, r8)
     7a2:	687b      	ldr	r3, [r7, #4]
     7a4:	0018      	movs	r0, r3
     7a6:	4b47      	ldr	r3, [pc, #284]	; (8c4 <_adc_set_config+0x514>)
     7a8:	4798      	blx	r3
     7aa:	1e03      	subs	r3, r0, #0
     7ac:	d1f9      	bne.n	7a2 <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     7ae:	683b      	ldr	r3, [r7, #0]
     7b0:	6a1b      	ldr	r3, [r3, #32]
     7b2:	b29a      	uxth	r2, r3
     7b4:	693b      	ldr	r3, [r7, #16]
     7b6:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     7b8:	2314      	movs	r3, #20
     7ba:	18fb      	adds	r3, r7, r3
     7bc:	683a      	ldr	r2, [r7, #0]
     7be:	212c      	movs	r1, #44	; 0x2c
     7c0:	5c52      	ldrb	r2, [r2, r1]
     7c2:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
     7c4:	2314      	movs	r3, #20
     7c6:	18fb      	adds	r3, r7, r3
     7c8:	781b      	ldrb	r3, [r3, #0]
     7ca:	2b00      	cmp	r3, #0
     7cc:	d006      	beq.n	7dc <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     7ce:	2314      	movs	r3, #20
     7d0:	18fb      	adds	r3, r7, r3
     7d2:	781a      	ldrb	r2, [r3, #0]
     7d4:	2314      	movs	r3, #20
     7d6:	18fb      	adds	r3, r7, r3
     7d8:	3a01      	subs	r2, #1
     7da:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     7dc:	2314      	movs	r3, #20
     7de:	18fb      	adds	r3, r7, r3
     7e0:	781b      	ldrb	r3, [r3, #0]
     7e2:	2b0f      	cmp	r3, #15
     7e4:	d804      	bhi.n	7f0 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     7e6:	683b      	ldr	r3, [r7, #0]
     7e8:	222b      	movs	r2, #43	; 0x2b
     7ea:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     7ec:	2b0f      	cmp	r3, #15
     7ee:	d901      	bls.n	7f4 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     7f0:	2317      	movs	r3, #23
     7f2:	e060      	b.n	8b6 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
     7f4:	46c0      	nop			; (mov r8, r8)
     7f6:	687b      	ldr	r3, [r7, #4]
     7f8:	0018      	movs	r0, r3
     7fa:	4b32      	ldr	r3, [pc, #200]	; (8c4 <_adc_set_config+0x514>)
     7fc:	4798      	blx	r3
     7fe:	1e03      	subs	r3, r0, #0
     800:	d1f9      	bne.n	7f6 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     802:	683b      	ldr	r3, [r7, #0]
     804:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
     806:	683a      	ldr	r2, [r7, #0]
     808:	212b      	movs	r1, #43	; 0x2b
     80a:	5c52      	ldrb	r2, [r2, r1]
     80c:	0512      	lsls	r2, r2, #20
			config->gain_factor |
     80e:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     810:	2214      	movs	r2, #20
     812:	18ba      	adds	r2, r7, r2
     814:	7812      	ldrb	r2, [r2, #0]
     816:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     818:	4313      	orrs	r3, r2
			config->negative_input |
     81a:	683a      	ldr	r2, [r7, #0]
     81c:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     81e:	4313      	orrs	r3, r2
			config->positive_input;
     820:	683a      	ldr	r2, [r7, #0]
     822:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
     824:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
     826:	693b      	ldr	r3, [r7, #16]
     828:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     82a:	683b      	ldr	r3, [r7, #0]
     82c:	222a      	movs	r2, #42	; 0x2a
     82e:	5c9a      	ldrb	r2, [r3, r2]
     830:	693b      	ldr	r3, [r7, #16]
     832:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     834:	693b      	ldr	r3, [r7, #16]
     836:	220f      	movs	r2, #15
     838:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     83a:	683b      	ldr	r3, [r7, #0]
     83c:	2224      	movs	r2, #36	; 0x24
     83e:	5c9b      	ldrb	r3, [r3, r2]
     840:	2b00      	cmp	r3, #0
     842:	d01e      	beq.n	882 <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     844:	683b      	ldr	r3, [r7, #0]
     846:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     848:	4a1f      	ldr	r2, [pc, #124]	; (8c8 <_adc_set_config+0x518>)
     84a:	4293      	cmp	r3, r2
     84c:	d901      	bls.n	852 <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
     84e:	2317      	movs	r3, #23
     850:	e031      	b.n	8b6 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     852:	683b      	ldr	r3, [r7, #0]
     854:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     856:	693b      	ldr	r3, [r7, #16]
     858:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     85a:	683b      	ldr	r3, [r7, #0]
     85c:	2228      	movs	r2, #40	; 0x28
     85e:	5e9b      	ldrsh	r3, [r3, r2]
     860:	4a1a      	ldr	r2, [pc, #104]	; (8cc <_adc_set_config+0x51c>)
     862:	4293      	cmp	r3, r2
     864:	dc05      	bgt.n	872 <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
     866:	683b      	ldr	r3, [r7, #0]
     868:	2228      	movs	r2, #40	; 0x28
     86a:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
     86c:	4a18      	ldr	r2, [pc, #96]	; (8d0 <_adc_set_config+0x520>)
     86e:	4293      	cmp	r3, r2
     870:	da01      	bge.n	876 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
     872:	2317      	movs	r3, #23
     874:	e01f      	b.n	8b6 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     876:	683b      	ldr	r3, [r7, #0]
     878:	2228      	movs	r2, #40	; 0x28
     87a:	5e9b      	ldrsh	r3, [r3, r2]
     87c:	b29a      	uxth	r2, r3
     87e:	693b      	ldr	r3, [r7, #16]
     880:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     882:	4b14      	ldr	r3, [pc, #80]	; (8d4 <_adc_set_config+0x524>)
     884:	681b      	ldr	r3, [r3, #0]
     886:	08db      	lsrs	r3, r3, #3
     888:	b29b      	uxth	r3, r3
     88a:	021b      	lsls	r3, r3, #8
     88c:	b29a      	uxth	r2, r3
     88e:	23e0      	movs	r3, #224	; 0xe0
     890:	00db      	lsls	r3, r3, #3
     892:	4013      	ands	r3, r2
     894:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     896:	4b10      	ldr	r3, [pc, #64]	; (8d8 <_adc_set_config+0x528>)
     898:	685c      	ldr	r4, [r3, #4]
     89a:	681b      	ldr	r3, [r3, #0]
     89c:	0161      	lsls	r1, r4, #5
     89e:	0edd      	lsrs	r5, r3, #27
     8a0:	430d      	orrs	r5, r1
     8a2:	0ee6      	lsrs	r6, r4, #27
     8a4:	b2ab      	uxth	r3, r5
     8a6:	21ff      	movs	r1, #255	; 0xff
     8a8:	400b      	ands	r3, r1
     8aa:	b29b      	uxth	r3, r3
			) |
     8ac:	4313      	orrs	r3, r2
     8ae:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
     8b0:	693b      	ldr	r3, [r7, #16]
     8b2:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     8b4:	2300      	movs	r3, #0
}
     8b6:	0018      	movs	r0, r3
     8b8:	46bd      	mov	sp, r7
     8ba:	b009      	add	sp, #36	; 0x24
     8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	0000ffff 	.word	0x0000ffff
     8c4:	00000265 	.word	0x00000265
     8c8:	00000fff 	.word	0x00000fff
     8cc:	000007ff 	.word	0x000007ff
     8d0:	fffff800 	.word	0xfffff800
     8d4:	00806024 	.word	0x00806024
     8d8:	00806020 	.word	0x00806020

000008dc <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     8dc:	b580      	push	{r7, lr}
     8de:	b084      	sub	sp, #16
     8e0:	af00      	add	r7, sp, #0
     8e2:	60f8      	str	r0, [r7, #12]
     8e4:	60b9      	str	r1, [r7, #8]
     8e6:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     8e8:	68fb      	ldr	r3, [r7, #12]
     8ea:	68ba      	ldr	r2, [r7, #8]
     8ec:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
     8ee:	2380      	movs	r3, #128	; 0x80
     8f0:	025b      	lsls	r3, r3, #9
     8f2:	0019      	movs	r1, r3
     8f4:	2002      	movs	r0, #2
     8f6:	4b15      	ldr	r3, [pc, #84]	; (94c <adc_init+0x70>)
     8f8:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     8fa:	68bb      	ldr	r3, [r7, #8]
     8fc:	781b      	ldrb	r3, [r3, #0]
     8fe:	b2db      	uxtb	r3, r3
     900:	001a      	movs	r2, r3
     902:	2301      	movs	r3, #1
     904:	4013      	ands	r3, r2
     906:	d001      	beq.n	90c <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     908:	2305      	movs	r3, #5
     90a:	e01a      	b.n	942 <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     90c:	68bb      	ldr	r3, [r7, #8]
     90e:	781b      	ldrb	r3, [r3, #0]
     910:	b2db      	uxtb	r3, r3
     912:	001a      	movs	r2, r3
     914:	2302      	movs	r3, #2
     916:	4013      	ands	r3, r2
     918:	d001      	beq.n	91e <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     91a:	231c      	movs	r3, #28
     91c:	e011      	b.n	942 <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     91e:	687b      	ldr	r3, [r7, #4]
     920:	785a      	ldrb	r2, [r3, #1]
     922:	68fb      	ldr	r3, [r7, #12]
     924:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     926:	68fb      	ldr	r3, [r7, #12]
     928:	791b      	ldrb	r3, [r3, #4]
     92a:	2b00      	cmp	r3, #0
     92c:	d102      	bne.n	934 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
     92e:	2001      	movs	r0, #1
     930:	4b07      	ldr	r3, [pc, #28]	; (950 <adc_init+0x74>)
     932:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     934:	687a      	ldr	r2, [r7, #4]
     936:	68fb      	ldr	r3, [r7, #12]
     938:	0011      	movs	r1, r2
     93a:	0018      	movs	r0, r3
     93c:	4b05      	ldr	r3, [pc, #20]	; (954 <adc_init+0x78>)
     93e:	4798      	blx	r3
     940:	0003      	movs	r3, r0
}
     942:	0018      	movs	r0, r3
     944:	46bd      	mov	sp, r7
     946:	b004      	add	sp, #16
     948:	bd80      	pop	{r7, pc}
     94a:	46c0      	nop			; (mov r8, r8)
     94c:	000001a1 	.word	0x000001a1
     950:	00000225 	.word	0x00000225
     954:	000003b1 	.word	0x000003b1

00000958 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     958:	b580      	push	{r7, lr}
     95a:	b084      	sub	sp, #16
     95c:	af00      	add	r7, sp, #0
     95e:	0002      	movs	r2, r0
     960:	1dfb      	adds	r3, r7, #7
     962:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     964:	230f      	movs	r3, #15
     966:	18fb      	adds	r3, r7, r3
     968:	1dfa      	adds	r2, r7, #7
     96a:	7812      	ldrb	r2, [r2, #0]
     96c:	0952      	lsrs	r2, r2, #5
     96e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     970:	230f      	movs	r3, #15
     972:	18fb      	adds	r3, r7, r3
     974:	781b      	ldrb	r3, [r3, #0]
     976:	2b00      	cmp	r3, #0
     978:	d10c      	bne.n	994 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     97a:	4b09      	ldr	r3, [pc, #36]	; (9a0 <_extint_get_eic_from_channel+0x48>)
     97c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     97e:	230f      	movs	r3, #15
     980:	18fb      	adds	r3, r7, r3
     982:	781b      	ldrb	r3, [r3, #0]
     984:	009b      	lsls	r3, r3, #2
     986:	2210      	movs	r2, #16
     988:	4694      	mov	ip, r2
     98a:	44bc      	add	ip, r7
     98c:	4463      	add	r3, ip
     98e:	3b08      	subs	r3, #8
     990:	681b      	ldr	r3, [r3, #0]
     992:	e000      	b.n	996 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     994:	2300      	movs	r3, #0
	}
}
     996:	0018      	movs	r0, r3
     998:	46bd      	mov	sp, r7
     99a:	b004      	add	sp, #16
     99c:	bd80      	pop	{r7, pc}
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	40001800 	.word	0x40001800

000009a4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     9a4:	b580      	push	{r7, lr}
     9a6:	b084      	sub	sp, #16
     9a8:	af00      	add	r7, sp, #0
     9aa:	0002      	movs	r2, r0
     9ac:	1dfb      	adds	r3, r7, #7
     9ae:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     9b0:	1dfb      	adds	r3, r7, #7
     9b2:	781b      	ldrb	r3, [r3, #0]
     9b4:	0018      	movs	r0, r3
     9b6:	4b0b      	ldr	r3, [pc, #44]	; (9e4 <extint_chan_is_detected+0x40>)
     9b8:	4798      	blx	r3
     9ba:	0003      	movs	r3, r0
     9bc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     9be:	1dfb      	adds	r3, r7, #7
     9c0:	781b      	ldrb	r3, [r3, #0]
     9c2:	221f      	movs	r2, #31
     9c4:	4013      	ands	r3, r2
     9c6:	2201      	movs	r2, #1
     9c8:	409a      	lsls	r2, r3
     9ca:	0013      	movs	r3, r2
     9cc:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     9ce:	68fb      	ldr	r3, [r7, #12]
     9d0:	691b      	ldr	r3, [r3, #16]
     9d2:	68ba      	ldr	r2, [r7, #8]
     9d4:	4013      	ands	r3, r2
     9d6:	1e5a      	subs	r2, r3, #1
     9d8:	4193      	sbcs	r3, r2
     9da:	b2db      	uxtb	r3, r3
}
     9dc:	0018      	movs	r0, r3
     9de:	46bd      	mov	sp, r7
     9e0:	b004      	add	sp, #16
     9e2:	bd80      	pop	{r7, pc}
     9e4:	00000959 	.word	0x00000959

000009e8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     9e8:	b580      	push	{r7, lr}
     9ea:	b084      	sub	sp, #16
     9ec:	af00      	add	r7, sp, #0
     9ee:	0002      	movs	r2, r0
     9f0:	1dfb      	adds	r3, r7, #7
     9f2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     9f4:	1dfb      	adds	r3, r7, #7
     9f6:	781b      	ldrb	r3, [r3, #0]
     9f8:	0018      	movs	r0, r3
     9fa:	4b09      	ldr	r3, [pc, #36]	; (a20 <extint_chan_clear_detected+0x38>)
     9fc:	4798      	blx	r3
     9fe:	0003      	movs	r3, r0
     a00:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     a02:	1dfb      	adds	r3, r7, #7
     a04:	781b      	ldrb	r3, [r3, #0]
     a06:	221f      	movs	r2, #31
     a08:	4013      	ands	r3, r2
     a0a:	2201      	movs	r2, #1
     a0c:	409a      	lsls	r2, r3
     a0e:	0013      	movs	r3, r2
     a10:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     a12:	68fb      	ldr	r3, [r7, #12]
     a14:	68ba      	ldr	r2, [r7, #8]
     a16:	611a      	str	r2, [r3, #16]
}
     a18:	46c0      	nop			; (mov r8, r8)
     a1a:	46bd      	mov	sp, r7
     a1c:	b004      	add	sp, #16
     a1e:	bd80      	pop	{r7, pc}
     a20:	00000959 	.word	0x00000959

00000a24 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     a24:	b580      	push	{r7, lr}
     a26:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     a28:	4b15      	ldr	r3, [pc, #84]	; (a80 <EIC_Handler+0x5c>)
     a2a:	2200      	movs	r2, #0
     a2c:	701a      	strb	r2, [r3, #0]
     a2e:	e020      	b.n	a72 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     a30:	4b13      	ldr	r3, [pc, #76]	; (a80 <EIC_Handler+0x5c>)
     a32:	781b      	ldrb	r3, [r3, #0]
     a34:	0018      	movs	r0, r3
     a36:	4b13      	ldr	r3, [pc, #76]	; (a84 <EIC_Handler+0x60>)
     a38:	4798      	blx	r3
     a3a:	1e03      	subs	r3, r0, #0
     a3c:	d013      	beq.n	a66 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     a3e:	4b10      	ldr	r3, [pc, #64]	; (a80 <EIC_Handler+0x5c>)
     a40:	781b      	ldrb	r3, [r3, #0]
     a42:	0018      	movs	r0, r3
     a44:	4b10      	ldr	r3, [pc, #64]	; (a88 <EIC_Handler+0x64>)
     a46:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     a48:	4b0d      	ldr	r3, [pc, #52]	; (a80 <EIC_Handler+0x5c>)
     a4a:	781b      	ldrb	r3, [r3, #0]
     a4c:	001a      	movs	r2, r3
     a4e:	4b0f      	ldr	r3, [pc, #60]	; (a8c <EIC_Handler+0x68>)
     a50:	0092      	lsls	r2, r2, #2
     a52:	58d3      	ldr	r3, [r2, r3]
     a54:	2b00      	cmp	r3, #0
     a56:	d006      	beq.n	a66 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     a58:	4b09      	ldr	r3, [pc, #36]	; (a80 <EIC_Handler+0x5c>)
     a5a:	781b      	ldrb	r3, [r3, #0]
     a5c:	001a      	movs	r2, r3
     a5e:	4b0b      	ldr	r3, [pc, #44]	; (a8c <EIC_Handler+0x68>)
     a60:	0092      	lsls	r2, r2, #2
     a62:	58d3      	ldr	r3, [r2, r3]
     a64:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     a66:	4b06      	ldr	r3, [pc, #24]	; (a80 <EIC_Handler+0x5c>)
     a68:	781b      	ldrb	r3, [r3, #0]
     a6a:	3301      	adds	r3, #1
     a6c:	b2da      	uxtb	r2, r3
     a6e:	4b04      	ldr	r3, [pc, #16]	; (a80 <EIC_Handler+0x5c>)
     a70:	701a      	strb	r2, [r3, #0]
     a72:	4b03      	ldr	r3, [pc, #12]	; (a80 <EIC_Handler+0x5c>)
     a74:	781b      	ldrb	r3, [r3, #0]
     a76:	2b0f      	cmp	r3, #15
     a78:	d9da      	bls.n	a30 <EIC_Handler+0xc>
			}
		}
	}
}
     a7a:	46c0      	nop			; (mov r8, r8)
     a7c:	46bd      	mov	sp, r7
     a7e:	bd80      	pop	{r7, pc}
     a80:	200002b8 	.word	0x200002b8
     a84:	000009a5 	.word	0x000009a5
     a88:	000009e9 	.word	0x000009e9
     a8c:	200002bc 	.word	0x200002bc

00000a90 <system_gclk_chan_get_config_defaults>:
{
     a90:	b580      	push	{r7, lr}
     a92:	b082      	sub	sp, #8
     a94:	af00      	add	r7, sp, #0
     a96:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     a98:	687b      	ldr	r3, [r7, #4]
     a9a:	2200      	movs	r2, #0
     a9c:	701a      	strb	r2, [r3, #0]
}
     a9e:	46c0      	nop			; (mov r8, r8)
     aa0:	46bd      	mov	sp, r7
     aa2:	b002      	add	sp, #8
     aa4:	bd80      	pop	{r7, pc}
	...

00000aa8 <system_apb_clock_set_mask>:
{
     aa8:	b580      	push	{r7, lr}
     aaa:	b082      	sub	sp, #8
     aac:	af00      	add	r7, sp, #0
     aae:	0002      	movs	r2, r0
     ab0:	6039      	str	r1, [r7, #0]
     ab2:	1dfb      	adds	r3, r7, #7
     ab4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     ab6:	1dfb      	adds	r3, r7, #7
     ab8:	781b      	ldrb	r3, [r3, #0]
     aba:	2b01      	cmp	r3, #1
     abc:	d00a      	beq.n	ad4 <system_apb_clock_set_mask+0x2c>
     abe:	2b02      	cmp	r3, #2
     ac0:	d00f      	beq.n	ae2 <system_apb_clock_set_mask+0x3a>
     ac2:	2b00      	cmp	r3, #0
     ac4:	d114      	bne.n	af0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     ac6:	4b0e      	ldr	r3, [pc, #56]	; (b00 <system_apb_clock_set_mask+0x58>)
     ac8:	4a0d      	ldr	r2, [pc, #52]	; (b00 <system_apb_clock_set_mask+0x58>)
     aca:	6991      	ldr	r1, [r2, #24]
     acc:	683a      	ldr	r2, [r7, #0]
     ace:	430a      	orrs	r2, r1
     ad0:	619a      	str	r2, [r3, #24]
			break;
     ad2:	e00f      	b.n	af4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     ad4:	4b0a      	ldr	r3, [pc, #40]	; (b00 <system_apb_clock_set_mask+0x58>)
     ad6:	4a0a      	ldr	r2, [pc, #40]	; (b00 <system_apb_clock_set_mask+0x58>)
     ad8:	69d1      	ldr	r1, [r2, #28]
     ada:	683a      	ldr	r2, [r7, #0]
     adc:	430a      	orrs	r2, r1
     ade:	61da      	str	r2, [r3, #28]
			break;
     ae0:	e008      	b.n	af4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     ae2:	4b07      	ldr	r3, [pc, #28]	; (b00 <system_apb_clock_set_mask+0x58>)
     ae4:	4a06      	ldr	r2, [pc, #24]	; (b00 <system_apb_clock_set_mask+0x58>)
     ae6:	6a11      	ldr	r1, [r2, #32]
     ae8:	683a      	ldr	r2, [r7, #0]
     aea:	430a      	orrs	r2, r1
     aec:	621a      	str	r2, [r3, #32]
			break;
     aee:	e001      	b.n	af4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     af0:	2317      	movs	r3, #23
     af2:	e000      	b.n	af6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     af4:	2300      	movs	r3, #0
}
     af6:	0018      	movs	r0, r3
     af8:	46bd      	mov	sp, r7
     afa:	b002      	add	sp, #8
     afc:	bd80      	pop	{r7, pc}
     afe:	46c0      	nop			; (mov r8, r8)
     b00:	40000400 	.word	0x40000400

00000b04 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     b04:	b580      	push	{r7, lr}
     b06:	b082      	sub	sp, #8
     b08:	af00      	add	r7, sp, #0
     b0a:	0002      	movs	r2, r0
     b0c:	1dfb      	adds	r3, r7, #7
     b0e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <system_interrupt_enable+0x28>)
     b12:	1dfa      	adds	r2, r7, #7
     b14:	7812      	ldrb	r2, [r2, #0]
     b16:	0011      	movs	r1, r2
     b18:	221f      	movs	r2, #31
     b1a:	400a      	ands	r2, r1
     b1c:	2101      	movs	r1, #1
     b1e:	4091      	lsls	r1, r2
     b20:	000a      	movs	r2, r1
     b22:	601a      	str	r2, [r3, #0]
}
     b24:	46c0      	nop			; (mov r8, r8)
     b26:	46bd      	mov	sp, r7
     b28:	b002      	add	sp, #8
     b2a:	bd80      	pop	{r7, pc}
     b2c:	e000e100 	.word	0xe000e100

00000b30 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     b30:	b580      	push	{r7, lr}
     b32:	b082      	sub	sp, #8
     b34:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     b36:	4b0f      	ldr	r3, [pc, #60]	; (b74 <extint_is_syncing+0x44>)
     b38:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     b3a:	2300      	movs	r3, #0
     b3c:	607b      	str	r3, [r7, #4]
     b3e:	e011      	b.n	b64 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     b40:	687b      	ldr	r3, [r7, #4]
     b42:	009b      	lsls	r3, r3, #2
     b44:	2208      	movs	r2, #8
     b46:	4694      	mov	ip, r2
     b48:	44bc      	add	ip, r7
     b4a:	4463      	add	r3, ip
     b4c:	3b08      	subs	r3, #8
     b4e:	681b      	ldr	r3, [r3, #0]
     b50:	785b      	ldrb	r3, [r3, #1]
     b52:	b2db      	uxtb	r3, r3
     b54:	b25b      	sxtb	r3, r3
     b56:	2b00      	cmp	r3, #0
     b58:	da01      	bge.n	b5e <extint_is_syncing+0x2e>
			return true;
     b5a:	2301      	movs	r3, #1
     b5c:	e006      	b.n	b6c <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     b5e:	687b      	ldr	r3, [r7, #4]
     b60:	3301      	adds	r3, #1
     b62:	607b      	str	r3, [r7, #4]
     b64:	687b      	ldr	r3, [r7, #4]
     b66:	2b00      	cmp	r3, #0
     b68:	d0ea      	beq.n	b40 <extint_is_syncing+0x10>
		}
	}
	return false;
     b6a:	2300      	movs	r3, #0
}
     b6c:	0018      	movs	r0, r3
     b6e:	46bd      	mov	sp, r7
     b70:	b002      	add	sp, #8
     b72:	bd80      	pop	{r7, pc}
     b74:	40001800 	.word	0x40001800

00000b78 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     b78:	b580      	push	{r7, lr}
     b7a:	b084      	sub	sp, #16
     b7c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     b7e:	4b2d      	ldr	r3, [pc, #180]	; (c34 <_system_extint_init+0xbc>)
     b80:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     b82:	2140      	movs	r1, #64	; 0x40
     b84:	2000      	movs	r0, #0
     b86:	4b2c      	ldr	r3, [pc, #176]	; (c38 <_system_extint_init+0xc0>)
     b88:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     b8a:	003b      	movs	r3, r7
     b8c:	0018      	movs	r0, r3
     b8e:	4b2b      	ldr	r3, [pc, #172]	; (c3c <_system_extint_init+0xc4>)
     b90:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     b92:	003b      	movs	r3, r7
     b94:	2200      	movs	r2, #0
     b96:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     b98:	003b      	movs	r3, r7
     b9a:	0019      	movs	r1, r3
     b9c:	2005      	movs	r0, #5
     b9e:	4b28      	ldr	r3, [pc, #160]	; (c40 <_system_extint_init+0xc8>)
     ba0:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     ba2:	2005      	movs	r0, #5
     ba4:	4b27      	ldr	r3, [pc, #156]	; (c44 <_system_extint_init+0xcc>)
     ba6:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     ba8:	2300      	movs	r3, #0
     baa:	60fb      	str	r3, [r7, #12]
     bac:	e018      	b.n	be0 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     bae:	68fb      	ldr	r3, [r7, #12]
     bb0:	009b      	lsls	r3, r3, #2
     bb2:	2210      	movs	r2, #16
     bb4:	4694      	mov	ip, r2
     bb6:	44bc      	add	ip, r7
     bb8:	4463      	add	r3, ip
     bba:	3b0c      	subs	r3, #12
     bbc:	681a      	ldr	r2, [r3, #0]
     bbe:	68fb      	ldr	r3, [r7, #12]
     bc0:	009b      	lsls	r3, r3, #2
     bc2:	2110      	movs	r1, #16
     bc4:	468c      	mov	ip, r1
     bc6:	44bc      	add	ip, r7
     bc8:	4463      	add	r3, ip
     bca:	3b0c      	subs	r3, #12
     bcc:	681b      	ldr	r3, [r3, #0]
     bce:	781b      	ldrb	r3, [r3, #0]
     bd0:	b2db      	uxtb	r3, r3
     bd2:	2101      	movs	r1, #1
     bd4:	430b      	orrs	r3, r1
     bd6:	b2db      	uxtb	r3, r3
     bd8:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     bda:	68fb      	ldr	r3, [r7, #12]
     bdc:	3301      	adds	r3, #1
     bde:	60fb      	str	r3, [r7, #12]
     be0:	68fb      	ldr	r3, [r7, #12]
     be2:	2b00      	cmp	r3, #0
     be4:	d0e3      	beq.n	bae <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
     be6:	46c0      	nop			; (mov r8, r8)
     be8:	4b17      	ldr	r3, [pc, #92]	; (c48 <_system_extint_init+0xd0>)
     bea:	4798      	blx	r3
     bec:	1e03      	subs	r3, r0, #0
     bee:	d1fb      	bne.n	be8 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     bf0:	230b      	movs	r3, #11
     bf2:	18fb      	adds	r3, r7, r3
     bf4:	2200      	movs	r2, #0
     bf6:	701a      	strb	r2, [r3, #0]
     bf8:	e00d      	b.n	c16 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     bfa:	230b      	movs	r3, #11
     bfc:	18fb      	adds	r3, r7, r3
     bfe:	781a      	ldrb	r2, [r3, #0]
     c00:	4b12      	ldr	r3, [pc, #72]	; (c4c <_system_extint_init+0xd4>)
     c02:	0092      	lsls	r2, r2, #2
     c04:	2100      	movs	r1, #0
     c06:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     c08:	230b      	movs	r3, #11
     c0a:	18fb      	adds	r3, r7, r3
     c0c:	781a      	ldrb	r2, [r3, #0]
     c0e:	230b      	movs	r3, #11
     c10:	18fb      	adds	r3, r7, r3
     c12:	3201      	adds	r2, #1
     c14:	701a      	strb	r2, [r3, #0]
     c16:	230b      	movs	r3, #11
     c18:	18fb      	adds	r3, r7, r3
     c1a:	781b      	ldrb	r3, [r3, #0]
     c1c:	2b0f      	cmp	r3, #15
     c1e:	d9ec      	bls.n	bfa <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     c20:	2004      	movs	r0, #4
     c22:	4b0b      	ldr	r3, [pc, #44]	; (c50 <_system_extint_init+0xd8>)
     c24:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     c26:	4b0b      	ldr	r3, [pc, #44]	; (c54 <_system_extint_init+0xdc>)
     c28:	4798      	blx	r3
}
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	46bd      	mov	sp, r7
     c2e:	b004      	add	sp, #16
     c30:	bd80      	pop	{r7, pc}
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	40001800 	.word	0x40001800
     c38:	00000aa9 	.word	0x00000aa9
     c3c:	00000a91 	.word	0x00000a91
     c40:	000059f9 	.word	0x000059f9
     c44:	00005a3d 	.word	0x00005a3d
     c48:	00000b31 	.word	0x00000b31
     c4c:	200002bc 	.word	0x200002bc
     c50:	00000b05 	.word	0x00000b05
     c54:	00000c59 	.word	0x00000c59

00000c58 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     c58:	b580      	push	{r7, lr}
     c5a:	b082      	sub	sp, #8
     c5c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     c5e:	4b15      	ldr	r3, [pc, #84]	; (cb4 <_extint_enable+0x5c>)
     c60:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     c62:	2300      	movs	r3, #0
     c64:	607b      	str	r3, [r7, #4]
     c66:	e018      	b.n	c9a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	009b      	lsls	r3, r3, #2
     c6c:	2208      	movs	r2, #8
     c6e:	4694      	mov	ip, r2
     c70:	44bc      	add	ip, r7
     c72:	4463      	add	r3, ip
     c74:	3b08      	subs	r3, #8
     c76:	681a      	ldr	r2, [r3, #0]
     c78:	687b      	ldr	r3, [r7, #4]
     c7a:	009b      	lsls	r3, r3, #2
     c7c:	2108      	movs	r1, #8
     c7e:	468c      	mov	ip, r1
     c80:	44bc      	add	ip, r7
     c82:	4463      	add	r3, ip
     c84:	3b08      	subs	r3, #8
     c86:	681b      	ldr	r3, [r3, #0]
     c88:	781b      	ldrb	r3, [r3, #0]
     c8a:	b2db      	uxtb	r3, r3
     c8c:	2102      	movs	r1, #2
     c8e:	430b      	orrs	r3, r1
     c90:	b2db      	uxtb	r3, r3
     c92:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     c94:	687b      	ldr	r3, [r7, #4]
     c96:	3301      	adds	r3, #1
     c98:	607b      	str	r3, [r7, #4]
     c9a:	687b      	ldr	r3, [r7, #4]
     c9c:	2b00      	cmp	r3, #0
     c9e:	d0e3      	beq.n	c68 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
     ca0:	46c0      	nop			; (mov r8, r8)
     ca2:	4b05      	ldr	r3, [pc, #20]	; (cb8 <_extint_enable+0x60>)
     ca4:	4798      	blx	r3
     ca6:	1e03      	subs	r3, r0, #0
     ca8:	d1fb      	bne.n	ca2 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	46bd      	mov	sp, r7
     cae:	b002      	add	sp, #8
     cb0:	bd80      	pop	{r7, pc}
     cb2:	46c0      	nop			; (mov r8, r8)
     cb4:	40001800 	.word	0x40001800
     cb8:	00000b31 	.word	0x00000b31

00000cbc <system_pinmux_get_config_defaults>:
{
     cbc:	b580      	push	{r7, lr}
     cbe:	b082      	sub	sp, #8
     cc0:	af00      	add	r7, sp, #0
     cc2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     cc4:	687b      	ldr	r3, [r7, #4]
     cc6:	2280      	movs	r2, #128	; 0x80
     cc8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     cca:	687b      	ldr	r3, [r7, #4]
     ccc:	2200      	movs	r2, #0
     cce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     cd0:	687b      	ldr	r3, [r7, #4]
     cd2:	2201      	movs	r2, #1
     cd4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	2200      	movs	r2, #0
     cda:	70da      	strb	r2, [r3, #3]
}
     cdc:	46c0      	nop			; (mov r8, r8)
     cde:	46bd      	mov	sp, r7
     ce0:	b002      	add	sp, #8
     ce2:	bd80      	pop	{r7, pc}

00000ce4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     ce4:	b580      	push	{r7, lr}
     ce6:	b084      	sub	sp, #16
     ce8:	af00      	add	r7, sp, #0
     cea:	0002      	movs	r2, r0
     cec:	6039      	str	r1, [r7, #0]
     cee:	1dfb      	adds	r3, r7, #7
     cf0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     cf2:	230c      	movs	r3, #12
     cf4:	18fb      	adds	r3, r7, r3
     cf6:	0018      	movs	r0, r3
     cf8:	4b10      	ldr	r3, [pc, #64]	; (d3c <port_pin_set_config+0x58>)
     cfa:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     cfc:	230c      	movs	r3, #12
     cfe:	18fb      	adds	r3, r7, r3
     d00:	2280      	movs	r2, #128	; 0x80
     d02:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     d04:	683b      	ldr	r3, [r7, #0]
     d06:	781a      	ldrb	r2, [r3, #0]
     d08:	230c      	movs	r3, #12
     d0a:	18fb      	adds	r3, r7, r3
     d0c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     d0e:	683b      	ldr	r3, [r7, #0]
     d10:	785a      	ldrb	r2, [r3, #1]
     d12:	230c      	movs	r3, #12
     d14:	18fb      	adds	r3, r7, r3
     d16:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     d18:	683b      	ldr	r3, [r7, #0]
     d1a:	789a      	ldrb	r2, [r3, #2]
     d1c:	230c      	movs	r3, #12
     d1e:	18fb      	adds	r3, r7, r3
     d20:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     d22:	230c      	movs	r3, #12
     d24:	18fa      	adds	r2, r7, r3
     d26:	1dfb      	adds	r3, r7, #7
     d28:	781b      	ldrb	r3, [r3, #0]
     d2a:	0011      	movs	r1, r2
     d2c:	0018      	movs	r0, r3
     d2e:	4b04      	ldr	r3, [pc, #16]	; (d40 <port_pin_set_config+0x5c>)
     d30:	4798      	blx	r3
}
     d32:	46c0      	nop			; (mov r8, r8)
     d34:	46bd      	mov	sp, r7
     d36:	b004      	add	sp, #16
     d38:	bd80      	pop	{r7, pc}
     d3a:	46c0      	nop			; (mov r8, r8)
     d3c:	00000cbd 	.word	0x00000cbd
     d40:	00005d2d 	.word	0x00005d2d

00000d44 <system_gclk_chan_get_config_defaults>:
{
     d44:	b580      	push	{r7, lr}
     d46:	b082      	sub	sp, #8
     d48:	af00      	add	r7, sp, #0
     d4a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     d4c:	687b      	ldr	r3, [r7, #4]
     d4e:	2200      	movs	r2, #0
     d50:	701a      	strb	r2, [r3, #0]
}
     d52:	46c0      	nop			; (mov r8, r8)
     d54:	46bd      	mov	sp, r7
     d56:	b002      	add	sp, #8
     d58:	bd80      	pop	{r7, pc}
	...

00000d5c <system_apb_clock_set_mask>:
{
     d5c:	b580      	push	{r7, lr}
     d5e:	b082      	sub	sp, #8
     d60:	af00      	add	r7, sp, #0
     d62:	0002      	movs	r2, r0
     d64:	6039      	str	r1, [r7, #0]
     d66:	1dfb      	adds	r3, r7, #7
     d68:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     d6a:	1dfb      	adds	r3, r7, #7
     d6c:	781b      	ldrb	r3, [r3, #0]
     d6e:	2b01      	cmp	r3, #1
     d70:	d00a      	beq.n	d88 <system_apb_clock_set_mask+0x2c>
     d72:	2b02      	cmp	r3, #2
     d74:	d00f      	beq.n	d96 <system_apb_clock_set_mask+0x3a>
     d76:	2b00      	cmp	r3, #0
     d78:	d114      	bne.n	da4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     d7a:	4b0e      	ldr	r3, [pc, #56]	; (db4 <system_apb_clock_set_mask+0x58>)
     d7c:	4a0d      	ldr	r2, [pc, #52]	; (db4 <system_apb_clock_set_mask+0x58>)
     d7e:	6991      	ldr	r1, [r2, #24]
     d80:	683a      	ldr	r2, [r7, #0]
     d82:	430a      	orrs	r2, r1
     d84:	619a      	str	r2, [r3, #24]
			break;
     d86:	e00f      	b.n	da8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     d88:	4b0a      	ldr	r3, [pc, #40]	; (db4 <system_apb_clock_set_mask+0x58>)
     d8a:	4a0a      	ldr	r2, [pc, #40]	; (db4 <system_apb_clock_set_mask+0x58>)
     d8c:	69d1      	ldr	r1, [r2, #28]
     d8e:	683a      	ldr	r2, [r7, #0]
     d90:	430a      	orrs	r2, r1
     d92:	61da      	str	r2, [r3, #28]
			break;
     d94:	e008      	b.n	da8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     d96:	4b07      	ldr	r3, [pc, #28]	; (db4 <system_apb_clock_set_mask+0x58>)
     d98:	4a06      	ldr	r2, [pc, #24]	; (db4 <system_apb_clock_set_mask+0x58>)
     d9a:	6a11      	ldr	r1, [r2, #32]
     d9c:	683a      	ldr	r2, [r7, #0]
     d9e:	430a      	orrs	r2, r1
     da0:	621a      	str	r2, [r3, #32]
			break;
     da2:	e001      	b.n	da8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     da4:	2317      	movs	r3, #23
     da6:	e000      	b.n	daa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     da8:	2300      	movs	r3, #0
}
     daa:	0018      	movs	r0, r3
     dac:	46bd      	mov	sp, r7
     dae:	b002      	add	sp, #8
     db0:	bd80      	pop	{r7, pc}
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	40000400 	.word	0x40000400

00000db8 <system_pinmux_get_config_defaults>:
{
     db8:	b580      	push	{r7, lr}
     dba:	b082      	sub	sp, #8
     dbc:	af00      	add	r7, sp, #0
     dbe:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     dc0:	687b      	ldr	r3, [r7, #4]
     dc2:	2280      	movs	r2, #128	; 0x80
     dc4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	2200      	movs	r2, #0
     dca:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     dcc:	687b      	ldr	r3, [r7, #4]
     dce:	2201      	movs	r2, #1
     dd0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     dd2:	687b      	ldr	r3, [r7, #4]
     dd4:	2200      	movs	r2, #0
     dd6:	70da      	strb	r2, [r3, #3]
}
     dd8:	46c0      	nop			; (mov r8, r8)
     dda:	46bd      	mov	sp, r7
     ddc:	b002      	add	sp, #8
     dde:	bd80      	pop	{r7, pc}

00000de0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     de0:	b580      	push	{r7, lr}
     de2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     de4:	4b05      	ldr	r3, [pc, #20]	; (dfc <system_is_debugger_present+0x1c>)
     de6:	789b      	ldrb	r3, [r3, #2]
     de8:	b2db      	uxtb	r3, r3
     dea:	001a      	movs	r2, r3
     dec:	2302      	movs	r3, #2
     dee:	4013      	ands	r3, r2
     df0:	1e5a      	subs	r2, r3, #1
     df2:	4193      	sbcs	r3, r2
     df4:	b2db      	uxtb	r3, r3
}
     df6:	0018      	movs	r0, r3
     df8:	46bd      	mov	sp, r7
     dfa:	bd80      	pop	{r7, pc}
     dfc:	41002000 	.word	0x41002000

00000e00 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     e00:	b580      	push	{r7, lr}
     e02:	b084      	sub	sp, #16
     e04:	af00      	add	r7, sp, #0
     e06:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     e08:	687b      	ldr	r3, [r7, #4]
     e0a:	681b      	ldr	r3, [r3, #0]
     e0c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     e0e:	68fb      	ldr	r3, [r7, #12]
     e10:	69db      	ldr	r3, [r3, #28]
     e12:	2207      	movs	r2, #7
     e14:	4013      	ands	r3, r2
     e16:	1e5a      	subs	r2, r3, #1
     e18:	4193      	sbcs	r3, r2
     e1a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     e1c:	0018      	movs	r0, r3
     e1e:	46bd      	mov	sp, r7
     e20:	b004      	add	sp, #16
     e22:	bd80      	pop	{r7, pc}

00000e24 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     e24:	b580      	push	{r7, lr}
     e26:	b082      	sub	sp, #8
     e28:	af00      	add	r7, sp, #0
     e2a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     e2c:	46c0      	nop			; (mov r8, r8)
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	0018      	movs	r0, r3
     e32:	4b04      	ldr	r3, [pc, #16]	; (e44 <_i2c_master_wait_for_sync+0x20>)
     e34:	4798      	blx	r3
     e36:	1e03      	subs	r3, r0, #0
     e38:	d1f9      	bne.n	e2e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	46bd      	mov	sp, r7
     e3e:	b002      	add	sp, #8
     e40:	bd80      	pop	{r7, pc}
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	00000e01 	.word	0x00000e01

00000e48 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
     e48:	b5f0      	push	{r4, r5, r6, r7, lr}
     e4a:	b095      	sub	sp, #84	; 0x54
     e4c:	af00      	add	r7, sp, #0
     e4e:	60f8      	str	r0, [r7, #12]
     e50:	60b9      	str	r1, [r7, #8]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
     e52:	2300      	movs	r3, #0
     e54:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t tmp_baud_hs = 0;
     e56:	2300      	movs	r3, #0
     e58:	64bb      	str	r3, [r7, #72]	; 0x48
	int32_t tmp_baudlow_hs = 0;
     e5a:	2300      	movs	r3, #0
     e5c:	647b      	str	r3, [r7, #68]	; 0x44
	enum status_code tmp_status_code = STATUS_OK;
     e5e:	233b      	movs	r3, #59	; 0x3b
     e60:	2208      	movs	r2, #8
     e62:	4694      	mov	ip, r2
     e64:	44bc      	add	ip, r7
     e66:	4463      	add	r3, ip
     e68:	2200      	movs	r2, #0
     e6a:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     e6c:	68fb      	ldr	r3, [r7, #12]
     e6e:	681b      	ldr	r3, [r3, #0]
     e70:	633b      	str	r3, [r7, #48]	; 0x30
	Sercom *const sercom_hw = module->hw;
     e72:	68fb      	ldr	r3, [r7, #12]
     e74:	681b      	ldr	r3, [r3, #0]
     e76:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     e78:	2323      	movs	r3, #35	; 0x23
     e7a:	2208      	movs	r2, #8
     e7c:	18ba      	adds	r2, r7, r2
     e7e:	18d4      	adds	r4, r2, r3
     e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e82:	0018      	movs	r0, r3
     e84:	4bdb      	ldr	r3, [pc, #876]	; (11f4 <_i2c_master_set_config+0x3ac>)
     e86:	4798      	blx	r3
     e88:	0003      	movs	r3, r0
     e8a:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     e8c:	230c      	movs	r3, #12
     e8e:	2208      	movs	r2, #8
     e90:	4694      	mov	ip, r2
     e92:	44bc      	add	ip, r7
     e94:	4463      	add	r3, ip
     e96:	0018      	movs	r0, r3
     e98:	4bd7      	ldr	r3, [pc, #860]	; (11f8 <_i2c_master_set_config+0x3b0>)
     e9a:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
     e9c:	68bb      	ldr	r3, [r7, #8]
     e9e:	69db      	ldr	r3, [r3, #28]
     ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pad1 = config->pinmux_pad1;
     ea2:	68bb      	ldr	r3, [r7, #8]
     ea4:	6a1b      	ldr	r3, [r3, #32]
     ea6:	63bb      	str	r3, [r7, #56]	; 0x38

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     eaa:	2b00      	cmp	r3, #0
     eac:	d106      	bne.n	ebc <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     eb0:	2100      	movs	r1, #0
     eb2:	0018      	movs	r0, r3
     eb4:	4bd1      	ldr	r3, [pc, #836]	; (11fc <_i2c_master_set_config+0x3b4>)
     eb6:	4798      	blx	r3
     eb8:	0003      	movs	r3, r0
     eba:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ebe:	b2da      	uxtb	r2, r3
     ec0:	230c      	movs	r3, #12
     ec2:	2108      	movs	r1, #8
     ec4:	468c      	mov	ip, r1
     ec6:	44bc      	add	ip, r7
     ec8:	4463      	add	r3, ip
     eca:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     ecc:	230c      	movs	r3, #12
     ece:	2208      	movs	r2, #8
     ed0:	4694      	mov	ip, r2
     ed2:	44bc      	add	ip, r7
     ed4:	4463      	add	r3, ip
     ed6:	2202      	movs	r2, #2
     ed8:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     edc:	0c1b      	lsrs	r3, r3, #16
     ede:	b2db      	uxtb	r3, r3
     ee0:	220c      	movs	r2, #12
     ee2:	2108      	movs	r1, #8
     ee4:	468c      	mov	ip, r1
     ee6:	44bc      	add	ip, r7
     ee8:	4462      	add	r2, ip
     eea:	0011      	movs	r1, r2
     eec:	0018      	movs	r0, r3
     eee:	4bc4      	ldr	r3, [pc, #784]	; (1200 <_i2c_master_set_config+0x3b8>)
     ef0:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ef4:	2b00      	cmp	r3, #0
     ef6:	d106      	bne.n	f06 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     efa:	2101      	movs	r1, #1
     efc:	0018      	movs	r0, r3
     efe:	4bbf      	ldr	r3, [pc, #764]	; (11fc <_i2c_master_set_config+0x3b4>)
     f00:	4798      	blx	r3
     f02:	0003      	movs	r3, r0
     f04:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f08:	b2da      	uxtb	r2, r3
     f0a:	230c      	movs	r3, #12
     f0c:	2108      	movs	r1, #8
     f0e:	468c      	mov	ip, r1
     f10:	44bc      	add	ip, r7
     f12:	4463      	add	r3, ip
     f14:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     f16:	230c      	movs	r3, #12
     f18:	2208      	movs	r2, #8
     f1a:	4694      	mov	ip, r2
     f1c:	44bc      	add	ip, r7
     f1e:	4463      	add	r3, ip
     f20:	2202      	movs	r2, #2
     f22:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f26:	0c1b      	lsrs	r3, r3, #16
     f28:	b2db      	uxtb	r3, r3
     f2a:	220c      	movs	r2, #12
     f2c:	2108      	movs	r1, #8
     f2e:	468c      	mov	ip, r1
     f30:	44bc      	add	ip, r7
     f32:	4462      	add	r2, ip
     f34:	0011      	movs	r1, r2
     f36:	0018      	movs	r0, r3
     f38:	4bb1      	ldr	r3, [pc, #708]	; (1200 <_i2c_master_set_config+0x3b8>)
     f3a:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     f3c:	68bb      	ldr	r3, [r7, #8]
     f3e:	8a9a      	ldrh	r2, [r3, #20]
     f40:	68fb      	ldr	r3, [r7, #12]
     f42:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     f44:	68bb      	ldr	r3, [r7, #8]
     f46:	8ada      	ldrh	r2, [r3, #22]
     f48:	68fb      	ldr	r3, [r7, #12]
     f4a:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     f4c:	68bb      	ldr	r3, [r7, #8]
     f4e:	7e1b      	ldrb	r3, [r3, #24]
     f50:	2b00      	cmp	r3, #0
     f52:	d103      	bne.n	f5c <_i2c_master_set_config+0x114>
     f54:	4bab      	ldr	r3, [pc, #684]	; (1204 <_i2c_master_set_config+0x3bc>)
     f56:	4798      	blx	r3
     f58:	1e03      	subs	r3, r0, #0
     f5a:	d002      	beq.n	f62 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     f5c:	2380      	movs	r3, #128	; 0x80
     f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
     f60:	e001      	b.n	f66 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
     f62:	2300      	movs	r3, #0
     f64:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     f66:	68bb      	ldr	r3, [r7, #8]
     f68:	691b      	ldr	r3, [r3, #16]
     f6a:	2b00      	cmp	r3, #0
     f6c:	d004      	beq.n	f78 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
     f6e:	68bb      	ldr	r3, [r7, #8]
     f70:	691b      	ldr	r3, [r3, #16]
     f72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f74:	4313      	orrs	r3, r2
     f76:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     f78:	68bb      	ldr	r3, [r7, #8]
     f7a:	689b      	ldr	r3, [r3, #8]
     f7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f7e:	4313      	orrs	r3, r2
     f80:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     f82:	68bb      	ldr	r3, [r7, #8]
     f84:	2224      	movs	r2, #36	; 0x24
     f86:	5c9b      	ldrb	r3, [r3, r2]
     f88:	2b00      	cmp	r3, #0
     f8a:	d004      	beq.n	f96 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f8e:	2280      	movs	r2, #128	; 0x80
     f90:	05d2      	lsls	r2, r2, #23
     f92:	4313      	orrs	r3, r2
     f94:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     f96:	68bb      	ldr	r3, [r7, #8]
     f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f9a:	2b00      	cmp	r3, #0
     f9c:	d004      	beq.n	fa8 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
     f9e:	68bb      	ldr	r3, [r7, #8]
     fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     fa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     fa4:	4313      	orrs	r3, r2
     fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     fa8:	68bb      	ldr	r3, [r7, #8]
     faa:	222c      	movs	r2, #44	; 0x2c
     fac:	5c9b      	ldrb	r3, [r3, r2]
     fae:	2b00      	cmp	r3, #0
     fb0:	d105      	bne.n	fbe <_i2c_master_set_config+0x176>
     fb2:	68bb      	ldr	r3, [r7, #8]
     fb4:	689a      	ldr	r2, [r3, #8]
     fb6:	2380      	movs	r3, #128	; 0x80
     fb8:	049b      	lsls	r3, r3, #18
     fba:	429a      	cmp	r2, r3
     fbc:	d104      	bne.n	fc8 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     fc0:	2280      	movs	r2, #128	; 0x80
     fc2:	0512      	lsls	r2, r2, #20
     fc4:	4313      	orrs	r3, r2
     fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     fc8:	68bb      	ldr	r3, [r7, #8]
     fca:	222d      	movs	r2, #45	; 0x2d
     fcc:	5c9b      	ldrb	r3, [r3, r2]
     fce:	2b00      	cmp	r3, #0
     fd0:	d004      	beq.n	fdc <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     fd4:	2280      	movs	r2, #128	; 0x80
     fd6:	0412      	lsls	r2, r2, #16
     fd8:	4313      	orrs	r3, r2
     fda:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     fdc:	68bb      	ldr	r3, [r7, #8]
     fde:	222e      	movs	r2, #46	; 0x2e
     fe0:	5c9b      	ldrb	r3, [r3, r2]
     fe2:	2b00      	cmp	r3, #0
     fe4:	d004      	beq.n	ff0 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     fe8:	2280      	movs	r2, #128	; 0x80
     fea:	03d2      	lsls	r2, r2, #15
     fec:	4313      	orrs	r3, r2
     fee:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ff2:	681a      	ldr	r2, [r3, #0]
     ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     ff6:	431a      	orrs	r2, r3
     ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ffa:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ffe:	2280      	movs	r2, #128	; 0x80
    1000:	0052      	lsls	r2, r2, #1
    1002:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    1004:	2323      	movs	r3, #35	; 0x23
    1006:	2208      	movs	r2, #8
    1008:	4694      	mov	ip, r2
    100a:	44bc      	add	ip, r7
    100c:	4463      	add	r3, ip
    100e:	781b      	ldrb	r3, [r3, #0]
    1010:	3314      	adds	r3, #20
    1012:	b2db      	uxtb	r3, r3
    1014:	0018      	movs	r0, r3
    1016:	4b7c      	ldr	r3, [pc, #496]	; (1208 <_i2c_master_set_config+0x3c0>)
    1018:	4798      	blx	r3
    101a:	0003      	movs	r3, r0
    101c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fscl        = 1000 * config->baud_rate;
    101e:	68bb      	ldr	r3, [r7, #8]
    1020:	681b      	ldr	r3, [r3, #0]
    1022:	22fa      	movs	r2, #250	; 0xfa
    1024:	0092      	lsls	r2, r2, #2
    1026:	4353      	muls	r3, r2
    1028:	623b      	str	r3, [r7, #32]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    102a:	68bb      	ldr	r3, [r7, #8]
    102c:	685b      	ldr	r3, [r3, #4]
    102e:	22fa      	movs	r2, #250	; 0xfa
    1030:	0092      	lsls	r2, r2, #2
    1032:	4353      	muls	r3, r2
    1034:	61fb      	str	r3, [r7, #28]
	uint32_t trise       = config->sda_scl_rise_time_ns;
    1036:	68bb      	ldr	r3, [r7, #8]
    1038:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    103a:	61bb      	str	r3, [r7, #24]
	
	tmp_baud = (int32_t)(div_ceil(
    103c:	4b73      	ldr	r3, [pc, #460]	; (120c <_i2c_master_set_config+0x3c4>)
    103e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1040:	4798      	blx	r3
    1042:	0005      	movs	r5, r0
    1044:	000e      	movs	r6, r1
    1046:	4b71      	ldr	r3, [pc, #452]	; (120c <_i2c_master_set_config+0x3c4>)
    1048:	6a38      	ldr	r0, [r7, #32]
    104a:	4798      	blx	r3
    104c:	6038      	str	r0, [r7, #0]
    104e:	6079      	str	r1, [r7, #4]
    1050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1052:	69ba      	ldr	r2, [r7, #24]
    1054:	435a      	muls	r2, r3
    1056:	4b6d      	ldr	r3, [pc, #436]	; (120c <_i2c_master_set_config+0x3c4>)
    1058:	0010      	movs	r0, r2
    105a:	4798      	blx	r3
    105c:	4c6c      	ldr	r4, [pc, #432]	; (1210 <_i2c_master_set_config+0x3c8>)
    105e:	4a6d      	ldr	r2, [pc, #436]	; (1214 <_i2c_master_set_config+0x3cc>)
    1060:	4b6d      	ldr	r3, [pc, #436]	; (1218 <_i2c_master_set_config+0x3d0>)
    1062:	47a0      	blx	r4
    1064:	0003      	movs	r3, r0
    1066:	000c      	movs	r4, r1
    1068:	0018      	movs	r0, r3
    106a:	0021      	movs	r1, r4
    106c:	4c6b      	ldr	r4, [pc, #428]	; (121c <_i2c_master_set_config+0x3d4>)
    106e:	2200      	movs	r2, #0
    1070:	4b6b      	ldr	r3, [pc, #428]	; (1220 <_i2c_master_set_config+0x3d8>)
    1072:	47a0      	blx	r4
    1074:	0003      	movs	r3, r0
    1076:	000c      	movs	r4, r1
    1078:	001a      	movs	r2, r3
    107a:	0023      	movs	r3, r4
    107c:	4c64      	ldr	r4, [pc, #400]	; (1210 <_i2c_master_set_config+0x3c8>)
    107e:	6838      	ldr	r0, [r7, #0]
    1080:	6879      	ldr	r1, [r7, #4]
    1082:	47a0      	blx	r4
    1084:	0003      	movs	r3, r0
    1086:	000c      	movs	r4, r1
    1088:	001a      	movs	r2, r3
    108a:	0023      	movs	r3, r4
    108c:	4c65      	ldr	r4, [pc, #404]	; (1224 <_i2c_master_set_config+0x3dc>)
    108e:	0028      	movs	r0, r5
    1090:	0031      	movs	r1, r6
    1092:	47a0      	blx	r4
    1094:	0003      	movs	r3, r0
    1096:	000c      	movs	r4, r1
    1098:	001d      	movs	r5, r3
    109a:	0026      	movs	r6, r4
    109c:	6a3b      	ldr	r3, [r7, #32]
    109e:	005a      	lsls	r2, r3, #1
    10a0:	4b5a      	ldr	r3, [pc, #360]	; (120c <_i2c_master_set_config+0x3c4>)
    10a2:	0010      	movs	r0, r2
    10a4:	4798      	blx	r3
    10a6:	0002      	movs	r2, r0
    10a8:	000b      	movs	r3, r1
    10aa:	4c5c      	ldr	r4, [pc, #368]	; (121c <_i2c_master_set_config+0x3d4>)
    10ac:	0028      	movs	r0, r5
    10ae:	0031      	movs	r1, r6
    10b0:	47a0      	blx	r4
    10b2:	0003      	movs	r3, r0
    10b4:	000c      	movs	r4, r1
    10b6:	0018      	movs	r0, r3
    10b8:	0021      	movs	r1, r4
    10ba:	4c5a      	ldr	r4, [pc, #360]	; (1224 <_i2c_master_set_config+0x3dc>)
    10bc:	2200      	movs	r2, #0
    10be:	4b5a      	ldr	r3, [pc, #360]	; (1228 <_i2c_master_set_config+0x3e0>)
    10c0:	47a0      	blx	r4
    10c2:	0003      	movs	r3, r0
    10c4:	000c      	movs	r4, r1
    10c6:	001d      	movs	r5, r3
    10c8:	0026      	movs	r6, r4
    10ca:	6a3b      	ldr	r3, [r7, #32]
    10cc:	005a      	lsls	r2, r3, #1
    10ce:	4b4f      	ldr	r3, [pc, #316]	; (120c <_i2c_master_set_config+0x3c4>)
    10d0:	0010      	movs	r0, r2
    10d2:	4798      	blx	r3
    10d4:	0002      	movs	r2, r0
    10d6:	000b      	movs	r3, r1
    10d8:	4c54      	ldr	r4, [pc, #336]	; (122c <_i2c_master_set_config+0x3e4>)
    10da:	0028      	movs	r0, r5
    10dc:	0031      	movs	r1, r6
    10de:	47a0      	blx	r4
    10e0:	0003      	movs	r3, r0
    10e2:	000c      	movs	r4, r1
    10e4:	0019      	movs	r1, r3
    10e6:	0022      	movs	r2, r4
    10e8:	4b51      	ldr	r3, [pc, #324]	; (1230 <_i2c_master_set_config+0x3e8>)
    10ea:	0008      	movs	r0, r1
    10ec:	0011      	movs	r1, r2
    10ee:	4798      	blx	r3
    10f0:	0003      	movs	r3, r0
    10f2:	637b      	str	r3, [r7, #52]	; 0x34
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    10f4:	68bb      	ldr	r3, [r7, #8]
    10f6:	689a      	ldr	r2, [r3, #8]
    10f8:	2380      	movs	r3, #128	; 0x80
    10fa:	049b      	lsls	r3, r3, #18
    10fc:	429a      	cmp	r2, r3
    10fe:	d145      	bne.n	118c <_i2c_master_set_config+0x344>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    1100:	4b42      	ldr	r3, [pc, #264]	; (120c <_i2c_master_set_config+0x3c4>)
    1102:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1104:	4798      	blx	r3
    1106:	4c45      	ldr	r4, [pc, #276]	; (121c <_i2c_master_set_config+0x3d4>)
    1108:	0002      	movs	r2, r0
    110a:	000b      	movs	r3, r1
    110c:	47a0      	blx	r4
    110e:	0003      	movs	r3, r0
    1110:	000c      	movs	r4, r1
    1112:	001d      	movs	r5, r3
    1114:	0026      	movs	r6, r4
    1116:	4b3d      	ldr	r3, [pc, #244]	; (120c <_i2c_master_set_config+0x3c4>)
    1118:	69f8      	ldr	r0, [r7, #28]
    111a:	4798      	blx	r3
    111c:	4c3c      	ldr	r4, [pc, #240]	; (1210 <_i2c_master_set_config+0x3c8>)
    111e:	2200      	movs	r2, #0
    1120:	4b44      	ldr	r3, [pc, #272]	; (1234 <_i2c_master_set_config+0x3ec>)
    1122:	47a0      	blx	r4
    1124:	0003      	movs	r3, r0
    1126:	000c      	movs	r4, r1
    1128:	001a      	movs	r2, r3
    112a:	0023      	movs	r3, r4
    112c:	4c3f      	ldr	r4, [pc, #252]	; (122c <_i2c_master_set_config+0x3e4>)
    112e:	0028      	movs	r0, r5
    1130:	0031      	movs	r1, r6
    1132:	47a0      	blx	r4
    1134:	0003      	movs	r3, r0
    1136:	000c      	movs	r4, r1
    1138:	0018      	movs	r0, r3
    113a:	0021      	movs	r1, r4
    113c:	4c39      	ldr	r4, [pc, #228]	; (1224 <_i2c_master_set_config+0x3dc>)
    113e:	2200      	movs	r2, #0
    1140:	4b39      	ldr	r3, [pc, #228]	; (1228 <_i2c_master_set_config+0x3e0>)
    1142:	47a0      	blx	r4
    1144:	0003      	movs	r3, r0
    1146:	000c      	movs	r4, r1
    1148:	0019      	movs	r1, r3
    114a:	0022      	movs	r2, r4
    114c:	4b38      	ldr	r3, [pc, #224]	; (1230 <_i2c_master_set_config+0x3e8>)
    114e:	0008      	movs	r0, r1
    1150:	0011      	movs	r1, r2
    1152:	4798      	blx	r3
    1154:	0003      	movs	r3, r0
    1156:	647b      	str	r3, [r7, #68]	; 0x44
		if (tmp_baudlow_hs) {
    1158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    115a:	2b00      	cmp	r3, #0
    115c:	d009      	beq.n	1172 <_i2c_master_set_config+0x32a>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    115e:	4b36      	ldr	r3, [pc, #216]	; (1238 <_i2c_master_set_config+0x3f0>)
    1160:	69f9      	ldr	r1, [r7, #28]
    1162:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1164:	4798      	blx	r3
    1166:	0003      	movs	r3, r0
    1168:	1e9a      	subs	r2, r3, #2
    116a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    116c:	1ad3      	subs	r3, r2, r3
    116e:	64bb      	str	r3, [r7, #72]	; 0x48
    1170:	e00c      	b.n	118c <_i2c_master_set_config+0x344>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    1172:	69fb      	ldr	r3, [r7, #28]
    1174:	005a      	lsls	r2, r3, #1
    1176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1178:	18d3      	adds	r3, r2, r3
    117a:	1e5a      	subs	r2, r3, #1
    117c:	69fb      	ldr	r3, [r7, #28]
    117e:	0059      	lsls	r1, r3, #1
    1180:	4b2d      	ldr	r3, [pc, #180]	; (1238 <_i2c_master_set_config+0x3f0>)
    1182:	0010      	movs	r0, r2
    1184:	4798      	blx	r3
    1186:	0003      	movs	r3, r0
    1188:	3b01      	subs	r3, #1
    118a:	64bb      	str	r3, [r7, #72]	; 0x48
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    118c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    118e:	2bff      	cmp	r3, #255	; 0xff
    1190:	dc08      	bgt.n	11a4 <_i2c_master_set_config+0x35c>
    1192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1194:	2b00      	cmp	r3, #0
    1196:	db05      	blt.n	11a4 <_i2c_master_set_config+0x35c>
    1198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    119a:	2bff      	cmp	r3, #255	; 0xff
    119c:	dc02      	bgt.n	11a4 <_i2c_master_set_config+0x35c>
    119e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    11a0:	2b00      	cmp	r3, #0
    11a2:	da06      	bge.n	11b2 <_i2c_master_set_config+0x36a>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    11a4:	233b      	movs	r3, #59	; 0x3b
    11a6:	2208      	movs	r2, #8
    11a8:	4694      	mov	ip, r2
    11aa:	44bc      	add	ip, r7
    11ac:	4463      	add	r3, ip
    11ae:	2240      	movs	r2, #64	; 0x40
    11b0:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    11b2:	233b      	movs	r3, #59	; 0x3b
    11b4:	2208      	movs	r2, #8
    11b6:	4694      	mov	ip, r2
    11b8:	44bc      	add	ip, r7
    11ba:	4463      	add	r3, ip
    11bc:	781b      	ldrb	r3, [r3, #0]
    11be:	2b40      	cmp	r3, #64	; 0x40
    11c0:	d00e      	beq.n	11e0 <_i2c_master_set_config+0x398>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    11c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11c4:	22ff      	movs	r2, #255	; 0xff
    11c6:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    11c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    11ca:	041b      	lsls	r3, r3, #16
    11cc:	0019      	movs	r1, r3
    11ce:	23ff      	movs	r3, #255	; 0xff
    11d0:	041b      	lsls	r3, r3, #16
    11d2:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    11d4:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    11d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    11d8:	0612      	lsls	r2, r2, #24
    11da:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    11dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11de:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    11e0:	233b      	movs	r3, #59	; 0x3b
    11e2:	2208      	movs	r2, #8
    11e4:	4694      	mov	ip, r2
    11e6:	44bc      	add	ip, r7
    11e8:	4463      	add	r3, ip
    11ea:	781b      	ldrb	r3, [r3, #0]
}
    11ec:	0018      	movs	r0, r3
    11ee:	46bd      	mov	sp, r7
    11f0:	b015      	add	sp, #84	; 0x54
    11f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11f4:	00001ac9 	.word	0x00001ac9
    11f8:	00000db9 	.word	0x00000db9
    11fc:	0000190d 	.word	0x0000190d
    1200:	00005d2d 	.word	0x00005d2d
    1204:	00000de1 	.word	0x00000de1
    1208:	00005b65 	.word	0x00005b65
    120c:	00008125 	.word	0x00008125
    1210:	00007591 	.word	0x00007591
    1214:	e826d695 	.word	0xe826d695
    1218:	3e112e0b 	.word	0x3e112e0b
    121c:	00006909 	.word	0x00006909
    1220:	40240000 	.word	0x40240000
    1224:	00007a91 	.word	0x00007a91
    1228:	3ff00000 	.word	0x3ff00000
    122c:	00006f29 	.word	0x00006f29
    1230:	000080bd 	.word	0x000080bd
    1234:	40080000 	.word	0x40080000
    1238:	00006409 	.word	0x00006409

0000123c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    123c:	b580      	push	{r7, lr}
    123e:	b08a      	sub	sp, #40	; 0x28
    1240:	af00      	add	r7, sp, #0
    1242:	60f8      	str	r0, [r7, #12]
    1244:	60b9      	str	r1, [r7, #8]
    1246:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    1248:	68fb      	ldr	r3, [r7, #12]
    124a:	68ba      	ldr	r2, [r7, #8]
    124c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    124e:	68fb      	ldr	r3, [r7, #12]
    1250:	681b      	ldr	r3, [r3, #0]
    1252:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1254:	68fb      	ldr	r3, [r7, #12]
    1256:	681b      	ldr	r3, [r3, #0]
    1258:	0018      	movs	r0, r3
    125a:	4b25      	ldr	r3, [pc, #148]	; (12f0 <i2c_master_init+0xb4>)
    125c:	4798      	blx	r3
    125e:	0003      	movs	r3, r0
    1260:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1262:	6a3b      	ldr	r3, [r7, #32]
    1264:	3302      	adds	r3, #2
    1266:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1268:	6a3b      	ldr	r3, [r7, #32]
    126a:	3314      	adds	r3, #20
    126c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    126e:	2201      	movs	r2, #1
    1270:	69fb      	ldr	r3, [r7, #28]
    1272:	409a      	lsls	r2, r3
    1274:	0013      	movs	r3, r2
    1276:	0019      	movs	r1, r3
    1278:	2002      	movs	r0, #2
    127a:	4b1e      	ldr	r3, [pc, #120]	; (12f4 <i2c_master_init+0xb8>)
    127c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    127e:	2314      	movs	r3, #20
    1280:	18fb      	adds	r3, r7, r3
    1282:	0018      	movs	r0, r3
    1284:	4b1c      	ldr	r3, [pc, #112]	; (12f8 <i2c_master_init+0xbc>)
    1286:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1288:	687b      	ldr	r3, [r7, #4]
    128a:	7b1a      	ldrb	r2, [r3, #12]
    128c:	2314      	movs	r3, #20
    128e:	18fb      	adds	r3, r7, r3
    1290:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1292:	69bb      	ldr	r3, [r7, #24]
    1294:	b2db      	uxtb	r3, r3
    1296:	2214      	movs	r2, #20
    1298:	18ba      	adds	r2, r7, r2
    129a:	0011      	movs	r1, r2
    129c:	0018      	movs	r0, r3
    129e:	4b17      	ldr	r3, [pc, #92]	; (12fc <i2c_master_init+0xc0>)
    12a0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	b2db      	uxtb	r3, r3
    12a6:	0018      	movs	r0, r3
    12a8:	4b15      	ldr	r3, [pc, #84]	; (1300 <i2c_master_init+0xc4>)
    12aa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    12ac:	687b      	ldr	r3, [r7, #4]
    12ae:	7b1b      	ldrb	r3, [r3, #12]
    12b0:	2100      	movs	r1, #0
    12b2:	0018      	movs	r0, r3
    12b4:	4b13      	ldr	r3, [pc, #76]	; (1304 <i2c_master_init+0xc8>)
    12b6:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    12b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12ba:	681b      	ldr	r3, [r3, #0]
    12bc:	2202      	movs	r2, #2
    12be:	4013      	ands	r3, r2
    12c0:	d001      	beq.n	12c6 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    12c2:	231c      	movs	r3, #28
    12c4:	e010      	b.n	12e8 <i2c_master_init+0xac>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    12c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12c8:	681b      	ldr	r3, [r3, #0]
    12ca:	2201      	movs	r2, #1
    12cc:	4013      	ands	r3, r2
    12ce:	d001      	beq.n	12d4 <i2c_master_init+0x98>
		return STATUS_BUSY;
    12d0:	2305      	movs	r3, #5
    12d2:	e009      	b.n	12e8 <i2c_master_init+0xac>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    12d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12d6:	2214      	movs	r2, #20
    12d8:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    12da:	687a      	ldr	r2, [r7, #4]
    12dc:	68fb      	ldr	r3, [r7, #12]
    12de:	0011      	movs	r1, r2
    12e0:	0018      	movs	r0, r3
    12e2:	4b09      	ldr	r3, [pc, #36]	; (1308 <i2c_master_init+0xcc>)
    12e4:	4798      	blx	r3
    12e6:	0003      	movs	r3, r0
}
    12e8:	0018      	movs	r0, r3
    12ea:	46bd      	mov	sp, r7
    12ec:	b00a      	add	sp, #40	; 0x28
    12ee:	bd80      	pop	{r7, pc}
    12f0:	00001ac9 	.word	0x00001ac9
    12f4:	00000d5d 	.word	0x00000d5d
    12f8:	00000d45 	.word	0x00000d45
    12fc:	000059f9 	.word	0x000059f9
    1300:	00005a3d 	.word	0x00005a3d
    1304:	00001881 	.word	0x00001881
    1308:	00000e49 	.word	0x00000e49

0000130c <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    130c:	b580      	push	{r7, lr}
    130e:	b084      	sub	sp, #16
    1310:	af00      	add	r7, sp, #0
    1312:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1314:	687b      	ldr	r3, [r7, #4]
    1316:	681b      	ldr	r3, [r3, #0]
    1318:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    131a:	68fb      	ldr	r3, [r7, #12]
    131c:	7e1b      	ldrb	r3, [r3, #24]
    131e:	b2db      	uxtb	r3, r3
    1320:	001a      	movs	r2, r3
    1322:	2302      	movs	r3, #2
    1324:	4013      	ands	r3, r2
    1326:	d00b      	beq.n	1340 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1328:	68fb      	ldr	r3, [r7, #12]
    132a:	2202      	movs	r2, #2
    132c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    132e:	68fb      	ldr	r3, [r7, #12]
    1330:	8b5b      	ldrh	r3, [r3, #26]
    1332:	b29b      	uxth	r3, r3
    1334:	001a      	movs	r2, r3
    1336:	2302      	movs	r3, #2
    1338:	4013      	ands	r3, r2
    133a:	d011      	beq.n	1360 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    133c:	2341      	movs	r3, #65	; 0x41
    133e:	e010      	b.n	1362 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1340:	68fb      	ldr	r3, [r7, #12]
    1342:	8b5b      	ldrh	r3, [r3, #26]
    1344:	b29b      	uxth	r3, r3
    1346:	001a      	movs	r2, r3
    1348:	2304      	movs	r3, #4
    134a:	4013      	ands	r3, r2
    134c:	d008      	beq.n	1360 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    134e:	68fb      	ldr	r3, [r7, #12]
    1350:	685b      	ldr	r3, [r3, #4]
    1352:	22c0      	movs	r2, #192	; 0xc0
    1354:	0292      	lsls	r2, r2, #10
    1356:	431a      	orrs	r2, r3
    1358:	68fb      	ldr	r3, [r7, #12]
    135a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    135c:	2318      	movs	r3, #24
    135e:	e000      	b.n	1362 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    1360:	2300      	movs	r3, #0
}
    1362:	0018      	movs	r0, r3
    1364:	46bd      	mov	sp, r7
    1366:	b004      	add	sp, #16
    1368:	bd80      	pop	{r7, pc}

0000136a <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    136a:	b580      	push	{r7, lr}
    136c:	b084      	sub	sp, #16
    136e:	af00      	add	r7, sp, #0
    1370:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1372:	687b      	ldr	r3, [r7, #4]
    1374:	681b      	ldr	r3, [r3, #0]
    1376:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1378:	230e      	movs	r3, #14
    137a:	18fb      	adds	r3, r7, r3
    137c:	2200      	movs	r2, #0
    137e:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1380:	e00f      	b.n	13a2 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    1382:	230e      	movs	r3, #14
    1384:	18fb      	adds	r3, r7, r3
    1386:	220e      	movs	r2, #14
    1388:	18ba      	adds	r2, r7, r2
    138a:	8812      	ldrh	r2, [r2, #0]
    138c:	3201      	adds	r2, #1
    138e:	801a      	strh	r2, [r3, #0]
    1390:	687b      	ldr	r3, [r7, #4]
    1392:	891b      	ldrh	r3, [r3, #8]
    1394:	220e      	movs	r2, #14
    1396:	18ba      	adds	r2, r7, r2
    1398:	8812      	ldrh	r2, [r2, #0]
    139a:	429a      	cmp	r2, r3
    139c:	d301      	bcc.n	13a2 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    139e:	2312      	movs	r3, #18
    13a0:	e00e      	b.n	13c0 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    13a2:	68bb      	ldr	r3, [r7, #8]
    13a4:	7e1b      	ldrb	r3, [r3, #24]
    13a6:	b2db      	uxtb	r3, r3
    13a8:	001a      	movs	r2, r3
    13aa:	2301      	movs	r3, #1
    13ac:	4013      	ands	r3, r2
    13ae:	d106      	bne.n	13be <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    13b0:	68bb      	ldr	r3, [r7, #8]
    13b2:	7e1b      	ldrb	r3, [r3, #24]
    13b4:	b2db      	uxtb	r3, r3
    13b6:	001a      	movs	r2, r3
    13b8:	2302      	movs	r3, #2
    13ba:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    13bc:	d0e1      	beq.n	1382 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    13be:	2300      	movs	r3, #0
}
    13c0:	0018      	movs	r0, r3
    13c2:	46bd      	mov	sp, r7
    13c4:	b004      	add	sp, #16
    13c6:	bd80      	pop	{r7, pc}

000013c8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    13c8:	b590      	push	{r4, r7, lr}
    13ca:	b085      	sub	sp, #20
    13cc:	af00      	add	r7, sp, #0
    13ce:	6078      	str	r0, [r7, #4]
    13d0:	000a      	movs	r2, r1
    13d2:	1cfb      	adds	r3, r7, #3
    13d4:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13d6:	687b      	ldr	r3, [r7, #4]
    13d8:	681b      	ldr	r3, [r3, #0]
    13da:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    13dc:	68fb      	ldr	r3, [r7, #12]
    13de:	685b      	ldr	r3, [r3, #4]
    13e0:	2280      	movs	r2, #128	; 0x80
    13e2:	02d2      	lsls	r2, r2, #11
    13e4:	431a      	orrs	r2, r3
    13e6:	68fb      	ldr	r3, [r7, #12]
    13e8:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    13ea:	1cfb      	adds	r3, r7, #3
    13ec:	781a      	ldrb	r2, [r3, #0]
    13ee:	68fb      	ldr	r3, [r7, #12]
    13f0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    13f2:	230b      	movs	r3, #11
    13f4:	18fc      	adds	r4, r7, r3
    13f6:	687b      	ldr	r3, [r7, #4]
    13f8:	0018      	movs	r0, r3
    13fa:	4b07      	ldr	r3, [pc, #28]	; (1418 <_i2c_master_send_hs_master_code+0x50>)
    13fc:	4798      	blx	r3
    13fe:	0003      	movs	r3, r0
    1400:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1402:	68fb      	ldr	r3, [r7, #12]
    1404:	2201      	movs	r2, #1
    1406:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    1408:	230b      	movs	r3, #11
    140a:	18fb      	adds	r3, r7, r3
    140c:	781b      	ldrb	r3, [r3, #0]
}
    140e:	0018      	movs	r0, r3
    1410:	46bd      	mov	sp, r7
    1412:	b005      	add	sp, #20
    1414:	bd90      	pop	{r4, r7, pc}
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	0000136b 	.word	0x0000136b

0000141c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    141c:	b590      	push	{r4, r7, lr}
    141e:	b087      	sub	sp, #28
    1420:	af00      	add	r7, sp, #0
    1422:	6078      	str	r0, [r7, #4]
    1424:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1426:	687b      	ldr	r3, [r7, #4]
    1428:	681b      	ldr	r3, [r3, #0]
    142a:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    142c:	2314      	movs	r3, #20
    142e:	18fb      	adds	r3, r7, r3
    1430:	683a      	ldr	r2, [r7, #0]
    1432:	8852      	ldrh	r2, [r2, #2]
    1434:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    1436:	2312      	movs	r3, #18
    1438:	18fb      	adds	r3, r7, r3
    143a:	2200      	movs	r2, #0
    143c:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    143e:	68fb      	ldr	r3, [r7, #12]
    1440:	681b      	ldr	r3, [r3, #0]
    1442:	011b      	lsls	r3, r3, #4
    1444:	0fdb      	lsrs	r3, r3, #31
    1446:	b2db      	uxtb	r3, r3
    1448:	001a      	movs	r2, r3
    144a:	230b      	movs	r3, #11
    144c:	18fb      	adds	r3, r7, r3
    144e:	1e51      	subs	r1, r2, #1
    1450:	418a      	sbcs	r2, r1
    1452:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1454:	683b      	ldr	r3, [r7, #0]
    1456:	7a5b      	ldrb	r3, [r3, #9]
    1458:	2b00      	cmp	r3, #0
    145a:	d006      	beq.n	146a <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    145c:	683b      	ldr	r3, [r7, #0]
    145e:	7a9a      	ldrb	r2, [r3, #10]
    1460:	687b      	ldr	r3, [r7, #4]
    1462:	0011      	movs	r1, r2
    1464:	0018      	movs	r0, r3
    1466:	4b85      	ldr	r3, [pc, #532]	; (167c <_i2c_master_read_packet+0x260>)
    1468:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    146a:	68fb      	ldr	r3, [r7, #12]
    146c:	685b      	ldr	r3, [r3, #4]
    146e:	4a84      	ldr	r2, [pc, #528]	; (1680 <_i2c_master_read_packet+0x264>)
    1470:	401a      	ands	r2, r3
    1472:	68fb      	ldr	r3, [r7, #12]
    1474:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1476:	683b      	ldr	r3, [r7, #0]
    1478:	7a1b      	ldrb	r3, [r3, #8]
    147a:	2b00      	cmp	r3, #0
    147c:	d042      	beq.n	1504 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    147e:	683b      	ldr	r3, [r7, #0]
    1480:	881b      	ldrh	r3, [r3, #0]
    1482:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1484:	683b      	ldr	r3, [r7, #0]
    1486:	7a5b      	ldrb	r3, [r3, #9]
    1488:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    148a:	4313      	orrs	r3, r2
    148c:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    148e:	2380      	movs	r3, #128	; 0x80
    1490:	021b      	lsls	r3, r3, #8
    1492:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    1494:	68fb      	ldr	r3, [r7, #12]
    1496:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    1498:	2317      	movs	r3, #23
    149a:	18fc      	adds	r4, r7, r3
    149c:	687b      	ldr	r3, [r7, #4]
    149e:	0018      	movs	r0, r3
    14a0:	4b78      	ldr	r3, [pc, #480]	; (1684 <_i2c_master_read_packet+0x268>)
    14a2:	4798      	blx	r3
    14a4:	0003      	movs	r3, r0
    14a6:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    14a8:	68fb      	ldr	r3, [r7, #12]
    14aa:	685b      	ldr	r3, [r3, #4]
    14ac:	4a74      	ldr	r2, [pc, #464]	; (1680 <_i2c_master_read_packet+0x264>)
    14ae:	401a      	ands	r2, r3
    14b0:	68fb      	ldr	r3, [r7, #12]
    14b2:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    14b4:	2317      	movs	r3, #23
    14b6:	18fb      	adds	r3, r7, r3
    14b8:	781b      	ldrb	r3, [r3, #0]
    14ba:	2b00      	cmp	r3, #0
    14bc:	d107      	bne.n	14ce <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    14be:	2317      	movs	r3, #23
    14c0:	18fc      	adds	r4, r7, r3
    14c2:	687b      	ldr	r3, [r7, #4]
    14c4:	0018      	movs	r0, r3
    14c6:	4b70      	ldr	r3, [pc, #448]	; (1688 <_i2c_master_read_packet+0x26c>)
    14c8:	4798      	blx	r3
    14ca:	0003      	movs	r3, r0
    14cc:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    14ce:	2317      	movs	r3, #23
    14d0:	18fb      	adds	r3, r7, r3
    14d2:	781b      	ldrb	r3, [r3, #0]
    14d4:	2b00      	cmp	r3, #0
    14d6:	d111      	bne.n	14fc <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    14d8:	683b      	ldr	r3, [r7, #0]
    14da:	881b      	ldrh	r3, [r3, #0]
    14dc:	0a1b      	lsrs	r3, r3, #8
    14de:	b29b      	uxth	r3, r3
    14e0:	2278      	movs	r2, #120	; 0x78
    14e2:	4313      	orrs	r3, r2
    14e4:	b29b      	uxth	r3, r3
    14e6:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    14e8:	683b      	ldr	r3, [r7, #0]
    14ea:	7a5b      	ldrb	r3, [r3, #9]
    14ec:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    14ee:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    14f0:	2201      	movs	r2, #1
    14f2:	4313      	orrs	r3, r2
    14f4:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    14f6:	68fb      	ldr	r3, [r7, #12]
    14f8:	625a      	str	r2, [r3, #36]	; 0x24
    14fa:	e00f      	b.n	151c <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    14fc:	2317      	movs	r3, #23
    14fe:	18fb      	adds	r3, r7, r3
    1500:	781b      	ldrb	r3, [r3, #0]
    1502:	e0b6      	b.n	1672 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1504:	683b      	ldr	r3, [r7, #0]
    1506:	881b      	ldrh	r3, [r3, #0]
    1508:	005b      	lsls	r3, r3, #1
    150a:	2201      	movs	r2, #1
    150c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    150e:	683b      	ldr	r3, [r7, #0]
    1510:	7a5b      	ldrb	r3, [r3, #9]
    1512:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1514:	4313      	orrs	r3, r2
    1516:	001a      	movs	r2, r3
    1518:	68fb      	ldr	r3, [r7, #12]
    151a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    151c:	2317      	movs	r3, #23
    151e:	18fc      	adds	r4, r7, r3
    1520:	687b      	ldr	r3, [r7, #4]
    1522:	0018      	movs	r0, r3
    1524:	4b57      	ldr	r3, [pc, #348]	; (1684 <_i2c_master_read_packet+0x268>)
    1526:	4798      	blx	r3
    1528:	0003      	movs	r3, r0
    152a:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    152c:	230b      	movs	r3, #11
    152e:	18fb      	adds	r3, r7, r3
    1530:	781b      	ldrb	r3, [r3, #0]
    1532:	2b00      	cmp	r3, #0
    1534:	d00b      	beq.n	154e <_i2c_master_read_packet+0x132>
    1536:	683b      	ldr	r3, [r7, #0]
    1538:	885b      	ldrh	r3, [r3, #2]
    153a:	2b01      	cmp	r3, #1
    153c:	d107      	bne.n	154e <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    153e:	68fb      	ldr	r3, [r7, #12]
    1540:	685b      	ldr	r3, [r3, #4]
    1542:	2280      	movs	r2, #128	; 0x80
    1544:	02d2      	lsls	r2, r2, #11
    1546:	431a      	orrs	r2, r3
    1548:	68fb      	ldr	r3, [r7, #12]
    154a:	605a      	str	r2, [r3, #4]
    154c:	e005      	b.n	155a <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    154e:	68fb      	ldr	r3, [r7, #12]
    1550:	685b      	ldr	r3, [r3, #4]
    1552:	4a4b      	ldr	r2, [pc, #300]	; (1680 <_i2c_master_read_packet+0x264>)
    1554:	401a      	ands	r2, r3
    1556:	68fb      	ldr	r3, [r7, #12]
    1558:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    155a:	2317      	movs	r3, #23
    155c:	18fb      	adds	r3, r7, r3
    155e:	781b      	ldrb	r3, [r3, #0]
    1560:	2b00      	cmp	r3, #0
    1562:	d107      	bne.n	1574 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    1564:	2317      	movs	r3, #23
    1566:	18fc      	adds	r4, r7, r3
    1568:	687b      	ldr	r3, [r7, #4]
    156a:	0018      	movs	r0, r3
    156c:	4b46      	ldr	r3, [pc, #280]	; (1688 <_i2c_master_read_packet+0x26c>)
    156e:	4798      	blx	r3
    1570:	0003      	movs	r3, r0
    1572:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1574:	2317      	movs	r3, #23
    1576:	18fb      	adds	r3, r7, r3
    1578:	781b      	ldrb	r3, [r3, #0]
    157a:	2b00      	cmp	r3, #0
    157c:	d000      	beq.n	1580 <_i2c_master_read_packet+0x164>
    157e:	e075      	b.n	166c <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    1580:	e04b      	b.n	161a <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1582:	68fb      	ldr	r3, [r7, #12]
    1584:	8b5b      	ldrh	r3, [r3, #26]
    1586:	b29b      	uxth	r3, r3
    1588:	001a      	movs	r2, r3
    158a:	2320      	movs	r3, #32
    158c:	4013      	ands	r3, r2
    158e:	d101      	bne.n	1594 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    1590:	2341      	movs	r3, #65	; 0x41
    1592:	e06e      	b.n	1672 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    1594:	687b      	ldr	r3, [r7, #4]
    1596:	7adb      	ldrb	r3, [r3, #11]
    1598:	2b00      	cmp	r3, #0
    159a:	d01e      	beq.n	15da <_i2c_master_read_packet+0x1be>
    159c:	230b      	movs	r3, #11
    159e:	18fb      	adds	r3, r7, r3
    15a0:	781b      	ldrb	r3, [r3, #0]
    15a2:	2201      	movs	r2, #1
    15a4:	4053      	eors	r3, r2
    15a6:	b2db      	uxtb	r3, r3
    15a8:	2b00      	cmp	r3, #0
    15aa:	d004      	beq.n	15b6 <_i2c_master_read_packet+0x19a>
    15ac:	2314      	movs	r3, #20
    15ae:	18fb      	adds	r3, r7, r3
    15b0:	881b      	ldrh	r3, [r3, #0]
    15b2:	2b00      	cmp	r3, #0
    15b4:	d009      	beq.n	15ca <_i2c_master_read_packet+0x1ae>
    15b6:	230b      	movs	r3, #11
    15b8:	18fb      	adds	r3, r7, r3
    15ba:	781b      	ldrb	r3, [r3, #0]
    15bc:	2b00      	cmp	r3, #0
    15be:	d00c      	beq.n	15da <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    15c0:	2314      	movs	r3, #20
    15c2:	18fb      	adds	r3, r7, r3
    15c4:	881b      	ldrh	r3, [r3, #0]
    15c6:	2b01      	cmp	r3, #1
    15c8:	d107      	bne.n	15da <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    15ca:	68fb      	ldr	r3, [r7, #12]
    15cc:	685b      	ldr	r3, [r3, #4]
    15ce:	2280      	movs	r2, #128	; 0x80
    15d0:	02d2      	lsls	r2, r2, #11
    15d2:	431a      	orrs	r2, r3
    15d4:	68fb      	ldr	r3, [r7, #12]
    15d6:	605a      	str	r2, [r3, #4]
    15d8:	e01a      	b.n	1610 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    15da:	687b      	ldr	r3, [r7, #4]
    15dc:	0018      	movs	r0, r3
    15de:	4b2b      	ldr	r3, [pc, #172]	; (168c <_i2c_master_read_packet+0x270>)
    15e0:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    15e2:	683b      	ldr	r3, [r7, #0]
    15e4:	685a      	ldr	r2, [r3, #4]
    15e6:	2312      	movs	r3, #18
    15e8:	18fb      	adds	r3, r7, r3
    15ea:	881b      	ldrh	r3, [r3, #0]
    15ec:	2112      	movs	r1, #18
    15ee:	1879      	adds	r1, r7, r1
    15f0:	1c58      	adds	r0, r3, #1
    15f2:	8008      	strh	r0, [r1, #0]
    15f4:	18d3      	adds	r3, r2, r3
    15f6:	68fa      	ldr	r2, [r7, #12]
    15f8:	2128      	movs	r1, #40	; 0x28
    15fa:	5c52      	ldrb	r2, [r2, r1]
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    1600:	2317      	movs	r3, #23
    1602:	18fc      	adds	r4, r7, r3
    1604:	687b      	ldr	r3, [r7, #4]
    1606:	0018      	movs	r0, r3
    1608:	4b1e      	ldr	r3, [pc, #120]	; (1684 <_i2c_master_read_packet+0x268>)
    160a:	4798      	blx	r3
    160c:	0003      	movs	r3, r0
    160e:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1610:	2317      	movs	r3, #23
    1612:	18fb      	adds	r3, r7, r3
    1614:	781b      	ldrb	r3, [r3, #0]
    1616:	2b00      	cmp	r3, #0
    1618:	d109      	bne.n	162e <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    161a:	2314      	movs	r3, #20
    161c:	18fb      	adds	r3, r7, r3
    161e:	881b      	ldrh	r3, [r3, #0]
    1620:	2214      	movs	r2, #20
    1622:	18ba      	adds	r2, r7, r2
    1624:	1e59      	subs	r1, r3, #1
    1626:	8011      	strh	r1, [r2, #0]
    1628:	2b00      	cmp	r3, #0
    162a:	d1aa      	bne.n	1582 <_i2c_master_read_packet+0x166>
    162c:	e000      	b.n	1630 <_i2c_master_read_packet+0x214>
				break;
    162e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    1630:	687b      	ldr	r3, [r7, #4]
    1632:	7a9b      	ldrb	r3, [r3, #10]
    1634:	2b00      	cmp	r3, #0
    1636:	d00a      	beq.n	164e <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    1638:	687b      	ldr	r3, [r7, #4]
    163a:	0018      	movs	r0, r3
    163c:	4b13      	ldr	r3, [pc, #76]	; (168c <_i2c_master_read_packet+0x270>)
    163e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1640:	68fb      	ldr	r3, [r7, #12]
    1642:	685b      	ldr	r3, [r3, #4]
    1644:	22c0      	movs	r2, #192	; 0xc0
    1646:	0292      	lsls	r2, r2, #10
    1648:	431a      	orrs	r2, r3
    164a:	68fb      	ldr	r3, [r7, #12]
    164c:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    164e:	687b      	ldr	r3, [r7, #4]
    1650:	0018      	movs	r0, r3
    1652:	4b0e      	ldr	r3, [pc, #56]	; (168c <_i2c_master_read_packet+0x270>)
    1654:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    1656:	683b      	ldr	r3, [r7, #0]
    1658:	685a      	ldr	r2, [r3, #4]
    165a:	2312      	movs	r3, #18
    165c:	18fb      	adds	r3, r7, r3
    165e:	881b      	ldrh	r3, [r3, #0]
    1660:	18d3      	adds	r3, r2, r3
    1662:	68fa      	ldr	r2, [r7, #12]
    1664:	2128      	movs	r1, #40	; 0x28
    1666:	5c52      	ldrb	r2, [r2, r1]
    1668:	b2d2      	uxtb	r2, r2
    166a:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    166c:	2317      	movs	r3, #23
    166e:	18fb      	adds	r3, r7, r3
    1670:	781b      	ldrb	r3, [r3, #0]
}
    1672:	0018      	movs	r0, r3
    1674:	46bd      	mov	sp, r7
    1676:	b007      	add	sp, #28
    1678:	bd90      	pop	{r4, r7, pc}
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	000013c9 	.word	0x000013c9
    1680:	fffbffff 	.word	0xfffbffff
    1684:	0000136b 	.word	0x0000136b
    1688:	0000130d 	.word	0x0000130d
    168c:	00000e25 	.word	0x00000e25

00001690 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1690:	b580      	push	{r7, lr}
    1692:	b082      	sub	sp, #8
    1694:	af00      	add	r7, sp, #0
    1696:	6078      	str	r0, [r7, #4]
    1698:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    169a:	687b      	ldr	r3, [r7, #4]
    169c:	2201      	movs	r2, #1
    169e:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    16a0:	687b      	ldr	r3, [r7, #4]
    16a2:	2201      	movs	r2, #1
    16a4:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    16a6:	683a      	ldr	r2, [r7, #0]
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	0011      	movs	r1, r2
    16ac:	0018      	movs	r0, r3
    16ae:	4b03      	ldr	r3, [pc, #12]	; (16bc <i2c_master_read_packet_wait+0x2c>)
    16b0:	4798      	blx	r3
    16b2:	0003      	movs	r3, r0
}
    16b4:	0018      	movs	r0, r3
    16b6:	46bd      	mov	sp, r7
    16b8:	b002      	add	sp, #8
    16ba:	bd80      	pop	{r7, pc}
    16bc:	0000141d 	.word	0x0000141d

000016c0 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    16c0:	b590      	push	{r4, r7, lr}
    16c2:	b087      	sub	sp, #28
    16c4:	af00      	add	r7, sp, #0
    16c6:	6078      	str	r0, [r7, #4]
    16c8:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16ca:	687b      	ldr	r3, [r7, #4]
    16cc:	681b      	ldr	r3, [r3, #0]
    16ce:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    16d0:	2314      	movs	r3, #20
    16d2:	18fb      	adds	r3, r7, r3
    16d4:	683a      	ldr	r2, [r7, #0]
    16d6:	8852      	ldrh	r2, [r2, #2]
    16d8:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    16da:	687b      	ldr	r3, [r7, #4]
    16dc:	0018      	movs	r0, r3
    16de:	4b51      	ldr	r3, [pc, #324]	; (1824 <_i2c_master_write_packet+0x164>)
    16e0:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    16e2:	683b      	ldr	r3, [r7, #0]
    16e4:	7a5b      	ldrb	r3, [r3, #9]
    16e6:	2b00      	cmp	r3, #0
    16e8:	d006      	beq.n	16f8 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    16ea:	683b      	ldr	r3, [r7, #0]
    16ec:	7a9a      	ldrb	r2, [r3, #10]
    16ee:	687b      	ldr	r3, [r7, #4]
    16f0:	0011      	movs	r1, r2
    16f2:	0018      	movs	r0, r3
    16f4:	4b4c      	ldr	r3, [pc, #304]	; (1828 <_i2c_master_write_packet+0x168>)
    16f6:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    16f8:	68fb      	ldr	r3, [r7, #12]
    16fa:	685b      	ldr	r3, [r3, #4]
    16fc:	4a4b      	ldr	r2, [pc, #300]	; (182c <_i2c_master_write_packet+0x16c>)
    16fe:	401a      	ands	r2, r3
    1700:	68fb      	ldr	r3, [r7, #12]
    1702:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1704:	683b      	ldr	r3, [r7, #0]
    1706:	7a1b      	ldrb	r3, [r3, #8]
    1708:	2b00      	cmp	r3, #0
    170a:	d00d      	beq.n	1728 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    170c:	683b      	ldr	r3, [r7, #0]
    170e:	881b      	ldrh	r3, [r3, #0]
    1710:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1712:	683b      	ldr	r3, [r7, #0]
    1714:	7a5b      	ldrb	r3, [r3, #9]
    1716:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1718:	4313      	orrs	r3, r2
    171a:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    171c:	2380      	movs	r3, #128	; 0x80
    171e:	021b      	lsls	r3, r3, #8
    1720:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1722:	68fb      	ldr	r3, [r7, #12]
    1724:	625a      	str	r2, [r3, #36]	; 0x24
    1726:	e009      	b.n	173c <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1728:	683b      	ldr	r3, [r7, #0]
    172a:	881b      	ldrh	r3, [r3, #0]
    172c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    172e:	683b      	ldr	r3, [r7, #0]
    1730:	7a5b      	ldrb	r3, [r3, #9]
    1732:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1734:	4313      	orrs	r3, r2
    1736:	001a      	movs	r2, r3
    1738:	68fb      	ldr	r3, [r7, #12]
    173a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    173c:	2317      	movs	r3, #23
    173e:	18fc      	adds	r4, r7, r3
    1740:	687b      	ldr	r3, [r7, #4]
    1742:	0018      	movs	r0, r3
    1744:	4b3a      	ldr	r3, [pc, #232]	; (1830 <_i2c_master_write_packet+0x170>)
    1746:	4798      	blx	r3
    1748:	0003      	movs	r3, r0
    174a:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    174c:	2317      	movs	r3, #23
    174e:	18fb      	adds	r3, r7, r3
    1750:	781b      	ldrb	r3, [r3, #0]
    1752:	2b00      	cmp	r3, #0
    1754:	d107      	bne.n	1766 <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    1756:	2317      	movs	r3, #23
    1758:	18fc      	adds	r4, r7, r3
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	0018      	movs	r0, r3
    175e:	4b35      	ldr	r3, [pc, #212]	; (1834 <_i2c_master_write_packet+0x174>)
    1760:	4798      	blx	r3
    1762:	0003      	movs	r3, r0
    1764:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1766:	2317      	movs	r3, #23
    1768:	18fb      	adds	r3, r7, r3
    176a:	781b      	ldrb	r3, [r3, #0]
    176c:	2b00      	cmp	r3, #0
    176e:	d152      	bne.n	1816 <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    1770:	2312      	movs	r3, #18
    1772:	18fb      	adds	r3, r7, r3
    1774:	2200      	movs	r2, #0
    1776:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    1778:	e033      	b.n	17e2 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    177a:	68fb      	ldr	r3, [r7, #12]
    177c:	8b5b      	ldrh	r3, [r3, #26]
    177e:	b29b      	uxth	r3, r3
    1780:	001a      	movs	r2, r3
    1782:	2320      	movs	r3, #32
    1784:	4013      	ands	r3, r2
    1786:	d101      	bne.n	178c <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    1788:	2341      	movs	r3, #65	; 0x41
    178a:	e047      	b.n	181c <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	0018      	movs	r0, r3
    1790:	4b24      	ldr	r3, [pc, #144]	; (1824 <_i2c_master_write_packet+0x164>)
    1792:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	685a      	ldr	r2, [r3, #4]
    1798:	2312      	movs	r3, #18
    179a:	18fb      	adds	r3, r7, r3
    179c:	881b      	ldrh	r3, [r3, #0]
    179e:	2112      	movs	r1, #18
    17a0:	1879      	adds	r1, r7, r1
    17a2:	1c58      	adds	r0, r3, #1
    17a4:	8008      	strh	r0, [r1, #0]
    17a6:	18d3      	adds	r3, r2, r3
    17a8:	7819      	ldrb	r1, [r3, #0]
    17aa:	68fb      	ldr	r3, [r7, #12]
    17ac:	2228      	movs	r2, #40	; 0x28
    17ae:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    17b0:	2317      	movs	r3, #23
    17b2:	18fc      	adds	r4, r7, r3
    17b4:	687b      	ldr	r3, [r7, #4]
    17b6:	0018      	movs	r0, r3
    17b8:	4b1d      	ldr	r3, [pc, #116]	; (1830 <_i2c_master_write_packet+0x170>)
    17ba:	4798      	blx	r3
    17bc:	0003      	movs	r3, r0
    17be:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    17c0:	2317      	movs	r3, #23
    17c2:	18fb      	adds	r3, r7, r3
    17c4:	781b      	ldrb	r3, [r3, #0]
    17c6:	2b00      	cmp	r3, #0
    17c8:	d115      	bne.n	17f6 <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    17ca:	68fb      	ldr	r3, [r7, #12]
    17cc:	8b5b      	ldrh	r3, [r3, #26]
    17ce:	b29b      	uxth	r3, r3
    17d0:	001a      	movs	r2, r3
    17d2:	2304      	movs	r3, #4
    17d4:	4013      	ands	r3, r2
    17d6:	d004      	beq.n	17e2 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    17d8:	2317      	movs	r3, #23
    17da:	18fb      	adds	r3, r7, r3
    17dc:	221e      	movs	r2, #30
    17de:	701a      	strb	r2, [r3, #0]
				break;
    17e0:	e00a      	b.n	17f8 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    17e2:	2314      	movs	r3, #20
    17e4:	18fb      	adds	r3, r7, r3
    17e6:	881b      	ldrh	r3, [r3, #0]
    17e8:	2214      	movs	r2, #20
    17ea:	18ba      	adds	r2, r7, r2
    17ec:	1e59      	subs	r1, r3, #1
    17ee:	8011      	strh	r1, [r2, #0]
    17f0:	2b00      	cmp	r3, #0
    17f2:	d1c2      	bne.n	177a <_i2c_master_write_packet+0xba>
    17f4:	e000      	b.n	17f8 <_i2c_master_write_packet+0x138>
				break;
    17f6:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	7a9b      	ldrb	r3, [r3, #10]
    17fc:	2b00      	cmp	r3, #0
    17fe:	d00a      	beq.n	1816 <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    1800:	687b      	ldr	r3, [r7, #4]
    1802:	0018      	movs	r0, r3
    1804:	4b07      	ldr	r3, [pc, #28]	; (1824 <_i2c_master_write_packet+0x164>)
    1806:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1808:	68fb      	ldr	r3, [r7, #12]
    180a:	685b      	ldr	r3, [r3, #4]
    180c:	22c0      	movs	r2, #192	; 0xc0
    180e:	0292      	lsls	r2, r2, #10
    1810:	431a      	orrs	r2, r3
    1812:	68fb      	ldr	r3, [r7, #12]
    1814:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    1816:	2317      	movs	r3, #23
    1818:	18fb      	adds	r3, r7, r3
    181a:	781b      	ldrb	r3, [r3, #0]
}
    181c:	0018      	movs	r0, r3
    181e:	46bd      	mov	sp, r7
    1820:	b007      	add	sp, #28
    1822:	bd90      	pop	{r4, r7, pc}
    1824:	00000e25 	.word	0x00000e25
    1828:	000013c9 	.word	0x000013c9
    182c:	fffbffff 	.word	0xfffbffff
    1830:	0000136b 	.word	0x0000136b
    1834:	0000130d 	.word	0x0000130d

00001838 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1838:	b580      	push	{r7, lr}
    183a:	b082      	sub	sp, #8
    183c:	af00      	add	r7, sp, #0
    183e:	6078      	str	r0, [r7, #4]
    1840:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    1842:	687b      	ldr	r3, [r7, #4]
    1844:	2201      	movs	r2, #1
    1846:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1848:	687b      	ldr	r3, [r7, #4]
    184a:	2201      	movs	r2, #1
    184c:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    184e:	683a      	ldr	r2, [r7, #0]
    1850:	687b      	ldr	r3, [r7, #4]
    1852:	0011      	movs	r1, r2
    1854:	0018      	movs	r0, r3
    1856:	4b03      	ldr	r3, [pc, #12]	; (1864 <i2c_master_write_packet_wait+0x2c>)
    1858:	4798      	blx	r3
    185a:	0003      	movs	r3, r0
}
    185c:	0018      	movs	r0, r3
    185e:	46bd      	mov	sp, r7
    1860:	b002      	add	sp, #8
    1862:	bd80      	pop	{r7, pc}
    1864:	000016c1 	.word	0x000016c1

00001868 <system_gclk_chan_get_config_defaults>:
{
    1868:	b580      	push	{r7, lr}
    186a:	b082      	sub	sp, #8
    186c:	af00      	add	r7, sp, #0
    186e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1870:	687b      	ldr	r3, [r7, #4]
    1872:	2200      	movs	r2, #0
    1874:	701a      	strb	r2, [r3, #0]
}
    1876:	46c0      	nop			; (mov r8, r8)
    1878:	46bd      	mov	sp, r7
    187a:	b002      	add	sp, #8
    187c:	bd80      	pop	{r7, pc}
	...

00001880 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1880:	b580      	push	{r7, lr}
    1882:	b084      	sub	sp, #16
    1884:	af00      	add	r7, sp, #0
    1886:	0002      	movs	r2, r0
    1888:	1dfb      	adds	r3, r7, #7
    188a:	701a      	strb	r2, [r3, #0]
    188c:	1dbb      	adds	r3, r7, #6
    188e:	1c0a      	adds	r2, r1, #0
    1890:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1892:	4b1a      	ldr	r3, [pc, #104]	; (18fc <sercom_set_gclk_generator+0x7c>)
    1894:	781b      	ldrb	r3, [r3, #0]
    1896:	2201      	movs	r2, #1
    1898:	4053      	eors	r3, r2
    189a:	b2db      	uxtb	r3, r3
    189c:	2b00      	cmp	r3, #0
    189e:	d103      	bne.n	18a8 <sercom_set_gclk_generator+0x28>
    18a0:	1dbb      	adds	r3, r7, #6
    18a2:	781b      	ldrb	r3, [r3, #0]
    18a4:	2b00      	cmp	r3, #0
    18a6:	d01b      	beq.n	18e0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    18a8:	230c      	movs	r3, #12
    18aa:	18fb      	adds	r3, r7, r3
    18ac:	0018      	movs	r0, r3
    18ae:	4b14      	ldr	r3, [pc, #80]	; (1900 <sercom_set_gclk_generator+0x80>)
    18b0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    18b2:	230c      	movs	r3, #12
    18b4:	18fb      	adds	r3, r7, r3
    18b6:	1dfa      	adds	r2, r7, #7
    18b8:	7812      	ldrb	r2, [r2, #0]
    18ba:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    18bc:	230c      	movs	r3, #12
    18be:	18fb      	adds	r3, r7, r3
    18c0:	0019      	movs	r1, r3
    18c2:	2013      	movs	r0, #19
    18c4:	4b0f      	ldr	r3, [pc, #60]	; (1904 <sercom_set_gclk_generator+0x84>)
    18c6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    18c8:	2013      	movs	r0, #19
    18ca:	4b0f      	ldr	r3, [pc, #60]	; (1908 <sercom_set_gclk_generator+0x88>)
    18cc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    18ce:	4b0b      	ldr	r3, [pc, #44]	; (18fc <sercom_set_gclk_generator+0x7c>)
    18d0:	1dfa      	adds	r2, r7, #7
    18d2:	7812      	ldrb	r2, [r2, #0]
    18d4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    18d6:	4b09      	ldr	r3, [pc, #36]	; (18fc <sercom_set_gclk_generator+0x7c>)
    18d8:	2201      	movs	r2, #1
    18da:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    18dc:	2300      	movs	r3, #0
    18de:	e008      	b.n	18f2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    18e0:	4b06      	ldr	r3, [pc, #24]	; (18fc <sercom_set_gclk_generator+0x7c>)
    18e2:	785b      	ldrb	r3, [r3, #1]
    18e4:	1dfa      	adds	r2, r7, #7
    18e6:	7812      	ldrb	r2, [r2, #0]
    18e8:	429a      	cmp	r2, r3
    18ea:	d101      	bne.n	18f0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    18ec:	2300      	movs	r3, #0
    18ee:	e000      	b.n	18f2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    18f0:	231d      	movs	r3, #29
}
    18f2:	0018      	movs	r0, r3
    18f4:	46bd      	mov	sp, r7
    18f6:	b004      	add	sp, #16
    18f8:	bd80      	pop	{r7, pc}
    18fa:	46c0      	nop			; (mov r8, r8)
    18fc:	20000280 	.word	0x20000280
    1900:	00001869 	.word	0x00001869
    1904:	000059f9 	.word	0x000059f9
    1908:	00005a3d 	.word	0x00005a3d

0000190c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    190c:	b580      	push	{r7, lr}
    190e:	b082      	sub	sp, #8
    1910:	af00      	add	r7, sp, #0
    1912:	6078      	str	r0, [r7, #4]
    1914:	000a      	movs	r2, r1
    1916:	1cfb      	adds	r3, r7, #3
    1918:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    191a:	687b      	ldr	r3, [r7, #4]
    191c:	4a4d      	ldr	r2, [pc, #308]	; (1a54 <_sercom_get_default_pad+0x148>)
    191e:	4293      	cmp	r3, r2
    1920:	d03f      	beq.n	19a2 <_sercom_get_default_pad+0x96>
    1922:	4a4c      	ldr	r2, [pc, #304]	; (1a54 <_sercom_get_default_pad+0x148>)
    1924:	4293      	cmp	r3, r2
    1926:	d806      	bhi.n	1936 <_sercom_get_default_pad+0x2a>
    1928:	4a4b      	ldr	r2, [pc, #300]	; (1a58 <_sercom_get_default_pad+0x14c>)
    192a:	4293      	cmp	r3, r2
    192c:	d00f      	beq.n	194e <_sercom_get_default_pad+0x42>
    192e:	4a4b      	ldr	r2, [pc, #300]	; (1a5c <_sercom_get_default_pad+0x150>)
    1930:	4293      	cmp	r3, r2
    1932:	d021      	beq.n	1978 <_sercom_get_default_pad+0x6c>
    1934:	e089      	b.n	1a4a <_sercom_get_default_pad+0x13e>
    1936:	4a4a      	ldr	r2, [pc, #296]	; (1a60 <_sercom_get_default_pad+0x154>)
    1938:	4293      	cmp	r3, r2
    193a:	d100      	bne.n	193e <_sercom_get_default_pad+0x32>
    193c:	e05b      	b.n	19f6 <_sercom_get_default_pad+0xea>
    193e:	4a49      	ldr	r2, [pc, #292]	; (1a64 <_sercom_get_default_pad+0x158>)
    1940:	4293      	cmp	r3, r2
    1942:	d100      	bne.n	1946 <_sercom_get_default_pad+0x3a>
    1944:	e06c      	b.n	1a20 <_sercom_get_default_pad+0x114>
    1946:	4a48      	ldr	r2, [pc, #288]	; (1a68 <_sercom_get_default_pad+0x15c>)
    1948:	4293      	cmp	r3, r2
    194a:	d03f      	beq.n	19cc <_sercom_get_default_pad+0xc0>
    194c:	e07d      	b.n	1a4a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    194e:	1cfb      	adds	r3, r7, #3
    1950:	781b      	ldrb	r3, [r3, #0]
    1952:	2b01      	cmp	r3, #1
    1954:	d00a      	beq.n	196c <_sercom_get_default_pad+0x60>
    1956:	dc02      	bgt.n	195e <_sercom_get_default_pad+0x52>
    1958:	2b00      	cmp	r3, #0
    195a:	d005      	beq.n	1968 <_sercom_get_default_pad+0x5c>
    195c:	e075      	b.n	1a4a <_sercom_get_default_pad+0x13e>
    195e:	2b02      	cmp	r3, #2
    1960:	d006      	beq.n	1970 <_sercom_get_default_pad+0x64>
    1962:	2b03      	cmp	r3, #3
    1964:	d006      	beq.n	1974 <_sercom_get_default_pad+0x68>
    1966:	e070      	b.n	1a4a <_sercom_get_default_pad+0x13e>
    1968:	4b40      	ldr	r3, [pc, #256]	; (1a6c <_sercom_get_default_pad+0x160>)
    196a:	e06f      	b.n	1a4c <_sercom_get_default_pad+0x140>
    196c:	4b40      	ldr	r3, [pc, #256]	; (1a70 <_sercom_get_default_pad+0x164>)
    196e:	e06d      	b.n	1a4c <_sercom_get_default_pad+0x140>
    1970:	4b40      	ldr	r3, [pc, #256]	; (1a74 <_sercom_get_default_pad+0x168>)
    1972:	e06b      	b.n	1a4c <_sercom_get_default_pad+0x140>
    1974:	4b40      	ldr	r3, [pc, #256]	; (1a78 <_sercom_get_default_pad+0x16c>)
    1976:	e069      	b.n	1a4c <_sercom_get_default_pad+0x140>
    1978:	1cfb      	adds	r3, r7, #3
    197a:	781b      	ldrb	r3, [r3, #0]
    197c:	2b01      	cmp	r3, #1
    197e:	d00a      	beq.n	1996 <_sercom_get_default_pad+0x8a>
    1980:	dc02      	bgt.n	1988 <_sercom_get_default_pad+0x7c>
    1982:	2b00      	cmp	r3, #0
    1984:	d005      	beq.n	1992 <_sercom_get_default_pad+0x86>
    1986:	e060      	b.n	1a4a <_sercom_get_default_pad+0x13e>
    1988:	2b02      	cmp	r3, #2
    198a:	d006      	beq.n	199a <_sercom_get_default_pad+0x8e>
    198c:	2b03      	cmp	r3, #3
    198e:	d006      	beq.n	199e <_sercom_get_default_pad+0x92>
    1990:	e05b      	b.n	1a4a <_sercom_get_default_pad+0x13e>
    1992:	2303      	movs	r3, #3
    1994:	e05a      	b.n	1a4c <_sercom_get_default_pad+0x140>
    1996:	4b39      	ldr	r3, [pc, #228]	; (1a7c <_sercom_get_default_pad+0x170>)
    1998:	e058      	b.n	1a4c <_sercom_get_default_pad+0x140>
    199a:	4b39      	ldr	r3, [pc, #228]	; (1a80 <_sercom_get_default_pad+0x174>)
    199c:	e056      	b.n	1a4c <_sercom_get_default_pad+0x140>
    199e:	4b39      	ldr	r3, [pc, #228]	; (1a84 <_sercom_get_default_pad+0x178>)
    19a0:	e054      	b.n	1a4c <_sercom_get_default_pad+0x140>
    19a2:	1cfb      	adds	r3, r7, #3
    19a4:	781b      	ldrb	r3, [r3, #0]
    19a6:	2b01      	cmp	r3, #1
    19a8:	d00a      	beq.n	19c0 <_sercom_get_default_pad+0xb4>
    19aa:	dc02      	bgt.n	19b2 <_sercom_get_default_pad+0xa6>
    19ac:	2b00      	cmp	r3, #0
    19ae:	d005      	beq.n	19bc <_sercom_get_default_pad+0xb0>
    19b0:	e04b      	b.n	1a4a <_sercom_get_default_pad+0x13e>
    19b2:	2b02      	cmp	r3, #2
    19b4:	d006      	beq.n	19c4 <_sercom_get_default_pad+0xb8>
    19b6:	2b03      	cmp	r3, #3
    19b8:	d006      	beq.n	19c8 <_sercom_get_default_pad+0xbc>
    19ba:	e046      	b.n	1a4a <_sercom_get_default_pad+0x13e>
    19bc:	4b32      	ldr	r3, [pc, #200]	; (1a88 <_sercom_get_default_pad+0x17c>)
    19be:	e045      	b.n	1a4c <_sercom_get_default_pad+0x140>
    19c0:	4b32      	ldr	r3, [pc, #200]	; (1a8c <_sercom_get_default_pad+0x180>)
    19c2:	e043      	b.n	1a4c <_sercom_get_default_pad+0x140>
    19c4:	4b32      	ldr	r3, [pc, #200]	; (1a90 <_sercom_get_default_pad+0x184>)
    19c6:	e041      	b.n	1a4c <_sercom_get_default_pad+0x140>
    19c8:	4b32      	ldr	r3, [pc, #200]	; (1a94 <_sercom_get_default_pad+0x188>)
    19ca:	e03f      	b.n	1a4c <_sercom_get_default_pad+0x140>
    19cc:	1cfb      	adds	r3, r7, #3
    19ce:	781b      	ldrb	r3, [r3, #0]
    19d0:	2b01      	cmp	r3, #1
    19d2:	d00a      	beq.n	19ea <_sercom_get_default_pad+0xde>
    19d4:	dc02      	bgt.n	19dc <_sercom_get_default_pad+0xd0>
    19d6:	2b00      	cmp	r3, #0
    19d8:	d005      	beq.n	19e6 <_sercom_get_default_pad+0xda>
    19da:	e036      	b.n	1a4a <_sercom_get_default_pad+0x13e>
    19dc:	2b02      	cmp	r3, #2
    19de:	d006      	beq.n	19ee <_sercom_get_default_pad+0xe2>
    19e0:	2b03      	cmp	r3, #3
    19e2:	d006      	beq.n	19f2 <_sercom_get_default_pad+0xe6>
    19e4:	e031      	b.n	1a4a <_sercom_get_default_pad+0x13e>
    19e6:	4b2c      	ldr	r3, [pc, #176]	; (1a98 <_sercom_get_default_pad+0x18c>)
    19e8:	e030      	b.n	1a4c <_sercom_get_default_pad+0x140>
    19ea:	4b2c      	ldr	r3, [pc, #176]	; (1a9c <_sercom_get_default_pad+0x190>)
    19ec:	e02e      	b.n	1a4c <_sercom_get_default_pad+0x140>
    19ee:	4b2c      	ldr	r3, [pc, #176]	; (1aa0 <_sercom_get_default_pad+0x194>)
    19f0:	e02c      	b.n	1a4c <_sercom_get_default_pad+0x140>
    19f2:	4b2c      	ldr	r3, [pc, #176]	; (1aa4 <_sercom_get_default_pad+0x198>)
    19f4:	e02a      	b.n	1a4c <_sercom_get_default_pad+0x140>
    19f6:	1cfb      	adds	r3, r7, #3
    19f8:	781b      	ldrb	r3, [r3, #0]
    19fa:	2b01      	cmp	r3, #1
    19fc:	d00a      	beq.n	1a14 <_sercom_get_default_pad+0x108>
    19fe:	dc02      	bgt.n	1a06 <_sercom_get_default_pad+0xfa>
    1a00:	2b00      	cmp	r3, #0
    1a02:	d005      	beq.n	1a10 <_sercom_get_default_pad+0x104>
    1a04:	e021      	b.n	1a4a <_sercom_get_default_pad+0x13e>
    1a06:	2b02      	cmp	r3, #2
    1a08:	d006      	beq.n	1a18 <_sercom_get_default_pad+0x10c>
    1a0a:	2b03      	cmp	r3, #3
    1a0c:	d006      	beq.n	1a1c <_sercom_get_default_pad+0x110>
    1a0e:	e01c      	b.n	1a4a <_sercom_get_default_pad+0x13e>
    1a10:	4b25      	ldr	r3, [pc, #148]	; (1aa8 <_sercom_get_default_pad+0x19c>)
    1a12:	e01b      	b.n	1a4c <_sercom_get_default_pad+0x140>
    1a14:	4b25      	ldr	r3, [pc, #148]	; (1aac <_sercom_get_default_pad+0x1a0>)
    1a16:	e019      	b.n	1a4c <_sercom_get_default_pad+0x140>
    1a18:	4b25      	ldr	r3, [pc, #148]	; (1ab0 <_sercom_get_default_pad+0x1a4>)
    1a1a:	e017      	b.n	1a4c <_sercom_get_default_pad+0x140>
    1a1c:	4b25      	ldr	r3, [pc, #148]	; (1ab4 <_sercom_get_default_pad+0x1a8>)
    1a1e:	e015      	b.n	1a4c <_sercom_get_default_pad+0x140>
    1a20:	1cfb      	adds	r3, r7, #3
    1a22:	781b      	ldrb	r3, [r3, #0]
    1a24:	2b01      	cmp	r3, #1
    1a26:	d00a      	beq.n	1a3e <_sercom_get_default_pad+0x132>
    1a28:	dc02      	bgt.n	1a30 <_sercom_get_default_pad+0x124>
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	d005      	beq.n	1a3a <_sercom_get_default_pad+0x12e>
    1a2e:	e00c      	b.n	1a4a <_sercom_get_default_pad+0x13e>
    1a30:	2b02      	cmp	r3, #2
    1a32:	d006      	beq.n	1a42 <_sercom_get_default_pad+0x136>
    1a34:	2b03      	cmp	r3, #3
    1a36:	d006      	beq.n	1a46 <_sercom_get_default_pad+0x13a>
    1a38:	e007      	b.n	1a4a <_sercom_get_default_pad+0x13e>
    1a3a:	4b1f      	ldr	r3, [pc, #124]	; (1ab8 <_sercom_get_default_pad+0x1ac>)
    1a3c:	e006      	b.n	1a4c <_sercom_get_default_pad+0x140>
    1a3e:	4b1f      	ldr	r3, [pc, #124]	; (1abc <_sercom_get_default_pad+0x1b0>)
    1a40:	e004      	b.n	1a4c <_sercom_get_default_pad+0x140>
    1a42:	4b1f      	ldr	r3, [pc, #124]	; (1ac0 <_sercom_get_default_pad+0x1b4>)
    1a44:	e002      	b.n	1a4c <_sercom_get_default_pad+0x140>
    1a46:	4b1f      	ldr	r3, [pc, #124]	; (1ac4 <_sercom_get_default_pad+0x1b8>)
    1a48:	e000      	b.n	1a4c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    1a4a:	2300      	movs	r3, #0
}
    1a4c:	0018      	movs	r0, r3
    1a4e:	46bd      	mov	sp, r7
    1a50:	b002      	add	sp, #8
    1a52:	bd80      	pop	{r7, pc}
    1a54:	42001000 	.word	0x42001000
    1a58:	42000800 	.word	0x42000800
    1a5c:	42000c00 	.word	0x42000c00
    1a60:	42001800 	.word	0x42001800
    1a64:	42001c00 	.word	0x42001c00
    1a68:	42001400 	.word	0x42001400
    1a6c:	00040003 	.word	0x00040003
    1a70:	00050003 	.word	0x00050003
    1a74:	00060003 	.word	0x00060003
    1a78:	00070003 	.word	0x00070003
    1a7c:	00010003 	.word	0x00010003
    1a80:	001e0003 	.word	0x001e0003
    1a84:	001f0003 	.word	0x001f0003
    1a88:	00080003 	.word	0x00080003
    1a8c:	00090003 	.word	0x00090003
    1a90:	000a0003 	.word	0x000a0003
    1a94:	000b0003 	.word	0x000b0003
    1a98:	00100003 	.word	0x00100003
    1a9c:	00110003 	.word	0x00110003
    1aa0:	00120003 	.word	0x00120003
    1aa4:	00130003 	.word	0x00130003
    1aa8:	000c0003 	.word	0x000c0003
    1aac:	000d0003 	.word	0x000d0003
    1ab0:	000e0003 	.word	0x000e0003
    1ab4:	000f0003 	.word	0x000f0003
    1ab8:	00160003 	.word	0x00160003
    1abc:	00170003 	.word	0x00170003
    1ac0:	00180003 	.word	0x00180003
    1ac4:	00190003 	.word	0x00190003

00001ac8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1ac8:	b590      	push	{r4, r7, lr}
    1aca:	b08b      	sub	sp, #44	; 0x2c
    1acc:	af00      	add	r7, sp, #0
    1ace:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1ad0:	230c      	movs	r3, #12
    1ad2:	18fb      	adds	r3, r7, r3
    1ad4:	4a0f      	ldr	r2, [pc, #60]	; (1b14 <_sercom_get_sercom_inst_index+0x4c>)
    1ad6:	ca13      	ldmia	r2!, {r0, r1, r4}
    1ad8:	c313      	stmia	r3!, {r0, r1, r4}
    1ada:	ca13      	ldmia	r2!, {r0, r1, r4}
    1adc:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1ade:	2300      	movs	r3, #0
    1ae0:	627b      	str	r3, [r7, #36]	; 0x24
    1ae2:	e00e      	b.n	1b02 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1ae4:	230c      	movs	r3, #12
    1ae6:	18fb      	adds	r3, r7, r3
    1ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1aea:	0092      	lsls	r2, r2, #2
    1aec:	58d3      	ldr	r3, [r2, r3]
    1aee:	001a      	movs	r2, r3
    1af0:	687b      	ldr	r3, [r7, #4]
    1af2:	429a      	cmp	r2, r3
    1af4:	d102      	bne.n	1afc <_sercom_get_sercom_inst_index+0x34>
			return i;
    1af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1af8:	b2db      	uxtb	r3, r3
    1afa:	e006      	b.n	1b0a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1afe:	3301      	adds	r3, #1
    1b00:	627b      	str	r3, [r7, #36]	; 0x24
    1b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b04:	2b05      	cmp	r3, #5
    1b06:	d9ed      	bls.n	1ae4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1b08:	2300      	movs	r3, #0
}
    1b0a:	0018      	movs	r0, r3
    1b0c:	46bd      	mov	sp, r7
    1b0e:	b00b      	add	sp, #44	; 0x2c
    1b10:	bd90      	pop	{r4, r7, pc}
    1b12:	46c0      	nop			; (mov r8, r8)
    1b14:	00009644 	.word	0x00009644

00001b18 <system_apb_clock_set_mask>:
{
    1b18:	b580      	push	{r7, lr}
    1b1a:	b082      	sub	sp, #8
    1b1c:	af00      	add	r7, sp, #0
    1b1e:	0002      	movs	r2, r0
    1b20:	6039      	str	r1, [r7, #0]
    1b22:	1dfb      	adds	r3, r7, #7
    1b24:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1b26:	1dfb      	adds	r3, r7, #7
    1b28:	781b      	ldrb	r3, [r3, #0]
    1b2a:	2b01      	cmp	r3, #1
    1b2c:	d00a      	beq.n	1b44 <system_apb_clock_set_mask+0x2c>
    1b2e:	2b02      	cmp	r3, #2
    1b30:	d00f      	beq.n	1b52 <system_apb_clock_set_mask+0x3a>
    1b32:	2b00      	cmp	r3, #0
    1b34:	d114      	bne.n	1b60 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1b36:	4b0e      	ldr	r3, [pc, #56]	; (1b70 <system_apb_clock_set_mask+0x58>)
    1b38:	4a0d      	ldr	r2, [pc, #52]	; (1b70 <system_apb_clock_set_mask+0x58>)
    1b3a:	6991      	ldr	r1, [r2, #24]
    1b3c:	683a      	ldr	r2, [r7, #0]
    1b3e:	430a      	orrs	r2, r1
    1b40:	619a      	str	r2, [r3, #24]
			break;
    1b42:	e00f      	b.n	1b64 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1b44:	4b0a      	ldr	r3, [pc, #40]	; (1b70 <system_apb_clock_set_mask+0x58>)
    1b46:	4a0a      	ldr	r2, [pc, #40]	; (1b70 <system_apb_clock_set_mask+0x58>)
    1b48:	69d1      	ldr	r1, [r2, #28]
    1b4a:	683a      	ldr	r2, [r7, #0]
    1b4c:	430a      	orrs	r2, r1
    1b4e:	61da      	str	r2, [r3, #28]
			break;
    1b50:	e008      	b.n	1b64 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    1b52:	4b07      	ldr	r3, [pc, #28]	; (1b70 <system_apb_clock_set_mask+0x58>)
    1b54:	4a06      	ldr	r2, [pc, #24]	; (1b70 <system_apb_clock_set_mask+0x58>)
    1b56:	6a11      	ldr	r1, [r2, #32]
    1b58:	683a      	ldr	r2, [r7, #0]
    1b5a:	430a      	orrs	r2, r1
    1b5c:	621a      	str	r2, [r3, #32]
			break;
    1b5e:	e001      	b.n	1b64 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1b60:	2317      	movs	r3, #23
    1b62:	e000      	b.n	1b66 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1b64:	2300      	movs	r3, #0
}
    1b66:	0018      	movs	r0, r3
    1b68:	46bd      	mov	sp, r7
    1b6a:	b002      	add	sp, #8
    1b6c:	bd80      	pop	{r7, pc}
    1b6e:	46c0      	nop			; (mov r8, r8)
    1b70:	40000400 	.word	0x40000400

00001b74 <wdt_is_syncing>:
{
    1b74:	b580      	push	{r7, lr}
    1b76:	b082      	sub	sp, #8
    1b78:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1b7a:	4b07      	ldr	r3, [pc, #28]	; (1b98 <wdt_is_syncing+0x24>)
    1b7c:	607b      	str	r3, [r7, #4]
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	79db      	ldrb	r3, [r3, #7]
    1b82:	b2db      	uxtb	r3, r3
    1b84:	b25b      	sxtb	r3, r3
    1b86:	2b00      	cmp	r3, #0
    1b88:	da01      	bge.n	1b8e <wdt_is_syncing+0x1a>
		return true;
    1b8a:	2301      	movs	r3, #1
    1b8c:	e000      	b.n	1b90 <wdt_is_syncing+0x1c>
	return false;
    1b8e:	2300      	movs	r3, #0
}
    1b90:	0018      	movs	r0, r3
    1b92:	46bd      	mov	sp, r7
    1b94:	b002      	add	sp, #8
    1b96:	bd80      	pop	{r7, pc}
    1b98:	40001000 	.word	0x40001000

00001b9c <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
    1b9c:	b580      	push	{r7, lr}
    1b9e:	b082      	sub	sp, #8
    1ba0:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1ba2:	4b07      	ldr	r3, [pc, #28]	; (1bc0 <wdt_is_locked+0x24>)
    1ba4:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    1ba6:	687b      	ldr	r3, [r7, #4]
    1ba8:	781b      	ldrb	r3, [r3, #0]
    1baa:	b2db      	uxtb	r3, r3
    1bac:	001a      	movs	r2, r3
    1bae:	2380      	movs	r3, #128	; 0x80
    1bb0:	4013      	ands	r3, r2
    1bb2:	1e5a      	subs	r2, r3, #1
    1bb4:	4193      	sbcs	r3, r2
    1bb6:	b2db      	uxtb	r3, r3
#endif
}
    1bb8:	0018      	movs	r0, r3
    1bba:	46bd      	mov	sp, r7
    1bbc:	b002      	add	sp, #8
    1bbe:	bd80      	pop	{r7, pc}
    1bc0:	40001000 	.word	0x40001000

00001bc4 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    1bc4:	b580      	push	{r7, lr}
    1bc6:	b086      	sub	sp, #24
    1bc8:	af00      	add	r7, sp, #0
    1bca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
    1bcc:	4b54      	ldr	r3, [pc, #336]	; (1d20 <wdt_set_config+0x15c>)
    1bce:	613b      	str	r3, [r7, #16]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);
    1bd0:	2110      	movs	r1, #16
    1bd2:	2000      	movs	r0, #0
    1bd4:	4b53      	ldr	r3, [pc, #332]	; (1d24 <wdt_set_config+0x160>)
    1bd6:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    1bd8:	4b53      	ldr	r3, [pc, #332]	; (1d28 <wdt_set_config+0x164>)
    1bda:	4798      	blx	r3
    1bdc:	1e03      	subs	r3, r0, #0
    1bde:	d001      	beq.n	1be4 <wdt_set_config+0x20>
		return STATUS_ERR_IO;
    1be0:	2310      	movs	r3, #16
    1be2:	e098      	b.n	1d16 <wdt_set_config+0x152>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    1be4:	687b      	ldr	r3, [r7, #4]
    1be6:	78db      	ldrb	r3, [r3, #3]
    1be8:	2b00      	cmp	r3, #0
    1bea:	d101      	bne.n	1bf0 <wdt_set_config+0x2c>
		return STATUS_ERR_INVALID_ARG;
    1bec:	2317      	movs	r3, #23
    1bee:	e092      	b.n	1d16 <wdt_set_config+0x152>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    1bf0:	687b      	ldr	r3, [r7, #4]
    1bf2:	78da      	ldrb	r2, [r3, #3]
    1bf4:	687b      	ldr	r3, [r7, #4]
    1bf6:	791b      	ldrb	r3, [r3, #4]
    1bf8:	429a      	cmp	r2, r3
    1bfa:	d305      	bcc.n	1c08 <wdt_set_config+0x44>
			(config->timeout_period < config->early_warning_period)) {
    1bfc:	687b      	ldr	r3, [r7, #4]
    1bfe:	78da      	ldrb	r2, [r3, #3]
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	795b      	ldrb	r3, [r3, #5]
	if ((config->timeout_period < config->window_period) ||
    1c04:	429a      	cmp	r2, r3
    1c06:	d201      	bcs.n	1c0c <wdt_set_config+0x48>
		return STATUS_ERR_INVALID_ARG;
    1c08:	2317      	movs	r3, #23
    1c0a:	e084      	b.n	1d16 <wdt_set_config+0x152>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    1c0c:	693b      	ldr	r3, [r7, #16]
    1c0e:	781b      	ldrb	r3, [r3, #0]
    1c10:	b2db      	uxtb	r3, r3
    1c12:	2202      	movs	r2, #2
    1c14:	4393      	bics	r3, r2
    1c16:	b2da      	uxtb	r2, r3
    1c18:	693b      	ldr	r3, [r7, #16]
    1c1a:	701a      	strb	r2, [r3, #0]

	while (wdt_is_syncing()) {
    1c1c:	46c0      	nop			; (mov r8, r8)
    1c1e:	4b43      	ldr	r3, [pc, #268]	; (1d2c <wdt_set_config+0x168>)
    1c20:	4798      	blx	r3
    1c22:	1e03      	subs	r3, r0, #0
    1c24:	d1fb      	bne.n	1c1e <wdt_set_config+0x5a>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
    1c26:	687b      	ldr	r3, [r7, #4]
    1c28:	785b      	ldrb	r3, [r3, #1]
    1c2a:	2201      	movs	r2, #1
    1c2c:	4053      	eors	r3, r2
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	2b00      	cmp	r3, #0
    1c32:	d001      	beq.n	1c38 <wdt_set_config+0x74>
		return STATUS_OK;
    1c34:	2300      	movs	r3, #0
    1c36:	e06e      	b.n	1d16 <wdt_set_config+0x152>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
    1c38:	687b      	ldr	r3, [r7, #4]
    1c3a:	789a      	ldrb	r2, [r3, #2]
    1c3c:	230c      	movs	r3, #12
    1c3e:	18fb      	adds	r3, r7, r3
    1c40:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    1c42:	230c      	movs	r3, #12
    1c44:	18fb      	adds	r3, r7, r3
    1c46:	0019      	movs	r1, r3
    1c48:	2003      	movs	r0, #3
    1c4a:	4b39      	ldr	r3, [pc, #228]	; (1d30 <wdt_set_config+0x16c>)
    1c4c:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    1c4e:	2003      	movs	r0, #3
    1c50:	4b38      	ldr	r3, [pc, #224]	; (1d34 <wdt_set_config+0x170>)
    1c52:	4798      	blx	r3
	if (config->always_on) {
    1c54:	687b      	ldr	r3, [r7, #4]
    1c56:	781b      	ldrb	r3, [r3, #0]
    1c58:	2b00      	cmp	r3, #0
    1c5a:	d002      	beq.n	1c62 <wdt_set_config+0x9e>
		system_gclk_chan_lock(WDT_GCLK_ID);
    1c5c:	2003      	movs	r0, #3
    1c5e:	4b36      	ldr	r3, [pc, #216]	; (1d38 <wdt_set_config+0x174>)
    1c60:	4798      	blx	r3
	}

	uint32_t new_config = 0;
    1c62:	2300      	movs	r3, #0
    1c64:	617b      	str	r3, [r7, #20]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    1c66:	687b      	ldr	r3, [r7, #4]
    1c68:	78db      	ldrb	r3, [r3, #3]
    1c6a:	3b01      	subs	r3, #1
    1c6c:	001a      	movs	r2, r3
    1c6e:	697b      	ldr	r3, [r7, #20]
    1c70:	4313      	orrs	r3, r2
    1c72:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	791b      	ldrb	r3, [r3, #4]
    1c78:	2b00      	cmp	r3, #0
    1c7a:	d010      	beq.n	1c9e <wdt_set_config+0xda>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    1c7c:	693b      	ldr	r3, [r7, #16]
    1c7e:	781b      	ldrb	r3, [r3, #0]
    1c80:	b2db      	uxtb	r3, r3
    1c82:	2204      	movs	r2, #4
    1c84:	4313      	orrs	r3, r2
    1c86:	b2da      	uxtb	r2, r3
    1c88:	693b      	ldr	r3, [r7, #16]
    1c8a:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    1c8c:	687b      	ldr	r3, [r7, #4]
    1c8e:	791b      	ldrb	r3, [r3, #4]
    1c90:	3b01      	subs	r3, #1
    1c92:	011b      	lsls	r3, r3, #4
    1c94:	001a      	movs	r2, r3
    1c96:	697b      	ldr	r3, [r7, #20]
    1c98:	4313      	orrs	r3, r2
    1c9a:	617b      	str	r3, [r7, #20]
    1c9c:	e007      	b.n	1cae <wdt_set_config+0xea>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    1c9e:	693b      	ldr	r3, [r7, #16]
    1ca0:	781b      	ldrb	r3, [r3, #0]
    1ca2:	b2db      	uxtb	r3, r3
    1ca4:	2204      	movs	r2, #4
    1ca6:	4393      	bics	r3, r2
    1ca8:	b2da      	uxtb	r2, r3
    1caa:	693b      	ldr	r3, [r7, #16]
    1cac:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    1cae:	46c0      	nop			; (mov r8, r8)
    1cb0:	4b1e      	ldr	r3, [pc, #120]	; (1d2c <wdt_set_config+0x168>)
    1cb2:	4798      	blx	r3
    1cb4:	1e03      	subs	r3, r0, #0
    1cb6:	d1fb      	bne.n	1cb0 <wdt_set_config+0xec>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
    1cb8:	697b      	ldr	r3, [r7, #20]
    1cba:	b2da      	uxtb	r2, r3
    1cbc:	693b      	ldr	r3, [r7, #16]
    1cbe:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	795b      	ldrb	r3, [r3, #5]
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d00a      	beq.n	1cde <wdt_set_config+0x11a>
		while (wdt_is_syncing()) {
    1cc8:	46c0      	nop			; (mov r8, r8)
    1cca:	4b18      	ldr	r3, [pc, #96]	; (1d2c <wdt_set_config+0x168>)
    1ccc:	4798      	blx	r3
    1cce:	1e03      	subs	r3, r0, #0
    1cd0:	d1fb      	bne.n	1cca <wdt_set_config+0x106>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    1cd2:	687b      	ldr	r3, [r7, #4]
    1cd4:	795b      	ldrb	r3, [r3, #5]
    1cd6:	3b01      	subs	r3, #1
    1cd8:	b2da      	uxtb	r2, r3
    1cda:	693b      	ldr	r3, [r7, #16]
    1cdc:	709a      	strb	r2, [r3, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
    1cde:	687b      	ldr	r3, [r7, #4]
    1ce0:	781b      	ldrb	r3, [r3, #0]
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	d009      	beq.n	1cfa <wdt_set_config+0x136>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    1ce6:	693b      	ldr	r3, [r7, #16]
    1ce8:	781b      	ldrb	r3, [r3, #0]
    1cea:	b2db      	uxtb	r3, r3
    1cec:	2280      	movs	r2, #128	; 0x80
    1cee:	4252      	negs	r2, r2
    1cf0:	4313      	orrs	r3, r2
    1cf2:	b2da      	uxtb	r2, r3
    1cf4:	693b      	ldr	r3, [r7, #16]
    1cf6:	701a      	strb	r2, [r3, #0]
    1cf8:	e007      	b.n	1d0a <wdt_set_config+0x146>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    1cfa:	693b      	ldr	r3, [r7, #16]
    1cfc:	781b      	ldrb	r3, [r3, #0]
    1cfe:	b2db      	uxtb	r3, r3
    1d00:	2202      	movs	r2, #2
    1d02:	4313      	orrs	r3, r2
    1d04:	b2da      	uxtb	r2, r3
    1d06:	693b      	ldr	r3, [r7, #16]
    1d08:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    1d0a:	46c0      	nop			; (mov r8, r8)
    1d0c:	4b07      	ldr	r3, [pc, #28]	; (1d2c <wdt_set_config+0x168>)
    1d0e:	4798      	blx	r3
    1d10:	1e03      	subs	r3, r0, #0
    1d12:	d1fb      	bne.n	1d0c <wdt_set_config+0x148>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
    1d14:	2300      	movs	r3, #0
}
    1d16:	0018      	movs	r0, r3
    1d18:	46bd      	mov	sp, r7
    1d1a:	b006      	add	sp, #24
    1d1c:	bd80      	pop	{r7, pc}
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	40001000 	.word	0x40001000
    1d24:	00001b19 	.word	0x00001b19
    1d28:	00001b9d 	.word	0x00001b9d
    1d2c:	00001b75 	.word	0x00001b75
    1d30:	000059f9 	.word	0x000059f9
    1d34:	00005a3d 	.word	0x00005a3d
    1d38:	00005b1d 	.word	0x00005b1d

00001d3c <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    1d3c:	b580      	push	{r7, lr}
    1d3e:	b082      	sub	sp, #8
    1d40:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1d42:	4b04      	ldr	r3, [pc, #16]	; (1d54 <wdt_clear_early_warning+0x18>)
    1d44:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    1d46:	687b      	ldr	r3, [r7, #4]
    1d48:	2201      	movs	r2, #1
    1d4a:	719a      	strb	r2, [r3, #6]
}
    1d4c:	46c0      	nop			; (mov r8, r8)
    1d4e:	46bd      	mov	sp, r7
    1d50:	b002      	add	sp, #8
    1d52:	bd80      	pop	{r7, pc}
    1d54:	40001000 	.word	0x40001000

00001d58 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    1d58:	b580      	push	{r7, lr}
    1d5a:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    1d5c:	4b05      	ldr	r3, [pc, #20]	; (1d74 <WDT_Handler+0x1c>)
    1d5e:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    1d60:	4b05      	ldr	r3, [pc, #20]	; (1d78 <WDT_Handler+0x20>)
    1d62:	681b      	ldr	r3, [r3, #0]
    1d64:	2b00      	cmp	r3, #0
    1d66:	d002      	beq.n	1d6e <WDT_Handler+0x16>
		wdt_early_warning_callback();
    1d68:	4b03      	ldr	r3, [pc, #12]	; (1d78 <WDT_Handler+0x20>)
    1d6a:	681b      	ldr	r3, [r3, #0]
    1d6c:	4798      	blx	r3
	}
}
    1d6e:	46c0      	nop			; (mov r8, r8)
    1d70:	46bd      	mov	sp, r7
    1d72:	bd80      	pop	{r7, pc}
    1d74:	00001d3d 	.word	0x00001d3d
    1d78:	200002fc 	.word	0x200002fc

00001d7c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1d7c:	b580      	push	{r7, lr}
    1d7e:	b082      	sub	sp, #8
    1d80:	af00      	add	r7, sp, #0
    1d82:	0002      	movs	r2, r0
    1d84:	1dfb      	adds	r3, r7, #7
    1d86:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1d88:	4b06      	ldr	r3, [pc, #24]	; (1da4 <NVIC_EnableIRQ+0x28>)
    1d8a:	1dfa      	adds	r2, r7, #7
    1d8c:	7812      	ldrb	r2, [r2, #0]
    1d8e:	0011      	movs	r1, r2
    1d90:	221f      	movs	r2, #31
    1d92:	400a      	ands	r2, r1
    1d94:	2101      	movs	r1, #1
    1d96:	4091      	lsls	r1, r2
    1d98:	000a      	movs	r2, r1
    1d9a:	601a      	str	r2, [r3, #0]
}
    1d9c:	46c0      	nop			; (mov r8, r8)
    1d9e:	46bd      	mov	sp, r7
    1da0:	b002      	add	sp, #8
    1da2:	bd80      	pop	{r7, pc}
    1da4:	e000e100 	.word	0xe000e100

00001da8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1da8:	b5b0      	push	{r4, r5, r7, lr}
    1daa:	b082      	sub	sp, #8
    1dac:	af00      	add	r7, sp, #0
    1dae:	0002      	movs	r2, r0
    1db0:	6039      	str	r1, [r7, #0]
    1db2:	1dfb      	adds	r3, r7, #7
    1db4:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    1db6:	1dfb      	adds	r3, r7, #7
    1db8:	781b      	ldrb	r3, [r3, #0]
    1dba:	2b7f      	cmp	r3, #127	; 0x7f
    1dbc:	d932      	bls.n	1e24 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1dbe:	4c2f      	ldr	r4, [pc, #188]	; (1e7c <NVIC_SetPriority+0xd4>)
    1dc0:	1dfb      	adds	r3, r7, #7
    1dc2:	781b      	ldrb	r3, [r3, #0]
    1dc4:	001a      	movs	r2, r3
    1dc6:	230f      	movs	r3, #15
    1dc8:	4013      	ands	r3, r2
    1dca:	3b08      	subs	r3, #8
    1dcc:	0899      	lsrs	r1, r3, #2
    1dce:	4a2b      	ldr	r2, [pc, #172]	; (1e7c <NVIC_SetPriority+0xd4>)
    1dd0:	1dfb      	adds	r3, r7, #7
    1dd2:	781b      	ldrb	r3, [r3, #0]
    1dd4:	0018      	movs	r0, r3
    1dd6:	230f      	movs	r3, #15
    1dd8:	4003      	ands	r3, r0
    1dda:	3b08      	subs	r3, #8
    1ddc:	089b      	lsrs	r3, r3, #2
    1dde:	3306      	adds	r3, #6
    1de0:	009b      	lsls	r3, r3, #2
    1de2:	18d3      	adds	r3, r2, r3
    1de4:	3304      	adds	r3, #4
    1de6:	681b      	ldr	r3, [r3, #0]
    1de8:	1dfa      	adds	r2, r7, #7
    1dea:	7812      	ldrb	r2, [r2, #0]
    1dec:	0010      	movs	r0, r2
    1dee:	2203      	movs	r2, #3
    1df0:	4002      	ands	r2, r0
    1df2:	00d2      	lsls	r2, r2, #3
    1df4:	20ff      	movs	r0, #255	; 0xff
    1df6:	4090      	lsls	r0, r2
    1df8:	0002      	movs	r2, r0
    1dfa:	43d2      	mvns	r2, r2
    1dfc:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    1dfe:	683b      	ldr	r3, [r7, #0]
    1e00:	019b      	lsls	r3, r3, #6
    1e02:	20ff      	movs	r0, #255	; 0xff
    1e04:	4018      	ands	r0, r3
    1e06:	1dfb      	adds	r3, r7, #7
    1e08:	781b      	ldrb	r3, [r3, #0]
    1e0a:	001d      	movs	r5, r3
    1e0c:	2303      	movs	r3, #3
    1e0e:	402b      	ands	r3, r5
    1e10:	00db      	lsls	r3, r3, #3
    1e12:	4098      	lsls	r0, r3
    1e14:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1e16:	431a      	orrs	r2, r3
    1e18:	1d8b      	adds	r3, r1, #6
    1e1a:	009b      	lsls	r3, r3, #2
    1e1c:	18e3      	adds	r3, r4, r3
    1e1e:	3304      	adds	r3, #4
    1e20:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    1e22:	e027      	b.n	1e74 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1e24:	4c16      	ldr	r4, [pc, #88]	; (1e80 <NVIC_SetPriority+0xd8>)
    1e26:	1dfb      	adds	r3, r7, #7
    1e28:	781b      	ldrb	r3, [r3, #0]
    1e2a:	b25b      	sxtb	r3, r3
    1e2c:	089b      	lsrs	r3, r3, #2
    1e2e:	4914      	ldr	r1, [pc, #80]	; (1e80 <NVIC_SetPriority+0xd8>)
    1e30:	1dfa      	adds	r2, r7, #7
    1e32:	7812      	ldrb	r2, [r2, #0]
    1e34:	b252      	sxtb	r2, r2
    1e36:	0892      	lsrs	r2, r2, #2
    1e38:	32c0      	adds	r2, #192	; 0xc0
    1e3a:	0092      	lsls	r2, r2, #2
    1e3c:	5852      	ldr	r2, [r2, r1]
    1e3e:	1df9      	adds	r1, r7, #7
    1e40:	7809      	ldrb	r1, [r1, #0]
    1e42:	0008      	movs	r0, r1
    1e44:	2103      	movs	r1, #3
    1e46:	4001      	ands	r1, r0
    1e48:	00c9      	lsls	r1, r1, #3
    1e4a:	20ff      	movs	r0, #255	; 0xff
    1e4c:	4088      	lsls	r0, r1
    1e4e:	0001      	movs	r1, r0
    1e50:	43c9      	mvns	r1, r1
    1e52:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    1e54:	683a      	ldr	r2, [r7, #0]
    1e56:	0192      	lsls	r2, r2, #6
    1e58:	20ff      	movs	r0, #255	; 0xff
    1e5a:	4010      	ands	r0, r2
    1e5c:	1dfa      	adds	r2, r7, #7
    1e5e:	7812      	ldrb	r2, [r2, #0]
    1e60:	0015      	movs	r5, r2
    1e62:	2203      	movs	r2, #3
    1e64:	402a      	ands	r2, r5
    1e66:	00d2      	lsls	r2, r2, #3
    1e68:	4090      	lsls	r0, r2
    1e6a:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1e6c:	430a      	orrs	r2, r1
    1e6e:	33c0      	adds	r3, #192	; 0xc0
    1e70:	009b      	lsls	r3, r3, #2
    1e72:	511a      	str	r2, [r3, r4]
}
    1e74:	46c0      	nop			; (mov r8, r8)
    1e76:	46bd      	mov	sp, r7
    1e78:	b002      	add	sp, #8
    1e7a:	bdb0      	pop	{r4, r5, r7, pc}
    1e7c:	e000ed00 	.word	0xe000ed00
    1e80:	e000e100 	.word	0xe000e100

00001e84 <system_interrupt_enable_global>:
{
    1e84:	b580      	push	{r7, lr}
    1e86:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    1e88:	4b04      	ldr	r3, [pc, #16]	; (1e9c <system_interrupt_enable_global+0x18>)
    1e8a:	2201      	movs	r2, #1
    1e8c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1e8e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1e92:	b662      	cpsie	i
}
    1e94:	46c0      	nop			; (mov r8, r8)
    1e96:	46bd      	mov	sp, r7
    1e98:	bd80      	pop	{r7, pc}
    1e9a:	46c0      	nop			; (mov r8, r8)
    1e9c:	20000091 	.word	0x20000091

00001ea0 <system_interrupt_disable_global>:
{
    1ea0:	b580      	push	{r7, lr}
    1ea2:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1ea4:	b672      	cpsid	i
    1ea6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1eaa:	4b03      	ldr	r3, [pc, #12]	; (1eb8 <system_interrupt_disable_global+0x18>)
    1eac:	2200      	movs	r2, #0
    1eae:	701a      	strb	r2, [r3, #0]
}
    1eb0:	46c0      	nop			; (mov r8, r8)
    1eb2:	46bd      	mov	sp, r7
    1eb4:	bd80      	pop	{r7, pc}
    1eb6:	46c0      	nop			; (mov r8, r8)
    1eb8:	20000091 	.word	0x20000091

00001ebc <uart_clk_init>:
	SERCOM_RX_PAD_3
} SercomRXPad;


void uart_clk_init(void)
{
    1ebc:	b580      	push	{r7, lr}
    1ebe:	af00      	add	r7, sp, #0
	// Start the Software Reset and wait for it to finish
	BLE_UART_SERCOM->USART.CTRLA.bit.SWRST = 1 ;
    1ec0:	4a13      	ldr	r2, [pc, #76]	; (1f10 <uart_clk_init+0x54>)
    1ec2:	6813      	ldr	r3, [r2, #0]
    1ec4:	2101      	movs	r1, #1
    1ec6:	430b      	orrs	r3, r1
    1ec8:	6013      	str	r3, [r2, #0]
	while ( BLE_UART_SERCOM->USART.CTRLA.bit.SWRST || BLE_UART_SERCOM->USART.SYNCBUSY.bit.SWRST );
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	4b10      	ldr	r3, [pc, #64]	; (1f10 <uart_clk_init+0x54>)
    1ece:	681b      	ldr	r3, [r3, #0]
    1ed0:	07db      	lsls	r3, r3, #31
    1ed2:	0fdb      	lsrs	r3, r3, #31
    1ed4:	b2db      	uxtb	r3, r3
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	d1f8      	bne.n	1ecc <uart_clk_init+0x10>
    1eda:	4b0d      	ldr	r3, [pc, #52]	; (1f10 <uart_clk_init+0x54>)
    1edc:	69db      	ldr	r3, [r3, #28]
    1ede:	07db      	lsls	r3, r3, #31
    1ee0:	0fdb      	lsrs	r3, r3, #31
    1ee2:	b2db      	uxtb	r3, r3
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	d1f1      	bne.n	1ecc <uart_clk_init+0x10>
	
	// Turn on peripheral clock for SERCOM being used
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM2;
    1ee8:	4b0a      	ldr	r3, [pc, #40]	; (1f14 <uart_clk_init+0x58>)
    1eea:	4a0a      	ldr	r2, [pc, #40]	; (1f14 <uart_clk_init+0x58>)
    1eec:	6a12      	ldr	r2, [r2, #32]
    1eee:	2110      	movs	r1, #16
    1ef0:	430a      	orrs	r2, r1
    1ef2:	621a      	str	r2, [r3, #32]

	//Setting clock
	GCLK->CLKCTRL.reg =
    1ef4:	4b08      	ldr	r3, [pc, #32]	; (1f18 <uart_clk_init+0x5c>)
    1ef6:	4a09      	ldr	r2, [pc, #36]	; (1f1c <uart_clk_init+0x60>)
    1ef8:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID( GCM_SERCOM2_CORE )	|	// connected  SERCOMx to
	GCLK_CLKCTRL_GEN_GCLK0		|	// generic Clock Generator 0
	GCLK_CLKCTRL_CLKEN;			// and enable it

	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY ); // Wait for synchronization
    1efa:	46c0      	nop			; (mov r8, r8)
    1efc:	4b06      	ldr	r3, [pc, #24]	; (1f18 <uart_clk_init+0x5c>)
    1efe:	785b      	ldrb	r3, [r3, #1]
    1f00:	b2db      	uxtb	r3, r3
    1f02:	b25b      	sxtb	r3, r3
    1f04:	2b00      	cmp	r3, #0
    1f06:	dbf9      	blt.n	1efc <uart_clk_init+0x40>
}
    1f08:	46c0      	nop			; (mov r8, r8)
    1f0a:	46bd      	mov	sp, r7
    1f0c:	bd80      	pop	{r7, pc}
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	42001000 	.word	0x42001000
    1f14:	40000400 	.word	0x40000400
    1f18:	40000c00 	.word	0x40000c00
    1f1c:	00004016 	.word	0x00004016

00001f20 <uart_pin_init>:

void uart_pin_init(void)
{
    1f20:	b580      	push	{r7, lr}
    1f22:	b082      	sub	sp, #8
    1f24:	af00      	add	r7, sp, #0
	PORT->Group[PORTGROUP_A].DIRCLR.reg = PORT_PA08;	// RX as input
    1f26:	4b1c      	ldr	r3, [pc, #112]	; (1f98 <uart_pin_init+0x78>)
    1f28:	2280      	movs	r2, #128	; 0x80
    1f2a:	0052      	lsls	r2, r2, #1
    1f2c:	605a      	str	r2, [r3, #4]
	
	PORT->Group[PORTGROUP_A].DIRSET.reg = PORT_PA10;	// TX as output
    1f2e:	4b1a      	ldr	r3, [pc, #104]	; (1f98 <uart_pin_init+0x78>)
    1f30:	2280      	movs	r2, #128	; 0x80
    1f32:	00d2      	lsls	r2, r2, #3
    1f34:	609a      	str	r2, [r3, #8]
	PORT->Group[PORTGROUP_A].OUTSET.reg = PORT_PA10;	// TX idle state is high
    1f36:	4b18      	ldr	r3, [pc, #96]	; (1f98 <uart_pin_init+0x78>)
    1f38:	2280      	movs	r2, #128	; 0x80
    1f3a:	00d2      	lsls	r2, r2, #3
    1f3c:	619a      	str	r2, [r3, #24]

	// set port multiplexer for peripheral TX
	// =======================================
	uint32_t temp = (PORT->Group[PORTGROUP_A].PMUX[TX_PIN>>1].reg) & PORT_PMUX_PMUXO( GPIO_SERCOM_ALT_D );
    1f3e:	4a16      	ldr	r2, [pc, #88]	; (1f98 <uart_pin_init+0x78>)
    1f40:	2335      	movs	r3, #53	; 0x35
    1f42:	5cd3      	ldrb	r3, [r2, r3]
    1f44:	b2db      	uxtb	r3, r3
    1f46:	001a      	movs	r2, r3
    1f48:	2330      	movs	r3, #48	; 0x30
    1f4a:	4013      	ands	r3, r2
    1f4c:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[TX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( GPIO_SERCOM_ALT_D );
    1f4e:	4a12      	ldr	r2, [pc, #72]	; (1f98 <uart_pin_init+0x78>)
    1f50:	687b      	ldr	r3, [r7, #4]
    1f52:	b2db      	uxtb	r3, r3
    1f54:	2103      	movs	r1, #3
    1f56:	430b      	orrs	r3, r1
    1f58:	b2d9      	uxtb	r1, r3
    1f5a:	2335      	movs	r3, #53	; 0x35
    1f5c:	54d1      	strb	r1, [r2, r3]
	
	PORT->Group[PORTGROUP_A].PINCFG[TX_PIN].reg = PORT_PINCFG_PMUXEN ; // Enable port mux
    1f5e:	4a0e      	ldr	r2, [pc, #56]	; (1f98 <uart_pin_init+0x78>)
    1f60:	234a      	movs	r3, #74	; 0x4a
    1f62:	2101      	movs	r1, #1
    1f64:	54d1      	strb	r1, [r2, r3]
	temp = (PORT->Group[PORTGROUP_A].PMUX[RX_PIN>>1].reg) & PORT_PMUX_PMUXO( GPIO_SERCOM_ALT_D );
    1f66:	4a0c      	ldr	r2, [pc, #48]	; (1f98 <uart_pin_init+0x78>)
    1f68:	2334      	movs	r3, #52	; 0x34
    1f6a:	5cd3      	ldrb	r3, [r2, r3]
    1f6c:	b2db      	uxtb	r3, r3
    1f6e:	001a      	movs	r2, r3
    1f70:	2330      	movs	r3, #48	; 0x30
    1f72:	4013      	ands	r3, r2
    1f74:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[RX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( GPIO_SERCOM_ALT_D );
    1f76:	4a08      	ldr	r2, [pc, #32]	; (1f98 <uart_pin_init+0x78>)
    1f78:	687b      	ldr	r3, [r7, #4]
    1f7a:	b2db      	uxtb	r3, r3
    1f7c:	2103      	movs	r1, #3
    1f7e:	430b      	orrs	r3, r1
    1f80:	b2d9      	uxtb	r1, r3
    1f82:	2334      	movs	r3, #52	; 0x34
    1f84:	54d1      	strb	r1, [r2, r3]
	PORT->Group[PORTGROUP_A].PINCFG[RX_PIN].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN; // Enable port mux
    1f86:	4a04      	ldr	r2, [pc, #16]	; (1f98 <uart_pin_init+0x78>)
    1f88:	2348      	movs	r3, #72	; 0x48
    1f8a:	2103      	movs	r1, #3
    1f8c:	54d1      	strb	r1, [r2, r3]
}
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	46bd      	mov	sp, r7
    1f92:	b002      	add	sp, #8
    1f94:	bd80      	pop	{r7, pc}
    1f96:	46c0      	nop			; (mov r8, r8)
    1f98:	41004400 	.word	0x41004400

00001f9c <ble_uart_init>:

void ble_uart_init(void)
{	
    1f9c:	b580      	push	{r7, lr}
    1f9e:	af00      	add	r7, sp, #0
	uart_clk_init();
    1fa0:	4b18      	ldr	r3, [pc, #96]	; (2004 <STACK_SIZE+0x4>)
    1fa2:	4798      	blx	r3
	uart_pin_init();
    1fa4:	4b18      	ldr	r3, [pc, #96]	; (2008 <STACK_SIZE+0x8>)
    1fa6:	4798      	blx	r3
	
	
	
	BLE_UART_SERCOM->USART.CTRLA.reg =
    1fa8:	4b18      	ldr	r3, [pc, #96]	; (200c <STACK_SIZE+0xc>)
    1faa:	4a19      	ldr	r2, [pc, #100]	; (2010 <STACK_SIZE+0x10>)
    1fac:	601a      	str	r2, [r3, #0]
	
	
	// Asynchronous arithmetic mode
	// 65535 * ( 1 - sampleRateValue * baudrate / SystemCoreClock);
	// 65535 - 65535 * (sampleRateValue * baudrate / SystemCoreClock));
	BLE_UART_SERCOM->USART.BAUD.reg = 65535.0f * ( 1.0f - (16.0 * (float)(BAUDRATE)) / (float)(SYSTEM_CLK));
    1fae:	4b17      	ldr	r3, [pc, #92]	; (200c <STACK_SIZE+0xc>)
    1fb0:	4a18      	ldr	r2, [pc, #96]	; (2014 <STACK_SIZE+0x14>)
    1fb2:	819a      	strh	r2, [r3, #12]
	//BLE_UART_SERCOM->USART.BAUD.bit.BAUD = 9600;
	
	BLE_UART_SERCOM->USART.CTRLB.reg =
    1fb4:	4b15      	ldr	r3, [pc, #84]	; (200c <STACK_SIZE+0xc>)
    1fb6:	22c0      	movs	r2, #192	; 0xc0
    1fb8:	0292      	lsls	r2, r2, #10
    1fba:	605a      	str	r2, [r3, #4]
	SERCOM_USART_CTRLB_CHSIZE(0)	|	// 8 bit character size
	SERCOM_USART_CTRLB_TXEN			|	// Enable Transmit
	SERCOM_USART_CTRLB_RXEN;			// Enable Receive

	// Get Synced
	while (BLE_UART_SERCOM->USART.SYNCBUSY.bit.CTRLB);
    1fbc:	46c0      	nop			; (mov r8, r8)
    1fbe:	4b13      	ldr	r3, [pc, #76]	; (200c <STACK_SIZE+0xc>)
    1fc0:	69db      	ldr	r3, [r3, #28]
    1fc2:	075b      	lsls	r3, r3, #29
    1fc4:	0fdb      	lsrs	r3, r3, #31
    1fc6:	b2db      	uxtb	r3, r3
    1fc8:	2b00      	cmp	r3, #0
    1fca:	d1f8      	bne.n	1fbe <ble_uart_init+0x22>

	//Set the Interrupt to use
	BLE_UART_SERCOM->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;	// Interrupt on received complete
    1fcc:	4b0f      	ldr	r3, [pc, #60]	; (200c <STACK_SIZE+0xc>)
    1fce:	2204      	movs	r2, #4
    1fd0:	759a      	strb	r2, [r3, #22]
	
	// Enable interrupts
	NVIC_EnableIRQ(SERCOM2_IRQn);
    1fd2:	200b      	movs	r0, #11
    1fd4:	4b10      	ldr	r3, [pc, #64]	; (2018 <STACK_SIZE+0x18>)
    1fd6:	4798      	blx	r3
	NVIC_SetPriority(SERCOM2_IRQn,1);
    1fd8:	2101      	movs	r1, #1
    1fda:	200b      	movs	r0, #11
    1fdc:	4b0f      	ldr	r3, [pc, #60]	; (201c <STACK_SIZE+0x1c>)
    1fde:	4798      	blx	r3
	
	// enable the peripheral block
	BLE_UART_SERCOM->USART.CTRLA.bit.ENABLE = 0x1u;
    1fe0:	4a0a      	ldr	r2, [pc, #40]	; (200c <STACK_SIZE+0xc>)
    1fe2:	6813      	ldr	r3, [r2, #0]
    1fe4:	2102      	movs	r1, #2
    1fe6:	430b      	orrs	r3, r1
    1fe8:	6013      	str	r3, [r2, #0]
	
	// Wait for sercom to enable
	while(BLE_UART_SERCOM->USART.SYNCBUSY.bit.ENABLE);
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	4b07      	ldr	r3, [pc, #28]	; (200c <STACK_SIZE+0xc>)
    1fee:	69db      	ldr	r3, [r3, #28]
    1ff0:	079b      	lsls	r3, r3, #30
    1ff2:	0fdb      	lsrs	r3, r3, #31
    1ff4:	b2db      	uxtb	r3, r3
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d1f8      	bne.n	1fec <ble_uart_init+0x50>
	
	reset_buffers();
    1ffa:	4b09      	ldr	r3, [pc, #36]	; (2020 <STACK_SIZE+0x20>)
    1ffc:	4798      	blx	r3
}
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	46bd      	mov	sp, r7
    2002:	bd80      	pop	{r7, pc}
    2004:	00001ebd 	.word	0x00001ebd
    2008:	00001f21 	.word	0x00001f21
    200c:	42001000 	.word	0x42001000
    2010:	40010084 	.word	0x40010084
    2014:	fffffb14 	.word	0xfffffb14
    2018:	00001d7d 	.word	0x00001d7d
    201c:	00001da9 	.word	0x00001da9
    2020:	000020d9 	.word	0x000020d9

00002024 <ble_uart_write>:

void ble_uart_write(char buffer[])
{
    2024:	b580      	push	{r7, lr}
    2026:	b084      	sub	sp, #16
    2028:	af00      	add	r7, sp, #0
    202a:	6078      	str	r0, [r7, #4]
	system_interrupt_disable_global();
    202c:	4b10      	ldr	r3, [pc, #64]	; (2070 <ble_uart_write+0x4c>)
    202e:	4798      	blx	r3
	uint32_t i = 0;
    2030:	2300      	movs	r3, #0
    2032:	60fb      	str	r3, [r7, #12]
	while(buffer[i] != '\0')
    2034:	e00f      	b.n	2056 <ble_uart_write+0x32>
	{
		if(BLE_UART_SERCOM->USART.INTFLAG.bit.DRE == 1)
    2036:	4b0f      	ldr	r3, [pc, #60]	; (2074 <ble_uart_write+0x50>)
    2038:	7e1b      	ldrb	r3, [r3, #24]
    203a:	07db      	lsls	r3, r3, #31
    203c:	0fdb      	lsrs	r3, r3, #31
    203e:	b2db      	uxtb	r3, r3
    2040:	2b01      	cmp	r3, #1
    2042:	d108      	bne.n	2056 <ble_uart_write+0x32>
		{
			BLE_UART_SERCOM->USART.DATA.reg = (uint16_t)buffer[i++];
    2044:	490b      	ldr	r1, [pc, #44]	; (2074 <ble_uart_write+0x50>)
    2046:	68fb      	ldr	r3, [r7, #12]
    2048:	1c5a      	adds	r2, r3, #1
    204a:	60fa      	str	r2, [r7, #12]
    204c:	687a      	ldr	r2, [r7, #4]
    204e:	18d3      	adds	r3, r2, r3
    2050:	781b      	ldrb	r3, [r3, #0]
    2052:	b29b      	uxth	r3, r3
    2054:	850b      	strh	r3, [r1, #40]	; 0x28
	while(buffer[i] != '\0')
    2056:	687a      	ldr	r2, [r7, #4]
    2058:	68fb      	ldr	r3, [r7, #12]
    205a:	18d3      	adds	r3, r2, r3
    205c:	781b      	ldrb	r3, [r3, #0]
    205e:	2b00      	cmp	r3, #0
    2060:	d1e9      	bne.n	2036 <ble_uart_write+0x12>
		}
	}
	system_interrupt_enable_global();
    2062:	4b05      	ldr	r3, [pc, #20]	; (2078 <ble_uart_write+0x54>)
    2064:	4798      	blx	r3
}
    2066:	46c0      	nop			; (mov r8, r8)
    2068:	46bd      	mov	sp, r7
    206a:	b004      	add	sp, #16
    206c:	bd80      	pop	{r7, pc}
    206e:	46c0      	nop			; (mov r8, r8)
    2070:	00001ea1 	.word	0x00001ea1
    2074:	42001000 	.word	0x42001000
    2078:	00001e85 	.word	0x00001e85

0000207c <SERCOM2_Handler>:
	BLE_UART_SERCOM->USART.DATA.reg = data;
}


void SERCOM2_Handler()
{
    207c:	b580      	push	{r7, lr}
    207e:	af00      	add	r7, sp, #0
	if (BLE_UART_SERCOM->USART.INTFLAG.bit.RXC)
    2080:	4b12      	ldr	r3, [pc, #72]	; (20cc <SERCOM2_Handler+0x50>)
    2082:	7e1b      	ldrb	r3, [r3, #24]
    2084:	075b      	lsls	r3, r3, #29
    2086:	0fdb      	lsrs	r3, r3, #31
    2088:	b2db      	uxtb	r3, r3
    208a:	2b00      	cmp	r3, #0
    208c:	d01a      	beq.n	20c4 <SERCOM2_Handler+0x48>
	{
		//while (BLE_UART_SERCOM->USART.INTFLAG.bit.DRE != 0 )
		//{
			// Got a character
			if (buff_count > 127)
    208e:	4b10      	ldr	r3, [pc, #64]	; (20d0 <SERCOM2_Handler+0x54>)
    2090:	681b      	ldr	r3, [r3, #0]
    2092:	2b7f      	cmp	r3, #127	; 0x7f
    2094:	dd0b      	ble.n	20ae <SERCOM2_Handler+0x32>
			{
				buff_count = 0;
    2096:	4b0e      	ldr	r3, [pc, #56]	; (20d0 <SERCOM2_Handler+0x54>)
    2098:	2200      	movs	r2, #0
    209a:	601a      	str	r2, [r3, #0]
				rx_buffer_array[buff_count] = (uint8_t) BLE_UART_SERCOM->USART.DATA.reg;
    209c:	4b0c      	ldr	r3, [pc, #48]	; (20d0 <SERCOM2_Handler+0x54>)
    209e:	681b      	ldr	r3, [r3, #0]
    20a0:	4a0a      	ldr	r2, [pc, #40]	; (20cc <SERCOM2_Handler+0x50>)
    20a2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    20a4:	b292      	uxth	r2, r2
    20a6:	b2d1      	uxtb	r1, r2
    20a8:	4a0a      	ldr	r2, [pc, #40]	; (20d4 <SERCOM2_Handler+0x58>)
    20aa:	54d1      	strb	r1, [r2, r3]
				rx_buffer_array[buff_count++] = (uint8_t)BLE_UART_SERCOM->USART.DATA.reg;
			}
		//}

	}
}
    20ac:	e00a      	b.n	20c4 <SERCOM2_Handler+0x48>
				rx_buffer_array[buff_count++] = (uint8_t)BLE_UART_SERCOM->USART.DATA.reg;
    20ae:	4b08      	ldr	r3, [pc, #32]	; (20d0 <SERCOM2_Handler+0x54>)
    20b0:	681b      	ldr	r3, [r3, #0]
    20b2:	1c59      	adds	r1, r3, #1
    20b4:	4a06      	ldr	r2, [pc, #24]	; (20d0 <SERCOM2_Handler+0x54>)
    20b6:	6011      	str	r1, [r2, #0]
    20b8:	4a04      	ldr	r2, [pc, #16]	; (20cc <SERCOM2_Handler+0x50>)
    20ba:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    20bc:	b292      	uxth	r2, r2
    20be:	b2d1      	uxtb	r1, r2
    20c0:	4a04      	ldr	r2, [pc, #16]	; (20d4 <SERCOM2_Handler+0x58>)
    20c2:	54d1      	strb	r1, [r2, r3]
}
    20c4:	46c0      	nop			; (mov r8, r8)
    20c6:	46bd      	mov	sp, r7
    20c8:	bd80      	pop	{r7, pc}
    20ca:	46c0      	nop			; (mov r8, r8)
    20cc:	42001000 	.word	0x42001000
    20d0:	20000284 	.word	0x20000284
    20d4:	2000032c 	.word	0x2000032c

000020d8 <reset_buffers>:

void reset_buffers()
{
    20d8:	b580      	push	{r7, lr}
    20da:	b082      	sub	sp, #8
    20dc:	af00      	add	r7, sp, #0
	for (uint8_t k=0;k<sizeof(rx_buffer_array);k++)
    20de:	1dfb      	adds	r3, r7, #7
    20e0:	2200      	movs	r2, #0
    20e2:	701a      	strb	r2, [r3, #0]
    20e4:	e009      	b.n	20fa <reset_buffers+0x22>
	{
		rx_buffer_array[k] = 0;
    20e6:	1dfb      	adds	r3, r7, #7
    20e8:	781b      	ldrb	r3, [r3, #0]
    20ea:	4a0a      	ldr	r2, [pc, #40]	; (2114 <reset_buffers+0x3c>)
    20ec:	2100      	movs	r1, #0
    20ee:	54d1      	strb	r1, [r2, r3]
	for (uint8_t k=0;k<sizeof(rx_buffer_array);k++)
    20f0:	1dfb      	adds	r3, r7, #7
    20f2:	781a      	ldrb	r2, [r3, #0]
    20f4:	1dfb      	adds	r3, r7, #7
    20f6:	3201      	adds	r2, #1
    20f8:	701a      	strb	r2, [r3, #0]
    20fa:	1dfb      	adds	r3, r7, #7
    20fc:	781b      	ldrb	r3, [r3, #0]
    20fe:	b25b      	sxtb	r3, r3
    2100:	2b00      	cmp	r3, #0
    2102:	daf0      	bge.n	20e6 <reset_buffers+0xe>
	}
	buff_count = 0;
    2104:	4b04      	ldr	r3, [pc, #16]	; (2118 <reset_buffers+0x40>)
    2106:	2200      	movs	r2, #0
    2108:	601a      	str	r2, [r3, #0]
}
    210a:	46c0      	nop			; (mov r8, r8)
    210c:	46bd      	mov	sp, r7
    210e:	b002      	add	sp, #8
    2110:	bd80      	pop	{r7, pc}
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	2000032c 	.word	0x2000032c
    2118:	20000284 	.word	0x20000284

0000211c <data_handler>:




void data_handler(char buffer[])
{
    211c:	b5f0      	push	{r4, r5, r6, r7, lr}
    211e:	b097      	sub	sp, #92	; 0x5c
    2120:	af00      	add	r7, sp, #0
    2122:	60f8      	str	r0, [r7, #12]
	int buf_s = strlen(buffer);
    2124:	68fb      	ldr	r3, [r7, #12]
    2126:	0018      	movs	r0, r3
    2128:	4be4      	ldr	r3, [pc, #912]	; (24bc <data_handler+0x3a0>)
    212a:	4798      	blx	r3
    212c:	0003      	movs	r3, r0
    212e:	657b      	str	r3, [r7, #84]	; 0x54
	if (strncmp(buffer,test_bob,3) == 0)
    2130:	49e3      	ldr	r1, [pc, #908]	; (24c0 <data_handler+0x3a4>)
    2132:	68fb      	ldr	r3, [r7, #12]
    2134:	2203      	movs	r2, #3
    2136:	0018      	movs	r0, r3
    2138:	4be2      	ldr	r3, [pc, #904]	; (24c4 <data_handler+0x3a8>)
    213a:	4798      	blx	r3
    213c:	1e03      	subs	r3, r0, #0
    213e:	d132      	bne.n	21a6 <data_handler+0x8a>
	{
		ble_uart_write("bob was found");
    2140:	4be1      	ldr	r3, [pc, #900]	; (24c8 <data_handler+0x3ac>)
    2142:	0018      	movs	r0, r3
    2144:	4be1      	ldr	r3, [pc, #900]	; (24cc <data_handler+0x3b0>)
    2146:	4798      	blx	r3
		
		if (strlen(buffer) > strlen(test_bob))
    2148:	68fb      	ldr	r3, [r7, #12]
    214a:	0018      	movs	r0, r3
    214c:	4bdb      	ldr	r3, [pc, #876]	; (24bc <data_handler+0x3a0>)
    214e:	4798      	blx	r3
    2150:	0004      	movs	r4, r0
    2152:	4bdb      	ldr	r3, [pc, #876]	; (24c0 <data_handler+0x3a4>)
    2154:	0018      	movs	r0, r3
    2156:	4bd9      	ldr	r3, [pc, #868]	; (24bc <data_handler+0x3a0>)
    2158:	4798      	blx	r3
    215a:	0003      	movs	r3, r0
    215c:	429c      	cmp	r4, r3
    215e:	d922      	bls.n	21a6 <data_handler+0x8a>
		{
			int arg1;
			sscanf(buffer,"PWM %d",&arg1);
    2160:	2348      	movs	r3, #72	; 0x48
    2162:	2208      	movs	r2, #8
    2164:	18ba      	adds	r2, r7, r2
    2166:	18d2      	adds	r2, r2, r3
    2168:	49d9      	ldr	r1, [pc, #868]	; (24d0 <data_handler+0x3b4>)
    216a:	68fb      	ldr	r3, [r7, #12]
    216c:	0018      	movs	r0, r3
    216e:	4bd9      	ldr	r3, [pc, #868]	; (24d4 <data_handler+0x3b8>)
    2170:	4798      	blx	r3
			//arg1 = buffer[4]-'0';
			if (arg1 < 1)
    2172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2174:	2b00      	cmp	r3, #0
    2176:	dc01      	bgt.n	217c <data_handler+0x60>
			{
				arg1 = 1;
    2178:	2301      	movs	r3, #1
    217a:	653b      	str	r3, [r7, #80]	; 0x50
			}
			pwm_bob = arg1;
    217c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    217e:	4bd6      	ldr	r3, [pc, #856]	; (24d8 <data_handler+0x3bc>)
    2180:	601a      	str	r2, [r3, #0]
			char string_buffer[32];
			sprintf(string_buffer,": %d",arg1);
    2182:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2184:	49d5      	ldr	r1, [pc, #852]	; (24dc <data_handler+0x3c0>)
    2186:	2308      	movs	r3, #8
    2188:	2008      	movs	r0, #8
    218a:	4684      	mov	ip, r0
    218c:	44bc      	add	ip, r7
    218e:	4463      	add	r3, ip
    2190:	0018      	movs	r0, r3
    2192:	4bd3      	ldr	r3, [pc, #844]	; (24e0 <data_handler+0x3c4>)
    2194:	4798      	blx	r3
			ble_uart_write(string_buffer);
    2196:	2308      	movs	r3, #8
    2198:	2208      	movs	r2, #8
    219a:	4694      	mov	ip, r2
    219c:	44bc      	add	ip, r7
    219e:	4463      	add	r3, ip
    21a0:	0018      	movs	r0, r3
    21a2:	4bca      	ldr	r3, [pc, #808]	; (24cc <data_handler+0x3b0>)
    21a4:	4798      	blx	r3
		}
	}


	if(strncmp(buffer,FLASH_ALL_ON,4) == 0)
    21a6:	49cf      	ldr	r1, [pc, #828]	; (24e4 <data_handler+0x3c8>)
    21a8:	68fb      	ldr	r3, [r7, #12]
    21aa:	2204      	movs	r2, #4
    21ac:	0018      	movs	r0, r3
    21ae:	4bc5      	ldr	r3, [pc, #788]	; (24c4 <data_handler+0x3a8>)
    21b0:	4798      	blx	r3
    21b2:	1e03      	subs	r3, r0, #0
    21b4:	d17c      	bne.n	22b0 <data_handler+0x194>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    21b6:	2301      	movs	r3, #1
    21b8:	2200      	movs	r2, #0
    21ba:	2101      	movs	r1, #1
    21bc:	2000      	movs	r0, #0
    21be:	4cca      	ldr	r4, [pc, #808]	; (24e8 <data_handler+0x3cc>)
    21c0:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    21c2:	2301      	movs	r3, #1
    21c4:	2200      	movs	r2, #0
    21c6:	2102      	movs	r1, #2
    21c8:	2000      	movs	r0, #0
    21ca:	4cc7      	ldr	r4, [pc, #796]	; (24e8 <data_handler+0x3cc>)
    21cc:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    21ce:	2301      	movs	r3, #1
    21d0:	2200      	movs	r2, #0
    21d2:	2103      	movs	r1, #3
    21d4:	2000      	movs	r0, #0
    21d6:	4cc4      	ldr	r4, [pc, #784]	; (24e8 <data_handler+0x3cc>)
    21d8:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    21da:	2301      	movs	r3, #1
    21dc:	2200      	movs	r2, #0
    21de:	2104      	movs	r1, #4
    21e0:	2000      	movs	r0, #0
    21e2:	4cc1      	ldr	r4, [pc, #772]	; (24e8 <data_handler+0x3cc>)
    21e4:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,true);
    21e6:	2301      	movs	r3, #1
    21e8:	2201      	movs	r2, #1
    21ea:	2102      	movs	r1, #2
    21ec:	2000      	movs	r0, #0
    21ee:	4cbe      	ldr	r4, [pc, #760]	; (24e8 <data_handler+0x3cc>)
    21f0:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,true);
    21f2:	2301      	movs	r3, #1
    21f4:	2201      	movs	r2, #1
    21f6:	2101      	movs	r1, #1
    21f8:	2000      	movs	r0, #0
    21fa:	4cbb      	ldr	r4, [pc, #748]	; (24e8 <data_handler+0x3cc>)
    21fc:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,true);
    21fe:	2301      	movs	r3, #1
    2200:	2202      	movs	r2, #2
    2202:	2102      	movs	r1, #2
    2204:	2000      	movs	r0, #0
    2206:	4cb8      	ldr	r4, [pc, #736]	; (24e8 <data_handler+0x3cc>)
    2208:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,true);
    220a:	2301      	movs	r3, #1
    220c:	2202      	movs	r2, #2
    220e:	2101      	movs	r1, #1
    2210:	2000      	movs	r0, #0
    2212:	4cb5      	ldr	r4, [pc, #724]	; (24e8 <data_handler+0x3cc>)
    2214:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,true);
    2216:	2301      	movs	r3, #1
    2218:	2202      	movs	r2, #2
    221a:	2104      	movs	r1, #4
    221c:	2000      	movs	r0, #0
    221e:	4cb2      	ldr	r4, [pc, #712]	; (24e8 <data_handler+0x3cc>)
    2220:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,true);
    2222:	2301      	movs	r3, #1
    2224:	2202      	movs	r2, #2
    2226:	2103      	movs	r1, #3
    2228:	2000      	movs	r0, #0
    222a:	4caf      	ldr	r4, [pc, #700]	; (24e8 <data_handler+0x3cc>)
    222c:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,true);
    222e:	2301      	movs	r3, #1
    2230:	2201      	movs	r2, #1
    2232:	2103      	movs	r1, #3
    2234:	2000      	movs	r0, #0
    2236:	4cac      	ldr	r4, [pc, #688]	; (24e8 <data_handler+0x3cc>)
    2238:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,true);
    223a:	2301      	movs	r3, #1
    223c:	2201      	movs	r2, #1
    223e:	2104      	movs	r1, #4
    2240:	2000      	movs	r0, #0
    2242:	4ca9      	ldr	r4, [pc, #676]	; (24e8 <data_handler+0x3cc>)
    2244:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,true);
    2246:	2301      	movs	r3, #1
    2248:	2203      	movs	r2, #3
    224a:	2102      	movs	r1, #2
    224c:	2000      	movs	r0, #0
    224e:	4ca6      	ldr	r4, [pc, #664]	; (24e8 <data_handler+0x3cc>)
    2250:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,true);
    2252:	2301      	movs	r3, #1
    2254:	2203      	movs	r2, #3
    2256:	2101      	movs	r1, #1
    2258:	2000      	movs	r0, #0
    225a:	4ca3      	ldr	r4, [pc, #652]	; (24e8 <data_handler+0x3cc>)
    225c:	47a0      	blx	r4
		
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR, SUB_LEFT_PIN,true);
    225e:	2301      	movs	r3, #1
    2260:	2203      	movs	r2, #3
    2262:	2103      	movs	r1, #3
    2264:	2000      	movs	r0, #0
    2266:	4ca0      	ldr	r4, [pc, #640]	; (24e8 <data_handler+0x3cc>)
    2268:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR, SUB_RIGHT_PIN,true);
    226a:	2301      	movs	r3, #1
    226c:	2204      	movs	r2, #4
    226e:	2103      	movs	r1, #3
    2270:	2000      	movs	r0, #0
    2272:	4c9d      	ldr	r4, [pc, #628]	; (24e8 <data_handler+0x3cc>)
    2274:	47a0      	blx	r4
		
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,true);
    2276:	2301      	movs	r3, #1
    2278:	2204      	movs	r2, #4
    227a:	2101      	movs	r1, #1
    227c:	2000      	movs	r0, #0
    227e:	4c9a      	ldr	r4, [pc, #616]	; (24e8 <data_handler+0x3cc>)
    2280:	47a0      	blx	r4
		
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,true);
    2282:	2301      	movs	r3, #1
    2284:	2203      	movs	r2, #3
    2286:	2105      	movs	r1, #5
    2288:	2000      	movs	r0, #0
    228a:	4c97      	ldr	r4, [pc, #604]	; (24e8 <data_handler+0x3cc>)
    228c:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,true);
    228e:	2301      	movs	r3, #1
    2290:	2202      	movs	r2, #2
    2292:	2105      	movs	r1, #5
    2294:	2000      	movs	r0, #0
    2296:	4c94      	ldr	r4, [pc, #592]	; (24e8 <data_handler+0x3cc>)
    2298:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,true);
    229a:	2301      	movs	r3, #1
    229c:	2204      	movs	r2, #4
    229e:	2105      	movs	r1, #5
    22a0:	2000      	movs	r0, #0
    22a2:	4c91      	ldr	r4, [pc, #580]	; (24e8 <data_handler+0x3cc>)
    22a4:	47a0      	blx	r4
		
		flash_all = true;
    22a6:	4b91      	ldr	r3, [pc, #580]	; (24ec <data_handler+0x3d0>)
    22a8:	2201      	movs	r2, #1
    22aa:	701a      	strb	r2, [r3, #0]
    22ac:	f000 fe13 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,FLASH_ALL_OFF,4) == 0)
    22b0:	498f      	ldr	r1, [pc, #572]	; (24f0 <data_handler+0x3d4>)
    22b2:	68fb      	ldr	r3, [r7, #12]
    22b4:	2204      	movs	r2, #4
    22b6:	0018      	movs	r0, r3
    22b8:	4b82      	ldr	r3, [pc, #520]	; (24c4 <data_handler+0x3a8>)
    22ba:	4798      	blx	r3
    22bc:	1e03      	subs	r3, r0, #0
    22be:	d17c      	bne.n	23ba <data_handler+0x29e>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    22c0:	2300      	movs	r3, #0
    22c2:	2200      	movs	r2, #0
    22c4:	2101      	movs	r1, #1
    22c6:	2000      	movs	r0, #0
    22c8:	4c87      	ldr	r4, [pc, #540]	; (24e8 <data_handler+0x3cc>)
    22ca:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    22cc:	2300      	movs	r3, #0
    22ce:	2200      	movs	r2, #0
    22d0:	2102      	movs	r1, #2
    22d2:	2000      	movs	r0, #0
    22d4:	4c84      	ldr	r4, [pc, #528]	; (24e8 <data_handler+0x3cc>)
    22d6:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    22d8:	2300      	movs	r3, #0
    22da:	2200      	movs	r2, #0
    22dc:	2103      	movs	r1, #3
    22de:	2000      	movs	r0, #0
    22e0:	4c81      	ldr	r4, [pc, #516]	; (24e8 <data_handler+0x3cc>)
    22e2:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    22e4:	2300      	movs	r3, #0
    22e6:	2200      	movs	r2, #0
    22e8:	2104      	movs	r1, #4
    22ea:	2000      	movs	r0, #0
    22ec:	4c7e      	ldr	r4, [pc, #504]	; (24e8 <data_handler+0x3cc>)
    22ee:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,false);
    22f0:	2300      	movs	r3, #0
    22f2:	2201      	movs	r2, #1
    22f4:	2102      	movs	r1, #2
    22f6:	2000      	movs	r0, #0
    22f8:	4c7b      	ldr	r4, [pc, #492]	; (24e8 <data_handler+0x3cc>)
    22fa:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,false);
    22fc:	2300      	movs	r3, #0
    22fe:	2201      	movs	r2, #1
    2300:	2101      	movs	r1, #1
    2302:	2000      	movs	r0, #0
    2304:	4c78      	ldr	r4, [pc, #480]	; (24e8 <data_handler+0x3cc>)
    2306:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,false);
    2308:	2300      	movs	r3, #0
    230a:	2202      	movs	r2, #2
    230c:	2102      	movs	r1, #2
    230e:	2000      	movs	r0, #0
    2310:	4c75      	ldr	r4, [pc, #468]	; (24e8 <data_handler+0x3cc>)
    2312:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,false);
    2314:	2300      	movs	r3, #0
    2316:	2202      	movs	r2, #2
    2318:	2101      	movs	r1, #1
    231a:	2000      	movs	r0, #0
    231c:	4c72      	ldr	r4, [pc, #456]	; (24e8 <data_handler+0x3cc>)
    231e:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,false);
    2320:	2300      	movs	r3, #0
    2322:	2202      	movs	r2, #2
    2324:	2104      	movs	r1, #4
    2326:	2000      	movs	r0, #0
    2328:	4c6f      	ldr	r4, [pc, #444]	; (24e8 <data_handler+0x3cc>)
    232a:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,false);
    232c:	2300      	movs	r3, #0
    232e:	2202      	movs	r2, #2
    2330:	2103      	movs	r1, #3
    2332:	2000      	movs	r0, #0
    2334:	4c6c      	ldr	r4, [pc, #432]	; (24e8 <data_handler+0x3cc>)
    2336:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,false);
    2338:	2300      	movs	r3, #0
    233a:	2201      	movs	r2, #1
    233c:	2103      	movs	r1, #3
    233e:	2000      	movs	r0, #0
    2340:	4c69      	ldr	r4, [pc, #420]	; (24e8 <data_handler+0x3cc>)
    2342:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,false);
    2344:	2300      	movs	r3, #0
    2346:	2201      	movs	r2, #1
    2348:	2104      	movs	r1, #4
    234a:	2000      	movs	r0, #0
    234c:	4c66      	ldr	r4, [pc, #408]	; (24e8 <data_handler+0x3cc>)
    234e:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,false);
    2350:	2300      	movs	r3, #0
    2352:	2203      	movs	r2, #3
    2354:	2102      	movs	r1, #2
    2356:	2000      	movs	r0, #0
    2358:	4c63      	ldr	r4, [pc, #396]	; (24e8 <data_handler+0x3cc>)
    235a:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,false);
    235c:	2300      	movs	r3, #0
    235e:	2203      	movs	r2, #3
    2360:	2101      	movs	r1, #1
    2362:	2000      	movs	r0, #0
    2364:	4c60      	ldr	r4, [pc, #384]	; (24e8 <data_handler+0x3cc>)
    2366:	47a0      	blx	r4
		
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR,SUB_LEFT_PIN,false);
    2368:	2300      	movs	r3, #0
    236a:	2203      	movs	r2, #3
    236c:	2103      	movs	r1, #3
    236e:	2000      	movs	r0, #0
    2370:	4c5d      	ldr	r4, [pc, #372]	; (24e8 <data_handler+0x3cc>)
    2372:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR,SUB_RIGHT_PIN,false);
    2374:	2300      	movs	r3, #0
    2376:	2204      	movs	r2, #4
    2378:	2103      	movs	r1, #3
    237a:	2000      	movs	r0, #0
    237c:	4c5a      	ldr	r4, [pc, #360]	; (24e8 <data_handler+0x3cc>)
    237e:	47a0      	blx	r4
		
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,false);
    2380:	2300      	movs	r3, #0
    2382:	2204      	movs	r2, #4
    2384:	2101      	movs	r1, #1
    2386:	2000      	movs	r0, #0
    2388:	4c57      	ldr	r4, [pc, #348]	; (24e8 <data_handler+0x3cc>)
    238a:	47a0      	blx	r4
		
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,false);
    238c:	2300      	movs	r3, #0
    238e:	2203      	movs	r2, #3
    2390:	2105      	movs	r1, #5
    2392:	2000      	movs	r0, #0
    2394:	4c54      	ldr	r4, [pc, #336]	; (24e8 <data_handler+0x3cc>)
    2396:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,false);
    2398:	2300      	movs	r3, #0
    239a:	2202      	movs	r2, #2
    239c:	2105      	movs	r1, #5
    239e:	2000      	movs	r0, #0
    23a0:	4c51      	ldr	r4, [pc, #324]	; (24e8 <data_handler+0x3cc>)
    23a2:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,false);
    23a4:	2300      	movs	r3, #0
    23a6:	2204      	movs	r2, #4
    23a8:	2105      	movs	r1, #5
    23aa:	2000      	movs	r0, #0
    23ac:	4c4e      	ldr	r4, [pc, #312]	; (24e8 <data_handler+0x3cc>)
    23ae:	47a0      	blx	r4
		
		flash_all = false;
    23b0:	4b4e      	ldr	r3, [pc, #312]	; (24ec <data_handler+0x3d0>)
    23b2:	2200      	movs	r2, #0
    23b4:	701a      	strb	r2, [r3, #0]
    23b6:	f000 fd8e 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,BLINK_ALL_ON,5) == 0)
    23ba:	494e      	ldr	r1, [pc, #312]	; (24f4 <data_handler+0x3d8>)
    23bc:	68fb      	ldr	r3, [r7, #12]
    23be:	2205      	movs	r2, #5
    23c0:	0018      	movs	r0, r3
    23c2:	4b40      	ldr	r3, [pc, #256]	; (24c4 <data_handler+0x3a8>)
    23c4:	4798      	blx	r3
    23c6:	1e03      	subs	r3, r0, #0
    23c8:	d10a      	bne.n	23e0 <data_handler+0x2c4>
	{
		blink_left = true;
    23ca:	4b4b      	ldr	r3, [pc, #300]	; (24f8 <data_handler+0x3dc>)
    23cc:	2201      	movs	r2, #1
    23ce:	701a      	strb	r2, [r3, #0]
		blink_right = true;
    23d0:	4b4a      	ldr	r3, [pc, #296]	; (24fc <data_handler+0x3e0>)
    23d2:	2201      	movs	r2, #1
    23d4:	701a      	strb	r2, [r3, #0]
		blink_all = true;
    23d6:	4b4a      	ldr	r3, [pc, #296]	; (2500 <data_handler+0x3e4>)
    23d8:	2201      	movs	r2, #1
    23da:	701a      	strb	r2, [r3, #0]
    23dc:	f000 fd7b 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,BLINK_ALL_OFF,5) == 0)
    23e0:	4948      	ldr	r1, [pc, #288]	; (2504 <data_handler+0x3e8>)
    23e2:	68fb      	ldr	r3, [r7, #12]
    23e4:	2205      	movs	r2, #5
    23e6:	0018      	movs	r0, r3
    23e8:	4b36      	ldr	r3, [pc, #216]	; (24c4 <data_handler+0x3a8>)
    23ea:	4798      	blx	r3
    23ec:	1e03      	subs	r3, r0, #0
    23ee:	d10a      	bne.n	2406 <data_handler+0x2ea>
	{
		blink_left = false;
    23f0:	4b41      	ldr	r3, [pc, #260]	; (24f8 <data_handler+0x3dc>)
    23f2:	2200      	movs	r2, #0
    23f4:	701a      	strb	r2, [r3, #0]
		blink_right = false;
    23f6:	4b41      	ldr	r3, [pc, #260]	; (24fc <data_handler+0x3e0>)
    23f8:	2200      	movs	r2, #0
    23fa:	701a      	strb	r2, [r3, #0]
		blink_all = false;
    23fc:	4b40      	ldr	r3, [pc, #256]	; (2500 <data_handler+0x3e4>)
    23fe:	2200      	movs	r2, #0
    2400:	701a      	strb	r2, [r3, #0]
    2402:	f000 fd68 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,BLINK_LEFT_ON,5) == 0)
    2406:	4940      	ldr	r1, [pc, #256]	; (2508 <data_handler+0x3ec>)
    2408:	68fb      	ldr	r3, [r7, #12]
    240a:	2205      	movs	r2, #5
    240c:	0018      	movs	r0, r3
    240e:	4b2d      	ldr	r3, [pc, #180]	; (24c4 <data_handler+0x3a8>)
    2410:	4798      	blx	r3
    2412:	1e03      	subs	r3, r0, #0
    2414:	d104      	bne.n	2420 <data_handler+0x304>
	{
		blink_left = true;
    2416:	4b38      	ldr	r3, [pc, #224]	; (24f8 <data_handler+0x3dc>)
    2418:	2201      	movs	r2, #1
    241a:	701a      	strb	r2, [r3, #0]
    241c:	f000 fd5b 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,BLINK_LEFT_OFF,5) == 0)
    2420:	493a      	ldr	r1, [pc, #232]	; (250c <data_handler+0x3f0>)
    2422:	68fb      	ldr	r3, [r7, #12]
    2424:	2205      	movs	r2, #5
    2426:	0018      	movs	r0, r3
    2428:	4b26      	ldr	r3, [pc, #152]	; (24c4 <data_handler+0x3a8>)
    242a:	4798      	blx	r3
    242c:	1e03      	subs	r3, r0, #0
    242e:	d104      	bne.n	243a <data_handler+0x31e>
	{
		blink_left = false;
    2430:	4b31      	ldr	r3, [pc, #196]	; (24f8 <data_handler+0x3dc>)
    2432:	2200      	movs	r2, #0
    2434:	701a      	strb	r2, [r3, #0]
    2436:	f000 fd4e 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,BLINK_RIGHT_ON,5) == 0)
    243a:	4935      	ldr	r1, [pc, #212]	; (2510 <data_handler+0x3f4>)
    243c:	68fb      	ldr	r3, [r7, #12]
    243e:	2205      	movs	r2, #5
    2440:	0018      	movs	r0, r3
    2442:	4b20      	ldr	r3, [pc, #128]	; (24c4 <data_handler+0x3a8>)
    2444:	4798      	blx	r3
    2446:	1e03      	subs	r3, r0, #0
    2448:	d104      	bne.n	2454 <data_handler+0x338>
	{
		blink_right = true;
    244a:	4b2c      	ldr	r3, [pc, #176]	; (24fc <data_handler+0x3e0>)
    244c:	2201      	movs	r2, #1
    244e:	701a      	strb	r2, [r3, #0]
    2450:	f000 fd41 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,BLINK_RIGHT_OFF,5) == 0)
    2454:	492f      	ldr	r1, [pc, #188]	; (2514 <data_handler+0x3f8>)
    2456:	68fb      	ldr	r3, [r7, #12]
    2458:	2205      	movs	r2, #5
    245a:	0018      	movs	r0, r3
    245c:	4b19      	ldr	r3, [pc, #100]	; (24c4 <data_handler+0x3a8>)
    245e:	4798      	blx	r3
    2460:	1e03      	subs	r3, r0, #0
    2462:	d104      	bne.n	246e <data_handler+0x352>
	{
		blink_right = false;
    2464:	4b25      	ldr	r3, [pc, #148]	; (24fc <data_handler+0x3e0>)
    2466:	2200      	movs	r2, #0
    2468:	701a      	strb	r2, [r3, #0]
    246a:	f000 fd34 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,HORN_0_ON,6) == 0)
    246e:	492a      	ldr	r1, [pc, #168]	; (2518 <data_handler+0x3fc>)
    2470:	68fb      	ldr	r3, [r7, #12]
    2472:	2206      	movs	r2, #6
    2474:	0018      	movs	r0, r3
    2476:	4b13      	ldr	r3, [pc, #76]	; (24c4 <data_handler+0x3a8>)
    2478:	4798      	blx	r3
    247a:	1e03      	subs	r3, r0, #0
    247c:	d104      	bne.n	2488 <data_handler+0x36c>
	{
		horn0 = true;
    247e:	4b27      	ldr	r3, [pc, #156]	; (251c <data_handler+0x400>)
    2480:	2201      	movs	r2, #1
    2482:	701a      	strb	r2, [r3, #0]
    2484:	f000 fd27 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,HORN_0_OFF,6) == 0)
    2488:	4925      	ldr	r1, [pc, #148]	; (2520 <data_handler+0x404>)
    248a:	68fb      	ldr	r3, [r7, #12]
    248c:	2206      	movs	r2, #6
    248e:	0018      	movs	r0, r3
    2490:	4b0c      	ldr	r3, [pc, #48]	; (24c4 <data_handler+0x3a8>)
    2492:	4798      	blx	r3
    2494:	1e03      	subs	r3, r0, #0
    2496:	d104      	bne.n	24a2 <data_handler+0x386>
	{
		horn0 = false;
    2498:	4b20      	ldr	r3, [pc, #128]	; (251c <data_handler+0x400>)
    249a:	2200      	movs	r2, #0
    249c:	701a      	strb	r2, [r3, #0]
    249e:	f000 fd1a 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,HORN_1_ON,6) == 0)
    24a2:	4920      	ldr	r1, [pc, #128]	; (2524 <data_handler+0x408>)
    24a4:	68fb      	ldr	r3, [r7, #12]
    24a6:	2206      	movs	r2, #6
    24a8:	0018      	movs	r0, r3
    24aa:	4b06      	ldr	r3, [pc, #24]	; (24c4 <data_handler+0x3a8>)
    24ac:	4798      	blx	r3
    24ae:	1e03      	subs	r3, r0, #0
    24b0:	d13c      	bne.n	252c <data_handler+0x410>
	{
		horn1 = true;
    24b2:	4b1d      	ldr	r3, [pc, #116]	; (2528 <data_handler+0x40c>)
    24b4:	2201      	movs	r2, #1
    24b6:	701a      	strb	r2, [r3, #0]
    24b8:	f000 fd0d 	bl	2ed6 <data_handler+0xdba>
    24bc:	000082dd 	.word	0x000082dd
    24c0:	2000000c 	.word	0x2000000c
    24c4:	000082eb 	.word	0x000082eb
    24c8:	0000965c 	.word	0x0000965c
    24cc:	00002025 	.word	0x00002025
    24d0:	0000966c 	.word	0x0000966c
    24d4:	00008289 	.word	0x00008289
    24d8:	20000454 	.word	0x20000454
    24dc:	00009674 	.word	0x00009674
    24e0:	00008245 	.word	0x00008245
    24e4:	0000967c 	.word	0x0000967c
    24e8:	00003afd 	.word	0x00003afd
    24ec:	200003c6 	.word	0x200003c6
    24f0:	00009684 	.word	0x00009684
    24f4:	0000968c 	.word	0x0000968c
    24f8:	20000315 	.word	0x20000315
    24fc:	200003c5 	.word	0x200003c5
    2500:	200003c2 	.word	0x200003c2
    2504:	00009694 	.word	0x00009694
    2508:	0000969c 	.word	0x0000969c
    250c:	000096a4 	.word	0x000096a4
    2510:	000096ac 	.word	0x000096ac
    2514:	000096b4 	.word	0x000096b4
    2518:	000096bc 	.word	0x000096bc
    251c:	200003c8 	.word	0x200003c8
    2520:	000096c4 	.word	0x000096c4
    2524:	000096cc 	.word	0x000096cc
    2528:	20000316 	.word	0x20000316
	}
	else if(strncmp(buffer,HORN_1_OFF,6) == 0)
    252c:	49c9      	ldr	r1, [pc, #804]	; (2854 <data_handler+0x738>)
    252e:	68fb      	ldr	r3, [r7, #12]
    2530:	2206      	movs	r2, #6
    2532:	0018      	movs	r0, r3
    2534:	4bc8      	ldr	r3, [pc, #800]	; (2858 <data_handler+0x73c>)
    2536:	4798      	blx	r3
    2538:	1e03      	subs	r3, r0, #0
    253a:	d104      	bne.n	2546 <data_handler+0x42a>
	{
		horn1 = false;
    253c:	4bc7      	ldr	r3, [pc, #796]	; (285c <data_handler+0x740>)
    253e:	2200      	movs	r2, #0
    2540:	701a      	strb	r2, [r3, #0]
    2542:	f000 fcc8 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,HORN_2_ON,6) == 0)
    2546:	49c6      	ldr	r1, [pc, #792]	; (2860 <data_handler+0x744>)
    2548:	68fb      	ldr	r3, [r7, #12]
    254a:	2206      	movs	r2, #6
    254c:	0018      	movs	r0, r3
    254e:	4bc2      	ldr	r3, [pc, #776]	; (2858 <data_handler+0x73c>)
    2550:	4798      	blx	r3
    2552:	1e03      	subs	r3, r0, #0
    2554:	d104      	bne.n	2560 <data_handler+0x444>
	{
		horn2 = true;
    2556:	4bc3      	ldr	r3, [pc, #780]	; (2864 <data_handler+0x748>)
    2558:	2201      	movs	r2, #1
    255a:	701a      	strb	r2, [r3, #0]
    255c:	f000 fcbb 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,HORN_2_OFF,6) == 0)
    2560:	49c1      	ldr	r1, [pc, #772]	; (2868 <data_handler+0x74c>)
    2562:	68fb      	ldr	r3, [r7, #12]
    2564:	2206      	movs	r2, #6
    2566:	0018      	movs	r0, r3
    2568:	4bbb      	ldr	r3, [pc, #748]	; (2858 <data_handler+0x73c>)
    256a:	4798      	blx	r3
    256c:	1e03      	subs	r3, r0, #0
    256e:	d104      	bne.n	257a <data_handler+0x45e>
	{
		horn2 = false;
    2570:	4bbc      	ldr	r3, [pc, #752]	; (2864 <data_handler+0x748>)
    2572:	2200      	movs	r2, #0
    2574:	701a      	strb	r2, [r3, #0]
    2576:	f000 fcae 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,HORN_3_ON,6) == 0)
    257a:	49bc      	ldr	r1, [pc, #752]	; (286c <data_handler+0x750>)
    257c:	68fb      	ldr	r3, [r7, #12]
    257e:	2206      	movs	r2, #6
    2580:	0018      	movs	r0, r3
    2582:	4bb5      	ldr	r3, [pc, #724]	; (2858 <data_handler+0x73c>)
    2584:	4798      	blx	r3
    2586:	1e03      	subs	r3, r0, #0
    2588:	d104      	bne.n	2594 <data_handler+0x478>
	{
		horn3 = true;
    258a:	4bb9      	ldr	r3, [pc, #740]	; (2870 <data_handler+0x754>)
    258c:	2201      	movs	r2, #1
    258e:	701a      	strb	r2, [r3, #0]
    2590:	f000 fca1 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,HORN_3_OFF,6) == 0)
    2594:	49b7      	ldr	r1, [pc, #732]	; (2874 <data_handler+0x758>)
    2596:	68fb      	ldr	r3, [r7, #12]
    2598:	2206      	movs	r2, #6
    259a:	0018      	movs	r0, r3
    259c:	4bae      	ldr	r3, [pc, #696]	; (2858 <data_handler+0x73c>)
    259e:	4798      	blx	r3
    25a0:	1e03      	subs	r3, r0, #0
    25a2:	d104      	bne.n	25ae <data_handler+0x492>
	{
		horn3 = false;
    25a4:	4bb2      	ldr	r3, [pc, #712]	; (2870 <data_handler+0x754>)
    25a6:	2200      	movs	r2, #0
    25a8:	701a      	strb	r2, [r3, #0]
    25aa:	f000 fc94 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_0_ON,6) == 0)
    25ae:	49b2      	ldr	r1, [pc, #712]	; (2878 <data_handler+0x75c>)
    25b0:	68fb      	ldr	r3, [r7, #12]
    25b2:	2206      	movs	r2, #6
    25b4:	0018      	movs	r0, r3
    25b6:	4ba8      	ldr	r3, [pc, #672]	; (2858 <data_handler+0x73c>)
    25b8:	4798      	blx	r3
    25ba:	1e03      	subs	r3, r0, #0
    25bc:	d104      	bne.n	25c8 <data_handler+0x4ac>
	{
		press_sb_btn_once(SB_PIN_BTN00);
    25be:	200b      	movs	r0, #11
    25c0:	4bae      	ldr	r3, [pc, #696]	; (287c <data_handler+0x760>)
    25c2:	4798      	blx	r3
    25c4:	f000 fc87 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_0_OFF,6) == 0)
    25c8:	49ad      	ldr	r1, [pc, #692]	; (2880 <data_handler+0x764>)
    25ca:	68fb      	ldr	r3, [r7, #12]
    25cc:	2206      	movs	r2, #6
    25ce:	0018      	movs	r0, r3
    25d0:	4ba1      	ldr	r3, [pc, #644]	; (2858 <data_handler+0x73c>)
    25d2:	4798      	blx	r3
    25d4:	1e03      	subs	r3, r0, #0
    25d6:	d104      	bne.n	25e2 <data_handler+0x4c6>
	{
		release_sb_btn(SB_PIN_BTN00);
    25d8:	200b      	movs	r0, #11
    25da:	4baa      	ldr	r3, [pc, #680]	; (2884 <data_handler+0x768>)
    25dc:	4798      	blx	r3
    25de:	f000 fc7a 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_1_ON,6) == 0)
    25e2:	49a9      	ldr	r1, [pc, #676]	; (2888 <data_handler+0x76c>)
    25e4:	68fb      	ldr	r3, [r7, #12]
    25e6:	2206      	movs	r2, #6
    25e8:	0018      	movs	r0, r3
    25ea:	4b9b      	ldr	r3, [pc, #620]	; (2858 <data_handler+0x73c>)
    25ec:	4798      	blx	r3
    25ee:	1e03      	subs	r3, r0, #0
    25f0:	d104      	bne.n	25fc <data_handler+0x4e0>
	{
		press_sb_btn_once(SB_PIN_BTN01);
    25f2:	200c      	movs	r0, #12
    25f4:	4ba1      	ldr	r3, [pc, #644]	; (287c <data_handler+0x760>)
    25f6:	4798      	blx	r3
    25f8:	f000 fc6d 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_1_OFF,6) == 0)
    25fc:	49a3      	ldr	r1, [pc, #652]	; (288c <data_handler+0x770>)
    25fe:	68fb      	ldr	r3, [r7, #12]
    2600:	2206      	movs	r2, #6
    2602:	0018      	movs	r0, r3
    2604:	4b94      	ldr	r3, [pc, #592]	; (2858 <data_handler+0x73c>)
    2606:	4798      	blx	r3
    2608:	1e03      	subs	r3, r0, #0
    260a:	d104      	bne.n	2616 <data_handler+0x4fa>
	{
		release_sb_btn(SB_PIN_BTN01);
    260c:	200c      	movs	r0, #12
    260e:	4b9d      	ldr	r3, [pc, #628]	; (2884 <data_handler+0x768>)
    2610:	4798      	blx	r3
    2612:	f000 fc60 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_2_ON,6) == 0)
    2616:	499e      	ldr	r1, [pc, #632]	; (2890 <data_handler+0x774>)
    2618:	68fb      	ldr	r3, [r7, #12]
    261a:	2206      	movs	r2, #6
    261c:	0018      	movs	r0, r3
    261e:	4b8e      	ldr	r3, [pc, #568]	; (2858 <data_handler+0x73c>)
    2620:	4798      	blx	r3
    2622:	1e03      	subs	r3, r0, #0
    2624:	d104      	bne.n	2630 <data_handler+0x514>
	{
		press_sb_btn_once(SB_PIN_BTN02);
    2626:	200d      	movs	r0, #13
    2628:	4b94      	ldr	r3, [pc, #592]	; (287c <data_handler+0x760>)
    262a:	4798      	blx	r3
    262c:	f000 fc53 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_2_OFF,6) == 0)
    2630:	4998      	ldr	r1, [pc, #608]	; (2894 <data_handler+0x778>)
    2632:	68fb      	ldr	r3, [r7, #12]
    2634:	2206      	movs	r2, #6
    2636:	0018      	movs	r0, r3
    2638:	4b87      	ldr	r3, [pc, #540]	; (2858 <data_handler+0x73c>)
    263a:	4798      	blx	r3
    263c:	1e03      	subs	r3, r0, #0
    263e:	d104      	bne.n	264a <data_handler+0x52e>
	{
		release_sb_btn(SB_PIN_BTN02);
    2640:	200d      	movs	r0, #13
    2642:	4b90      	ldr	r3, [pc, #576]	; (2884 <data_handler+0x768>)
    2644:	4798      	blx	r3
    2646:	f000 fc46 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_3_ON,6) == 0)
    264a:	4993      	ldr	r1, [pc, #588]	; (2898 <data_handler+0x77c>)
    264c:	68fb      	ldr	r3, [r7, #12]
    264e:	2206      	movs	r2, #6
    2650:	0018      	movs	r0, r3
    2652:	4b81      	ldr	r3, [pc, #516]	; (2858 <data_handler+0x73c>)
    2654:	4798      	blx	r3
    2656:	1e03      	subs	r3, r0, #0
    2658:	d104      	bne.n	2664 <data_handler+0x548>
	{
		press_sb_btn_once(SB_PIN_BTN03);
    265a:	200e      	movs	r0, #14
    265c:	4b87      	ldr	r3, [pc, #540]	; (287c <data_handler+0x760>)
    265e:	4798      	blx	r3
    2660:	f000 fc39 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_3_OFF,6) == 0)
    2664:	498d      	ldr	r1, [pc, #564]	; (289c <data_handler+0x780>)
    2666:	68fb      	ldr	r3, [r7, #12]
    2668:	2206      	movs	r2, #6
    266a:	0018      	movs	r0, r3
    266c:	4b7a      	ldr	r3, [pc, #488]	; (2858 <data_handler+0x73c>)
    266e:	4798      	blx	r3
    2670:	1e03      	subs	r3, r0, #0
    2672:	d104      	bne.n	267e <data_handler+0x562>
	{
		release_sb_btn(SB_PIN_BTN03);
    2674:	200e      	movs	r0, #14
    2676:	4b83      	ldr	r3, [pc, #524]	; (2884 <data_handler+0x768>)
    2678:	4798      	blx	r3
    267a:	f000 fc2c 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_4_ON,6) == 0)
    267e:	4988      	ldr	r1, [pc, #544]	; (28a0 <data_handler+0x784>)
    2680:	68fb      	ldr	r3, [r7, #12]
    2682:	2206      	movs	r2, #6
    2684:	0018      	movs	r0, r3
    2686:	4b74      	ldr	r3, [pc, #464]	; (2858 <data_handler+0x73c>)
    2688:	4798      	blx	r3
    268a:	1e03      	subs	r3, r0, #0
    268c:	d104      	bne.n	2698 <data_handler+0x57c>
	{
		press_sb_btn_once(SB_PIN_BTN04);
    268e:	200f      	movs	r0, #15
    2690:	4b7a      	ldr	r3, [pc, #488]	; (287c <data_handler+0x760>)
    2692:	4798      	blx	r3
    2694:	f000 fc1f 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_4_OFF,6) == 0)
    2698:	4982      	ldr	r1, [pc, #520]	; (28a4 <data_handler+0x788>)
    269a:	68fb      	ldr	r3, [r7, #12]
    269c:	2206      	movs	r2, #6
    269e:	0018      	movs	r0, r3
    26a0:	4b6d      	ldr	r3, [pc, #436]	; (2858 <data_handler+0x73c>)
    26a2:	4798      	blx	r3
    26a4:	1e03      	subs	r3, r0, #0
    26a6:	d104      	bne.n	26b2 <data_handler+0x596>
	{
		release_sb_btn(SB_PIN_BTN04);
    26a8:	200f      	movs	r0, #15
    26aa:	4b76      	ldr	r3, [pc, #472]	; (2884 <data_handler+0x768>)
    26ac:	4798      	blx	r3
    26ae:	f000 fc12 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_5_ON,6) == 0)
    26b2:	497d      	ldr	r1, [pc, #500]	; (28a8 <data_handler+0x78c>)
    26b4:	68fb      	ldr	r3, [r7, #12]
    26b6:	2206      	movs	r2, #6
    26b8:	0018      	movs	r0, r3
    26ba:	4b67      	ldr	r3, [pc, #412]	; (2858 <data_handler+0x73c>)
    26bc:	4798      	blx	r3
    26be:	1e03      	subs	r3, r0, #0
    26c0:	d104      	bne.n	26cc <data_handler+0x5b0>
	{
		press_sb_btn_once(SB_PIN_BTN05);
    26c2:	2010      	movs	r0, #16
    26c4:	4b6d      	ldr	r3, [pc, #436]	; (287c <data_handler+0x760>)
    26c6:	4798      	blx	r3
    26c8:	f000 fc05 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_5_OFF,6) == 0)
    26cc:	4977      	ldr	r1, [pc, #476]	; (28ac <data_handler+0x790>)
    26ce:	68fb      	ldr	r3, [r7, #12]
    26d0:	2206      	movs	r2, #6
    26d2:	0018      	movs	r0, r3
    26d4:	4b60      	ldr	r3, [pc, #384]	; (2858 <data_handler+0x73c>)
    26d6:	4798      	blx	r3
    26d8:	1e03      	subs	r3, r0, #0
    26da:	d104      	bne.n	26e6 <data_handler+0x5ca>
	{
		release_sb_btn(SB_PIN_BTN05);
    26dc:	2010      	movs	r0, #16
    26de:	4b69      	ldr	r3, [pc, #420]	; (2884 <data_handler+0x768>)
    26e0:	4798      	blx	r3
    26e2:	f000 fbf8 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_6_ON,6) == 0)
    26e6:	4972      	ldr	r1, [pc, #456]	; (28b0 <data_handler+0x794>)
    26e8:	68fb      	ldr	r3, [r7, #12]
    26ea:	2206      	movs	r2, #6
    26ec:	0018      	movs	r0, r3
    26ee:	4b5a      	ldr	r3, [pc, #360]	; (2858 <data_handler+0x73c>)
    26f0:	4798      	blx	r3
    26f2:	1e03      	subs	r3, r0, #0
    26f4:	d104      	bne.n	2700 <data_handler+0x5e4>
	{
		press_sb_btn_once(SB_PIN_BTN06);
    26f6:	2011      	movs	r0, #17
    26f8:	4b60      	ldr	r3, [pc, #384]	; (287c <data_handler+0x760>)
    26fa:	4798      	blx	r3
    26fc:	f000 fbeb 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_6_OFF,6) == 0)
    2700:	496c      	ldr	r1, [pc, #432]	; (28b4 <data_handler+0x798>)
    2702:	68fb      	ldr	r3, [r7, #12]
    2704:	2206      	movs	r2, #6
    2706:	0018      	movs	r0, r3
    2708:	4b53      	ldr	r3, [pc, #332]	; (2858 <data_handler+0x73c>)
    270a:	4798      	blx	r3
    270c:	1e03      	subs	r3, r0, #0
    270e:	d104      	bne.n	271a <data_handler+0x5fe>
	{
		release_sb_btn(SB_PIN_BTN06);
    2710:	2011      	movs	r0, #17
    2712:	4b5c      	ldr	r3, [pc, #368]	; (2884 <data_handler+0x768>)
    2714:	4798      	blx	r3
    2716:	f000 fbde 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_7_ON,6) == 0)
    271a:	4967      	ldr	r1, [pc, #412]	; (28b8 <data_handler+0x79c>)
    271c:	68fb      	ldr	r3, [r7, #12]
    271e:	2206      	movs	r2, #6
    2720:	0018      	movs	r0, r3
    2722:	4b4d      	ldr	r3, [pc, #308]	; (2858 <data_handler+0x73c>)
    2724:	4798      	blx	r3
    2726:	1e03      	subs	r3, r0, #0
    2728:	d104      	bne.n	2734 <data_handler+0x618>
	{
		press_sb_btn_once(SB_PIN_BTN07);
    272a:	2012      	movs	r0, #18
    272c:	4b53      	ldr	r3, [pc, #332]	; (287c <data_handler+0x760>)
    272e:	4798      	blx	r3
    2730:	f000 fbd1 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_7_OFF,6) == 0)
    2734:	4961      	ldr	r1, [pc, #388]	; (28bc <data_handler+0x7a0>)
    2736:	68fb      	ldr	r3, [r7, #12]
    2738:	2206      	movs	r2, #6
    273a:	0018      	movs	r0, r3
    273c:	4b46      	ldr	r3, [pc, #280]	; (2858 <data_handler+0x73c>)
    273e:	4798      	blx	r3
    2740:	1e03      	subs	r3, r0, #0
    2742:	d104      	bne.n	274e <data_handler+0x632>
	{
		release_sb_btn(SB_PIN_BTN07);
    2744:	2012      	movs	r0, #18
    2746:	4b4f      	ldr	r3, [pc, #316]	; (2884 <data_handler+0x768>)
    2748:	4798      	blx	r3
    274a:	f000 fbc4 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_8_ON,6) == 0)
    274e:	495c      	ldr	r1, [pc, #368]	; (28c0 <data_handler+0x7a4>)
    2750:	68fb      	ldr	r3, [r7, #12]
    2752:	2206      	movs	r2, #6
    2754:	0018      	movs	r0, r3
    2756:	4b40      	ldr	r3, [pc, #256]	; (2858 <data_handler+0x73c>)
    2758:	4798      	blx	r3
    275a:	1e03      	subs	r3, r0, #0
    275c:	d104      	bne.n	2768 <data_handler+0x64c>
	{
		press_sb_btn_once(SB_PIN_BTN08);
    275e:	2013      	movs	r0, #19
    2760:	4b46      	ldr	r3, [pc, #280]	; (287c <data_handler+0x760>)
    2762:	4798      	blx	r3
    2764:	f000 fbb7 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_8_OFF,6) == 0)
    2768:	4956      	ldr	r1, [pc, #344]	; (28c4 <data_handler+0x7a8>)
    276a:	68fb      	ldr	r3, [r7, #12]
    276c:	2206      	movs	r2, #6
    276e:	0018      	movs	r0, r3
    2770:	4b39      	ldr	r3, [pc, #228]	; (2858 <data_handler+0x73c>)
    2772:	4798      	blx	r3
    2774:	1e03      	subs	r3, r0, #0
    2776:	d104      	bne.n	2782 <data_handler+0x666>
	{
		release_sb_btn(SB_PIN_BTN08);
    2778:	2013      	movs	r0, #19
    277a:	4b42      	ldr	r3, [pc, #264]	; (2884 <data_handler+0x768>)
    277c:	4798      	blx	r3
    277e:	f000 fbaa 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_9_ON,6) == 0)
    2782:	4951      	ldr	r1, [pc, #324]	; (28c8 <data_handler+0x7ac>)
    2784:	68fb      	ldr	r3, [r7, #12]
    2786:	2206      	movs	r2, #6
    2788:	0018      	movs	r0, r3
    278a:	4b33      	ldr	r3, [pc, #204]	; (2858 <data_handler+0x73c>)
    278c:	4798      	blx	r3
    278e:	1e03      	subs	r3, r0, #0
    2790:	d104      	bne.n	279c <data_handler+0x680>
	{
		press_sb_btn_once(SB_PIN_BTN09);
    2792:	2014      	movs	r0, #20
    2794:	4b39      	ldr	r3, [pc, #228]	; (287c <data_handler+0x760>)
    2796:	4798      	blx	r3
    2798:	f000 fb9d 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_9_OFF,6) == 0)
    279c:	494b      	ldr	r1, [pc, #300]	; (28cc <data_handler+0x7b0>)
    279e:	68fb      	ldr	r3, [r7, #12]
    27a0:	2206      	movs	r2, #6
    27a2:	0018      	movs	r0, r3
    27a4:	4b2c      	ldr	r3, [pc, #176]	; (2858 <data_handler+0x73c>)
    27a6:	4798      	blx	r3
    27a8:	1e03      	subs	r3, r0, #0
    27aa:	d104      	bne.n	27b6 <data_handler+0x69a>
	{
		release_sb_btn(SB_PIN_BTN09);
    27ac:	2014      	movs	r0, #20
    27ae:	4b35      	ldr	r3, [pc, #212]	; (2884 <data_handler+0x768>)
    27b0:	4798      	blx	r3
    27b2:	f000 fb90 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_10_ON,6) == 0)
    27b6:	4946      	ldr	r1, [pc, #280]	; (28d0 <data_handler+0x7b4>)
    27b8:	68fb      	ldr	r3, [r7, #12]
    27ba:	2206      	movs	r2, #6
    27bc:	0018      	movs	r0, r3
    27be:	4b26      	ldr	r3, [pc, #152]	; (2858 <data_handler+0x73c>)
    27c0:	4798      	blx	r3
    27c2:	1e03      	subs	r3, r0, #0
    27c4:	d104      	bne.n	27d0 <data_handler+0x6b4>
	{
		press_sb_btn_once(SB_PIN_BTN10);
    27c6:	2015      	movs	r0, #21
    27c8:	4b2c      	ldr	r3, [pc, #176]	; (287c <data_handler+0x760>)
    27ca:	4798      	blx	r3
    27cc:	f000 fb83 	bl	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,SOUND_10_OFF,6) == 0)
    27d0:	4940      	ldr	r1, [pc, #256]	; (28d4 <data_handler+0x7b8>)
    27d2:	68fb      	ldr	r3, [r7, #12]
    27d4:	2206      	movs	r2, #6
    27d6:	0018      	movs	r0, r3
    27d8:	4b1f      	ldr	r3, [pc, #124]	; (2858 <data_handler+0x73c>)
    27da:	4798      	blx	r3
    27dc:	1e03      	subs	r3, r0, #0
    27de:	d103      	bne.n	27e8 <data_handler+0x6cc>
	{
		release_sb_btn(SB_PIN_BTN10);
    27e0:	2015      	movs	r0, #21
    27e2:	4b28      	ldr	r3, [pc, #160]	; (2884 <data_handler+0x768>)
    27e4:	4798      	blx	r3
    27e6:	e376      	b.n	2ed6 <data_handler+0xdba>
	}
	else if (strncmp(buffer,SOUND_RESET,sizeof(SOUND_RESET)-1) == 0)
    27e8:	493b      	ldr	r1, [pc, #236]	; (28d8 <data_handler+0x7bc>)
    27ea:	68fb      	ldr	r3, [r7, #12]
    27ec:	2208      	movs	r2, #8
    27ee:	0018      	movs	r0, r3
    27f0:	4b19      	ldr	r3, [pc, #100]	; (2858 <data_handler+0x73c>)
    27f2:	4798      	blx	r3
    27f4:	1e03      	subs	r3, r0, #0
    27f6:	d106      	bne.n	2806 <data_handler+0x6ea>
	{
		ble_uart_write("SB: RESETTING");
    27f8:	4b38      	ldr	r3, [pc, #224]	; (28dc <data_handler+0x7c0>)
    27fa:	0018      	movs	r0, r3
    27fc:	4b38      	ldr	r3, [pc, #224]	; (28e0 <data_handler+0x7c4>)
    27fe:	4798      	blx	r3
		sounds_reset();
    2800:	4b38      	ldr	r3, [pc, #224]	; (28e4 <data_handler+0x7c8>)
    2802:	4798      	blx	r3
    2804:	e367      	b.n	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,PARTY_ON,5) == 0)
    2806:	4938      	ldr	r1, [pc, #224]	; (28e8 <data_handler+0x7cc>)
    2808:	68fb      	ldr	r3, [r7, #12]
    280a:	2205      	movs	r2, #5
    280c:	0018      	movs	r0, r3
    280e:	4b12      	ldr	r3, [pc, #72]	; (2858 <data_handler+0x73c>)
    2810:	4798      	blx	r3
    2812:	1e03      	subs	r3, r0, #0
    2814:	d103      	bne.n	281e <data_handler+0x702>
	{
		party = true;
    2816:	4b35      	ldr	r3, [pc, #212]	; (28ec <data_handler+0x7d0>)
    2818:	2201      	movs	r2, #1
    281a:	701a      	strb	r2, [r3, #0]
    281c:	e35b      	b.n	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,PARTY_OFF,5) == 0)
    281e:	4934      	ldr	r1, [pc, #208]	; (28f0 <data_handler+0x7d4>)
    2820:	68fb      	ldr	r3, [r7, #12]
    2822:	2205      	movs	r2, #5
    2824:	0018      	movs	r0, r3
    2826:	4b0c      	ldr	r3, [pc, #48]	; (2858 <data_handler+0x73c>)
    2828:	4798      	blx	r3
    282a:	1e03      	subs	r3, r0, #0
    282c:	d105      	bne.n	283a <data_handler+0x71e>
	{
		party = false;
    282e:	4b2f      	ldr	r3, [pc, #188]	; (28ec <data_handler+0x7d0>)
    2830:	2200      	movs	r2, #0
    2832:	701a      	strb	r2, [r3, #0]
		reset_all_lights();
    2834:	4b2f      	ldr	r3, [pc, #188]	; (28f4 <data_handler+0x7d8>)
    2836:	4798      	blx	r3
    2838:	e34d      	b.n	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
    283a:	492f      	ldr	r1, [pc, #188]	; (28f8 <data_handler+0x7dc>)
    283c:	68fb      	ldr	r3, [r7, #12]
    283e:	2205      	movs	r2, #5
    2840:	0018      	movs	r0, r3
    2842:	4b05      	ldr	r3, [pc, #20]	; (2858 <data_handler+0x73c>)
    2844:	4798      	blx	r3
    2846:	1e03      	subs	r3, r0, #0
    2848:	d15a      	bne.n	2900 <data_handler+0x7e4>
	{
		water = true;
    284a:	4b2c      	ldr	r3, [pc, #176]	; (28fc <data_handler+0x7e0>)
    284c:	2201      	movs	r2, #1
    284e:	701a      	strb	r2, [r3, #0]
    2850:	e341      	b.n	2ed6 <data_handler+0xdba>
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	000096d4 	.word	0x000096d4
    2858:	000082eb 	.word	0x000082eb
    285c:	20000316 	.word	0x20000316
    2860:	000096dc 	.word	0x000096dc
    2864:	200003ad 	.word	0x200003ad
    2868:	000096e4 	.word	0x000096e4
    286c:	000096ec 	.word	0x000096ec
    2870:	200003ce 	.word	0x200003ce
    2874:	000096f4 	.word	0x000096f4
    2878:	000096fc 	.word	0x000096fc
    287c:	00004ced 	.word	0x00004ced
    2880:	00009704 	.word	0x00009704
    2884:	00004d75 	.word	0x00004d75
    2888:	0000970c 	.word	0x0000970c
    288c:	00009714 	.word	0x00009714
    2890:	0000971c 	.word	0x0000971c
    2894:	00009724 	.word	0x00009724
    2898:	0000972c 	.word	0x0000972c
    289c:	00009734 	.word	0x00009734
    28a0:	0000973c 	.word	0x0000973c
    28a4:	00009744 	.word	0x00009744
    28a8:	0000974c 	.word	0x0000974c
    28ac:	00009754 	.word	0x00009754
    28b0:	0000975c 	.word	0x0000975c
    28b4:	00009764 	.word	0x00009764
    28b8:	0000976c 	.word	0x0000976c
    28bc:	00009774 	.word	0x00009774
    28c0:	0000977c 	.word	0x0000977c
    28c4:	00009784 	.word	0x00009784
    28c8:	0000978c 	.word	0x0000978c
    28cc:	00009794 	.word	0x00009794
    28d0:	0000979c 	.word	0x0000979c
    28d4:	000097a4 	.word	0x000097a4
    28d8:	000097ac 	.word	0x000097ac
    28dc:	000097b8 	.word	0x000097b8
    28e0:	00002025 	.word	0x00002025
    28e4:	00004d99 	.word	0x00004d99
    28e8:	000097c8 	.word	0x000097c8
    28ec:	200003c1 	.word	0x200003c1
    28f0:	000097d0 	.word	0x000097d0
    28f4:	00003885 	.word	0x00003885
    28f8:	000097d8 	.word	0x000097d8
    28fc:	20000301 	.word	0x20000301
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
    2900:	49c8      	ldr	r1, [pc, #800]	; (2c24 <data_handler+0xb08>)
    2902:	68fb      	ldr	r3, [r7, #12]
    2904:	2205      	movs	r2, #5
    2906:	0018      	movs	r0, r3
    2908:	4bc7      	ldr	r3, [pc, #796]	; (2c28 <data_handler+0xb0c>)
    290a:	4798      	blx	r3
    290c:	1e03      	subs	r3, r0, #0
    290e:	d103      	bne.n	2918 <data_handler+0x7fc>
	{
		water = false;
    2910:	4bc6      	ldr	r3, [pc, #792]	; (2c2c <data_handler+0xb10>)
    2912:	2200      	movs	r2, #0
    2914:	701a      	strb	r2, [r3, #0]
    2916:	e2de      	b.n	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,START_ON,5) == 0)
    2918:	49c5      	ldr	r1, [pc, #788]	; (2c30 <data_handler+0xb14>)
    291a:	68fb      	ldr	r3, [r7, #12]
    291c:	2205      	movs	r2, #5
    291e:	0018      	movs	r0, r3
    2920:	4bc1      	ldr	r3, [pc, #772]	; (2c28 <data_handler+0xb0c>)
    2922:	4798      	blx	r3
    2924:	1e03      	subs	r3, r0, #0
    2926:	d103      	bne.n	2930 <data_handler+0x814>
	{
		start = true;
    2928:	4bc2      	ldr	r3, [pc, #776]	; (2c34 <data_handler+0xb18>)
    292a:	2201      	movs	r2, #1
    292c:	701a      	strb	r2, [r3, #0]
    292e:	e2d2      	b.n	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,START_OFF,5) == 0)
    2930:	49c1      	ldr	r1, [pc, #772]	; (2c38 <data_handler+0xb1c>)
    2932:	68fb      	ldr	r3, [r7, #12]
    2934:	2205      	movs	r2, #5
    2936:	0018      	movs	r0, r3
    2938:	4bbb      	ldr	r3, [pc, #748]	; (2c28 <data_handler+0xb0c>)
    293a:	4798      	blx	r3
    293c:	1e03      	subs	r3, r0, #0
    293e:	d103      	bne.n	2948 <data_handler+0x82c>
	{
		start = false;
    2940:	4bbc      	ldr	r3, [pc, #752]	; (2c34 <data_handler+0xb18>)
    2942:	2200      	movs	r2, #0
    2944:	701a      	strb	r2, [r3, #0]
    2946:	e2c6      	b.n	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,LED_BAR_ON,5) == 0)
    2948:	49bc      	ldr	r1, [pc, #752]	; (2c3c <data_handler+0xb20>)
    294a:	68fb      	ldr	r3, [r7, #12]
    294c:	2205      	movs	r2, #5
    294e:	0018      	movs	r0, r3
    2950:	4bb5      	ldr	r3, [pc, #724]	; (2c28 <data_handler+0xb0c>)
    2952:	4798      	blx	r3
    2954:	1e03      	subs	r3, r0, #0
    2956:	d115      	bne.n	2984 <data_handler+0x868>
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,true);
    2958:	2301      	movs	r3, #1
    295a:	2202      	movs	r2, #2
    295c:	2101      	movs	r1, #1
    295e:	2000      	movs	r0, #0
    2960:	4cb7      	ldr	r4, [pc, #732]	; (2c40 <data_handler+0xb24>)
    2962:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,true);
    2964:	2301      	movs	r3, #1
    2966:	2202      	movs	r2, #2
    2968:	2102      	movs	r1, #2
    296a:	2000      	movs	r0, #0
    296c:	4cb4      	ldr	r4, [pc, #720]	; (2c40 <data_handler+0xb24>)
    296e:	47a0      	blx	r4
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,true);
    2970:	2301      	movs	r3, #1
    2972:	2204      	movs	r2, #4
    2974:	2101      	movs	r1, #1
    2976:	2000      	movs	r0, #0
    2978:	4cb1      	ldr	r4, [pc, #708]	; (2c40 <data_handler+0xb24>)
    297a:	47a0      	blx	r4
		led_bar = true;
    297c:	4bb1      	ldr	r3, [pc, #708]	; (2c44 <data_handler+0xb28>)
    297e:	2201      	movs	r2, #1
    2980:	701a      	strb	r2, [r3, #0]
    2982:	e2a8      	b.n	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,LED_BAR_OFF,5) == 0)
    2984:	49b0      	ldr	r1, [pc, #704]	; (2c48 <data_handler+0xb2c>)
    2986:	68fb      	ldr	r3, [r7, #12]
    2988:	2205      	movs	r2, #5
    298a:	0018      	movs	r0, r3
    298c:	4ba6      	ldr	r3, [pc, #664]	; (2c28 <data_handler+0xb0c>)
    298e:	4798      	blx	r3
    2990:	1e03      	subs	r3, r0, #0
    2992:	d115      	bne.n	29c0 <data_handler+0x8a4>
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,false);
    2994:	2300      	movs	r3, #0
    2996:	2202      	movs	r2, #2
    2998:	2101      	movs	r1, #1
    299a:	2000      	movs	r0, #0
    299c:	4ca8      	ldr	r4, [pc, #672]	; (2c40 <data_handler+0xb24>)
    299e:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,false);
    29a0:	2300      	movs	r3, #0
    29a2:	2202      	movs	r2, #2
    29a4:	2102      	movs	r1, #2
    29a6:	2000      	movs	r0, #0
    29a8:	4ca5      	ldr	r4, [pc, #660]	; (2c40 <data_handler+0xb24>)
    29aa:	47a0      	blx	r4
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,false);
    29ac:	2300      	movs	r3, #0
    29ae:	2204      	movs	r2, #4
    29b0:	2101      	movs	r1, #1
    29b2:	2000      	movs	r0, #0
    29b4:	4ca2      	ldr	r4, [pc, #648]	; (2c40 <data_handler+0xb24>)
    29b6:	47a0      	blx	r4
		led_bar = false;
    29b8:	4ba2      	ldr	r3, [pc, #648]	; (2c44 <data_handler+0xb28>)
    29ba:	2200      	movs	r2, #0
    29bc:	701a      	strb	r2, [r3, #0]
    29be:	e28a      	b.n	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,HDL_ON,5) == 0)
    29c0:	49a2      	ldr	r1, [pc, #648]	; (2c4c <data_handler+0xb30>)
    29c2:	68fb      	ldr	r3, [r7, #12]
    29c4:	2205      	movs	r2, #5
    29c6:	0018      	movs	r0, r3
    29c8:	4b97      	ldr	r3, [pc, #604]	; (2c28 <data_handler+0xb0c>)
    29ca:	4798      	blx	r3
    29cc:	1e03      	subs	r3, r0, #0
    29ce:	d124      	bne.n	2a1a <data_handler+0x8fe>
	{
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,true);
    29d0:	2301      	movs	r3, #1
    29d2:	2201      	movs	r2, #1
    29d4:	2102      	movs	r1, #2
    29d6:	2000      	movs	r0, #0
    29d8:	4c99      	ldr	r4, [pc, #612]	; (2c40 <data_handler+0xb24>)
    29da:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,true);
    29dc:	2301      	movs	r3, #1
    29de:	2201      	movs	r2, #1
    29e0:	2101      	movs	r1, #1
    29e2:	2000      	movs	r0, #0
    29e4:	4c96      	ldr	r4, [pc, #600]	; (2c40 <data_handler+0xb24>)
    29e6:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    29e8:	2301      	movs	r3, #1
    29ea:	2200      	movs	r2, #0
    29ec:	2101      	movs	r1, #1
    29ee:	2000      	movs	r0, #0
    29f0:	4c93      	ldr	r4, [pc, #588]	; (2c40 <data_handler+0xb24>)
    29f2:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    29f4:	2301      	movs	r3, #1
    29f6:	2200      	movs	r2, #0
    29f8:	2102      	movs	r1, #2
    29fa:	2000      	movs	r0, #0
    29fc:	4c90      	ldr	r4, [pc, #576]	; (2c40 <data_handler+0xb24>)
    29fe:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    2a00:	2301      	movs	r3, #1
    2a02:	2200      	movs	r2, #0
    2a04:	2103      	movs	r1, #3
    2a06:	2000      	movs	r0, #0
    2a08:	4c8d      	ldr	r4, [pc, #564]	; (2c40 <data_handler+0xb24>)
    2a0a:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    2a0c:	2301      	movs	r3, #1
    2a0e:	2200      	movs	r2, #0
    2a10:	2104      	movs	r1, #4
    2a12:	2000      	movs	r0, #0
    2a14:	4c8a      	ldr	r4, [pc, #552]	; (2c40 <data_handler+0xb24>)
    2a16:	47a0      	blx	r4
    2a18:	e25d      	b.n	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,HDL_OFF,5) == 0)
    2a1a:	498d      	ldr	r1, [pc, #564]	; (2c50 <data_handler+0xb34>)
    2a1c:	68fb      	ldr	r3, [r7, #12]
    2a1e:	2205      	movs	r2, #5
    2a20:	0018      	movs	r0, r3
    2a22:	4b81      	ldr	r3, [pc, #516]	; (2c28 <data_handler+0xb0c>)
    2a24:	4798      	blx	r3
    2a26:	1e03      	subs	r3, r0, #0
    2a28:	d124      	bne.n	2a74 <data_handler+0x958>
	{
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,false);
    2a2a:	2300      	movs	r3, #0
    2a2c:	2201      	movs	r2, #1
    2a2e:	2102      	movs	r1, #2
    2a30:	2000      	movs	r0, #0
    2a32:	4c83      	ldr	r4, [pc, #524]	; (2c40 <data_handler+0xb24>)
    2a34:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,false);
    2a36:	2300      	movs	r3, #0
    2a38:	2201      	movs	r2, #1
    2a3a:	2101      	movs	r1, #1
    2a3c:	2000      	movs	r0, #0
    2a3e:	4c80      	ldr	r4, [pc, #512]	; (2c40 <data_handler+0xb24>)
    2a40:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    2a42:	2300      	movs	r3, #0
    2a44:	2200      	movs	r2, #0
    2a46:	2101      	movs	r1, #1
    2a48:	2000      	movs	r0, #0
    2a4a:	4c7d      	ldr	r4, [pc, #500]	; (2c40 <data_handler+0xb24>)
    2a4c:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    2a4e:	2300      	movs	r3, #0
    2a50:	2200      	movs	r2, #0
    2a52:	2102      	movs	r1, #2
    2a54:	2000      	movs	r0, #0
    2a56:	4c7a      	ldr	r4, [pc, #488]	; (2c40 <data_handler+0xb24>)
    2a58:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    2a5a:	2300      	movs	r3, #0
    2a5c:	2200      	movs	r2, #0
    2a5e:	2103      	movs	r1, #3
    2a60:	2000      	movs	r0, #0
    2a62:	4c77      	ldr	r4, [pc, #476]	; (2c40 <data_handler+0xb24>)
    2a64:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    2a66:	2300      	movs	r3, #0
    2a68:	2200      	movs	r2, #0
    2a6a:	2104      	movs	r1, #4
    2a6c:	2000      	movs	r0, #0
    2a6e:	4c74      	ldr	r4, [pc, #464]	; (2c40 <data_handler+0xb24>)
    2a70:	47a0      	blx	r4
    2a72:	e230      	b.n	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,BRIAN_ON,7) == 0)
    2a74:	4977      	ldr	r1, [pc, #476]	; (2c54 <data_handler+0xb38>)
    2a76:	68fb      	ldr	r3, [r7, #12]
    2a78:	2207      	movs	r2, #7
    2a7a:	0018      	movs	r0, r3
    2a7c:	4b6a      	ldr	r3, [pc, #424]	; (2c28 <data_handler+0xb0c>)
    2a7e:	4798      	blx	r3
    2a80:	1e03      	subs	r3, r0, #0
    2a82:	d124      	bne.n	2ace <data_handler+0x9b2>
	{
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,true);
    2a84:	2301      	movs	r3, #1
    2a86:	2203      	movs	r2, #3
    2a88:	2102      	movs	r1, #2
    2a8a:	2000      	movs	r0, #0
    2a8c:	4c6c      	ldr	r4, [pc, #432]	; (2c40 <data_handler+0xb24>)
    2a8e:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,true);
    2a90:	2301      	movs	r3, #1
    2a92:	2203      	movs	r2, #3
    2a94:	2101      	movs	r1, #1
    2a96:	2000      	movs	r0, #0
    2a98:	4c69      	ldr	r4, [pc, #420]	; (2c40 <data_handler+0xb24>)
    2a9a:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    2a9c:	2301      	movs	r3, #1
    2a9e:	2200      	movs	r2, #0
    2aa0:	2101      	movs	r1, #1
    2aa2:	2000      	movs	r0, #0
    2aa4:	4c66      	ldr	r4, [pc, #408]	; (2c40 <data_handler+0xb24>)
    2aa6:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    2aa8:	2301      	movs	r3, #1
    2aaa:	2200      	movs	r2, #0
    2aac:	2102      	movs	r1, #2
    2aae:	2000      	movs	r0, #0
    2ab0:	4c63      	ldr	r4, [pc, #396]	; (2c40 <data_handler+0xb24>)
    2ab2:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    2ab4:	2301      	movs	r3, #1
    2ab6:	2200      	movs	r2, #0
    2ab8:	2103      	movs	r1, #3
    2aba:	2000      	movs	r0, #0
    2abc:	4c60      	ldr	r4, [pc, #384]	; (2c40 <data_handler+0xb24>)
    2abe:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    2ac0:	2301      	movs	r3, #1
    2ac2:	2200      	movs	r2, #0
    2ac4:	2104      	movs	r1, #4
    2ac6:	2000      	movs	r0, #0
    2ac8:	4c5d      	ldr	r4, [pc, #372]	; (2c40 <data_handler+0xb24>)
    2aca:	47a0      	blx	r4
    2acc:	e203      	b.n	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,BRIAN_OFF,7) == 0)
    2ace:	4962      	ldr	r1, [pc, #392]	; (2c58 <data_handler+0xb3c>)
    2ad0:	68fb      	ldr	r3, [r7, #12]
    2ad2:	2207      	movs	r2, #7
    2ad4:	0018      	movs	r0, r3
    2ad6:	4b54      	ldr	r3, [pc, #336]	; (2c28 <data_handler+0xb0c>)
    2ad8:	4798      	blx	r3
    2ada:	1e03      	subs	r3, r0, #0
    2adc:	d124      	bne.n	2b28 <data_handler+0xa0c>
	{
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,false);
    2ade:	2300      	movs	r3, #0
    2ae0:	2203      	movs	r2, #3
    2ae2:	2102      	movs	r1, #2
    2ae4:	2000      	movs	r0, #0
    2ae6:	4c56      	ldr	r4, [pc, #344]	; (2c40 <data_handler+0xb24>)
    2ae8:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,false);
    2aea:	2300      	movs	r3, #0
    2aec:	2203      	movs	r2, #3
    2aee:	2101      	movs	r1, #1
    2af0:	2000      	movs	r0, #0
    2af2:	4c53      	ldr	r4, [pc, #332]	; (2c40 <data_handler+0xb24>)
    2af4:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    2af6:	2300      	movs	r3, #0
    2af8:	2200      	movs	r2, #0
    2afa:	2101      	movs	r1, #1
    2afc:	2000      	movs	r0, #0
    2afe:	4c50      	ldr	r4, [pc, #320]	; (2c40 <data_handler+0xb24>)
    2b00:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    2b02:	2300      	movs	r3, #0
    2b04:	2200      	movs	r2, #0
    2b06:	2102      	movs	r1, #2
    2b08:	2000      	movs	r0, #0
    2b0a:	4c4d      	ldr	r4, [pc, #308]	; (2c40 <data_handler+0xb24>)
    2b0c:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    2b0e:	2300      	movs	r3, #0
    2b10:	2200      	movs	r2, #0
    2b12:	2103      	movs	r1, #3
    2b14:	2000      	movs	r0, #0
    2b16:	4c4a      	ldr	r4, [pc, #296]	; (2c40 <data_handler+0xb24>)
    2b18:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    2b1a:	2300      	movs	r3, #0
    2b1c:	2200      	movs	r2, #0
    2b1e:	2104      	movs	r1, #4
    2b20:	2000      	movs	r0, #0
    2b22:	4c47      	ldr	r4, [pc, #284]	; (2c40 <data_handler+0xb24>)
    2b24:	47a0      	blx	r4
    2b26:	e1d6      	b.n	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,FLASHY1_ON,7) == 0)
    2b28:	494c      	ldr	r1, [pc, #304]	; (2c5c <data_handler+0xb40>)
    2b2a:	68fb      	ldr	r3, [r7, #12]
    2b2c:	2207      	movs	r2, #7
    2b2e:	0018      	movs	r0, r3
    2b30:	4b3d      	ldr	r3, [pc, #244]	; (2c28 <data_handler+0xb0c>)
    2b32:	4798      	blx	r3
    2b34:	1e03      	subs	r3, r0, #0
    2b36:	d103      	bne.n	2b40 <data_handler+0xa24>
	{
		flashy1 = true;
    2b38:	4b49      	ldr	r3, [pc, #292]	; (2c60 <data_handler+0xb44>)
    2b3a:	2201      	movs	r2, #1
    2b3c:	701a      	strb	r2, [r3, #0]
    2b3e:	e1ca      	b.n	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,FLASHY1_OFF,7) == 0)
    2b40:	4948      	ldr	r1, [pc, #288]	; (2c64 <data_handler+0xb48>)
    2b42:	68fb      	ldr	r3, [r7, #12]
    2b44:	2207      	movs	r2, #7
    2b46:	0018      	movs	r0, r3
    2b48:	4b37      	ldr	r3, [pc, #220]	; (2c28 <data_handler+0xb0c>)
    2b4a:	4798      	blx	r3
    2b4c:	1e03      	subs	r3, r0, #0
    2b4e:	d105      	bne.n	2b5c <data_handler+0xa40>
	{
		flashy1 = false;
    2b50:	4b43      	ldr	r3, [pc, #268]	; (2c60 <data_handler+0xb44>)
    2b52:	2200      	movs	r2, #0
    2b54:	701a      	strb	r2, [r3, #0]
		reset_all_lights();
    2b56:	4b44      	ldr	r3, [pc, #272]	; (2c68 <data_handler+0xb4c>)
    2b58:	4798      	blx	r3
    2b5a:	e1bc      	b.n	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,FLASHY2_ON,7) == 0)
    2b5c:	4943      	ldr	r1, [pc, #268]	; (2c6c <data_handler+0xb50>)
    2b5e:	68fb      	ldr	r3, [r7, #12]
    2b60:	2207      	movs	r2, #7
    2b62:	0018      	movs	r0, r3
    2b64:	4b30      	ldr	r3, [pc, #192]	; (2c28 <data_handler+0xb0c>)
    2b66:	4798      	blx	r3
    2b68:	1e03      	subs	r3, r0, #0
    2b6a:	d103      	bne.n	2b74 <data_handler+0xa58>
	{
		flashy2 = true;
    2b6c:	4b40      	ldr	r3, [pc, #256]	; (2c70 <data_handler+0xb54>)
    2b6e:	2201      	movs	r2, #1
    2b70:	701a      	strb	r2, [r3, #0]
    2b72:	e1b0      	b.n	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,FLASHY2_OFF,7) == 0)
    2b74:	493f      	ldr	r1, [pc, #252]	; (2c74 <data_handler+0xb58>)
    2b76:	68fb      	ldr	r3, [r7, #12]
    2b78:	2207      	movs	r2, #7
    2b7a:	0018      	movs	r0, r3
    2b7c:	4b2a      	ldr	r3, [pc, #168]	; (2c28 <data_handler+0xb0c>)
    2b7e:	4798      	blx	r3
    2b80:	1e03      	subs	r3, r0, #0
    2b82:	d105      	bne.n	2b90 <data_handler+0xa74>
	{
		reset_all_lights();
    2b84:	4b38      	ldr	r3, [pc, #224]	; (2c68 <data_handler+0xb4c>)
    2b86:	4798      	blx	r3
		flashy2 = false;
    2b88:	4b39      	ldr	r3, [pc, #228]	; (2c70 <data_handler+0xb54>)
    2b8a:	2200      	movs	r2, #0
    2b8c:	701a      	strb	r2, [r3, #0]
    2b8e:	e1a2      	b.n	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,FLASHYFADE_ON,8) == 0)
    2b90:	4939      	ldr	r1, [pc, #228]	; (2c78 <data_handler+0xb5c>)
    2b92:	68fb      	ldr	r3, [r7, #12]
    2b94:	2208      	movs	r2, #8
    2b96:	0018      	movs	r0, r3
    2b98:	4b23      	ldr	r3, [pc, #140]	; (2c28 <data_handler+0xb0c>)
    2b9a:	4798      	blx	r3
    2b9c:	1e03      	subs	r3, r0, #0
    2b9e:	d103      	bne.n	2ba8 <data_handler+0xa8c>
	{
		flashyfade = true;
    2ba0:	4b36      	ldr	r3, [pc, #216]	; (2c7c <data_handler+0xb60>)
    2ba2:	2201      	movs	r2, #1
    2ba4:	701a      	strb	r2, [r3, #0]
    2ba6:	e196      	b.n	2ed6 <data_handler+0xdba>
	}
	else if(strncmp(buffer,FLASHYFADE_OFF,8) == 0)
    2ba8:	4935      	ldr	r1, [pc, #212]	; (2c80 <data_handler+0xb64>)
    2baa:	68fb      	ldr	r3, [r7, #12]
    2bac:	2208      	movs	r2, #8
    2bae:	0018      	movs	r0, r3
    2bb0:	4b1d      	ldr	r3, [pc, #116]	; (2c28 <data_handler+0xb0c>)
    2bb2:	4798      	blx	r3
    2bb4:	1e03      	subs	r3, r0, #0
    2bb6:	d105      	bne.n	2bc4 <data_handler+0xaa8>
	{
		reset_all_lights();
    2bb8:	4b2b      	ldr	r3, [pc, #172]	; (2c68 <data_handler+0xb4c>)
    2bba:	4798      	blx	r3
		flashyfade = false;
    2bbc:	4b2f      	ldr	r3, [pc, #188]	; (2c7c <data_handler+0xb60>)
    2bbe:	2200      	movs	r2, #0
    2bc0:	701a      	strb	r2, [r3, #0]
    2bc2:	e188      	b.n	2ed6 <data_handler+0xdba>
	}
	else if (strncmp(buffer,MASTER_RESET,10) == 0)
    2bc4:	492f      	ldr	r1, [pc, #188]	; (2c84 <data_handler+0xb68>)
    2bc6:	68fb      	ldr	r3, [r7, #12]
    2bc8:	220a      	movs	r2, #10
    2bca:	0018      	movs	r0, r3
    2bcc:	4b16      	ldr	r3, [pc, #88]	; (2c28 <data_handler+0xb0c>)
    2bce:	4798      	blx	r3
    2bd0:	1e03      	subs	r3, r0, #0
    2bd2:	d16b      	bne.n	2cac <data_handler+0xb90>
	{
		ble_uart_write("RESET ACK\n");
    2bd4:	4b2c      	ldr	r3, [pc, #176]	; (2c88 <data_handler+0xb6c>)
    2bd6:	0018      	movs	r0, r3
    2bd8:	4b2c      	ldr	r3, [pc, #176]	; (2c8c <data_handler+0xb70>)
    2bda:	4798      	blx	r3
		delay_ms(250);
    2bdc:	2000      	movs	r0, #0
    2bde:	4b2c      	ldr	r3, [pc, #176]	; (2c90 <data_handler+0xb74>)
    2be0:	4798      	blx	r3
    2be2:	0003      	movs	r3, r0
    2be4:	603b      	str	r3, [r7, #0]
    2be6:	2300      	movs	r3, #0
    2be8:	607b      	str	r3, [r7, #4]
    2bea:	4c2a      	ldr	r4, [pc, #168]	; (2c94 <data_handler+0xb78>)
    2bec:	22fa      	movs	r2, #250	; 0xfa
    2bee:	2300      	movs	r3, #0
    2bf0:	6838      	ldr	r0, [r7, #0]
    2bf2:	6879      	ldr	r1, [r7, #4]
    2bf4:	47a0      	blx	r4
    2bf6:	0003      	movs	r3, r0
    2bf8:	000c      	movs	r4, r1
    2bfa:	0019      	movs	r1, r3
    2bfc:	0022      	movs	r2, r4
    2bfe:	4b26      	ldr	r3, [pc, #152]	; (2c98 <data_handler+0xb7c>)
    2c00:	2400      	movs	r4, #0
    2c02:	18c9      	adds	r1, r1, r3
    2c04:	4162      	adcs	r2, r4
    2c06:	0008      	movs	r0, r1
    2c08:	0011      	movs	r1, r2
    2c0a:	4c24      	ldr	r4, [pc, #144]	; (2c9c <data_handler+0xb80>)
    2c0c:	4a24      	ldr	r2, [pc, #144]	; (2ca0 <data_handler+0xb84>)
    2c0e:	2300      	movs	r3, #0
    2c10:	47a0      	blx	r4
    2c12:	0003      	movs	r3, r0
    2c14:	000c      	movs	r4, r1
    2c16:	0018      	movs	r0, r3
    2c18:	4b22      	ldr	r3, [pc, #136]	; (2ca4 <data_handler+0xb88>)
    2c1a:	4798      	blx	r3
		wdt_init();
    2c1c:	4b22      	ldr	r3, [pc, #136]	; (2ca8 <data_handler+0xb8c>)
    2c1e:	4798      	blx	r3
		while (1)
    2c20:	e7fe      	b.n	2c20 <data_handler+0xb04>
    2c22:	46c0      	nop			; (mov r8, r8)
    2c24:	000097d8 	.word	0x000097d8
    2c28:	000082eb 	.word	0x000082eb
    2c2c:	20000301 	.word	0x20000301
    2c30:	000097e0 	.word	0x000097e0
    2c34:	200003cd 	.word	0x200003cd
    2c38:	000097e8 	.word	0x000097e8
    2c3c:	000097f0 	.word	0x000097f0
    2c40:	00003afd 	.word	0x00003afd
    2c44:	200003ac 	.word	0x200003ac
    2c48:	000097f8 	.word	0x000097f8
    2c4c:	00009800 	.word	0x00009800
    2c50:	00009808 	.word	0x00009808
    2c54:	00009810 	.word	0x00009810
    2c58:	00009818 	.word	0x00009818
    2c5c:	00009820 	.word	0x00009820
    2c60:	2000031b 	.word	0x2000031b
    2c64:	00009828 	.word	0x00009828
    2c68:	00003885 	.word	0x00003885
    2c6c:	00009830 	.word	0x00009830
    2c70:	200003af 	.word	0x200003af
    2c74:	00009838 	.word	0x00009838
    2c78:	00009840 	.word	0x00009840
    2c7c:	200003cb 	.word	0x200003cb
    2c80:	0000984c 	.word	0x0000984c
    2c84:	00009858 	.word	0x00009858
    2c88:	00009864 	.word	0x00009864
    2c8c:	00002025 	.word	0x00002025
    2c90:	00005921 	.word	0x00005921
    2c94:	00006735 	.word	0x00006735
    2c98:	00001b57 	.word	0x00001b57
    2c9c:	000066f5 	.word	0x000066f5
    2ca0:	00001b58 	.word	0x00001b58
    2ca4:	20000001 	.word	0x20000001
    2ca8:	00000149 	.word	0x00000149
		{
			//
		}
	}
	else if (strncmp(buffer,MINOR_RESET,sizeof(MINOR_RESET)-1) == 0)
    2cac:	498e      	ldr	r1, [pc, #568]	; (2ee8 <data_handler+0xdcc>)
    2cae:	68fb      	ldr	r3, [r7, #12]
    2cb0:	2209      	movs	r2, #9
    2cb2:	0018      	movs	r0, r3
    2cb4:	4b8d      	ldr	r3, [pc, #564]	; (2eec <data_handler+0xdd0>)
    2cb6:	4798      	blx	r3
    2cb8:	1e03      	subs	r3, r0, #0
    2cba:	d12f      	bne.n	2d1c <data_handler+0xc00>
	{
		ble_uart_write("MINOR RESET ACK\n");
    2cbc:	4b8c      	ldr	r3, [pc, #560]	; (2ef0 <data_handler+0xdd4>)
    2cbe:	0018      	movs	r0, r3
    2cc0:	4b8c      	ldr	r3, [pc, #560]	; (2ef4 <data_handler+0xdd8>)
    2cc2:	4798      	blx	r3
		delay_ms(250);
    2cc4:	2000      	movs	r0, #0
    2cc6:	4b8c      	ldr	r3, [pc, #560]	; (2ef8 <data_handler+0xddc>)
    2cc8:	4798      	blx	r3
    2cca:	0003      	movs	r3, r0
    2ccc:	001d      	movs	r5, r3
    2cce:	2300      	movs	r3, #0
    2cd0:	001e      	movs	r6, r3
    2cd2:	4c8a      	ldr	r4, [pc, #552]	; (2efc <data_handler+0xde0>)
    2cd4:	22fa      	movs	r2, #250	; 0xfa
    2cd6:	2300      	movs	r3, #0
    2cd8:	0028      	movs	r0, r5
    2cda:	0031      	movs	r1, r6
    2cdc:	47a0      	blx	r4
    2cde:	0003      	movs	r3, r0
    2ce0:	000c      	movs	r4, r1
    2ce2:	0019      	movs	r1, r3
    2ce4:	0022      	movs	r2, r4
    2ce6:	4b86      	ldr	r3, [pc, #536]	; (2f00 <data_handler+0xde4>)
    2ce8:	2400      	movs	r4, #0
    2cea:	18c9      	adds	r1, r1, r3
    2cec:	4162      	adcs	r2, r4
    2cee:	0008      	movs	r0, r1
    2cf0:	0011      	movs	r1, r2
    2cf2:	4c84      	ldr	r4, [pc, #528]	; (2f04 <data_handler+0xde8>)
    2cf4:	4a84      	ldr	r2, [pc, #528]	; (2f08 <data_handler+0xdec>)
    2cf6:	2300      	movs	r3, #0
    2cf8:	47a0      	blx	r4
    2cfa:	0003      	movs	r3, r0
    2cfc:	000c      	movs	r4, r1
    2cfe:	0018      	movs	r0, r3
    2d00:	4b82      	ldr	r3, [pc, #520]	; (2f0c <data_handler+0xdf0>)
    2d02:	4798      	blx	r3
		sounds_reset();
    2d04:	4b82      	ldr	r3, [pc, #520]	; (2f10 <data_handler+0xdf4>)
    2d06:	4798      	blx	r3
		init_all_ports();
    2d08:	4b82      	ldr	r3, [pc, #520]	; (2f14 <data_handler+0xdf8>)
    2d0a:	4798      	blx	r3
		party = false;
    2d0c:	4b82      	ldr	r3, [pc, #520]	; (2f18 <data_handler+0xdfc>)
    2d0e:	2200      	movs	r2, #0
    2d10:	701a      	strb	r2, [r3, #0]
		ble_uart_write("MINOR RESET DONE\n");
    2d12:	4b82      	ldr	r3, [pc, #520]	; (2f1c <data_handler+0xe00>)
    2d14:	0018      	movs	r0, r3
    2d16:	4b77      	ldr	r3, [pc, #476]	; (2ef4 <data_handler+0xdd8>)
    2d18:	4798      	blx	r3
    2d1a:	e0dc      	b.n	2ed6 <data_handler+0xdba>
	}
	else if (strncmp(buffer,PARTY_TRESH_0,sizeof(PARTY_TRESH_0)-1)  == 0)
    2d1c:	4980      	ldr	r1, [pc, #512]	; (2f20 <data_handler+0xe04>)
    2d1e:	68fb      	ldr	r3, [r7, #12]
    2d20:	2208      	movs	r2, #8
    2d22:	0018      	movs	r0, r3
    2d24:	4b71      	ldr	r3, [pc, #452]	; (2eec <data_handler+0xdd0>)
    2d26:	4798      	blx	r3
    2d28:	1e03      	subs	r3, r0, #0
    2d2a:	d10f      	bne.n	2d4c <data_handler+0xc30>
	{
		int temp = sizeof(PARTY_TRESH_0);//party_treshold;
    2d2c:	2309      	movs	r3, #9
    2d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
		sscanf(buffer,"PRTTRSH0 %d",&temp);
    2d30:	2344      	movs	r3, #68	; 0x44
    2d32:	2208      	movs	r2, #8
    2d34:	18ba      	adds	r2, r7, r2
    2d36:	18d2      	adds	r2, r2, r3
    2d38:	497a      	ldr	r1, [pc, #488]	; (2f24 <data_handler+0xe08>)
    2d3a:	68fb      	ldr	r3, [r7, #12]
    2d3c:	0018      	movs	r0, r3
    2d3e:	4b7a      	ldr	r3, [pc, #488]	; (2f28 <data_handler+0xe0c>)
    2d40:	4798      	blx	r3
		party_thresholds[0] = (uint16_t)temp;
    2d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2d44:	b29a      	uxth	r2, r3
    2d46:	4b79      	ldr	r3, [pc, #484]	; (2f2c <data_handler+0xe10>)
    2d48:	801a      	strh	r2, [r3, #0]
    2d4a:	e0c4      	b.n	2ed6 <data_handler+0xdba>
	}
	else if (strncmp(buffer,PARTY_TRESH_1,sizeof(PARTY_TRESH_1)-1) == 0)
    2d4c:	4978      	ldr	r1, [pc, #480]	; (2f30 <data_handler+0xe14>)
    2d4e:	68fb      	ldr	r3, [r7, #12]
    2d50:	2208      	movs	r2, #8
    2d52:	0018      	movs	r0, r3
    2d54:	4b65      	ldr	r3, [pc, #404]	; (2eec <data_handler+0xdd0>)
    2d56:	4798      	blx	r3
    2d58:	1e03      	subs	r3, r0, #0
    2d5a:	d10f      	bne.n	2d7c <data_handler+0xc60>
	{
		int temp = party_treshold;
    2d5c:	4b75      	ldr	r3, [pc, #468]	; (2f34 <data_handler+0xe18>)
    2d5e:	64bb      	str	r3, [r7, #72]	; 0x48
		sscanf(buffer,"PRTTRSH1 %d",&temp);
    2d60:	2340      	movs	r3, #64	; 0x40
    2d62:	2208      	movs	r2, #8
    2d64:	18ba      	adds	r2, r7, r2
    2d66:	18d2      	adds	r2, r2, r3
    2d68:	4973      	ldr	r1, [pc, #460]	; (2f38 <data_handler+0xe1c>)
    2d6a:	68fb      	ldr	r3, [r7, #12]
    2d6c:	0018      	movs	r0, r3
    2d6e:	4b6e      	ldr	r3, [pc, #440]	; (2f28 <data_handler+0xe0c>)
    2d70:	4798      	blx	r3
		party_thresholds[1] = (uint16_t)temp;
    2d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2d74:	b29a      	uxth	r2, r3
    2d76:	4b6d      	ldr	r3, [pc, #436]	; (2f2c <data_handler+0xe10>)
    2d78:	805a      	strh	r2, [r3, #2]
    2d7a:	e0ac      	b.n	2ed6 <data_handler+0xdba>
	}
	else if (strncmp(buffer,PARTY_TRESH_2,sizeof(PARTY_TRESH_2)-1) == 0)
    2d7c:	496f      	ldr	r1, [pc, #444]	; (2f3c <data_handler+0xe20>)
    2d7e:	68fb      	ldr	r3, [r7, #12]
    2d80:	2208      	movs	r2, #8
    2d82:	0018      	movs	r0, r3
    2d84:	4b59      	ldr	r3, [pc, #356]	; (2eec <data_handler+0xdd0>)
    2d86:	4798      	blx	r3
    2d88:	1e03      	subs	r3, r0, #0
    2d8a:	d10f      	bne.n	2dac <data_handler+0xc90>
	{
		int temp = party_treshold;
    2d8c:	4b69      	ldr	r3, [pc, #420]	; (2f34 <data_handler+0xe18>)
    2d8e:	647b      	str	r3, [r7, #68]	; 0x44
		sscanf(buffer,"PRTTRSH2 %d",&temp);
    2d90:	233c      	movs	r3, #60	; 0x3c
    2d92:	2208      	movs	r2, #8
    2d94:	18ba      	adds	r2, r7, r2
    2d96:	18d2      	adds	r2, r2, r3
    2d98:	4969      	ldr	r1, [pc, #420]	; (2f40 <data_handler+0xe24>)
    2d9a:	68fb      	ldr	r3, [r7, #12]
    2d9c:	0018      	movs	r0, r3
    2d9e:	4b62      	ldr	r3, [pc, #392]	; (2f28 <data_handler+0xe0c>)
    2da0:	4798      	blx	r3
		party_thresholds[2] = (uint16_t)temp;
    2da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2da4:	b29a      	uxth	r2, r3
    2da6:	4b61      	ldr	r3, [pc, #388]	; (2f2c <data_handler+0xe10>)
    2da8:	809a      	strh	r2, [r3, #4]
    2daa:	e094      	b.n	2ed6 <data_handler+0xdba>
	}
	else if (strncmp(buffer,PARTY_TRESH_3,sizeof(PARTY_TRESH_3)-1) == 0)
    2dac:	4965      	ldr	r1, [pc, #404]	; (2f44 <data_handler+0xe28>)
    2dae:	68fb      	ldr	r3, [r7, #12]
    2db0:	2208      	movs	r2, #8
    2db2:	0018      	movs	r0, r3
    2db4:	4b4d      	ldr	r3, [pc, #308]	; (2eec <data_handler+0xdd0>)
    2db6:	4798      	blx	r3
    2db8:	1e03      	subs	r3, r0, #0
    2dba:	d10f      	bne.n	2ddc <data_handler+0xcc0>
	{
		int temp = party_treshold;
    2dbc:	4b5d      	ldr	r3, [pc, #372]	; (2f34 <data_handler+0xe18>)
    2dbe:	643b      	str	r3, [r7, #64]	; 0x40
		sscanf(buffer,"PRTTRSH3 %d",&temp);
    2dc0:	2338      	movs	r3, #56	; 0x38
    2dc2:	2208      	movs	r2, #8
    2dc4:	18ba      	adds	r2, r7, r2
    2dc6:	18d2      	adds	r2, r2, r3
    2dc8:	495f      	ldr	r1, [pc, #380]	; (2f48 <data_handler+0xe2c>)
    2dca:	68fb      	ldr	r3, [r7, #12]
    2dcc:	0018      	movs	r0, r3
    2dce:	4b56      	ldr	r3, [pc, #344]	; (2f28 <data_handler+0xe0c>)
    2dd0:	4798      	blx	r3
		party_thresholds[3] = (uint16_t)temp;
    2dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2dd4:	b29a      	uxth	r2, r3
    2dd6:	4b55      	ldr	r3, [pc, #340]	; (2f2c <data_handler+0xe10>)
    2dd8:	80da      	strh	r2, [r3, #6]
    2dda:	e07c      	b.n	2ed6 <data_handler+0xdba>
	}
	else if (strncmp(buffer,PARTY_TRESH_4,sizeof(PARTY_TRESH_4)-1) == 0)
    2ddc:	495b      	ldr	r1, [pc, #364]	; (2f4c <data_handler+0xe30>)
    2dde:	68fb      	ldr	r3, [r7, #12]
    2de0:	2208      	movs	r2, #8
    2de2:	0018      	movs	r0, r3
    2de4:	4b41      	ldr	r3, [pc, #260]	; (2eec <data_handler+0xdd0>)
    2de6:	4798      	blx	r3
    2de8:	1e03      	subs	r3, r0, #0
    2dea:	d10f      	bne.n	2e0c <data_handler+0xcf0>
	{
		int temp = party_treshold;
    2dec:	4b51      	ldr	r3, [pc, #324]	; (2f34 <data_handler+0xe18>)
    2dee:	63fb      	str	r3, [r7, #60]	; 0x3c
		sscanf(buffer,"PRTTRSH4 %d",&temp);
    2df0:	2334      	movs	r3, #52	; 0x34
    2df2:	2208      	movs	r2, #8
    2df4:	18ba      	adds	r2, r7, r2
    2df6:	18d2      	adds	r2, r2, r3
    2df8:	4955      	ldr	r1, [pc, #340]	; (2f50 <data_handler+0xe34>)
    2dfa:	68fb      	ldr	r3, [r7, #12]
    2dfc:	0018      	movs	r0, r3
    2dfe:	4b4a      	ldr	r3, [pc, #296]	; (2f28 <data_handler+0xe0c>)
    2e00:	4798      	blx	r3
		party_thresholds[4] = (uint16_t)temp;
    2e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e04:	b29a      	uxth	r2, r3
    2e06:	4b49      	ldr	r3, [pc, #292]	; (2f2c <data_handler+0xe10>)
    2e08:	811a      	strh	r2, [r3, #8]
    2e0a:	e064      	b.n	2ed6 <data_handler+0xdba>
	}
	else if (strncmp(buffer,PARTY_TRESH_5,sizeof(PARTY_TRESH_5)-1) == 0)
    2e0c:	4951      	ldr	r1, [pc, #324]	; (2f54 <data_handler+0xe38>)
    2e0e:	68fb      	ldr	r3, [r7, #12]
    2e10:	2208      	movs	r2, #8
    2e12:	0018      	movs	r0, r3
    2e14:	4b35      	ldr	r3, [pc, #212]	; (2eec <data_handler+0xdd0>)
    2e16:	4798      	blx	r3
    2e18:	1e03      	subs	r3, r0, #0
    2e1a:	d10f      	bne.n	2e3c <data_handler+0xd20>
	{
		int temp = party_treshold;
    2e1c:	4b45      	ldr	r3, [pc, #276]	; (2f34 <data_handler+0xe18>)
    2e1e:	63bb      	str	r3, [r7, #56]	; 0x38
		sscanf(buffer,"PRTTRSH5 %d",&temp);
    2e20:	2330      	movs	r3, #48	; 0x30
    2e22:	2208      	movs	r2, #8
    2e24:	18ba      	adds	r2, r7, r2
    2e26:	18d2      	adds	r2, r2, r3
    2e28:	494b      	ldr	r1, [pc, #300]	; (2f58 <data_handler+0xe3c>)
    2e2a:	68fb      	ldr	r3, [r7, #12]
    2e2c:	0018      	movs	r0, r3
    2e2e:	4b3e      	ldr	r3, [pc, #248]	; (2f28 <data_handler+0xe0c>)
    2e30:	4798      	blx	r3
		party_thresholds[5] = (uint16_t)temp;
    2e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e34:	b29a      	uxth	r2, r3
    2e36:	4b3d      	ldr	r3, [pc, #244]	; (2f2c <data_handler+0xe10>)
    2e38:	815a      	strh	r2, [r3, #10]
    2e3a:	e04c      	b.n	2ed6 <data_handler+0xdba>
	}
	else if (strncmp(buffer,PARTY_TRESH_6,sizeof(PARTY_TRESH_6)-1) == 0)
    2e3c:	4947      	ldr	r1, [pc, #284]	; (2f5c <data_handler+0xe40>)
    2e3e:	68fb      	ldr	r3, [r7, #12]
    2e40:	2208      	movs	r2, #8
    2e42:	0018      	movs	r0, r3
    2e44:	4b29      	ldr	r3, [pc, #164]	; (2eec <data_handler+0xdd0>)
    2e46:	4798      	blx	r3
    2e48:	1e03      	subs	r3, r0, #0
    2e4a:	d10f      	bne.n	2e6c <data_handler+0xd50>
	{
		int temp = party_treshold;
    2e4c:	4b39      	ldr	r3, [pc, #228]	; (2f34 <data_handler+0xe18>)
    2e4e:	637b      	str	r3, [r7, #52]	; 0x34
		sscanf(buffer,"PRTTRSH6 %d",&temp);
    2e50:	232c      	movs	r3, #44	; 0x2c
    2e52:	2208      	movs	r2, #8
    2e54:	18ba      	adds	r2, r7, r2
    2e56:	18d2      	adds	r2, r2, r3
    2e58:	4941      	ldr	r1, [pc, #260]	; (2f60 <data_handler+0xe44>)
    2e5a:	68fb      	ldr	r3, [r7, #12]
    2e5c:	0018      	movs	r0, r3
    2e5e:	4b32      	ldr	r3, [pc, #200]	; (2f28 <data_handler+0xe0c>)
    2e60:	4798      	blx	r3
		party_thresholds[6] = (uint16_t)temp;
    2e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e64:	b29a      	uxth	r2, r3
    2e66:	4b31      	ldr	r3, [pc, #196]	; (2f2c <data_handler+0xe10>)
    2e68:	819a      	strh	r2, [r3, #12]
    2e6a:	e034      	b.n	2ed6 <data_handler+0xdba>
	}
	else if (strncmp(buffer,PARTY_TRESH_7,sizeof(PARTY_TRESH_7)-1) == 0)
    2e6c:	493d      	ldr	r1, [pc, #244]	; (2f64 <data_handler+0xe48>)
    2e6e:	68fb      	ldr	r3, [r7, #12]
    2e70:	2208      	movs	r2, #8
    2e72:	0018      	movs	r0, r3
    2e74:	4b1d      	ldr	r3, [pc, #116]	; (2eec <data_handler+0xdd0>)
    2e76:	4798      	blx	r3
    2e78:	1e03      	subs	r3, r0, #0
    2e7a:	d10f      	bne.n	2e9c <data_handler+0xd80>
	{
		int temp = party_treshold;
    2e7c:	4b2d      	ldr	r3, [pc, #180]	; (2f34 <data_handler+0xe18>)
    2e7e:	633b      	str	r3, [r7, #48]	; 0x30
		sscanf(buffer,"PRTTRSH7 %d",&temp);
    2e80:	2328      	movs	r3, #40	; 0x28
    2e82:	2208      	movs	r2, #8
    2e84:	18ba      	adds	r2, r7, r2
    2e86:	18d2      	adds	r2, r2, r3
    2e88:	4937      	ldr	r1, [pc, #220]	; (2f68 <data_handler+0xe4c>)
    2e8a:	68fb      	ldr	r3, [r7, #12]
    2e8c:	0018      	movs	r0, r3
    2e8e:	4b26      	ldr	r3, [pc, #152]	; (2f28 <data_handler+0xe0c>)
    2e90:	4798      	blx	r3
		party_thresholds[7] = (uint16_t)temp;
    2e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e94:	b29a      	uxth	r2, r3
    2e96:	4b25      	ldr	r3, [pc, #148]	; (2f2c <data_handler+0xe10>)
    2e98:	81da      	strh	r2, [r3, #14]
    2e9a:	e01c      	b.n	2ed6 <data_handler+0xdba>
	}
	else if (strncmp(buffer,CUT_OUT_VALVE_ON,sizeof(CUT_OUT_VALVE_ON)-1) == 0)
    2e9c:	4933      	ldr	r1, [pc, #204]	; (2f6c <data_handler+0xe50>)
    2e9e:	68fb      	ldr	r3, [r7, #12]
    2ea0:	2205      	movs	r2, #5
    2ea2:	0018      	movs	r0, r3
    2ea4:	4b11      	ldr	r3, [pc, #68]	; (2eec <data_handler+0xdd0>)
    2ea6:	4798      	blx	r3
    2ea8:	1e03      	subs	r3, r0, #0
    2eaa:	d106      	bne.n	2eba <data_handler+0xd9e>
	{
		valve_open = true;
    2eac:	4b30      	ldr	r3, [pc, #192]	; (2f70 <data_handler+0xe54>)
    2eae:	2201      	movs	r2, #1
    2eb0:	701a      	strb	r2, [r3, #0]
		valve_close = false;
    2eb2:	4b30      	ldr	r3, [pc, #192]	; (2f74 <data_handler+0xe58>)
    2eb4:	2200      	movs	r2, #0
    2eb6:	701a      	strb	r2, [r3, #0]
    2eb8:	e00d      	b.n	2ed6 <data_handler+0xdba>
	}
	else if (strncmp(buffer,CUT_OUT_VALVE_OFF,sizeof(CUT_OUT_VALVE_OFF)-1) == 0)
    2eba:	492f      	ldr	r1, [pc, #188]	; (2f78 <data_handler+0xe5c>)
    2ebc:	68fb      	ldr	r3, [r7, #12]
    2ebe:	2205      	movs	r2, #5
    2ec0:	0018      	movs	r0, r3
    2ec2:	4b0a      	ldr	r3, [pc, #40]	; (2eec <data_handler+0xdd0>)
    2ec4:	4798      	blx	r3
    2ec6:	1e03      	subs	r3, r0, #0
    2ec8:	d105      	bne.n	2ed6 <data_handler+0xdba>
	{
		valve_open = false;
    2eca:	4b29      	ldr	r3, [pc, #164]	; (2f70 <data_handler+0xe54>)
    2ecc:	2200      	movs	r2, #0
    2ece:	701a      	strb	r2, [r3, #0]
		valve_close = true;
    2ed0:	4b28      	ldr	r3, [pc, #160]	; (2f74 <data_handler+0xe58>)
    2ed2:	2201      	movs	r2, #1
    2ed4:	701a      	strb	r2, [r3, #0]
	}
	ble_uart_write("ACK");
    2ed6:	4b29      	ldr	r3, [pc, #164]	; (2f7c <data_handler+0xe60>)
    2ed8:	0018      	movs	r0, r3
    2eda:	4b06      	ldr	r3, [pc, #24]	; (2ef4 <data_handler+0xdd8>)
    2edc:	4798      	blx	r3
}
    2ede:	46c0      	nop			; (mov r8, r8)
    2ee0:	46bd      	mov	sp, r7
    2ee2:	b017      	add	sp, #92	; 0x5c
    2ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ee6:	46c0      	nop			; (mov r8, r8)
    2ee8:	00009870 	.word	0x00009870
    2eec:	000082eb 	.word	0x000082eb
    2ef0:	0000987c 	.word	0x0000987c
    2ef4:	00002025 	.word	0x00002025
    2ef8:	00005921 	.word	0x00005921
    2efc:	00006735 	.word	0x00006735
    2f00:	00001b57 	.word	0x00001b57
    2f04:	000066f5 	.word	0x000066f5
    2f08:	00001b58 	.word	0x00001b58
    2f0c:	20000001 	.word	0x20000001
    2f10:	00004d99 	.word	0x00004d99
    2f14:	00003fe1 	.word	0x00003fe1
    2f18:	200003c1 	.word	0x200003c1
    2f1c:	00009890 	.word	0x00009890
    2f20:	000098a4 	.word	0x000098a4
    2f24:	000098b0 	.word	0x000098b0
    2f28:	00008289 	.word	0x00008289
    2f2c:	2000031c 	.word	0x2000031c
    2f30:	000098bc 	.word	0x000098bc
    2f34:	000009c4 	.word	0x000009c4
    2f38:	000098c8 	.word	0x000098c8
    2f3c:	000098d4 	.word	0x000098d4
    2f40:	000098e0 	.word	0x000098e0
    2f44:	000098ec 	.word	0x000098ec
    2f48:	000098f8 	.word	0x000098f8
    2f4c:	00009904 	.word	0x00009904
    2f50:	00009910 	.word	0x00009910
    2f54:	0000991c 	.word	0x0000991c
    2f58:	00009928 	.word	0x00009928
    2f5c:	00009934 	.word	0x00009934
    2f60:	00009940 	.word	0x00009940
    2f64:	0000994c 	.word	0x0000994c
    2f68:	00009958 	.word	0x00009958
    2f6c:	00009964 	.word	0x00009964
    2f70:	2000031a 	.word	0x2000031a
    2f74:	20000318 	.word	0x20000318
    2f78:	0000996c 	.word	0x0000996c
    2f7c:	00009974 	.word	0x00009974

00002f80 <update_all_ports>:

void update_all_ports()
{
    2f80:	b580      	push	{r7, lr}
    2f82:	b082      	sub	sp, #8
    2f84:	af00      	add	r7, sp, #0
	else
	{
		data[1] = 0x00;
	}*/

	if (!port_update_ongoing)
    2f86:	4b26      	ldr	r3, [pc, #152]	; (3020 <update_all_ports+0xa0>)
    2f88:	781b      	ldrb	r3, [r3, #0]
    2f8a:	2201      	movs	r2, #1
    2f8c:	4053      	eors	r3, r2
    2f8e:	b2db      	uxtb	r3, r3
    2f90:	2b00      	cmp	r3, #0
    2f92:	d040      	beq.n	3016 <update_all_ports+0x96>
	{
		port_update_ongoing = true;
    2f94:	4b22      	ldr	r3, [pc, #136]	; (3020 <update_all_ports+0xa0>)
    2f96:	2201      	movs	r2, #1
    2f98:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<8;i++)
    2f9a:	2300      	movs	r3, #0
    2f9c:	607b      	str	r3, [r7, #4]
    2f9e:	e034      	b.n	300a <update_all_ports+0x8a>
		{
			mcp23017_data.devices[i].outputs.pa7 = 1;
    2fa0:	4a20      	ldr	r2, [pc, #128]	; (3024 <update_all_ports+0xa4>)
    2fa2:	687b      	ldr	r3, [r7, #4]
    2fa4:	2108      	movs	r1, #8
    2fa6:	011b      	lsls	r3, r3, #4
    2fa8:	18d3      	adds	r3, r2, r3
    2faa:	185b      	adds	r3, r3, r1
    2fac:	781a      	ldrb	r2, [r3, #0]
    2fae:	2180      	movs	r1, #128	; 0x80
    2fb0:	4249      	negs	r1, r1
    2fb2:	430a      	orrs	r2, r1
    2fb4:	701a      	strb	r2, [r3, #0]
			mcp23017_data.devices[i].outputs.pb7 = 1;
    2fb6:	4a1b      	ldr	r2, [pc, #108]	; (3024 <update_all_ports+0xa4>)
    2fb8:	687b      	ldr	r3, [r7, #4]
    2fba:	2108      	movs	r1, #8
    2fbc:	011b      	lsls	r3, r3, #4
    2fbe:	18d3      	adds	r3, r2, r3
    2fc0:	185b      	adds	r3, r3, r1
    2fc2:	785a      	ldrb	r2, [r3, #1]
    2fc4:	2180      	movs	r1, #128	; 0x80
    2fc6:	4249      	negs	r1, r1
    2fc8:	430a      	orrs	r2, r1
    2fca:	705a      	strb	r2, [r3, #1]
			mcp23017_data.devices[i].status = mcp23017_set_pins(MCP23017_I2C_ADDR_000+i,mcp23017_data.devices[i].outputs.ports[0],mcp23017_data.devices[i].outputs.ports[1]);
    2fcc:	687b      	ldr	r3, [r7, #4]
    2fce:	b2db      	uxtb	r3, r3
    2fd0:	3320      	adds	r3, #32
    2fd2:	b2d8      	uxtb	r0, r3
    2fd4:	4a13      	ldr	r2, [pc, #76]	; (3024 <update_all_ports+0xa4>)
    2fd6:	687b      	ldr	r3, [r7, #4]
    2fd8:	011b      	lsls	r3, r3, #4
    2fda:	18d3      	adds	r3, r2, r3
    2fdc:	3308      	adds	r3, #8
    2fde:	7819      	ldrb	r1, [r3, #0]
    2fe0:	4a10      	ldr	r2, [pc, #64]	; (3024 <update_all_ports+0xa4>)
    2fe2:	687b      	ldr	r3, [r7, #4]
    2fe4:	011b      	lsls	r3, r3, #4
    2fe6:	18d3      	adds	r3, r2, r3
    2fe8:	3309      	adds	r3, #9
    2fea:	781b      	ldrb	r3, [r3, #0]
    2fec:	001a      	movs	r2, r3
    2fee:	4b0e      	ldr	r3, [pc, #56]	; (3028 <update_all_ports+0xa8>)
    2ff0:	4798      	blx	r3
    2ff2:	0003      	movs	r3, r0
    2ff4:	0019      	movs	r1, r3
    2ff6:	4a0b      	ldr	r2, [pc, #44]	; (3024 <update_all_ports+0xa4>)
    2ff8:	687b      	ldr	r3, [r7, #4]
    2ffa:	011b      	lsls	r3, r3, #4
    2ffc:	18d3      	adds	r3, r2, r3
    2ffe:	3303      	adds	r3, #3
    3000:	1c0a      	adds	r2, r1, #0
    3002:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<8;i++)
    3004:	687b      	ldr	r3, [r7, #4]
    3006:	3301      	adds	r3, #1
    3008:	607b      	str	r3, [r7, #4]
    300a:	687b      	ldr	r3, [r7, #4]
    300c:	2b07      	cmp	r3, #7
    300e:	ddc7      	ble.n	2fa0 <update_all_ports+0x20>
			//data_LED[0][i] |= 0x80;
			//data_LED[1][i] |= 0x80;
		}
		port_update_ongoing = false;
    3010:	4b03      	ldr	r3, [pc, #12]	; (3020 <update_all_ports+0xa0>)
    3012:	2200      	movs	r2, #0
    3014:	701a      	strb	r2, [r3, #0]
	/*
	for(int i=0;i<8;i++)
	{
		mcp23017_set_pins(MCP23017_I2C_ADDR_000+i,(uint8_t)data[1],(uint8_t)data[1]);
	}*/
}
    3016:	46c0      	nop			; (mov r8, r8)
    3018:	46bd      	mov	sp, r7
    301a:	b002      	add	sp, #8
    301c:	bd80      	pop	{r7, pc}
    301e:	46c0      	nop			; (mov r8, r8)
    3020:	200003c7 	.word	0x200003c7
    3024:	20000010 	.word	0x20000010
    3028:	000040b9 	.word	0x000040b9

0000302c <party_lights>:
	}
}


void party_lights(uint16_t party_vals[])
{
    302c:	b590      	push	{r4, r7, lr}
    302e:	b083      	sub	sp, #12
    3030:	af00      	add	r7, sp, #0
    3032:	6078      	str	r0, [r7, #4]
	if (party_vals[0] > party_thresholds[0])
    3034:	687b      	ldr	r3, [r7, #4]
    3036:	881a      	ldrh	r2, [r3, #0]
    3038:	4b94      	ldr	r3, [pc, #592]	; (328c <party_lights+0x260>)
    303a:	881b      	ldrh	r3, [r3, #0]
    303c:	429a      	cmp	r2, r3
    303e:	d918      	bls.n	3072 <party_lights+0x46>
	{
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR,SUB_LEFT_PIN,true);
    3040:	2301      	movs	r3, #1
    3042:	2203      	movs	r2, #3
    3044:	2103      	movs	r1, #3
    3046:	2000      	movs	r0, #0
    3048:	4c91      	ldr	r4, [pc, #580]	; (3290 <party_lights+0x264>)
    304a:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR,SUB_RIGHT_PIN,true);
    304c:	2301      	movs	r3, #1
    304e:	2204      	movs	r2, #4
    3050:	2103      	movs	r1, #3
    3052:	2000      	movs	r0, #0
    3054:	4c8e      	ldr	r4, [pc, #568]	; (3290 <party_lights+0x264>)
    3056:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    3058:	2301      	movs	r3, #1
    305a:	2201      	movs	r2, #1
    305c:	2104      	movs	r1, #4
    305e:	2000      	movs	r0, #0
    3060:	4c8b      	ldr	r4, [pc, #556]	; (3290 <party_lights+0x264>)
    3062:	47a0      	blx	r4
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    3064:	2301      	movs	r3, #1
    3066:	2201      	movs	r2, #1
    3068:	2103      	movs	r1, #3
    306a:	2000      	movs	r0, #0
    306c:	4c88      	ldr	r4, [pc, #544]	; (3290 <party_lights+0x264>)
    306e:	47a0      	blx	r4
    3070:	e017      	b.n	30a2 <party_lights+0x76>
		//configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
		//configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
	}
	else
	{
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR, SUB_LEFT_PIN,false);
    3072:	2300      	movs	r3, #0
    3074:	2203      	movs	r2, #3
    3076:	2103      	movs	r1, #3
    3078:	2000      	movs	r0, #0
    307a:	4c85      	ldr	r4, [pc, #532]	; (3290 <party_lights+0x264>)
    307c:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR, SUB_RIGHT_PIN,false);
    307e:	2300      	movs	r3, #0
    3080:	2204      	movs	r2, #4
    3082:	2103      	movs	r1, #3
    3084:	2000      	movs	r0, #0
    3086:	4c82      	ldr	r4, [pc, #520]	; (3290 <party_lights+0x264>)
    3088:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    308a:	2300      	movs	r3, #0
    308c:	2201      	movs	r2, #1
    308e:	2104      	movs	r1, #4
    3090:	2000      	movs	r0, #0
    3092:	4c7f      	ldr	r4, [pc, #508]	; (3290 <party_lights+0x264>)
    3094:	47a0      	blx	r4
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    3096:	2300      	movs	r3, #0
    3098:	2201      	movs	r2, #1
    309a:	2103      	movs	r1, #3
    309c:	2000      	movs	r0, #0
    309e:	4c7c      	ldr	r4, [pc, #496]	; (3290 <party_lights+0x264>)
    30a0:	47a0      	blx	r4
		//configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
		//configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
	}
	if (party_vals[1] > party_thresholds[1])
    30a2:	687b      	ldr	r3, [r7, #4]
    30a4:	3302      	adds	r3, #2
    30a6:	881a      	ldrh	r2, [r3, #0]
    30a8:	4b78      	ldr	r3, [pc, #480]	; (328c <party_lights+0x260>)
    30aa:	885b      	ldrh	r3, [r3, #2]
    30ac:	429a      	cmp	r2, r3
    30ae:	d918      	bls.n	30e2 <party_lights+0xb6>
	{
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    30b0:	2301      	movs	r3, #1
    30b2:	2200      	movs	r2, #0
    30b4:	2102      	movs	r1, #2
    30b6:	2000      	movs	r0, #0
    30b8:	4c75      	ldr	r4, [pc, #468]	; (3290 <party_lights+0x264>)
    30ba:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    30bc:	2301      	movs	r3, #1
    30be:	2200      	movs	r2, #0
    30c0:	2101      	movs	r1, #1
    30c2:	2000      	movs	r0, #0
    30c4:	4c72      	ldr	r4, [pc, #456]	; (3290 <party_lights+0x264>)
    30c6:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    30c8:	2301      	movs	r3, #1
    30ca:	2200      	movs	r2, #0
    30cc:	2104      	movs	r1, #4
    30ce:	2000      	movs	r0, #0
    30d0:	4c6f      	ldr	r4, [pc, #444]	; (3290 <party_lights+0x264>)
    30d2:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    30d4:	2301      	movs	r3, #1
    30d6:	2200      	movs	r2, #0
    30d8:	2103      	movs	r1, #3
    30da:	2000      	movs	r0, #0
    30dc:	4c6c      	ldr	r4, [pc, #432]	; (3290 <party_lights+0x264>)
    30de:	47a0      	blx	r4
    30e0:	e017      	b.n	3112 <party_lights+0xe6>
	}
	else
	{
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,false);
    30e2:	2300      	movs	r3, #0
    30e4:	2200      	movs	r2, #0
    30e6:	2102      	movs	r1, #2
    30e8:	2000      	movs	r0, #0
    30ea:	4c69      	ldr	r4, [pc, #420]	; (3290 <party_lights+0x264>)
    30ec:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,false);
    30ee:	2300      	movs	r3, #0
    30f0:	2200      	movs	r2, #0
    30f2:	2101      	movs	r1, #1
    30f4:	2000      	movs	r0, #0
    30f6:	4c66      	ldr	r4, [pc, #408]	; (3290 <party_lights+0x264>)
    30f8:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    30fa:	2300      	movs	r3, #0
    30fc:	2200      	movs	r2, #0
    30fe:	2104      	movs	r1, #4
    3100:	2000      	movs	r0, #0
    3102:	4c63      	ldr	r4, [pc, #396]	; (3290 <party_lights+0x264>)
    3104:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    3106:	2300      	movs	r3, #0
    3108:	2200      	movs	r2, #0
    310a:	2103      	movs	r1, #3
    310c:	2000      	movs	r0, #0
    310e:	4c60      	ldr	r4, [pc, #384]	; (3290 <party_lights+0x264>)
    3110:	47a0      	blx	r4
	}
	if (party_vals[2] > party_thresholds[2])
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	3304      	adds	r3, #4
    3116:	881a      	ldrh	r2, [r3, #0]
    3118:	4b5c      	ldr	r3, [pc, #368]	; (328c <party_lights+0x260>)
    311a:	889b      	ldrh	r3, [r3, #4]
    311c:	429a      	cmp	r2, r3
    311e:	d912      	bls.n	3146 <party_lights+0x11a>
	{
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    3120:	2301      	movs	r3, #1
    3122:	2201      	movs	r2, #1
    3124:	2102      	movs	r1, #2
    3126:	2000      	movs	r0, #0
    3128:	4c59      	ldr	r4, [pc, #356]	; (3290 <party_lights+0x264>)
    312a:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    312c:	2301      	movs	r3, #1
    312e:	2201      	movs	r2, #1
    3130:	2101      	movs	r1, #1
    3132:	2000      	movs	r0, #0
    3134:	4c56      	ldr	r4, [pc, #344]	; (3290 <party_lights+0x264>)
    3136:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,true);
    3138:	2301      	movs	r3, #1
    313a:	2204      	movs	r2, #4
    313c:	2105      	movs	r1, #5
    313e:	2000      	movs	r0, #0
    3140:	4c53      	ldr	r4, [pc, #332]	; (3290 <party_lights+0x264>)
    3142:	47a0      	blx	r4
    3144:	e011      	b.n	316a <party_lights+0x13e>
	}
	else
	{
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    3146:	2300      	movs	r3, #0
    3148:	2201      	movs	r2, #1
    314a:	2102      	movs	r1, #2
    314c:	2000      	movs	r0, #0
    314e:	4c50      	ldr	r4, [pc, #320]	; (3290 <party_lights+0x264>)
    3150:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    3152:	2300      	movs	r3, #0
    3154:	2201      	movs	r2, #1
    3156:	2101      	movs	r1, #1
    3158:	2000      	movs	r0, #0
    315a:	4c4d      	ldr	r4, [pc, #308]	; (3290 <party_lights+0x264>)
    315c:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,false);
    315e:	2300      	movs	r3, #0
    3160:	2204      	movs	r2, #4
    3162:	2105      	movs	r1, #5
    3164:	2000      	movs	r0, #0
    3166:	4c4a      	ldr	r4, [pc, #296]	; (3290 <party_lights+0x264>)
    3168:	47a0      	blx	r4
	}
	if (party_vals[3] > party_thresholds[3])
    316a:	687b      	ldr	r3, [r7, #4]
    316c:	3306      	adds	r3, #6
    316e:	881a      	ldrh	r2, [r3, #0]
    3170:	4b46      	ldr	r3, [pc, #280]	; (328c <party_lights+0x260>)
    3172:	88db      	ldrh	r3, [r3, #6]
    3174:	429a      	cmp	r2, r3
    3176:	d912      	bls.n	319e <party_lights+0x172>
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    3178:	2301      	movs	r3, #1
    317a:	2202      	movs	r2, #2
    317c:	2102      	movs	r1, #2
    317e:	2000      	movs	r0, #0
    3180:	4c43      	ldr	r4, [pc, #268]	; (3290 <party_lights+0x264>)
    3182:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    3184:	2301      	movs	r3, #1
    3186:	2202      	movs	r2, #2
    3188:	2101      	movs	r1, #1
    318a:	2000      	movs	r0, #0
    318c:	4c40      	ldr	r4, [pc, #256]	; (3290 <party_lights+0x264>)
    318e:	47a0      	blx	r4
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,true);
    3190:	2301      	movs	r3, #1
    3192:	2203      	movs	r2, #3
    3194:	2105      	movs	r1, #5
    3196:	2000      	movs	r0, #0
    3198:	4c3d      	ldr	r4, [pc, #244]	; (3290 <party_lights+0x264>)
    319a:	47a0      	blx	r4
    319c:	e011      	b.n	31c2 <party_lights+0x196>
	}
	else
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    319e:	2300      	movs	r3, #0
    31a0:	2202      	movs	r2, #2
    31a2:	2102      	movs	r1, #2
    31a4:	2000      	movs	r0, #0
    31a6:	4c3a      	ldr	r4, [pc, #232]	; (3290 <party_lights+0x264>)
    31a8:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    31aa:	2300      	movs	r3, #0
    31ac:	2202      	movs	r2, #2
    31ae:	2101      	movs	r1, #1
    31b0:	2000      	movs	r0, #0
    31b2:	4c37      	ldr	r4, [pc, #220]	; (3290 <party_lights+0x264>)
    31b4:	47a0      	blx	r4
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,false);
    31b6:	2300      	movs	r3, #0
    31b8:	2203      	movs	r2, #3
    31ba:	2105      	movs	r1, #5
    31bc:	2000      	movs	r0, #0
    31be:	4c34      	ldr	r4, [pc, #208]	; (3290 <party_lights+0x264>)
    31c0:	47a0      	blx	r4

	}
	if (party_vals[4] > party_thresholds[4])
    31c2:	687b      	ldr	r3, [r7, #4]
    31c4:	3308      	adds	r3, #8
    31c6:	881a      	ldrh	r2, [r3, #0]
    31c8:	4b30      	ldr	r3, [pc, #192]	; (328c <party_lights+0x260>)
    31ca:	891b      	ldrh	r3, [r3, #8]
    31cc:	429a      	cmp	r2, r3
    31ce:	d912      	bls.n	31f6 <party_lights+0x1ca>
	{
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    31d0:	2301      	movs	r3, #1
    31d2:	2202      	movs	r2, #2
    31d4:	2104      	movs	r1, #4
    31d6:	2000      	movs	r0, #0
    31d8:	4c2d      	ldr	r4, [pc, #180]	; (3290 <party_lights+0x264>)
    31da:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    31dc:	2301      	movs	r3, #1
    31de:	2202      	movs	r2, #2
    31e0:	2103      	movs	r1, #3
    31e2:	2000      	movs	r0, #0
    31e4:	4c2a      	ldr	r4, [pc, #168]	; (3290 <party_lights+0x264>)
    31e6:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,true);
    31e8:	2301      	movs	r3, #1
    31ea:	2202      	movs	r2, #2
    31ec:	2105      	movs	r1, #5
    31ee:	2000      	movs	r0, #0
    31f0:	4c27      	ldr	r4, [pc, #156]	; (3290 <party_lights+0x264>)
    31f2:	47a0      	blx	r4
    31f4:	e011      	b.n	321a <party_lights+0x1ee>
	}
	else
	{
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,false);
    31f6:	2300      	movs	r3, #0
    31f8:	2202      	movs	r2, #2
    31fa:	2104      	movs	r1, #4
    31fc:	2000      	movs	r0, #0
    31fe:	4c24      	ldr	r4, [pc, #144]	; (3290 <party_lights+0x264>)
    3200:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,false);
    3202:	2300      	movs	r3, #0
    3204:	2202      	movs	r2, #2
    3206:	2103      	movs	r1, #3
    3208:	2000      	movs	r0, #0
    320a:	4c21      	ldr	r4, [pc, #132]	; (3290 <party_lights+0x264>)
    320c:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,false);
    320e:	2300      	movs	r3, #0
    3210:	2202      	movs	r2, #2
    3212:	2105      	movs	r1, #5
    3214:	2000      	movs	r0, #0
    3216:	4c1e      	ldr	r4, [pc, #120]	; (3290 <party_lights+0x264>)
    3218:	47a0      	blx	r4
	}
	if (party_vals[5] > party_thresholds[5])
    321a:	687b      	ldr	r3, [r7, #4]
    321c:	330a      	adds	r3, #10
    321e:	881a      	ldrh	r2, [r3, #0]
    3220:	4b1a      	ldr	r3, [pc, #104]	; (328c <party_lights+0x260>)
    3222:	895b      	ldrh	r3, [r3, #10]
    3224:	429a      	cmp	r2, r3
    3226:	d90c      	bls.n	3242 <party_lights+0x216>
	{
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    3228:	2301      	movs	r3, #1
    322a:	2203      	movs	r2, #3
    322c:	2101      	movs	r1, #1
    322e:	2000      	movs	r0, #0
    3230:	4c17      	ldr	r4, [pc, #92]	; (3290 <party_lights+0x264>)
    3232:	47a0      	blx	r4
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    3234:	2301      	movs	r3, #1
    3236:	2203      	movs	r2, #3
    3238:	2102      	movs	r1, #2
    323a:	2000      	movs	r0, #0
    323c:	4c14      	ldr	r4, [pc, #80]	; (3290 <party_lights+0x264>)
    323e:	47a0      	blx	r4
    3240:	e00b      	b.n	325a <party_lights+0x22e>
	}
	else
	{
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    3242:	2300      	movs	r3, #0
    3244:	2203      	movs	r2, #3
    3246:	2101      	movs	r1, #1
    3248:	2000      	movs	r0, #0
    324a:	4c11      	ldr	r4, [pc, #68]	; (3290 <party_lights+0x264>)
    324c:	47a0      	blx	r4
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    324e:	2300      	movs	r3, #0
    3250:	2203      	movs	r2, #3
    3252:	2102      	movs	r1, #2
    3254:	2000      	movs	r0, #0
    3256:	4c0e      	ldr	r4, [pc, #56]	; (3290 <party_lights+0x264>)
    3258:	47a0      	blx	r4
	}
	if (party_vals[6] > party_thresholds[6])
    325a:	687b      	ldr	r3, [r7, #4]
    325c:	330c      	adds	r3, #12
    325e:	881a      	ldrh	r2, [r3, #0]
    3260:	4b0a      	ldr	r3, [pc, #40]	; (328c <party_lights+0x260>)
    3262:	899b      	ldrh	r3, [r3, #12]
    3264:	429a      	cmp	r2, r3
    3266:	d906      	bls.n	3276 <party_lights+0x24a>
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    3268:	2301      	movs	r3, #1
    326a:	2204      	movs	r2, #4
    326c:	2101      	movs	r1, #1
    326e:	2000      	movs	r0, #0
    3270:	4c07      	ldr	r4, [pc, #28]	; (3290 <party_lights+0x264>)
    3272:	47a0      	blx	r4
	}
	else
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
	}
}
    3274:	e005      	b.n	3282 <party_lights+0x256>
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    3276:	2300      	movs	r3, #0
    3278:	2204      	movs	r2, #4
    327a:	2101      	movs	r1, #1
    327c:	2000      	movs	r0, #0
    327e:	4c04      	ldr	r4, [pc, #16]	; (3290 <party_lights+0x264>)
    3280:	47a0      	blx	r4
}
    3282:	46c0      	nop			; (mov r8, r8)
    3284:	46bd      	mov	sp, r7
    3286:	b003      	add	sp, #12
    3288:	bd90      	pop	{r4, r7, pc}
    328a:	46c0      	nop			; (mov r8, r8)
    328c:	2000031c 	.word	0x2000031c
    3290:	00003afd 	.word	0x00003afd

00003294 <flashy_flash1>:

void flashy_flash1()
{
    3294:	b5b0      	push	{r4, r5, r7, lr}
    3296:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
    3298:	4b7c      	ldr	r3, [pc, #496]	; (348c <flashy_flash1+0x1f8>)
    329a:	781b      	ldrb	r3, [r3, #0]
    329c:	2b13      	cmp	r3, #19
    329e:	d900      	bls.n	32a2 <flashy_flash1+0xe>
    32a0:	e0ea      	b.n	3478 <flashy_flash1+0x1e4>
    32a2:	009a      	lsls	r2, r3, #2
    32a4:	4b7a      	ldr	r3, [pc, #488]	; (3490 <flashy_flash1+0x1fc>)
    32a6:	18d3      	adds	r3, r2, r3
    32a8:	681b      	ldr	r3, [r3, #0]
    32aa:	469f      	mov	pc, r3
	{
		case 0:
			reset_all_lights();
    32ac:	4b79      	ldr	r3, [pc, #484]	; (3494 <flashy_flash1+0x200>)
    32ae:	4798      	blx	r3
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    32b0:	2301      	movs	r3, #1
    32b2:	2202      	movs	r2, #2
    32b4:	2102      	movs	r1, #2
    32b6:	2000      	movs	r0, #0
    32b8:	4c77      	ldr	r4, [pc, #476]	; (3498 <flashy_flash1+0x204>)
    32ba:	47a0      	blx	r4
			state++;
    32bc:	4b73      	ldr	r3, [pc, #460]	; (348c <flashy_flash1+0x1f8>)
    32be:	781b      	ldrb	r3, [r3, #0]
    32c0:	3301      	adds	r3, #1
    32c2:	b2da      	uxtb	r2, r3
    32c4:	4b71      	ldr	r3, [pc, #452]	; (348c <flashy_flash1+0x1f8>)
    32c6:	701a      	strb	r2, [r3, #0]
			break;
    32c8:	e0dc      	b.n	3484 <flashy_flash1+0x1f0>
		case 1:
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    32ca:	2300      	movs	r3, #0
    32cc:	2202      	movs	r2, #2
    32ce:	2102      	movs	r1, #2
    32d0:	2000      	movs	r0, #0
    32d2:	4c71      	ldr	r4, [pc, #452]	; (3498 <flashy_flash1+0x204>)
    32d4:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    32d6:	2301      	movs	r3, #1
    32d8:	2201      	movs	r2, #1
    32da:	2102      	movs	r1, #2
    32dc:	2000      	movs	r0, #0
    32de:	4c6e      	ldr	r4, [pc, #440]	; (3498 <flashy_flash1+0x204>)
    32e0:	47a0      	blx	r4
			state++;
    32e2:	4b6a      	ldr	r3, [pc, #424]	; (348c <flashy_flash1+0x1f8>)
    32e4:	781b      	ldrb	r3, [r3, #0]
    32e6:	3301      	adds	r3, #1
    32e8:	b2da      	uxtb	r2, r3
    32ea:	4b68      	ldr	r3, [pc, #416]	; (348c <flashy_flash1+0x1f8>)
    32ec:	701a      	strb	r2, [r3, #0]
			break;
    32ee:	e0c9      	b.n	3484 <flashy_flash1+0x1f0>
		case 2:
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    32f0:	2300      	movs	r3, #0
    32f2:	2201      	movs	r2, #1
    32f4:	2102      	movs	r1, #2
    32f6:	2000      	movs	r0, #0
    32f8:	4c67      	ldr	r4, [pc, #412]	; (3498 <flashy_flash1+0x204>)
    32fa:	47a0      	blx	r4
			configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    32fc:	2301      	movs	r3, #1
    32fe:	2200      	movs	r2, #0
    3300:	2102      	movs	r1, #2
    3302:	2000      	movs	r0, #0
    3304:	4c64      	ldr	r4, [pc, #400]	; (3498 <flashy_flash1+0x204>)
    3306:	47a0      	blx	r4
			state++;
    3308:	4b60      	ldr	r3, [pc, #384]	; (348c <flashy_flash1+0x1f8>)
    330a:	781b      	ldrb	r3, [r3, #0]
    330c:	3301      	adds	r3, #1
    330e:	b2da      	uxtb	r2, r3
    3310:	4b5e      	ldr	r3, [pc, #376]	; (348c <flashy_flash1+0x1f8>)
    3312:	701a      	strb	r2, [r3, #0]
			break;
    3314:	e0b6      	b.n	3484 <flashy_flash1+0x1f0>
		case 3:
			configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,false);
    3316:	2300      	movs	r3, #0
    3318:	2200      	movs	r2, #0
    331a:	2102      	movs	r1, #2
    331c:	2000      	movs	r0, #0
    331e:	4c5e      	ldr	r4, [pc, #376]	; (3498 <flashy_flash1+0x204>)
    3320:	47a0      	blx	r4
			configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    3322:	2301      	movs	r3, #1
    3324:	2200      	movs	r2, #0
    3326:	2101      	movs	r1, #1
    3328:	2000      	movs	r0, #0
    332a:	4c5b      	ldr	r4, [pc, #364]	; (3498 <flashy_flash1+0x204>)
    332c:	47a0      	blx	r4
			state++;
    332e:	4b57      	ldr	r3, [pc, #348]	; (348c <flashy_flash1+0x1f8>)
    3330:	781b      	ldrb	r3, [r3, #0]
    3332:	3301      	adds	r3, #1
    3334:	b2da      	uxtb	r2, r3
    3336:	4b55      	ldr	r3, [pc, #340]	; (348c <flashy_flash1+0x1f8>)
    3338:	701a      	strb	r2, [r3, #0]
			break;
    333a:	e0a3      	b.n	3484 <flashy_flash1+0x1f0>
		case 4:
			configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,false);
    333c:	2300      	movs	r3, #0
    333e:	2200      	movs	r2, #0
    3340:	2101      	movs	r1, #1
    3342:	2000      	movs	r0, #0
    3344:	4c54      	ldr	r4, [pc, #336]	; (3498 <flashy_flash1+0x204>)
    3346:	47a0      	blx	r4
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    3348:	2301      	movs	r3, #1
    334a:	2201      	movs	r2, #1
    334c:	2101      	movs	r1, #1
    334e:	2000      	movs	r0, #0
    3350:	4c51      	ldr	r4, [pc, #324]	; (3498 <flashy_flash1+0x204>)
    3352:	47a0      	blx	r4
			state++;
    3354:	4b4d      	ldr	r3, [pc, #308]	; (348c <flashy_flash1+0x1f8>)
    3356:	781b      	ldrb	r3, [r3, #0]
    3358:	3301      	adds	r3, #1
    335a:	b2da      	uxtb	r2, r3
    335c:	4b4b      	ldr	r3, [pc, #300]	; (348c <flashy_flash1+0x1f8>)
    335e:	701a      	strb	r2, [r3, #0]
			break;
    3360:	e090      	b.n	3484 <flashy_flash1+0x1f0>
		case 5:
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    3362:	2300      	movs	r3, #0
    3364:	2201      	movs	r2, #1
    3366:	2101      	movs	r1, #1
    3368:	2000      	movs	r0, #0
    336a:	4c4b      	ldr	r4, [pc, #300]	; (3498 <flashy_flash1+0x204>)
    336c:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    336e:	2301      	movs	r3, #1
    3370:	2202      	movs	r2, #2
    3372:	2101      	movs	r1, #1
    3374:	2000      	movs	r0, #0
    3376:	4c48      	ldr	r4, [pc, #288]	; (3498 <flashy_flash1+0x204>)
    3378:	47a0      	blx	r4
			state++;
    337a:	4b44      	ldr	r3, [pc, #272]	; (348c <flashy_flash1+0x1f8>)
    337c:	781b      	ldrb	r3, [r3, #0]
    337e:	3301      	adds	r3, #1
    3380:	b2da      	uxtb	r2, r3
    3382:	4b42      	ldr	r3, [pc, #264]	; (348c <flashy_flash1+0x1f8>)
    3384:	701a      	strb	r2, [r3, #0]
			break;
    3386:	e07d      	b.n	3484 <flashy_flash1+0x1f0>
		case 6:
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    3388:	2300      	movs	r3, #0
    338a:	2202      	movs	r2, #2
    338c:	2101      	movs	r1, #1
    338e:	2000      	movs	r0, #0
    3390:	4c41      	ldr	r4, [pc, #260]	; (3498 <flashy_flash1+0x204>)
    3392:	47a0      	blx	r4
			configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    3394:	2301      	movs	r3, #1
    3396:	2202      	movs	r2, #2
    3398:	2103      	movs	r1, #3
    339a:	2000      	movs	r0, #0
    339c:	4c3e      	ldr	r4, [pc, #248]	; (3498 <flashy_flash1+0x204>)
    339e:	47a0      	blx	r4
			state++;
    33a0:	4b3a      	ldr	r3, [pc, #232]	; (348c <flashy_flash1+0x1f8>)
    33a2:	781b      	ldrb	r3, [r3, #0]
    33a4:	3301      	adds	r3, #1
    33a6:	b2da      	uxtb	r2, r3
    33a8:	4b38      	ldr	r3, [pc, #224]	; (348c <flashy_flash1+0x1f8>)
    33aa:	701a      	strb	r2, [r3, #0]
			break;
    33ac:	e06a      	b.n	3484 <flashy_flash1+0x1f0>
		case 7:
			configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,false);
    33ae:	2300      	movs	r3, #0
    33b0:	2202      	movs	r2, #2
    33b2:	2103      	movs	r1, #3
    33b4:	2000      	movs	r0, #0
    33b6:	4c38      	ldr	r4, [pc, #224]	; (3498 <flashy_flash1+0x204>)
    33b8:	47a0      	blx	r4
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    33ba:	2301      	movs	r3, #1
    33bc:	2201      	movs	r2, #1
    33be:	2103      	movs	r1, #3
    33c0:	2000      	movs	r0, #0
    33c2:	4c35      	ldr	r4, [pc, #212]	; (3498 <flashy_flash1+0x204>)
    33c4:	47a0      	blx	r4
			state++;
    33c6:	4b31      	ldr	r3, [pc, #196]	; (348c <flashy_flash1+0x1f8>)
    33c8:	781b      	ldrb	r3, [r3, #0]
    33ca:	3301      	adds	r3, #1
    33cc:	b2da      	uxtb	r2, r3
    33ce:	4b2f      	ldr	r3, [pc, #188]	; (348c <flashy_flash1+0x1f8>)
    33d0:	701a      	strb	r2, [r3, #0]
			break;
    33d2:	e057      	b.n	3484 <flashy_flash1+0x1f0>
		case 8:
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    33d4:	2300      	movs	r3, #0
    33d6:	2201      	movs	r2, #1
    33d8:	2103      	movs	r1, #3
    33da:	2000      	movs	r0, #0
    33dc:	4c2e      	ldr	r4, [pc, #184]	; (3498 <flashy_flash1+0x204>)
    33de:	47a0      	blx	r4
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    33e0:	2301      	movs	r3, #1
    33e2:	2200      	movs	r2, #0
    33e4:	2103      	movs	r1, #3
    33e6:	2000      	movs	r0, #0
    33e8:	4c2b      	ldr	r4, [pc, #172]	; (3498 <flashy_flash1+0x204>)
    33ea:	47a0      	blx	r4
			state++;
    33ec:	4b27      	ldr	r3, [pc, #156]	; (348c <flashy_flash1+0x1f8>)
    33ee:	781b      	ldrb	r3, [r3, #0]
    33f0:	3301      	adds	r3, #1
    33f2:	b2da      	uxtb	r2, r3
    33f4:	4b25      	ldr	r3, [pc, #148]	; (348c <flashy_flash1+0x1f8>)
    33f6:	701a      	strb	r2, [r3, #0]
			break;
    33f8:	e044      	b.n	3484 <flashy_flash1+0x1f0>
		case 9:
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    33fa:	2300      	movs	r3, #0
    33fc:	2200      	movs	r2, #0
    33fe:	2103      	movs	r1, #3
    3400:	2000      	movs	r0, #0
    3402:	4c25      	ldr	r4, [pc, #148]	; (3498 <flashy_flash1+0x204>)
    3404:	47a0      	blx	r4
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    3406:	2301      	movs	r3, #1
    3408:	2201      	movs	r2, #1
    340a:	2104      	movs	r1, #4
    340c:	2000      	movs	r0, #0
    340e:	4c22      	ldr	r4, [pc, #136]	; (3498 <flashy_flash1+0x204>)
    3410:	47a0      	blx	r4
			state++;
    3412:	4b1e      	ldr	r3, [pc, #120]	; (348c <flashy_flash1+0x1f8>)
    3414:	781b      	ldrb	r3, [r3, #0]
    3416:	3301      	adds	r3, #1
    3418:	b2da      	uxtb	r2, r3
    341a:	4b1c      	ldr	r3, [pc, #112]	; (348c <flashy_flash1+0x1f8>)
    341c:	701a      	strb	r2, [r3, #0]
			break;
    341e:	e031      	b.n	3484 <flashy_flash1+0x1f0>
		case 10:
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    3420:	2300      	movs	r3, #0
    3422:	2201      	movs	r2, #1
    3424:	2104      	movs	r1, #4
    3426:	2000      	movs	r0, #0
    3428:	4c1b      	ldr	r4, [pc, #108]	; (3498 <flashy_flash1+0x204>)
    342a:	47a0      	blx	r4
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    342c:	2301      	movs	r3, #1
    342e:	2200      	movs	r2, #0
    3430:	2104      	movs	r1, #4
    3432:	2000      	movs	r0, #0
    3434:	4c18      	ldr	r4, [pc, #96]	; (3498 <flashy_flash1+0x204>)
    3436:	47a0      	blx	r4
			state++;
    3438:	4b14      	ldr	r3, [pc, #80]	; (348c <flashy_flash1+0x1f8>)
    343a:	781b      	ldrb	r3, [r3, #0]
    343c:	3301      	adds	r3, #1
    343e:	b2da      	uxtb	r2, r3
    3440:	4b12      	ldr	r3, [pc, #72]	; (348c <flashy_flash1+0x1f8>)
    3442:	701a      	strb	r2, [r3, #0]
			break;
    3444:	e01e      	b.n	3484 <flashy_flash1+0x1f0>
		case 11:
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    3446:	2300      	movs	r3, #0
    3448:	2200      	movs	r2, #0
    344a:	2104      	movs	r1, #4
    344c:	2000      	movs	r0, #0
    344e:	4c12      	ldr	r4, [pc, #72]	; (3498 <flashy_flash1+0x204>)
    3450:	47a0      	blx	r4
			configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    3452:	2301      	movs	r3, #1
    3454:	2202      	movs	r2, #2
    3456:	2104      	movs	r1, #4
    3458:	2000      	movs	r0, #0
    345a:	4c0f      	ldr	r4, [pc, #60]	; (3498 <flashy_flash1+0x204>)
    345c:	47a0      	blx	r4
			state++;
    345e:	4b0b      	ldr	r3, [pc, #44]	; (348c <flashy_flash1+0x1f8>)
    3460:	781b      	ldrb	r3, [r3, #0]
    3462:	3301      	adds	r3, #1
    3464:	b2da      	uxtb	r2, r3
    3466:	4b09      	ldr	r3, [pc, #36]	; (348c <flashy_flash1+0x1f8>)
    3468:	701a      	strb	r2, [r3, #0]
			break;
    346a:	e00b      	b.n	3484 <flashy_flash1+0x1f0>
		case 18:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
			state++;
			break;*/
		case 19:
			reset_all_lights();
    346c:	4b09      	ldr	r3, [pc, #36]	; (3494 <flashy_flash1+0x200>)
    346e:	4798      	blx	r3
			state = 0;
    3470:	4b06      	ldr	r3, [pc, #24]	; (348c <flashy_flash1+0x1f8>)
    3472:	2200      	movs	r2, #0
    3474:	701a      	strb	r2, [r3, #0]
			break;
    3476:	e005      	b.n	3484 <flashy_flash1+0x1f0>
			
		default:
			reset_all_lights();
    3478:	4b06      	ldr	r3, [pc, #24]	; (3494 <flashy_flash1+0x200>)
    347a:	4798      	blx	r3
			state = 0;
    347c:	4b03      	ldr	r3, [pc, #12]	; (348c <flashy_flash1+0x1f8>)
    347e:	2200      	movs	r2, #0
    3480:	701a      	strb	r2, [r3, #0]
			break;
    3482:	46c0      	nop			; (mov r8, r8)
	}
}
    3484:	46c0      	nop			; (mov r8, r8)
    3486:	46bd      	mov	sp, r7
    3488:	bdb0      	pop	{r4, r5, r7, pc}
    348a:	46c0      	nop			; (mov r8, r8)
    348c:	20000288 	.word	0x20000288
    3490:	000099a0 	.word	0x000099a0
    3494:	00003885 	.word	0x00003885
    3498:	00003afd 	.word	0x00003afd

0000349c <flashy_flash2>:

void flashy_flash2()
{
    349c:	b5b0      	push	{r4, r5, r7, lr}
    349e:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
    34a0:	4b8e      	ldr	r3, [pc, #568]	; (36dc <flashy_flash2+0x240>)
    34a2:	781b      	ldrb	r3, [r3, #0]
    34a4:	2b0a      	cmp	r3, #10
    34a6:	d900      	bls.n	34aa <flashy_flash2+0xe>
    34a8:	e110      	b.n	36cc <flashy_flash2+0x230>
    34aa:	009a      	lsls	r2, r3, #2
    34ac:	4b8c      	ldr	r3, [pc, #560]	; (36e0 <flashy_flash2+0x244>)
    34ae:	18d3      	adds	r3, r2, r3
    34b0:	681b      	ldr	r3, [r3, #0]
    34b2:	469f      	mov	pc, r3
	{
		case 0:
			reset_all_lights();
    34b4:	4b8b      	ldr	r3, [pc, #556]	; (36e4 <flashy_flash2+0x248>)
    34b6:	4798      	blx	r3
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    34b8:	2301      	movs	r3, #1
    34ba:	2204      	movs	r2, #4
    34bc:	2101      	movs	r1, #1
    34be:	2000      	movs	r0, #0
    34c0:	4c89      	ldr	r4, [pc, #548]	; (36e8 <flashy_flash2+0x24c>)
    34c2:	47a0      	blx	r4
			state++;
    34c4:	4b85      	ldr	r3, [pc, #532]	; (36dc <flashy_flash2+0x240>)
    34c6:	781b      	ldrb	r3, [r3, #0]
    34c8:	3301      	adds	r3, #1
    34ca:	b2da      	uxtb	r2, r3
    34cc:	4b83      	ldr	r3, [pc, #524]	; (36dc <flashy_flash2+0x240>)
    34ce:	701a      	strb	r2, [r3, #0]
			break;
    34d0:	e101      	b.n	36d6 <flashy_flash2+0x23a>
		case 1:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    34d2:	2300      	movs	r3, #0
    34d4:	2204      	movs	r2, #4
    34d6:	2101      	movs	r1, #1
    34d8:	2000      	movs	r0, #0
    34da:	4c83      	ldr	r4, [pc, #524]	; (36e8 <flashy_flash2+0x24c>)
    34dc:	47a0      	blx	r4
			state++;
    34de:	4b7f      	ldr	r3, [pc, #508]	; (36dc <flashy_flash2+0x240>)
    34e0:	781b      	ldrb	r3, [r3, #0]
    34e2:	3301      	adds	r3, #1
    34e4:	b2da      	uxtb	r2, r3
    34e6:	4b7d      	ldr	r3, [pc, #500]	; (36dc <flashy_flash2+0x240>)
    34e8:	701a      	strb	r2, [r3, #0]
			break;
    34ea:	e0f4      	b.n	36d6 <flashy_flash2+0x23a>
		case 2:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    34ec:	2301      	movs	r3, #1
    34ee:	2204      	movs	r2, #4
    34f0:	2101      	movs	r1, #1
    34f2:	2000      	movs	r0, #0
    34f4:	4c7c      	ldr	r4, [pc, #496]	; (36e8 <flashy_flash2+0x24c>)
    34f6:	47a0      	blx	r4
			state++;
    34f8:	4b78      	ldr	r3, [pc, #480]	; (36dc <flashy_flash2+0x240>)
    34fa:	781b      	ldrb	r3, [r3, #0]
    34fc:	3301      	adds	r3, #1
    34fe:	b2da      	uxtb	r2, r3
    3500:	4b76      	ldr	r3, [pc, #472]	; (36dc <flashy_flash2+0x240>)
    3502:	701a      	strb	r2, [r3, #0]
			break;
    3504:	e0e7      	b.n	36d6 <flashy_flash2+0x23a>
		case 3:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    3506:	2300      	movs	r3, #0
    3508:	2204      	movs	r2, #4
    350a:	2101      	movs	r1, #1
    350c:	2000      	movs	r0, #0
    350e:	4c76      	ldr	r4, [pc, #472]	; (36e8 <flashy_flash2+0x24c>)
    3510:	47a0      	blx	r4
			state++;
    3512:	4b72      	ldr	r3, [pc, #456]	; (36dc <flashy_flash2+0x240>)
    3514:	781b      	ldrb	r3, [r3, #0]
    3516:	3301      	adds	r3, #1
    3518:	b2da      	uxtb	r2, r3
    351a:	4b70      	ldr	r3, [pc, #448]	; (36dc <flashy_flash2+0x240>)
    351c:	701a      	strb	r2, [r3, #0]
			break;
    351e:	e0da      	b.n	36d6 <flashy_flash2+0x23a>
		case 4:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    3520:	2301      	movs	r3, #1
    3522:	2204      	movs	r2, #4
    3524:	2101      	movs	r1, #1
    3526:	2000      	movs	r0, #0
    3528:	4c6f      	ldr	r4, [pc, #444]	; (36e8 <flashy_flash2+0x24c>)
    352a:	47a0      	blx	r4
			state++;
    352c:	4b6b      	ldr	r3, [pc, #428]	; (36dc <flashy_flash2+0x240>)
    352e:	781b      	ldrb	r3, [r3, #0]
    3530:	3301      	adds	r3, #1
    3532:	b2da      	uxtb	r2, r3
    3534:	4b69      	ldr	r3, [pc, #420]	; (36dc <flashy_flash2+0x240>)
    3536:	701a      	strb	r2, [r3, #0]
			break;
    3538:	e0cd      	b.n	36d6 <flashy_flash2+0x23a>
		case 5:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    353a:	2300      	movs	r3, #0
    353c:	2204      	movs	r2, #4
    353e:	2101      	movs	r1, #1
    3540:	2000      	movs	r0, #0
    3542:	4c69      	ldr	r4, [pc, #420]	; (36e8 <flashy_flash2+0x24c>)
    3544:	47a0      	blx	r4
			state++;
    3546:	4b65      	ldr	r3, [pc, #404]	; (36dc <flashy_flash2+0x240>)
    3548:	781b      	ldrb	r3, [r3, #0]
    354a:	3301      	adds	r3, #1
    354c:	b2da      	uxtb	r2, r3
    354e:	4b63      	ldr	r3, [pc, #396]	; (36dc <flashy_flash2+0x240>)
    3550:	701a      	strb	r2, [r3, #0]
			break;
    3552:	e0c0      	b.n	36d6 <flashy_flash2+0x23a>
		case 6:
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    3554:	2301      	movs	r3, #1
    3556:	2202      	movs	r2, #2
    3558:	2101      	movs	r1, #1
    355a:	2000      	movs	r0, #0
    355c:	4c62      	ldr	r4, [pc, #392]	; (36e8 <flashy_flash2+0x24c>)
    355e:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    3560:	2301      	movs	r3, #1
    3562:	2202      	movs	r2, #2
    3564:	2102      	movs	r1, #2
    3566:	2000      	movs	r0, #0
    3568:	4c5f      	ldr	r4, [pc, #380]	; (36e8 <flashy_flash2+0x24c>)
    356a:	47a0      	blx	r4
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    356c:	2301      	movs	r3, #1
    356e:	2201      	movs	r2, #1
    3570:	2103      	movs	r1, #3
    3572:	2000      	movs	r0, #0
    3574:	4c5c      	ldr	r4, [pc, #368]	; (36e8 <flashy_flash2+0x24c>)
    3576:	47a0      	blx	r4
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    3578:	2301      	movs	r3, #1
    357a:	2201      	movs	r2, #1
    357c:	2104      	movs	r1, #4
    357e:	2000      	movs	r0, #0
    3580:	4c59      	ldr	r4, [pc, #356]	; (36e8 <flashy_flash2+0x24c>)
    3582:	47a0      	blx	r4
			state++;
    3584:	4b55      	ldr	r3, [pc, #340]	; (36dc <flashy_flash2+0x240>)
    3586:	781b      	ldrb	r3, [r3, #0]
    3588:	3301      	adds	r3, #1
    358a:	b2da      	uxtb	r2, r3
    358c:	4b53      	ldr	r3, [pc, #332]	; (36dc <flashy_flash2+0x240>)
    358e:	701a      	strb	r2, [r3, #0]
			break;
    3590:	e0a1      	b.n	36d6 <flashy_flash2+0x23a>
		case 7:
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    3592:	2300      	movs	r3, #0
    3594:	2202      	movs	r2, #2
    3596:	2101      	movs	r1, #1
    3598:	2000      	movs	r0, #0
    359a:	4c53      	ldr	r4, [pc, #332]	; (36e8 <flashy_flash2+0x24c>)
    359c:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    359e:	2300      	movs	r3, #0
    35a0:	2202      	movs	r2, #2
    35a2:	2102      	movs	r1, #2
    35a4:	2000      	movs	r0, #0
    35a6:	4c50      	ldr	r4, [pc, #320]	; (36e8 <flashy_flash2+0x24c>)
    35a8:	47a0      	blx	r4
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    35aa:	2301      	movs	r3, #1
    35ac:	2201      	movs	r2, #1
    35ae:	2101      	movs	r1, #1
    35b0:	2000      	movs	r0, #0
    35b2:	4c4d      	ldr	r4, [pc, #308]	; (36e8 <flashy_flash2+0x24c>)
    35b4:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    35b6:	2301      	movs	r3, #1
    35b8:	2201      	movs	r2, #1
    35ba:	2102      	movs	r1, #2
    35bc:	2000      	movs	r0, #0
    35be:	4c4a      	ldr	r4, [pc, #296]	; (36e8 <flashy_flash2+0x24c>)
    35c0:	47a0      	blx	r4
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    35c2:	2300      	movs	r3, #0
    35c4:	2201      	movs	r2, #1
    35c6:	2103      	movs	r1, #3
    35c8:	2000      	movs	r0, #0
    35ca:	4c47      	ldr	r4, [pc, #284]	; (36e8 <flashy_flash2+0x24c>)
    35cc:	47a0      	blx	r4
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    35ce:	2300      	movs	r3, #0
    35d0:	2201      	movs	r2, #1
    35d2:	2104      	movs	r1, #4
    35d4:	2000      	movs	r0, #0
    35d6:	4c44      	ldr	r4, [pc, #272]	; (36e8 <flashy_flash2+0x24c>)
    35d8:	47a0      	blx	r4
			state++;
    35da:	4b40      	ldr	r3, [pc, #256]	; (36dc <flashy_flash2+0x240>)
    35dc:	781b      	ldrb	r3, [r3, #0]
    35de:	3301      	adds	r3, #1
    35e0:	b2da      	uxtb	r2, r3
    35e2:	4b3e      	ldr	r3, [pc, #248]	; (36dc <flashy_flash2+0x240>)
    35e4:	701a      	strb	r2, [r3, #0]
			break;
    35e6:	e076      	b.n	36d6 <flashy_flash2+0x23a>
		case 8:
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    35e8:	2300      	movs	r3, #0
    35ea:	2201      	movs	r2, #1
    35ec:	2101      	movs	r1, #1
    35ee:	2000      	movs	r0, #0
    35f0:	4c3d      	ldr	r4, [pc, #244]	; (36e8 <flashy_flash2+0x24c>)
    35f2:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    35f4:	2300      	movs	r3, #0
    35f6:	2201      	movs	r2, #1
    35f8:	2102      	movs	r1, #2
    35fa:	2000      	movs	r0, #0
    35fc:	4c3a      	ldr	r4, [pc, #232]	; (36e8 <flashy_flash2+0x24c>)
    35fe:	47a0      	blx	r4
			configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    3600:	2301      	movs	r3, #1
    3602:	2203      	movs	r2, #3
    3604:	2101      	movs	r1, #1
    3606:	2000      	movs	r0, #0
    3608:	4c37      	ldr	r4, [pc, #220]	; (36e8 <flashy_flash2+0x24c>)
    360a:	47a0      	blx	r4
			configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    360c:	2301      	movs	r3, #1
    360e:	2203      	movs	r2, #3
    3610:	2102      	movs	r1, #2
    3612:	2000      	movs	r0, #0
    3614:	4c34      	ldr	r4, [pc, #208]	; (36e8 <flashy_flash2+0x24c>)
    3616:	47a0      	blx	r4
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    3618:	2301      	movs	r3, #1
    361a:	2200      	movs	r2, #0
    361c:	2103      	movs	r1, #3
    361e:	2000      	movs	r0, #0
    3620:	4c31      	ldr	r4, [pc, #196]	; (36e8 <flashy_flash2+0x24c>)
    3622:	47a0      	blx	r4
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    3624:	2301      	movs	r3, #1
    3626:	2200      	movs	r2, #0
    3628:	2104      	movs	r1, #4
    362a:	2000      	movs	r0, #0
    362c:	4c2e      	ldr	r4, [pc, #184]	; (36e8 <flashy_flash2+0x24c>)
    362e:	47a0      	blx	r4
			state++;
    3630:	4b2a      	ldr	r3, [pc, #168]	; (36dc <flashy_flash2+0x240>)
    3632:	781b      	ldrb	r3, [r3, #0]
    3634:	3301      	adds	r3, #1
    3636:	b2da      	uxtb	r2, r3
    3638:	4b28      	ldr	r3, [pc, #160]	; (36dc <flashy_flash2+0x240>)
    363a:	701a      	strb	r2, [r3, #0]
			break;
    363c:	e04b      	b.n	36d6 <flashy_flash2+0x23a>
		case 9:
			configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    363e:	2300      	movs	r3, #0
    3640:	2203      	movs	r2, #3
    3642:	2101      	movs	r1, #1
    3644:	2000      	movs	r0, #0
    3646:	4c28      	ldr	r4, [pc, #160]	; (36e8 <flashy_flash2+0x24c>)
    3648:	47a0      	blx	r4
			configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    364a:	2300      	movs	r3, #0
    364c:	2203      	movs	r2, #3
    364e:	2102      	movs	r1, #2
    3650:	2000      	movs	r0, #0
    3652:	4c25      	ldr	r4, [pc, #148]	; (36e8 <flashy_flash2+0x24c>)
    3654:	47a0      	blx	r4
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    3656:	2301      	movs	r3, #1
    3658:	2201      	movs	r2, #1
    365a:	2101      	movs	r1, #1
    365c:	2000      	movs	r0, #0
    365e:	4c22      	ldr	r4, [pc, #136]	; (36e8 <flashy_flash2+0x24c>)
    3660:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    3662:	2301      	movs	r3, #1
    3664:	2201      	movs	r2, #1
    3666:	2102      	movs	r1, #2
    3668:	2000      	movs	r0, #0
    366a:	4c1f      	ldr	r4, [pc, #124]	; (36e8 <flashy_flash2+0x24c>)
    366c:	47a0      	blx	r4
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    366e:	2300      	movs	r3, #0
    3670:	2200      	movs	r2, #0
    3672:	2103      	movs	r1, #3
    3674:	2000      	movs	r0, #0
    3676:	4c1c      	ldr	r4, [pc, #112]	; (36e8 <flashy_flash2+0x24c>)
    3678:	47a0      	blx	r4
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    367a:	2300      	movs	r3, #0
    367c:	2200      	movs	r2, #0
    367e:	2104      	movs	r1, #4
    3680:	2000      	movs	r0, #0
    3682:	4c19      	ldr	r4, [pc, #100]	; (36e8 <flashy_flash2+0x24c>)
    3684:	47a0      	blx	r4
			state++;
    3686:	4b15      	ldr	r3, [pc, #84]	; (36dc <flashy_flash2+0x240>)
    3688:	781b      	ldrb	r3, [r3, #0]
    368a:	3301      	adds	r3, #1
    368c:	b2da      	uxtb	r2, r3
    368e:	4b13      	ldr	r3, [pc, #76]	; (36dc <flashy_flash2+0x240>)
    3690:	701a      	strb	r2, [r3, #0]
			break;
    3692:	e020      	b.n	36d6 <flashy_flash2+0x23a>
		case 10:
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    3694:	2300      	movs	r3, #0
    3696:	2201      	movs	r2, #1
    3698:	2101      	movs	r1, #1
    369a:	2000      	movs	r0, #0
    369c:	4c12      	ldr	r4, [pc, #72]	; (36e8 <flashy_flash2+0x24c>)
    369e:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    36a0:	2300      	movs	r3, #0
    36a2:	2201      	movs	r2, #1
    36a4:	2102      	movs	r1, #2
    36a6:	2000      	movs	r0, #0
    36a8:	4c0f      	ldr	r4, [pc, #60]	; (36e8 <flashy_flash2+0x24c>)
    36aa:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    36ac:	2301      	movs	r3, #1
    36ae:	2202      	movs	r2, #2
    36b0:	2101      	movs	r1, #1
    36b2:	2000      	movs	r0, #0
    36b4:	4c0c      	ldr	r4, [pc, #48]	; (36e8 <flashy_flash2+0x24c>)
    36b6:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    36b8:	2301      	movs	r3, #1
    36ba:	2202      	movs	r2, #2
    36bc:	2102      	movs	r1, #2
    36be:	2000      	movs	r0, #0
    36c0:	4c09      	ldr	r4, [pc, #36]	; (36e8 <flashy_flash2+0x24c>)
    36c2:	47a0      	blx	r4
			state = 0;
    36c4:	4b05      	ldr	r3, [pc, #20]	; (36dc <flashy_flash2+0x240>)
    36c6:	2200      	movs	r2, #0
    36c8:	701a      	strb	r2, [r3, #0]
			break;
    36ca:	e004      	b.n	36d6 <flashy_flash2+0x23a>
		default:
			reset_all_lights();
    36cc:	4b05      	ldr	r3, [pc, #20]	; (36e4 <flashy_flash2+0x248>)
    36ce:	4798      	blx	r3
			state = 0;
    36d0:	4b02      	ldr	r3, [pc, #8]	; (36dc <flashy_flash2+0x240>)
    36d2:	2200      	movs	r2, #0
    36d4:	701a      	strb	r2, [r3, #0]
	}
}
    36d6:	46c0      	nop			; (mov r8, r8)
    36d8:	46bd      	mov	sp, r7
    36da:	bdb0      	pop	{r4, r5, r7, pc}
    36dc:	20000289 	.word	0x20000289
    36e0:	000099f0 	.word	0x000099f0
    36e4:	00003885 	.word	0x00003885
    36e8:	00003afd 	.word	0x00003afd

000036ec <flashy_fades>:

void flashy_fades()
{
    36ec:	b5b0      	push	{r4, r5, r7, lr}
    36ee:	af00      	add	r7, sp, #0
	//static uint8_t pwm_val = 0;
	static uint8_t duty_cycle = PWM_FREQ/4;
	
	if (pwm_count > duty_cycle)
    36f0:	4b61      	ldr	r3, [pc, #388]	; (3878 <flashy_fades+0x18c>)
    36f2:	781b      	ldrb	r3, [r3, #0]
    36f4:	001a      	movs	r2, r3
    36f6:	4b61      	ldr	r3, [pc, #388]	; (387c <flashy_fades+0x190>)
    36f8:	681b      	ldr	r3, [r3, #0]
    36fa:	429a      	cmp	r2, r3
    36fc:	da54      	bge.n	37a8 <flashy_fades+0xbc>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    36fe:	2301      	movs	r3, #1
    3700:	2200      	movs	r2, #0
    3702:	2101      	movs	r1, #1
    3704:	2000      	movs	r0, #0
    3706:	4c5e      	ldr	r4, [pc, #376]	; (3880 <flashy_fades+0x194>)
    3708:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    370a:	2301      	movs	r3, #1
    370c:	2200      	movs	r2, #0
    370e:	2102      	movs	r1, #2
    3710:	2000      	movs	r0, #0
    3712:	4c5b      	ldr	r4, [pc, #364]	; (3880 <flashy_fades+0x194>)
    3714:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    3716:	2301      	movs	r3, #1
    3718:	2200      	movs	r2, #0
    371a:	2103      	movs	r1, #3
    371c:	2000      	movs	r0, #0
    371e:	4c58      	ldr	r4, [pc, #352]	; (3880 <flashy_fades+0x194>)
    3720:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    3722:	2301      	movs	r3, #1
    3724:	2200      	movs	r2, #0
    3726:	2104      	movs	r1, #4
    3728:	2000      	movs	r0, #0
    372a:	4c55      	ldr	r4, [pc, #340]	; (3880 <flashy_fades+0x194>)
    372c:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    372e:	2301      	movs	r3, #1
    3730:	2201      	movs	r2, #1
    3732:	2102      	movs	r1, #2
    3734:	2000      	movs	r0, #0
    3736:	4c52      	ldr	r4, [pc, #328]	; (3880 <flashy_fades+0x194>)
    3738:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    373a:	2301      	movs	r3, #1
    373c:	2201      	movs	r2, #1
    373e:	2101      	movs	r1, #1
    3740:	2000      	movs	r0, #0
    3742:	4c4f      	ldr	r4, [pc, #316]	; (3880 <flashy_fades+0x194>)
    3744:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    3746:	2301      	movs	r3, #1
    3748:	2202      	movs	r2, #2
    374a:	2102      	movs	r1, #2
    374c:	2000      	movs	r0, #0
    374e:	4c4c      	ldr	r4, [pc, #304]	; (3880 <flashy_fades+0x194>)
    3750:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    3752:	2301      	movs	r3, #1
    3754:	2202      	movs	r2, #2
    3756:	2101      	movs	r1, #1
    3758:	2000      	movs	r0, #0
    375a:	4c49      	ldr	r4, [pc, #292]	; (3880 <flashy_fades+0x194>)
    375c:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    375e:	2301      	movs	r3, #1
    3760:	2202      	movs	r2, #2
    3762:	2104      	movs	r1, #4
    3764:	2000      	movs	r0, #0
    3766:	4c46      	ldr	r4, [pc, #280]	; (3880 <flashy_fades+0x194>)
    3768:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    376a:	2301      	movs	r3, #1
    376c:	2202      	movs	r2, #2
    376e:	2103      	movs	r1, #3
    3770:	2000      	movs	r0, #0
    3772:	4c43      	ldr	r4, [pc, #268]	; (3880 <flashy_fades+0x194>)
    3774:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    3776:	2301      	movs	r3, #1
    3778:	2201      	movs	r2, #1
    377a:	2103      	movs	r1, #3
    377c:	2000      	movs	r0, #0
    377e:	4c40      	ldr	r4, [pc, #256]	; (3880 <flashy_fades+0x194>)
    3780:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    3782:	2301      	movs	r3, #1
    3784:	2201      	movs	r2, #1
    3786:	2104      	movs	r1, #4
    3788:	2000      	movs	r0, #0
    378a:	4c3d      	ldr	r4, [pc, #244]	; (3880 <flashy_fades+0x194>)
    378c:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    378e:	2301      	movs	r3, #1
    3790:	2203      	movs	r2, #3
    3792:	2102      	movs	r1, #2
    3794:	2000      	movs	r0, #0
    3796:	4c3a      	ldr	r4, [pc, #232]	; (3880 <flashy_fades+0x194>)
    3798:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    379a:	2301      	movs	r3, #1
    379c:	2203      	movs	r2, #3
    379e:	2101      	movs	r1, #1
    37a0:	2000      	movs	r0, #0
    37a2:	4c37      	ldr	r4, [pc, #220]	; (3880 <flashy_fades+0x194>)
    37a4:	47a0      	blx	r4
    37a6:	e053      	b.n	3850 <flashy_fades+0x164>
	}
	else
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,false);
    37a8:	2300      	movs	r3, #0
    37aa:	2200      	movs	r2, #0
    37ac:	2101      	movs	r1, #1
    37ae:	2000      	movs	r0, #0
    37b0:	4c33      	ldr	r4, [pc, #204]	; (3880 <flashy_fades+0x194>)
    37b2:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,false);
    37b4:	2300      	movs	r3, #0
    37b6:	2200      	movs	r2, #0
    37b8:	2102      	movs	r1, #2
    37ba:	2000      	movs	r0, #0
    37bc:	4c30      	ldr	r4, [pc, #192]	; (3880 <flashy_fades+0x194>)
    37be:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    37c0:	2300      	movs	r3, #0
    37c2:	2200      	movs	r2, #0
    37c4:	2103      	movs	r1, #3
    37c6:	2000      	movs	r0, #0
    37c8:	4c2d      	ldr	r4, [pc, #180]	; (3880 <flashy_fades+0x194>)
    37ca:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    37cc:	2300      	movs	r3, #0
    37ce:	2200      	movs	r2, #0
    37d0:	2104      	movs	r1, #4
    37d2:	2000      	movs	r0, #0
    37d4:	4c2a      	ldr	r4, [pc, #168]	; (3880 <flashy_fades+0x194>)
    37d6:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    37d8:	2300      	movs	r3, #0
    37da:	2201      	movs	r2, #1
    37dc:	2102      	movs	r1, #2
    37de:	2000      	movs	r0, #0
    37e0:	4c27      	ldr	r4, [pc, #156]	; (3880 <flashy_fades+0x194>)
    37e2:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    37e4:	2300      	movs	r3, #0
    37e6:	2201      	movs	r2, #1
    37e8:	2101      	movs	r1, #1
    37ea:	2000      	movs	r0, #0
    37ec:	4c24      	ldr	r4, [pc, #144]	; (3880 <flashy_fades+0x194>)
    37ee:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    37f0:	2300      	movs	r3, #0
    37f2:	2202      	movs	r2, #2
    37f4:	2102      	movs	r1, #2
    37f6:	2000      	movs	r0, #0
    37f8:	4c21      	ldr	r4, [pc, #132]	; (3880 <flashy_fades+0x194>)
    37fa:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    37fc:	2300      	movs	r3, #0
    37fe:	2202      	movs	r2, #2
    3800:	2101      	movs	r1, #1
    3802:	2000      	movs	r0, #0
    3804:	4c1e      	ldr	r4, [pc, #120]	; (3880 <flashy_fades+0x194>)
    3806:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,false);
    3808:	2300      	movs	r3, #0
    380a:	2202      	movs	r2, #2
    380c:	2104      	movs	r1, #4
    380e:	2000      	movs	r0, #0
    3810:	4c1b      	ldr	r4, [pc, #108]	; (3880 <flashy_fades+0x194>)
    3812:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,false);
    3814:	2300      	movs	r3, #0
    3816:	2202      	movs	r2, #2
    3818:	2103      	movs	r1, #3
    381a:	2000      	movs	r0, #0
    381c:	4c18      	ldr	r4, [pc, #96]	; (3880 <flashy_fades+0x194>)
    381e:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    3820:	2300      	movs	r3, #0
    3822:	2201      	movs	r2, #1
    3824:	2103      	movs	r1, #3
    3826:	2000      	movs	r0, #0
    3828:	4c15      	ldr	r4, [pc, #84]	; (3880 <flashy_fades+0x194>)
    382a:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    382c:	2300      	movs	r3, #0
    382e:	2201      	movs	r2, #1
    3830:	2104      	movs	r1, #4
    3832:	2000      	movs	r0, #0
    3834:	4c12      	ldr	r4, [pc, #72]	; (3880 <flashy_fades+0x194>)
    3836:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    3838:	2300      	movs	r3, #0
    383a:	2203      	movs	r2, #3
    383c:	2102      	movs	r1, #2
    383e:	2000      	movs	r0, #0
    3840:	4c0f      	ldr	r4, [pc, #60]	; (3880 <flashy_fades+0x194>)
    3842:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    3844:	2300      	movs	r3, #0
    3846:	2203      	movs	r2, #3
    3848:	2101      	movs	r1, #1
    384a:	2000      	movs	r0, #0
    384c:	4c0c      	ldr	r4, [pc, #48]	; (3880 <flashy_fades+0x194>)
    384e:	47a0      	blx	r4
	}
	
	//pwm_val++;
	if (pwm_count >= PWM_FREQ)
    3850:	4b0a      	ldr	r3, [pc, #40]	; (387c <flashy_fades+0x190>)
    3852:	681b      	ldr	r3, [r3, #0]
    3854:	2bc7      	cmp	r3, #199	; 0xc7
    3856:	dd0c      	ble.n	3872 <flashy_fades+0x186>
	{
		//pwm_val = 0;
		duty_cycle += PWM_FREQ/10;
    3858:	4b07      	ldr	r3, [pc, #28]	; (3878 <flashy_fades+0x18c>)
    385a:	781b      	ldrb	r3, [r3, #0]
    385c:	3314      	adds	r3, #20
    385e:	b2da      	uxtb	r2, r3
    3860:	4b05      	ldr	r3, [pc, #20]	; (3878 <flashy_fades+0x18c>)
    3862:	701a      	strb	r2, [r3, #0]
		if (duty_cycle >= PWM_FREQ)
    3864:	4b04      	ldr	r3, [pc, #16]	; (3878 <flashy_fades+0x18c>)
    3866:	781b      	ldrb	r3, [r3, #0]
    3868:	2bc7      	cmp	r3, #199	; 0xc7
    386a:	d902      	bls.n	3872 <flashy_fades+0x186>
		{
			duty_cycle = PWM_FREQ/4;
    386c:	4b02      	ldr	r3, [pc, #8]	; (3878 <flashy_fades+0x18c>)
    386e:	2232      	movs	r2, #50	; 0x32
    3870:	701a      	strb	r2, [r3, #0]
		}
	}
	
}
    3872:	46c0      	nop			; (mov r8, r8)
    3874:	46bd      	mov	sp, r7
    3876:	bdb0      	pop	{r4, r5, r7, pc}
    3878:	20000090 	.word	0x20000090
    387c:	20000478 	.word	0x20000478
    3880:	00003afd 	.word	0x00003afd

00003884 <reset_all_lights>:

void reset_all_lights()
{
    3884:	b580      	push	{r7, lr}
    3886:	b082      	sub	sp, #8
    3888:	af00      	add	r7, sp, #0
	for (int i=0;i<8;i++)
    388a:	2300      	movs	r3, #0
    388c:	607b      	str	r3, [r7, #4]
    388e:	e010      	b.n	38b2 <reset_all_lights+0x2e>
	{
		mcp23017_data.devices[i].outputs.ports[0] = 0x80;
    3890:	4a0b      	ldr	r2, [pc, #44]	; (38c0 <reset_all_lights+0x3c>)
    3892:	687b      	ldr	r3, [r7, #4]
    3894:	011b      	lsls	r3, r3, #4
    3896:	18d3      	adds	r3, r2, r3
    3898:	3308      	adds	r3, #8
    389a:	2280      	movs	r2, #128	; 0x80
    389c:	701a      	strb	r2, [r3, #0]
		mcp23017_data.devices[i].outputs.ports[1] = 0x80;
    389e:	4a08      	ldr	r2, [pc, #32]	; (38c0 <reset_all_lights+0x3c>)
    38a0:	687b      	ldr	r3, [r7, #4]
    38a2:	011b      	lsls	r3, r3, #4
    38a4:	18d3      	adds	r3, r2, r3
    38a6:	3309      	adds	r3, #9
    38a8:	2280      	movs	r2, #128	; 0x80
    38aa:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
    38ac:	687b      	ldr	r3, [r7, #4]
    38ae:	3301      	adds	r3, #1
    38b0:	607b      	str	r3, [r7, #4]
    38b2:	687b      	ldr	r3, [r7, #4]
    38b4:	2b07      	cmp	r3, #7
    38b6:	ddeb      	ble.n	3890 <reset_all_lights+0xc>
	}
}
    38b8:	46c0      	nop			; (mov r8, r8)
    38ba:	46bd      	mov	sp, r7
    38bc:	b002      	add	sp, #8
    38be:	bd80      	pop	{r7, pc}
    38c0:	20000010 	.word	0x20000010

000038c4 <a_okay>:

bool a_okay()
{
    38c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    38c6:	46ce      	mov	lr, r9
    38c8:	4647      	mov	r7, r8
    38ca:	b580      	push	{r7, lr}
    38cc:	b095      	sub	sp, #84	; 0x54
    38ce:	af06      	add	r7, sp, #24
	char buffer[32];
	uint8_t states[8];
	mcp23017_read_all_ports(read_data,states);
    38d0:	2308      	movs	r3, #8
    38d2:	18fa      	adds	r2, r7, r3
    38d4:	4b81      	ldr	r3, [pc, #516]	; (3adc <a_okay+0x218>)
    38d6:	0011      	movs	r1, r2
    38d8:	0018      	movs	r0, r3
    38da:	4b81      	ldr	r3, [pc, #516]	; (3ae0 <a_okay+0x21c>)
    38dc:	4798      	blx	r3
	
	bool return_val = true;
    38de:	232f      	movs	r3, #47	; 0x2f
    38e0:	2208      	movs	r2, #8
    38e2:	4694      	mov	ip, r2
    38e4:	44bc      	add	ip, r7
    38e6:	4463      	add	r3, ip
    38e8:	2201      	movs	r2, #1
    38ea:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
    38ec:	2300      	movs	r3, #0
    38ee:	633b      	str	r3, [r7, #48]	; 0x30
    38f0:	e0a2      	b.n	3a38 <a_okay+0x174>
	{
		if (mcp23017_data.devices[i].should_be_enabled)
    38f2:	4b7c      	ldr	r3, [pc, #496]	; (3ae4 <a_okay+0x220>)
    38f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    38f6:	0112      	lsls	r2, r2, #4
    38f8:	5cd3      	ldrb	r3, [r2, r3]
    38fa:	2b00      	cmp	r3, #0
    38fc:	d06e      	beq.n	39dc <a_okay+0x118>
		{
			mcp23017_data.devices[i].output_errors.ports[0] = mcp23017_data.devices[i].outputs.ports[0] - read_data[0][i];
    38fe:	4a79      	ldr	r2, [pc, #484]	; (3ae4 <a_okay+0x220>)
    3900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3902:	011b      	lsls	r3, r3, #4
    3904:	18d3      	adds	r3, r2, r3
    3906:	3308      	adds	r3, #8
    3908:	781a      	ldrb	r2, [r3, #0]
    390a:	4974      	ldr	r1, [pc, #464]	; (3adc <a_okay+0x218>)
    390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    390e:	18cb      	adds	r3, r1, r3
    3910:	781b      	ldrb	r3, [r3, #0]
    3912:	1ad3      	subs	r3, r2, r3
    3914:	b2d9      	uxtb	r1, r3
    3916:	4a73      	ldr	r2, [pc, #460]	; (3ae4 <a_okay+0x220>)
    3918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    391a:	011b      	lsls	r3, r3, #4
    391c:	18d3      	adds	r3, r2, r3
    391e:	330c      	adds	r3, #12
    3920:	1c0a      	adds	r2, r1, #0
    3922:	701a      	strb	r2, [r3, #0]
			mcp23017_data.devices[i].output_errors.ports[1] = mcp23017_data.devices[i].outputs.ports[1] - read_data[1][i];
    3924:	4a6f      	ldr	r2, [pc, #444]	; (3ae4 <a_okay+0x220>)
    3926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3928:	011b      	lsls	r3, r3, #4
    392a:	18d3      	adds	r3, r2, r3
    392c:	3309      	adds	r3, #9
    392e:	781a      	ldrb	r2, [r3, #0]
    3930:	496a      	ldr	r1, [pc, #424]	; (3adc <a_okay+0x218>)
    3932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3934:	18cb      	adds	r3, r1, r3
    3936:	3308      	adds	r3, #8
    3938:	781b      	ldrb	r3, [r3, #0]
    393a:	1ad3      	subs	r3, r2, r3
    393c:	b2d9      	uxtb	r1, r3
    393e:	4a69      	ldr	r2, [pc, #420]	; (3ae4 <a_okay+0x220>)
    3940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3942:	011b      	lsls	r3, r3, #4
    3944:	18d3      	adds	r3, r2, r3
    3946:	330d      	adds	r3, #13
    3948:	1c0a      	adds	r2, r1, #0
    394a:	701a      	strb	r2, [r3, #0]
			
			if ((mcp23017_data.devices[i].output_errors.ports[0] + mcp23017_data.devices[i].output_errors.ports[1]) > 0)
    394c:	4a65      	ldr	r2, [pc, #404]	; (3ae4 <a_okay+0x220>)
    394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3950:	011b      	lsls	r3, r3, #4
    3952:	18d3      	adds	r3, r2, r3
    3954:	330c      	adds	r3, #12
    3956:	781b      	ldrb	r3, [r3, #0]
    3958:	0019      	movs	r1, r3
    395a:	4a62      	ldr	r2, [pc, #392]	; (3ae4 <a_okay+0x220>)
    395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    395e:	011b      	lsls	r3, r3, #4
    3960:	18d3      	adds	r3, r2, r3
    3962:	330d      	adds	r3, #13
    3964:	781b      	ldrb	r3, [r3, #0]
    3966:	18cb      	adds	r3, r1, r3
    3968:	2b00      	cmp	r3, #0
    396a:	dd06      	ble.n	397a <a_okay+0xb6>
			{
				mcp23017_data.devices[i].error_detected = true;
    396c:	4a5d      	ldr	r2, [pc, #372]	; (3ae4 <a_okay+0x220>)
    396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3970:	011b      	lsls	r3, r3, #4
    3972:	18d3      	adds	r3, r2, r3
    3974:	3302      	adds	r3, #2
    3976:	2201      	movs	r2, #1
    3978:	701a      	strb	r2, [r3, #0]
			}
			
			if ((read_data[0][i] & ~0x80) != (mcp23017_data.devices[i].outputs.ports[0] & ~0x80))
    397a:	4a58      	ldr	r2, [pc, #352]	; (3adc <a_okay+0x218>)
    397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    397e:	18d3      	adds	r3, r2, r3
    3980:	781a      	ldrb	r2, [r3, #0]
    3982:	4958      	ldr	r1, [pc, #352]	; (3ae4 <a_okay+0x220>)
    3984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3986:	011b      	lsls	r3, r3, #4
    3988:	18cb      	adds	r3, r1, r3
    398a:	3308      	adds	r3, #8
    398c:	781b      	ldrb	r3, [r3, #0]
    398e:	4053      	eors	r3, r2
    3990:	b2db      	uxtb	r3, r3
    3992:	001a      	movs	r2, r3
    3994:	2380      	movs	r3, #128	; 0x80
    3996:	439a      	bics	r2, r3
    3998:	1e13      	subs	r3, r2, #0
    399a:	d006      	beq.n	39aa <a_okay+0xe6>
			{
				return_val = false;
    399c:	232f      	movs	r3, #47	; 0x2f
    399e:	2208      	movs	r2, #8
    39a0:	4694      	mov	ip, r2
    39a2:	44bc      	add	ip, r7
    39a4:	4463      	add	r3, ip
    39a6:	2200      	movs	r2, #0
    39a8:	701a      	strb	r2, [r3, #0]
			}
			if ((read_data[1][i] & ~0x80) != (mcp23017_data.devices[i].outputs.ports[1] & ~0x80))
    39aa:	4a4c      	ldr	r2, [pc, #304]	; (3adc <a_okay+0x218>)
    39ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39ae:	18d3      	adds	r3, r2, r3
    39b0:	3308      	adds	r3, #8
    39b2:	781a      	ldrb	r2, [r3, #0]
    39b4:	494b      	ldr	r1, [pc, #300]	; (3ae4 <a_okay+0x220>)
    39b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39b8:	011b      	lsls	r3, r3, #4
    39ba:	18cb      	adds	r3, r1, r3
    39bc:	3309      	adds	r3, #9
    39be:	781b      	ldrb	r3, [r3, #0]
    39c0:	4053      	eors	r3, r2
    39c2:	b2db      	uxtb	r3, r3
    39c4:	001a      	movs	r2, r3
    39c6:	2380      	movs	r3, #128	; 0x80
    39c8:	439a      	bics	r2, r3
    39ca:	1e13      	subs	r3, r2, #0
    39cc:	d006      	beq.n	39dc <a_okay+0x118>
			{
				return_val = false;
    39ce:	232f      	movs	r3, #47	; 0x2f
    39d0:	2208      	movs	r2, #8
    39d2:	4694      	mov	ip, r2
    39d4:	44bc      	add	ip, r7
    39d6:	4463      	add	r3, ip
    39d8:	2200      	movs	r2, #0
    39da:	701a      	strb	r2, [r3, #0]
			}
		}
		mcp23017_data.devices[i].status = states[i];
    39dc:	2308      	movs	r3, #8
    39de:	18fa      	adds	r2, r7, r3
    39e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39e2:	18d3      	adds	r3, r2, r3
    39e4:	7819      	ldrb	r1, [r3, #0]
    39e6:	4a3f      	ldr	r2, [pc, #252]	; (3ae4 <a_okay+0x220>)
    39e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39ea:	011b      	lsls	r3, r3, #4
    39ec:	18d3      	adds	r3, r2, r3
    39ee:	3303      	adds	r3, #3
    39f0:	1c0a      	adds	r2, r1, #0
    39f2:	701a      	strb	r2, [r3, #0]
		sprintf(buffer,"ADDR: %d -> %d\n",i,mcp23017_data.devices[i].status);
    39f4:	4a3b      	ldr	r2, [pc, #236]	; (3ae4 <a_okay+0x220>)
    39f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39f8:	011b      	lsls	r3, r3, #4
    39fa:	18d3      	adds	r3, r2, r3
    39fc:	3303      	adds	r3, #3
    39fe:	781b      	ldrb	r3, [r3, #0]
    3a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3a02:	4939      	ldr	r1, [pc, #228]	; (3ae8 <a_okay+0x224>)
    3a04:	2008      	movs	r0, #8
    3a06:	2408      	movs	r4, #8
    3a08:	46a4      	mov	ip, r4
    3a0a:	44bc      	add	ip, r7
    3a0c:	4460      	add	r0, ip
    3a0e:	4c37      	ldr	r4, [pc, #220]	; (3aec <a_okay+0x228>)
    3a10:	47a0      	blx	r4
		ble_uart_write(buffer);
    3a12:	2308      	movs	r3, #8
    3a14:	2208      	movs	r2, #8
    3a16:	4694      	mov	ip, r2
    3a18:	44bc      	add	ip, r7
    3a1a:	4463      	add	r3, ip
    3a1c:	0018      	movs	r0, r3
    3a1e:	4b34      	ldr	r3, [pc, #208]	; (3af0 <a_okay+0x22c>)
    3a20:	4798      	blx	r3
		uart_write(buffer);
    3a22:	2308      	movs	r3, #8
    3a24:	2208      	movs	r2, #8
    3a26:	4694      	mov	ip, r2
    3a28:	44bc      	add	ip, r7
    3a2a:	4463      	add	r3, ip
    3a2c:	0018      	movs	r0, r3
    3a2e:	4b31      	ldr	r3, [pc, #196]	; (3af4 <a_okay+0x230>)
    3a30:	4798      	blx	r3
	for (int i=0;i<8;i++)
    3a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3a34:	3301      	adds	r3, #1
    3a36:	633b      	str	r3, [r7, #48]	; 0x30
    3a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3a3a:	2b07      	cmp	r3, #7
    3a3c:	dc00      	bgt.n	3a40 <a_okay+0x17c>
    3a3e:	e758      	b.n	38f2 <a_okay+0x2e>
	}
	sprintf(buffer,"ERR: %d%d%d%d%d%d%d%d\r\n",mcp23017_data.devices[7].error_detected,mcp23017_data.devices[6].error_detected,mcp23017_data.devices[5].error_detected,mcp23017_data.devices[4].error_detected,mcp23017_data.devices[3].error_detected,mcp23017_data.devices[2].error_detected,mcp23017_data.devices[1].error_detected,mcp23017_data.devices[0].error_detected);
    3a40:	4b28      	ldr	r3, [pc, #160]	; (3ae4 <a_okay+0x220>)
    3a42:	2272      	movs	r2, #114	; 0x72
    3a44:	5c9b      	ldrb	r3, [r3, r2]
    3a46:	607b      	str	r3, [r7, #4]
    3a48:	4b26      	ldr	r3, [pc, #152]	; (3ae4 <a_okay+0x220>)
    3a4a:	2262      	movs	r2, #98	; 0x62
    3a4c:	5c9b      	ldrb	r3, [r3, r2]
    3a4e:	603b      	str	r3, [r7, #0]
    3a50:	4b24      	ldr	r3, [pc, #144]	; (3ae4 <a_okay+0x220>)
    3a52:	2252      	movs	r2, #82	; 0x52
    3a54:	5c9b      	ldrb	r3, [r3, r2]
    3a56:	001c      	movs	r4, r3
    3a58:	4b22      	ldr	r3, [pc, #136]	; (3ae4 <a_okay+0x220>)
    3a5a:	2242      	movs	r2, #66	; 0x42
    3a5c:	5c9b      	ldrb	r3, [r3, r2]
    3a5e:	001d      	movs	r5, r3
    3a60:	4b20      	ldr	r3, [pc, #128]	; (3ae4 <a_okay+0x220>)
    3a62:	2232      	movs	r2, #50	; 0x32
    3a64:	5c9b      	ldrb	r3, [r3, r2]
    3a66:	001e      	movs	r6, r3
    3a68:	4b1e      	ldr	r3, [pc, #120]	; (3ae4 <a_okay+0x220>)
    3a6a:	2222      	movs	r2, #34	; 0x22
    3a6c:	5c9b      	ldrb	r3, [r3, r2]
    3a6e:	001a      	movs	r2, r3
    3a70:	4b1c      	ldr	r3, [pc, #112]	; (3ae4 <a_okay+0x220>)
    3a72:	7c9b      	ldrb	r3, [r3, #18]
    3a74:	469c      	mov	ip, r3
    3a76:	4b1b      	ldr	r3, [pc, #108]	; (3ae4 <a_okay+0x220>)
    3a78:	789b      	ldrb	r3, [r3, #2]
    3a7a:	4699      	mov	r9, r3
    3a7c:	491e      	ldr	r1, [pc, #120]	; (3af8 <a_okay+0x234>)
    3a7e:	2008      	movs	r0, #8
    3a80:	2308      	movs	r3, #8
    3a82:	4698      	mov	r8, r3
    3a84:	44b8      	add	r8, r7
    3a86:	4440      	add	r0, r8
    3a88:	464b      	mov	r3, r9
    3a8a:	9305      	str	r3, [sp, #20]
    3a8c:	4663      	mov	r3, ip
    3a8e:	9304      	str	r3, [sp, #16]
    3a90:	9203      	str	r2, [sp, #12]
    3a92:	9602      	str	r6, [sp, #8]
    3a94:	9501      	str	r5, [sp, #4]
    3a96:	9400      	str	r4, [sp, #0]
    3a98:	683b      	ldr	r3, [r7, #0]
    3a9a:	687a      	ldr	r2, [r7, #4]
    3a9c:	4c13      	ldr	r4, [pc, #76]	; (3aec <a_okay+0x228>)
    3a9e:	47a0      	blx	r4
	ble_uart_write(buffer);
    3aa0:	2308      	movs	r3, #8
    3aa2:	2208      	movs	r2, #8
    3aa4:	4694      	mov	ip, r2
    3aa6:	44bc      	add	ip, r7
    3aa8:	4463      	add	r3, ip
    3aaa:	0018      	movs	r0, r3
    3aac:	4b10      	ldr	r3, [pc, #64]	; (3af0 <a_okay+0x22c>)
    3aae:	4798      	blx	r3
	uart_write(buffer);
    3ab0:	2308      	movs	r3, #8
    3ab2:	2208      	movs	r2, #8
    3ab4:	4694      	mov	ip, r2
    3ab6:	44bc      	add	ip, r7
    3ab8:	4463      	add	r3, ip
    3aba:	0018      	movs	r0, r3
    3abc:	4b0d      	ldr	r3, [pc, #52]	; (3af4 <a_okay+0x230>)
    3abe:	4798      	blx	r3
	
	return return_val;
    3ac0:	232f      	movs	r3, #47	; 0x2f
    3ac2:	2208      	movs	r2, #8
    3ac4:	4694      	mov	ip, r2
    3ac6:	44bc      	add	ip, r7
    3ac8:	4463      	add	r3, ip
    3aca:	781b      	ldrb	r3, [r3, #0]
}
    3acc:	0018      	movs	r0, r3
    3ace:	46bd      	mov	sp, r7
    3ad0:	b00f      	add	sp, #60	; 0x3c
    3ad2:	bc0c      	pop	{r2, r3}
    3ad4:	4690      	mov	r8, r2
    3ad6:	4699      	mov	r9, r3
    3ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ada:	46c0      	nop			; (mov r8, r8)
    3adc:	200003b0 	.word	0x200003b0
    3ae0:	00004151 	.word	0x00004151
    3ae4:	20000010 	.word	0x20000010
    3ae8:	00009978 	.word	0x00009978
    3aec:	00008245 	.word	0x00008245
    3af0:	00002025 	.word	0x00002025
    3af4:	000050b1 	.word	0x000050b1
    3af8:	00009988 	.word	0x00009988

00003afc <configure_pin>:

void configure_pin(uint8_t port, uint8_t addr, uint8_t pin, bool value)
{
    3afc:	b5b0      	push	{r4, r5, r7, lr}
    3afe:	b082      	sub	sp, #8
    3b00:	af00      	add	r7, sp, #0
    3b02:	0005      	movs	r5, r0
    3b04:	000c      	movs	r4, r1
    3b06:	0010      	movs	r0, r2
    3b08:	0019      	movs	r1, r3
    3b0a:	1dfb      	adds	r3, r7, #7
    3b0c:	1c2a      	adds	r2, r5, #0
    3b0e:	701a      	strb	r2, [r3, #0]
    3b10:	1dbb      	adds	r3, r7, #6
    3b12:	1c22      	adds	r2, r4, #0
    3b14:	701a      	strb	r2, [r3, #0]
    3b16:	1d7b      	adds	r3, r7, #5
    3b18:	1c02      	adds	r2, r0, #0
    3b1a:	701a      	strb	r2, [r3, #0]
    3b1c:	1d3b      	adds	r3, r7, #4
    3b1e:	1c0a      	adds	r2, r1, #0
    3b20:	701a      	strb	r2, [r3, #0]
	if(value)
    3b22:	1d3b      	adds	r3, r7, #4
    3b24:	781b      	ldrb	r3, [r3, #0]
    3b26:	2b00      	cmp	r3, #0
    3b28:	d01f      	beq.n	3b6a <configure_pin+0x6e>
	{
		mcp23017_data.devices[addr].outputs.ports[port] |= (1 << pin);
    3b2a:	1dbb      	adds	r3, r7, #6
    3b2c:	781a      	ldrb	r2, [r3, #0]
    3b2e:	1dfb      	adds	r3, r7, #7
    3b30:	781b      	ldrb	r3, [r3, #0]
    3b32:	1db9      	adds	r1, r7, #6
    3b34:	7808      	ldrb	r0, [r1, #0]
    3b36:	1df9      	adds	r1, r7, #7
    3b38:	7809      	ldrb	r1, [r1, #0]
    3b3a:	4c1e      	ldr	r4, [pc, #120]	; (3bb4 <configure_pin+0xb8>)
    3b3c:	0100      	lsls	r0, r0, #4
    3b3e:	1820      	adds	r0, r4, r0
    3b40:	1841      	adds	r1, r0, r1
    3b42:	3108      	adds	r1, #8
    3b44:	7809      	ldrb	r1, [r1, #0]
    3b46:	b248      	sxtb	r0, r1
    3b48:	1d79      	adds	r1, r7, #5
    3b4a:	7809      	ldrb	r1, [r1, #0]
    3b4c:	2401      	movs	r4, #1
    3b4e:	408c      	lsls	r4, r1
    3b50:	0021      	movs	r1, r4
    3b52:	b249      	sxtb	r1, r1
    3b54:	4301      	orrs	r1, r0
    3b56:	b249      	sxtb	r1, r1
    3b58:	b2c8      	uxtb	r0, r1
    3b5a:	4916      	ldr	r1, [pc, #88]	; (3bb4 <configure_pin+0xb8>)
    3b5c:	0112      	lsls	r2, r2, #4
    3b5e:	188a      	adds	r2, r1, r2
    3b60:	18d3      	adds	r3, r2, r3
    3b62:	3308      	adds	r3, #8
    3b64:	1c02      	adds	r2, r0, #0
    3b66:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		mcp23017_data.devices[addr].outputs.ports[port] &= ~(1 << pin);
	}
}
    3b68:	e020      	b.n	3bac <configure_pin+0xb0>
		mcp23017_data.devices[addr].outputs.ports[port] &= ~(1 << pin);
    3b6a:	1dbb      	adds	r3, r7, #6
    3b6c:	781a      	ldrb	r2, [r3, #0]
    3b6e:	1dfb      	adds	r3, r7, #7
    3b70:	781b      	ldrb	r3, [r3, #0]
    3b72:	1db9      	adds	r1, r7, #6
    3b74:	7808      	ldrb	r0, [r1, #0]
    3b76:	1df9      	adds	r1, r7, #7
    3b78:	7809      	ldrb	r1, [r1, #0]
    3b7a:	4c0e      	ldr	r4, [pc, #56]	; (3bb4 <configure_pin+0xb8>)
    3b7c:	0100      	lsls	r0, r0, #4
    3b7e:	1820      	adds	r0, r4, r0
    3b80:	1841      	adds	r1, r0, r1
    3b82:	3108      	adds	r1, #8
    3b84:	7809      	ldrb	r1, [r1, #0]
    3b86:	b249      	sxtb	r1, r1
    3b88:	1d78      	adds	r0, r7, #5
    3b8a:	7800      	ldrb	r0, [r0, #0]
    3b8c:	2401      	movs	r4, #1
    3b8e:	4084      	lsls	r4, r0
    3b90:	0020      	movs	r0, r4
    3b92:	b240      	sxtb	r0, r0
    3b94:	43c0      	mvns	r0, r0
    3b96:	b240      	sxtb	r0, r0
    3b98:	4001      	ands	r1, r0
    3b9a:	b249      	sxtb	r1, r1
    3b9c:	b2c8      	uxtb	r0, r1
    3b9e:	4905      	ldr	r1, [pc, #20]	; (3bb4 <configure_pin+0xb8>)
    3ba0:	0112      	lsls	r2, r2, #4
    3ba2:	188a      	adds	r2, r1, r2
    3ba4:	18d3      	adds	r3, r2, r3
    3ba6:	3308      	adds	r3, #8
    3ba8:	1c02      	adds	r2, r0, #0
    3baa:	701a      	strb	r2, [r3, #0]
}
    3bac:	46c0      	nop			; (mov r8, r8)
    3bae:	46bd      	mov	sp, r7
    3bb0:	b002      	add	sp, #8
    3bb2:	bdb0      	pop	{r4, r5, r7, pc}
    3bb4:	20000010 	.word	0x20000010

00003bb8 <i2c_master_is_syncing>:
{
    3bb8:	b580      	push	{r7, lr}
    3bba:	b084      	sub	sp, #16
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3bc0:	687b      	ldr	r3, [r7, #4]
    3bc2:	681b      	ldr	r3, [r3, #0]
    3bc4:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3bc6:	68fb      	ldr	r3, [r7, #12]
    3bc8:	69db      	ldr	r3, [r3, #28]
    3bca:	2207      	movs	r2, #7
    3bcc:	4013      	ands	r3, r2
    3bce:	1e5a      	subs	r2, r3, #1
    3bd0:	4193      	sbcs	r3, r2
    3bd2:	b2db      	uxtb	r3, r3
}
    3bd4:	0018      	movs	r0, r3
    3bd6:	46bd      	mov	sp, r7
    3bd8:	b004      	add	sp, #16
    3bda:	bd80      	pop	{r7, pc}

00003bdc <_i2c_master_wait_for_sync>:
{
    3bdc:	b580      	push	{r7, lr}
    3bde:	b082      	sub	sp, #8
    3be0:	af00      	add	r7, sp, #0
    3be2:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    3be4:	46c0      	nop			; (mov r8, r8)
    3be6:	687b      	ldr	r3, [r7, #4]
    3be8:	0018      	movs	r0, r3
    3bea:	4b04      	ldr	r3, [pc, #16]	; (3bfc <_i2c_master_wait_for_sync+0x20>)
    3bec:	4798      	blx	r3
    3bee:	1e03      	subs	r3, r0, #0
    3bf0:	d1f9      	bne.n	3be6 <_i2c_master_wait_for_sync+0xa>
}
    3bf2:	46c0      	nop			; (mov r8, r8)
    3bf4:	46bd      	mov	sp, r7
    3bf6:	b002      	add	sp, #8
    3bf8:	bd80      	pop	{r7, pc}
    3bfa:	46c0      	nop			; (mov r8, r8)
    3bfc:	00003bb9 	.word	0x00003bb9

00003c00 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    3c00:	b580      	push	{r7, lr}
    3c02:	b082      	sub	sp, #8
    3c04:	af00      	add	r7, sp, #0
    3c06:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    3c08:	687b      	ldr	r3, [r7, #4]
    3c0a:	2264      	movs	r2, #100	; 0x64
    3c0c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    3c0e:	687b      	ldr	r3, [r7, #4]
    3c10:	4a1b      	ldr	r2, [pc, #108]	; (3c80 <i2c_master_get_config_defaults+0x80>)
    3c12:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    3c14:	687b      	ldr	r3, [r7, #4]
    3c16:	2200      	movs	r2, #0
    3c18:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    3c1a:	687b      	ldr	r3, [r7, #4]
    3c1c:	2200      	movs	r2, #0
    3c1e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    3c20:	687b      	ldr	r3, [r7, #4]
    3c22:	2200      	movs	r2, #0
    3c24:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	2280      	movs	r2, #128	; 0x80
    3c2a:	0392      	lsls	r2, r2, #14
    3c2c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    3c2e:	687b      	ldr	r3, [r7, #4]
    3c30:	2201      	movs	r2, #1
    3c32:	4252      	negs	r2, r2
    3c34:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    3c36:	687b      	ldr	r3, [r7, #4]
    3c38:	2201      	movs	r2, #1
    3c3a:	4252      	negs	r2, r2
    3c3c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    3c3e:	687b      	ldr	r3, [r7, #4]
    3c40:	2200      	movs	r2, #0
    3c42:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    3c44:	687b      	ldr	r3, [r7, #4]
    3c46:	2200      	movs	r2, #0
    3c48:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    3c4a:	687b      	ldr	r3, [r7, #4]
    3c4c:	2224      	movs	r2, #36	; 0x24
    3c4e:	2100      	movs	r1, #0
    3c50:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    3c52:	687b      	ldr	r3, [r7, #4]
    3c54:	2200      	movs	r2, #0
    3c56:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    3c58:	687b      	ldr	r3, [r7, #4]
    3c5a:	222c      	movs	r2, #44	; 0x2c
    3c5c:	2100      	movs	r1, #0
    3c5e:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    3c60:	687b      	ldr	r3, [r7, #4]
    3c62:	222d      	movs	r2, #45	; 0x2d
    3c64:	2100      	movs	r1, #0
    3c66:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    3c68:	687b      	ldr	r3, [r7, #4]
    3c6a:	222e      	movs	r2, #46	; 0x2e
    3c6c:	2100      	movs	r1, #0
    3c6e:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    3c70:	687b      	ldr	r3, [r7, #4]
    3c72:	22d7      	movs	r2, #215	; 0xd7
    3c74:	861a      	strh	r2, [r3, #48]	; 0x30
}
    3c76:	46c0      	nop			; (mov r8, r8)
    3c78:	46bd      	mov	sp, r7
    3c7a:	b002      	add	sp, #8
    3c7c:	bd80      	pop	{r7, pc}
    3c7e:	46c0      	nop			; (mov r8, r8)
    3c80:	00000d48 	.word	0x00000d48

00003c84 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    3c84:	b580      	push	{r7, lr}
    3c86:	b084      	sub	sp, #16
    3c88:	af00      	add	r7, sp, #0
    3c8a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3c8c:	687b      	ldr	r3, [r7, #4]
    3c8e:	681b      	ldr	r3, [r3, #0]
    3c90:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    3c92:	2300      	movs	r3, #0
    3c94:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    3c96:	687b      	ldr	r3, [r7, #4]
    3c98:	0018      	movs	r0, r3
    3c9a:	4b10      	ldr	r3, [pc, #64]	; (3cdc <i2c_master_enable+0x58>)
    3c9c:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    3c9e:	68bb      	ldr	r3, [r7, #8]
    3ca0:	681b      	ldr	r3, [r3, #0]
    3ca2:	2202      	movs	r2, #2
    3ca4:	431a      	orrs	r2, r3
    3ca6:	68bb      	ldr	r3, [r7, #8]
    3ca8:	601a      	str	r2, [r3, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    3caa:	e00c      	b.n	3cc6 <i2c_master_enable+0x42>
		timeout_counter++;
    3cac:	68fb      	ldr	r3, [r7, #12]
    3cae:	3301      	adds	r3, #1
    3cb0:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    3cb2:	687b      	ldr	r3, [r7, #4]
    3cb4:	88db      	ldrh	r3, [r3, #6]
    3cb6:	001a      	movs	r2, r3
    3cb8:	68fb      	ldr	r3, [r7, #12]
    3cba:	429a      	cmp	r2, r3
    3cbc:	d803      	bhi.n	3cc6 <i2c_master_enable+0x42>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    3cbe:	68bb      	ldr	r3, [r7, #8]
    3cc0:	2210      	movs	r2, #16
    3cc2:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    3cc4:	e006      	b.n	3cd4 <i2c_master_enable+0x50>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    3cc6:	68bb      	ldr	r3, [r7, #8]
    3cc8:	8b5b      	ldrh	r3, [r3, #26]
    3cca:	b29b      	uxth	r3, r3
    3ccc:	001a      	movs	r2, r3
    3cce:	2310      	movs	r3, #16
    3cd0:	4013      	ands	r3, r2
    3cd2:	d0eb      	beq.n	3cac <i2c_master_enable+0x28>
		}
	}
}
    3cd4:	46bd      	mov	sp, r7
    3cd6:	b004      	add	sp, #16
    3cd8:	bd80      	pop	{r7, pc}
    3cda:	46c0      	nop			; (mov r8, r8)
    3cdc:	00003bdd 	.word	0x00003bdd

00003ce0 <configure_i2c_master>:
 */ 

#include "i2c.h"

void configure_i2c_master(void)
{
    3ce0:	b580      	push	{r7, lr}
    3ce2:	b08e      	sub	sp, #56	; 0x38
    3ce4:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    3ce6:	1d3b      	adds	r3, r7, #4
    3ce8:	0018      	movs	r0, r3
    3cea:	4b0e      	ldr	r3, [pc, #56]	; (3d24 <configure_i2c_master+0x44>)
    3cec:	4798      	blx	r3
	/* Change buffer timeout to something longer. */
	config_i2c_master.buffer_timeout = 10000;
    3cee:	1d3b      	adds	r3, r7, #4
    3cf0:	4a0d      	ldr	r2, [pc, #52]	; (3d28 <configure_i2c_master+0x48>)
    3cf2:	82da      	strh	r2, [r3, #22]
	config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_100KHZ;
    3cf4:	1d3b      	adds	r3, r7, #4
    3cf6:	2264      	movs	r2, #100	; 0x64
    3cf8:	601a      	str	r2, [r3, #0]
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    3cfa:	1d3b      	adds	r3, r7, #4
    3cfc:	4a0b      	ldr	r2, [pc, #44]	; (3d2c <configure_i2c_master+0x4c>)
    3cfe:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    3d00:	1d3b      	adds	r3, r7, #4
    3d02:	4a0b      	ldr	r2, [pc, #44]	; (3d30 <configure_i2c_master+0x50>)
    3d04:	621a      	str	r2, [r3, #32]
	/* Initialize and enable device with config. */
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
    3d06:	1d3a      	adds	r2, r7, #4
    3d08:	490a      	ldr	r1, [pc, #40]	; (3d34 <configure_i2c_master+0x54>)
    3d0a:	4b0b      	ldr	r3, [pc, #44]	; (3d38 <configure_i2c_master+0x58>)
    3d0c:	0018      	movs	r0, r3
    3d0e:	4b0b      	ldr	r3, [pc, #44]	; (3d3c <configure_i2c_master+0x5c>)
    3d10:	4798      	blx	r3
	i2c_master_enable(&i2c_master_instance);
    3d12:	4b09      	ldr	r3, [pc, #36]	; (3d38 <configure_i2c_master+0x58>)
    3d14:	0018      	movs	r0, r3
    3d16:	4b0a      	ldr	r3, [pc, #40]	; (3d40 <configure_i2c_master+0x60>)
    3d18:	4798      	blx	r3
}
    3d1a:	46c0      	nop			; (mov r8, r8)
    3d1c:	46bd      	mov	sp, r7
    3d1e:	b00e      	add	sp, #56	; 0x38
    3d20:	bd80      	pop	{r7, pc}
    3d22:	46c0      	nop			; (mov r8, r8)
    3d24:	00003c01 	.word	0x00003c01
    3d28:	00002710 	.word	0x00002710
    3d2c:	00160002 	.word	0x00160002
    3d30:	00170002 	.word	0x00170002
    3d34:	42001400 	.word	0x42001400
    3d38:	2000047c 	.word	0x2000047c
    3d3c:	0000123d 	.word	0x0000123d
    3d40:	00003c85 	.word	0x00003c85

00003d44 <i2c_write>:

uint8_t i2c_write(uint8_t address,uint8_t* data, uint8_t data_size)
{
    3d44:	b580      	push	{r7, lr}
    3d46:	b086      	sub	sp, #24
    3d48:	af00      	add	r7, sp, #0
    3d4a:	6039      	str	r1, [r7, #0]
    3d4c:	0011      	movs	r1, r2
    3d4e:	1dfb      	adds	r3, r7, #7
    3d50:	1c02      	adds	r2, r0, #0
    3d52:	701a      	strb	r2, [r3, #0]
    3d54:	1dbb      	adds	r3, r7, #6
    3d56:	1c0a      	adds	r2, r1, #0
    3d58:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
    3d5a:	1dfb      	adds	r3, r7, #7
    3d5c:	781b      	ldrb	r3, [r3, #0]
    3d5e:	b29a      	uxth	r2, r3
    3d60:	2308      	movs	r3, #8
    3d62:	18fb      	adds	r3, r7, r3
    3d64:	801a      	strh	r2, [r3, #0]
    3d66:	1dbb      	adds	r3, r7, #6
    3d68:	781b      	ldrb	r3, [r3, #0]
    3d6a:	b29a      	uxth	r2, r3
    3d6c:	2308      	movs	r3, #8
    3d6e:	18fb      	adds	r3, r7, r3
    3d70:	805a      	strh	r2, [r3, #2]
    3d72:	2308      	movs	r3, #8
    3d74:	18fb      	adds	r3, r7, r3
    3d76:	683a      	ldr	r2, [r7, #0]
    3d78:	605a      	str	r2, [r3, #4]
    3d7a:	2308      	movs	r3, #8
    3d7c:	18fb      	adds	r3, r7, r3
    3d7e:	2200      	movs	r2, #0
    3d80:	721a      	strb	r2, [r3, #8]
    3d82:	2308      	movs	r3, #8
    3d84:	18fb      	adds	r3, r7, r3
    3d86:	2200      	movs	r2, #0
    3d88:	725a      	strb	r2, [r3, #9]
    3d8a:	2308      	movs	r3, #8
    3d8c:	18fb      	adds	r3, r7, r3
    3d8e:	2200      	movs	r2, #0
    3d90:	729a      	strb	r2, [r3, #10]
		.data        = data,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	uint16_t timeout = 0;
    3d92:	2316      	movs	r3, #22
    3d94:	18fb      	adds	r3, r7, r3
    3d96:	2200      	movs	r2, #0
    3d98:	801a      	strh	r2, [r3, #0]

	return i2c_master_write_packet_wait(&i2c_master_instance,&packet);
    3d9a:	2308      	movs	r3, #8
    3d9c:	18fa      	adds	r2, r7, r3
    3d9e:	4b05      	ldr	r3, [pc, #20]	; (3db4 <i2c_write+0x70>)
    3da0:	0011      	movs	r1, r2
    3da2:	0018      	movs	r0, r3
    3da4:	4b04      	ldr	r3, [pc, #16]	; (3db8 <i2c_write+0x74>)
    3da6:	4798      	blx	r3
    3da8:	0003      	movs	r3, r0
	{
		if (timeout++ == I2C_TIMEOUT) {
			break;
		}
	}*/
}
    3daa:	0018      	movs	r0, r3
    3dac:	46bd      	mov	sp, r7
    3dae:	b006      	add	sp, #24
    3db0:	bd80      	pop	{r7, pc}
    3db2:	46c0      	nop			; (mov r8, r8)
    3db4:	2000047c 	.word	0x2000047c
    3db8:	00001839 	.word	0x00001839

00003dbc <i2c_read>:
	}	
	return found_array;
}

uint8_t i2c_read(uint8_t addr,uint8_t reg, uint8_t data_length,uint8_t* data_ptr)
{
    3dbc:	b590      	push	{r4, r7, lr}
    3dbe:	b08b      	sub	sp, #44	; 0x2c
    3dc0:	af00      	add	r7, sp, #0
    3dc2:	0004      	movs	r4, r0
    3dc4:	0008      	movs	r0, r1
    3dc6:	0011      	movs	r1, r2
    3dc8:	603b      	str	r3, [r7, #0]
    3dca:	1dfb      	adds	r3, r7, #7
    3dcc:	1c22      	adds	r2, r4, #0
    3dce:	701a      	strb	r2, [r3, #0]
    3dd0:	1dbb      	adds	r3, r7, #6
    3dd2:	1c02      	adds	r2, r0, #0
    3dd4:	701a      	strb	r2, [r3, #0]
    3dd6:	1d7b      	adds	r3, r7, #5
    3dd8:	1c0a      	adds	r2, r1, #0
    3dda:	701a      	strb	r2, [r3, #0]
	//uint8_t read_datab[data_length];
	uint8_t state = 0;
    3ddc:	2325      	movs	r3, #37	; 0x25
    3dde:	18fb      	adds	r3, r7, r3
    3de0:	2200      	movs	r2, #0
    3de2:	701a      	strb	r2, [r3, #0]
	//uint8_t address = (addr << 1) + 1;
	
	uint8_t data[2];
	data[0] = reg;
    3de4:	2320      	movs	r3, #32
    3de6:	18fb      	adds	r3, r7, r3
    3de8:	1dba      	adds	r2, r7, #6
    3dea:	7812      	ldrb	r2, [r2, #0]
    3dec:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
    3dee:	2320      	movs	r3, #32
    3df0:	18fb      	adds	r3, r7, r3
    3df2:	22ff      	movs	r2, #255	; 0xff
    3df4:	705a      	strb	r2, [r3, #1]
	
	struct i2c_master_packet packet = {
		.address     = addr | (1 << 8),
    3df6:	1dfb      	adds	r3, r7, #7
    3df8:	781b      	ldrb	r3, [r3, #0]
    3dfa:	b29b      	uxth	r3, r3
    3dfc:	2280      	movs	r2, #128	; 0x80
    3dfe:	0052      	lsls	r2, r2, #1
    3e00:	4313      	orrs	r3, r2
    3e02:	b29a      	uxth	r2, r3
	struct i2c_master_packet packet = {
    3e04:	2314      	movs	r3, #20
    3e06:	18fb      	adds	r3, r7, r3
    3e08:	801a      	strh	r2, [r3, #0]
    3e0a:	1d7b      	adds	r3, r7, #5
    3e0c:	781b      	ldrb	r3, [r3, #0]
    3e0e:	b29a      	uxth	r2, r3
    3e10:	2314      	movs	r3, #20
    3e12:	18fb      	adds	r3, r7, r3
    3e14:	805a      	strh	r2, [r3, #2]
    3e16:	2314      	movs	r3, #20
    3e18:	18fb      	adds	r3, r7, r3
    3e1a:	2220      	movs	r2, #32
    3e1c:	18ba      	adds	r2, r7, r2
    3e1e:	605a      	str	r2, [r3, #4]
    3e20:	2314      	movs	r3, #20
    3e22:	18fb      	adds	r3, r7, r3
    3e24:	2200      	movs	r2, #0
    3e26:	721a      	strb	r2, [r3, #8]
    3e28:	2314      	movs	r3, #20
    3e2a:	18fb      	adds	r3, r7, r3
    3e2c:	2200      	movs	r2, #0
    3e2e:	725a      	strb	r2, [r3, #9]
    3e30:	2314      	movs	r3, #20
    3e32:	18fb      	adds	r3, r7, r3
    3e34:	2200      	movs	r2, #0
    3e36:	729a      	strb	r2, [r3, #10]
		.data        = data,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	uint16_t timeout = 0;
    3e38:	2326      	movs	r3, #38	; 0x26
    3e3a:	18fb      	adds	r3, r7, r3
    3e3c:	2200      	movs	r2, #0
    3e3e:	801a      	strh	r2, [r3, #0]

	do
	{
		state = i2c_master_write_packet_wait(&i2c_master_instance,&packet);
    3e40:	2325      	movs	r3, #37	; 0x25
    3e42:	18fc      	adds	r4, r7, r3
    3e44:	2314      	movs	r3, #20
    3e46:	18fa      	adds	r2, r7, r3
    3e48:	4b23      	ldr	r3, [pc, #140]	; (3ed8 <i2c_read+0x11c>)
    3e4a:	0011      	movs	r1, r2
    3e4c:	0018      	movs	r0, r3
    3e4e:	4b23      	ldr	r3, [pc, #140]	; (3edc <i2c_read+0x120>)
    3e50:	4798      	blx	r3
    3e52:	0003      	movs	r3, r0
    3e54:	7023      	strb	r3, [r4, #0]
		if (timeout++ == I2C_TIMEOUT) {
    3e56:	2326      	movs	r3, #38	; 0x26
    3e58:	18fb      	adds	r3, r7, r3
    3e5a:	881b      	ldrh	r3, [r3, #0]
    3e5c:	2226      	movs	r2, #38	; 0x26
    3e5e:	18ba      	adds	r2, r7, r2
    3e60:	1c59      	adds	r1, r3, #1
    3e62:	8011      	strh	r1, [r2, #0]
    3e64:	2b0a      	cmp	r3, #10
    3e66:	d103      	bne.n	3e70 <i2c_read+0xb4>
			return state;
    3e68:	2325      	movs	r3, #37	; 0x25
    3e6a:	18fb      	adds	r3, r7, r3
    3e6c:	781b      	ldrb	r3, [r3, #0]
    3e6e:	e02e      	b.n	3ece <i2c_read+0x112>
			break;
		}
	}
	while (state != STATUS_OK);
    3e70:	2325      	movs	r3, #37	; 0x25
    3e72:	18fb      	adds	r3, r7, r3
    3e74:	781b      	ldrb	r3, [r3, #0]
    3e76:	2b00      	cmp	r3, #0
    3e78:	d1e2      	bne.n	3e40 <i2c_read+0x84>
	
	struct i2c_master_packet read_packet = {
    3e7a:	1dfb      	adds	r3, r7, #7
    3e7c:	781b      	ldrb	r3, [r3, #0]
    3e7e:	b29a      	uxth	r2, r3
    3e80:	2308      	movs	r3, #8
    3e82:	18fb      	adds	r3, r7, r3
    3e84:	801a      	strh	r2, [r3, #0]
    3e86:	1d7b      	adds	r3, r7, #5
    3e88:	781b      	ldrb	r3, [r3, #0]
    3e8a:	b29a      	uxth	r2, r3
    3e8c:	2308      	movs	r3, #8
    3e8e:	18fb      	adds	r3, r7, r3
    3e90:	805a      	strh	r2, [r3, #2]
    3e92:	2308      	movs	r3, #8
    3e94:	18fb      	adds	r3, r7, r3
    3e96:	683a      	ldr	r2, [r7, #0]
    3e98:	605a      	str	r2, [r3, #4]
    3e9a:	2308      	movs	r3, #8
    3e9c:	18fb      	adds	r3, r7, r3
    3e9e:	2200      	movs	r2, #0
    3ea0:	721a      	strb	r2, [r3, #8]
    3ea2:	2308      	movs	r3, #8
    3ea4:	18fb      	adds	r3, r7, r3
    3ea6:	2200      	movs	r2, #0
    3ea8:	725a      	strb	r2, [r3, #9]
    3eaa:	2308      	movs	r3, #8
    3eac:	18fb      	adds	r3, r7, r3
    3eae:	2200      	movs	r2, #0
    3eb0:	729a      	strb	r2, [r3, #10]
		.data        = data_ptr,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	state = i2c_master_read_packet_wait(&i2c_master_instance,&read_packet);
    3eb2:	2325      	movs	r3, #37	; 0x25
    3eb4:	18fc      	adds	r4, r7, r3
    3eb6:	2308      	movs	r3, #8
    3eb8:	18fa      	adds	r2, r7, r3
    3eba:	4b07      	ldr	r3, [pc, #28]	; (3ed8 <i2c_read+0x11c>)
    3ebc:	0011      	movs	r1, r2
    3ebe:	0018      	movs	r0, r3
    3ec0:	4b07      	ldr	r3, [pc, #28]	; (3ee0 <i2c_read+0x124>)
    3ec2:	4798      	blx	r3
    3ec4:	0003      	movs	r3, r0
    3ec6:	7023      	strb	r3, [r4, #0]
	return state;
    3ec8:	2325      	movs	r3, #37	; 0x25
    3eca:	18fb      	adds	r3, r7, r3
    3ecc:	781b      	ldrb	r3, [r3, #0]
}
    3ece:	0018      	movs	r0, r3
    3ed0:	46bd      	mov	sp, r7
    3ed2:	b00b      	add	sp, #44	; 0x2c
    3ed4:	bd90      	pop	{r4, r7, pc}
    3ed6:	46c0      	nop			; (mov r8, r8)
    3ed8:	2000047c 	.word	0x2000047c
    3edc:	00001839 	.word	0x00001839
    3ee0:	00001691 	.word	0x00001691

00003ee4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3ee4:	b580      	push	{r7, lr}
    3ee6:	b084      	sub	sp, #16
    3ee8:	af00      	add	r7, sp, #0
    3eea:	0002      	movs	r2, r0
    3eec:	1dfb      	adds	r3, r7, #7
    3eee:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3ef0:	230f      	movs	r3, #15
    3ef2:	18fb      	adds	r3, r7, r3
    3ef4:	1dfa      	adds	r2, r7, #7
    3ef6:	7812      	ldrb	r2, [r2, #0]
    3ef8:	09d2      	lsrs	r2, r2, #7
    3efa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3efc:	230e      	movs	r3, #14
    3efe:	18fb      	adds	r3, r7, r3
    3f00:	1dfa      	adds	r2, r7, #7
    3f02:	7812      	ldrb	r2, [r2, #0]
    3f04:	0952      	lsrs	r2, r2, #5
    3f06:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3f08:	4b0d      	ldr	r3, [pc, #52]	; (3f40 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3f0a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3f0c:	230f      	movs	r3, #15
    3f0e:	18fb      	adds	r3, r7, r3
    3f10:	781b      	ldrb	r3, [r3, #0]
    3f12:	2b00      	cmp	r3, #0
    3f14:	d10f      	bne.n	3f36 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3f16:	230f      	movs	r3, #15
    3f18:	18fb      	adds	r3, r7, r3
    3f1a:	781b      	ldrb	r3, [r3, #0]
    3f1c:	009b      	lsls	r3, r3, #2
    3f1e:	2210      	movs	r2, #16
    3f20:	4694      	mov	ip, r2
    3f22:	44bc      	add	ip, r7
    3f24:	4463      	add	r3, ip
    3f26:	3b08      	subs	r3, #8
    3f28:	681a      	ldr	r2, [r3, #0]
    3f2a:	230e      	movs	r3, #14
    3f2c:	18fb      	adds	r3, r7, r3
    3f2e:	781b      	ldrb	r3, [r3, #0]
    3f30:	01db      	lsls	r3, r3, #7
    3f32:	18d3      	adds	r3, r2, r3
    3f34:	e000      	b.n	3f38 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3f36:	2300      	movs	r3, #0
	}
}
    3f38:	0018      	movs	r0, r3
    3f3a:	46bd      	mov	sp, r7
    3f3c:	b004      	add	sp, #16
    3f3e:	bd80      	pop	{r7, pc}
    3f40:	41004400 	.word	0x41004400

00003f44 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3f44:	b580      	push	{r7, lr}
    3f46:	b082      	sub	sp, #8
    3f48:	af00      	add	r7, sp, #0
    3f4a:	0002      	movs	r2, r0
    3f4c:	1dfb      	adds	r3, r7, #7
    3f4e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3f50:	1dfb      	adds	r3, r7, #7
    3f52:	781b      	ldrb	r3, [r3, #0]
    3f54:	0018      	movs	r0, r3
    3f56:	4b03      	ldr	r3, [pc, #12]	; (3f64 <port_get_group_from_gpio_pin+0x20>)
    3f58:	4798      	blx	r3
    3f5a:	0003      	movs	r3, r0
}
    3f5c:	0018      	movs	r0, r3
    3f5e:	46bd      	mov	sp, r7
    3f60:	b002      	add	sp, #8
    3f62:	bd80      	pop	{r7, pc}
    3f64:	00003ee5 	.word	0x00003ee5

00003f68 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3f68:	b580      	push	{r7, lr}
    3f6a:	b082      	sub	sp, #8
    3f6c:	af00      	add	r7, sp, #0
    3f6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3f70:	687b      	ldr	r3, [r7, #4]
    3f72:	2200      	movs	r2, #0
    3f74:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3f76:	687b      	ldr	r3, [r7, #4]
    3f78:	2201      	movs	r2, #1
    3f7a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3f7c:	687b      	ldr	r3, [r7, #4]
    3f7e:	2200      	movs	r2, #0
    3f80:	709a      	strb	r2, [r3, #2]
}
    3f82:	46c0      	nop			; (mov r8, r8)
    3f84:	46bd      	mov	sp, r7
    3f86:	b002      	add	sp, #8
    3f88:	bd80      	pop	{r7, pc}
	...

00003f8c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3f8c:	b580      	push	{r7, lr}
    3f8e:	b084      	sub	sp, #16
    3f90:	af00      	add	r7, sp, #0
    3f92:	0002      	movs	r2, r0
    3f94:	1dfb      	adds	r3, r7, #7
    3f96:	701a      	strb	r2, [r3, #0]
    3f98:	1dbb      	adds	r3, r7, #6
    3f9a:	1c0a      	adds	r2, r1, #0
    3f9c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3f9e:	1dfb      	adds	r3, r7, #7
    3fa0:	781b      	ldrb	r3, [r3, #0]
    3fa2:	0018      	movs	r0, r3
    3fa4:	4b0d      	ldr	r3, [pc, #52]	; (3fdc <port_pin_set_output_level+0x50>)
    3fa6:	4798      	blx	r3
    3fa8:	0003      	movs	r3, r0
    3faa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3fac:	1dfb      	adds	r3, r7, #7
    3fae:	781b      	ldrb	r3, [r3, #0]
    3fb0:	221f      	movs	r2, #31
    3fb2:	4013      	ands	r3, r2
    3fb4:	2201      	movs	r2, #1
    3fb6:	409a      	lsls	r2, r3
    3fb8:	0013      	movs	r3, r2
    3fba:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3fbc:	1dbb      	adds	r3, r7, #6
    3fbe:	781b      	ldrb	r3, [r3, #0]
    3fc0:	2b00      	cmp	r3, #0
    3fc2:	d003      	beq.n	3fcc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3fc4:	68fb      	ldr	r3, [r7, #12]
    3fc6:	68ba      	ldr	r2, [r7, #8]
    3fc8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3fca:	e002      	b.n	3fd2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3fcc:	68fb      	ldr	r3, [r7, #12]
    3fce:	68ba      	ldr	r2, [r7, #8]
    3fd0:	615a      	str	r2, [r3, #20]
}
    3fd2:	46c0      	nop			; (mov r8, r8)
    3fd4:	46bd      	mov	sp, r7
    3fd6:	b004      	add	sp, #16
    3fd8:	bd80      	pop	{r7, pc}
    3fda:	46c0      	nop			; (mov r8, r8)
    3fdc:	00003f45 	.word	0x00003f45

00003fe0 <init_all_ports>:
	data[1] = 0xFF;
	state = i2c_write(MCP23017_I2C_ADDR_000,(uint8_t *)data,2);
}

uint8_t init_all_ports(void)
{
    3fe0:	b590      	push	{r4, r7, lr}
    3fe2:	b085      	sub	sp, #20
    3fe4:	af00      	add	r7, sp, #0
	uint8_t states = 0;
    3fe6:	230f      	movs	r3, #15
    3fe8:	18fb      	adds	r3, r7, r3
    3fea:	2200      	movs	r2, #0
    3fec:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[1] = 0x00;
    3fee:	1d3b      	adds	r3, r7, #4
    3ff0:	2200      	movs	r2, #0
    3ff2:	705a      	strb	r2, [r3, #1]
	
	for (int i=0;i<8;i++)
    3ff4:	2300      	movs	r3, #0
    3ff6:	60bb      	str	r3, [r7, #8]
    3ff8:	e036      	b.n	4068 <init_all_ports+0x88>
	{
		data[0] = MCP23017_IODIRA;
    3ffa:	1d3b      	adds	r3, r7, #4
    3ffc:	2200      	movs	r2, #0
    3ffe:	701a      	strb	r2, [r3, #0]
		uint8_t state = i2c_write(MCP23017_I2C_ADDR_000+i,(uint8_t *)data,2);
    4000:	68bb      	ldr	r3, [r7, #8]
    4002:	b2db      	uxtb	r3, r3
    4004:	3320      	adds	r3, #32
    4006:	b2db      	uxtb	r3, r3
    4008:	1dfc      	adds	r4, r7, #7
    400a:	1d39      	adds	r1, r7, #4
    400c:	2202      	movs	r2, #2
    400e:	0018      	movs	r0, r3
    4010:	4b28      	ldr	r3, [pc, #160]	; (40b4 <init_all_ports+0xd4>)
    4012:	4798      	blx	r3
    4014:	0003      	movs	r3, r0
    4016:	7023      	strb	r3, [r4, #0]
		if (state == STATUS_OK)
    4018:	1dfb      	adds	r3, r7, #7
    401a:	781b      	ldrb	r3, [r3, #0]
    401c:	2b00      	cmp	r3, #0
    401e:	d120      	bne.n	4062 <init_all_ports+0x82>
		{
			data[0] = MCP23017_IODIRB;
    4020:	1d3b      	adds	r3, r7, #4
    4022:	2201      	movs	r2, #1
    4024:	701a      	strb	r2, [r3, #0]
			state = i2c_write(MCP23017_I2C_ADDR_000+i,(uint8_t *)data,2);
    4026:	68bb      	ldr	r3, [r7, #8]
    4028:	b2db      	uxtb	r3, r3
    402a:	3320      	adds	r3, #32
    402c:	b2db      	uxtb	r3, r3
    402e:	1dfc      	adds	r4, r7, #7
    4030:	1d39      	adds	r1, r7, #4
    4032:	2202      	movs	r2, #2
    4034:	0018      	movs	r0, r3
    4036:	4b1f      	ldr	r3, [pc, #124]	; (40b4 <init_all_ports+0xd4>)
    4038:	4798      	blx	r3
    403a:	0003      	movs	r3, r0
    403c:	7023      	strb	r3, [r4, #0]
			if (state == STATUS_OK)
    403e:	1dfb      	adds	r3, r7, #7
    4040:	781b      	ldrb	r3, [r3, #0]
    4042:	2b00      	cmp	r3, #0
    4044:	d10d      	bne.n	4062 <init_all_ports+0x82>
			{
				states |= (1 << i);
    4046:	2201      	movs	r2, #1
    4048:	68bb      	ldr	r3, [r7, #8]
    404a:	409a      	lsls	r2, r3
    404c:	0013      	movs	r3, r2
    404e:	b25a      	sxtb	r2, r3
    4050:	230f      	movs	r3, #15
    4052:	18fb      	adds	r3, r7, r3
    4054:	781b      	ldrb	r3, [r3, #0]
    4056:	b25b      	sxtb	r3, r3
    4058:	4313      	orrs	r3, r2
    405a:	b25a      	sxtb	r2, r3
    405c:	230f      	movs	r3, #15
    405e:	18fb      	adds	r3, r7, r3
    4060:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
    4062:	68bb      	ldr	r3, [r7, #8]
    4064:	3301      	adds	r3, #1
    4066:	60bb      	str	r3, [r7, #8]
    4068:	68bb      	ldr	r3, [r7, #8]
    406a:	2b07      	cmp	r3, #7
    406c:	ddc5      	ble.n	3ffa <init_all_ports+0x1a>
			}
		}
	}
	
	data[1] = 0x80;
    406e:	1d3b      	adds	r3, r7, #4
    4070:	2280      	movs	r2, #128	; 0x80
    4072:	705a      	strb	r2, [r3, #1]
	data[0] = MCP23017_GPIOA;
    4074:	1d3b      	adds	r3, r7, #4
    4076:	2212      	movs	r2, #18
    4078:	701a      	strb	r2, [r3, #0]
	uint8_t state = i2c_write(MCP23017_I2C_ADDR_001,(uint8_t *)data,2);
    407a:	1dbc      	adds	r4, r7, #6
    407c:	1d3b      	adds	r3, r7, #4
    407e:	2202      	movs	r2, #2
    4080:	0019      	movs	r1, r3
    4082:	2021      	movs	r0, #33	; 0x21
    4084:	4b0b      	ldr	r3, [pc, #44]	; (40b4 <init_all_ports+0xd4>)
    4086:	4798      	blx	r3
    4088:	0003      	movs	r3, r0
    408a:	7023      	strb	r3, [r4, #0]
	data[0] = MCP23017_GPIOB;
    408c:	1d3b      	adds	r3, r7, #4
    408e:	2213      	movs	r2, #19
    4090:	701a      	strb	r2, [r3, #0]
	state = i2c_write(MCP23017_I2C_ADDR_001,(uint8_t *)data,2);
    4092:	1dbc      	adds	r4, r7, #6
    4094:	1d3b      	adds	r3, r7, #4
    4096:	2202      	movs	r2, #2
    4098:	0019      	movs	r1, r3
    409a:	2021      	movs	r0, #33	; 0x21
    409c:	4b05      	ldr	r3, [pc, #20]	; (40b4 <init_all_ports+0xd4>)
    409e:	4798      	blx	r3
    40a0:	0003      	movs	r3, r0
    40a2:	7023      	strb	r3, [r4, #0]
	
	return states;
    40a4:	230f      	movs	r3, #15
    40a6:	18fb      	adds	r3, r7, r3
    40a8:	781b      	ldrb	r3, [r3, #0]
}
    40aa:	0018      	movs	r0, r3
    40ac:	46bd      	mov	sp, r7
    40ae:	b005      	add	sp, #20
    40b0:	bd90      	pop	{r4, r7, pc}
    40b2:	46c0      	nop			; (mov r8, r8)
    40b4:	00003d45 	.word	0x00003d45

000040b8 <mcp23017_set_pins>:
	data[0] = MCP23017_GPIOB;
	state = i2c_write(MCP23017_I2C_ADDR_000,(uint8_t *)data,2);	
}

uint8_t mcp23017_set_pins(uint8_t addr, uint8_t porta, uint8_t portb)
{
    40b8:	b590      	push	{r4, r7, lr}
    40ba:	b085      	sub	sp, #20
    40bc:	af00      	add	r7, sp, #0
    40be:	0004      	movs	r4, r0
    40c0:	0008      	movs	r0, r1
    40c2:	0011      	movs	r1, r2
    40c4:	1dfb      	adds	r3, r7, #7
    40c6:	1c22      	adds	r2, r4, #0
    40c8:	701a      	strb	r2, [r3, #0]
    40ca:	1dbb      	adds	r3, r7, #6
    40cc:	1c02      	adds	r2, r0, #0
    40ce:	701a      	strb	r2, [r3, #0]
    40d0:	1d7b      	adds	r3, r7, #5
    40d2:	1c0a      	adds	r2, r1, #0
    40d4:	701a      	strb	r2, [r3, #0]
	uint8_t state = 0x00;
    40d6:	230f      	movs	r3, #15
    40d8:	18fb      	adds	r3, r7, r3
    40da:	2200      	movs	r2, #0
    40dc:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = MCP23017_GPIOA;
    40de:	230c      	movs	r3, #12
    40e0:	18fb      	adds	r3, r7, r3
    40e2:	2212      	movs	r2, #18
    40e4:	701a      	strb	r2, [r3, #0]
	data[1] = porta;
    40e6:	230c      	movs	r3, #12
    40e8:	18fb      	adds	r3, r7, r3
    40ea:	1dba      	adds	r2, r7, #6
    40ec:	7812      	ldrb	r2, [r2, #0]
    40ee:	705a      	strb	r2, [r3, #1]
	state = i2c_write(addr,(uint8_t *)data,2);
    40f0:	230f      	movs	r3, #15
    40f2:	18fc      	adds	r4, r7, r3
    40f4:	230c      	movs	r3, #12
    40f6:	18f9      	adds	r1, r7, r3
    40f8:	1dfb      	adds	r3, r7, #7
    40fa:	781b      	ldrb	r3, [r3, #0]
    40fc:	2202      	movs	r2, #2
    40fe:	0018      	movs	r0, r3
    4100:	4b12      	ldr	r3, [pc, #72]	; (414c <mcp23017_set_pins+0x94>)
    4102:	4798      	blx	r3
    4104:	0003      	movs	r3, r0
    4106:	7023      	strb	r3, [r4, #0]
	data[0] = MCP23017_GPIOB;
    4108:	230c      	movs	r3, #12
    410a:	18fb      	adds	r3, r7, r3
    410c:	2213      	movs	r2, #19
    410e:	701a      	strb	r2, [r3, #0]
	data[1] = portb;
    4110:	230c      	movs	r3, #12
    4112:	18fb      	adds	r3, r7, r3
    4114:	1d7a      	adds	r2, r7, #5
    4116:	7812      	ldrb	r2, [r2, #0]
    4118:	705a      	strb	r2, [r3, #1]
	state |= i2c_write(addr,(uint8_t *)data,2);
    411a:	230c      	movs	r3, #12
    411c:	18f9      	adds	r1, r7, r3
    411e:	1dfb      	adds	r3, r7, #7
    4120:	781b      	ldrb	r3, [r3, #0]
    4122:	2202      	movs	r2, #2
    4124:	0018      	movs	r0, r3
    4126:	4b09      	ldr	r3, [pc, #36]	; (414c <mcp23017_set_pins+0x94>)
    4128:	4798      	blx	r3
    412a:	0003      	movs	r3, r0
    412c:	0019      	movs	r1, r3
    412e:	230f      	movs	r3, #15
    4130:	18fb      	adds	r3, r7, r3
    4132:	220f      	movs	r2, #15
    4134:	18ba      	adds	r2, r7, r2
    4136:	7812      	ldrb	r2, [r2, #0]
    4138:	430a      	orrs	r2, r1
    413a:	701a      	strb	r2, [r3, #0]
	
	return state;
    413c:	230f      	movs	r3, #15
    413e:	18fb      	adds	r3, r7, r3
    4140:	781b      	ldrb	r3, [r3, #0]
}
    4142:	0018      	movs	r0, r3
    4144:	46bd      	mov	sp, r7
    4146:	b005      	add	sp, #20
    4148:	bd90      	pop	{r4, r7, pc}
    414a:	46c0      	nop			; (mov r8, r8)
    414c:	00003d45 	.word	0x00003d45

00004150 <mcp23017_read_all_ports>:

uint8_t data_being_read[8][2];

void mcp23017_read_all_ports(uint8_t read_data_ptr[2][8], uint8_t states[8])
{
    4150:	b5b0      	push	{r4, r5, r7, lr}
    4152:	b084      	sub	sp, #16
    4154:	af00      	add	r7, sp, #0
    4156:	6078      	str	r0, [r7, #4]
    4158:	6039      	str	r1, [r7, #0]
	uint8_t state = 0x00;
    415a:	230e      	movs	r3, #14
    415c:	18fb      	adds	r3, r7, r3
    415e:	2200      	movs	r2, #0
    4160:	701a      	strb	r2, [r3, #0]
	//uint8_t data = 0x00;
	for (uint8_t i=0;i<8;i++)
    4162:	230f      	movs	r3, #15
    4164:	18fb      	adds	r3, r7, r3
    4166:	2200      	movs	r2, #0
    4168:	701a      	strb	r2, [r3, #0]
    416a:	e03e      	b.n	41ea <mcp23017_read_all_ports+0x9a>
	{
		//data = 0x00;
		//data_being_read[i][0] = 0;
		//read_data_ptr[i][0] = 0;
		state = i2c_read(MCP23017_I2C_ADDR_000+i,MCP23017_GPIOA, 1,(uint8_t *)&read_data_ptr[0][i]);
    416c:	230f      	movs	r3, #15
    416e:	18fb      	adds	r3, r7, r3
    4170:	781b      	ldrb	r3, [r3, #0]
    4172:	3320      	adds	r3, #32
    4174:	b2d8      	uxtb	r0, r3
    4176:	230f      	movs	r3, #15
    4178:	18fb      	adds	r3, r7, r3
    417a:	781b      	ldrb	r3, [r3, #0]
    417c:	687a      	ldr	r2, [r7, #4]
    417e:	18d3      	adds	r3, r2, r3
    4180:	220e      	movs	r2, #14
    4182:	18bc      	adds	r4, r7, r2
    4184:	2201      	movs	r2, #1
    4186:	2112      	movs	r1, #18
    4188:	4d1c      	ldr	r5, [pc, #112]	; (41fc <mcp23017_read_all_ports+0xac>)
    418a:	47a8      	blx	r5
    418c:	0003      	movs	r3, r0
    418e:	7023      	strb	r3, [r4, #0]
		//read_data[i][0] = data;
		//data_being_read[i][0] = data;
		//read_data_ptr[i][1] = 0;
		state |= i2c_read(MCP23017_I2C_ADDR_000+i,MCP23017_GPIOB, 1,(uint8_t *)&read_data_ptr[1][i]);
    4190:	230f      	movs	r3, #15
    4192:	18fb      	adds	r3, r7, r3
    4194:	781b      	ldrb	r3, [r3, #0]
    4196:	3320      	adds	r3, #32
    4198:	b2d8      	uxtb	r0, r3
    419a:	687b      	ldr	r3, [r7, #4]
    419c:	3308      	adds	r3, #8
    419e:	001a      	movs	r2, r3
    41a0:	230f      	movs	r3, #15
    41a2:	18fb      	adds	r3, r7, r3
    41a4:	781b      	ldrb	r3, [r3, #0]
    41a6:	18d3      	adds	r3, r2, r3
    41a8:	2201      	movs	r2, #1
    41aa:	2113      	movs	r1, #19
    41ac:	4c13      	ldr	r4, [pc, #76]	; (41fc <mcp23017_read_all_ports+0xac>)
    41ae:	47a0      	blx	r4
    41b0:	0003      	movs	r3, r0
    41b2:	0019      	movs	r1, r3
    41b4:	230e      	movs	r3, #14
    41b6:	18fb      	adds	r3, r7, r3
    41b8:	220e      	movs	r2, #14
    41ba:	18ba      	adds	r2, r7, r2
    41bc:	7812      	ldrb	r2, [r2, #0]
    41be:	430a      	orrs	r2, r1
    41c0:	701a      	strb	r2, [r3, #0]
		//data_being_read[i][1] = data;
		//read_data[i][1] = data;
		states[i] = state;
    41c2:	230f      	movs	r3, #15
    41c4:	18fb      	adds	r3, r7, r3
    41c6:	781b      	ldrb	r3, [r3, #0]
    41c8:	683a      	ldr	r2, [r7, #0]
    41ca:	18d3      	adds	r3, r2, r3
    41cc:	220e      	movs	r2, #14
    41ce:	18ba      	adds	r2, r7, r2
    41d0:	7812      	ldrb	r2, [r2, #0]
    41d2:	701a      	strb	r2, [r3, #0]
		state = 0x00;
    41d4:	230e      	movs	r3, #14
    41d6:	18fb      	adds	r3, r7, r3
    41d8:	2200      	movs	r2, #0
    41da:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0;i<8;i++)
    41dc:	230f      	movs	r3, #15
    41de:	18fb      	adds	r3, r7, r3
    41e0:	781a      	ldrb	r2, [r3, #0]
    41e2:	230f      	movs	r3, #15
    41e4:	18fb      	adds	r3, r7, r3
    41e6:	3201      	adds	r2, #1
    41e8:	701a      	strb	r2, [r3, #0]
    41ea:	230f      	movs	r3, #15
    41ec:	18fb      	adds	r3, r7, r3
    41ee:	781b      	ldrb	r3, [r3, #0]
    41f0:	2b07      	cmp	r3, #7
    41f2:	d9bb      	bls.n	416c <mcp23017_read_all_ports+0x1c>
	}
	//read_data = data_being_read;
	//return state;
}
    41f4:	46c0      	nop			; (mov r8, r8)
    41f6:	46bd      	mov	sp, r7
    41f8:	b004      	add	sp, #16
    41fa:	bdb0      	pop	{r4, r5, r7, pc}
    41fc:	00003dbd 	.word	0x00003dbd

00004200 <mcp23017_pin_init>:

void mcp23017_pin_init(void)
{
    4200:	b580      	push	{r7, lr}
    4202:	b082      	sub	sp, #8
    4204:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    4206:	1d3b      	adds	r3, r7, #4
    4208:	0018      	movs	r0, r3
    420a:	4b0a      	ldr	r3, [pc, #40]	; (4234 <mcp23017_pin_init+0x34>)
    420c:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    420e:	1d3b      	adds	r3, r7, #4
    4210:	2201      	movs	r2, #1
    4212:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4214:	1d3b      	adds	r3, r7, #4
    4216:	2201      	movs	r2, #1
    4218:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(MCP23017_PWR_PIN,&config_port_pin);
    421a:	1d3b      	adds	r3, r7, #4
    421c:	0019      	movs	r1, r3
    421e:	2007      	movs	r0, #7
    4220:	4b05      	ldr	r3, [pc, #20]	; (4238 <mcp23017_pin_init+0x38>)
    4222:	4798      	blx	r3
	port_pin_set_output_level(MCP23017_PWR_PIN,true);
    4224:	2101      	movs	r1, #1
    4226:	2007      	movs	r0, #7
    4228:	4b04      	ldr	r3, [pc, #16]	; (423c <mcp23017_pin_init+0x3c>)
    422a:	4798      	blx	r3
}
    422c:	46c0      	nop			; (mov r8, r8)
    422e:	46bd      	mov	sp, r7
    4230:	b002      	add	sp, #8
    4232:	bd80      	pop	{r7, pc}
    4234:	00003f69 	.word	0x00003f69
    4238:	00000ce5 	.word	0x00000ce5
    423c:	00003f8d 	.word	0x00003f8d

00004240 <system_pinmux_get_group_from_gpio_pin>:
{
    4240:	b580      	push	{r7, lr}
    4242:	b084      	sub	sp, #16
    4244:	af00      	add	r7, sp, #0
    4246:	0002      	movs	r2, r0
    4248:	1dfb      	adds	r3, r7, #7
    424a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    424c:	230f      	movs	r3, #15
    424e:	18fb      	adds	r3, r7, r3
    4250:	1dfa      	adds	r2, r7, #7
    4252:	7812      	ldrb	r2, [r2, #0]
    4254:	09d2      	lsrs	r2, r2, #7
    4256:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4258:	230e      	movs	r3, #14
    425a:	18fb      	adds	r3, r7, r3
    425c:	1dfa      	adds	r2, r7, #7
    425e:	7812      	ldrb	r2, [r2, #0]
    4260:	0952      	lsrs	r2, r2, #5
    4262:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4264:	4b0d      	ldr	r3, [pc, #52]	; (429c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4266:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    4268:	230f      	movs	r3, #15
    426a:	18fb      	adds	r3, r7, r3
    426c:	781b      	ldrb	r3, [r3, #0]
    426e:	2b00      	cmp	r3, #0
    4270:	d10f      	bne.n	4292 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4272:	230f      	movs	r3, #15
    4274:	18fb      	adds	r3, r7, r3
    4276:	781b      	ldrb	r3, [r3, #0]
    4278:	009b      	lsls	r3, r3, #2
    427a:	2210      	movs	r2, #16
    427c:	4694      	mov	ip, r2
    427e:	44bc      	add	ip, r7
    4280:	4463      	add	r3, ip
    4282:	3b08      	subs	r3, #8
    4284:	681a      	ldr	r2, [r3, #0]
    4286:	230e      	movs	r3, #14
    4288:	18fb      	adds	r3, r7, r3
    428a:	781b      	ldrb	r3, [r3, #0]
    428c:	01db      	lsls	r3, r3, #7
    428e:	18d3      	adds	r3, r2, r3
    4290:	e000      	b.n	4294 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    4292:	2300      	movs	r3, #0
}
    4294:	0018      	movs	r0, r3
    4296:	46bd      	mov	sp, r7
    4298:	b004      	add	sp, #16
    429a:	bd80      	pop	{r7, pc}
    429c:	41004400 	.word	0x41004400

000042a0 <adc_is_syncing>:
{
    42a0:	b580      	push	{r7, lr}
    42a2:	b084      	sub	sp, #16
    42a4:	af00      	add	r7, sp, #0
    42a6:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    42a8:	687b      	ldr	r3, [r7, #4]
    42aa:	681b      	ldr	r3, [r3, #0]
    42ac:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    42ae:	68fb      	ldr	r3, [r7, #12]
    42b0:	7e5b      	ldrb	r3, [r3, #25]
    42b2:	b2db      	uxtb	r3, r3
    42b4:	b25b      	sxtb	r3, r3
    42b6:	2b00      	cmp	r3, #0
    42b8:	da01      	bge.n	42be <adc_is_syncing+0x1e>
		return true;
    42ba:	2301      	movs	r3, #1
    42bc:	e000      	b.n	42c0 <adc_is_syncing+0x20>
	return false;
    42be:	2300      	movs	r3, #0
}
    42c0:	0018      	movs	r0, r3
    42c2:	46bd      	mov	sp, r7
    42c4:	b004      	add	sp, #16
    42c6:	bd80      	pop	{r7, pc}

000042c8 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    42c8:	b580      	push	{r7, lr}
    42ca:	b086      	sub	sp, #24
    42cc:	af00      	add	r7, sp, #0
    42ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    42d0:	687b      	ldr	r3, [r7, #4]
    42d2:	681b      	ldr	r3, [r3, #0]
    42d4:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    42d6:	693b      	ldr	r3, [r7, #16]
    42d8:	7e1b      	ldrb	r3, [r3, #24]
    42da:	b2db      	uxtb	r3, r3
    42dc:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    42de:	2300      	movs	r3, #0
    42e0:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    42e2:	68fb      	ldr	r3, [r7, #12]
    42e4:	2201      	movs	r2, #1
    42e6:	4013      	ands	r3, r2
    42e8:	d003      	beq.n	42f2 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    42ea:	697b      	ldr	r3, [r7, #20]
    42ec:	2201      	movs	r2, #1
    42ee:	4313      	orrs	r3, r2
    42f0:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    42f2:	68fb      	ldr	r3, [r7, #12]
    42f4:	2204      	movs	r2, #4
    42f6:	4013      	ands	r3, r2
    42f8:	d003      	beq.n	4302 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    42fa:	697b      	ldr	r3, [r7, #20]
    42fc:	2202      	movs	r2, #2
    42fe:	4313      	orrs	r3, r2
    4300:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4302:	68fb      	ldr	r3, [r7, #12]
    4304:	2202      	movs	r2, #2
    4306:	4013      	ands	r3, r2
    4308:	d003      	beq.n	4312 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    430a:	697b      	ldr	r3, [r7, #20]
    430c:	2204      	movs	r2, #4
    430e:	4313      	orrs	r3, r2
    4310:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    4312:	697b      	ldr	r3, [r7, #20]
}
    4314:	0018      	movs	r0, r3
    4316:	46bd      	mov	sp, r7
    4318:	b006      	add	sp, #24
    431a:	bd80      	pop	{r7, pc}

0000431c <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    431c:	b580      	push	{r7, lr}
    431e:	b084      	sub	sp, #16
    4320:	af00      	add	r7, sp, #0
    4322:	6078      	str	r0, [r7, #4]
    4324:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4326:	687b      	ldr	r3, [r7, #4]
    4328:	681b      	ldr	r3, [r3, #0]
    432a:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    432c:	2300      	movs	r3, #0
    432e:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    4330:	683b      	ldr	r3, [r7, #0]
    4332:	2201      	movs	r2, #1
    4334:	4013      	ands	r3, r2
    4336:	d003      	beq.n	4340 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    4338:	68fb      	ldr	r3, [r7, #12]
    433a:	2201      	movs	r2, #1
    433c:	4313      	orrs	r3, r2
    433e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    4340:	683b      	ldr	r3, [r7, #0]
    4342:	2202      	movs	r2, #2
    4344:	4013      	ands	r3, r2
    4346:	d003      	beq.n	4350 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    4348:	68fb      	ldr	r3, [r7, #12]
    434a:	2204      	movs	r2, #4
    434c:	4313      	orrs	r3, r2
    434e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    4350:	683b      	ldr	r3, [r7, #0]
    4352:	2204      	movs	r2, #4
    4354:	4013      	ands	r3, r2
    4356:	d003      	beq.n	4360 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    4358:	68fb      	ldr	r3, [r7, #12]
    435a:	2202      	movs	r2, #2
    435c:	4313      	orrs	r3, r2
    435e:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    4360:	68fb      	ldr	r3, [r7, #12]
    4362:	b2da      	uxtb	r2, r3
    4364:	68bb      	ldr	r3, [r7, #8]
    4366:	761a      	strb	r2, [r3, #24]
}
    4368:	46c0      	nop			; (mov r8, r8)
    436a:	46bd      	mov	sp, r7
    436c:	b004      	add	sp, #16
    436e:	bd80      	pop	{r7, pc}

00004370 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    4370:	b580      	push	{r7, lr}
    4372:	b084      	sub	sp, #16
    4374:	af00      	add	r7, sp, #0
    4376:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4378:	687b      	ldr	r3, [r7, #4]
    437a:	681b      	ldr	r3, [r3, #0]
    437c:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    437e:	46c0      	nop			; (mov r8, r8)
    4380:	687b      	ldr	r3, [r7, #4]
    4382:	0018      	movs	r0, r3
    4384:	4b0e      	ldr	r3, [pc, #56]	; (43c0 <adc_enable+0x50>)
    4386:	4798      	blx	r3
    4388:	1e03      	subs	r3, r0, #0
    438a:	d1f9      	bne.n	4380 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    438c:	68fb      	ldr	r3, [r7, #12]
    438e:	220f      	movs	r2, #15
    4390:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    4392:	68fb      	ldr	r3, [r7, #12]
    4394:	220f      	movs	r2, #15
    4396:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    4398:	68fb      	ldr	r3, [r7, #12]
    439a:	781b      	ldrb	r3, [r3, #0]
    439c:	b2db      	uxtb	r3, r3
    439e:	2202      	movs	r2, #2
    43a0:	4313      	orrs	r3, r2
    43a2:	b2da      	uxtb	r2, r3
    43a4:	68fb      	ldr	r3, [r7, #12]
    43a6:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    43a8:	46c0      	nop			; (mov r8, r8)
    43aa:	687b      	ldr	r3, [r7, #4]
    43ac:	0018      	movs	r0, r3
    43ae:	4b04      	ldr	r3, [pc, #16]	; (43c0 <adc_enable+0x50>)
    43b0:	4798      	blx	r3
    43b2:	1e03      	subs	r3, r0, #0
    43b4:	d1f9      	bne.n	43aa <adc_enable+0x3a>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    43b6:	2300      	movs	r3, #0
}
    43b8:	0018      	movs	r0, r3
    43ba:	46bd      	mov	sp, r7
    43bc:	b004      	add	sp, #16
    43be:	bd80      	pop	{r7, pc}
    43c0:	000042a1 	.word	0x000042a1

000043c4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    43c4:	b580      	push	{r7, lr}
    43c6:	b084      	sub	sp, #16
    43c8:	af00      	add	r7, sp, #0
    43ca:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    43cc:	687b      	ldr	r3, [r7, #4]
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    43d2:	46c0      	nop			; (mov r8, r8)
    43d4:	687b      	ldr	r3, [r7, #4]
    43d6:	0018      	movs	r0, r3
    43d8:	4b0b      	ldr	r3, [pc, #44]	; (4408 <adc_start_conversion+0x44>)
    43da:	4798      	blx	r3
    43dc:	1e03      	subs	r3, r0, #0
    43de:	d1f9      	bne.n	43d4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    43e0:	68fb      	ldr	r3, [r7, #12]
    43e2:	7b1b      	ldrb	r3, [r3, #12]
    43e4:	b2db      	uxtb	r3, r3
    43e6:	2202      	movs	r2, #2
    43e8:	4313      	orrs	r3, r2
    43ea:	b2da      	uxtb	r2, r3
    43ec:	68fb      	ldr	r3, [r7, #12]
    43ee:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    43f0:	46c0      	nop			; (mov r8, r8)
    43f2:	687b      	ldr	r3, [r7, #4]
    43f4:	0018      	movs	r0, r3
    43f6:	4b04      	ldr	r3, [pc, #16]	; (4408 <adc_start_conversion+0x44>)
    43f8:	4798      	blx	r3
    43fa:	1e03      	subs	r3, r0, #0
    43fc:	d1f9      	bne.n	43f2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    43fe:	46c0      	nop			; (mov r8, r8)
    4400:	46bd      	mov	sp, r7
    4402:	b004      	add	sp, #16
    4404:	bd80      	pop	{r7, pc}
    4406:	46c0      	nop			; (mov r8, r8)
    4408:	000042a1 	.word	0x000042a1

0000440c <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    440c:	b580      	push	{r7, lr}
    440e:	b084      	sub	sp, #16
    4410:	af00      	add	r7, sp, #0
    4412:	6078      	str	r0, [r7, #4]
    4414:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    4416:	687b      	ldr	r3, [r7, #4]
    4418:	0018      	movs	r0, r3
    441a:	4b18      	ldr	r3, [pc, #96]	; (447c <adc_read+0x70>)
    441c:	4798      	blx	r3
    441e:	0002      	movs	r2, r0
    4420:	2301      	movs	r3, #1
    4422:	4013      	ands	r3, r2
    4424:	d101      	bne.n	442a <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    4426:	2305      	movs	r3, #5
    4428:	e023      	b.n	4472 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    442a:	687b      	ldr	r3, [r7, #4]
    442c:	681b      	ldr	r3, [r3, #0]
    442e:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    4430:	46c0      	nop			; (mov r8, r8)
    4432:	687b      	ldr	r3, [r7, #4]
    4434:	0018      	movs	r0, r3
    4436:	4b12      	ldr	r3, [pc, #72]	; (4480 <adc_read+0x74>)
    4438:	4798      	blx	r3
    443a:	1e03      	subs	r3, r0, #0
    443c:	d1f9      	bne.n	4432 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    443e:	68fb      	ldr	r3, [r7, #12]
    4440:	8b5b      	ldrh	r3, [r3, #26]
    4442:	b29a      	uxth	r2, r3
    4444:	683b      	ldr	r3, [r7, #0]
    4446:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    4448:	687b      	ldr	r3, [r7, #4]
    444a:	2101      	movs	r1, #1
    444c:	0018      	movs	r0, r3
    444e:	4b0d      	ldr	r3, [pc, #52]	; (4484 <adc_read+0x78>)
    4450:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    4452:	687b      	ldr	r3, [r7, #4]
    4454:	0018      	movs	r0, r3
    4456:	4b09      	ldr	r3, [pc, #36]	; (447c <adc_read+0x70>)
    4458:	4798      	blx	r3
    445a:	0002      	movs	r2, r0
    445c:	2304      	movs	r3, #4
    445e:	4013      	ands	r3, r2
    4460:	d006      	beq.n	4470 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    4462:	687b      	ldr	r3, [r7, #4]
    4464:	2104      	movs	r1, #4
    4466:	0018      	movs	r0, r3
    4468:	4b06      	ldr	r3, [pc, #24]	; (4484 <adc_read+0x78>)
    446a:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    446c:	231e      	movs	r3, #30
    446e:	e000      	b.n	4472 <adc_read+0x66>
	}

	return STATUS_OK;
    4470:	2300      	movs	r3, #0
}
    4472:	0018      	movs	r0, r3
    4474:	46bd      	mov	sp, r7
    4476:	b004      	add	sp, #16
    4478:	bd80      	pop	{r7, pc}
    447a:	46c0      	nop			; (mov r8, r8)
    447c:	000042c9 	.word	0x000042c9
    4480:	000042a1 	.word	0x000042a1
    4484:	0000431d 	.word	0x0000431d

00004488 <port_get_group_from_gpio_pin>:
{
    4488:	b580      	push	{r7, lr}
    448a:	b082      	sub	sp, #8
    448c:	af00      	add	r7, sp, #0
    448e:	0002      	movs	r2, r0
    4490:	1dfb      	adds	r3, r7, #7
    4492:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4494:	1dfb      	adds	r3, r7, #7
    4496:	781b      	ldrb	r3, [r3, #0]
    4498:	0018      	movs	r0, r3
    449a:	4b03      	ldr	r3, [pc, #12]	; (44a8 <port_get_group_from_gpio_pin+0x20>)
    449c:	4798      	blx	r3
    449e:	0003      	movs	r3, r0
}
    44a0:	0018      	movs	r0, r3
    44a2:	46bd      	mov	sp, r7
    44a4:	b002      	add	sp, #8
    44a6:	bd80      	pop	{r7, pc}
    44a8:	00004241 	.word	0x00004241

000044ac <port_get_config_defaults>:
{
    44ac:	b580      	push	{r7, lr}
    44ae:	b082      	sub	sp, #8
    44b0:	af00      	add	r7, sp, #0
    44b2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    44b4:	687b      	ldr	r3, [r7, #4]
    44b6:	2200      	movs	r2, #0
    44b8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    44ba:	687b      	ldr	r3, [r7, #4]
    44bc:	2201      	movs	r2, #1
    44be:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    44c0:	687b      	ldr	r3, [r7, #4]
    44c2:	2200      	movs	r2, #0
    44c4:	709a      	strb	r2, [r3, #2]
}
    44c6:	46c0      	nop			; (mov r8, r8)
    44c8:	46bd      	mov	sp, r7
    44ca:	b002      	add	sp, #8
    44cc:	bd80      	pop	{r7, pc}
	...

000044d0 <port_pin_set_output_level>:
{
    44d0:	b580      	push	{r7, lr}
    44d2:	b084      	sub	sp, #16
    44d4:	af00      	add	r7, sp, #0
    44d6:	0002      	movs	r2, r0
    44d8:	1dfb      	adds	r3, r7, #7
    44da:	701a      	strb	r2, [r3, #0]
    44dc:	1dbb      	adds	r3, r7, #6
    44de:	1c0a      	adds	r2, r1, #0
    44e0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    44e2:	1dfb      	adds	r3, r7, #7
    44e4:	781b      	ldrb	r3, [r3, #0]
    44e6:	0018      	movs	r0, r3
    44e8:	4b0d      	ldr	r3, [pc, #52]	; (4520 <port_pin_set_output_level+0x50>)
    44ea:	4798      	blx	r3
    44ec:	0003      	movs	r3, r0
    44ee:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    44f0:	1dfb      	adds	r3, r7, #7
    44f2:	781b      	ldrb	r3, [r3, #0]
    44f4:	221f      	movs	r2, #31
    44f6:	4013      	ands	r3, r2
    44f8:	2201      	movs	r2, #1
    44fa:	409a      	lsls	r2, r3
    44fc:	0013      	movs	r3, r2
    44fe:	60bb      	str	r3, [r7, #8]
	if (level) {
    4500:	1dbb      	adds	r3, r7, #6
    4502:	781b      	ldrb	r3, [r3, #0]
    4504:	2b00      	cmp	r3, #0
    4506:	d003      	beq.n	4510 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4508:	68fb      	ldr	r3, [r7, #12]
    450a:	68ba      	ldr	r2, [r7, #8]
    450c:	619a      	str	r2, [r3, #24]
}
    450e:	e002      	b.n	4516 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    4510:	68fb      	ldr	r3, [r7, #12]
    4512:	68ba      	ldr	r2, [r7, #8]
    4514:	615a      	str	r2, [r3, #20]
}
    4516:	46c0      	nop			; (mov r8, r8)
    4518:	46bd      	mov	sp, r7
    451a:	b004      	add	sp, #16
    451c:	bd80      	pop	{r7, pc}
    451e:	46c0      	nop			; (mov r8, r8)
    4520:	00004489 	.word	0x00004489

00004524 <msgeq7_init>:
#include "msgeq7.h"

struct adc_module adc_instance;

void msgeq7_init()
{
    4524:	b580      	push	{r7, lr}
    4526:	af00      	add	r7, sp, #0
	msgeq7_port_init();
    4528:	4b03      	ldr	r3, [pc, #12]	; (4538 <msgeq7_init+0x14>)
    452a:	4798      	blx	r3
	msgeq7_adc_init();
    452c:	4b03      	ldr	r3, [pc, #12]	; (453c <msgeq7_init+0x18>)
    452e:	4798      	blx	r3
}
    4530:	46c0      	nop			; (mov r8, r8)
    4532:	46bd      	mov	sp, r7
    4534:	bd80      	pop	{r7, pc}
    4536:	46c0      	nop			; (mov r8, r8)
    4538:	00004541 	.word	0x00004541
    453c:	00004599 	.word	0x00004599

00004540 <msgeq7_port_init>:

void msgeq7_port_init()
{
    4540:	b580      	push	{r7, lr}
    4542:	b082      	sub	sp, #8
    4544:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    4546:	1d3b      	adds	r3, r7, #4
    4548:	0018      	movs	r0, r3
    454a:	4b10      	ldr	r3, [pc, #64]	; (458c <msgeq7_port_init+0x4c>)
    454c:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    454e:	1d3b      	adds	r3, r7, #4
    4550:	2202      	movs	r2, #2
    4552:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4554:	1d3b      	adds	r3, r7, #4
    4556:	2201      	movs	r2, #1
    4558:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(MSGEQ7_PIN_RESET,&config_port_pin);
    455a:	1d3b      	adds	r3, r7, #4
    455c:	0019      	movs	r1, r3
    455e:	2019      	movs	r0, #25
    4560:	4b0b      	ldr	r3, [pc, #44]	; (4590 <msgeq7_port_init+0x50>)
    4562:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_RESET,false);
    4564:	2100      	movs	r1, #0
    4566:	2019      	movs	r0, #25
    4568:	4b0a      	ldr	r3, [pc, #40]	; (4594 <msgeq7_port_init+0x54>)
    456a:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    456c:	1d3b      	adds	r3, r7, #4
    456e:	2201      	movs	r2, #1
    4570:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(MSGEQ7_PIN_STROBE,&config_port_pin);
    4572:	1d3b      	adds	r3, r7, #4
    4574:	0019      	movs	r1, r3
    4576:	2018      	movs	r0, #24
    4578:	4b05      	ldr	r3, [pc, #20]	; (4590 <msgeq7_port_init+0x50>)
    457a:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_STROBE,true);
    457c:	2101      	movs	r1, #1
    457e:	2018      	movs	r0, #24
    4580:	4b04      	ldr	r3, [pc, #16]	; (4594 <msgeq7_port_init+0x54>)
    4582:	4798      	blx	r3
}
    4584:	46c0      	nop			; (mov r8, r8)
    4586:	46bd      	mov	sp, r7
    4588:	b002      	add	sp, #8
    458a:	bd80      	pop	{r7, pc}
    458c:	000044ad 	.word	0x000044ad
    4590:	00000ce5 	.word	0x00000ce5
    4594:	000044d1 	.word	0x000044d1

00004598 <msgeq7_adc_init>:

void msgeq7_adc_init()
{
    4598:	b580      	push	{r7, lr}
    459a:	b08c      	sub	sp, #48	; 0x30
    459c:	af00      	add	r7, sp, #0
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    459e:	003b      	movs	r3, r7
    45a0:	0018      	movs	r0, r3
    45a2:	4b0e      	ldr	r3, [pc, #56]	; (45dc <msgeq7_adc_init+0x44>)
    45a4:	4798      	blx	r3
	
	config_adc.gain_factor = ADC_GAIN_FACTOR_1X;
    45a6:	003b      	movs	r3, r7
    45a8:	2200      	movs	r2, #0
    45aa:	609a      	str	r2, [r3, #8]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN2; //PIN_PB08
    45ac:	003b      	movs	r3, r7
    45ae:	2202      	movs	r2, #2
    45b0:	731a      	strb	r2, [r3, #12]
	config_adc.differential_mode = false;
    45b2:	003b      	movs	r3, r7
    45b4:	2200      	movs	r2, #0
    45b6:	74da      	strb	r2, [r3, #19]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    45b8:	003b      	movs	r3, r7
    45ba:	22c0      	movs	r2, #192	; 0xc0
    45bc:	0152      	lsls	r2, r2, #5
    45be:	81da      	strh	r2, [r3, #14]
	
	adc_init(&adc_instance, ADC, &config_adc);
    45c0:	003a      	movs	r2, r7
    45c2:	4907      	ldr	r1, [pc, #28]	; (45e0 <msgeq7_adc_init+0x48>)
    45c4:	4b07      	ldr	r3, [pc, #28]	; (45e4 <msgeq7_adc_init+0x4c>)
    45c6:	0018      	movs	r0, r3
    45c8:	4b07      	ldr	r3, [pc, #28]	; (45e8 <msgeq7_adc_init+0x50>)
    45ca:	4798      	blx	r3
	adc_enable(&adc_instance);
    45cc:	4b05      	ldr	r3, [pc, #20]	; (45e4 <msgeq7_adc_init+0x4c>)
    45ce:	0018      	movs	r0, r3
    45d0:	4b06      	ldr	r3, [pc, #24]	; (45ec <msgeq7_adc_init+0x54>)
    45d2:	4798      	blx	r3
}
    45d4:	46c0      	nop			; (mov r8, r8)
    45d6:	46bd      	mov	sp, r7
    45d8:	b00c      	add	sp, #48	; 0x30
    45da:	bd80      	pop	{r7, pc}
    45dc:	0000028d 	.word	0x0000028d
    45e0:	42004000 	.word	0x42004000
    45e4:	20000488 	.word	0x20000488
    45e8:	000008dd 	.word	0x000008dd
    45ec:	00004371 	.word	0x00004371

000045f0 <single_conversion>:


uint16_t single_conversion()
{
    45f0:	b580      	push	{r7, lr}
    45f2:	b082      	sub	sp, #8
    45f4:	af00      	add	r7, sp, #0
	adc_start_conversion(&adc_instance);
    45f6:	4b09      	ldr	r3, [pc, #36]	; (461c <single_conversion+0x2c>)
    45f8:	0018      	movs	r0, r3
    45fa:	4b09      	ldr	r3, [pc, #36]	; (4620 <single_conversion+0x30>)
    45fc:	4798      	blx	r3
	uint16_t result;

	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
    45fe:	1dba      	adds	r2, r7, #6
    4600:	4b06      	ldr	r3, [pc, #24]	; (461c <single_conversion+0x2c>)
    4602:	0011      	movs	r1, r2
    4604:	0018      	movs	r0, r3
    4606:	4b07      	ldr	r3, [pc, #28]	; (4624 <single_conversion+0x34>)
    4608:	4798      	blx	r3
    460a:	0003      	movs	r3, r0
    460c:	2b05      	cmp	r3, #5
    460e:	d0f6      	beq.n	45fe <single_conversion+0xe>
	return result;
    4610:	1dbb      	adds	r3, r7, #6
    4612:	881b      	ldrh	r3, [r3, #0]
}
    4614:	0018      	movs	r0, r3
    4616:	46bd      	mov	sp, r7
    4618:	b002      	add	sp, #8
    461a:	bd80      	pop	{r7, pc}
    461c:	20000488 	.word	0x20000488
    4620:	000043c5 	.word	0x000043c5
    4624:	0000440d 	.word	0x0000440d

00004628 <msgeq7_all_bands>:

void msgeq7_all_bands(uint16_t bands[])
{
    4628:	b5f0      	push	{r4, r5, r6, r7, lr}
    462a:	b08f      	sub	sp, #60	; 0x3c
    462c:	af00      	add	r7, sp, #0
    462e:	62f8      	str	r0, [r7, #44]	; 0x2c
	port_pin_set_output_level(MSGEQ7_PIN_RESET,true);
    4630:	2101      	movs	r1, #1
    4632:	2019      	movs	r0, #25
    4634:	4b53      	ldr	r3, [pc, #332]	; (4784 <msgeq7_all_bands+0x15c>)
    4636:	4798      	blx	r3
	delay_us(1);
    4638:	2000      	movs	r0, #0
    463a:	4b53      	ldr	r3, [pc, #332]	; (4788 <msgeq7_all_bands+0x160>)
    463c:	4798      	blx	r3
    463e:	0003      	movs	r3, r0
    4640:	613b      	str	r3, [r7, #16]
    4642:	2300      	movs	r3, #0
    4644:	617b      	str	r3, [r7, #20]
    4646:	4b51      	ldr	r3, [pc, #324]	; (478c <msgeq7_all_bands+0x164>)
    4648:	2400      	movs	r4, #0
    464a:	6938      	ldr	r0, [r7, #16]
    464c:	6979      	ldr	r1, [r7, #20]
    464e:	18c0      	adds	r0, r0, r3
    4650:	4161      	adcs	r1, r4
    4652:	4c4f      	ldr	r4, [pc, #316]	; (4790 <msgeq7_all_bands+0x168>)
    4654:	4a4f      	ldr	r2, [pc, #316]	; (4794 <msgeq7_all_bands+0x16c>)
    4656:	2300      	movs	r3, #0
    4658:	47a0      	blx	r4
    465a:	0003      	movs	r3, r0
    465c:	000c      	movs	r4, r1
    465e:	0018      	movs	r0, r3
    4660:	4b4d      	ldr	r3, [pc, #308]	; (4798 <msgeq7_all_bands+0x170>)
    4662:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_RESET,false);
    4664:	2100      	movs	r1, #0
    4666:	2019      	movs	r0, #25
    4668:	4b46      	ldr	r3, [pc, #280]	; (4784 <msgeq7_all_bands+0x15c>)
    466a:	4798      	blx	r3
	delay_us(75);
    466c:	2000      	movs	r0, #0
    466e:	4b46      	ldr	r3, [pc, #280]	; (4788 <msgeq7_all_bands+0x160>)
    4670:	4798      	blx	r3
    4672:	0003      	movs	r3, r0
    4674:	61bb      	str	r3, [r7, #24]
    4676:	2300      	movs	r3, #0
    4678:	61fb      	str	r3, [r7, #28]
    467a:	69bb      	ldr	r3, [r7, #24]
    467c:	69fc      	ldr	r4, [r7, #28]
    467e:	0f9a      	lsrs	r2, r3, #30
    4680:	00a0      	lsls	r0, r4, #2
    4682:	6278      	str	r0, [r7, #36]	; 0x24
    4684:	6a78      	ldr	r0, [r7, #36]	; 0x24
    4686:	4310      	orrs	r0, r2
    4688:	6278      	str	r0, [r7, #36]	; 0x24
    468a:	009b      	lsls	r3, r3, #2
    468c:	623b      	str	r3, [r7, #32]
    468e:	6a3b      	ldr	r3, [r7, #32]
    4690:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    4692:	69b9      	ldr	r1, [r7, #24]
    4694:	69fa      	ldr	r2, [r7, #28]
    4696:	185b      	adds	r3, r3, r1
    4698:	4154      	adcs	r4, r2
    469a:	0f1a      	lsrs	r2, r3, #28
    469c:	0126      	lsls	r6, r4, #4
    469e:	4316      	orrs	r6, r2
    46a0:	011d      	lsls	r5, r3, #4
    46a2:	1aed      	subs	r5, r5, r3
    46a4:	41a6      	sbcs	r6, r4
    46a6:	002b      	movs	r3, r5
    46a8:	0034      	movs	r4, r6
    46aa:	4938      	ldr	r1, [pc, #224]	; (478c <msgeq7_all_bands+0x164>)
    46ac:	2200      	movs	r2, #0
    46ae:	185b      	adds	r3, r3, r1
    46b0:	4154      	adcs	r4, r2
    46b2:	0018      	movs	r0, r3
    46b4:	0021      	movs	r1, r4
    46b6:	4c36      	ldr	r4, [pc, #216]	; (4790 <msgeq7_all_bands+0x168>)
    46b8:	4a36      	ldr	r2, [pc, #216]	; (4794 <msgeq7_all_bands+0x16c>)
    46ba:	2300      	movs	r3, #0
    46bc:	47a0      	blx	r4
    46be:	0003      	movs	r3, r0
    46c0:	000c      	movs	r4, r1
    46c2:	0018      	movs	r0, r3
    46c4:	4b34      	ldr	r3, [pc, #208]	; (4798 <msgeq7_all_bands+0x170>)
    46c6:	4798      	blx	r3
	
	for (int i=0;i<7;i++)
    46c8:	2300      	movs	r3, #0
    46ca:	637b      	str	r3, [r7, #52]	; 0x34
    46cc:	e052      	b.n	4774 <msgeq7_all_bands+0x14c>
	{
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,false);
    46ce:	2100      	movs	r1, #0
    46d0:	2018      	movs	r0, #24
    46d2:	4b2c      	ldr	r3, [pc, #176]	; (4784 <msgeq7_all_bands+0x15c>)
    46d4:	4798      	blx	r3
		delay_us(40);
    46d6:	2000      	movs	r0, #0
    46d8:	4b2b      	ldr	r3, [pc, #172]	; (4788 <msgeq7_all_bands+0x160>)
    46da:	4798      	blx	r3
    46dc:	0003      	movs	r3, r0
    46de:	60bb      	str	r3, [r7, #8]
    46e0:	2300      	movs	r3, #0
    46e2:	60fb      	str	r3, [r7, #12]
    46e4:	4c2d      	ldr	r4, [pc, #180]	; (479c <msgeq7_all_bands+0x174>)
    46e6:	2228      	movs	r2, #40	; 0x28
    46e8:	2300      	movs	r3, #0
    46ea:	68b8      	ldr	r0, [r7, #8]
    46ec:	68f9      	ldr	r1, [r7, #12]
    46ee:	47a0      	blx	r4
    46f0:	0003      	movs	r3, r0
    46f2:	000c      	movs	r4, r1
    46f4:	0019      	movs	r1, r3
    46f6:	0022      	movs	r2, r4
    46f8:	4b24      	ldr	r3, [pc, #144]	; (478c <msgeq7_all_bands+0x164>)
    46fa:	2400      	movs	r4, #0
    46fc:	18c9      	adds	r1, r1, r3
    46fe:	4162      	adcs	r2, r4
    4700:	0008      	movs	r0, r1
    4702:	0011      	movs	r1, r2
    4704:	4c22      	ldr	r4, [pc, #136]	; (4790 <msgeq7_all_bands+0x168>)
    4706:	4a23      	ldr	r2, [pc, #140]	; (4794 <msgeq7_all_bands+0x16c>)
    4708:	2300      	movs	r3, #0
    470a:	47a0      	blx	r4
    470c:	0003      	movs	r3, r0
    470e:	000c      	movs	r4, r1
    4710:	0018      	movs	r0, r3
    4712:	4b21      	ldr	r3, [pc, #132]	; (4798 <msgeq7_all_bands+0x170>)
    4714:	4798      	blx	r3
		bands[i] = single_conversion();
    4716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4718:	005b      	lsls	r3, r3, #1
    471a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    471c:	18d4      	adds	r4, r2, r3
    471e:	4b20      	ldr	r3, [pc, #128]	; (47a0 <msgeq7_all_bands+0x178>)
    4720:	4798      	blx	r3
    4722:	0003      	movs	r3, r0
    4724:	8023      	strh	r3, [r4, #0]
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,true);
    4726:	2101      	movs	r1, #1
    4728:	2018      	movs	r0, #24
    472a:	4b16      	ldr	r3, [pc, #88]	; (4784 <msgeq7_all_bands+0x15c>)
    472c:	4798      	blx	r3
		delay_us(40);
    472e:	2000      	movs	r0, #0
    4730:	4b15      	ldr	r3, [pc, #84]	; (4788 <msgeq7_all_bands+0x160>)
    4732:	4798      	blx	r3
    4734:	0003      	movs	r3, r0
    4736:	603b      	str	r3, [r7, #0]
    4738:	2300      	movs	r3, #0
    473a:	607b      	str	r3, [r7, #4]
    473c:	4c17      	ldr	r4, [pc, #92]	; (479c <msgeq7_all_bands+0x174>)
    473e:	2228      	movs	r2, #40	; 0x28
    4740:	2300      	movs	r3, #0
    4742:	6838      	ldr	r0, [r7, #0]
    4744:	6879      	ldr	r1, [r7, #4]
    4746:	47a0      	blx	r4
    4748:	0003      	movs	r3, r0
    474a:	000c      	movs	r4, r1
    474c:	0019      	movs	r1, r3
    474e:	0022      	movs	r2, r4
    4750:	4b0e      	ldr	r3, [pc, #56]	; (478c <msgeq7_all_bands+0x164>)
    4752:	2400      	movs	r4, #0
    4754:	18c9      	adds	r1, r1, r3
    4756:	4162      	adcs	r2, r4
    4758:	0008      	movs	r0, r1
    475a:	0011      	movs	r1, r2
    475c:	4c0c      	ldr	r4, [pc, #48]	; (4790 <msgeq7_all_bands+0x168>)
    475e:	4a0d      	ldr	r2, [pc, #52]	; (4794 <msgeq7_all_bands+0x16c>)
    4760:	2300      	movs	r3, #0
    4762:	47a0      	blx	r4
    4764:	0003      	movs	r3, r0
    4766:	000c      	movs	r4, r1
    4768:	0018      	movs	r0, r3
    476a:	4b0b      	ldr	r3, [pc, #44]	; (4798 <msgeq7_all_bands+0x170>)
    476c:	4798      	blx	r3
	for (int i=0;i<7;i++)
    476e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4770:	3301      	adds	r3, #1
    4772:	637b      	str	r3, [r7, #52]	; 0x34
    4774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4776:	2b06      	cmp	r3, #6
    4778:	dda9      	ble.n	46ce <msgeq7_all_bands+0xa6>
	}
    477a:	46c0      	nop			; (mov r8, r8)
    477c:	46bd      	mov	sp, r7
    477e:	b00f      	add	sp, #60	; 0x3c
    4780:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4782:	46c0      	nop			; (mov r8, r8)
    4784:	000044d1 	.word	0x000044d1
    4788:	00005921 	.word	0x00005921
    478c:	006acfbf 	.word	0x006acfbf
    4790:	000066f5 	.word	0x000066f5
    4794:	006acfc0 	.word	0x006acfc0
    4798:	20000001 	.word	0x20000001
    479c:	00006735 	.word	0x00006735
    47a0:	000045f1 	.word	0x000045f1

000047a4 <NVIC_EnableIRQ>:
{
    47a4:	b580      	push	{r7, lr}
    47a6:	b082      	sub	sp, #8
    47a8:	af00      	add	r7, sp, #0
    47aa:	0002      	movs	r2, r0
    47ac:	1dfb      	adds	r3, r7, #7
    47ae:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    47b0:	4b06      	ldr	r3, [pc, #24]	; (47cc <NVIC_EnableIRQ+0x28>)
    47b2:	1dfa      	adds	r2, r7, #7
    47b4:	7812      	ldrb	r2, [r2, #0]
    47b6:	0011      	movs	r1, r2
    47b8:	221f      	movs	r2, #31
    47ba:	400a      	ands	r2, r1
    47bc:	2101      	movs	r1, #1
    47be:	4091      	lsls	r1, r2
    47c0:	000a      	movs	r2, r1
    47c2:	601a      	str	r2, [r3, #0]
}
    47c4:	46c0      	nop			; (mov r8, r8)
    47c6:	46bd      	mov	sp, r7
    47c8:	b002      	add	sp, #8
    47ca:	bd80      	pop	{r7, pc}
    47cc:	e000e100 	.word	0xe000e100

000047d0 <NVIC_SetPriority>:
{
    47d0:	b5b0      	push	{r4, r5, r7, lr}
    47d2:	b082      	sub	sp, #8
    47d4:	af00      	add	r7, sp, #0
    47d6:	0002      	movs	r2, r0
    47d8:	6039      	str	r1, [r7, #0]
    47da:	1dfb      	adds	r3, r7, #7
    47dc:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    47de:	1dfb      	adds	r3, r7, #7
    47e0:	781b      	ldrb	r3, [r3, #0]
    47e2:	2b7f      	cmp	r3, #127	; 0x7f
    47e4:	d932      	bls.n	484c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    47e6:	4c2f      	ldr	r4, [pc, #188]	; (48a4 <NVIC_SetPriority+0xd4>)
    47e8:	1dfb      	adds	r3, r7, #7
    47ea:	781b      	ldrb	r3, [r3, #0]
    47ec:	001a      	movs	r2, r3
    47ee:	230f      	movs	r3, #15
    47f0:	4013      	ands	r3, r2
    47f2:	3b08      	subs	r3, #8
    47f4:	0899      	lsrs	r1, r3, #2
    47f6:	4a2b      	ldr	r2, [pc, #172]	; (48a4 <NVIC_SetPriority+0xd4>)
    47f8:	1dfb      	adds	r3, r7, #7
    47fa:	781b      	ldrb	r3, [r3, #0]
    47fc:	0018      	movs	r0, r3
    47fe:	230f      	movs	r3, #15
    4800:	4003      	ands	r3, r0
    4802:	3b08      	subs	r3, #8
    4804:	089b      	lsrs	r3, r3, #2
    4806:	3306      	adds	r3, #6
    4808:	009b      	lsls	r3, r3, #2
    480a:	18d3      	adds	r3, r2, r3
    480c:	3304      	adds	r3, #4
    480e:	681b      	ldr	r3, [r3, #0]
    4810:	1dfa      	adds	r2, r7, #7
    4812:	7812      	ldrb	r2, [r2, #0]
    4814:	0010      	movs	r0, r2
    4816:	2203      	movs	r2, #3
    4818:	4002      	ands	r2, r0
    481a:	00d2      	lsls	r2, r2, #3
    481c:	20ff      	movs	r0, #255	; 0xff
    481e:	4090      	lsls	r0, r2
    4820:	0002      	movs	r2, r0
    4822:	43d2      	mvns	r2, r2
    4824:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    4826:	683b      	ldr	r3, [r7, #0]
    4828:	019b      	lsls	r3, r3, #6
    482a:	20ff      	movs	r0, #255	; 0xff
    482c:	4018      	ands	r0, r3
    482e:	1dfb      	adds	r3, r7, #7
    4830:	781b      	ldrb	r3, [r3, #0]
    4832:	001d      	movs	r5, r3
    4834:	2303      	movs	r3, #3
    4836:	402b      	ands	r3, r5
    4838:	00db      	lsls	r3, r3, #3
    483a:	4098      	lsls	r0, r3
    483c:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    483e:	431a      	orrs	r2, r3
    4840:	1d8b      	adds	r3, r1, #6
    4842:	009b      	lsls	r3, r3, #2
    4844:	18e3      	adds	r3, r4, r3
    4846:	3304      	adds	r3, #4
    4848:	601a      	str	r2, [r3, #0]
}
    484a:	e027      	b.n	489c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    484c:	4c16      	ldr	r4, [pc, #88]	; (48a8 <NVIC_SetPriority+0xd8>)
    484e:	1dfb      	adds	r3, r7, #7
    4850:	781b      	ldrb	r3, [r3, #0]
    4852:	b25b      	sxtb	r3, r3
    4854:	089b      	lsrs	r3, r3, #2
    4856:	4914      	ldr	r1, [pc, #80]	; (48a8 <NVIC_SetPriority+0xd8>)
    4858:	1dfa      	adds	r2, r7, #7
    485a:	7812      	ldrb	r2, [r2, #0]
    485c:	b252      	sxtb	r2, r2
    485e:	0892      	lsrs	r2, r2, #2
    4860:	32c0      	adds	r2, #192	; 0xc0
    4862:	0092      	lsls	r2, r2, #2
    4864:	5852      	ldr	r2, [r2, r1]
    4866:	1df9      	adds	r1, r7, #7
    4868:	7809      	ldrb	r1, [r1, #0]
    486a:	0008      	movs	r0, r1
    486c:	2103      	movs	r1, #3
    486e:	4001      	ands	r1, r0
    4870:	00c9      	lsls	r1, r1, #3
    4872:	20ff      	movs	r0, #255	; 0xff
    4874:	4088      	lsls	r0, r1
    4876:	0001      	movs	r1, r0
    4878:	43c9      	mvns	r1, r1
    487a:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    487c:	683a      	ldr	r2, [r7, #0]
    487e:	0192      	lsls	r2, r2, #6
    4880:	20ff      	movs	r0, #255	; 0xff
    4882:	4010      	ands	r0, r2
    4884:	1dfa      	adds	r2, r7, #7
    4886:	7812      	ldrb	r2, [r2, #0]
    4888:	0015      	movs	r5, r2
    488a:	2203      	movs	r2, #3
    488c:	402a      	ands	r2, r5
    488e:	00d2      	lsls	r2, r2, #3
    4890:	4090      	lsls	r0, r2
    4892:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    4894:	430a      	orrs	r2, r1
    4896:	33c0      	adds	r3, #192	; 0xc0
    4898:	009b      	lsls	r3, r3, #2
    489a:	511a      	str	r2, [r3, r4]
}
    489c:	46c0      	nop			; (mov r8, r8)
    489e:	46bd      	mov	sp, r7
    48a0:	b002      	add	sp, #8
    48a2:	bdb0      	pop	{r4, r5, r7, pc}
    48a4:	e000ed00 	.word	0xe000ed00
    48a8:	e000e100 	.word	0xe000e100

000048ac <port_get_config_defaults>:
{
    48ac:	b580      	push	{r7, lr}
    48ae:	b082      	sub	sp, #8
    48b0:	af00      	add	r7, sp, #0
    48b2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    48b4:	687b      	ldr	r3, [r7, #4]
    48b6:	2200      	movs	r2, #0
    48b8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    48ba:	687b      	ldr	r3, [r7, #4]
    48bc:	2201      	movs	r2, #1
    48be:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    48c0:	687b      	ldr	r3, [r7, #4]
    48c2:	2200      	movs	r2, #0
    48c4:	709a      	strb	r2, [r3, #2]
}
    48c6:	46c0      	nop			; (mov r8, r8)
    48c8:	46bd      	mov	sp, r7
    48ca:	b002      	add	sp, #8
    48cc:	bd80      	pop	{r7, pc}
	...

000048d0 <pwm_port>:
#include "ble_uart.h"
#include "i2c.h"
#include "uart.h"

void pwm_port(void)
{
    48d0:	b580      	push	{r7, lr}
    48d2:	b082      	sub	sp, #8
    48d4:	af00      	add	r7, sp, #0
	pwm_count = 0;
    48d6:	4b0b      	ldr	r3, [pc, #44]	; (4904 <pwm_port+0x34>)
    48d8:	2200      	movs	r2, #0
    48da:	601a      	str	r2, [r3, #0]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    48dc:	1d3b      	adds	r3, r7, #4
    48de:	0018      	movs	r0, r3
    48e0:	4b09      	ldr	r3, [pc, #36]	; (4908 <pwm_port+0x38>)
    48e2:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    48e4:	1d3b      	adds	r3, r7, #4
    48e6:	2200      	movs	r2, #0
    48e8:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    48ea:	1d3b      	adds	r3, r7, #4
    48ec:	2201      	movs	r2, #1
    48ee:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA02,&config_port_pin);
    48f0:	1d3b      	adds	r3, r7, #4
    48f2:	0019      	movs	r1, r3
    48f4:	2002      	movs	r0, #2
    48f6:	4b05      	ldr	r3, [pc, #20]	; (490c <pwm_port+0x3c>)
    48f8:	4798      	blx	r3
}
    48fa:	46c0      	nop			; (mov r8, r8)
    48fc:	46bd      	mov	sp, r7
    48fe:	b002      	add	sp, #8
    4900:	bd80      	pop	{r7, pc}
    4902:	46c0      	nop			; (mov r8, r8)
    4904:	20000478 	.word	0x20000478
    4908:	000048ad 	.word	0x000048ad
    490c:	00000ce5 	.word	0x00000ce5

00004910 <init_TC3>:

void init_TC3(void)
{	
    4910:	b580      	push	{r7, lr}
    4912:	af00      	add	r7, sp, #0
	PM->APBCMASK.reg |= PM_APBCMASK_TC3;
    4914:	4b15      	ldr	r3, [pc, #84]	; (496c <init_TC3+0x5c>)
    4916:	4a15      	ldr	r2, [pc, #84]	; (496c <init_TC3+0x5c>)
    4918:	6a12      	ldr	r2, [r2, #32]
    491a:	2180      	movs	r1, #128	; 0x80
    491c:	0109      	lsls	r1, r1, #4
    491e:	430a      	orrs	r2, r1
    4920:	621a      	str	r2, [r3, #32]

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_ID_TCC2_TC3;
    4922:	4b13      	ldr	r3, [pc, #76]	; (4970 <init_TC3+0x60>)
    4924:	4a13      	ldr	r2, [pc, #76]	; (4974 <init_TC3+0x64>)
    4926:	805a      	strh	r2, [r3, #2]
	
	TC3->COUNT16.CTRLA.reg = TC_CTRLA_MODE_COUNT16 | TC_CTRLA_WAVEGEN_MFRQ |
    4928:	4b13      	ldr	r3, [pc, #76]	; (4978 <init_TC3+0x68>)
    492a:	4a14      	ldr	r2, [pc, #80]	; (497c <init_TC3+0x6c>)
    492c:	801a      	strh	r2, [r3, #0]
	TC_CTRLA_PRESCALER_DIV1 | TC_CTRLA_PRESCSYNC_RESYNC;

	TC3->COUNT16.COUNT.reg = 0;
    492e:	4b12      	ldr	r3, [pc, #72]	; (4978 <init_TC3+0x68>)
    4930:	2200      	movs	r2, #0
    4932:	821a      	strh	r2, [r3, #16]
	TC3->COUNT16.CC[0].reg = COMPARE_MATCH;
    4934:	4b10      	ldr	r3, [pc, #64]	; (4978 <init_TC3+0x68>)
    4936:	4a12      	ldr	r2, [pc, #72]	; (4980 <init_TC3+0x70>)
    4938:	831a      	strh	r2, [r3, #24]
	
	
	TC3->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    493a:	4a0f      	ldr	r2, [pc, #60]	; (4978 <init_TC3+0x68>)
    493c:	4b0e      	ldr	r3, [pc, #56]	; (4978 <init_TC3+0x68>)
    493e:	881b      	ldrh	r3, [r3, #0]
    4940:	b29b      	uxth	r3, r3
    4942:	2102      	movs	r1, #2
    4944:	430b      	orrs	r3, r1
    4946:	b29b      	uxth	r3, r3
    4948:	8013      	strh	r3, [r2, #0]
	TC3->COUNT16.DBGCTRL.reg = TC_DBGCTRL_DBGRUN;
    494a:	4b0b      	ldr	r3, [pc, #44]	; (4978 <init_TC3+0x68>)
    494c:	2201      	movs	r2, #1
    494e:	721a      	strb	r2, [r3, #8]
	TC3->COUNT16.INTENSET.reg = TC_INTENSET_MC0;
    4950:	4b09      	ldr	r3, [pc, #36]	; (4978 <init_TC3+0x68>)
    4952:	2210      	movs	r2, #16
    4954:	735a      	strb	r2, [r3, #13]
	NVIC_EnableIRQ(TC3_IRQn);
    4956:	2012      	movs	r0, #18
    4958:	4b0a      	ldr	r3, [pc, #40]	; (4984 <init_TC3+0x74>)
    495a:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,2);
    495c:	2102      	movs	r1, #2
    495e:	2012      	movs	r0, #18
    4960:	4b09      	ldr	r3, [pc, #36]	; (4988 <init_TC3+0x78>)
    4962:	4798      	blx	r3
	/*PORT->Group[0].DIRSET.reg=18;
	PORT->Group[0].PINCFG[18].bit.PMUXEN=1;
	PORT->Group[0].PMUX[9].bit.PMUXE = 4;*/
}
    4964:	46c0      	nop			; (mov r8, r8)
    4966:	46bd      	mov	sp, r7
    4968:	bd80      	pop	{r7, pc}
    496a:	46c0      	nop			; (mov r8, r8)
    496c:	40000400 	.word	0x40000400
    4970:	40000c00 	.word	0x40000c00
    4974:	0000401b 	.word	0x0000401b
    4978:	42002c00 	.word	0x42002c00
    497c:	00002020 	.word	0x00002020
    4980:	ffff9c40 	.word	0xffff9c40
    4984:	000047a5 	.word	0x000047a5
    4988:	000047d1 	.word	0x000047d1

0000498c <TC3_Handler>:
uint16_t values_bands[6];

bool a_okayish = true;
char buffer[64];
void TC3_Handler()
{
    498c:	b580      	push	{r7, lr}
    498e:	af00      	add	r7, sp, #0
	static bool blink_state = false;
	// Overflow interrupt triggered
	if ( TC3->COUNT16.INTFLAG.bit.OVF == 1 )
    4990:	4b10      	ldr	r3, [pc, #64]	; (49d4 <TC3_Handler+0x48>)
    4992:	7b9b      	ldrb	r3, [r3, #14]
    4994:	07db      	lsls	r3, r3, #31
    4996:	0fdb      	lsrs	r3, r3, #31
    4998:	b2db      	uxtb	r3, r3
    499a:	2b01      	cmp	r3, #1
    499c:	d116      	bne.n	49cc <TC3_Handler+0x40>
	{
		should_update = true;	
    499e:	4b0e      	ldr	r3, [pc, #56]	; (49d8 <TC3_Handler+0x4c>)
    49a0:	2201      	movs	r2, #1
    49a2:	701a      	strb	r2, [r3, #0]
		pwm_count++;
    49a4:	4b0d      	ldr	r3, [pc, #52]	; (49dc <TC3_Handler+0x50>)
    49a6:	681b      	ldr	r3, [r3, #0]
    49a8:	1c5a      	adds	r2, r3, #1
    49aa:	4b0c      	ldr	r3, [pc, #48]	; (49dc <TC3_Handler+0x50>)
    49ac:	601a      	str	r2, [r3, #0]
		
		

		if (pwm_count > PWM_FREQ)
    49ae:	4b0b      	ldr	r3, [pc, #44]	; (49dc <TC3_Handler+0x50>)
    49b0:	681b      	ldr	r3, [r3, #0]
    49b2:	2bc8      	cmp	r3, #200	; 0xc8
    49b4:	dd07      	ble.n	49c6 <TC3_Handler+0x3a>
		{
			/*if ((seconds % 300) == 0)
			{
				execute_order_66 = true;
			}*/
			seconds++;
    49b6:	4b0a      	ldr	r3, [pc, #40]	; (49e0 <TC3_Handler+0x54>)
    49b8:	681b      	ldr	r3, [r3, #0]
    49ba:	1c5a      	adds	r2, r3, #1
    49bc:	4b08      	ldr	r3, [pc, #32]	; (49e0 <TC3_Handler+0x54>)
    49be:	601a      	str	r2, [r3, #0]
			if (party)
			{
				sprintf(buffer,"%d %d %d %d %d %d",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
				ble_uart_write(buffer);
			}*/
			pwm_count = 0;
    49c0:	4b06      	ldr	r3, [pc, #24]	; (49dc <TC3_Handler+0x50>)
    49c2:	2200      	movs	r2, #0
    49c4:	601a      	str	r2, [r3, #0]
		}
		TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0;
    49c6:	4b03      	ldr	r3, [pc, #12]	; (49d4 <TC3_Handler+0x48>)
    49c8:	2210      	movs	r2, #16
    49ca:	739a      	strb	r2, [r3, #14]
	}
}
    49cc:	46c0      	nop			; (mov r8, r8)
    49ce:	46bd      	mov	sp, r7
    49d0:	bd80      	pop	{r7, pc}
    49d2:	46c0      	nop			; (mov r8, r8)
    49d4:	42002c00 	.word	0x42002c00
    49d8:	20000451 	.word	0x20000451
    49dc:	20000478 	.word	0x20000478
    49e0:	20000458 	.word	0x20000458

000049e4 <things_to_do>:

void things_to_do(void)
{
    49e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49e6:	b087      	sub	sp, #28
    49e8:	af04      	add	r7, sp, #16
	if (party)
    49ea:	4b27      	ldr	r3, [pc, #156]	; (4a88 <things_to_do+0xa4>)
    49ec:	781b      	ldrb	r3, [r3, #0]
    49ee:	b2db      	uxtb	r3, r3
    49f0:	2b00      	cmp	r3, #0
    49f2:	d026      	beq.n	4a42 <things_to_do+0x5e>
	{
		msgeq7_all_bands(values_bands);
    49f4:	4b25      	ldr	r3, [pc, #148]	; (4a8c <things_to_do+0xa8>)
    49f6:	0018      	movs	r0, r3
    49f8:	4b25      	ldr	r3, [pc, #148]	; (4a90 <things_to_do+0xac>)
    49fa:	4798      	blx	r3
		party_lights(values_bands);
    49fc:	4b23      	ldr	r3, [pc, #140]	; (4a8c <things_to_do+0xa8>)
    49fe:	0018      	movs	r0, r3
    4a00:	4b24      	ldr	r3, [pc, #144]	; (4a94 <things_to_do+0xb0>)
    4a02:	4798      	blx	r3
		sprintf(buffer,"%04d %04d %04d %04d %04d %04d\r\n",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
    4a04:	4b21      	ldr	r3, [pc, #132]	; (4a8c <things_to_do+0xa8>)
    4a06:	881b      	ldrh	r3, [r3, #0]
    4a08:	001e      	movs	r6, r3
    4a0a:	4b20      	ldr	r3, [pc, #128]	; (4a8c <things_to_do+0xa8>)
    4a0c:	885b      	ldrh	r3, [r3, #2]
    4a0e:	607b      	str	r3, [r7, #4]
    4a10:	4b1e      	ldr	r3, [pc, #120]	; (4a8c <things_to_do+0xa8>)
    4a12:	889b      	ldrh	r3, [r3, #4]
    4a14:	001a      	movs	r2, r3
    4a16:	4b1d      	ldr	r3, [pc, #116]	; (4a8c <things_to_do+0xa8>)
    4a18:	88db      	ldrh	r3, [r3, #6]
    4a1a:	001c      	movs	r4, r3
    4a1c:	4b1b      	ldr	r3, [pc, #108]	; (4a8c <things_to_do+0xa8>)
    4a1e:	891b      	ldrh	r3, [r3, #8]
    4a20:	001d      	movs	r5, r3
    4a22:	4b1a      	ldr	r3, [pc, #104]	; (4a8c <things_to_do+0xa8>)
    4a24:	895b      	ldrh	r3, [r3, #10]
    4a26:	491c      	ldr	r1, [pc, #112]	; (4a98 <things_to_do+0xb4>)
    4a28:	481c      	ldr	r0, [pc, #112]	; (4a9c <things_to_do+0xb8>)
    4a2a:	9303      	str	r3, [sp, #12]
    4a2c:	9502      	str	r5, [sp, #8]
    4a2e:	9401      	str	r4, [sp, #4]
    4a30:	9200      	str	r2, [sp, #0]
    4a32:	687b      	ldr	r3, [r7, #4]
    4a34:	0032      	movs	r2, r6
    4a36:	4c1a      	ldr	r4, [pc, #104]	; (4aa0 <things_to_do+0xbc>)
    4a38:	47a0      	blx	r4
		uart_write(&buffer);
    4a3a:	4b18      	ldr	r3, [pc, #96]	; (4a9c <things_to_do+0xb8>)
    4a3c:	0018      	movs	r0, r3
    4a3e:	4b19      	ldr	r3, [pc, #100]	; (4aa4 <things_to_do+0xc0>)
    4a40:	4798      	blx	r3
		
	}
	if ((pwm_count % 25) == 0)
    4a42:	4b19      	ldr	r3, [pc, #100]	; (4aa8 <things_to_do+0xc4>)
    4a44:	681a      	ldr	r2, [r3, #0]
    4a46:	4b19      	ldr	r3, [pc, #100]	; (4aac <things_to_do+0xc8>)
    4a48:	2119      	movs	r1, #25
    4a4a:	0010      	movs	r0, r2
    4a4c:	4798      	blx	r3
    4a4e:	1e0b      	subs	r3, r1, #0
    4a50:	d10e      	bne.n	4a70 <things_to_do+0x8c>
	{
		if (flashy2)
    4a52:	4b17      	ldr	r3, [pc, #92]	; (4ab0 <things_to_do+0xcc>)
    4a54:	781b      	ldrb	r3, [r3, #0]
    4a56:	b2db      	uxtb	r3, r3
    4a58:	2b00      	cmp	r3, #0
    4a5a:	d002      	beq.n	4a62 <things_to_do+0x7e>
		{
			flashy_flash1();
    4a5c:	4b15      	ldr	r3, [pc, #84]	; (4ab4 <things_to_do+0xd0>)
    4a5e:	4798      	blx	r3
    4a60:	e006      	b.n	4a70 <things_to_do+0x8c>
		}
		else if (flashy1)
    4a62:	4b15      	ldr	r3, [pc, #84]	; (4ab8 <things_to_do+0xd4>)
    4a64:	781b      	ldrb	r3, [r3, #0]
    4a66:	b2db      	uxtb	r3, r3
    4a68:	2b00      	cmp	r3, #0
    4a6a:	d001      	beq.n	4a70 <things_to_do+0x8c>
		{
			flashy_flash2();
    4a6c:	4b13      	ldr	r3, [pc, #76]	; (4abc <things_to_do+0xd8>)
    4a6e:	4798      	blx	r3
		}
	}
	if (flashyfade)
    4a70:	4b13      	ldr	r3, [pc, #76]	; (4ac0 <things_to_do+0xdc>)
    4a72:	781b      	ldrb	r3, [r3, #0]
    4a74:	b2db      	uxtb	r3, r3
    4a76:	2b00      	cmp	r3, #0
    4a78:	d001      	beq.n	4a7e <things_to_do+0x9a>
	{
		flashy_fades();
    4a7a:	4b12      	ldr	r3, [pc, #72]	; (4ac4 <things_to_do+0xe0>)
    4a7c:	4798      	blx	r3
	/*if (party)
	{
		sprintf(buffer,"%d %d %d %d %d %d\r\n",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
		ble_uart_write(buffer);
	}*/
}
    4a7e:	46c0      	nop			; (mov r8, r8)
    4a80:	46bd      	mov	sp, r7
    4a82:	b003      	add	sp, #12
    4a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a86:	46c0      	nop			; (mov r8, r8)
    4a88:	200003c1 	.word	0x200003c1
    4a8c:	200004d0 	.word	0x200004d0
    4a90:	00004629 	.word	0x00004629
    4a94:	0000302d 	.word	0x0000302d
    4a98:	00009a1c 	.word	0x00009a1c
    4a9c:	20000490 	.word	0x20000490
    4aa0:	00008245 	.word	0x00008245
    4aa4:	000050b1 	.word	0x000050b1
    4aa8:	20000478 	.word	0x20000478
    4aac:	000066e9 	.word	0x000066e9
    4ab0:	200003af 	.word	0x200003af
    4ab4:	00003295 	.word	0x00003295
    4ab8:	2000031b 	.word	0x2000031b
    4abc:	0000349d 	.word	0x0000349d
    4ac0:	200003cb 	.word	0x200003cb
    4ac4:	000036ed 	.word	0x000036ed

00004ac8 <system_pinmux_get_group_from_gpio_pin>:
{
    4ac8:	b580      	push	{r7, lr}
    4aca:	b084      	sub	sp, #16
    4acc:	af00      	add	r7, sp, #0
    4ace:	0002      	movs	r2, r0
    4ad0:	1dfb      	adds	r3, r7, #7
    4ad2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4ad4:	230f      	movs	r3, #15
    4ad6:	18fb      	adds	r3, r7, r3
    4ad8:	1dfa      	adds	r2, r7, #7
    4ada:	7812      	ldrb	r2, [r2, #0]
    4adc:	09d2      	lsrs	r2, r2, #7
    4ade:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4ae0:	230e      	movs	r3, #14
    4ae2:	18fb      	adds	r3, r7, r3
    4ae4:	1dfa      	adds	r2, r7, #7
    4ae6:	7812      	ldrb	r2, [r2, #0]
    4ae8:	0952      	lsrs	r2, r2, #5
    4aea:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4aec:	4b0d      	ldr	r3, [pc, #52]	; (4b24 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4aee:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    4af0:	230f      	movs	r3, #15
    4af2:	18fb      	adds	r3, r7, r3
    4af4:	781b      	ldrb	r3, [r3, #0]
    4af6:	2b00      	cmp	r3, #0
    4af8:	d10f      	bne.n	4b1a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4afa:	230f      	movs	r3, #15
    4afc:	18fb      	adds	r3, r7, r3
    4afe:	781b      	ldrb	r3, [r3, #0]
    4b00:	009b      	lsls	r3, r3, #2
    4b02:	2210      	movs	r2, #16
    4b04:	4694      	mov	ip, r2
    4b06:	44bc      	add	ip, r7
    4b08:	4463      	add	r3, ip
    4b0a:	3b08      	subs	r3, #8
    4b0c:	681a      	ldr	r2, [r3, #0]
    4b0e:	230e      	movs	r3, #14
    4b10:	18fb      	adds	r3, r7, r3
    4b12:	781b      	ldrb	r3, [r3, #0]
    4b14:	01db      	lsls	r3, r3, #7
    4b16:	18d3      	adds	r3, r2, r3
    4b18:	e000      	b.n	4b1c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    4b1a:	2300      	movs	r3, #0
}
    4b1c:	0018      	movs	r0, r3
    4b1e:	46bd      	mov	sp, r7
    4b20:	b004      	add	sp, #16
    4b22:	bd80      	pop	{r7, pc}
    4b24:	41004400 	.word	0x41004400

00004b28 <port_get_group_from_gpio_pin>:
{
    4b28:	b580      	push	{r7, lr}
    4b2a:	b082      	sub	sp, #8
    4b2c:	af00      	add	r7, sp, #0
    4b2e:	0002      	movs	r2, r0
    4b30:	1dfb      	adds	r3, r7, #7
    4b32:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4b34:	1dfb      	adds	r3, r7, #7
    4b36:	781b      	ldrb	r3, [r3, #0]
    4b38:	0018      	movs	r0, r3
    4b3a:	4b03      	ldr	r3, [pc, #12]	; (4b48 <port_get_group_from_gpio_pin+0x20>)
    4b3c:	4798      	blx	r3
    4b3e:	0003      	movs	r3, r0
}
    4b40:	0018      	movs	r0, r3
    4b42:	46bd      	mov	sp, r7
    4b44:	b002      	add	sp, #8
    4b46:	bd80      	pop	{r7, pc}
    4b48:	00004ac9 	.word	0x00004ac9

00004b4c <port_get_config_defaults>:
{
    4b4c:	b580      	push	{r7, lr}
    4b4e:	b082      	sub	sp, #8
    4b50:	af00      	add	r7, sp, #0
    4b52:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    4b54:	687b      	ldr	r3, [r7, #4]
    4b56:	2200      	movs	r2, #0
    4b58:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4b5a:	687b      	ldr	r3, [r7, #4]
    4b5c:	2201      	movs	r2, #1
    4b5e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    4b60:	687b      	ldr	r3, [r7, #4]
    4b62:	2200      	movs	r2, #0
    4b64:	709a      	strb	r2, [r3, #2]
}
    4b66:	46c0      	nop			; (mov r8, r8)
    4b68:	46bd      	mov	sp, r7
    4b6a:	b002      	add	sp, #8
    4b6c:	bd80      	pop	{r7, pc}
	...

00004b70 <port_pin_set_output_level>:
{
    4b70:	b580      	push	{r7, lr}
    4b72:	b084      	sub	sp, #16
    4b74:	af00      	add	r7, sp, #0
    4b76:	0002      	movs	r2, r0
    4b78:	1dfb      	adds	r3, r7, #7
    4b7a:	701a      	strb	r2, [r3, #0]
    4b7c:	1dbb      	adds	r3, r7, #6
    4b7e:	1c0a      	adds	r2, r1, #0
    4b80:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4b82:	1dfb      	adds	r3, r7, #7
    4b84:	781b      	ldrb	r3, [r3, #0]
    4b86:	0018      	movs	r0, r3
    4b88:	4b0d      	ldr	r3, [pc, #52]	; (4bc0 <port_pin_set_output_level+0x50>)
    4b8a:	4798      	blx	r3
    4b8c:	0003      	movs	r3, r0
    4b8e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4b90:	1dfb      	adds	r3, r7, #7
    4b92:	781b      	ldrb	r3, [r3, #0]
    4b94:	221f      	movs	r2, #31
    4b96:	4013      	ands	r3, r2
    4b98:	2201      	movs	r2, #1
    4b9a:	409a      	lsls	r2, r3
    4b9c:	0013      	movs	r3, r2
    4b9e:	60bb      	str	r3, [r7, #8]
	if (level) {
    4ba0:	1dbb      	adds	r3, r7, #6
    4ba2:	781b      	ldrb	r3, [r3, #0]
    4ba4:	2b00      	cmp	r3, #0
    4ba6:	d003      	beq.n	4bb0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4ba8:	68fb      	ldr	r3, [r7, #12]
    4baa:	68ba      	ldr	r2, [r7, #8]
    4bac:	619a      	str	r2, [r3, #24]
}
    4bae:	e002      	b.n	4bb6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    4bb0:	68fb      	ldr	r3, [r7, #12]
    4bb2:	68ba      	ldr	r2, [r7, #8]
    4bb4:	615a      	str	r2, [r3, #20]
}
    4bb6:	46c0      	nop			; (mov r8, r8)
    4bb8:	46bd      	mov	sp, r7
    4bba:	b004      	add	sp, #16
    4bbc:	bd80      	pop	{r7, pc}
    4bbe:	46c0      	nop			; (mov r8, r8)
    4bc0:	00004b29 	.word	0x00004b29

00004bc4 <sounds_init_pins>:
 *  Author: Andreas
 */ 
#include "sounds.h"

void sounds_init_pins(void)
{
    4bc4:	b580      	push	{r7, lr}
    4bc6:	b082      	sub	sp, #8
    4bc8:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    4bca:	1d3b      	adds	r3, r7, #4
    4bcc:	0018      	movs	r0, r3
    4bce:	4b44      	ldr	r3, [pc, #272]	; (4ce0 <sounds_init_pins+0x11c>)
    4bd0:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    4bd2:	1d3b      	adds	r3, r7, #4
    4bd4:	2201      	movs	r2, #1
    4bd6:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4bd8:	1d3b      	adds	r3, r7, #4
    4bda:	2201      	movs	r2, #1
    4bdc:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SOUNDS_PIN_SS,&config_port_pin);
    4bde:	1d3b      	adds	r3, r7, #4
    4be0:	0019      	movs	r1, r3
    4be2:	2005      	movs	r0, #5
    4be4:	4b3f      	ldr	r3, [pc, #252]	; (4ce4 <sounds_init_pins+0x120>)
    4be6:	4798      	blx	r3
	//port_pin_set_config(SOUNDS_PIN_SPDT_SEL1,&config_port_pin);
	//port_pin_set_config(SOUNDS_PIN_SPDT_SEL2,&config_port_pin);
	
	port_pin_set_config(SB_PIN_RESET,&config_port_pin);
    4be8:	1d3b      	adds	r3, r7, #4
    4bea:	0019      	movs	r1, r3
    4bec:	201c      	movs	r0, #28
    4bee:	4b3d      	ldr	r3, [pc, #244]	; (4ce4 <sounds_init_pins+0x120>)
    4bf0:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_RESET,true);
    4bf2:	2101      	movs	r1, #1
    4bf4:	201c      	movs	r0, #28
    4bf6:	4b3c      	ldr	r3, [pc, #240]	; (4ce8 <sounds_init_pins+0x124>)
    4bf8:	4798      	blx	r3
	
	
	
	
	port_pin_set_config(SB_PIN_BTN00,&config_port_pin);
    4bfa:	1d3b      	adds	r3, r7, #4
    4bfc:	0019      	movs	r1, r3
    4bfe:	200b      	movs	r0, #11
    4c00:	4b38      	ldr	r3, [pc, #224]	; (4ce4 <sounds_init_pins+0x120>)
    4c02:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN00,true);
    4c04:	2101      	movs	r1, #1
    4c06:	200b      	movs	r0, #11
    4c08:	4b37      	ldr	r3, [pc, #220]	; (4ce8 <sounds_init_pins+0x124>)
    4c0a:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN01,&config_port_pin);
    4c0c:	1d3b      	adds	r3, r7, #4
    4c0e:	0019      	movs	r1, r3
    4c10:	200c      	movs	r0, #12
    4c12:	4b34      	ldr	r3, [pc, #208]	; (4ce4 <sounds_init_pins+0x120>)
    4c14:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN01,true);
    4c16:	2101      	movs	r1, #1
    4c18:	200c      	movs	r0, #12
    4c1a:	4b33      	ldr	r3, [pc, #204]	; (4ce8 <sounds_init_pins+0x124>)
    4c1c:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN02,&config_port_pin);
    4c1e:	1d3b      	adds	r3, r7, #4
    4c20:	0019      	movs	r1, r3
    4c22:	200d      	movs	r0, #13
    4c24:	4b2f      	ldr	r3, [pc, #188]	; (4ce4 <sounds_init_pins+0x120>)
    4c26:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN02,true);
    4c28:	2101      	movs	r1, #1
    4c2a:	200d      	movs	r0, #13
    4c2c:	4b2e      	ldr	r3, [pc, #184]	; (4ce8 <sounds_init_pins+0x124>)
    4c2e:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN03,&config_port_pin);
    4c30:	1d3b      	adds	r3, r7, #4
    4c32:	0019      	movs	r1, r3
    4c34:	200e      	movs	r0, #14
    4c36:	4b2b      	ldr	r3, [pc, #172]	; (4ce4 <sounds_init_pins+0x120>)
    4c38:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN03,true);
    4c3a:	2101      	movs	r1, #1
    4c3c:	200e      	movs	r0, #14
    4c3e:	4b2a      	ldr	r3, [pc, #168]	; (4ce8 <sounds_init_pins+0x124>)
    4c40:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN04,&config_port_pin);
    4c42:	1d3b      	adds	r3, r7, #4
    4c44:	0019      	movs	r1, r3
    4c46:	200f      	movs	r0, #15
    4c48:	4b26      	ldr	r3, [pc, #152]	; (4ce4 <sounds_init_pins+0x120>)
    4c4a:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN04,true);
    4c4c:	2101      	movs	r1, #1
    4c4e:	200f      	movs	r0, #15
    4c50:	4b25      	ldr	r3, [pc, #148]	; (4ce8 <sounds_init_pins+0x124>)
    4c52:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN05,&config_port_pin);
    4c54:	1d3b      	adds	r3, r7, #4
    4c56:	0019      	movs	r1, r3
    4c58:	2010      	movs	r0, #16
    4c5a:	4b22      	ldr	r3, [pc, #136]	; (4ce4 <sounds_init_pins+0x120>)
    4c5c:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN05,true);
    4c5e:	2101      	movs	r1, #1
    4c60:	2010      	movs	r0, #16
    4c62:	4b21      	ldr	r3, [pc, #132]	; (4ce8 <sounds_init_pins+0x124>)
    4c64:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN06,&config_port_pin);
    4c66:	1d3b      	adds	r3, r7, #4
    4c68:	0019      	movs	r1, r3
    4c6a:	2011      	movs	r0, #17
    4c6c:	4b1d      	ldr	r3, [pc, #116]	; (4ce4 <sounds_init_pins+0x120>)
    4c6e:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN06,true);
    4c70:	2101      	movs	r1, #1
    4c72:	2011      	movs	r0, #17
    4c74:	4b1c      	ldr	r3, [pc, #112]	; (4ce8 <sounds_init_pins+0x124>)
    4c76:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN07,&config_port_pin);
    4c78:	1d3b      	adds	r3, r7, #4
    4c7a:	0019      	movs	r1, r3
    4c7c:	2012      	movs	r0, #18
    4c7e:	4b19      	ldr	r3, [pc, #100]	; (4ce4 <sounds_init_pins+0x120>)
    4c80:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN07,true);
    4c82:	2101      	movs	r1, #1
    4c84:	2012      	movs	r0, #18
    4c86:	4b18      	ldr	r3, [pc, #96]	; (4ce8 <sounds_init_pins+0x124>)
    4c88:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN08,&config_port_pin);
    4c8a:	1d3b      	adds	r3, r7, #4
    4c8c:	0019      	movs	r1, r3
    4c8e:	2013      	movs	r0, #19
    4c90:	4b14      	ldr	r3, [pc, #80]	; (4ce4 <sounds_init_pins+0x120>)
    4c92:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN08,true);
    4c94:	2101      	movs	r1, #1
    4c96:	2013      	movs	r0, #19
    4c98:	4b13      	ldr	r3, [pc, #76]	; (4ce8 <sounds_init_pins+0x124>)
    4c9a:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN09,&config_port_pin);
    4c9c:	1d3b      	adds	r3, r7, #4
    4c9e:	0019      	movs	r1, r3
    4ca0:	2014      	movs	r0, #20
    4ca2:	4b10      	ldr	r3, [pc, #64]	; (4ce4 <sounds_init_pins+0x120>)
    4ca4:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN09,true);
    4ca6:	2101      	movs	r1, #1
    4ca8:	2014      	movs	r0, #20
    4caa:	4b0f      	ldr	r3, [pc, #60]	; (4ce8 <sounds_init_pins+0x124>)
    4cac:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN10,&config_port_pin);
    4cae:	1d3b      	adds	r3, r7, #4
    4cb0:	0019      	movs	r1, r3
    4cb2:	2015      	movs	r0, #21
    4cb4:	4b0b      	ldr	r3, [pc, #44]	; (4ce4 <sounds_init_pins+0x120>)
    4cb6:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN10,true);
    4cb8:	2101      	movs	r1, #1
    4cba:	2015      	movs	r0, #21
    4cbc:	4b0a      	ldr	r3, [pc, #40]	; (4ce8 <sounds_init_pins+0x124>)
    4cbe:	4798      	blx	r3
	
	config_port_pin.direction = PORT_PIN_PULL_UP;
    4cc0:	1d3b      	adds	r3, r7, #4
    4cc2:	2201      	movs	r2, #1
    4cc4:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SB_PIN_UG,&config_port_pin);
    4cc6:	1d3b      	adds	r3, r7, #4
    4cc8:	0019      	movs	r1, r3
    4cca:	201b      	movs	r0, #27
    4ccc:	4b05      	ldr	r3, [pc, #20]	; (4ce4 <sounds_init_pins+0x120>)
    4cce:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_UG,true);
    4cd0:	2101      	movs	r1, #1
    4cd2:	201b      	movs	r0, #27
    4cd4:	4b04      	ldr	r3, [pc, #16]	; (4ce8 <sounds_init_pins+0x124>)
    4cd6:	4798      	blx	r3
}
    4cd8:	46c0      	nop			; (mov r8, r8)
    4cda:	46bd      	mov	sp, r7
    4cdc:	b002      	add	sp, #8
    4cde:	bd80      	pop	{r7, pc}
    4ce0:	00004b4d 	.word	0x00004b4d
    4ce4:	00000ce5 	.word	0x00000ce5
    4ce8:	00004b71 	.word	0x00004b71

00004cec <press_sb_btn_once>:
	port_pin_set_output_level(SOUNDS_PIN_SPDT_SEL1,false);
	port_pin_set_output_level(SOUNDS_PIN_SPDT_SEL2,false);
}*/

void press_sb_btn_once(uint8_t btn)
{
    4cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cee:	b083      	sub	sp, #12
    4cf0:	af00      	add	r7, sp, #0
    4cf2:	0002      	movs	r2, r0
    4cf4:	1dfb      	adds	r3, r7, #7
    4cf6:	701a      	strb	r2, [r3, #0]
	//sounds_reset();
	/*for (int i=0;i<11;i++)
	{
		if (i+11 == btn)
		{*/
			port_pin_set_output_level(btn,false);
    4cf8:	1dfb      	adds	r3, r7, #7
    4cfa:	781b      	ldrb	r3, [r3, #0]
    4cfc:	2100      	movs	r1, #0
    4cfe:	0018      	movs	r0, r3
    4d00:	4b15      	ldr	r3, [pc, #84]	; (4d58 <press_sb_btn_once+0x6c>)
    4d02:	4798      	blx	r3
		else
		{
			port_pin_set_output_level(i+11,true);
		}
	}*/
	delay_ms(150);
    4d04:	2000      	movs	r0, #0
    4d06:	4b15      	ldr	r3, [pc, #84]	; (4d5c <press_sb_btn_once+0x70>)
    4d08:	4798      	blx	r3
    4d0a:	0003      	movs	r3, r0
    4d0c:	001d      	movs	r5, r3
    4d0e:	2300      	movs	r3, #0
    4d10:	001e      	movs	r6, r3
    4d12:	4c13      	ldr	r4, [pc, #76]	; (4d60 <press_sb_btn_once+0x74>)
    4d14:	2296      	movs	r2, #150	; 0x96
    4d16:	2300      	movs	r3, #0
    4d18:	0028      	movs	r0, r5
    4d1a:	0031      	movs	r1, r6
    4d1c:	47a0      	blx	r4
    4d1e:	0003      	movs	r3, r0
    4d20:	000c      	movs	r4, r1
    4d22:	0019      	movs	r1, r3
    4d24:	0022      	movs	r2, r4
    4d26:	4b0f      	ldr	r3, [pc, #60]	; (4d64 <press_sb_btn_once+0x78>)
    4d28:	2400      	movs	r4, #0
    4d2a:	18c9      	adds	r1, r1, r3
    4d2c:	4162      	adcs	r2, r4
    4d2e:	0008      	movs	r0, r1
    4d30:	0011      	movs	r1, r2
    4d32:	4c0d      	ldr	r4, [pc, #52]	; (4d68 <press_sb_btn_once+0x7c>)
    4d34:	4a0d      	ldr	r2, [pc, #52]	; (4d6c <press_sb_btn_once+0x80>)
    4d36:	2300      	movs	r3, #0
    4d38:	47a0      	blx	r4
    4d3a:	0003      	movs	r3, r0
    4d3c:	000c      	movs	r4, r1
    4d3e:	0018      	movs	r0, r3
    4d40:	4b0b      	ldr	r3, [pc, #44]	; (4d70 <press_sb_btn_once+0x84>)
    4d42:	4798      	blx	r3
	port_pin_set_output_level(btn,true);
    4d44:	1dfb      	adds	r3, r7, #7
    4d46:	781b      	ldrb	r3, [r3, #0]
    4d48:	2101      	movs	r1, #1
    4d4a:	0018      	movs	r0, r3
    4d4c:	4b02      	ldr	r3, [pc, #8]	; (4d58 <press_sb_btn_once+0x6c>)
    4d4e:	4798      	blx	r3
}
    4d50:	46c0      	nop			; (mov r8, r8)
    4d52:	46bd      	mov	sp, r7
    4d54:	b003      	add	sp, #12
    4d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d58:	00004b71 	.word	0x00004b71
    4d5c:	00005921 	.word	0x00005921
    4d60:	00006735 	.word	0x00006735
    4d64:	00001b57 	.word	0x00001b57
    4d68:	000066f5 	.word	0x000066f5
    4d6c:	00001b58 	.word	0x00001b58
    4d70:	20000001 	.word	0x20000001

00004d74 <release_sb_btn>:
{
	port_pin_set_output_level(btn,false);
}

void release_sb_btn(uint8_t btn)
{
    4d74:	b580      	push	{r7, lr}
    4d76:	b082      	sub	sp, #8
    4d78:	af00      	add	r7, sp, #0
    4d7a:	0002      	movs	r2, r0
    4d7c:	1dfb      	adds	r3, r7, #7
    4d7e:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(btn,true);
    4d80:	1dfb      	adds	r3, r7, #7
    4d82:	781b      	ldrb	r3, [r3, #0]
    4d84:	2101      	movs	r1, #1
    4d86:	0018      	movs	r0, r3
    4d88:	4b02      	ldr	r3, [pc, #8]	; (4d94 <release_sb_btn+0x20>)
    4d8a:	4798      	blx	r3
}
    4d8c:	46c0      	nop			; (mov r8, r8)
    4d8e:	46bd      	mov	sp, r7
    4d90:	b002      	add	sp, #8
    4d92:	bd80      	pop	{r7, pc}
    4d94:	00004b71 	.word	0x00004b71

00004d98 <sounds_reset>:
{
	mcp23017_set_pins(MTH_ADDR,0x00,0x00);
}

void sounds_reset(void)
{
    4d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d9a:	b083      	sub	sp, #12
    4d9c:	af00      	add	r7, sp, #0
	port_pin_set_output_level(SB_PIN_RESET,false);
    4d9e:	2100      	movs	r1, #0
    4da0:	201c      	movs	r0, #28
    4da2:	4b35      	ldr	r3, [pc, #212]	; (4e78 <sounds_reset+0xe0>)
    4da4:	4798      	blx	r3
	delay_ms(50);
    4da6:	2000      	movs	r0, #0
    4da8:	4b34      	ldr	r3, [pc, #208]	; (4e7c <sounds_reset+0xe4>)
    4daa:	4798      	blx	r3
    4dac:	0003      	movs	r3, r0
    4dae:	603b      	str	r3, [r7, #0]
    4db0:	2300      	movs	r3, #0
    4db2:	607b      	str	r3, [r7, #4]
    4db4:	4c32      	ldr	r4, [pc, #200]	; (4e80 <sounds_reset+0xe8>)
    4db6:	2232      	movs	r2, #50	; 0x32
    4db8:	2300      	movs	r3, #0
    4dba:	6838      	ldr	r0, [r7, #0]
    4dbc:	6879      	ldr	r1, [r7, #4]
    4dbe:	47a0      	blx	r4
    4dc0:	0003      	movs	r3, r0
    4dc2:	000c      	movs	r4, r1
    4dc4:	0019      	movs	r1, r3
    4dc6:	0022      	movs	r2, r4
    4dc8:	4b2e      	ldr	r3, [pc, #184]	; (4e84 <sounds_reset+0xec>)
    4dca:	2400      	movs	r4, #0
    4dcc:	18c9      	adds	r1, r1, r3
    4dce:	4162      	adcs	r2, r4
    4dd0:	0008      	movs	r0, r1
    4dd2:	0011      	movs	r1, r2
    4dd4:	4c2c      	ldr	r4, [pc, #176]	; (4e88 <sounds_reset+0xf0>)
    4dd6:	4a2d      	ldr	r2, [pc, #180]	; (4e8c <sounds_reset+0xf4>)
    4dd8:	2300      	movs	r3, #0
    4dda:	47a0      	blx	r4
    4ddc:	0003      	movs	r3, r0
    4dde:	000c      	movs	r4, r1
    4de0:	0018      	movs	r0, r3
    4de2:	4b2b      	ldr	r3, [pc, #172]	; (4e90 <sounds_reset+0xf8>)
    4de4:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_RESET,true);
    4de6:	2101      	movs	r1, #1
    4de8:	201c      	movs	r0, #28
    4dea:	4b23      	ldr	r3, [pc, #140]	; (4e78 <sounds_reset+0xe0>)
    4dec:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN00);
    4dee:	200b      	movs	r0, #11
    4df0:	4b28      	ldr	r3, [pc, #160]	; (4e94 <sounds_reset+0xfc>)
    4df2:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN01);
    4df4:	200c      	movs	r0, #12
    4df6:	4b27      	ldr	r3, [pc, #156]	; (4e94 <sounds_reset+0xfc>)
    4df8:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN02);
    4dfa:	200d      	movs	r0, #13
    4dfc:	4b25      	ldr	r3, [pc, #148]	; (4e94 <sounds_reset+0xfc>)
    4dfe:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN03);
    4e00:	200e      	movs	r0, #14
    4e02:	4b24      	ldr	r3, [pc, #144]	; (4e94 <sounds_reset+0xfc>)
    4e04:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN04);
    4e06:	200f      	movs	r0, #15
    4e08:	4b22      	ldr	r3, [pc, #136]	; (4e94 <sounds_reset+0xfc>)
    4e0a:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN05);
    4e0c:	2010      	movs	r0, #16
    4e0e:	4b21      	ldr	r3, [pc, #132]	; (4e94 <sounds_reset+0xfc>)
    4e10:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN06);
    4e12:	2011      	movs	r0, #17
    4e14:	4b1f      	ldr	r3, [pc, #124]	; (4e94 <sounds_reset+0xfc>)
    4e16:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN07);
    4e18:	2012      	movs	r0, #18
    4e1a:	4b1e      	ldr	r3, [pc, #120]	; (4e94 <sounds_reset+0xfc>)
    4e1c:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN08);
    4e1e:	2013      	movs	r0, #19
    4e20:	4b1c      	ldr	r3, [pc, #112]	; (4e94 <sounds_reset+0xfc>)
    4e22:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN09);
    4e24:	2014      	movs	r0, #20
    4e26:	4b1b      	ldr	r3, [pc, #108]	; (4e94 <sounds_reset+0xfc>)
    4e28:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN10);
    4e2a:	2015      	movs	r0, #21
    4e2c:	4b19      	ldr	r3, [pc, #100]	; (4e94 <sounds_reset+0xfc>)
    4e2e:	4798      	blx	r3
	delay_ms(150);
    4e30:	2000      	movs	r0, #0
    4e32:	4b12      	ldr	r3, [pc, #72]	; (4e7c <sounds_reset+0xe4>)
    4e34:	4798      	blx	r3
    4e36:	0003      	movs	r3, r0
    4e38:	001d      	movs	r5, r3
    4e3a:	2300      	movs	r3, #0
    4e3c:	001e      	movs	r6, r3
    4e3e:	4c10      	ldr	r4, [pc, #64]	; (4e80 <sounds_reset+0xe8>)
    4e40:	2296      	movs	r2, #150	; 0x96
    4e42:	2300      	movs	r3, #0
    4e44:	0028      	movs	r0, r5
    4e46:	0031      	movs	r1, r6
    4e48:	47a0      	blx	r4
    4e4a:	0003      	movs	r3, r0
    4e4c:	000c      	movs	r4, r1
    4e4e:	0019      	movs	r1, r3
    4e50:	0022      	movs	r2, r4
    4e52:	4b0c      	ldr	r3, [pc, #48]	; (4e84 <sounds_reset+0xec>)
    4e54:	2400      	movs	r4, #0
    4e56:	18c9      	adds	r1, r1, r3
    4e58:	4162      	adcs	r2, r4
    4e5a:	0008      	movs	r0, r1
    4e5c:	0011      	movs	r1, r2
    4e5e:	4c0a      	ldr	r4, [pc, #40]	; (4e88 <sounds_reset+0xf0>)
    4e60:	4a0a      	ldr	r2, [pc, #40]	; (4e8c <sounds_reset+0xf4>)
    4e62:	2300      	movs	r3, #0
    4e64:	47a0      	blx	r4
    4e66:	0003      	movs	r3, r0
    4e68:	000c      	movs	r4, r1
    4e6a:	0018      	movs	r0, r3
    4e6c:	4b08      	ldr	r3, [pc, #32]	; (4e90 <sounds_reset+0xf8>)
    4e6e:	4798      	blx	r3

    4e70:	46c0      	nop			; (mov r8, r8)
    4e72:	46bd      	mov	sp, r7
    4e74:	b003      	add	sp, #12
    4e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e78:	00004b71 	.word	0x00004b71
    4e7c:	00005921 	.word	0x00005921
    4e80:	00006735 	.word	0x00006735
    4e84:	00001b57 	.word	0x00001b57
    4e88:	000066f5 	.word	0x000066f5
    4e8c:	00001b58 	.word	0x00001b58
    4e90:	20000001 	.word	0x20000001
    4e94:	00004d75 	.word	0x00004d75

00004e98 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    4e98:	b580      	push	{r7, lr}
    4e9a:	b082      	sub	sp, #8
    4e9c:	af00      	add	r7, sp, #0
    4e9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4ea0:	687b      	ldr	r3, [r7, #4]
    4ea2:	2280      	movs	r2, #128	; 0x80
    4ea4:	05d2      	lsls	r2, r2, #23
    4ea6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4ea8:	687b      	ldr	r3, [r7, #4]
    4eaa:	2200      	movs	r2, #0
    4eac:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    4eae:	687b      	ldr	r3, [r7, #4]
    4eb0:	22ff      	movs	r2, #255	; 0xff
    4eb2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	2200      	movs	r2, #0
    4eb8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4eba:	687b      	ldr	r3, [r7, #4]
    4ebc:	2200      	movs	r2, #0
    4ebe:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	2296      	movs	r2, #150	; 0x96
    4ec4:	0192      	lsls	r2, r2, #6
    4ec6:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    4ec8:	687b      	ldr	r3, [r7, #4]
    4eca:	2224      	movs	r2, #36	; 0x24
    4ecc:	2101      	movs	r1, #1
    4ece:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    4ed0:	687b      	ldr	r3, [r7, #4]
    4ed2:	2225      	movs	r2, #37	; 0x25
    4ed4:	2101      	movs	r1, #1
    4ed6:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    4ed8:	687b      	ldr	r3, [r7, #4]
    4eda:	2226      	movs	r2, #38	; 0x26
    4edc:	2100      	movs	r1, #0
    4ede:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    4ee0:	687b      	ldr	r3, [r7, #4]
    4ee2:	2227      	movs	r2, #39	; 0x27
    4ee4:	2100      	movs	r1, #0
    4ee6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    4ee8:	687b      	ldr	r3, [r7, #4]
    4eea:	2200      	movs	r2, #0
    4eec:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    4eee:	687b      	ldr	r3, [r7, #4]
    4ef0:	2288      	movs	r2, #136	; 0x88
    4ef2:	0352      	lsls	r2, r2, #13
    4ef4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    4ef6:	687b      	ldr	r3, [r7, #4]
    4ef8:	222c      	movs	r2, #44	; 0x2c
    4efa:	2100      	movs	r1, #0
    4efc:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    4efe:	687b      	ldr	r3, [r7, #4]
    4f00:	222d      	movs	r2, #45	; 0x2d
    4f02:	2100      	movs	r1, #0
    4f04:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    4f06:	687b      	ldr	r3, [r7, #4]
    4f08:	2200      	movs	r2, #0
    4f0a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    4f0c:	687b      	ldr	r3, [r7, #4]
    4f0e:	2200      	movs	r2, #0
    4f10:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    4f12:	687b      	ldr	r3, [r7, #4]
    4f14:	2200      	movs	r2, #0
    4f16:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    4f18:	687b      	ldr	r3, [r7, #4]
    4f1a:	2200      	movs	r2, #0
    4f1c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4f1e:	687b      	ldr	r3, [r7, #4]
    4f20:	2200      	movs	r2, #0
    4f22:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4f24:	687b      	ldr	r3, [r7, #4]
    4f26:	2200      	movs	r2, #0
    4f28:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4f2a:	687b      	ldr	r3, [r7, #4]
    4f2c:	2200      	movs	r2, #0
    4f2e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    4f30:	687b      	ldr	r3, [r7, #4]
    4f32:	2200      	movs	r2, #0
    4f34:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    4f36:	687b      	ldr	r3, [r7, #4]
    4f38:	2200      	movs	r2, #0
    4f3a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    4f3c:	687b      	ldr	r3, [r7, #4]
    4f3e:	2200      	movs	r2, #0
    4f40:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    4f42:	687b      	ldr	r3, [r7, #4]
    4f44:	2213      	movs	r2, #19
    4f46:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    4f48:	687b      	ldr	r3, [r7, #4]
    4f4a:	2200      	movs	r2, #0
    4f4c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    4f4e:	46c0      	nop			; (mov r8, r8)
    4f50:	46bd      	mov	sp, r7
    4f52:	b002      	add	sp, #8
    4f54:	bd80      	pop	{r7, pc}
	...

00004f58 <uart_init>:


volatile uint8_t uart_rx_buffer[MAX_RX_BUFFER_LENGTH];

void uart_init(void)
{		
    4f58:	b580      	push	{r7, lr}
    4f5a:	b092      	sub	sp, #72	; 0x48
    4f5c:	af00      	add	r7, sp, #0
 	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    4f5e:	1d3b      	adds	r3, r7, #4
    4f60:	0018      	movs	r0, r3
    4f62:	4b49      	ldr	r3, [pc, #292]	; (5088 <uart_init+0x130>)
    4f64:	4798      	blx	r3
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    4f66:	1d3b      	adds	r3, r7, #4
    4f68:	2280      	movs	r2, #128	; 0x80
    4f6a:	0352      	lsls	r2, r2, #13
    4f6c:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    4f6e:	1d3b      	adds	r3, r7, #4
    4f70:	4a46      	ldr	r2, [pc, #280]	; (508c <uart_init+0x134>)
    4f72:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    4f74:	1d3b      	adds	r3, r7, #4
    4f76:	4a46      	ldr	r2, [pc, #280]	; (5090 <uart_init+0x138>)
    4f78:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    4f7a:	1d3b      	adds	r3, r7, #4
    4f7c:	2201      	movs	r2, #1
    4f7e:	4252      	negs	r2, r2
    4f80:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    4f82:	1d3b      	adds	r3, r7, #4
    4f84:	2201      	movs	r2, #1
    4f86:	4252      	negs	r2, r2
    4f88:	63da      	str	r2, [r3, #60]	; 0x3c
	//usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
	usart_conf.generator_source = GCLK_GENERATOR_3;
    4f8a:	1d3b      	adds	r3, r7, #4
    4f8c:	222d      	movs	r2, #45	; 0x2d
    4f8e:	2103      	movs	r1, #3
    4f90:	5499      	strb	r1, [r3, r2]
	//usart_conf.stopbits = USART_STOPBITS_1;
	
		// Start the Software Reset and wait for it to finish
	CONF_STDIO_USART_MODULE->USART.CTRLA.bit.SWRST = 1 ;
    4f92:	4a40      	ldr	r2, [pc, #256]	; (5094 <uart_init+0x13c>)
    4f94:	6813      	ldr	r3, [r2, #0]
    4f96:	2101      	movs	r1, #1
    4f98:	430b      	orrs	r3, r1
    4f9a:	6013      	str	r3, [r2, #0]
	while ( CONF_STDIO_USART_MODULE->USART.CTRLA.bit.SWRST || CONF_STDIO_USART_MODULE->USART.SYNCBUSY.bit.SWRST );
    4f9c:	46c0      	nop			; (mov r8, r8)
    4f9e:	4b3d      	ldr	r3, [pc, #244]	; (5094 <uart_init+0x13c>)
    4fa0:	681b      	ldr	r3, [r3, #0]
    4fa2:	07db      	lsls	r3, r3, #31
    4fa4:	0fdb      	lsrs	r3, r3, #31
    4fa6:	b2db      	uxtb	r3, r3
    4fa8:	2b00      	cmp	r3, #0
    4faa:	d1f8      	bne.n	4f9e <uart_init+0x46>
    4fac:	4b39      	ldr	r3, [pc, #228]	; (5094 <uart_init+0x13c>)
    4fae:	69db      	ldr	r3, [r3, #28]
    4fb0:	07db      	lsls	r3, r3, #31
    4fb2:	0fdb      	lsrs	r3, r3, #31
    4fb4:	b2db      	uxtb	r3, r3
    4fb6:	2b00      	cmp	r3, #0
    4fb8:	d1f1      	bne.n	4f9e <uart_init+0x46>
	
	// Turn on peripheral clock for SERCOM being used
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;
    4fba:	4b37      	ldr	r3, [pc, #220]	; (5098 <uart_init+0x140>)
    4fbc:	4a36      	ldr	r2, [pc, #216]	; (5098 <uart_init+0x140>)
    4fbe:	6a12      	ldr	r2, [r2, #32]
    4fc0:	2180      	movs	r1, #128	; 0x80
    4fc2:	430a      	orrs	r2, r1
    4fc4:	621a      	str	r2, [r3, #32]

	//Setting clock
	GCLK->CLKCTRL.reg =
    4fc6:	4b35      	ldr	r3, [pc, #212]	; (509c <uart_init+0x144>)
    4fc8:	4a35      	ldr	r2, [pc, #212]	; (50a0 <uart_init+0x148>)
    4fca:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID( (0x19U) )	|	// connected  SERCOMx to
	GCLK_CLKCTRL_GEN_GCLK3		|	// generic Clock Generator 0
	GCLK_CLKCTRL_CLKEN;			// and enable it

	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY ); // Wait for synchronization
    4fcc:	46c0      	nop			; (mov r8, r8)
    4fce:	4b33      	ldr	r3, [pc, #204]	; (509c <uart_init+0x144>)
    4fd0:	785b      	ldrb	r3, [r3, #1]
    4fd2:	b2db      	uxtb	r3, r3
    4fd4:	b25b      	sxtb	r3, r3
    4fd6:	2b00      	cmp	r3, #0
    4fd8:	dbf9      	blt.n	4fce <uart_init+0x76>
	
	
	PORT->Group[1].DIRCLR.reg = PORT_PB03;	// RX as input
    4fda:	4a32      	ldr	r2, [pc, #200]	; (50a4 <uart_init+0x14c>)
    4fdc:	2384      	movs	r3, #132	; 0x84
    4fde:	2108      	movs	r1, #8
    4fe0:	50d1      	str	r1, [r2, r3]
	
	PORT->Group[1].DIRSET.reg = PORT_PB02;	// TX as output
    4fe2:	4a30      	ldr	r2, [pc, #192]	; (50a4 <uart_init+0x14c>)
    4fe4:	2388      	movs	r3, #136	; 0x88
    4fe6:	2104      	movs	r1, #4
    4fe8:	50d1      	str	r1, [r2, r3]
	PORT->Group[1].OUTSET.reg = PORT_PB02;	// TX idle state is high
    4fea:	4a2e      	ldr	r2, [pc, #184]	; (50a4 <uart_init+0x14c>)
    4fec:	2398      	movs	r3, #152	; 0x98
    4fee:	2104      	movs	r1, #4
    4ff0:	50d1      	str	r1, [r2, r3]

	// set port multiplexer for peripheral TX
	// =======================================
	uint32_t temp = (PORT->Group[1].PMUX[2>>1].reg) & PORT_PMUX_PMUXO( 3 );
    4ff2:	4a2c      	ldr	r2, [pc, #176]	; (50a4 <uart_init+0x14c>)
    4ff4:	23b1      	movs	r3, #177	; 0xb1
    4ff6:	5cd3      	ldrb	r3, [r2, r3]
    4ff8:	b2db      	uxtb	r3, r3
    4ffa:	001a      	movs	r2, r3
    4ffc:	2330      	movs	r3, #48	; 0x30
    4ffe:	4013      	ands	r3, r2
    5000:	647b      	str	r3, [r7, #68]	; 0x44
	PORT->Group[1].PMUX[2>>1].reg = temp | PORT_PMUX_PMUXE( 3 );
    5002:	4a28      	ldr	r2, [pc, #160]	; (50a4 <uart_init+0x14c>)
    5004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5006:	b2db      	uxtb	r3, r3
    5008:	2103      	movs	r1, #3
    500a:	430b      	orrs	r3, r1
    500c:	b2d9      	uxtb	r1, r3
    500e:	23b1      	movs	r3, #177	; 0xb1
    5010:	54d1      	strb	r1, [r2, r3]
	
	PORT->Group[1].PINCFG[2].reg = PORT_PINCFG_PMUXEN ; // Enable port mux
    5012:	4a24      	ldr	r2, [pc, #144]	; (50a4 <uart_init+0x14c>)
    5014:	23c2      	movs	r3, #194	; 0xc2
    5016:	2101      	movs	r1, #1
    5018:	54d1      	strb	r1, [r2, r3]
	temp = (PORT->Group[1].PMUX[3>>1].reg) & PORT_PMUX_PMUXO( 3 );
    501a:	4a22      	ldr	r2, [pc, #136]	; (50a4 <uart_init+0x14c>)
    501c:	23b1      	movs	r3, #177	; 0xb1
    501e:	5cd3      	ldrb	r3, [r2, r3]
    5020:	b2db      	uxtb	r3, r3
    5022:	001a      	movs	r2, r3
    5024:	2330      	movs	r3, #48	; 0x30
    5026:	4013      	ands	r3, r2
    5028:	647b      	str	r3, [r7, #68]	; 0x44
	PORT->Group[1].PMUX[3>>1].reg = temp | PORT_PMUX_PMUXE( 3 );
    502a:	4a1e      	ldr	r2, [pc, #120]	; (50a4 <uart_init+0x14c>)
    502c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    502e:	b2db      	uxtb	r3, r3
    5030:	2103      	movs	r1, #3
    5032:	430b      	orrs	r3, r1
    5034:	b2d9      	uxtb	r1, r3
    5036:	23b1      	movs	r3, #177	; 0xb1
    5038:	54d1      	strb	r1, [r2, r3]
	PORT->Group[1].PINCFG[3].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN; // Enable port mux
    503a:	4a1a      	ldr	r2, [pc, #104]	; (50a4 <uart_init+0x14c>)
    503c:	23c3      	movs	r3, #195	; 0xc3
    503e:	2103      	movs	r1, #3
    5040:	54d1      	strb	r1, [r2, r3]
	
		
	CONF_STDIO_USART_MODULE->USART.CTRLA.reg =
    5042:	4b14      	ldr	r3, [pc, #80]	; (5094 <uart_init+0x13c>)
    5044:	4a18      	ldr	r2, [pc, #96]	; (50a8 <uart_init+0x150>)
    5046:	601a      	str	r2, [r3, #0]
	
	
	// Asynchronous arithmetic mode
	// 65535 * ( 1 - sampleRateValue * baudrate / SystemCoreClock);
	// 65535 - 65535 * (sampleRateValue * baudrate / SystemCoreClock));
	CONF_STDIO_USART_MODULE->USART.BAUD.reg = 65535.0f * ( 1.0f - (16.0 * (float)(BAUDRATE)) / (float)(SYSTEM_CLK));
    5048:	4b12      	ldr	r3, [pc, #72]	; (5094 <uart_init+0x13c>)
    504a:	4a18      	ldr	r2, [pc, #96]	; (50ac <uart_init+0x154>)
    504c:	819a      	strh	r2, [r3, #12]
	//BLE_UART_SERCOM->USART.BAUD.bit.BAUD = 9600;
	
	CONF_STDIO_USART_MODULE->USART.CTRLB.reg =
    504e:	4b11      	ldr	r3, [pc, #68]	; (5094 <uart_init+0x13c>)
    5050:	22c0      	movs	r2, #192	; 0xc0
    5052:	0292      	lsls	r2, r2, #10
    5054:	605a      	str	r2, [r3, #4]
	SERCOM_USART_CTRLB_CHSIZE(0)	|	// 8 bit character size
	SERCOM_USART_CTRLB_TXEN			|	// Enable Transmit
	SERCOM_USART_CTRLB_RXEN;			// Enable Receive

	// Get Synced
	while (CONF_STDIO_USART_MODULE->USART.SYNCBUSY.bit.CTRLB);
    5056:	46c0      	nop			; (mov r8, r8)
    5058:	4b0e      	ldr	r3, [pc, #56]	; (5094 <uart_init+0x13c>)
    505a:	69db      	ldr	r3, [r3, #28]
    505c:	075b      	lsls	r3, r3, #29
    505e:	0fdb      	lsrs	r3, r3, #31
    5060:	b2db      	uxtb	r3, r3
    5062:	2b00      	cmp	r3, #0
    5064:	d1f8      	bne.n	5058 <uart_init+0x100>
	/*// Enable interrupts
	NVIC_EnableIRQ(SERCOM2_IRQn);
	NVIC_SetPriority(SERCOM2_IRQn,1);*/
	
	// enable the peripheral block
	CONF_STDIO_USART_MODULE->USART.CTRLA.bit.ENABLE = 0x1u;
    5066:	4a0b      	ldr	r2, [pc, #44]	; (5094 <uart_init+0x13c>)
    5068:	6813      	ldr	r3, [r2, #0]
    506a:	2102      	movs	r1, #2
    506c:	430b      	orrs	r3, r1
    506e:	6013      	str	r3, [r2, #0]
	
	// Wait for sercom to enable
	while(CONF_STDIO_USART_MODULE->USART.SYNCBUSY.bit.ENABLE);
    5070:	46c0      	nop			; (mov r8, r8)
    5072:	4b08      	ldr	r3, [pc, #32]	; (5094 <uart_init+0x13c>)
    5074:	69db      	ldr	r3, [r3, #28]
    5076:	079b      	lsls	r3, r3, #30
    5078:	0fdb      	lsrs	r3, r3, #31
    507a:	b2db      	uxtb	r3, r3
    507c:	2b00      	cmp	r3, #0
    507e:	d1f8      	bne.n	5072 <uart_init+0x11a>
	
}
    5080:	46c0      	nop			; (mov r8, r8)
    5082:	46bd      	mov	sp, r7
    5084:	b012      	add	sp, #72	; 0x48
    5086:	bd80      	pop	{r7, pc}
    5088:	00004e99 	.word	0x00004e99
    508c:	00220003 	.word	0x00220003
    5090:	00230003 	.word	0x00230003
    5094:	42001c00 	.word	0x42001c00
    5098:	40000400 	.word	0x40000400
    509c:	40000c00 	.word	0x40000c00
    50a0:	00004319 	.word	0x00004319
    50a4:	41004400 	.word	0x41004400
    50a8:	40100084 	.word	0x40100084
    50ac:	ffffc503 	.word	0xffffc503

000050b0 <uart_write>:
{
	usart_read_buffer_job(&uart_instance,(uint8_t *)uart_rx_buffer, MAX_RX_BUFFER_LENGTH);
}

void uart_write(uint8_t* data)
{
    50b0:	b580      	push	{r7, lr}
    50b2:	b084      	sub	sp, #16
    50b4:	af00      	add	r7, sp, #0
    50b6:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
    50b8:	2300      	movs	r3, #0
    50ba:	60fb      	str	r3, [r7, #12]
	while(data[i] != '\0')
    50bc:	e00f      	b.n	50de <uart_write+0x2e>
	{
		if(CONF_STDIO_USART_MODULE->USART.INTFLAG.bit.DRE == 1)
    50be:	4b0d      	ldr	r3, [pc, #52]	; (50f4 <uart_write+0x44>)
    50c0:	7e1b      	ldrb	r3, [r3, #24]
    50c2:	07db      	lsls	r3, r3, #31
    50c4:	0fdb      	lsrs	r3, r3, #31
    50c6:	b2db      	uxtb	r3, r3
    50c8:	2b01      	cmp	r3, #1
    50ca:	d108      	bne.n	50de <uart_write+0x2e>
		{
			CONF_STDIO_USART_MODULE->USART.DATA.reg = (uint16_t)data[i++];
    50cc:	4909      	ldr	r1, [pc, #36]	; (50f4 <uart_write+0x44>)
    50ce:	68fb      	ldr	r3, [r7, #12]
    50d0:	1c5a      	adds	r2, r3, #1
    50d2:	60fa      	str	r2, [r7, #12]
    50d4:	687a      	ldr	r2, [r7, #4]
    50d6:	18d3      	adds	r3, r2, r3
    50d8:	781b      	ldrb	r3, [r3, #0]
    50da:	b29b      	uxth	r3, r3
    50dc:	850b      	strh	r3, [r1, #40]	; 0x28
	while(data[i] != '\0')
    50de:	687a      	ldr	r2, [r7, #4]
    50e0:	68fb      	ldr	r3, [r7, #12]
    50e2:	18d3      	adds	r3, r2, r3
    50e4:	781b      	ldrb	r3, [r3, #0]
    50e6:	2b00      	cmp	r3, #0
    50e8:	d1e9      	bne.n	50be <uart_write+0xe>
		}
	}
}
    50ea:	46c0      	nop			; (mov r8, r8)
    50ec:	46bd      	mov	sp, r7
    50ee:	b004      	add	sp, #16
    50f0:	bd80      	pop	{r7, pc}
    50f2:	46c0      	nop			; (mov r8, r8)
    50f4:	42001c00 	.word	0x42001c00

000050f8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    50f8:	b580      	push	{r7, lr}
    50fa:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    50fc:	46c0      	nop			; (mov r8, r8)
    50fe:	46bd      	mov	sp, r7
    5100:	bd80      	pop	{r7, pc}
	...

00005104 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    5104:	b580      	push	{r7, lr}
    5106:	b082      	sub	sp, #8
    5108:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    510a:	4b10      	ldr	r3, [pc, #64]	; (514c <cpu_irq_enter_critical+0x48>)
    510c:	681b      	ldr	r3, [r3, #0]
    510e:	2b00      	cmp	r3, #0
    5110:	d112      	bne.n	5138 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5112:	f3ef 8310 	mrs	r3, PRIMASK
    5116:	607b      	str	r3, [r7, #4]
  return(result);
    5118:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    511a:	2b00      	cmp	r3, #0
    511c:	d109      	bne.n	5132 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    511e:	b672      	cpsid	i
    5120:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    5124:	4b0a      	ldr	r3, [pc, #40]	; (5150 <cpu_irq_enter_critical+0x4c>)
    5126:	2200      	movs	r2, #0
    5128:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    512a:	4b0a      	ldr	r3, [pc, #40]	; (5154 <cpu_irq_enter_critical+0x50>)
    512c:	2201      	movs	r2, #1
    512e:	701a      	strb	r2, [r3, #0]
    5130:	e002      	b.n	5138 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    5132:	4b08      	ldr	r3, [pc, #32]	; (5154 <cpu_irq_enter_critical+0x50>)
    5134:	2200      	movs	r2, #0
    5136:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    5138:	4b04      	ldr	r3, [pc, #16]	; (514c <cpu_irq_enter_critical+0x48>)
    513a:	681b      	ldr	r3, [r3, #0]
    513c:	1c5a      	adds	r2, r3, #1
    513e:	4b03      	ldr	r3, [pc, #12]	; (514c <cpu_irq_enter_critical+0x48>)
    5140:	601a      	str	r2, [r3, #0]
}
    5142:	46c0      	nop			; (mov r8, r8)
    5144:	46bd      	mov	sp, r7
    5146:	b002      	add	sp, #8
    5148:	bd80      	pop	{r7, pc}
    514a:	46c0      	nop			; (mov r8, r8)
    514c:	2000028c 	.word	0x2000028c
    5150:	20000091 	.word	0x20000091
    5154:	20000290 	.word	0x20000290

00005158 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    5158:	b580      	push	{r7, lr}
    515a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    515c:	4b0b      	ldr	r3, [pc, #44]	; (518c <cpu_irq_leave_critical+0x34>)
    515e:	681b      	ldr	r3, [r3, #0]
    5160:	1e5a      	subs	r2, r3, #1
    5162:	4b0a      	ldr	r3, [pc, #40]	; (518c <cpu_irq_leave_critical+0x34>)
    5164:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    5166:	4b09      	ldr	r3, [pc, #36]	; (518c <cpu_irq_leave_critical+0x34>)
    5168:	681b      	ldr	r3, [r3, #0]
    516a:	2b00      	cmp	r3, #0
    516c:	d10a      	bne.n	5184 <cpu_irq_leave_critical+0x2c>
    516e:	4b08      	ldr	r3, [pc, #32]	; (5190 <cpu_irq_leave_critical+0x38>)
    5170:	781b      	ldrb	r3, [r3, #0]
    5172:	b2db      	uxtb	r3, r3
    5174:	2b00      	cmp	r3, #0
    5176:	d005      	beq.n	5184 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    5178:	4b06      	ldr	r3, [pc, #24]	; (5194 <cpu_irq_leave_critical+0x3c>)
    517a:	2201      	movs	r2, #1
    517c:	701a      	strb	r2, [r3, #0]
    517e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5182:	b662      	cpsie	i
	}
}
    5184:	46c0      	nop			; (mov r8, r8)
    5186:	46bd      	mov	sp, r7
    5188:	bd80      	pop	{r7, pc}
    518a:	46c0      	nop			; (mov r8, r8)
    518c:	2000028c 	.word	0x2000028c
    5190:	20000290 	.word	0x20000290
    5194:	20000091 	.word	0x20000091

00005198 <system_gclk_gen_get_config_defaults>:
{
    5198:	b580      	push	{r7, lr}
    519a:	b082      	sub	sp, #8
    519c:	af00      	add	r7, sp, #0
    519e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    51a0:	687b      	ldr	r3, [r7, #4]
    51a2:	2201      	movs	r2, #1
    51a4:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    51a6:	687b      	ldr	r3, [r7, #4]
    51a8:	2200      	movs	r2, #0
    51aa:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    51ac:	687b      	ldr	r3, [r7, #4]
    51ae:	2206      	movs	r2, #6
    51b0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    51b2:	687b      	ldr	r3, [r7, #4]
    51b4:	2200      	movs	r2, #0
    51b6:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    51b8:	687b      	ldr	r3, [r7, #4]
    51ba:	2200      	movs	r2, #0
    51bc:	725a      	strb	r2, [r3, #9]
}
    51be:	46c0      	nop			; (mov r8, r8)
    51c0:	46bd      	mov	sp, r7
    51c2:	b002      	add	sp, #8
    51c4:	bd80      	pop	{r7, pc}

000051c6 <system_clock_source_osc8m_get_config_defaults>:
{
    51c6:	b580      	push	{r7, lr}
    51c8:	b082      	sub	sp, #8
    51ca:	af00      	add	r7, sp, #0
    51cc:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    51ce:	687b      	ldr	r3, [r7, #4]
    51d0:	2203      	movs	r2, #3
    51d2:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    51d4:	687b      	ldr	r3, [r7, #4]
    51d6:	2200      	movs	r2, #0
    51d8:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    51da:	687b      	ldr	r3, [r7, #4]
    51dc:	2201      	movs	r2, #1
    51de:	709a      	strb	r2, [r3, #2]
}
    51e0:	46c0      	nop			; (mov r8, r8)
    51e2:	46bd      	mov	sp, r7
    51e4:	b002      	add	sp, #8
    51e6:	bd80      	pop	{r7, pc}

000051e8 <system_cpu_clock_set_divider>:
{
    51e8:	b580      	push	{r7, lr}
    51ea:	b082      	sub	sp, #8
    51ec:	af00      	add	r7, sp, #0
    51ee:	0002      	movs	r2, r0
    51f0:	1dfb      	adds	r3, r7, #7
    51f2:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    51f4:	4a03      	ldr	r2, [pc, #12]	; (5204 <system_cpu_clock_set_divider+0x1c>)
    51f6:	1dfb      	adds	r3, r7, #7
    51f8:	781b      	ldrb	r3, [r3, #0]
    51fa:	7213      	strb	r3, [r2, #8]
}
    51fc:	46c0      	nop			; (mov r8, r8)
    51fe:	46bd      	mov	sp, r7
    5200:	b002      	add	sp, #8
    5202:	bd80      	pop	{r7, pc}
    5204:	40000400 	.word	0x40000400

00005208 <system_apb_clock_set_divider>:
{
    5208:	b580      	push	{r7, lr}
    520a:	b082      	sub	sp, #8
    520c:	af00      	add	r7, sp, #0
    520e:	0002      	movs	r2, r0
    5210:	1dfb      	adds	r3, r7, #7
    5212:	701a      	strb	r2, [r3, #0]
    5214:	1dbb      	adds	r3, r7, #6
    5216:	1c0a      	adds	r2, r1, #0
    5218:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    521a:	1dfb      	adds	r3, r7, #7
    521c:	781b      	ldrb	r3, [r3, #0]
    521e:	2b01      	cmp	r3, #1
    5220:	d008      	beq.n	5234 <system_apb_clock_set_divider+0x2c>
    5222:	2b02      	cmp	r3, #2
    5224:	d00b      	beq.n	523e <system_apb_clock_set_divider+0x36>
    5226:	2b00      	cmp	r3, #0
    5228:	d10e      	bne.n	5248 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    522a:	4a0b      	ldr	r2, [pc, #44]	; (5258 <system_apb_clock_set_divider+0x50>)
    522c:	1dbb      	adds	r3, r7, #6
    522e:	781b      	ldrb	r3, [r3, #0]
    5230:	7253      	strb	r3, [r2, #9]
			break;
    5232:	e00b      	b.n	524c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    5234:	4a08      	ldr	r2, [pc, #32]	; (5258 <system_apb_clock_set_divider+0x50>)
    5236:	1dbb      	adds	r3, r7, #6
    5238:	781b      	ldrb	r3, [r3, #0]
    523a:	7293      	strb	r3, [r2, #10]
			break;
    523c:	e006      	b.n	524c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    523e:	4a06      	ldr	r2, [pc, #24]	; (5258 <system_apb_clock_set_divider+0x50>)
    5240:	1dbb      	adds	r3, r7, #6
    5242:	781b      	ldrb	r3, [r3, #0]
    5244:	72d3      	strb	r3, [r2, #11]
			break;
    5246:	e001      	b.n	524c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    5248:	2317      	movs	r3, #23
    524a:	e000      	b.n	524e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    524c:	2300      	movs	r3, #0
}
    524e:	0018      	movs	r0, r3
    5250:	46bd      	mov	sp, r7
    5252:	b002      	add	sp, #8
    5254:	bd80      	pop	{r7, pc}
    5256:	46c0      	nop			; (mov r8, r8)
    5258:	40000400 	.word	0x40000400

0000525c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    525c:	b580      	push	{r7, lr}
    525e:	b082      	sub	sp, #8
    5260:	af00      	add	r7, sp, #0
    5262:	0002      	movs	r2, r0
    5264:	1dfb      	adds	r3, r7, #7
    5266:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5268:	4a08      	ldr	r2, [pc, #32]	; (528c <system_flash_set_waitstates+0x30>)
    526a:	1dfb      	adds	r3, r7, #7
    526c:	781b      	ldrb	r3, [r3, #0]
    526e:	210f      	movs	r1, #15
    5270:	400b      	ands	r3, r1
    5272:	b2d9      	uxtb	r1, r3
    5274:	6853      	ldr	r3, [r2, #4]
    5276:	200f      	movs	r0, #15
    5278:	4001      	ands	r1, r0
    527a:	0049      	lsls	r1, r1, #1
    527c:	201e      	movs	r0, #30
    527e:	4383      	bics	r3, r0
    5280:	430b      	orrs	r3, r1
    5282:	6053      	str	r3, [r2, #4]
}
    5284:	46c0      	nop			; (mov r8, r8)
    5286:	46bd      	mov	sp, r7
    5288:	b002      	add	sp, #8
    528a:	bd80      	pop	{r7, pc}
    528c:	41004000 	.word	0x41004000

00005290 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    5290:	b580      	push	{r7, lr}
    5292:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5294:	46c0      	nop			; (mov r8, r8)
    5296:	4b04      	ldr	r3, [pc, #16]	; (52a8 <_system_dfll_wait_for_sync+0x18>)
    5298:	68db      	ldr	r3, [r3, #12]
    529a:	2210      	movs	r2, #16
    529c:	4013      	ands	r3, r2
    529e:	d0fa      	beq.n	5296 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    52a0:	46c0      	nop			; (mov r8, r8)
    52a2:	46bd      	mov	sp, r7
    52a4:	bd80      	pop	{r7, pc}
    52a6:	46c0      	nop			; (mov r8, r8)
    52a8:	40000800 	.word	0x40000800

000052ac <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    52ac:	b580      	push	{r7, lr}
    52ae:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    52b0:	4b0c      	ldr	r3, [pc, #48]	; (52e4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    52b2:	2202      	movs	r2, #2
    52b4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    52b6:	4b0c      	ldr	r3, [pc, #48]	; (52e8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    52b8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    52ba:	4a0a      	ldr	r2, [pc, #40]	; (52e4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    52bc:	4b0b      	ldr	r3, [pc, #44]	; (52ec <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    52be:	689b      	ldr	r3, [r3, #8]
    52c0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    52c2:	4a08      	ldr	r2, [pc, #32]	; (52e4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    52c4:	4b09      	ldr	r3, [pc, #36]	; (52ec <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    52c6:	685b      	ldr	r3, [r3, #4]
    52c8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    52ca:	4b06      	ldr	r3, [pc, #24]	; (52e4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    52cc:	2200      	movs	r2, #0
    52ce:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    52d0:	4b05      	ldr	r3, [pc, #20]	; (52e8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    52d2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    52d4:	4a03      	ldr	r2, [pc, #12]	; (52e4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    52d6:	4b05      	ldr	r3, [pc, #20]	; (52ec <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    52d8:	681b      	ldr	r3, [r3, #0]
    52da:	b29b      	uxth	r3, r3
    52dc:	8493      	strh	r3, [r2, #36]	; 0x24
}
    52de:	46c0      	nop			; (mov r8, r8)
    52e0:	46bd      	mov	sp, r7
    52e2:	bd80      	pop	{r7, pc}
    52e4:	40000800 	.word	0x40000800
    52e8:	00005291 	.word	0x00005291
    52ec:	20000294 	.word	0x20000294

000052f0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    52f0:	b580      	push	{r7, lr}
    52f2:	b082      	sub	sp, #8
    52f4:	af00      	add	r7, sp, #0
    52f6:	0002      	movs	r2, r0
    52f8:	1dfb      	adds	r3, r7, #7
    52fa:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    52fc:	1dfb      	adds	r3, r7, #7
    52fe:	781b      	ldrb	r3, [r3, #0]
    5300:	2b08      	cmp	r3, #8
    5302:	d840      	bhi.n	5386 <system_clock_source_get_hz+0x96>
    5304:	009a      	lsls	r2, r3, #2
    5306:	4b22      	ldr	r3, [pc, #136]	; (5390 <system_clock_source_get_hz+0xa0>)
    5308:	18d3      	adds	r3, r2, r3
    530a:	681b      	ldr	r3, [r3, #0]
    530c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    530e:	4b21      	ldr	r3, [pc, #132]	; (5394 <system_clock_source_get_hz+0xa4>)
    5310:	691b      	ldr	r3, [r3, #16]
    5312:	e039      	b.n	5388 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5314:	4b20      	ldr	r3, [pc, #128]	; (5398 <system_clock_source_get_hz+0xa8>)
    5316:	6a1b      	ldr	r3, [r3, #32]
    5318:	059b      	lsls	r3, r3, #22
    531a:	0f9b      	lsrs	r3, r3, #30
    531c:	b2db      	uxtb	r3, r3
    531e:	001a      	movs	r2, r3
    5320:	4b1e      	ldr	r3, [pc, #120]	; (539c <system_clock_source_get_hz+0xac>)
    5322:	40d3      	lsrs	r3, r2
    5324:	e030      	b.n	5388 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    5326:	2380      	movs	r3, #128	; 0x80
    5328:	021b      	lsls	r3, r3, #8
    532a:	e02d      	b.n	5388 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    532c:	2380      	movs	r3, #128	; 0x80
    532e:	021b      	lsls	r3, r3, #8
    5330:	e02a      	b.n	5388 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    5332:	4b18      	ldr	r3, [pc, #96]	; (5394 <system_clock_source_get_hz+0xa4>)
    5334:	695b      	ldr	r3, [r3, #20]
    5336:	e027      	b.n	5388 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5338:	4b16      	ldr	r3, [pc, #88]	; (5394 <system_clock_source_get_hz+0xa4>)
    533a:	681b      	ldr	r3, [r3, #0]
    533c:	2202      	movs	r2, #2
    533e:	4013      	ands	r3, r2
    5340:	d101      	bne.n	5346 <system_clock_source_get_hz+0x56>
			return 0;
    5342:	2300      	movs	r3, #0
    5344:	e020      	b.n	5388 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    5346:	4b16      	ldr	r3, [pc, #88]	; (53a0 <system_clock_source_get_hz+0xb0>)
    5348:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    534a:	4b12      	ldr	r3, [pc, #72]	; (5394 <system_clock_source_get_hz+0xa4>)
    534c:	681b      	ldr	r3, [r3, #0]
    534e:	2204      	movs	r2, #4
    5350:	4013      	ands	r3, r2
    5352:	d009      	beq.n	5368 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5354:	2000      	movs	r0, #0
    5356:	4b13      	ldr	r3, [pc, #76]	; (53a4 <system_clock_source_get_hz+0xb4>)
    5358:	4798      	blx	r3
    535a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    535c:	4b0d      	ldr	r3, [pc, #52]	; (5394 <system_clock_source_get_hz+0xa4>)
    535e:	689b      	ldr	r3, [r3, #8]
    5360:	041b      	lsls	r3, r3, #16
    5362:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5364:	4353      	muls	r3, r2
    5366:	e00f      	b.n	5388 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    5368:	4b0f      	ldr	r3, [pc, #60]	; (53a8 <system_clock_source_get_hz+0xb8>)
    536a:	e00d      	b.n	5388 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    536c:	4a0a      	ldr	r2, [pc, #40]	; (5398 <system_clock_source_get_hz+0xa8>)
    536e:	2350      	movs	r3, #80	; 0x50
    5370:	5cd3      	ldrb	r3, [r2, r3]
    5372:	b2db      	uxtb	r3, r3
    5374:	001a      	movs	r2, r3
    5376:	2304      	movs	r3, #4
    5378:	4013      	ands	r3, r2
    537a:	d101      	bne.n	5380 <system_clock_source_get_hz+0x90>
			return 0;
    537c:	2300      	movs	r3, #0
    537e:	e003      	b.n	5388 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    5380:	4b04      	ldr	r3, [pc, #16]	; (5394 <system_clock_source_get_hz+0xa4>)
    5382:	68db      	ldr	r3, [r3, #12]
    5384:	e000      	b.n	5388 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    5386:	2300      	movs	r3, #0
	}
}
    5388:	0018      	movs	r0, r3
    538a:	46bd      	mov	sp, r7
    538c:	b002      	add	sp, #8
    538e:	bd80      	pop	{r7, pc}
    5390:	00009a3c 	.word	0x00009a3c
    5394:	20000294 	.word	0x20000294
    5398:	40000800 	.word	0x40000800
    539c:	007a1200 	.word	0x007a1200
    53a0:	00005291 	.word	0x00005291
    53a4:	00005b65 	.word	0x00005b65
    53a8:	02dc6c00 	.word	0x02dc6c00

000053ac <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    53ac:	b580      	push	{r7, lr}
    53ae:	b084      	sub	sp, #16
    53b0:	af00      	add	r7, sp, #0
    53b2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    53b4:	4b1a      	ldr	r3, [pc, #104]	; (5420 <system_clock_source_osc8m_set_config+0x74>)
    53b6:	6a1b      	ldr	r3, [r3, #32]
    53b8:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    53ba:	687b      	ldr	r3, [r7, #4]
    53bc:	781b      	ldrb	r3, [r3, #0]
    53be:	1c1a      	adds	r2, r3, #0
    53c0:	2303      	movs	r3, #3
    53c2:	4013      	ands	r3, r2
    53c4:	b2da      	uxtb	r2, r3
    53c6:	230d      	movs	r3, #13
    53c8:	18fb      	adds	r3, r7, r3
    53ca:	2103      	movs	r1, #3
    53cc:	400a      	ands	r2, r1
    53ce:	0010      	movs	r0, r2
    53d0:	781a      	ldrb	r2, [r3, #0]
    53d2:	2103      	movs	r1, #3
    53d4:	438a      	bics	r2, r1
    53d6:	1c11      	adds	r1, r2, #0
    53d8:	1c02      	adds	r2, r0, #0
    53da:	430a      	orrs	r2, r1
    53dc:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    53de:	687b      	ldr	r3, [r7, #4]
    53e0:	789a      	ldrb	r2, [r3, #2]
    53e2:	230c      	movs	r3, #12
    53e4:	18fb      	adds	r3, r7, r3
    53e6:	01d0      	lsls	r0, r2, #7
    53e8:	781a      	ldrb	r2, [r3, #0]
    53ea:	217f      	movs	r1, #127	; 0x7f
    53ec:	400a      	ands	r2, r1
    53ee:	1c11      	adds	r1, r2, #0
    53f0:	1c02      	adds	r2, r0, #0
    53f2:	430a      	orrs	r2, r1
    53f4:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    53f6:	687b      	ldr	r3, [r7, #4]
    53f8:	785a      	ldrb	r2, [r3, #1]
    53fa:	230c      	movs	r3, #12
    53fc:	18fb      	adds	r3, r7, r3
    53fe:	2101      	movs	r1, #1
    5400:	400a      	ands	r2, r1
    5402:	0190      	lsls	r0, r2, #6
    5404:	781a      	ldrb	r2, [r3, #0]
    5406:	2140      	movs	r1, #64	; 0x40
    5408:	438a      	bics	r2, r1
    540a:	1c11      	adds	r1, r2, #0
    540c:	1c02      	adds	r2, r0, #0
    540e:	430a      	orrs	r2, r1
    5410:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    5412:	4b03      	ldr	r3, [pc, #12]	; (5420 <system_clock_source_osc8m_set_config+0x74>)
    5414:	68fa      	ldr	r2, [r7, #12]
    5416:	621a      	str	r2, [r3, #32]
}
    5418:	46c0      	nop			; (mov r8, r8)
    541a:	46bd      	mov	sp, r7
    541c:	b004      	add	sp, #16
    541e:	bd80      	pop	{r7, pc}
    5420:	40000800 	.word	0x40000800

00005424 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    5424:	b580      	push	{r7, lr}
    5426:	b082      	sub	sp, #8
    5428:	af00      	add	r7, sp, #0
    542a:	0002      	movs	r2, r0
    542c:	1dfb      	adds	r3, r7, #7
    542e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5430:	1dfb      	adds	r3, r7, #7
    5432:	781b      	ldrb	r3, [r3, #0]
    5434:	2b08      	cmp	r3, #8
    5436:	d83b      	bhi.n	54b0 <system_clock_source_enable+0x8c>
    5438:	009a      	lsls	r2, r3, #2
    543a:	4b21      	ldr	r3, [pc, #132]	; (54c0 <system_clock_source_enable+0x9c>)
    543c:	18d3      	adds	r3, r2, r3
    543e:	681b      	ldr	r3, [r3, #0]
    5440:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5442:	4b20      	ldr	r3, [pc, #128]	; (54c4 <system_clock_source_enable+0xa0>)
    5444:	4a1f      	ldr	r2, [pc, #124]	; (54c4 <system_clock_source_enable+0xa0>)
    5446:	6a12      	ldr	r2, [r2, #32]
    5448:	2102      	movs	r1, #2
    544a:	430a      	orrs	r2, r1
    544c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    544e:	2300      	movs	r3, #0
    5450:	e031      	b.n	54b6 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5452:	4b1c      	ldr	r3, [pc, #112]	; (54c4 <system_clock_source_enable+0xa0>)
    5454:	4a1b      	ldr	r2, [pc, #108]	; (54c4 <system_clock_source_enable+0xa0>)
    5456:	6992      	ldr	r2, [r2, #24]
    5458:	2102      	movs	r1, #2
    545a:	430a      	orrs	r2, r1
    545c:	619a      	str	r2, [r3, #24]
		break;
    545e:	e029      	b.n	54b4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5460:	4a18      	ldr	r2, [pc, #96]	; (54c4 <system_clock_source_enable+0xa0>)
    5462:	4b18      	ldr	r3, [pc, #96]	; (54c4 <system_clock_source_enable+0xa0>)
    5464:	8a1b      	ldrh	r3, [r3, #16]
    5466:	b29b      	uxth	r3, r3
    5468:	2102      	movs	r1, #2
    546a:	430b      	orrs	r3, r1
    546c:	b29b      	uxth	r3, r3
    546e:	8213      	strh	r3, [r2, #16]
		break;
    5470:	e020      	b.n	54b4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5472:	4a14      	ldr	r2, [pc, #80]	; (54c4 <system_clock_source_enable+0xa0>)
    5474:	4b13      	ldr	r3, [pc, #76]	; (54c4 <system_clock_source_enable+0xa0>)
    5476:	8a9b      	ldrh	r3, [r3, #20]
    5478:	b29b      	uxth	r3, r3
    547a:	2102      	movs	r1, #2
    547c:	430b      	orrs	r3, r1
    547e:	b29b      	uxth	r3, r3
    5480:	8293      	strh	r3, [r2, #20]
		break;
    5482:	e017      	b.n	54b4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5484:	4b10      	ldr	r3, [pc, #64]	; (54c8 <system_clock_source_enable+0xa4>)
    5486:	681b      	ldr	r3, [r3, #0]
    5488:	2202      	movs	r2, #2
    548a:	431a      	orrs	r2, r3
    548c:	4b0e      	ldr	r3, [pc, #56]	; (54c8 <system_clock_source_enable+0xa4>)
    548e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    5490:	4b0e      	ldr	r3, [pc, #56]	; (54cc <system_clock_source_enable+0xa8>)
    5492:	4798      	blx	r3
		break;
    5494:	e00e      	b.n	54b4 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5496:	4a0b      	ldr	r2, [pc, #44]	; (54c4 <system_clock_source_enable+0xa0>)
    5498:	490a      	ldr	r1, [pc, #40]	; (54c4 <system_clock_source_enable+0xa0>)
    549a:	2344      	movs	r3, #68	; 0x44
    549c:	5ccb      	ldrb	r3, [r1, r3]
    549e:	b2db      	uxtb	r3, r3
    54a0:	2102      	movs	r1, #2
    54a2:	430b      	orrs	r3, r1
    54a4:	b2d9      	uxtb	r1, r3
    54a6:	2344      	movs	r3, #68	; 0x44
    54a8:	54d1      	strb	r1, [r2, r3]
		break;
    54aa:	e003      	b.n	54b4 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    54ac:	2300      	movs	r3, #0
    54ae:	e002      	b.n	54b6 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    54b0:	2317      	movs	r3, #23
    54b2:	e000      	b.n	54b6 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    54b4:	2300      	movs	r3, #0
}
    54b6:	0018      	movs	r0, r3
    54b8:	46bd      	mov	sp, r7
    54ba:	b002      	add	sp, #8
    54bc:	bd80      	pop	{r7, pc}
    54be:	46c0      	nop			; (mov r8, r8)
    54c0:	00009a60 	.word	0x00009a60
    54c4:	40000800 	.word	0x40000800
    54c8:	20000294 	.word	0x20000294
    54cc:	000052ad 	.word	0x000052ad

000054d0 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    54d0:	b580      	push	{r7, lr}
    54d2:	b082      	sub	sp, #8
    54d4:	af00      	add	r7, sp, #0
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
#elif CONF_CLOCK_GCLK_5_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    54d6:	003b      	movs	r3, r7
    54d8:	2205      	movs	r2, #5
    54da:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    54dc:	2300      	movs	r3, #0
    54de:	607b      	str	r3, [r7, #4]
    54e0:	e009      	b.n	54f6 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    54e2:	687b      	ldr	r3, [r7, #4]
    54e4:	b2db      	uxtb	r3, r3
    54e6:	003a      	movs	r2, r7
    54e8:	0011      	movs	r1, r2
    54ea:	0018      	movs	r0, r3
    54ec:	4b05      	ldr	r3, [pc, #20]	; (5504 <_switch_peripheral_gclk+0x34>)
    54ee:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    54f0:	687b      	ldr	r3, [r7, #4]
    54f2:	3301      	adds	r3, #1
    54f4:	607b      	str	r3, [r7, #4]
    54f6:	687b      	ldr	r3, [r7, #4]
    54f8:	2b24      	cmp	r3, #36	; 0x24
    54fa:	d9f2      	bls.n	54e2 <_switch_peripheral_gclk+0x12>
	}
}
    54fc:	46c0      	nop			; (mov r8, r8)
    54fe:	46bd      	mov	sp, r7
    5500:	b002      	add	sp, #8
    5502:	bd80      	pop	{r7, pc}
    5504:	000059f9 	.word	0x000059f9

00005508 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5508:	b580      	push	{r7, lr}
    550a:	b0a0      	sub	sp, #128	; 0x80
    550c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    550e:	4b63      	ldr	r3, [pc, #396]	; (569c <system_clock_init+0x194>)
    5510:	22c2      	movs	r2, #194	; 0xc2
    5512:	00d2      	lsls	r2, r2, #3
    5514:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    5516:	2000      	movs	r0, #0
    5518:	4b61      	ldr	r3, [pc, #388]	; (56a0 <system_clock_init+0x198>)
    551a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    551c:	4b61      	ldr	r3, [pc, #388]	; (56a4 <system_clock_init+0x19c>)
    551e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    5520:	237c      	movs	r3, #124	; 0x7c
    5522:	18fb      	adds	r3, r7, r3
    5524:	0018      	movs	r0, r3
    5526:	4b60      	ldr	r3, [pc, #384]	; (56a8 <system_clock_init+0x1a0>)
    5528:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    552a:	237c      	movs	r3, #124	; 0x7c
    552c:	18fb      	adds	r3, r7, r3
    552e:	2200      	movs	r2, #0
    5530:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    5532:	237c      	movs	r3, #124	; 0x7c
    5534:	18fb      	adds	r3, r7, r3
    5536:	2201      	movs	r2, #1
    5538:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    553a:	237c      	movs	r3, #124	; 0x7c
    553c:	18fb      	adds	r3, r7, r3
    553e:	2200      	movs	r2, #0
    5540:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    5542:	237c      	movs	r3, #124	; 0x7c
    5544:	18fb      	adds	r3, r7, r3
    5546:	0018      	movs	r0, r3
    5548:	4b58      	ldr	r3, [pc, #352]	; (56ac <system_clock_init+0x1a4>)
    554a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    554c:	2006      	movs	r0, #6
    554e:	4b58      	ldr	r3, [pc, #352]	; (56b0 <system_clock_init+0x1a8>)
    5550:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5552:	4b58      	ldr	r3, [pc, #352]	; (56b4 <system_clock_init+0x1ac>)
    5554:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5556:	2364      	movs	r3, #100	; 0x64
    5558:	18fb      	adds	r3, r7, r3
    555a:	0018      	movs	r0, r3
    555c:	4b56      	ldr	r3, [pc, #344]	; (56b8 <system_clock_init+0x1b0>)
    555e:	4798      	blx	r3
    5560:	2364      	movs	r3, #100	; 0x64
    5562:	18fb      	adds	r3, r7, r3
    5564:	2206      	movs	r2, #6
    5566:	701a      	strb	r2, [r3, #0]
    5568:	2364      	movs	r3, #100	; 0x64
    556a:	18fb      	adds	r3, r7, r3
    556c:	2201      	movs	r2, #1
    556e:	605a      	str	r2, [r3, #4]
    5570:	2364      	movs	r3, #100	; 0x64
    5572:	18fb      	adds	r3, r7, r3
    5574:	2201      	movs	r2, #1
    5576:	721a      	strb	r2, [r3, #8]
    5578:	2364      	movs	r3, #100	; 0x64
    557a:	18fb      	adds	r3, r7, r3
    557c:	2200      	movs	r2, #0
    557e:	725a      	strb	r2, [r3, #9]
    5580:	2364      	movs	r3, #100	; 0x64
    5582:	18fb      	adds	r3, r7, r3
    5584:	0019      	movs	r1, r3
    5586:	2001      	movs	r0, #1
    5588:	4b4c      	ldr	r3, [pc, #304]	; (56bc <system_clock_init+0x1b4>)
    558a:	4798      	blx	r3
    558c:	2001      	movs	r0, #1
    558e:	4b4c      	ldr	r3, [pc, #304]	; (56c0 <system_clock_init+0x1b8>)
    5590:	4798      	blx	r3
    5592:	2358      	movs	r3, #88	; 0x58
    5594:	18fb      	adds	r3, r7, r3
    5596:	0018      	movs	r0, r3
    5598:	4b47      	ldr	r3, [pc, #284]	; (56b8 <system_clock_init+0x1b0>)
    559a:	4798      	blx	r3
    559c:	2358      	movs	r3, #88	; 0x58
    559e:	18fb      	adds	r3, r7, r3
    55a0:	2206      	movs	r2, #6
    55a2:	701a      	strb	r2, [r3, #0]
    55a4:	2358      	movs	r3, #88	; 0x58
    55a6:	18fb      	adds	r3, r7, r3
    55a8:	2201      	movs	r2, #1
    55aa:	605a      	str	r2, [r3, #4]
    55ac:	2358      	movs	r3, #88	; 0x58
    55ae:	18fb      	adds	r3, r7, r3
    55b0:	2201      	movs	r2, #1
    55b2:	721a      	strb	r2, [r3, #8]
    55b4:	2358      	movs	r3, #88	; 0x58
    55b6:	18fb      	adds	r3, r7, r3
    55b8:	2200      	movs	r2, #0
    55ba:	725a      	strb	r2, [r3, #9]
    55bc:	2358      	movs	r3, #88	; 0x58
    55be:	18fb      	adds	r3, r7, r3
    55c0:	0019      	movs	r1, r3
    55c2:	2002      	movs	r0, #2
    55c4:	4b3d      	ldr	r3, [pc, #244]	; (56bc <system_clock_init+0x1b4>)
    55c6:	4798      	blx	r3
    55c8:	2002      	movs	r0, #2
    55ca:	4b3d      	ldr	r3, [pc, #244]	; (56c0 <system_clock_init+0x1b8>)
    55cc:	4798      	blx	r3
    55ce:	234c      	movs	r3, #76	; 0x4c
    55d0:	18fb      	adds	r3, r7, r3
    55d2:	0018      	movs	r0, r3
    55d4:	4b38      	ldr	r3, [pc, #224]	; (56b8 <system_clock_init+0x1b0>)
    55d6:	4798      	blx	r3
    55d8:	234c      	movs	r3, #76	; 0x4c
    55da:	18fb      	adds	r3, r7, r3
    55dc:	2206      	movs	r2, #6
    55de:	701a      	strb	r2, [r3, #0]
    55e0:	234c      	movs	r3, #76	; 0x4c
    55e2:	18fb      	adds	r3, r7, r3
    55e4:	2201      	movs	r2, #1
    55e6:	605a      	str	r2, [r3, #4]
    55e8:	234c      	movs	r3, #76	; 0x4c
    55ea:	18fb      	adds	r3, r7, r3
    55ec:	2201      	movs	r2, #1
    55ee:	721a      	strb	r2, [r3, #8]
    55f0:	234c      	movs	r3, #76	; 0x4c
    55f2:	18fb      	adds	r3, r7, r3
    55f4:	2200      	movs	r2, #0
    55f6:	725a      	strb	r2, [r3, #9]
    55f8:	234c      	movs	r3, #76	; 0x4c
    55fa:	18fb      	adds	r3, r7, r3
    55fc:	0019      	movs	r1, r3
    55fe:	2003      	movs	r0, #3
    5600:	4b2e      	ldr	r3, [pc, #184]	; (56bc <system_clock_init+0x1b4>)
    5602:	4798      	blx	r3
    5604:	2003      	movs	r0, #3
    5606:	4b2e      	ldr	r3, [pc, #184]	; (56c0 <system_clock_init+0x1b8>)
    5608:	4798      	blx	r3
    560a:	2340      	movs	r3, #64	; 0x40
    560c:	18fb      	adds	r3, r7, r3
    560e:	0018      	movs	r0, r3
    5610:	4b29      	ldr	r3, [pc, #164]	; (56b8 <system_clock_init+0x1b0>)
    5612:	4798      	blx	r3
    5614:	2340      	movs	r3, #64	; 0x40
    5616:	18fb      	adds	r3, r7, r3
    5618:	2206      	movs	r2, #6
    561a:	701a      	strb	r2, [r3, #0]
    561c:	2340      	movs	r3, #64	; 0x40
    561e:	18fb      	adds	r3, r7, r3
    5620:	2201      	movs	r2, #1
    5622:	605a      	str	r2, [r3, #4]
    5624:	2340      	movs	r3, #64	; 0x40
    5626:	18fb      	adds	r3, r7, r3
    5628:	2200      	movs	r2, #0
    562a:	721a      	strb	r2, [r3, #8]
    562c:	2340      	movs	r3, #64	; 0x40
    562e:	18fb      	adds	r3, r7, r3
    5630:	2200      	movs	r2, #0
    5632:	725a      	strb	r2, [r3, #9]
    5634:	2340      	movs	r3, #64	; 0x40
    5636:	18fb      	adds	r3, r7, r3
    5638:	0019      	movs	r1, r3
    563a:	2004      	movs	r0, #4
    563c:	4b1f      	ldr	r3, [pc, #124]	; (56bc <system_clock_init+0x1b4>)
    563e:	4798      	blx	r3
    5640:	2004      	movs	r0, #4
    5642:	4b1f      	ldr	r3, [pc, #124]	; (56c0 <system_clock_init+0x1b8>)
    5644:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    5646:	2000      	movs	r0, #0
    5648:	4b1e      	ldr	r3, [pc, #120]	; (56c4 <system_clock_init+0x1bc>)
    564a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    564c:	2100      	movs	r1, #0
    564e:	2000      	movs	r0, #0
    5650:	4b1d      	ldr	r3, [pc, #116]	; (56c8 <system_clock_init+0x1c0>)
    5652:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    5654:	2100      	movs	r1, #0
    5656:	2001      	movs	r0, #1
    5658:	4b1b      	ldr	r3, [pc, #108]	; (56c8 <system_clock_init+0x1c0>)
    565a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    565c:	2100      	movs	r1, #0
    565e:	2002      	movs	r0, #2
    5660:	4b19      	ldr	r3, [pc, #100]	; (56c8 <system_clock_init+0x1c0>)
    5662:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5664:	1d3b      	adds	r3, r7, #4
    5666:	0018      	movs	r0, r3
    5668:	4b13      	ldr	r3, [pc, #76]	; (56b8 <system_clock_init+0x1b0>)
    566a:	4798      	blx	r3
    566c:	1d3b      	adds	r3, r7, #4
    566e:	2206      	movs	r2, #6
    5670:	701a      	strb	r2, [r3, #0]
    5672:	1d3b      	adds	r3, r7, #4
    5674:	2201      	movs	r2, #1
    5676:	605a      	str	r2, [r3, #4]
    5678:	1d3b      	adds	r3, r7, #4
    567a:	2201      	movs	r2, #1
    567c:	721a      	strb	r2, [r3, #8]
    567e:	1d3b      	adds	r3, r7, #4
    5680:	2200      	movs	r2, #0
    5682:	725a      	strb	r2, [r3, #9]
    5684:	1d3b      	adds	r3, r7, #4
    5686:	0019      	movs	r1, r3
    5688:	2000      	movs	r0, #0
    568a:	4b0c      	ldr	r3, [pc, #48]	; (56bc <system_clock_init+0x1b4>)
    568c:	4798      	blx	r3
    568e:	2000      	movs	r0, #0
    5690:	4b0b      	ldr	r3, [pc, #44]	; (56c0 <system_clock_init+0x1b8>)
    5692:	4798      	blx	r3
#endif
}
    5694:	46c0      	nop			; (mov r8, r8)
    5696:	46bd      	mov	sp, r7
    5698:	b020      	add	sp, #128	; 0x80
    569a:	bd80      	pop	{r7, pc}
    569c:	40000800 	.word	0x40000800
    56a0:	0000525d 	.word	0x0000525d
    56a4:	000054d1 	.word	0x000054d1
    56a8:	000051c7 	.word	0x000051c7
    56ac:	000053ad 	.word	0x000053ad
    56b0:	00005425 	.word	0x00005425
    56b4:	00005771 	.word	0x00005771
    56b8:	00005199 	.word	0x00005199
    56bc:	000057a1 	.word	0x000057a1
    56c0:	000058c5 	.word	0x000058c5
    56c4:	000051e9 	.word	0x000051e9
    56c8:	00005209 	.word	0x00005209

000056cc <system_apb_clock_set_mask>:
{
    56cc:	b580      	push	{r7, lr}
    56ce:	b082      	sub	sp, #8
    56d0:	af00      	add	r7, sp, #0
    56d2:	0002      	movs	r2, r0
    56d4:	6039      	str	r1, [r7, #0]
    56d6:	1dfb      	adds	r3, r7, #7
    56d8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    56da:	1dfb      	adds	r3, r7, #7
    56dc:	781b      	ldrb	r3, [r3, #0]
    56de:	2b01      	cmp	r3, #1
    56e0:	d00a      	beq.n	56f8 <system_apb_clock_set_mask+0x2c>
    56e2:	2b02      	cmp	r3, #2
    56e4:	d00f      	beq.n	5706 <system_apb_clock_set_mask+0x3a>
    56e6:	2b00      	cmp	r3, #0
    56e8:	d114      	bne.n	5714 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    56ea:	4b0e      	ldr	r3, [pc, #56]	; (5724 <system_apb_clock_set_mask+0x58>)
    56ec:	4a0d      	ldr	r2, [pc, #52]	; (5724 <system_apb_clock_set_mask+0x58>)
    56ee:	6991      	ldr	r1, [r2, #24]
    56f0:	683a      	ldr	r2, [r7, #0]
    56f2:	430a      	orrs	r2, r1
    56f4:	619a      	str	r2, [r3, #24]
			break;
    56f6:	e00f      	b.n	5718 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    56f8:	4b0a      	ldr	r3, [pc, #40]	; (5724 <system_apb_clock_set_mask+0x58>)
    56fa:	4a0a      	ldr	r2, [pc, #40]	; (5724 <system_apb_clock_set_mask+0x58>)
    56fc:	69d1      	ldr	r1, [r2, #28]
    56fe:	683a      	ldr	r2, [r7, #0]
    5700:	430a      	orrs	r2, r1
    5702:	61da      	str	r2, [r3, #28]
			break;
    5704:	e008      	b.n	5718 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    5706:	4b07      	ldr	r3, [pc, #28]	; (5724 <system_apb_clock_set_mask+0x58>)
    5708:	4a06      	ldr	r2, [pc, #24]	; (5724 <system_apb_clock_set_mask+0x58>)
    570a:	6a11      	ldr	r1, [r2, #32]
    570c:	683a      	ldr	r2, [r7, #0]
    570e:	430a      	orrs	r2, r1
    5710:	621a      	str	r2, [r3, #32]
			break;
    5712:	e001      	b.n	5718 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5714:	2317      	movs	r3, #23
    5716:	e000      	b.n	571a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5718:	2300      	movs	r3, #0
}
    571a:	0018      	movs	r0, r3
    571c:	46bd      	mov	sp, r7
    571e:	b002      	add	sp, #8
    5720:	bd80      	pop	{r7, pc}
    5722:	46c0      	nop			; (mov r8, r8)
    5724:	40000400 	.word	0x40000400

00005728 <system_interrupt_enter_critical_section>:
{
    5728:	b580      	push	{r7, lr}
    572a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    572c:	4b02      	ldr	r3, [pc, #8]	; (5738 <system_interrupt_enter_critical_section+0x10>)
    572e:	4798      	blx	r3
}
    5730:	46c0      	nop			; (mov r8, r8)
    5732:	46bd      	mov	sp, r7
    5734:	bd80      	pop	{r7, pc}
    5736:	46c0      	nop			; (mov r8, r8)
    5738:	00005105 	.word	0x00005105

0000573c <system_interrupt_leave_critical_section>:
{
    573c:	b580      	push	{r7, lr}
    573e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    5740:	4b02      	ldr	r3, [pc, #8]	; (574c <system_interrupt_leave_critical_section+0x10>)
    5742:	4798      	blx	r3
}
    5744:	46c0      	nop			; (mov r8, r8)
    5746:	46bd      	mov	sp, r7
    5748:	bd80      	pop	{r7, pc}
    574a:	46c0      	nop			; (mov r8, r8)
    574c:	00005159 	.word	0x00005159

00005750 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    5750:	b580      	push	{r7, lr}
    5752:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5754:	4b05      	ldr	r3, [pc, #20]	; (576c <system_gclk_is_syncing+0x1c>)
    5756:	785b      	ldrb	r3, [r3, #1]
    5758:	b2db      	uxtb	r3, r3
    575a:	b25b      	sxtb	r3, r3
    575c:	2b00      	cmp	r3, #0
    575e:	da01      	bge.n	5764 <system_gclk_is_syncing+0x14>
		return true;
    5760:	2301      	movs	r3, #1
    5762:	e000      	b.n	5766 <system_gclk_is_syncing+0x16>
	}

	return false;
    5764:	2300      	movs	r3, #0
}
    5766:	0018      	movs	r0, r3
    5768:	46bd      	mov	sp, r7
    576a:	bd80      	pop	{r7, pc}
    576c:	40000c00 	.word	0x40000c00

00005770 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    5770:	b580      	push	{r7, lr}
    5772:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    5774:	2108      	movs	r1, #8
    5776:	2000      	movs	r0, #0
    5778:	4b07      	ldr	r3, [pc, #28]	; (5798 <system_gclk_init+0x28>)
    577a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    577c:	4b07      	ldr	r3, [pc, #28]	; (579c <system_gclk_init+0x2c>)
    577e:	2201      	movs	r2, #1
    5780:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5782:	46c0      	nop			; (mov r8, r8)
    5784:	4b05      	ldr	r3, [pc, #20]	; (579c <system_gclk_init+0x2c>)
    5786:	781b      	ldrb	r3, [r3, #0]
    5788:	b2db      	uxtb	r3, r3
    578a:	001a      	movs	r2, r3
    578c:	2301      	movs	r3, #1
    578e:	4013      	ands	r3, r2
    5790:	d1f8      	bne.n	5784 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    5792:	46c0      	nop			; (mov r8, r8)
    5794:	46bd      	mov	sp, r7
    5796:	bd80      	pop	{r7, pc}
    5798:	000056cd 	.word	0x000056cd
    579c:	40000c00 	.word	0x40000c00

000057a0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    57a0:	b580      	push	{r7, lr}
    57a2:	b086      	sub	sp, #24
    57a4:	af00      	add	r7, sp, #0
    57a6:	0002      	movs	r2, r0
    57a8:	6039      	str	r1, [r7, #0]
    57aa:	1dfb      	adds	r3, r7, #7
    57ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    57ae:	1dfb      	adds	r3, r7, #7
    57b0:	781b      	ldrb	r3, [r3, #0]
    57b2:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    57b4:	1dfb      	adds	r3, r7, #7
    57b6:	781b      	ldrb	r3, [r3, #0]
    57b8:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    57ba:	683b      	ldr	r3, [r7, #0]
    57bc:	781b      	ldrb	r3, [r3, #0]
    57be:	021b      	lsls	r3, r3, #8
    57c0:	001a      	movs	r2, r3
    57c2:	697b      	ldr	r3, [r7, #20]
    57c4:	4313      	orrs	r3, r2
    57c6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    57c8:	683b      	ldr	r3, [r7, #0]
    57ca:	785b      	ldrb	r3, [r3, #1]
    57cc:	2b00      	cmp	r3, #0
    57ce:	d004      	beq.n	57da <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    57d0:	697b      	ldr	r3, [r7, #20]
    57d2:	2280      	movs	r2, #128	; 0x80
    57d4:	02d2      	lsls	r2, r2, #11
    57d6:	4313      	orrs	r3, r2
    57d8:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    57da:	683b      	ldr	r3, [r7, #0]
    57dc:	7a5b      	ldrb	r3, [r3, #9]
    57de:	2b00      	cmp	r3, #0
    57e0:	d004      	beq.n	57ec <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    57e2:	697b      	ldr	r3, [r7, #20]
    57e4:	2280      	movs	r2, #128	; 0x80
    57e6:	0312      	lsls	r2, r2, #12
    57e8:	4313      	orrs	r3, r2
    57ea:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    57ec:	683b      	ldr	r3, [r7, #0]
    57ee:	685b      	ldr	r3, [r3, #4]
    57f0:	2b01      	cmp	r3, #1
    57f2:	d92c      	bls.n	584e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    57f4:	683b      	ldr	r3, [r7, #0]
    57f6:	685a      	ldr	r2, [r3, #4]
    57f8:	683b      	ldr	r3, [r7, #0]
    57fa:	685b      	ldr	r3, [r3, #4]
    57fc:	3b01      	subs	r3, #1
    57fe:	4013      	ands	r3, r2
    5800:	d11a      	bne.n	5838 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    5802:	2300      	movs	r3, #0
    5804:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5806:	2302      	movs	r3, #2
    5808:	60bb      	str	r3, [r7, #8]
    580a:	e005      	b.n	5818 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    580c:	68fb      	ldr	r3, [r7, #12]
    580e:	3301      	adds	r3, #1
    5810:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    5812:	68bb      	ldr	r3, [r7, #8]
    5814:	005b      	lsls	r3, r3, #1
    5816:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    5818:	683b      	ldr	r3, [r7, #0]
    581a:	685a      	ldr	r2, [r3, #4]
    581c:	68bb      	ldr	r3, [r7, #8]
    581e:	429a      	cmp	r2, r3
    5820:	d8f4      	bhi.n	580c <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    5822:	68fb      	ldr	r3, [r7, #12]
    5824:	021b      	lsls	r3, r3, #8
    5826:	693a      	ldr	r2, [r7, #16]
    5828:	4313      	orrs	r3, r2
    582a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    582c:	697b      	ldr	r3, [r7, #20]
    582e:	2280      	movs	r2, #128	; 0x80
    5830:	0352      	lsls	r2, r2, #13
    5832:	4313      	orrs	r3, r2
    5834:	617b      	str	r3, [r7, #20]
    5836:	e00a      	b.n	584e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5838:	683b      	ldr	r3, [r7, #0]
    583a:	685b      	ldr	r3, [r3, #4]
    583c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    583e:	693a      	ldr	r2, [r7, #16]
    5840:	4313      	orrs	r3, r2
    5842:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5844:	697b      	ldr	r3, [r7, #20]
    5846:	2280      	movs	r2, #128	; 0x80
    5848:	0292      	lsls	r2, r2, #10
    584a:	4313      	orrs	r3, r2
    584c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    584e:	683b      	ldr	r3, [r7, #0]
    5850:	7a1b      	ldrb	r3, [r3, #8]
    5852:	2b00      	cmp	r3, #0
    5854:	d004      	beq.n	5860 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5856:	697b      	ldr	r3, [r7, #20]
    5858:	2280      	movs	r2, #128	; 0x80
    585a:	0392      	lsls	r2, r2, #14
    585c:	4313      	orrs	r3, r2
    585e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    5860:	46c0      	nop			; (mov r8, r8)
    5862:	4b13      	ldr	r3, [pc, #76]	; (58b0 <system_gclk_gen_set_config+0x110>)
    5864:	4798      	blx	r3
    5866:	1e03      	subs	r3, r0, #0
    5868:	d1fb      	bne.n	5862 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    586a:	4b12      	ldr	r3, [pc, #72]	; (58b4 <system_gclk_gen_set_config+0x114>)
    586c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    586e:	4a12      	ldr	r2, [pc, #72]	; (58b8 <system_gclk_gen_set_config+0x118>)
    5870:	1dfb      	adds	r3, r7, #7
    5872:	781b      	ldrb	r3, [r3, #0]
    5874:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5876:	46c0      	nop			; (mov r8, r8)
    5878:	4b0d      	ldr	r3, [pc, #52]	; (58b0 <system_gclk_gen_set_config+0x110>)
    587a:	4798      	blx	r3
    587c:	1e03      	subs	r3, r0, #0
    587e:	d1fb      	bne.n	5878 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5880:	4b0e      	ldr	r3, [pc, #56]	; (58bc <system_gclk_gen_set_config+0x11c>)
    5882:	693a      	ldr	r2, [r7, #16]
    5884:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    5886:	46c0      	nop			; (mov r8, r8)
    5888:	4b09      	ldr	r3, [pc, #36]	; (58b0 <system_gclk_gen_set_config+0x110>)
    588a:	4798      	blx	r3
    588c:	1e03      	subs	r3, r0, #0
    588e:	d1fb      	bne.n	5888 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5890:	4b0a      	ldr	r3, [pc, #40]	; (58bc <system_gclk_gen_set_config+0x11c>)
    5892:	4a0a      	ldr	r2, [pc, #40]	; (58bc <system_gclk_gen_set_config+0x11c>)
    5894:	6851      	ldr	r1, [r2, #4]
    5896:	2280      	movs	r2, #128	; 0x80
    5898:	0252      	lsls	r2, r2, #9
    589a:	4011      	ands	r1, r2
    589c:	697a      	ldr	r2, [r7, #20]
    589e:	430a      	orrs	r2, r1
    58a0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    58a2:	4b07      	ldr	r3, [pc, #28]	; (58c0 <system_gclk_gen_set_config+0x120>)
    58a4:	4798      	blx	r3
}
    58a6:	46c0      	nop			; (mov r8, r8)
    58a8:	46bd      	mov	sp, r7
    58aa:	b006      	add	sp, #24
    58ac:	bd80      	pop	{r7, pc}
    58ae:	46c0      	nop			; (mov r8, r8)
    58b0:	00005751 	.word	0x00005751
    58b4:	00005729 	.word	0x00005729
    58b8:	40000c08 	.word	0x40000c08
    58bc:	40000c00 	.word	0x40000c00
    58c0:	0000573d 	.word	0x0000573d

000058c4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    58c4:	b580      	push	{r7, lr}
    58c6:	b082      	sub	sp, #8
    58c8:	af00      	add	r7, sp, #0
    58ca:	0002      	movs	r2, r0
    58cc:	1dfb      	adds	r3, r7, #7
    58ce:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    58d0:	46c0      	nop			; (mov r8, r8)
    58d2:	4b0e      	ldr	r3, [pc, #56]	; (590c <system_gclk_gen_enable+0x48>)
    58d4:	4798      	blx	r3
    58d6:	1e03      	subs	r3, r0, #0
    58d8:	d1fb      	bne.n	58d2 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    58da:	4b0d      	ldr	r3, [pc, #52]	; (5910 <system_gclk_gen_enable+0x4c>)
    58dc:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    58de:	4a0d      	ldr	r2, [pc, #52]	; (5914 <system_gclk_gen_enable+0x50>)
    58e0:	1dfb      	adds	r3, r7, #7
    58e2:	781b      	ldrb	r3, [r3, #0]
    58e4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    58e6:	46c0      	nop			; (mov r8, r8)
    58e8:	4b08      	ldr	r3, [pc, #32]	; (590c <system_gclk_gen_enable+0x48>)
    58ea:	4798      	blx	r3
    58ec:	1e03      	subs	r3, r0, #0
    58ee:	d1fb      	bne.n	58e8 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    58f0:	4b09      	ldr	r3, [pc, #36]	; (5918 <system_gclk_gen_enable+0x54>)
    58f2:	4a09      	ldr	r2, [pc, #36]	; (5918 <system_gclk_gen_enable+0x54>)
    58f4:	6852      	ldr	r2, [r2, #4]
    58f6:	2180      	movs	r1, #128	; 0x80
    58f8:	0249      	lsls	r1, r1, #9
    58fa:	430a      	orrs	r2, r1
    58fc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    58fe:	4b07      	ldr	r3, [pc, #28]	; (591c <system_gclk_gen_enable+0x58>)
    5900:	4798      	blx	r3
}
    5902:	46c0      	nop			; (mov r8, r8)
    5904:	46bd      	mov	sp, r7
    5906:	b002      	add	sp, #8
    5908:	bd80      	pop	{r7, pc}
    590a:	46c0      	nop			; (mov r8, r8)
    590c:	00005751 	.word	0x00005751
    5910:	00005729 	.word	0x00005729
    5914:	40000c04 	.word	0x40000c04
    5918:	40000c00 	.word	0x40000c00
    591c:	0000573d 	.word	0x0000573d

00005920 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5920:	b580      	push	{r7, lr}
    5922:	b086      	sub	sp, #24
    5924:	af00      	add	r7, sp, #0
    5926:	0002      	movs	r2, r0
    5928:	1dfb      	adds	r3, r7, #7
    592a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    592c:	46c0      	nop			; (mov r8, r8)
    592e:	4b2a      	ldr	r3, [pc, #168]	; (59d8 <system_gclk_gen_get_hz+0xb8>)
    5930:	4798      	blx	r3
    5932:	1e03      	subs	r3, r0, #0
    5934:	d1fb      	bne.n	592e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5936:	4b29      	ldr	r3, [pc, #164]	; (59dc <system_gclk_gen_get_hz+0xbc>)
    5938:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    593a:	4a29      	ldr	r2, [pc, #164]	; (59e0 <system_gclk_gen_get_hz+0xc0>)
    593c:	1dfb      	adds	r3, r7, #7
    593e:	781b      	ldrb	r3, [r3, #0]
    5940:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    5942:	46c0      	nop			; (mov r8, r8)
    5944:	4b24      	ldr	r3, [pc, #144]	; (59d8 <system_gclk_gen_get_hz+0xb8>)
    5946:	4798      	blx	r3
    5948:	1e03      	subs	r3, r0, #0
    594a:	d1fb      	bne.n	5944 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    594c:	4b25      	ldr	r3, [pc, #148]	; (59e4 <system_gclk_gen_get_hz+0xc4>)
    594e:	685b      	ldr	r3, [r3, #4]
    5950:	04db      	lsls	r3, r3, #19
    5952:	0edb      	lsrs	r3, r3, #27
    5954:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5956:	0018      	movs	r0, r3
    5958:	4b23      	ldr	r3, [pc, #140]	; (59e8 <system_gclk_gen_get_hz+0xc8>)
    595a:	4798      	blx	r3
    595c:	0003      	movs	r3, r0
    595e:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5960:	4a1f      	ldr	r2, [pc, #124]	; (59e0 <system_gclk_gen_get_hz+0xc0>)
    5962:	1dfb      	adds	r3, r7, #7
    5964:	781b      	ldrb	r3, [r3, #0]
    5966:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5968:	4b1e      	ldr	r3, [pc, #120]	; (59e4 <system_gclk_gen_get_hz+0xc4>)
    596a:	685b      	ldr	r3, [r3, #4]
    596c:	02db      	lsls	r3, r3, #11
    596e:	0fdb      	lsrs	r3, r3, #31
    5970:	b2da      	uxtb	r2, r3
    5972:	2313      	movs	r3, #19
    5974:	18fb      	adds	r3, r7, r3
    5976:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5978:	4a1c      	ldr	r2, [pc, #112]	; (59ec <system_gclk_gen_get_hz+0xcc>)
    597a:	1dfb      	adds	r3, r7, #7
    597c:	781b      	ldrb	r3, [r3, #0]
    597e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    5980:	46c0      	nop			; (mov r8, r8)
    5982:	4b15      	ldr	r3, [pc, #84]	; (59d8 <system_gclk_gen_get_hz+0xb8>)
    5984:	4798      	blx	r3
    5986:	1e03      	subs	r3, r0, #0
    5988:	d1fb      	bne.n	5982 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    598a:	4b16      	ldr	r3, [pc, #88]	; (59e4 <system_gclk_gen_get_hz+0xc4>)
    598c:	689b      	ldr	r3, [r3, #8]
    598e:	021b      	lsls	r3, r3, #8
    5990:	0c1b      	lsrs	r3, r3, #16
    5992:	b29b      	uxth	r3, r3
    5994:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    5996:	4b16      	ldr	r3, [pc, #88]	; (59f0 <system_gclk_gen_get_hz+0xd0>)
    5998:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    599a:	2313      	movs	r3, #19
    599c:	18fb      	adds	r3, r7, r3
    599e:	781b      	ldrb	r3, [r3, #0]
    59a0:	2b00      	cmp	r3, #0
    59a2:	d109      	bne.n	59b8 <system_gclk_gen_get_hz+0x98>
    59a4:	68fb      	ldr	r3, [r7, #12]
    59a6:	2b01      	cmp	r3, #1
    59a8:	d906      	bls.n	59b8 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    59aa:	4b12      	ldr	r3, [pc, #72]	; (59f4 <system_gclk_gen_get_hz+0xd4>)
    59ac:	68f9      	ldr	r1, [r7, #12]
    59ae:	6978      	ldr	r0, [r7, #20]
    59b0:	4798      	blx	r3
    59b2:	0003      	movs	r3, r0
    59b4:	617b      	str	r3, [r7, #20]
    59b6:	e00a      	b.n	59ce <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    59b8:	2313      	movs	r3, #19
    59ba:	18fb      	adds	r3, r7, r3
    59bc:	781b      	ldrb	r3, [r3, #0]
    59be:	2b00      	cmp	r3, #0
    59c0:	d005      	beq.n	59ce <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    59c2:	68fb      	ldr	r3, [r7, #12]
    59c4:	3301      	adds	r3, #1
    59c6:	697a      	ldr	r2, [r7, #20]
    59c8:	40da      	lsrs	r2, r3
    59ca:	0013      	movs	r3, r2
    59cc:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    59ce:	697b      	ldr	r3, [r7, #20]
}
    59d0:	0018      	movs	r0, r3
    59d2:	46bd      	mov	sp, r7
    59d4:	b006      	add	sp, #24
    59d6:	bd80      	pop	{r7, pc}
    59d8:	00005751 	.word	0x00005751
    59dc:	00005729 	.word	0x00005729
    59e0:	40000c04 	.word	0x40000c04
    59e4:	40000c00 	.word	0x40000c00
    59e8:	000052f1 	.word	0x000052f1
    59ec:	40000c08 	.word	0x40000c08
    59f0:	0000573d 	.word	0x0000573d
    59f4:	00006409 	.word	0x00006409

000059f8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    59f8:	b580      	push	{r7, lr}
    59fa:	b084      	sub	sp, #16
    59fc:	af00      	add	r7, sp, #0
    59fe:	0002      	movs	r2, r0
    5a00:	6039      	str	r1, [r7, #0]
    5a02:	1dfb      	adds	r3, r7, #7
    5a04:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    5a06:	1dfb      	adds	r3, r7, #7
    5a08:	781b      	ldrb	r3, [r3, #0]
    5a0a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    5a0c:	683b      	ldr	r3, [r7, #0]
    5a0e:	781b      	ldrb	r3, [r3, #0]
    5a10:	021b      	lsls	r3, r3, #8
    5a12:	001a      	movs	r2, r3
    5a14:	68fb      	ldr	r3, [r7, #12]
    5a16:	4313      	orrs	r3, r2
    5a18:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    5a1a:	1dfb      	adds	r3, r7, #7
    5a1c:	781b      	ldrb	r3, [r3, #0]
    5a1e:	0018      	movs	r0, r3
    5a20:	4b04      	ldr	r3, [pc, #16]	; (5a34 <system_gclk_chan_set_config+0x3c>)
    5a22:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    5a24:	4b04      	ldr	r3, [pc, #16]	; (5a38 <system_gclk_chan_set_config+0x40>)
    5a26:	68fa      	ldr	r2, [r7, #12]
    5a28:	b292      	uxth	r2, r2
    5a2a:	805a      	strh	r2, [r3, #2]
}
    5a2c:	46c0      	nop			; (mov r8, r8)
    5a2e:	46bd      	mov	sp, r7
    5a30:	b004      	add	sp, #16
    5a32:	bd80      	pop	{r7, pc}
    5a34:	00005a85 	.word	0x00005a85
    5a38:	40000c00 	.word	0x40000c00

00005a3c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5a3c:	b580      	push	{r7, lr}
    5a3e:	b082      	sub	sp, #8
    5a40:	af00      	add	r7, sp, #0
    5a42:	0002      	movs	r2, r0
    5a44:	1dfb      	adds	r3, r7, #7
    5a46:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5a48:	4b0a      	ldr	r3, [pc, #40]	; (5a74 <system_gclk_chan_enable+0x38>)
    5a4a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5a4c:	4a0a      	ldr	r2, [pc, #40]	; (5a78 <system_gclk_chan_enable+0x3c>)
    5a4e:	1dfb      	adds	r3, r7, #7
    5a50:	781b      	ldrb	r3, [r3, #0]
    5a52:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5a54:	4909      	ldr	r1, [pc, #36]	; (5a7c <system_gclk_chan_enable+0x40>)
    5a56:	4b09      	ldr	r3, [pc, #36]	; (5a7c <system_gclk_chan_enable+0x40>)
    5a58:	885b      	ldrh	r3, [r3, #2]
    5a5a:	b29b      	uxth	r3, r3
    5a5c:	2280      	movs	r2, #128	; 0x80
    5a5e:	01d2      	lsls	r2, r2, #7
    5a60:	4313      	orrs	r3, r2
    5a62:	b29b      	uxth	r3, r3
    5a64:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    5a66:	4b06      	ldr	r3, [pc, #24]	; (5a80 <system_gclk_chan_enable+0x44>)
    5a68:	4798      	blx	r3
}
    5a6a:	46c0      	nop			; (mov r8, r8)
    5a6c:	46bd      	mov	sp, r7
    5a6e:	b002      	add	sp, #8
    5a70:	bd80      	pop	{r7, pc}
    5a72:	46c0      	nop			; (mov r8, r8)
    5a74:	00005729 	.word	0x00005729
    5a78:	40000c02 	.word	0x40000c02
    5a7c:	40000c00 	.word	0x40000c00
    5a80:	0000573d 	.word	0x0000573d

00005a84 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5a84:	b580      	push	{r7, lr}
    5a86:	b084      	sub	sp, #16
    5a88:	af00      	add	r7, sp, #0
    5a8a:	0002      	movs	r2, r0
    5a8c:	1dfb      	adds	r3, r7, #7
    5a8e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5a90:	4b1c      	ldr	r3, [pc, #112]	; (5b04 <system_gclk_chan_disable+0x80>)
    5a92:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5a94:	4a1c      	ldr	r2, [pc, #112]	; (5b08 <system_gclk_chan_disable+0x84>)
    5a96:	1dfb      	adds	r3, r7, #7
    5a98:	781b      	ldrb	r3, [r3, #0]
    5a9a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5a9c:	4b1b      	ldr	r3, [pc, #108]	; (5b0c <system_gclk_chan_disable+0x88>)
    5a9e:	885b      	ldrh	r3, [r3, #2]
    5aa0:	051b      	lsls	r3, r3, #20
    5aa2:	0f1b      	lsrs	r3, r3, #28
    5aa4:	b2db      	uxtb	r3, r3
    5aa6:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    5aa8:	4a18      	ldr	r2, [pc, #96]	; (5b0c <system_gclk_chan_disable+0x88>)
    5aaa:	8853      	ldrh	r3, [r2, #2]
    5aac:	4918      	ldr	r1, [pc, #96]	; (5b10 <system_gclk_chan_disable+0x8c>)
    5aae:	400b      	ands	r3, r1
    5ab0:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5ab2:	4a16      	ldr	r2, [pc, #88]	; (5b0c <system_gclk_chan_disable+0x88>)
    5ab4:	4b15      	ldr	r3, [pc, #84]	; (5b0c <system_gclk_chan_disable+0x88>)
    5ab6:	885b      	ldrh	r3, [r3, #2]
    5ab8:	b29b      	uxth	r3, r3
    5aba:	4916      	ldr	r1, [pc, #88]	; (5b14 <system_gclk_chan_disable+0x90>)
    5abc:	400b      	ands	r3, r1
    5abe:	b29b      	uxth	r3, r3
    5ac0:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    5ac2:	46c0      	nop			; (mov r8, r8)
    5ac4:	4b11      	ldr	r3, [pc, #68]	; (5b0c <system_gclk_chan_disable+0x88>)
    5ac6:	885b      	ldrh	r3, [r3, #2]
    5ac8:	b29b      	uxth	r3, r3
    5aca:	001a      	movs	r2, r3
    5acc:	2380      	movs	r3, #128	; 0x80
    5ace:	01db      	lsls	r3, r3, #7
    5ad0:	4013      	ands	r3, r2
    5ad2:	d1f7      	bne.n	5ac4 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    5ad4:	4a0d      	ldr	r2, [pc, #52]	; (5b0c <system_gclk_chan_disable+0x88>)
    5ad6:	68fb      	ldr	r3, [r7, #12]
    5ad8:	b2db      	uxtb	r3, r3
    5ada:	1c19      	adds	r1, r3, #0
    5adc:	230f      	movs	r3, #15
    5ade:	400b      	ands	r3, r1
    5ae0:	b2d9      	uxtb	r1, r3
    5ae2:	8853      	ldrh	r3, [r2, #2]
    5ae4:	1c08      	adds	r0, r1, #0
    5ae6:	210f      	movs	r1, #15
    5ae8:	4001      	ands	r1, r0
    5aea:	0208      	lsls	r0, r1, #8
    5aec:	4908      	ldr	r1, [pc, #32]	; (5b10 <system_gclk_chan_disable+0x8c>)
    5aee:	400b      	ands	r3, r1
    5af0:	1c19      	adds	r1, r3, #0
    5af2:	1c03      	adds	r3, r0, #0
    5af4:	430b      	orrs	r3, r1
    5af6:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    5af8:	4b07      	ldr	r3, [pc, #28]	; (5b18 <system_gclk_chan_disable+0x94>)
    5afa:	4798      	blx	r3
}
    5afc:	46c0      	nop			; (mov r8, r8)
    5afe:	46bd      	mov	sp, r7
    5b00:	b004      	add	sp, #16
    5b02:	bd80      	pop	{r7, pc}
    5b04:	00005729 	.word	0x00005729
    5b08:	40000c02 	.word	0x40000c02
    5b0c:	40000c00 	.word	0x40000c00
    5b10:	fffff0ff 	.word	0xfffff0ff
    5b14:	ffffbfff 	.word	0xffffbfff
    5b18:	0000573d 	.word	0x0000573d

00005b1c <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    5b1c:	b580      	push	{r7, lr}
    5b1e:	b082      	sub	sp, #8
    5b20:	af00      	add	r7, sp, #0
    5b22:	0002      	movs	r2, r0
    5b24:	1dfb      	adds	r3, r7, #7
    5b26:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5b28:	4b09      	ldr	r3, [pc, #36]	; (5b50 <system_gclk_chan_lock+0x34>)
    5b2a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5b2c:	4a09      	ldr	r2, [pc, #36]	; (5b54 <system_gclk_chan_lock+0x38>)
    5b2e:	1dfb      	adds	r3, r7, #7
    5b30:	781b      	ldrb	r3, [r3, #0]
    5b32:	7013      	strb	r3, [r2, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    5b34:	4a08      	ldr	r2, [pc, #32]	; (5b58 <system_gclk_chan_lock+0x3c>)
    5b36:	4b08      	ldr	r3, [pc, #32]	; (5b58 <system_gclk_chan_lock+0x3c>)
    5b38:	885b      	ldrh	r3, [r3, #2]
    5b3a:	b29b      	uxth	r3, r3
    5b3c:	4907      	ldr	r1, [pc, #28]	; (5b5c <system_gclk_chan_lock+0x40>)
    5b3e:	430b      	orrs	r3, r1
    5b40:	b29b      	uxth	r3, r3
    5b42:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    5b44:	4b06      	ldr	r3, [pc, #24]	; (5b60 <system_gclk_chan_lock+0x44>)
    5b46:	4798      	blx	r3
}
    5b48:	46c0      	nop			; (mov r8, r8)
    5b4a:	46bd      	mov	sp, r7
    5b4c:	b002      	add	sp, #8
    5b4e:	bd80      	pop	{r7, pc}
    5b50:	00005729 	.word	0x00005729
    5b54:	40000c02 	.word	0x40000c02
    5b58:	40000c00 	.word	0x40000c00
    5b5c:	ffffc000 	.word	0xffffc000
    5b60:	0000573d 	.word	0x0000573d

00005b64 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    5b64:	b580      	push	{r7, lr}
    5b66:	b084      	sub	sp, #16
    5b68:	af00      	add	r7, sp, #0
    5b6a:	0002      	movs	r2, r0
    5b6c:	1dfb      	adds	r3, r7, #7
    5b6e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    5b70:	4b0d      	ldr	r3, [pc, #52]	; (5ba8 <system_gclk_chan_get_hz+0x44>)
    5b72:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5b74:	4a0d      	ldr	r2, [pc, #52]	; (5bac <system_gclk_chan_get_hz+0x48>)
    5b76:	1dfb      	adds	r3, r7, #7
    5b78:	781b      	ldrb	r3, [r3, #0]
    5b7a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    5b7c:	4b0c      	ldr	r3, [pc, #48]	; (5bb0 <system_gclk_chan_get_hz+0x4c>)
    5b7e:	885b      	ldrh	r3, [r3, #2]
    5b80:	051b      	lsls	r3, r3, #20
    5b82:	0f1b      	lsrs	r3, r3, #28
    5b84:	b2da      	uxtb	r2, r3
    5b86:	230f      	movs	r3, #15
    5b88:	18fb      	adds	r3, r7, r3
    5b8a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    5b8c:	4b09      	ldr	r3, [pc, #36]	; (5bb4 <system_gclk_chan_get_hz+0x50>)
    5b8e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5b90:	230f      	movs	r3, #15
    5b92:	18fb      	adds	r3, r7, r3
    5b94:	781b      	ldrb	r3, [r3, #0]
    5b96:	0018      	movs	r0, r3
    5b98:	4b07      	ldr	r3, [pc, #28]	; (5bb8 <system_gclk_chan_get_hz+0x54>)
    5b9a:	4798      	blx	r3
    5b9c:	0003      	movs	r3, r0
}
    5b9e:	0018      	movs	r0, r3
    5ba0:	46bd      	mov	sp, r7
    5ba2:	b004      	add	sp, #16
    5ba4:	bd80      	pop	{r7, pc}
    5ba6:	46c0      	nop			; (mov r8, r8)
    5ba8:	00005729 	.word	0x00005729
    5bac:	40000c02 	.word	0x40000c02
    5bb0:	40000c00 	.word	0x40000c00
    5bb4:	0000573d 	.word	0x0000573d
    5bb8:	00005921 	.word	0x00005921

00005bbc <system_pinmux_get_group_from_gpio_pin>:
{
    5bbc:	b580      	push	{r7, lr}
    5bbe:	b084      	sub	sp, #16
    5bc0:	af00      	add	r7, sp, #0
    5bc2:	0002      	movs	r2, r0
    5bc4:	1dfb      	adds	r3, r7, #7
    5bc6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5bc8:	230f      	movs	r3, #15
    5bca:	18fb      	adds	r3, r7, r3
    5bcc:	1dfa      	adds	r2, r7, #7
    5bce:	7812      	ldrb	r2, [r2, #0]
    5bd0:	09d2      	lsrs	r2, r2, #7
    5bd2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5bd4:	230e      	movs	r3, #14
    5bd6:	18fb      	adds	r3, r7, r3
    5bd8:	1dfa      	adds	r2, r7, #7
    5bda:	7812      	ldrb	r2, [r2, #0]
    5bdc:	0952      	lsrs	r2, r2, #5
    5bde:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5be0:	4b0d      	ldr	r3, [pc, #52]	; (5c18 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    5be2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    5be4:	230f      	movs	r3, #15
    5be6:	18fb      	adds	r3, r7, r3
    5be8:	781b      	ldrb	r3, [r3, #0]
    5bea:	2b00      	cmp	r3, #0
    5bec:	d10f      	bne.n	5c0e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5bee:	230f      	movs	r3, #15
    5bf0:	18fb      	adds	r3, r7, r3
    5bf2:	781b      	ldrb	r3, [r3, #0]
    5bf4:	009b      	lsls	r3, r3, #2
    5bf6:	2210      	movs	r2, #16
    5bf8:	4694      	mov	ip, r2
    5bfa:	44bc      	add	ip, r7
    5bfc:	4463      	add	r3, ip
    5bfe:	3b08      	subs	r3, #8
    5c00:	681a      	ldr	r2, [r3, #0]
    5c02:	230e      	movs	r3, #14
    5c04:	18fb      	adds	r3, r7, r3
    5c06:	781b      	ldrb	r3, [r3, #0]
    5c08:	01db      	lsls	r3, r3, #7
    5c0a:	18d3      	adds	r3, r2, r3
    5c0c:	e000      	b.n	5c10 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    5c0e:	2300      	movs	r3, #0
}
    5c10:	0018      	movs	r0, r3
    5c12:	46bd      	mov	sp, r7
    5c14:	b004      	add	sp, #16
    5c16:	bd80      	pop	{r7, pc}
    5c18:	41004400 	.word	0x41004400

00005c1c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5c1c:	b580      	push	{r7, lr}
    5c1e:	b088      	sub	sp, #32
    5c20:	af00      	add	r7, sp, #0
    5c22:	60f8      	str	r0, [r7, #12]
    5c24:	60b9      	str	r1, [r7, #8]
    5c26:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    5c28:	2300      	movs	r3, #0
    5c2a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5c2c:	687b      	ldr	r3, [r7, #4]
    5c2e:	78db      	ldrb	r3, [r3, #3]
    5c30:	2201      	movs	r2, #1
    5c32:	4053      	eors	r3, r2
    5c34:	b2db      	uxtb	r3, r3
    5c36:	2b00      	cmp	r3, #0
    5c38:	d035      	beq.n	5ca6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    5c3a:	687b      	ldr	r3, [r7, #4]
    5c3c:	781b      	ldrb	r3, [r3, #0]
    5c3e:	2b80      	cmp	r3, #128	; 0x80
    5c40:	d00b      	beq.n	5c5a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    5c42:	69fb      	ldr	r3, [r7, #28]
    5c44:	2280      	movs	r2, #128	; 0x80
    5c46:	0252      	lsls	r2, r2, #9
    5c48:	4313      	orrs	r3, r2
    5c4a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    5c4c:	687b      	ldr	r3, [r7, #4]
    5c4e:	781b      	ldrb	r3, [r3, #0]
    5c50:	061b      	lsls	r3, r3, #24
    5c52:	001a      	movs	r2, r3
    5c54:	69fb      	ldr	r3, [r7, #28]
    5c56:	4313      	orrs	r3, r2
    5c58:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5c5a:	687b      	ldr	r3, [r7, #4]
    5c5c:	785b      	ldrb	r3, [r3, #1]
    5c5e:	2b00      	cmp	r3, #0
    5c60:	d003      	beq.n	5c6a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5c62:	687b      	ldr	r3, [r7, #4]
    5c64:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5c66:	2b02      	cmp	r3, #2
    5c68:	d110      	bne.n	5c8c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    5c6a:	69fb      	ldr	r3, [r7, #28]
    5c6c:	2280      	movs	r2, #128	; 0x80
    5c6e:	0292      	lsls	r2, r2, #10
    5c70:	4313      	orrs	r3, r2
    5c72:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5c74:	687b      	ldr	r3, [r7, #4]
    5c76:	789b      	ldrb	r3, [r3, #2]
    5c78:	2b00      	cmp	r3, #0
    5c7a:	d004      	beq.n	5c86 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    5c7c:	69fb      	ldr	r3, [r7, #28]
    5c7e:	2280      	movs	r2, #128	; 0x80
    5c80:	02d2      	lsls	r2, r2, #11
    5c82:	4313      	orrs	r3, r2
    5c84:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5c86:	68fb      	ldr	r3, [r7, #12]
    5c88:	68ba      	ldr	r2, [r7, #8]
    5c8a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5c8c:	687b      	ldr	r3, [r7, #4]
    5c8e:	785b      	ldrb	r3, [r3, #1]
    5c90:	2b01      	cmp	r3, #1
    5c92:	d003      	beq.n	5c9c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5c94:	687b      	ldr	r3, [r7, #4]
    5c96:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5c98:	2b02      	cmp	r3, #2
    5c9a:	d107      	bne.n	5cac <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5c9c:	69fb      	ldr	r3, [r7, #28]
    5c9e:	4a22      	ldr	r2, [pc, #136]	; (5d28 <_system_pinmux_config+0x10c>)
    5ca0:	4013      	ands	r3, r2
    5ca2:	61fb      	str	r3, [r7, #28]
    5ca4:	e002      	b.n	5cac <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    5ca6:	68fb      	ldr	r3, [r7, #12]
    5ca8:	68ba      	ldr	r2, [r7, #8]
    5caa:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5cac:	68bb      	ldr	r3, [r7, #8]
    5cae:	041b      	lsls	r3, r3, #16
    5cb0:	0c1b      	lsrs	r3, r3, #16
    5cb2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5cb4:	68bb      	ldr	r3, [r7, #8]
    5cb6:	0c1b      	lsrs	r3, r3, #16
    5cb8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5cba:	69ba      	ldr	r2, [r7, #24]
    5cbc:	69fb      	ldr	r3, [r7, #28]
    5cbe:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5cc0:	22a0      	movs	r2, #160	; 0xa0
    5cc2:	05d2      	lsls	r2, r2, #23
    5cc4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5cc6:	68fb      	ldr	r3, [r7, #12]
    5cc8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5cca:	697a      	ldr	r2, [r7, #20]
    5ccc:	69fb      	ldr	r3, [r7, #28]
    5cce:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5cd0:	22d0      	movs	r2, #208	; 0xd0
    5cd2:	0612      	lsls	r2, r2, #24
    5cd4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5cd6:	68fb      	ldr	r3, [r7, #12]
    5cd8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5cda:	687b      	ldr	r3, [r7, #4]
    5cdc:	78db      	ldrb	r3, [r3, #3]
    5cde:	2201      	movs	r2, #1
    5ce0:	4053      	eors	r3, r2
    5ce2:	b2db      	uxtb	r3, r3
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	d01a      	beq.n	5d1e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5ce8:	69fa      	ldr	r2, [r7, #28]
    5cea:	2380      	movs	r3, #128	; 0x80
    5cec:	02db      	lsls	r3, r3, #11
    5cee:	4013      	ands	r3, r2
    5cf0:	d00a      	beq.n	5d08 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5cf2:	687b      	ldr	r3, [r7, #4]
    5cf4:	789b      	ldrb	r3, [r3, #2]
    5cf6:	2b01      	cmp	r3, #1
    5cf8:	d103      	bne.n	5d02 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    5cfa:	68fb      	ldr	r3, [r7, #12]
    5cfc:	68ba      	ldr	r2, [r7, #8]
    5cfe:	619a      	str	r2, [r3, #24]
    5d00:	e002      	b.n	5d08 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    5d02:	68fb      	ldr	r3, [r7, #12]
    5d04:	68ba      	ldr	r2, [r7, #8]
    5d06:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5d08:	687b      	ldr	r3, [r7, #4]
    5d0a:	785b      	ldrb	r3, [r3, #1]
    5d0c:	2b01      	cmp	r3, #1
    5d0e:	d003      	beq.n	5d18 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5d10:	687b      	ldr	r3, [r7, #4]
    5d12:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5d14:	2b02      	cmp	r3, #2
    5d16:	d102      	bne.n	5d1e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    5d18:	68fb      	ldr	r3, [r7, #12]
    5d1a:	68ba      	ldr	r2, [r7, #8]
    5d1c:	609a      	str	r2, [r3, #8]
		}
	}
}
    5d1e:	46c0      	nop			; (mov r8, r8)
    5d20:	46bd      	mov	sp, r7
    5d22:	b008      	add	sp, #32
    5d24:	bd80      	pop	{r7, pc}
    5d26:	46c0      	nop			; (mov r8, r8)
    5d28:	fffbffff 	.word	0xfffbffff

00005d2c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5d2c:	b580      	push	{r7, lr}
    5d2e:	b084      	sub	sp, #16
    5d30:	af00      	add	r7, sp, #0
    5d32:	0002      	movs	r2, r0
    5d34:	6039      	str	r1, [r7, #0]
    5d36:	1dfb      	adds	r3, r7, #7
    5d38:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5d3a:	1dfb      	adds	r3, r7, #7
    5d3c:	781b      	ldrb	r3, [r3, #0]
    5d3e:	0018      	movs	r0, r3
    5d40:	4b0a      	ldr	r3, [pc, #40]	; (5d6c <system_pinmux_pin_set_config+0x40>)
    5d42:	4798      	blx	r3
    5d44:	0003      	movs	r3, r0
    5d46:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5d48:	1dfb      	adds	r3, r7, #7
    5d4a:	781b      	ldrb	r3, [r3, #0]
    5d4c:	221f      	movs	r2, #31
    5d4e:	4013      	ands	r3, r2
    5d50:	2201      	movs	r2, #1
    5d52:	409a      	lsls	r2, r3
    5d54:	0013      	movs	r3, r2
    5d56:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    5d58:	683a      	ldr	r2, [r7, #0]
    5d5a:	68b9      	ldr	r1, [r7, #8]
    5d5c:	68fb      	ldr	r3, [r7, #12]
    5d5e:	0018      	movs	r0, r3
    5d60:	4b03      	ldr	r3, [pc, #12]	; (5d70 <system_pinmux_pin_set_config+0x44>)
    5d62:	4798      	blx	r3
}
    5d64:	46c0      	nop			; (mov r8, r8)
    5d66:	46bd      	mov	sp, r7
    5d68:	b004      	add	sp, #16
    5d6a:	bd80      	pop	{r7, pc}
    5d6c:	00005bbd 	.word	0x00005bbd
    5d70:	00005c1d 	.word	0x00005c1d

00005d74 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    5d74:	b580      	push	{r7, lr}
    5d76:	af00      	add	r7, sp, #0
	return;
    5d78:	46c0      	nop			; (mov r8, r8)
}
    5d7a:	46bd      	mov	sp, r7
    5d7c:	bd80      	pop	{r7, pc}
	...

00005d80 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5d80:	b580      	push	{r7, lr}
    5d82:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    5d84:	4b06      	ldr	r3, [pc, #24]	; (5da0 <system_init+0x20>)
    5d86:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5d88:	4b06      	ldr	r3, [pc, #24]	; (5da4 <system_init+0x24>)
    5d8a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5d8c:	4b06      	ldr	r3, [pc, #24]	; (5da8 <system_init+0x28>)
    5d8e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5d90:	4b06      	ldr	r3, [pc, #24]	; (5dac <system_init+0x2c>)
    5d92:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    5d94:	4b06      	ldr	r3, [pc, #24]	; (5db0 <system_init+0x30>)
    5d96:	4798      	blx	r3
}
    5d98:	46c0      	nop			; (mov r8, r8)
    5d9a:	46bd      	mov	sp, r7
    5d9c:	bd80      	pop	{r7, pc}
    5d9e:	46c0      	nop			; (mov r8, r8)
    5da0:	00005509 	.word	0x00005509
    5da4:	000050f9 	.word	0x000050f9
    5da8:	00005d75 	.word	0x00005d75
    5dac:	00000b79 	.word	0x00000b79
    5db0:	00005d75 	.word	0x00005d75

00005db4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    5db4:	b580      	push	{r7, lr}
    5db6:	b082      	sub	sp, #8
    5db8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    5dba:	4b2f      	ldr	r3, [pc, #188]	; (5e78 <Reset_Handler+0xc4>)
    5dbc:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    5dbe:	4b2f      	ldr	r3, [pc, #188]	; (5e7c <Reset_Handler+0xc8>)
    5dc0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    5dc2:	687a      	ldr	r2, [r7, #4]
    5dc4:	683b      	ldr	r3, [r7, #0]
    5dc6:	429a      	cmp	r2, r3
    5dc8:	d00c      	beq.n	5de4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    5dca:	e007      	b.n	5ddc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    5dcc:	683b      	ldr	r3, [r7, #0]
    5dce:	1d1a      	adds	r2, r3, #4
    5dd0:	603a      	str	r2, [r7, #0]
    5dd2:	687a      	ldr	r2, [r7, #4]
    5dd4:	1d11      	adds	r1, r2, #4
    5dd6:	6079      	str	r1, [r7, #4]
    5dd8:	6812      	ldr	r2, [r2, #0]
    5dda:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    5ddc:	683a      	ldr	r2, [r7, #0]
    5dde:	4b28      	ldr	r3, [pc, #160]	; (5e80 <Reset_Handler+0xcc>)
    5de0:	429a      	cmp	r2, r3
    5de2:	d3f3      	bcc.n	5dcc <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5de4:	4b27      	ldr	r3, [pc, #156]	; (5e84 <Reset_Handler+0xd0>)
    5de6:	603b      	str	r3, [r7, #0]
    5de8:	e004      	b.n	5df4 <Reset_Handler+0x40>
                *pDest++ = 0;
    5dea:	683b      	ldr	r3, [r7, #0]
    5dec:	1d1a      	adds	r2, r3, #4
    5dee:	603a      	str	r2, [r7, #0]
    5df0:	2200      	movs	r2, #0
    5df2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    5df4:	683a      	ldr	r2, [r7, #0]
    5df6:	4b24      	ldr	r3, [pc, #144]	; (5e88 <Reset_Handler+0xd4>)
    5df8:	429a      	cmp	r2, r3
    5dfa:	d3f6      	bcc.n	5dea <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    5dfc:	4b23      	ldr	r3, [pc, #140]	; (5e8c <Reset_Handler+0xd8>)
    5dfe:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5e00:	4b23      	ldr	r3, [pc, #140]	; (5e90 <Reset_Handler+0xdc>)
    5e02:	687a      	ldr	r2, [r7, #4]
    5e04:	21ff      	movs	r1, #255	; 0xff
    5e06:	438a      	bics	r2, r1
    5e08:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    5e0a:	4a22      	ldr	r2, [pc, #136]	; (5e94 <Reset_Handler+0xe0>)
    5e0c:	2390      	movs	r3, #144	; 0x90
    5e0e:	005b      	lsls	r3, r3, #1
    5e10:	2102      	movs	r1, #2
    5e12:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5e14:	4a20      	ldr	r2, [pc, #128]	; (5e98 <Reset_Handler+0xe4>)
    5e16:	78d3      	ldrb	r3, [r2, #3]
    5e18:	2103      	movs	r1, #3
    5e1a:	438b      	bics	r3, r1
    5e1c:	1c19      	adds	r1, r3, #0
    5e1e:	2302      	movs	r3, #2
    5e20:	430b      	orrs	r3, r1
    5e22:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5e24:	4a1c      	ldr	r2, [pc, #112]	; (5e98 <Reset_Handler+0xe4>)
    5e26:	78d3      	ldrb	r3, [r2, #3]
    5e28:	210c      	movs	r1, #12
    5e2a:	438b      	bics	r3, r1
    5e2c:	1c19      	adds	r1, r3, #0
    5e2e:	2308      	movs	r3, #8
    5e30:	430b      	orrs	r3, r1
    5e32:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    5e34:	4a19      	ldr	r2, [pc, #100]	; (5e9c <Reset_Handler+0xe8>)
    5e36:	7b93      	ldrb	r3, [r2, #14]
    5e38:	2130      	movs	r1, #48	; 0x30
    5e3a:	438b      	bics	r3, r1
    5e3c:	1c19      	adds	r1, r3, #0
    5e3e:	2320      	movs	r3, #32
    5e40:	430b      	orrs	r3, r1
    5e42:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    5e44:	4a15      	ldr	r2, [pc, #84]	; (5e9c <Reset_Handler+0xe8>)
    5e46:	7b93      	ldrb	r3, [r2, #14]
    5e48:	210c      	movs	r1, #12
    5e4a:	438b      	bics	r3, r1
    5e4c:	1c19      	adds	r1, r3, #0
    5e4e:	2308      	movs	r3, #8
    5e50:	430b      	orrs	r3, r1
    5e52:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5e54:	4a11      	ldr	r2, [pc, #68]	; (5e9c <Reset_Handler+0xe8>)
    5e56:	7b93      	ldrb	r3, [r2, #14]
    5e58:	2103      	movs	r1, #3
    5e5a:	438b      	bics	r3, r1
    5e5c:	1c19      	adds	r1, r3, #0
    5e5e:	2302      	movs	r3, #2
    5e60:	430b      	orrs	r3, r1
    5e62:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    5e64:	4a0e      	ldr	r2, [pc, #56]	; (5ea0 <Reset_Handler+0xec>)
    5e66:	6853      	ldr	r3, [r2, #4]
    5e68:	2180      	movs	r1, #128	; 0x80
    5e6a:	430b      	orrs	r3, r1
    5e6c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    5e6e:	4b0d      	ldr	r3, [pc, #52]	; (5ea4 <Reset_Handler+0xf0>)
    5e70:	4798      	blx	r3

        /* Branch to main function */
        main();
    5e72:	4b0d      	ldr	r3, [pc, #52]	; (5ea8 <Reset_Handler+0xf4>)
    5e74:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    5e76:	e7fe      	b.n	5e76 <Reset_Handler+0xc2>
    5e78:	00009d5c 	.word	0x00009d5c
    5e7c:	20000000 	.word	0x20000000
    5e80:	20000264 	.word	0x20000264
    5e84:	20000264 	.word	0x20000264
    5e88:	200004e0 	.word	0x200004e0
    5e8c:	00000000 	.word	0x00000000
    5e90:	e000ed00 	.word	0xe000ed00
    5e94:	41007000 	.word	0x41007000
    5e98:	41005000 	.word	0x41005000
    5e9c:	41004800 	.word	0x41004800
    5ea0:	41004000 	.word	0x41004000
    5ea4:	000081e9 	.word	0x000081e9
    5ea8:	00005f3d 	.word	0x00005f3d

00005eac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5eac:	b580      	push	{r7, lr}
    5eae:	b082      	sub	sp, #8
    5eb0:	af00      	add	r7, sp, #0
	int32_t phantomISR = 9999;
    5eb2:	4b04      	ldr	r3, [pc, #16]	; (5ec4 <Dummy_Handler+0x18>)
    5eb4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5eb6:	f3ef 8305 	mrs	r3, IPSR
    5eba:	603b      	str	r3, [r7, #0]
  return(result);
    5ebc:	683b      	ldr	r3, [r7, #0]
        while (1) {
			phantomISR = __get_IPSR();
    5ebe:	607b      	str	r3, [r7, #4]
    5ec0:	e7f9      	b.n	5eb6 <Dummy_Handler+0xa>
    5ec2:	46c0      	nop			; (mov r8, r8)
    5ec4:	0000270f 	.word	0x0000270f

00005ec8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    5ec8:	b580      	push	{r7, lr}
    5eca:	b084      	sub	sp, #16
    5ecc:	af00      	add	r7, sp, #0
    5ece:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    5ed0:	4b0a      	ldr	r3, [pc, #40]	; (5efc <_sbrk+0x34>)
    5ed2:	681b      	ldr	r3, [r3, #0]
    5ed4:	2b00      	cmp	r3, #0
    5ed6:	d102      	bne.n	5ede <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    5ed8:	4b08      	ldr	r3, [pc, #32]	; (5efc <_sbrk+0x34>)
    5eda:	4a09      	ldr	r2, [pc, #36]	; (5f00 <_sbrk+0x38>)
    5edc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    5ede:	4b07      	ldr	r3, [pc, #28]	; (5efc <_sbrk+0x34>)
    5ee0:	681b      	ldr	r3, [r3, #0]
    5ee2:	60fb      	str	r3, [r7, #12]

	heap += incr;
    5ee4:	4b05      	ldr	r3, [pc, #20]	; (5efc <_sbrk+0x34>)
    5ee6:	681a      	ldr	r2, [r3, #0]
    5ee8:	687b      	ldr	r3, [r7, #4]
    5eea:	18d2      	adds	r2, r2, r3
    5eec:	4b03      	ldr	r3, [pc, #12]	; (5efc <_sbrk+0x34>)
    5eee:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    5ef0:	68fb      	ldr	r3, [r7, #12]
}
    5ef2:	0018      	movs	r0, r3
    5ef4:	46bd      	mov	sp, r7
    5ef6:	b004      	add	sp, #16
    5ef8:	bd80      	pop	{r7, pc}
    5efa:	46c0      	nop			; (mov r8, r8)
    5efc:	200002ac 	.word	0x200002ac
    5f00:	200024e0 	.word	0x200024e0

00005f04 <system_interrupt_enable_global>:
{
    5f04:	b580      	push	{r7, lr}
    5f06:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    5f08:	4b04      	ldr	r3, [pc, #16]	; (5f1c <system_interrupt_enable_global+0x18>)
    5f0a:	2201      	movs	r2, #1
    5f0c:	701a      	strb	r2, [r3, #0]
    5f0e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5f12:	b662      	cpsie	i
}
    5f14:	46c0      	nop			; (mov r8, r8)
    5f16:	46bd      	mov	sp, r7
    5f18:	bd80      	pop	{r7, pc}
    5f1a:	46c0      	nop			; (mov r8, r8)
    5f1c:	20000091 	.word	0x20000091

00005f20 <system_interrupt_disable_global>:
{
    5f20:	b580      	push	{r7, lr}
    5f22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
    5f24:	b672      	cpsid	i
    5f26:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5f2a:	4b03      	ldr	r3, [pc, #12]	; (5f38 <system_interrupt_disable_global+0x18>)
    5f2c:	2200      	movs	r2, #0
    5f2e:	701a      	strb	r2, [r3, #0]
}
    5f30:	46c0      	nop			; (mov r8, r8)
    5f32:	46bd      	mov	sp, r7
    5f34:	bd80      	pop	{r7, pc}
    5f36:	46c0      	nop			; (mov r8, r8)
    5f38:	20000091 	.word	0x20000091

00005f3c <main>:
char buffer[32];



int main (void)
{
    5f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f3e:	b08f      	sub	sp, #60	; 0x3c
    5f40:	af00      	add	r7, sp, #0
	
	system_init();
    5f42:	4b5d      	ldr	r3, [pc, #372]	; (60b8 <main+0x17c>)
    5f44:	4798      	blx	r3
	delay_init();
    5f46:	4b5d      	ldr	r3, [pc, #372]	; (60bc <main+0x180>)
    5f48:	4798      	blx	r3
	ble_uart_init();
    5f4a:	4b5d      	ldr	r3, [pc, #372]	; (60c0 <main+0x184>)
    5f4c:	4798      	blx	r3
	uart_init();
    5f4e:	4b5d      	ldr	r3, [pc, #372]	; (60c4 <main+0x188>)
    5f50:	4798      	blx	r3
	sprintf(buffer,"\n<-------------------->\n");
    5f52:	4a5d      	ldr	r2, [pc, #372]	; (60c8 <main+0x18c>)
    5f54:	4b5d      	ldr	r3, [pc, #372]	; (60cc <main+0x190>)
    5f56:	0010      	movs	r0, r2
    5f58:	0019      	movs	r1, r3
    5f5a:	2319      	movs	r3, #25
    5f5c:	001a      	movs	r2, r3
    5f5e:	4b5c      	ldr	r3, [pc, #368]	; (60d0 <main+0x194>)
    5f60:	4798      	blx	r3
	ble_uart_write(buffer);
    5f62:	4b59      	ldr	r3, [pc, #356]	; (60c8 <main+0x18c>)
    5f64:	0018      	movs	r0, r3
    5f66:	4b5b      	ldr	r3, [pc, #364]	; (60d4 <main+0x198>)
    5f68:	4798      	blx	r3
	uart_write(buffer);
    5f6a:	4b57      	ldr	r3, [pc, #348]	; (60c8 <main+0x18c>)
    5f6c:	0018      	movs	r0, r3
    5f6e:	4b5a      	ldr	r3, [pc, #360]	; (60d8 <main+0x19c>)
    5f70:	4798      	blx	r3
	delay_ms(2000);
    5f72:	2000      	movs	r0, #0
    5f74:	4b59      	ldr	r3, [pc, #356]	; (60dc <main+0x1a0>)
    5f76:	4798      	blx	r3
    5f78:	0003      	movs	r3, r0
    5f7a:	001d      	movs	r5, r3
    5f7c:	2300      	movs	r3, #0
    5f7e:	001e      	movs	r6, r3
    5f80:	4c57      	ldr	r4, [pc, #348]	; (60e0 <main+0x1a4>)
    5f82:	22fa      	movs	r2, #250	; 0xfa
    5f84:	00d2      	lsls	r2, r2, #3
    5f86:	2300      	movs	r3, #0
    5f88:	0028      	movs	r0, r5
    5f8a:	0031      	movs	r1, r6
    5f8c:	47a0      	blx	r4
    5f8e:	0003      	movs	r3, r0
    5f90:	000c      	movs	r4, r1
    5f92:	0019      	movs	r1, r3
    5f94:	0022      	movs	r2, r4
    5f96:	4b53      	ldr	r3, [pc, #332]	; (60e4 <main+0x1a8>)
    5f98:	2400      	movs	r4, #0
    5f9a:	18c9      	adds	r1, r1, r3
    5f9c:	4162      	adcs	r2, r4
    5f9e:	0008      	movs	r0, r1
    5fa0:	0011      	movs	r1, r2
    5fa2:	4c51      	ldr	r4, [pc, #324]	; (60e8 <main+0x1ac>)
    5fa4:	4a51      	ldr	r2, [pc, #324]	; (60ec <main+0x1b0>)
    5fa6:	2300      	movs	r3, #0
    5fa8:	47a0      	blx	r4
    5faa:	0003      	movs	r3, r0
    5fac:	000c      	movs	r4, r1
    5fae:	0018      	movs	r0, r3
    5fb0:	4b4f      	ldr	r3, [pc, #316]	; (60f0 <main+0x1b4>)
    5fb2:	4798      	blx	r3
	sprintf(buffer,"Master Board Started\n");
    5fb4:	4a44      	ldr	r2, [pc, #272]	; (60c8 <main+0x18c>)
    5fb6:	4b4f      	ldr	r3, [pc, #316]	; (60f4 <main+0x1b8>)
    5fb8:	0010      	movs	r0, r2
    5fba:	0019      	movs	r1, r3
    5fbc:	2316      	movs	r3, #22
    5fbe:	001a      	movs	r2, r3
    5fc0:	4b43      	ldr	r3, [pc, #268]	; (60d0 <main+0x194>)
    5fc2:	4798      	blx	r3
	ble_uart_write(buffer);
    5fc4:	4b40      	ldr	r3, [pc, #256]	; (60c8 <main+0x18c>)
    5fc6:	0018      	movs	r0, r3
    5fc8:	4b42      	ldr	r3, [pc, #264]	; (60d4 <main+0x198>)
    5fca:	4798      	blx	r3
	uart_write(buffer);
    5fcc:	4b3e      	ldr	r3, [pc, #248]	; (60c8 <main+0x18c>)
    5fce:	0018      	movs	r0, r3
    5fd0:	4b41      	ldr	r3, [pc, #260]	; (60d8 <main+0x19c>)
    5fd2:	4798      	blx	r3
	sprintf(buffer,"SOFTWARE_VERSION: %d\r\n", SOFTWARE_VERSION);
    5fd4:	4948      	ldr	r1, [pc, #288]	; (60f8 <main+0x1bc>)
    5fd6:	4b3c      	ldr	r3, [pc, #240]	; (60c8 <main+0x18c>)
    5fd8:	222a      	movs	r2, #42	; 0x2a
    5fda:	0018      	movs	r0, r3
    5fdc:	4b47      	ldr	r3, [pc, #284]	; (60fc <main+0x1c0>)
    5fde:	4798      	blx	r3
	ble_uart_write(buffer);
    5fe0:	4b39      	ldr	r3, [pc, #228]	; (60c8 <main+0x18c>)
    5fe2:	0018      	movs	r0, r3
    5fe4:	4b3b      	ldr	r3, [pc, #236]	; (60d4 <main+0x198>)
    5fe6:	4798      	blx	r3
	uart_write(buffer);
    5fe8:	4b37      	ldr	r3, [pc, #220]	; (60c8 <main+0x18c>)
    5fea:	0018      	movs	r0, r3
    5fec:	4b3a      	ldr	r3, [pc, #232]	; (60d8 <main+0x19c>)
    5fee:	4798      	blx	r3
	sprintf(buffer,"<-------------------->\n\n");
    5ff0:	4a35      	ldr	r2, [pc, #212]	; (60c8 <main+0x18c>)
    5ff2:	4b43      	ldr	r3, [pc, #268]	; (6100 <main+0x1c4>)
    5ff4:	0010      	movs	r0, r2
    5ff6:	0019      	movs	r1, r3
    5ff8:	2319      	movs	r3, #25
    5ffa:	001a      	movs	r2, r3
    5ffc:	4b34      	ldr	r3, [pc, #208]	; (60d0 <main+0x194>)
    5ffe:	4798      	blx	r3
	ble_uart_write(buffer);
    6000:	4b31      	ldr	r3, [pc, #196]	; (60c8 <main+0x18c>)
    6002:	0018      	movs	r0, r3
    6004:	4b33      	ldr	r3, [pc, #204]	; (60d4 <main+0x198>)
    6006:	4798      	blx	r3
	uart_write(buffer);
    6008:	4b2f      	ldr	r3, [pc, #188]	; (60c8 <main+0x18c>)
    600a:	0018      	movs	r0, r3
    600c:	4b32      	ldr	r3, [pc, #200]	; (60d8 <main+0x19c>)
    600e:	4798      	blx	r3
	mcp23017_pin_init();
    6010:	4b3c      	ldr	r3, [pc, #240]	; (6104 <main+0x1c8>)
    6012:	4798      	blx	r3
	
	configure_i2c_master();
    6014:	4b3c      	ldr	r3, [pc, #240]	; (6108 <main+0x1cc>)
    6016:	4798      	blx	r3
	
	uint8_t states = init_all_ports();
    6018:	2336      	movs	r3, #54	; 0x36
    601a:	18fc      	adds	r4, r7, r3
    601c:	4b3b      	ldr	r3, [pc, #236]	; (610c <main+0x1d0>)
    601e:	4798      	blx	r3
    6020:	0003      	movs	r3, r0
    6022:	7023      	strb	r3, [r4, #0]
	
	//ble_uart_write(buffer);
	

	
	sounds_init_pins();
    6024:	4b3a      	ldr	r3, [pc, #232]	; (6110 <main+0x1d4>)
    6026:	4798      	blx	r3
	
	//sounds_reset();
	
	pwm_port();
    6028:	4b3a      	ldr	r3, [pc, #232]	; (6114 <main+0x1d8>)
    602a:	4798      	blx	r3
	init_TC3();
    602c:	4b3a      	ldr	r3, [pc, #232]	; (6118 <main+0x1dc>)
    602e:	4798      	blx	r3
	
	msgeq7_init();
    6030:	4b3a      	ldr	r3, [pc, #232]	; (611c <main+0x1e0>)
    6032:	4798      	blx	r3
	//select_sample();
	
	//party = true;
	
	party_thresholds[0] = 1500;//1375;
    6034:	4a3a      	ldr	r2, [pc, #232]	; (6120 <main+0x1e4>)
    6036:	4b3b      	ldr	r3, [pc, #236]	; (6124 <main+0x1e8>)
    6038:	8013      	strh	r3, [r2, #0]
	party_thresholds[1] = 1550;
    603a:	4a39      	ldr	r2, [pc, #228]	; (6120 <main+0x1e4>)
    603c:	4b3a      	ldr	r3, [pc, #232]	; (6128 <main+0x1ec>)
    603e:	8053      	strh	r3, [r2, #2]
	party_thresholds[2] = 1400;
    6040:	4a37      	ldr	r2, [pc, #220]	; (6120 <main+0x1e4>)
    6042:	23af      	movs	r3, #175	; 0xaf
    6044:	00db      	lsls	r3, r3, #3
    6046:	8093      	strh	r3, [r2, #4]
	party_thresholds[3] = 2500;
    6048:	4a35      	ldr	r2, [pc, #212]	; (6120 <main+0x1e4>)
    604a:	4b38      	ldr	r3, [pc, #224]	; (612c <main+0x1f0>)
    604c:	80d3      	strh	r3, [r2, #6]
	party_thresholds[4] = 3000;
    604e:	4a34      	ldr	r2, [pc, #208]	; (6120 <main+0x1e4>)
    6050:	4b37      	ldr	r3, [pc, #220]	; (6130 <main+0x1f4>)
    6052:	8113      	strh	r3, [r2, #8]
	party_thresholds[5] = 2000;
    6054:	4a32      	ldr	r2, [pc, #200]	; (6120 <main+0x1e4>)
    6056:	23fa      	movs	r3, #250	; 0xfa
    6058:	00db      	lsls	r3, r3, #3
    605a:	8153      	strh	r3, [r2, #10]
	party_thresholds[6] = 2375;
    605c:	4a30      	ldr	r2, [pc, #192]	; (6120 <main+0x1e4>)
    605e:	4b35      	ldr	r3, [pc, #212]	; (6134 <main+0x1f8>)
    6060:	8193      	strh	r3, [r2, #12]
	 
	
	while (1)
	{
		for (uint8_t i=0;i<sizeof(rx_buffer_array);i++)
    6062:	2337      	movs	r3, #55	; 0x37
    6064:	18fa      	adds	r2, r7, r3
    6066:	2300      	movs	r3, #0
    6068:	7013      	strb	r3, [r2, #0]
    606a:	e01d      	b.n	60a8 <main+0x16c>
		{
			if (rx_buffer_array[i] == '\n')
    606c:	2337      	movs	r3, #55	; 0x37
    606e:	18fb      	adds	r3, r7, r3
    6070:	781a      	ldrb	r2, [r3, #0]
    6072:	4b31      	ldr	r3, [pc, #196]	; (6138 <main+0x1fc>)
    6074:	5c9b      	ldrb	r3, [r3, r2]
    6076:	b2db      	uxtb	r3, r3
    6078:	2b0a      	cmp	r3, #10
    607a:	d106      	bne.n	608a <main+0x14e>
			{
				data_handler(rx_buffer_array);
    607c:	4b2e      	ldr	r3, [pc, #184]	; (6138 <main+0x1fc>)
    607e:	0018      	movs	r0, r3
    6080:	4b2e      	ldr	r3, [pc, #184]	; (613c <main+0x200>)
    6082:	4798      	blx	r3
				reset_buffers();
    6084:	4b2e      	ldr	r3, [pc, #184]	; (6140 <main+0x204>)
    6086:	4798      	blx	r3
    6088:	e007      	b.n	609a <main+0x15e>
			}
			else if (rx_buffer_array[i] == 0)
    608a:	2337      	movs	r3, #55	; 0x37
    608c:	18fb      	adds	r3, r7, r3
    608e:	781a      	ldrb	r2, [r3, #0]
    6090:	4b29      	ldr	r3, [pc, #164]	; (6138 <main+0x1fc>)
    6092:	5c9b      	ldrb	r3, [r3, r2]
    6094:	b2db      	uxtb	r3, r3
    6096:	2b00      	cmp	r3, #0
    6098:	d054      	beq.n	6144 <main+0x208>
		for (uint8_t i=0;i<sizeof(rx_buffer_array);i++)
    609a:	2337      	movs	r3, #55	; 0x37
    609c:	18fb      	adds	r3, r7, r3
    609e:	781b      	ldrb	r3, [r3, #0]
    60a0:	2237      	movs	r2, #55	; 0x37
    60a2:	18ba      	adds	r2, r7, r2
    60a4:	3301      	adds	r3, #1
    60a6:	7013      	strb	r3, [r2, #0]
    60a8:	2337      	movs	r3, #55	; 0x37
    60aa:	18fb      	adds	r3, r7, r3
    60ac:	781b      	ldrb	r3, [r3, #0]
    60ae:	b25b      	sxtb	r3, r3
    60b0:	2b00      	cmp	r3, #0
    60b2:	dadb      	bge.n	606c <main+0x130>
    60b4:	e047      	b.n	6146 <main+0x20a>
    60b6:	46c0      	nop			; (mov r8, r8)
    60b8:	00005d81 	.word	0x00005d81
    60bc:	00000181 	.word	0x00000181
    60c0:	00001f9d 	.word	0x00001f9d
    60c4:	00004f59 	.word	0x00004f59
    60c8:	20000490 	.word	0x20000490
    60cc:	00009a84 	.word	0x00009a84
    60d0:	00008231 	.word	0x00008231
    60d4:	00002025 	.word	0x00002025
    60d8:	000050b1 	.word	0x000050b1
    60dc:	00005921 	.word	0x00005921
    60e0:	00006735 	.word	0x00006735
    60e4:	00001b57 	.word	0x00001b57
    60e8:	000066f5 	.word	0x000066f5
    60ec:	00001b58 	.word	0x00001b58
    60f0:	20000001 	.word	0x20000001
    60f4:	00009aa0 	.word	0x00009aa0
    60f8:	00009ab8 	.word	0x00009ab8
    60fc:	00008245 	.word	0x00008245
    6100:	00009ad0 	.word	0x00009ad0
    6104:	00004201 	.word	0x00004201
    6108:	00003ce1 	.word	0x00003ce1
    610c:	00003fe1 	.word	0x00003fe1
    6110:	00004bc5 	.word	0x00004bc5
    6114:	000048d1 	.word	0x000048d1
    6118:	00004911 	.word	0x00004911
    611c:	00004525 	.word	0x00004525
    6120:	2000031c 	.word	0x2000031c
    6124:	000005dc 	.word	0x000005dc
    6128:	0000060e 	.word	0x0000060e
    612c:	000009c4 	.word	0x000009c4
    6130:	00000bb8 	.word	0x00000bb8
    6134:	00000947 	.word	0x00000947
    6138:	2000032c 	.word	0x2000032c
    613c:	0000211d 	.word	0x0000211d
    6140:	000020d9 	.word	0x000020d9
			{
				break;
    6144:	46c0      	nop			; (mov r8, r8)
			}
		}
		
		if (should_update)
    6146:	4ba0      	ldr	r3, [pc, #640]	; (63c8 <main+0x48c>)
    6148:	781b      	ldrb	r3, [r3, #0]
    614a:	2b00      	cmp	r3, #0
    614c:	d006      	beq.n	615c <main+0x220>
		{
			should_update = false;
    614e:	4a9e      	ldr	r2, [pc, #632]	; (63c8 <main+0x48c>)
    6150:	2300      	movs	r3, #0
    6152:	7013      	strb	r3, [r2, #0]
			things_to_do();
    6154:	4b9d      	ldr	r3, [pc, #628]	; (63cc <main+0x490>)
    6156:	4798      	blx	r3
			update_all_ports();
    6158:	4b9d      	ldr	r3, [pc, #628]	; (63d0 <main+0x494>)
    615a:	4798      	blx	r3
		}
		if (execute_order_66)
    615c:	4b9d      	ldr	r3, [pc, #628]	; (63d4 <main+0x498>)
    615e:	781b      	ldrb	r3, [r3, #0]
    6160:	2b00      	cmp	r3, #0
    6162:	d004      	beq.n	616e <main+0x232>
		{
			execute_order_66 = false;
    6164:	4a9b      	ldr	r2, [pc, #620]	; (63d4 <main+0x498>)
    6166:	2300      	movs	r3, #0
    6168:	7013      	strb	r3, [r2, #0]
			a_okay();
    616a:	4b9b      	ldr	r3, [pc, #620]	; (63d8 <main+0x49c>)
    616c:	4798      	blx	r3
		}
		
		if (valve_open)
    616e:	4b9b      	ldr	r3, [pc, #620]	; (63dc <main+0x4a0>)
    6170:	781b      	ldrb	r3, [r3, #0]
    6172:	b2db      	uxtb	r3, r3
    6174:	2b00      	cmp	r3, #0
    6176:	d100      	bne.n	617a <main+0x23e>
    6178:	e08f      	b.n	629a <main+0x35e>
		{
			system_interrupt_disable_global();
    617a:	4b99      	ldr	r3, [pc, #612]	; (63e0 <main+0x4a4>)
    617c:	4798      	blx	r3
			valve_open = false;
    617e:	4a97      	ldr	r2, [pc, #604]	; (63dc <main+0x4a0>)
    6180:	2300      	movs	r3, #0
    6182:	7013      	strb	r3, [r2, #0]
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,true);
    6184:	2301      	movs	r3, #1
    6186:	2200      	movs	r2, #0
    6188:	2105      	movs	r1, #5
    618a:	2000      	movs	r0, #0
    618c:	4c95      	ldr	r4, [pc, #596]	; (63e4 <main+0x4a8>)
    618e:	47a0      	blx	r4
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    6190:	2300      	movs	r3, #0
    6192:	2201      	movs	r2, #1
    6194:	2105      	movs	r1, #5
    6196:	2000      	movs	r0, #0
    6198:	4c92      	ldr	r4, [pc, #584]	; (63e4 <main+0x4a8>)
    619a:	47a0      	blx	r4
			update_all_ports();
    619c:	4b8c      	ldr	r3, [pc, #560]	; (63d0 <main+0x494>)
    619e:	4798      	blx	r3
			delay_ms(300);
    61a0:	2000      	movs	r0, #0
    61a2:	4b91      	ldr	r3, [pc, #580]	; (63e8 <main+0x4ac>)
    61a4:	4798      	blx	r3
    61a6:	0003      	movs	r3, r0
    61a8:	62bb      	str	r3, [r7, #40]	; 0x28
    61aa:	2300      	movs	r3, #0
    61ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    61ae:	4c8f      	ldr	r4, [pc, #572]	; (63ec <main+0x4b0>)
    61b0:	2296      	movs	r2, #150	; 0x96
    61b2:	0052      	lsls	r2, r2, #1
    61b4:	2300      	movs	r3, #0
    61b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    61b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    61ba:	47a0      	blx	r4
    61bc:	0003      	movs	r3, r0
    61be:	000c      	movs	r4, r1
    61c0:	0019      	movs	r1, r3
    61c2:	0022      	movs	r2, r4
    61c4:	4b8a      	ldr	r3, [pc, #552]	; (63f0 <main+0x4b4>)
    61c6:	2400      	movs	r4, #0
    61c8:	18c9      	adds	r1, r1, r3
    61ca:	4162      	adcs	r2, r4
    61cc:	0008      	movs	r0, r1
    61ce:	0011      	movs	r1, r2
    61d0:	4c88      	ldr	r4, [pc, #544]	; (63f4 <main+0x4b8>)
    61d2:	4a89      	ldr	r2, [pc, #548]	; (63f8 <main+0x4bc>)
    61d4:	2300      	movs	r3, #0
    61d6:	47a0      	blx	r4
    61d8:	0003      	movs	r3, r0
    61da:	000c      	movs	r4, r1
    61dc:	0018      	movs	r0, r3
    61de:	4b87      	ldr	r3, [pc, #540]	; (63fc <main+0x4c0>)
    61e0:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    61e2:	2300      	movs	r3, #0
    61e4:	2200      	movs	r2, #0
    61e6:	2105      	movs	r1, #5
    61e8:	2000      	movs	r0, #0
    61ea:	4c7e      	ldr	r4, [pc, #504]	; (63e4 <main+0x4a8>)
    61ec:	47a0      	blx	r4
			update_all_ports();
    61ee:	4b78      	ldr	r3, [pc, #480]	; (63d0 <main+0x494>)
    61f0:	4798      	blx	r3
			delay_ms(4000);
    61f2:	2000      	movs	r0, #0
    61f4:	4b7c      	ldr	r3, [pc, #496]	; (63e8 <main+0x4ac>)
    61f6:	4798      	blx	r3
    61f8:	0003      	movs	r3, r0
    61fa:	623b      	str	r3, [r7, #32]
    61fc:	2300      	movs	r3, #0
    61fe:	627b      	str	r3, [r7, #36]	; 0x24
    6200:	4c7a      	ldr	r4, [pc, #488]	; (63ec <main+0x4b0>)
    6202:	22fa      	movs	r2, #250	; 0xfa
    6204:	0112      	lsls	r2, r2, #4
    6206:	2300      	movs	r3, #0
    6208:	6a38      	ldr	r0, [r7, #32]
    620a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    620c:	47a0      	blx	r4
    620e:	0003      	movs	r3, r0
    6210:	000c      	movs	r4, r1
    6212:	0019      	movs	r1, r3
    6214:	0022      	movs	r2, r4
    6216:	4b76      	ldr	r3, [pc, #472]	; (63f0 <main+0x4b4>)
    6218:	2400      	movs	r4, #0
    621a:	18c9      	adds	r1, r1, r3
    621c:	4162      	adcs	r2, r4
    621e:	0008      	movs	r0, r1
    6220:	0011      	movs	r1, r2
    6222:	4c74      	ldr	r4, [pc, #464]	; (63f4 <main+0x4b8>)
    6224:	4a74      	ldr	r2, [pc, #464]	; (63f8 <main+0x4bc>)
    6226:	2300      	movs	r3, #0
    6228:	47a0      	blx	r4
    622a:	0003      	movs	r3, r0
    622c:	000c      	movs	r4, r1
    622e:	0018      	movs	r0, r3
    6230:	4b72      	ldr	r3, [pc, #456]	; (63fc <main+0x4c0>)
    6232:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,true);
    6234:	2301      	movs	r3, #1
    6236:	2200      	movs	r2, #0
    6238:	2105      	movs	r1, #5
    623a:	2000      	movs	r0, #0
    623c:	4c69      	ldr	r4, [pc, #420]	; (63e4 <main+0x4a8>)
    623e:	47a0      	blx	r4
			update_all_ports();
    6240:	4b63      	ldr	r3, [pc, #396]	; (63d0 <main+0x494>)
    6242:	4798      	blx	r3
			delay_ms(300);
    6244:	2000      	movs	r0, #0
    6246:	4b68      	ldr	r3, [pc, #416]	; (63e8 <main+0x4ac>)
    6248:	4798      	blx	r3
    624a:	0003      	movs	r3, r0
    624c:	61bb      	str	r3, [r7, #24]
    624e:	2300      	movs	r3, #0
    6250:	61fb      	str	r3, [r7, #28]
    6252:	4c66      	ldr	r4, [pc, #408]	; (63ec <main+0x4b0>)
    6254:	2296      	movs	r2, #150	; 0x96
    6256:	0052      	lsls	r2, r2, #1
    6258:	2300      	movs	r3, #0
    625a:	69b8      	ldr	r0, [r7, #24]
    625c:	69f9      	ldr	r1, [r7, #28]
    625e:	47a0      	blx	r4
    6260:	0003      	movs	r3, r0
    6262:	000c      	movs	r4, r1
    6264:	0019      	movs	r1, r3
    6266:	0022      	movs	r2, r4
    6268:	4b61      	ldr	r3, [pc, #388]	; (63f0 <main+0x4b4>)
    626a:	2400      	movs	r4, #0
    626c:	18c9      	adds	r1, r1, r3
    626e:	4162      	adcs	r2, r4
    6270:	0008      	movs	r0, r1
    6272:	0011      	movs	r1, r2
    6274:	4c5f      	ldr	r4, [pc, #380]	; (63f4 <main+0x4b8>)
    6276:	4a60      	ldr	r2, [pc, #384]	; (63f8 <main+0x4bc>)
    6278:	2300      	movs	r3, #0
    627a:	47a0      	blx	r4
    627c:	0003      	movs	r3, r0
    627e:	000c      	movs	r4, r1
    6280:	0018      	movs	r0, r3
    6282:	4b5e      	ldr	r3, [pc, #376]	; (63fc <main+0x4c0>)
    6284:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    6286:	2300      	movs	r3, #0
    6288:	2200      	movs	r2, #0
    628a:	2105      	movs	r1, #5
    628c:	2000      	movs	r0, #0
    628e:	4c55      	ldr	r4, [pc, #340]	; (63e4 <main+0x4a8>)
    6290:	47a0      	blx	r4
			update_all_ports();
    6292:	4b4f      	ldr	r3, [pc, #316]	; (63d0 <main+0x494>)
    6294:	4798      	blx	r3
			system_interrupt_enable_global();
    6296:	4b5a      	ldr	r3, [pc, #360]	; (6400 <main+0x4c4>)
    6298:	4798      	blx	r3
		}
		if (valve_close)
    629a:	4b5a      	ldr	r3, [pc, #360]	; (6404 <main+0x4c8>)
    629c:	781b      	ldrb	r3, [r3, #0]
    629e:	b2db      	uxtb	r3, r3
    62a0:	2b00      	cmp	r3, #0
    62a2:	d100      	bne.n	62a6 <main+0x36a>
    62a4:	e6dd      	b.n	6062 <main+0x126>
		{
			system_interrupt_disable_global();
    62a6:	4b4e      	ldr	r3, [pc, #312]	; (63e0 <main+0x4a4>)
    62a8:	4798      	blx	r3
			valve_close = false;
    62aa:	4a56      	ldr	r2, [pc, #344]	; (6404 <main+0x4c8>)
    62ac:	2300      	movs	r3, #0
    62ae:	7013      	strb	r3, [r2, #0]
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    62b0:	2300      	movs	r3, #0
    62b2:	2200      	movs	r2, #0
    62b4:	2105      	movs	r1, #5
    62b6:	2000      	movs	r0, #0
    62b8:	4c4a      	ldr	r4, [pc, #296]	; (63e4 <main+0x4a8>)
    62ba:	47a0      	blx	r4
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,true);
    62bc:	2301      	movs	r3, #1
    62be:	2201      	movs	r2, #1
    62c0:	2105      	movs	r1, #5
    62c2:	2000      	movs	r0, #0
    62c4:	4c47      	ldr	r4, [pc, #284]	; (63e4 <main+0x4a8>)
    62c6:	47a0      	blx	r4
			update_all_ports();
    62c8:	4b41      	ldr	r3, [pc, #260]	; (63d0 <main+0x494>)
    62ca:	4798      	blx	r3
			delay_ms(300);
    62cc:	2000      	movs	r0, #0
    62ce:	4b46      	ldr	r3, [pc, #280]	; (63e8 <main+0x4ac>)
    62d0:	4798      	blx	r3
    62d2:	0003      	movs	r3, r0
    62d4:	613b      	str	r3, [r7, #16]
    62d6:	2300      	movs	r3, #0
    62d8:	617b      	str	r3, [r7, #20]
    62da:	4c44      	ldr	r4, [pc, #272]	; (63ec <main+0x4b0>)
    62dc:	2296      	movs	r2, #150	; 0x96
    62de:	0052      	lsls	r2, r2, #1
    62e0:	2300      	movs	r3, #0
    62e2:	6938      	ldr	r0, [r7, #16]
    62e4:	6979      	ldr	r1, [r7, #20]
    62e6:	47a0      	blx	r4
    62e8:	0003      	movs	r3, r0
    62ea:	000c      	movs	r4, r1
    62ec:	0019      	movs	r1, r3
    62ee:	0022      	movs	r2, r4
    62f0:	4b3f      	ldr	r3, [pc, #252]	; (63f0 <main+0x4b4>)
    62f2:	2400      	movs	r4, #0
    62f4:	18c9      	adds	r1, r1, r3
    62f6:	4162      	adcs	r2, r4
    62f8:	0008      	movs	r0, r1
    62fa:	0011      	movs	r1, r2
    62fc:	4c3d      	ldr	r4, [pc, #244]	; (63f4 <main+0x4b8>)
    62fe:	4a3e      	ldr	r2, [pc, #248]	; (63f8 <main+0x4bc>)
    6300:	2300      	movs	r3, #0
    6302:	47a0      	blx	r4
    6304:	0003      	movs	r3, r0
    6306:	000c      	movs	r4, r1
    6308:	0018      	movs	r0, r3
    630a:	4b3c      	ldr	r3, [pc, #240]	; (63fc <main+0x4c0>)
    630c:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    630e:	2300      	movs	r3, #0
    6310:	2201      	movs	r2, #1
    6312:	2105      	movs	r1, #5
    6314:	2000      	movs	r0, #0
    6316:	4c33      	ldr	r4, [pc, #204]	; (63e4 <main+0x4a8>)
    6318:	47a0      	blx	r4
			update_all_ports();
    631a:	4b2d      	ldr	r3, [pc, #180]	; (63d0 <main+0x494>)
    631c:	4798      	blx	r3
			delay_ms(4000);
    631e:	2000      	movs	r0, #0
    6320:	4b31      	ldr	r3, [pc, #196]	; (63e8 <main+0x4ac>)
    6322:	4798      	blx	r3
    6324:	0003      	movs	r3, r0
    6326:	60bb      	str	r3, [r7, #8]
    6328:	2300      	movs	r3, #0
    632a:	60fb      	str	r3, [r7, #12]
    632c:	4c2f      	ldr	r4, [pc, #188]	; (63ec <main+0x4b0>)
    632e:	22fa      	movs	r2, #250	; 0xfa
    6330:	0112      	lsls	r2, r2, #4
    6332:	2300      	movs	r3, #0
    6334:	68b8      	ldr	r0, [r7, #8]
    6336:	68f9      	ldr	r1, [r7, #12]
    6338:	47a0      	blx	r4
    633a:	0003      	movs	r3, r0
    633c:	000c      	movs	r4, r1
    633e:	0019      	movs	r1, r3
    6340:	0022      	movs	r2, r4
    6342:	4b2b      	ldr	r3, [pc, #172]	; (63f0 <main+0x4b4>)
    6344:	2400      	movs	r4, #0
    6346:	18c9      	adds	r1, r1, r3
    6348:	4162      	adcs	r2, r4
    634a:	0008      	movs	r0, r1
    634c:	0011      	movs	r1, r2
    634e:	4c29      	ldr	r4, [pc, #164]	; (63f4 <main+0x4b8>)
    6350:	4a29      	ldr	r2, [pc, #164]	; (63f8 <main+0x4bc>)
    6352:	2300      	movs	r3, #0
    6354:	47a0      	blx	r4
    6356:	0003      	movs	r3, r0
    6358:	000c      	movs	r4, r1
    635a:	0018      	movs	r0, r3
    635c:	4b27      	ldr	r3, [pc, #156]	; (63fc <main+0x4c0>)
    635e:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,true);
    6360:	2301      	movs	r3, #1
    6362:	2201      	movs	r2, #1
    6364:	2105      	movs	r1, #5
    6366:	2000      	movs	r0, #0
    6368:	4c1e      	ldr	r4, [pc, #120]	; (63e4 <main+0x4a8>)
    636a:	47a0      	blx	r4
			update_all_ports();
    636c:	4b18      	ldr	r3, [pc, #96]	; (63d0 <main+0x494>)
    636e:	4798      	blx	r3
			delay_ms(300);
    6370:	2000      	movs	r0, #0
    6372:	4b1d      	ldr	r3, [pc, #116]	; (63e8 <main+0x4ac>)
    6374:	4798      	blx	r3
    6376:	0003      	movs	r3, r0
    6378:	603b      	str	r3, [r7, #0]
    637a:	2300      	movs	r3, #0
    637c:	607b      	str	r3, [r7, #4]
    637e:	4c1b      	ldr	r4, [pc, #108]	; (63ec <main+0x4b0>)
    6380:	2296      	movs	r2, #150	; 0x96
    6382:	0052      	lsls	r2, r2, #1
    6384:	2300      	movs	r3, #0
    6386:	6838      	ldr	r0, [r7, #0]
    6388:	6879      	ldr	r1, [r7, #4]
    638a:	47a0      	blx	r4
    638c:	0003      	movs	r3, r0
    638e:	000c      	movs	r4, r1
    6390:	0019      	movs	r1, r3
    6392:	0022      	movs	r2, r4
    6394:	4b16      	ldr	r3, [pc, #88]	; (63f0 <main+0x4b4>)
    6396:	2400      	movs	r4, #0
    6398:	18c9      	adds	r1, r1, r3
    639a:	4162      	adcs	r2, r4
    639c:	0008      	movs	r0, r1
    639e:	0011      	movs	r1, r2
    63a0:	4c14      	ldr	r4, [pc, #80]	; (63f4 <main+0x4b8>)
    63a2:	4a15      	ldr	r2, [pc, #84]	; (63f8 <main+0x4bc>)
    63a4:	2300      	movs	r3, #0
    63a6:	47a0      	blx	r4
    63a8:	0003      	movs	r3, r0
    63aa:	000c      	movs	r4, r1
    63ac:	0018      	movs	r0, r3
    63ae:	4b13      	ldr	r3, [pc, #76]	; (63fc <main+0x4c0>)
    63b0:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    63b2:	2300      	movs	r3, #0
    63b4:	2201      	movs	r2, #1
    63b6:	2105      	movs	r1, #5
    63b8:	2000      	movs	r0, #0
    63ba:	4c0a      	ldr	r4, [pc, #40]	; (63e4 <main+0x4a8>)
    63bc:	47a0      	blx	r4
			update_all_ports();
    63be:	4b04      	ldr	r3, [pc, #16]	; (63d0 <main+0x494>)
    63c0:	4798      	blx	r3
			system_interrupt_enable_global();
    63c2:	4b0f      	ldr	r3, [pc, #60]	; (6400 <main+0x4c4>)
    63c4:	4798      	blx	r3
		for (uint8_t i=0;i<sizeof(rx_buffer_array);i++)
    63c6:	e64c      	b.n	6062 <main+0x126>
    63c8:	20000451 	.word	0x20000451
    63cc:	000049e5 	.word	0x000049e5
    63d0:	00002f81 	.word	0x00002f81
    63d4:	20000450 	.word	0x20000450
    63d8:	000038c5 	.word	0x000038c5
    63dc:	2000031a 	.word	0x2000031a
    63e0:	00005f21 	.word	0x00005f21
    63e4:	00003afd 	.word	0x00003afd
    63e8:	00005921 	.word	0x00005921
    63ec:	00006735 	.word	0x00006735
    63f0:	00001b57 	.word	0x00001b57
    63f4:	000066f5 	.word	0x000066f5
    63f8:	00001b58 	.word	0x00001b58
    63fc:	20000001 	.word	0x20000001
    6400:	00005f05 	.word	0x00005f05
    6404:	20000318 	.word	0x20000318

00006408 <__udivsi3>:
    6408:	2200      	movs	r2, #0
    640a:	0843      	lsrs	r3, r0, #1
    640c:	428b      	cmp	r3, r1
    640e:	d374      	bcc.n	64fa <__udivsi3+0xf2>
    6410:	0903      	lsrs	r3, r0, #4
    6412:	428b      	cmp	r3, r1
    6414:	d35f      	bcc.n	64d6 <__udivsi3+0xce>
    6416:	0a03      	lsrs	r3, r0, #8
    6418:	428b      	cmp	r3, r1
    641a:	d344      	bcc.n	64a6 <__udivsi3+0x9e>
    641c:	0b03      	lsrs	r3, r0, #12
    641e:	428b      	cmp	r3, r1
    6420:	d328      	bcc.n	6474 <__udivsi3+0x6c>
    6422:	0c03      	lsrs	r3, r0, #16
    6424:	428b      	cmp	r3, r1
    6426:	d30d      	bcc.n	6444 <__udivsi3+0x3c>
    6428:	22ff      	movs	r2, #255	; 0xff
    642a:	0209      	lsls	r1, r1, #8
    642c:	ba12      	rev	r2, r2
    642e:	0c03      	lsrs	r3, r0, #16
    6430:	428b      	cmp	r3, r1
    6432:	d302      	bcc.n	643a <__udivsi3+0x32>
    6434:	1212      	asrs	r2, r2, #8
    6436:	0209      	lsls	r1, r1, #8
    6438:	d065      	beq.n	6506 <__udivsi3+0xfe>
    643a:	0b03      	lsrs	r3, r0, #12
    643c:	428b      	cmp	r3, r1
    643e:	d319      	bcc.n	6474 <__udivsi3+0x6c>
    6440:	e000      	b.n	6444 <__udivsi3+0x3c>
    6442:	0a09      	lsrs	r1, r1, #8
    6444:	0bc3      	lsrs	r3, r0, #15
    6446:	428b      	cmp	r3, r1
    6448:	d301      	bcc.n	644e <__udivsi3+0x46>
    644a:	03cb      	lsls	r3, r1, #15
    644c:	1ac0      	subs	r0, r0, r3
    644e:	4152      	adcs	r2, r2
    6450:	0b83      	lsrs	r3, r0, #14
    6452:	428b      	cmp	r3, r1
    6454:	d301      	bcc.n	645a <__udivsi3+0x52>
    6456:	038b      	lsls	r3, r1, #14
    6458:	1ac0      	subs	r0, r0, r3
    645a:	4152      	adcs	r2, r2
    645c:	0b43      	lsrs	r3, r0, #13
    645e:	428b      	cmp	r3, r1
    6460:	d301      	bcc.n	6466 <__udivsi3+0x5e>
    6462:	034b      	lsls	r3, r1, #13
    6464:	1ac0      	subs	r0, r0, r3
    6466:	4152      	adcs	r2, r2
    6468:	0b03      	lsrs	r3, r0, #12
    646a:	428b      	cmp	r3, r1
    646c:	d301      	bcc.n	6472 <__udivsi3+0x6a>
    646e:	030b      	lsls	r3, r1, #12
    6470:	1ac0      	subs	r0, r0, r3
    6472:	4152      	adcs	r2, r2
    6474:	0ac3      	lsrs	r3, r0, #11
    6476:	428b      	cmp	r3, r1
    6478:	d301      	bcc.n	647e <__udivsi3+0x76>
    647a:	02cb      	lsls	r3, r1, #11
    647c:	1ac0      	subs	r0, r0, r3
    647e:	4152      	adcs	r2, r2
    6480:	0a83      	lsrs	r3, r0, #10
    6482:	428b      	cmp	r3, r1
    6484:	d301      	bcc.n	648a <__udivsi3+0x82>
    6486:	028b      	lsls	r3, r1, #10
    6488:	1ac0      	subs	r0, r0, r3
    648a:	4152      	adcs	r2, r2
    648c:	0a43      	lsrs	r3, r0, #9
    648e:	428b      	cmp	r3, r1
    6490:	d301      	bcc.n	6496 <__udivsi3+0x8e>
    6492:	024b      	lsls	r3, r1, #9
    6494:	1ac0      	subs	r0, r0, r3
    6496:	4152      	adcs	r2, r2
    6498:	0a03      	lsrs	r3, r0, #8
    649a:	428b      	cmp	r3, r1
    649c:	d301      	bcc.n	64a2 <__udivsi3+0x9a>
    649e:	020b      	lsls	r3, r1, #8
    64a0:	1ac0      	subs	r0, r0, r3
    64a2:	4152      	adcs	r2, r2
    64a4:	d2cd      	bcs.n	6442 <__udivsi3+0x3a>
    64a6:	09c3      	lsrs	r3, r0, #7
    64a8:	428b      	cmp	r3, r1
    64aa:	d301      	bcc.n	64b0 <__udivsi3+0xa8>
    64ac:	01cb      	lsls	r3, r1, #7
    64ae:	1ac0      	subs	r0, r0, r3
    64b0:	4152      	adcs	r2, r2
    64b2:	0983      	lsrs	r3, r0, #6
    64b4:	428b      	cmp	r3, r1
    64b6:	d301      	bcc.n	64bc <__udivsi3+0xb4>
    64b8:	018b      	lsls	r3, r1, #6
    64ba:	1ac0      	subs	r0, r0, r3
    64bc:	4152      	adcs	r2, r2
    64be:	0943      	lsrs	r3, r0, #5
    64c0:	428b      	cmp	r3, r1
    64c2:	d301      	bcc.n	64c8 <__udivsi3+0xc0>
    64c4:	014b      	lsls	r3, r1, #5
    64c6:	1ac0      	subs	r0, r0, r3
    64c8:	4152      	adcs	r2, r2
    64ca:	0903      	lsrs	r3, r0, #4
    64cc:	428b      	cmp	r3, r1
    64ce:	d301      	bcc.n	64d4 <__udivsi3+0xcc>
    64d0:	010b      	lsls	r3, r1, #4
    64d2:	1ac0      	subs	r0, r0, r3
    64d4:	4152      	adcs	r2, r2
    64d6:	08c3      	lsrs	r3, r0, #3
    64d8:	428b      	cmp	r3, r1
    64da:	d301      	bcc.n	64e0 <__udivsi3+0xd8>
    64dc:	00cb      	lsls	r3, r1, #3
    64de:	1ac0      	subs	r0, r0, r3
    64e0:	4152      	adcs	r2, r2
    64e2:	0883      	lsrs	r3, r0, #2
    64e4:	428b      	cmp	r3, r1
    64e6:	d301      	bcc.n	64ec <__udivsi3+0xe4>
    64e8:	008b      	lsls	r3, r1, #2
    64ea:	1ac0      	subs	r0, r0, r3
    64ec:	4152      	adcs	r2, r2
    64ee:	0843      	lsrs	r3, r0, #1
    64f0:	428b      	cmp	r3, r1
    64f2:	d301      	bcc.n	64f8 <__udivsi3+0xf0>
    64f4:	004b      	lsls	r3, r1, #1
    64f6:	1ac0      	subs	r0, r0, r3
    64f8:	4152      	adcs	r2, r2
    64fa:	1a41      	subs	r1, r0, r1
    64fc:	d200      	bcs.n	6500 <__udivsi3+0xf8>
    64fe:	4601      	mov	r1, r0
    6500:	4152      	adcs	r2, r2
    6502:	4610      	mov	r0, r2
    6504:	4770      	bx	lr
    6506:	e7ff      	b.n	6508 <__udivsi3+0x100>
    6508:	b501      	push	{r0, lr}
    650a:	2000      	movs	r0, #0
    650c:	f000 f8f0 	bl	66f0 <__aeabi_idiv0>
    6510:	bd02      	pop	{r1, pc}
    6512:	46c0      	nop			; (mov r8, r8)

00006514 <__aeabi_uidivmod>:
    6514:	2900      	cmp	r1, #0
    6516:	d0f7      	beq.n	6508 <__udivsi3+0x100>
    6518:	e776      	b.n	6408 <__udivsi3>
    651a:	4770      	bx	lr

0000651c <__divsi3>:
    651c:	4603      	mov	r3, r0
    651e:	430b      	orrs	r3, r1
    6520:	d47f      	bmi.n	6622 <__divsi3+0x106>
    6522:	2200      	movs	r2, #0
    6524:	0843      	lsrs	r3, r0, #1
    6526:	428b      	cmp	r3, r1
    6528:	d374      	bcc.n	6614 <__divsi3+0xf8>
    652a:	0903      	lsrs	r3, r0, #4
    652c:	428b      	cmp	r3, r1
    652e:	d35f      	bcc.n	65f0 <__divsi3+0xd4>
    6530:	0a03      	lsrs	r3, r0, #8
    6532:	428b      	cmp	r3, r1
    6534:	d344      	bcc.n	65c0 <__divsi3+0xa4>
    6536:	0b03      	lsrs	r3, r0, #12
    6538:	428b      	cmp	r3, r1
    653a:	d328      	bcc.n	658e <__divsi3+0x72>
    653c:	0c03      	lsrs	r3, r0, #16
    653e:	428b      	cmp	r3, r1
    6540:	d30d      	bcc.n	655e <__divsi3+0x42>
    6542:	22ff      	movs	r2, #255	; 0xff
    6544:	0209      	lsls	r1, r1, #8
    6546:	ba12      	rev	r2, r2
    6548:	0c03      	lsrs	r3, r0, #16
    654a:	428b      	cmp	r3, r1
    654c:	d302      	bcc.n	6554 <__divsi3+0x38>
    654e:	1212      	asrs	r2, r2, #8
    6550:	0209      	lsls	r1, r1, #8
    6552:	d065      	beq.n	6620 <__divsi3+0x104>
    6554:	0b03      	lsrs	r3, r0, #12
    6556:	428b      	cmp	r3, r1
    6558:	d319      	bcc.n	658e <__divsi3+0x72>
    655a:	e000      	b.n	655e <__divsi3+0x42>
    655c:	0a09      	lsrs	r1, r1, #8
    655e:	0bc3      	lsrs	r3, r0, #15
    6560:	428b      	cmp	r3, r1
    6562:	d301      	bcc.n	6568 <__divsi3+0x4c>
    6564:	03cb      	lsls	r3, r1, #15
    6566:	1ac0      	subs	r0, r0, r3
    6568:	4152      	adcs	r2, r2
    656a:	0b83      	lsrs	r3, r0, #14
    656c:	428b      	cmp	r3, r1
    656e:	d301      	bcc.n	6574 <__divsi3+0x58>
    6570:	038b      	lsls	r3, r1, #14
    6572:	1ac0      	subs	r0, r0, r3
    6574:	4152      	adcs	r2, r2
    6576:	0b43      	lsrs	r3, r0, #13
    6578:	428b      	cmp	r3, r1
    657a:	d301      	bcc.n	6580 <__divsi3+0x64>
    657c:	034b      	lsls	r3, r1, #13
    657e:	1ac0      	subs	r0, r0, r3
    6580:	4152      	adcs	r2, r2
    6582:	0b03      	lsrs	r3, r0, #12
    6584:	428b      	cmp	r3, r1
    6586:	d301      	bcc.n	658c <__divsi3+0x70>
    6588:	030b      	lsls	r3, r1, #12
    658a:	1ac0      	subs	r0, r0, r3
    658c:	4152      	adcs	r2, r2
    658e:	0ac3      	lsrs	r3, r0, #11
    6590:	428b      	cmp	r3, r1
    6592:	d301      	bcc.n	6598 <__divsi3+0x7c>
    6594:	02cb      	lsls	r3, r1, #11
    6596:	1ac0      	subs	r0, r0, r3
    6598:	4152      	adcs	r2, r2
    659a:	0a83      	lsrs	r3, r0, #10
    659c:	428b      	cmp	r3, r1
    659e:	d301      	bcc.n	65a4 <__divsi3+0x88>
    65a0:	028b      	lsls	r3, r1, #10
    65a2:	1ac0      	subs	r0, r0, r3
    65a4:	4152      	adcs	r2, r2
    65a6:	0a43      	lsrs	r3, r0, #9
    65a8:	428b      	cmp	r3, r1
    65aa:	d301      	bcc.n	65b0 <__divsi3+0x94>
    65ac:	024b      	lsls	r3, r1, #9
    65ae:	1ac0      	subs	r0, r0, r3
    65b0:	4152      	adcs	r2, r2
    65b2:	0a03      	lsrs	r3, r0, #8
    65b4:	428b      	cmp	r3, r1
    65b6:	d301      	bcc.n	65bc <__divsi3+0xa0>
    65b8:	020b      	lsls	r3, r1, #8
    65ba:	1ac0      	subs	r0, r0, r3
    65bc:	4152      	adcs	r2, r2
    65be:	d2cd      	bcs.n	655c <__divsi3+0x40>
    65c0:	09c3      	lsrs	r3, r0, #7
    65c2:	428b      	cmp	r3, r1
    65c4:	d301      	bcc.n	65ca <__divsi3+0xae>
    65c6:	01cb      	lsls	r3, r1, #7
    65c8:	1ac0      	subs	r0, r0, r3
    65ca:	4152      	adcs	r2, r2
    65cc:	0983      	lsrs	r3, r0, #6
    65ce:	428b      	cmp	r3, r1
    65d0:	d301      	bcc.n	65d6 <__divsi3+0xba>
    65d2:	018b      	lsls	r3, r1, #6
    65d4:	1ac0      	subs	r0, r0, r3
    65d6:	4152      	adcs	r2, r2
    65d8:	0943      	lsrs	r3, r0, #5
    65da:	428b      	cmp	r3, r1
    65dc:	d301      	bcc.n	65e2 <__divsi3+0xc6>
    65de:	014b      	lsls	r3, r1, #5
    65e0:	1ac0      	subs	r0, r0, r3
    65e2:	4152      	adcs	r2, r2
    65e4:	0903      	lsrs	r3, r0, #4
    65e6:	428b      	cmp	r3, r1
    65e8:	d301      	bcc.n	65ee <__divsi3+0xd2>
    65ea:	010b      	lsls	r3, r1, #4
    65ec:	1ac0      	subs	r0, r0, r3
    65ee:	4152      	adcs	r2, r2
    65f0:	08c3      	lsrs	r3, r0, #3
    65f2:	428b      	cmp	r3, r1
    65f4:	d301      	bcc.n	65fa <__divsi3+0xde>
    65f6:	00cb      	lsls	r3, r1, #3
    65f8:	1ac0      	subs	r0, r0, r3
    65fa:	4152      	adcs	r2, r2
    65fc:	0883      	lsrs	r3, r0, #2
    65fe:	428b      	cmp	r3, r1
    6600:	d301      	bcc.n	6606 <__divsi3+0xea>
    6602:	008b      	lsls	r3, r1, #2
    6604:	1ac0      	subs	r0, r0, r3
    6606:	4152      	adcs	r2, r2
    6608:	0843      	lsrs	r3, r0, #1
    660a:	428b      	cmp	r3, r1
    660c:	d301      	bcc.n	6612 <__divsi3+0xf6>
    660e:	004b      	lsls	r3, r1, #1
    6610:	1ac0      	subs	r0, r0, r3
    6612:	4152      	adcs	r2, r2
    6614:	1a41      	subs	r1, r0, r1
    6616:	d200      	bcs.n	661a <__divsi3+0xfe>
    6618:	4601      	mov	r1, r0
    661a:	4152      	adcs	r2, r2
    661c:	4610      	mov	r0, r2
    661e:	4770      	bx	lr
    6620:	e05d      	b.n	66de <__divsi3+0x1c2>
    6622:	0fca      	lsrs	r2, r1, #31
    6624:	d000      	beq.n	6628 <__divsi3+0x10c>
    6626:	4249      	negs	r1, r1
    6628:	1003      	asrs	r3, r0, #32
    662a:	d300      	bcc.n	662e <__divsi3+0x112>
    662c:	4240      	negs	r0, r0
    662e:	4053      	eors	r3, r2
    6630:	2200      	movs	r2, #0
    6632:	469c      	mov	ip, r3
    6634:	0903      	lsrs	r3, r0, #4
    6636:	428b      	cmp	r3, r1
    6638:	d32d      	bcc.n	6696 <__divsi3+0x17a>
    663a:	0a03      	lsrs	r3, r0, #8
    663c:	428b      	cmp	r3, r1
    663e:	d312      	bcc.n	6666 <__divsi3+0x14a>
    6640:	22fc      	movs	r2, #252	; 0xfc
    6642:	0189      	lsls	r1, r1, #6
    6644:	ba12      	rev	r2, r2
    6646:	0a03      	lsrs	r3, r0, #8
    6648:	428b      	cmp	r3, r1
    664a:	d30c      	bcc.n	6666 <__divsi3+0x14a>
    664c:	0189      	lsls	r1, r1, #6
    664e:	1192      	asrs	r2, r2, #6
    6650:	428b      	cmp	r3, r1
    6652:	d308      	bcc.n	6666 <__divsi3+0x14a>
    6654:	0189      	lsls	r1, r1, #6
    6656:	1192      	asrs	r2, r2, #6
    6658:	428b      	cmp	r3, r1
    665a:	d304      	bcc.n	6666 <__divsi3+0x14a>
    665c:	0189      	lsls	r1, r1, #6
    665e:	d03a      	beq.n	66d6 <__divsi3+0x1ba>
    6660:	1192      	asrs	r2, r2, #6
    6662:	e000      	b.n	6666 <__divsi3+0x14a>
    6664:	0989      	lsrs	r1, r1, #6
    6666:	09c3      	lsrs	r3, r0, #7
    6668:	428b      	cmp	r3, r1
    666a:	d301      	bcc.n	6670 <__divsi3+0x154>
    666c:	01cb      	lsls	r3, r1, #7
    666e:	1ac0      	subs	r0, r0, r3
    6670:	4152      	adcs	r2, r2
    6672:	0983      	lsrs	r3, r0, #6
    6674:	428b      	cmp	r3, r1
    6676:	d301      	bcc.n	667c <__divsi3+0x160>
    6678:	018b      	lsls	r3, r1, #6
    667a:	1ac0      	subs	r0, r0, r3
    667c:	4152      	adcs	r2, r2
    667e:	0943      	lsrs	r3, r0, #5
    6680:	428b      	cmp	r3, r1
    6682:	d301      	bcc.n	6688 <__divsi3+0x16c>
    6684:	014b      	lsls	r3, r1, #5
    6686:	1ac0      	subs	r0, r0, r3
    6688:	4152      	adcs	r2, r2
    668a:	0903      	lsrs	r3, r0, #4
    668c:	428b      	cmp	r3, r1
    668e:	d301      	bcc.n	6694 <__divsi3+0x178>
    6690:	010b      	lsls	r3, r1, #4
    6692:	1ac0      	subs	r0, r0, r3
    6694:	4152      	adcs	r2, r2
    6696:	08c3      	lsrs	r3, r0, #3
    6698:	428b      	cmp	r3, r1
    669a:	d301      	bcc.n	66a0 <__divsi3+0x184>
    669c:	00cb      	lsls	r3, r1, #3
    669e:	1ac0      	subs	r0, r0, r3
    66a0:	4152      	adcs	r2, r2
    66a2:	0883      	lsrs	r3, r0, #2
    66a4:	428b      	cmp	r3, r1
    66a6:	d301      	bcc.n	66ac <__divsi3+0x190>
    66a8:	008b      	lsls	r3, r1, #2
    66aa:	1ac0      	subs	r0, r0, r3
    66ac:	4152      	adcs	r2, r2
    66ae:	d2d9      	bcs.n	6664 <__divsi3+0x148>
    66b0:	0843      	lsrs	r3, r0, #1
    66b2:	428b      	cmp	r3, r1
    66b4:	d301      	bcc.n	66ba <__divsi3+0x19e>
    66b6:	004b      	lsls	r3, r1, #1
    66b8:	1ac0      	subs	r0, r0, r3
    66ba:	4152      	adcs	r2, r2
    66bc:	1a41      	subs	r1, r0, r1
    66be:	d200      	bcs.n	66c2 <__divsi3+0x1a6>
    66c0:	4601      	mov	r1, r0
    66c2:	4663      	mov	r3, ip
    66c4:	4152      	adcs	r2, r2
    66c6:	105b      	asrs	r3, r3, #1
    66c8:	4610      	mov	r0, r2
    66ca:	d301      	bcc.n	66d0 <__divsi3+0x1b4>
    66cc:	4240      	negs	r0, r0
    66ce:	2b00      	cmp	r3, #0
    66d0:	d500      	bpl.n	66d4 <__divsi3+0x1b8>
    66d2:	4249      	negs	r1, r1
    66d4:	4770      	bx	lr
    66d6:	4663      	mov	r3, ip
    66d8:	105b      	asrs	r3, r3, #1
    66da:	d300      	bcc.n	66de <__divsi3+0x1c2>
    66dc:	4240      	negs	r0, r0
    66de:	b501      	push	{r0, lr}
    66e0:	2000      	movs	r0, #0
    66e2:	f000 f805 	bl	66f0 <__aeabi_idiv0>
    66e6:	bd02      	pop	{r1, pc}

000066e8 <__aeabi_idivmod>:
    66e8:	2900      	cmp	r1, #0
    66ea:	d0f8      	beq.n	66de <__divsi3+0x1c2>
    66ec:	e716      	b.n	651c <__divsi3>
    66ee:	4770      	bx	lr

000066f0 <__aeabi_idiv0>:
    66f0:	4770      	bx	lr
    66f2:	46c0      	nop			; (mov r8, r8)

000066f4 <__aeabi_uldivmod>:
    66f4:	2b00      	cmp	r3, #0
    66f6:	d111      	bne.n	671c <__aeabi_uldivmod+0x28>
    66f8:	2a00      	cmp	r2, #0
    66fa:	d10f      	bne.n	671c <__aeabi_uldivmod+0x28>
    66fc:	2900      	cmp	r1, #0
    66fe:	d100      	bne.n	6702 <__aeabi_uldivmod+0xe>
    6700:	2800      	cmp	r0, #0
    6702:	d002      	beq.n	670a <__aeabi_uldivmod+0x16>
    6704:	2100      	movs	r1, #0
    6706:	43c9      	mvns	r1, r1
    6708:	1c08      	adds	r0, r1, #0
    670a:	b407      	push	{r0, r1, r2}
    670c:	4802      	ldr	r0, [pc, #8]	; (6718 <__aeabi_uldivmod+0x24>)
    670e:	a102      	add	r1, pc, #8	; (adr r1, 6718 <__aeabi_uldivmod+0x24>)
    6710:	1840      	adds	r0, r0, r1
    6712:	9002      	str	r0, [sp, #8]
    6714:	bd03      	pop	{r0, r1, pc}
    6716:	46c0      	nop			; (mov r8, r8)
    6718:	ffffffd9 	.word	0xffffffd9
    671c:	b403      	push	{r0, r1}
    671e:	4668      	mov	r0, sp
    6720:	b501      	push	{r0, lr}
    6722:	9802      	ldr	r0, [sp, #8]
    6724:	f000 f830 	bl	6788 <__udivmoddi4>
    6728:	9b01      	ldr	r3, [sp, #4]
    672a:	469e      	mov	lr, r3
    672c:	b002      	add	sp, #8
    672e:	bc0c      	pop	{r2, r3}
    6730:	4770      	bx	lr
    6732:	46c0      	nop			; (mov r8, r8)

00006734 <__aeabi_lmul>:
    6734:	b5f0      	push	{r4, r5, r6, r7, lr}
    6736:	46ce      	mov	lr, r9
    6738:	4647      	mov	r7, r8
    673a:	0415      	lsls	r5, r2, #16
    673c:	0c2d      	lsrs	r5, r5, #16
    673e:	002e      	movs	r6, r5
    6740:	b580      	push	{r7, lr}
    6742:	0407      	lsls	r7, r0, #16
    6744:	0c14      	lsrs	r4, r2, #16
    6746:	0c3f      	lsrs	r7, r7, #16
    6748:	4699      	mov	r9, r3
    674a:	0c03      	lsrs	r3, r0, #16
    674c:	437e      	muls	r6, r7
    674e:	435d      	muls	r5, r3
    6750:	4367      	muls	r7, r4
    6752:	4363      	muls	r3, r4
    6754:	197f      	adds	r7, r7, r5
    6756:	0c34      	lsrs	r4, r6, #16
    6758:	19e4      	adds	r4, r4, r7
    675a:	469c      	mov	ip, r3
    675c:	42a5      	cmp	r5, r4
    675e:	d903      	bls.n	6768 <__aeabi_lmul+0x34>
    6760:	2380      	movs	r3, #128	; 0x80
    6762:	025b      	lsls	r3, r3, #9
    6764:	4698      	mov	r8, r3
    6766:	44c4      	add	ip, r8
    6768:	464b      	mov	r3, r9
    676a:	4351      	muls	r1, r2
    676c:	4343      	muls	r3, r0
    676e:	0436      	lsls	r6, r6, #16
    6770:	0c36      	lsrs	r6, r6, #16
    6772:	0c25      	lsrs	r5, r4, #16
    6774:	0424      	lsls	r4, r4, #16
    6776:	4465      	add	r5, ip
    6778:	19a4      	adds	r4, r4, r6
    677a:	1859      	adds	r1, r3, r1
    677c:	1949      	adds	r1, r1, r5
    677e:	0020      	movs	r0, r4
    6780:	bc0c      	pop	{r2, r3}
    6782:	4690      	mov	r8, r2
    6784:	4699      	mov	r9, r3
    6786:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006788 <__udivmoddi4>:
    6788:	b5f0      	push	{r4, r5, r6, r7, lr}
    678a:	4657      	mov	r7, sl
    678c:	464e      	mov	r6, r9
    678e:	4645      	mov	r5, r8
    6790:	46de      	mov	lr, fp
    6792:	b5e0      	push	{r5, r6, r7, lr}
    6794:	0004      	movs	r4, r0
    6796:	b083      	sub	sp, #12
    6798:	000d      	movs	r5, r1
    679a:	4692      	mov	sl, r2
    679c:	4699      	mov	r9, r3
    679e:	428b      	cmp	r3, r1
    67a0:	d82f      	bhi.n	6802 <__udivmoddi4+0x7a>
    67a2:	d02c      	beq.n	67fe <__udivmoddi4+0x76>
    67a4:	4649      	mov	r1, r9
    67a6:	4650      	mov	r0, sl
    67a8:	f001 fd12 	bl	81d0 <__clzdi2>
    67ac:	0029      	movs	r1, r5
    67ae:	0006      	movs	r6, r0
    67b0:	0020      	movs	r0, r4
    67b2:	f001 fd0d 	bl	81d0 <__clzdi2>
    67b6:	1a33      	subs	r3, r6, r0
    67b8:	4698      	mov	r8, r3
    67ba:	3b20      	subs	r3, #32
    67bc:	469b      	mov	fp, r3
    67be:	d500      	bpl.n	67c2 <__udivmoddi4+0x3a>
    67c0:	e074      	b.n	68ac <__udivmoddi4+0x124>
    67c2:	4653      	mov	r3, sl
    67c4:	465a      	mov	r2, fp
    67c6:	4093      	lsls	r3, r2
    67c8:	001f      	movs	r7, r3
    67ca:	4653      	mov	r3, sl
    67cc:	4642      	mov	r2, r8
    67ce:	4093      	lsls	r3, r2
    67d0:	001e      	movs	r6, r3
    67d2:	42af      	cmp	r7, r5
    67d4:	d829      	bhi.n	682a <__udivmoddi4+0xa2>
    67d6:	d026      	beq.n	6826 <__udivmoddi4+0x9e>
    67d8:	465b      	mov	r3, fp
    67da:	1ba4      	subs	r4, r4, r6
    67dc:	41bd      	sbcs	r5, r7
    67de:	2b00      	cmp	r3, #0
    67e0:	da00      	bge.n	67e4 <__udivmoddi4+0x5c>
    67e2:	e079      	b.n	68d8 <__udivmoddi4+0x150>
    67e4:	2200      	movs	r2, #0
    67e6:	2300      	movs	r3, #0
    67e8:	9200      	str	r2, [sp, #0]
    67ea:	9301      	str	r3, [sp, #4]
    67ec:	2301      	movs	r3, #1
    67ee:	465a      	mov	r2, fp
    67f0:	4093      	lsls	r3, r2
    67f2:	9301      	str	r3, [sp, #4]
    67f4:	2301      	movs	r3, #1
    67f6:	4642      	mov	r2, r8
    67f8:	4093      	lsls	r3, r2
    67fa:	9300      	str	r3, [sp, #0]
    67fc:	e019      	b.n	6832 <__udivmoddi4+0xaa>
    67fe:	4282      	cmp	r2, r0
    6800:	d9d0      	bls.n	67a4 <__udivmoddi4+0x1c>
    6802:	2200      	movs	r2, #0
    6804:	2300      	movs	r3, #0
    6806:	9200      	str	r2, [sp, #0]
    6808:	9301      	str	r3, [sp, #4]
    680a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    680c:	2b00      	cmp	r3, #0
    680e:	d001      	beq.n	6814 <__udivmoddi4+0x8c>
    6810:	601c      	str	r4, [r3, #0]
    6812:	605d      	str	r5, [r3, #4]
    6814:	9800      	ldr	r0, [sp, #0]
    6816:	9901      	ldr	r1, [sp, #4]
    6818:	b003      	add	sp, #12
    681a:	bc3c      	pop	{r2, r3, r4, r5}
    681c:	4690      	mov	r8, r2
    681e:	4699      	mov	r9, r3
    6820:	46a2      	mov	sl, r4
    6822:	46ab      	mov	fp, r5
    6824:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6826:	42a3      	cmp	r3, r4
    6828:	d9d6      	bls.n	67d8 <__udivmoddi4+0x50>
    682a:	2200      	movs	r2, #0
    682c:	2300      	movs	r3, #0
    682e:	9200      	str	r2, [sp, #0]
    6830:	9301      	str	r3, [sp, #4]
    6832:	4643      	mov	r3, r8
    6834:	2b00      	cmp	r3, #0
    6836:	d0e8      	beq.n	680a <__udivmoddi4+0x82>
    6838:	07fb      	lsls	r3, r7, #31
    683a:	0872      	lsrs	r2, r6, #1
    683c:	431a      	orrs	r2, r3
    683e:	4646      	mov	r6, r8
    6840:	087b      	lsrs	r3, r7, #1
    6842:	e00e      	b.n	6862 <__udivmoddi4+0xda>
    6844:	42ab      	cmp	r3, r5
    6846:	d101      	bne.n	684c <__udivmoddi4+0xc4>
    6848:	42a2      	cmp	r2, r4
    684a:	d80c      	bhi.n	6866 <__udivmoddi4+0xde>
    684c:	1aa4      	subs	r4, r4, r2
    684e:	419d      	sbcs	r5, r3
    6850:	2001      	movs	r0, #1
    6852:	1924      	adds	r4, r4, r4
    6854:	416d      	adcs	r5, r5
    6856:	2100      	movs	r1, #0
    6858:	3e01      	subs	r6, #1
    685a:	1824      	adds	r4, r4, r0
    685c:	414d      	adcs	r5, r1
    685e:	2e00      	cmp	r6, #0
    6860:	d006      	beq.n	6870 <__udivmoddi4+0xe8>
    6862:	42ab      	cmp	r3, r5
    6864:	d9ee      	bls.n	6844 <__udivmoddi4+0xbc>
    6866:	3e01      	subs	r6, #1
    6868:	1924      	adds	r4, r4, r4
    686a:	416d      	adcs	r5, r5
    686c:	2e00      	cmp	r6, #0
    686e:	d1f8      	bne.n	6862 <__udivmoddi4+0xda>
    6870:	465b      	mov	r3, fp
    6872:	9800      	ldr	r0, [sp, #0]
    6874:	9901      	ldr	r1, [sp, #4]
    6876:	1900      	adds	r0, r0, r4
    6878:	4169      	adcs	r1, r5
    687a:	2b00      	cmp	r3, #0
    687c:	db22      	blt.n	68c4 <__udivmoddi4+0x13c>
    687e:	002b      	movs	r3, r5
    6880:	465a      	mov	r2, fp
    6882:	40d3      	lsrs	r3, r2
    6884:	002a      	movs	r2, r5
    6886:	4644      	mov	r4, r8
    6888:	40e2      	lsrs	r2, r4
    688a:	001c      	movs	r4, r3
    688c:	465b      	mov	r3, fp
    688e:	0015      	movs	r5, r2
    6890:	2b00      	cmp	r3, #0
    6892:	db2c      	blt.n	68ee <__udivmoddi4+0x166>
    6894:	0026      	movs	r6, r4
    6896:	409e      	lsls	r6, r3
    6898:	0033      	movs	r3, r6
    689a:	0026      	movs	r6, r4
    689c:	4647      	mov	r7, r8
    689e:	40be      	lsls	r6, r7
    68a0:	0032      	movs	r2, r6
    68a2:	1a80      	subs	r0, r0, r2
    68a4:	4199      	sbcs	r1, r3
    68a6:	9000      	str	r0, [sp, #0]
    68a8:	9101      	str	r1, [sp, #4]
    68aa:	e7ae      	b.n	680a <__udivmoddi4+0x82>
    68ac:	4642      	mov	r2, r8
    68ae:	2320      	movs	r3, #32
    68b0:	1a9b      	subs	r3, r3, r2
    68b2:	4652      	mov	r2, sl
    68b4:	40da      	lsrs	r2, r3
    68b6:	4641      	mov	r1, r8
    68b8:	0013      	movs	r3, r2
    68ba:	464a      	mov	r2, r9
    68bc:	408a      	lsls	r2, r1
    68be:	0017      	movs	r7, r2
    68c0:	431f      	orrs	r7, r3
    68c2:	e782      	b.n	67ca <__udivmoddi4+0x42>
    68c4:	4642      	mov	r2, r8
    68c6:	2320      	movs	r3, #32
    68c8:	1a9b      	subs	r3, r3, r2
    68ca:	002a      	movs	r2, r5
    68cc:	4646      	mov	r6, r8
    68ce:	409a      	lsls	r2, r3
    68d0:	0023      	movs	r3, r4
    68d2:	40f3      	lsrs	r3, r6
    68d4:	4313      	orrs	r3, r2
    68d6:	e7d5      	b.n	6884 <__udivmoddi4+0xfc>
    68d8:	4642      	mov	r2, r8
    68da:	2320      	movs	r3, #32
    68dc:	2100      	movs	r1, #0
    68de:	1a9b      	subs	r3, r3, r2
    68e0:	2200      	movs	r2, #0
    68e2:	9100      	str	r1, [sp, #0]
    68e4:	9201      	str	r2, [sp, #4]
    68e6:	2201      	movs	r2, #1
    68e8:	40da      	lsrs	r2, r3
    68ea:	9201      	str	r2, [sp, #4]
    68ec:	e782      	b.n	67f4 <__udivmoddi4+0x6c>
    68ee:	4642      	mov	r2, r8
    68f0:	2320      	movs	r3, #32
    68f2:	0026      	movs	r6, r4
    68f4:	1a9b      	subs	r3, r3, r2
    68f6:	40de      	lsrs	r6, r3
    68f8:	002f      	movs	r7, r5
    68fa:	46b4      	mov	ip, r6
    68fc:	4097      	lsls	r7, r2
    68fe:	4666      	mov	r6, ip
    6900:	003b      	movs	r3, r7
    6902:	4333      	orrs	r3, r6
    6904:	e7c9      	b.n	689a <__udivmoddi4+0x112>
    6906:	46c0      	nop			; (mov r8, r8)

00006908 <__aeabi_dadd>:
    6908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    690a:	4645      	mov	r5, r8
    690c:	46de      	mov	lr, fp
    690e:	4657      	mov	r7, sl
    6910:	464e      	mov	r6, r9
    6912:	030c      	lsls	r4, r1, #12
    6914:	b5e0      	push	{r5, r6, r7, lr}
    6916:	004e      	lsls	r6, r1, #1
    6918:	0fc9      	lsrs	r1, r1, #31
    691a:	4688      	mov	r8, r1
    691c:	000d      	movs	r5, r1
    691e:	0a61      	lsrs	r1, r4, #9
    6920:	0f44      	lsrs	r4, r0, #29
    6922:	430c      	orrs	r4, r1
    6924:	00c7      	lsls	r7, r0, #3
    6926:	0319      	lsls	r1, r3, #12
    6928:	0058      	lsls	r0, r3, #1
    692a:	0fdb      	lsrs	r3, r3, #31
    692c:	469b      	mov	fp, r3
    692e:	0a4b      	lsrs	r3, r1, #9
    6930:	0f51      	lsrs	r1, r2, #29
    6932:	430b      	orrs	r3, r1
    6934:	0d76      	lsrs	r6, r6, #21
    6936:	0d40      	lsrs	r0, r0, #21
    6938:	0019      	movs	r1, r3
    693a:	00d2      	lsls	r2, r2, #3
    693c:	45d8      	cmp	r8, fp
    693e:	d100      	bne.n	6942 <__aeabi_dadd+0x3a>
    6940:	e0ae      	b.n	6aa0 <__aeabi_dadd+0x198>
    6942:	1a35      	subs	r5, r6, r0
    6944:	2d00      	cmp	r5, #0
    6946:	dc00      	bgt.n	694a <__aeabi_dadd+0x42>
    6948:	e0f6      	b.n	6b38 <__aeabi_dadd+0x230>
    694a:	2800      	cmp	r0, #0
    694c:	d10f      	bne.n	696e <__aeabi_dadd+0x66>
    694e:	4313      	orrs	r3, r2
    6950:	d100      	bne.n	6954 <__aeabi_dadd+0x4c>
    6952:	e0db      	b.n	6b0c <__aeabi_dadd+0x204>
    6954:	1e6b      	subs	r3, r5, #1
    6956:	2b00      	cmp	r3, #0
    6958:	d000      	beq.n	695c <__aeabi_dadd+0x54>
    695a:	e137      	b.n	6bcc <__aeabi_dadd+0x2c4>
    695c:	1aba      	subs	r2, r7, r2
    695e:	4297      	cmp	r7, r2
    6960:	41bf      	sbcs	r7, r7
    6962:	1a64      	subs	r4, r4, r1
    6964:	427f      	negs	r7, r7
    6966:	1be4      	subs	r4, r4, r7
    6968:	2601      	movs	r6, #1
    696a:	0017      	movs	r7, r2
    696c:	e024      	b.n	69b8 <__aeabi_dadd+0xb0>
    696e:	4bc6      	ldr	r3, [pc, #792]	; (6c88 <__aeabi_dadd+0x380>)
    6970:	429e      	cmp	r6, r3
    6972:	d04d      	beq.n	6a10 <__aeabi_dadd+0x108>
    6974:	2380      	movs	r3, #128	; 0x80
    6976:	041b      	lsls	r3, r3, #16
    6978:	4319      	orrs	r1, r3
    697a:	2d38      	cmp	r5, #56	; 0x38
    697c:	dd00      	ble.n	6980 <__aeabi_dadd+0x78>
    697e:	e107      	b.n	6b90 <__aeabi_dadd+0x288>
    6980:	2d1f      	cmp	r5, #31
    6982:	dd00      	ble.n	6986 <__aeabi_dadd+0x7e>
    6984:	e138      	b.n	6bf8 <__aeabi_dadd+0x2f0>
    6986:	2020      	movs	r0, #32
    6988:	1b43      	subs	r3, r0, r5
    698a:	469a      	mov	sl, r3
    698c:	000b      	movs	r3, r1
    698e:	4650      	mov	r0, sl
    6990:	4083      	lsls	r3, r0
    6992:	4699      	mov	r9, r3
    6994:	0013      	movs	r3, r2
    6996:	4648      	mov	r0, r9
    6998:	40eb      	lsrs	r3, r5
    699a:	4318      	orrs	r0, r3
    699c:	0003      	movs	r3, r0
    699e:	4650      	mov	r0, sl
    69a0:	4082      	lsls	r2, r0
    69a2:	1e50      	subs	r0, r2, #1
    69a4:	4182      	sbcs	r2, r0
    69a6:	40e9      	lsrs	r1, r5
    69a8:	431a      	orrs	r2, r3
    69aa:	1aba      	subs	r2, r7, r2
    69ac:	1a61      	subs	r1, r4, r1
    69ae:	4297      	cmp	r7, r2
    69b0:	41a4      	sbcs	r4, r4
    69b2:	0017      	movs	r7, r2
    69b4:	4264      	negs	r4, r4
    69b6:	1b0c      	subs	r4, r1, r4
    69b8:	0223      	lsls	r3, r4, #8
    69ba:	d562      	bpl.n	6a82 <__aeabi_dadd+0x17a>
    69bc:	0264      	lsls	r4, r4, #9
    69be:	0a65      	lsrs	r5, r4, #9
    69c0:	2d00      	cmp	r5, #0
    69c2:	d100      	bne.n	69c6 <__aeabi_dadd+0xbe>
    69c4:	e0df      	b.n	6b86 <__aeabi_dadd+0x27e>
    69c6:	0028      	movs	r0, r5
    69c8:	f001 fbe4 	bl	8194 <__clzsi2>
    69cc:	0003      	movs	r3, r0
    69ce:	3b08      	subs	r3, #8
    69d0:	2b1f      	cmp	r3, #31
    69d2:	dd00      	ble.n	69d6 <__aeabi_dadd+0xce>
    69d4:	e0d2      	b.n	6b7c <__aeabi_dadd+0x274>
    69d6:	2220      	movs	r2, #32
    69d8:	003c      	movs	r4, r7
    69da:	1ad2      	subs	r2, r2, r3
    69dc:	409d      	lsls	r5, r3
    69de:	40d4      	lsrs	r4, r2
    69e0:	409f      	lsls	r7, r3
    69e2:	4325      	orrs	r5, r4
    69e4:	429e      	cmp	r6, r3
    69e6:	dd00      	ble.n	69ea <__aeabi_dadd+0xe2>
    69e8:	e0c4      	b.n	6b74 <__aeabi_dadd+0x26c>
    69ea:	1b9e      	subs	r6, r3, r6
    69ec:	1c73      	adds	r3, r6, #1
    69ee:	2b1f      	cmp	r3, #31
    69f0:	dd00      	ble.n	69f4 <__aeabi_dadd+0xec>
    69f2:	e0f1      	b.n	6bd8 <__aeabi_dadd+0x2d0>
    69f4:	2220      	movs	r2, #32
    69f6:	0038      	movs	r0, r7
    69f8:	0029      	movs	r1, r5
    69fa:	1ad2      	subs	r2, r2, r3
    69fc:	40d8      	lsrs	r0, r3
    69fe:	4091      	lsls	r1, r2
    6a00:	4097      	lsls	r7, r2
    6a02:	002c      	movs	r4, r5
    6a04:	4301      	orrs	r1, r0
    6a06:	1e78      	subs	r0, r7, #1
    6a08:	4187      	sbcs	r7, r0
    6a0a:	40dc      	lsrs	r4, r3
    6a0c:	2600      	movs	r6, #0
    6a0e:	430f      	orrs	r7, r1
    6a10:	077b      	lsls	r3, r7, #29
    6a12:	d009      	beq.n	6a28 <__aeabi_dadd+0x120>
    6a14:	230f      	movs	r3, #15
    6a16:	403b      	ands	r3, r7
    6a18:	2b04      	cmp	r3, #4
    6a1a:	d005      	beq.n	6a28 <__aeabi_dadd+0x120>
    6a1c:	1d3b      	adds	r3, r7, #4
    6a1e:	42bb      	cmp	r3, r7
    6a20:	41bf      	sbcs	r7, r7
    6a22:	427f      	negs	r7, r7
    6a24:	19e4      	adds	r4, r4, r7
    6a26:	001f      	movs	r7, r3
    6a28:	0223      	lsls	r3, r4, #8
    6a2a:	d52c      	bpl.n	6a86 <__aeabi_dadd+0x17e>
    6a2c:	4b96      	ldr	r3, [pc, #600]	; (6c88 <__aeabi_dadd+0x380>)
    6a2e:	3601      	adds	r6, #1
    6a30:	429e      	cmp	r6, r3
    6a32:	d100      	bne.n	6a36 <__aeabi_dadd+0x12e>
    6a34:	e09a      	b.n	6b6c <__aeabi_dadd+0x264>
    6a36:	4645      	mov	r5, r8
    6a38:	4b94      	ldr	r3, [pc, #592]	; (6c8c <__aeabi_dadd+0x384>)
    6a3a:	08ff      	lsrs	r7, r7, #3
    6a3c:	401c      	ands	r4, r3
    6a3e:	0760      	lsls	r0, r4, #29
    6a40:	0576      	lsls	r6, r6, #21
    6a42:	0264      	lsls	r4, r4, #9
    6a44:	4307      	orrs	r7, r0
    6a46:	0b24      	lsrs	r4, r4, #12
    6a48:	0d76      	lsrs	r6, r6, #21
    6a4a:	2100      	movs	r1, #0
    6a4c:	0324      	lsls	r4, r4, #12
    6a4e:	0b23      	lsrs	r3, r4, #12
    6a50:	0d0c      	lsrs	r4, r1, #20
    6a52:	4a8f      	ldr	r2, [pc, #572]	; (6c90 <__aeabi_dadd+0x388>)
    6a54:	0524      	lsls	r4, r4, #20
    6a56:	431c      	orrs	r4, r3
    6a58:	4014      	ands	r4, r2
    6a5a:	0533      	lsls	r3, r6, #20
    6a5c:	4323      	orrs	r3, r4
    6a5e:	005b      	lsls	r3, r3, #1
    6a60:	07ed      	lsls	r5, r5, #31
    6a62:	085b      	lsrs	r3, r3, #1
    6a64:	432b      	orrs	r3, r5
    6a66:	0038      	movs	r0, r7
    6a68:	0019      	movs	r1, r3
    6a6a:	bc3c      	pop	{r2, r3, r4, r5}
    6a6c:	4690      	mov	r8, r2
    6a6e:	4699      	mov	r9, r3
    6a70:	46a2      	mov	sl, r4
    6a72:	46ab      	mov	fp, r5
    6a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a76:	4664      	mov	r4, ip
    6a78:	4304      	orrs	r4, r0
    6a7a:	d100      	bne.n	6a7e <__aeabi_dadd+0x176>
    6a7c:	e211      	b.n	6ea2 <__aeabi_dadd+0x59a>
    6a7e:	0004      	movs	r4, r0
    6a80:	4667      	mov	r7, ip
    6a82:	077b      	lsls	r3, r7, #29
    6a84:	d1c6      	bne.n	6a14 <__aeabi_dadd+0x10c>
    6a86:	4645      	mov	r5, r8
    6a88:	0760      	lsls	r0, r4, #29
    6a8a:	08ff      	lsrs	r7, r7, #3
    6a8c:	4307      	orrs	r7, r0
    6a8e:	08e4      	lsrs	r4, r4, #3
    6a90:	4b7d      	ldr	r3, [pc, #500]	; (6c88 <__aeabi_dadd+0x380>)
    6a92:	429e      	cmp	r6, r3
    6a94:	d030      	beq.n	6af8 <__aeabi_dadd+0x1f0>
    6a96:	0324      	lsls	r4, r4, #12
    6a98:	0576      	lsls	r6, r6, #21
    6a9a:	0b24      	lsrs	r4, r4, #12
    6a9c:	0d76      	lsrs	r6, r6, #21
    6a9e:	e7d4      	b.n	6a4a <__aeabi_dadd+0x142>
    6aa0:	1a33      	subs	r3, r6, r0
    6aa2:	469a      	mov	sl, r3
    6aa4:	2b00      	cmp	r3, #0
    6aa6:	dd78      	ble.n	6b9a <__aeabi_dadd+0x292>
    6aa8:	2800      	cmp	r0, #0
    6aaa:	d031      	beq.n	6b10 <__aeabi_dadd+0x208>
    6aac:	4876      	ldr	r0, [pc, #472]	; (6c88 <__aeabi_dadd+0x380>)
    6aae:	4286      	cmp	r6, r0
    6ab0:	d0ae      	beq.n	6a10 <__aeabi_dadd+0x108>
    6ab2:	2080      	movs	r0, #128	; 0x80
    6ab4:	0400      	lsls	r0, r0, #16
    6ab6:	4301      	orrs	r1, r0
    6ab8:	4653      	mov	r3, sl
    6aba:	2b38      	cmp	r3, #56	; 0x38
    6abc:	dc00      	bgt.n	6ac0 <__aeabi_dadd+0x1b8>
    6abe:	e0e9      	b.n	6c94 <__aeabi_dadd+0x38c>
    6ac0:	430a      	orrs	r2, r1
    6ac2:	1e51      	subs	r1, r2, #1
    6ac4:	418a      	sbcs	r2, r1
    6ac6:	2100      	movs	r1, #0
    6ac8:	19d2      	adds	r2, r2, r7
    6aca:	42ba      	cmp	r2, r7
    6acc:	41bf      	sbcs	r7, r7
    6ace:	1909      	adds	r1, r1, r4
    6ad0:	427c      	negs	r4, r7
    6ad2:	0017      	movs	r7, r2
    6ad4:	190c      	adds	r4, r1, r4
    6ad6:	0223      	lsls	r3, r4, #8
    6ad8:	d5d3      	bpl.n	6a82 <__aeabi_dadd+0x17a>
    6ada:	4b6b      	ldr	r3, [pc, #428]	; (6c88 <__aeabi_dadd+0x380>)
    6adc:	3601      	adds	r6, #1
    6ade:	429e      	cmp	r6, r3
    6ae0:	d100      	bne.n	6ae4 <__aeabi_dadd+0x1dc>
    6ae2:	e13a      	b.n	6d5a <__aeabi_dadd+0x452>
    6ae4:	2001      	movs	r0, #1
    6ae6:	4b69      	ldr	r3, [pc, #420]	; (6c8c <__aeabi_dadd+0x384>)
    6ae8:	401c      	ands	r4, r3
    6aea:	087b      	lsrs	r3, r7, #1
    6aec:	4007      	ands	r7, r0
    6aee:	431f      	orrs	r7, r3
    6af0:	07e0      	lsls	r0, r4, #31
    6af2:	4307      	orrs	r7, r0
    6af4:	0864      	lsrs	r4, r4, #1
    6af6:	e78b      	b.n	6a10 <__aeabi_dadd+0x108>
    6af8:	0023      	movs	r3, r4
    6afa:	433b      	orrs	r3, r7
    6afc:	d100      	bne.n	6b00 <__aeabi_dadd+0x1f8>
    6afe:	e1cb      	b.n	6e98 <__aeabi_dadd+0x590>
    6b00:	2280      	movs	r2, #128	; 0x80
    6b02:	0312      	lsls	r2, r2, #12
    6b04:	4314      	orrs	r4, r2
    6b06:	0324      	lsls	r4, r4, #12
    6b08:	0b24      	lsrs	r4, r4, #12
    6b0a:	e79e      	b.n	6a4a <__aeabi_dadd+0x142>
    6b0c:	002e      	movs	r6, r5
    6b0e:	e77f      	b.n	6a10 <__aeabi_dadd+0x108>
    6b10:	0008      	movs	r0, r1
    6b12:	4310      	orrs	r0, r2
    6b14:	d100      	bne.n	6b18 <__aeabi_dadd+0x210>
    6b16:	e0b4      	b.n	6c82 <__aeabi_dadd+0x37a>
    6b18:	1e58      	subs	r0, r3, #1
    6b1a:	2800      	cmp	r0, #0
    6b1c:	d000      	beq.n	6b20 <__aeabi_dadd+0x218>
    6b1e:	e0de      	b.n	6cde <__aeabi_dadd+0x3d6>
    6b20:	18ba      	adds	r2, r7, r2
    6b22:	42ba      	cmp	r2, r7
    6b24:	419b      	sbcs	r3, r3
    6b26:	1864      	adds	r4, r4, r1
    6b28:	425b      	negs	r3, r3
    6b2a:	18e4      	adds	r4, r4, r3
    6b2c:	0017      	movs	r7, r2
    6b2e:	2601      	movs	r6, #1
    6b30:	0223      	lsls	r3, r4, #8
    6b32:	d5a6      	bpl.n	6a82 <__aeabi_dadd+0x17a>
    6b34:	2602      	movs	r6, #2
    6b36:	e7d5      	b.n	6ae4 <__aeabi_dadd+0x1dc>
    6b38:	2d00      	cmp	r5, #0
    6b3a:	d16e      	bne.n	6c1a <__aeabi_dadd+0x312>
    6b3c:	1c70      	adds	r0, r6, #1
    6b3e:	0540      	lsls	r0, r0, #21
    6b40:	0d40      	lsrs	r0, r0, #21
    6b42:	2801      	cmp	r0, #1
    6b44:	dc00      	bgt.n	6b48 <__aeabi_dadd+0x240>
    6b46:	e0f9      	b.n	6d3c <__aeabi_dadd+0x434>
    6b48:	1ab8      	subs	r0, r7, r2
    6b4a:	4684      	mov	ip, r0
    6b4c:	4287      	cmp	r7, r0
    6b4e:	4180      	sbcs	r0, r0
    6b50:	1ae5      	subs	r5, r4, r3
    6b52:	4240      	negs	r0, r0
    6b54:	1a2d      	subs	r5, r5, r0
    6b56:	0228      	lsls	r0, r5, #8
    6b58:	d400      	bmi.n	6b5c <__aeabi_dadd+0x254>
    6b5a:	e089      	b.n	6c70 <__aeabi_dadd+0x368>
    6b5c:	1bd7      	subs	r7, r2, r7
    6b5e:	42ba      	cmp	r2, r7
    6b60:	4192      	sbcs	r2, r2
    6b62:	1b1c      	subs	r4, r3, r4
    6b64:	4252      	negs	r2, r2
    6b66:	1aa5      	subs	r5, r4, r2
    6b68:	46d8      	mov	r8, fp
    6b6a:	e729      	b.n	69c0 <__aeabi_dadd+0xb8>
    6b6c:	4645      	mov	r5, r8
    6b6e:	2400      	movs	r4, #0
    6b70:	2700      	movs	r7, #0
    6b72:	e76a      	b.n	6a4a <__aeabi_dadd+0x142>
    6b74:	4c45      	ldr	r4, [pc, #276]	; (6c8c <__aeabi_dadd+0x384>)
    6b76:	1af6      	subs	r6, r6, r3
    6b78:	402c      	ands	r4, r5
    6b7a:	e749      	b.n	6a10 <__aeabi_dadd+0x108>
    6b7c:	003d      	movs	r5, r7
    6b7e:	3828      	subs	r0, #40	; 0x28
    6b80:	4085      	lsls	r5, r0
    6b82:	2700      	movs	r7, #0
    6b84:	e72e      	b.n	69e4 <__aeabi_dadd+0xdc>
    6b86:	0038      	movs	r0, r7
    6b88:	f001 fb04 	bl	8194 <__clzsi2>
    6b8c:	3020      	adds	r0, #32
    6b8e:	e71d      	b.n	69cc <__aeabi_dadd+0xc4>
    6b90:	430a      	orrs	r2, r1
    6b92:	1e51      	subs	r1, r2, #1
    6b94:	418a      	sbcs	r2, r1
    6b96:	2100      	movs	r1, #0
    6b98:	e707      	b.n	69aa <__aeabi_dadd+0xa2>
    6b9a:	2b00      	cmp	r3, #0
    6b9c:	d000      	beq.n	6ba0 <__aeabi_dadd+0x298>
    6b9e:	e0f3      	b.n	6d88 <__aeabi_dadd+0x480>
    6ba0:	1c70      	adds	r0, r6, #1
    6ba2:	0543      	lsls	r3, r0, #21
    6ba4:	0d5b      	lsrs	r3, r3, #21
    6ba6:	2b01      	cmp	r3, #1
    6ba8:	dc00      	bgt.n	6bac <__aeabi_dadd+0x2a4>
    6baa:	e0ad      	b.n	6d08 <__aeabi_dadd+0x400>
    6bac:	4b36      	ldr	r3, [pc, #216]	; (6c88 <__aeabi_dadd+0x380>)
    6bae:	4298      	cmp	r0, r3
    6bb0:	d100      	bne.n	6bb4 <__aeabi_dadd+0x2ac>
    6bb2:	e0d1      	b.n	6d58 <__aeabi_dadd+0x450>
    6bb4:	18ba      	adds	r2, r7, r2
    6bb6:	42ba      	cmp	r2, r7
    6bb8:	41bf      	sbcs	r7, r7
    6bba:	1864      	adds	r4, r4, r1
    6bbc:	427f      	negs	r7, r7
    6bbe:	19e4      	adds	r4, r4, r7
    6bc0:	07e7      	lsls	r7, r4, #31
    6bc2:	0852      	lsrs	r2, r2, #1
    6bc4:	4317      	orrs	r7, r2
    6bc6:	0864      	lsrs	r4, r4, #1
    6bc8:	0006      	movs	r6, r0
    6bca:	e721      	b.n	6a10 <__aeabi_dadd+0x108>
    6bcc:	482e      	ldr	r0, [pc, #184]	; (6c88 <__aeabi_dadd+0x380>)
    6bce:	4285      	cmp	r5, r0
    6bd0:	d100      	bne.n	6bd4 <__aeabi_dadd+0x2cc>
    6bd2:	e093      	b.n	6cfc <__aeabi_dadd+0x3f4>
    6bd4:	001d      	movs	r5, r3
    6bd6:	e6d0      	b.n	697a <__aeabi_dadd+0x72>
    6bd8:	0029      	movs	r1, r5
    6bda:	3e1f      	subs	r6, #31
    6bdc:	40f1      	lsrs	r1, r6
    6bde:	2b20      	cmp	r3, #32
    6be0:	d100      	bne.n	6be4 <__aeabi_dadd+0x2dc>
    6be2:	e08d      	b.n	6d00 <__aeabi_dadd+0x3f8>
    6be4:	2240      	movs	r2, #64	; 0x40
    6be6:	1ad3      	subs	r3, r2, r3
    6be8:	409d      	lsls	r5, r3
    6bea:	432f      	orrs	r7, r5
    6bec:	1e7d      	subs	r5, r7, #1
    6bee:	41af      	sbcs	r7, r5
    6bf0:	2400      	movs	r4, #0
    6bf2:	430f      	orrs	r7, r1
    6bf4:	2600      	movs	r6, #0
    6bf6:	e744      	b.n	6a82 <__aeabi_dadd+0x17a>
    6bf8:	002b      	movs	r3, r5
    6bfa:	0008      	movs	r0, r1
    6bfc:	3b20      	subs	r3, #32
    6bfe:	40d8      	lsrs	r0, r3
    6c00:	0003      	movs	r3, r0
    6c02:	2d20      	cmp	r5, #32
    6c04:	d100      	bne.n	6c08 <__aeabi_dadd+0x300>
    6c06:	e07d      	b.n	6d04 <__aeabi_dadd+0x3fc>
    6c08:	2040      	movs	r0, #64	; 0x40
    6c0a:	1b45      	subs	r5, r0, r5
    6c0c:	40a9      	lsls	r1, r5
    6c0e:	430a      	orrs	r2, r1
    6c10:	1e51      	subs	r1, r2, #1
    6c12:	418a      	sbcs	r2, r1
    6c14:	2100      	movs	r1, #0
    6c16:	431a      	orrs	r2, r3
    6c18:	e6c7      	b.n	69aa <__aeabi_dadd+0xa2>
    6c1a:	2e00      	cmp	r6, #0
    6c1c:	d050      	beq.n	6cc0 <__aeabi_dadd+0x3b8>
    6c1e:	4e1a      	ldr	r6, [pc, #104]	; (6c88 <__aeabi_dadd+0x380>)
    6c20:	42b0      	cmp	r0, r6
    6c22:	d057      	beq.n	6cd4 <__aeabi_dadd+0x3cc>
    6c24:	2680      	movs	r6, #128	; 0x80
    6c26:	426b      	negs	r3, r5
    6c28:	4699      	mov	r9, r3
    6c2a:	0436      	lsls	r6, r6, #16
    6c2c:	4334      	orrs	r4, r6
    6c2e:	464b      	mov	r3, r9
    6c30:	2b38      	cmp	r3, #56	; 0x38
    6c32:	dd00      	ble.n	6c36 <__aeabi_dadd+0x32e>
    6c34:	e0d6      	b.n	6de4 <__aeabi_dadd+0x4dc>
    6c36:	2b1f      	cmp	r3, #31
    6c38:	dd00      	ble.n	6c3c <__aeabi_dadd+0x334>
    6c3a:	e135      	b.n	6ea8 <__aeabi_dadd+0x5a0>
    6c3c:	2620      	movs	r6, #32
    6c3e:	1af5      	subs	r5, r6, r3
    6c40:	0026      	movs	r6, r4
    6c42:	40ae      	lsls	r6, r5
    6c44:	46b2      	mov	sl, r6
    6c46:	003e      	movs	r6, r7
    6c48:	40de      	lsrs	r6, r3
    6c4a:	46ac      	mov	ip, r5
    6c4c:	0035      	movs	r5, r6
    6c4e:	4656      	mov	r6, sl
    6c50:	432e      	orrs	r6, r5
    6c52:	4665      	mov	r5, ip
    6c54:	40af      	lsls	r7, r5
    6c56:	1e7d      	subs	r5, r7, #1
    6c58:	41af      	sbcs	r7, r5
    6c5a:	40dc      	lsrs	r4, r3
    6c5c:	4337      	orrs	r7, r6
    6c5e:	1bd7      	subs	r7, r2, r7
    6c60:	42ba      	cmp	r2, r7
    6c62:	4192      	sbcs	r2, r2
    6c64:	1b0c      	subs	r4, r1, r4
    6c66:	4252      	negs	r2, r2
    6c68:	1aa4      	subs	r4, r4, r2
    6c6a:	0006      	movs	r6, r0
    6c6c:	46d8      	mov	r8, fp
    6c6e:	e6a3      	b.n	69b8 <__aeabi_dadd+0xb0>
    6c70:	4664      	mov	r4, ip
    6c72:	4667      	mov	r7, ip
    6c74:	432c      	orrs	r4, r5
    6c76:	d000      	beq.n	6c7a <__aeabi_dadd+0x372>
    6c78:	e6a2      	b.n	69c0 <__aeabi_dadd+0xb8>
    6c7a:	2500      	movs	r5, #0
    6c7c:	2600      	movs	r6, #0
    6c7e:	2700      	movs	r7, #0
    6c80:	e706      	b.n	6a90 <__aeabi_dadd+0x188>
    6c82:	001e      	movs	r6, r3
    6c84:	e6c4      	b.n	6a10 <__aeabi_dadd+0x108>
    6c86:	46c0      	nop			; (mov r8, r8)
    6c88:	000007ff 	.word	0x000007ff
    6c8c:	ff7fffff 	.word	0xff7fffff
    6c90:	800fffff 	.word	0x800fffff
    6c94:	2b1f      	cmp	r3, #31
    6c96:	dc63      	bgt.n	6d60 <__aeabi_dadd+0x458>
    6c98:	2020      	movs	r0, #32
    6c9a:	1ac3      	subs	r3, r0, r3
    6c9c:	0008      	movs	r0, r1
    6c9e:	4098      	lsls	r0, r3
    6ca0:	469c      	mov	ip, r3
    6ca2:	4683      	mov	fp, r0
    6ca4:	4653      	mov	r3, sl
    6ca6:	0010      	movs	r0, r2
    6ca8:	40d8      	lsrs	r0, r3
    6caa:	0003      	movs	r3, r0
    6cac:	4658      	mov	r0, fp
    6cae:	4318      	orrs	r0, r3
    6cb0:	4663      	mov	r3, ip
    6cb2:	409a      	lsls	r2, r3
    6cb4:	1e53      	subs	r3, r2, #1
    6cb6:	419a      	sbcs	r2, r3
    6cb8:	4653      	mov	r3, sl
    6cba:	4302      	orrs	r2, r0
    6cbc:	40d9      	lsrs	r1, r3
    6cbe:	e703      	b.n	6ac8 <__aeabi_dadd+0x1c0>
    6cc0:	0026      	movs	r6, r4
    6cc2:	433e      	orrs	r6, r7
    6cc4:	d006      	beq.n	6cd4 <__aeabi_dadd+0x3cc>
    6cc6:	43eb      	mvns	r3, r5
    6cc8:	4699      	mov	r9, r3
    6cca:	2b00      	cmp	r3, #0
    6ccc:	d0c7      	beq.n	6c5e <__aeabi_dadd+0x356>
    6cce:	4e94      	ldr	r6, [pc, #592]	; (6f20 <__aeabi_dadd+0x618>)
    6cd0:	42b0      	cmp	r0, r6
    6cd2:	d1ac      	bne.n	6c2e <__aeabi_dadd+0x326>
    6cd4:	000c      	movs	r4, r1
    6cd6:	0017      	movs	r7, r2
    6cd8:	0006      	movs	r6, r0
    6cda:	46d8      	mov	r8, fp
    6cdc:	e698      	b.n	6a10 <__aeabi_dadd+0x108>
    6cde:	4b90      	ldr	r3, [pc, #576]	; (6f20 <__aeabi_dadd+0x618>)
    6ce0:	459a      	cmp	sl, r3
    6ce2:	d00b      	beq.n	6cfc <__aeabi_dadd+0x3f4>
    6ce4:	4682      	mov	sl, r0
    6ce6:	e6e7      	b.n	6ab8 <__aeabi_dadd+0x1b0>
    6ce8:	2800      	cmp	r0, #0
    6cea:	d000      	beq.n	6cee <__aeabi_dadd+0x3e6>
    6cec:	e09e      	b.n	6e2c <__aeabi_dadd+0x524>
    6cee:	0018      	movs	r0, r3
    6cf0:	4310      	orrs	r0, r2
    6cf2:	d100      	bne.n	6cf6 <__aeabi_dadd+0x3ee>
    6cf4:	e0e9      	b.n	6eca <__aeabi_dadd+0x5c2>
    6cf6:	001c      	movs	r4, r3
    6cf8:	0017      	movs	r7, r2
    6cfa:	46d8      	mov	r8, fp
    6cfc:	4e88      	ldr	r6, [pc, #544]	; (6f20 <__aeabi_dadd+0x618>)
    6cfe:	e687      	b.n	6a10 <__aeabi_dadd+0x108>
    6d00:	2500      	movs	r5, #0
    6d02:	e772      	b.n	6bea <__aeabi_dadd+0x2e2>
    6d04:	2100      	movs	r1, #0
    6d06:	e782      	b.n	6c0e <__aeabi_dadd+0x306>
    6d08:	0023      	movs	r3, r4
    6d0a:	433b      	orrs	r3, r7
    6d0c:	2e00      	cmp	r6, #0
    6d0e:	d000      	beq.n	6d12 <__aeabi_dadd+0x40a>
    6d10:	e0ab      	b.n	6e6a <__aeabi_dadd+0x562>
    6d12:	2b00      	cmp	r3, #0
    6d14:	d100      	bne.n	6d18 <__aeabi_dadd+0x410>
    6d16:	e0e7      	b.n	6ee8 <__aeabi_dadd+0x5e0>
    6d18:	000b      	movs	r3, r1
    6d1a:	4313      	orrs	r3, r2
    6d1c:	d100      	bne.n	6d20 <__aeabi_dadd+0x418>
    6d1e:	e677      	b.n	6a10 <__aeabi_dadd+0x108>
    6d20:	18ba      	adds	r2, r7, r2
    6d22:	42ba      	cmp	r2, r7
    6d24:	41bf      	sbcs	r7, r7
    6d26:	1864      	adds	r4, r4, r1
    6d28:	427f      	negs	r7, r7
    6d2a:	19e4      	adds	r4, r4, r7
    6d2c:	0223      	lsls	r3, r4, #8
    6d2e:	d400      	bmi.n	6d32 <__aeabi_dadd+0x42a>
    6d30:	e0f2      	b.n	6f18 <__aeabi_dadd+0x610>
    6d32:	4b7c      	ldr	r3, [pc, #496]	; (6f24 <__aeabi_dadd+0x61c>)
    6d34:	0017      	movs	r7, r2
    6d36:	401c      	ands	r4, r3
    6d38:	0006      	movs	r6, r0
    6d3a:	e669      	b.n	6a10 <__aeabi_dadd+0x108>
    6d3c:	0020      	movs	r0, r4
    6d3e:	4338      	orrs	r0, r7
    6d40:	2e00      	cmp	r6, #0
    6d42:	d1d1      	bne.n	6ce8 <__aeabi_dadd+0x3e0>
    6d44:	2800      	cmp	r0, #0
    6d46:	d15b      	bne.n	6e00 <__aeabi_dadd+0x4f8>
    6d48:	001c      	movs	r4, r3
    6d4a:	4314      	orrs	r4, r2
    6d4c:	d100      	bne.n	6d50 <__aeabi_dadd+0x448>
    6d4e:	e0a8      	b.n	6ea2 <__aeabi_dadd+0x59a>
    6d50:	001c      	movs	r4, r3
    6d52:	0017      	movs	r7, r2
    6d54:	46d8      	mov	r8, fp
    6d56:	e65b      	b.n	6a10 <__aeabi_dadd+0x108>
    6d58:	0006      	movs	r6, r0
    6d5a:	2400      	movs	r4, #0
    6d5c:	2700      	movs	r7, #0
    6d5e:	e697      	b.n	6a90 <__aeabi_dadd+0x188>
    6d60:	4650      	mov	r0, sl
    6d62:	000b      	movs	r3, r1
    6d64:	3820      	subs	r0, #32
    6d66:	40c3      	lsrs	r3, r0
    6d68:	4699      	mov	r9, r3
    6d6a:	4653      	mov	r3, sl
    6d6c:	2b20      	cmp	r3, #32
    6d6e:	d100      	bne.n	6d72 <__aeabi_dadd+0x46a>
    6d70:	e095      	b.n	6e9e <__aeabi_dadd+0x596>
    6d72:	2340      	movs	r3, #64	; 0x40
    6d74:	4650      	mov	r0, sl
    6d76:	1a1b      	subs	r3, r3, r0
    6d78:	4099      	lsls	r1, r3
    6d7a:	430a      	orrs	r2, r1
    6d7c:	1e51      	subs	r1, r2, #1
    6d7e:	418a      	sbcs	r2, r1
    6d80:	464b      	mov	r3, r9
    6d82:	2100      	movs	r1, #0
    6d84:	431a      	orrs	r2, r3
    6d86:	e69f      	b.n	6ac8 <__aeabi_dadd+0x1c0>
    6d88:	2e00      	cmp	r6, #0
    6d8a:	d130      	bne.n	6dee <__aeabi_dadd+0x4e6>
    6d8c:	0026      	movs	r6, r4
    6d8e:	433e      	orrs	r6, r7
    6d90:	d067      	beq.n	6e62 <__aeabi_dadd+0x55a>
    6d92:	43db      	mvns	r3, r3
    6d94:	469a      	mov	sl, r3
    6d96:	2b00      	cmp	r3, #0
    6d98:	d01c      	beq.n	6dd4 <__aeabi_dadd+0x4cc>
    6d9a:	4e61      	ldr	r6, [pc, #388]	; (6f20 <__aeabi_dadd+0x618>)
    6d9c:	42b0      	cmp	r0, r6
    6d9e:	d060      	beq.n	6e62 <__aeabi_dadd+0x55a>
    6da0:	4653      	mov	r3, sl
    6da2:	2b38      	cmp	r3, #56	; 0x38
    6da4:	dd00      	ble.n	6da8 <__aeabi_dadd+0x4a0>
    6da6:	e096      	b.n	6ed6 <__aeabi_dadd+0x5ce>
    6da8:	2b1f      	cmp	r3, #31
    6daa:	dd00      	ble.n	6dae <__aeabi_dadd+0x4a6>
    6dac:	e09f      	b.n	6eee <__aeabi_dadd+0x5e6>
    6dae:	2620      	movs	r6, #32
    6db0:	1af3      	subs	r3, r6, r3
    6db2:	0026      	movs	r6, r4
    6db4:	409e      	lsls	r6, r3
    6db6:	469c      	mov	ip, r3
    6db8:	46b3      	mov	fp, r6
    6dba:	4653      	mov	r3, sl
    6dbc:	003e      	movs	r6, r7
    6dbe:	40de      	lsrs	r6, r3
    6dc0:	0033      	movs	r3, r6
    6dc2:	465e      	mov	r6, fp
    6dc4:	431e      	orrs	r6, r3
    6dc6:	4663      	mov	r3, ip
    6dc8:	409f      	lsls	r7, r3
    6dca:	1e7b      	subs	r3, r7, #1
    6dcc:	419f      	sbcs	r7, r3
    6dce:	4653      	mov	r3, sl
    6dd0:	40dc      	lsrs	r4, r3
    6dd2:	4337      	orrs	r7, r6
    6dd4:	18bf      	adds	r7, r7, r2
    6dd6:	4297      	cmp	r7, r2
    6dd8:	4192      	sbcs	r2, r2
    6dda:	1864      	adds	r4, r4, r1
    6ddc:	4252      	negs	r2, r2
    6dde:	18a4      	adds	r4, r4, r2
    6de0:	0006      	movs	r6, r0
    6de2:	e678      	b.n	6ad6 <__aeabi_dadd+0x1ce>
    6de4:	4327      	orrs	r7, r4
    6de6:	1e7c      	subs	r4, r7, #1
    6de8:	41a7      	sbcs	r7, r4
    6dea:	2400      	movs	r4, #0
    6dec:	e737      	b.n	6c5e <__aeabi_dadd+0x356>
    6dee:	4e4c      	ldr	r6, [pc, #304]	; (6f20 <__aeabi_dadd+0x618>)
    6df0:	42b0      	cmp	r0, r6
    6df2:	d036      	beq.n	6e62 <__aeabi_dadd+0x55a>
    6df4:	2680      	movs	r6, #128	; 0x80
    6df6:	425b      	negs	r3, r3
    6df8:	0436      	lsls	r6, r6, #16
    6dfa:	469a      	mov	sl, r3
    6dfc:	4334      	orrs	r4, r6
    6dfe:	e7cf      	b.n	6da0 <__aeabi_dadd+0x498>
    6e00:	0018      	movs	r0, r3
    6e02:	4310      	orrs	r0, r2
    6e04:	d100      	bne.n	6e08 <__aeabi_dadd+0x500>
    6e06:	e603      	b.n	6a10 <__aeabi_dadd+0x108>
    6e08:	1ab8      	subs	r0, r7, r2
    6e0a:	4684      	mov	ip, r0
    6e0c:	4567      	cmp	r7, ip
    6e0e:	41ad      	sbcs	r5, r5
    6e10:	1ae0      	subs	r0, r4, r3
    6e12:	426d      	negs	r5, r5
    6e14:	1b40      	subs	r0, r0, r5
    6e16:	0205      	lsls	r5, r0, #8
    6e18:	d400      	bmi.n	6e1c <__aeabi_dadd+0x514>
    6e1a:	e62c      	b.n	6a76 <__aeabi_dadd+0x16e>
    6e1c:	1bd7      	subs	r7, r2, r7
    6e1e:	42ba      	cmp	r2, r7
    6e20:	4192      	sbcs	r2, r2
    6e22:	1b1c      	subs	r4, r3, r4
    6e24:	4252      	negs	r2, r2
    6e26:	1aa4      	subs	r4, r4, r2
    6e28:	46d8      	mov	r8, fp
    6e2a:	e5f1      	b.n	6a10 <__aeabi_dadd+0x108>
    6e2c:	0018      	movs	r0, r3
    6e2e:	4310      	orrs	r0, r2
    6e30:	d100      	bne.n	6e34 <__aeabi_dadd+0x52c>
    6e32:	e763      	b.n	6cfc <__aeabi_dadd+0x3f4>
    6e34:	08f8      	lsrs	r0, r7, #3
    6e36:	0767      	lsls	r7, r4, #29
    6e38:	4307      	orrs	r7, r0
    6e3a:	2080      	movs	r0, #128	; 0x80
    6e3c:	08e4      	lsrs	r4, r4, #3
    6e3e:	0300      	lsls	r0, r0, #12
    6e40:	4204      	tst	r4, r0
    6e42:	d008      	beq.n	6e56 <__aeabi_dadd+0x54e>
    6e44:	08dd      	lsrs	r5, r3, #3
    6e46:	4205      	tst	r5, r0
    6e48:	d105      	bne.n	6e56 <__aeabi_dadd+0x54e>
    6e4a:	08d2      	lsrs	r2, r2, #3
    6e4c:	0759      	lsls	r1, r3, #29
    6e4e:	4311      	orrs	r1, r2
    6e50:	000f      	movs	r7, r1
    6e52:	002c      	movs	r4, r5
    6e54:	46d8      	mov	r8, fp
    6e56:	0f7b      	lsrs	r3, r7, #29
    6e58:	00e4      	lsls	r4, r4, #3
    6e5a:	431c      	orrs	r4, r3
    6e5c:	00ff      	lsls	r7, r7, #3
    6e5e:	4e30      	ldr	r6, [pc, #192]	; (6f20 <__aeabi_dadd+0x618>)
    6e60:	e5d6      	b.n	6a10 <__aeabi_dadd+0x108>
    6e62:	000c      	movs	r4, r1
    6e64:	0017      	movs	r7, r2
    6e66:	0006      	movs	r6, r0
    6e68:	e5d2      	b.n	6a10 <__aeabi_dadd+0x108>
    6e6a:	2b00      	cmp	r3, #0
    6e6c:	d038      	beq.n	6ee0 <__aeabi_dadd+0x5d8>
    6e6e:	000b      	movs	r3, r1
    6e70:	4313      	orrs	r3, r2
    6e72:	d100      	bne.n	6e76 <__aeabi_dadd+0x56e>
    6e74:	e742      	b.n	6cfc <__aeabi_dadd+0x3f4>
    6e76:	08f8      	lsrs	r0, r7, #3
    6e78:	0767      	lsls	r7, r4, #29
    6e7a:	4307      	orrs	r7, r0
    6e7c:	2080      	movs	r0, #128	; 0x80
    6e7e:	08e4      	lsrs	r4, r4, #3
    6e80:	0300      	lsls	r0, r0, #12
    6e82:	4204      	tst	r4, r0
    6e84:	d0e7      	beq.n	6e56 <__aeabi_dadd+0x54e>
    6e86:	08cb      	lsrs	r3, r1, #3
    6e88:	4203      	tst	r3, r0
    6e8a:	d1e4      	bne.n	6e56 <__aeabi_dadd+0x54e>
    6e8c:	08d2      	lsrs	r2, r2, #3
    6e8e:	0749      	lsls	r1, r1, #29
    6e90:	4311      	orrs	r1, r2
    6e92:	000f      	movs	r7, r1
    6e94:	001c      	movs	r4, r3
    6e96:	e7de      	b.n	6e56 <__aeabi_dadd+0x54e>
    6e98:	2700      	movs	r7, #0
    6e9a:	2400      	movs	r4, #0
    6e9c:	e5d5      	b.n	6a4a <__aeabi_dadd+0x142>
    6e9e:	2100      	movs	r1, #0
    6ea0:	e76b      	b.n	6d7a <__aeabi_dadd+0x472>
    6ea2:	2500      	movs	r5, #0
    6ea4:	2700      	movs	r7, #0
    6ea6:	e5f3      	b.n	6a90 <__aeabi_dadd+0x188>
    6ea8:	464e      	mov	r6, r9
    6eaa:	0025      	movs	r5, r4
    6eac:	3e20      	subs	r6, #32
    6eae:	40f5      	lsrs	r5, r6
    6eb0:	464b      	mov	r3, r9
    6eb2:	002e      	movs	r6, r5
    6eb4:	2b20      	cmp	r3, #32
    6eb6:	d02d      	beq.n	6f14 <__aeabi_dadd+0x60c>
    6eb8:	2540      	movs	r5, #64	; 0x40
    6eba:	1aed      	subs	r5, r5, r3
    6ebc:	40ac      	lsls	r4, r5
    6ebe:	4327      	orrs	r7, r4
    6ec0:	1e7c      	subs	r4, r7, #1
    6ec2:	41a7      	sbcs	r7, r4
    6ec4:	2400      	movs	r4, #0
    6ec6:	4337      	orrs	r7, r6
    6ec8:	e6c9      	b.n	6c5e <__aeabi_dadd+0x356>
    6eca:	2480      	movs	r4, #128	; 0x80
    6ecc:	2500      	movs	r5, #0
    6ece:	0324      	lsls	r4, r4, #12
    6ed0:	4e13      	ldr	r6, [pc, #76]	; (6f20 <__aeabi_dadd+0x618>)
    6ed2:	2700      	movs	r7, #0
    6ed4:	e5dc      	b.n	6a90 <__aeabi_dadd+0x188>
    6ed6:	4327      	orrs	r7, r4
    6ed8:	1e7c      	subs	r4, r7, #1
    6eda:	41a7      	sbcs	r7, r4
    6edc:	2400      	movs	r4, #0
    6ede:	e779      	b.n	6dd4 <__aeabi_dadd+0x4cc>
    6ee0:	000c      	movs	r4, r1
    6ee2:	0017      	movs	r7, r2
    6ee4:	4e0e      	ldr	r6, [pc, #56]	; (6f20 <__aeabi_dadd+0x618>)
    6ee6:	e593      	b.n	6a10 <__aeabi_dadd+0x108>
    6ee8:	000c      	movs	r4, r1
    6eea:	0017      	movs	r7, r2
    6eec:	e590      	b.n	6a10 <__aeabi_dadd+0x108>
    6eee:	4656      	mov	r6, sl
    6ef0:	0023      	movs	r3, r4
    6ef2:	3e20      	subs	r6, #32
    6ef4:	40f3      	lsrs	r3, r6
    6ef6:	4699      	mov	r9, r3
    6ef8:	4653      	mov	r3, sl
    6efa:	2b20      	cmp	r3, #32
    6efc:	d00e      	beq.n	6f1c <__aeabi_dadd+0x614>
    6efe:	2340      	movs	r3, #64	; 0x40
    6f00:	4656      	mov	r6, sl
    6f02:	1b9b      	subs	r3, r3, r6
    6f04:	409c      	lsls	r4, r3
    6f06:	4327      	orrs	r7, r4
    6f08:	1e7c      	subs	r4, r7, #1
    6f0a:	41a7      	sbcs	r7, r4
    6f0c:	464b      	mov	r3, r9
    6f0e:	2400      	movs	r4, #0
    6f10:	431f      	orrs	r7, r3
    6f12:	e75f      	b.n	6dd4 <__aeabi_dadd+0x4cc>
    6f14:	2400      	movs	r4, #0
    6f16:	e7d2      	b.n	6ebe <__aeabi_dadd+0x5b6>
    6f18:	0017      	movs	r7, r2
    6f1a:	e5b2      	b.n	6a82 <__aeabi_dadd+0x17a>
    6f1c:	2400      	movs	r4, #0
    6f1e:	e7f2      	b.n	6f06 <__aeabi_dadd+0x5fe>
    6f20:	000007ff 	.word	0x000007ff
    6f24:	ff7fffff 	.word	0xff7fffff

00006f28 <__aeabi_ddiv>:
    6f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f2a:	4657      	mov	r7, sl
    6f2c:	4645      	mov	r5, r8
    6f2e:	46de      	mov	lr, fp
    6f30:	464e      	mov	r6, r9
    6f32:	b5e0      	push	{r5, r6, r7, lr}
    6f34:	004c      	lsls	r4, r1, #1
    6f36:	030e      	lsls	r6, r1, #12
    6f38:	b087      	sub	sp, #28
    6f3a:	4683      	mov	fp, r0
    6f3c:	4692      	mov	sl, r2
    6f3e:	001d      	movs	r5, r3
    6f40:	4680      	mov	r8, r0
    6f42:	0b36      	lsrs	r6, r6, #12
    6f44:	0d64      	lsrs	r4, r4, #21
    6f46:	0fcf      	lsrs	r7, r1, #31
    6f48:	2c00      	cmp	r4, #0
    6f4a:	d04f      	beq.n	6fec <__aeabi_ddiv+0xc4>
    6f4c:	4b6f      	ldr	r3, [pc, #444]	; (710c <__aeabi_ddiv+0x1e4>)
    6f4e:	429c      	cmp	r4, r3
    6f50:	d035      	beq.n	6fbe <__aeabi_ddiv+0x96>
    6f52:	2380      	movs	r3, #128	; 0x80
    6f54:	0f42      	lsrs	r2, r0, #29
    6f56:	041b      	lsls	r3, r3, #16
    6f58:	00f6      	lsls	r6, r6, #3
    6f5a:	4313      	orrs	r3, r2
    6f5c:	4333      	orrs	r3, r6
    6f5e:	4699      	mov	r9, r3
    6f60:	00c3      	lsls	r3, r0, #3
    6f62:	4698      	mov	r8, r3
    6f64:	4b6a      	ldr	r3, [pc, #424]	; (7110 <__aeabi_ddiv+0x1e8>)
    6f66:	2600      	movs	r6, #0
    6f68:	469c      	mov	ip, r3
    6f6a:	2300      	movs	r3, #0
    6f6c:	4464      	add	r4, ip
    6f6e:	9303      	str	r3, [sp, #12]
    6f70:	032b      	lsls	r3, r5, #12
    6f72:	0b1b      	lsrs	r3, r3, #12
    6f74:	469b      	mov	fp, r3
    6f76:	006b      	lsls	r3, r5, #1
    6f78:	0fed      	lsrs	r5, r5, #31
    6f7a:	4650      	mov	r0, sl
    6f7c:	0d5b      	lsrs	r3, r3, #21
    6f7e:	9501      	str	r5, [sp, #4]
    6f80:	d05e      	beq.n	7040 <__aeabi_ddiv+0x118>
    6f82:	4a62      	ldr	r2, [pc, #392]	; (710c <__aeabi_ddiv+0x1e4>)
    6f84:	4293      	cmp	r3, r2
    6f86:	d053      	beq.n	7030 <__aeabi_ddiv+0x108>
    6f88:	465a      	mov	r2, fp
    6f8a:	00d1      	lsls	r1, r2, #3
    6f8c:	2280      	movs	r2, #128	; 0x80
    6f8e:	0f40      	lsrs	r0, r0, #29
    6f90:	0412      	lsls	r2, r2, #16
    6f92:	4302      	orrs	r2, r0
    6f94:	430a      	orrs	r2, r1
    6f96:	4693      	mov	fp, r2
    6f98:	4652      	mov	r2, sl
    6f9a:	00d1      	lsls	r1, r2, #3
    6f9c:	4a5c      	ldr	r2, [pc, #368]	; (7110 <__aeabi_ddiv+0x1e8>)
    6f9e:	4694      	mov	ip, r2
    6fa0:	2200      	movs	r2, #0
    6fa2:	4463      	add	r3, ip
    6fa4:	0038      	movs	r0, r7
    6fa6:	4068      	eors	r0, r5
    6fa8:	4684      	mov	ip, r0
    6faa:	9002      	str	r0, [sp, #8]
    6fac:	1ae4      	subs	r4, r4, r3
    6fae:	4316      	orrs	r6, r2
    6fb0:	2e0f      	cmp	r6, #15
    6fb2:	d900      	bls.n	6fb6 <__aeabi_ddiv+0x8e>
    6fb4:	e0b4      	b.n	7120 <__aeabi_ddiv+0x1f8>
    6fb6:	4b57      	ldr	r3, [pc, #348]	; (7114 <__aeabi_ddiv+0x1ec>)
    6fb8:	00b6      	lsls	r6, r6, #2
    6fba:	599b      	ldr	r3, [r3, r6]
    6fbc:	469f      	mov	pc, r3
    6fbe:	0003      	movs	r3, r0
    6fc0:	4333      	orrs	r3, r6
    6fc2:	4699      	mov	r9, r3
    6fc4:	d16c      	bne.n	70a0 <__aeabi_ddiv+0x178>
    6fc6:	2300      	movs	r3, #0
    6fc8:	4698      	mov	r8, r3
    6fca:	3302      	adds	r3, #2
    6fcc:	2608      	movs	r6, #8
    6fce:	9303      	str	r3, [sp, #12]
    6fd0:	e7ce      	b.n	6f70 <__aeabi_ddiv+0x48>
    6fd2:	46cb      	mov	fp, r9
    6fd4:	4641      	mov	r1, r8
    6fd6:	9a03      	ldr	r2, [sp, #12]
    6fd8:	9701      	str	r7, [sp, #4]
    6fda:	2a02      	cmp	r2, #2
    6fdc:	d165      	bne.n	70aa <__aeabi_ddiv+0x182>
    6fde:	9b01      	ldr	r3, [sp, #4]
    6fe0:	4c4a      	ldr	r4, [pc, #296]	; (710c <__aeabi_ddiv+0x1e4>)
    6fe2:	469c      	mov	ip, r3
    6fe4:	2300      	movs	r3, #0
    6fe6:	2200      	movs	r2, #0
    6fe8:	4698      	mov	r8, r3
    6fea:	e06b      	b.n	70c4 <__aeabi_ddiv+0x19c>
    6fec:	0003      	movs	r3, r0
    6fee:	4333      	orrs	r3, r6
    6ff0:	4699      	mov	r9, r3
    6ff2:	d04e      	beq.n	7092 <__aeabi_ddiv+0x16a>
    6ff4:	2e00      	cmp	r6, #0
    6ff6:	d100      	bne.n	6ffa <__aeabi_ddiv+0xd2>
    6ff8:	e1bc      	b.n	7374 <__aeabi_ddiv+0x44c>
    6ffa:	0030      	movs	r0, r6
    6ffc:	f001 f8ca 	bl	8194 <__clzsi2>
    7000:	0003      	movs	r3, r0
    7002:	3b0b      	subs	r3, #11
    7004:	2b1c      	cmp	r3, #28
    7006:	dd00      	ble.n	700a <__aeabi_ddiv+0xe2>
    7008:	e1ac      	b.n	7364 <__aeabi_ddiv+0x43c>
    700a:	221d      	movs	r2, #29
    700c:	1ad3      	subs	r3, r2, r3
    700e:	465a      	mov	r2, fp
    7010:	0001      	movs	r1, r0
    7012:	40da      	lsrs	r2, r3
    7014:	3908      	subs	r1, #8
    7016:	408e      	lsls	r6, r1
    7018:	0013      	movs	r3, r2
    701a:	4333      	orrs	r3, r6
    701c:	4699      	mov	r9, r3
    701e:	465b      	mov	r3, fp
    7020:	408b      	lsls	r3, r1
    7022:	4698      	mov	r8, r3
    7024:	2300      	movs	r3, #0
    7026:	4c3c      	ldr	r4, [pc, #240]	; (7118 <__aeabi_ddiv+0x1f0>)
    7028:	2600      	movs	r6, #0
    702a:	1a24      	subs	r4, r4, r0
    702c:	9303      	str	r3, [sp, #12]
    702e:	e79f      	b.n	6f70 <__aeabi_ddiv+0x48>
    7030:	4651      	mov	r1, sl
    7032:	465a      	mov	r2, fp
    7034:	4311      	orrs	r1, r2
    7036:	d129      	bne.n	708c <__aeabi_ddiv+0x164>
    7038:	2200      	movs	r2, #0
    703a:	4693      	mov	fp, r2
    703c:	3202      	adds	r2, #2
    703e:	e7b1      	b.n	6fa4 <__aeabi_ddiv+0x7c>
    7040:	4659      	mov	r1, fp
    7042:	4301      	orrs	r1, r0
    7044:	d01e      	beq.n	7084 <__aeabi_ddiv+0x15c>
    7046:	465b      	mov	r3, fp
    7048:	2b00      	cmp	r3, #0
    704a:	d100      	bne.n	704e <__aeabi_ddiv+0x126>
    704c:	e19e      	b.n	738c <__aeabi_ddiv+0x464>
    704e:	4658      	mov	r0, fp
    7050:	f001 f8a0 	bl	8194 <__clzsi2>
    7054:	0003      	movs	r3, r0
    7056:	3b0b      	subs	r3, #11
    7058:	2b1c      	cmp	r3, #28
    705a:	dd00      	ble.n	705e <__aeabi_ddiv+0x136>
    705c:	e18f      	b.n	737e <__aeabi_ddiv+0x456>
    705e:	0002      	movs	r2, r0
    7060:	4659      	mov	r1, fp
    7062:	3a08      	subs	r2, #8
    7064:	4091      	lsls	r1, r2
    7066:	468b      	mov	fp, r1
    7068:	211d      	movs	r1, #29
    706a:	1acb      	subs	r3, r1, r3
    706c:	4651      	mov	r1, sl
    706e:	40d9      	lsrs	r1, r3
    7070:	000b      	movs	r3, r1
    7072:	4659      	mov	r1, fp
    7074:	430b      	orrs	r3, r1
    7076:	4651      	mov	r1, sl
    7078:	469b      	mov	fp, r3
    707a:	4091      	lsls	r1, r2
    707c:	4b26      	ldr	r3, [pc, #152]	; (7118 <__aeabi_ddiv+0x1f0>)
    707e:	2200      	movs	r2, #0
    7080:	1a1b      	subs	r3, r3, r0
    7082:	e78f      	b.n	6fa4 <__aeabi_ddiv+0x7c>
    7084:	2300      	movs	r3, #0
    7086:	2201      	movs	r2, #1
    7088:	469b      	mov	fp, r3
    708a:	e78b      	b.n	6fa4 <__aeabi_ddiv+0x7c>
    708c:	4651      	mov	r1, sl
    708e:	2203      	movs	r2, #3
    7090:	e788      	b.n	6fa4 <__aeabi_ddiv+0x7c>
    7092:	2300      	movs	r3, #0
    7094:	4698      	mov	r8, r3
    7096:	3301      	adds	r3, #1
    7098:	2604      	movs	r6, #4
    709a:	2400      	movs	r4, #0
    709c:	9303      	str	r3, [sp, #12]
    709e:	e767      	b.n	6f70 <__aeabi_ddiv+0x48>
    70a0:	2303      	movs	r3, #3
    70a2:	46b1      	mov	r9, r6
    70a4:	9303      	str	r3, [sp, #12]
    70a6:	260c      	movs	r6, #12
    70a8:	e762      	b.n	6f70 <__aeabi_ddiv+0x48>
    70aa:	2a03      	cmp	r2, #3
    70ac:	d100      	bne.n	70b0 <__aeabi_ddiv+0x188>
    70ae:	e25c      	b.n	756a <__aeabi_ddiv+0x642>
    70b0:	9b01      	ldr	r3, [sp, #4]
    70b2:	2a01      	cmp	r2, #1
    70b4:	d000      	beq.n	70b8 <__aeabi_ddiv+0x190>
    70b6:	e1e4      	b.n	7482 <__aeabi_ddiv+0x55a>
    70b8:	4013      	ands	r3, r2
    70ba:	469c      	mov	ip, r3
    70bc:	2300      	movs	r3, #0
    70be:	2400      	movs	r4, #0
    70c0:	2200      	movs	r2, #0
    70c2:	4698      	mov	r8, r3
    70c4:	2100      	movs	r1, #0
    70c6:	0312      	lsls	r2, r2, #12
    70c8:	0b13      	lsrs	r3, r2, #12
    70ca:	0d0a      	lsrs	r2, r1, #20
    70cc:	0512      	lsls	r2, r2, #20
    70ce:	431a      	orrs	r2, r3
    70d0:	0523      	lsls	r3, r4, #20
    70d2:	4c12      	ldr	r4, [pc, #72]	; (711c <__aeabi_ddiv+0x1f4>)
    70d4:	4640      	mov	r0, r8
    70d6:	4022      	ands	r2, r4
    70d8:	4313      	orrs	r3, r2
    70da:	4662      	mov	r2, ip
    70dc:	005b      	lsls	r3, r3, #1
    70de:	07d2      	lsls	r2, r2, #31
    70e0:	085b      	lsrs	r3, r3, #1
    70e2:	4313      	orrs	r3, r2
    70e4:	0019      	movs	r1, r3
    70e6:	b007      	add	sp, #28
    70e8:	bc3c      	pop	{r2, r3, r4, r5}
    70ea:	4690      	mov	r8, r2
    70ec:	4699      	mov	r9, r3
    70ee:	46a2      	mov	sl, r4
    70f0:	46ab      	mov	fp, r5
    70f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70f4:	2300      	movs	r3, #0
    70f6:	2280      	movs	r2, #128	; 0x80
    70f8:	469c      	mov	ip, r3
    70fa:	0312      	lsls	r2, r2, #12
    70fc:	4698      	mov	r8, r3
    70fe:	4c03      	ldr	r4, [pc, #12]	; (710c <__aeabi_ddiv+0x1e4>)
    7100:	e7e0      	b.n	70c4 <__aeabi_ddiv+0x19c>
    7102:	2300      	movs	r3, #0
    7104:	4c01      	ldr	r4, [pc, #4]	; (710c <__aeabi_ddiv+0x1e4>)
    7106:	2200      	movs	r2, #0
    7108:	4698      	mov	r8, r3
    710a:	e7db      	b.n	70c4 <__aeabi_ddiv+0x19c>
    710c:	000007ff 	.word	0x000007ff
    7110:	fffffc01 	.word	0xfffffc01
    7114:	00009aec 	.word	0x00009aec
    7118:	fffffc0d 	.word	0xfffffc0d
    711c:	800fffff 	.word	0x800fffff
    7120:	45d9      	cmp	r9, fp
    7122:	d900      	bls.n	7126 <__aeabi_ddiv+0x1fe>
    7124:	e139      	b.n	739a <__aeabi_ddiv+0x472>
    7126:	d100      	bne.n	712a <__aeabi_ddiv+0x202>
    7128:	e134      	b.n	7394 <__aeabi_ddiv+0x46c>
    712a:	2300      	movs	r3, #0
    712c:	4646      	mov	r6, r8
    712e:	464d      	mov	r5, r9
    7130:	469a      	mov	sl, r3
    7132:	3c01      	subs	r4, #1
    7134:	465b      	mov	r3, fp
    7136:	0e0a      	lsrs	r2, r1, #24
    7138:	021b      	lsls	r3, r3, #8
    713a:	431a      	orrs	r2, r3
    713c:	020b      	lsls	r3, r1, #8
    713e:	0c17      	lsrs	r7, r2, #16
    7140:	9303      	str	r3, [sp, #12]
    7142:	0413      	lsls	r3, r2, #16
    7144:	0c1b      	lsrs	r3, r3, #16
    7146:	0039      	movs	r1, r7
    7148:	0028      	movs	r0, r5
    714a:	4690      	mov	r8, r2
    714c:	9301      	str	r3, [sp, #4]
    714e:	f7ff f95b 	bl	6408 <__udivsi3>
    7152:	0002      	movs	r2, r0
    7154:	9b01      	ldr	r3, [sp, #4]
    7156:	4683      	mov	fp, r0
    7158:	435a      	muls	r2, r3
    715a:	0028      	movs	r0, r5
    715c:	0039      	movs	r1, r7
    715e:	4691      	mov	r9, r2
    7160:	f7ff f9d8 	bl	6514 <__aeabi_uidivmod>
    7164:	0c35      	lsrs	r5, r6, #16
    7166:	0409      	lsls	r1, r1, #16
    7168:	430d      	orrs	r5, r1
    716a:	45a9      	cmp	r9, r5
    716c:	d90d      	bls.n	718a <__aeabi_ddiv+0x262>
    716e:	465b      	mov	r3, fp
    7170:	4445      	add	r5, r8
    7172:	3b01      	subs	r3, #1
    7174:	45a8      	cmp	r8, r5
    7176:	d900      	bls.n	717a <__aeabi_ddiv+0x252>
    7178:	e13a      	b.n	73f0 <__aeabi_ddiv+0x4c8>
    717a:	45a9      	cmp	r9, r5
    717c:	d800      	bhi.n	7180 <__aeabi_ddiv+0x258>
    717e:	e137      	b.n	73f0 <__aeabi_ddiv+0x4c8>
    7180:	2302      	movs	r3, #2
    7182:	425b      	negs	r3, r3
    7184:	469c      	mov	ip, r3
    7186:	4445      	add	r5, r8
    7188:	44e3      	add	fp, ip
    718a:	464b      	mov	r3, r9
    718c:	1aeb      	subs	r3, r5, r3
    718e:	0039      	movs	r1, r7
    7190:	0018      	movs	r0, r3
    7192:	9304      	str	r3, [sp, #16]
    7194:	f7ff f938 	bl	6408 <__udivsi3>
    7198:	9b01      	ldr	r3, [sp, #4]
    719a:	0005      	movs	r5, r0
    719c:	4343      	muls	r3, r0
    719e:	0039      	movs	r1, r7
    71a0:	9804      	ldr	r0, [sp, #16]
    71a2:	4699      	mov	r9, r3
    71a4:	f7ff f9b6 	bl	6514 <__aeabi_uidivmod>
    71a8:	0433      	lsls	r3, r6, #16
    71aa:	0409      	lsls	r1, r1, #16
    71ac:	0c1b      	lsrs	r3, r3, #16
    71ae:	430b      	orrs	r3, r1
    71b0:	4599      	cmp	r9, r3
    71b2:	d909      	bls.n	71c8 <__aeabi_ddiv+0x2a0>
    71b4:	4443      	add	r3, r8
    71b6:	1e6a      	subs	r2, r5, #1
    71b8:	4598      	cmp	r8, r3
    71ba:	d900      	bls.n	71be <__aeabi_ddiv+0x296>
    71bc:	e11a      	b.n	73f4 <__aeabi_ddiv+0x4cc>
    71be:	4599      	cmp	r9, r3
    71c0:	d800      	bhi.n	71c4 <__aeabi_ddiv+0x29c>
    71c2:	e117      	b.n	73f4 <__aeabi_ddiv+0x4cc>
    71c4:	3d02      	subs	r5, #2
    71c6:	4443      	add	r3, r8
    71c8:	464a      	mov	r2, r9
    71ca:	1a9b      	subs	r3, r3, r2
    71cc:	465a      	mov	r2, fp
    71ce:	0412      	lsls	r2, r2, #16
    71d0:	432a      	orrs	r2, r5
    71d2:	9903      	ldr	r1, [sp, #12]
    71d4:	4693      	mov	fp, r2
    71d6:	0c10      	lsrs	r0, r2, #16
    71d8:	0c0a      	lsrs	r2, r1, #16
    71da:	4691      	mov	r9, r2
    71dc:	0409      	lsls	r1, r1, #16
    71de:	465a      	mov	r2, fp
    71e0:	0c09      	lsrs	r1, r1, #16
    71e2:	464e      	mov	r6, r9
    71e4:	000d      	movs	r5, r1
    71e6:	0412      	lsls	r2, r2, #16
    71e8:	0c12      	lsrs	r2, r2, #16
    71ea:	4345      	muls	r5, r0
    71ec:	9105      	str	r1, [sp, #20]
    71ee:	4351      	muls	r1, r2
    71f0:	4372      	muls	r2, r6
    71f2:	4370      	muls	r0, r6
    71f4:	1952      	adds	r2, r2, r5
    71f6:	0c0e      	lsrs	r6, r1, #16
    71f8:	18b2      	adds	r2, r6, r2
    71fa:	4295      	cmp	r5, r2
    71fc:	d903      	bls.n	7206 <__aeabi_ddiv+0x2de>
    71fe:	2580      	movs	r5, #128	; 0x80
    7200:	026d      	lsls	r5, r5, #9
    7202:	46ac      	mov	ip, r5
    7204:	4460      	add	r0, ip
    7206:	0c15      	lsrs	r5, r2, #16
    7208:	0409      	lsls	r1, r1, #16
    720a:	0412      	lsls	r2, r2, #16
    720c:	0c09      	lsrs	r1, r1, #16
    720e:	1828      	adds	r0, r5, r0
    7210:	1852      	adds	r2, r2, r1
    7212:	4283      	cmp	r3, r0
    7214:	d200      	bcs.n	7218 <__aeabi_ddiv+0x2f0>
    7216:	e0ce      	b.n	73b6 <__aeabi_ddiv+0x48e>
    7218:	d100      	bne.n	721c <__aeabi_ddiv+0x2f4>
    721a:	e0c8      	b.n	73ae <__aeabi_ddiv+0x486>
    721c:	1a1d      	subs	r5, r3, r0
    721e:	4653      	mov	r3, sl
    7220:	1a9e      	subs	r6, r3, r2
    7222:	45b2      	cmp	sl, r6
    7224:	4192      	sbcs	r2, r2
    7226:	4252      	negs	r2, r2
    7228:	1aab      	subs	r3, r5, r2
    722a:	469a      	mov	sl, r3
    722c:	4598      	cmp	r8, r3
    722e:	d100      	bne.n	7232 <__aeabi_ddiv+0x30a>
    7230:	e117      	b.n	7462 <__aeabi_ddiv+0x53a>
    7232:	0039      	movs	r1, r7
    7234:	0018      	movs	r0, r3
    7236:	f7ff f8e7 	bl	6408 <__udivsi3>
    723a:	9b01      	ldr	r3, [sp, #4]
    723c:	0005      	movs	r5, r0
    723e:	4343      	muls	r3, r0
    7240:	0039      	movs	r1, r7
    7242:	4650      	mov	r0, sl
    7244:	9304      	str	r3, [sp, #16]
    7246:	f7ff f965 	bl	6514 <__aeabi_uidivmod>
    724a:	9804      	ldr	r0, [sp, #16]
    724c:	040b      	lsls	r3, r1, #16
    724e:	0c31      	lsrs	r1, r6, #16
    7250:	4319      	orrs	r1, r3
    7252:	4288      	cmp	r0, r1
    7254:	d909      	bls.n	726a <__aeabi_ddiv+0x342>
    7256:	4441      	add	r1, r8
    7258:	1e6b      	subs	r3, r5, #1
    725a:	4588      	cmp	r8, r1
    725c:	d900      	bls.n	7260 <__aeabi_ddiv+0x338>
    725e:	e107      	b.n	7470 <__aeabi_ddiv+0x548>
    7260:	4288      	cmp	r0, r1
    7262:	d800      	bhi.n	7266 <__aeabi_ddiv+0x33e>
    7264:	e104      	b.n	7470 <__aeabi_ddiv+0x548>
    7266:	3d02      	subs	r5, #2
    7268:	4441      	add	r1, r8
    726a:	9b04      	ldr	r3, [sp, #16]
    726c:	1acb      	subs	r3, r1, r3
    726e:	0018      	movs	r0, r3
    7270:	0039      	movs	r1, r7
    7272:	9304      	str	r3, [sp, #16]
    7274:	f7ff f8c8 	bl	6408 <__udivsi3>
    7278:	9b01      	ldr	r3, [sp, #4]
    727a:	4682      	mov	sl, r0
    727c:	4343      	muls	r3, r0
    727e:	0039      	movs	r1, r7
    7280:	9804      	ldr	r0, [sp, #16]
    7282:	9301      	str	r3, [sp, #4]
    7284:	f7ff f946 	bl	6514 <__aeabi_uidivmod>
    7288:	9801      	ldr	r0, [sp, #4]
    728a:	040b      	lsls	r3, r1, #16
    728c:	0431      	lsls	r1, r6, #16
    728e:	0c09      	lsrs	r1, r1, #16
    7290:	4319      	orrs	r1, r3
    7292:	4288      	cmp	r0, r1
    7294:	d90d      	bls.n	72b2 <__aeabi_ddiv+0x38a>
    7296:	4653      	mov	r3, sl
    7298:	4441      	add	r1, r8
    729a:	3b01      	subs	r3, #1
    729c:	4588      	cmp	r8, r1
    729e:	d900      	bls.n	72a2 <__aeabi_ddiv+0x37a>
    72a0:	e0e8      	b.n	7474 <__aeabi_ddiv+0x54c>
    72a2:	4288      	cmp	r0, r1
    72a4:	d800      	bhi.n	72a8 <__aeabi_ddiv+0x380>
    72a6:	e0e5      	b.n	7474 <__aeabi_ddiv+0x54c>
    72a8:	2302      	movs	r3, #2
    72aa:	425b      	negs	r3, r3
    72ac:	469c      	mov	ip, r3
    72ae:	4441      	add	r1, r8
    72b0:	44e2      	add	sl, ip
    72b2:	9b01      	ldr	r3, [sp, #4]
    72b4:	042d      	lsls	r5, r5, #16
    72b6:	1ace      	subs	r6, r1, r3
    72b8:	4651      	mov	r1, sl
    72ba:	4329      	orrs	r1, r5
    72bc:	9d05      	ldr	r5, [sp, #20]
    72be:	464f      	mov	r7, r9
    72c0:	002a      	movs	r2, r5
    72c2:	040b      	lsls	r3, r1, #16
    72c4:	0c08      	lsrs	r0, r1, #16
    72c6:	0c1b      	lsrs	r3, r3, #16
    72c8:	435a      	muls	r2, r3
    72ca:	4345      	muls	r5, r0
    72cc:	437b      	muls	r3, r7
    72ce:	4378      	muls	r0, r7
    72d0:	195b      	adds	r3, r3, r5
    72d2:	0c17      	lsrs	r7, r2, #16
    72d4:	18fb      	adds	r3, r7, r3
    72d6:	429d      	cmp	r5, r3
    72d8:	d903      	bls.n	72e2 <__aeabi_ddiv+0x3ba>
    72da:	2580      	movs	r5, #128	; 0x80
    72dc:	026d      	lsls	r5, r5, #9
    72de:	46ac      	mov	ip, r5
    72e0:	4460      	add	r0, ip
    72e2:	0c1d      	lsrs	r5, r3, #16
    72e4:	0412      	lsls	r2, r2, #16
    72e6:	041b      	lsls	r3, r3, #16
    72e8:	0c12      	lsrs	r2, r2, #16
    72ea:	1828      	adds	r0, r5, r0
    72ec:	189b      	adds	r3, r3, r2
    72ee:	4286      	cmp	r6, r0
    72f0:	d200      	bcs.n	72f4 <__aeabi_ddiv+0x3cc>
    72f2:	e093      	b.n	741c <__aeabi_ddiv+0x4f4>
    72f4:	d100      	bne.n	72f8 <__aeabi_ddiv+0x3d0>
    72f6:	e08e      	b.n	7416 <__aeabi_ddiv+0x4ee>
    72f8:	2301      	movs	r3, #1
    72fa:	4319      	orrs	r1, r3
    72fc:	4ba0      	ldr	r3, [pc, #640]	; (7580 <__aeabi_ddiv+0x658>)
    72fe:	18e3      	adds	r3, r4, r3
    7300:	2b00      	cmp	r3, #0
    7302:	dc00      	bgt.n	7306 <__aeabi_ddiv+0x3de>
    7304:	e099      	b.n	743a <__aeabi_ddiv+0x512>
    7306:	074a      	lsls	r2, r1, #29
    7308:	d000      	beq.n	730c <__aeabi_ddiv+0x3e4>
    730a:	e09e      	b.n	744a <__aeabi_ddiv+0x522>
    730c:	465a      	mov	r2, fp
    730e:	01d2      	lsls	r2, r2, #7
    7310:	d506      	bpl.n	7320 <__aeabi_ddiv+0x3f8>
    7312:	465a      	mov	r2, fp
    7314:	4b9b      	ldr	r3, [pc, #620]	; (7584 <__aeabi_ddiv+0x65c>)
    7316:	401a      	ands	r2, r3
    7318:	2380      	movs	r3, #128	; 0x80
    731a:	4693      	mov	fp, r2
    731c:	00db      	lsls	r3, r3, #3
    731e:	18e3      	adds	r3, r4, r3
    7320:	4a99      	ldr	r2, [pc, #612]	; (7588 <__aeabi_ddiv+0x660>)
    7322:	4293      	cmp	r3, r2
    7324:	dd68      	ble.n	73f8 <__aeabi_ddiv+0x4d0>
    7326:	2301      	movs	r3, #1
    7328:	9a02      	ldr	r2, [sp, #8]
    732a:	4c98      	ldr	r4, [pc, #608]	; (758c <__aeabi_ddiv+0x664>)
    732c:	401a      	ands	r2, r3
    732e:	2300      	movs	r3, #0
    7330:	4694      	mov	ip, r2
    7332:	4698      	mov	r8, r3
    7334:	2200      	movs	r2, #0
    7336:	e6c5      	b.n	70c4 <__aeabi_ddiv+0x19c>
    7338:	2280      	movs	r2, #128	; 0x80
    733a:	464b      	mov	r3, r9
    733c:	0312      	lsls	r2, r2, #12
    733e:	4213      	tst	r3, r2
    7340:	d00a      	beq.n	7358 <__aeabi_ddiv+0x430>
    7342:	465b      	mov	r3, fp
    7344:	4213      	tst	r3, r2
    7346:	d106      	bne.n	7356 <__aeabi_ddiv+0x42e>
    7348:	431a      	orrs	r2, r3
    734a:	0312      	lsls	r2, r2, #12
    734c:	0b12      	lsrs	r2, r2, #12
    734e:	46ac      	mov	ip, r5
    7350:	4688      	mov	r8, r1
    7352:	4c8e      	ldr	r4, [pc, #568]	; (758c <__aeabi_ddiv+0x664>)
    7354:	e6b6      	b.n	70c4 <__aeabi_ddiv+0x19c>
    7356:	464b      	mov	r3, r9
    7358:	431a      	orrs	r2, r3
    735a:	0312      	lsls	r2, r2, #12
    735c:	0b12      	lsrs	r2, r2, #12
    735e:	46bc      	mov	ip, r7
    7360:	4c8a      	ldr	r4, [pc, #552]	; (758c <__aeabi_ddiv+0x664>)
    7362:	e6af      	b.n	70c4 <__aeabi_ddiv+0x19c>
    7364:	0003      	movs	r3, r0
    7366:	465a      	mov	r2, fp
    7368:	3b28      	subs	r3, #40	; 0x28
    736a:	409a      	lsls	r2, r3
    736c:	2300      	movs	r3, #0
    736e:	4691      	mov	r9, r2
    7370:	4698      	mov	r8, r3
    7372:	e657      	b.n	7024 <__aeabi_ddiv+0xfc>
    7374:	4658      	mov	r0, fp
    7376:	f000 ff0d 	bl	8194 <__clzsi2>
    737a:	3020      	adds	r0, #32
    737c:	e640      	b.n	7000 <__aeabi_ddiv+0xd8>
    737e:	0003      	movs	r3, r0
    7380:	4652      	mov	r2, sl
    7382:	3b28      	subs	r3, #40	; 0x28
    7384:	409a      	lsls	r2, r3
    7386:	2100      	movs	r1, #0
    7388:	4693      	mov	fp, r2
    738a:	e677      	b.n	707c <__aeabi_ddiv+0x154>
    738c:	f000 ff02 	bl	8194 <__clzsi2>
    7390:	3020      	adds	r0, #32
    7392:	e65f      	b.n	7054 <__aeabi_ddiv+0x12c>
    7394:	4588      	cmp	r8, r1
    7396:	d200      	bcs.n	739a <__aeabi_ddiv+0x472>
    7398:	e6c7      	b.n	712a <__aeabi_ddiv+0x202>
    739a:	464b      	mov	r3, r9
    739c:	07de      	lsls	r6, r3, #31
    739e:	085d      	lsrs	r5, r3, #1
    73a0:	4643      	mov	r3, r8
    73a2:	085b      	lsrs	r3, r3, #1
    73a4:	431e      	orrs	r6, r3
    73a6:	4643      	mov	r3, r8
    73a8:	07db      	lsls	r3, r3, #31
    73aa:	469a      	mov	sl, r3
    73ac:	e6c2      	b.n	7134 <__aeabi_ddiv+0x20c>
    73ae:	2500      	movs	r5, #0
    73b0:	4592      	cmp	sl, r2
    73b2:	d300      	bcc.n	73b6 <__aeabi_ddiv+0x48e>
    73b4:	e733      	b.n	721e <__aeabi_ddiv+0x2f6>
    73b6:	9e03      	ldr	r6, [sp, #12]
    73b8:	4659      	mov	r1, fp
    73ba:	46b4      	mov	ip, r6
    73bc:	44e2      	add	sl, ip
    73be:	45b2      	cmp	sl, r6
    73c0:	41ad      	sbcs	r5, r5
    73c2:	426d      	negs	r5, r5
    73c4:	4445      	add	r5, r8
    73c6:	18eb      	adds	r3, r5, r3
    73c8:	3901      	subs	r1, #1
    73ca:	4598      	cmp	r8, r3
    73cc:	d207      	bcs.n	73de <__aeabi_ddiv+0x4b6>
    73ce:	4298      	cmp	r0, r3
    73d0:	d900      	bls.n	73d4 <__aeabi_ddiv+0x4ac>
    73d2:	e07f      	b.n	74d4 <__aeabi_ddiv+0x5ac>
    73d4:	d100      	bne.n	73d8 <__aeabi_ddiv+0x4b0>
    73d6:	e0bc      	b.n	7552 <__aeabi_ddiv+0x62a>
    73d8:	1a1d      	subs	r5, r3, r0
    73da:	468b      	mov	fp, r1
    73dc:	e71f      	b.n	721e <__aeabi_ddiv+0x2f6>
    73de:	4598      	cmp	r8, r3
    73e0:	d1fa      	bne.n	73d8 <__aeabi_ddiv+0x4b0>
    73e2:	9d03      	ldr	r5, [sp, #12]
    73e4:	4555      	cmp	r5, sl
    73e6:	d9f2      	bls.n	73ce <__aeabi_ddiv+0x4a6>
    73e8:	4643      	mov	r3, r8
    73ea:	468b      	mov	fp, r1
    73ec:	1a1d      	subs	r5, r3, r0
    73ee:	e716      	b.n	721e <__aeabi_ddiv+0x2f6>
    73f0:	469b      	mov	fp, r3
    73f2:	e6ca      	b.n	718a <__aeabi_ddiv+0x262>
    73f4:	0015      	movs	r5, r2
    73f6:	e6e7      	b.n	71c8 <__aeabi_ddiv+0x2a0>
    73f8:	465a      	mov	r2, fp
    73fa:	08c9      	lsrs	r1, r1, #3
    73fc:	0752      	lsls	r2, r2, #29
    73fe:	430a      	orrs	r2, r1
    7400:	055b      	lsls	r3, r3, #21
    7402:	4690      	mov	r8, r2
    7404:	0d5c      	lsrs	r4, r3, #21
    7406:	465a      	mov	r2, fp
    7408:	2301      	movs	r3, #1
    740a:	9902      	ldr	r1, [sp, #8]
    740c:	0252      	lsls	r2, r2, #9
    740e:	4019      	ands	r1, r3
    7410:	0b12      	lsrs	r2, r2, #12
    7412:	468c      	mov	ip, r1
    7414:	e656      	b.n	70c4 <__aeabi_ddiv+0x19c>
    7416:	2b00      	cmp	r3, #0
    7418:	d100      	bne.n	741c <__aeabi_ddiv+0x4f4>
    741a:	e76f      	b.n	72fc <__aeabi_ddiv+0x3d4>
    741c:	4446      	add	r6, r8
    741e:	1e4a      	subs	r2, r1, #1
    7420:	45b0      	cmp	r8, r6
    7422:	d929      	bls.n	7478 <__aeabi_ddiv+0x550>
    7424:	0011      	movs	r1, r2
    7426:	4286      	cmp	r6, r0
    7428:	d000      	beq.n	742c <__aeabi_ddiv+0x504>
    742a:	e765      	b.n	72f8 <__aeabi_ddiv+0x3d0>
    742c:	9a03      	ldr	r2, [sp, #12]
    742e:	4293      	cmp	r3, r2
    7430:	d000      	beq.n	7434 <__aeabi_ddiv+0x50c>
    7432:	e761      	b.n	72f8 <__aeabi_ddiv+0x3d0>
    7434:	e762      	b.n	72fc <__aeabi_ddiv+0x3d4>
    7436:	2101      	movs	r1, #1
    7438:	4249      	negs	r1, r1
    743a:	2001      	movs	r0, #1
    743c:	1ac2      	subs	r2, r0, r3
    743e:	2a38      	cmp	r2, #56	; 0x38
    7440:	dd21      	ble.n	7486 <__aeabi_ddiv+0x55e>
    7442:	9b02      	ldr	r3, [sp, #8]
    7444:	4003      	ands	r3, r0
    7446:	469c      	mov	ip, r3
    7448:	e638      	b.n	70bc <__aeabi_ddiv+0x194>
    744a:	220f      	movs	r2, #15
    744c:	400a      	ands	r2, r1
    744e:	2a04      	cmp	r2, #4
    7450:	d100      	bne.n	7454 <__aeabi_ddiv+0x52c>
    7452:	e75b      	b.n	730c <__aeabi_ddiv+0x3e4>
    7454:	000a      	movs	r2, r1
    7456:	1d11      	adds	r1, r2, #4
    7458:	4291      	cmp	r1, r2
    745a:	4192      	sbcs	r2, r2
    745c:	4252      	negs	r2, r2
    745e:	4493      	add	fp, r2
    7460:	e754      	b.n	730c <__aeabi_ddiv+0x3e4>
    7462:	4b47      	ldr	r3, [pc, #284]	; (7580 <__aeabi_ddiv+0x658>)
    7464:	18e3      	adds	r3, r4, r3
    7466:	2b00      	cmp	r3, #0
    7468:	dde5      	ble.n	7436 <__aeabi_ddiv+0x50e>
    746a:	2201      	movs	r2, #1
    746c:	4252      	negs	r2, r2
    746e:	e7f2      	b.n	7456 <__aeabi_ddiv+0x52e>
    7470:	001d      	movs	r5, r3
    7472:	e6fa      	b.n	726a <__aeabi_ddiv+0x342>
    7474:	469a      	mov	sl, r3
    7476:	e71c      	b.n	72b2 <__aeabi_ddiv+0x38a>
    7478:	42b0      	cmp	r0, r6
    747a:	d839      	bhi.n	74f0 <__aeabi_ddiv+0x5c8>
    747c:	d06e      	beq.n	755c <__aeabi_ddiv+0x634>
    747e:	0011      	movs	r1, r2
    7480:	e73a      	b.n	72f8 <__aeabi_ddiv+0x3d0>
    7482:	9302      	str	r3, [sp, #8]
    7484:	e73a      	b.n	72fc <__aeabi_ddiv+0x3d4>
    7486:	2a1f      	cmp	r2, #31
    7488:	dc3c      	bgt.n	7504 <__aeabi_ddiv+0x5dc>
    748a:	2320      	movs	r3, #32
    748c:	1a9b      	subs	r3, r3, r2
    748e:	000c      	movs	r4, r1
    7490:	4658      	mov	r0, fp
    7492:	4099      	lsls	r1, r3
    7494:	4098      	lsls	r0, r3
    7496:	1e4b      	subs	r3, r1, #1
    7498:	4199      	sbcs	r1, r3
    749a:	465b      	mov	r3, fp
    749c:	40d4      	lsrs	r4, r2
    749e:	40d3      	lsrs	r3, r2
    74a0:	4320      	orrs	r0, r4
    74a2:	4308      	orrs	r0, r1
    74a4:	001a      	movs	r2, r3
    74a6:	0743      	lsls	r3, r0, #29
    74a8:	d009      	beq.n	74be <__aeabi_ddiv+0x596>
    74aa:	230f      	movs	r3, #15
    74ac:	4003      	ands	r3, r0
    74ae:	2b04      	cmp	r3, #4
    74b0:	d005      	beq.n	74be <__aeabi_ddiv+0x596>
    74b2:	0001      	movs	r1, r0
    74b4:	1d08      	adds	r0, r1, #4
    74b6:	4288      	cmp	r0, r1
    74b8:	419b      	sbcs	r3, r3
    74ba:	425b      	negs	r3, r3
    74bc:	18d2      	adds	r2, r2, r3
    74be:	0213      	lsls	r3, r2, #8
    74c0:	d53a      	bpl.n	7538 <__aeabi_ddiv+0x610>
    74c2:	2301      	movs	r3, #1
    74c4:	9a02      	ldr	r2, [sp, #8]
    74c6:	2401      	movs	r4, #1
    74c8:	401a      	ands	r2, r3
    74ca:	2300      	movs	r3, #0
    74cc:	4694      	mov	ip, r2
    74ce:	4698      	mov	r8, r3
    74d0:	2200      	movs	r2, #0
    74d2:	e5f7      	b.n	70c4 <__aeabi_ddiv+0x19c>
    74d4:	2102      	movs	r1, #2
    74d6:	4249      	negs	r1, r1
    74d8:	468c      	mov	ip, r1
    74da:	9d03      	ldr	r5, [sp, #12]
    74dc:	44e3      	add	fp, ip
    74de:	46ac      	mov	ip, r5
    74e0:	44e2      	add	sl, ip
    74e2:	45aa      	cmp	sl, r5
    74e4:	41ad      	sbcs	r5, r5
    74e6:	426d      	negs	r5, r5
    74e8:	4445      	add	r5, r8
    74ea:	18ed      	adds	r5, r5, r3
    74ec:	1a2d      	subs	r5, r5, r0
    74ee:	e696      	b.n	721e <__aeabi_ddiv+0x2f6>
    74f0:	1e8a      	subs	r2, r1, #2
    74f2:	9903      	ldr	r1, [sp, #12]
    74f4:	004d      	lsls	r5, r1, #1
    74f6:	428d      	cmp	r5, r1
    74f8:	4189      	sbcs	r1, r1
    74fa:	4249      	negs	r1, r1
    74fc:	4441      	add	r1, r8
    74fe:	1876      	adds	r6, r6, r1
    7500:	9503      	str	r5, [sp, #12]
    7502:	e78f      	b.n	7424 <__aeabi_ddiv+0x4fc>
    7504:	201f      	movs	r0, #31
    7506:	4240      	negs	r0, r0
    7508:	1ac3      	subs	r3, r0, r3
    750a:	4658      	mov	r0, fp
    750c:	40d8      	lsrs	r0, r3
    750e:	0003      	movs	r3, r0
    7510:	2a20      	cmp	r2, #32
    7512:	d028      	beq.n	7566 <__aeabi_ddiv+0x63e>
    7514:	2040      	movs	r0, #64	; 0x40
    7516:	465d      	mov	r5, fp
    7518:	1a82      	subs	r2, r0, r2
    751a:	4095      	lsls	r5, r2
    751c:	4329      	orrs	r1, r5
    751e:	1e4a      	subs	r2, r1, #1
    7520:	4191      	sbcs	r1, r2
    7522:	4319      	orrs	r1, r3
    7524:	2307      	movs	r3, #7
    7526:	2200      	movs	r2, #0
    7528:	400b      	ands	r3, r1
    752a:	d009      	beq.n	7540 <__aeabi_ddiv+0x618>
    752c:	230f      	movs	r3, #15
    752e:	2200      	movs	r2, #0
    7530:	400b      	ands	r3, r1
    7532:	0008      	movs	r0, r1
    7534:	2b04      	cmp	r3, #4
    7536:	d1bd      	bne.n	74b4 <__aeabi_ddiv+0x58c>
    7538:	0001      	movs	r1, r0
    753a:	0753      	lsls	r3, r2, #29
    753c:	0252      	lsls	r2, r2, #9
    753e:	0b12      	lsrs	r2, r2, #12
    7540:	08c9      	lsrs	r1, r1, #3
    7542:	4319      	orrs	r1, r3
    7544:	2301      	movs	r3, #1
    7546:	4688      	mov	r8, r1
    7548:	9902      	ldr	r1, [sp, #8]
    754a:	2400      	movs	r4, #0
    754c:	4019      	ands	r1, r3
    754e:	468c      	mov	ip, r1
    7550:	e5b8      	b.n	70c4 <__aeabi_ddiv+0x19c>
    7552:	4552      	cmp	r2, sl
    7554:	d8be      	bhi.n	74d4 <__aeabi_ddiv+0x5ac>
    7556:	468b      	mov	fp, r1
    7558:	2500      	movs	r5, #0
    755a:	e660      	b.n	721e <__aeabi_ddiv+0x2f6>
    755c:	9d03      	ldr	r5, [sp, #12]
    755e:	429d      	cmp	r5, r3
    7560:	d3c6      	bcc.n	74f0 <__aeabi_ddiv+0x5c8>
    7562:	0011      	movs	r1, r2
    7564:	e762      	b.n	742c <__aeabi_ddiv+0x504>
    7566:	2500      	movs	r5, #0
    7568:	e7d8      	b.n	751c <__aeabi_ddiv+0x5f4>
    756a:	2280      	movs	r2, #128	; 0x80
    756c:	465b      	mov	r3, fp
    756e:	0312      	lsls	r2, r2, #12
    7570:	431a      	orrs	r2, r3
    7572:	9b01      	ldr	r3, [sp, #4]
    7574:	0312      	lsls	r2, r2, #12
    7576:	0b12      	lsrs	r2, r2, #12
    7578:	469c      	mov	ip, r3
    757a:	4688      	mov	r8, r1
    757c:	4c03      	ldr	r4, [pc, #12]	; (758c <__aeabi_ddiv+0x664>)
    757e:	e5a1      	b.n	70c4 <__aeabi_ddiv+0x19c>
    7580:	000003ff 	.word	0x000003ff
    7584:	feffffff 	.word	0xfeffffff
    7588:	000007fe 	.word	0x000007fe
    758c:	000007ff 	.word	0x000007ff

00007590 <__aeabi_dmul>:
    7590:	b5f0      	push	{r4, r5, r6, r7, lr}
    7592:	4657      	mov	r7, sl
    7594:	4645      	mov	r5, r8
    7596:	46de      	mov	lr, fp
    7598:	464e      	mov	r6, r9
    759a:	b5e0      	push	{r5, r6, r7, lr}
    759c:	030c      	lsls	r4, r1, #12
    759e:	4698      	mov	r8, r3
    75a0:	004e      	lsls	r6, r1, #1
    75a2:	0b23      	lsrs	r3, r4, #12
    75a4:	b087      	sub	sp, #28
    75a6:	0007      	movs	r7, r0
    75a8:	4692      	mov	sl, r2
    75aa:	469b      	mov	fp, r3
    75ac:	0d76      	lsrs	r6, r6, #21
    75ae:	0fcd      	lsrs	r5, r1, #31
    75b0:	2e00      	cmp	r6, #0
    75b2:	d06b      	beq.n	768c <__aeabi_dmul+0xfc>
    75b4:	4b6d      	ldr	r3, [pc, #436]	; (776c <__aeabi_dmul+0x1dc>)
    75b6:	429e      	cmp	r6, r3
    75b8:	d035      	beq.n	7626 <__aeabi_dmul+0x96>
    75ba:	2480      	movs	r4, #128	; 0x80
    75bc:	465b      	mov	r3, fp
    75be:	0f42      	lsrs	r2, r0, #29
    75c0:	0424      	lsls	r4, r4, #16
    75c2:	00db      	lsls	r3, r3, #3
    75c4:	4314      	orrs	r4, r2
    75c6:	431c      	orrs	r4, r3
    75c8:	00c3      	lsls	r3, r0, #3
    75ca:	4699      	mov	r9, r3
    75cc:	4b68      	ldr	r3, [pc, #416]	; (7770 <__aeabi_dmul+0x1e0>)
    75ce:	46a3      	mov	fp, r4
    75d0:	469c      	mov	ip, r3
    75d2:	2300      	movs	r3, #0
    75d4:	2700      	movs	r7, #0
    75d6:	4466      	add	r6, ip
    75d8:	9302      	str	r3, [sp, #8]
    75da:	4643      	mov	r3, r8
    75dc:	031c      	lsls	r4, r3, #12
    75de:	005a      	lsls	r2, r3, #1
    75e0:	0fdb      	lsrs	r3, r3, #31
    75e2:	4650      	mov	r0, sl
    75e4:	0b24      	lsrs	r4, r4, #12
    75e6:	0d52      	lsrs	r2, r2, #21
    75e8:	4698      	mov	r8, r3
    75ea:	d100      	bne.n	75ee <__aeabi_dmul+0x5e>
    75ec:	e076      	b.n	76dc <__aeabi_dmul+0x14c>
    75ee:	4b5f      	ldr	r3, [pc, #380]	; (776c <__aeabi_dmul+0x1dc>)
    75f0:	429a      	cmp	r2, r3
    75f2:	d06d      	beq.n	76d0 <__aeabi_dmul+0x140>
    75f4:	2380      	movs	r3, #128	; 0x80
    75f6:	0f41      	lsrs	r1, r0, #29
    75f8:	041b      	lsls	r3, r3, #16
    75fa:	430b      	orrs	r3, r1
    75fc:	495c      	ldr	r1, [pc, #368]	; (7770 <__aeabi_dmul+0x1e0>)
    75fe:	00e4      	lsls	r4, r4, #3
    7600:	468c      	mov	ip, r1
    7602:	431c      	orrs	r4, r3
    7604:	00c3      	lsls	r3, r0, #3
    7606:	2000      	movs	r0, #0
    7608:	4462      	add	r2, ip
    760a:	4641      	mov	r1, r8
    760c:	18b6      	adds	r6, r6, r2
    760e:	4069      	eors	r1, r5
    7610:	1c72      	adds	r2, r6, #1
    7612:	9101      	str	r1, [sp, #4]
    7614:	4694      	mov	ip, r2
    7616:	4307      	orrs	r7, r0
    7618:	2f0f      	cmp	r7, #15
    761a:	d900      	bls.n	761e <__aeabi_dmul+0x8e>
    761c:	e0b0      	b.n	7780 <__aeabi_dmul+0x1f0>
    761e:	4a55      	ldr	r2, [pc, #340]	; (7774 <__aeabi_dmul+0x1e4>)
    7620:	00bf      	lsls	r7, r7, #2
    7622:	59d2      	ldr	r2, [r2, r7]
    7624:	4697      	mov	pc, r2
    7626:	465b      	mov	r3, fp
    7628:	4303      	orrs	r3, r0
    762a:	4699      	mov	r9, r3
    762c:	d000      	beq.n	7630 <__aeabi_dmul+0xa0>
    762e:	e087      	b.n	7740 <__aeabi_dmul+0x1b0>
    7630:	2300      	movs	r3, #0
    7632:	469b      	mov	fp, r3
    7634:	3302      	adds	r3, #2
    7636:	2708      	movs	r7, #8
    7638:	9302      	str	r3, [sp, #8]
    763a:	e7ce      	b.n	75da <__aeabi_dmul+0x4a>
    763c:	4642      	mov	r2, r8
    763e:	9201      	str	r2, [sp, #4]
    7640:	2802      	cmp	r0, #2
    7642:	d067      	beq.n	7714 <__aeabi_dmul+0x184>
    7644:	2803      	cmp	r0, #3
    7646:	d100      	bne.n	764a <__aeabi_dmul+0xba>
    7648:	e20e      	b.n	7a68 <__aeabi_dmul+0x4d8>
    764a:	2801      	cmp	r0, #1
    764c:	d000      	beq.n	7650 <__aeabi_dmul+0xc0>
    764e:	e162      	b.n	7916 <__aeabi_dmul+0x386>
    7650:	2300      	movs	r3, #0
    7652:	2400      	movs	r4, #0
    7654:	2200      	movs	r2, #0
    7656:	4699      	mov	r9, r3
    7658:	9901      	ldr	r1, [sp, #4]
    765a:	4001      	ands	r1, r0
    765c:	b2cd      	uxtb	r5, r1
    765e:	2100      	movs	r1, #0
    7660:	0312      	lsls	r2, r2, #12
    7662:	0d0b      	lsrs	r3, r1, #20
    7664:	0b12      	lsrs	r2, r2, #12
    7666:	051b      	lsls	r3, r3, #20
    7668:	4313      	orrs	r3, r2
    766a:	4a43      	ldr	r2, [pc, #268]	; (7778 <__aeabi_dmul+0x1e8>)
    766c:	0524      	lsls	r4, r4, #20
    766e:	4013      	ands	r3, r2
    7670:	431c      	orrs	r4, r3
    7672:	0064      	lsls	r4, r4, #1
    7674:	07ed      	lsls	r5, r5, #31
    7676:	0864      	lsrs	r4, r4, #1
    7678:	432c      	orrs	r4, r5
    767a:	4648      	mov	r0, r9
    767c:	0021      	movs	r1, r4
    767e:	b007      	add	sp, #28
    7680:	bc3c      	pop	{r2, r3, r4, r5}
    7682:	4690      	mov	r8, r2
    7684:	4699      	mov	r9, r3
    7686:	46a2      	mov	sl, r4
    7688:	46ab      	mov	fp, r5
    768a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    768c:	4303      	orrs	r3, r0
    768e:	4699      	mov	r9, r3
    7690:	d04f      	beq.n	7732 <__aeabi_dmul+0x1a2>
    7692:	465b      	mov	r3, fp
    7694:	2b00      	cmp	r3, #0
    7696:	d100      	bne.n	769a <__aeabi_dmul+0x10a>
    7698:	e189      	b.n	79ae <__aeabi_dmul+0x41e>
    769a:	4658      	mov	r0, fp
    769c:	f000 fd7a 	bl	8194 <__clzsi2>
    76a0:	0003      	movs	r3, r0
    76a2:	3b0b      	subs	r3, #11
    76a4:	2b1c      	cmp	r3, #28
    76a6:	dd00      	ble.n	76aa <__aeabi_dmul+0x11a>
    76a8:	e17a      	b.n	79a0 <__aeabi_dmul+0x410>
    76aa:	221d      	movs	r2, #29
    76ac:	1ad3      	subs	r3, r2, r3
    76ae:	003a      	movs	r2, r7
    76b0:	0001      	movs	r1, r0
    76b2:	465c      	mov	r4, fp
    76b4:	40da      	lsrs	r2, r3
    76b6:	3908      	subs	r1, #8
    76b8:	408c      	lsls	r4, r1
    76ba:	0013      	movs	r3, r2
    76bc:	408f      	lsls	r7, r1
    76be:	4323      	orrs	r3, r4
    76c0:	469b      	mov	fp, r3
    76c2:	46b9      	mov	r9, r7
    76c4:	2300      	movs	r3, #0
    76c6:	4e2d      	ldr	r6, [pc, #180]	; (777c <__aeabi_dmul+0x1ec>)
    76c8:	2700      	movs	r7, #0
    76ca:	1a36      	subs	r6, r6, r0
    76cc:	9302      	str	r3, [sp, #8]
    76ce:	e784      	b.n	75da <__aeabi_dmul+0x4a>
    76d0:	4653      	mov	r3, sl
    76d2:	4323      	orrs	r3, r4
    76d4:	d12a      	bne.n	772c <__aeabi_dmul+0x19c>
    76d6:	2400      	movs	r4, #0
    76d8:	2002      	movs	r0, #2
    76da:	e796      	b.n	760a <__aeabi_dmul+0x7a>
    76dc:	4653      	mov	r3, sl
    76de:	4323      	orrs	r3, r4
    76e0:	d020      	beq.n	7724 <__aeabi_dmul+0x194>
    76e2:	2c00      	cmp	r4, #0
    76e4:	d100      	bne.n	76e8 <__aeabi_dmul+0x158>
    76e6:	e157      	b.n	7998 <__aeabi_dmul+0x408>
    76e8:	0020      	movs	r0, r4
    76ea:	f000 fd53 	bl	8194 <__clzsi2>
    76ee:	0003      	movs	r3, r0
    76f0:	3b0b      	subs	r3, #11
    76f2:	2b1c      	cmp	r3, #28
    76f4:	dd00      	ble.n	76f8 <__aeabi_dmul+0x168>
    76f6:	e149      	b.n	798c <__aeabi_dmul+0x3fc>
    76f8:	211d      	movs	r1, #29
    76fa:	1acb      	subs	r3, r1, r3
    76fc:	4651      	mov	r1, sl
    76fe:	0002      	movs	r2, r0
    7700:	40d9      	lsrs	r1, r3
    7702:	4653      	mov	r3, sl
    7704:	3a08      	subs	r2, #8
    7706:	4094      	lsls	r4, r2
    7708:	4093      	lsls	r3, r2
    770a:	430c      	orrs	r4, r1
    770c:	4a1b      	ldr	r2, [pc, #108]	; (777c <__aeabi_dmul+0x1ec>)
    770e:	1a12      	subs	r2, r2, r0
    7710:	2000      	movs	r0, #0
    7712:	e77a      	b.n	760a <__aeabi_dmul+0x7a>
    7714:	2501      	movs	r5, #1
    7716:	9b01      	ldr	r3, [sp, #4]
    7718:	4c14      	ldr	r4, [pc, #80]	; (776c <__aeabi_dmul+0x1dc>)
    771a:	401d      	ands	r5, r3
    771c:	2300      	movs	r3, #0
    771e:	2200      	movs	r2, #0
    7720:	4699      	mov	r9, r3
    7722:	e79c      	b.n	765e <__aeabi_dmul+0xce>
    7724:	2400      	movs	r4, #0
    7726:	2200      	movs	r2, #0
    7728:	2001      	movs	r0, #1
    772a:	e76e      	b.n	760a <__aeabi_dmul+0x7a>
    772c:	4653      	mov	r3, sl
    772e:	2003      	movs	r0, #3
    7730:	e76b      	b.n	760a <__aeabi_dmul+0x7a>
    7732:	2300      	movs	r3, #0
    7734:	469b      	mov	fp, r3
    7736:	3301      	adds	r3, #1
    7738:	2704      	movs	r7, #4
    773a:	2600      	movs	r6, #0
    773c:	9302      	str	r3, [sp, #8]
    773e:	e74c      	b.n	75da <__aeabi_dmul+0x4a>
    7740:	2303      	movs	r3, #3
    7742:	4681      	mov	r9, r0
    7744:	270c      	movs	r7, #12
    7746:	9302      	str	r3, [sp, #8]
    7748:	e747      	b.n	75da <__aeabi_dmul+0x4a>
    774a:	2280      	movs	r2, #128	; 0x80
    774c:	2300      	movs	r3, #0
    774e:	2500      	movs	r5, #0
    7750:	0312      	lsls	r2, r2, #12
    7752:	4699      	mov	r9, r3
    7754:	4c05      	ldr	r4, [pc, #20]	; (776c <__aeabi_dmul+0x1dc>)
    7756:	e782      	b.n	765e <__aeabi_dmul+0xce>
    7758:	465c      	mov	r4, fp
    775a:	464b      	mov	r3, r9
    775c:	9802      	ldr	r0, [sp, #8]
    775e:	e76f      	b.n	7640 <__aeabi_dmul+0xb0>
    7760:	465c      	mov	r4, fp
    7762:	464b      	mov	r3, r9
    7764:	9501      	str	r5, [sp, #4]
    7766:	9802      	ldr	r0, [sp, #8]
    7768:	e76a      	b.n	7640 <__aeabi_dmul+0xb0>
    776a:	46c0      	nop			; (mov r8, r8)
    776c:	000007ff 	.word	0x000007ff
    7770:	fffffc01 	.word	0xfffffc01
    7774:	00009b2c 	.word	0x00009b2c
    7778:	800fffff 	.word	0x800fffff
    777c:	fffffc0d 	.word	0xfffffc0d
    7780:	464a      	mov	r2, r9
    7782:	4649      	mov	r1, r9
    7784:	0c17      	lsrs	r7, r2, #16
    7786:	0c1a      	lsrs	r2, r3, #16
    7788:	041b      	lsls	r3, r3, #16
    778a:	0c1b      	lsrs	r3, r3, #16
    778c:	0408      	lsls	r0, r1, #16
    778e:	0019      	movs	r1, r3
    7790:	0c00      	lsrs	r0, r0, #16
    7792:	4341      	muls	r1, r0
    7794:	0015      	movs	r5, r2
    7796:	4688      	mov	r8, r1
    7798:	0019      	movs	r1, r3
    779a:	437d      	muls	r5, r7
    779c:	4379      	muls	r1, r7
    779e:	9503      	str	r5, [sp, #12]
    77a0:	4689      	mov	r9, r1
    77a2:	0029      	movs	r1, r5
    77a4:	0015      	movs	r5, r2
    77a6:	4345      	muls	r5, r0
    77a8:	444d      	add	r5, r9
    77aa:	9502      	str	r5, [sp, #8]
    77ac:	4645      	mov	r5, r8
    77ae:	0c2d      	lsrs	r5, r5, #16
    77b0:	46aa      	mov	sl, r5
    77b2:	9d02      	ldr	r5, [sp, #8]
    77b4:	4455      	add	r5, sl
    77b6:	45a9      	cmp	r9, r5
    77b8:	d906      	bls.n	77c8 <__aeabi_dmul+0x238>
    77ba:	468a      	mov	sl, r1
    77bc:	2180      	movs	r1, #128	; 0x80
    77be:	0249      	lsls	r1, r1, #9
    77c0:	4689      	mov	r9, r1
    77c2:	44ca      	add	sl, r9
    77c4:	4651      	mov	r1, sl
    77c6:	9103      	str	r1, [sp, #12]
    77c8:	0c29      	lsrs	r1, r5, #16
    77ca:	9104      	str	r1, [sp, #16]
    77cc:	4641      	mov	r1, r8
    77ce:	0409      	lsls	r1, r1, #16
    77d0:	042d      	lsls	r5, r5, #16
    77d2:	0c09      	lsrs	r1, r1, #16
    77d4:	4688      	mov	r8, r1
    77d6:	0029      	movs	r1, r5
    77d8:	0c25      	lsrs	r5, r4, #16
    77da:	0424      	lsls	r4, r4, #16
    77dc:	4441      	add	r1, r8
    77de:	0c24      	lsrs	r4, r4, #16
    77e0:	9105      	str	r1, [sp, #20]
    77e2:	0021      	movs	r1, r4
    77e4:	4341      	muls	r1, r0
    77e6:	4688      	mov	r8, r1
    77e8:	0021      	movs	r1, r4
    77ea:	4379      	muls	r1, r7
    77ec:	468a      	mov	sl, r1
    77ee:	4368      	muls	r0, r5
    77f0:	4641      	mov	r1, r8
    77f2:	4450      	add	r0, sl
    77f4:	4681      	mov	r9, r0
    77f6:	0c08      	lsrs	r0, r1, #16
    77f8:	4448      	add	r0, r9
    77fa:	436f      	muls	r7, r5
    77fc:	4582      	cmp	sl, r0
    77fe:	d903      	bls.n	7808 <__aeabi_dmul+0x278>
    7800:	2180      	movs	r1, #128	; 0x80
    7802:	0249      	lsls	r1, r1, #9
    7804:	4689      	mov	r9, r1
    7806:	444f      	add	r7, r9
    7808:	0c01      	lsrs	r1, r0, #16
    780a:	4689      	mov	r9, r1
    780c:	0039      	movs	r1, r7
    780e:	4449      	add	r1, r9
    7810:	9102      	str	r1, [sp, #8]
    7812:	4641      	mov	r1, r8
    7814:	040f      	lsls	r7, r1, #16
    7816:	9904      	ldr	r1, [sp, #16]
    7818:	0c3f      	lsrs	r7, r7, #16
    781a:	4688      	mov	r8, r1
    781c:	0400      	lsls	r0, r0, #16
    781e:	19c0      	adds	r0, r0, r7
    7820:	4480      	add	r8, r0
    7822:	4641      	mov	r1, r8
    7824:	9104      	str	r1, [sp, #16]
    7826:	4659      	mov	r1, fp
    7828:	0c0f      	lsrs	r7, r1, #16
    782a:	0409      	lsls	r1, r1, #16
    782c:	0c09      	lsrs	r1, r1, #16
    782e:	4688      	mov	r8, r1
    7830:	4359      	muls	r1, r3
    7832:	468a      	mov	sl, r1
    7834:	0039      	movs	r1, r7
    7836:	4351      	muls	r1, r2
    7838:	4689      	mov	r9, r1
    783a:	4641      	mov	r1, r8
    783c:	434a      	muls	r2, r1
    783e:	4651      	mov	r1, sl
    7840:	0c09      	lsrs	r1, r1, #16
    7842:	468b      	mov	fp, r1
    7844:	437b      	muls	r3, r7
    7846:	18d2      	adds	r2, r2, r3
    7848:	445a      	add	r2, fp
    784a:	4293      	cmp	r3, r2
    784c:	d903      	bls.n	7856 <__aeabi_dmul+0x2c6>
    784e:	2380      	movs	r3, #128	; 0x80
    7850:	025b      	lsls	r3, r3, #9
    7852:	469b      	mov	fp, r3
    7854:	44d9      	add	r9, fp
    7856:	4651      	mov	r1, sl
    7858:	0409      	lsls	r1, r1, #16
    785a:	0c09      	lsrs	r1, r1, #16
    785c:	468a      	mov	sl, r1
    785e:	4641      	mov	r1, r8
    7860:	4361      	muls	r1, r4
    7862:	437c      	muls	r4, r7
    7864:	0c13      	lsrs	r3, r2, #16
    7866:	0412      	lsls	r2, r2, #16
    7868:	444b      	add	r3, r9
    786a:	4452      	add	r2, sl
    786c:	46a1      	mov	r9, r4
    786e:	468a      	mov	sl, r1
    7870:	003c      	movs	r4, r7
    7872:	4641      	mov	r1, r8
    7874:	436c      	muls	r4, r5
    7876:	434d      	muls	r5, r1
    7878:	4651      	mov	r1, sl
    787a:	444d      	add	r5, r9
    787c:	0c0f      	lsrs	r7, r1, #16
    787e:	197d      	adds	r5, r7, r5
    7880:	45a9      	cmp	r9, r5
    7882:	d903      	bls.n	788c <__aeabi_dmul+0x2fc>
    7884:	2180      	movs	r1, #128	; 0x80
    7886:	0249      	lsls	r1, r1, #9
    7888:	4688      	mov	r8, r1
    788a:	4444      	add	r4, r8
    788c:	9f04      	ldr	r7, [sp, #16]
    788e:	9903      	ldr	r1, [sp, #12]
    7890:	46b8      	mov	r8, r7
    7892:	4441      	add	r1, r8
    7894:	468b      	mov	fp, r1
    7896:	4583      	cmp	fp, r0
    7898:	4180      	sbcs	r0, r0
    789a:	4241      	negs	r1, r0
    789c:	4688      	mov	r8, r1
    789e:	4651      	mov	r1, sl
    78a0:	0408      	lsls	r0, r1, #16
    78a2:	042f      	lsls	r7, r5, #16
    78a4:	0c00      	lsrs	r0, r0, #16
    78a6:	183f      	adds	r7, r7, r0
    78a8:	4658      	mov	r0, fp
    78aa:	9902      	ldr	r1, [sp, #8]
    78ac:	1810      	adds	r0, r2, r0
    78ae:	4689      	mov	r9, r1
    78b0:	4290      	cmp	r0, r2
    78b2:	4192      	sbcs	r2, r2
    78b4:	444f      	add	r7, r9
    78b6:	46ba      	mov	sl, r7
    78b8:	4252      	negs	r2, r2
    78ba:	4699      	mov	r9, r3
    78bc:	4693      	mov	fp, r2
    78be:	44c2      	add	sl, r8
    78c0:	44d1      	add	r9, sl
    78c2:	44cb      	add	fp, r9
    78c4:	428f      	cmp	r7, r1
    78c6:	41bf      	sbcs	r7, r7
    78c8:	45c2      	cmp	sl, r8
    78ca:	4189      	sbcs	r1, r1
    78cc:	4599      	cmp	r9, r3
    78ce:	419b      	sbcs	r3, r3
    78d0:	4593      	cmp	fp, r2
    78d2:	4192      	sbcs	r2, r2
    78d4:	427f      	negs	r7, r7
    78d6:	4249      	negs	r1, r1
    78d8:	0c2d      	lsrs	r5, r5, #16
    78da:	4252      	negs	r2, r2
    78dc:	430f      	orrs	r7, r1
    78de:	425b      	negs	r3, r3
    78e0:	4313      	orrs	r3, r2
    78e2:	197f      	adds	r7, r7, r5
    78e4:	18ff      	adds	r7, r7, r3
    78e6:	465b      	mov	r3, fp
    78e8:	193c      	adds	r4, r7, r4
    78ea:	0ddb      	lsrs	r3, r3, #23
    78ec:	9a05      	ldr	r2, [sp, #20]
    78ee:	0264      	lsls	r4, r4, #9
    78f0:	431c      	orrs	r4, r3
    78f2:	0243      	lsls	r3, r0, #9
    78f4:	4313      	orrs	r3, r2
    78f6:	1e5d      	subs	r5, r3, #1
    78f8:	41ab      	sbcs	r3, r5
    78fa:	465a      	mov	r2, fp
    78fc:	0dc0      	lsrs	r0, r0, #23
    78fe:	4303      	orrs	r3, r0
    7900:	0252      	lsls	r2, r2, #9
    7902:	4313      	orrs	r3, r2
    7904:	01e2      	lsls	r2, r4, #7
    7906:	d556      	bpl.n	79b6 <__aeabi_dmul+0x426>
    7908:	2001      	movs	r0, #1
    790a:	085a      	lsrs	r2, r3, #1
    790c:	4003      	ands	r3, r0
    790e:	4313      	orrs	r3, r2
    7910:	07e2      	lsls	r2, r4, #31
    7912:	4313      	orrs	r3, r2
    7914:	0864      	lsrs	r4, r4, #1
    7916:	485a      	ldr	r0, [pc, #360]	; (7a80 <__aeabi_dmul+0x4f0>)
    7918:	4460      	add	r0, ip
    791a:	2800      	cmp	r0, #0
    791c:	dd4d      	ble.n	79ba <__aeabi_dmul+0x42a>
    791e:	075a      	lsls	r2, r3, #29
    7920:	d009      	beq.n	7936 <__aeabi_dmul+0x3a6>
    7922:	220f      	movs	r2, #15
    7924:	401a      	ands	r2, r3
    7926:	2a04      	cmp	r2, #4
    7928:	d005      	beq.n	7936 <__aeabi_dmul+0x3a6>
    792a:	1d1a      	adds	r2, r3, #4
    792c:	429a      	cmp	r2, r3
    792e:	419b      	sbcs	r3, r3
    7930:	425b      	negs	r3, r3
    7932:	18e4      	adds	r4, r4, r3
    7934:	0013      	movs	r3, r2
    7936:	01e2      	lsls	r2, r4, #7
    7938:	d504      	bpl.n	7944 <__aeabi_dmul+0x3b4>
    793a:	2080      	movs	r0, #128	; 0x80
    793c:	4a51      	ldr	r2, [pc, #324]	; (7a84 <__aeabi_dmul+0x4f4>)
    793e:	00c0      	lsls	r0, r0, #3
    7940:	4014      	ands	r4, r2
    7942:	4460      	add	r0, ip
    7944:	4a50      	ldr	r2, [pc, #320]	; (7a88 <__aeabi_dmul+0x4f8>)
    7946:	4290      	cmp	r0, r2
    7948:	dd00      	ble.n	794c <__aeabi_dmul+0x3bc>
    794a:	e6e3      	b.n	7714 <__aeabi_dmul+0x184>
    794c:	2501      	movs	r5, #1
    794e:	08db      	lsrs	r3, r3, #3
    7950:	0762      	lsls	r2, r4, #29
    7952:	431a      	orrs	r2, r3
    7954:	0264      	lsls	r4, r4, #9
    7956:	9b01      	ldr	r3, [sp, #4]
    7958:	4691      	mov	r9, r2
    795a:	0b22      	lsrs	r2, r4, #12
    795c:	0544      	lsls	r4, r0, #21
    795e:	0d64      	lsrs	r4, r4, #21
    7960:	401d      	ands	r5, r3
    7962:	e67c      	b.n	765e <__aeabi_dmul+0xce>
    7964:	2280      	movs	r2, #128	; 0x80
    7966:	4659      	mov	r1, fp
    7968:	0312      	lsls	r2, r2, #12
    796a:	4211      	tst	r1, r2
    796c:	d008      	beq.n	7980 <__aeabi_dmul+0x3f0>
    796e:	4214      	tst	r4, r2
    7970:	d106      	bne.n	7980 <__aeabi_dmul+0x3f0>
    7972:	4322      	orrs	r2, r4
    7974:	0312      	lsls	r2, r2, #12
    7976:	0b12      	lsrs	r2, r2, #12
    7978:	4645      	mov	r5, r8
    797a:	4699      	mov	r9, r3
    797c:	4c43      	ldr	r4, [pc, #268]	; (7a8c <__aeabi_dmul+0x4fc>)
    797e:	e66e      	b.n	765e <__aeabi_dmul+0xce>
    7980:	465b      	mov	r3, fp
    7982:	431a      	orrs	r2, r3
    7984:	0312      	lsls	r2, r2, #12
    7986:	0b12      	lsrs	r2, r2, #12
    7988:	4c40      	ldr	r4, [pc, #256]	; (7a8c <__aeabi_dmul+0x4fc>)
    798a:	e668      	b.n	765e <__aeabi_dmul+0xce>
    798c:	0003      	movs	r3, r0
    798e:	4654      	mov	r4, sl
    7990:	3b28      	subs	r3, #40	; 0x28
    7992:	409c      	lsls	r4, r3
    7994:	2300      	movs	r3, #0
    7996:	e6b9      	b.n	770c <__aeabi_dmul+0x17c>
    7998:	f000 fbfc 	bl	8194 <__clzsi2>
    799c:	3020      	adds	r0, #32
    799e:	e6a6      	b.n	76ee <__aeabi_dmul+0x15e>
    79a0:	0003      	movs	r3, r0
    79a2:	3b28      	subs	r3, #40	; 0x28
    79a4:	409f      	lsls	r7, r3
    79a6:	2300      	movs	r3, #0
    79a8:	46bb      	mov	fp, r7
    79aa:	4699      	mov	r9, r3
    79ac:	e68a      	b.n	76c4 <__aeabi_dmul+0x134>
    79ae:	f000 fbf1 	bl	8194 <__clzsi2>
    79b2:	3020      	adds	r0, #32
    79b4:	e674      	b.n	76a0 <__aeabi_dmul+0x110>
    79b6:	46b4      	mov	ip, r6
    79b8:	e7ad      	b.n	7916 <__aeabi_dmul+0x386>
    79ba:	2501      	movs	r5, #1
    79bc:	1a2a      	subs	r2, r5, r0
    79be:	2a38      	cmp	r2, #56	; 0x38
    79c0:	dd06      	ble.n	79d0 <__aeabi_dmul+0x440>
    79c2:	9b01      	ldr	r3, [sp, #4]
    79c4:	2400      	movs	r4, #0
    79c6:	401d      	ands	r5, r3
    79c8:	2300      	movs	r3, #0
    79ca:	2200      	movs	r2, #0
    79cc:	4699      	mov	r9, r3
    79ce:	e646      	b.n	765e <__aeabi_dmul+0xce>
    79d0:	2a1f      	cmp	r2, #31
    79d2:	dc21      	bgt.n	7a18 <__aeabi_dmul+0x488>
    79d4:	2520      	movs	r5, #32
    79d6:	0020      	movs	r0, r4
    79d8:	1aad      	subs	r5, r5, r2
    79da:	001e      	movs	r6, r3
    79dc:	40ab      	lsls	r3, r5
    79de:	40a8      	lsls	r0, r5
    79e0:	40d6      	lsrs	r6, r2
    79e2:	1e5d      	subs	r5, r3, #1
    79e4:	41ab      	sbcs	r3, r5
    79e6:	4330      	orrs	r0, r6
    79e8:	4318      	orrs	r0, r3
    79ea:	40d4      	lsrs	r4, r2
    79ec:	0743      	lsls	r3, r0, #29
    79ee:	d009      	beq.n	7a04 <__aeabi_dmul+0x474>
    79f0:	230f      	movs	r3, #15
    79f2:	4003      	ands	r3, r0
    79f4:	2b04      	cmp	r3, #4
    79f6:	d005      	beq.n	7a04 <__aeabi_dmul+0x474>
    79f8:	0003      	movs	r3, r0
    79fa:	1d18      	adds	r0, r3, #4
    79fc:	4298      	cmp	r0, r3
    79fe:	419b      	sbcs	r3, r3
    7a00:	425b      	negs	r3, r3
    7a02:	18e4      	adds	r4, r4, r3
    7a04:	0223      	lsls	r3, r4, #8
    7a06:	d521      	bpl.n	7a4c <__aeabi_dmul+0x4bc>
    7a08:	2501      	movs	r5, #1
    7a0a:	9b01      	ldr	r3, [sp, #4]
    7a0c:	2401      	movs	r4, #1
    7a0e:	401d      	ands	r5, r3
    7a10:	2300      	movs	r3, #0
    7a12:	2200      	movs	r2, #0
    7a14:	4699      	mov	r9, r3
    7a16:	e622      	b.n	765e <__aeabi_dmul+0xce>
    7a18:	251f      	movs	r5, #31
    7a1a:	0021      	movs	r1, r4
    7a1c:	426d      	negs	r5, r5
    7a1e:	1a28      	subs	r0, r5, r0
    7a20:	40c1      	lsrs	r1, r0
    7a22:	0008      	movs	r0, r1
    7a24:	2a20      	cmp	r2, #32
    7a26:	d01d      	beq.n	7a64 <__aeabi_dmul+0x4d4>
    7a28:	355f      	adds	r5, #95	; 0x5f
    7a2a:	1aaa      	subs	r2, r5, r2
    7a2c:	4094      	lsls	r4, r2
    7a2e:	4323      	orrs	r3, r4
    7a30:	1e5c      	subs	r4, r3, #1
    7a32:	41a3      	sbcs	r3, r4
    7a34:	2507      	movs	r5, #7
    7a36:	4303      	orrs	r3, r0
    7a38:	401d      	ands	r5, r3
    7a3a:	2200      	movs	r2, #0
    7a3c:	2d00      	cmp	r5, #0
    7a3e:	d009      	beq.n	7a54 <__aeabi_dmul+0x4c4>
    7a40:	220f      	movs	r2, #15
    7a42:	2400      	movs	r4, #0
    7a44:	401a      	ands	r2, r3
    7a46:	0018      	movs	r0, r3
    7a48:	2a04      	cmp	r2, #4
    7a4a:	d1d6      	bne.n	79fa <__aeabi_dmul+0x46a>
    7a4c:	0003      	movs	r3, r0
    7a4e:	0765      	lsls	r5, r4, #29
    7a50:	0264      	lsls	r4, r4, #9
    7a52:	0b22      	lsrs	r2, r4, #12
    7a54:	08db      	lsrs	r3, r3, #3
    7a56:	432b      	orrs	r3, r5
    7a58:	2501      	movs	r5, #1
    7a5a:	4699      	mov	r9, r3
    7a5c:	9b01      	ldr	r3, [sp, #4]
    7a5e:	2400      	movs	r4, #0
    7a60:	401d      	ands	r5, r3
    7a62:	e5fc      	b.n	765e <__aeabi_dmul+0xce>
    7a64:	2400      	movs	r4, #0
    7a66:	e7e2      	b.n	7a2e <__aeabi_dmul+0x49e>
    7a68:	2280      	movs	r2, #128	; 0x80
    7a6a:	2501      	movs	r5, #1
    7a6c:	0312      	lsls	r2, r2, #12
    7a6e:	4322      	orrs	r2, r4
    7a70:	9901      	ldr	r1, [sp, #4]
    7a72:	0312      	lsls	r2, r2, #12
    7a74:	0b12      	lsrs	r2, r2, #12
    7a76:	400d      	ands	r5, r1
    7a78:	4699      	mov	r9, r3
    7a7a:	4c04      	ldr	r4, [pc, #16]	; (7a8c <__aeabi_dmul+0x4fc>)
    7a7c:	e5ef      	b.n	765e <__aeabi_dmul+0xce>
    7a7e:	46c0      	nop			; (mov r8, r8)
    7a80:	000003ff 	.word	0x000003ff
    7a84:	feffffff 	.word	0xfeffffff
    7a88:	000007fe 	.word	0x000007fe
    7a8c:	000007ff 	.word	0x000007ff

00007a90 <__aeabi_dsub>:
    7a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a92:	4646      	mov	r6, r8
    7a94:	46d6      	mov	lr, sl
    7a96:	464f      	mov	r7, r9
    7a98:	030c      	lsls	r4, r1, #12
    7a9a:	b5c0      	push	{r6, r7, lr}
    7a9c:	0fcd      	lsrs	r5, r1, #31
    7a9e:	004e      	lsls	r6, r1, #1
    7aa0:	0a61      	lsrs	r1, r4, #9
    7aa2:	0f44      	lsrs	r4, r0, #29
    7aa4:	430c      	orrs	r4, r1
    7aa6:	00c1      	lsls	r1, r0, #3
    7aa8:	0058      	lsls	r0, r3, #1
    7aaa:	0d40      	lsrs	r0, r0, #21
    7aac:	4684      	mov	ip, r0
    7aae:	468a      	mov	sl, r1
    7ab0:	000f      	movs	r7, r1
    7ab2:	0319      	lsls	r1, r3, #12
    7ab4:	0f50      	lsrs	r0, r2, #29
    7ab6:	0a49      	lsrs	r1, r1, #9
    7ab8:	4301      	orrs	r1, r0
    7aba:	48c6      	ldr	r0, [pc, #792]	; (7dd4 <__aeabi_dsub+0x344>)
    7abc:	0d76      	lsrs	r6, r6, #21
    7abe:	46a8      	mov	r8, r5
    7ac0:	0fdb      	lsrs	r3, r3, #31
    7ac2:	00d2      	lsls	r2, r2, #3
    7ac4:	4584      	cmp	ip, r0
    7ac6:	d100      	bne.n	7aca <__aeabi_dsub+0x3a>
    7ac8:	e0d8      	b.n	7c7c <__aeabi_dsub+0x1ec>
    7aca:	2001      	movs	r0, #1
    7acc:	4043      	eors	r3, r0
    7ace:	42ab      	cmp	r3, r5
    7ad0:	d100      	bne.n	7ad4 <__aeabi_dsub+0x44>
    7ad2:	e0a6      	b.n	7c22 <__aeabi_dsub+0x192>
    7ad4:	4660      	mov	r0, ip
    7ad6:	1a35      	subs	r5, r6, r0
    7ad8:	2d00      	cmp	r5, #0
    7ada:	dc00      	bgt.n	7ade <__aeabi_dsub+0x4e>
    7adc:	e105      	b.n	7cea <__aeabi_dsub+0x25a>
    7ade:	2800      	cmp	r0, #0
    7ae0:	d110      	bne.n	7b04 <__aeabi_dsub+0x74>
    7ae2:	000b      	movs	r3, r1
    7ae4:	4313      	orrs	r3, r2
    7ae6:	d100      	bne.n	7aea <__aeabi_dsub+0x5a>
    7ae8:	e0d7      	b.n	7c9a <__aeabi_dsub+0x20a>
    7aea:	1e6b      	subs	r3, r5, #1
    7aec:	2b00      	cmp	r3, #0
    7aee:	d000      	beq.n	7af2 <__aeabi_dsub+0x62>
    7af0:	e14b      	b.n	7d8a <__aeabi_dsub+0x2fa>
    7af2:	4653      	mov	r3, sl
    7af4:	1a9f      	subs	r7, r3, r2
    7af6:	45ba      	cmp	sl, r7
    7af8:	4180      	sbcs	r0, r0
    7afa:	1a64      	subs	r4, r4, r1
    7afc:	4240      	negs	r0, r0
    7afe:	1a24      	subs	r4, r4, r0
    7b00:	2601      	movs	r6, #1
    7b02:	e01e      	b.n	7b42 <__aeabi_dsub+0xb2>
    7b04:	4bb3      	ldr	r3, [pc, #716]	; (7dd4 <__aeabi_dsub+0x344>)
    7b06:	429e      	cmp	r6, r3
    7b08:	d048      	beq.n	7b9c <__aeabi_dsub+0x10c>
    7b0a:	2380      	movs	r3, #128	; 0x80
    7b0c:	041b      	lsls	r3, r3, #16
    7b0e:	4319      	orrs	r1, r3
    7b10:	2d38      	cmp	r5, #56	; 0x38
    7b12:	dd00      	ble.n	7b16 <__aeabi_dsub+0x86>
    7b14:	e119      	b.n	7d4a <__aeabi_dsub+0x2ba>
    7b16:	2d1f      	cmp	r5, #31
    7b18:	dd00      	ble.n	7b1c <__aeabi_dsub+0x8c>
    7b1a:	e14c      	b.n	7db6 <__aeabi_dsub+0x326>
    7b1c:	2320      	movs	r3, #32
    7b1e:	000f      	movs	r7, r1
    7b20:	1b5b      	subs	r3, r3, r5
    7b22:	0010      	movs	r0, r2
    7b24:	409a      	lsls	r2, r3
    7b26:	409f      	lsls	r7, r3
    7b28:	40e8      	lsrs	r0, r5
    7b2a:	1e53      	subs	r3, r2, #1
    7b2c:	419a      	sbcs	r2, r3
    7b2e:	40e9      	lsrs	r1, r5
    7b30:	4307      	orrs	r7, r0
    7b32:	4317      	orrs	r7, r2
    7b34:	4653      	mov	r3, sl
    7b36:	1bdf      	subs	r7, r3, r7
    7b38:	1a61      	subs	r1, r4, r1
    7b3a:	45ba      	cmp	sl, r7
    7b3c:	41a4      	sbcs	r4, r4
    7b3e:	4264      	negs	r4, r4
    7b40:	1b0c      	subs	r4, r1, r4
    7b42:	0223      	lsls	r3, r4, #8
    7b44:	d400      	bmi.n	7b48 <__aeabi_dsub+0xb8>
    7b46:	e0c5      	b.n	7cd4 <__aeabi_dsub+0x244>
    7b48:	0264      	lsls	r4, r4, #9
    7b4a:	0a65      	lsrs	r5, r4, #9
    7b4c:	2d00      	cmp	r5, #0
    7b4e:	d100      	bne.n	7b52 <__aeabi_dsub+0xc2>
    7b50:	e0f6      	b.n	7d40 <__aeabi_dsub+0x2b0>
    7b52:	0028      	movs	r0, r5
    7b54:	f000 fb1e 	bl	8194 <__clzsi2>
    7b58:	0003      	movs	r3, r0
    7b5a:	3b08      	subs	r3, #8
    7b5c:	2b1f      	cmp	r3, #31
    7b5e:	dd00      	ble.n	7b62 <__aeabi_dsub+0xd2>
    7b60:	e0e9      	b.n	7d36 <__aeabi_dsub+0x2a6>
    7b62:	2220      	movs	r2, #32
    7b64:	003c      	movs	r4, r7
    7b66:	1ad2      	subs	r2, r2, r3
    7b68:	409d      	lsls	r5, r3
    7b6a:	40d4      	lsrs	r4, r2
    7b6c:	409f      	lsls	r7, r3
    7b6e:	4325      	orrs	r5, r4
    7b70:	429e      	cmp	r6, r3
    7b72:	dd00      	ble.n	7b76 <__aeabi_dsub+0xe6>
    7b74:	e0db      	b.n	7d2e <__aeabi_dsub+0x29e>
    7b76:	1b9e      	subs	r6, r3, r6
    7b78:	1c73      	adds	r3, r6, #1
    7b7a:	2b1f      	cmp	r3, #31
    7b7c:	dd00      	ble.n	7b80 <__aeabi_dsub+0xf0>
    7b7e:	e10a      	b.n	7d96 <__aeabi_dsub+0x306>
    7b80:	2220      	movs	r2, #32
    7b82:	0038      	movs	r0, r7
    7b84:	1ad2      	subs	r2, r2, r3
    7b86:	0029      	movs	r1, r5
    7b88:	4097      	lsls	r7, r2
    7b8a:	002c      	movs	r4, r5
    7b8c:	4091      	lsls	r1, r2
    7b8e:	40d8      	lsrs	r0, r3
    7b90:	1e7a      	subs	r2, r7, #1
    7b92:	4197      	sbcs	r7, r2
    7b94:	40dc      	lsrs	r4, r3
    7b96:	2600      	movs	r6, #0
    7b98:	4301      	orrs	r1, r0
    7b9a:	430f      	orrs	r7, r1
    7b9c:	077b      	lsls	r3, r7, #29
    7b9e:	d009      	beq.n	7bb4 <__aeabi_dsub+0x124>
    7ba0:	230f      	movs	r3, #15
    7ba2:	403b      	ands	r3, r7
    7ba4:	2b04      	cmp	r3, #4
    7ba6:	d005      	beq.n	7bb4 <__aeabi_dsub+0x124>
    7ba8:	1d3b      	adds	r3, r7, #4
    7baa:	42bb      	cmp	r3, r7
    7bac:	41bf      	sbcs	r7, r7
    7bae:	427f      	negs	r7, r7
    7bb0:	19e4      	adds	r4, r4, r7
    7bb2:	001f      	movs	r7, r3
    7bb4:	0223      	lsls	r3, r4, #8
    7bb6:	d525      	bpl.n	7c04 <__aeabi_dsub+0x174>
    7bb8:	4b86      	ldr	r3, [pc, #536]	; (7dd4 <__aeabi_dsub+0x344>)
    7bba:	3601      	adds	r6, #1
    7bbc:	429e      	cmp	r6, r3
    7bbe:	d100      	bne.n	7bc2 <__aeabi_dsub+0x132>
    7bc0:	e0af      	b.n	7d22 <__aeabi_dsub+0x292>
    7bc2:	4b85      	ldr	r3, [pc, #532]	; (7dd8 <__aeabi_dsub+0x348>)
    7bc4:	2501      	movs	r5, #1
    7bc6:	401c      	ands	r4, r3
    7bc8:	4643      	mov	r3, r8
    7bca:	0762      	lsls	r2, r4, #29
    7bcc:	08ff      	lsrs	r7, r7, #3
    7bce:	0264      	lsls	r4, r4, #9
    7bd0:	0576      	lsls	r6, r6, #21
    7bd2:	4317      	orrs	r7, r2
    7bd4:	0b24      	lsrs	r4, r4, #12
    7bd6:	0d76      	lsrs	r6, r6, #21
    7bd8:	401d      	ands	r5, r3
    7bda:	2100      	movs	r1, #0
    7bdc:	0324      	lsls	r4, r4, #12
    7bde:	0b23      	lsrs	r3, r4, #12
    7be0:	0d0c      	lsrs	r4, r1, #20
    7be2:	4a7e      	ldr	r2, [pc, #504]	; (7ddc <__aeabi_dsub+0x34c>)
    7be4:	0524      	lsls	r4, r4, #20
    7be6:	431c      	orrs	r4, r3
    7be8:	4014      	ands	r4, r2
    7bea:	0533      	lsls	r3, r6, #20
    7bec:	4323      	orrs	r3, r4
    7bee:	005b      	lsls	r3, r3, #1
    7bf0:	07ed      	lsls	r5, r5, #31
    7bf2:	085b      	lsrs	r3, r3, #1
    7bf4:	432b      	orrs	r3, r5
    7bf6:	0038      	movs	r0, r7
    7bf8:	0019      	movs	r1, r3
    7bfa:	bc1c      	pop	{r2, r3, r4}
    7bfc:	4690      	mov	r8, r2
    7bfe:	4699      	mov	r9, r3
    7c00:	46a2      	mov	sl, r4
    7c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c04:	2501      	movs	r5, #1
    7c06:	4643      	mov	r3, r8
    7c08:	0762      	lsls	r2, r4, #29
    7c0a:	08ff      	lsrs	r7, r7, #3
    7c0c:	4317      	orrs	r7, r2
    7c0e:	08e4      	lsrs	r4, r4, #3
    7c10:	401d      	ands	r5, r3
    7c12:	4b70      	ldr	r3, [pc, #448]	; (7dd4 <__aeabi_dsub+0x344>)
    7c14:	429e      	cmp	r6, r3
    7c16:	d036      	beq.n	7c86 <__aeabi_dsub+0x1f6>
    7c18:	0324      	lsls	r4, r4, #12
    7c1a:	0576      	lsls	r6, r6, #21
    7c1c:	0b24      	lsrs	r4, r4, #12
    7c1e:	0d76      	lsrs	r6, r6, #21
    7c20:	e7db      	b.n	7bda <__aeabi_dsub+0x14a>
    7c22:	4663      	mov	r3, ip
    7c24:	1af3      	subs	r3, r6, r3
    7c26:	2b00      	cmp	r3, #0
    7c28:	dc00      	bgt.n	7c2c <__aeabi_dsub+0x19c>
    7c2a:	e094      	b.n	7d56 <__aeabi_dsub+0x2c6>
    7c2c:	4660      	mov	r0, ip
    7c2e:	2800      	cmp	r0, #0
    7c30:	d035      	beq.n	7c9e <__aeabi_dsub+0x20e>
    7c32:	4868      	ldr	r0, [pc, #416]	; (7dd4 <__aeabi_dsub+0x344>)
    7c34:	4286      	cmp	r6, r0
    7c36:	d0b1      	beq.n	7b9c <__aeabi_dsub+0x10c>
    7c38:	2780      	movs	r7, #128	; 0x80
    7c3a:	043f      	lsls	r7, r7, #16
    7c3c:	4339      	orrs	r1, r7
    7c3e:	2b38      	cmp	r3, #56	; 0x38
    7c40:	dc00      	bgt.n	7c44 <__aeabi_dsub+0x1b4>
    7c42:	e0fd      	b.n	7e40 <__aeabi_dsub+0x3b0>
    7c44:	430a      	orrs	r2, r1
    7c46:	0017      	movs	r7, r2
    7c48:	2100      	movs	r1, #0
    7c4a:	1e7a      	subs	r2, r7, #1
    7c4c:	4197      	sbcs	r7, r2
    7c4e:	4457      	add	r7, sl
    7c50:	4557      	cmp	r7, sl
    7c52:	4180      	sbcs	r0, r0
    7c54:	1909      	adds	r1, r1, r4
    7c56:	4244      	negs	r4, r0
    7c58:	190c      	adds	r4, r1, r4
    7c5a:	0223      	lsls	r3, r4, #8
    7c5c:	d53a      	bpl.n	7cd4 <__aeabi_dsub+0x244>
    7c5e:	4b5d      	ldr	r3, [pc, #372]	; (7dd4 <__aeabi_dsub+0x344>)
    7c60:	3601      	adds	r6, #1
    7c62:	429e      	cmp	r6, r3
    7c64:	d100      	bne.n	7c68 <__aeabi_dsub+0x1d8>
    7c66:	e14b      	b.n	7f00 <__aeabi_dsub+0x470>
    7c68:	2201      	movs	r2, #1
    7c6a:	4b5b      	ldr	r3, [pc, #364]	; (7dd8 <__aeabi_dsub+0x348>)
    7c6c:	401c      	ands	r4, r3
    7c6e:	087b      	lsrs	r3, r7, #1
    7c70:	4017      	ands	r7, r2
    7c72:	431f      	orrs	r7, r3
    7c74:	07e2      	lsls	r2, r4, #31
    7c76:	4317      	orrs	r7, r2
    7c78:	0864      	lsrs	r4, r4, #1
    7c7a:	e78f      	b.n	7b9c <__aeabi_dsub+0x10c>
    7c7c:	0008      	movs	r0, r1
    7c7e:	4310      	orrs	r0, r2
    7c80:	d000      	beq.n	7c84 <__aeabi_dsub+0x1f4>
    7c82:	e724      	b.n	7ace <__aeabi_dsub+0x3e>
    7c84:	e721      	b.n	7aca <__aeabi_dsub+0x3a>
    7c86:	0023      	movs	r3, r4
    7c88:	433b      	orrs	r3, r7
    7c8a:	d100      	bne.n	7c8e <__aeabi_dsub+0x1fe>
    7c8c:	e1b9      	b.n	8002 <__aeabi_dsub+0x572>
    7c8e:	2280      	movs	r2, #128	; 0x80
    7c90:	0312      	lsls	r2, r2, #12
    7c92:	4314      	orrs	r4, r2
    7c94:	0324      	lsls	r4, r4, #12
    7c96:	0b24      	lsrs	r4, r4, #12
    7c98:	e79f      	b.n	7bda <__aeabi_dsub+0x14a>
    7c9a:	002e      	movs	r6, r5
    7c9c:	e77e      	b.n	7b9c <__aeabi_dsub+0x10c>
    7c9e:	0008      	movs	r0, r1
    7ca0:	4310      	orrs	r0, r2
    7ca2:	d100      	bne.n	7ca6 <__aeabi_dsub+0x216>
    7ca4:	e0ca      	b.n	7e3c <__aeabi_dsub+0x3ac>
    7ca6:	1e58      	subs	r0, r3, #1
    7ca8:	4684      	mov	ip, r0
    7caa:	2800      	cmp	r0, #0
    7cac:	d000      	beq.n	7cb0 <__aeabi_dsub+0x220>
    7cae:	e0e7      	b.n	7e80 <__aeabi_dsub+0x3f0>
    7cb0:	4452      	add	r2, sl
    7cb2:	4552      	cmp	r2, sl
    7cb4:	4180      	sbcs	r0, r0
    7cb6:	1864      	adds	r4, r4, r1
    7cb8:	4240      	negs	r0, r0
    7cba:	1824      	adds	r4, r4, r0
    7cbc:	0017      	movs	r7, r2
    7cbe:	2601      	movs	r6, #1
    7cc0:	0223      	lsls	r3, r4, #8
    7cc2:	d507      	bpl.n	7cd4 <__aeabi_dsub+0x244>
    7cc4:	2602      	movs	r6, #2
    7cc6:	e7cf      	b.n	7c68 <__aeabi_dsub+0x1d8>
    7cc8:	4664      	mov	r4, ip
    7cca:	432c      	orrs	r4, r5
    7ccc:	d100      	bne.n	7cd0 <__aeabi_dsub+0x240>
    7cce:	e1b3      	b.n	8038 <__aeabi_dsub+0x5a8>
    7cd0:	002c      	movs	r4, r5
    7cd2:	4667      	mov	r7, ip
    7cd4:	077b      	lsls	r3, r7, #29
    7cd6:	d000      	beq.n	7cda <__aeabi_dsub+0x24a>
    7cd8:	e762      	b.n	7ba0 <__aeabi_dsub+0x110>
    7cda:	0763      	lsls	r3, r4, #29
    7cdc:	08ff      	lsrs	r7, r7, #3
    7cde:	431f      	orrs	r7, r3
    7ce0:	2501      	movs	r5, #1
    7ce2:	4643      	mov	r3, r8
    7ce4:	08e4      	lsrs	r4, r4, #3
    7ce6:	401d      	ands	r5, r3
    7ce8:	e793      	b.n	7c12 <__aeabi_dsub+0x182>
    7cea:	2d00      	cmp	r5, #0
    7cec:	d178      	bne.n	7de0 <__aeabi_dsub+0x350>
    7cee:	1c75      	adds	r5, r6, #1
    7cf0:	056d      	lsls	r5, r5, #21
    7cf2:	0d6d      	lsrs	r5, r5, #21
    7cf4:	2d01      	cmp	r5, #1
    7cf6:	dc00      	bgt.n	7cfa <__aeabi_dsub+0x26a>
    7cf8:	e0f2      	b.n	7ee0 <__aeabi_dsub+0x450>
    7cfa:	4650      	mov	r0, sl
    7cfc:	1a80      	subs	r0, r0, r2
    7cfe:	4582      	cmp	sl, r0
    7d00:	41bf      	sbcs	r7, r7
    7d02:	1a65      	subs	r5, r4, r1
    7d04:	427f      	negs	r7, r7
    7d06:	1bed      	subs	r5, r5, r7
    7d08:	4684      	mov	ip, r0
    7d0a:	0228      	lsls	r0, r5, #8
    7d0c:	d400      	bmi.n	7d10 <__aeabi_dsub+0x280>
    7d0e:	e08c      	b.n	7e2a <__aeabi_dsub+0x39a>
    7d10:	4650      	mov	r0, sl
    7d12:	1a17      	subs	r7, r2, r0
    7d14:	42ba      	cmp	r2, r7
    7d16:	4192      	sbcs	r2, r2
    7d18:	1b0c      	subs	r4, r1, r4
    7d1a:	4255      	negs	r5, r2
    7d1c:	1b65      	subs	r5, r4, r5
    7d1e:	4698      	mov	r8, r3
    7d20:	e714      	b.n	7b4c <__aeabi_dsub+0xbc>
    7d22:	2501      	movs	r5, #1
    7d24:	4643      	mov	r3, r8
    7d26:	2400      	movs	r4, #0
    7d28:	401d      	ands	r5, r3
    7d2a:	2700      	movs	r7, #0
    7d2c:	e755      	b.n	7bda <__aeabi_dsub+0x14a>
    7d2e:	4c2a      	ldr	r4, [pc, #168]	; (7dd8 <__aeabi_dsub+0x348>)
    7d30:	1af6      	subs	r6, r6, r3
    7d32:	402c      	ands	r4, r5
    7d34:	e732      	b.n	7b9c <__aeabi_dsub+0x10c>
    7d36:	003d      	movs	r5, r7
    7d38:	3828      	subs	r0, #40	; 0x28
    7d3a:	4085      	lsls	r5, r0
    7d3c:	2700      	movs	r7, #0
    7d3e:	e717      	b.n	7b70 <__aeabi_dsub+0xe0>
    7d40:	0038      	movs	r0, r7
    7d42:	f000 fa27 	bl	8194 <__clzsi2>
    7d46:	3020      	adds	r0, #32
    7d48:	e706      	b.n	7b58 <__aeabi_dsub+0xc8>
    7d4a:	430a      	orrs	r2, r1
    7d4c:	0017      	movs	r7, r2
    7d4e:	2100      	movs	r1, #0
    7d50:	1e7a      	subs	r2, r7, #1
    7d52:	4197      	sbcs	r7, r2
    7d54:	e6ee      	b.n	7b34 <__aeabi_dsub+0xa4>
    7d56:	2b00      	cmp	r3, #0
    7d58:	d000      	beq.n	7d5c <__aeabi_dsub+0x2cc>
    7d5a:	e0e5      	b.n	7f28 <__aeabi_dsub+0x498>
    7d5c:	1c73      	adds	r3, r6, #1
    7d5e:	469c      	mov	ip, r3
    7d60:	055b      	lsls	r3, r3, #21
    7d62:	0d5b      	lsrs	r3, r3, #21
    7d64:	2b01      	cmp	r3, #1
    7d66:	dc00      	bgt.n	7d6a <__aeabi_dsub+0x2da>
    7d68:	e09f      	b.n	7eaa <__aeabi_dsub+0x41a>
    7d6a:	4b1a      	ldr	r3, [pc, #104]	; (7dd4 <__aeabi_dsub+0x344>)
    7d6c:	459c      	cmp	ip, r3
    7d6e:	d100      	bne.n	7d72 <__aeabi_dsub+0x2e2>
    7d70:	e0c5      	b.n	7efe <__aeabi_dsub+0x46e>
    7d72:	4452      	add	r2, sl
    7d74:	4552      	cmp	r2, sl
    7d76:	4180      	sbcs	r0, r0
    7d78:	1864      	adds	r4, r4, r1
    7d7a:	4240      	negs	r0, r0
    7d7c:	1824      	adds	r4, r4, r0
    7d7e:	07e7      	lsls	r7, r4, #31
    7d80:	0852      	lsrs	r2, r2, #1
    7d82:	4317      	orrs	r7, r2
    7d84:	0864      	lsrs	r4, r4, #1
    7d86:	4666      	mov	r6, ip
    7d88:	e708      	b.n	7b9c <__aeabi_dsub+0x10c>
    7d8a:	4812      	ldr	r0, [pc, #72]	; (7dd4 <__aeabi_dsub+0x344>)
    7d8c:	4285      	cmp	r5, r0
    7d8e:	d100      	bne.n	7d92 <__aeabi_dsub+0x302>
    7d90:	e085      	b.n	7e9e <__aeabi_dsub+0x40e>
    7d92:	001d      	movs	r5, r3
    7d94:	e6bc      	b.n	7b10 <__aeabi_dsub+0x80>
    7d96:	0029      	movs	r1, r5
    7d98:	3e1f      	subs	r6, #31
    7d9a:	40f1      	lsrs	r1, r6
    7d9c:	2b20      	cmp	r3, #32
    7d9e:	d100      	bne.n	7da2 <__aeabi_dsub+0x312>
    7da0:	e07f      	b.n	7ea2 <__aeabi_dsub+0x412>
    7da2:	2240      	movs	r2, #64	; 0x40
    7da4:	1ad3      	subs	r3, r2, r3
    7da6:	409d      	lsls	r5, r3
    7da8:	432f      	orrs	r7, r5
    7daa:	1e7d      	subs	r5, r7, #1
    7dac:	41af      	sbcs	r7, r5
    7dae:	2400      	movs	r4, #0
    7db0:	430f      	orrs	r7, r1
    7db2:	2600      	movs	r6, #0
    7db4:	e78e      	b.n	7cd4 <__aeabi_dsub+0x244>
    7db6:	002b      	movs	r3, r5
    7db8:	000f      	movs	r7, r1
    7dba:	3b20      	subs	r3, #32
    7dbc:	40df      	lsrs	r7, r3
    7dbe:	2d20      	cmp	r5, #32
    7dc0:	d071      	beq.n	7ea6 <__aeabi_dsub+0x416>
    7dc2:	2340      	movs	r3, #64	; 0x40
    7dc4:	1b5d      	subs	r5, r3, r5
    7dc6:	40a9      	lsls	r1, r5
    7dc8:	430a      	orrs	r2, r1
    7dca:	1e51      	subs	r1, r2, #1
    7dcc:	418a      	sbcs	r2, r1
    7dce:	2100      	movs	r1, #0
    7dd0:	4317      	orrs	r7, r2
    7dd2:	e6af      	b.n	7b34 <__aeabi_dsub+0xa4>
    7dd4:	000007ff 	.word	0x000007ff
    7dd8:	ff7fffff 	.word	0xff7fffff
    7ddc:	800fffff 	.word	0x800fffff
    7de0:	2e00      	cmp	r6, #0
    7de2:	d03e      	beq.n	7e62 <__aeabi_dsub+0x3d2>
    7de4:	4eb3      	ldr	r6, [pc, #716]	; (80b4 <__aeabi_dsub+0x624>)
    7de6:	45b4      	cmp	ip, r6
    7de8:	d045      	beq.n	7e76 <__aeabi_dsub+0x3e6>
    7dea:	2680      	movs	r6, #128	; 0x80
    7dec:	0436      	lsls	r6, r6, #16
    7dee:	426d      	negs	r5, r5
    7df0:	4334      	orrs	r4, r6
    7df2:	2d38      	cmp	r5, #56	; 0x38
    7df4:	dd00      	ble.n	7df8 <__aeabi_dsub+0x368>
    7df6:	e0a8      	b.n	7f4a <__aeabi_dsub+0x4ba>
    7df8:	2d1f      	cmp	r5, #31
    7dfa:	dd00      	ble.n	7dfe <__aeabi_dsub+0x36e>
    7dfc:	e11f      	b.n	803e <__aeabi_dsub+0x5ae>
    7dfe:	2620      	movs	r6, #32
    7e00:	0027      	movs	r7, r4
    7e02:	4650      	mov	r0, sl
    7e04:	1b76      	subs	r6, r6, r5
    7e06:	40b7      	lsls	r7, r6
    7e08:	40e8      	lsrs	r0, r5
    7e0a:	4307      	orrs	r7, r0
    7e0c:	4650      	mov	r0, sl
    7e0e:	40b0      	lsls	r0, r6
    7e10:	1e46      	subs	r6, r0, #1
    7e12:	41b0      	sbcs	r0, r6
    7e14:	40ec      	lsrs	r4, r5
    7e16:	4338      	orrs	r0, r7
    7e18:	1a17      	subs	r7, r2, r0
    7e1a:	42ba      	cmp	r2, r7
    7e1c:	4192      	sbcs	r2, r2
    7e1e:	1b0c      	subs	r4, r1, r4
    7e20:	4252      	negs	r2, r2
    7e22:	1aa4      	subs	r4, r4, r2
    7e24:	4666      	mov	r6, ip
    7e26:	4698      	mov	r8, r3
    7e28:	e68b      	b.n	7b42 <__aeabi_dsub+0xb2>
    7e2a:	4664      	mov	r4, ip
    7e2c:	4667      	mov	r7, ip
    7e2e:	432c      	orrs	r4, r5
    7e30:	d000      	beq.n	7e34 <__aeabi_dsub+0x3a4>
    7e32:	e68b      	b.n	7b4c <__aeabi_dsub+0xbc>
    7e34:	2500      	movs	r5, #0
    7e36:	2600      	movs	r6, #0
    7e38:	2700      	movs	r7, #0
    7e3a:	e6ea      	b.n	7c12 <__aeabi_dsub+0x182>
    7e3c:	001e      	movs	r6, r3
    7e3e:	e6ad      	b.n	7b9c <__aeabi_dsub+0x10c>
    7e40:	2b1f      	cmp	r3, #31
    7e42:	dc60      	bgt.n	7f06 <__aeabi_dsub+0x476>
    7e44:	2720      	movs	r7, #32
    7e46:	1af8      	subs	r0, r7, r3
    7e48:	000f      	movs	r7, r1
    7e4a:	4684      	mov	ip, r0
    7e4c:	4087      	lsls	r7, r0
    7e4e:	0010      	movs	r0, r2
    7e50:	40d8      	lsrs	r0, r3
    7e52:	4307      	orrs	r7, r0
    7e54:	4660      	mov	r0, ip
    7e56:	4082      	lsls	r2, r0
    7e58:	1e50      	subs	r0, r2, #1
    7e5a:	4182      	sbcs	r2, r0
    7e5c:	40d9      	lsrs	r1, r3
    7e5e:	4317      	orrs	r7, r2
    7e60:	e6f5      	b.n	7c4e <__aeabi_dsub+0x1be>
    7e62:	0026      	movs	r6, r4
    7e64:	4650      	mov	r0, sl
    7e66:	4306      	orrs	r6, r0
    7e68:	d005      	beq.n	7e76 <__aeabi_dsub+0x3e6>
    7e6a:	43ed      	mvns	r5, r5
    7e6c:	2d00      	cmp	r5, #0
    7e6e:	d0d3      	beq.n	7e18 <__aeabi_dsub+0x388>
    7e70:	4e90      	ldr	r6, [pc, #576]	; (80b4 <__aeabi_dsub+0x624>)
    7e72:	45b4      	cmp	ip, r6
    7e74:	d1bd      	bne.n	7df2 <__aeabi_dsub+0x362>
    7e76:	000c      	movs	r4, r1
    7e78:	0017      	movs	r7, r2
    7e7a:	4666      	mov	r6, ip
    7e7c:	4698      	mov	r8, r3
    7e7e:	e68d      	b.n	7b9c <__aeabi_dsub+0x10c>
    7e80:	488c      	ldr	r0, [pc, #560]	; (80b4 <__aeabi_dsub+0x624>)
    7e82:	4283      	cmp	r3, r0
    7e84:	d00b      	beq.n	7e9e <__aeabi_dsub+0x40e>
    7e86:	4663      	mov	r3, ip
    7e88:	e6d9      	b.n	7c3e <__aeabi_dsub+0x1ae>
    7e8a:	2d00      	cmp	r5, #0
    7e8c:	d000      	beq.n	7e90 <__aeabi_dsub+0x400>
    7e8e:	e096      	b.n	7fbe <__aeabi_dsub+0x52e>
    7e90:	0008      	movs	r0, r1
    7e92:	4310      	orrs	r0, r2
    7e94:	d100      	bne.n	7e98 <__aeabi_dsub+0x408>
    7e96:	e0e2      	b.n	805e <__aeabi_dsub+0x5ce>
    7e98:	000c      	movs	r4, r1
    7e9a:	0017      	movs	r7, r2
    7e9c:	4698      	mov	r8, r3
    7e9e:	4e85      	ldr	r6, [pc, #532]	; (80b4 <__aeabi_dsub+0x624>)
    7ea0:	e67c      	b.n	7b9c <__aeabi_dsub+0x10c>
    7ea2:	2500      	movs	r5, #0
    7ea4:	e780      	b.n	7da8 <__aeabi_dsub+0x318>
    7ea6:	2100      	movs	r1, #0
    7ea8:	e78e      	b.n	7dc8 <__aeabi_dsub+0x338>
    7eaa:	0023      	movs	r3, r4
    7eac:	4650      	mov	r0, sl
    7eae:	4303      	orrs	r3, r0
    7eb0:	2e00      	cmp	r6, #0
    7eb2:	d000      	beq.n	7eb6 <__aeabi_dsub+0x426>
    7eb4:	e0a8      	b.n	8008 <__aeabi_dsub+0x578>
    7eb6:	2b00      	cmp	r3, #0
    7eb8:	d100      	bne.n	7ebc <__aeabi_dsub+0x42c>
    7eba:	e0de      	b.n	807a <__aeabi_dsub+0x5ea>
    7ebc:	000b      	movs	r3, r1
    7ebe:	4313      	orrs	r3, r2
    7ec0:	d100      	bne.n	7ec4 <__aeabi_dsub+0x434>
    7ec2:	e66b      	b.n	7b9c <__aeabi_dsub+0x10c>
    7ec4:	4452      	add	r2, sl
    7ec6:	4552      	cmp	r2, sl
    7ec8:	4180      	sbcs	r0, r0
    7eca:	1864      	adds	r4, r4, r1
    7ecc:	4240      	negs	r0, r0
    7ece:	1824      	adds	r4, r4, r0
    7ed0:	0017      	movs	r7, r2
    7ed2:	0223      	lsls	r3, r4, #8
    7ed4:	d400      	bmi.n	7ed8 <__aeabi_dsub+0x448>
    7ed6:	e6fd      	b.n	7cd4 <__aeabi_dsub+0x244>
    7ed8:	4b77      	ldr	r3, [pc, #476]	; (80b8 <__aeabi_dsub+0x628>)
    7eda:	4666      	mov	r6, ip
    7edc:	401c      	ands	r4, r3
    7ede:	e65d      	b.n	7b9c <__aeabi_dsub+0x10c>
    7ee0:	0025      	movs	r5, r4
    7ee2:	4650      	mov	r0, sl
    7ee4:	4305      	orrs	r5, r0
    7ee6:	2e00      	cmp	r6, #0
    7ee8:	d1cf      	bne.n	7e8a <__aeabi_dsub+0x3fa>
    7eea:	2d00      	cmp	r5, #0
    7eec:	d14f      	bne.n	7f8e <__aeabi_dsub+0x4fe>
    7eee:	000c      	movs	r4, r1
    7ef0:	4314      	orrs	r4, r2
    7ef2:	d100      	bne.n	7ef6 <__aeabi_dsub+0x466>
    7ef4:	e0a0      	b.n	8038 <__aeabi_dsub+0x5a8>
    7ef6:	000c      	movs	r4, r1
    7ef8:	0017      	movs	r7, r2
    7efa:	4698      	mov	r8, r3
    7efc:	e64e      	b.n	7b9c <__aeabi_dsub+0x10c>
    7efe:	4666      	mov	r6, ip
    7f00:	2400      	movs	r4, #0
    7f02:	2700      	movs	r7, #0
    7f04:	e685      	b.n	7c12 <__aeabi_dsub+0x182>
    7f06:	001f      	movs	r7, r3
    7f08:	0008      	movs	r0, r1
    7f0a:	3f20      	subs	r7, #32
    7f0c:	40f8      	lsrs	r0, r7
    7f0e:	0007      	movs	r7, r0
    7f10:	2b20      	cmp	r3, #32
    7f12:	d100      	bne.n	7f16 <__aeabi_dsub+0x486>
    7f14:	e08e      	b.n	8034 <__aeabi_dsub+0x5a4>
    7f16:	2040      	movs	r0, #64	; 0x40
    7f18:	1ac3      	subs	r3, r0, r3
    7f1a:	4099      	lsls	r1, r3
    7f1c:	430a      	orrs	r2, r1
    7f1e:	1e51      	subs	r1, r2, #1
    7f20:	418a      	sbcs	r2, r1
    7f22:	2100      	movs	r1, #0
    7f24:	4317      	orrs	r7, r2
    7f26:	e692      	b.n	7c4e <__aeabi_dsub+0x1be>
    7f28:	2e00      	cmp	r6, #0
    7f2a:	d114      	bne.n	7f56 <__aeabi_dsub+0x4c6>
    7f2c:	0026      	movs	r6, r4
    7f2e:	4650      	mov	r0, sl
    7f30:	4306      	orrs	r6, r0
    7f32:	d062      	beq.n	7ffa <__aeabi_dsub+0x56a>
    7f34:	43db      	mvns	r3, r3
    7f36:	2b00      	cmp	r3, #0
    7f38:	d15c      	bne.n	7ff4 <__aeabi_dsub+0x564>
    7f3a:	1887      	adds	r7, r0, r2
    7f3c:	4297      	cmp	r7, r2
    7f3e:	4192      	sbcs	r2, r2
    7f40:	1864      	adds	r4, r4, r1
    7f42:	4252      	negs	r2, r2
    7f44:	18a4      	adds	r4, r4, r2
    7f46:	4666      	mov	r6, ip
    7f48:	e687      	b.n	7c5a <__aeabi_dsub+0x1ca>
    7f4a:	4650      	mov	r0, sl
    7f4c:	4320      	orrs	r0, r4
    7f4e:	1e44      	subs	r4, r0, #1
    7f50:	41a0      	sbcs	r0, r4
    7f52:	2400      	movs	r4, #0
    7f54:	e760      	b.n	7e18 <__aeabi_dsub+0x388>
    7f56:	4e57      	ldr	r6, [pc, #348]	; (80b4 <__aeabi_dsub+0x624>)
    7f58:	45b4      	cmp	ip, r6
    7f5a:	d04e      	beq.n	7ffa <__aeabi_dsub+0x56a>
    7f5c:	2680      	movs	r6, #128	; 0x80
    7f5e:	0436      	lsls	r6, r6, #16
    7f60:	425b      	negs	r3, r3
    7f62:	4334      	orrs	r4, r6
    7f64:	2b38      	cmp	r3, #56	; 0x38
    7f66:	dd00      	ble.n	7f6a <__aeabi_dsub+0x4da>
    7f68:	e07f      	b.n	806a <__aeabi_dsub+0x5da>
    7f6a:	2b1f      	cmp	r3, #31
    7f6c:	dd00      	ble.n	7f70 <__aeabi_dsub+0x4e0>
    7f6e:	e08b      	b.n	8088 <__aeabi_dsub+0x5f8>
    7f70:	2620      	movs	r6, #32
    7f72:	0027      	movs	r7, r4
    7f74:	4650      	mov	r0, sl
    7f76:	1af6      	subs	r6, r6, r3
    7f78:	40b7      	lsls	r7, r6
    7f7a:	40d8      	lsrs	r0, r3
    7f7c:	4307      	orrs	r7, r0
    7f7e:	4650      	mov	r0, sl
    7f80:	40b0      	lsls	r0, r6
    7f82:	1e46      	subs	r6, r0, #1
    7f84:	41b0      	sbcs	r0, r6
    7f86:	4307      	orrs	r7, r0
    7f88:	40dc      	lsrs	r4, r3
    7f8a:	18bf      	adds	r7, r7, r2
    7f8c:	e7d6      	b.n	7f3c <__aeabi_dsub+0x4ac>
    7f8e:	000d      	movs	r5, r1
    7f90:	4315      	orrs	r5, r2
    7f92:	d100      	bne.n	7f96 <__aeabi_dsub+0x506>
    7f94:	e602      	b.n	7b9c <__aeabi_dsub+0x10c>
    7f96:	4650      	mov	r0, sl
    7f98:	1a80      	subs	r0, r0, r2
    7f9a:	4582      	cmp	sl, r0
    7f9c:	41bf      	sbcs	r7, r7
    7f9e:	1a65      	subs	r5, r4, r1
    7fa0:	427f      	negs	r7, r7
    7fa2:	1bed      	subs	r5, r5, r7
    7fa4:	4684      	mov	ip, r0
    7fa6:	0228      	lsls	r0, r5, #8
    7fa8:	d400      	bmi.n	7fac <__aeabi_dsub+0x51c>
    7faa:	e68d      	b.n	7cc8 <__aeabi_dsub+0x238>
    7fac:	4650      	mov	r0, sl
    7fae:	1a17      	subs	r7, r2, r0
    7fb0:	42ba      	cmp	r2, r7
    7fb2:	4192      	sbcs	r2, r2
    7fb4:	1b0c      	subs	r4, r1, r4
    7fb6:	4252      	negs	r2, r2
    7fb8:	1aa4      	subs	r4, r4, r2
    7fba:	4698      	mov	r8, r3
    7fbc:	e5ee      	b.n	7b9c <__aeabi_dsub+0x10c>
    7fbe:	000d      	movs	r5, r1
    7fc0:	4315      	orrs	r5, r2
    7fc2:	d100      	bne.n	7fc6 <__aeabi_dsub+0x536>
    7fc4:	e76b      	b.n	7e9e <__aeabi_dsub+0x40e>
    7fc6:	4650      	mov	r0, sl
    7fc8:	0767      	lsls	r7, r4, #29
    7fca:	08c0      	lsrs	r0, r0, #3
    7fcc:	4307      	orrs	r7, r0
    7fce:	2080      	movs	r0, #128	; 0x80
    7fd0:	08e4      	lsrs	r4, r4, #3
    7fd2:	0300      	lsls	r0, r0, #12
    7fd4:	4204      	tst	r4, r0
    7fd6:	d007      	beq.n	7fe8 <__aeabi_dsub+0x558>
    7fd8:	08cd      	lsrs	r5, r1, #3
    7fda:	4205      	tst	r5, r0
    7fdc:	d104      	bne.n	7fe8 <__aeabi_dsub+0x558>
    7fde:	002c      	movs	r4, r5
    7fe0:	4698      	mov	r8, r3
    7fe2:	08d7      	lsrs	r7, r2, #3
    7fe4:	0749      	lsls	r1, r1, #29
    7fe6:	430f      	orrs	r7, r1
    7fe8:	0f7b      	lsrs	r3, r7, #29
    7fea:	00e4      	lsls	r4, r4, #3
    7fec:	431c      	orrs	r4, r3
    7fee:	00ff      	lsls	r7, r7, #3
    7ff0:	4e30      	ldr	r6, [pc, #192]	; (80b4 <__aeabi_dsub+0x624>)
    7ff2:	e5d3      	b.n	7b9c <__aeabi_dsub+0x10c>
    7ff4:	4e2f      	ldr	r6, [pc, #188]	; (80b4 <__aeabi_dsub+0x624>)
    7ff6:	45b4      	cmp	ip, r6
    7ff8:	d1b4      	bne.n	7f64 <__aeabi_dsub+0x4d4>
    7ffa:	000c      	movs	r4, r1
    7ffc:	0017      	movs	r7, r2
    7ffe:	4666      	mov	r6, ip
    8000:	e5cc      	b.n	7b9c <__aeabi_dsub+0x10c>
    8002:	2700      	movs	r7, #0
    8004:	2400      	movs	r4, #0
    8006:	e5e8      	b.n	7bda <__aeabi_dsub+0x14a>
    8008:	2b00      	cmp	r3, #0
    800a:	d039      	beq.n	8080 <__aeabi_dsub+0x5f0>
    800c:	000b      	movs	r3, r1
    800e:	4313      	orrs	r3, r2
    8010:	d100      	bne.n	8014 <__aeabi_dsub+0x584>
    8012:	e744      	b.n	7e9e <__aeabi_dsub+0x40e>
    8014:	08c0      	lsrs	r0, r0, #3
    8016:	0767      	lsls	r7, r4, #29
    8018:	4307      	orrs	r7, r0
    801a:	2080      	movs	r0, #128	; 0x80
    801c:	08e4      	lsrs	r4, r4, #3
    801e:	0300      	lsls	r0, r0, #12
    8020:	4204      	tst	r4, r0
    8022:	d0e1      	beq.n	7fe8 <__aeabi_dsub+0x558>
    8024:	08cb      	lsrs	r3, r1, #3
    8026:	4203      	tst	r3, r0
    8028:	d1de      	bne.n	7fe8 <__aeabi_dsub+0x558>
    802a:	08d7      	lsrs	r7, r2, #3
    802c:	0749      	lsls	r1, r1, #29
    802e:	430f      	orrs	r7, r1
    8030:	001c      	movs	r4, r3
    8032:	e7d9      	b.n	7fe8 <__aeabi_dsub+0x558>
    8034:	2100      	movs	r1, #0
    8036:	e771      	b.n	7f1c <__aeabi_dsub+0x48c>
    8038:	2500      	movs	r5, #0
    803a:	2700      	movs	r7, #0
    803c:	e5e9      	b.n	7c12 <__aeabi_dsub+0x182>
    803e:	002e      	movs	r6, r5
    8040:	0027      	movs	r7, r4
    8042:	3e20      	subs	r6, #32
    8044:	40f7      	lsrs	r7, r6
    8046:	2d20      	cmp	r5, #32
    8048:	d02f      	beq.n	80aa <__aeabi_dsub+0x61a>
    804a:	2640      	movs	r6, #64	; 0x40
    804c:	1b75      	subs	r5, r6, r5
    804e:	40ac      	lsls	r4, r5
    8050:	4650      	mov	r0, sl
    8052:	4320      	orrs	r0, r4
    8054:	1e44      	subs	r4, r0, #1
    8056:	41a0      	sbcs	r0, r4
    8058:	2400      	movs	r4, #0
    805a:	4338      	orrs	r0, r7
    805c:	e6dc      	b.n	7e18 <__aeabi_dsub+0x388>
    805e:	2480      	movs	r4, #128	; 0x80
    8060:	2500      	movs	r5, #0
    8062:	0324      	lsls	r4, r4, #12
    8064:	4e13      	ldr	r6, [pc, #76]	; (80b4 <__aeabi_dsub+0x624>)
    8066:	2700      	movs	r7, #0
    8068:	e5d3      	b.n	7c12 <__aeabi_dsub+0x182>
    806a:	4650      	mov	r0, sl
    806c:	4320      	orrs	r0, r4
    806e:	0007      	movs	r7, r0
    8070:	1e78      	subs	r0, r7, #1
    8072:	4187      	sbcs	r7, r0
    8074:	2400      	movs	r4, #0
    8076:	18bf      	adds	r7, r7, r2
    8078:	e760      	b.n	7f3c <__aeabi_dsub+0x4ac>
    807a:	000c      	movs	r4, r1
    807c:	0017      	movs	r7, r2
    807e:	e58d      	b.n	7b9c <__aeabi_dsub+0x10c>
    8080:	000c      	movs	r4, r1
    8082:	0017      	movs	r7, r2
    8084:	4e0b      	ldr	r6, [pc, #44]	; (80b4 <__aeabi_dsub+0x624>)
    8086:	e589      	b.n	7b9c <__aeabi_dsub+0x10c>
    8088:	001e      	movs	r6, r3
    808a:	0027      	movs	r7, r4
    808c:	3e20      	subs	r6, #32
    808e:	40f7      	lsrs	r7, r6
    8090:	2b20      	cmp	r3, #32
    8092:	d00c      	beq.n	80ae <__aeabi_dsub+0x61e>
    8094:	2640      	movs	r6, #64	; 0x40
    8096:	1af3      	subs	r3, r6, r3
    8098:	409c      	lsls	r4, r3
    809a:	4650      	mov	r0, sl
    809c:	4320      	orrs	r0, r4
    809e:	1e44      	subs	r4, r0, #1
    80a0:	41a0      	sbcs	r0, r4
    80a2:	4307      	orrs	r7, r0
    80a4:	2400      	movs	r4, #0
    80a6:	18bf      	adds	r7, r7, r2
    80a8:	e748      	b.n	7f3c <__aeabi_dsub+0x4ac>
    80aa:	2400      	movs	r4, #0
    80ac:	e7d0      	b.n	8050 <__aeabi_dsub+0x5c0>
    80ae:	2400      	movs	r4, #0
    80b0:	e7f3      	b.n	809a <__aeabi_dsub+0x60a>
    80b2:	46c0      	nop			; (mov r8, r8)
    80b4:	000007ff 	.word	0x000007ff
    80b8:	ff7fffff 	.word	0xff7fffff

000080bc <__aeabi_d2iz>:
    80bc:	b530      	push	{r4, r5, lr}
    80be:	4d13      	ldr	r5, [pc, #76]	; (810c <__aeabi_d2iz+0x50>)
    80c0:	030a      	lsls	r2, r1, #12
    80c2:	004b      	lsls	r3, r1, #1
    80c4:	0b12      	lsrs	r2, r2, #12
    80c6:	0d5b      	lsrs	r3, r3, #21
    80c8:	0fc9      	lsrs	r1, r1, #31
    80ca:	2400      	movs	r4, #0
    80cc:	42ab      	cmp	r3, r5
    80ce:	dd10      	ble.n	80f2 <__aeabi_d2iz+0x36>
    80d0:	4c0f      	ldr	r4, [pc, #60]	; (8110 <__aeabi_d2iz+0x54>)
    80d2:	42a3      	cmp	r3, r4
    80d4:	dc0f      	bgt.n	80f6 <__aeabi_d2iz+0x3a>
    80d6:	2480      	movs	r4, #128	; 0x80
    80d8:	4d0e      	ldr	r5, [pc, #56]	; (8114 <__aeabi_d2iz+0x58>)
    80da:	0364      	lsls	r4, r4, #13
    80dc:	4322      	orrs	r2, r4
    80de:	1aed      	subs	r5, r5, r3
    80e0:	2d1f      	cmp	r5, #31
    80e2:	dd0b      	ble.n	80fc <__aeabi_d2iz+0x40>
    80e4:	480c      	ldr	r0, [pc, #48]	; (8118 <__aeabi_d2iz+0x5c>)
    80e6:	1ac3      	subs	r3, r0, r3
    80e8:	40da      	lsrs	r2, r3
    80ea:	4254      	negs	r4, r2
    80ec:	2900      	cmp	r1, #0
    80ee:	d100      	bne.n	80f2 <__aeabi_d2iz+0x36>
    80f0:	0014      	movs	r4, r2
    80f2:	0020      	movs	r0, r4
    80f4:	bd30      	pop	{r4, r5, pc}
    80f6:	4b09      	ldr	r3, [pc, #36]	; (811c <__aeabi_d2iz+0x60>)
    80f8:	18cc      	adds	r4, r1, r3
    80fa:	e7fa      	b.n	80f2 <__aeabi_d2iz+0x36>
    80fc:	4c08      	ldr	r4, [pc, #32]	; (8120 <__aeabi_d2iz+0x64>)
    80fe:	40e8      	lsrs	r0, r5
    8100:	46a4      	mov	ip, r4
    8102:	4463      	add	r3, ip
    8104:	409a      	lsls	r2, r3
    8106:	4302      	orrs	r2, r0
    8108:	e7ef      	b.n	80ea <__aeabi_d2iz+0x2e>
    810a:	46c0      	nop			; (mov r8, r8)
    810c:	000003fe 	.word	0x000003fe
    8110:	0000041d 	.word	0x0000041d
    8114:	00000433 	.word	0x00000433
    8118:	00000413 	.word	0x00000413
    811c:	7fffffff 	.word	0x7fffffff
    8120:	fffffbed 	.word	0xfffffbed

00008124 <__aeabi_ui2d>:
    8124:	b510      	push	{r4, lr}
    8126:	1e04      	subs	r4, r0, #0
    8128:	d028      	beq.n	817c <__aeabi_ui2d+0x58>
    812a:	f000 f833 	bl	8194 <__clzsi2>
    812e:	4b15      	ldr	r3, [pc, #84]	; (8184 <__aeabi_ui2d+0x60>)
    8130:	4a15      	ldr	r2, [pc, #84]	; (8188 <__aeabi_ui2d+0x64>)
    8132:	1a1b      	subs	r3, r3, r0
    8134:	1ad2      	subs	r2, r2, r3
    8136:	2a1f      	cmp	r2, #31
    8138:	dd15      	ble.n	8166 <__aeabi_ui2d+0x42>
    813a:	4a14      	ldr	r2, [pc, #80]	; (818c <__aeabi_ui2d+0x68>)
    813c:	1ad2      	subs	r2, r2, r3
    813e:	4094      	lsls	r4, r2
    8140:	2200      	movs	r2, #0
    8142:	0324      	lsls	r4, r4, #12
    8144:	055b      	lsls	r3, r3, #21
    8146:	0b24      	lsrs	r4, r4, #12
    8148:	0d5b      	lsrs	r3, r3, #21
    814a:	2100      	movs	r1, #0
    814c:	0010      	movs	r0, r2
    814e:	0324      	lsls	r4, r4, #12
    8150:	0d0a      	lsrs	r2, r1, #20
    8152:	0b24      	lsrs	r4, r4, #12
    8154:	0512      	lsls	r2, r2, #20
    8156:	4322      	orrs	r2, r4
    8158:	4c0d      	ldr	r4, [pc, #52]	; (8190 <__aeabi_ui2d+0x6c>)
    815a:	051b      	lsls	r3, r3, #20
    815c:	4022      	ands	r2, r4
    815e:	4313      	orrs	r3, r2
    8160:	005b      	lsls	r3, r3, #1
    8162:	0859      	lsrs	r1, r3, #1
    8164:	bd10      	pop	{r4, pc}
    8166:	0021      	movs	r1, r4
    8168:	4091      	lsls	r1, r2
    816a:	000a      	movs	r2, r1
    816c:	210b      	movs	r1, #11
    816e:	1a08      	subs	r0, r1, r0
    8170:	40c4      	lsrs	r4, r0
    8172:	055b      	lsls	r3, r3, #21
    8174:	0324      	lsls	r4, r4, #12
    8176:	0b24      	lsrs	r4, r4, #12
    8178:	0d5b      	lsrs	r3, r3, #21
    817a:	e7e6      	b.n	814a <__aeabi_ui2d+0x26>
    817c:	2300      	movs	r3, #0
    817e:	2400      	movs	r4, #0
    8180:	2200      	movs	r2, #0
    8182:	e7e2      	b.n	814a <__aeabi_ui2d+0x26>
    8184:	0000041e 	.word	0x0000041e
    8188:	00000433 	.word	0x00000433
    818c:	00000413 	.word	0x00000413
    8190:	800fffff 	.word	0x800fffff

00008194 <__clzsi2>:
    8194:	211c      	movs	r1, #28
    8196:	2301      	movs	r3, #1
    8198:	041b      	lsls	r3, r3, #16
    819a:	4298      	cmp	r0, r3
    819c:	d301      	bcc.n	81a2 <__clzsi2+0xe>
    819e:	0c00      	lsrs	r0, r0, #16
    81a0:	3910      	subs	r1, #16
    81a2:	0a1b      	lsrs	r3, r3, #8
    81a4:	4298      	cmp	r0, r3
    81a6:	d301      	bcc.n	81ac <__clzsi2+0x18>
    81a8:	0a00      	lsrs	r0, r0, #8
    81aa:	3908      	subs	r1, #8
    81ac:	091b      	lsrs	r3, r3, #4
    81ae:	4298      	cmp	r0, r3
    81b0:	d301      	bcc.n	81b6 <__clzsi2+0x22>
    81b2:	0900      	lsrs	r0, r0, #4
    81b4:	3904      	subs	r1, #4
    81b6:	a202      	add	r2, pc, #8	; (adr r2, 81c0 <__clzsi2+0x2c>)
    81b8:	5c10      	ldrb	r0, [r2, r0]
    81ba:	1840      	adds	r0, r0, r1
    81bc:	4770      	bx	lr
    81be:	46c0      	nop			; (mov r8, r8)
    81c0:	02020304 	.word	0x02020304
    81c4:	01010101 	.word	0x01010101
	...

000081d0 <__clzdi2>:
    81d0:	b510      	push	{r4, lr}
    81d2:	2900      	cmp	r1, #0
    81d4:	d103      	bne.n	81de <__clzdi2+0xe>
    81d6:	f7ff ffdd 	bl	8194 <__clzsi2>
    81da:	3020      	adds	r0, #32
    81dc:	e002      	b.n	81e4 <__clzdi2+0x14>
    81de:	1c08      	adds	r0, r1, #0
    81e0:	f7ff ffd8 	bl	8194 <__clzsi2>
    81e4:	bd10      	pop	{r4, pc}
    81e6:	46c0      	nop			; (mov r8, r8)

000081e8 <__libc_init_array>:
    81e8:	b570      	push	{r4, r5, r6, lr}
    81ea:	2600      	movs	r6, #0
    81ec:	4d0c      	ldr	r5, [pc, #48]	; (8220 <__libc_init_array+0x38>)
    81ee:	4c0d      	ldr	r4, [pc, #52]	; (8224 <__libc_init_array+0x3c>)
    81f0:	1b64      	subs	r4, r4, r5
    81f2:	10a4      	asrs	r4, r4, #2
    81f4:	42a6      	cmp	r6, r4
    81f6:	d109      	bne.n	820c <__libc_init_array+0x24>
    81f8:	2600      	movs	r6, #0
    81fa:	f001 fd9b 	bl	9d34 <_init>
    81fe:	4d0a      	ldr	r5, [pc, #40]	; (8228 <__libc_init_array+0x40>)
    8200:	4c0a      	ldr	r4, [pc, #40]	; (822c <__libc_init_array+0x44>)
    8202:	1b64      	subs	r4, r4, r5
    8204:	10a4      	asrs	r4, r4, #2
    8206:	42a6      	cmp	r6, r4
    8208:	d105      	bne.n	8216 <__libc_init_array+0x2e>
    820a:	bd70      	pop	{r4, r5, r6, pc}
    820c:	00b3      	lsls	r3, r6, #2
    820e:	58eb      	ldr	r3, [r5, r3]
    8210:	4798      	blx	r3
    8212:	3601      	adds	r6, #1
    8214:	e7ee      	b.n	81f4 <__libc_init_array+0xc>
    8216:	00b3      	lsls	r3, r6, #2
    8218:	58eb      	ldr	r3, [r5, r3]
    821a:	4798      	blx	r3
    821c:	3601      	adds	r6, #1
    821e:	e7f2      	b.n	8206 <__libc_init_array+0x1e>
    8220:	00009d40 	.word	0x00009d40
    8224:	00009d40 	.word	0x00009d40
    8228:	00009d40 	.word	0x00009d40
    822c:	00009d44 	.word	0x00009d44

00008230 <memcpy>:
    8230:	2300      	movs	r3, #0
    8232:	b510      	push	{r4, lr}
    8234:	429a      	cmp	r2, r3
    8236:	d100      	bne.n	823a <memcpy+0xa>
    8238:	bd10      	pop	{r4, pc}
    823a:	5ccc      	ldrb	r4, [r1, r3]
    823c:	54c4      	strb	r4, [r0, r3]
    823e:	3301      	adds	r3, #1
    8240:	e7f8      	b.n	8234 <memcpy+0x4>
	...

00008244 <siprintf>:
    8244:	b40e      	push	{r1, r2, r3}
    8246:	b510      	push	{r4, lr}
    8248:	b09d      	sub	sp, #116	; 0x74
    824a:	a902      	add	r1, sp, #8
    824c:	9002      	str	r0, [sp, #8]
    824e:	6108      	str	r0, [r1, #16]
    8250:	480b      	ldr	r0, [pc, #44]	; (8280 <siprintf+0x3c>)
    8252:	2482      	movs	r4, #130	; 0x82
    8254:	6088      	str	r0, [r1, #8]
    8256:	6148      	str	r0, [r1, #20]
    8258:	2001      	movs	r0, #1
    825a:	4240      	negs	r0, r0
    825c:	ab1f      	add	r3, sp, #124	; 0x7c
    825e:	81c8      	strh	r0, [r1, #14]
    8260:	4808      	ldr	r0, [pc, #32]	; (8284 <siprintf+0x40>)
    8262:	cb04      	ldmia	r3!, {r2}
    8264:	00a4      	lsls	r4, r4, #2
    8266:	6800      	ldr	r0, [r0, #0]
    8268:	9301      	str	r3, [sp, #4]
    826a:	818c      	strh	r4, [r1, #12]
    826c:	f000 f8b0 	bl	83d0 <_svfiprintf_r>
    8270:	2300      	movs	r3, #0
    8272:	9a02      	ldr	r2, [sp, #8]
    8274:	7013      	strb	r3, [r2, #0]
    8276:	b01d      	add	sp, #116	; 0x74
    8278:	bc10      	pop	{r4}
    827a:	bc08      	pop	{r3}
    827c:	b003      	add	sp, #12
    827e:	4718      	bx	r3
    8280:	7fffffff 	.word	0x7fffffff
    8284:	20000094 	.word	0x20000094

00008288 <siscanf>:
    8288:	b40e      	push	{r1, r2, r3}
    828a:	2381      	movs	r3, #129	; 0x81
    828c:	b570      	push	{r4, r5, r6, lr}
    828e:	b09d      	sub	sp, #116	; 0x74
    8290:	ac02      	add	r4, sp, #8
    8292:	ad21      	add	r5, sp, #132	; 0x84
    8294:	009b      	lsls	r3, r3, #2
    8296:	cd40      	ldmia	r5!, {r6}
    8298:	81a3      	strh	r3, [r4, #12]
    829a:	9002      	str	r0, [sp, #8]
    829c:	9006      	str	r0, [sp, #24]
    829e:	f000 f81d 	bl	82dc <strlen>
    82a2:	4b0b      	ldr	r3, [pc, #44]	; (82d0 <siscanf+0x48>)
    82a4:	6060      	str	r0, [r4, #4]
    82a6:	6263      	str	r3, [r4, #36]	; 0x24
    82a8:	2300      	movs	r3, #0
    82aa:	6160      	str	r0, [r4, #20]
    82ac:	4809      	ldr	r0, [pc, #36]	; (82d4 <siscanf+0x4c>)
    82ae:	6363      	str	r3, [r4, #52]	; 0x34
    82b0:	64a3      	str	r3, [r4, #72]	; 0x48
    82b2:	3b01      	subs	r3, #1
    82b4:	81e3      	strh	r3, [r4, #14]
    82b6:	0032      	movs	r2, r6
    82b8:	002b      	movs	r3, r5
    82ba:	0021      	movs	r1, r4
    82bc:	6800      	ldr	r0, [r0, #0]
    82be:	9501      	str	r5, [sp, #4]
    82c0:	f000 f9e6 	bl	8690 <__ssvfiscanf_r>
    82c4:	b01d      	add	sp, #116	; 0x74
    82c6:	bc70      	pop	{r4, r5, r6}
    82c8:	bc08      	pop	{r3}
    82ca:	b003      	add	sp, #12
    82cc:	4718      	bx	r3
    82ce:	46c0      	nop			; (mov r8, r8)
    82d0:	000082d9 	.word	0x000082d9
    82d4:	20000094 	.word	0x20000094

000082d8 <__seofread>:
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr

000082dc <strlen>:
    82dc:	2300      	movs	r3, #0
    82de:	5cc2      	ldrb	r2, [r0, r3]
    82e0:	3301      	adds	r3, #1
    82e2:	2a00      	cmp	r2, #0
    82e4:	d1fb      	bne.n	82de <strlen+0x2>
    82e6:	1e58      	subs	r0, r3, #1
    82e8:	4770      	bx	lr

000082ea <strncmp>:
    82ea:	2300      	movs	r3, #0
    82ec:	b530      	push	{r4, r5, lr}
    82ee:	429a      	cmp	r2, r3
    82f0:	d00a      	beq.n	8308 <strncmp+0x1e>
    82f2:	3a01      	subs	r2, #1
    82f4:	5cc4      	ldrb	r4, [r0, r3]
    82f6:	5ccd      	ldrb	r5, [r1, r3]
    82f8:	42ac      	cmp	r4, r5
    82fa:	d104      	bne.n	8306 <strncmp+0x1c>
    82fc:	429a      	cmp	r2, r3
    82fe:	d002      	beq.n	8306 <strncmp+0x1c>
    8300:	3301      	adds	r3, #1
    8302:	2c00      	cmp	r4, #0
    8304:	d1f6      	bne.n	82f4 <strncmp+0xa>
    8306:	1b63      	subs	r3, r4, r5
    8308:	0018      	movs	r0, r3
    830a:	bd30      	pop	{r4, r5, pc}

0000830c <__ssputs_r>:
    830c:	b5f0      	push	{r4, r5, r6, r7, lr}
    830e:	688e      	ldr	r6, [r1, #8]
    8310:	b085      	sub	sp, #20
    8312:	0007      	movs	r7, r0
    8314:	000c      	movs	r4, r1
    8316:	9203      	str	r2, [sp, #12]
    8318:	9301      	str	r3, [sp, #4]
    831a:	429e      	cmp	r6, r3
    831c:	d839      	bhi.n	8392 <__ssputs_r+0x86>
    831e:	2390      	movs	r3, #144	; 0x90
    8320:	898a      	ldrh	r2, [r1, #12]
    8322:	00db      	lsls	r3, r3, #3
    8324:	421a      	tst	r2, r3
    8326:	d034      	beq.n	8392 <__ssputs_r+0x86>
    8328:	2503      	movs	r5, #3
    832a:	6909      	ldr	r1, [r1, #16]
    832c:	6823      	ldr	r3, [r4, #0]
    832e:	1a5b      	subs	r3, r3, r1
    8330:	9302      	str	r3, [sp, #8]
    8332:	6963      	ldr	r3, [r4, #20]
    8334:	9802      	ldr	r0, [sp, #8]
    8336:	435d      	muls	r5, r3
    8338:	0feb      	lsrs	r3, r5, #31
    833a:	195d      	adds	r5, r3, r5
    833c:	9b01      	ldr	r3, [sp, #4]
    833e:	106d      	asrs	r5, r5, #1
    8340:	3301      	adds	r3, #1
    8342:	181b      	adds	r3, r3, r0
    8344:	42ab      	cmp	r3, r5
    8346:	d900      	bls.n	834a <__ssputs_r+0x3e>
    8348:	001d      	movs	r5, r3
    834a:	0553      	lsls	r3, r2, #21
    834c:	d532      	bpl.n	83b4 <__ssputs_r+0xa8>
    834e:	0029      	movs	r1, r5
    8350:	0038      	movs	r0, r7
    8352:	f001 f839 	bl	93c8 <_malloc_r>
    8356:	1e06      	subs	r6, r0, #0
    8358:	d109      	bne.n	836e <__ssputs_r+0x62>
    835a:	230c      	movs	r3, #12
    835c:	603b      	str	r3, [r7, #0]
    835e:	2340      	movs	r3, #64	; 0x40
    8360:	2001      	movs	r0, #1
    8362:	89a2      	ldrh	r2, [r4, #12]
    8364:	4240      	negs	r0, r0
    8366:	4313      	orrs	r3, r2
    8368:	81a3      	strh	r3, [r4, #12]
    836a:	b005      	add	sp, #20
    836c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    836e:	9a02      	ldr	r2, [sp, #8]
    8370:	6921      	ldr	r1, [r4, #16]
    8372:	f7ff ff5d 	bl	8230 <memcpy>
    8376:	89a3      	ldrh	r3, [r4, #12]
    8378:	4a14      	ldr	r2, [pc, #80]	; (83cc <__ssputs_r+0xc0>)
    837a:	401a      	ands	r2, r3
    837c:	2380      	movs	r3, #128	; 0x80
    837e:	4313      	orrs	r3, r2
    8380:	81a3      	strh	r3, [r4, #12]
    8382:	9b02      	ldr	r3, [sp, #8]
    8384:	6126      	str	r6, [r4, #16]
    8386:	18f6      	adds	r6, r6, r3
    8388:	6026      	str	r6, [r4, #0]
    838a:	6165      	str	r5, [r4, #20]
    838c:	9e01      	ldr	r6, [sp, #4]
    838e:	1aed      	subs	r5, r5, r3
    8390:	60a5      	str	r5, [r4, #8]
    8392:	9b01      	ldr	r3, [sp, #4]
    8394:	42b3      	cmp	r3, r6
    8396:	d200      	bcs.n	839a <__ssputs_r+0x8e>
    8398:	001e      	movs	r6, r3
    839a:	0032      	movs	r2, r6
    839c:	9903      	ldr	r1, [sp, #12]
    839e:	6820      	ldr	r0, [r4, #0]
    83a0:	f000 ffb5 	bl	930e <memmove>
    83a4:	68a3      	ldr	r3, [r4, #8]
    83a6:	2000      	movs	r0, #0
    83a8:	1b9b      	subs	r3, r3, r6
    83aa:	60a3      	str	r3, [r4, #8]
    83ac:	6823      	ldr	r3, [r4, #0]
    83ae:	199e      	adds	r6, r3, r6
    83b0:	6026      	str	r6, [r4, #0]
    83b2:	e7da      	b.n	836a <__ssputs_r+0x5e>
    83b4:	002a      	movs	r2, r5
    83b6:	0038      	movs	r0, r7
    83b8:	f001 f864 	bl	9484 <_realloc_r>
    83bc:	1e06      	subs	r6, r0, #0
    83be:	d1e0      	bne.n	8382 <__ssputs_r+0x76>
    83c0:	6921      	ldr	r1, [r4, #16]
    83c2:	0038      	movs	r0, r7
    83c4:	f000 ffb6 	bl	9334 <_free_r>
    83c8:	e7c7      	b.n	835a <__ssputs_r+0x4e>
    83ca:	46c0      	nop			; (mov r8, r8)
    83cc:	fffffb7f 	.word	0xfffffb7f

000083d0 <_svfiprintf_r>:
    83d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    83d2:	b09f      	sub	sp, #124	; 0x7c
    83d4:	9002      	str	r0, [sp, #8]
    83d6:	9305      	str	r3, [sp, #20]
    83d8:	898b      	ldrh	r3, [r1, #12]
    83da:	000f      	movs	r7, r1
    83dc:	0016      	movs	r6, r2
    83de:	061b      	lsls	r3, r3, #24
    83e0:	d511      	bpl.n	8406 <_svfiprintf_r+0x36>
    83e2:	690b      	ldr	r3, [r1, #16]
    83e4:	2b00      	cmp	r3, #0
    83e6:	d10e      	bne.n	8406 <_svfiprintf_r+0x36>
    83e8:	2140      	movs	r1, #64	; 0x40
    83ea:	f000 ffed 	bl	93c8 <_malloc_r>
    83ee:	6038      	str	r0, [r7, #0]
    83f0:	6138      	str	r0, [r7, #16]
    83f2:	2800      	cmp	r0, #0
    83f4:	d105      	bne.n	8402 <_svfiprintf_r+0x32>
    83f6:	230c      	movs	r3, #12
    83f8:	9a02      	ldr	r2, [sp, #8]
    83fa:	3801      	subs	r0, #1
    83fc:	6013      	str	r3, [r2, #0]
    83fe:	b01f      	add	sp, #124	; 0x7c
    8400:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8402:	2340      	movs	r3, #64	; 0x40
    8404:	617b      	str	r3, [r7, #20]
    8406:	2300      	movs	r3, #0
    8408:	ad06      	add	r5, sp, #24
    840a:	616b      	str	r3, [r5, #20]
    840c:	3320      	adds	r3, #32
    840e:	766b      	strb	r3, [r5, #25]
    8410:	3310      	adds	r3, #16
    8412:	76ab      	strb	r3, [r5, #26]
    8414:	0034      	movs	r4, r6
    8416:	7823      	ldrb	r3, [r4, #0]
    8418:	2b00      	cmp	r3, #0
    841a:	d147      	bne.n	84ac <_svfiprintf_r+0xdc>
    841c:	1ba3      	subs	r3, r4, r6
    841e:	9304      	str	r3, [sp, #16]
    8420:	d00d      	beq.n	843e <_svfiprintf_r+0x6e>
    8422:	1ba3      	subs	r3, r4, r6
    8424:	0032      	movs	r2, r6
    8426:	0039      	movs	r1, r7
    8428:	9802      	ldr	r0, [sp, #8]
    842a:	f7ff ff6f 	bl	830c <__ssputs_r>
    842e:	1c43      	adds	r3, r0, #1
    8430:	d100      	bne.n	8434 <_svfiprintf_r+0x64>
    8432:	e0b5      	b.n	85a0 <_svfiprintf_r+0x1d0>
    8434:	696a      	ldr	r2, [r5, #20]
    8436:	9b04      	ldr	r3, [sp, #16]
    8438:	4694      	mov	ip, r2
    843a:	4463      	add	r3, ip
    843c:	616b      	str	r3, [r5, #20]
    843e:	7823      	ldrb	r3, [r4, #0]
    8440:	2b00      	cmp	r3, #0
    8442:	d100      	bne.n	8446 <_svfiprintf_r+0x76>
    8444:	e0ac      	b.n	85a0 <_svfiprintf_r+0x1d0>
    8446:	2201      	movs	r2, #1
    8448:	2300      	movs	r3, #0
    844a:	4252      	negs	r2, r2
    844c:	606a      	str	r2, [r5, #4]
    844e:	a902      	add	r1, sp, #8
    8450:	3254      	adds	r2, #84	; 0x54
    8452:	1852      	adds	r2, r2, r1
    8454:	3401      	adds	r4, #1
    8456:	602b      	str	r3, [r5, #0]
    8458:	60eb      	str	r3, [r5, #12]
    845a:	60ab      	str	r3, [r5, #8]
    845c:	7013      	strb	r3, [r2, #0]
    845e:	65ab      	str	r3, [r5, #88]	; 0x58
    8460:	4e58      	ldr	r6, [pc, #352]	; (85c4 <_svfiprintf_r+0x1f4>)
    8462:	2205      	movs	r2, #5
    8464:	7821      	ldrb	r1, [r4, #0]
    8466:	0030      	movs	r0, r6
    8468:	f000 ff46 	bl	92f8 <memchr>
    846c:	1c62      	adds	r2, r4, #1
    846e:	2800      	cmp	r0, #0
    8470:	d120      	bne.n	84b4 <_svfiprintf_r+0xe4>
    8472:	6829      	ldr	r1, [r5, #0]
    8474:	06cb      	lsls	r3, r1, #27
    8476:	d504      	bpl.n	8482 <_svfiprintf_r+0xb2>
    8478:	2353      	movs	r3, #83	; 0x53
    847a:	ae02      	add	r6, sp, #8
    847c:	3020      	adds	r0, #32
    847e:	199b      	adds	r3, r3, r6
    8480:	7018      	strb	r0, [r3, #0]
    8482:	070b      	lsls	r3, r1, #28
    8484:	d504      	bpl.n	8490 <_svfiprintf_r+0xc0>
    8486:	2353      	movs	r3, #83	; 0x53
    8488:	202b      	movs	r0, #43	; 0x2b
    848a:	ae02      	add	r6, sp, #8
    848c:	199b      	adds	r3, r3, r6
    848e:	7018      	strb	r0, [r3, #0]
    8490:	7823      	ldrb	r3, [r4, #0]
    8492:	2b2a      	cmp	r3, #42	; 0x2a
    8494:	d016      	beq.n	84c4 <_svfiprintf_r+0xf4>
    8496:	2000      	movs	r0, #0
    8498:	210a      	movs	r1, #10
    849a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    849c:	7822      	ldrb	r2, [r4, #0]
    849e:	3a30      	subs	r2, #48	; 0x30
    84a0:	2a09      	cmp	r2, #9
    84a2:	d955      	bls.n	8550 <_svfiprintf_r+0x180>
    84a4:	2800      	cmp	r0, #0
    84a6:	d015      	beq.n	84d4 <_svfiprintf_r+0x104>
    84a8:	9309      	str	r3, [sp, #36]	; 0x24
    84aa:	e013      	b.n	84d4 <_svfiprintf_r+0x104>
    84ac:	2b25      	cmp	r3, #37	; 0x25
    84ae:	d0b5      	beq.n	841c <_svfiprintf_r+0x4c>
    84b0:	3401      	adds	r4, #1
    84b2:	e7b0      	b.n	8416 <_svfiprintf_r+0x46>
    84b4:	2301      	movs	r3, #1
    84b6:	1b80      	subs	r0, r0, r6
    84b8:	4083      	lsls	r3, r0
    84ba:	6829      	ldr	r1, [r5, #0]
    84bc:	0014      	movs	r4, r2
    84be:	430b      	orrs	r3, r1
    84c0:	602b      	str	r3, [r5, #0]
    84c2:	e7cd      	b.n	8460 <_svfiprintf_r+0x90>
    84c4:	9b05      	ldr	r3, [sp, #20]
    84c6:	1d18      	adds	r0, r3, #4
    84c8:	681b      	ldr	r3, [r3, #0]
    84ca:	9005      	str	r0, [sp, #20]
    84cc:	2b00      	cmp	r3, #0
    84ce:	db39      	blt.n	8544 <_svfiprintf_r+0x174>
    84d0:	9309      	str	r3, [sp, #36]	; 0x24
    84d2:	0014      	movs	r4, r2
    84d4:	7823      	ldrb	r3, [r4, #0]
    84d6:	2b2e      	cmp	r3, #46	; 0x2e
    84d8:	d10b      	bne.n	84f2 <_svfiprintf_r+0x122>
    84da:	7863      	ldrb	r3, [r4, #1]
    84dc:	1c62      	adds	r2, r4, #1
    84de:	2b2a      	cmp	r3, #42	; 0x2a
    84e0:	d13e      	bne.n	8560 <_svfiprintf_r+0x190>
    84e2:	9b05      	ldr	r3, [sp, #20]
    84e4:	3402      	adds	r4, #2
    84e6:	1d1a      	adds	r2, r3, #4
    84e8:	681b      	ldr	r3, [r3, #0]
    84ea:	9205      	str	r2, [sp, #20]
    84ec:	2b00      	cmp	r3, #0
    84ee:	db34      	blt.n	855a <_svfiprintf_r+0x18a>
    84f0:	9307      	str	r3, [sp, #28]
    84f2:	4e35      	ldr	r6, [pc, #212]	; (85c8 <_svfiprintf_r+0x1f8>)
    84f4:	7821      	ldrb	r1, [r4, #0]
    84f6:	2203      	movs	r2, #3
    84f8:	0030      	movs	r0, r6
    84fa:	f000 fefd 	bl	92f8 <memchr>
    84fe:	2800      	cmp	r0, #0
    8500:	d006      	beq.n	8510 <_svfiprintf_r+0x140>
    8502:	2340      	movs	r3, #64	; 0x40
    8504:	1b80      	subs	r0, r0, r6
    8506:	4083      	lsls	r3, r0
    8508:	682a      	ldr	r2, [r5, #0]
    850a:	3401      	adds	r4, #1
    850c:	4313      	orrs	r3, r2
    850e:	602b      	str	r3, [r5, #0]
    8510:	7821      	ldrb	r1, [r4, #0]
    8512:	2206      	movs	r2, #6
    8514:	482d      	ldr	r0, [pc, #180]	; (85cc <_svfiprintf_r+0x1fc>)
    8516:	1c66      	adds	r6, r4, #1
    8518:	7629      	strb	r1, [r5, #24]
    851a:	f000 feed 	bl	92f8 <memchr>
    851e:	2800      	cmp	r0, #0
    8520:	d046      	beq.n	85b0 <_svfiprintf_r+0x1e0>
    8522:	4b2b      	ldr	r3, [pc, #172]	; (85d0 <_svfiprintf_r+0x200>)
    8524:	2b00      	cmp	r3, #0
    8526:	d12f      	bne.n	8588 <_svfiprintf_r+0x1b8>
    8528:	6829      	ldr	r1, [r5, #0]
    852a:	9b05      	ldr	r3, [sp, #20]
    852c:	2207      	movs	r2, #7
    852e:	05c9      	lsls	r1, r1, #23
    8530:	d528      	bpl.n	8584 <_svfiprintf_r+0x1b4>
    8532:	189b      	adds	r3, r3, r2
    8534:	4393      	bics	r3, r2
    8536:	3308      	adds	r3, #8
    8538:	9305      	str	r3, [sp, #20]
    853a:	696b      	ldr	r3, [r5, #20]
    853c:	9a03      	ldr	r2, [sp, #12]
    853e:	189b      	adds	r3, r3, r2
    8540:	616b      	str	r3, [r5, #20]
    8542:	e767      	b.n	8414 <_svfiprintf_r+0x44>
    8544:	425b      	negs	r3, r3
    8546:	60eb      	str	r3, [r5, #12]
    8548:	2302      	movs	r3, #2
    854a:	430b      	orrs	r3, r1
    854c:	602b      	str	r3, [r5, #0]
    854e:	e7c0      	b.n	84d2 <_svfiprintf_r+0x102>
    8550:	434b      	muls	r3, r1
    8552:	3401      	adds	r4, #1
    8554:	189b      	adds	r3, r3, r2
    8556:	2001      	movs	r0, #1
    8558:	e7a0      	b.n	849c <_svfiprintf_r+0xcc>
    855a:	2301      	movs	r3, #1
    855c:	425b      	negs	r3, r3
    855e:	e7c7      	b.n	84f0 <_svfiprintf_r+0x120>
    8560:	2300      	movs	r3, #0
    8562:	0014      	movs	r4, r2
    8564:	200a      	movs	r0, #10
    8566:	001a      	movs	r2, r3
    8568:	606b      	str	r3, [r5, #4]
    856a:	7821      	ldrb	r1, [r4, #0]
    856c:	3930      	subs	r1, #48	; 0x30
    856e:	2909      	cmp	r1, #9
    8570:	d903      	bls.n	857a <_svfiprintf_r+0x1aa>
    8572:	2b00      	cmp	r3, #0
    8574:	d0bd      	beq.n	84f2 <_svfiprintf_r+0x122>
    8576:	9207      	str	r2, [sp, #28]
    8578:	e7bb      	b.n	84f2 <_svfiprintf_r+0x122>
    857a:	4342      	muls	r2, r0
    857c:	3401      	adds	r4, #1
    857e:	1852      	adds	r2, r2, r1
    8580:	2301      	movs	r3, #1
    8582:	e7f2      	b.n	856a <_svfiprintf_r+0x19a>
    8584:	3307      	adds	r3, #7
    8586:	e7d5      	b.n	8534 <_svfiprintf_r+0x164>
    8588:	ab05      	add	r3, sp, #20
    858a:	9300      	str	r3, [sp, #0]
    858c:	003a      	movs	r2, r7
    858e:	4b11      	ldr	r3, [pc, #68]	; (85d4 <_svfiprintf_r+0x204>)
    8590:	0029      	movs	r1, r5
    8592:	9802      	ldr	r0, [sp, #8]
    8594:	e000      	b.n	8598 <_svfiprintf_r+0x1c8>
    8596:	bf00      	nop
    8598:	9003      	str	r0, [sp, #12]
    859a:	9b03      	ldr	r3, [sp, #12]
    859c:	3301      	adds	r3, #1
    859e:	d1cc      	bne.n	853a <_svfiprintf_r+0x16a>
    85a0:	89bb      	ldrh	r3, [r7, #12]
    85a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    85a4:	065b      	lsls	r3, r3, #25
    85a6:	d400      	bmi.n	85aa <_svfiprintf_r+0x1da>
    85a8:	e729      	b.n	83fe <_svfiprintf_r+0x2e>
    85aa:	2001      	movs	r0, #1
    85ac:	4240      	negs	r0, r0
    85ae:	e726      	b.n	83fe <_svfiprintf_r+0x2e>
    85b0:	ab05      	add	r3, sp, #20
    85b2:	9300      	str	r3, [sp, #0]
    85b4:	003a      	movs	r2, r7
    85b6:	4b07      	ldr	r3, [pc, #28]	; (85d4 <_svfiprintf_r+0x204>)
    85b8:	0029      	movs	r1, r5
    85ba:	9802      	ldr	r0, [sp, #8]
    85bc:	f000 fa5c 	bl	8a78 <_printf_i>
    85c0:	e7ea      	b.n	8598 <_svfiprintf_r+0x1c8>
    85c2:	46c0      	nop			; (mov r8, r8)
    85c4:	00009b6c 	.word	0x00009b6c
    85c8:	00009b72 	.word	0x00009b72
    85cc:	00009b76 	.word	0x00009b76
    85d0:	00000000 	.word	0x00000000
    85d4:	0000830d 	.word	0x0000830d

000085d8 <_sungetc_r>:
    85d8:	b570      	push	{r4, r5, r6, lr}
    85da:	0014      	movs	r4, r2
    85dc:	1c4b      	adds	r3, r1, #1
    85de:	d103      	bne.n	85e8 <_sungetc_r+0x10>
    85e0:	2501      	movs	r5, #1
    85e2:	426d      	negs	r5, r5
    85e4:	0028      	movs	r0, r5
    85e6:	bd70      	pop	{r4, r5, r6, pc}
    85e8:	8993      	ldrh	r3, [r2, #12]
    85ea:	2220      	movs	r2, #32
    85ec:	4393      	bics	r3, r2
    85ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
    85f0:	81a3      	strh	r3, [r4, #12]
    85f2:	b2ce      	uxtb	r6, r1
    85f4:	b2cd      	uxtb	r5, r1
    85f6:	6863      	ldr	r3, [r4, #4]
    85f8:	2a00      	cmp	r2, #0
    85fa:	d010      	beq.n	861e <_sungetc_r+0x46>
    85fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    85fe:	4293      	cmp	r3, r2
    8600:	da07      	bge.n	8612 <_sungetc_r+0x3a>
    8602:	6823      	ldr	r3, [r4, #0]
    8604:	3b01      	subs	r3, #1
    8606:	6023      	str	r3, [r4, #0]
    8608:	701e      	strb	r6, [r3, #0]
    860a:	6863      	ldr	r3, [r4, #4]
    860c:	3301      	adds	r3, #1
    860e:	6063      	str	r3, [r4, #4]
    8610:	e7e8      	b.n	85e4 <_sungetc_r+0xc>
    8612:	0021      	movs	r1, r4
    8614:	f000 fe0e 	bl	9234 <__submore>
    8618:	2800      	cmp	r0, #0
    861a:	d0f2      	beq.n	8602 <_sungetc_r+0x2a>
    861c:	e7e0      	b.n	85e0 <_sungetc_r+0x8>
    861e:	6921      	ldr	r1, [r4, #16]
    8620:	6822      	ldr	r2, [r4, #0]
    8622:	2900      	cmp	r1, #0
    8624:	d007      	beq.n	8636 <_sungetc_r+0x5e>
    8626:	4291      	cmp	r1, r2
    8628:	d205      	bcs.n	8636 <_sungetc_r+0x5e>
    862a:	1e51      	subs	r1, r2, #1
    862c:	7808      	ldrb	r0, [r1, #0]
    862e:	4285      	cmp	r5, r0
    8630:	d101      	bne.n	8636 <_sungetc_r+0x5e>
    8632:	6021      	str	r1, [r4, #0]
    8634:	e7ea      	b.n	860c <_sungetc_r+0x34>
    8636:	6423      	str	r3, [r4, #64]	; 0x40
    8638:	0023      	movs	r3, r4
    863a:	3344      	adds	r3, #68	; 0x44
    863c:	6363      	str	r3, [r4, #52]	; 0x34
    863e:	2303      	movs	r3, #3
    8640:	63a3      	str	r3, [r4, #56]	; 0x38
    8642:	0023      	movs	r3, r4
    8644:	3346      	adds	r3, #70	; 0x46
    8646:	63e2      	str	r2, [r4, #60]	; 0x3c
    8648:	701e      	strb	r6, [r3, #0]
    864a:	6023      	str	r3, [r4, #0]
    864c:	2301      	movs	r3, #1
    864e:	e7de      	b.n	860e <_sungetc_r+0x36>

00008650 <__ssrefill_r>:
    8650:	b510      	push	{r4, lr}
    8652:	000c      	movs	r4, r1
    8654:	6b49      	ldr	r1, [r1, #52]	; 0x34
    8656:	2900      	cmp	r1, #0
    8658:	d00e      	beq.n	8678 <__ssrefill_r+0x28>
    865a:	0023      	movs	r3, r4
    865c:	3344      	adds	r3, #68	; 0x44
    865e:	4299      	cmp	r1, r3
    8660:	d001      	beq.n	8666 <__ssrefill_r+0x16>
    8662:	f000 fe67 	bl	9334 <_free_r>
    8666:	2000      	movs	r0, #0
    8668:	6c23      	ldr	r3, [r4, #64]	; 0x40
    866a:	6360      	str	r0, [r4, #52]	; 0x34
    866c:	6063      	str	r3, [r4, #4]
    866e:	4283      	cmp	r3, r0
    8670:	d002      	beq.n	8678 <__ssrefill_r+0x28>
    8672:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    8674:	6023      	str	r3, [r4, #0]
    8676:	bd10      	pop	{r4, pc}
    8678:	6923      	ldr	r3, [r4, #16]
    867a:	2001      	movs	r0, #1
    867c:	6023      	str	r3, [r4, #0]
    867e:	2300      	movs	r3, #0
    8680:	89a2      	ldrh	r2, [r4, #12]
    8682:	6063      	str	r3, [r4, #4]
    8684:	3320      	adds	r3, #32
    8686:	4313      	orrs	r3, r2
    8688:	81a3      	strh	r3, [r4, #12]
    868a:	4240      	negs	r0, r0
    868c:	e7f3      	b.n	8676 <__ssrefill_r+0x26>
	...

00008690 <__ssvfiscanf_r>:
    8690:	b5f0      	push	{r4, r5, r6, r7, lr}
    8692:	4cbd      	ldr	r4, [pc, #756]	; (8988 <__ssvfiscanf_r+0x2f8>)
    8694:	2586      	movs	r5, #134	; 0x86
    8696:	44a5      	add	sp, r4
    8698:	9303      	str	r3, [sp, #12]
    869a:	2300      	movs	r3, #0
    869c:	9348      	str	r3, [sp, #288]	; 0x120
    869e:	9349      	str	r3, [sp, #292]	; 0x124
    86a0:	ab05      	add	r3, sp, #20
    86a2:	934a      	str	r3, [sp, #296]	; 0x128
    86a4:	23be      	movs	r3, #190	; 0xbe
    86a6:	006d      	lsls	r5, r5, #1
    86a8:	9000      	str	r0, [sp, #0]
    86aa:	000c      	movs	r4, r1
    86ac:	a802      	add	r0, sp, #8
    86ae:	49b7      	ldr	r1, [pc, #732]	; (898c <__ssvfiscanf_r+0x2fc>)
    86b0:	005b      	lsls	r3, r3, #1
    86b2:	1940      	adds	r0, r0, r5
    86b4:	27c0      	movs	r7, #192	; 0xc0
    86b6:	50c1      	str	r1, [r0, r3]
    86b8:	ab02      	add	r3, sp, #8
    86ba:	195b      	adds	r3, r3, r5
    86bc:	0015      	movs	r5, r2
    86be:	49b4      	ldr	r1, [pc, #720]	; (8990 <__ssvfiscanf_r+0x300>)
    86c0:	007f      	lsls	r7, r7, #1
    86c2:	51d9      	str	r1, [r3, r7]
    86c4:	782b      	ldrb	r3, [r5, #0]
    86c6:	2b00      	cmp	r3, #0
    86c8:	d100      	bne.n	86cc <__ssvfiscanf_r+0x3c>
    86ca:	e15b      	b.n	8984 <__ssvfiscanf_r+0x2f4>
    86cc:	f000 fdf4 	bl	92b8 <__locale_ctype_ptr>
    86d0:	2208      	movs	r2, #8
    86d2:	782b      	ldrb	r3, [r5, #0]
    86d4:	18c0      	adds	r0, r0, r3
    86d6:	9301      	str	r3, [sp, #4]
    86d8:	7843      	ldrb	r3, [r0, #1]
    86da:	4013      	ands	r3, r2
    86dc:	d141      	bne.n	8762 <__ssvfiscanf_r+0xd2>
    86de:	9a01      	ldr	r2, [sp, #4]
    86e0:	1c6e      	adds	r6, r5, #1
    86e2:	2a25      	cmp	r2, #37	; 0x25
    86e4:	d000      	beq.n	86e8 <__ssvfiscanf_r+0x58>
    86e6:	e0a8      	b.n	883a <__ssvfiscanf_r+0x1aa>
    86e8:	9347      	str	r3, [sp, #284]	; 0x11c
    86ea:	9345      	str	r3, [sp, #276]	; 0x114
    86ec:	786b      	ldrb	r3, [r5, #1]
    86ee:	2b2a      	cmp	r3, #42	; 0x2a
    86f0:	d102      	bne.n	86f8 <__ssvfiscanf_r+0x68>
    86f2:	3b1a      	subs	r3, #26
    86f4:	9345      	str	r3, [sp, #276]	; 0x114
    86f6:	1cae      	adds	r6, r5, #2
    86f8:	0035      	movs	r5, r6
    86fa:	220a      	movs	r2, #10
    86fc:	7829      	ldrb	r1, [r5, #0]
    86fe:	000b      	movs	r3, r1
    8700:	3b30      	subs	r3, #48	; 0x30
    8702:	2b09      	cmp	r3, #9
    8704:	d948      	bls.n	8798 <__ssvfiscanf_r+0x108>
    8706:	4ea3      	ldr	r6, [pc, #652]	; (8994 <__ssvfiscanf_r+0x304>)
    8708:	2203      	movs	r2, #3
    870a:	0030      	movs	r0, r6
    870c:	f000 fdf4 	bl	92f8 <memchr>
    8710:	2800      	cmp	r0, #0
    8712:	d007      	beq.n	8724 <__ssvfiscanf_r+0x94>
    8714:	2301      	movs	r3, #1
    8716:	1b80      	subs	r0, r0, r6
    8718:	4083      	lsls	r3, r0
    871a:	9a45      	ldr	r2, [sp, #276]	; 0x114
    871c:	3501      	adds	r5, #1
    871e:	4313      	orrs	r3, r2
    8720:	9202      	str	r2, [sp, #8]
    8722:	9345      	str	r3, [sp, #276]	; 0x114
    8724:	782b      	ldrb	r3, [r5, #0]
    8726:	1c6e      	adds	r6, r5, #1
    8728:	2b67      	cmp	r3, #103	; 0x67
    872a:	d858      	bhi.n	87de <__ssvfiscanf_r+0x14e>
    872c:	2b65      	cmp	r3, #101	; 0x65
    872e:	d300      	bcc.n	8732 <__ssvfiscanf_r+0xa2>
    8730:	e0dd      	b.n	88ee <__ssvfiscanf_r+0x25e>
    8732:	2b47      	cmp	r3, #71	; 0x47
    8734:	d838      	bhi.n	87a8 <__ssvfiscanf_r+0x118>
    8736:	2b45      	cmp	r3, #69	; 0x45
    8738:	d300      	bcc.n	873c <__ssvfiscanf_r+0xac>
    873a:	e0d8      	b.n	88ee <__ssvfiscanf_r+0x25e>
    873c:	2b00      	cmp	r3, #0
    873e:	d100      	bne.n	8742 <__ssvfiscanf_r+0xb2>
    8740:	e11d      	b.n	897e <__ssvfiscanf_r+0x2ee>
    8742:	2b25      	cmp	r3, #37	; 0x25
    8744:	d079      	beq.n	883a <__ssvfiscanf_r+0x1aa>
    8746:	2303      	movs	r3, #3
    8748:	934b      	str	r3, [sp, #300]	; 0x12c
    874a:	3307      	adds	r3, #7
    874c:	9346      	str	r3, [sp, #280]	; 0x118
    874e:	e053      	b.n	87f8 <__ssvfiscanf_r+0x168>
    8750:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8752:	3301      	adds	r3, #1
    8754:	9201      	str	r2, [sp, #4]
    8756:	3201      	adds	r2, #1
    8758:	9249      	str	r2, [sp, #292]	; 0x124
    875a:	6862      	ldr	r2, [r4, #4]
    875c:	6023      	str	r3, [r4, #0]
    875e:	3a01      	subs	r2, #1
    8760:	6062      	str	r2, [r4, #4]
    8762:	6863      	ldr	r3, [r4, #4]
    8764:	2b00      	cmp	r3, #0
    8766:	dd0b      	ble.n	8780 <__ssvfiscanf_r+0xf0>
    8768:	f000 fda6 	bl	92b8 <__locale_ctype_ptr>
    876c:	2108      	movs	r1, #8
    876e:	6823      	ldr	r3, [r4, #0]
    8770:	781a      	ldrb	r2, [r3, #0]
    8772:	1880      	adds	r0, r0, r2
    8774:	7842      	ldrb	r2, [r0, #1]
    8776:	420a      	tst	r2, r1
    8778:	d1ea      	bne.n	8750 <__ssvfiscanf_r+0xc0>
    877a:	1c6e      	adds	r6, r5, #1
    877c:	0035      	movs	r5, r6
    877e:	e7a1      	b.n	86c4 <__ssvfiscanf_r+0x34>
    8780:	2286      	movs	r2, #134	; 0x86
    8782:	ab02      	add	r3, sp, #8
    8784:	0052      	lsls	r2, r2, #1
    8786:	189b      	adds	r3, r3, r2
    8788:	59db      	ldr	r3, [r3, r7]
    878a:	0021      	movs	r1, r4
    878c:	9800      	ldr	r0, [sp, #0]
    878e:	9301      	str	r3, [sp, #4]
    8790:	4798      	blx	r3
    8792:	2800      	cmp	r0, #0
    8794:	d0e8      	beq.n	8768 <__ssvfiscanf_r+0xd8>
    8796:	e7f0      	b.n	877a <__ssvfiscanf_r+0xea>
    8798:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    879a:	3501      	adds	r5, #1
    879c:	9302      	str	r3, [sp, #8]
    879e:	4353      	muls	r3, r2
    87a0:	3b30      	subs	r3, #48	; 0x30
    87a2:	1859      	adds	r1, r3, r1
    87a4:	9147      	str	r1, [sp, #284]	; 0x11c
    87a6:	e7a9      	b.n	86fc <__ssvfiscanf_r+0x6c>
    87a8:	2b5b      	cmp	r3, #91	; 0x5b
    87aa:	d100      	bne.n	87ae <__ssvfiscanf_r+0x11e>
    87ac:	e077      	b.n	889e <__ssvfiscanf_r+0x20e>
    87ae:	d80f      	bhi.n	87d0 <__ssvfiscanf_r+0x140>
    87b0:	2b58      	cmp	r3, #88	; 0x58
    87b2:	d1c8      	bne.n	8746 <__ssvfiscanf_r+0xb6>
    87b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
    87b6:	9201      	str	r2, [sp, #4]
    87b8:	2280      	movs	r2, #128	; 0x80
    87ba:	9901      	ldr	r1, [sp, #4]
    87bc:	0092      	lsls	r2, r2, #2
    87be:	430a      	orrs	r2, r1
    87c0:	9245      	str	r2, [sp, #276]	; 0x114
    87c2:	2210      	movs	r2, #16
    87c4:	9246      	str	r2, [sp, #280]	; 0x118
    87c6:	2203      	movs	r2, #3
    87c8:	2b6e      	cmp	r3, #110	; 0x6e
    87ca:	dd14      	ble.n	87f6 <__ssvfiscanf_r+0x166>
    87cc:	3201      	adds	r2, #1
    87ce:	e012      	b.n	87f6 <__ssvfiscanf_r+0x166>
    87d0:	2b63      	cmp	r3, #99	; 0x63
    87d2:	d100      	bne.n	87d6 <__ssvfiscanf_r+0x146>
    87d4:	e071      	b.n	88ba <__ssvfiscanf_r+0x22a>
    87d6:	2b64      	cmp	r3, #100	; 0x64
    87d8:	d1b5      	bne.n	8746 <__ssvfiscanf_r+0xb6>
    87da:	220a      	movs	r2, #10
    87dc:	e7f2      	b.n	87c4 <__ssvfiscanf_r+0x134>
    87de:	2b70      	cmp	r3, #112	; 0x70
    87e0:	d052      	beq.n	8888 <__ssvfiscanf_r+0x1f8>
    87e2:	d822      	bhi.n	882a <__ssvfiscanf_r+0x19a>
    87e4:	2b6e      	cmp	r3, #110	; 0x6e
    87e6:	d100      	bne.n	87ea <__ssvfiscanf_r+0x15a>
    87e8:	e06f      	b.n	88ca <__ssvfiscanf_r+0x23a>
    87ea:	d854      	bhi.n	8896 <__ssvfiscanf_r+0x206>
    87ec:	2b69      	cmp	r3, #105	; 0x69
    87ee:	d1aa      	bne.n	8746 <__ssvfiscanf_r+0xb6>
    87f0:	2300      	movs	r3, #0
    87f2:	2203      	movs	r2, #3
    87f4:	9346      	str	r3, [sp, #280]	; 0x118
    87f6:	924b      	str	r2, [sp, #300]	; 0x12c
    87f8:	6863      	ldr	r3, [r4, #4]
    87fa:	2b00      	cmp	r3, #0
    87fc:	dc00      	bgt.n	8800 <__ssvfiscanf_r+0x170>
    87fe:	e078      	b.n	88f2 <__ssvfiscanf_r+0x262>
    8800:	9b45      	ldr	r3, [sp, #276]	; 0x114
    8802:	9301      	str	r3, [sp, #4]
    8804:	065b      	lsls	r3, r3, #25
    8806:	d400      	bmi.n	880a <__ssvfiscanf_r+0x17a>
    8808:	e08b      	b.n	8922 <__ssvfiscanf_r+0x292>
    880a:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    880c:	2b02      	cmp	r3, #2
    880e:	dd00      	ble.n	8812 <__ssvfiscanf_r+0x182>
    8810:	e09d      	b.n	894e <__ssvfiscanf_r+0x2be>
    8812:	ab03      	add	r3, sp, #12
    8814:	0022      	movs	r2, r4
    8816:	a945      	add	r1, sp, #276	; 0x114
    8818:	9800      	ldr	r0, [sp, #0]
    881a:	f000 fa47 	bl	8cac <_scanf_chars>
    881e:	2801      	cmp	r0, #1
    8820:	d100      	bne.n	8824 <__ssvfiscanf_r+0x194>
    8822:	e0af      	b.n	8984 <__ssvfiscanf_r+0x2f4>
    8824:	2802      	cmp	r0, #2
    8826:	d1a9      	bne.n	877c <__ssvfiscanf_r+0xec>
    8828:	e025      	b.n	8876 <__ssvfiscanf_r+0x1e6>
    882a:	2b75      	cmp	r3, #117	; 0x75
    882c:	d0d5      	beq.n	87da <__ssvfiscanf_r+0x14a>
    882e:	2b78      	cmp	r3, #120	; 0x78
    8830:	d0c0      	beq.n	87b4 <__ssvfiscanf_r+0x124>
    8832:	2b73      	cmp	r3, #115	; 0x73
    8834:	d187      	bne.n	8746 <__ssvfiscanf_r+0xb6>
    8836:	2302      	movs	r3, #2
    8838:	e03d      	b.n	88b6 <__ssvfiscanf_r+0x226>
    883a:	6863      	ldr	r3, [r4, #4]
    883c:	2b00      	cmp	r3, #0
    883e:	dd0f      	ble.n	8860 <__ssvfiscanf_r+0x1d0>
    8840:	6823      	ldr	r3, [r4, #0]
    8842:	9901      	ldr	r1, [sp, #4]
    8844:	781a      	ldrb	r2, [r3, #0]
    8846:	4291      	cmp	r1, r2
    8848:	d000      	beq.n	884c <__ssvfiscanf_r+0x1bc>
    884a:	e09b      	b.n	8984 <__ssvfiscanf_r+0x2f4>
    884c:	3301      	adds	r3, #1
    884e:	6862      	ldr	r2, [r4, #4]
    8850:	6023      	str	r3, [r4, #0]
    8852:	9b49      	ldr	r3, [sp, #292]	; 0x124
    8854:	3a01      	subs	r2, #1
    8856:	9301      	str	r3, [sp, #4]
    8858:	3301      	adds	r3, #1
    885a:	6062      	str	r2, [r4, #4]
    885c:	9349      	str	r3, [sp, #292]	; 0x124
    885e:	e78d      	b.n	877c <__ssvfiscanf_r+0xec>
    8860:	2286      	movs	r2, #134	; 0x86
    8862:	ab02      	add	r3, sp, #8
    8864:	0052      	lsls	r2, r2, #1
    8866:	189b      	adds	r3, r3, r2
    8868:	59db      	ldr	r3, [r3, r7]
    886a:	0021      	movs	r1, r4
    886c:	9800      	ldr	r0, [sp, #0]
    886e:	9302      	str	r3, [sp, #8]
    8870:	4798      	blx	r3
    8872:	2800      	cmp	r0, #0
    8874:	d0e4      	beq.n	8840 <__ssvfiscanf_r+0x1b0>
    8876:	9848      	ldr	r0, [sp, #288]	; 0x120
    8878:	2800      	cmp	r0, #0
    887a:	d000      	beq.n	887e <__ssvfiscanf_r+0x1ee>
    887c:	e07b      	b.n	8976 <__ssvfiscanf_r+0x2e6>
    887e:	3801      	subs	r0, #1
    8880:	23a7      	movs	r3, #167	; 0xa7
    8882:	009b      	lsls	r3, r3, #2
    8884:	449d      	add	sp, r3
    8886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8888:	9a45      	ldr	r2, [sp, #276]	; 0x114
    888a:	9201      	str	r2, [sp, #4]
    888c:	2220      	movs	r2, #32
    888e:	9901      	ldr	r1, [sp, #4]
    8890:	430a      	orrs	r2, r1
    8892:	9245      	str	r2, [sp, #276]	; 0x114
    8894:	e78e      	b.n	87b4 <__ssvfiscanf_r+0x124>
    8896:	2308      	movs	r3, #8
    8898:	2204      	movs	r2, #4
    889a:	9346      	str	r3, [sp, #280]	; 0x118
    889c:	e7ab      	b.n	87f6 <__ssvfiscanf_r+0x166>
    889e:	0031      	movs	r1, r6
    88a0:	a805      	add	r0, sp, #20
    88a2:	f000 fb67 	bl	8f74 <__sccl>
    88a6:	9b45      	ldr	r3, [sp, #276]	; 0x114
    88a8:	0006      	movs	r6, r0
    88aa:	9301      	str	r3, [sp, #4]
    88ac:	2340      	movs	r3, #64	; 0x40
    88ae:	9a01      	ldr	r2, [sp, #4]
    88b0:	4313      	orrs	r3, r2
    88b2:	9345      	str	r3, [sp, #276]	; 0x114
    88b4:	2301      	movs	r3, #1
    88b6:	934b      	str	r3, [sp, #300]	; 0x12c
    88b8:	e79e      	b.n	87f8 <__ssvfiscanf_r+0x168>
    88ba:	9b45      	ldr	r3, [sp, #276]	; 0x114
    88bc:	9301      	str	r3, [sp, #4]
    88be:	2340      	movs	r3, #64	; 0x40
    88c0:	9a01      	ldr	r2, [sp, #4]
    88c2:	4313      	orrs	r3, r2
    88c4:	9345      	str	r3, [sp, #276]	; 0x114
    88c6:	2300      	movs	r3, #0
    88c8:	e7f5      	b.n	88b6 <__ssvfiscanf_r+0x226>
    88ca:	9945      	ldr	r1, [sp, #276]	; 0x114
    88cc:	06cb      	lsls	r3, r1, #27
    88ce:	d500      	bpl.n	88d2 <__ssvfiscanf_r+0x242>
    88d0:	e754      	b.n	877c <__ssvfiscanf_r+0xec>
    88d2:	9b03      	ldr	r3, [sp, #12]
    88d4:	9a49      	ldr	r2, [sp, #292]	; 0x124
    88d6:	07c8      	lsls	r0, r1, #31
    88d8:	d504      	bpl.n	88e4 <__ssvfiscanf_r+0x254>
    88da:	1d19      	adds	r1, r3, #4
    88dc:	9103      	str	r1, [sp, #12]
    88de:	681b      	ldr	r3, [r3, #0]
    88e0:	801a      	strh	r2, [r3, #0]
    88e2:	e74b      	b.n	877c <__ssvfiscanf_r+0xec>
    88e4:	1d19      	adds	r1, r3, #4
    88e6:	9103      	str	r1, [sp, #12]
    88e8:	681b      	ldr	r3, [r3, #0]
    88ea:	601a      	str	r2, [r3, #0]
    88ec:	e746      	b.n	877c <__ssvfiscanf_r+0xec>
    88ee:	2305      	movs	r3, #5
    88f0:	e7e1      	b.n	88b6 <__ssvfiscanf_r+0x226>
    88f2:	2286      	movs	r2, #134	; 0x86
    88f4:	ab02      	add	r3, sp, #8
    88f6:	0052      	lsls	r2, r2, #1
    88f8:	189b      	adds	r3, r3, r2
    88fa:	59db      	ldr	r3, [r3, r7]
    88fc:	0021      	movs	r1, r4
    88fe:	9800      	ldr	r0, [sp, #0]
    8900:	9301      	str	r3, [sp, #4]
    8902:	4798      	blx	r3
    8904:	2800      	cmp	r0, #0
    8906:	d100      	bne.n	890a <__ssvfiscanf_r+0x27a>
    8908:	e77a      	b.n	8800 <__ssvfiscanf_r+0x170>
    890a:	e7b4      	b.n	8876 <__ssvfiscanf_r+0x1e6>
    890c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    890e:	9201      	str	r2, [sp, #4]
    8910:	3201      	adds	r2, #1
    8912:	9249      	str	r2, [sp, #292]	; 0x124
    8914:	6862      	ldr	r2, [r4, #4]
    8916:	3a01      	subs	r2, #1
    8918:	6062      	str	r2, [r4, #4]
    891a:	2a00      	cmp	r2, #0
    891c:	dd0b      	ble.n	8936 <__ssvfiscanf_r+0x2a6>
    891e:	3301      	adds	r3, #1
    8920:	6023      	str	r3, [r4, #0]
    8922:	f000 fcc9 	bl	92b8 <__locale_ctype_ptr>
    8926:	2108      	movs	r1, #8
    8928:	6823      	ldr	r3, [r4, #0]
    892a:	781a      	ldrb	r2, [r3, #0]
    892c:	1880      	adds	r0, r0, r2
    892e:	7842      	ldrb	r2, [r0, #1]
    8930:	420a      	tst	r2, r1
    8932:	d1eb      	bne.n	890c <__ssvfiscanf_r+0x27c>
    8934:	e769      	b.n	880a <__ssvfiscanf_r+0x17a>
    8936:	2286      	movs	r2, #134	; 0x86
    8938:	ab02      	add	r3, sp, #8
    893a:	0052      	lsls	r2, r2, #1
    893c:	189b      	adds	r3, r3, r2
    893e:	59db      	ldr	r3, [r3, r7]
    8940:	0021      	movs	r1, r4
    8942:	9800      	ldr	r0, [sp, #0]
    8944:	9301      	str	r3, [sp, #4]
    8946:	4798      	blx	r3
    8948:	2800      	cmp	r0, #0
    894a:	d0ea      	beq.n	8922 <__ssvfiscanf_r+0x292>
    894c:	e793      	b.n	8876 <__ssvfiscanf_r+0x1e6>
    894e:	2b04      	cmp	r3, #4
    8950:	dc06      	bgt.n	8960 <__ssvfiscanf_r+0x2d0>
    8952:	ab03      	add	r3, sp, #12
    8954:	0022      	movs	r2, r4
    8956:	a945      	add	r1, sp, #276	; 0x114
    8958:	9800      	ldr	r0, [sp, #0]
    895a:	f000 fa0b 	bl	8d74 <_scanf_i>
    895e:	e75e      	b.n	881e <__ssvfiscanf_r+0x18e>
    8960:	4b0d      	ldr	r3, [pc, #52]	; (8998 <__ssvfiscanf_r+0x308>)
    8962:	2b00      	cmp	r3, #0
    8964:	d100      	bne.n	8968 <__ssvfiscanf_r+0x2d8>
    8966:	e709      	b.n	877c <__ssvfiscanf_r+0xec>
    8968:	ab03      	add	r3, sp, #12
    896a:	0022      	movs	r2, r4
    896c:	a945      	add	r1, sp, #276	; 0x114
    896e:	9800      	ldr	r0, [sp, #0]
    8970:	e000      	b.n	8974 <__ssvfiscanf_r+0x2e4>
    8972:	bf00      	nop
    8974:	e753      	b.n	881e <__ssvfiscanf_r+0x18e>
    8976:	89a3      	ldrh	r3, [r4, #12]
    8978:	065b      	lsls	r3, r3, #25
    897a:	d400      	bmi.n	897e <__ssvfiscanf_r+0x2ee>
    897c:	e780      	b.n	8880 <__ssvfiscanf_r+0x1f0>
    897e:	2001      	movs	r0, #1
    8980:	4240      	negs	r0, r0
    8982:	e77d      	b.n	8880 <__ssvfiscanf_r+0x1f0>
    8984:	9848      	ldr	r0, [sp, #288]	; 0x120
    8986:	e77b      	b.n	8880 <__ssvfiscanf_r+0x1f0>
    8988:	fffffd64 	.word	0xfffffd64
    898c:	000085d9 	.word	0x000085d9
    8990:	00008651 	.word	0x00008651
    8994:	00009b72 	.word	0x00009b72
    8998:	00000000 	.word	0x00000000

0000899c <_printf_common>:
    899c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    899e:	0015      	movs	r5, r2
    89a0:	9301      	str	r3, [sp, #4]
    89a2:	688a      	ldr	r2, [r1, #8]
    89a4:	690b      	ldr	r3, [r1, #16]
    89a6:	9000      	str	r0, [sp, #0]
    89a8:	000c      	movs	r4, r1
    89aa:	4293      	cmp	r3, r2
    89ac:	da00      	bge.n	89b0 <_printf_common+0x14>
    89ae:	0013      	movs	r3, r2
    89b0:	0022      	movs	r2, r4
    89b2:	602b      	str	r3, [r5, #0]
    89b4:	3243      	adds	r2, #67	; 0x43
    89b6:	7812      	ldrb	r2, [r2, #0]
    89b8:	2a00      	cmp	r2, #0
    89ba:	d001      	beq.n	89c0 <_printf_common+0x24>
    89bc:	3301      	adds	r3, #1
    89be:	602b      	str	r3, [r5, #0]
    89c0:	6823      	ldr	r3, [r4, #0]
    89c2:	069b      	lsls	r3, r3, #26
    89c4:	d502      	bpl.n	89cc <_printf_common+0x30>
    89c6:	682b      	ldr	r3, [r5, #0]
    89c8:	3302      	adds	r3, #2
    89ca:	602b      	str	r3, [r5, #0]
    89cc:	2706      	movs	r7, #6
    89ce:	6823      	ldr	r3, [r4, #0]
    89d0:	401f      	ands	r7, r3
    89d2:	d027      	beq.n	8a24 <_printf_common+0x88>
    89d4:	0023      	movs	r3, r4
    89d6:	3343      	adds	r3, #67	; 0x43
    89d8:	781b      	ldrb	r3, [r3, #0]
    89da:	1e5a      	subs	r2, r3, #1
    89dc:	4193      	sbcs	r3, r2
    89de:	6822      	ldr	r2, [r4, #0]
    89e0:	0692      	lsls	r2, r2, #26
    89e2:	d430      	bmi.n	8a46 <_printf_common+0xaa>
    89e4:	0022      	movs	r2, r4
    89e6:	9901      	ldr	r1, [sp, #4]
    89e8:	3243      	adds	r2, #67	; 0x43
    89ea:	9800      	ldr	r0, [sp, #0]
    89ec:	9e08      	ldr	r6, [sp, #32]
    89ee:	47b0      	blx	r6
    89f0:	1c43      	adds	r3, r0, #1
    89f2:	d025      	beq.n	8a40 <_printf_common+0xa4>
    89f4:	2306      	movs	r3, #6
    89f6:	6820      	ldr	r0, [r4, #0]
    89f8:	682a      	ldr	r2, [r5, #0]
    89fa:	68e1      	ldr	r1, [r4, #12]
    89fc:	4003      	ands	r3, r0
    89fe:	2500      	movs	r5, #0
    8a00:	2b04      	cmp	r3, #4
    8a02:	d103      	bne.n	8a0c <_printf_common+0x70>
    8a04:	1a8d      	subs	r5, r1, r2
    8a06:	43eb      	mvns	r3, r5
    8a08:	17db      	asrs	r3, r3, #31
    8a0a:	401d      	ands	r5, r3
    8a0c:	68a3      	ldr	r3, [r4, #8]
    8a0e:	6922      	ldr	r2, [r4, #16]
    8a10:	4293      	cmp	r3, r2
    8a12:	dd01      	ble.n	8a18 <_printf_common+0x7c>
    8a14:	1a9b      	subs	r3, r3, r2
    8a16:	18ed      	adds	r5, r5, r3
    8a18:	2700      	movs	r7, #0
    8a1a:	42bd      	cmp	r5, r7
    8a1c:	d120      	bne.n	8a60 <_printf_common+0xc4>
    8a1e:	2000      	movs	r0, #0
    8a20:	e010      	b.n	8a44 <_printf_common+0xa8>
    8a22:	3701      	adds	r7, #1
    8a24:	68e3      	ldr	r3, [r4, #12]
    8a26:	682a      	ldr	r2, [r5, #0]
    8a28:	1a9b      	subs	r3, r3, r2
    8a2a:	429f      	cmp	r7, r3
    8a2c:	dad2      	bge.n	89d4 <_printf_common+0x38>
    8a2e:	0022      	movs	r2, r4
    8a30:	2301      	movs	r3, #1
    8a32:	3219      	adds	r2, #25
    8a34:	9901      	ldr	r1, [sp, #4]
    8a36:	9800      	ldr	r0, [sp, #0]
    8a38:	9e08      	ldr	r6, [sp, #32]
    8a3a:	47b0      	blx	r6
    8a3c:	1c43      	adds	r3, r0, #1
    8a3e:	d1f0      	bne.n	8a22 <_printf_common+0x86>
    8a40:	2001      	movs	r0, #1
    8a42:	4240      	negs	r0, r0
    8a44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8a46:	2030      	movs	r0, #48	; 0x30
    8a48:	18e1      	adds	r1, r4, r3
    8a4a:	3143      	adds	r1, #67	; 0x43
    8a4c:	7008      	strb	r0, [r1, #0]
    8a4e:	0021      	movs	r1, r4
    8a50:	1c5a      	adds	r2, r3, #1
    8a52:	3145      	adds	r1, #69	; 0x45
    8a54:	7809      	ldrb	r1, [r1, #0]
    8a56:	18a2      	adds	r2, r4, r2
    8a58:	3243      	adds	r2, #67	; 0x43
    8a5a:	3302      	adds	r3, #2
    8a5c:	7011      	strb	r1, [r2, #0]
    8a5e:	e7c1      	b.n	89e4 <_printf_common+0x48>
    8a60:	0022      	movs	r2, r4
    8a62:	2301      	movs	r3, #1
    8a64:	321a      	adds	r2, #26
    8a66:	9901      	ldr	r1, [sp, #4]
    8a68:	9800      	ldr	r0, [sp, #0]
    8a6a:	9e08      	ldr	r6, [sp, #32]
    8a6c:	47b0      	blx	r6
    8a6e:	1c43      	adds	r3, r0, #1
    8a70:	d0e6      	beq.n	8a40 <_printf_common+0xa4>
    8a72:	3701      	adds	r7, #1
    8a74:	e7d1      	b.n	8a1a <_printf_common+0x7e>
	...

00008a78 <_printf_i>:
    8a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a7a:	b08b      	sub	sp, #44	; 0x2c
    8a7c:	9206      	str	r2, [sp, #24]
    8a7e:	000a      	movs	r2, r1
    8a80:	3243      	adds	r2, #67	; 0x43
    8a82:	9307      	str	r3, [sp, #28]
    8a84:	9005      	str	r0, [sp, #20]
    8a86:	9204      	str	r2, [sp, #16]
    8a88:	7e0a      	ldrb	r2, [r1, #24]
    8a8a:	000c      	movs	r4, r1
    8a8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8a8e:	2a6e      	cmp	r2, #110	; 0x6e
    8a90:	d100      	bne.n	8a94 <_printf_i+0x1c>
    8a92:	e08f      	b.n	8bb4 <_printf_i+0x13c>
    8a94:	d817      	bhi.n	8ac6 <_printf_i+0x4e>
    8a96:	2a63      	cmp	r2, #99	; 0x63
    8a98:	d02c      	beq.n	8af4 <_printf_i+0x7c>
    8a9a:	d808      	bhi.n	8aae <_printf_i+0x36>
    8a9c:	2a00      	cmp	r2, #0
    8a9e:	d100      	bne.n	8aa2 <_printf_i+0x2a>
    8aa0:	e099      	b.n	8bd6 <_printf_i+0x15e>
    8aa2:	2a58      	cmp	r2, #88	; 0x58
    8aa4:	d054      	beq.n	8b50 <_printf_i+0xd8>
    8aa6:	0026      	movs	r6, r4
    8aa8:	3642      	adds	r6, #66	; 0x42
    8aaa:	7032      	strb	r2, [r6, #0]
    8aac:	e029      	b.n	8b02 <_printf_i+0x8a>
    8aae:	2a64      	cmp	r2, #100	; 0x64
    8ab0:	d001      	beq.n	8ab6 <_printf_i+0x3e>
    8ab2:	2a69      	cmp	r2, #105	; 0x69
    8ab4:	d1f7      	bne.n	8aa6 <_printf_i+0x2e>
    8ab6:	6821      	ldr	r1, [r4, #0]
    8ab8:	681a      	ldr	r2, [r3, #0]
    8aba:	0608      	lsls	r0, r1, #24
    8abc:	d523      	bpl.n	8b06 <_printf_i+0x8e>
    8abe:	1d11      	adds	r1, r2, #4
    8ac0:	6019      	str	r1, [r3, #0]
    8ac2:	6815      	ldr	r5, [r2, #0]
    8ac4:	e025      	b.n	8b12 <_printf_i+0x9a>
    8ac6:	2a73      	cmp	r2, #115	; 0x73
    8ac8:	d100      	bne.n	8acc <_printf_i+0x54>
    8aca:	e088      	b.n	8bde <_printf_i+0x166>
    8acc:	d808      	bhi.n	8ae0 <_printf_i+0x68>
    8ace:	2a6f      	cmp	r2, #111	; 0x6f
    8ad0:	d029      	beq.n	8b26 <_printf_i+0xae>
    8ad2:	2a70      	cmp	r2, #112	; 0x70
    8ad4:	d1e7      	bne.n	8aa6 <_printf_i+0x2e>
    8ad6:	2220      	movs	r2, #32
    8ad8:	6809      	ldr	r1, [r1, #0]
    8ada:	430a      	orrs	r2, r1
    8adc:	6022      	str	r2, [r4, #0]
    8ade:	e003      	b.n	8ae8 <_printf_i+0x70>
    8ae0:	2a75      	cmp	r2, #117	; 0x75
    8ae2:	d020      	beq.n	8b26 <_printf_i+0xae>
    8ae4:	2a78      	cmp	r2, #120	; 0x78
    8ae6:	d1de      	bne.n	8aa6 <_printf_i+0x2e>
    8ae8:	0022      	movs	r2, r4
    8aea:	2178      	movs	r1, #120	; 0x78
    8aec:	3245      	adds	r2, #69	; 0x45
    8aee:	7011      	strb	r1, [r2, #0]
    8af0:	4a6c      	ldr	r2, [pc, #432]	; (8ca4 <_printf_i+0x22c>)
    8af2:	e030      	b.n	8b56 <_printf_i+0xde>
    8af4:	000e      	movs	r6, r1
    8af6:	681a      	ldr	r2, [r3, #0]
    8af8:	3642      	adds	r6, #66	; 0x42
    8afa:	1d11      	adds	r1, r2, #4
    8afc:	6019      	str	r1, [r3, #0]
    8afe:	6813      	ldr	r3, [r2, #0]
    8b00:	7033      	strb	r3, [r6, #0]
    8b02:	2301      	movs	r3, #1
    8b04:	e079      	b.n	8bfa <_printf_i+0x182>
    8b06:	0649      	lsls	r1, r1, #25
    8b08:	d5d9      	bpl.n	8abe <_printf_i+0x46>
    8b0a:	1d11      	adds	r1, r2, #4
    8b0c:	6019      	str	r1, [r3, #0]
    8b0e:	2300      	movs	r3, #0
    8b10:	5ed5      	ldrsh	r5, [r2, r3]
    8b12:	2d00      	cmp	r5, #0
    8b14:	da03      	bge.n	8b1e <_printf_i+0xa6>
    8b16:	232d      	movs	r3, #45	; 0x2d
    8b18:	9a04      	ldr	r2, [sp, #16]
    8b1a:	426d      	negs	r5, r5
    8b1c:	7013      	strb	r3, [r2, #0]
    8b1e:	4b62      	ldr	r3, [pc, #392]	; (8ca8 <_printf_i+0x230>)
    8b20:	270a      	movs	r7, #10
    8b22:	9303      	str	r3, [sp, #12]
    8b24:	e02f      	b.n	8b86 <_printf_i+0x10e>
    8b26:	6820      	ldr	r0, [r4, #0]
    8b28:	6819      	ldr	r1, [r3, #0]
    8b2a:	0605      	lsls	r5, r0, #24
    8b2c:	d503      	bpl.n	8b36 <_printf_i+0xbe>
    8b2e:	1d08      	adds	r0, r1, #4
    8b30:	6018      	str	r0, [r3, #0]
    8b32:	680d      	ldr	r5, [r1, #0]
    8b34:	e005      	b.n	8b42 <_printf_i+0xca>
    8b36:	0640      	lsls	r0, r0, #25
    8b38:	d5f9      	bpl.n	8b2e <_printf_i+0xb6>
    8b3a:	680d      	ldr	r5, [r1, #0]
    8b3c:	1d08      	adds	r0, r1, #4
    8b3e:	6018      	str	r0, [r3, #0]
    8b40:	b2ad      	uxth	r5, r5
    8b42:	4b59      	ldr	r3, [pc, #356]	; (8ca8 <_printf_i+0x230>)
    8b44:	2708      	movs	r7, #8
    8b46:	9303      	str	r3, [sp, #12]
    8b48:	2a6f      	cmp	r2, #111	; 0x6f
    8b4a:	d018      	beq.n	8b7e <_printf_i+0x106>
    8b4c:	270a      	movs	r7, #10
    8b4e:	e016      	b.n	8b7e <_printf_i+0x106>
    8b50:	3145      	adds	r1, #69	; 0x45
    8b52:	700a      	strb	r2, [r1, #0]
    8b54:	4a54      	ldr	r2, [pc, #336]	; (8ca8 <_printf_i+0x230>)
    8b56:	9203      	str	r2, [sp, #12]
    8b58:	681a      	ldr	r2, [r3, #0]
    8b5a:	6821      	ldr	r1, [r4, #0]
    8b5c:	1d10      	adds	r0, r2, #4
    8b5e:	6018      	str	r0, [r3, #0]
    8b60:	6815      	ldr	r5, [r2, #0]
    8b62:	0608      	lsls	r0, r1, #24
    8b64:	d522      	bpl.n	8bac <_printf_i+0x134>
    8b66:	07cb      	lsls	r3, r1, #31
    8b68:	d502      	bpl.n	8b70 <_printf_i+0xf8>
    8b6a:	2320      	movs	r3, #32
    8b6c:	4319      	orrs	r1, r3
    8b6e:	6021      	str	r1, [r4, #0]
    8b70:	2710      	movs	r7, #16
    8b72:	2d00      	cmp	r5, #0
    8b74:	d103      	bne.n	8b7e <_printf_i+0x106>
    8b76:	2320      	movs	r3, #32
    8b78:	6822      	ldr	r2, [r4, #0]
    8b7a:	439a      	bics	r2, r3
    8b7c:	6022      	str	r2, [r4, #0]
    8b7e:	0023      	movs	r3, r4
    8b80:	2200      	movs	r2, #0
    8b82:	3343      	adds	r3, #67	; 0x43
    8b84:	701a      	strb	r2, [r3, #0]
    8b86:	6863      	ldr	r3, [r4, #4]
    8b88:	60a3      	str	r3, [r4, #8]
    8b8a:	2b00      	cmp	r3, #0
    8b8c:	db5c      	blt.n	8c48 <_printf_i+0x1d0>
    8b8e:	2204      	movs	r2, #4
    8b90:	6821      	ldr	r1, [r4, #0]
    8b92:	4391      	bics	r1, r2
    8b94:	6021      	str	r1, [r4, #0]
    8b96:	2d00      	cmp	r5, #0
    8b98:	d158      	bne.n	8c4c <_printf_i+0x1d4>
    8b9a:	9e04      	ldr	r6, [sp, #16]
    8b9c:	2b00      	cmp	r3, #0
    8b9e:	d064      	beq.n	8c6a <_printf_i+0x1f2>
    8ba0:	0026      	movs	r6, r4
    8ba2:	9b03      	ldr	r3, [sp, #12]
    8ba4:	3642      	adds	r6, #66	; 0x42
    8ba6:	781b      	ldrb	r3, [r3, #0]
    8ba8:	7033      	strb	r3, [r6, #0]
    8baa:	e05e      	b.n	8c6a <_printf_i+0x1f2>
    8bac:	0648      	lsls	r0, r1, #25
    8bae:	d5da      	bpl.n	8b66 <_printf_i+0xee>
    8bb0:	b2ad      	uxth	r5, r5
    8bb2:	e7d8      	b.n	8b66 <_printf_i+0xee>
    8bb4:	6809      	ldr	r1, [r1, #0]
    8bb6:	681a      	ldr	r2, [r3, #0]
    8bb8:	0608      	lsls	r0, r1, #24
    8bba:	d505      	bpl.n	8bc8 <_printf_i+0x150>
    8bbc:	1d11      	adds	r1, r2, #4
    8bbe:	6019      	str	r1, [r3, #0]
    8bc0:	6813      	ldr	r3, [r2, #0]
    8bc2:	6962      	ldr	r2, [r4, #20]
    8bc4:	601a      	str	r2, [r3, #0]
    8bc6:	e006      	b.n	8bd6 <_printf_i+0x15e>
    8bc8:	0649      	lsls	r1, r1, #25
    8bca:	d5f7      	bpl.n	8bbc <_printf_i+0x144>
    8bcc:	1d11      	adds	r1, r2, #4
    8bce:	6019      	str	r1, [r3, #0]
    8bd0:	6813      	ldr	r3, [r2, #0]
    8bd2:	8aa2      	ldrh	r2, [r4, #20]
    8bd4:	801a      	strh	r2, [r3, #0]
    8bd6:	2300      	movs	r3, #0
    8bd8:	9e04      	ldr	r6, [sp, #16]
    8bda:	6123      	str	r3, [r4, #16]
    8bdc:	e054      	b.n	8c88 <_printf_i+0x210>
    8bde:	681a      	ldr	r2, [r3, #0]
    8be0:	1d11      	adds	r1, r2, #4
    8be2:	6019      	str	r1, [r3, #0]
    8be4:	6816      	ldr	r6, [r2, #0]
    8be6:	2100      	movs	r1, #0
    8be8:	6862      	ldr	r2, [r4, #4]
    8bea:	0030      	movs	r0, r6
    8bec:	f000 fb84 	bl	92f8 <memchr>
    8bf0:	2800      	cmp	r0, #0
    8bf2:	d001      	beq.n	8bf8 <_printf_i+0x180>
    8bf4:	1b80      	subs	r0, r0, r6
    8bf6:	6060      	str	r0, [r4, #4]
    8bf8:	6863      	ldr	r3, [r4, #4]
    8bfa:	6123      	str	r3, [r4, #16]
    8bfc:	2300      	movs	r3, #0
    8bfe:	9a04      	ldr	r2, [sp, #16]
    8c00:	7013      	strb	r3, [r2, #0]
    8c02:	e041      	b.n	8c88 <_printf_i+0x210>
    8c04:	6923      	ldr	r3, [r4, #16]
    8c06:	0032      	movs	r2, r6
    8c08:	9906      	ldr	r1, [sp, #24]
    8c0a:	9805      	ldr	r0, [sp, #20]
    8c0c:	9d07      	ldr	r5, [sp, #28]
    8c0e:	47a8      	blx	r5
    8c10:	1c43      	adds	r3, r0, #1
    8c12:	d043      	beq.n	8c9c <_printf_i+0x224>
    8c14:	6823      	ldr	r3, [r4, #0]
    8c16:	2500      	movs	r5, #0
    8c18:	079b      	lsls	r3, r3, #30
    8c1a:	d40f      	bmi.n	8c3c <_printf_i+0x1c4>
    8c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8c1e:	68e0      	ldr	r0, [r4, #12]
    8c20:	4298      	cmp	r0, r3
    8c22:	da3d      	bge.n	8ca0 <_printf_i+0x228>
    8c24:	0018      	movs	r0, r3
    8c26:	e03b      	b.n	8ca0 <_printf_i+0x228>
    8c28:	0022      	movs	r2, r4
    8c2a:	2301      	movs	r3, #1
    8c2c:	3219      	adds	r2, #25
    8c2e:	9906      	ldr	r1, [sp, #24]
    8c30:	9805      	ldr	r0, [sp, #20]
    8c32:	9e07      	ldr	r6, [sp, #28]
    8c34:	47b0      	blx	r6
    8c36:	1c43      	adds	r3, r0, #1
    8c38:	d030      	beq.n	8c9c <_printf_i+0x224>
    8c3a:	3501      	adds	r5, #1
    8c3c:	68e3      	ldr	r3, [r4, #12]
    8c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8c40:	1a9b      	subs	r3, r3, r2
    8c42:	429d      	cmp	r5, r3
    8c44:	dbf0      	blt.n	8c28 <_printf_i+0x1b0>
    8c46:	e7e9      	b.n	8c1c <_printf_i+0x1a4>
    8c48:	2d00      	cmp	r5, #0
    8c4a:	d0a9      	beq.n	8ba0 <_printf_i+0x128>
    8c4c:	9e04      	ldr	r6, [sp, #16]
    8c4e:	0028      	movs	r0, r5
    8c50:	0039      	movs	r1, r7
    8c52:	f7fd fc5f 	bl	6514 <__aeabi_uidivmod>
    8c56:	9b03      	ldr	r3, [sp, #12]
    8c58:	3e01      	subs	r6, #1
    8c5a:	5c5b      	ldrb	r3, [r3, r1]
    8c5c:	0028      	movs	r0, r5
    8c5e:	7033      	strb	r3, [r6, #0]
    8c60:	0039      	movs	r1, r7
    8c62:	f7fd fbd1 	bl	6408 <__udivsi3>
    8c66:	1e05      	subs	r5, r0, #0
    8c68:	d1f1      	bne.n	8c4e <_printf_i+0x1d6>
    8c6a:	2f08      	cmp	r7, #8
    8c6c:	d109      	bne.n	8c82 <_printf_i+0x20a>
    8c6e:	6823      	ldr	r3, [r4, #0]
    8c70:	07db      	lsls	r3, r3, #31
    8c72:	d506      	bpl.n	8c82 <_printf_i+0x20a>
    8c74:	6863      	ldr	r3, [r4, #4]
    8c76:	6922      	ldr	r2, [r4, #16]
    8c78:	4293      	cmp	r3, r2
    8c7a:	dc02      	bgt.n	8c82 <_printf_i+0x20a>
    8c7c:	2330      	movs	r3, #48	; 0x30
    8c7e:	3e01      	subs	r6, #1
    8c80:	7033      	strb	r3, [r6, #0]
    8c82:	9b04      	ldr	r3, [sp, #16]
    8c84:	1b9b      	subs	r3, r3, r6
    8c86:	6123      	str	r3, [r4, #16]
    8c88:	9b07      	ldr	r3, [sp, #28]
    8c8a:	aa09      	add	r2, sp, #36	; 0x24
    8c8c:	9300      	str	r3, [sp, #0]
    8c8e:	0021      	movs	r1, r4
    8c90:	9b06      	ldr	r3, [sp, #24]
    8c92:	9805      	ldr	r0, [sp, #20]
    8c94:	f7ff fe82 	bl	899c <_printf_common>
    8c98:	1c43      	adds	r3, r0, #1
    8c9a:	d1b3      	bne.n	8c04 <_printf_i+0x18c>
    8c9c:	2001      	movs	r0, #1
    8c9e:	4240      	negs	r0, r0
    8ca0:	b00b      	add	sp, #44	; 0x2c
    8ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ca4:	00009b8e 	.word	0x00009b8e
    8ca8:	00009b7d 	.word	0x00009b7d

00008cac <_scanf_chars>:
    8cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8cae:	0015      	movs	r5, r2
    8cb0:	688a      	ldr	r2, [r1, #8]
    8cb2:	9001      	str	r0, [sp, #4]
    8cb4:	000c      	movs	r4, r1
    8cb6:	2a00      	cmp	r2, #0
    8cb8:	d106      	bne.n	8cc8 <_scanf_chars+0x1c>
    8cba:	698a      	ldr	r2, [r1, #24]
    8cbc:	1e51      	subs	r1, r2, #1
    8cbe:	418a      	sbcs	r2, r1
    8cc0:	2101      	movs	r1, #1
    8cc2:	4252      	negs	r2, r2
    8cc4:	430a      	orrs	r2, r1
    8cc6:	60a2      	str	r2, [r4, #8]
    8cc8:	6822      	ldr	r2, [r4, #0]
    8cca:	06d2      	lsls	r2, r2, #27
    8ccc:	d403      	bmi.n	8cd6 <_scanf_chars+0x2a>
    8cce:	681a      	ldr	r2, [r3, #0]
    8cd0:	1d11      	adds	r1, r2, #4
    8cd2:	6019      	str	r1, [r3, #0]
    8cd4:	6817      	ldr	r7, [r2, #0]
    8cd6:	2600      	movs	r6, #0
    8cd8:	69a3      	ldr	r3, [r4, #24]
    8cda:	2b00      	cmp	r3, #0
    8cdc:	d01c      	beq.n	8d18 <_scanf_chars+0x6c>
    8cde:	2b01      	cmp	r3, #1
    8ce0:	d108      	bne.n	8cf4 <_scanf_chars+0x48>
    8ce2:	682b      	ldr	r3, [r5, #0]
    8ce4:	6962      	ldr	r2, [r4, #20]
    8ce6:	781b      	ldrb	r3, [r3, #0]
    8ce8:	5cd3      	ldrb	r3, [r2, r3]
    8cea:	2b00      	cmp	r3, #0
    8cec:	d114      	bne.n	8d18 <_scanf_chars+0x6c>
    8cee:	2e00      	cmp	r6, #0
    8cf0:	d130      	bne.n	8d54 <_scanf_chars+0xa8>
    8cf2:	e006      	b.n	8d02 <_scanf_chars+0x56>
    8cf4:	2b02      	cmp	r3, #2
    8cf6:	d006      	beq.n	8d06 <_scanf_chars+0x5a>
    8cf8:	2e00      	cmp	r6, #0
    8cfa:	d12b      	bne.n	8d54 <_scanf_chars+0xa8>
    8cfc:	69a3      	ldr	r3, [r4, #24]
    8cfe:	2b01      	cmp	r3, #1
    8d00:	d128      	bne.n	8d54 <_scanf_chars+0xa8>
    8d02:	2001      	movs	r0, #1
    8d04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8d06:	f000 fad7 	bl	92b8 <__locale_ctype_ptr>
    8d0a:	2208      	movs	r2, #8
    8d0c:	682b      	ldr	r3, [r5, #0]
    8d0e:	781b      	ldrb	r3, [r3, #0]
    8d10:	18c0      	adds	r0, r0, r3
    8d12:	7843      	ldrb	r3, [r0, #1]
    8d14:	4213      	tst	r3, r2
    8d16:	d1ef      	bne.n	8cf8 <_scanf_chars+0x4c>
    8d18:	2210      	movs	r2, #16
    8d1a:	6823      	ldr	r3, [r4, #0]
    8d1c:	3601      	adds	r6, #1
    8d1e:	4213      	tst	r3, r2
    8d20:	d103      	bne.n	8d2a <_scanf_chars+0x7e>
    8d22:	682b      	ldr	r3, [r5, #0]
    8d24:	781b      	ldrb	r3, [r3, #0]
    8d26:	703b      	strb	r3, [r7, #0]
    8d28:	3701      	adds	r7, #1
    8d2a:	682a      	ldr	r2, [r5, #0]
    8d2c:	686b      	ldr	r3, [r5, #4]
    8d2e:	3201      	adds	r2, #1
    8d30:	602a      	str	r2, [r5, #0]
    8d32:	68a2      	ldr	r2, [r4, #8]
    8d34:	3b01      	subs	r3, #1
    8d36:	3a01      	subs	r2, #1
    8d38:	606b      	str	r3, [r5, #4]
    8d3a:	60a2      	str	r2, [r4, #8]
    8d3c:	2a00      	cmp	r2, #0
    8d3e:	d009      	beq.n	8d54 <_scanf_chars+0xa8>
    8d40:	2b00      	cmp	r3, #0
    8d42:	dcc9      	bgt.n	8cd8 <_scanf_chars+0x2c>
    8d44:	23c0      	movs	r3, #192	; 0xc0
    8d46:	005b      	lsls	r3, r3, #1
    8d48:	58e3      	ldr	r3, [r4, r3]
    8d4a:	0029      	movs	r1, r5
    8d4c:	9801      	ldr	r0, [sp, #4]
    8d4e:	4798      	blx	r3
    8d50:	2800      	cmp	r0, #0
    8d52:	d0c1      	beq.n	8cd8 <_scanf_chars+0x2c>
    8d54:	2310      	movs	r3, #16
    8d56:	6822      	ldr	r2, [r4, #0]
    8d58:	4013      	ands	r3, r2
    8d5a:	d106      	bne.n	8d6a <_scanf_chars+0xbe>
    8d5c:	68e2      	ldr	r2, [r4, #12]
    8d5e:	3201      	adds	r2, #1
    8d60:	60e2      	str	r2, [r4, #12]
    8d62:	69a2      	ldr	r2, [r4, #24]
    8d64:	2a00      	cmp	r2, #0
    8d66:	d000      	beq.n	8d6a <_scanf_chars+0xbe>
    8d68:	703b      	strb	r3, [r7, #0]
    8d6a:	6923      	ldr	r3, [r4, #16]
    8d6c:	2000      	movs	r0, #0
    8d6e:	199e      	adds	r6, r3, r6
    8d70:	6126      	str	r6, [r4, #16]
    8d72:	e7c7      	b.n	8d04 <_scanf_chars+0x58>

00008d74 <_scanf_i>:
    8d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d76:	000c      	movs	r4, r1
    8d78:	b08d      	sub	sp, #52	; 0x34
    8d7a:	9302      	str	r3, [sp, #8]
    8d7c:	4b77      	ldr	r3, [pc, #476]	; (8f5c <_scanf_i+0x1e8>)
    8d7e:	9005      	str	r0, [sp, #20]
    8d80:	0016      	movs	r6, r2
    8d82:	aa09      	add	r2, sp, #36	; 0x24
    8d84:	cb23      	ldmia	r3!, {r0, r1, r5}
    8d86:	c223      	stmia	r2!, {r0, r1, r5}
    8d88:	4b75      	ldr	r3, [pc, #468]	; (8f60 <_scanf_i+0x1ec>)
    8d8a:	9306      	str	r3, [sp, #24]
    8d8c:	69a3      	ldr	r3, [r4, #24]
    8d8e:	2b03      	cmp	r3, #3
    8d90:	d001      	beq.n	8d96 <_scanf_i+0x22>
    8d92:	4b74      	ldr	r3, [pc, #464]	; (8f64 <_scanf_i+0x1f0>)
    8d94:	9306      	str	r3, [sp, #24]
    8d96:	22ae      	movs	r2, #174	; 0xae
    8d98:	2000      	movs	r0, #0
    8d9a:	68a3      	ldr	r3, [r4, #8]
    8d9c:	0052      	lsls	r2, r2, #1
    8d9e:	1e59      	subs	r1, r3, #1
    8da0:	9004      	str	r0, [sp, #16]
    8da2:	4291      	cmp	r1, r2
    8da4:	d905      	bls.n	8db2 <_scanf_i+0x3e>
    8da6:	3b5e      	subs	r3, #94	; 0x5e
    8da8:	3bff      	subs	r3, #255	; 0xff
    8daa:	9304      	str	r3, [sp, #16]
    8dac:	235e      	movs	r3, #94	; 0x5e
    8dae:	33ff      	adds	r3, #255	; 0xff
    8db0:	60a3      	str	r3, [r4, #8]
    8db2:	0023      	movs	r3, r4
    8db4:	331c      	adds	r3, #28
    8db6:	9301      	str	r3, [sp, #4]
    8db8:	23d0      	movs	r3, #208	; 0xd0
    8dba:	2700      	movs	r7, #0
    8dbc:	6822      	ldr	r2, [r4, #0]
    8dbe:	011b      	lsls	r3, r3, #4
    8dc0:	4313      	orrs	r3, r2
    8dc2:	6023      	str	r3, [r4, #0]
    8dc4:	9b01      	ldr	r3, [sp, #4]
    8dc6:	9303      	str	r3, [sp, #12]
    8dc8:	6833      	ldr	r3, [r6, #0]
    8dca:	a809      	add	r0, sp, #36	; 0x24
    8dcc:	7819      	ldrb	r1, [r3, #0]
    8dce:	00bb      	lsls	r3, r7, #2
    8dd0:	2202      	movs	r2, #2
    8dd2:	5818      	ldr	r0, [r3, r0]
    8dd4:	f000 fa90 	bl	92f8 <memchr>
    8dd8:	2800      	cmp	r0, #0
    8dda:	d02b      	beq.n	8e34 <_scanf_i+0xc0>
    8ddc:	2f01      	cmp	r7, #1
    8dde:	d15f      	bne.n	8ea0 <_scanf_i+0x12c>
    8de0:	6863      	ldr	r3, [r4, #4]
    8de2:	2b00      	cmp	r3, #0
    8de4:	d106      	bne.n	8df4 <_scanf_i+0x80>
    8de6:	3308      	adds	r3, #8
    8de8:	6822      	ldr	r2, [r4, #0]
    8dea:	6063      	str	r3, [r4, #4]
    8dec:	33f9      	adds	r3, #249	; 0xf9
    8dee:	33ff      	adds	r3, #255	; 0xff
    8df0:	4313      	orrs	r3, r2
    8df2:	6023      	str	r3, [r4, #0]
    8df4:	4b5c      	ldr	r3, [pc, #368]	; (8f68 <_scanf_i+0x1f4>)
    8df6:	6822      	ldr	r2, [r4, #0]
    8df8:	4013      	ands	r3, r2
    8dfa:	6023      	str	r3, [r4, #0]
    8dfc:	68a3      	ldr	r3, [r4, #8]
    8dfe:	1e5a      	subs	r2, r3, #1
    8e00:	60a2      	str	r2, [r4, #8]
    8e02:	2b00      	cmp	r3, #0
    8e04:	d016      	beq.n	8e34 <_scanf_i+0xc0>
    8e06:	9b03      	ldr	r3, [sp, #12]
    8e08:	1c5d      	adds	r5, r3, #1
    8e0a:	6833      	ldr	r3, [r6, #0]
    8e0c:	1c5a      	adds	r2, r3, #1
    8e0e:	6032      	str	r2, [r6, #0]
    8e10:	781b      	ldrb	r3, [r3, #0]
    8e12:	9a03      	ldr	r2, [sp, #12]
    8e14:	9503      	str	r5, [sp, #12]
    8e16:	7013      	strb	r3, [r2, #0]
    8e18:	6873      	ldr	r3, [r6, #4]
    8e1a:	3b01      	subs	r3, #1
    8e1c:	6073      	str	r3, [r6, #4]
    8e1e:	2b00      	cmp	r3, #0
    8e20:	dc08      	bgt.n	8e34 <_scanf_i+0xc0>
    8e22:	23c0      	movs	r3, #192	; 0xc0
    8e24:	005b      	lsls	r3, r3, #1
    8e26:	58e3      	ldr	r3, [r4, r3]
    8e28:	0031      	movs	r1, r6
    8e2a:	9805      	ldr	r0, [sp, #20]
    8e2c:	9307      	str	r3, [sp, #28]
    8e2e:	4798      	blx	r3
    8e30:	2800      	cmp	r0, #0
    8e32:	d17d      	bne.n	8f30 <_scanf_i+0x1bc>
    8e34:	3701      	adds	r7, #1
    8e36:	2f03      	cmp	r7, #3
    8e38:	d1c6      	bne.n	8dc8 <_scanf_i+0x54>
    8e3a:	6863      	ldr	r3, [r4, #4]
    8e3c:	2b00      	cmp	r3, #0
    8e3e:	d101      	bne.n	8e44 <_scanf_i+0xd0>
    8e40:	330a      	adds	r3, #10
    8e42:	6063      	str	r3, [r4, #4]
    8e44:	2110      	movs	r1, #16
    8e46:	2700      	movs	r7, #0
    8e48:	6863      	ldr	r3, [r4, #4]
    8e4a:	6960      	ldr	r0, [r4, #20]
    8e4c:	1ac9      	subs	r1, r1, r3
    8e4e:	4b47      	ldr	r3, [pc, #284]	; (8f6c <_scanf_i+0x1f8>)
    8e50:	18c9      	adds	r1, r1, r3
    8e52:	f000 f88f 	bl	8f74 <__sccl>
    8e56:	9d03      	ldr	r5, [sp, #12]
    8e58:	68a3      	ldr	r3, [r4, #8]
    8e5a:	2b00      	cmp	r3, #0
    8e5c:	d041      	beq.n	8ee2 <_scanf_i+0x16e>
    8e5e:	6832      	ldr	r2, [r6, #0]
    8e60:	6960      	ldr	r0, [r4, #20]
    8e62:	7811      	ldrb	r1, [r2, #0]
    8e64:	5c40      	ldrb	r0, [r0, r1]
    8e66:	2800      	cmp	r0, #0
    8e68:	d03b      	beq.n	8ee2 <_scanf_i+0x16e>
    8e6a:	2930      	cmp	r1, #48	; 0x30
    8e6c:	d128      	bne.n	8ec0 <_scanf_i+0x14c>
    8e6e:	2080      	movs	r0, #128	; 0x80
    8e70:	6821      	ldr	r1, [r4, #0]
    8e72:	0100      	lsls	r0, r0, #4
    8e74:	4201      	tst	r1, r0
    8e76:	d023      	beq.n	8ec0 <_scanf_i+0x14c>
    8e78:	9a04      	ldr	r2, [sp, #16]
    8e7a:	3701      	adds	r7, #1
    8e7c:	2a00      	cmp	r2, #0
    8e7e:	d003      	beq.n	8e88 <_scanf_i+0x114>
    8e80:	3a01      	subs	r2, #1
    8e82:	3301      	adds	r3, #1
    8e84:	9204      	str	r2, [sp, #16]
    8e86:	60a3      	str	r3, [r4, #8]
    8e88:	6873      	ldr	r3, [r6, #4]
    8e8a:	3b01      	subs	r3, #1
    8e8c:	6073      	str	r3, [r6, #4]
    8e8e:	2b00      	cmp	r3, #0
    8e90:	dd1e      	ble.n	8ed0 <_scanf_i+0x15c>
    8e92:	6833      	ldr	r3, [r6, #0]
    8e94:	3301      	adds	r3, #1
    8e96:	6033      	str	r3, [r6, #0]
    8e98:	68a3      	ldr	r3, [r4, #8]
    8e9a:	3b01      	subs	r3, #1
    8e9c:	60a3      	str	r3, [r4, #8]
    8e9e:	e7db      	b.n	8e58 <_scanf_i+0xe4>
    8ea0:	2f02      	cmp	r7, #2
    8ea2:	d1ab      	bne.n	8dfc <_scanf_i+0x88>
    8ea4:	21c0      	movs	r1, #192	; 0xc0
    8ea6:	2380      	movs	r3, #128	; 0x80
    8ea8:	6822      	ldr	r2, [r4, #0]
    8eaa:	00c9      	lsls	r1, r1, #3
    8eac:	4011      	ands	r1, r2
    8eae:	009b      	lsls	r3, r3, #2
    8eb0:	4299      	cmp	r1, r3
    8eb2:	d1c2      	bne.n	8e3a <_scanf_i+0xc6>
    8eb4:	3bf1      	subs	r3, #241	; 0xf1
    8eb6:	3bff      	subs	r3, #255	; 0xff
    8eb8:	6063      	str	r3, [r4, #4]
    8eba:	33f0      	adds	r3, #240	; 0xf0
    8ebc:	4313      	orrs	r3, r2
    8ebe:	e79c      	b.n	8dfa <_scanf_i+0x86>
    8ec0:	6821      	ldr	r1, [r4, #0]
    8ec2:	4b2b      	ldr	r3, [pc, #172]	; (8f70 <_scanf_i+0x1fc>)
    8ec4:	400b      	ands	r3, r1
    8ec6:	6023      	str	r3, [r4, #0]
    8ec8:	7813      	ldrb	r3, [r2, #0]
    8eca:	702b      	strb	r3, [r5, #0]
    8ecc:	3501      	adds	r5, #1
    8ece:	e7db      	b.n	8e88 <_scanf_i+0x114>
    8ed0:	23c0      	movs	r3, #192	; 0xc0
    8ed2:	005b      	lsls	r3, r3, #1
    8ed4:	58e3      	ldr	r3, [r4, r3]
    8ed6:	0031      	movs	r1, r6
    8ed8:	9805      	ldr	r0, [sp, #20]
    8eda:	9303      	str	r3, [sp, #12]
    8edc:	4798      	blx	r3
    8ede:	2800      	cmp	r0, #0
    8ee0:	d0da      	beq.n	8e98 <_scanf_i+0x124>
    8ee2:	6823      	ldr	r3, [r4, #0]
    8ee4:	05db      	lsls	r3, r3, #23
    8ee6:	d50e      	bpl.n	8f06 <_scanf_i+0x192>
    8ee8:	9b01      	ldr	r3, [sp, #4]
    8eea:	429d      	cmp	r5, r3
    8eec:	d907      	bls.n	8efe <_scanf_i+0x18a>
    8eee:	23be      	movs	r3, #190	; 0xbe
    8ef0:	3d01      	subs	r5, #1
    8ef2:	005b      	lsls	r3, r3, #1
    8ef4:	7829      	ldrb	r1, [r5, #0]
    8ef6:	58e3      	ldr	r3, [r4, r3]
    8ef8:	0032      	movs	r2, r6
    8efa:	9805      	ldr	r0, [sp, #20]
    8efc:	4798      	blx	r3
    8efe:	9b01      	ldr	r3, [sp, #4]
    8f00:	2001      	movs	r0, #1
    8f02:	429d      	cmp	r5, r3
    8f04:	d027      	beq.n	8f56 <_scanf_i+0x1e2>
    8f06:	2210      	movs	r2, #16
    8f08:	6823      	ldr	r3, [r4, #0]
    8f0a:	401a      	ands	r2, r3
    8f0c:	d11c      	bne.n	8f48 <_scanf_i+0x1d4>
    8f0e:	702a      	strb	r2, [r5, #0]
    8f10:	6863      	ldr	r3, [r4, #4]
    8f12:	9901      	ldr	r1, [sp, #4]
    8f14:	9805      	ldr	r0, [sp, #20]
    8f16:	9e06      	ldr	r6, [sp, #24]
    8f18:	47b0      	blx	r6
    8f1a:	9b02      	ldr	r3, [sp, #8]
    8f1c:	6822      	ldr	r2, [r4, #0]
    8f1e:	681b      	ldr	r3, [r3, #0]
    8f20:	0691      	lsls	r1, r2, #26
    8f22:	d507      	bpl.n	8f34 <_scanf_i+0x1c0>
    8f24:	9902      	ldr	r1, [sp, #8]
    8f26:	1d1a      	adds	r2, r3, #4
    8f28:	600a      	str	r2, [r1, #0]
    8f2a:	681b      	ldr	r3, [r3, #0]
    8f2c:	6018      	str	r0, [r3, #0]
    8f2e:	e008      	b.n	8f42 <_scanf_i+0x1ce>
    8f30:	2700      	movs	r7, #0
    8f32:	e7d6      	b.n	8ee2 <_scanf_i+0x16e>
    8f34:	07d1      	lsls	r1, r2, #31
    8f36:	d5f5      	bpl.n	8f24 <_scanf_i+0x1b0>
    8f38:	9902      	ldr	r1, [sp, #8]
    8f3a:	1d1a      	adds	r2, r3, #4
    8f3c:	600a      	str	r2, [r1, #0]
    8f3e:	681b      	ldr	r3, [r3, #0]
    8f40:	8018      	strh	r0, [r3, #0]
    8f42:	68e3      	ldr	r3, [r4, #12]
    8f44:	3301      	adds	r3, #1
    8f46:	60e3      	str	r3, [r4, #12]
    8f48:	2000      	movs	r0, #0
    8f4a:	9b01      	ldr	r3, [sp, #4]
    8f4c:	1aed      	subs	r5, r5, r3
    8f4e:	6923      	ldr	r3, [r4, #16]
    8f50:	19ef      	adds	r7, r5, r7
    8f52:	19df      	adds	r7, r3, r7
    8f54:	6127      	str	r7, [r4, #16]
    8f56:	b00d      	add	sp, #52	; 0x34
    8f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f5a:	46c0      	nop			; (mov r8, r8)
    8f5c:	00009ba0 	.word	0x00009ba0
    8f60:	000090e5 	.word	0x000090e5
    8f64:	00009215 	.word	0x00009215
    8f68:	fffffaff 	.word	0xfffffaff
    8f6c:	00009bac 	.word	0x00009bac
    8f70:	fffff6ff 	.word	0xfffff6ff

00008f74 <__sccl>:
    8f74:	b570      	push	{r4, r5, r6, lr}
    8f76:	780b      	ldrb	r3, [r1, #0]
    8f78:	2b5e      	cmp	r3, #94	; 0x5e
    8f7a:	d00d      	beq.n	8f98 <__sccl+0x24>
    8f7c:	1c4a      	adds	r2, r1, #1
    8f7e:	2100      	movs	r1, #0
    8f80:	0004      	movs	r4, r0
    8f82:	1c45      	adds	r5, r0, #1
    8f84:	35ff      	adds	r5, #255	; 0xff
    8f86:	7021      	strb	r1, [r4, #0]
    8f88:	3401      	adds	r4, #1
    8f8a:	42a5      	cmp	r5, r4
    8f8c:	d1fb      	bne.n	8f86 <__sccl+0x12>
    8f8e:	2b00      	cmp	r3, #0
    8f90:	d106      	bne.n	8fa0 <__sccl+0x2c>
    8f92:	3a01      	subs	r2, #1
    8f94:	0010      	movs	r0, r2
    8f96:	bd70      	pop	{r4, r5, r6, pc}
    8f98:	1c8a      	adds	r2, r1, #2
    8f9a:	784b      	ldrb	r3, [r1, #1]
    8f9c:	2101      	movs	r1, #1
    8f9e:	e7ef      	b.n	8f80 <__sccl+0xc>
    8fa0:	2401      	movs	r4, #1
    8fa2:	404c      	eors	r4, r1
    8fa4:	0011      	movs	r1, r2
    8fa6:	54c4      	strb	r4, [r0, r3]
    8fa8:	780d      	ldrb	r5, [r1, #0]
    8faa:	1c4a      	adds	r2, r1, #1
    8fac:	2d2d      	cmp	r5, #45	; 0x2d
    8fae:	d007      	beq.n	8fc0 <__sccl+0x4c>
    8fb0:	2d5d      	cmp	r5, #93	; 0x5d
    8fb2:	d0ef      	beq.n	8f94 <__sccl+0x20>
    8fb4:	2d00      	cmp	r5, #0
    8fb6:	d101      	bne.n	8fbc <__sccl+0x48>
    8fb8:	000a      	movs	r2, r1
    8fba:	e7eb      	b.n	8f94 <__sccl+0x20>
    8fbc:	002b      	movs	r3, r5
    8fbe:	e7f1      	b.n	8fa4 <__sccl+0x30>
    8fc0:	784e      	ldrb	r6, [r1, #1]
    8fc2:	2e5d      	cmp	r6, #93	; 0x5d
    8fc4:	d0fa      	beq.n	8fbc <__sccl+0x48>
    8fc6:	42b3      	cmp	r3, r6
    8fc8:	dcf8      	bgt.n	8fbc <__sccl+0x48>
    8fca:	3102      	adds	r1, #2
    8fcc:	3301      	adds	r3, #1
    8fce:	54c4      	strb	r4, [r0, r3]
    8fd0:	429e      	cmp	r6, r3
    8fd2:	dcfb      	bgt.n	8fcc <__sccl+0x58>
    8fd4:	e7e8      	b.n	8fa8 <__sccl+0x34>
	...

00008fd8 <_strtol_l.isra.0>:
    8fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fda:	001f      	movs	r7, r3
    8fdc:	000e      	movs	r6, r1
    8fde:	b087      	sub	sp, #28
    8fe0:	9005      	str	r0, [sp, #20]
    8fe2:	9103      	str	r1, [sp, #12]
    8fe4:	9202      	str	r2, [sp, #8]
    8fe6:	980c      	ldr	r0, [sp, #48]	; 0x30
    8fe8:	7834      	ldrb	r4, [r6, #0]
    8fea:	f000 f961 	bl	92b0 <__locale_ctype_ptr_l>
    8fee:	2208      	movs	r2, #8
    8ff0:	1900      	adds	r0, r0, r4
    8ff2:	7843      	ldrb	r3, [r0, #1]
    8ff4:	1c75      	adds	r5, r6, #1
    8ff6:	4013      	ands	r3, r2
    8ff8:	d10c      	bne.n	9014 <_strtol_l.isra.0+0x3c>
    8ffa:	2c2d      	cmp	r4, #45	; 0x2d
    8ffc:	d10c      	bne.n	9018 <_strtol_l.isra.0+0x40>
    8ffe:	3301      	adds	r3, #1
    9000:	782c      	ldrb	r4, [r5, #0]
    9002:	9301      	str	r3, [sp, #4]
    9004:	1cb5      	adds	r5, r6, #2
    9006:	2f00      	cmp	r7, #0
    9008:	d00c      	beq.n	9024 <_strtol_l.isra.0+0x4c>
    900a:	2f10      	cmp	r7, #16
    900c:	d114      	bne.n	9038 <_strtol_l.isra.0+0x60>
    900e:	2c30      	cmp	r4, #48	; 0x30
    9010:	d00a      	beq.n	9028 <_strtol_l.isra.0+0x50>
    9012:	e011      	b.n	9038 <_strtol_l.isra.0+0x60>
    9014:	002e      	movs	r6, r5
    9016:	e7e6      	b.n	8fe6 <_strtol_l.isra.0+0xe>
    9018:	9301      	str	r3, [sp, #4]
    901a:	2c2b      	cmp	r4, #43	; 0x2b
    901c:	d1f3      	bne.n	9006 <_strtol_l.isra.0+0x2e>
    901e:	782c      	ldrb	r4, [r5, #0]
    9020:	1cb5      	adds	r5, r6, #2
    9022:	e7f0      	b.n	9006 <_strtol_l.isra.0+0x2e>
    9024:	2c30      	cmp	r4, #48	; 0x30
    9026:	d12f      	bne.n	9088 <_strtol_l.isra.0+0xb0>
    9028:	2220      	movs	r2, #32
    902a:	782b      	ldrb	r3, [r5, #0]
    902c:	4393      	bics	r3, r2
    902e:	2b58      	cmp	r3, #88	; 0x58
    9030:	d151      	bne.n	90d6 <_strtol_l.isra.0+0xfe>
    9032:	2710      	movs	r7, #16
    9034:	786c      	ldrb	r4, [r5, #1]
    9036:	3502      	adds	r5, #2
    9038:	9b01      	ldr	r3, [sp, #4]
    903a:	4a29      	ldr	r2, [pc, #164]	; (90e0 <_strtol_l.isra.0+0x108>)
    903c:	0039      	movs	r1, r7
    903e:	189e      	adds	r6, r3, r2
    9040:	0030      	movs	r0, r6
    9042:	f7fd fa67 	bl	6514 <__aeabi_uidivmod>
    9046:	0030      	movs	r0, r6
    9048:	9104      	str	r1, [sp, #16]
    904a:	0039      	movs	r1, r7
    904c:	f7fd f9dc 	bl	6408 <__udivsi3>
    9050:	2101      	movs	r1, #1
    9052:	2300      	movs	r3, #0
    9054:	4249      	negs	r1, r1
    9056:	0002      	movs	r2, r0
    9058:	468c      	mov	ip, r1
    905a:	0018      	movs	r0, r3
    905c:	0021      	movs	r1, r4
    905e:	3930      	subs	r1, #48	; 0x30
    9060:	2909      	cmp	r1, #9
    9062:	d813      	bhi.n	908c <_strtol_l.isra.0+0xb4>
    9064:	000c      	movs	r4, r1
    9066:	42a7      	cmp	r7, r4
    9068:	dd1c      	ble.n	90a4 <_strtol_l.isra.0+0xcc>
    906a:	1c59      	adds	r1, r3, #1
    906c:	d009      	beq.n	9082 <_strtol_l.isra.0+0xaa>
    906e:	4663      	mov	r3, ip
    9070:	4282      	cmp	r2, r0
    9072:	d306      	bcc.n	9082 <_strtol_l.isra.0+0xaa>
    9074:	d102      	bne.n	907c <_strtol_l.isra.0+0xa4>
    9076:	9904      	ldr	r1, [sp, #16]
    9078:	42a1      	cmp	r1, r4
    907a:	db02      	blt.n	9082 <_strtol_l.isra.0+0xaa>
    907c:	2301      	movs	r3, #1
    907e:	4378      	muls	r0, r7
    9080:	1820      	adds	r0, r4, r0
    9082:	782c      	ldrb	r4, [r5, #0]
    9084:	3501      	adds	r5, #1
    9086:	e7e9      	b.n	905c <_strtol_l.isra.0+0x84>
    9088:	270a      	movs	r7, #10
    908a:	e7d5      	b.n	9038 <_strtol_l.isra.0+0x60>
    908c:	0021      	movs	r1, r4
    908e:	3941      	subs	r1, #65	; 0x41
    9090:	2919      	cmp	r1, #25
    9092:	d801      	bhi.n	9098 <_strtol_l.isra.0+0xc0>
    9094:	3c37      	subs	r4, #55	; 0x37
    9096:	e7e6      	b.n	9066 <_strtol_l.isra.0+0x8e>
    9098:	0021      	movs	r1, r4
    909a:	3961      	subs	r1, #97	; 0x61
    909c:	2919      	cmp	r1, #25
    909e:	d801      	bhi.n	90a4 <_strtol_l.isra.0+0xcc>
    90a0:	3c57      	subs	r4, #87	; 0x57
    90a2:	e7e0      	b.n	9066 <_strtol_l.isra.0+0x8e>
    90a4:	1c5a      	adds	r2, r3, #1
    90a6:	d108      	bne.n	90ba <_strtol_l.isra.0+0xe2>
    90a8:	9a05      	ldr	r2, [sp, #20]
    90aa:	3323      	adds	r3, #35	; 0x23
    90ac:	6013      	str	r3, [r2, #0]
    90ae:	9b02      	ldr	r3, [sp, #8]
    90b0:	0030      	movs	r0, r6
    90b2:	2b00      	cmp	r3, #0
    90b4:	d10b      	bne.n	90ce <_strtol_l.isra.0+0xf6>
    90b6:	b007      	add	sp, #28
    90b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    90ba:	9a01      	ldr	r2, [sp, #4]
    90bc:	2a00      	cmp	r2, #0
    90be:	d000      	beq.n	90c2 <_strtol_l.isra.0+0xea>
    90c0:	4240      	negs	r0, r0
    90c2:	9a02      	ldr	r2, [sp, #8]
    90c4:	2a00      	cmp	r2, #0
    90c6:	d0f6      	beq.n	90b6 <_strtol_l.isra.0+0xde>
    90c8:	9a03      	ldr	r2, [sp, #12]
    90ca:	2b00      	cmp	r3, #0
    90cc:	d000      	beq.n	90d0 <_strtol_l.isra.0+0xf8>
    90ce:	1e6a      	subs	r2, r5, #1
    90d0:	9b02      	ldr	r3, [sp, #8]
    90d2:	601a      	str	r2, [r3, #0]
    90d4:	e7ef      	b.n	90b6 <_strtol_l.isra.0+0xde>
    90d6:	2430      	movs	r4, #48	; 0x30
    90d8:	2f00      	cmp	r7, #0
    90da:	d1ad      	bne.n	9038 <_strtol_l.isra.0+0x60>
    90dc:	3708      	adds	r7, #8
    90de:	e7ab      	b.n	9038 <_strtol_l.isra.0+0x60>
    90e0:	7fffffff 	.word	0x7fffffff

000090e4 <_strtol_r>:
    90e4:	b513      	push	{r0, r1, r4, lr}
    90e6:	4c05      	ldr	r4, [pc, #20]	; (90fc <_strtol_r+0x18>)
    90e8:	6824      	ldr	r4, [r4, #0]
    90ea:	6a24      	ldr	r4, [r4, #32]
    90ec:	2c00      	cmp	r4, #0
    90ee:	d100      	bne.n	90f2 <_strtol_r+0xe>
    90f0:	4c03      	ldr	r4, [pc, #12]	; (9100 <_strtol_r+0x1c>)
    90f2:	9400      	str	r4, [sp, #0]
    90f4:	f7ff ff70 	bl	8fd8 <_strtol_l.isra.0>
    90f8:	bd16      	pop	{r1, r2, r4, pc}
    90fa:	46c0      	nop			; (mov r8, r8)
    90fc:	20000094 	.word	0x20000094
    9100:	200000f8 	.word	0x200000f8

00009104 <_strtoul_l.isra.0>:
    9104:	b5f0      	push	{r4, r5, r6, r7, lr}
    9106:	001f      	movs	r7, r3
    9108:	000e      	movs	r6, r1
    910a:	b087      	sub	sp, #28
    910c:	9005      	str	r0, [sp, #20]
    910e:	9103      	str	r1, [sp, #12]
    9110:	9201      	str	r2, [sp, #4]
    9112:	980c      	ldr	r0, [sp, #48]	; 0x30
    9114:	7834      	ldrb	r4, [r6, #0]
    9116:	f000 f8cb 	bl	92b0 <__locale_ctype_ptr_l>
    911a:	2208      	movs	r2, #8
    911c:	1900      	adds	r0, r0, r4
    911e:	7843      	ldrb	r3, [r0, #1]
    9120:	1c75      	adds	r5, r6, #1
    9122:	4013      	ands	r3, r2
    9124:	d10c      	bne.n	9140 <_strtoul_l.isra.0+0x3c>
    9126:	2c2d      	cmp	r4, #45	; 0x2d
    9128:	d10c      	bne.n	9144 <_strtoul_l.isra.0+0x40>
    912a:	3301      	adds	r3, #1
    912c:	782c      	ldrb	r4, [r5, #0]
    912e:	9302      	str	r3, [sp, #8]
    9130:	1cb5      	adds	r5, r6, #2
    9132:	2f00      	cmp	r7, #0
    9134:	d00c      	beq.n	9150 <_strtoul_l.isra.0+0x4c>
    9136:	2f10      	cmp	r7, #16
    9138:	d114      	bne.n	9164 <_strtoul_l.isra.0+0x60>
    913a:	2c30      	cmp	r4, #48	; 0x30
    913c:	d00a      	beq.n	9154 <_strtoul_l.isra.0+0x50>
    913e:	e011      	b.n	9164 <_strtoul_l.isra.0+0x60>
    9140:	002e      	movs	r6, r5
    9142:	e7e6      	b.n	9112 <_strtoul_l.isra.0+0xe>
    9144:	9302      	str	r3, [sp, #8]
    9146:	2c2b      	cmp	r4, #43	; 0x2b
    9148:	d1f3      	bne.n	9132 <_strtoul_l.isra.0+0x2e>
    914a:	782c      	ldrb	r4, [r5, #0]
    914c:	1cb5      	adds	r5, r6, #2
    914e:	e7f0      	b.n	9132 <_strtoul_l.isra.0+0x2e>
    9150:	2c30      	cmp	r4, #48	; 0x30
    9152:	d12f      	bne.n	91b4 <_strtoul_l.isra.0+0xb0>
    9154:	2220      	movs	r2, #32
    9156:	782b      	ldrb	r3, [r5, #0]
    9158:	4393      	bics	r3, r2
    915a:	2b58      	cmp	r3, #88	; 0x58
    915c:	d154      	bne.n	9208 <_strtoul_l.isra.0+0x104>
    915e:	2710      	movs	r7, #16
    9160:	786c      	ldrb	r4, [r5, #1]
    9162:	3502      	adds	r5, #2
    9164:	2001      	movs	r0, #1
    9166:	0039      	movs	r1, r7
    9168:	4240      	negs	r0, r0
    916a:	f7fd f94d 	bl	6408 <__udivsi3>
    916e:	0006      	movs	r6, r0
    9170:	2001      	movs	r0, #1
    9172:	0039      	movs	r1, r7
    9174:	4240      	negs	r0, r0
    9176:	f7fd f9cd 	bl	6514 <__aeabi_uidivmod>
    917a:	2300      	movs	r3, #0
    917c:	9104      	str	r1, [sp, #16]
    917e:	2101      	movs	r1, #1
    9180:	2201      	movs	r2, #1
    9182:	0018      	movs	r0, r3
    9184:	468c      	mov	ip, r1
    9186:	4252      	negs	r2, r2
    9188:	0021      	movs	r1, r4
    918a:	3930      	subs	r1, #48	; 0x30
    918c:	2909      	cmp	r1, #9
    918e:	d813      	bhi.n	91b8 <_strtoul_l.isra.0+0xb4>
    9190:	000c      	movs	r4, r1
    9192:	42a7      	cmp	r7, r4
    9194:	dd1e      	ble.n	91d4 <_strtoul_l.isra.0+0xd0>
    9196:	2b00      	cmp	r3, #0
    9198:	db1a      	blt.n	91d0 <_strtoul_l.isra.0+0xcc>
    919a:	0013      	movs	r3, r2
    919c:	4286      	cmp	r6, r0
    919e:	d306      	bcc.n	91ae <_strtoul_l.isra.0+0xaa>
    91a0:	d102      	bne.n	91a8 <_strtoul_l.isra.0+0xa4>
    91a2:	9904      	ldr	r1, [sp, #16]
    91a4:	42a1      	cmp	r1, r4
    91a6:	db02      	blt.n	91ae <_strtoul_l.isra.0+0xaa>
    91a8:	4663      	mov	r3, ip
    91aa:	4378      	muls	r0, r7
    91ac:	1820      	adds	r0, r4, r0
    91ae:	782c      	ldrb	r4, [r5, #0]
    91b0:	3501      	adds	r5, #1
    91b2:	e7e9      	b.n	9188 <_strtoul_l.isra.0+0x84>
    91b4:	270a      	movs	r7, #10
    91b6:	e7d5      	b.n	9164 <_strtoul_l.isra.0+0x60>
    91b8:	0021      	movs	r1, r4
    91ba:	3941      	subs	r1, #65	; 0x41
    91bc:	2919      	cmp	r1, #25
    91be:	d801      	bhi.n	91c4 <_strtoul_l.isra.0+0xc0>
    91c0:	3c37      	subs	r4, #55	; 0x37
    91c2:	e7e6      	b.n	9192 <_strtoul_l.isra.0+0x8e>
    91c4:	0021      	movs	r1, r4
    91c6:	3961      	subs	r1, #97	; 0x61
    91c8:	2919      	cmp	r1, #25
    91ca:	d803      	bhi.n	91d4 <_strtoul_l.isra.0+0xd0>
    91cc:	3c57      	subs	r4, #87	; 0x57
    91ce:	e7e0      	b.n	9192 <_strtoul_l.isra.0+0x8e>
    91d0:	0013      	movs	r3, r2
    91d2:	e7ec      	b.n	91ae <_strtoul_l.isra.0+0xaa>
    91d4:	2b00      	cmp	r3, #0
    91d6:	da09      	bge.n	91ec <_strtoul_l.isra.0+0xe8>
    91d8:	2322      	movs	r3, #34	; 0x22
    91da:	2001      	movs	r0, #1
    91dc:	9a05      	ldr	r2, [sp, #20]
    91de:	4240      	negs	r0, r0
    91e0:	6013      	str	r3, [r2, #0]
    91e2:	9b01      	ldr	r3, [sp, #4]
    91e4:	2b00      	cmp	r3, #0
    91e6:	d10b      	bne.n	9200 <_strtoul_l.isra.0+0xfc>
    91e8:	b007      	add	sp, #28
    91ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91ec:	9a02      	ldr	r2, [sp, #8]
    91ee:	2a00      	cmp	r2, #0
    91f0:	d000      	beq.n	91f4 <_strtoul_l.isra.0+0xf0>
    91f2:	4240      	negs	r0, r0
    91f4:	9a01      	ldr	r2, [sp, #4]
    91f6:	2a00      	cmp	r2, #0
    91f8:	d0f6      	beq.n	91e8 <_strtoul_l.isra.0+0xe4>
    91fa:	9a03      	ldr	r2, [sp, #12]
    91fc:	2b00      	cmp	r3, #0
    91fe:	d000      	beq.n	9202 <_strtoul_l.isra.0+0xfe>
    9200:	1e6a      	subs	r2, r5, #1
    9202:	9b01      	ldr	r3, [sp, #4]
    9204:	601a      	str	r2, [r3, #0]
    9206:	e7ef      	b.n	91e8 <_strtoul_l.isra.0+0xe4>
    9208:	2430      	movs	r4, #48	; 0x30
    920a:	2f00      	cmp	r7, #0
    920c:	d1aa      	bne.n	9164 <_strtoul_l.isra.0+0x60>
    920e:	3708      	adds	r7, #8
    9210:	e7a8      	b.n	9164 <_strtoul_l.isra.0+0x60>
	...

00009214 <_strtoul_r>:
    9214:	b513      	push	{r0, r1, r4, lr}
    9216:	4c05      	ldr	r4, [pc, #20]	; (922c <_strtoul_r+0x18>)
    9218:	6824      	ldr	r4, [r4, #0]
    921a:	6a24      	ldr	r4, [r4, #32]
    921c:	2c00      	cmp	r4, #0
    921e:	d100      	bne.n	9222 <_strtoul_r+0xe>
    9220:	4c03      	ldr	r4, [pc, #12]	; (9230 <_strtoul_r+0x1c>)
    9222:	9400      	str	r4, [sp, #0]
    9224:	f7ff ff6e 	bl	9104 <_strtoul_l.isra.0>
    9228:	bd16      	pop	{r1, r2, r4, pc}
    922a:	46c0      	nop			; (mov r8, r8)
    922c:	20000094 	.word	0x20000094
    9230:	200000f8 	.word	0x200000f8

00009234 <__submore>:
    9234:	000b      	movs	r3, r1
    9236:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9238:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    923a:	3344      	adds	r3, #68	; 0x44
    923c:	000c      	movs	r4, r1
    923e:	429d      	cmp	r5, r3
    9240:	d11c      	bne.n	927c <__submore+0x48>
    9242:	2680      	movs	r6, #128	; 0x80
    9244:	00f6      	lsls	r6, r6, #3
    9246:	0031      	movs	r1, r6
    9248:	f000 f8be 	bl	93c8 <_malloc_r>
    924c:	2800      	cmp	r0, #0
    924e:	d102      	bne.n	9256 <__submore+0x22>
    9250:	2001      	movs	r0, #1
    9252:	4240      	negs	r0, r0
    9254:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9256:	0023      	movs	r3, r4
    9258:	6360      	str	r0, [r4, #52]	; 0x34
    925a:	63a6      	str	r6, [r4, #56]	; 0x38
    925c:	3346      	adds	r3, #70	; 0x46
    925e:	781a      	ldrb	r2, [r3, #0]
    9260:	4b10      	ldr	r3, [pc, #64]	; (92a4 <__submore+0x70>)
    9262:	54c2      	strb	r2, [r0, r3]
    9264:	0023      	movs	r3, r4
    9266:	3345      	adds	r3, #69	; 0x45
    9268:	781a      	ldrb	r2, [r3, #0]
    926a:	4b0f      	ldr	r3, [pc, #60]	; (92a8 <__submore+0x74>)
    926c:	54c2      	strb	r2, [r0, r3]
    926e:	782a      	ldrb	r2, [r5, #0]
    9270:	4b0e      	ldr	r3, [pc, #56]	; (92ac <__submore+0x78>)
    9272:	54c2      	strb	r2, [r0, r3]
    9274:	18c0      	adds	r0, r0, r3
    9276:	6020      	str	r0, [r4, #0]
    9278:	2000      	movs	r0, #0
    927a:	e7eb      	b.n	9254 <__submore+0x20>
    927c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    927e:	0029      	movs	r1, r5
    9280:	0073      	lsls	r3, r6, #1
    9282:	001a      	movs	r2, r3
    9284:	9301      	str	r3, [sp, #4]
    9286:	f000 f8fd 	bl	9484 <_realloc_r>
    928a:	1e05      	subs	r5, r0, #0
    928c:	d0e0      	beq.n	9250 <__submore+0x1c>
    928e:	1987      	adds	r7, r0, r6
    9290:	0001      	movs	r1, r0
    9292:	0032      	movs	r2, r6
    9294:	0038      	movs	r0, r7
    9296:	f7fe ffcb 	bl	8230 <memcpy>
    929a:	9b01      	ldr	r3, [sp, #4]
    929c:	6027      	str	r7, [r4, #0]
    929e:	6365      	str	r5, [r4, #52]	; 0x34
    92a0:	63a3      	str	r3, [r4, #56]	; 0x38
    92a2:	e7e9      	b.n	9278 <__submore+0x44>
    92a4:	000003ff 	.word	0x000003ff
    92a8:	000003fe 	.word	0x000003fe
    92ac:	000003fd 	.word	0x000003fd

000092b0 <__locale_ctype_ptr_l>:
    92b0:	30ec      	adds	r0, #236	; 0xec
    92b2:	6800      	ldr	r0, [r0, #0]
    92b4:	4770      	bx	lr
	...

000092b8 <__locale_ctype_ptr>:
    92b8:	4b04      	ldr	r3, [pc, #16]	; (92cc <__locale_ctype_ptr+0x14>)
    92ba:	681b      	ldr	r3, [r3, #0]
    92bc:	6a1b      	ldr	r3, [r3, #32]
    92be:	2b00      	cmp	r3, #0
    92c0:	d100      	bne.n	92c4 <__locale_ctype_ptr+0xc>
    92c2:	4b03      	ldr	r3, [pc, #12]	; (92d0 <__locale_ctype_ptr+0x18>)
    92c4:	33ec      	adds	r3, #236	; 0xec
    92c6:	6818      	ldr	r0, [r3, #0]
    92c8:	4770      	bx	lr
    92ca:	46c0      	nop			; (mov r8, r8)
    92cc:	20000094 	.word	0x20000094
    92d0:	200000f8 	.word	0x200000f8

000092d4 <__ascii_mbtowc>:
    92d4:	b082      	sub	sp, #8
    92d6:	2900      	cmp	r1, #0
    92d8:	d100      	bne.n	92dc <__ascii_mbtowc+0x8>
    92da:	a901      	add	r1, sp, #4
    92dc:	1e10      	subs	r0, r2, #0
    92de:	d006      	beq.n	92ee <__ascii_mbtowc+0x1a>
    92e0:	2b00      	cmp	r3, #0
    92e2:	d006      	beq.n	92f2 <__ascii_mbtowc+0x1e>
    92e4:	7813      	ldrb	r3, [r2, #0]
    92e6:	600b      	str	r3, [r1, #0]
    92e8:	7810      	ldrb	r0, [r2, #0]
    92ea:	1e43      	subs	r3, r0, #1
    92ec:	4198      	sbcs	r0, r3
    92ee:	b002      	add	sp, #8
    92f0:	4770      	bx	lr
    92f2:	2002      	movs	r0, #2
    92f4:	4240      	negs	r0, r0
    92f6:	e7fa      	b.n	92ee <__ascii_mbtowc+0x1a>

000092f8 <memchr>:
    92f8:	b2c9      	uxtb	r1, r1
    92fa:	1882      	adds	r2, r0, r2
    92fc:	4290      	cmp	r0, r2
    92fe:	d101      	bne.n	9304 <memchr+0xc>
    9300:	2000      	movs	r0, #0
    9302:	4770      	bx	lr
    9304:	7803      	ldrb	r3, [r0, #0]
    9306:	428b      	cmp	r3, r1
    9308:	d0fb      	beq.n	9302 <memchr+0xa>
    930a:	3001      	adds	r0, #1
    930c:	e7f6      	b.n	92fc <memchr+0x4>

0000930e <memmove>:
    930e:	b510      	push	{r4, lr}
    9310:	4288      	cmp	r0, r1
    9312:	d902      	bls.n	931a <memmove+0xc>
    9314:	188b      	adds	r3, r1, r2
    9316:	4298      	cmp	r0, r3
    9318:	d308      	bcc.n	932c <memmove+0x1e>
    931a:	2300      	movs	r3, #0
    931c:	429a      	cmp	r2, r3
    931e:	d007      	beq.n	9330 <memmove+0x22>
    9320:	5ccc      	ldrb	r4, [r1, r3]
    9322:	54c4      	strb	r4, [r0, r3]
    9324:	3301      	adds	r3, #1
    9326:	e7f9      	b.n	931c <memmove+0xe>
    9328:	5c8b      	ldrb	r3, [r1, r2]
    932a:	5483      	strb	r3, [r0, r2]
    932c:	3a01      	subs	r2, #1
    932e:	d2fb      	bcs.n	9328 <memmove+0x1a>
    9330:	bd10      	pop	{r4, pc}
	...

00009334 <_free_r>:
    9334:	b570      	push	{r4, r5, r6, lr}
    9336:	0005      	movs	r5, r0
    9338:	2900      	cmp	r1, #0
    933a:	d010      	beq.n	935e <_free_r+0x2a>
    933c:	1f0c      	subs	r4, r1, #4
    933e:	6823      	ldr	r3, [r4, #0]
    9340:	2b00      	cmp	r3, #0
    9342:	da00      	bge.n	9346 <_free_r+0x12>
    9344:	18e4      	adds	r4, r4, r3
    9346:	0028      	movs	r0, r5
    9348:	f000 f8e0 	bl	950c <__malloc_lock>
    934c:	4a1d      	ldr	r2, [pc, #116]	; (93c4 <_free_r+0x90>)
    934e:	6813      	ldr	r3, [r2, #0]
    9350:	2b00      	cmp	r3, #0
    9352:	d105      	bne.n	9360 <_free_r+0x2c>
    9354:	6063      	str	r3, [r4, #4]
    9356:	6014      	str	r4, [r2, #0]
    9358:	0028      	movs	r0, r5
    935a:	f000 f8d8 	bl	950e <__malloc_unlock>
    935e:	bd70      	pop	{r4, r5, r6, pc}
    9360:	42a3      	cmp	r3, r4
    9362:	d909      	bls.n	9378 <_free_r+0x44>
    9364:	6821      	ldr	r1, [r4, #0]
    9366:	1860      	adds	r0, r4, r1
    9368:	4283      	cmp	r3, r0
    936a:	d1f3      	bne.n	9354 <_free_r+0x20>
    936c:	6818      	ldr	r0, [r3, #0]
    936e:	685b      	ldr	r3, [r3, #4]
    9370:	1841      	adds	r1, r0, r1
    9372:	6021      	str	r1, [r4, #0]
    9374:	e7ee      	b.n	9354 <_free_r+0x20>
    9376:	0013      	movs	r3, r2
    9378:	685a      	ldr	r2, [r3, #4]
    937a:	2a00      	cmp	r2, #0
    937c:	d001      	beq.n	9382 <_free_r+0x4e>
    937e:	42a2      	cmp	r2, r4
    9380:	d9f9      	bls.n	9376 <_free_r+0x42>
    9382:	6819      	ldr	r1, [r3, #0]
    9384:	1858      	adds	r0, r3, r1
    9386:	42a0      	cmp	r0, r4
    9388:	d10b      	bne.n	93a2 <_free_r+0x6e>
    938a:	6820      	ldr	r0, [r4, #0]
    938c:	1809      	adds	r1, r1, r0
    938e:	1858      	adds	r0, r3, r1
    9390:	6019      	str	r1, [r3, #0]
    9392:	4282      	cmp	r2, r0
    9394:	d1e0      	bne.n	9358 <_free_r+0x24>
    9396:	6810      	ldr	r0, [r2, #0]
    9398:	6852      	ldr	r2, [r2, #4]
    939a:	1841      	adds	r1, r0, r1
    939c:	6019      	str	r1, [r3, #0]
    939e:	605a      	str	r2, [r3, #4]
    93a0:	e7da      	b.n	9358 <_free_r+0x24>
    93a2:	42a0      	cmp	r0, r4
    93a4:	d902      	bls.n	93ac <_free_r+0x78>
    93a6:	230c      	movs	r3, #12
    93a8:	602b      	str	r3, [r5, #0]
    93aa:	e7d5      	b.n	9358 <_free_r+0x24>
    93ac:	6821      	ldr	r1, [r4, #0]
    93ae:	1860      	adds	r0, r4, r1
    93b0:	4282      	cmp	r2, r0
    93b2:	d103      	bne.n	93bc <_free_r+0x88>
    93b4:	6810      	ldr	r0, [r2, #0]
    93b6:	6852      	ldr	r2, [r2, #4]
    93b8:	1841      	adds	r1, r0, r1
    93ba:	6021      	str	r1, [r4, #0]
    93bc:	6062      	str	r2, [r4, #4]
    93be:	605c      	str	r4, [r3, #4]
    93c0:	e7ca      	b.n	9358 <_free_r+0x24>
    93c2:	46c0      	nop			; (mov r8, r8)
    93c4:	200002b0 	.word	0x200002b0

000093c8 <_malloc_r>:
    93c8:	2303      	movs	r3, #3
    93ca:	b570      	push	{r4, r5, r6, lr}
    93cc:	1ccd      	adds	r5, r1, #3
    93ce:	439d      	bics	r5, r3
    93d0:	3508      	adds	r5, #8
    93d2:	0006      	movs	r6, r0
    93d4:	2d0c      	cmp	r5, #12
    93d6:	d21e      	bcs.n	9416 <_malloc_r+0x4e>
    93d8:	250c      	movs	r5, #12
    93da:	42a9      	cmp	r1, r5
    93dc:	d81d      	bhi.n	941a <_malloc_r+0x52>
    93de:	0030      	movs	r0, r6
    93e0:	f000 f894 	bl	950c <__malloc_lock>
    93e4:	4a25      	ldr	r2, [pc, #148]	; (947c <_malloc_r+0xb4>)
    93e6:	6814      	ldr	r4, [r2, #0]
    93e8:	0021      	movs	r1, r4
    93ea:	2900      	cmp	r1, #0
    93ec:	d119      	bne.n	9422 <_malloc_r+0x5a>
    93ee:	4c24      	ldr	r4, [pc, #144]	; (9480 <_malloc_r+0xb8>)
    93f0:	6823      	ldr	r3, [r4, #0]
    93f2:	2b00      	cmp	r3, #0
    93f4:	d103      	bne.n	93fe <_malloc_r+0x36>
    93f6:	0030      	movs	r0, r6
    93f8:	f000 f86a 	bl	94d0 <_sbrk_r>
    93fc:	6020      	str	r0, [r4, #0]
    93fe:	0029      	movs	r1, r5
    9400:	0030      	movs	r0, r6
    9402:	f000 f865 	bl	94d0 <_sbrk_r>
    9406:	1c43      	adds	r3, r0, #1
    9408:	d12c      	bne.n	9464 <_malloc_r+0x9c>
    940a:	230c      	movs	r3, #12
    940c:	0030      	movs	r0, r6
    940e:	6033      	str	r3, [r6, #0]
    9410:	f000 f87d 	bl	950e <__malloc_unlock>
    9414:	e003      	b.n	941e <_malloc_r+0x56>
    9416:	2d00      	cmp	r5, #0
    9418:	dadf      	bge.n	93da <_malloc_r+0x12>
    941a:	230c      	movs	r3, #12
    941c:	6033      	str	r3, [r6, #0]
    941e:	2000      	movs	r0, #0
    9420:	bd70      	pop	{r4, r5, r6, pc}
    9422:	680b      	ldr	r3, [r1, #0]
    9424:	1b5b      	subs	r3, r3, r5
    9426:	d41a      	bmi.n	945e <_malloc_r+0x96>
    9428:	2b0b      	cmp	r3, #11
    942a:	d903      	bls.n	9434 <_malloc_r+0x6c>
    942c:	600b      	str	r3, [r1, #0]
    942e:	18cc      	adds	r4, r1, r3
    9430:	6025      	str	r5, [r4, #0]
    9432:	e003      	b.n	943c <_malloc_r+0x74>
    9434:	428c      	cmp	r4, r1
    9436:	d10e      	bne.n	9456 <_malloc_r+0x8e>
    9438:	6863      	ldr	r3, [r4, #4]
    943a:	6013      	str	r3, [r2, #0]
    943c:	0030      	movs	r0, r6
    943e:	f000 f866 	bl	950e <__malloc_unlock>
    9442:	0020      	movs	r0, r4
    9444:	2207      	movs	r2, #7
    9446:	300b      	adds	r0, #11
    9448:	1d23      	adds	r3, r4, #4
    944a:	4390      	bics	r0, r2
    944c:	1ac3      	subs	r3, r0, r3
    944e:	d0e7      	beq.n	9420 <_malloc_r+0x58>
    9450:	425a      	negs	r2, r3
    9452:	50e2      	str	r2, [r4, r3]
    9454:	e7e4      	b.n	9420 <_malloc_r+0x58>
    9456:	684b      	ldr	r3, [r1, #4]
    9458:	6063      	str	r3, [r4, #4]
    945a:	000c      	movs	r4, r1
    945c:	e7ee      	b.n	943c <_malloc_r+0x74>
    945e:	000c      	movs	r4, r1
    9460:	6849      	ldr	r1, [r1, #4]
    9462:	e7c2      	b.n	93ea <_malloc_r+0x22>
    9464:	2303      	movs	r3, #3
    9466:	1cc4      	adds	r4, r0, #3
    9468:	439c      	bics	r4, r3
    946a:	42a0      	cmp	r0, r4
    946c:	d0e0      	beq.n	9430 <_malloc_r+0x68>
    946e:	1a21      	subs	r1, r4, r0
    9470:	0030      	movs	r0, r6
    9472:	f000 f82d 	bl	94d0 <_sbrk_r>
    9476:	1c43      	adds	r3, r0, #1
    9478:	d1da      	bne.n	9430 <_malloc_r+0x68>
    947a:	e7c6      	b.n	940a <_malloc_r+0x42>
    947c:	200002b0 	.word	0x200002b0
    9480:	200002b4 	.word	0x200002b4

00009484 <_realloc_r>:
    9484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9486:	0007      	movs	r7, r0
    9488:	000d      	movs	r5, r1
    948a:	0016      	movs	r6, r2
    948c:	2900      	cmp	r1, #0
    948e:	d105      	bne.n	949c <_realloc_r+0x18>
    9490:	0011      	movs	r1, r2
    9492:	f7ff ff99 	bl	93c8 <_malloc_r>
    9496:	0004      	movs	r4, r0
    9498:	0020      	movs	r0, r4
    949a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    949c:	2a00      	cmp	r2, #0
    949e:	d103      	bne.n	94a8 <_realloc_r+0x24>
    94a0:	f7ff ff48 	bl	9334 <_free_r>
    94a4:	0034      	movs	r4, r6
    94a6:	e7f7      	b.n	9498 <_realloc_r+0x14>
    94a8:	f000 f832 	bl	9510 <_malloc_usable_size_r>
    94ac:	002c      	movs	r4, r5
    94ae:	4286      	cmp	r6, r0
    94b0:	d9f2      	bls.n	9498 <_realloc_r+0x14>
    94b2:	0031      	movs	r1, r6
    94b4:	0038      	movs	r0, r7
    94b6:	f7ff ff87 	bl	93c8 <_malloc_r>
    94ba:	1e04      	subs	r4, r0, #0
    94bc:	d0ec      	beq.n	9498 <_realloc_r+0x14>
    94be:	0029      	movs	r1, r5
    94c0:	0032      	movs	r2, r6
    94c2:	f7fe feb5 	bl	8230 <memcpy>
    94c6:	0029      	movs	r1, r5
    94c8:	0038      	movs	r0, r7
    94ca:	f7ff ff33 	bl	9334 <_free_r>
    94ce:	e7e3      	b.n	9498 <_realloc_r+0x14>

000094d0 <_sbrk_r>:
    94d0:	2300      	movs	r3, #0
    94d2:	b570      	push	{r4, r5, r6, lr}
    94d4:	4c06      	ldr	r4, [pc, #24]	; (94f0 <_sbrk_r+0x20>)
    94d6:	0005      	movs	r5, r0
    94d8:	0008      	movs	r0, r1
    94da:	6023      	str	r3, [r4, #0]
    94dc:	f7fc fcf4 	bl	5ec8 <_sbrk>
    94e0:	1c43      	adds	r3, r0, #1
    94e2:	d103      	bne.n	94ec <_sbrk_r+0x1c>
    94e4:	6823      	ldr	r3, [r4, #0]
    94e6:	2b00      	cmp	r3, #0
    94e8:	d000      	beq.n	94ec <_sbrk_r+0x1c>
    94ea:	602b      	str	r3, [r5, #0]
    94ec:	bd70      	pop	{r4, r5, r6, pc}
    94ee:	46c0      	nop			; (mov r8, r8)
    94f0:	200004dc 	.word	0x200004dc

000094f4 <__ascii_wctomb>:
    94f4:	1e0b      	subs	r3, r1, #0
    94f6:	d004      	beq.n	9502 <__ascii_wctomb+0xe>
    94f8:	2aff      	cmp	r2, #255	; 0xff
    94fa:	d904      	bls.n	9506 <__ascii_wctomb+0x12>
    94fc:	238a      	movs	r3, #138	; 0x8a
    94fe:	6003      	str	r3, [r0, #0]
    9500:	3b8b      	subs	r3, #139	; 0x8b
    9502:	0018      	movs	r0, r3
    9504:	4770      	bx	lr
    9506:	700a      	strb	r2, [r1, #0]
    9508:	2301      	movs	r3, #1
    950a:	e7fa      	b.n	9502 <__ascii_wctomb+0xe>

0000950c <__malloc_lock>:
    950c:	4770      	bx	lr

0000950e <__malloc_unlock>:
    950e:	4770      	bx	lr

00009510 <_malloc_usable_size_r>:
    9510:	1f0b      	subs	r3, r1, #4
    9512:	681b      	ldr	r3, [r3, #0]
    9514:	1f18      	subs	r0, r3, #4
    9516:	2b00      	cmp	r3, #0
    9518:	da01      	bge.n	951e <_malloc_usable_size_r+0xe>
    951a:	580b      	ldr	r3, [r1, r0]
    951c:	18c0      	adds	r0, r0, r3
    951e:	4770      	bx	lr
    9520:	00000002 	.word	0x00000002
    9524:	00000003 	.word	0x00000003
    9528:	00000028 	.word	0x00000028
    952c:	00000029 	.word	0x00000029
    9530:	00000004 	.word	0x00000004
    9534:	00000005 	.word	0x00000005
    9538:	00000006 	.word	0x00000006
    953c:	00000007 	.word	0x00000007
    9540:	0000ffff 	.word	0x0000ffff
    9544:	0000ffff 	.word	0x0000ffff
    9548:	00000022 	.word	0x00000022
    954c:	00000023 	.word	0x00000023
    9550:	0000ffff 	.word	0x0000ffff
    9554:	0000ffff 	.word	0x0000ffff
    9558:	0000ffff 	.word	0x0000ffff
    955c:	0000ffff 	.word	0x0000ffff
    9560:	00000008 	.word	0x00000008
    9564:	00000009 	.word	0x00000009
    9568:	0000000a 	.word	0x0000000a
    956c:	0000000b 	.word	0x0000000b
    9570:	0000054e 	.word	0x0000054e
    9574:	00000554 	.word	0x00000554
    9578:	00000554 	.word	0x00000554
    957c:	00000554 	.word	0x00000554
    9580:	00000554 	.word	0x00000554
    9584:	00000554 	.word	0x00000554
    9588:	00000554 	.word	0x00000554
    958c:	00000554 	.word	0x00000554
    9590:	00000554 	.word	0x00000554
    9594:	00000554 	.word	0x00000554
    9598:	00000554 	.word	0x00000554
    959c:	00000554 	.word	0x00000554
    95a0:	00000554 	.word	0x00000554
    95a4:	00000554 	.word	0x00000554
    95a8:	00000554 	.word	0x00000554
    95ac:	00000554 	.word	0x00000554
    95b0:	0000052c 	.word	0x0000052c
    95b4:	00000554 	.word	0x00000554
    95b8:	00000554 	.word	0x00000554
    95bc:	00000554 	.word	0x00000554
    95c0:	00000554 	.word	0x00000554
    95c4:	00000554 	.word	0x00000554
    95c8:	00000554 	.word	0x00000554
    95cc:	00000554 	.word	0x00000554
    95d0:	00000554 	.word	0x00000554
    95d4:	00000554 	.word	0x00000554
    95d8:	00000554 	.word	0x00000554
    95dc:	00000554 	.word	0x00000554
    95e0:	00000554 	.word	0x00000554
    95e4:	00000554 	.word	0x00000554
    95e8:	00000554 	.word	0x00000554
    95ec:	00000554 	.word	0x00000554
    95f0:	00000548 	.word	0x00000548
    95f4:	00000554 	.word	0x00000554
    95f8:	00000554 	.word	0x00000554
    95fc:	00000554 	.word	0x00000554
    9600:	00000554 	.word	0x00000554
    9604:	00000554 	.word	0x00000554
    9608:	00000554 	.word	0x00000554
    960c:	00000554 	.word	0x00000554
    9610:	00000554 	.word	0x00000554
    9614:	00000554 	.word	0x00000554
    9618:	00000554 	.word	0x00000554
    961c:	00000554 	.word	0x00000554
    9620:	00000554 	.word	0x00000554
    9624:	00000554 	.word	0x00000554
    9628:	00000554 	.word	0x00000554
    962c:	00000554 	.word	0x00000554
    9630:	00000542 	.word	0x00000542
    9634:	000004ea 	.word	0x000004ea
    9638:	00000500 	.word	0x00000500
    963c:	00000516 	.word	0x00000516
    9640:	000004d0 	.word	0x000004d0
    9644:	42000800 	.word	0x42000800
    9648:	42000c00 	.word	0x42000c00
    964c:	42001000 	.word	0x42001000
    9650:	42001400 	.word	0x42001400
    9654:	42001800 	.word	0x42001800
    9658:	42001c00 	.word	0x42001c00
    965c:	20626f62 	.word	0x20626f62
    9660:	20736177 	.word	0x20736177
    9664:	6e756f66 	.word	0x6e756f66
    9668:	00000064 	.word	0x00000064
    966c:	204d5750 	.word	0x204d5750
    9670:	00006425 	.word	0x00006425
    9674:	6425203a 	.word	0x6425203a
    9678:	00000000 	.word	0x00000000
    967c:	31414846 	.word	0x31414846
    9680:	00000000 	.word	0x00000000
    9684:	30414846 	.word	0x30414846
    9688:	00000000 	.word	0x00000000
    968c:	20414b42 	.word	0x20414b42
    9690:	00000031 	.word	0x00000031
    9694:	20414b42 	.word	0x20414b42
    9698:	00000030 	.word	0x00000030
    969c:	204c4b42 	.word	0x204c4b42
    96a0:	00000031 	.word	0x00000031
    96a4:	204c4b42 	.word	0x204c4b42
    96a8:	00000030 	.word	0x00000030
    96ac:	20524b42 	.word	0x20524b42
    96b0:	00000031 	.word	0x00000031
    96b4:	20524b42 	.word	0x20524b42
    96b8:	00000030 	.word	0x00000030
    96bc:	314e5248 	.word	0x314e5248
    96c0:	00003120 	.word	0x00003120
    96c4:	314e5248 	.word	0x314e5248
    96c8:	00003020 	.word	0x00003020
    96cc:	324e5248 	.word	0x324e5248
    96d0:	00003120 	.word	0x00003120
    96d4:	324e5248 	.word	0x324e5248
    96d8:	00003020 	.word	0x00003020
    96dc:	334e5248 	.word	0x334e5248
    96e0:	00003120 	.word	0x00003120
    96e4:	334e5248 	.word	0x334e5248
    96e8:	00003020 	.word	0x00003020
    96ec:	344e5248 	.word	0x344e5248
    96f0:	00003120 	.word	0x00003120
    96f4:	344e5248 	.word	0x344e5248
    96f8:	00003020 	.word	0x00003020
    96fc:	30304253 	.word	0x30304253
    9700:	00003120 	.word	0x00003120
    9704:	30304253 	.word	0x30304253
    9708:	00003020 	.word	0x00003020
    970c:	31304253 	.word	0x31304253
    9710:	00003120 	.word	0x00003120
    9714:	31304253 	.word	0x31304253
    9718:	00003020 	.word	0x00003020
    971c:	32304253 	.word	0x32304253
    9720:	00003120 	.word	0x00003120
    9724:	32304253 	.word	0x32304253
    9728:	00003020 	.word	0x00003020
    972c:	33304253 	.word	0x33304253
    9730:	00003120 	.word	0x00003120
    9734:	33304253 	.word	0x33304253
    9738:	00003020 	.word	0x00003020
    973c:	34304253 	.word	0x34304253
    9740:	00003120 	.word	0x00003120
    9744:	34304253 	.word	0x34304253
    9748:	00003020 	.word	0x00003020
    974c:	35304253 	.word	0x35304253
    9750:	00003120 	.word	0x00003120
    9754:	35304253 	.word	0x35304253
    9758:	00003020 	.word	0x00003020
    975c:	36304253 	.word	0x36304253
    9760:	00003120 	.word	0x00003120
    9764:	36304253 	.word	0x36304253
    9768:	00003020 	.word	0x00003020
    976c:	37304253 	.word	0x37304253
    9770:	00003120 	.word	0x00003120
    9774:	37304253 	.word	0x37304253
    9778:	00003020 	.word	0x00003020
    977c:	38304253 	.word	0x38304253
    9780:	00003120 	.word	0x00003120
    9784:	38304253 	.word	0x38304253
    9788:	00003020 	.word	0x00003020
    978c:	39304253 	.word	0x39304253
    9790:	00003120 	.word	0x00003120
    9794:	39304253 	.word	0x39304253
    9798:	00003020 	.word	0x00003020
    979c:	30314253 	.word	0x30314253
    97a0:	00003120 	.word	0x00003120
    97a4:	30314253 	.word	0x30314253
    97a8:	00003020 	.word	0x00003020
    97ac:	53524253 	.word	0x53524253
    97b0:	32342054 	.word	0x32342054
    97b4:	00000000 	.word	0x00000000
    97b8:	203a4253 	.word	0x203a4253
    97bc:	45534552 	.word	0x45534552
    97c0:	4e495454 	.word	0x4e495454
    97c4:	00000047 	.word	0x00000047
    97c8:	20545250 	.word	0x20545250
    97cc:	00000031 	.word	0x00000031
    97d0:	20545250 	.word	0x20545250
    97d4:	00000030 	.word	0x00000030
    97d8:	20525457 	.word	0x20525457
    97dc:	00000031 	.word	0x00000031
    97e0:	20415453 	.word	0x20415453
    97e4:	00000031 	.word	0x00000031
    97e8:	20415453 	.word	0x20415453
    97ec:	00000030 	.word	0x00000030
    97f0:	2044454c 	.word	0x2044454c
    97f4:	00000031 	.word	0x00000031
    97f8:	2044454c 	.word	0x2044454c
    97fc:	00000030 	.word	0x00000030
    9800:	204c4448 	.word	0x204c4448
    9804:	00000031 	.word	0x00000031
    9808:	204c4448 	.word	0x204c4448
    980c:	00000030 	.word	0x00000030
    9810:	41495242 	.word	0x41495242
    9814:	0031204e 	.word	0x0031204e
    9818:	41495242 	.word	0x41495242
    981c:	0030204e 	.word	0x0030204e
    9820:	48534c46 	.word	0x48534c46
    9824:	00312031 	.word	0x00312031
    9828:	48534c46 	.word	0x48534c46
    982c:	00302031 	.word	0x00302031
    9830:	48534c46 	.word	0x48534c46
    9834:	00312032 	.word	0x00312032
    9838:	48534c46 	.word	0x48534c46
    983c:	00302032 	.word	0x00302032
    9840:	48534c46 	.word	0x48534c46
    9844:	31204446 	.word	0x31204446
    9848:	00000000 	.word	0x00000000
    984c:	48534c46 	.word	0x48534c46
    9850:	30204446 	.word	0x30204446
    9854:	00000000 	.word	0x00000000
    9858:	5254534d 	.word	0x5254534d
    985c:	20545352 	.word	0x20545352
    9860:	00003234 	.word	0x00003234
    9864:	45534552 	.word	0x45534552
    9868:	43412054 	.word	0x43412054
    986c:	00000a4b 	.word	0x00000a4b
    9870:	52524e4d 	.word	0x52524e4d
    9874:	34205453 	.word	0x34205453
    9878:	00000032 	.word	0x00000032
    987c:	4f4e494d 	.word	0x4f4e494d
    9880:	45522052 	.word	0x45522052
    9884:	20544553 	.word	0x20544553
    9888:	0a4b4341 	.word	0x0a4b4341
    988c:	00000000 	.word	0x00000000
    9890:	4f4e494d 	.word	0x4f4e494d
    9894:	45522052 	.word	0x45522052
    9898:	20544553 	.word	0x20544553
    989c:	454e4f44 	.word	0x454e4f44
    98a0:	0000000a 	.word	0x0000000a
    98a4:	54545250 	.word	0x54545250
    98a8:	30485352 	.word	0x30485352
    98ac:	00000000 	.word	0x00000000
    98b0:	54545250 	.word	0x54545250
    98b4:	30485352 	.word	0x30485352
    98b8:	00642520 	.word	0x00642520
    98bc:	54545250 	.word	0x54545250
    98c0:	31485352 	.word	0x31485352
    98c4:	00000000 	.word	0x00000000
    98c8:	54545250 	.word	0x54545250
    98cc:	31485352 	.word	0x31485352
    98d0:	00642520 	.word	0x00642520
    98d4:	54545250 	.word	0x54545250
    98d8:	32485352 	.word	0x32485352
    98dc:	00000000 	.word	0x00000000
    98e0:	54545250 	.word	0x54545250
    98e4:	32485352 	.word	0x32485352
    98e8:	00642520 	.word	0x00642520
    98ec:	54545250 	.word	0x54545250
    98f0:	33485352 	.word	0x33485352
    98f4:	00000000 	.word	0x00000000
    98f8:	54545250 	.word	0x54545250
    98fc:	33485352 	.word	0x33485352
    9900:	00642520 	.word	0x00642520
    9904:	54545250 	.word	0x54545250
    9908:	34485352 	.word	0x34485352
    990c:	00000000 	.word	0x00000000
    9910:	54545250 	.word	0x54545250
    9914:	34485352 	.word	0x34485352
    9918:	00642520 	.word	0x00642520
    991c:	54545250 	.word	0x54545250
    9920:	35485352 	.word	0x35485352
    9924:	00000000 	.word	0x00000000
    9928:	54545250 	.word	0x54545250
    992c:	35485352 	.word	0x35485352
    9930:	00642520 	.word	0x00642520
    9934:	54545250 	.word	0x54545250
    9938:	36485352 	.word	0x36485352
    993c:	00000000 	.word	0x00000000
    9940:	54545250 	.word	0x54545250
    9944:	36485352 	.word	0x36485352
    9948:	00642520 	.word	0x00642520
    994c:	54545250 	.word	0x54545250
    9950:	37485352 	.word	0x37485352
    9954:	00000000 	.word	0x00000000
    9958:	54545250 	.word	0x54545250
    995c:	37485352 	.word	0x37485352
    9960:	00642520 	.word	0x00642520
    9964:	20564f43 	.word	0x20564f43
    9968:	00000031 	.word	0x00000031
    996c:	20564f43 	.word	0x20564f43
    9970:	00000030 	.word	0x00000030
    9974:	004b4341 	.word	0x004b4341
    9978:	52444441 	.word	0x52444441
    997c:	6425203a 	.word	0x6425203a
    9980:	203e2d20 	.word	0x203e2d20
    9984:	000a6425 	.word	0x000a6425
    9988:	3a525245 	.word	0x3a525245
    998c:	25642520 	.word	0x25642520
    9990:	25642564 	.word	0x25642564
    9994:	25642564 	.word	0x25642564
    9998:	25642564 	.word	0x25642564
    999c:	000a0d64 	.word	0x000a0d64
    99a0:	000032ac 	.word	0x000032ac
    99a4:	000032ca 	.word	0x000032ca
    99a8:	000032f0 	.word	0x000032f0
    99ac:	00003316 	.word	0x00003316
    99b0:	0000333c 	.word	0x0000333c
    99b4:	00003362 	.word	0x00003362
    99b8:	00003388 	.word	0x00003388
    99bc:	000033ae 	.word	0x000033ae
    99c0:	000033d4 	.word	0x000033d4
    99c4:	000033fa 	.word	0x000033fa
    99c8:	00003420 	.word	0x00003420
    99cc:	00003446 	.word	0x00003446
    99d0:	00003478 	.word	0x00003478
    99d4:	00003478 	.word	0x00003478
    99d8:	00003478 	.word	0x00003478
    99dc:	00003478 	.word	0x00003478
    99e0:	00003478 	.word	0x00003478
    99e4:	00003478 	.word	0x00003478
    99e8:	00003478 	.word	0x00003478
    99ec:	0000346c 	.word	0x0000346c
    99f0:	000034b4 	.word	0x000034b4
    99f4:	000034d2 	.word	0x000034d2
    99f8:	000034ec 	.word	0x000034ec
    99fc:	00003506 	.word	0x00003506
    9a00:	00003520 	.word	0x00003520
    9a04:	0000353a 	.word	0x0000353a
    9a08:	00003554 	.word	0x00003554
    9a0c:	00003592 	.word	0x00003592
    9a10:	000035e8 	.word	0x000035e8
    9a14:	0000363e 	.word	0x0000363e
    9a18:	00003694 	.word	0x00003694
    9a1c:	64343025 	.word	0x64343025
    9a20:	34302520 	.word	0x34302520
    9a24:	30252064 	.word	0x30252064
    9a28:	25206434 	.word	0x25206434
    9a2c:	20643430 	.word	0x20643430
    9a30:	64343025 	.word	0x64343025
    9a34:	34302520 	.word	0x34302520
    9a38:	000a0d64 	.word	0x000a0d64
    9a3c:	0000530e 	.word	0x0000530e
    9a40:	00005386 	.word	0x00005386
    9a44:	00005386 	.word	0x00005386
    9a48:	0000532c 	.word	0x0000532c
    9a4c:	00005326 	.word	0x00005326
    9a50:	00005332 	.word	0x00005332
    9a54:	00005314 	.word	0x00005314
    9a58:	00005338 	.word	0x00005338
    9a5c:	0000536c 	.word	0x0000536c
    9a60:	00005460 	.word	0x00005460
    9a64:	000054b0 	.word	0x000054b0
    9a68:	000054b0 	.word	0x000054b0
    9a6c:	000054ac 	.word	0x000054ac
    9a70:	00005452 	.word	0x00005452
    9a74:	00005472 	.word	0x00005472
    9a78:	00005442 	.word	0x00005442
    9a7c:	00005484 	.word	0x00005484
    9a80:	00005496 	.word	0x00005496
    9a84:	2d2d3c0a 	.word	0x2d2d3c0a
    9a88:	2d2d2d2d 	.word	0x2d2d2d2d
    9a8c:	2d2d2d2d 	.word	0x2d2d2d2d
    9a90:	2d2d2d2d 	.word	0x2d2d2d2d
    9a94:	2d2d2d2d 	.word	0x2d2d2d2d
    9a98:	0a3e2d2d 	.word	0x0a3e2d2d
    9a9c:	00000000 	.word	0x00000000
    9aa0:	7473614d 	.word	0x7473614d
    9aa4:	42207265 	.word	0x42207265
    9aa8:	6472616f 	.word	0x6472616f
    9aac:	61745320 	.word	0x61745320
    9ab0:	64657472 	.word	0x64657472
    9ab4:	0000000a 	.word	0x0000000a
    9ab8:	54464f53 	.word	0x54464f53
    9abc:	45524157 	.word	0x45524157
    9ac0:	5245565f 	.word	0x5245565f
    9ac4:	4e4f4953 	.word	0x4e4f4953
    9ac8:	6425203a 	.word	0x6425203a
    9acc:	00000a0d 	.word	0x00000a0d
    9ad0:	2d2d2d3c 	.word	0x2d2d2d3c
    9ad4:	2d2d2d2d 	.word	0x2d2d2d2d
    9ad8:	2d2d2d2d 	.word	0x2d2d2d2d
    9adc:	2d2d2d2d 	.word	0x2d2d2d2d
    9ae0:	2d2d2d2d 	.word	0x2d2d2d2d
    9ae4:	0a0a3e2d 	.word	0x0a0a3e2d
    9ae8:	00000000 	.word	0x00000000
    9aec:	00007120 	.word	0x00007120
    9af0:	00007102 	.word	0x00007102
    9af4:	000070bc 	.word	0x000070bc
    9af8:	00006fda 	.word	0x00006fda
    9afc:	000070bc 	.word	0x000070bc
    9b00:	000070f4 	.word	0x000070f4
    9b04:	000070bc 	.word	0x000070bc
    9b08:	00006fda 	.word	0x00006fda
    9b0c:	00007102 	.word	0x00007102
    9b10:	00007102 	.word	0x00007102
    9b14:	000070f4 	.word	0x000070f4
    9b18:	00006fda 	.word	0x00006fda
    9b1c:	00006fd2 	.word	0x00006fd2
    9b20:	00006fd2 	.word	0x00006fd2
    9b24:	00006fd2 	.word	0x00006fd2
    9b28:	00007338 	.word	0x00007338
    9b2c:	00007780 	.word	0x00007780
    9b30:	00007640 	.word	0x00007640
    9b34:	00007640 	.word	0x00007640
    9b38:	0000763c 	.word	0x0000763c
    9b3c:	00007758 	.word	0x00007758
    9b40:	00007758 	.word	0x00007758
    9b44:	0000774a 	.word	0x0000774a
    9b48:	0000763c 	.word	0x0000763c
    9b4c:	00007758 	.word	0x00007758
    9b50:	0000774a 	.word	0x0000774a
    9b54:	00007758 	.word	0x00007758
    9b58:	0000763c 	.word	0x0000763c
    9b5c:	00007760 	.word	0x00007760
    9b60:	00007760 	.word	0x00007760
    9b64:	00007760 	.word	0x00007760
    9b68:	00007964 	.word	0x00007964
    9b6c:	2b302d23 	.word	0x2b302d23
    9b70:	6c680020 	.word	0x6c680020
    9b74:	6665004c 	.word	0x6665004c
    9b78:	47464567 	.word	0x47464567
    9b7c:	00          	.byte	0x00
    9b7d:	30          	.byte	0x30
    9b7e:	3231      	.short	0x3231
    9b80:	36353433 	.word	0x36353433
    9b84:	41393837 	.word	0x41393837
    9b88:	45444342 	.word	0x45444342
    9b8c:	31300046 	.word	0x31300046
    9b90:	35343332 	.word	0x35343332
    9b94:	39383736 	.word	0x39383736
    9b98:	64636261 	.word	0x64636261
    9b9c:	00006665 	.word	0x00006665
    9ba0:	00009bbe 	.word	0x00009bbe
    9ba4:	00009bc1 	.word	0x00009bc1
    9ba8:	00009bc4 	.word	0x00009bc4
    9bac:	61462d41 	.word	0x61462d41
    9bb0:	3938662d 	.word	0x3938662d
    9bb4:	33323130 	.word	0x33323130
    9bb8:	37363534 	.word	0x37363534
    9bbc:	005d      	.short	0x005d
    9bbe:	2d2b      	.short	0x2d2b
    9bc0:	00303000 	.word	0x00303000
    9bc4:	00005878 	.word	0x00005878

00009bc8 <__sf_fake_stderr>:
	...

00009be8 <__sf_fake_stdin>:
	...

00009c08 <__sf_fake_stdout>:
	...
    9c28:	4f500043 00584953 2000002e                       C.POSIX...

00009c32 <_ctype_>:
    9c32:	20202000 20202020 28282020 20282828     .         ((((( 
    9c42:	20202020 20202020 20202020 20202020                     
    9c52:	10108820 10101010 10101010 10101010      ...............
    9c62:	04040410 04040404 10040404 10101010     ................
    9c72:	41411010 41414141 01010101 01010101     ..AAAAAA........
    9c82:	01010101 01010101 01010101 10101010     ................
    9c92:	42421010 42424242 02020202 02020202     ..BBBBBB........
    9ca2:	02020202 02020202 02020202 10101010     ................
    9cb2:	00000020 00000000 00000000 00000000      ...............
	...

00009d34 <_init>:
    9d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d36:	46c0      	nop			; (mov r8, r8)
    9d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9d3a:	bc08      	pop	{r3}
    9d3c:	469e      	mov	lr, r3
    9d3e:	4770      	bx	lr

00009d40 <__init_array_start>:
    9d40:	000000dd 	.word	0x000000dd

00009d44 <_fini>:
    9d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d46:	46c0      	nop			; (mov r8, r8)
    9d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9d4a:	bc08      	pop	{r3}
    9d4c:	469e      	mov	lr, r3
    9d4e:	4770      	bx	lr

00009d50 <__fini_array_start>:
    9d50:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <test_bob>:
2000000c:	5750 004d                                   PWM.

20000010 <mcp23017_data>:
20000010:	0000 0000 0020 0000 0000 0000 0000 0000     .... ...........
20000020:	0001 0000 0021 0000 0000 0000 0000 0000     ....!...........
20000030:	0001 0000 0022 0000 0000 0000 0000 0000     ...."...........
20000040:	0001 0000 0023 0000 0000 0000 0000 0000     ....#...........
20000050:	0001 0000 0024 0000 0000 0000 0000 0000     ....$...........
20000060:	0001 0000 0025 0000 0000 0000 0000 0000     ....%...........
20000070:	0000 0000 0026 0000 0000 0000 0000 0000     ....&...........
20000080:	0000 0000 0027 0000 0000 0000 0000 0000     ....'...........

20000090 <duty_cycle.13697>:
20000090:	0132                                             2

20000091 <g_interrupt_enabled>:
20000091:	0001 9800                                        ...

20000094 <_impure_ptr>:
20000094:	0098 2000                                   ... 

20000098 <impure_data>:
20000098:	0000 0000 9be8 0000 9c08 0000 9bc8 0000     ................
	...

200000f8 <__global_locale>:
200000f8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000118:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000138:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000158:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000178:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000198:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200001b8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200001d8:	94f5 0000 92d5 0000 0000 0000 9c32 0000     ............2...
200001e8:	9c30 0000 9b71 0000 9b71 0000 9b71 0000     0...q...q...q...
200001f8:	9b71 0000 9b71 0000 9b71 0000 9b71 0000     q...q...q...q...
20000208:	9b71 0000 9b71 0000 ffff ffff ffff ffff     q...q...........
20000218:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000240:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
