
ElectrifyEverything.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000072cc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000072cc  000072cc  000172cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000053c  20000000  000072d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000122c  2000053c  00007810  0002053c  2**2
                  ALLOC
  4 .stack        00002000  20001768  00008a3c  0002053c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002053c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020564  2**0
                  CONTENTS, READONLY
  7 .debug_info   000495a2  00000000  00000000  000205bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004e16  00000000  00000000  00069b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000037b6  00000000  00000000  0006e975  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000aa0  00000000  00000000  0007212b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000910  00000000  00000000  00072bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001eb0b  00000000  00000000  000734db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00014974  00000000  00000000  00091fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008dade  00000000  00000000  000a695a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002c6c  00000000  00000000  00134438  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 37 00 20 81 4d 00 00 79 4e 00 00 79 4e 00 00     h7. .M..yN..yN..
	...
      2c:	79 4e 00 00 00 00 00 00 00 00 00 00 79 4e 00 00     yN..........yN..
      3c:	79 4e 00 00 79 4e 00 00 79 4e 00 00 3d 12 00 00     yN..yN..yN..=...
      4c:	79 4e 00 00 c1 07 00 00 79 4e 00 00 79 4e 00 00     yN......yN..yN..
      5c:	79 4e 00 00 79 4e 00 00 79 4e 00 00 5d 41 00 00     yN..yN..yN..]A..
      6c:	f1 12 00 00 79 4e 00 00 79 4e 00 00 79 4e 00 00     ....yN..yN..yN..
      7c:	79 4e 00 00 79 4e 00 00 79 4e 00 00 39 3a 00 00     yN..yN..yN..9:..
      8c:	79 4e 00 00 79 4e 00 00 79 4e 00 00 79 4e 00 00     yN..yN..yN..yN..
      9c:	79 4e 00 00 79 4e 00 00 79 4e 00 00 79 4e 00 00     yN..yN..yN..yN..
      ac:	79 4e 00 00 00 00 00 00                             yN......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000053c 	.word	0x2000053c
      d4:	00000000 	.word	0x00000000
      d8:	000072d4 	.word	0x000072d4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000540 	.word	0x20000540
     108:	000072d4 	.word	0x000072d4
     10c:	000072d4 	.word	0x000072d4
     110:	00000000 	.word	0x00000000

00000114 <obd_init>:
	return c1 << 4 | (c2 & 0xf);
}


void obd_init(void)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b085      	sub	sp, #20
     118:	af00      	add	r7, sp, #0
	
	obd_uart_init();
     11a:	4b31      	ldr	r3, [pc, #196]	; (1e0 <obd_init+0xcc>)
     11c:	4798      	blx	r3
	obd_uart_write("010D\r");
	
	obd_uart_write("ATRV\r");*/


	obd_uart_write(INIT_CMD1);	//RESET
     11e:	4b31      	ldr	r3, [pc, #196]	; (1e4 <obd_init+0xd0>)
     120:	0018      	movs	r0, r3
     122:	4b31      	ldr	r3, [pc, #196]	; (1e8 <obd_init+0xd4>)
     124:	4798      	blx	r3
	obd_uart_write(INIT_CMD2);	//ECHO OFF
     126:	4b31      	ldr	r3, [pc, #196]	; (1ec <obd_init+0xd8>)
     128:	0018      	movs	r0, r3
     12a:	4b2f      	ldr	r3, [pc, #188]	; (1e8 <obd_init+0xd4>)
     12c:	4798      	blx	r3
	obd_uart_write(INIT_CMD3);	//HEADERS OFF
     12e:	4b30      	ldr	r3, [pc, #192]	; (1f0 <obd_init+0xdc>)
     130:	0018      	movs	r0, r3
     132:	4b2d      	ldr	r3, [pc, #180]	; (1e8 <obd_init+0xd4>)
     134:	4798      	blx	r3
	
	delay_ms(10);
     136:	2000      	movs	r0, #0
     138:	4b2e      	ldr	r3, [pc, #184]	; (1f4 <obd_init+0xe0>)
     13a:	4798      	blx	r3
     13c:	0003      	movs	r3, r0
     13e:	603b      	str	r3, [r7, #0]
     140:	2300      	movs	r3, #0
     142:	607b      	str	r3, [r7, #4]
     144:	6838      	ldr	r0, [r7, #0]
     146:	6879      	ldr	r1, [r7, #4]
     148:	0003      	movs	r3, r0
     14a:	000c      	movs	r4, r1
     14c:	0f9a      	lsrs	r2, r3, #30
     14e:	00a6      	lsls	r6, r4, #2
     150:	4316      	orrs	r6, r2
     152:	009d      	lsls	r5, r3, #2
     154:	0003      	movs	r3, r0
     156:	000c      	movs	r4, r1
     158:	195b      	adds	r3, r3, r5
     15a:	4174      	adcs	r4, r6
     15c:	18db      	adds	r3, r3, r3
     15e:	4164      	adcs	r4, r4
     160:	0019      	movs	r1, r3
     162:	0022      	movs	r2, r4
     164:	4b24      	ldr	r3, [pc, #144]	; (1f8 <obd_init+0xe4>)
     166:	2400      	movs	r4, #0
     168:	18c9      	adds	r1, r1, r3
     16a:	4162      	adcs	r2, r4
     16c:	0008      	movs	r0, r1
     16e:	0011      	movs	r1, r2
     170:	4c22      	ldr	r4, [pc, #136]	; (1fc <obd_init+0xe8>)
     172:	4a23      	ldr	r2, [pc, #140]	; (200 <obd_init+0xec>)
     174:	2300      	movs	r3, #0
     176:	47a0      	blx	r4
     178:	0003      	movs	r3, r0
     17a:	000c      	movs	r4, r1
     17c:	0018      	movs	r0, r3
     17e:	4b21      	ldr	r3, [pc, #132]	; (204 <obd_init+0xf0>)
     180:	4798      	blx	r3
	obd_uart_write("010D\r");
     182:	4b21      	ldr	r3, [pc, #132]	; (208 <obd_init+0xf4>)
     184:	0018      	movs	r0, r3
     186:	4b18      	ldr	r3, [pc, #96]	; (1e8 <obd_init+0xd4>)
     188:	4798      	blx	r3
	
	
	//obd_uart_write("ATSP %u\r")
	
	memset(pidmap,0,sizeof(pidmap));
     18a:	4b20      	ldr	r3, [pc, #128]	; (20c <obd_init+0xf8>)
     18c:	2210      	movs	r2, #16
     18e:	2100      	movs	r1, #0
     190:	0018      	movs	r0, r3
     192:	4b1f      	ldr	r3, [pc, #124]	; (210 <obd_init+0xfc>)
     194:	4798      	blx	r3
	
	for (uint8_t i = 0;i < 4; i++)
     196:	230f      	movs	r3, #15
     198:	18fb      	adds	r3, r7, r3
     19a:	2200      	movs	r2, #0
     19c:	701a      	strb	r2, [r3, #0]
     19e:	e015      	b.n	1cc <obd_init+0xb8>
	{
		uint8_t pid = i * 0x20;
     1a0:	230e      	movs	r3, #14
     1a2:	18fb      	adds	r3, r7, r3
     1a4:	220f      	movs	r2, #15
     1a6:	18ba      	adds	r2, r7, r2
     1a8:	7812      	ldrb	r2, [r2, #0]
     1aa:	0152      	lsls	r2, r2, #5
     1ac:	701a      	strb	r2, [r3, #0]
		obd_send_query(0x01,pid,4);
     1ae:	230e      	movs	r3, #14
     1b0:	18fb      	adds	r3, r7, r3
     1b2:	781b      	ldrb	r3, [r3, #0]
     1b4:	2204      	movs	r2, #4
     1b6:	0019      	movs	r1, r3
     1b8:	2001      	movs	r0, #1
     1ba:	4b16      	ldr	r3, [pc, #88]	; (214 <obd_init+0x100>)
     1bc:	4798      	blx	r3
	for (uint8_t i = 0;i < 4; i++)
     1be:	230f      	movs	r3, #15
     1c0:	18fb      	adds	r3, r7, r3
     1c2:	781a      	ldrb	r2, [r3, #0]
     1c4:	230f      	movs	r3, #15
     1c6:	18fb      	adds	r3, r7, r3
     1c8:	3201      	adds	r2, #1
     1ca:	701a      	strb	r2, [r3, #0]
     1cc:	230f      	movs	r3, #15
     1ce:	18fb      	adds	r3, r7, r3
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b03      	cmp	r3, #3
     1d4:	d9e4      	bls.n	1a0 <obd_init+0x8c>
	}
}
     1d6:	46c0      	nop			; (mov r8, r8)
     1d8:	46bd      	mov	sp, r7
     1da:	b005      	add	sp, #20
     1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	00000509 	.word	0x00000509
     1e4:	00006c00 	.word	0x00006c00
     1e8:	0000059d 	.word	0x0000059d
     1ec:	00006c08 	.word	0x00006c08
     1f0:	00006c10 	.word	0x00006c10
     1f4:	00004aa5 	.word	0x00004aa5
     1f8:	00001b57 	.word	0x00001b57
     1fc:	000055e1 	.word	0x000055e1
     200:	00001b58 	.word	0x00001b58
     204:	20000001 	.word	0x20000001
     208:	00006c18 	.word	0x00006c18
     20c:	2000099c 	.word	0x2000099c
     210:	000058b7 	.word	0x000058b7
     214:	00000219 	.word	0x00000219

00000218 <obd_send_query>:

enum status_code obd_send_query(uint8_t service, uint8_t pid, uint8_t data_length)
{
     218:	b5f0      	push	{r4, r5, r6, r7, lr}
     21a:	b08f      	sub	sp, #60	; 0x3c
     21c:	af00      	add	r7, sp, #0
     21e:	61b8      	str	r0, [r7, #24]
     220:	6079      	str	r1, [r7, #4]
     222:	0010      	movs	r0, r2
     224:	221f      	movs	r2, #31
     226:	18ba      	adds	r2, r7, r2
     228:	7e39      	ldrb	r1, [r7, #24]
     22a:	7011      	strb	r1, [r2, #0]
     22c:	221e      	movs	r2, #30
     22e:	18ba      	adds	r2, r7, r2
     230:	7939      	ldrb	r1, [r7, #4]
     232:	7011      	strb	r1, [r2, #0]
     234:	221d      	movs	r2, #29
     236:	18ba      	adds	r2, r7, r2
     238:	1c01      	adds	r1, r0, #0
     23a:	7011      	strb	r1, [r2, #0]
     23c:	466a      	mov	r2, sp
     23e:	61ba      	str	r2, [r7, #24]
	enum status_code temp = STATUS_OK;
     240:	211f      	movs	r1, #31
     242:	2218      	movs	r2, #24
     244:	18ba      	adds	r2, r7, r2
     246:	1852      	adds	r2, r2, r1
     248:	2100      	movs	r1, #0
     24a:	7011      	strb	r1, [r2, #0]
	uint8_t i = 0;
     24c:	211e      	movs	r1, #30
     24e:	2218      	movs	r2, #24
     250:	18ba      	adds	r2, r7, r2
     252:	1852      	adds	r2, r2, r1
     254:	2100      	movs	r1, #0
     256:	7011      	strb	r1, [r2, #0]
	uint8_t data[data_length];
     258:	221d      	movs	r2, #29
     25a:	18ba      	adds	r2, r7, r2
     25c:	7812      	ldrb	r2, [r2, #0]
     25e:	0011      	movs	r1, r2
     260:	3901      	subs	r1, #1
     262:	6339      	str	r1, [r7, #48]	; 0x30
     264:	613a      	str	r2, [r7, #16]
     266:	2100      	movs	r1, #0
     268:	6179      	str	r1, [r7, #20]
     26a:	6939      	ldr	r1, [r7, #16]
     26c:	0f49      	lsrs	r1, r1, #29
     26e:	6978      	ldr	r0, [r7, #20]
     270:	00c6      	lsls	r6, r0, #3
     272:	430e      	orrs	r6, r1
     274:	6939      	ldr	r1, [r7, #16]
     276:	00cd      	lsls	r5, r1, #3
     278:	60ba      	str	r2, [r7, #8]
     27a:	2100      	movs	r1, #0
     27c:	60f9      	str	r1, [r7, #12]
     27e:	68bd      	ldr	r5, [r7, #8]
     280:	68fe      	ldr	r6, [r7, #12]
     282:	0029      	movs	r1, r5
     284:	0f49      	lsrs	r1, r1, #29
     286:	0030      	movs	r0, r6
     288:	00c4      	lsls	r4, r0, #3
     28a:	430c      	orrs	r4, r1
     28c:	0029      	movs	r1, r5
     28e:	00cb      	lsls	r3, r1, #3
     290:	0013      	movs	r3, r2
     292:	3307      	adds	r3, #7
     294:	08db      	lsrs	r3, r3, #3
     296:	00db      	lsls	r3, r3, #3
     298:	4669      	mov	r1, sp
     29a:	1acb      	subs	r3, r1, r3
     29c:	469d      	mov	sp, r3
     29e:	466b      	mov	r3, sp
     2a0:	3300      	adds	r3, #0
     2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	char cmd[8];
	sprintf(cmd,"%02X%02X\r",service,pid);
     2a4:	231f      	movs	r3, #31
     2a6:	18fb      	adds	r3, r7, r3
     2a8:	781a      	ldrb	r2, [r3, #0]
     2aa:	231e      	movs	r3, #30
     2ac:	18fb      	adds	r3, r7, r3
     2ae:	781b      	ldrb	r3, [r3, #0]
     2b0:	4917      	ldr	r1, [pc, #92]	; (310 <obd_send_query+0xf8>)
     2b2:	200c      	movs	r0, #12
     2b4:	2418      	movs	r4, #24
     2b6:	46a4      	mov	ip, r4
     2b8:	44bc      	add	ip, r7
     2ba:	4460      	add	r0, ip
     2bc:	4c15      	ldr	r4, [pc, #84]	; (314 <obd_send_query+0xfc>)
     2be:	47a0      	blx	r4
	temp = obd_uart_write(cmd);
     2c0:	231f      	movs	r3, #31
     2c2:	2218      	movs	r2, #24
     2c4:	18ba      	adds	r2, r7, r2
     2c6:	18d4      	adds	r4, r2, r3
     2c8:	230c      	movs	r3, #12
     2ca:	2218      	movs	r2, #24
     2cc:	4694      	mov	ip, r2
     2ce:	44bc      	add	ip, r7
     2d0:	4463      	add	r3, ip
     2d2:	0018      	movs	r0, r3
     2d4:	4b10      	ldr	r3, [pc, #64]	; (318 <obd_send_query+0x100>)
     2d6:	4798      	blx	r3
     2d8:	0003      	movs	r3, r0
     2da:	7023      	strb	r3, [r4, #0]
	temp = obd_uart_read(&data,data_length);
     2dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     2de:	231f      	movs	r3, #31
     2e0:	2118      	movs	r1, #24
     2e2:	1879      	adds	r1, r7, r1
     2e4:	18cc      	adds	r4, r1, r3
     2e6:	231d      	movs	r3, #29
     2e8:	18fb      	adds	r3, r7, r3
     2ea:	781b      	ldrb	r3, [r3, #0]
     2ec:	0019      	movs	r1, r3
     2ee:	0010      	movs	r0, r2
     2f0:	4b0a      	ldr	r3, [pc, #40]	; (31c <obd_send_query+0x104>)
     2f2:	4798      	blx	r3
     2f4:	0003      	movs	r3, r0
     2f6:	7023      	strb	r3, [r4, #0]
	return temp;
     2f8:	231f      	movs	r3, #31
     2fa:	2218      	movs	r2, #24
     2fc:	4694      	mov	ip, r2
     2fe:	44bc      	add	ip, r7
     300:	4463      	add	r3, ip
     302:	781b      	ldrb	r3, [r3, #0]
     304:	69ba      	ldr	r2, [r7, #24]
     306:	4695      	mov	sp, r2
}
     308:	0018      	movs	r0, r3
     30a:	46bd      	mov	sp, r7
     30c:	b00f      	add	sp, #60	; 0x3c
     30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     310:	00006c20 	.word	0x00006c20
     314:	00005a3d 	.word	0x00005a3d
     318:	0000059d 	.word	0x0000059d
     31c:	000005e5 	.word	0x000005e5

00000320 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     320:	b580      	push	{r7, lr}
     322:	b082      	sub	sp, #8
     324:	af00      	add	r7, sp, #0
     326:	0002      	movs	r2, r0
     328:	1dfb      	adds	r3, r7, #7
     32a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     32c:	4b06      	ldr	r3, [pc, #24]	; (348 <NVIC_EnableIRQ+0x28>)
     32e:	1dfa      	adds	r2, r7, #7
     330:	7812      	ldrb	r2, [r2, #0]
     332:	0011      	movs	r1, r2
     334:	221f      	movs	r2, #31
     336:	400a      	ands	r2, r1
     338:	2101      	movs	r1, #1
     33a:	4091      	lsls	r1, r2
     33c:	000a      	movs	r2, r1
     33e:	601a      	str	r2, [r3, #0]
}
     340:	46c0      	nop			; (mov r8, r8)
     342:	46bd      	mov	sp, r7
     344:	b002      	add	sp, #8
     346:	bd80      	pop	{r7, pc}
     348:	e000e100 	.word	0xe000e100

0000034c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     34c:	b5b0      	push	{r4, r5, r7, lr}
     34e:	b082      	sub	sp, #8
     350:	af00      	add	r7, sp, #0
     352:	0002      	movs	r2, r0
     354:	6039      	str	r1, [r7, #0]
     356:	1dfb      	adds	r3, r7, #7
     358:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
     35a:	1dfb      	adds	r3, r7, #7
     35c:	781b      	ldrb	r3, [r3, #0]
     35e:	2b7f      	cmp	r3, #127	; 0x7f
     360:	d932      	bls.n	3c8 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     362:	4c2f      	ldr	r4, [pc, #188]	; (420 <NVIC_SetPriority+0xd4>)
     364:	1dfb      	adds	r3, r7, #7
     366:	781b      	ldrb	r3, [r3, #0]
     368:	001a      	movs	r2, r3
     36a:	230f      	movs	r3, #15
     36c:	4013      	ands	r3, r2
     36e:	3b08      	subs	r3, #8
     370:	0899      	lsrs	r1, r3, #2
     372:	4a2b      	ldr	r2, [pc, #172]	; (420 <NVIC_SetPriority+0xd4>)
     374:	1dfb      	adds	r3, r7, #7
     376:	781b      	ldrb	r3, [r3, #0]
     378:	0018      	movs	r0, r3
     37a:	230f      	movs	r3, #15
     37c:	4003      	ands	r3, r0
     37e:	3b08      	subs	r3, #8
     380:	089b      	lsrs	r3, r3, #2
     382:	3306      	adds	r3, #6
     384:	009b      	lsls	r3, r3, #2
     386:	18d3      	adds	r3, r2, r3
     388:	3304      	adds	r3, #4
     38a:	681b      	ldr	r3, [r3, #0]
     38c:	1dfa      	adds	r2, r7, #7
     38e:	7812      	ldrb	r2, [r2, #0]
     390:	0010      	movs	r0, r2
     392:	2203      	movs	r2, #3
     394:	4002      	ands	r2, r0
     396:	00d2      	lsls	r2, r2, #3
     398:	20ff      	movs	r0, #255	; 0xff
     39a:	4090      	lsls	r0, r2
     39c:	0002      	movs	r2, r0
     39e:	43d2      	mvns	r2, r2
     3a0:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     3a2:	683b      	ldr	r3, [r7, #0]
     3a4:	019b      	lsls	r3, r3, #6
     3a6:	20ff      	movs	r0, #255	; 0xff
     3a8:	4018      	ands	r0, r3
     3aa:	1dfb      	adds	r3, r7, #7
     3ac:	781b      	ldrb	r3, [r3, #0]
     3ae:	001d      	movs	r5, r3
     3b0:	2303      	movs	r3, #3
     3b2:	402b      	ands	r3, r5
     3b4:	00db      	lsls	r3, r3, #3
     3b6:	4098      	lsls	r0, r3
     3b8:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     3ba:	431a      	orrs	r2, r3
     3bc:	1d8b      	adds	r3, r1, #6
     3be:	009b      	lsls	r3, r3, #2
     3c0:	18e3      	adds	r3, r4, r3
     3c2:	3304      	adds	r3, #4
     3c4:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
     3c6:	e027      	b.n	418 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     3c8:	4c16      	ldr	r4, [pc, #88]	; (424 <NVIC_SetPriority+0xd8>)
     3ca:	1dfb      	adds	r3, r7, #7
     3cc:	781b      	ldrb	r3, [r3, #0]
     3ce:	b25b      	sxtb	r3, r3
     3d0:	089b      	lsrs	r3, r3, #2
     3d2:	4914      	ldr	r1, [pc, #80]	; (424 <NVIC_SetPriority+0xd8>)
     3d4:	1dfa      	adds	r2, r7, #7
     3d6:	7812      	ldrb	r2, [r2, #0]
     3d8:	b252      	sxtb	r2, r2
     3da:	0892      	lsrs	r2, r2, #2
     3dc:	32c0      	adds	r2, #192	; 0xc0
     3de:	0092      	lsls	r2, r2, #2
     3e0:	5852      	ldr	r2, [r2, r1]
     3e2:	1df9      	adds	r1, r7, #7
     3e4:	7809      	ldrb	r1, [r1, #0]
     3e6:	0008      	movs	r0, r1
     3e8:	2103      	movs	r1, #3
     3ea:	4001      	ands	r1, r0
     3ec:	00c9      	lsls	r1, r1, #3
     3ee:	20ff      	movs	r0, #255	; 0xff
     3f0:	4088      	lsls	r0, r1
     3f2:	0001      	movs	r1, r0
     3f4:	43c9      	mvns	r1, r1
     3f6:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     3f8:	683a      	ldr	r2, [r7, #0]
     3fa:	0192      	lsls	r2, r2, #6
     3fc:	20ff      	movs	r0, #255	; 0xff
     3fe:	4010      	ands	r0, r2
     400:	1dfa      	adds	r2, r7, #7
     402:	7812      	ldrb	r2, [r2, #0]
     404:	0015      	movs	r5, r2
     406:	2203      	movs	r2, #3
     408:	402a      	ands	r2, r5
     40a:	00d2      	lsls	r2, r2, #3
     40c:	4090      	lsls	r0, r2
     40e:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     410:	430a      	orrs	r2, r1
     412:	33c0      	adds	r3, #192	; 0xc0
     414:	009b      	lsls	r3, r3, #2
     416:	511a      	str	r2, [r3, r4]
}
     418:	46c0      	nop			; (mov r8, r8)
     41a:	46bd      	mov	sp, r7
     41c:	b002      	add	sp, #8
     41e:	bdb0      	pop	{r4, r5, r7, pc}
     420:	e000ed00 	.word	0xe000ed00
     424:	e000e100 	.word	0xe000e100

00000428 <obd_uart_clk_init>:

#include "obd_uart.h"


void obd_uart_clk_init(void)
{
     428:	b580      	push	{r7, lr}
     42a:	af00      	add	r7, sp, #0
	// Start the Software Reset and wait for it to finish
	OBD_UART_MODULE->USART.CTRLA.bit.SWRST = 1 ;
     42c:	4a13      	ldr	r2, [pc, #76]	; (47c <obd_uart_clk_init+0x54>)
     42e:	6813      	ldr	r3, [r2, #0]
     430:	2101      	movs	r1, #1
     432:	430b      	orrs	r3, r1
     434:	6013      	str	r3, [r2, #0]
	while ( OBD_UART_MODULE->USART.CTRLA.bit.SWRST || OBD_UART_MODULE->USART.SYNCBUSY.bit.SWRST );
     436:	46c0      	nop			; (mov r8, r8)
     438:	4b10      	ldr	r3, [pc, #64]	; (47c <obd_uart_clk_init+0x54>)
     43a:	681b      	ldr	r3, [r3, #0]
     43c:	07db      	lsls	r3, r3, #31
     43e:	0fdb      	lsrs	r3, r3, #31
     440:	b2db      	uxtb	r3, r3
     442:	2b00      	cmp	r3, #0
     444:	d1f8      	bne.n	438 <obd_uart_clk_init+0x10>
     446:	4b0d      	ldr	r3, [pc, #52]	; (47c <obd_uart_clk_init+0x54>)
     448:	69db      	ldr	r3, [r3, #28]
     44a:	07db      	lsls	r3, r3, #31
     44c:	0fdb      	lsrs	r3, r3, #31
     44e:	b2db      	uxtb	r3, r3
     450:	2b00      	cmp	r3, #0
     452:	d1f1      	bne.n	438 <obd_uart_clk_init+0x10>
	
	// Turn on peripheral clock for SERCOM being used
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
     454:	4b0a      	ldr	r3, [pc, #40]	; (480 <obd_uart_clk_init+0x58>)
     456:	4a0a      	ldr	r2, [pc, #40]	; (480 <obd_uart_clk_init+0x58>)
     458:	6a12      	ldr	r2, [r2, #32]
     45a:	2108      	movs	r1, #8
     45c:	430a      	orrs	r2, r1
     45e:	621a      	str	r2, [r3, #32]

	//Setting clock
	GCLK->CLKCTRL.reg =
     460:	4b08      	ldr	r3, [pc, #32]	; (484 <obd_uart_clk_init+0x5c>)
     462:	4a09      	ldr	r2, [pc, #36]	; (488 <obd_uart_clk_init+0x60>)
     464:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID( 0x15U )	|	// connected  SERCOMx to
	GCLK_CLKCTRL_GEN_GCLK0		|	// generic Clock Generator 3
	GCLK_CLKCTRL_CLKEN;			// and enable it

	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY ); // Wait for synchronization
     466:	46c0      	nop			; (mov r8, r8)
     468:	4b06      	ldr	r3, [pc, #24]	; (484 <obd_uart_clk_init+0x5c>)
     46a:	785b      	ldrb	r3, [r3, #1]
     46c:	b2db      	uxtb	r3, r3
     46e:	b25b      	sxtb	r3, r3
     470:	2b00      	cmp	r3, #0
     472:	dbf9      	blt.n	468 <obd_uart_clk_init+0x40>
}
     474:	46c0      	nop			; (mov r8, r8)
     476:	46bd      	mov	sp, r7
     478:	bd80      	pop	{r7, pc}
     47a:	46c0      	nop			; (mov r8, r8)
     47c:	42000c00 	.word	0x42000c00
     480:	40000400 	.word	0x40000400
     484:	40000c00 	.word	0x40000c00
     488:	00004015 	.word	0x00004015

0000048c <obd_uart_pin_init>:

void obd_uart_pin_init(void)
{
     48c:	b580      	push	{r7, lr}
     48e:	b082      	sub	sp, #8
     490:	af00      	add	r7, sp, #0
	PORT->Group[PORTGROUP_A].DIRCLR.reg = PORT_PA16;	// RX as input
     492:	4b1c      	ldr	r3, [pc, #112]	; (504 <obd_uart_pin_init+0x78>)
     494:	2280      	movs	r2, #128	; 0x80
     496:	0252      	lsls	r2, r2, #9
     498:	605a      	str	r2, [r3, #4]
	
	PORT->Group[PORTGROUP_A].DIRSET.reg = PORT_PA18;	// TX as output
     49a:	4b1a      	ldr	r3, [pc, #104]	; (504 <obd_uart_pin_init+0x78>)
     49c:	2280      	movs	r2, #128	; 0x80
     49e:	02d2      	lsls	r2, r2, #11
     4a0:	609a      	str	r2, [r3, #8]
	PORT->Group[PORTGROUP_A].OUTSET.reg = PORT_PA18;	// TX idle state is high
     4a2:	4b18      	ldr	r3, [pc, #96]	; (504 <obd_uart_pin_init+0x78>)
     4a4:	2280      	movs	r2, #128	; 0x80
     4a6:	02d2      	lsls	r2, r2, #11
     4a8:	619a      	str	r2, [r3, #24]

	// set port multiplexer for peripheral TX
	// =======================================
	uint32_t temp = (PORT->Group[PORTGROUP_A].PMUX[OBD_TX_PIN>>1].reg) & PORT_PMUX_PMUXO( PORT_PMUX_PMUXO_C_Val );
     4aa:	4a16      	ldr	r2, [pc, #88]	; (504 <obd_uart_pin_init+0x78>)
     4ac:	2339      	movs	r3, #57	; 0x39
     4ae:	5cd3      	ldrb	r3, [r2, r3]
     4b0:	b2db      	uxtb	r3, r3
     4b2:	001a      	movs	r2, r3
     4b4:	2320      	movs	r3, #32
     4b6:	4013      	ands	r3, r2
     4b8:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[OBD_TX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( PORT_PMUX_PMUXE_C_Val );
     4ba:	4a12      	ldr	r2, [pc, #72]	; (504 <obd_uart_pin_init+0x78>)
     4bc:	687b      	ldr	r3, [r7, #4]
     4be:	b2db      	uxtb	r3, r3
     4c0:	2102      	movs	r1, #2
     4c2:	430b      	orrs	r3, r1
     4c4:	b2d9      	uxtb	r1, r3
     4c6:	2339      	movs	r3, #57	; 0x39
     4c8:	54d1      	strb	r1, [r2, r3]
	
	PORT->Group[PORTGROUP_A].PINCFG[OBD_TX_PIN].reg = PORT_PINCFG_PMUXEN ; // Enable port mux
     4ca:	4a0e      	ldr	r2, [pc, #56]	; (504 <obd_uart_pin_init+0x78>)
     4cc:	2352      	movs	r3, #82	; 0x52
     4ce:	2101      	movs	r1, #1
     4d0:	54d1      	strb	r1, [r2, r3]
	temp = (PORT->Group[PORTGROUP_A].PMUX[OBD_RX_PIN>>1].reg) & PORT_PMUX_PMUXO( PORT_PMUX_PMUXO_C_Val );
     4d2:	4a0c      	ldr	r2, [pc, #48]	; (504 <obd_uart_pin_init+0x78>)
     4d4:	2338      	movs	r3, #56	; 0x38
     4d6:	5cd3      	ldrb	r3, [r2, r3]
     4d8:	b2db      	uxtb	r3, r3
     4da:	001a      	movs	r2, r3
     4dc:	2320      	movs	r3, #32
     4de:	4013      	ands	r3, r2
     4e0:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[OBD_RX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( PORT_PMUX_PMUXE_C_Val );
     4e2:	4a08      	ldr	r2, [pc, #32]	; (504 <obd_uart_pin_init+0x78>)
     4e4:	687b      	ldr	r3, [r7, #4]
     4e6:	b2db      	uxtb	r3, r3
     4e8:	2102      	movs	r1, #2
     4ea:	430b      	orrs	r3, r1
     4ec:	b2d9      	uxtb	r1, r3
     4ee:	2338      	movs	r3, #56	; 0x38
     4f0:	54d1      	strb	r1, [r2, r3]
	PORT->Group[PORTGROUP_A].PINCFG[OBD_RX_PIN].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN; // Enable port mux
     4f2:	4a04      	ldr	r2, [pc, #16]	; (504 <obd_uart_pin_init+0x78>)
     4f4:	2350      	movs	r3, #80	; 0x50
     4f6:	2103      	movs	r1, #3
     4f8:	54d1      	strb	r1, [r2, r3]
}
     4fa:	46c0      	nop			; (mov r8, r8)
     4fc:	46bd      	mov	sp, r7
     4fe:	b002      	add	sp, #8
     500:	bd80      	pop	{r7, pc}
     502:	46c0      	nop			; (mov r8, r8)
     504:	41004400 	.word	0x41004400

00000508 <obd_uart_init>:

void obd_uart_init(void)
{
     508:	b580      	push	{r7, lr}
     50a:	af00      	add	r7, sp, #0
	obd_uart_clk_init();
     50c:	4b1a      	ldr	r3, [pc, #104]	; (578 <obd_uart_init+0x70>)
     50e:	4798      	blx	r3
	obd_uart_pin_init();
     510:	4b1a      	ldr	r3, [pc, #104]	; (57c <obd_uart_init+0x74>)
     512:	4798      	blx	r3
	
	obd_buff_count = 0;
     514:	4b1a      	ldr	r3, [pc, #104]	; (580 <obd_uart_init+0x78>)
     516:	2200      	movs	r2, #0
     518:	601a      	str	r2, [r3, #0]
	line_count = 0;
     51a:	4b1a      	ldr	r3, [pc, #104]	; (584 <obd_uart_init+0x7c>)
     51c:	2200      	movs	r2, #0
     51e:	601a      	str	r2, [r3, #0]
	
	OBD_UART_MODULE->USART.CTRLA.reg =
     520:	4b19      	ldr	r3, [pc, #100]	; (588 <obd_uart_init+0x80>)
     522:	4a1a      	ldr	r2, [pc, #104]	; (58c <obd_uart_init+0x84>)
     524:	601a      	str	r2, [r3, #0]
	SERCOM_USART_CTRLA_MODE_USART_INT_CLK;			// Use internal clock
	
	// Asynchronous arithmetic mode
	// 65535 * ( 1 - sampleRateValue * baudrate / SystemCoreClock);
	// 65535 - 65535 * (sampleRateValue * baudrate / SystemCoreClock));
	OBD_UART_MODULE->USART.BAUD.reg = 65535.0f * ( 1.0f - (16.0 * (float)(OBD_BAUDRATE)) / (float)(SYSTEM_CLK));
     526:	4b18      	ldr	r3, [pc, #96]	; (588 <obd_uart_init+0x80>)
     528:	4a19      	ldr	r2, [pc, #100]	; (590 <obd_uart_init+0x88>)
     52a:	819a      	strh	r2, [r3, #12]
	//BLE_UART_SERCOM->USART.BAUD.bit.BAUD = 9600;
	
	OBD_UART_MODULE->USART.CTRLB.reg =
     52c:	4b16      	ldr	r3, [pc, #88]	; (588 <obd_uart_init+0x80>)
     52e:	22c0      	movs	r2, #192	; 0xc0
     530:	0292      	lsls	r2, r2, #10
     532:	605a      	str	r2, [r3, #4]
	SERCOM_USART_CTRLB_CHSIZE(0)	|	// 8 bit character size
	SERCOM_USART_CTRLB_TXEN			|	// Enable Transmit
	SERCOM_USART_CTRLB_RXEN;			// Enable Receive

	// Get Synced
	while (OBD_UART_MODULE->USART.SYNCBUSY.bit.CTRLB);
     534:	46c0      	nop			; (mov r8, r8)
     536:	4b14      	ldr	r3, [pc, #80]	; (588 <obd_uart_init+0x80>)
     538:	69db      	ldr	r3, [r3, #28]
     53a:	075b      	lsls	r3, r3, #29
     53c:	0fdb      	lsrs	r3, r3, #31
     53e:	b2db      	uxtb	r3, r3
     540:	2b00      	cmp	r3, #0
     542:	d1f8      	bne.n	536 <obd_uart_init+0x2e>

	//Set the Interrupt to use
	OBD_UART_MODULE->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;	// Interrupt on received complete
     544:	4b10      	ldr	r3, [pc, #64]	; (588 <obd_uart_init+0x80>)
     546:	2204      	movs	r2, #4
     548:	759a      	strb	r2, [r3, #22]
	
	// Enable interrupts
	NVIC_EnableIRQ(SERCOM1_IRQn);
     54a:	200a      	movs	r0, #10
     54c:	4b11      	ldr	r3, [pc, #68]	; (594 <obd_uart_init+0x8c>)
     54e:	4798      	blx	r3
	NVIC_SetPriority(SERCOM1_IRQn,1);
     550:	2101      	movs	r1, #1
     552:	200a      	movs	r0, #10
     554:	4b10      	ldr	r3, [pc, #64]	; (598 <obd_uart_init+0x90>)
     556:	4798      	blx	r3
	
	// enable the peripheral block
	OBD_UART_MODULE->USART.CTRLA.bit.ENABLE = 0x1u;
     558:	4a0b      	ldr	r2, [pc, #44]	; (588 <obd_uart_init+0x80>)
     55a:	6813      	ldr	r3, [r2, #0]
     55c:	2102      	movs	r1, #2
     55e:	430b      	orrs	r3, r1
     560:	6013      	str	r3, [r2, #0]
	
	// Wait for sercom to enable
	while(OBD_UART_MODULE->USART.SYNCBUSY.bit.ENABLE);
     562:	46c0      	nop			; (mov r8, r8)
     564:	4b08      	ldr	r3, [pc, #32]	; (588 <obd_uart_init+0x80>)
     566:	69db      	ldr	r3, [r3, #28]
     568:	079b      	lsls	r3, r3, #30
     56a:	0fdb      	lsrs	r3, r3, #31
     56c:	b2db      	uxtb	r3, r3
     56e:	2b00      	cmp	r3, #0
     570:	d1f8      	bne.n	564 <obd_uart_init+0x5c>
}
     572:	46c0      	nop			; (mov r8, r8)
     574:	46bd      	mov	sp, r7
     576:	bd80      	pop	{r7, pc}
     578:	00000429 	.word	0x00000429
     57c:	0000048d 	.word	0x0000048d
     580:	20000558 	.word	0x20000558
     584:	20000998 	.word	0x20000998
     588:	42000c00 	.word	0x42000c00
     58c:	40200084 	.word	0x40200084
     590:	fffffb14 	.word	0xfffffb14
     594:	00000321 	.word	0x00000321
     598:	0000034d 	.word	0x0000034d

0000059c <obd_uart_write>:

enum status_code obd_uart_write(uint8_t *data)
{
     59c:	b580      	push	{r7, lr}
     59e:	b084      	sub	sp, #16
     5a0:	af00      	add	r7, sp, #0
     5a2:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
     5a4:	2300      	movs	r3, #0
     5a6:	60fb      	str	r3, [r7, #12]
	while(data[i] != '\0')
     5a8:	e00f      	b.n	5ca <obd_uart_write+0x2e>
	{
		if(OBD_UART_MODULE->USART.INTFLAG.bit.DRE == 1)
     5aa:	4b0d      	ldr	r3, [pc, #52]	; (5e0 <obd_uart_write+0x44>)
     5ac:	7e1b      	ldrb	r3, [r3, #24]
     5ae:	07db      	lsls	r3, r3, #31
     5b0:	0fdb      	lsrs	r3, r3, #31
     5b2:	b2db      	uxtb	r3, r3
     5b4:	2b01      	cmp	r3, #1
     5b6:	d108      	bne.n	5ca <obd_uart_write+0x2e>
		{
			OBD_UART_MODULE->USART.DATA.reg = (uint16_t)data[i++];
     5b8:	4909      	ldr	r1, [pc, #36]	; (5e0 <obd_uart_write+0x44>)
     5ba:	68fb      	ldr	r3, [r7, #12]
     5bc:	1c5a      	adds	r2, r3, #1
     5be:	60fa      	str	r2, [r7, #12]
     5c0:	687a      	ldr	r2, [r7, #4]
     5c2:	18d3      	adds	r3, r2, r3
     5c4:	781b      	ldrb	r3, [r3, #0]
     5c6:	b29b      	uxth	r3, r3
     5c8:	850b      	strh	r3, [r1, #40]	; 0x28
	while(data[i] != '\0')
     5ca:	687a      	ldr	r2, [r7, #4]
     5cc:	68fb      	ldr	r3, [r7, #12]
     5ce:	18d3      	adds	r3, r2, r3
     5d0:	781b      	ldrb	r3, [r3, #0]
     5d2:	2b00      	cmp	r3, #0
     5d4:	d1e9      	bne.n	5aa <obd_uart_write+0xe>
		}
	}
	return STATUS_OK;
     5d6:	2300      	movs	r3, #0
}
     5d8:	0018      	movs	r0, r3
     5da:	46bd      	mov	sp, r7
     5dc:	b004      	add	sp, #16
     5de:	bd80      	pop	{r7, pc}
     5e0:	42000c00 	.word	0x42000c00

000005e4 <obd_uart_read>:

enum status_code obd_uart_read(uint8_t *read_data, uint8_t data_length)
{
     5e4:	b580      	push	{r7, lr}
     5e6:	b084      	sub	sp, #16
     5e8:	af00      	add	r7, sp, #0
     5ea:	6078      	str	r0, [r7, #4]
     5ec:	000a      	movs	r2, r1
     5ee:	1cfb      	adds	r3, r7, #3
     5f0:	701a      	strb	r2, [r3, #0]
	uint8_t rx_pos = 0;
     5f2:	230f      	movs	r3, #15
     5f4:	18fb      	adds	r3, r7, r3
     5f6:	2200      	movs	r2, #0
     5f8:	701a      	strb	r2, [r3, #0]
	
	enum status_code return_status = STATUS_OK;
     5fa:	230e      	movs	r3, #14
     5fc:	18fb      	adds	r3, r7, r3
     5fe:	2200      	movs	r2, #0
     600:	701a      	strb	r2, [r3, #0]
	
	while(data_length--)
     602:	e029      	b.n	658 <obd_uart_read+0x74>
	{
		//Waiting for data...
		for (uint32_t i=0;i<=OBD_UART_TIMEOUT;i++)
     604:	2300      	movs	r3, #0
     606:	60bb      	str	r3, [r7, #8]
     608:	e011      	b.n	62e <obd_uart_read+0x4a>
		{
			if (OBD_UART_MODULE->USART.INTFLAG.bit.RXC)
     60a:	4b1a      	ldr	r3, [pc, #104]	; (674 <obd_uart_read+0x90>)
     60c:	7e1b      	ldrb	r3, [r3, #24]
     60e:	075b      	lsls	r3, r3, #29
     610:	0fdb      	lsrs	r3, r3, #31
     612:	b2db      	uxtb	r3, r3
     614:	2b00      	cmp	r3, #0
     616:	d10f      	bne.n	638 <obd_uart_read+0x54>
			{
				break;
			}
			else if (i==OBD_UART_TIMEOUT)
     618:	68bb      	ldr	r3, [r7, #8]
     61a:	4a17      	ldr	r2, [pc, #92]	; (678 <obd_uart_read+0x94>)
     61c:	4293      	cmp	r3, r2
     61e:	d103      	bne.n	628 <obd_uart_read+0x44>
			{
				return_status = STATUS_ERR_TIMEOUT;
     620:	230e      	movs	r3, #14
     622:	18fb      	adds	r3, r7, r3
     624:	2212      	movs	r2, #18
     626:	701a      	strb	r2, [r3, #0]
		for (uint32_t i=0;i<=OBD_UART_TIMEOUT;i++)
     628:	68bb      	ldr	r3, [r7, #8]
     62a:	3301      	adds	r3, #1
     62c:	60bb      	str	r3, [r7, #8]
     62e:	68bb      	ldr	r3, [r7, #8]
     630:	4a11      	ldr	r2, [pc, #68]	; (678 <obd_uart_read+0x94>)
     632:	4293      	cmp	r3, r2
     634:	d9e9      	bls.n	60a <obd_uart_read+0x26>
     636:	e000      	b.n	63a <obd_uart_read+0x56>
				break;
     638:	46c0      	nop			; (mov r8, r8)
			}
		}
		//Reading data into read_data
		read_data[rx_pos++] = (uint8_t) OBD_UART_MODULE->USART.DATA.reg;
     63a:	230f      	movs	r3, #15
     63c:	18fb      	adds	r3, r7, r3
     63e:	781b      	ldrb	r3, [r3, #0]
     640:	220f      	movs	r2, #15
     642:	18ba      	adds	r2, r7, r2
     644:	1c59      	adds	r1, r3, #1
     646:	7011      	strb	r1, [r2, #0]
     648:	001a      	movs	r2, r3
     64a:	687b      	ldr	r3, [r7, #4]
     64c:	189b      	adds	r3, r3, r2
     64e:	4a09      	ldr	r2, [pc, #36]	; (674 <obd_uart_read+0x90>)
     650:	8d12      	ldrh	r2, [r2, #40]	; 0x28
     652:	b292      	uxth	r2, r2
     654:	b2d2      	uxtb	r2, r2
     656:	701a      	strb	r2, [r3, #0]
	while(data_length--)
     658:	1cfb      	adds	r3, r7, #3
     65a:	781b      	ldrb	r3, [r3, #0]
     65c:	1cfa      	adds	r2, r7, #3
     65e:	1e59      	subs	r1, r3, #1
     660:	7011      	strb	r1, [r2, #0]
     662:	2b00      	cmp	r3, #0
     664:	d1ce      	bne.n	604 <obd_uart_read+0x20>
	}
	return return_status;
     666:	230e      	movs	r3, #14
     668:	18fb      	adds	r3, r7, r3
     66a:	781b      	ldrb	r3, [r3, #0]
}
     66c:	0018      	movs	r0, r3
     66e:	46bd      	mov	sp, r7
     670:	b004      	add	sp, #16
     672:	bd80      	pop	{r7, pc}
     674:	42000c00 	.word	0x42000c00
     678:	0000ffff 	.word	0x0000ffff

0000067c <wdt_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void wdt_get_config_defaults(
		struct wdt_conf *const config)
{
     67c:	b580      	push	{r7, lr}
     67e:	b082      	sub	sp, #8
     680:	af00      	add	r7, sp, #0
     682:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
     684:	687b      	ldr	r3, [r7, #4]
     686:	2200      	movs	r2, #0
     688:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	2201      	movs	r2, #1
     68e:	705a      	strb	r2, [r3, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21) && !(SAMR30)
	config->clock_source         = GCLK_GENERATOR_4;
     690:	687b      	ldr	r3, [r7, #4]
     692:	2204      	movs	r2, #4
     694:	709a      	strb	r2, [r3, #2]
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
     696:	687b      	ldr	r3, [r7, #4]
     698:	220c      	movs	r2, #12
     69a:	70da      	strb	r2, [r3, #3]
	config->window_period        = WDT_PERIOD_NONE;
     69c:	687b      	ldr	r3, [r7, #4]
     69e:	2200      	movs	r2, #0
     6a0:	711a      	strb	r2, [r3, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	2200      	movs	r2, #0
     6a6:	715a      	strb	r2, [r3, #5]
}
     6a8:	46c0      	nop			; (mov r8, r8)
     6aa:	46bd      	mov	sp, r7
     6ac:	b002      	add	sp, #8
     6ae:	bd80      	pop	{r7, pc}

000006b0 <wdt_init>:
 *  Author: Andreas
 */ 
#include "wdt.h"

void wdt_init()
{
     6b0:	b580      	push	{r7, lr}
     6b2:	b082      	sub	sp, #8
     6b4:	af00      	add	r7, sp, #0
	struct wdt_conf config_wdt;
	wdt_get_config_defaults(&config_wdt);
     6b6:	003b      	movs	r3, r7
     6b8:	0018      	movs	r0, r3
     6ba:	4b09      	ldr	r3, [pc, #36]	; (6e0 <wdt_init+0x30>)
     6bc:	4798      	blx	r3
	
	config_wdt.always_on = false;
     6be:	003b      	movs	r3, r7
     6c0:	2200      	movs	r2, #0
     6c2:	701a      	strb	r2, [r3, #0]
	config_wdt.timeout_period = WDT_PERIOD_4096CLK;
     6c4:	003b      	movs	r3, r7
     6c6:	220a      	movs	r2, #10
     6c8:	70da      	strb	r2, [r3, #3]
	config_wdt.early_warning_period = WDT_PERIOD_2048CLK;
     6ca:	003b      	movs	r3, r7
     6cc:	2209      	movs	r2, #9
     6ce:	715a      	strb	r2, [r3, #5]
	
	wdt_set_config(&config_wdt);
     6d0:	003b      	movs	r3, r7
     6d2:	0018      	movs	r0, r3
     6d4:	4b03      	ldr	r3, [pc, #12]	; (6e4 <wdt_init+0x34>)
     6d6:	4798      	blx	r3
	//wdt_init_cb();
}
     6d8:	46c0      	nop			; (mov r8, r8)
     6da:	46bd      	mov	sp, r7
     6dc:	b002      	add	sp, #8
     6de:	bd80      	pop	{r7, pc}
     6e0:	0000067d 	.word	0x0000067d
     6e4:	000010a9 	.word	0x000010a9

000006e8 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
     6e8:	b580      	push	{r7, lr}
     6ea:	af00      	add	r7, sp, #0
}
     6ec:	46c0      	nop			; (mov r8, r8)
     6ee:	46bd      	mov	sp, r7
     6f0:	bd80      	pop	{r7, pc}
	...

000006f4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     6f4:	b580      	push	{r7, lr}
     6f6:	b084      	sub	sp, #16
     6f8:	af00      	add	r7, sp, #0
     6fa:	0002      	movs	r2, r0
     6fc:	1dfb      	adds	r3, r7, #7
     6fe:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     700:	230f      	movs	r3, #15
     702:	18fb      	adds	r3, r7, r3
     704:	1dfa      	adds	r2, r7, #7
     706:	7812      	ldrb	r2, [r2, #0]
     708:	0952      	lsrs	r2, r2, #5
     70a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     70c:	230f      	movs	r3, #15
     70e:	18fb      	adds	r3, r7, r3
     710:	781b      	ldrb	r3, [r3, #0]
     712:	2b00      	cmp	r3, #0
     714:	d10c      	bne.n	730 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     716:	4b09      	ldr	r3, [pc, #36]	; (73c <_extint_get_eic_from_channel+0x48>)
     718:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     71a:	230f      	movs	r3, #15
     71c:	18fb      	adds	r3, r7, r3
     71e:	781b      	ldrb	r3, [r3, #0]
     720:	009b      	lsls	r3, r3, #2
     722:	2210      	movs	r2, #16
     724:	4694      	mov	ip, r2
     726:	44bc      	add	ip, r7
     728:	4463      	add	r3, ip
     72a:	3b08      	subs	r3, #8
     72c:	681b      	ldr	r3, [r3, #0]
     72e:	e000      	b.n	732 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     730:	2300      	movs	r3, #0
	}
}
     732:	0018      	movs	r0, r3
     734:	46bd      	mov	sp, r7
     736:	b004      	add	sp, #16
     738:	bd80      	pop	{r7, pc}
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	40001800 	.word	0x40001800

00000740 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     740:	b580      	push	{r7, lr}
     742:	b084      	sub	sp, #16
     744:	af00      	add	r7, sp, #0
     746:	0002      	movs	r2, r0
     748:	1dfb      	adds	r3, r7, #7
     74a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     74c:	1dfb      	adds	r3, r7, #7
     74e:	781b      	ldrb	r3, [r3, #0]
     750:	0018      	movs	r0, r3
     752:	4b0b      	ldr	r3, [pc, #44]	; (780 <extint_chan_is_detected+0x40>)
     754:	4798      	blx	r3
     756:	0003      	movs	r3, r0
     758:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     75a:	1dfb      	adds	r3, r7, #7
     75c:	781b      	ldrb	r3, [r3, #0]
     75e:	221f      	movs	r2, #31
     760:	4013      	ands	r3, r2
     762:	2201      	movs	r2, #1
     764:	409a      	lsls	r2, r3
     766:	0013      	movs	r3, r2
     768:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     76a:	68fb      	ldr	r3, [r7, #12]
     76c:	691b      	ldr	r3, [r3, #16]
     76e:	68ba      	ldr	r2, [r7, #8]
     770:	4013      	ands	r3, r2
     772:	1e5a      	subs	r2, r3, #1
     774:	4193      	sbcs	r3, r2
     776:	b2db      	uxtb	r3, r3
}
     778:	0018      	movs	r0, r3
     77a:	46bd      	mov	sp, r7
     77c:	b004      	add	sp, #16
     77e:	bd80      	pop	{r7, pc}
     780:	000006f5 	.word	0x000006f5

00000784 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     784:	b580      	push	{r7, lr}
     786:	b084      	sub	sp, #16
     788:	af00      	add	r7, sp, #0
     78a:	0002      	movs	r2, r0
     78c:	1dfb      	adds	r3, r7, #7
     78e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     790:	1dfb      	adds	r3, r7, #7
     792:	781b      	ldrb	r3, [r3, #0]
     794:	0018      	movs	r0, r3
     796:	4b09      	ldr	r3, [pc, #36]	; (7bc <extint_chan_clear_detected+0x38>)
     798:	4798      	blx	r3
     79a:	0003      	movs	r3, r0
     79c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     79e:	1dfb      	adds	r3, r7, #7
     7a0:	781b      	ldrb	r3, [r3, #0]
     7a2:	221f      	movs	r2, #31
     7a4:	4013      	ands	r3, r2
     7a6:	2201      	movs	r2, #1
     7a8:	409a      	lsls	r2, r3
     7aa:	0013      	movs	r3, r2
     7ac:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     7ae:	68fb      	ldr	r3, [r7, #12]
     7b0:	68ba      	ldr	r2, [r7, #8]
     7b2:	611a      	str	r2, [r3, #16]
}
     7b4:	46c0      	nop			; (mov r8, r8)
     7b6:	46bd      	mov	sp, r7
     7b8:	b004      	add	sp, #16
     7ba:	bd80      	pop	{r7, pc}
     7bc:	000006f5 	.word	0x000006f5

000007c0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     7c0:	b580      	push	{r7, lr}
     7c2:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     7c4:	4b15      	ldr	r3, [pc, #84]	; (81c <EIC_Handler+0x5c>)
     7c6:	2200      	movs	r2, #0
     7c8:	701a      	strb	r2, [r3, #0]
     7ca:	e020      	b.n	80e <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     7cc:	4b13      	ldr	r3, [pc, #76]	; (81c <EIC_Handler+0x5c>)
     7ce:	781b      	ldrb	r3, [r3, #0]
     7d0:	0018      	movs	r0, r3
     7d2:	4b13      	ldr	r3, [pc, #76]	; (820 <EIC_Handler+0x60>)
     7d4:	4798      	blx	r3
     7d6:	1e03      	subs	r3, r0, #0
     7d8:	d013      	beq.n	802 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     7da:	4b10      	ldr	r3, [pc, #64]	; (81c <EIC_Handler+0x5c>)
     7dc:	781b      	ldrb	r3, [r3, #0]
     7de:	0018      	movs	r0, r3
     7e0:	4b10      	ldr	r3, [pc, #64]	; (824 <EIC_Handler+0x64>)
     7e2:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     7e4:	4b0d      	ldr	r3, [pc, #52]	; (81c <EIC_Handler+0x5c>)
     7e6:	781b      	ldrb	r3, [r3, #0]
     7e8:	001a      	movs	r2, r3
     7ea:	4b0f      	ldr	r3, [pc, #60]	; (828 <EIC_Handler+0x68>)
     7ec:	0092      	lsls	r2, r2, #2
     7ee:	58d3      	ldr	r3, [r2, r3]
     7f0:	2b00      	cmp	r3, #0
     7f2:	d006      	beq.n	802 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     7f4:	4b09      	ldr	r3, [pc, #36]	; (81c <EIC_Handler+0x5c>)
     7f6:	781b      	ldrb	r3, [r3, #0]
     7f8:	001a      	movs	r2, r3
     7fa:	4b0b      	ldr	r3, [pc, #44]	; (828 <EIC_Handler+0x68>)
     7fc:	0092      	lsls	r2, r2, #2
     7fe:	58d3      	ldr	r3, [r2, r3]
     800:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     802:	4b06      	ldr	r3, [pc, #24]	; (81c <EIC_Handler+0x5c>)
     804:	781b      	ldrb	r3, [r3, #0]
     806:	3301      	adds	r3, #1
     808:	b2da      	uxtb	r2, r3
     80a:	4b04      	ldr	r3, [pc, #16]	; (81c <EIC_Handler+0x5c>)
     80c:	701a      	strb	r2, [r3, #0]
     80e:	4b03      	ldr	r3, [pc, #12]	; (81c <EIC_Handler+0x5c>)
     810:	781b      	ldrb	r3, [r3, #0]
     812:	2b0f      	cmp	r3, #15
     814:	d9da      	bls.n	7cc <EIC_Handler+0xc>
			}
		}
	}
}
     816:	46c0      	nop			; (mov r8, r8)
     818:	46bd      	mov	sp, r7
     81a:	bd80      	pop	{r7, pc}
     81c:	200009ad 	.word	0x200009ad
     820:	00000741 	.word	0x00000741
     824:	00000785 	.word	0x00000785
     828:	200009b0 	.word	0x200009b0

0000082c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     82c:	b580      	push	{r7, lr}
     82e:	b082      	sub	sp, #8
     830:	af00      	add	r7, sp, #0
     832:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     834:	687b      	ldr	r3, [r7, #4]
     836:	2200      	movs	r2, #0
     838:	701a      	strb	r2, [r3, #0]
}
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	46bd      	mov	sp, r7
     83e:	b002      	add	sp, #8
     840:	bd80      	pop	{r7, pc}
	...

00000844 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     844:	b580      	push	{r7, lr}
     846:	b082      	sub	sp, #8
     848:	af00      	add	r7, sp, #0
     84a:	0002      	movs	r2, r0
     84c:	6039      	str	r1, [r7, #0]
     84e:	1dfb      	adds	r3, r7, #7
     850:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     852:	1dfb      	adds	r3, r7, #7
     854:	781b      	ldrb	r3, [r3, #0]
     856:	2b01      	cmp	r3, #1
     858:	d00a      	beq.n	870 <system_apb_clock_set_mask+0x2c>
     85a:	2b02      	cmp	r3, #2
     85c:	d00f      	beq.n	87e <system_apb_clock_set_mask+0x3a>
     85e:	2b00      	cmp	r3, #0
     860:	d114      	bne.n	88c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     862:	4b0e      	ldr	r3, [pc, #56]	; (89c <system_apb_clock_set_mask+0x58>)
     864:	4a0d      	ldr	r2, [pc, #52]	; (89c <system_apb_clock_set_mask+0x58>)
     866:	6991      	ldr	r1, [r2, #24]
     868:	683a      	ldr	r2, [r7, #0]
     86a:	430a      	orrs	r2, r1
     86c:	619a      	str	r2, [r3, #24]
			break;
     86e:	e00f      	b.n	890 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     870:	4b0a      	ldr	r3, [pc, #40]	; (89c <system_apb_clock_set_mask+0x58>)
     872:	4a0a      	ldr	r2, [pc, #40]	; (89c <system_apb_clock_set_mask+0x58>)
     874:	69d1      	ldr	r1, [r2, #28]
     876:	683a      	ldr	r2, [r7, #0]
     878:	430a      	orrs	r2, r1
     87a:	61da      	str	r2, [r3, #28]
			break;
     87c:	e008      	b.n	890 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     87e:	4b07      	ldr	r3, [pc, #28]	; (89c <system_apb_clock_set_mask+0x58>)
     880:	4a06      	ldr	r2, [pc, #24]	; (89c <system_apb_clock_set_mask+0x58>)
     882:	6a11      	ldr	r1, [r2, #32]
     884:	683a      	ldr	r2, [r7, #0]
     886:	430a      	orrs	r2, r1
     888:	621a      	str	r2, [r3, #32]
			break;
     88a:	e001      	b.n	890 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     88c:	2317      	movs	r3, #23
     88e:	e000      	b.n	892 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     890:	2300      	movs	r3, #0
}
     892:	0018      	movs	r0, r3
     894:	46bd      	mov	sp, r7
     896:	b002      	add	sp, #8
     898:	bd80      	pop	{r7, pc}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	40000400 	.word	0x40000400

000008a0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     8a0:	b580      	push	{r7, lr}
     8a2:	b082      	sub	sp, #8
     8a4:	af00      	add	r7, sp, #0
     8a6:	0002      	movs	r2, r0
     8a8:	1dfb      	adds	r3, r7, #7
     8aa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     8ac:	4b06      	ldr	r3, [pc, #24]	; (8c8 <system_interrupt_enable+0x28>)
     8ae:	1dfa      	adds	r2, r7, #7
     8b0:	7812      	ldrb	r2, [r2, #0]
     8b2:	0011      	movs	r1, r2
     8b4:	221f      	movs	r2, #31
     8b6:	400a      	ands	r2, r1
     8b8:	2101      	movs	r1, #1
     8ba:	4091      	lsls	r1, r2
     8bc:	000a      	movs	r2, r1
     8be:	601a      	str	r2, [r3, #0]
}
     8c0:	46c0      	nop			; (mov r8, r8)
     8c2:	46bd      	mov	sp, r7
     8c4:	b002      	add	sp, #8
     8c6:	bd80      	pop	{r7, pc}
     8c8:	e000e100 	.word	0xe000e100

000008cc <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     8cc:	b580      	push	{r7, lr}
     8ce:	b082      	sub	sp, #8
     8d0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     8d2:	4b0f      	ldr	r3, [pc, #60]	; (910 <extint_is_syncing+0x44>)
     8d4:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     8d6:	2300      	movs	r3, #0
     8d8:	607b      	str	r3, [r7, #4]
     8da:	e011      	b.n	900 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     8dc:	687b      	ldr	r3, [r7, #4]
     8de:	009b      	lsls	r3, r3, #2
     8e0:	2208      	movs	r2, #8
     8e2:	4694      	mov	ip, r2
     8e4:	44bc      	add	ip, r7
     8e6:	4463      	add	r3, ip
     8e8:	3b08      	subs	r3, #8
     8ea:	681b      	ldr	r3, [r3, #0]
     8ec:	785b      	ldrb	r3, [r3, #1]
     8ee:	b2db      	uxtb	r3, r3
     8f0:	b25b      	sxtb	r3, r3
     8f2:	2b00      	cmp	r3, #0
     8f4:	da01      	bge.n	8fa <extint_is_syncing+0x2e>
			return true;
     8f6:	2301      	movs	r3, #1
     8f8:	e006      	b.n	908 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     8fa:	687b      	ldr	r3, [r7, #4]
     8fc:	3301      	adds	r3, #1
     8fe:	607b      	str	r3, [r7, #4]
     900:	687b      	ldr	r3, [r7, #4]
     902:	2b00      	cmp	r3, #0
     904:	d0ea      	beq.n	8dc <extint_is_syncing+0x10>
		}
	}
	return false;
     906:	2300      	movs	r3, #0
}
     908:	0018      	movs	r0, r3
     90a:	46bd      	mov	sp, r7
     90c:	b002      	add	sp, #8
     90e:	bd80      	pop	{r7, pc}
     910:	40001800 	.word	0x40001800

00000914 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     914:	b580      	push	{r7, lr}
     916:	b084      	sub	sp, #16
     918:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     91a:	4b2d      	ldr	r3, [pc, #180]	; (9d0 <_system_extint_init+0xbc>)
     91c:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     91e:	2140      	movs	r1, #64	; 0x40
     920:	2000      	movs	r0, #0
     922:	4b2c      	ldr	r3, [pc, #176]	; (9d4 <_system_extint_init+0xc0>)
     924:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     926:	003b      	movs	r3, r7
     928:	0018      	movs	r0, r3
     92a:	4b2b      	ldr	r3, [pc, #172]	; (9d8 <_system_extint_init+0xc4>)
     92c:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     92e:	003b      	movs	r3, r7
     930:	2200      	movs	r2, #0
     932:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     934:	003b      	movs	r3, r7
     936:	0019      	movs	r1, r3
     938:	2005      	movs	r0, #5
     93a:	4b28      	ldr	r3, [pc, #160]	; (9dc <_system_extint_init+0xc8>)
     93c:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     93e:	2005      	movs	r0, #5
     940:	4b27      	ldr	r3, [pc, #156]	; (9e0 <_system_extint_init+0xcc>)
     942:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     944:	2300      	movs	r3, #0
     946:	60fb      	str	r3, [r7, #12]
     948:	e018      	b.n	97c <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	009b      	lsls	r3, r3, #2
     94e:	2210      	movs	r2, #16
     950:	4694      	mov	ip, r2
     952:	44bc      	add	ip, r7
     954:	4463      	add	r3, ip
     956:	3b0c      	subs	r3, #12
     958:	681a      	ldr	r2, [r3, #0]
     95a:	68fb      	ldr	r3, [r7, #12]
     95c:	009b      	lsls	r3, r3, #2
     95e:	2110      	movs	r1, #16
     960:	468c      	mov	ip, r1
     962:	44bc      	add	ip, r7
     964:	4463      	add	r3, ip
     966:	3b0c      	subs	r3, #12
     968:	681b      	ldr	r3, [r3, #0]
     96a:	781b      	ldrb	r3, [r3, #0]
     96c:	b2db      	uxtb	r3, r3
     96e:	2101      	movs	r1, #1
     970:	430b      	orrs	r3, r1
     972:	b2db      	uxtb	r3, r3
     974:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     976:	68fb      	ldr	r3, [r7, #12]
     978:	3301      	adds	r3, #1
     97a:	60fb      	str	r3, [r7, #12]
     97c:	68fb      	ldr	r3, [r7, #12]
     97e:	2b00      	cmp	r3, #0
     980:	d0e3      	beq.n	94a <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
     982:	46c0      	nop			; (mov r8, r8)
     984:	4b17      	ldr	r3, [pc, #92]	; (9e4 <_system_extint_init+0xd0>)
     986:	4798      	blx	r3
     988:	1e03      	subs	r3, r0, #0
     98a:	d1fb      	bne.n	984 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     98c:	230b      	movs	r3, #11
     98e:	18fb      	adds	r3, r7, r3
     990:	2200      	movs	r2, #0
     992:	701a      	strb	r2, [r3, #0]
     994:	e00d      	b.n	9b2 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     996:	230b      	movs	r3, #11
     998:	18fb      	adds	r3, r7, r3
     99a:	781a      	ldrb	r2, [r3, #0]
     99c:	4b12      	ldr	r3, [pc, #72]	; (9e8 <_system_extint_init+0xd4>)
     99e:	0092      	lsls	r2, r2, #2
     9a0:	2100      	movs	r1, #0
     9a2:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     9a4:	230b      	movs	r3, #11
     9a6:	18fb      	adds	r3, r7, r3
     9a8:	781a      	ldrb	r2, [r3, #0]
     9aa:	230b      	movs	r3, #11
     9ac:	18fb      	adds	r3, r7, r3
     9ae:	3201      	adds	r2, #1
     9b0:	701a      	strb	r2, [r3, #0]
     9b2:	230b      	movs	r3, #11
     9b4:	18fb      	adds	r3, r7, r3
     9b6:	781b      	ldrb	r3, [r3, #0]
     9b8:	2b0f      	cmp	r3, #15
     9ba:	d9ec      	bls.n	996 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     9bc:	2004      	movs	r0, #4
     9be:	4b0b      	ldr	r3, [pc, #44]	; (9ec <_system_extint_init+0xd8>)
     9c0:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     9c2:	4b0b      	ldr	r3, [pc, #44]	; (9f0 <_system_extint_init+0xdc>)
     9c4:	4798      	blx	r3
}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	46bd      	mov	sp, r7
     9ca:	b004      	add	sp, #16
     9cc:	bd80      	pop	{r7, pc}
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	40001800 	.word	0x40001800
     9d4:	00000845 	.word	0x00000845
     9d8:	0000082d 	.word	0x0000082d
     9dc:	00004b7d 	.word	0x00004b7d
     9e0:	00004bc1 	.word	0x00004bc1
     9e4:	000008cd 	.word	0x000008cd
     9e8:	200009b0 	.word	0x200009b0
     9ec:	000008a1 	.word	0x000008a1
     9f0:	000009f5 	.word	0x000009f5

000009f4 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     9f4:	b580      	push	{r7, lr}
     9f6:	b082      	sub	sp, #8
     9f8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     9fa:	4b15      	ldr	r3, [pc, #84]	; (a50 <_extint_enable+0x5c>)
     9fc:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     9fe:	2300      	movs	r3, #0
     a00:	607b      	str	r3, [r7, #4]
     a02:	e018      	b.n	a36 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     a04:	687b      	ldr	r3, [r7, #4]
     a06:	009b      	lsls	r3, r3, #2
     a08:	2208      	movs	r2, #8
     a0a:	4694      	mov	ip, r2
     a0c:	44bc      	add	ip, r7
     a0e:	4463      	add	r3, ip
     a10:	3b08      	subs	r3, #8
     a12:	681a      	ldr	r2, [r3, #0]
     a14:	687b      	ldr	r3, [r7, #4]
     a16:	009b      	lsls	r3, r3, #2
     a18:	2108      	movs	r1, #8
     a1a:	468c      	mov	ip, r1
     a1c:	44bc      	add	ip, r7
     a1e:	4463      	add	r3, ip
     a20:	3b08      	subs	r3, #8
     a22:	681b      	ldr	r3, [r3, #0]
     a24:	781b      	ldrb	r3, [r3, #0]
     a26:	b2db      	uxtb	r3, r3
     a28:	2102      	movs	r1, #2
     a2a:	430b      	orrs	r3, r1
     a2c:	b2db      	uxtb	r3, r3
     a2e:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     a30:	687b      	ldr	r3, [r7, #4]
     a32:	3301      	adds	r3, #1
     a34:	607b      	str	r3, [r7, #4]
     a36:	687b      	ldr	r3, [r7, #4]
     a38:	2b00      	cmp	r3, #0
     a3a:	d0e3      	beq.n	a04 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
     a3c:	46c0      	nop			; (mov r8, r8)
     a3e:	4b05      	ldr	r3, [pc, #20]	; (a54 <_extint_enable+0x60>)
     a40:	4798      	blx	r3
     a42:	1e03      	subs	r3, r0, #0
     a44:	d1fb      	bne.n	a3e <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	46bd      	mov	sp, r7
     a4a:	b002      	add	sp, #8
     a4c:	bd80      	pop	{r7, pc}
     a4e:	46c0      	nop			; (mov r8, r8)
     a50:	40001800 	.word	0x40001800
     a54:	000008cd 	.word	0x000008cd

00000a58 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     a58:	b580      	push	{r7, lr}
     a5a:	b084      	sub	sp, #16
     a5c:	af00      	add	r7, sp, #0
     a5e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     a60:	687b      	ldr	r3, [r7, #4]
     a62:	681b      	ldr	r3, [r3, #0]
     a64:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	69db      	ldr	r3, [r3, #28]
     a6a:	2207      	movs	r2, #7
     a6c:	4013      	ands	r3, r2
     a6e:	1e5a      	subs	r2, r3, #1
     a70:	4193      	sbcs	r3, r2
     a72:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     a74:	0018      	movs	r0, r3
     a76:	46bd      	mov	sp, r7
     a78:	b004      	add	sp, #16
     a7a:	bd80      	pop	{r7, pc}

00000a7c <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     a7c:	b580      	push	{r7, lr}
     a7e:	b082      	sub	sp, #8
     a80:	af00      	add	r7, sp, #0
     a82:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     a84:	46c0      	nop			; (mov r8, r8)
     a86:	687b      	ldr	r3, [r7, #4]
     a88:	0018      	movs	r0, r3
     a8a:	4b04      	ldr	r3, [pc, #16]	; (a9c <_i2c_master_wait_for_sync+0x20>)
     a8c:	4798      	blx	r3
     a8e:	1e03      	subs	r3, r0, #0
     a90:	d1f9      	bne.n	a86 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	46bd      	mov	sp, r7
     a96:	b002      	add	sp, #8
     a98:	bd80      	pop	{r7, pc}
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	00000a59 	.word	0x00000a59

00000aa0 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
     aa0:	b580      	push	{r7, lr}
     aa2:	b084      	sub	sp, #16
     aa4:	af00      	add	r7, sp, #0
     aa6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     aa8:	687b      	ldr	r3, [r7, #4]
     aaa:	681b      	ldr	r3, [r3, #0]
     aac:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     aae:	68fb      	ldr	r3, [r7, #12]
     ab0:	7e1b      	ldrb	r3, [r3, #24]
     ab2:	b2db      	uxtb	r3, r3
     ab4:	001a      	movs	r2, r3
     ab6:	2302      	movs	r3, #2
     ab8:	4013      	ands	r3, r2
     aba:	d00b      	beq.n	ad4 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     abc:	68fb      	ldr	r3, [r7, #12]
     abe:	2202      	movs	r2, #2
     ac0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     ac2:	68fb      	ldr	r3, [r7, #12]
     ac4:	8b5b      	ldrh	r3, [r3, #26]
     ac6:	b29b      	uxth	r3, r3
     ac8:	001a      	movs	r2, r3
     aca:	2302      	movs	r3, #2
     acc:	4013      	ands	r3, r2
     ace:	d011      	beq.n	af4 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     ad0:	2341      	movs	r3, #65	; 0x41
     ad2:	e010      	b.n	af6 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     ad4:	68fb      	ldr	r3, [r7, #12]
     ad6:	8b5b      	ldrh	r3, [r3, #26]
     ad8:	b29b      	uxth	r3, r3
     ada:	001a      	movs	r2, r3
     adc:	2304      	movs	r3, #4
     ade:	4013      	ands	r3, r2
     ae0:	d008      	beq.n	af4 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ae2:	68fb      	ldr	r3, [r7, #12]
     ae4:	685b      	ldr	r3, [r3, #4]
     ae6:	22c0      	movs	r2, #192	; 0xc0
     ae8:	0292      	lsls	r2, r2, #10
     aea:	431a      	orrs	r2, r3
     aec:	68fb      	ldr	r3, [r7, #12]
     aee:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     af0:	2318      	movs	r3, #24
     af2:	e000      	b.n	af6 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
     af4:	2300      	movs	r3, #0
}
     af6:	0018      	movs	r0, r3
     af8:	46bd      	mov	sp, r7
     afa:	b004      	add	sp, #16
     afc:	bd80      	pop	{r7, pc}

00000afe <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     afe:	b580      	push	{r7, lr}
     b00:	b084      	sub	sp, #16
     b02:	af00      	add	r7, sp, #0
     b04:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b06:	687b      	ldr	r3, [r7, #4]
     b08:	681b      	ldr	r3, [r3, #0]
     b0a:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     b0c:	230e      	movs	r3, #14
     b0e:	18fb      	adds	r3, r7, r3
     b10:	2200      	movs	r2, #0
     b12:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     b14:	e00f      	b.n	b36 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     b16:	230e      	movs	r3, #14
     b18:	18fb      	adds	r3, r7, r3
     b1a:	220e      	movs	r2, #14
     b1c:	18ba      	adds	r2, r7, r2
     b1e:	8812      	ldrh	r2, [r2, #0]
     b20:	3201      	adds	r2, #1
     b22:	801a      	strh	r2, [r3, #0]
     b24:	687b      	ldr	r3, [r7, #4]
     b26:	891b      	ldrh	r3, [r3, #8]
     b28:	220e      	movs	r2, #14
     b2a:	18ba      	adds	r2, r7, r2
     b2c:	8812      	ldrh	r2, [r2, #0]
     b2e:	429a      	cmp	r2, r3
     b30:	d301      	bcc.n	b36 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
     b32:	2312      	movs	r3, #18
     b34:	e00e      	b.n	b54 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     b36:	68bb      	ldr	r3, [r7, #8]
     b38:	7e1b      	ldrb	r3, [r3, #24]
     b3a:	b2db      	uxtb	r3, r3
     b3c:	001a      	movs	r2, r3
     b3e:	2301      	movs	r3, #1
     b40:	4013      	ands	r3, r2
     b42:	d106      	bne.n	b52 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     b44:	68bb      	ldr	r3, [r7, #8]
     b46:	7e1b      	ldrb	r3, [r3, #24]
     b48:	b2db      	uxtb	r3, r3
     b4a:	001a      	movs	r2, r3
     b4c:	2302      	movs	r3, #2
     b4e:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     b50:	d0e1      	beq.n	b16 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
     b52:	2300      	movs	r3, #0
}
     b54:	0018      	movs	r0, r3
     b56:	46bd      	mov	sp, r7
     b58:	b004      	add	sp, #16
     b5a:	bd80      	pop	{r7, pc}

00000b5c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     b5c:	b590      	push	{r4, r7, lr}
     b5e:	b085      	sub	sp, #20
     b60:	af00      	add	r7, sp, #0
     b62:	6078      	str	r0, [r7, #4]
     b64:	000a      	movs	r2, r1
     b66:	1cfb      	adds	r3, r7, #3
     b68:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b6a:	687b      	ldr	r3, [r7, #4]
     b6c:	681b      	ldr	r3, [r3, #0]
     b6e:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     b70:	68fb      	ldr	r3, [r7, #12]
     b72:	685b      	ldr	r3, [r3, #4]
     b74:	2280      	movs	r2, #128	; 0x80
     b76:	02d2      	lsls	r2, r2, #11
     b78:	431a      	orrs	r2, r3
     b7a:	68fb      	ldr	r3, [r7, #12]
     b7c:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     b7e:	1cfb      	adds	r3, r7, #3
     b80:	781a      	ldrb	r2, [r3, #0]
     b82:	68fb      	ldr	r3, [r7, #12]
     b84:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     b86:	230b      	movs	r3, #11
     b88:	18fc      	adds	r4, r7, r3
     b8a:	687b      	ldr	r3, [r7, #4]
     b8c:	0018      	movs	r0, r3
     b8e:	4b07      	ldr	r3, [pc, #28]	; (bac <_i2c_master_send_hs_master_code+0x50>)
     b90:	4798      	blx	r3
     b92:	0003      	movs	r3, r0
     b94:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     b96:	68fb      	ldr	r3, [r7, #12]
     b98:	2201      	movs	r2, #1
     b9a:	761a      	strb	r2, [r3, #24]

	return tmp_status;
     b9c:	230b      	movs	r3, #11
     b9e:	18fb      	adds	r3, r7, r3
     ba0:	781b      	ldrb	r3, [r3, #0]
}
     ba2:	0018      	movs	r0, r3
     ba4:	46bd      	mov	sp, r7
     ba6:	b005      	add	sp, #20
     ba8:	bd90      	pop	{r4, r7, pc}
     baa:	46c0      	nop			; (mov r8, r8)
     bac:	00000aff 	.word	0x00000aff

00000bb0 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     bb0:	b590      	push	{r4, r7, lr}
     bb2:	b087      	sub	sp, #28
     bb4:	af00      	add	r7, sp, #0
     bb6:	6078      	str	r0, [r7, #4]
     bb8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     bba:	687b      	ldr	r3, [r7, #4]
     bbc:	681b      	ldr	r3, [r3, #0]
     bbe:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     bc0:	2314      	movs	r3, #20
     bc2:	18fb      	adds	r3, r7, r3
     bc4:	683a      	ldr	r2, [r7, #0]
     bc6:	8852      	ldrh	r2, [r2, #2]
     bc8:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
     bca:	2312      	movs	r3, #18
     bcc:	18fb      	adds	r3, r7, r3
     bce:	2200      	movs	r2, #0
     bd0:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     bd2:	68fb      	ldr	r3, [r7, #12]
     bd4:	681b      	ldr	r3, [r3, #0]
     bd6:	011b      	lsls	r3, r3, #4
     bd8:	0fdb      	lsrs	r3, r3, #31
     bda:	b2db      	uxtb	r3, r3
     bdc:	001a      	movs	r2, r3
     bde:	230b      	movs	r3, #11
     be0:	18fb      	adds	r3, r7, r3
     be2:	1e51      	subs	r1, r2, #1
     be4:	418a      	sbcs	r2, r1
     be6:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     be8:	683b      	ldr	r3, [r7, #0]
     bea:	7a5b      	ldrb	r3, [r3, #9]
     bec:	2b00      	cmp	r3, #0
     bee:	d006      	beq.n	bfe <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     bf0:	683b      	ldr	r3, [r7, #0]
     bf2:	7a9a      	ldrb	r2, [r3, #10]
     bf4:	687b      	ldr	r3, [r7, #4]
     bf6:	0011      	movs	r1, r2
     bf8:	0018      	movs	r0, r3
     bfa:	4b85      	ldr	r3, [pc, #532]	; (e10 <_i2c_master_read_packet+0x260>)
     bfc:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     bfe:	68fb      	ldr	r3, [r7, #12]
     c00:	685b      	ldr	r3, [r3, #4]
     c02:	4a84      	ldr	r2, [pc, #528]	; (e14 <_i2c_master_read_packet+0x264>)
     c04:	401a      	ands	r2, r3
     c06:	68fb      	ldr	r3, [r7, #12]
     c08:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     c0a:	683b      	ldr	r3, [r7, #0]
     c0c:	7a1b      	ldrb	r3, [r3, #8]
     c0e:	2b00      	cmp	r3, #0
     c10:	d042      	beq.n	c98 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     c12:	683b      	ldr	r3, [r7, #0]
     c14:	881b      	ldrh	r3, [r3, #0]
     c16:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c18:	683b      	ldr	r3, [r7, #0]
     c1a:	7a5b      	ldrb	r3, [r3, #9]
     c1c:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     c1e:	4313      	orrs	r3, r2
     c20:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c22:	2380      	movs	r3, #128	; 0x80
     c24:	021b      	lsls	r3, r3, #8
     c26:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
     c28:	68fb      	ldr	r3, [r7, #12]
     c2a:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     c2c:	2317      	movs	r3, #23
     c2e:	18fc      	adds	r4, r7, r3
     c30:	687b      	ldr	r3, [r7, #4]
     c32:	0018      	movs	r0, r3
     c34:	4b78      	ldr	r3, [pc, #480]	; (e18 <_i2c_master_read_packet+0x268>)
     c36:	4798      	blx	r3
     c38:	0003      	movs	r3, r0
     c3a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c3c:	68fb      	ldr	r3, [r7, #12]
     c3e:	685b      	ldr	r3, [r3, #4]
     c40:	4a74      	ldr	r2, [pc, #464]	; (e14 <_i2c_master_read_packet+0x264>)
     c42:	401a      	ands	r2, r3
     c44:	68fb      	ldr	r3, [r7, #12]
     c46:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     c48:	2317      	movs	r3, #23
     c4a:	18fb      	adds	r3, r7, r3
     c4c:	781b      	ldrb	r3, [r3, #0]
     c4e:	2b00      	cmp	r3, #0
     c50:	d107      	bne.n	c62 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
     c52:	2317      	movs	r3, #23
     c54:	18fc      	adds	r4, r7, r3
     c56:	687b      	ldr	r3, [r7, #4]
     c58:	0018      	movs	r0, r3
     c5a:	4b70      	ldr	r3, [pc, #448]	; (e1c <_i2c_master_read_packet+0x26c>)
     c5c:	4798      	blx	r3
     c5e:	0003      	movs	r3, r0
     c60:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
     c62:	2317      	movs	r3, #23
     c64:	18fb      	adds	r3, r7, r3
     c66:	781b      	ldrb	r3, [r3, #0]
     c68:	2b00      	cmp	r3, #0
     c6a:	d111      	bne.n	c90 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     c6c:	683b      	ldr	r3, [r7, #0]
     c6e:	881b      	ldrh	r3, [r3, #0]
     c70:	0a1b      	lsrs	r3, r3, #8
     c72:	b29b      	uxth	r3, r3
     c74:	2278      	movs	r2, #120	; 0x78
     c76:	4313      	orrs	r3, r2
     c78:	b29b      	uxth	r3, r3
     c7a:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c7c:	683b      	ldr	r3, [r7, #0]
     c7e:	7a5b      	ldrb	r3, [r3, #9]
     c80:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     c82:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c84:	2201      	movs	r2, #1
     c86:	4313      	orrs	r3, r2
     c88:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     c8a:	68fb      	ldr	r3, [r7, #12]
     c8c:	625a      	str	r2, [r3, #36]	; 0x24
     c8e:	e00f      	b.n	cb0 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
     c90:	2317      	movs	r3, #23
     c92:	18fb      	adds	r3, r7, r3
     c94:	781b      	ldrb	r3, [r3, #0]
     c96:	e0b6      	b.n	e06 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     c98:	683b      	ldr	r3, [r7, #0]
     c9a:	881b      	ldrh	r3, [r3, #0]
     c9c:	005b      	lsls	r3, r3, #1
     c9e:	2201      	movs	r2, #1
     ca0:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     ca2:	683b      	ldr	r3, [r7, #0]
     ca4:	7a5b      	ldrb	r3, [r3, #9]
     ca6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     ca8:	4313      	orrs	r3, r2
     caa:	001a      	movs	r2, r3
     cac:	68fb      	ldr	r3, [r7, #12]
     cae:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     cb0:	2317      	movs	r3, #23
     cb2:	18fc      	adds	r4, r7, r3
     cb4:	687b      	ldr	r3, [r7, #4]
     cb6:	0018      	movs	r0, r3
     cb8:	4b57      	ldr	r3, [pc, #348]	; (e18 <_i2c_master_read_packet+0x268>)
     cba:	4798      	blx	r3
     cbc:	0003      	movs	r3, r0
     cbe:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     cc0:	230b      	movs	r3, #11
     cc2:	18fb      	adds	r3, r7, r3
     cc4:	781b      	ldrb	r3, [r3, #0]
     cc6:	2b00      	cmp	r3, #0
     cc8:	d00b      	beq.n	ce2 <_i2c_master_read_packet+0x132>
     cca:	683b      	ldr	r3, [r7, #0]
     ccc:	885b      	ldrh	r3, [r3, #2]
     cce:	2b01      	cmp	r3, #1
     cd0:	d107      	bne.n	ce2 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     cd2:	68fb      	ldr	r3, [r7, #12]
     cd4:	685b      	ldr	r3, [r3, #4]
     cd6:	2280      	movs	r2, #128	; 0x80
     cd8:	02d2      	lsls	r2, r2, #11
     cda:	431a      	orrs	r2, r3
     cdc:	68fb      	ldr	r3, [r7, #12]
     cde:	605a      	str	r2, [r3, #4]
     ce0:	e005      	b.n	cee <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     ce2:	68fb      	ldr	r3, [r7, #12]
     ce4:	685b      	ldr	r3, [r3, #4]
     ce6:	4a4b      	ldr	r2, [pc, #300]	; (e14 <_i2c_master_read_packet+0x264>)
     ce8:	401a      	ands	r2, r3
     cea:	68fb      	ldr	r3, [r7, #12]
     cec:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     cee:	2317      	movs	r3, #23
     cf0:	18fb      	adds	r3, r7, r3
     cf2:	781b      	ldrb	r3, [r3, #0]
     cf4:	2b00      	cmp	r3, #0
     cf6:	d107      	bne.n	d08 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
     cf8:	2317      	movs	r3, #23
     cfa:	18fc      	adds	r4, r7, r3
     cfc:	687b      	ldr	r3, [r7, #4]
     cfe:	0018      	movs	r0, r3
     d00:	4b46      	ldr	r3, [pc, #280]	; (e1c <_i2c_master_read_packet+0x26c>)
     d02:	4798      	blx	r3
     d04:	0003      	movs	r3, r0
     d06:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     d08:	2317      	movs	r3, #23
     d0a:	18fb      	adds	r3, r7, r3
     d0c:	781b      	ldrb	r3, [r3, #0]
     d0e:	2b00      	cmp	r3, #0
     d10:	d000      	beq.n	d14 <_i2c_master_read_packet+0x164>
     d12:	e075      	b.n	e00 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
     d14:	e04b      	b.n	dae <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     d16:	68fb      	ldr	r3, [r7, #12]
     d18:	8b5b      	ldrh	r3, [r3, #26]
     d1a:	b29b      	uxth	r3, r3
     d1c:	001a      	movs	r2, r3
     d1e:	2320      	movs	r3, #32
     d20:	4013      	ands	r3, r2
     d22:	d101      	bne.n	d28 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
     d24:	2341      	movs	r3, #65	; 0x41
     d26:	e06e      	b.n	e06 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     d28:	687b      	ldr	r3, [r7, #4]
     d2a:	7adb      	ldrb	r3, [r3, #11]
     d2c:	2b00      	cmp	r3, #0
     d2e:	d01e      	beq.n	d6e <_i2c_master_read_packet+0x1be>
     d30:	230b      	movs	r3, #11
     d32:	18fb      	adds	r3, r7, r3
     d34:	781b      	ldrb	r3, [r3, #0]
     d36:	2201      	movs	r2, #1
     d38:	4053      	eors	r3, r2
     d3a:	b2db      	uxtb	r3, r3
     d3c:	2b00      	cmp	r3, #0
     d3e:	d004      	beq.n	d4a <_i2c_master_read_packet+0x19a>
     d40:	2314      	movs	r3, #20
     d42:	18fb      	adds	r3, r7, r3
     d44:	881b      	ldrh	r3, [r3, #0]
     d46:	2b00      	cmp	r3, #0
     d48:	d009      	beq.n	d5e <_i2c_master_read_packet+0x1ae>
     d4a:	230b      	movs	r3, #11
     d4c:	18fb      	adds	r3, r7, r3
     d4e:	781b      	ldrb	r3, [r3, #0]
     d50:	2b00      	cmp	r3, #0
     d52:	d00c      	beq.n	d6e <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     d54:	2314      	movs	r3, #20
     d56:	18fb      	adds	r3, r7, r3
     d58:	881b      	ldrh	r3, [r3, #0]
     d5a:	2b01      	cmp	r3, #1
     d5c:	d107      	bne.n	d6e <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     d5e:	68fb      	ldr	r3, [r7, #12]
     d60:	685b      	ldr	r3, [r3, #4]
     d62:	2280      	movs	r2, #128	; 0x80
     d64:	02d2      	lsls	r2, r2, #11
     d66:	431a      	orrs	r2, r3
     d68:	68fb      	ldr	r3, [r7, #12]
     d6a:	605a      	str	r2, [r3, #4]
     d6c:	e01a      	b.n	da4 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	0018      	movs	r0, r3
     d72:	4b2b      	ldr	r3, [pc, #172]	; (e20 <_i2c_master_read_packet+0x270>)
     d74:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     d76:	683b      	ldr	r3, [r7, #0]
     d78:	685a      	ldr	r2, [r3, #4]
     d7a:	2312      	movs	r3, #18
     d7c:	18fb      	adds	r3, r7, r3
     d7e:	881b      	ldrh	r3, [r3, #0]
     d80:	2112      	movs	r1, #18
     d82:	1879      	adds	r1, r7, r1
     d84:	1c58      	adds	r0, r3, #1
     d86:	8008      	strh	r0, [r1, #0]
     d88:	18d3      	adds	r3, r2, r3
     d8a:	68fa      	ldr	r2, [r7, #12]
     d8c:	2128      	movs	r1, #40	; 0x28
     d8e:	5c52      	ldrb	r2, [r2, r1]
     d90:	b2d2      	uxtb	r2, r2
     d92:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     d94:	2317      	movs	r3, #23
     d96:	18fc      	adds	r4, r7, r3
     d98:	687b      	ldr	r3, [r7, #4]
     d9a:	0018      	movs	r0, r3
     d9c:	4b1e      	ldr	r3, [pc, #120]	; (e18 <_i2c_master_read_packet+0x268>)
     d9e:	4798      	blx	r3
     da0:	0003      	movs	r3, r0
     da2:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     da4:	2317      	movs	r3, #23
     da6:	18fb      	adds	r3, r7, r3
     da8:	781b      	ldrb	r3, [r3, #0]
     daa:	2b00      	cmp	r3, #0
     dac:	d109      	bne.n	dc2 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
     dae:	2314      	movs	r3, #20
     db0:	18fb      	adds	r3, r7, r3
     db2:	881b      	ldrh	r3, [r3, #0]
     db4:	2214      	movs	r2, #20
     db6:	18ba      	adds	r2, r7, r2
     db8:	1e59      	subs	r1, r3, #1
     dba:	8011      	strh	r1, [r2, #0]
     dbc:	2b00      	cmp	r3, #0
     dbe:	d1aa      	bne.n	d16 <_i2c_master_read_packet+0x166>
     dc0:	e000      	b.n	dc4 <_i2c_master_read_packet+0x214>
				break;
     dc2:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
     dc4:	687b      	ldr	r3, [r7, #4]
     dc6:	7a9b      	ldrb	r3, [r3, #10]
     dc8:	2b00      	cmp	r3, #0
     dca:	d00a      	beq.n	de2 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
     dcc:	687b      	ldr	r3, [r7, #4]
     dce:	0018      	movs	r0, r3
     dd0:	4b13      	ldr	r3, [pc, #76]	; (e20 <_i2c_master_read_packet+0x270>)
     dd2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     dd4:	68fb      	ldr	r3, [r7, #12]
     dd6:	685b      	ldr	r3, [r3, #4]
     dd8:	22c0      	movs	r2, #192	; 0xc0
     dda:	0292      	lsls	r2, r2, #10
     ddc:	431a      	orrs	r2, r3
     dde:	68fb      	ldr	r3, [r7, #12]
     de0:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     de2:	687b      	ldr	r3, [r7, #4]
     de4:	0018      	movs	r0, r3
     de6:	4b0e      	ldr	r3, [pc, #56]	; (e20 <_i2c_master_read_packet+0x270>)
     de8:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     dea:	683b      	ldr	r3, [r7, #0]
     dec:	685a      	ldr	r2, [r3, #4]
     dee:	2312      	movs	r3, #18
     df0:	18fb      	adds	r3, r7, r3
     df2:	881b      	ldrh	r3, [r3, #0]
     df4:	18d3      	adds	r3, r2, r3
     df6:	68fa      	ldr	r2, [r7, #12]
     df8:	2128      	movs	r1, #40	; 0x28
     dfa:	5c52      	ldrb	r2, [r2, r1]
     dfc:	b2d2      	uxtb	r2, r2
     dfe:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
     e00:	2317      	movs	r3, #23
     e02:	18fb      	adds	r3, r7, r3
     e04:	781b      	ldrb	r3, [r3, #0]
}
     e06:	0018      	movs	r0, r3
     e08:	46bd      	mov	sp, r7
     e0a:	b007      	add	sp, #28
     e0c:	bd90      	pop	{r4, r7, pc}
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	00000b5d 	.word	0x00000b5d
     e14:	fffbffff 	.word	0xfffbffff
     e18:	00000aff 	.word	0x00000aff
     e1c:	00000aa1 	.word	0x00000aa1
     e20:	00000a7d 	.word	0x00000a7d

00000e24 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     e24:	b580      	push	{r7, lr}
     e26:	b082      	sub	sp, #8
     e28:	af00      	add	r7, sp, #0
     e2a:	6078      	str	r0, [r7, #4]
     e2c:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	2201      	movs	r2, #1
     e32:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     e34:	687b      	ldr	r3, [r7, #4]
     e36:	2201      	movs	r2, #1
     e38:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
     e3a:	683a      	ldr	r2, [r7, #0]
     e3c:	687b      	ldr	r3, [r7, #4]
     e3e:	0011      	movs	r1, r2
     e40:	0018      	movs	r0, r3
     e42:	4b03      	ldr	r3, [pc, #12]	; (e50 <i2c_master_read_packet_wait+0x2c>)
     e44:	4798      	blx	r3
     e46:	0003      	movs	r3, r0
}
     e48:	0018      	movs	r0, r3
     e4a:	46bd      	mov	sp, r7
     e4c:	b002      	add	sp, #8
     e4e:	bd80      	pop	{r7, pc}
     e50:	00000bb1 	.word	0x00000bb1

00000e54 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     e54:	b590      	push	{r4, r7, lr}
     e56:	b087      	sub	sp, #28
     e58:	af00      	add	r7, sp, #0
     e5a:	6078      	str	r0, [r7, #4]
     e5c:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     e5e:	687b      	ldr	r3, [r7, #4]
     e60:	681b      	ldr	r3, [r3, #0]
     e62:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     e64:	2314      	movs	r3, #20
     e66:	18fb      	adds	r3, r7, r3
     e68:	683a      	ldr	r2, [r7, #0]
     e6a:	8852      	ldrh	r2, [r2, #2]
     e6c:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
     e6e:	687b      	ldr	r3, [r7, #4]
     e70:	0018      	movs	r0, r3
     e72:	4b51      	ldr	r3, [pc, #324]	; (fb8 <_i2c_master_write_packet+0x164>)
     e74:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     e76:	683b      	ldr	r3, [r7, #0]
     e78:	7a5b      	ldrb	r3, [r3, #9]
     e7a:	2b00      	cmp	r3, #0
     e7c:	d006      	beq.n	e8c <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     e7e:	683b      	ldr	r3, [r7, #0]
     e80:	7a9a      	ldrb	r2, [r3, #10]
     e82:	687b      	ldr	r3, [r7, #4]
     e84:	0011      	movs	r1, r2
     e86:	0018      	movs	r0, r3
     e88:	4b4c      	ldr	r3, [pc, #304]	; (fbc <_i2c_master_write_packet+0x168>)
     e8a:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     e8c:	68fb      	ldr	r3, [r7, #12]
     e8e:	685b      	ldr	r3, [r3, #4]
     e90:	4a4b      	ldr	r2, [pc, #300]	; (fc0 <_i2c_master_write_packet+0x16c>)
     e92:	401a      	ands	r2, r3
     e94:	68fb      	ldr	r3, [r7, #12]
     e96:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     e98:	683b      	ldr	r3, [r7, #0]
     e9a:	7a1b      	ldrb	r3, [r3, #8]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d00d      	beq.n	ebc <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     ea0:	683b      	ldr	r3, [r7, #0]
     ea2:	881b      	ldrh	r3, [r3, #0]
     ea4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     ea6:	683b      	ldr	r3, [r7, #0]
     ea8:	7a5b      	ldrb	r3, [r3, #9]
     eaa:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     eac:	4313      	orrs	r3, r2
     eae:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     eb0:	2380      	movs	r3, #128	; 0x80
     eb2:	021b      	lsls	r3, r3, #8
     eb4:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     eb6:	68fb      	ldr	r3, [r7, #12]
     eb8:	625a      	str	r2, [r3, #36]	; 0x24
     eba:	e009      	b.n	ed0 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     ebc:	683b      	ldr	r3, [r7, #0]
     ebe:	881b      	ldrh	r3, [r3, #0]
     ec0:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     ec2:	683b      	ldr	r3, [r7, #0]
     ec4:	7a5b      	ldrb	r3, [r3, #9]
     ec6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     ec8:	4313      	orrs	r3, r2
     eca:	001a      	movs	r2, r3
     ecc:	68fb      	ldr	r3, [r7, #12]
     ece:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     ed0:	2317      	movs	r3, #23
     ed2:	18fc      	adds	r4, r7, r3
     ed4:	687b      	ldr	r3, [r7, #4]
     ed6:	0018      	movs	r0, r3
     ed8:	4b3a      	ldr	r3, [pc, #232]	; (fc4 <_i2c_master_write_packet+0x170>)
     eda:	4798      	blx	r3
     edc:	0003      	movs	r3, r0
     ede:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     ee0:	2317      	movs	r3, #23
     ee2:	18fb      	adds	r3, r7, r3
     ee4:	781b      	ldrb	r3, [r3, #0]
     ee6:	2b00      	cmp	r3, #0
     ee8:	d107      	bne.n	efa <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
     eea:	2317      	movs	r3, #23
     eec:	18fc      	adds	r4, r7, r3
     eee:	687b      	ldr	r3, [r7, #4]
     ef0:	0018      	movs	r0, r3
     ef2:	4b35      	ldr	r3, [pc, #212]	; (fc8 <_i2c_master_write_packet+0x174>)
     ef4:	4798      	blx	r3
     ef6:	0003      	movs	r3, r0
     ef8:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     efa:	2317      	movs	r3, #23
     efc:	18fb      	adds	r3, r7, r3
     efe:	781b      	ldrb	r3, [r3, #0]
     f00:	2b00      	cmp	r3, #0
     f02:	d152      	bne.n	faa <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
     f04:	2312      	movs	r3, #18
     f06:	18fb      	adds	r3, r7, r3
     f08:	2200      	movs	r2, #0
     f0a:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
     f0c:	e033      	b.n	f76 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     f0e:	68fb      	ldr	r3, [r7, #12]
     f10:	8b5b      	ldrh	r3, [r3, #26]
     f12:	b29b      	uxth	r3, r3
     f14:	001a      	movs	r2, r3
     f16:	2320      	movs	r3, #32
     f18:	4013      	ands	r3, r2
     f1a:	d101      	bne.n	f20 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
     f1c:	2341      	movs	r3, #65	; 0x41
     f1e:	e047      	b.n	fb0 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     f20:	687b      	ldr	r3, [r7, #4]
     f22:	0018      	movs	r0, r3
     f24:	4b24      	ldr	r3, [pc, #144]	; (fb8 <_i2c_master_write_packet+0x164>)
     f26:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     f28:	683b      	ldr	r3, [r7, #0]
     f2a:	685a      	ldr	r2, [r3, #4]
     f2c:	2312      	movs	r3, #18
     f2e:	18fb      	adds	r3, r7, r3
     f30:	881b      	ldrh	r3, [r3, #0]
     f32:	2112      	movs	r1, #18
     f34:	1879      	adds	r1, r7, r1
     f36:	1c58      	adds	r0, r3, #1
     f38:	8008      	strh	r0, [r1, #0]
     f3a:	18d3      	adds	r3, r2, r3
     f3c:	7819      	ldrb	r1, [r3, #0]
     f3e:	68fb      	ldr	r3, [r7, #12]
     f40:	2228      	movs	r2, #40	; 0x28
     f42:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     f44:	2317      	movs	r3, #23
     f46:	18fc      	adds	r4, r7, r3
     f48:	687b      	ldr	r3, [r7, #4]
     f4a:	0018      	movs	r0, r3
     f4c:	4b1d      	ldr	r3, [pc, #116]	; (fc4 <_i2c_master_write_packet+0x170>)
     f4e:	4798      	blx	r3
     f50:	0003      	movs	r3, r0
     f52:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     f54:	2317      	movs	r3, #23
     f56:	18fb      	adds	r3, r7, r3
     f58:	781b      	ldrb	r3, [r3, #0]
     f5a:	2b00      	cmp	r3, #0
     f5c:	d115      	bne.n	f8a <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     f5e:	68fb      	ldr	r3, [r7, #12]
     f60:	8b5b      	ldrh	r3, [r3, #26]
     f62:	b29b      	uxth	r3, r3
     f64:	001a      	movs	r2, r3
     f66:	2304      	movs	r3, #4
     f68:	4013      	ands	r3, r2
     f6a:	d004      	beq.n	f76 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     f6c:	2317      	movs	r3, #23
     f6e:	18fb      	adds	r3, r7, r3
     f70:	221e      	movs	r2, #30
     f72:	701a      	strb	r2, [r3, #0]
				break;
     f74:	e00a      	b.n	f8c <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
     f76:	2314      	movs	r3, #20
     f78:	18fb      	adds	r3, r7, r3
     f7a:	881b      	ldrh	r3, [r3, #0]
     f7c:	2214      	movs	r2, #20
     f7e:	18ba      	adds	r2, r7, r2
     f80:	1e59      	subs	r1, r3, #1
     f82:	8011      	strh	r1, [r2, #0]
     f84:	2b00      	cmp	r3, #0
     f86:	d1c2      	bne.n	f0e <_i2c_master_write_packet+0xba>
     f88:	e000      	b.n	f8c <_i2c_master_write_packet+0x138>
				break;
     f8a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
     f8c:	687b      	ldr	r3, [r7, #4]
     f8e:	7a9b      	ldrb	r3, [r3, #10]
     f90:	2b00      	cmp	r3, #0
     f92:	d00a      	beq.n	faa <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     f94:	687b      	ldr	r3, [r7, #4]
     f96:	0018      	movs	r0, r3
     f98:	4b07      	ldr	r3, [pc, #28]	; (fb8 <_i2c_master_write_packet+0x164>)
     f9a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f9c:	68fb      	ldr	r3, [r7, #12]
     f9e:	685b      	ldr	r3, [r3, #4]
     fa0:	22c0      	movs	r2, #192	; 0xc0
     fa2:	0292      	lsls	r2, r2, #10
     fa4:	431a      	orrs	r2, r3
     fa6:	68fb      	ldr	r3, [r7, #12]
     fa8:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
     faa:	2317      	movs	r3, #23
     fac:	18fb      	adds	r3, r7, r3
     fae:	781b      	ldrb	r3, [r3, #0]
}
     fb0:	0018      	movs	r0, r3
     fb2:	46bd      	mov	sp, r7
     fb4:	b007      	add	sp, #28
     fb6:	bd90      	pop	{r4, r7, pc}
     fb8:	00000a7d 	.word	0x00000a7d
     fbc:	00000b5d 	.word	0x00000b5d
     fc0:	fffbffff 	.word	0xfffbffff
     fc4:	00000aff 	.word	0x00000aff
     fc8:	00000aa1 	.word	0x00000aa1

00000fcc <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     fcc:	b580      	push	{r7, lr}
     fce:	b082      	sub	sp, #8
     fd0:	af00      	add	r7, sp, #0
     fd2:	6078      	str	r0, [r7, #4]
     fd4:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     fd6:	687b      	ldr	r3, [r7, #4]
     fd8:	2201      	movs	r2, #1
     fda:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     fdc:	687b      	ldr	r3, [r7, #4]
     fde:	2201      	movs	r2, #1
     fe0:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
     fe2:	683a      	ldr	r2, [r7, #0]
     fe4:	687b      	ldr	r3, [r7, #4]
     fe6:	0011      	movs	r1, r2
     fe8:	0018      	movs	r0, r3
     fea:	4b03      	ldr	r3, [pc, #12]	; (ff8 <i2c_master_write_packet_wait+0x2c>)
     fec:	4798      	blx	r3
     fee:	0003      	movs	r3, r0
}
     ff0:	0018      	movs	r0, r3
     ff2:	46bd      	mov	sp, r7
     ff4:	b002      	add	sp, #8
     ff6:	bd80      	pop	{r7, pc}
     ff8:	00000e55 	.word	0x00000e55

00000ffc <system_apb_clock_set_mask>:
{
     ffc:	b580      	push	{r7, lr}
     ffe:	b082      	sub	sp, #8
    1000:	af00      	add	r7, sp, #0
    1002:	0002      	movs	r2, r0
    1004:	6039      	str	r1, [r7, #0]
    1006:	1dfb      	adds	r3, r7, #7
    1008:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    100a:	1dfb      	adds	r3, r7, #7
    100c:	781b      	ldrb	r3, [r3, #0]
    100e:	2b01      	cmp	r3, #1
    1010:	d00a      	beq.n	1028 <system_apb_clock_set_mask+0x2c>
    1012:	2b02      	cmp	r3, #2
    1014:	d00f      	beq.n	1036 <system_apb_clock_set_mask+0x3a>
    1016:	2b00      	cmp	r3, #0
    1018:	d114      	bne.n	1044 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    101a:	4b0e      	ldr	r3, [pc, #56]	; (1054 <system_apb_clock_set_mask+0x58>)
    101c:	4a0d      	ldr	r2, [pc, #52]	; (1054 <system_apb_clock_set_mask+0x58>)
    101e:	6991      	ldr	r1, [r2, #24]
    1020:	683a      	ldr	r2, [r7, #0]
    1022:	430a      	orrs	r2, r1
    1024:	619a      	str	r2, [r3, #24]
			break;
    1026:	e00f      	b.n	1048 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1028:	4b0a      	ldr	r3, [pc, #40]	; (1054 <system_apb_clock_set_mask+0x58>)
    102a:	4a0a      	ldr	r2, [pc, #40]	; (1054 <system_apb_clock_set_mask+0x58>)
    102c:	69d1      	ldr	r1, [r2, #28]
    102e:	683a      	ldr	r2, [r7, #0]
    1030:	430a      	orrs	r2, r1
    1032:	61da      	str	r2, [r3, #28]
			break;
    1034:	e008      	b.n	1048 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    1036:	4b07      	ldr	r3, [pc, #28]	; (1054 <system_apb_clock_set_mask+0x58>)
    1038:	4a06      	ldr	r2, [pc, #24]	; (1054 <system_apb_clock_set_mask+0x58>)
    103a:	6a11      	ldr	r1, [r2, #32]
    103c:	683a      	ldr	r2, [r7, #0]
    103e:	430a      	orrs	r2, r1
    1040:	621a      	str	r2, [r3, #32]
			break;
    1042:	e001      	b.n	1048 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1044:	2317      	movs	r3, #23
    1046:	e000      	b.n	104a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1048:	2300      	movs	r3, #0
}
    104a:	0018      	movs	r0, r3
    104c:	46bd      	mov	sp, r7
    104e:	b002      	add	sp, #8
    1050:	bd80      	pop	{r7, pc}
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	40000400 	.word	0x40000400

00001058 <wdt_is_syncing>:
{
    1058:	b580      	push	{r7, lr}
    105a:	b082      	sub	sp, #8
    105c:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    105e:	4b07      	ldr	r3, [pc, #28]	; (107c <wdt_is_syncing+0x24>)
    1060:	607b      	str	r3, [r7, #4]
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    1062:	687b      	ldr	r3, [r7, #4]
    1064:	79db      	ldrb	r3, [r3, #7]
    1066:	b2db      	uxtb	r3, r3
    1068:	b25b      	sxtb	r3, r3
    106a:	2b00      	cmp	r3, #0
    106c:	da01      	bge.n	1072 <wdt_is_syncing+0x1a>
		return true;
    106e:	2301      	movs	r3, #1
    1070:	e000      	b.n	1074 <wdt_is_syncing+0x1c>
	return false;
    1072:	2300      	movs	r3, #0
}
    1074:	0018      	movs	r0, r3
    1076:	46bd      	mov	sp, r7
    1078:	b002      	add	sp, #8
    107a:	bd80      	pop	{r7, pc}
    107c:	40001000 	.word	0x40001000

00001080 <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
    1080:	b580      	push	{r7, lr}
    1082:	b082      	sub	sp, #8
    1084:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1086:	4b07      	ldr	r3, [pc, #28]	; (10a4 <wdt_is_locked+0x24>)
    1088:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    108a:	687b      	ldr	r3, [r7, #4]
    108c:	781b      	ldrb	r3, [r3, #0]
    108e:	b2db      	uxtb	r3, r3
    1090:	001a      	movs	r2, r3
    1092:	2380      	movs	r3, #128	; 0x80
    1094:	4013      	ands	r3, r2
    1096:	1e5a      	subs	r2, r3, #1
    1098:	4193      	sbcs	r3, r2
    109a:	b2db      	uxtb	r3, r3
#endif
}
    109c:	0018      	movs	r0, r3
    109e:	46bd      	mov	sp, r7
    10a0:	b002      	add	sp, #8
    10a2:	bd80      	pop	{r7, pc}
    10a4:	40001000 	.word	0x40001000

000010a8 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    10a8:	b580      	push	{r7, lr}
    10aa:	b086      	sub	sp, #24
    10ac:	af00      	add	r7, sp, #0
    10ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
    10b0:	4b54      	ldr	r3, [pc, #336]	; (1204 <wdt_set_config+0x15c>)
    10b2:	613b      	str	r3, [r7, #16]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);
    10b4:	2110      	movs	r1, #16
    10b6:	2000      	movs	r0, #0
    10b8:	4b53      	ldr	r3, [pc, #332]	; (1208 <wdt_set_config+0x160>)
    10ba:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    10bc:	4b53      	ldr	r3, [pc, #332]	; (120c <wdt_set_config+0x164>)
    10be:	4798      	blx	r3
    10c0:	1e03      	subs	r3, r0, #0
    10c2:	d001      	beq.n	10c8 <wdt_set_config+0x20>
		return STATUS_ERR_IO;
    10c4:	2310      	movs	r3, #16
    10c6:	e098      	b.n	11fa <wdt_set_config+0x152>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    10c8:	687b      	ldr	r3, [r7, #4]
    10ca:	78db      	ldrb	r3, [r3, #3]
    10cc:	2b00      	cmp	r3, #0
    10ce:	d101      	bne.n	10d4 <wdt_set_config+0x2c>
		return STATUS_ERR_INVALID_ARG;
    10d0:	2317      	movs	r3, #23
    10d2:	e092      	b.n	11fa <wdt_set_config+0x152>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    10d4:	687b      	ldr	r3, [r7, #4]
    10d6:	78da      	ldrb	r2, [r3, #3]
    10d8:	687b      	ldr	r3, [r7, #4]
    10da:	791b      	ldrb	r3, [r3, #4]
    10dc:	429a      	cmp	r2, r3
    10de:	d305      	bcc.n	10ec <wdt_set_config+0x44>
			(config->timeout_period < config->early_warning_period)) {
    10e0:	687b      	ldr	r3, [r7, #4]
    10e2:	78da      	ldrb	r2, [r3, #3]
    10e4:	687b      	ldr	r3, [r7, #4]
    10e6:	795b      	ldrb	r3, [r3, #5]
	if ((config->timeout_period < config->window_period) ||
    10e8:	429a      	cmp	r2, r3
    10ea:	d201      	bcs.n	10f0 <wdt_set_config+0x48>
		return STATUS_ERR_INVALID_ARG;
    10ec:	2317      	movs	r3, #23
    10ee:	e084      	b.n	11fa <wdt_set_config+0x152>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    10f0:	693b      	ldr	r3, [r7, #16]
    10f2:	781b      	ldrb	r3, [r3, #0]
    10f4:	b2db      	uxtb	r3, r3
    10f6:	2202      	movs	r2, #2
    10f8:	4393      	bics	r3, r2
    10fa:	b2da      	uxtb	r2, r3
    10fc:	693b      	ldr	r3, [r7, #16]
    10fe:	701a      	strb	r2, [r3, #0]

	while (wdt_is_syncing()) {
    1100:	46c0      	nop			; (mov r8, r8)
    1102:	4b43      	ldr	r3, [pc, #268]	; (1210 <wdt_set_config+0x168>)
    1104:	4798      	blx	r3
    1106:	1e03      	subs	r3, r0, #0
    1108:	d1fb      	bne.n	1102 <wdt_set_config+0x5a>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
    110a:	687b      	ldr	r3, [r7, #4]
    110c:	785b      	ldrb	r3, [r3, #1]
    110e:	2201      	movs	r2, #1
    1110:	4053      	eors	r3, r2
    1112:	b2db      	uxtb	r3, r3
    1114:	2b00      	cmp	r3, #0
    1116:	d001      	beq.n	111c <wdt_set_config+0x74>
		return STATUS_OK;
    1118:	2300      	movs	r3, #0
    111a:	e06e      	b.n	11fa <wdt_set_config+0x152>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
    111c:	687b      	ldr	r3, [r7, #4]
    111e:	789a      	ldrb	r2, [r3, #2]
    1120:	230c      	movs	r3, #12
    1122:	18fb      	adds	r3, r7, r3
    1124:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    1126:	230c      	movs	r3, #12
    1128:	18fb      	adds	r3, r7, r3
    112a:	0019      	movs	r1, r3
    112c:	2003      	movs	r0, #3
    112e:	4b39      	ldr	r3, [pc, #228]	; (1214 <wdt_set_config+0x16c>)
    1130:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    1132:	2003      	movs	r0, #3
    1134:	4b38      	ldr	r3, [pc, #224]	; (1218 <wdt_set_config+0x170>)
    1136:	4798      	blx	r3
	if (config->always_on) {
    1138:	687b      	ldr	r3, [r7, #4]
    113a:	781b      	ldrb	r3, [r3, #0]
    113c:	2b00      	cmp	r3, #0
    113e:	d002      	beq.n	1146 <wdt_set_config+0x9e>
		system_gclk_chan_lock(WDT_GCLK_ID);
    1140:	2003      	movs	r0, #3
    1142:	4b36      	ldr	r3, [pc, #216]	; (121c <wdt_set_config+0x174>)
    1144:	4798      	blx	r3
	}

	uint32_t new_config = 0;
    1146:	2300      	movs	r3, #0
    1148:	617b      	str	r3, [r7, #20]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    114a:	687b      	ldr	r3, [r7, #4]
    114c:	78db      	ldrb	r3, [r3, #3]
    114e:	3b01      	subs	r3, #1
    1150:	001a      	movs	r2, r3
    1152:	697b      	ldr	r3, [r7, #20]
    1154:	4313      	orrs	r3, r2
    1156:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
    1158:	687b      	ldr	r3, [r7, #4]
    115a:	791b      	ldrb	r3, [r3, #4]
    115c:	2b00      	cmp	r3, #0
    115e:	d010      	beq.n	1182 <wdt_set_config+0xda>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    1160:	693b      	ldr	r3, [r7, #16]
    1162:	781b      	ldrb	r3, [r3, #0]
    1164:	b2db      	uxtb	r3, r3
    1166:	2204      	movs	r2, #4
    1168:	4313      	orrs	r3, r2
    116a:	b2da      	uxtb	r2, r3
    116c:	693b      	ldr	r3, [r7, #16]
    116e:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    1170:	687b      	ldr	r3, [r7, #4]
    1172:	791b      	ldrb	r3, [r3, #4]
    1174:	3b01      	subs	r3, #1
    1176:	011b      	lsls	r3, r3, #4
    1178:	001a      	movs	r2, r3
    117a:	697b      	ldr	r3, [r7, #20]
    117c:	4313      	orrs	r3, r2
    117e:	617b      	str	r3, [r7, #20]
    1180:	e007      	b.n	1192 <wdt_set_config+0xea>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    1182:	693b      	ldr	r3, [r7, #16]
    1184:	781b      	ldrb	r3, [r3, #0]
    1186:	b2db      	uxtb	r3, r3
    1188:	2204      	movs	r2, #4
    118a:	4393      	bics	r3, r2
    118c:	b2da      	uxtb	r2, r3
    118e:	693b      	ldr	r3, [r7, #16]
    1190:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    1192:	46c0      	nop			; (mov r8, r8)
    1194:	4b1e      	ldr	r3, [pc, #120]	; (1210 <wdt_set_config+0x168>)
    1196:	4798      	blx	r3
    1198:	1e03      	subs	r3, r0, #0
    119a:	d1fb      	bne.n	1194 <wdt_set_config+0xec>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
    119c:	697b      	ldr	r3, [r7, #20]
    119e:	b2da      	uxtb	r2, r3
    11a0:	693b      	ldr	r3, [r7, #16]
    11a2:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    11a4:	687b      	ldr	r3, [r7, #4]
    11a6:	795b      	ldrb	r3, [r3, #5]
    11a8:	2b00      	cmp	r3, #0
    11aa:	d00a      	beq.n	11c2 <wdt_set_config+0x11a>
		while (wdt_is_syncing()) {
    11ac:	46c0      	nop			; (mov r8, r8)
    11ae:	4b18      	ldr	r3, [pc, #96]	; (1210 <wdt_set_config+0x168>)
    11b0:	4798      	blx	r3
    11b2:	1e03      	subs	r3, r0, #0
    11b4:	d1fb      	bne.n	11ae <wdt_set_config+0x106>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    11b6:	687b      	ldr	r3, [r7, #4]
    11b8:	795b      	ldrb	r3, [r3, #5]
    11ba:	3b01      	subs	r3, #1
    11bc:	b2da      	uxtb	r2, r3
    11be:	693b      	ldr	r3, [r7, #16]
    11c0:	709a      	strb	r2, [r3, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
    11c2:	687b      	ldr	r3, [r7, #4]
    11c4:	781b      	ldrb	r3, [r3, #0]
    11c6:	2b00      	cmp	r3, #0
    11c8:	d009      	beq.n	11de <wdt_set_config+0x136>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    11ca:	693b      	ldr	r3, [r7, #16]
    11cc:	781b      	ldrb	r3, [r3, #0]
    11ce:	b2db      	uxtb	r3, r3
    11d0:	2280      	movs	r2, #128	; 0x80
    11d2:	4252      	negs	r2, r2
    11d4:	4313      	orrs	r3, r2
    11d6:	b2da      	uxtb	r2, r3
    11d8:	693b      	ldr	r3, [r7, #16]
    11da:	701a      	strb	r2, [r3, #0]
    11dc:	e007      	b.n	11ee <wdt_set_config+0x146>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    11de:	693b      	ldr	r3, [r7, #16]
    11e0:	781b      	ldrb	r3, [r3, #0]
    11e2:	b2db      	uxtb	r3, r3
    11e4:	2202      	movs	r2, #2
    11e6:	4313      	orrs	r3, r2
    11e8:	b2da      	uxtb	r2, r3
    11ea:	693b      	ldr	r3, [r7, #16]
    11ec:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    11ee:	46c0      	nop			; (mov r8, r8)
    11f0:	4b07      	ldr	r3, [pc, #28]	; (1210 <wdt_set_config+0x168>)
    11f2:	4798      	blx	r3
    11f4:	1e03      	subs	r3, r0, #0
    11f6:	d1fb      	bne.n	11f0 <wdt_set_config+0x148>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
    11f8:	2300      	movs	r3, #0
}
    11fa:	0018      	movs	r0, r3
    11fc:	46bd      	mov	sp, r7
    11fe:	b006      	add	sp, #24
    1200:	bd80      	pop	{r7, pc}
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	40001000 	.word	0x40001000
    1208:	00000ffd 	.word	0x00000ffd
    120c:	00001081 	.word	0x00001081
    1210:	00001059 	.word	0x00001059
    1214:	00004b7d 	.word	0x00004b7d
    1218:	00004bc1 	.word	0x00004bc1
    121c:	00004ca1 	.word	0x00004ca1

00001220 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    1220:	b580      	push	{r7, lr}
    1222:	b082      	sub	sp, #8
    1224:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1226:	4b04      	ldr	r3, [pc, #16]	; (1238 <wdt_clear_early_warning+0x18>)
    1228:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    122a:	687b      	ldr	r3, [r7, #4]
    122c:	2201      	movs	r2, #1
    122e:	719a      	strb	r2, [r3, #6]
}
    1230:	46c0      	nop			; (mov r8, r8)
    1232:	46bd      	mov	sp, r7
    1234:	b002      	add	sp, #8
    1236:	bd80      	pop	{r7, pc}
    1238:	40001000 	.word	0x40001000

0000123c <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    123c:	b580      	push	{r7, lr}
    123e:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    1240:	4b05      	ldr	r3, [pc, #20]	; (1258 <WDT_Handler+0x1c>)
    1242:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    1244:	4b05      	ldr	r3, [pc, #20]	; (125c <WDT_Handler+0x20>)
    1246:	681b      	ldr	r3, [r3, #0]
    1248:	2b00      	cmp	r3, #0
    124a:	d002      	beq.n	1252 <WDT_Handler+0x16>
		wdt_early_warning_callback();
    124c:	4b03      	ldr	r3, [pc, #12]	; (125c <WDT_Handler+0x20>)
    124e:	681b      	ldr	r3, [r3, #0]
    1250:	4798      	blx	r3
	}
}
    1252:	46c0      	nop			; (mov r8, r8)
    1254:	46bd      	mov	sp, r7
    1256:	bd80      	pop	{r7, pc}
    1258:	00001221 	.word	0x00001221
    125c:	200009f0 	.word	0x200009f0

00001260 <system_interrupt_enable_global>:
{
    1260:	b580      	push	{r7, lr}
    1262:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    1264:	4b04      	ldr	r3, [pc, #16]	; (1278 <system_interrupt_enable_global+0x18>)
    1266:	2201      	movs	r2, #1
    1268:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    126a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    126e:	b662      	cpsie	i
}
    1270:	46c0      	nop			; (mov r8, r8)
    1272:	46bd      	mov	sp, r7
    1274:	bd80      	pop	{r7, pc}
    1276:	46c0      	nop			; (mov r8, r8)
    1278:	20000368 	.word	0x20000368

0000127c <system_interrupt_disable_global>:
{
    127c:	b580      	push	{r7, lr}
    127e:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1280:	b672      	cpsid	i
    1282:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1286:	4b03      	ldr	r3, [pc, #12]	; (1294 <system_interrupt_disable_global+0x18>)
    1288:	2200      	movs	r2, #0
    128a:	701a      	strb	r2, [r3, #0]
}
    128c:	46c0      	nop			; (mov r8, r8)
    128e:	46bd      	mov	sp, r7
    1290:	bd80      	pop	{r7, pc}
    1292:	46c0      	nop			; (mov r8, r8)
    1294:	20000368 	.word	0x20000368

00001298 <ble_uart_write>:
	
	reset_buffers();
}

void ble_uart_write(char buffer[])
{
    1298:	b580      	push	{r7, lr}
    129a:	b084      	sub	sp, #16
    129c:	af00      	add	r7, sp, #0
    129e:	6078      	str	r0, [r7, #4]
	system_interrupt_disable_global();
    12a0:	4b10      	ldr	r3, [pc, #64]	; (12e4 <ble_uart_write+0x4c>)
    12a2:	4798      	blx	r3
	uint32_t i = 0;
    12a4:	2300      	movs	r3, #0
    12a6:	60fb      	str	r3, [r7, #12]
	while(buffer[i] != '\0')
    12a8:	e00f      	b.n	12ca <ble_uart_write+0x32>
	{
		if(BLE_UART_SERCOM->USART.INTFLAG.bit.DRE == 1)
    12aa:	4b0f      	ldr	r3, [pc, #60]	; (12e8 <ble_uart_write+0x50>)
    12ac:	7e1b      	ldrb	r3, [r3, #24]
    12ae:	07db      	lsls	r3, r3, #31
    12b0:	0fdb      	lsrs	r3, r3, #31
    12b2:	b2db      	uxtb	r3, r3
    12b4:	2b01      	cmp	r3, #1
    12b6:	d108      	bne.n	12ca <ble_uart_write+0x32>
		{
			BLE_UART_SERCOM->USART.DATA.reg = (uint16_t)buffer[i++];
    12b8:	490b      	ldr	r1, [pc, #44]	; (12e8 <ble_uart_write+0x50>)
    12ba:	68fb      	ldr	r3, [r7, #12]
    12bc:	1c5a      	adds	r2, r3, #1
    12be:	60fa      	str	r2, [r7, #12]
    12c0:	687a      	ldr	r2, [r7, #4]
    12c2:	18d3      	adds	r3, r2, r3
    12c4:	781b      	ldrb	r3, [r3, #0]
    12c6:	b29b      	uxth	r3, r3
    12c8:	850b      	strh	r3, [r1, #40]	; 0x28
	while(buffer[i] != '\0')
    12ca:	687a      	ldr	r2, [r7, #4]
    12cc:	68fb      	ldr	r3, [r7, #12]
    12ce:	18d3      	adds	r3, r2, r3
    12d0:	781b      	ldrb	r3, [r3, #0]
    12d2:	2b00      	cmp	r3, #0
    12d4:	d1e9      	bne.n	12aa <ble_uart_write+0x12>
		}
	}
	system_interrupt_enable_global();
    12d6:	4b05      	ldr	r3, [pc, #20]	; (12ec <ble_uart_write+0x54>)
    12d8:	4798      	blx	r3
}
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	46bd      	mov	sp, r7
    12de:	b004      	add	sp, #16
    12e0:	bd80      	pop	{r7, pc}
    12e2:	46c0      	nop			; (mov r8, r8)
    12e4:	0000127d 	.word	0x0000127d
    12e8:	42001000 	.word	0x42001000
    12ec:	00001261 	.word	0x00001261

000012f0 <SERCOM2_Handler>:
	BLE_UART_SERCOM->USART.DATA.reg = data;
}


void SERCOM2_Handler()
{
    12f0:	b580      	push	{r7, lr}
    12f2:	af00      	add	r7, sp, #0
	if (BLE_UART_SERCOM->USART.INTFLAG.bit.RXC)
    12f4:	4b13      	ldr	r3, [pc, #76]	; (1344 <SERCOM2_Handler+0x54>)
    12f6:	7e1b      	ldrb	r3, [r3, #24]
    12f8:	075b      	lsls	r3, r3, #29
    12fa:	0fdb      	lsrs	r3, r3, #31
    12fc:	b2db      	uxtb	r3, r3
    12fe:	2b00      	cmp	r3, #0
    1300:	d01c      	beq.n	133c <SERCOM2_Handler+0x4c>
	{
		//while (BLE_UART_SERCOM->USART.INTFLAG.bit.DRE != 0 )
		//{
			// Got a character
			if (buff_count > sizeof(rx_buffer_array)-1)
    1302:	4b11      	ldr	r3, [pc, #68]	; (1348 <SERCOM2_Handler+0x58>)
    1304:	681b      	ldr	r3, [r3, #0]
    1306:	001a      	movs	r2, r3
    1308:	4b10      	ldr	r3, [pc, #64]	; (134c <SERCOM2_Handler+0x5c>)
    130a:	429a      	cmp	r2, r3
    130c:	d90b      	bls.n	1326 <SERCOM2_Handler+0x36>
			{
				buff_count = 0;
    130e:	4b0e      	ldr	r3, [pc, #56]	; (1348 <SERCOM2_Handler+0x58>)
    1310:	2200      	movs	r2, #0
    1312:	601a      	str	r2, [r3, #0]
				rx_buffer_array[buff_count] = (uint8_t) BLE_UART_SERCOM->USART.DATA.reg;
    1314:	4b0c      	ldr	r3, [pc, #48]	; (1348 <SERCOM2_Handler+0x58>)
    1316:	681b      	ldr	r3, [r3, #0]
    1318:	4a0a      	ldr	r2, [pc, #40]	; (1344 <SERCOM2_Handler+0x54>)
    131a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    131c:	b292      	uxth	r2, r2
    131e:	b2d1      	uxtb	r1, r2
    1320:	4a0b      	ldr	r2, [pc, #44]	; (1350 <SERCOM2_Handler+0x60>)
    1322:	54d1      	strb	r1, [r2, r3]
				rx_buffer_array[buff_count++] = (uint8_t)BLE_UART_SERCOM->USART.DATA.reg;
			}
		//}

	}
}
    1324:	e00a      	b.n	133c <SERCOM2_Handler+0x4c>
				rx_buffer_array[buff_count++] = (uint8_t)BLE_UART_SERCOM->USART.DATA.reg;
    1326:	4b08      	ldr	r3, [pc, #32]	; (1348 <SERCOM2_Handler+0x58>)
    1328:	681b      	ldr	r3, [r3, #0]
    132a:	1c59      	adds	r1, r3, #1
    132c:	4a06      	ldr	r2, [pc, #24]	; (1348 <SERCOM2_Handler+0x58>)
    132e:	6011      	str	r1, [r2, #0]
    1330:	4a04      	ldr	r2, [pc, #16]	; (1344 <SERCOM2_Handler+0x54>)
    1332:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    1334:	b292      	uxth	r2, r2
    1336:	b2d1      	uxtb	r1, r2
    1338:	4a05      	ldr	r2, [pc, #20]	; (1350 <SERCOM2_Handler+0x60>)
    133a:	54d1      	strb	r1, [r2, r3]
}
    133c:	46c0      	nop			; (mov r8, r8)
    133e:	46bd      	mov	sp, r7
    1340:	bd80      	pop	{r7, pc}
    1342:	46c0      	nop			; (mov r8, r8)
    1344:	42001000 	.word	0x42001000
    1348:	2000055c 	.word	0x2000055c
    134c:	000003ff 	.word	0x000003ff
    1350:	20000a24 	.word	0x20000a24

00001354 <reset_buffers>:

void reset_buffers()
{
    1354:	b580      	push	{r7, lr}
    1356:	b082      	sub	sp, #8
    1358:	af00      	add	r7, sp, #0
	for (uint32_t k=0;k<sizeof(rx_buffer_array);k++)
    135a:	2300      	movs	r3, #0
    135c:	607b      	str	r3, [r7, #4]
    135e:	e007      	b.n	1370 <reset_buffers+0x1c>
	{
		rx_buffer_array[k] = 0;
    1360:	4a09      	ldr	r2, [pc, #36]	; (1388 <reset_buffers+0x34>)
    1362:	687b      	ldr	r3, [r7, #4]
    1364:	18d3      	adds	r3, r2, r3
    1366:	2200      	movs	r2, #0
    1368:	701a      	strb	r2, [r3, #0]
	for (uint32_t k=0;k<sizeof(rx_buffer_array);k++)
    136a:	687b      	ldr	r3, [r7, #4]
    136c:	3301      	adds	r3, #1
    136e:	607b      	str	r3, [r7, #4]
    1370:	687b      	ldr	r3, [r7, #4]
    1372:	4a06      	ldr	r2, [pc, #24]	; (138c <reset_buffers+0x38>)
    1374:	4293      	cmp	r3, r2
    1376:	d9f3      	bls.n	1360 <reset_buffers+0xc>
	}
	buff_count = 0;
    1378:	4b05      	ldr	r3, [pc, #20]	; (1390 <reset_buffers+0x3c>)
    137a:	2200      	movs	r2, #0
    137c:	601a      	str	r2, [r3, #0]
}
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	46bd      	mov	sp, r7
    1382:	b002      	add	sp, #8
    1384:	bd80      	pop	{r7, pc}
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	20000a24 	.word	0x20000a24
    138c:	000003ff 	.word	0x000003ff
    1390:	2000055c 	.word	0x2000055c

00001394 <system_interrupt_enable_global>:
{
    1394:	b580      	push	{r7, lr}
    1396:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    1398:	4b04      	ldr	r3, [pc, #16]	; (13ac <system_interrupt_enable_global+0x18>)
    139a:	2201      	movs	r2, #1
    139c:	701a      	strb	r2, [r3, #0]
    139e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    13a2:	b662      	cpsie	i
}
    13a4:	46c0      	nop			; (mov r8, r8)
    13a6:	46bd      	mov	sp, r7
    13a8:	bd80      	pop	{r7, pc}
    13aa:	46c0      	nop			; (mov r8, r8)
    13ac:	20000368 	.word	0x20000368

000013b0 <system_interrupt_disable_global>:
{
    13b0:	b580      	push	{r7, lr}
    13b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
    13b4:	b672      	cpsid	i
    13b6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    13ba:	4b03      	ldr	r3, [pc, #12]	; (13c8 <system_interrupt_disable_global+0x18>)
    13bc:	2200      	movs	r2, #0
    13be:	701a      	strb	r2, [r3, #0]
}
    13c0:	46c0      	nop			; (mov r8, r8)
    13c2:	46bd      	mov	sp, r7
    13c4:	bd80      	pop	{r7, pc}
    13c6:	46c0      	nop			; (mov r8, r8)
    13c8:	20000368 	.word	0x20000368

000013cc <data_handler>:

char bufbuf[1024];
int buf_count = 0; 

void data_handler(char buffer[])
{
    13cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ce:	b09b      	sub	sp, #108	; 0x6c
    13d0:	af00      	add	r7, sp, #0
    13d2:	60f8      	str	r0, [r7, #12]
	int buf_s = strlen(buffer);
    13d4:	68fb      	ldr	r3, [r7, #12]
    13d6:	0018      	movs	r0, r3
    13d8:	4be8      	ldr	r3, [pc, #928]	; (177c <data_handler+0x3b0>)
    13da:	4798      	blx	r3
    13dc:	0003      	movs	r3, r0
    13de:	667b      	str	r3, [r7, #100]	; 0x64
	if (strncmp(buffer,"\r\n\rAdafruit",7) == 0)
    13e0:	49e7      	ldr	r1, [pc, #924]	; (1780 <data_handler+0x3b4>)
    13e2:	68fb      	ldr	r3, [r7, #12]
    13e4:	2207      	movs	r2, #7
    13e6:	0018      	movs	r0, r3
    13e8:	4be6      	ldr	r3, [pc, #920]	; (1784 <data_handler+0x3b8>)
    13ea:	4798      	blx	r3
    13ec:	1e03      	subs	r3, r0, #0
    13ee:	d103      	bne.n	13f8 <data_handler+0x2c>
	{
		ble_uart_write("#01\n");
    13f0:	4be5      	ldr	r3, [pc, #916]	; (1788 <data_handler+0x3bc>)
    13f2:	0018      	movs	r0, r3
    13f4:	4be5      	ldr	r3, [pc, #916]	; (178c <data_handler+0x3c0>)
    13f6:	4798      	blx	r3
	}
	if (strncmp(buffer,"T00",3) == 0)
    13f8:	49e5      	ldr	r1, [pc, #916]	; (1790 <data_handler+0x3c4>)
    13fa:	68fb      	ldr	r3, [r7, #12]
    13fc:	2203      	movs	r2, #3
    13fe:	0018      	movs	r0, r3
    1400:	4be0      	ldr	r3, [pc, #896]	; (1784 <data_handler+0x3b8>)
    1402:	4798      	blx	r3
    1404:	1e03      	subs	r3, r0, #0
    1406:	d10c      	bne.n	1422 <data_handler+0x56>
	{
		ble_uart_write("L\n");
    1408:	4be2      	ldr	r3, [pc, #904]	; (1794 <data_handler+0x3c8>)
    140a:	0018      	movs	r0, r3
    140c:	4bdf      	ldr	r3, [pc, #892]	; (178c <data_handler+0x3c0>)
    140e:	4798      	blx	r3
		int arg0;
		//ble_uart_write("L\n");
		sscanf(buffer,"T0%d",&arg0);
    1410:	2358      	movs	r3, #88	; 0x58
    1412:	2208      	movs	r2, #8
    1414:	18ba      	adds	r2, r7, r2
    1416:	18d2      	adds	r2, r2, r3
    1418:	49df      	ldr	r1, [pc, #892]	; (1798 <data_handler+0x3cc>)
    141a:	68fb      	ldr	r3, [r7, #12]
    141c:	0018      	movs	r0, r3
    141e:	4bdf      	ldr	r3, [pc, #892]	; (179c <data_handler+0x3d0>)
    1420:	4798      	blx	r3
	}
	
	if (strncmp(buffer,test_bob,3) == 0)
    1422:	49df      	ldr	r1, [pc, #892]	; (17a0 <data_handler+0x3d4>)
    1424:	68fb      	ldr	r3, [r7, #12]
    1426:	2203      	movs	r2, #3
    1428:	0018      	movs	r0, r3
    142a:	4bd6      	ldr	r3, [pc, #856]	; (1784 <data_handler+0x3b8>)
    142c:	4798      	blx	r3
    142e:	1e03      	subs	r3, r0, #0
    1430:	d132      	bne.n	1498 <data_handler+0xcc>
	{
		ble_uart_write("bob was found");
    1432:	4bdc      	ldr	r3, [pc, #880]	; (17a4 <data_handler+0x3d8>)
    1434:	0018      	movs	r0, r3
    1436:	4bd5      	ldr	r3, [pc, #852]	; (178c <data_handler+0x3c0>)
    1438:	4798      	blx	r3
		
		if (strlen(buffer) > strlen(test_bob))
    143a:	68fb      	ldr	r3, [r7, #12]
    143c:	0018      	movs	r0, r3
    143e:	4bcf      	ldr	r3, [pc, #828]	; (177c <data_handler+0x3b0>)
    1440:	4798      	blx	r3
    1442:	0004      	movs	r4, r0
    1444:	4bd6      	ldr	r3, [pc, #856]	; (17a0 <data_handler+0x3d4>)
    1446:	0018      	movs	r0, r3
    1448:	4bcc      	ldr	r3, [pc, #816]	; (177c <data_handler+0x3b0>)
    144a:	4798      	blx	r3
    144c:	0003      	movs	r3, r0
    144e:	429c      	cmp	r4, r3
    1450:	d922      	bls.n	1498 <data_handler+0xcc>
		{
			int arg1;
			sscanf(buffer,"PWM %d",&arg1);
    1452:	2354      	movs	r3, #84	; 0x54
    1454:	2208      	movs	r2, #8
    1456:	18ba      	adds	r2, r7, r2
    1458:	18d2      	adds	r2, r2, r3
    145a:	49d3      	ldr	r1, [pc, #844]	; (17a8 <data_handler+0x3dc>)
    145c:	68fb      	ldr	r3, [r7, #12]
    145e:	0018      	movs	r0, r3
    1460:	4bce      	ldr	r3, [pc, #824]	; (179c <data_handler+0x3d0>)
    1462:	4798      	blx	r3
			//arg1 = buffer[4]-'0';
			if (arg1 < 1)
    1464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1466:	2b00      	cmp	r3, #0
    1468:	dc01      	bgt.n	146e <data_handler+0xa2>
			{
				arg1 = 1;
    146a:	2301      	movs	r3, #1
    146c:	65fb      	str	r3, [r7, #92]	; 0x5c
			}
			pwm_bob = arg1;
    146e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    1470:	4bce      	ldr	r3, [pc, #824]	; (17ac <data_handler+0x3e0>)
    1472:	601a      	str	r2, [r3, #0]
			char string_buffer[32];
			sprintf(string_buffer,": %d",arg1);
    1474:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    1476:	49ce      	ldr	r1, [pc, #824]	; (17b0 <data_handler+0x3e4>)
    1478:	230c      	movs	r3, #12
    147a:	2008      	movs	r0, #8
    147c:	4684      	mov	ip, r0
    147e:	44bc      	add	ip, r7
    1480:	4463      	add	r3, ip
    1482:	0018      	movs	r0, r3
    1484:	4bcb      	ldr	r3, [pc, #812]	; (17b4 <data_handler+0x3e8>)
    1486:	4798      	blx	r3
			ble_uart_write(string_buffer);
    1488:	230c      	movs	r3, #12
    148a:	2208      	movs	r2, #8
    148c:	4694      	mov	ip, r2
    148e:	44bc      	add	ip, r7
    1490:	4463      	add	r3, ip
    1492:	0018      	movs	r0, r3
    1494:	4bbd      	ldr	r3, [pc, #756]	; (178c <data_handler+0x3c0>)
    1496:	4798      	blx	r3
		}
	}


	if(strncmp(buffer,FLASH_ALL_ON,4) == 0)
    1498:	49c7      	ldr	r1, [pc, #796]	; (17b8 <data_handler+0x3ec>)
    149a:	68fb      	ldr	r3, [r7, #12]
    149c:	2204      	movs	r2, #4
    149e:	0018      	movs	r0, r3
    14a0:	4bb8      	ldr	r3, [pc, #736]	; (1784 <data_handler+0x3b8>)
    14a2:	4798      	blx	r3
    14a4:	1e03      	subs	r3, r0, #0
    14a6:	d000      	beq.n	14aa <data_handler+0xde>
    14a8:	e088      	b.n	15bc <data_handler+0x1f0>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    14aa:	2301      	movs	r3, #1
    14ac:	2200      	movs	r2, #0
    14ae:	2101      	movs	r1, #1
    14b0:	2000      	movs	r0, #0
    14b2:	4cc2      	ldr	r4, [pc, #776]	; (17bc <data_handler+0x3f0>)
    14b4:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    14b6:	2301      	movs	r3, #1
    14b8:	2200      	movs	r2, #0
    14ba:	2102      	movs	r1, #2
    14bc:	2000      	movs	r0, #0
    14be:	4cbf      	ldr	r4, [pc, #764]	; (17bc <data_handler+0x3f0>)
    14c0:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    14c2:	2301      	movs	r3, #1
    14c4:	2200      	movs	r2, #0
    14c6:	2103      	movs	r1, #3
    14c8:	2000      	movs	r0, #0
    14ca:	4cbc      	ldr	r4, [pc, #752]	; (17bc <data_handler+0x3f0>)
    14cc:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    14ce:	2301      	movs	r3, #1
    14d0:	2200      	movs	r2, #0
    14d2:	2104      	movs	r1, #4
    14d4:	2000      	movs	r0, #0
    14d6:	4cb9      	ldr	r4, [pc, #740]	; (17bc <data_handler+0x3f0>)
    14d8:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,true);
    14da:	2301      	movs	r3, #1
    14dc:	2201      	movs	r2, #1
    14de:	2102      	movs	r1, #2
    14e0:	2000      	movs	r0, #0
    14e2:	4cb6      	ldr	r4, [pc, #728]	; (17bc <data_handler+0x3f0>)
    14e4:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,true);
    14e6:	2301      	movs	r3, #1
    14e8:	2201      	movs	r2, #1
    14ea:	2101      	movs	r1, #1
    14ec:	2000      	movs	r0, #0
    14ee:	4cb3      	ldr	r4, [pc, #716]	; (17bc <data_handler+0x3f0>)
    14f0:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,true);
    14f2:	2301      	movs	r3, #1
    14f4:	2202      	movs	r2, #2
    14f6:	2102      	movs	r1, #2
    14f8:	2000      	movs	r0, #0
    14fa:	4cb0      	ldr	r4, [pc, #704]	; (17bc <data_handler+0x3f0>)
    14fc:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,true);
    14fe:	2301      	movs	r3, #1
    1500:	2202      	movs	r2, #2
    1502:	2101      	movs	r1, #1
    1504:	2000      	movs	r0, #0
    1506:	4cad      	ldr	r4, [pc, #692]	; (17bc <data_handler+0x3f0>)
    1508:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,true);
    150a:	2301      	movs	r3, #1
    150c:	2202      	movs	r2, #2
    150e:	2104      	movs	r1, #4
    1510:	2000      	movs	r0, #0
    1512:	4caa      	ldr	r4, [pc, #680]	; (17bc <data_handler+0x3f0>)
    1514:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,true);
    1516:	2301      	movs	r3, #1
    1518:	2202      	movs	r2, #2
    151a:	2103      	movs	r1, #3
    151c:	2000      	movs	r0, #0
    151e:	4ca7      	ldr	r4, [pc, #668]	; (17bc <data_handler+0x3f0>)
    1520:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,true);
    1522:	2301      	movs	r3, #1
    1524:	2201      	movs	r2, #1
    1526:	2103      	movs	r1, #3
    1528:	2000      	movs	r0, #0
    152a:	4ca4      	ldr	r4, [pc, #656]	; (17bc <data_handler+0x3f0>)
    152c:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,true);
    152e:	2301      	movs	r3, #1
    1530:	2201      	movs	r2, #1
    1532:	2104      	movs	r1, #4
    1534:	2000      	movs	r0, #0
    1536:	4ca1      	ldr	r4, [pc, #644]	; (17bc <data_handler+0x3f0>)
    1538:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,true);
    153a:	2301      	movs	r3, #1
    153c:	2203      	movs	r2, #3
    153e:	2102      	movs	r1, #2
    1540:	2000      	movs	r0, #0
    1542:	4c9e      	ldr	r4, [pc, #632]	; (17bc <data_handler+0x3f0>)
    1544:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,true);
    1546:	2301      	movs	r3, #1
    1548:	2203      	movs	r2, #3
    154a:	2101      	movs	r1, #1
    154c:	2000      	movs	r0, #0
    154e:	4c9b      	ldr	r4, [pc, #620]	; (17bc <data_handler+0x3f0>)
    1550:	47a0      	blx	r4
		
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR, SUB_LEFT_PIN,true);
    1552:	2301      	movs	r3, #1
    1554:	2203      	movs	r2, #3
    1556:	2103      	movs	r1, #3
    1558:	2000      	movs	r0, #0
    155a:	4c98      	ldr	r4, [pc, #608]	; (17bc <data_handler+0x3f0>)
    155c:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR, SUB_RIGHT_PIN,true);
    155e:	2301      	movs	r3, #1
    1560:	2204      	movs	r2, #4
    1562:	2103      	movs	r1, #3
    1564:	2000      	movs	r0, #0
    1566:	4c95      	ldr	r4, [pc, #596]	; (17bc <data_handler+0x3f0>)
    1568:	47a0      	blx	r4
		
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,true);
    156a:	2301      	movs	r3, #1
    156c:	2204      	movs	r2, #4
    156e:	2101      	movs	r1, #1
    1570:	2000      	movs	r0, #0
    1572:	4c92      	ldr	r4, [pc, #584]	; (17bc <data_handler+0x3f0>)
    1574:	47a0      	blx	r4
		
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,true);
    1576:	2301      	movs	r3, #1
    1578:	2203      	movs	r2, #3
    157a:	2105      	movs	r1, #5
    157c:	2000      	movs	r0, #0
    157e:	4c8f      	ldr	r4, [pc, #572]	; (17bc <data_handler+0x3f0>)
    1580:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,true);
    1582:	2301      	movs	r3, #1
    1584:	2202      	movs	r2, #2
    1586:	2105      	movs	r1, #5
    1588:	2000      	movs	r0, #0
    158a:	4c8c      	ldr	r4, [pc, #560]	; (17bc <data_handler+0x3f0>)
    158c:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,true);
    158e:	2301      	movs	r3, #1
    1590:	2204      	movs	r2, #4
    1592:	2105      	movs	r1, #5
    1594:	2000      	movs	r0, #0
    1596:	4c89      	ldr	r4, [pc, #548]	; (17bc <data_handler+0x3f0>)
    1598:	47a0      	blx	r4
		
		flash_all = true;
    159a:	4b89      	ldr	r3, [pc, #548]	; (17c0 <data_handler+0x3f4>)
    159c:	2201      	movs	r2, #1
    159e:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    15a0:	68fb      	ldr	r3, [r7, #12]
    15a2:	0018      	movs	r0, r3
    15a4:	4b79      	ldr	r3, [pc, #484]	; (178c <data_handler+0x3c0>)
    15a6:	4798      	blx	r3
		ble_uart_write(" - ");
    15a8:	4b86      	ldr	r3, [pc, #536]	; (17c4 <data_handler+0x3f8>)
    15aa:	0018      	movs	r0, r3
    15ac:	4b77      	ldr	r3, [pc, #476]	; (178c <data_handler+0x3c0>)
    15ae:	4798      	blx	r3
		ble_uart_write("ACK");
    15b0:	4b85      	ldr	r3, [pc, #532]	; (17c8 <data_handler+0x3fc>)
    15b2:	0018      	movs	r0, r3
    15b4:	4b75      	ldr	r3, [pc, #468]	; (178c <data_handler+0x3c0>)
    15b6:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    15b8:	f000 fe85 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,FLASH_ALL_OFF,4) == 0)
    15bc:	4983      	ldr	r1, [pc, #524]	; (17cc <data_handler+0x400>)
    15be:	68fb      	ldr	r3, [r7, #12]
    15c0:	2204      	movs	r2, #4
    15c2:	0018      	movs	r0, r3
    15c4:	4b6f      	ldr	r3, [pc, #444]	; (1784 <data_handler+0x3b8>)
    15c6:	4798      	blx	r3
    15c8:	1e03      	subs	r3, r0, #0
    15ca:	d000      	beq.n	15ce <data_handler+0x202>
    15cc:	e088      	b.n	16e0 <data_handler+0x314>
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    15ce:	2300      	movs	r3, #0
    15d0:	2200      	movs	r2, #0
    15d2:	2101      	movs	r1, #1
    15d4:	2000      	movs	r0, #0
    15d6:	4c79      	ldr	r4, [pc, #484]	; (17bc <data_handler+0x3f0>)
    15d8:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    15da:	2300      	movs	r3, #0
    15dc:	2200      	movs	r2, #0
    15de:	2102      	movs	r1, #2
    15e0:	2000      	movs	r0, #0
    15e2:	4c76      	ldr	r4, [pc, #472]	; (17bc <data_handler+0x3f0>)
    15e4:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    15e6:	2300      	movs	r3, #0
    15e8:	2200      	movs	r2, #0
    15ea:	2103      	movs	r1, #3
    15ec:	2000      	movs	r0, #0
    15ee:	4c73      	ldr	r4, [pc, #460]	; (17bc <data_handler+0x3f0>)
    15f0:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    15f2:	2300      	movs	r3, #0
    15f4:	2200      	movs	r2, #0
    15f6:	2104      	movs	r1, #4
    15f8:	2000      	movs	r0, #0
    15fa:	4c70      	ldr	r4, [pc, #448]	; (17bc <data_handler+0x3f0>)
    15fc:	47a0      	blx	r4
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,false);
    15fe:	2300      	movs	r3, #0
    1600:	2201      	movs	r2, #1
    1602:	2102      	movs	r1, #2
    1604:	2000      	movs	r0, #0
    1606:	4c6d      	ldr	r4, [pc, #436]	; (17bc <data_handler+0x3f0>)
    1608:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,false);
    160a:	2300      	movs	r3, #0
    160c:	2201      	movs	r2, #1
    160e:	2101      	movs	r1, #1
    1610:	2000      	movs	r0, #0
    1612:	4c6a      	ldr	r4, [pc, #424]	; (17bc <data_handler+0x3f0>)
    1614:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,false);
    1616:	2300      	movs	r3, #0
    1618:	2202      	movs	r2, #2
    161a:	2102      	movs	r1, #2
    161c:	2000      	movs	r0, #0
    161e:	4c67      	ldr	r4, [pc, #412]	; (17bc <data_handler+0x3f0>)
    1620:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,false);
    1622:	2300      	movs	r3, #0
    1624:	2202      	movs	r2, #2
    1626:	2101      	movs	r1, #1
    1628:	2000      	movs	r0, #0
    162a:	4c64      	ldr	r4, [pc, #400]	; (17bc <data_handler+0x3f0>)
    162c:	47a0      	blx	r4
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,false);
    162e:	2300      	movs	r3, #0
    1630:	2202      	movs	r2, #2
    1632:	2104      	movs	r1, #4
    1634:	2000      	movs	r0, #0
    1636:	4c61      	ldr	r4, [pc, #388]	; (17bc <data_handler+0x3f0>)
    1638:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,false);
    163a:	2300      	movs	r3, #0
    163c:	2202      	movs	r2, #2
    163e:	2103      	movs	r1, #3
    1640:	2000      	movs	r0, #0
    1642:	4c5e      	ldr	r4, [pc, #376]	; (17bc <data_handler+0x3f0>)
    1644:	47a0      	blx	r4
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,false);
    1646:	2300      	movs	r3, #0
    1648:	2201      	movs	r2, #1
    164a:	2103      	movs	r1, #3
    164c:	2000      	movs	r0, #0
    164e:	4c5b      	ldr	r4, [pc, #364]	; (17bc <data_handler+0x3f0>)
    1650:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,false);
    1652:	2300      	movs	r3, #0
    1654:	2201      	movs	r2, #1
    1656:	2104      	movs	r1, #4
    1658:	2000      	movs	r0, #0
    165a:	4c58      	ldr	r4, [pc, #352]	; (17bc <data_handler+0x3f0>)
    165c:	47a0      	blx	r4
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,false);
    165e:	2300      	movs	r3, #0
    1660:	2203      	movs	r2, #3
    1662:	2102      	movs	r1, #2
    1664:	2000      	movs	r0, #0
    1666:	4c55      	ldr	r4, [pc, #340]	; (17bc <data_handler+0x3f0>)
    1668:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,false);
    166a:	2300      	movs	r3, #0
    166c:	2203      	movs	r2, #3
    166e:	2101      	movs	r1, #1
    1670:	2000      	movs	r0, #0
    1672:	4c52      	ldr	r4, [pc, #328]	; (17bc <data_handler+0x3f0>)
    1674:	47a0      	blx	r4
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR,SUB_LEFT_PIN,false);
    1676:	2300      	movs	r3, #0
    1678:	2203      	movs	r2, #3
    167a:	2103      	movs	r1, #3
    167c:	2000      	movs	r0, #0
    167e:	4c4f      	ldr	r4, [pc, #316]	; (17bc <data_handler+0x3f0>)
    1680:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR,SUB_RIGHT_PIN,false);
    1682:	2300      	movs	r3, #0
    1684:	2204      	movs	r2, #4
    1686:	2103      	movs	r1, #3
    1688:	2000      	movs	r0, #0
    168a:	4c4c      	ldr	r4, [pc, #304]	; (17bc <data_handler+0x3f0>)
    168c:	47a0      	blx	r4
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,false);
    168e:	2300      	movs	r3, #0
    1690:	2204      	movs	r2, #4
    1692:	2101      	movs	r1, #1
    1694:	2000      	movs	r0, #0
    1696:	4c49      	ldr	r4, [pc, #292]	; (17bc <data_handler+0x3f0>)
    1698:	47a0      	blx	r4
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,false);
    169a:	2300      	movs	r3, #0
    169c:	2203      	movs	r2, #3
    169e:	2105      	movs	r1, #5
    16a0:	2000      	movs	r0, #0
    16a2:	4c46      	ldr	r4, [pc, #280]	; (17bc <data_handler+0x3f0>)
    16a4:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,false);
    16a6:	2300      	movs	r3, #0
    16a8:	2202      	movs	r2, #2
    16aa:	2105      	movs	r1, #5
    16ac:	2000      	movs	r0, #0
    16ae:	4c43      	ldr	r4, [pc, #268]	; (17bc <data_handler+0x3f0>)
    16b0:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,false);
    16b2:	2300      	movs	r3, #0
    16b4:	2204      	movs	r2, #4
    16b6:	2105      	movs	r1, #5
    16b8:	2000      	movs	r0, #0
    16ba:	4c40      	ldr	r4, [pc, #256]	; (17bc <data_handler+0x3f0>)
    16bc:	47a0      	blx	r4
		flash_all = false;
    16be:	4b40      	ldr	r3, [pc, #256]	; (17c0 <data_handler+0x3f4>)
    16c0:	2200      	movs	r2, #0
    16c2:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    16c4:	68fb      	ldr	r3, [r7, #12]
    16c6:	0018      	movs	r0, r3
    16c8:	4b30      	ldr	r3, [pc, #192]	; (178c <data_handler+0x3c0>)
    16ca:	4798      	blx	r3
		ble_uart_write(" - ");
    16cc:	4b3d      	ldr	r3, [pc, #244]	; (17c4 <data_handler+0x3f8>)
    16ce:	0018      	movs	r0, r3
    16d0:	4b2e      	ldr	r3, [pc, #184]	; (178c <data_handler+0x3c0>)
    16d2:	4798      	blx	r3
		ble_uart_write("ACK");
    16d4:	4b3c      	ldr	r3, [pc, #240]	; (17c8 <data_handler+0x3fc>)
    16d6:	0018      	movs	r0, r3
    16d8:	4b2c      	ldr	r3, [pc, #176]	; (178c <data_handler+0x3c0>)
    16da:	4798      	blx	r3
}
    16dc:	f000 fdf3 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,BLINK_ALL_ON,5) == 0)
    16e0:	493b      	ldr	r1, [pc, #236]	; (17d0 <data_handler+0x404>)
    16e2:	68fb      	ldr	r3, [r7, #12]
    16e4:	2205      	movs	r2, #5
    16e6:	0018      	movs	r0, r3
    16e8:	4b26      	ldr	r3, [pc, #152]	; (1784 <data_handler+0x3b8>)
    16ea:	4798      	blx	r3
    16ec:	1e03      	subs	r3, r0, #0
    16ee:	d10a      	bne.n	1706 <data_handler+0x33a>
		blink_left = true;
    16f0:	4b38      	ldr	r3, [pc, #224]	; (17d4 <data_handler+0x408>)
    16f2:	2201      	movs	r2, #1
    16f4:	701a      	strb	r2, [r3, #0]
		blink_right = true;
    16f6:	4b38      	ldr	r3, [pc, #224]	; (17d8 <data_handler+0x40c>)
    16f8:	2201      	movs	r2, #1
    16fa:	701a      	strb	r2, [r3, #0]
		blink_all = true;
    16fc:	4b37      	ldr	r3, [pc, #220]	; (17dc <data_handler+0x410>)
    16fe:	2201      	movs	r2, #1
    1700:	701a      	strb	r2, [r3, #0]
}
    1702:	f000 fde0 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,BLINK_ALL_OFF,5) == 0)
    1706:	4936      	ldr	r1, [pc, #216]	; (17e0 <data_handler+0x414>)
    1708:	68fb      	ldr	r3, [r7, #12]
    170a:	2205      	movs	r2, #5
    170c:	0018      	movs	r0, r3
    170e:	4b1d      	ldr	r3, [pc, #116]	; (1784 <data_handler+0x3b8>)
    1710:	4798      	blx	r3
    1712:	1e03      	subs	r3, r0, #0
    1714:	d10a      	bne.n	172c <data_handler+0x360>
		blink_left = false;
    1716:	4b2f      	ldr	r3, [pc, #188]	; (17d4 <data_handler+0x408>)
    1718:	2200      	movs	r2, #0
    171a:	701a      	strb	r2, [r3, #0]
		blink_right = false;
    171c:	4b2e      	ldr	r3, [pc, #184]	; (17d8 <data_handler+0x40c>)
    171e:	2200      	movs	r2, #0
    1720:	701a      	strb	r2, [r3, #0]
		blink_all = false;
    1722:	4b2e      	ldr	r3, [pc, #184]	; (17dc <data_handler+0x410>)
    1724:	2200      	movs	r2, #0
    1726:	701a      	strb	r2, [r3, #0]
}
    1728:	f000 fdcd 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,BLINK_LEFT_ON,5) == 0)
    172c:	492d      	ldr	r1, [pc, #180]	; (17e4 <data_handler+0x418>)
    172e:	68fb      	ldr	r3, [r7, #12]
    1730:	2205      	movs	r2, #5
    1732:	0018      	movs	r0, r3
    1734:	4b13      	ldr	r3, [pc, #76]	; (1784 <data_handler+0x3b8>)
    1736:	4798      	blx	r3
    1738:	1e03      	subs	r3, r0, #0
    173a:	d104      	bne.n	1746 <data_handler+0x37a>
		blink_left = true;
    173c:	4b25      	ldr	r3, [pc, #148]	; (17d4 <data_handler+0x408>)
    173e:	2201      	movs	r2, #1
    1740:	701a      	strb	r2, [r3, #0]
}
    1742:	f000 fdc0 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,BLINK_LEFT_OFF,5) == 0)
    1746:	4928      	ldr	r1, [pc, #160]	; (17e8 <data_handler+0x41c>)
    1748:	68fb      	ldr	r3, [r7, #12]
    174a:	2205      	movs	r2, #5
    174c:	0018      	movs	r0, r3
    174e:	4b0d      	ldr	r3, [pc, #52]	; (1784 <data_handler+0x3b8>)
    1750:	4798      	blx	r3
    1752:	1e03      	subs	r3, r0, #0
    1754:	d104      	bne.n	1760 <data_handler+0x394>
		blink_left = false;
    1756:	4b1f      	ldr	r3, [pc, #124]	; (17d4 <data_handler+0x408>)
    1758:	2200      	movs	r2, #0
    175a:	701a      	strb	r2, [r3, #0]
}
    175c:	f000 fdb3 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,BLINK_RIGHT_ON,5) == 0)
    1760:	4922      	ldr	r1, [pc, #136]	; (17ec <data_handler+0x420>)
    1762:	68fb      	ldr	r3, [r7, #12]
    1764:	2205      	movs	r2, #5
    1766:	0018      	movs	r0, r3
    1768:	4b06      	ldr	r3, [pc, #24]	; (1784 <data_handler+0x3b8>)
    176a:	4798      	blx	r3
    176c:	1e03      	subs	r3, r0, #0
    176e:	d13f      	bne.n	17f0 <data_handler+0x424>
		blink_right = true;
    1770:	4b19      	ldr	r3, [pc, #100]	; (17d8 <data_handler+0x40c>)
    1772:	2201      	movs	r2, #1
    1774:	701a      	strb	r2, [r3, #0]
}
    1776:	f000 fda6 	bl	22c6 <STACK_SIZE+0x2c6>
    177a:	46c0      	nop			; (mov r8, r8)
    177c:	00005b01 	.word	0x00005b01
    1780:	00006c2c 	.word	0x00006c2c
    1784:	00005b0f 	.word	0x00005b0f
    1788:	00006c38 	.word	0x00006c38
    178c:	00001299 	.word	0x00001299
    1790:	00006c40 	.word	0x00006c40
    1794:	00006c44 	.word	0x00006c44
    1798:	00006c48 	.word	0x00006c48
    179c:	00005a81 	.word	0x00005a81
    17a0:	2000000c 	.word	0x2000000c
    17a4:	00006c50 	.word	0x00006c50
    17a8:	00006c60 	.word	0x00006c60
    17ac:	200012d8 	.word	0x200012d8
    17b0:	00006c68 	.word	0x00006c68
    17b4:	00005a3d 	.word	0x00005a3d
    17b8:	00006c70 	.word	0x00006c70
    17bc:	00002f35 	.word	0x00002f35
    17c0:	20000e3e 	.word	0x20000e3e
    17c4:	00006c78 	.word	0x00006c78
    17c8:	00006c7c 	.word	0x00006c7c
    17cc:	00006c80 	.word	0x00006c80
    17d0:	00006c88 	.word	0x00006c88
    17d4:	20000a09 	.word	0x20000a09
    17d8:	20000e3d 	.word	0x20000e3d
    17dc:	20000e3a 	.word	0x20000e3a
    17e0:	00006c90 	.word	0x00006c90
    17e4:	00006c98 	.word	0x00006c98
    17e8:	00006ca0 	.word	0x00006ca0
    17ec:	00006ca8 	.word	0x00006ca8
	else if(strncmp(buffer,BLINK_RIGHT_OFF,5) == 0)
    17f0:	49c9      	ldr	r1, [pc, #804]	; (1b18 <data_handler+0x74c>)
    17f2:	68fb      	ldr	r3, [r7, #12]
    17f4:	2205      	movs	r2, #5
    17f6:	0018      	movs	r0, r3
    17f8:	4bc8      	ldr	r3, [pc, #800]	; (1b1c <data_handler+0x750>)
    17fa:	4798      	blx	r3
    17fc:	1e03      	subs	r3, r0, #0
    17fe:	d104      	bne.n	180a <data_handler+0x43e>
		blink_right = false;
    1800:	4bc7      	ldr	r3, [pc, #796]	; (1b20 <data_handler+0x754>)
    1802:	2200      	movs	r2, #0
    1804:	701a      	strb	r2, [r3, #0]
}
    1806:	f000 fd5e 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,HORN_0_ON,6) == 0)
    180a:	49c6      	ldr	r1, [pc, #792]	; (1b24 <data_handler+0x758>)
    180c:	68fb      	ldr	r3, [r7, #12]
    180e:	2206      	movs	r2, #6
    1810:	0018      	movs	r0, r3
    1812:	4bc2      	ldr	r3, [pc, #776]	; (1b1c <data_handler+0x750>)
    1814:	4798      	blx	r3
    1816:	1e03      	subs	r3, r0, #0
    1818:	d104      	bne.n	1824 <data_handler+0x458>
		horn0 = true;
    181a:	4bc3      	ldr	r3, [pc, #780]	; (1b28 <data_handler+0x75c>)
    181c:	2201      	movs	r2, #1
    181e:	701a      	strb	r2, [r3, #0]
}
    1820:	f000 fd51 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,HORN_0_OFF,6) == 0)
    1824:	49c1      	ldr	r1, [pc, #772]	; (1b2c <data_handler+0x760>)
    1826:	68fb      	ldr	r3, [r7, #12]
    1828:	2206      	movs	r2, #6
    182a:	0018      	movs	r0, r3
    182c:	4bbb      	ldr	r3, [pc, #748]	; (1b1c <data_handler+0x750>)
    182e:	4798      	blx	r3
    1830:	1e03      	subs	r3, r0, #0
    1832:	d104      	bne.n	183e <data_handler+0x472>
		horn0 = false;
    1834:	4bbc      	ldr	r3, [pc, #752]	; (1b28 <data_handler+0x75c>)
    1836:	2200      	movs	r2, #0
    1838:	701a      	strb	r2, [r3, #0]
}
    183a:	f000 fd44 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,HORN_1_ON,6) == 0)
    183e:	49bc      	ldr	r1, [pc, #752]	; (1b30 <data_handler+0x764>)
    1840:	68fb      	ldr	r3, [r7, #12]
    1842:	2206      	movs	r2, #6
    1844:	0018      	movs	r0, r3
    1846:	4bb5      	ldr	r3, [pc, #724]	; (1b1c <data_handler+0x750>)
    1848:	4798      	blx	r3
    184a:	1e03      	subs	r3, r0, #0
    184c:	d104      	bne.n	1858 <data_handler+0x48c>
		horn1 = true;
    184e:	4bb9      	ldr	r3, [pc, #740]	; (1b34 <data_handler+0x768>)
    1850:	2201      	movs	r2, #1
    1852:	701a      	strb	r2, [r3, #0]
}
    1854:	f000 fd37 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,HORN_1_OFF,6) == 0)
    1858:	49b7      	ldr	r1, [pc, #732]	; (1b38 <data_handler+0x76c>)
    185a:	68fb      	ldr	r3, [r7, #12]
    185c:	2206      	movs	r2, #6
    185e:	0018      	movs	r0, r3
    1860:	4bae      	ldr	r3, [pc, #696]	; (1b1c <data_handler+0x750>)
    1862:	4798      	blx	r3
    1864:	1e03      	subs	r3, r0, #0
    1866:	d104      	bne.n	1872 <data_handler+0x4a6>
		horn1 = false;
    1868:	4bb2      	ldr	r3, [pc, #712]	; (1b34 <data_handler+0x768>)
    186a:	2200      	movs	r2, #0
    186c:	701a      	strb	r2, [r3, #0]
}
    186e:	f000 fd2a 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,HORN_2_ON,6) == 0)
    1872:	49b2      	ldr	r1, [pc, #712]	; (1b3c <data_handler+0x770>)
    1874:	68fb      	ldr	r3, [r7, #12]
    1876:	2206      	movs	r2, #6
    1878:	0018      	movs	r0, r3
    187a:	4ba8      	ldr	r3, [pc, #672]	; (1b1c <data_handler+0x750>)
    187c:	4798      	blx	r3
    187e:	1e03      	subs	r3, r0, #0
    1880:	d104      	bne.n	188c <data_handler+0x4c0>
		horn2 = true;
    1882:	4baf      	ldr	r3, [pc, #700]	; (1b40 <data_handler+0x774>)
    1884:	2201      	movs	r2, #1
    1886:	701a      	strb	r2, [r3, #0]
}
    1888:	f000 fd1d 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,HORN_2_OFF,6) == 0)
    188c:	49ad      	ldr	r1, [pc, #692]	; (1b44 <data_handler+0x778>)
    188e:	68fb      	ldr	r3, [r7, #12]
    1890:	2206      	movs	r2, #6
    1892:	0018      	movs	r0, r3
    1894:	4ba1      	ldr	r3, [pc, #644]	; (1b1c <data_handler+0x750>)
    1896:	4798      	blx	r3
    1898:	1e03      	subs	r3, r0, #0
    189a:	d104      	bne.n	18a6 <data_handler+0x4da>
		horn2 = false;
    189c:	4ba8      	ldr	r3, [pc, #672]	; (1b40 <data_handler+0x774>)
    189e:	2200      	movs	r2, #0
    18a0:	701a      	strb	r2, [r3, #0]
}
    18a2:	f000 fd10 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,HORN_3_ON,6) == 0)
    18a6:	49a8      	ldr	r1, [pc, #672]	; (1b48 <data_handler+0x77c>)
    18a8:	68fb      	ldr	r3, [r7, #12]
    18aa:	2206      	movs	r2, #6
    18ac:	0018      	movs	r0, r3
    18ae:	4b9b      	ldr	r3, [pc, #620]	; (1b1c <data_handler+0x750>)
    18b0:	4798      	blx	r3
    18b2:	1e03      	subs	r3, r0, #0
    18b4:	d104      	bne.n	18c0 <data_handler+0x4f4>
		horn3 = true;
    18b6:	4ba5      	ldr	r3, [pc, #660]	; (1b4c <data_handler+0x780>)
    18b8:	2201      	movs	r2, #1
    18ba:	701a      	strb	r2, [r3, #0]
}
    18bc:	f000 fd03 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,HORN_3_OFF,6) == 0)
    18c0:	49a3      	ldr	r1, [pc, #652]	; (1b50 <data_handler+0x784>)
    18c2:	68fb      	ldr	r3, [r7, #12]
    18c4:	2206      	movs	r2, #6
    18c6:	0018      	movs	r0, r3
    18c8:	4b94      	ldr	r3, [pc, #592]	; (1b1c <data_handler+0x750>)
    18ca:	4798      	blx	r3
    18cc:	1e03      	subs	r3, r0, #0
    18ce:	d104      	bne.n	18da <data_handler+0x50e>
		horn3 = false;
    18d0:	4b9e      	ldr	r3, [pc, #632]	; (1b4c <data_handler+0x780>)
    18d2:	2200      	movs	r2, #0
    18d4:	701a      	strb	r2, [r3, #0]
}
    18d6:	f000 fcf6 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strstr(buffer,"SB") != NULL && strlen(buffer) >= 6)
    18da:	4a9e      	ldr	r2, [pc, #632]	; (1b54 <data_handler+0x788>)
    18dc:	68fb      	ldr	r3, [r7, #12]
    18de:	0011      	movs	r1, r2
    18e0:	0018      	movs	r0, r3
    18e2:	4b9d      	ldr	r3, [pc, #628]	; (1b58 <data_handler+0x78c>)
    18e4:	4798      	blx	r3
    18e6:	1e03      	subs	r3, r0, #0
    18e8:	d01e      	beq.n	1928 <data_handler+0x55c>
    18ea:	68fb      	ldr	r3, [r7, #12]
    18ec:	0018      	movs	r0, r3
    18ee:	4b9b      	ldr	r3, [pc, #620]	; (1b5c <data_handler+0x790>)
    18f0:	4798      	blx	r3
    18f2:	0003      	movs	r3, r0
    18f4:	2b05      	cmp	r3, #5
    18f6:	d917      	bls.n	1928 <data_handler+0x55c>
		if (buffer[5] == '1')
    18f8:	68fb      	ldr	r3, [r7, #12]
    18fa:	3305      	adds	r3, #5
    18fc:	781b      	ldrb	r3, [r3, #0]
    18fe:	2b31      	cmp	r3, #49	; 0x31
    1900:	d10e      	bne.n	1920 <data_handler+0x554>
			sscanf(buffer,"SB%d\n",&track);
    1902:	2350      	movs	r3, #80	; 0x50
    1904:	2208      	movs	r2, #8
    1906:	18ba      	adds	r2, r7, r2
    1908:	18d2      	adds	r2, r2, r3
    190a:	4995      	ldr	r1, [pc, #596]	; (1b60 <data_handler+0x794>)
    190c:	68fb      	ldr	r3, [r7, #12]
    190e:	0018      	movs	r0, r3
    1910:	4b94      	ldr	r3, [pc, #592]	; (1b64 <data_handler+0x798>)
    1912:	4798      	blx	r3
			sb_play_track_by_number(track);			
    1914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1916:	0018      	movs	r0, r3
    1918:	4b93      	ldr	r3, [pc, #588]	; (1b68 <data_handler+0x79c>)
    191a:	4798      	blx	r3
		if (buffer[5] == '1')
    191c:	f000 fcd3 	bl	22c6 <STACK_SIZE+0x2c6>
			sb_quit();
    1920:	4b92      	ldr	r3, [pc, #584]	; (1b6c <data_handler+0x7a0>)
    1922:	4798      	blx	r3
		if (buffer[5] == '1')
    1924:	f000 fccf 	bl	22c6 <STACK_SIZE+0x2c6>
	else if (strncmp(buffer,SOUND_RESET,sizeof(SOUND_RESET)-1) == 0)
    1928:	4991      	ldr	r1, [pc, #580]	; (1b70 <data_handler+0x7a4>)
    192a:	68fb      	ldr	r3, [r7, #12]
    192c:	2208      	movs	r2, #8
    192e:	0018      	movs	r0, r3
    1930:	4b7a      	ldr	r3, [pc, #488]	; (1b1c <data_handler+0x750>)
    1932:	4798      	blx	r3
    1934:	1e03      	subs	r3, r0, #0
    1936:	d107      	bne.n	1948 <data_handler+0x57c>
		ble_uart_write("SB: RESETTING");
    1938:	4b8e      	ldr	r3, [pc, #568]	; (1b74 <data_handler+0x7a8>)
    193a:	0018      	movs	r0, r3
    193c:	4b8e      	ldr	r3, [pc, #568]	; (1b78 <data_handler+0x7ac>)
    193e:	4798      	blx	r3
		sounds_reset();
    1940:	4b8e      	ldr	r3, [pc, #568]	; (1b7c <data_handler+0x7b0>)
    1942:	4798      	blx	r3
}
    1944:	f000 fcbf 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,PARTY_ON,5) == 0)
    1948:	498d      	ldr	r1, [pc, #564]	; (1b80 <data_handler+0x7b4>)
    194a:	68fb      	ldr	r3, [r7, #12]
    194c:	2205      	movs	r2, #5
    194e:	0018      	movs	r0, r3
    1950:	4b72      	ldr	r3, [pc, #456]	; (1b1c <data_handler+0x750>)
    1952:	4798      	blx	r3
    1954:	1e03      	subs	r3, r0, #0
    1956:	d104      	bne.n	1962 <data_handler+0x596>
		party = true;
    1958:	4b8a      	ldr	r3, [pc, #552]	; (1b84 <data_handler+0x7b8>)
    195a:	2201      	movs	r2, #1
    195c:	701a      	strb	r2, [r3, #0]
}
    195e:	f000 fcb2 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,PARTY_OFF,5) == 0)
    1962:	4989      	ldr	r1, [pc, #548]	; (1b88 <data_handler+0x7bc>)
    1964:	68fb      	ldr	r3, [r7, #12]
    1966:	2205      	movs	r2, #5
    1968:	0018      	movs	r0, r3
    196a:	4b6c      	ldr	r3, [pc, #432]	; (1b1c <data_handler+0x750>)
    196c:	4798      	blx	r3
    196e:	1e03      	subs	r3, r0, #0
    1970:	d106      	bne.n	1980 <data_handler+0x5b4>
		party = false;
    1972:	4b84      	ldr	r3, [pc, #528]	; (1b84 <data_handler+0x7b8>)
    1974:	2200      	movs	r2, #0
    1976:	701a      	strb	r2, [r3, #0]
		reset_all_lights();
    1978:	4b84      	ldr	r3, [pc, #528]	; (1b8c <data_handler+0x7c0>)
    197a:	4798      	blx	r3
}
    197c:	f000 fca3 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,WATER_ON,5) == 0)
    1980:	4983      	ldr	r1, [pc, #524]	; (1b90 <data_handler+0x7c4>)
    1982:	68fb      	ldr	r3, [r7, #12]
    1984:	2205      	movs	r2, #5
    1986:	0018      	movs	r0, r3
    1988:	4b64      	ldr	r3, [pc, #400]	; (1b1c <data_handler+0x750>)
    198a:	4798      	blx	r3
    198c:	1e03      	subs	r3, r0, #0
    198e:	d104      	bne.n	199a <data_handler+0x5ce>
		water = true;
    1990:	4b80      	ldr	r3, [pc, #512]	; (1b94 <data_handler+0x7c8>)
    1992:	2201      	movs	r2, #1
    1994:	701a      	strb	r2, [r3, #0]
}
    1996:	f000 fc96 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,WATER_ON,5) == 0)
    199a:	497d      	ldr	r1, [pc, #500]	; (1b90 <data_handler+0x7c4>)
    199c:	68fb      	ldr	r3, [r7, #12]
    199e:	2205      	movs	r2, #5
    19a0:	0018      	movs	r0, r3
    19a2:	4b5e      	ldr	r3, [pc, #376]	; (1b1c <data_handler+0x750>)
    19a4:	4798      	blx	r3
    19a6:	1e03      	subs	r3, r0, #0
    19a8:	d104      	bne.n	19b4 <data_handler+0x5e8>
		water = false;
    19aa:	4b7a      	ldr	r3, [pc, #488]	; (1b94 <data_handler+0x7c8>)
    19ac:	2200      	movs	r2, #0
    19ae:	701a      	strb	r2, [r3, #0]
}
    19b0:	f000 fc89 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,START_ON,5) == 0)
    19b4:	4978      	ldr	r1, [pc, #480]	; (1b98 <data_handler+0x7cc>)
    19b6:	68fb      	ldr	r3, [r7, #12]
    19b8:	2205      	movs	r2, #5
    19ba:	0018      	movs	r0, r3
    19bc:	4b57      	ldr	r3, [pc, #348]	; (1b1c <data_handler+0x750>)
    19be:	4798      	blx	r3
    19c0:	1e03      	subs	r3, r0, #0
    19c2:	d104      	bne.n	19ce <data_handler+0x602>
		start = true;
    19c4:	4b75      	ldr	r3, [pc, #468]	; (1b9c <data_handler+0x7d0>)
    19c6:	2201      	movs	r2, #1
    19c8:	701a      	strb	r2, [r3, #0]
}
    19ca:	f000 fc7c 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,START_OFF,5) == 0)
    19ce:	4974      	ldr	r1, [pc, #464]	; (1ba0 <data_handler+0x7d4>)
    19d0:	68fb      	ldr	r3, [r7, #12]
    19d2:	2205      	movs	r2, #5
    19d4:	0018      	movs	r0, r3
    19d6:	4b51      	ldr	r3, [pc, #324]	; (1b1c <data_handler+0x750>)
    19d8:	4798      	blx	r3
    19da:	1e03      	subs	r3, r0, #0
    19dc:	d104      	bne.n	19e8 <data_handler+0x61c>
		start = false;
    19de:	4b6f      	ldr	r3, [pc, #444]	; (1b9c <data_handler+0x7d0>)
    19e0:	2200      	movs	r2, #0
    19e2:	701a      	strb	r2, [r3, #0]
}
    19e4:	f000 fc6f 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,LED_BAR_ON,5) == 0)
    19e8:	496e      	ldr	r1, [pc, #440]	; (1ba4 <data_handler+0x7d8>)
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2205      	movs	r2, #5
    19ee:	0018      	movs	r0, r3
    19f0:	4b4a      	ldr	r3, [pc, #296]	; (1b1c <data_handler+0x750>)
    19f2:	4798      	blx	r3
    19f4:	1e03      	subs	r3, r0, #0
    19f6:	d122      	bne.n	1a3e <data_handler+0x672>
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,true);
    19f8:	2301      	movs	r3, #1
    19fa:	2202      	movs	r2, #2
    19fc:	2101      	movs	r1, #1
    19fe:	2000      	movs	r0, #0
    1a00:	4c69      	ldr	r4, [pc, #420]	; (1ba8 <data_handler+0x7dc>)
    1a02:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,true);
    1a04:	2301      	movs	r3, #1
    1a06:	2202      	movs	r2, #2
    1a08:	2102      	movs	r1, #2
    1a0a:	2000      	movs	r0, #0
    1a0c:	4c66      	ldr	r4, [pc, #408]	; (1ba8 <data_handler+0x7dc>)
    1a0e:	47a0      	blx	r4
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,true);
    1a10:	2301      	movs	r3, #1
    1a12:	2204      	movs	r2, #4
    1a14:	2101      	movs	r1, #1
    1a16:	2000      	movs	r0, #0
    1a18:	4c63      	ldr	r4, [pc, #396]	; (1ba8 <data_handler+0x7dc>)
    1a1a:	47a0      	blx	r4
		led_bar = true;
    1a1c:	4b63      	ldr	r3, [pc, #396]	; (1bac <data_handler+0x7e0>)
    1a1e:	2201      	movs	r2, #1
    1a20:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1a22:	68fb      	ldr	r3, [r7, #12]
    1a24:	0018      	movs	r0, r3
    1a26:	4b54      	ldr	r3, [pc, #336]	; (1b78 <data_handler+0x7ac>)
    1a28:	4798      	blx	r3
		ble_uart_write(" - ");
    1a2a:	4b61      	ldr	r3, [pc, #388]	; (1bb0 <data_handler+0x7e4>)
    1a2c:	0018      	movs	r0, r3
    1a2e:	4b52      	ldr	r3, [pc, #328]	; (1b78 <data_handler+0x7ac>)
    1a30:	4798      	blx	r3
		ble_uart_write("ACK");
    1a32:	4b60      	ldr	r3, [pc, #384]	; (1bb4 <data_handler+0x7e8>)
    1a34:	0018      	movs	r0, r3
    1a36:	4b50      	ldr	r3, [pc, #320]	; (1b78 <data_handler+0x7ac>)
    1a38:	4798      	blx	r3
}
    1a3a:	f000 fc44 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,LED_BAR_OFF,5) == 0)
    1a3e:	495e      	ldr	r1, [pc, #376]	; (1bb8 <data_handler+0x7ec>)
    1a40:	68fb      	ldr	r3, [r7, #12]
    1a42:	2205      	movs	r2, #5
    1a44:	0018      	movs	r0, r3
    1a46:	4b35      	ldr	r3, [pc, #212]	; (1b1c <data_handler+0x750>)
    1a48:	4798      	blx	r3
    1a4a:	1e03      	subs	r3, r0, #0
    1a4c:	d122      	bne.n	1a94 <data_handler+0x6c8>
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,false);
    1a4e:	2300      	movs	r3, #0
    1a50:	2202      	movs	r2, #2
    1a52:	2101      	movs	r1, #1
    1a54:	2000      	movs	r0, #0
    1a56:	4c54      	ldr	r4, [pc, #336]	; (1ba8 <data_handler+0x7dc>)
    1a58:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,false);
    1a5a:	2300      	movs	r3, #0
    1a5c:	2202      	movs	r2, #2
    1a5e:	2102      	movs	r1, #2
    1a60:	2000      	movs	r0, #0
    1a62:	4c51      	ldr	r4, [pc, #324]	; (1ba8 <data_handler+0x7dc>)
    1a64:	47a0      	blx	r4
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,false);
    1a66:	2300      	movs	r3, #0
    1a68:	2204      	movs	r2, #4
    1a6a:	2101      	movs	r1, #1
    1a6c:	2000      	movs	r0, #0
    1a6e:	4c4e      	ldr	r4, [pc, #312]	; (1ba8 <data_handler+0x7dc>)
    1a70:	47a0      	blx	r4
		led_bar = false;
    1a72:	4b4e      	ldr	r3, [pc, #312]	; (1bac <data_handler+0x7e0>)
    1a74:	2200      	movs	r2, #0
    1a76:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1a78:	68fb      	ldr	r3, [r7, #12]
    1a7a:	0018      	movs	r0, r3
    1a7c:	4b3e      	ldr	r3, [pc, #248]	; (1b78 <data_handler+0x7ac>)
    1a7e:	4798      	blx	r3
		ble_uart_write(" - ");
    1a80:	4b4b      	ldr	r3, [pc, #300]	; (1bb0 <data_handler+0x7e4>)
    1a82:	0018      	movs	r0, r3
    1a84:	4b3c      	ldr	r3, [pc, #240]	; (1b78 <data_handler+0x7ac>)
    1a86:	4798      	blx	r3
		ble_uart_write("ACK");
    1a88:	4b4a      	ldr	r3, [pc, #296]	; (1bb4 <data_handler+0x7e8>)
    1a8a:	0018      	movs	r0, r3
    1a8c:	4b3a      	ldr	r3, [pc, #232]	; (1b78 <data_handler+0x7ac>)
    1a8e:	4798      	blx	r3
}
    1a90:	f000 fc19 	bl	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,HDL_ON,5) == 0)
    1a94:	4949      	ldr	r1, [pc, #292]	; (1bbc <data_handler+0x7f0>)
    1a96:	68fb      	ldr	r3, [r7, #12]
    1a98:	2205      	movs	r2, #5
    1a9a:	0018      	movs	r0, r3
    1a9c:	4b1f      	ldr	r3, [pc, #124]	; (1b1c <data_handler+0x750>)
    1a9e:	4798      	blx	r3
    1aa0:	1e03      	subs	r3, r0, #0
    1aa2:	d000      	beq.n	1aa6 <data_handler+0x6da>
    1aa4:	e092      	b.n	1bcc <data_handler+0x800>
		system_interrupt_disable_global();
    1aa6:	4b46      	ldr	r3, [pc, #280]	; (1bc0 <data_handler+0x7f4>)
    1aa8:	4798      	blx	r3
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,true);
    1aaa:	2301      	movs	r3, #1
    1aac:	2201      	movs	r2, #1
    1aae:	2102      	movs	r1, #2
    1ab0:	2000      	movs	r0, #0
    1ab2:	4c3d      	ldr	r4, [pc, #244]	; (1ba8 <data_handler+0x7dc>)
    1ab4:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,true);
    1ab6:	2301      	movs	r3, #1
    1ab8:	2201      	movs	r2, #1
    1aba:	2101      	movs	r1, #1
    1abc:	2000      	movs	r0, #0
    1abe:	4c3a      	ldr	r4, [pc, #232]	; (1ba8 <data_handler+0x7dc>)
    1ac0:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    1ac2:	2301      	movs	r3, #1
    1ac4:	2200      	movs	r2, #0
    1ac6:	2101      	movs	r1, #1
    1ac8:	2000      	movs	r0, #0
    1aca:	4c37      	ldr	r4, [pc, #220]	; (1ba8 <data_handler+0x7dc>)
    1acc:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    1ace:	2301      	movs	r3, #1
    1ad0:	2200      	movs	r2, #0
    1ad2:	2102      	movs	r1, #2
    1ad4:	2000      	movs	r0, #0
    1ad6:	4c34      	ldr	r4, [pc, #208]	; (1ba8 <data_handler+0x7dc>)
    1ad8:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    1ada:	2301      	movs	r3, #1
    1adc:	2200      	movs	r2, #0
    1ade:	2103      	movs	r1, #3
    1ae0:	2000      	movs	r0, #0
    1ae2:	4c31      	ldr	r4, [pc, #196]	; (1ba8 <data_handler+0x7dc>)
    1ae4:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    1ae6:	2301      	movs	r3, #1
    1ae8:	2200      	movs	r2, #0
    1aea:	2104      	movs	r1, #4
    1aec:	2000      	movs	r0, #0
    1aee:	4c2e      	ldr	r4, [pc, #184]	; (1ba8 <data_handler+0x7dc>)
    1af0:	47a0      	blx	r4
		mcp23017_reset();
    1af2:	4b34      	ldr	r3, [pc, #208]	; (1bc4 <data_handler+0x7f8>)
    1af4:	4798      	blx	r3
		system_interrupt_enable_global();
    1af6:	4b34      	ldr	r3, [pc, #208]	; (1bc8 <data_handler+0x7fc>)
    1af8:	4798      	blx	r3
		ble_uart_write(buffer);
    1afa:	68fb      	ldr	r3, [r7, #12]
    1afc:	0018      	movs	r0, r3
    1afe:	4b1e      	ldr	r3, [pc, #120]	; (1b78 <data_handler+0x7ac>)
    1b00:	4798      	blx	r3
		ble_uart_write(" - ");
    1b02:	4b2b      	ldr	r3, [pc, #172]	; (1bb0 <data_handler+0x7e4>)
    1b04:	0018      	movs	r0, r3
    1b06:	4b1c      	ldr	r3, [pc, #112]	; (1b78 <data_handler+0x7ac>)
    1b08:	4798      	blx	r3
		ble_uart_write("ACK");
    1b0a:	4b2a      	ldr	r3, [pc, #168]	; (1bb4 <data_handler+0x7e8>)
    1b0c:	0018      	movs	r0, r3
    1b0e:	4b1a      	ldr	r3, [pc, #104]	; (1b78 <data_handler+0x7ac>)
    1b10:	4798      	blx	r3
}
    1b12:	f000 fbd8 	bl	22c6 <STACK_SIZE+0x2c6>
    1b16:	46c0      	nop			; (mov r8, r8)
    1b18:	00006cb0 	.word	0x00006cb0
    1b1c:	00005b0f 	.word	0x00005b0f
    1b20:	20000e3d 	.word	0x20000e3d
    1b24:	00006cb8 	.word	0x00006cb8
    1b28:	20000e40 	.word	0x20000e40
    1b2c:	00006cc0 	.word	0x00006cc0
    1b30:	00006cc8 	.word	0x00006cc8
    1b34:	20000a0a 	.word	0x20000a0a
    1b38:	00006cd0 	.word	0x00006cd0
    1b3c:	00006cd8 	.word	0x00006cd8
    1b40:	20000e25 	.word	0x20000e25
    1b44:	00006ce0 	.word	0x00006ce0
    1b48:	00006ce8 	.word	0x00006ce8
    1b4c:	20000e48 	.word	0x20000e48
    1b50:	00006cf0 	.word	0x00006cf0
    1b54:	00006cf8 	.word	0x00006cf8
    1b58:	00005b31 	.word	0x00005b31
    1b5c:	00005b01 	.word	0x00005b01
    1b60:	00006cfc 	.word	0x00006cfc
    1b64:	00005a81 	.word	0x00005a81
    1b68:	000040f9 	.word	0x000040f9
    1b6c:	0000412d 	.word	0x0000412d
    1b70:	00006d04 	.word	0x00006d04
    1b74:	00006d10 	.word	0x00006d10
    1b78:	00001299 	.word	0x00001299
    1b7c:	00003cc9 	.word	0x00003cc9
    1b80:	00006d20 	.word	0x00006d20
    1b84:	20000e39 	.word	0x20000e39
    1b88:	00006d28 	.word	0x00006d28
    1b8c:	00002cbd 	.word	0x00002cbd
    1b90:	00006d30 	.word	0x00006d30
    1b94:	200009f5 	.word	0x200009f5
    1b98:	00006d38 	.word	0x00006d38
    1b9c:	20000e46 	.word	0x20000e46
    1ba0:	00006d40 	.word	0x00006d40
    1ba4:	00006d48 	.word	0x00006d48
    1ba8:	00002f35 	.word	0x00002f35
    1bac:	20000e24 	.word	0x20000e24
    1bb0:	00006c78 	.word	0x00006c78
    1bb4:	00006c7c 	.word	0x00006c7c
    1bb8:	00006d50 	.word	0x00006d50
    1bbc:	00006d58 	.word	0x00006d58
    1bc0:	000013b1 	.word	0x000013b1
    1bc4:	00003525 	.word	0x00003525
    1bc8:	00001395 	.word	0x00001395
	else if(strncmp(buffer,HDL_OFF,5) == 0)
    1bcc:	49d9      	ldr	r1, [pc, #868]	; (1f34 <data_handler+0xb68>)
    1bce:	68fb      	ldr	r3, [r7, #12]
    1bd0:	2205      	movs	r2, #5
    1bd2:	0018      	movs	r0, r3
    1bd4:	4bd8      	ldr	r3, [pc, #864]	; (1f38 <data_handler+0xb6c>)
    1bd6:	4798      	blx	r3
    1bd8:	1e03      	subs	r3, r0, #0
    1bda:	d136      	bne.n	1c4a <data_handler+0x87e>
		system_interrupt_disable_global();
    1bdc:	4bd7      	ldr	r3, [pc, #860]	; (1f3c <data_handler+0xb70>)
    1bde:	4798      	blx	r3
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,false);
    1be0:	2300      	movs	r3, #0
    1be2:	2201      	movs	r2, #1
    1be4:	2102      	movs	r1, #2
    1be6:	2000      	movs	r0, #0
    1be8:	4cd5      	ldr	r4, [pc, #852]	; (1f40 <data_handler+0xb74>)
    1bea:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,false);
    1bec:	2300      	movs	r3, #0
    1bee:	2201      	movs	r2, #1
    1bf0:	2101      	movs	r1, #1
    1bf2:	2000      	movs	r0, #0
    1bf4:	4cd2      	ldr	r4, [pc, #840]	; (1f40 <data_handler+0xb74>)
    1bf6:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    1bf8:	2300      	movs	r3, #0
    1bfa:	2200      	movs	r2, #0
    1bfc:	2101      	movs	r1, #1
    1bfe:	2000      	movs	r0, #0
    1c00:	4ccf      	ldr	r4, [pc, #828]	; (1f40 <data_handler+0xb74>)
    1c02:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    1c04:	2300      	movs	r3, #0
    1c06:	2200      	movs	r2, #0
    1c08:	2102      	movs	r1, #2
    1c0a:	2000      	movs	r0, #0
    1c0c:	4ccc      	ldr	r4, [pc, #816]	; (1f40 <data_handler+0xb74>)
    1c0e:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    1c10:	2300      	movs	r3, #0
    1c12:	2200      	movs	r2, #0
    1c14:	2103      	movs	r1, #3
    1c16:	2000      	movs	r0, #0
    1c18:	4cc9      	ldr	r4, [pc, #804]	; (1f40 <data_handler+0xb74>)
    1c1a:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    1c1c:	2300      	movs	r3, #0
    1c1e:	2200      	movs	r2, #0
    1c20:	2104      	movs	r1, #4
    1c22:	2000      	movs	r0, #0
    1c24:	4cc6      	ldr	r4, [pc, #792]	; (1f40 <data_handler+0xb74>)
    1c26:	47a0      	blx	r4
		mcp23017_reset();
    1c28:	4bc6      	ldr	r3, [pc, #792]	; (1f44 <data_handler+0xb78>)
    1c2a:	4798      	blx	r3
		system_interrupt_enable_global();
    1c2c:	4bc6      	ldr	r3, [pc, #792]	; (1f48 <data_handler+0xb7c>)
    1c2e:	4798      	blx	r3
		ble_uart_write(buffer);
    1c30:	68fb      	ldr	r3, [r7, #12]
    1c32:	0018      	movs	r0, r3
    1c34:	4bc5      	ldr	r3, [pc, #788]	; (1f4c <data_handler+0xb80>)
    1c36:	4798      	blx	r3
		ble_uart_write(" - ");
    1c38:	4bc5      	ldr	r3, [pc, #788]	; (1f50 <data_handler+0xb84>)
    1c3a:	0018      	movs	r0, r3
    1c3c:	4bc3      	ldr	r3, [pc, #780]	; (1f4c <data_handler+0xb80>)
    1c3e:	4798      	blx	r3
		ble_uart_write("ACK");
    1c40:	4bc4      	ldr	r3, [pc, #784]	; (1f54 <data_handler+0xb88>)
    1c42:	0018      	movs	r0, r3
    1c44:	4bc1      	ldr	r3, [pc, #772]	; (1f4c <data_handler+0xb80>)
    1c46:	4798      	blx	r3
}
    1c48:	e33d      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,BRIAN_ON,7) == 0)
    1c4a:	49c3      	ldr	r1, [pc, #780]	; (1f58 <data_handler+0xb8c>)
    1c4c:	68fb      	ldr	r3, [r7, #12]
    1c4e:	2207      	movs	r2, #7
    1c50:	0018      	movs	r0, r3
    1c52:	4bb9      	ldr	r3, [pc, #740]	; (1f38 <data_handler+0xb6c>)
    1c54:	4798      	blx	r3
    1c56:	1e03      	subs	r3, r0, #0
    1c58:	d136      	bne.n	1cc8 <data_handler+0x8fc>
		system_interrupt_disable_global();
    1c5a:	4bb8      	ldr	r3, [pc, #736]	; (1f3c <data_handler+0xb70>)
    1c5c:	4798      	blx	r3
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,true);
    1c5e:	2301      	movs	r3, #1
    1c60:	2203      	movs	r2, #3
    1c62:	2102      	movs	r1, #2
    1c64:	2000      	movs	r0, #0
    1c66:	4cb6      	ldr	r4, [pc, #728]	; (1f40 <data_handler+0xb74>)
    1c68:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,true);
    1c6a:	2301      	movs	r3, #1
    1c6c:	2203      	movs	r2, #3
    1c6e:	2101      	movs	r1, #1
    1c70:	2000      	movs	r0, #0
    1c72:	4cb3      	ldr	r4, [pc, #716]	; (1f40 <data_handler+0xb74>)
    1c74:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    1c76:	2301      	movs	r3, #1
    1c78:	2200      	movs	r2, #0
    1c7a:	2101      	movs	r1, #1
    1c7c:	2000      	movs	r0, #0
    1c7e:	4cb0      	ldr	r4, [pc, #704]	; (1f40 <data_handler+0xb74>)
    1c80:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    1c82:	2301      	movs	r3, #1
    1c84:	2200      	movs	r2, #0
    1c86:	2102      	movs	r1, #2
    1c88:	2000      	movs	r0, #0
    1c8a:	4cad      	ldr	r4, [pc, #692]	; (1f40 <data_handler+0xb74>)
    1c8c:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    1c8e:	2301      	movs	r3, #1
    1c90:	2200      	movs	r2, #0
    1c92:	2103      	movs	r1, #3
    1c94:	2000      	movs	r0, #0
    1c96:	4caa      	ldr	r4, [pc, #680]	; (1f40 <data_handler+0xb74>)
    1c98:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    1c9a:	2301      	movs	r3, #1
    1c9c:	2200      	movs	r2, #0
    1c9e:	2104      	movs	r1, #4
    1ca0:	2000      	movs	r0, #0
    1ca2:	4ca7      	ldr	r4, [pc, #668]	; (1f40 <data_handler+0xb74>)
    1ca4:	47a0      	blx	r4
		mcp23017_reset();
    1ca6:	4ba7      	ldr	r3, [pc, #668]	; (1f44 <data_handler+0xb78>)
    1ca8:	4798      	blx	r3
		system_interrupt_enable_global();
    1caa:	4ba7      	ldr	r3, [pc, #668]	; (1f48 <data_handler+0xb7c>)
    1cac:	4798      	blx	r3
		ble_uart_write(buffer);
    1cae:	68fb      	ldr	r3, [r7, #12]
    1cb0:	0018      	movs	r0, r3
    1cb2:	4ba6      	ldr	r3, [pc, #664]	; (1f4c <data_handler+0xb80>)
    1cb4:	4798      	blx	r3
		ble_uart_write(" - ");
    1cb6:	4ba6      	ldr	r3, [pc, #664]	; (1f50 <data_handler+0xb84>)
    1cb8:	0018      	movs	r0, r3
    1cba:	4ba4      	ldr	r3, [pc, #656]	; (1f4c <data_handler+0xb80>)
    1cbc:	4798      	blx	r3
		ble_uart_write("ACK");
    1cbe:	4ba5      	ldr	r3, [pc, #660]	; (1f54 <data_handler+0xb88>)
    1cc0:	0018      	movs	r0, r3
    1cc2:	4ba2      	ldr	r3, [pc, #648]	; (1f4c <data_handler+0xb80>)
    1cc4:	4798      	blx	r3
}
    1cc6:	e2fe      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,BRIAN_OFF,7) == 0)
    1cc8:	49a4      	ldr	r1, [pc, #656]	; (1f5c <data_handler+0xb90>)
    1cca:	68fb      	ldr	r3, [r7, #12]
    1ccc:	2207      	movs	r2, #7
    1cce:	0018      	movs	r0, r3
    1cd0:	4b99      	ldr	r3, [pc, #612]	; (1f38 <data_handler+0xb6c>)
    1cd2:	4798      	blx	r3
    1cd4:	1e03      	subs	r3, r0, #0
    1cd6:	d136      	bne.n	1d46 <data_handler+0x97a>
		system_interrupt_disable_global();
    1cd8:	4b98      	ldr	r3, [pc, #608]	; (1f3c <data_handler+0xb70>)
    1cda:	4798      	blx	r3
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,false);
    1cdc:	2300      	movs	r3, #0
    1cde:	2203      	movs	r2, #3
    1ce0:	2102      	movs	r1, #2
    1ce2:	2000      	movs	r0, #0
    1ce4:	4c96      	ldr	r4, [pc, #600]	; (1f40 <data_handler+0xb74>)
    1ce6:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,false);
    1ce8:	2300      	movs	r3, #0
    1cea:	2203      	movs	r2, #3
    1cec:	2101      	movs	r1, #1
    1cee:	2000      	movs	r0, #0
    1cf0:	4c93      	ldr	r4, [pc, #588]	; (1f40 <data_handler+0xb74>)
    1cf2:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    1cf4:	2300      	movs	r3, #0
    1cf6:	2200      	movs	r2, #0
    1cf8:	2101      	movs	r1, #1
    1cfa:	2000      	movs	r0, #0
    1cfc:	4c90      	ldr	r4, [pc, #576]	; (1f40 <data_handler+0xb74>)
    1cfe:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    1d00:	2300      	movs	r3, #0
    1d02:	2200      	movs	r2, #0
    1d04:	2102      	movs	r1, #2
    1d06:	2000      	movs	r0, #0
    1d08:	4c8d      	ldr	r4, [pc, #564]	; (1f40 <data_handler+0xb74>)
    1d0a:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    1d0c:	2300      	movs	r3, #0
    1d0e:	2200      	movs	r2, #0
    1d10:	2103      	movs	r1, #3
    1d12:	2000      	movs	r0, #0
    1d14:	4c8a      	ldr	r4, [pc, #552]	; (1f40 <data_handler+0xb74>)
    1d16:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    1d18:	2300      	movs	r3, #0
    1d1a:	2200      	movs	r2, #0
    1d1c:	2104      	movs	r1, #4
    1d1e:	2000      	movs	r0, #0
    1d20:	4c87      	ldr	r4, [pc, #540]	; (1f40 <data_handler+0xb74>)
    1d22:	47a0      	blx	r4
		mcp23017_reset();
    1d24:	4b87      	ldr	r3, [pc, #540]	; (1f44 <data_handler+0xb78>)
    1d26:	4798      	blx	r3
		system_interrupt_enable_global();
    1d28:	4b87      	ldr	r3, [pc, #540]	; (1f48 <data_handler+0xb7c>)
    1d2a:	4798      	blx	r3
		ble_uart_write(buffer);
    1d2c:	68fb      	ldr	r3, [r7, #12]
    1d2e:	0018      	movs	r0, r3
    1d30:	4b86      	ldr	r3, [pc, #536]	; (1f4c <data_handler+0xb80>)
    1d32:	4798      	blx	r3
		ble_uart_write(" - ");
    1d34:	4b86      	ldr	r3, [pc, #536]	; (1f50 <data_handler+0xb84>)
    1d36:	0018      	movs	r0, r3
    1d38:	4b84      	ldr	r3, [pc, #528]	; (1f4c <data_handler+0xb80>)
    1d3a:	4798      	blx	r3
		ble_uart_write("ACK");
    1d3c:	4b85      	ldr	r3, [pc, #532]	; (1f54 <data_handler+0xb88>)
    1d3e:	0018      	movs	r0, r3
    1d40:	4b82      	ldr	r3, [pc, #520]	; (1f4c <data_handler+0xb80>)
    1d42:	4798      	blx	r3
}
    1d44:	e2bf      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,FLASHY1_ON,7) == 0)
    1d46:	4986      	ldr	r1, [pc, #536]	; (1f60 <data_handler+0xb94>)
    1d48:	68fb      	ldr	r3, [r7, #12]
    1d4a:	2207      	movs	r2, #7
    1d4c:	0018      	movs	r0, r3
    1d4e:	4b7a      	ldr	r3, [pc, #488]	; (1f38 <data_handler+0xb6c>)
    1d50:	4798      	blx	r3
    1d52:	1e03      	subs	r3, r0, #0
    1d54:	d10f      	bne.n	1d76 <data_handler+0x9aa>
		flashy1 = true;
    1d56:	4b83      	ldr	r3, [pc, #524]	; (1f64 <data_handler+0xb98>)
    1d58:	2201      	movs	r2, #1
    1d5a:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1d5c:	68fb      	ldr	r3, [r7, #12]
    1d5e:	0018      	movs	r0, r3
    1d60:	4b7a      	ldr	r3, [pc, #488]	; (1f4c <data_handler+0xb80>)
    1d62:	4798      	blx	r3
		ble_uart_write(" - ");
    1d64:	4b7a      	ldr	r3, [pc, #488]	; (1f50 <data_handler+0xb84>)
    1d66:	0018      	movs	r0, r3
    1d68:	4b78      	ldr	r3, [pc, #480]	; (1f4c <data_handler+0xb80>)
    1d6a:	4798      	blx	r3
		ble_uart_write("ACK");
    1d6c:	4b79      	ldr	r3, [pc, #484]	; (1f54 <data_handler+0xb88>)
    1d6e:	0018      	movs	r0, r3
    1d70:	4b76      	ldr	r3, [pc, #472]	; (1f4c <data_handler+0xb80>)
    1d72:	4798      	blx	r3
}
    1d74:	e2a7      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,FLASHY1_OFF,7) == 0)
    1d76:	497c      	ldr	r1, [pc, #496]	; (1f68 <data_handler+0xb9c>)
    1d78:	68fb      	ldr	r3, [r7, #12]
    1d7a:	2207      	movs	r2, #7
    1d7c:	0018      	movs	r0, r3
    1d7e:	4b6e      	ldr	r3, [pc, #440]	; (1f38 <data_handler+0xb6c>)
    1d80:	4798      	blx	r3
    1d82:	1e03      	subs	r3, r0, #0
    1d84:	d111      	bne.n	1daa <data_handler+0x9de>
		flashy1 = false;
    1d86:	4b77      	ldr	r3, [pc, #476]	; (1f64 <data_handler+0xb98>)
    1d88:	2200      	movs	r2, #0
    1d8a:	701a      	strb	r2, [r3, #0]
		reset_all_lights();
    1d8c:	4b77      	ldr	r3, [pc, #476]	; (1f6c <data_handler+0xba0>)
    1d8e:	4798      	blx	r3
		ble_uart_write(buffer);
    1d90:	68fb      	ldr	r3, [r7, #12]
    1d92:	0018      	movs	r0, r3
    1d94:	4b6d      	ldr	r3, [pc, #436]	; (1f4c <data_handler+0xb80>)
    1d96:	4798      	blx	r3
		ble_uart_write(" - ");
    1d98:	4b6d      	ldr	r3, [pc, #436]	; (1f50 <data_handler+0xb84>)
    1d9a:	0018      	movs	r0, r3
    1d9c:	4b6b      	ldr	r3, [pc, #428]	; (1f4c <data_handler+0xb80>)
    1d9e:	4798      	blx	r3
		ble_uart_write("ACK");
    1da0:	4b6c      	ldr	r3, [pc, #432]	; (1f54 <data_handler+0xb88>)
    1da2:	0018      	movs	r0, r3
    1da4:	4b69      	ldr	r3, [pc, #420]	; (1f4c <data_handler+0xb80>)
    1da6:	4798      	blx	r3
}
    1da8:	e28d      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,FLASHY2_ON,7) == 0)
    1daa:	4971      	ldr	r1, [pc, #452]	; (1f70 <data_handler+0xba4>)
    1dac:	68fb      	ldr	r3, [r7, #12]
    1dae:	2207      	movs	r2, #7
    1db0:	0018      	movs	r0, r3
    1db2:	4b61      	ldr	r3, [pc, #388]	; (1f38 <data_handler+0xb6c>)
    1db4:	4798      	blx	r3
    1db6:	1e03      	subs	r3, r0, #0
    1db8:	d10f      	bne.n	1dda <data_handler+0xa0e>
		flashy2 = true;
    1dba:	4b6e      	ldr	r3, [pc, #440]	; (1f74 <data_handler+0xba8>)
    1dbc:	2201      	movs	r2, #1
    1dbe:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1dc0:	68fb      	ldr	r3, [r7, #12]
    1dc2:	0018      	movs	r0, r3
    1dc4:	4b61      	ldr	r3, [pc, #388]	; (1f4c <data_handler+0xb80>)
    1dc6:	4798      	blx	r3
		ble_uart_write(" - ");
    1dc8:	4b61      	ldr	r3, [pc, #388]	; (1f50 <data_handler+0xb84>)
    1dca:	0018      	movs	r0, r3
    1dcc:	4b5f      	ldr	r3, [pc, #380]	; (1f4c <data_handler+0xb80>)
    1dce:	4798      	blx	r3
		ble_uart_write("ACK");
    1dd0:	4b60      	ldr	r3, [pc, #384]	; (1f54 <data_handler+0xb88>)
    1dd2:	0018      	movs	r0, r3
    1dd4:	4b5d      	ldr	r3, [pc, #372]	; (1f4c <data_handler+0xb80>)
    1dd6:	4798      	blx	r3
}
    1dd8:	e275      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,FLASHY2_OFF,7) == 0)
    1dda:	4967      	ldr	r1, [pc, #412]	; (1f78 <data_handler+0xbac>)
    1ddc:	68fb      	ldr	r3, [r7, #12]
    1dde:	2207      	movs	r2, #7
    1de0:	0018      	movs	r0, r3
    1de2:	4b55      	ldr	r3, [pc, #340]	; (1f38 <data_handler+0xb6c>)
    1de4:	4798      	blx	r3
    1de6:	1e03      	subs	r3, r0, #0
    1de8:	d111      	bne.n	1e0e <data_handler+0xa42>
		reset_all_lights();
    1dea:	4b60      	ldr	r3, [pc, #384]	; (1f6c <data_handler+0xba0>)
    1dec:	4798      	blx	r3
		flashy2 = false;
    1dee:	4b61      	ldr	r3, [pc, #388]	; (1f74 <data_handler+0xba8>)
    1df0:	2200      	movs	r2, #0
    1df2:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1df4:	68fb      	ldr	r3, [r7, #12]
    1df6:	0018      	movs	r0, r3
    1df8:	4b54      	ldr	r3, [pc, #336]	; (1f4c <data_handler+0xb80>)
    1dfa:	4798      	blx	r3
		ble_uart_write(" - ");
    1dfc:	4b54      	ldr	r3, [pc, #336]	; (1f50 <data_handler+0xb84>)
    1dfe:	0018      	movs	r0, r3
    1e00:	4b52      	ldr	r3, [pc, #328]	; (1f4c <data_handler+0xb80>)
    1e02:	4798      	blx	r3
		ble_uart_write("ACK");
    1e04:	4b53      	ldr	r3, [pc, #332]	; (1f54 <data_handler+0xb88>)
    1e06:	0018      	movs	r0, r3
    1e08:	4b50      	ldr	r3, [pc, #320]	; (1f4c <data_handler+0xb80>)
    1e0a:	4798      	blx	r3
}
    1e0c:	e25b      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,FLASHY3_ON,7) == 0)
    1e0e:	495b      	ldr	r1, [pc, #364]	; (1f7c <data_handler+0xbb0>)
    1e10:	68fb      	ldr	r3, [r7, #12]
    1e12:	2207      	movs	r2, #7
    1e14:	0018      	movs	r0, r3
    1e16:	4b48      	ldr	r3, [pc, #288]	; (1f38 <data_handler+0xb6c>)
    1e18:	4798      	blx	r3
    1e1a:	1e03      	subs	r3, r0, #0
    1e1c:	d10f      	bne.n	1e3e <data_handler+0xa72>
		flashy3 = true;
    1e1e:	4b58      	ldr	r3, [pc, #352]	; (1f80 <data_handler+0xbb4>)
    1e20:	2201      	movs	r2, #1
    1e22:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1e24:	68fb      	ldr	r3, [r7, #12]
    1e26:	0018      	movs	r0, r3
    1e28:	4b48      	ldr	r3, [pc, #288]	; (1f4c <data_handler+0xb80>)
    1e2a:	4798      	blx	r3
		ble_uart_write(" - ");
    1e2c:	4b48      	ldr	r3, [pc, #288]	; (1f50 <data_handler+0xb84>)
    1e2e:	0018      	movs	r0, r3
    1e30:	4b46      	ldr	r3, [pc, #280]	; (1f4c <data_handler+0xb80>)
    1e32:	4798      	blx	r3
		ble_uart_write("ACK");
    1e34:	4b47      	ldr	r3, [pc, #284]	; (1f54 <data_handler+0xb88>)
    1e36:	0018      	movs	r0, r3
    1e38:	4b44      	ldr	r3, [pc, #272]	; (1f4c <data_handler+0xb80>)
    1e3a:	4798      	blx	r3
}
    1e3c:	e243      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,FLASHY3_OFF,7) == 0)
    1e3e:	4951      	ldr	r1, [pc, #324]	; (1f84 <data_handler+0xbb8>)
    1e40:	68fb      	ldr	r3, [r7, #12]
    1e42:	2207      	movs	r2, #7
    1e44:	0018      	movs	r0, r3
    1e46:	4b3c      	ldr	r3, [pc, #240]	; (1f38 <data_handler+0xb6c>)
    1e48:	4798      	blx	r3
    1e4a:	1e03      	subs	r3, r0, #0
    1e4c:	d111      	bne.n	1e72 <data_handler+0xaa6>
		reset_all_lights();
    1e4e:	4b47      	ldr	r3, [pc, #284]	; (1f6c <data_handler+0xba0>)
    1e50:	4798      	blx	r3
		flashy3 = false;
    1e52:	4b4b      	ldr	r3, [pc, #300]	; (1f80 <data_handler+0xbb4>)
    1e54:	2200      	movs	r2, #0
    1e56:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1e58:	68fb      	ldr	r3, [r7, #12]
    1e5a:	0018      	movs	r0, r3
    1e5c:	4b3b      	ldr	r3, [pc, #236]	; (1f4c <data_handler+0xb80>)
    1e5e:	4798      	blx	r3
		ble_uart_write(" - ");
    1e60:	4b3b      	ldr	r3, [pc, #236]	; (1f50 <data_handler+0xb84>)
    1e62:	0018      	movs	r0, r3
    1e64:	4b39      	ldr	r3, [pc, #228]	; (1f4c <data_handler+0xb80>)
    1e66:	4798      	blx	r3
		ble_uart_write("ACK");
    1e68:	4b3a      	ldr	r3, [pc, #232]	; (1f54 <data_handler+0xb88>)
    1e6a:	0018      	movs	r0, r3
    1e6c:	4b37      	ldr	r3, [pc, #220]	; (1f4c <data_handler+0xb80>)
    1e6e:	4798      	blx	r3
}
    1e70:	e229      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,FLASHYFADE_ON,8) == 0)
    1e72:	4945      	ldr	r1, [pc, #276]	; (1f88 <data_handler+0xbbc>)
    1e74:	68fb      	ldr	r3, [r7, #12]
    1e76:	2208      	movs	r2, #8
    1e78:	0018      	movs	r0, r3
    1e7a:	4b2f      	ldr	r3, [pc, #188]	; (1f38 <data_handler+0xb6c>)
    1e7c:	4798      	blx	r3
    1e7e:	1e03      	subs	r3, r0, #0
    1e80:	d10f      	bne.n	1ea2 <data_handler+0xad6>
		flashyfade = true;
    1e82:	4b42      	ldr	r3, [pc, #264]	; (1f8c <data_handler+0xbc0>)
    1e84:	2201      	movs	r2, #1
    1e86:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1e88:	68fb      	ldr	r3, [r7, #12]
    1e8a:	0018      	movs	r0, r3
    1e8c:	4b2f      	ldr	r3, [pc, #188]	; (1f4c <data_handler+0xb80>)
    1e8e:	4798      	blx	r3
		ble_uart_write(" - ");
    1e90:	4b2f      	ldr	r3, [pc, #188]	; (1f50 <data_handler+0xb84>)
    1e92:	0018      	movs	r0, r3
    1e94:	4b2d      	ldr	r3, [pc, #180]	; (1f4c <data_handler+0xb80>)
    1e96:	4798      	blx	r3
		ble_uart_write("ACK");
    1e98:	4b2e      	ldr	r3, [pc, #184]	; (1f54 <data_handler+0xb88>)
    1e9a:	0018      	movs	r0, r3
    1e9c:	4b2b      	ldr	r3, [pc, #172]	; (1f4c <data_handler+0xb80>)
    1e9e:	4798      	blx	r3
}
    1ea0:	e211      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,FLASHYFADE_OFF,8) == 0)
    1ea2:	493b      	ldr	r1, [pc, #236]	; (1f90 <data_handler+0xbc4>)
    1ea4:	68fb      	ldr	r3, [r7, #12]
    1ea6:	2208      	movs	r2, #8
    1ea8:	0018      	movs	r0, r3
    1eaa:	4b23      	ldr	r3, [pc, #140]	; (1f38 <data_handler+0xb6c>)
    1eac:	4798      	blx	r3
    1eae:	1e03      	subs	r3, r0, #0
    1eb0:	d111      	bne.n	1ed6 <data_handler+0xb0a>
		reset_all_lights();
    1eb2:	4b2e      	ldr	r3, [pc, #184]	; (1f6c <data_handler+0xba0>)
    1eb4:	4798      	blx	r3
		flashyfade = false;
    1eb6:	4b35      	ldr	r3, [pc, #212]	; (1f8c <data_handler+0xbc0>)
    1eb8:	2200      	movs	r2, #0
    1eba:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1ebc:	68fb      	ldr	r3, [r7, #12]
    1ebe:	0018      	movs	r0, r3
    1ec0:	4b22      	ldr	r3, [pc, #136]	; (1f4c <data_handler+0xb80>)
    1ec2:	4798      	blx	r3
		ble_uart_write(" - ");
    1ec4:	4b22      	ldr	r3, [pc, #136]	; (1f50 <data_handler+0xb84>)
    1ec6:	0018      	movs	r0, r3
    1ec8:	4b20      	ldr	r3, [pc, #128]	; (1f4c <data_handler+0xb80>)
    1eca:	4798      	blx	r3
		ble_uart_write("ACK");
    1ecc:	4b21      	ldr	r3, [pc, #132]	; (1f54 <data_handler+0xb88>)
    1ece:	0018      	movs	r0, r3
    1ed0:	4b1e      	ldr	r3, [pc, #120]	; (1f4c <data_handler+0xb80>)
    1ed2:	4798      	blx	r3
}
    1ed4:	e1f7      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if (strncmp(buffer,MASTER_RESET,10) == 0)
    1ed6:	492f      	ldr	r1, [pc, #188]	; (1f94 <data_handler+0xbc8>)
    1ed8:	68fb      	ldr	r3, [r7, #12]
    1eda:	220a      	movs	r2, #10
    1edc:	0018      	movs	r0, r3
    1ede:	4b16      	ldr	r3, [pc, #88]	; (1f38 <data_handler+0xb6c>)
    1ee0:	4798      	blx	r3
    1ee2:	1e03      	subs	r3, r0, #0
    1ee4:	d168      	bne.n	1fb8 <data_handler+0xbec>
		ble_uart_write("RESET ACK\n");
    1ee6:	4b2c      	ldr	r3, [pc, #176]	; (1f98 <data_handler+0xbcc>)
    1ee8:	0018      	movs	r0, r3
    1eea:	4b18      	ldr	r3, [pc, #96]	; (1f4c <data_handler+0xb80>)
    1eec:	4798      	blx	r3
		delay_ms(250);
    1eee:	2000      	movs	r0, #0
    1ef0:	4b2a      	ldr	r3, [pc, #168]	; (1f9c <data_handler+0xbd0>)
    1ef2:	4798      	blx	r3
    1ef4:	0003      	movs	r3, r0
    1ef6:	603b      	str	r3, [r7, #0]
    1ef8:	2300      	movs	r3, #0
    1efa:	607b      	str	r3, [r7, #4]
    1efc:	4c28      	ldr	r4, [pc, #160]	; (1fa0 <data_handler+0xbd4>)
    1efe:	22fa      	movs	r2, #250	; 0xfa
    1f00:	2300      	movs	r3, #0
    1f02:	6838      	ldr	r0, [r7, #0]
    1f04:	6879      	ldr	r1, [r7, #4]
    1f06:	47a0      	blx	r4
    1f08:	0003      	movs	r3, r0
    1f0a:	000c      	movs	r4, r1
    1f0c:	0019      	movs	r1, r3
    1f0e:	0022      	movs	r2, r4
    1f10:	4b24      	ldr	r3, [pc, #144]	; (1fa4 <data_handler+0xbd8>)
    1f12:	2400      	movs	r4, #0
    1f14:	18c9      	adds	r1, r1, r3
    1f16:	4162      	adcs	r2, r4
    1f18:	0008      	movs	r0, r1
    1f1a:	0011      	movs	r1, r2
    1f1c:	4c22      	ldr	r4, [pc, #136]	; (1fa8 <data_handler+0xbdc>)
    1f1e:	4a23      	ldr	r2, [pc, #140]	; (1fac <data_handler+0xbe0>)
    1f20:	2300      	movs	r3, #0
    1f22:	47a0      	blx	r4
    1f24:	0003      	movs	r3, r0
    1f26:	000c      	movs	r4, r1
    1f28:	0018      	movs	r0, r3
    1f2a:	4b21      	ldr	r3, [pc, #132]	; (1fb0 <data_handler+0xbe4>)
    1f2c:	4798      	blx	r3
		wdt_init();
    1f2e:	4b21      	ldr	r3, [pc, #132]	; (1fb4 <data_handler+0xbe8>)
    1f30:	4798      	blx	r3
		while (1)
    1f32:	e7fe      	b.n	1f32 <data_handler+0xb66>
    1f34:	00006d60 	.word	0x00006d60
    1f38:	00005b0f 	.word	0x00005b0f
    1f3c:	000013b1 	.word	0x000013b1
    1f40:	00002f35 	.word	0x00002f35
    1f44:	00003525 	.word	0x00003525
    1f48:	00001395 	.word	0x00001395
    1f4c:	00001299 	.word	0x00001299
    1f50:	00006c78 	.word	0x00006c78
    1f54:	00006c7c 	.word	0x00006c7c
    1f58:	00006d68 	.word	0x00006d68
    1f5c:	00006d70 	.word	0x00006d70
    1f60:	00006d78 	.word	0x00006d78
    1f64:	20000a10 	.word	0x20000a10
    1f68:	00006d80 	.word	0x00006d80
    1f6c:	00002cbd 	.word	0x00002cbd
    1f70:	00006d88 	.word	0x00006d88
    1f74:	20000e27 	.word	0x20000e27
    1f78:	00006d90 	.word	0x00006d90
    1f7c:	00006d98 	.word	0x00006d98
    1f80:	20000e45 	.word	0x20000e45
    1f84:	00006da0 	.word	0x00006da0
    1f88:	00006da8 	.word	0x00006da8
    1f8c:	20000e43 	.word	0x20000e43
    1f90:	00006db4 	.word	0x00006db4
    1f94:	00006dc0 	.word	0x00006dc0
    1f98:	00006dcc 	.word	0x00006dcc
    1f9c:	00004aa5 	.word	0x00004aa5
    1fa0:	00005621 	.word	0x00005621
    1fa4:	00001b57 	.word	0x00001b57
    1fa8:	000055e1 	.word	0x000055e1
    1fac:	00001b58 	.word	0x00001b58
    1fb0:	20000001 	.word	0x20000001
    1fb4:	000006b1 	.word	0x000006b1
	else if (strncmp(buffer,MINOR_RESET,sizeof(MINOR_RESET)-1) == 0)
    1fb8:	49c5      	ldr	r1, [pc, #788]	; (22d0 <STACK_SIZE+0x2d0>)
    1fba:	68fb      	ldr	r3, [r7, #12]
    1fbc:	2209      	movs	r2, #9
    1fbe:	0018      	movs	r0, r3
    1fc0:	4bc4      	ldr	r3, [pc, #784]	; (22d4 <STACK_SIZE+0x2d4>)
    1fc2:	4798      	blx	r3
    1fc4:	1e03      	subs	r3, r0, #0
    1fc6:	d12f      	bne.n	2028 <STACK_SIZE+0x28>
		ble_uart_write("MINOR RESET ACK\n");
    1fc8:	4bc3      	ldr	r3, [pc, #780]	; (22d8 <STACK_SIZE+0x2d8>)
    1fca:	0018      	movs	r0, r3
    1fcc:	4bc3      	ldr	r3, [pc, #780]	; (22dc <STACK_SIZE+0x2dc>)
    1fce:	4798      	blx	r3
		delay_ms(250);
    1fd0:	2000      	movs	r0, #0
    1fd2:	4bc3      	ldr	r3, [pc, #780]	; (22e0 <STACK_SIZE+0x2e0>)
    1fd4:	4798      	blx	r3
    1fd6:	0003      	movs	r3, r0
    1fd8:	001d      	movs	r5, r3
    1fda:	2300      	movs	r3, #0
    1fdc:	001e      	movs	r6, r3
    1fde:	4cc1      	ldr	r4, [pc, #772]	; (22e4 <STACK_SIZE+0x2e4>)
    1fe0:	22fa      	movs	r2, #250	; 0xfa
    1fe2:	2300      	movs	r3, #0
    1fe4:	0028      	movs	r0, r5
    1fe6:	0031      	movs	r1, r6
    1fe8:	47a0      	blx	r4
    1fea:	0003      	movs	r3, r0
    1fec:	000c      	movs	r4, r1
    1fee:	0019      	movs	r1, r3
    1ff0:	0022      	movs	r2, r4
    1ff2:	4bbd      	ldr	r3, [pc, #756]	; (22e8 <STACK_SIZE+0x2e8>)
    1ff4:	2400      	movs	r4, #0
    1ff6:	18c9      	adds	r1, r1, r3
    1ff8:	4162      	adcs	r2, r4
    1ffa:	0008      	movs	r0, r1
    1ffc:	0011      	movs	r1, r2
    1ffe:	4cbb      	ldr	r4, [pc, #748]	; (22ec <STACK_SIZE+0x2ec>)
    2000:	4abb      	ldr	r2, [pc, #748]	; (22f0 <STACK_SIZE+0x2f0>)
    2002:	2300      	movs	r3, #0
    2004:	47a0      	blx	r4
    2006:	0003      	movs	r3, r0
    2008:	000c      	movs	r4, r1
    200a:	0018      	movs	r0, r3
    200c:	4bb9      	ldr	r3, [pc, #740]	; (22f4 <STACK_SIZE+0x2f4>)
    200e:	4798      	blx	r3
		sounds_reset();
    2010:	4bb9      	ldr	r3, [pc, #740]	; (22f8 <STACK_SIZE+0x2f8>)
    2012:	4798      	blx	r3
		init_all_ports();
    2014:	4bb9      	ldr	r3, [pc, #740]	; (22fc <STACK_SIZE+0x2fc>)
    2016:	4798      	blx	r3
		party = false;
    2018:	4bb9      	ldr	r3, [pc, #740]	; (2300 <STACK_SIZE+0x300>)
    201a:	2200      	movs	r2, #0
    201c:	701a      	strb	r2, [r3, #0]
		ble_uart_write("MINOR RESET DONE\n");
    201e:	4bb9      	ldr	r3, [pc, #740]	; (2304 <STACK_SIZE+0x304>)
    2020:	0018      	movs	r0, r3
    2022:	4bae      	ldr	r3, [pc, #696]	; (22dc <STACK_SIZE+0x2dc>)
    2024:	4798      	blx	r3
}
    2026:	e14e      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if (strncmp(buffer,PARTY_TRESH_0,sizeof(PARTY_TRESH_0)-1)  == 0)
    2028:	49b7      	ldr	r1, [pc, #732]	; (2308 <STACK_SIZE+0x308>)
    202a:	68fb      	ldr	r3, [r7, #12]
    202c:	2208      	movs	r2, #8
    202e:	0018      	movs	r0, r3
    2030:	4ba8      	ldr	r3, [pc, #672]	; (22d4 <STACK_SIZE+0x2d4>)
    2032:	4798      	blx	r3
    2034:	1e03      	subs	r3, r0, #0
    2036:	d10f      	bne.n	2058 <STACK_SIZE+0x58>
		int temp = sizeof(PARTY_TRESH_0);//party_treshold;
    2038:	2309      	movs	r3, #9
    203a:	657b      	str	r3, [r7, #84]	; 0x54
		sscanf(buffer,"PRTTRSH0 %d",&temp);
    203c:	234c      	movs	r3, #76	; 0x4c
    203e:	2208      	movs	r2, #8
    2040:	18ba      	adds	r2, r7, r2
    2042:	18d2      	adds	r2, r2, r3
    2044:	49b1      	ldr	r1, [pc, #708]	; (230c <STACK_SIZE+0x30c>)
    2046:	68fb      	ldr	r3, [r7, #12]
    2048:	0018      	movs	r0, r3
    204a:	4bb1      	ldr	r3, [pc, #708]	; (2310 <STACK_SIZE+0x310>)
    204c:	4798      	blx	r3
		party_thresholds[0] = (uint16_t)temp;
    204e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2050:	b29a      	uxth	r2, r3
    2052:	4bb0      	ldr	r3, [pc, #704]	; (2314 <STACK_SIZE+0x314>)
    2054:	801a      	strh	r2, [r3, #0]
}
    2056:	e136      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if (strncmp(buffer,PARTY_TRESH_1,sizeof(PARTY_TRESH_1)-1) == 0)
    2058:	49af      	ldr	r1, [pc, #700]	; (2318 <STACK_SIZE+0x318>)
    205a:	68fb      	ldr	r3, [r7, #12]
    205c:	2208      	movs	r2, #8
    205e:	0018      	movs	r0, r3
    2060:	4b9c      	ldr	r3, [pc, #624]	; (22d4 <STACK_SIZE+0x2d4>)
    2062:	4798      	blx	r3
    2064:	1e03      	subs	r3, r0, #0
    2066:	d10f      	bne.n	2088 <STACK_SIZE+0x88>
		int temp = party_treshold;
    2068:	4bac      	ldr	r3, [pc, #688]	; (231c <STACK_SIZE+0x31c>)
    206a:	653b      	str	r3, [r7, #80]	; 0x50
		sscanf(buffer,"PRTTRSH1 %d",&temp);
    206c:	2348      	movs	r3, #72	; 0x48
    206e:	2208      	movs	r2, #8
    2070:	18ba      	adds	r2, r7, r2
    2072:	18d2      	adds	r2, r2, r3
    2074:	49aa      	ldr	r1, [pc, #680]	; (2320 <STACK_SIZE+0x320>)
    2076:	68fb      	ldr	r3, [r7, #12]
    2078:	0018      	movs	r0, r3
    207a:	4ba5      	ldr	r3, [pc, #660]	; (2310 <STACK_SIZE+0x310>)
    207c:	4798      	blx	r3
		party_thresholds[1] = (uint16_t)temp;
    207e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2080:	b29a      	uxth	r2, r3
    2082:	4ba4      	ldr	r3, [pc, #656]	; (2314 <STACK_SIZE+0x314>)
    2084:	805a      	strh	r2, [r3, #2]
}
    2086:	e11e      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if (strncmp(buffer,PARTY_TRESH_2,sizeof(PARTY_TRESH_2)-1) == 0)
    2088:	49a6      	ldr	r1, [pc, #664]	; (2324 <STACK_SIZE+0x324>)
    208a:	68fb      	ldr	r3, [r7, #12]
    208c:	2208      	movs	r2, #8
    208e:	0018      	movs	r0, r3
    2090:	4b90      	ldr	r3, [pc, #576]	; (22d4 <STACK_SIZE+0x2d4>)
    2092:	4798      	blx	r3
    2094:	1e03      	subs	r3, r0, #0
    2096:	d10f      	bne.n	20b8 <STACK_SIZE+0xb8>
		int temp = party_treshold;
    2098:	4ba0      	ldr	r3, [pc, #640]	; (231c <STACK_SIZE+0x31c>)
    209a:	64fb      	str	r3, [r7, #76]	; 0x4c
		sscanf(buffer,"PRTTRSH2 %d",&temp);
    209c:	2344      	movs	r3, #68	; 0x44
    209e:	2208      	movs	r2, #8
    20a0:	18ba      	adds	r2, r7, r2
    20a2:	18d2      	adds	r2, r2, r3
    20a4:	49a0      	ldr	r1, [pc, #640]	; (2328 <STACK_SIZE+0x328>)
    20a6:	68fb      	ldr	r3, [r7, #12]
    20a8:	0018      	movs	r0, r3
    20aa:	4b99      	ldr	r3, [pc, #612]	; (2310 <STACK_SIZE+0x310>)
    20ac:	4798      	blx	r3
		party_thresholds[2] = (uint16_t)temp;
    20ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    20b0:	b29a      	uxth	r2, r3
    20b2:	4b98      	ldr	r3, [pc, #608]	; (2314 <STACK_SIZE+0x314>)
    20b4:	809a      	strh	r2, [r3, #4]
}
    20b6:	e106      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if (strncmp(buffer,PARTY_TRESH_3,sizeof(PARTY_TRESH_3)-1) == 0)
    20b8:	499c      	ldr	r1, [pc, #624]	; (232c <STACK_SIZE+0x32c>)
    20ba:	68fb      	ldr	r3, [r7, #12]
    20bc:	2208      	movs	r2, #8
    20be:	0018      	movs	r0, r3
    20c0:	4b84      	ldr	r3, [pc, #528]	; (22d4 <STACK_SIZE+0x2d4>)
    20c2:	4798      	blx	r3
    20c4:	1e03      	subs	r3, r0, #0
    20c6:	d10f      	bne.n	20e8 <STACK_SIZE+0xe8>
		int temp = party_treshold;
    20c8:	4b94      	ldr	r3, [pc, #592]	; (231c <STACK_SIZE+0x31c>)
    20ca:	64bb      	str	r3, [r7, #72]	; 0x48
		sscanf(buffer,"PRTTRSH3 %d",&temp);
    20cc:	2340      	movs	r3, #64	; 0x40
    20ce:	2208      	movs	r2, #8
    20d0:	18ba      	adds	r2, r7, r2
    20d2:	18d2      	adds	r2, r2, r3
    20d4:	4996      	ldr	r1, [pc, #600]	; (2330 <STACK_SIZE+0x330>)
    20d6:	68fb      	ldr	r3, [r7, #12]
    20d8:	0018      	movs	r0, r3
    20da:	4b8d      	ldr	r3, [pc, #564]	; (2310 <STACK_SIZE+0x310>)
    20dc:	4798      	blx	r3
		party_thresholds[3] = (uint16_t)temp;
    20de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    20e0:	b29a      	uxth	r2, r3
    20e2:	4b8c      	ldr	r3, [pc, #560]	; (2314 <STACK_SIZE+0x314>)
    20e4:	80da      	strh	r2, [r3, #6]
}
    20e6:	e0ee      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if (strncmp(buffer,PARTY_TRESH_4,sizeof(PARTY_TRESH_4)-1) == 0)
    20e8:	4992      	ldr	r1, [pc, #584]	; (2334 <STACK_SIZE+0x334>)
    20ea:	68fb      	ldr	r3, [r7, #12]
    20ec:	2208      	movs	r2, #8
    20ee:	0018      	movs	r0, r3
    20f0:	4b78      	ldr	r3, [pc, #480]	; (22d4 <STACK_SIZE+0x2d4>)
    20f2:	4798      	blx	r3
    20f4:	1e03      	subs	r3, r0, #0
    20f6:	d10f      	bne.n	2118 <STACK_SIZE+0x118>
		int temp = party_treshold;
    20f8:	4b88      	ldr	r3, [pc, #544]	; (231c <STACK_SIZE+0x31c>)
    20fa:	647b      	str	r3, [r7, #68]	; 0x44
		sscanf(buffer,"PRTTRSH4 %d",&temp);
    20fc:	233c      	movs	r3, #60	; 0x3c
    20fe:	2208      	movs	r2, #8
    2100:	18ba      	adds	r2, r7, r2
    2102:	18d2      	adds	r2, r2, r3
    2104:	498c      	ldr	r1, [pc, #560]	; (2338 <STACK_SIZE+0x338>)
    2106:	68fb      	ldr	r3, [r7, #12]
    2108:	0018      	movs	r0, r3
    210a:	4b81      	ldr	r3, [pc, #516]	; (2310 <STACK_SIZE+0x310>)
    210c:	4798      	blx	r3
		party_thresholds[4] = (uint16_t)temp;
    210e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2110:	b29a      	uxth	r2, r3
    2112:	4b80      	ldr	r3, [pc, #512]	; (2314 <STACK_SIZE+0x314>)
    2114:	811a      	strh	r2, [r3, #8]
}
    2116:	e0d6      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if (strncmp(buffer,PARTY_TRESH_5,sizeof(PARTY_TRESH_5)-1) == 0)
    2118:	4988      	ldr	r1, [pc, #544]	; (233c <STACK_SIZE+0x33c>)
    211a:	68fb      	ldr	r3, [r7, #12]
    211c:	2208      	movs	r2, #8
    211e:	0018      	movs	r0, r3
    2120:	4b6c      	ldr	r3, [pc, #432]	; (22d4 <STACK_SIZE+0x2d4>)
    2122:	4798      	blx	r3
    2124:	1e03      	subs	r3, r0, #0
    2126:	d10f      	bne.n	2148 <STACK_SIZE+0x148>
		int temp = party_treshold;
    2128:	4b7c      	ldr	r3, [pc, #496]	; (231c <STACK_SIZE+0x31c>)
    212a:	643b      	str	r3, [r7, #64]	; 0x40
		sscanf(buffer,"PRTTRSH5 %d",&temp);
    212c:	2338      	movs	r3, #56	; 0x38
    212e:	2208      	movs	r2, #8
    2130:	18ba      	adds	r2, r7, r2
    2132:	18d2      	adds	r2, r2, r3
    2134:	4982      	ldr	r1, [pc, #520]	; (2340 <STACK_SIZE+0x340>)
    2136:	68fb      	ldr	r3, [r7, #12]
    2138:	0018      	movs	r0, r3
    213a:	4b75      	ldr	r3, [pc, #468]	; (2310 <STACK_SIZE+0x310>)
    213c:	4798      	blx	r3
		party_thresholds[5] = (uint16_t)temp;
    213e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2140:	b29a      	uxth	r2, r3
    2142:	4b74      	ldr	r3, [pc, #464]	; (2314 <STACK_SIZE+0x314>)
    2144:	815a      	strh	r2, [r3, #10]
}
    2146:	e0be      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if (strncmp(buffer,PARTY_TRESH_6,sizeof(PARTY_TRESH_6)-1) == 0)
    2148:	497e      	ldr	r1, [pc, #504]	; (2344 <STACK_SIZE+0x344>)
    214a:	68fb      	ldr	r3, [r7, #12]
    214c:	2208      	movs	r2, #8
    214e:	0018      	movs	r0, r3
    2150:	4b60      	ldr	r3, [pc, #384]	; (22d4 <STACK_SIZE+0x2d4>)
    2152:	4798      	blx	r3
    2154:	1e03      	subs	r3, r0, #0
    2156:	d10f      	bne.n	2178 <STACK_SIZE+0x178>
		int temp = party_treshold;
    2158:	4b70      	ldr	r3, [pc, #448]	; (231c <STACK_SIZE+0x31c>)
    215a:	63fb      	str	r3, [r7, #60]	; 0x3c
		sscanf(buffer,"PRTTRSH6 %d",&temp);
    215c:	2334      	movs	r3, #52	; 0x34
    215e:	2208      	movs	r2, #8
    2160:	18ba      	adds	r2, r7, r2
    2162:	18d2      	adds	r2, r2, r3
    2164:	4978      	ldr	r1, [pc, #480]	; (2348 <STACK_SIZE+0x348>)
    2166:	68fb      	ldr	r3, [r7, #12]
    2168:	0018      	movs	r0, r3
    216a:	4b69      	ldr	r3, [pc, #420]	; (2310 <STACK_SIZE+0x310>)
    216c:	4798      	blx	r3
		party_thresholds[6] = (uint16_t)temp;
    216e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2170:	b29a      	uxth	r2, r3
    2172:	4b68      	ldr	r3, [pc, #416]	; (2314 <STACK_SIZE+0x314>)
    2174:	819a      	strh	r2, [r3, #12]
}
    2176:	e0a6      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if (strncmp(buffer,PARTY_TRESH_7,sizeof(PARTY_TRESH_7)-1) == 0)
    2178:	4974      	ldr	r1, [pc, #464]	; (234c <STACK_SIZE+0x34c>)
    217a:	68fb      	ldr	r3, [r7, #12]
    217c:	2208      	movs	r2, #8
    217e:	0018      	movs	r0, r3
    2180:	4b54      	ldr	r3, [pc, #336]	; (22d4 <STACK_SIZE+0x2d4>)
    2182:	4798      	blx	r3
    2184:	1e03      	subs	r3, r0, #0
    2186:	d10f      	bne.n	21a8 <STACK_SIZE+0x1a8>
		int temp = party_treshold;
    2188:	4b64      	ldr	r3, [pc, #400]	; (231c <STACK_SIZE+0x31c>)
    218a:	63bb      	str	r3, [r7, #56]	; 0x38
		sscanf(buffer,"PRTTRSH7 %d",&temp);
    218c:	2330      	movs	r3, #48	; 0x30
    218e:	2208      	movs	r2, #8
    2190:	18ba      	adds	r2, r7, r2
    2192:	18d2      	adds	r2, r2, r3
    2194:	496e      	ldr	r1, [pc, #440]	; (2350 <STACK_SIZE+0x350>)
    2196:	68fb      	ldr	r3, [r7, #12]
    2198:	0018      	movs	r0, r3
    219a:	4b5d      	ldr	r3, [pc, #372]	; (2310 <STACK_SIZE+0x310>)
    219c:	4798      	blx	r3
		party_thresholds[7] = (uint16_t)temp;
    219e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    21a0:	b29a      	uxth	r2, r3
    21a2:	4b5c      	ldr	r3, [pc, #368]	; (2314 <STACK_SIZE+0x314>)
    21a4:	81da      	strh	r2, [r3, #14]
}
    21a6:	e08e      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if (strncmp(buffer,CUT_OUT_VALVE_ON,sizeof(CUT_OUT_VALVE_ON)-1) == 0)
    21a8:	496a      	ldr	r1, [pc, #424]	; (2354 <STACK_SIZE+0x354>)
    21aa:	68fb      	ldr	r3, [r7, #12]
    21ac:	2205      	movs	r2, #5
    21ae:	0018      	movs	r0, r3
    21b0:	4b48      	ldr	r3, [pc, #288]	; (22d4 <STACK_SIZE+0x2d4>)
    21b2:	4798      	blx	r3
    21b4:	1e03      	subs	r3, r0, #0
    21b6:	d112      	bne.n	21de <STACK_SIZE+0x1de>
		valve_open = true;
    21b8:	4b67      	ldr	r3, [pc, #412]	; (2358 <STACK_SIZE+0x358>)
    21ba:	2201      	movs	r2, #1
    21bc:	701a      	strb	r2, [r3, #0]
		valve_close = false;
    21be:	4b67      	ldr	r3, [pc, #412]	; (235c <STACK_SIZE+0x35c>)
    21c0:	2200      	movs	r2, #0
    21c2:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    21c4:	68fb      	ldr	r3, [r7, #12]
    21c6:	0018      	movs	r0, r3
    21c8:	4b44      	ldr	r3, [pc, #272]	; (22dc <STACK_SIZE+0x2dc>)
    21ca:	4798      	blx	r3
		ble_uart_write(" - ");
    21cc:	4b64      	ldr	r3, [pc, #400]	; (2360 <STACK_SIZE+0x360>)
    21ce:	0018      	movs	r0, r3
    21d0:	4b42      	ldr	r3, [pc, #264]	; (22dc <STACK_SIZE+0x2dc>)
    21d2:	4798      	blx	r3
		ble_uart_write("ACK");
    21d4:	4b63      	ldr	r3, [pc, #396]	; (2364 <STACK_SIZE+0x364>)
    21d6:	0018      	movs	r0, r3
    21d8:	4b40      	ldr	r3, [pc, #256]	; (22dc <STACK_SIZE+0x2dc>)
    21da:	4798      	blx	r3
}
    21dc:	e073      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if (strncmp(buffer,CUT_OUT_VALVE_OFF,sizeof(CUT_OUT_VALVE_OFF)-1) == 0)
    21de:	4962      	ldr	r1, [pc, #392]	; (2368 <STACK_SIZE+0x368>)
    21e0:	68fb      	ldr	r3, [r7, #12]
    21e2:	2205      	movs	r2, #5
    21e4:	0018      	movs	r0, r3
    21e6:	4b3b      	ldr	r3, [pc, #236]	; (22d4 <STACK_SIZE+0x2d4>)
    21e8:	4798      	blx	r3
    21ea:	1e03      	subs	r3, r0, #0
    21ec:	d112      	bne.n	2214 <STACK_SIZE+0x214>
		valve_open = false;
    21ee:	4b5a      	ldr	r3, [pc, #360]	; (2358 <STACK_SIZE+0x358>)
    21f0:	2200      	movs	r2, #0
    21f2:	701a      	strb	r2, [r3, #0]
		valve_close = true;
    21f4:	4b59      	ldr	r3, [pc, #356]	; (235c <STACK_SIZE+0x35c>)
    21f6:	2201      	movs	r2, #1
    21f8:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    21fa:	68fb      	ldr	r3, [r7, #12]
    21fc:	0018      	movs	r0, r3
    21fe:	4b37      	ldr	r3, [pc, #220]	; (22dc <STACK_SIZE+0x2dc>)
    2200:	4798      	blx	r3
		ble_uart_write(" - ");
    2202:	4b57      	ldr	r3, [pc, #348]	; (2360 <STACK_SIZE+0x360>)
    2204:	0018      	movs	r0, r3
    2206:	4b35      	ldr	r3, [pc, #212]	; (22dc <STACK_SIZE+0x2dc>)
    2208:	4798      	blx	r3
		ble_uart_write("ACK");
    220a:	4b56      	ldr	r3, [pc, #344]	; (2364 <STACK_SIZE+0x364>)
    220c:	0018      	movs	r0, r3
    220e:	4b33      	ldr	r3, [pc, #204]	; (22dc <STACK_SIZE+0x2dc>)
    2210:	4798      	blx	r3
}
    2212:	e058      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,PARTY_REV2_ON,sizeof(PARTY_REV2_ON)-1) == 0)
    2214:	4955      	ldr	r1, [pc, #340]	; (236c <STACK_SIZE+0x36c>)
    2216:	68fb      	ldr	r3, [r7, #12]
    2218:	2207      	movs	r2, #7
    221a:	0018      	movs	r0, r3
    221c:	4b2d      	ldr	r3, [pc, #180]	; (22d4 <STACK_SIZE+0x2d4>)
    221e:	4798      	blx	r3
    2220:	1e03      	subs	r3, r0, #0
    2222:	d120      	bne.n	2266 <STACK_SIZE+0x266>
		sscanf(buffer,"PRTRV21 %d",&temp);
    2224:	232f      	movs	r3, #47	; 0x2f
    2226:	2208      	movs	r2, #8
    2228:	18ba      	adds	r2, r7, r2
    222a:	18d2      	adds	r2, r2, r3
    222c:	4950      	ldr	r1, [pc, #320]	; (2370 <STACK_SIZE+0x370>)
    222e:	68fb      	ldr	r3, [r7, #12]
    2230:	0018      	movs	r0, r3
    2232:	4b37      	ldr	r3, [pc, #220]	; (2310 <STACK_SIZE+0x310>)
    2234:	4798      	blx	r3
		party_band_chosen = temp;
    2236:	232f      	movs	r3, #47	; 0x2f
    2238:	2208      	movs	r2, #8
    223a:	4694      	mov	ip, r2
    223c:	44bc      	add	ip, r7
    223e:	4463      	add	r3, ip
    2240:	781a      	ldrb	r2, [r3, #0]
    2242:	4b4c      	ldr	r3, [pc, #304]	; (2374 <STACK_SIZE+0x374>)
    2244:	701a      	strb	r2, [r3, #0]
		partyrev2 = true;
    2246:	4b4c      	ldr	r3, [pc, #304]	; (2378 <STACK_SIZE+0x378>)
    2248:	2201      	movs	r2, #1
    224a:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    224c:	68fb      	ldr	r3, [r7, #12]
    224e:	0018      	movs	r0, r3
    2250:	4b22      	ldr	r3, [pc, #136]	; (22dc <STACK_SIZE+0x2dc>)
    2252:	4798      	blx	r3
		ble_uart_write(" - ");
    2254:	4b42      	ldr	r3, [pc, #264]	; (2360 <STACK_SIZE+0x360>)
    2256:	0018      	movs	r0, r3
    2258:	4b20      	ldr	r3, [pc, #128]	; (22dc <STACK_SIZE+0x2dc>)
    225a:	4798      	blx	r3
		ble_uart_write("ACK");
    225c:	4b41      	ldr	r3, [pc, #260]	; (2364 <STACK_SIZE+0x364>)
    225e:	0018      	movs	r0, r3
    2260:	4b1e      	ldr	r3, [pc, #120]	; (22dc <STACK_SIZE+0x2dc>)
    2262:	4798      	blx	r3
}
    2264:	e02f      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,PARTY_REV2_OFF,sizeof(PARTY_REV2_OFF)-1) == 0)
    2266:	4945      	ldr	r1, [pc, #276]	; (237c <STACK_SIZE+0x37c>)
    2268:	68fb      	ldr	r3, [r7, #12]
    226a:	2207      	movs	r2, #7
    226c:	0018      	movs	r0, r3
    226e:	4b19      	ldr	r3, [pc, #100]	; (22d4 <STACK_SIZE+0x2d4>)
    2270:	4798      	blx	r3
    2272:	1e03      	subs	r3, r0, #0
    2274:	d10f      	bne.n	2296 <STACK_SIZE+0x296>
		partyrev2 = false;
    2276:	4b40      	ldr	r3, [pc, #256]	; (2378 <STACK_SIZE+0x378>)
    2278:	2200      	movs	r2, #0
    227a:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    227c:	68fb      	ldr	r3, [r7, #12]
    227e:	0018      	movs	r0, r3
    2280:	4b16      	ldr	r3, [pc, #88]	; (22dc <STACK_SIZE+0x2dc>)
    2282:	4798      	blx	r3
		ble_uart_write(" - ");
    2284:	4b36      	ldr	r3, [pc, #216]	; (2360 <STACK_SIZE+0x360>)
    2286:	0018      	movs	r0, r3
    2288:	4b14      	ldr	r3, [pc, #80]	; (22dc <STACK_SIZE+0x2dc>)
    228a:	4798      	blx	r3
		ble_uart_write("ACK");
    228c:	4b35      	ldr	r3, [pc, #212]	; (2364 <STACK_SIZE+0x364>)
    228e:	0018      	movs	r0, r3
    2290:	4b12      	ldr	r3, [pc, #72]	; (22dc <STACK_SIZE+0x2dc>)
    2292:	4798      	blx	r3
}
    2294:	e017      	b.n	22c6 <STACK_SIZE+0x2c6>
	else if(strncmp(buffer,MASTER_TEST,sizeof(MASTER_TEST)-1) == 0)
    2296:	493a      	ldr	r1, [pc, #232]	; (2380 <STACK_SIZE+0x380>)
    2298:	68fb      	ldr	r3, [r7, #12]
    229a:	220a      	movs	r2, #10
    229c:	0018      	movs	r0, r3
    229e:	4b0d      	ldr	r3, [pc, #52]	; (22d4 <STACK_SIZE+0x2d4>)
    22a0:	4798      	blx	r3
    22a2:	1e03      	subs	r3, r0, #0
    22a4:	d10f      	bne.n	22c6 <STACK_SIZE+0x2c6>
		ble_uart_write(buffer);
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	0018      	movs	r0, r3
    22aa:	4b0c      	ldr	r3, [pc, #48]	; (22dc <STACK_SIZE+0x2dc>)
    22ac:	4798      	blx	r3
		ble_uart_write(" - ");
    22ae:	4b2c      	ldr	r3, [pc, #176]	; (2360 <STACK_SIZE+0x360>)
    22b0:	0018      	movs	r0, r3
    22b2:	4b0a      	ldr	r3, [pc, #40]	; (22dc <STACK_SIZE+0x2dc>)
    22b4:	4798      	blx	r3
		ble_uart_write("ACK");
    22b6:	4b2b      	ldr	r3, [pc, #172]	; (2364 <STACK_SIZE+0x364>)
    22b8:	0018      	movs	r0, r3
    22ba:	4b08      	ldr	r3, [pc, #32]	; (22dc <STACK_SIZE+0x2dc>)
    22bc:	4798      	blx	r3
		execute_order_66 = true;
    22be:	4b31      	ldr	r3, [pc, #196]	; (2384 <STACK_SIZE+0x384>)
    22c0:	2201      	movs	r2, #1
    22c2:	701a      	strb	r2, [r3, #0]
}
    22c4:	e7ff      	b.n	22c6 <STACK_SIZE+0x2c6>
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	46bd      	mov	sp, r7
    22ca:	b01b      	add	sp, #108	; 0x6c
    22cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	00006dd8 	.word	0x00006dd8
    22d4:	00005b0f 	.word	0x00005b0f
    22d8:	00006de4 	.word	0x00006de4
    22dc:	00001299 	.word	0x00001299
    22e0:	00004aa5 	.word	0x00004aa5
    22e4:	00005621 	.word	0x00005621
    22e8:	00001b57 	.word	0x00001b57
    22ec:	000055e1 	.word	0x000055e1
    22f0:	00001b58 	.word	0x00001b58
    22f4:	20000001 	.word	0x20000001
    22f8:	00003cc9 	.word	0x00003cc9
    22fc:	00003305 	.word	0x00003305
    2300:	20000e39 	.word	0x20000e39
    2304:	00006df8 	.word	0x00006df8
    2308:	00006e0c 	.word	0x00006e0c
    230c:	00006e18 	.word	0x00006e18
    2310:	00005a81 	.word	0x00005a81
    2314:	20000a14 	.word	0x20000a14
    2318:	00006e24 	.word	0x00006e24
    231c:	000009c4 	.word	0x000009c4
    2320:	00006e30 	.word	0x00006e30
    2324:	00006e3c 	.word	0x00006e3c
    2328:	00006e48 	.word	0x00006e48
    232c:	00006e54 	.word	0x00006e54
    2330:	00006e60 	.word	0x00006e60
    2334:	00006e6c 	.word	0x00006e6c
    2338:	00006e78 	.word	0x00006e78
    233c:	00006e84 	.word	0x00006e84
    2340:	00006e90 	.word	0x00006e90
    2344:	00006e9c 	.word	0x00006e9c
    2348:	00006ea8 	.word	0x00006ea8
    234c:	00006eb4 	.word	0x00006eb4
    2350:	00006ec0 	.word	0x00006ec0
    2354:	00006ecc 	.word	0x00006ecc
    2358:	20000a0f 	.word	0x20000a0f
    235c:	20000a0c 	.word	0x20000a0c
    2360:	00006c78 	.word	0x00006c78
    2364:	00006c7c 	.word	0x00006c7c
    2368:	00006ed4 	.word	0x00006ed4
    236c:	00006edc 	.word	0x00006edc
    2370:	00006ee4 	.word	0x00006ee4
    2374:	20000e47 	.word	0x20000e47
    2378:	20000a0d 	.word	0x20000a0d
    237c:	00006ef0 	.word	0x00006ef0
    2380:	00006ef8 	.word	0x00006ef8
    2384:	20000ecc 	.word	0x20000ecc

00002388 <update_all_ports>:

void update_all_ports()
{
    2388:	b580      	push	{r7, lr}
    238a:	b082      	sub	sp, #8
    238c:	af00      	add	r7, sp, #0
	if (!port_update_ongoing)
    238e:	4b27      	ldr	r3, [pc, #156]	; (242c <update_all_ports+0xa4>)
    2390:	781b      	ldrb	r3, [r3, #0]
    2392:	2201      	movs	r2, #1
    2394:	4053      	eors	r3, r2
    2396:	b2db      	uxtb	r3, r3
    2398:	2b00      	cmp	r3, #0
    239a:	d042      	beq.n	2422 <update_all_ports+0x9a>
	{
		port_update_ongoing = true;
    239c:	4b23      	ldr	r3, [pc, #140]	; (242c <update_all_ports+0xa4>)
    239e:	2201      	movs	r2, #1
    23a0:	701a      	strb	r2, [r3, #0]
		init_all_ports();
    23a2:	4b23      	ldr	r3, [pc, #140]	; (2430 <update_all_ports+0xa8>)
    23a4:	4798      	blx	r3
		for (int i=0;i<8;i++)
    23a6:	2300      	movs	r3, #0
    23a8:	607b      	str	r3, [r7, #4]
    23aa:	e034      	b.n	2416 <update_all_ports+0x8e>
		{
			mcp23017_data.devices[i].outputs.pa7 = 1;
    23ac:	4a21      	ldr	r2, [pc, #132]	; (2434 <update_all_ports+0xac>)
    23ae:	687b      	ldr	r3, [r7, #4]
    23b0:	2108      	movs	r1, #8
    23b2:	011b      	lsls	r3, r3, #4
    23b4:	18d3      	adds	r3, r2, r3
    23b6:	185b      	adds	r3, r3, r1
    23b8:	781a      	ldrb	r2, [r3, #0]
    23ba:	2180      	movs	r1, #128	; 0x80
    23bc:	4249      	negs	r1, r1
    23be:	430a      	orrs	r2, r1
    23c0:	701a      	strb	r2, [r3, #0]
			mcp23017_data.devices[i].outputs.pb7 = 1;
    23c2:	4a1c      	ldr	r2, [pc, #112]	; (2434 <update_all_ports+0xac>)
    23c4:	687b      	ldr	r3, [r7, #4]
    23c6:	2108      	movs	r1, #8
    23c8:	011b      	lsls	r3, r3, #4
    23ca:	18d3      	adds	r3, r2, r3
    23cc:	185b      	adds	r3, r3, r1
    23ce:	785a      	ldrb	r2, [r3, #1]
    23d0:	2180      	movs	r1, #128	; 0x80
    23d2:	4249      	negs	r1, r1
    23d4:	430a      	orrs	r2, r1
    23d6:	705a      	strb	r2, [r3, #1]
			mcp23017_data.devices[i].status = mcp23017_set_pins(MCP23017_I2C_ADDR_000+i,mcp23017_data.devices[i].outputs.ports[0],mcp23017_data.devices[i].outputs.ports[1]);
    23d8:	687b      	ldr	r3, [r7, #4]
    23da:	b2db      	uxtb	r3, r3
    23dc:	3320      	adds	r3, #32
    23de:	b2d8      	uxtb	r0, r3
    23e0:	4a14      	ldr	r2, [pc, #80]	; (2434 <update_all_ports+0xac>)
    23e2:	687b      	ldr	r3, [r7, #4]
    23e4:	011b      	lsls	r3, r3, #4
    23e6:	18d3      	adds	r3, r2, r3
    23e8:	3308      	adds	r3, #8
    23ea:	7819      	ldrb	r1, [r3, #0]
    23ec:	4a11      	ldr	r2, [pc, #68]	; (2434 <update_all_ports+0xac>)
    23ee:	687b      	ldr	r3, [r7, #4]
    23f0:	011b      	lsls	r3, r3, #4
    23f2:	18d3      	adds	r3, r2, r3
    23f4:	3309      	adds	r3, #9
    23f6:	781b      	ldrb	r3, [r3, #0]
    23f8:	001a      	movs	r2, r3
    23fa:	4b0f      	ldr	r3, [pc, #60]	; (2438 <update_all_ports+0xb0>)
    23fc:	4798      	blx	r3
    23fe:	0003      	movs	r3, r0
    2400:	0019      	movs	r1, r3
    2402:	4a0c      	ldr	r2, [pc, #48]	; (2434 <update_all_ports+0xac>)
    2404:	687b      	ldr	r3, [r7, #4]
    2406:	011b      	lsls	r3, r3, #4
    2408:	18d3      	adds	r3, r2, r3
    240a:	3303      	adds	r3, #3
    240c:	1c0a      	adds	r2, r1, #0
    240e:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<8;i++)
    2410:	687b      	ldr	r3, [r7, #4]
    2412:	3301      	adds	r3, #1
    2414:	607b      	str	r3, [r7, #4]
    2416:	687b      	ldr	r3, [r7, #4]
    2418:	2b07      	cmp	r3, #7
    241a:	ddc7      	ble.n	23ac <update_all_ports+0x24>
		}
		port_update_ongoing = false;
    241c:	4b03      	ldr	r3, [pc, #12]	; (242c <update_all_ports+0xa4>)
    241e:	2200      	movs	r2, #0
    2420:	701a      	strb	r2, [r3, #0]
	}
}
    2422:	46c0      	nop			; (mov r8, r8)
    2424:	46bd      	mov	sp, r7
    2426:	b002      	add	sp, #8
    2428:	bd80      	pop	{r7, pc}
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	20000e3f 	.word	0x20000e3f
    2430:	00003305 	.word	0x00003305
    2434:	200000e0 	.word	0x200000e0
    2438:	000033dd 	.word	0x000033dd

0000243c <party_lights>:
	}
}


void party_lights(uint16_t party_vals[])
{
    243c:	b590      	push	{r4, r7, lr}
    243e:	b083      	sub	sp, #12
    2440:	af00      	add	r7, sp, #0
    2442:	6078      	str	r0, [r7, #4]
	if (party_vals[0] > party_thresholds[0])
    2444:	687b      	ldr	r3, [r7, #4]
    2446:	881a      	ldrh	r2, [r3, #0]
    2448:	4b94      	ldr	r3, [pc, #592]	; (269c <party_lights+0x260>)
    244a:	881b      	ldrh	r3, [r3, #0]
    244c:	429a      	cmp	r2, r3
    244e:	d91e      	bls.n	248e <party_lights+0x52>
	{
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR,SUB_LEFT_PIN,true);
    2450:	2301      	movs	r3, #1
    2452:	2203      	movs	r2, #3
    2454:	2103      	movs	r1, #3
    2456:	2000      	movs	r0, #0
    2458:	4c91      	ldr	r4, [pc, #580]	; (26a0 <party_lights+0x264>)
    245a:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR,SUB_RIGHT_PIN,true);
    245c:	2301      	movs	r3, #1
    245e:	2204      	movs	r2, #4
    2460:	2103      	movs	r1, #3
    2462:	2000      	movs	r0, #0
    2464:	4c8e      	ldr	r4, [pc, #568]	; (26a0 <party_lights+0x264>)
    2466:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    2468:	2301      	movs	r3, #1
    246a:	2201      	movs	r2, #1
    246c:	2104      	movs	r1, #4
    246e:	2000      	movs	r0, #0
    2470:	4c8b      	ldr	r4, [pc, #556]	; (26a0 <party_lights+0x264>)
    2472:	47a0      	blx	r4
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    2474:	2301      	movs	r3, #1
    2476:	2201      	movs	r2, #1
    2478:	2103      	movs	r1, #3
    247a:	2000      	movs	r0, #0
    247c:	4c88      	ldr	r4, [pc, #544]	; (26a0 <party_lights+0x264>)
    247e:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,true);
    2480:	2301      	movs	r3, #1
    2482:	2204      	movs	r2, #4
    2484:	2105      	movs	r1, #5
    2486:	2000      	movs	r0, #0
    2488:	4c85      	ldr	r4, [pc, #532]	; (26a0 <party_lights+0x264>)
    248a:	47a0      	blx	r4
    248c:	e01d      	b.n	24ca <party_lights+0x8e>
	}
	else
	{
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR, SUB_LEFT_PIN,false);
    248e:	2300      	movs	r3, #0
    2490:	2203      	movs	r2, #3
    2492:	2103      	movs	r1, #3
    2494:	2000      	movs	r0, #0
    2496:	4c82      	ldr	r4, [pc, #520]	; (26a0 <party_lights+0x264>)
    2498:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR, SUB_RIGHT_PIN,false);
    249a:	2300      	movs	r3, #0
    249c:	2204      	movs	r2, #4
    249e:	2103      	movs	r1, #3
    24a0:	2000      	movs	r0, #0
    24a2:	4c7f      	ldr	r4, [pc, #508]	; (26a0 <party_lights+0x264>)
    24a4:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    24a6:	2300      	movs	r3, #0
    24a8:	2201      	movs	r2, #1
    24aa:	2104      	movs	r1, #4
    24ac:	2000      	movs	r0, #0
    24ae:	4c7c      	ldr	r4, [pc, #496]	; (26a0 <party_lights+0x264>)
    24b0:	47a0      	blx	r4
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    24b2:	2300      	movs	r3, #0
    24b4:	2201      	movs	r2, #1
    24b6:	2103      	movs	r1, #3
    24b8:	2000      	movs	r0, #0
    24ba:	4c79      	ldr	r4, [pc, #484]	; (26a0 <party_lights+0x264>)
    24bc:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,false);
    24be:	2300      	movs	r3, #0
    24c0:	2204      	movs	r2, #4
    24c2:	2105      	movs	r1, #5
    24c4:	2000      	movs	r0, #0
    24c6:	4c76      	ldr	r4, [pc, #472]	; (26a0 <party_lights+0x264>)
    24c8:	47a0      	blx	r4
	}
	if (party_vals[1] > party_thresholds[1])
    24ca:	687b      	ldr	r3, [r7, #4]
    24cc:	3302      	adds	r3, #2
    24ce:	881a      	ldrh	r2, [r3, #0]
    24d0:	4b72      	ldr	r3, [pc, #456]	; (269c <party_lights+0x260>)
    24d2:	885b      	ldrh	r3, [r3, #2]
    24d4:	429a      	cmp	r2, r3
    24d6:	d918      	bls.n	250a <party_lights+0xce>
	{
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    24d8:	2301      	movs	r3, #1
    24da:	2200      	movs	r2, #0
    24dc:	2102      	movs	r1, #2
    24de:	2000      	movs	r0, #0
    24e0:	4c6f      	ldr	r4, [pc, #444]	; (26a0 <party_lights+0x264>)
    24e2:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    24e4:	2301      	movs	r3, #1
    24e6:	2200      	movs	r2, #0
    24e8:	2101      	movs	r1, #1
    24ea:	2000      	movs	r0, #0
    24ec:	4c6c      	ldr	r4, [pc, #432]	; (26a0 <party_lights+0x264>)
    24ee:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    24f0:	2301      	movs	r3, #1
    24f2:	2200      	movs	r2, #0
    24f4:	2104      	movs	r1, #4
    24f6:	2000      	movs	r0, #0
    24f8:	4c69      	ldr	r4, [pc, #420]	; (26a0 <party_lights+0x264>)
    24fa:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    24fc:	2301      	movs	r3, #1
    24fe:	2200      	movs	r2, #0
    2500:	2103      	movs	r1, #3
    2502:	2000      	movs	r0, #0
    2504:	4c66      	ldr	r4, [pc, #408]	; (26a0 <party_lights+0x264>)
    2506:	47a0      	blx	r4
    2508:	e017      	b.n	253a <party_lights+0xfe>
	}
	else
	{
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,false);
    250a:	2300      	movs	r3, #0
    250c:	2200      	movs	r2, #0
    250e:	2102      	movs	r1, #2
    2510:	2000      	movs	r0, #0
    2512:	4c63      	ldr	r4, [pc, #396]	; (26a0 <party_lights+0x264>)
    2514:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,false);
    2516:	2300      	movs	r3, #0
    2518:	2200      	movs	r2, #0
    251a:	2101      	movs	r1, #1
    251c:	2000      	movs	r0, #0
    251e:	4c60      	ldr	r4, [pc, #384]	; (26a0 <party_lights+0x264>)
    2520:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    2522:	2300      	movs	r3, #0
    2524:	2200      	movs	r2, #0
    2526:	2104      	movs	r1, #4
    2528:	2000      	movs	r0, #0
    252a:	4c5d      	ldr	r4, [pc, #372]	; (26a0 <party_lights+0x264>)
    252c:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    252e:	2300      	movs	r3, #0
    2530:	2200      	movs	r2, #0
    2532:	2103      	movs	r1, #3
    2534:	2000      	movs	r0, #0
    2536:	4c5a      	ldr	r4, [pc, #360]	; (26a0 <party_lights+0x264>)
    2538:	47a0      	blx	r4
	}
	if (party_vals[2] > party_thresholds[2])
    253a:	687b      	ldr	r3, [r7, #4]
    253c:	3304      	adds	r3, #4
    253e:	881a      	ldrh	r2, [r3, #0]
    2540:	4b56      	ldr	r3, [pc, #344]	; (269c <party_lights+0x260>)
    2542:	889b      	ldrh	r3, [r3, #4]
    2544:	429a      	cmp	r2, r3
    2546:	d90c      	bls.n	2562 <party_lights+0x126>
	{
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    2548:	2301      	movs	r3, #1
    254a:	2201      	movs	r2, #1
    254c:	2102      	movs	r1, #2
    254e:	2000      	movs	r0, #0
    2550:	4c53      	ldr	r4, [pc, #332]	; (26a0 <party_lights+0x264>)
    2552:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    2554:	2301      	movs	r3, #1
    2556:	2201      	movs	r2, #1
    2558:	2101      	movs	r1, #1
    255a:	2000      	movs	r0, #0
    255c:	4c50      	ldr	r4, [pc, #320]	; (26a0 <party_lights+0x264>)
    255e:	47a0      	blx	r4
    2560:	e00b      	b.n	257a <party_lights+0x13e>
	}
	else
	{
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    2562:	2300      	movs	r3, #0
    2564:	2201      	movs	r2, #1
    2566:	2102      	movs	r1, #2
    2568:	2000      	movs	r0, #0
    256a:	4c4d      	ldr	r4, [pc, #308]	; (26a0 <party_lights+0x264>)
    256c:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    256e:	2300      	movs	r3, #0
    2570:	2201      	movs	r2, #1
    2572:	2101      	movs	r1, #1
    2574:	2000      	movs	r0, #0
    2576:	4c4a      	ldr	r4, [pc, #296]	; (26a0 <party_lights+0x264>)
    2578:	47a0      	blx	r4
	}
	if (party_vals[3] > party_thresholds[3])
    257a:	687b      	ldr	r3, [r7, #4]
    257c:	3306      	adds	r3, #6
    257e:	881a      	ldrh	r2, [r3, #0]
    2580:	4b46      	ldr	r3, [pc, #280]	; (269c <party_lights+0x260>)
    2582:	88db      	ldrh	r3, [r3, #6]
    2584:	429a      	cmp	r2, r3
    2586:	d912      	bls.n	25ae <party_lights+0x172>
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    2588:	2301      	movs	r3, #1
    258a:	2202      	movs	r2, #2
    258c:	2102      	movs	r1, #2
    258e:	2000      	movs	r0, #0
    2590:	4c43      	ldr	r4, [pc, #268]	; (26a0 <party_lights+0x264>)
    2592:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    2594:	2301      	movs	r3, #1
    2596:	2202      	movs	r2, #2
    2598:	2101      	movs	r1, #1
    259a:	2000      	movs	r0, #0
    259c:	4c40      	ldr	r4, [pc, #256]	; (26a0 <party_lights+0x264>)
    259e:	47a0      	blx	r4
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,true);
    25a0:	2301      	movs	r3, #1
    25a2:	2203      	movs	r2, #3
    25a4:	2105      	movs	r1, #5
    25a6:	2000      	movs	r0, #0
    25a8:	4c3d      	ldr	r4, [pc, #244]	; (26a0 <party_lights+0x264>)
    25aa:	47a0      	blx	r4
    25ac:	e011      	b.n	25d2 <party_lights+0x196>
	}
	else
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    25ae:	2300      	movs	r3, #0
    25b0:	2202      	movs	r2, #2
    25b2:	2102      	movs	r1, #2
    25b4:	2000      	movs	r0, #0
    25b6:	4c3a      	ldr	r4, [pc, #232]	; (26a0 <party_lights+0x264>)
    25b8:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    25ba:	2300      	movs	r3, #0
    25bc:	2202      	movs	r2, #2
    25be:	2101      	movs	r1, #1
    25c0:	2000      	movs	r0, #0
    25c2:	4c37      	ldr	r4, [pc, #220]	; (26a0 <party_lights+0x264>)
    25c4:	47a0      	blx	r4
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,false);
    25c6:	2300      	movs	r3, #0
    25c8:	2203      	movs	r2, #3
    25ca:	2105      	movs	r1, #5
    25cc:	2000      	movs	r0, #0
    25ce:	4c34      	ldr	r4, [pc, #208]	; (26a0 <party_lights+0x264>)
    25d0:	47a0      	blx	r4

	}
	if (party_vals[4] > party_thresholds[4])
    25d2:	687b      	ldr	r3, [r7, #4]
    25d4:	3308      	adds	r3, #8
    25d6:	881a      	ldrh	r2, [r3, #0]
    25d8:	4b30      	ldr	r3, [pc, #192]	; (269c <party_lights+0x260>)
    25da:	891b      	ldrh	r3, [r3, #8]
    25dc:	429a      	cmp	r2, r3
    25de:	d912      	bls.n	2606 <party_lights+0x1ca>
	{
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    25e0:	2301      	movs	r3, #1
    25e2:	2202      	movs	r2, #2
    25e4:	2104      	movs	r1, #4
    25e6:	2000      	movs	r0, #0
    25e8:	4c2d      	ldr	r4, [pc, #180]	; (26a0 <party_lights+0x264>)
    25ea:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    25ec:	2301      	movs	r3, #1
    25ee:	2202      	movs	r2, #2
    25f0:	2103      	movs	r1, #3
    25f2:	2000      	movs	r0, #0
    25f4:	4c2a      	ldr	r4, [pc, #168]	; (26a0 <party_lights+0x264>)
    25f6:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,true);
    25f8:	2301      	movs	r3, #1
    25fa:	2202      	movs	r2, #2
    25fc:	2105      	movs	r1, #5
    25fe:	2000      	movs	r0, #0
    2600:	4c27      	ldr	r4, [pc, #156]	; (26a0 <party_lights+0x264>)
    2602:	47a0      	blx	r4
    2604:	e011      	b.n	262a <party_lights+0x1ee>
	}
	else
	{
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,false);
    2606:	2300      	movs	r3, #0
    2608:	2202      	movs	r2, #2
    260a:	2104      	movs	r1, #4
    260c:	2000      	movs	r0, #0
    260e:	4c24      	ldr	r4, [pc, #144]	; (26a0 <party_lights+0x264>)
    2610:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,false);
    2612:	2300      	movs	r3, #0
    2614:	2202      	movs	r2, #2
    2616:	2103      	movs	r1, #3
    2618:	2000      	movs	r0, #0
    261a:	4c21      	ldr	r4, [pc, #132]	; (26a0 <party_lights+0x264>)
    261c:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,false);
    261e:	2300      	movs	r3, #0
    2620:	2202      	movs	r2, #2
    2622:	2105      	movs	r1, #5
    2624:	2000      	movs	r0, #0
    2626:	4c1e      	ldr	r4, [pc, #120]	; (26a0 <party_lights+0x264>)
    2628:	47a0      	blx	r4
	}
	if (party_vals[5] > party_thresholds[5])
    262a:	687b      	ldr	r3, [r7, #4]
    262c:	330a      	adds	r3, #10
    262e:	881a      	ldrh	r2, [r3, #0]
    2630:	4b1a      	ldr	r3, [pc, #104]	; (269c <party_lights+0x260>)
    2632:	895b      	ldrh	r3, [r3, #10]
    2634:	429a      	cmp	r2, r3
    2636:	d90c      	bls.n	2652 <party_lights+0x216>
	{
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    2638:	2301      	movs	r3, #1
    263a:	2203      	movs	r2, #3
    263c:	2101      	movs	r1, #1
    263e:	2000      	movs	r0, #0
    2640:	4c17      	ldr	r4, [pc, #92]	; (26a0 <party_lights+0x264>)
    2642:	47a0      	blx	r4
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    2644:	2301      	movs	r3, #1
    2646:	2203      	movs	r2, #3
    2648:	2102      	movs	r1, #2
    264a:	2000      	movs	r0, #0
    264c:	4c14      	ldr	r4, [pc, #80]	; (26a0 <party_lights+0x264>)
    264e:	47a0      	blx	r4
    2650:	e00b      	b.n	266a <party_lights+0x22e>
	}
	else
	{
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    2652:	2300      	movs	r3, #0
    2654:	2203      	movs	r2, #3
    2656:	2101      	movs	r1, #1
    2658:	2000      	movs	r0, #0
    265a:	4c11      	ldr	r4, [pc, #68]	; (26a0 <party_lights+0x264>)
    265c:	47a0      	blx	r4
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    265e:	2300      	movs	r3, #0
    2660:	2203      	movs	r2, #3
    2662:	2102      	movs	r1, #2
    2664:	2000      	movs	r0, #0
    2666:	4c0e      	ldr	r4, [pc, #56]	; (26a0 <party_lights+0x264>)
    2668:	47a0      	blx	r4
	}
	if (party_vals[6] > party_thresholds[6])
    266a:	687b      	ldr	r3, [r7, #4]
    266c:	330c      	adds	r3, #12
    266e:	881a      	ldrh	r2, [r3, #0]
    2670:	4b0a      	ldr	r3, [pc, #40]	; (269c <party_lights+0x260>)
    2672:	899b      	ldrh	r3, [r3, #12]
    2674:	429a      	cmp	r2, r3
    2676:	d906      	bls.n	2686 <party_lights+0x24a>
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    2678:	2301      	movs	r3, #1
    267a:	2204      	movs	r2, #4
    267c:	2101      	movs	r1, #1
    267e:	2000      	movs	r0, #0
    2680:	4c07      	ldr	r4, [pc, #28]	; (26a0 <party_lights+0x264>)
    2682:	47a0      	blx	r4
	}
	else
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
	}
}
    2684:	e005      	b.n	2692 <party_lights+0x256>
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    2686:	2300      	movs	r3, #0
    2688:	2204      	movs	r2, #4
    268a:	2101      	movs	r1, #1
    268c:	2000      	movs	r0, #0
    268e:	4c04      	ldr	r4, [pc, #16]	; (26a0 <party_lights+0x264>)
    2690:	47a0      	blx	r4
}
    2692:	46c0      	nop			; (mov r8, r8)
    2694:	46bd      	mov	sp, r7
    2696:	b003      	add	sp, #12
    2698:	bd90      	pop	{r4, r7, pc}
    269a:	46c0      	nop			; (mov r8, r8)
    269c:	20000a14 	.word	0x20000a14
    26a0:	00002f35 	.word	0x00002f35

000026a4 <flashy_flash1>:
	configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,party_vals[band]>party_thresholds[band]+300);
	configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,party_vals[band]>party_thresholds[band]+300);
}

void flashy_flash1()
{
    26a4:	b5b0      	push	{r4, r5, r7, lr}
    26a6:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
    26a8:	4b48      	ldr	r3, [pc, #288]	; (27cc <flashy_flash1+0x128>)
    26aa:	781b      	ldrb	r3, [r3, #0]
    26ac:	2b0c      	cmp	r3, #12
    26ae:	d900      	bls.n	26b2 <flashy_flash1+0xe>
    26b0:	e07c      	b.n	27ac <flashy_flash1+0x108>
    26b2:	009a      	lsls	r2, r3, #2
    26b4:	4b46      	ldr	r3, [pc, #280]	; (27d0 <flashy_flash1+0x12c>)
    26b6:	18d3      	adds	r3, r2, r3
    26b8:	681b      	ldr	r3, [r3, #0]
    26ba:	469f      	mov	pc, r3
	{
		case 0:
			reset_all_lights();
    26bc:	4b45      	ldr	r3, [pc, #276]	; (27d4 <flashy_flash1+0x130>)
    26be:	4798      	blx	r3
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    26c0:	2301      	movs	r3, #1
    26c2:	2201      	movs	r2, #1
    26c4:	2102      	movs	r1, #2
    26c6:	2000      	movs	r0, #0
    26c8:	4c43      	ldr	r4, [pc, #268]	; (27d8 <flashy_flash1+0x134>)
    26ca:	47a0      	blx	r4
			break;
    26cc:	e074      	b.n	27b8 <flashy_flash1+0x114>
		case 1:
			reset_all_lights();
    26ce:	4b41      	ldr	r3, [pc, #260]	; (27d4 <flashy_flash1+0x130>)
    26d0:	4798      	blx	r3
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    26d2:	2301      	movs	r3, #1
    26d4:	2202      	movs	r2, #2
    26d6:	2102      	movs	r1, #2
    26d8:	2000      	movs	r0, #0
    26da:	4c3f      	ldr	r4, [pc, #252]	; (27d8 <flashy_flash1+0x134>)
    26dc:	47a0      	blx	r4
			break;
    26de:	e06b      	b.n	27b8 <flashy_flash1+0x114>
		case 2:
			reset_all_lights();
    26e0:	4b3c      	ldr	r3, [pc, #240]	; (27d4 <flashy_flash1+0x130>)
    26e2:	4798      	blx	r3
			configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    26e4:	2301      	movs	r3, #1
    26e6:	2200      	movs	r2, #0
    26e8:	2102      	movs	r1, #2
    26ea:	2000      	movs	r0, #0
    26ec:	4c3a      	ldr	r4, [pc, #232]	; (27d8 <flashy_flash1+0x134>)
    26ee:	47a0      	blx	r4
			break;
    26f0:	e062      	b.n	27b8 <flashy_flash1+0x114>
		case 3:
			reset_all_lights();
    26f2:	4b38      	ldr	r3, [pc, #224]	; (27d4 <flashy_flash1+0x130>)
    26f4:	4798      	blx	r3
			configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    26f6:	2301      	movs	r3, #1
    26f8:	2200      	movs	r2, #0
    26fa:	2101      	movs	r1, #1
    26fc:	2000      	movs	r0, #0
    26fe:	4c36      	ldr	r4, [pc, #216]	; (27d8 <flashy_flash1+0x134>)
    2700:	47a0      	blx	r4
			state++;
    2702:	4b32      	ldr	r3, [pc, #200]	; (27cc <flashy_flash1+0x128>)
    2704:	781b      	ldrb	r3, [r3, #0]
    2706:	3301      	adds	r3, #1
    2708:	b2da      	uxtb	r2, r3
    270a:	4b30      	ldr	r3, [pc, #192]	; (27cc <flashy_flash1+0x128>)
    270c:	701a      	strb	r2, [r3, #0]
			break;
    270e:	e053      	b.n	27b8 <flashy_flash1+0x114>
		case 4:
			reset_all_lights();
    2710:	4b30      	ldr	r3, [pc, #192]	; (27d4 <flashy_flash1+0x130>)
    2712:	4798      	blx	r3
			configure_pin(HIGH_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    2714:	2301      	movs	r3, #1
    2716:	2201      	movs	r2, #1
    2718:	2101      	movs	r1, #1
    271a:	2000      	movs	r0, #0
    271c:	4c2e      	ldr	r4, [pc, #184]	; (27d8 <flashy_flash1+0x134>)
    271e:	47a0      	blx	r4
			break;
    2720:	e04a      	b.n	27b8 <flashy_flash1+0x114>
		case 5:
			reset_all_lights();
    2722:	4b2c      	ldr	r3, [pc, #176]	; (27d4 <flashy_flash1+0x130>)
    2724:	4798      	blx	r3
			configure_pin(LOW_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    2726:	2301      	movs	r3, #1
    2728:	2202      	movs	r2, #2
    272a:	2101      	movs	r1, #1
    272c:	2000      	movs	r0, #0
    272e:	4c2a      	ldr	r4, [pc, #168]	; (27d8 <flashy_flash1+0x134>)
    2730:	47a0      	blx	r4
			break;
    2732:	e041      	b.n	27b8 <flashy_flash1+0x114>
		case 6:
			reset_all_lights();
    2734:	4b27      	ldr	r3, [pc, #156]	; (27d4 <flashy_flash1+0x130>)
    2736:	4798      	blx	r3
			configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    2738:	2301      	movs	r3, #1
    273a:	2202      	movs	r2, #2
    273c:	2103      	movs	r1, #3
    273e:	2000      	movs	r0, #0
    2740:	4c25      	ldr	r4, [pc, #148]	; (27d8 <flashy_flash1+0x134>)
    2742:	47a0      	blx	r4
			break;
    2744:	e038      	b.n	27b8 <flashy_flash1+0x114>
		case 7:
			reset_all_lights();
    2746:	4b23      	ldr	r3, [pc, #140]	; (27d4 <flashy_flash1+0x130>)
    2748:	4798      	blx	r3
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    274a:	2301      	movs	r3, #1
    274c:	2201      	movs	r2, #1
    274e:	2103      	movs	r1, #3
    2750:	2000      	movs	r0, #0
    2752:	4c21      	ldr	r4, [pc, #132]	; (27d8 <flashy_flash1+0x134>)
    2754:	47a0      	blx	r4
			break;
    2756:	e02f      	b.n	27b8 <flashy_flash1+0x114>
		case 8:
			reset_all_lights();
    2758:	4b1e      	ldr	r3, [pc, #120]	; (27d4 <flashy_flash1+0x130>)
    275a:	4798      	blx	r3
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    275c:	2301      	movs	r3, #1
    275e:	2200      	movs	r2, #0
    2760:	2103      	movs	r1, #3
    2762:	2000      	movs	r0, #0
    2764:	4c1c      	ldr	r4, [pc, #112]	; (27d8 <flashy_flash1+0x134>)
    2766:	47a0      	blx	r4
			break;
    2768:	e026      	b.n	27b8 <flashy_flash1+0x114>
		case 9:
			reset_all_lights();
    276a:	4b1a      	ldr	r3, [pc, #104]	; (27d4 <flashy_flash1+0x130>)
    276c:	4798      	blx	r3
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    276e:	2301      	movs	r3, #1
    2770:	2200      	movs	r2, #0
    2772:	2104      	movs	r1, #4
    2774:	2000      	movs	r0, #0
    2776:	4c18      	ldr	r4, [pc, #96]	; (27d8 <flashy_flash1+0x134>)
    2778:	47a0      	blx	r4
			break;
    277a:	e01d      	b.n	27b8 <flashy_flash1+0x114>
		case 10:
			reset_all_lights();
    277c:	4b15      	ldr	r3, [pc, #84]	; (27d4 <flashy_flash1+0x130>)
    277e:	4798      	blx	r3
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    2780:	2301      	movs	r3, #1
    2782:	2201      	movs	r2, #1
    2784:	2104      	movs	r1, #4
    2786:	2000      	movs	r0, #0
    2788:	4c13      	ldr	r4, [pc, #76]	; (27d8 <flashy_flash1+0x134>)
    278a:	47a0      	blx	r4
			break;
    278c:	e014      	b.n	27b8 <flashy_flash1+0x114>
		case 11:
			reset_all_lights();
    278e:	4b11      	ldr	r3, [pc, #68]	; (27d4 <flashy_flash1+0x130>)
    2790:	4798      	blx	r3
			configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    2792:	2301      	movs	r3, #1
    2794:	2202      	movs	r2, #2
    2796:	2104      	movs	r1, #4
    2798:	2000      	movs	r0, #0
    279a:	4c0f      	ldr	r4, [pc, #60]	; (27d8 <flashy_flash1+0x134>)
    279c:	47a0      	blx	r4
			break;
    279e:	e00b      	b.n	27b8 <flashy_flash1+0x114>
		case 12:
			reset_all_lights();
    27a0:	4b0c      	ldr	r3, [pc, #48]	; (27d4 <flashy_flash1+0x130>)
    27a2:	4798      	blx	r3
			state = 0;
    27a4:	4b09      	ldr	r3, [pc, #36]	; (27cc <flashy_flash1+0x128>)
    27a6:	2200      	movs	r2, #0
    27a8:	701a      	strb	r2, [r3, #0]
			break;
    27aa:	e005      	b.n	27b8 <flashy_flash1+0x114>
		default:
			reset_all_lights();
    27ac:	4b09      	ldr	r3, [pc, #36]	; (27d4 <flashy_flash1+0x130>)
    27ae:	4798      	blx	r3
			state = 0;
    27b0:	4b06      	ldr	r3, [pc, #24]	; (27cc <flashy_flash1+0x128>)
    27b2:	2200      	movs	r2, #0
    27b4:	701a      	strb	r2, [r3, #0]
			break;
    27b6:	46c0      	nop			; (mov r8, r8)
	}
	state++;
    27b8:	4b04      	ldr	r3, [pc, #16]	; (27cc <flashy_flash1+0x128>)
    27ba:	781b      	ldrb	r3, [r3, #0]
    27bc:	3301      	adds	r3, #1
    27be:	b2da      	uxtb	r2, r3
    27c0:	4b02      	ldr	r3, [pc, #8]	; (27cc <flashy_flash1+0x128>)
    27c2:	701a      	strb	r2, [r3, #0]
}
    27c4:	46c0      	nop			; (mov r8, r8)
    27c6:	46bd      	mov	sp, r7
    27c8:	bdb0      	pop	{r4, r5, r7, pc}
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	20000560 	.word	0x20000560
    27d0:	00006f40 	.word	0x00006f40
    27d4:	00002cbd 	.word	0x00002cbd
    27d8:	00002f35 	.word	0x00002f35

000027dc <flashy_flash2>:

void flashy_flash2()
{
    27dc:	b5b0      	push	{r4, r5, r7, lr}
    27de:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
    27e0:	4b8e      	ldr	r3, [pc, #568]	; (2a1c <flashy_flash2+0x240>)
    27e2:	781b      	ldrb	r3, [r3, #0]
    27e4:	2b0a      	cmp	r3, #10
    27e6:	d900      	bls.n	27ea <flashy_flash2+0xe>
    27e8:	e110      	b.n	2a0c <flashy_flash2+0x230>
    27ea:	009a      	lsls	r2, r3, #2
    27ec:	4b8c      	ldr	r3, [pc, #560]	; (2a20 <flashy_flash2+0x244>)
    27ee:	18d3      	adds	r3, r2, r3
    27f0:	681b      	ldr	r3, [r3, #0]
    27f2:	469f      	mov	pc, r3
	{
		case 0:
			reset_all_lights();
    27f4:	4b8b      	ldr	r3, [pc, #556]	; (2a24 <flashy_flash2+0x248>)
    27f6:	4798      	blx	r3
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    27f8:	2301      	movs	r3, #1
    27fa:	2204      	movs	r2, #4
    27fc:	2101      	movs	r1, #1
    27fe:	2000      	movs	r0, #0
    2800:	4c89      	ldr	r4, [pc, #548]	; (2a28 <flashy_flash2+0x24c>)
    2802:	47a0      	blx	r4
			state++;
    2804:	4b85      	ldr	r3, [pc, #532]	; (2a1c <flashy_flash2+0x240>)
    2806:	781b      	ldrb	r3, [r3, #0]
    2808:	3301      	adds	r3, #1
    280a:	b2da      	uxtb	r2, r3
    280c:	4b83      	ldr	r3, [pc, #524]	; (2a1c <flashy_flash2+0x240>)
    280e:	701a      	strb	r2, [r3, #0]
			break;
    2810:	e101      	b.n	2a16 <flashy_flash2+0x23a>
		case 1:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    2812:	2300      	movs	r3, #0
    2814:	2204      	movs	r2, #4
    2816:	2101      	movs	r1, #1
    2818:	2000      	movs	r0, #0
    281a:	4c83      	ldr	r4, [pc, #524]	; (2a28 <flashy_flash2+0x24c>)
    281c:	47a0      	blx	r4
			state++;
    281e:	4b7f      	ldr	r3, [pc, #508]	; (2a1c <flashy_flash2+0x240>)
    2820:	781b      	ldrb	r3, [r3, #0]
    2822:	3301      	adds	r3, #1
    2824:	b2da      	uxtb	r2, r3
    2826:	4b7d      	ldr	r3, [pc, #500]	; (2a1c <flashy_flash2+0x240>)
    2828:	701a      	strb	r2, [r3, #0]
			break;
    282a:	e0f4      	b.n	2a16 <flashy_flash2+0x23a>
		case 2:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    282c:	2301      	movs	r3, #1
    282e:	2204      	movs	r2, #4
    2830:	2101      	movs	r1, #1
    2832:	2000      	movs	r0, #0
    2834:	4c7c      	ldr	r4, [pc, #496]	; (2a28 <flashy_flash2+0x24c>)
    2836:	47a0      	blx	r4
			state++;
    2838:	4b78      	ldr	r3, [pc, #480]	; (2a1c <flashy_flash2+0x240>)
    283a:	781b      	ldrb	r3, [r3, #0]
    283c:	3301      	adds	r3, #1
    283e:	b2da      	uxtb	r2, r3
    2840:	4b76      	ldr	r3, [pc, #472]	; (2a1c <flashy_flash2+0x240>)
    2842:	701a      	strb	r2, [r3, #0]
			break;
    2844:	e0e7      	b.n	2a16 <flashy_flash2+0x23a>
		case 3:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    2846:	2300      	movs	r3, #0
    2848:	2204      	movs	r2, #4
    284a:	2101      	movs	r1, #1
    284c:	2000      	movs	r0, #0
    284e:	4c76      	ldr	r4, [pc, #472]	; (2a28 <flashy_flash2+0x24c>)
    2850:	47a0      	blx	r4
			state++;
    2852:	4b72      	ldr	r3, [pc, #456]	; (2a1c <flashy_flash2+0x240>)
    2854:	781b      	ldrb	r3, [r3, #0]
    2856:	3301      	adds	r3, #1
    2858:	b2da      	uxtb	r2, r3
    285a:	4b70      	ldr	r3, [pc, #448]	; (2a1c <flashy_flash2+0x240>)
    285c:	701a      	strb	r2, [r3, #0]
			break;
    285e:	e0da      	b.n	2a16 <flashy_flash2+0x23a>
		case 4:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    2860:	2301      	movs	r3, #1
    2862:	2204      	movs	r2, #4
    2864:	2101      	movs	r1, #1
    2866:	2000      	movs	r0, #0
    2868:	4c6f      	ldr	r4, [pc, #444]	; (2a28 <flashy_flash2+0x24c>)
    286a:	47a0      	blx	r4
			state++;
    286c:	4b6b      	ldr	r3, [pc, #428]	; (2a1c <flashy_flash2+0x240>)
    286e:	781b      	ldrb	r3, [r3, #0]
    2870:	3301      	adds	r3, #1
    2872:	b2da      	uxtb	r2, r3
    2874:	4b69      	ldr	r3, [pc, #420]	; (2a1c <flashy_flash2+0x240>)
    2876:	701a      	strb	r2, [r3, #0]
			break;
    2878:	e0cd      	b.n	2a16 <flashy_flash2+0x23a>
		case 5:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    287a:	2300      	movs	r3, #0
    287c:	2204      	movs	r2, #4
    287e:	2101      	movs	r1, #1
    2880:	2000      	movs	r0, #0
    2882:	4c69      	ldr	r4, [pc, #420]	; (2a28 <flashy_flash2+0x24c>)
    2884:	47a0      	blx	r4
			state++;
    2886:	4b65      	ldr	r3, [pc, #404]	; (2a1c <flashy_flash2+0x240>)
    2888:	781b      	ldrb	r3, [r3, #0]
    288a:	3301      	adds	r3, #1
    288c:	b2da      	uxtb	r2, r3
    288e:	4b63      	ldr	r3, [pc, #396]	; (2a1c <flashy_flash2+0x240>)
    2890:	701a      	strb	r2, [r3, #0]
			break;
    2892:	e0c0      	b.n	2a16 <flashy_flash2+0x23a>
		case 6:
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    2894:	2301      	movs	r3, #1
    2896:	2202      	movs	r2, #2
    2898:	2101      	movs	r1, #1
    289a:	2000      	movs	r0, #0
    289c:	4c62      	ldr	r4, [pc, #392]	; (2a28 <flashy_flash2+0x24c>)
    289e:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    28a0:	2301      	movs	r3, #1
    28a2:	2202      	movs	r2, #2
    28a4:	2102      	movs	r1, #2
    28a6:	2000      	movs	r0, #0
    28a8:	4c5f      	ldr	r4, [pc, #380]	; (2a28 <flashy_flash2+0x24c>)
    28aa:	47a0      	blx	r4
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    28ac:	2301      	movs	r3, #1
    28ae:	2201      	movs	r2, #1
    28b0:	2103      	movs	r1, #3
    28b2:	2000      	movs	r0, #0
    28b4:	4c5c      	ldr	r4, [pc, #368]	; (2a28 <flashy_flash2+0x24c>)
    28b6:	47a0      	blx	r4
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    28b8:	2301      	movs	r3, #1
    28ba:	2201      	movs	r2, #1
    28bc:	2104      	movs	r1, #4
    28be:	2000      	movs	r0, #0
    28c0:	4c59      	ldr	r4, [pc, #356]	; (2a28 <flashy_flash2+0x24c>)
    28c2:	47a0      	blx	r4
			state++;
    28c4:	4b55      	ldr	r3, [pc, #340]	; (2a1c <flashy_flash2+0x240>)
    28c6:	781b      	ldrb	r3, [r3, #0]
    28c8:	3301      	adds	r3, #1
    28ca:	b2da      	uxtb	r2, r3
    28cc:	4b53      	ldr	r3, [pc, #332]	; (2a1c <flashy_flash2+0x240>)
    28ce:	701a      	strb	r2, [r3, #0]
			break;
    28d0:	e0a1      	b.n	2a16 <flashy_flash2+0x23a>
		case 7:
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    28d2:	2300      	movs	r3, #0
    28d4:	2202      	movs	r2, #2
    28d6:	2101      	movs	r1, #1
    28d8:	2000      	movs	r0, #0
    28da:	4c53      	ldr	r4, [pc, #332]	; (2a28 <flashy_flash2+0x24c>)
    28dc:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    28de:	2300      	movs	r3, #0
    28e0:	2202      	movs	r2, #2
    28e2:	2102      	movs	r1, #2
    28e4:	2000      	movs	r0, #0
    28e6:	4c50      	ldr	r4, [pc, #320]	; (2a28 <flashy_flash2+0x24c>)
    28e8:	47a0      	blx	r4
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    28ea:	2301      	movs	r3, #1
    28ec:	2201      	movs	r2, #1
    28ee:	2101      	movs	r1, #1
    28f0:	2000      	movs	r0, #0
    28f2:	4c4d      	ldr	r4, [pc, #308]	; (2a28 <flashy_flash2+0x24c>)
    28f4:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    28f6:	2301      	movs	r3, #1
    28f8:	2201      	movs	r2, #1
    28fa:	2102      	movs	r1, #2
    28fc:	2000      	movs	r0, #0
    28fe:	4c4a      	ldr	r4, [pc, #296]	; (2a28 <flashy_flash2+0x24c>)
    2900:	47a0      	blx	r4
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    2902:	2300      	movs	r3, #0
    2904:	2201      	movs	r2, #1
    2906:	2103      	movs	r1, #3
    2908:	2000      	movs	r0, #0
    290a:	4c47      	ldr	r4, [pc, #284]	; (2a28 <flashy_flash2+0x24c>)
    290c:	47a0      	blx	r4
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    290e:	2300      	movs	r3, #0
    2910:	2201      	movs	r2, #1
    2912:	2104      	movs	r1, #4
    2914:	2000      	movs	r0, #0
    2916:	4c44      	ldr	r4, [pc, #272]	; (2a28 <flashy_flash2+0x24c>)
    2918:	47a0      	blx	r4
			state++;
    291a:	4b40      	ldr	r3, [pc, #256]	; (2a1c <flashy_flash2+0x240>)
    291c:	781b      	ldrb	r3, [r3, #0]
    291e:	3301      	adds	r3, #1
    2920:	b2da      	uxtb	r2, r3
    2922:	4b3e      	ldr	r3, [pc, #248]	; (2a1c <flashy_flash2+0x240>)
    2924:	701a      	strb	r2, [r3, #0]
			break;
    2926:	e076      	b.n	2a16 <flashy_flash2+0x23a>
		case 8:
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    2928:	2300      	movs	r3, #0
    292a:	2201      	movs	r2, #1
    292c:	2101      	movs	r1, #1
    292e:	2000      	movs	r0, #0
    2930:	4c3d      	ldr	r4, [pc, #244]	; (2a28 <flashy_flash2+0x24c>)
    2932:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    2934:	2300      	movs	r3, #0
    2936:	2201      	movs	r2, #1
    2938:	2102      	movs	r1, #2
    293a:	2000      	movs	r0, #0
    293c:	4c3a      	ldr	r4, [pc, #232]	; (2a28 <flashy_flash2+0x24c>)
    293e:	47a0      	blx	r4
			configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    2940:	2301      	movs	r3, #1
    2942:	2203      	movs	r2, #3
    2944:	2101      	movs	r1, #1
    2946:	2000      	movs	r0, #0
    2948:	4c37      	ldr	r4, [pc, #220]	; (2a28 <flashy_flash2+0x24c>)
    294a:	47a0      	blx	r4
			configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    294c:	2301      	movs	r3, #1
    294e:	2203      	movs	r2, #3
    2950:	2102      	movs	r1, #2
    2952:	2000      	movs	r0, #0
    2954:	4c34      	ldr	r4, [pc, #208]	; (2a28 <flashy_flash2+0x24c>)
    2956:	47a0      	blx	r4
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    2958:	2301      	movs	r3, #1
    295a:	2200      	movs	r2, #0
    295c:	2103      	movs	r1, #3
    295e:	2000      	movs	r0, #0
    2960:	4c31      	ldr	r4, [pc, #196]	; (2a28 <flashy_flash2+0x24c>)
    2962:	47a0      	blx	r4
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    2964:	2301      	movs	r3, #1
    2966:	2200      	movs	r2, #0
    2968:	2104      	movs	r1, #4
    296a:	2000      	movs	r0, #0
    296c:	4c2e      	ldr	r4, [pc, #184]	; (2a28 <flashy_flash2+0x24c>)
    296e:	47a0      	blx	r4
			state++;
    2970:	4b2a      	ldr	r3, [pc, #168]	; (2a1c <flashy_flash2+0x240>)
    2972:	781b      	ldrb	r3, [r3, #0]
    2974:	3301      	adds	r3, #1
    2976:	b2da      	uxtb	r2, r3
    2978:	4b28      	ldr	r3, [pc, #160]	; (2a1c <flashy_flash2+0x240>)
    297a:	701a      	strb	r2, [r3, #0]
			break;
    297c:	e04b      	b.n	2a16 <flashy_flash2+0x23a>
		case 9:
			configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    297e:	2300      	movs	r3, #0
    2980:	2203      	movs	r2, #3
    2982:	2101      	movs	r1, #1
    2984:	2000      	movs	r0, #0
    2986:	4c28      	ldr	r4, [pc, #160]	; (2a28 <flashy_flash2+0x24c>)
    2988:	47a0      	blx	r4
			configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    298a:	2300      	movs	r3, #0
    298c:	2203      	movs	r2, #3
    298e:	2102      	movs	r1, #2
    2990:	2000      	movs	r0, #0
    2992:	4c25      	ldr	r4, [pc, #148]	; (2a28 <flashy_flash2+0x24c>)
    2994:	47a0      	blx	r4
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    2996:	2301      	movs	r3, #1
    2998:	2201      	movs	r2, #1
    299a:	2101      	movs	r1, #1
    299c:	2000      	movs	r0, #0
    299e:	4c22      	ldr	r4, [pc, #136]	; (2a28 <flashy_flash2+0x24c>)
    29a0:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    29a2:	2301      	movs	r3, #1
    29a4:	2201      	movs	r2, #1
    29a6:	2102      	movs	r1, #2
    29a8:	2000      	movs	r0, #0
    29aa:	4c1f      	ldr	r4, [pc, #124]	; (2a28 <flashy_flash2+0x24c>)
    29ac:	47a0      	blx	r4
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    29ae:	2300      	movs	r3, #0
    29b0:	2200      	movs	r2, #0
    29b2:	2103      	movs	r1, #3
    29b4:	2000      	movs	r0, #0
    29b6:	4c1c      	ldr	r4, [pc, #112]	; (2a28 <flashy_flash2+0x24c>)
    29b8:	47a0      	blx	r4
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    29ba:	2300      	movs	r3, #0
    29bc:	2200      	movs	r2, #0
    29be:	2104      	movs	r1, #4
    29c0:	2000      	movs	r0, #0
    29c2:	4c19      	ldr	r4, [pc, #100]	; (2a28 <flashy_flash2+0x24c>)
    29c4:	47a0      	blx	r4
			state++;
    29c6:	4b15      	ldr	r3, [pc, #84]	; (2a1c <flashy_flash2+0x240>)
    29c8:	781b      	ldrb	r3, [r3, #0]
    29ca:	3301      	adds	r3, #1
    29cc:	b2da      	uxtb	r2, r3
    29ce:	4b13      	ldr	r3, [pc, #76]	; (2a1c <flashy_flash2+0x240>)
    29d0:	701a      	strb	r2, [r3, #0]
			break;
    29d2:	e020      	b.n	2a16 <flashy_flash2+0x23a>
		case 10:
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    29d4:	2300      	movs	r3, #0
    29d6:	2201      	movs	r2, #1
    29d8:	2101      	movs	r1, #1
    29da:	2000      	movs	r0, #0
    29dc:	4c12      	ldr	r4, [pc, #72]	; (2a28 <flashy_flash2+0x24c>)
    29de:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    29e0:	2300      	movs	r3, #0
    29e2:	2201      	movs	r2, #1
    29e4:	2102      	movs	r1, #2
    29e6:	2000      	movs	r0, #0
    29e8:	4c0f      	ldr	r4, [pc, #60]	; (2a28 <flashy_flash2+0x24c>)
    29ea:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    29ec:	2301      	movs	r3, #1
    29ee:	2202      	movs	r2, #2
    29f0:	2101      	movs	r1, #1
    29f2:	2000      	movs	r0, #0
    29f4:	4c0c      	ldr	r4, [pc, #48]	; (2a28 <flashy_flash2+0x24c>)
    29f6:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    29f8:	2301      	movs	r3, #1
    29fa:	2202      	movs	r2, #2
    29fc:	2102      	movs	r1, #2
    29fe:	2000      	movs	r0, #0
    2a00:	4c09      	ldr	r4, [pc, #36]	; (2a28 <flashy_flash2+0x24c>)
    2a02:	47a0      	blx	r4
			state = 0;
    2a04:	4b05      	ldr	r3, [pc, #20]	; (2a1c <flashy_flash2+0x240>)
    2a06:	2200      	movs	r2, #0
    2a08:	701a      	strb	r2, [r3, #0]
			break;
    2a0a:	e004      	b.n	2a16 <flashy_flash2+0x23a>
		default:
			reset_all_lights();
    2a0c:	4b05      	ldr	r3, [pc, #20]	; (2a24 <flashy_flash2+0x248>)
    2a0e:	4798      	blx	r3
			state = 0;
    2a10:	4b02      	ldr	r3, [pc, #8]	; (2a1c <flashy_flash2+0x240>)
    2a12:	2200      	movs	r2, #0
    2a14:	701a      	strb	r2, [r3, #0]
	}
}
    2a16:	46c0      	nop			; (mov r8, r8)
    2a18:	46bd      	mov	sp, r7
    2a1a:	bdb0      	pop	{r4, r5, r7, pc}
    2a1c:	20000561 	.word	0x20000561
    2a20:	00006f74 	.word	0x00006f74
    2a24:	00002cbd 	.word	0x00002cbd
    2a28:	00002f35 	.word	0x00002f35

00002a2c <flashy_fades>:

void flashy_fades()
{
    2a2c:	b5b0      	push	{r4, r5, r7, lr}
    2a2e:	af00      	add	r7, sp, #0
	//static uint8_t pwm_val = 0;
	static uint8_t duty_cycle = PWM_FREQ/4;
	
	if (pwm_count > duty_cycle)
    2a30:	4b61      	ldr	r3, [pc, #388]	; (2bb8 <flashy_fades+0x18c>)
    2a32:	781b      	ldrb	r3, [r3, #0]
    2a34:	001a      	movs	r2, r3
    2a36:	4b61      	ldr	r3, [pc, #388]	; (2bbc <flashy_fades+0x190>)
    2a38:	681b      	ldr	r3, [r3, #0]
    2a3a:	429a      	cmp	r2, r3
    2a3c:	da54      	bge.n	2ae8 <flashy_fades+0xbc>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    2a3e:	2301      	movs	r3, #1
    2a40:	2200      	movs	r2, #0
    2a42:	2101      	movs	r1, #1
    2a44:	2000      	movs	r0, #0
    2a46:	4c5e      	ldr	r4, [pc, #376]	; (2bc0 <flashy_fades+0x194>)
    2a48:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    2a4a:	2301      	movs	r3, #1
    2a4c:	2200      	movs	r2, #0
    2a4e:	2102      	movs	r1, #2
    2a50:	2000      	movs	r0, #0
    2a52:	4c5b      	ldr	r4, [pc, #364]	; (2bc0 <flashy_fades+0x194>)
    2a54:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    2a56:	2301      	movs	r3, #1
    2a58:	2200      	movs	r2, #0
    2a5a:	2103      	movs	r1, #3
    2a5c:	2000      	movs	r0, #0
    2a5e:	4c58      	ldr	r4, [pc, #352]	; (2bc0 <flashy_fades+0x194>)
    2a60:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    2a62:	2301      	movs	r3, #1
    2a64:	2200      	movs	r2, #0
    2a66:	2104      	movs	r1, #4
    2a68:	2000      	movs	r0, #0
    2a6a:	4c55      	ldr	r4, [pc, #340]	; (2bc0 <flashy_fades+0x194>)
    2a6c:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    2a6e:	2301      	movs	r3, #1
    2a70:	2201      	movs	r2, #1
    2a72:	2102      	movs	r1, #2
    2a74:	2000      	movs	r0, #0
    2a76:	4c52      	ldr	r4, [pc, #328]	; (2bc0 <flashy_fades+0x194>)
    2a78:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    2a7a:	2301      	movs	r3, #1
    2a7c:	2201      	movs	r2, #1
    2a7e:	2101      	movs	r1, #1
    2a80:	2000      	movs	r0, #0
    2a82:	4c4f      	ldr	r4, [pc, #316]	; (2bc0 <flashy_fades+0x194>)
    2a84:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    2a86:	2301      	movs	r3, #1
    2a88:	2202      	movs	r2, #2
    2a8a:	2102      	movs	r1, #2
    2a8c:	2000      	movs	r0, #0
    2a8e:	4c4c      	ldr	r4, [pc, #304]	; (2bc0 <flashy_fades+0x194>)
    2a90:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    2a92:	2301      	movs	r3, #1
    2a94:	2202      	movs	r2, #2
    2a96:	2101      	movs	r1, #1
    2a98:	2000      	movs	r0, #0
    2a9a:	4c49      	ldr	r4, [pc, #292]	; (2bc0 <flashy_fades+0x194>)
    2a9c:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    2a9e:	2301      	movs	r3, #1
    2aa0:	2202      	movs	r2, #2
    2aa2:	2104      	movs	r1, #4
    2aa4:	2000      	movs	r0, #0
    2aa6:	4c46      	ldr	r4, [pc, #280]	; (2bc0 <flashy_fades+0x194>)
    2aa8:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    2aaa:	2301      	movs	r3, #1
    2aac:	2202      	movs	r2, #2
    2aae:	2103      	movs	r1, #3
    2ab0:	2000      	movs	r0, #0
    2ab2:	4c43      	ldr	r4, [pc, #268]	; (2bc0 <flashy_fades+0x194>)
    2ab4:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    2ab6:	2301      	movs	r3, #1
    2ab8:	2201      	movs	r2, #1
    2aba:	2103      	movs	r1, #3
    2abc:	2000      	movs	r0, #0
    2abe:	4c40      	ldr	r4, [pc, #256]	; (2bc0 <flashy_fades+0x194>)
    2ac0:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    2ac2:	2301      	movs	r3, #1
    2ac4:	2201      	movs	r2, #1
    2ac6:	2104      	movs	r1, #4
    2ac8:	2000      	movs	r0, #0
    2aca:	4c3d      	ldr	r4, [pc, #244]	; (2bc0 <flashy_fades+0x194>)
    2acc:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    2ace:	2301      	movs	r3, #1
    2ad0:	2203      	movs	r2, #3
    2ad2:	2102      	movs	r1, #2
    2ad4:	2000      	movs	r0, #0
    2ad6:	4c3a      	ldr	r4, [pc, #232]	; (2bc0 <flashy_fades+0x194>)
    2ad8:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    2ada:	2301      	movs	r3, #1
    2adc:	2203      	movs	r2, #3
    2ade:	2101      	movs	r1, #1
    2ae0:	2000      	movs	r0, #0
    2ae2:	4c37      	ldr	r4, [pc, #220]	; (2bc0 <flashy_fades+0x194>)
    2ae4:	47a0      	blx	r4
    2ae6:	e053      	b.n	2b90 <flashy_fades+0x164>
	}
	else
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,false);
    2ae8:	2300      	movs	r3, #0
    2aea:	2200      	movs	r2, #0
    2aec:	2101      	movs	r1, #1
    2aee:	2000      	movs	r0, #0
    2af0:	4c33      	ldr	r4, [pc, #204]	; (2bc0 <flashy_fades+0x194>)
    2af2:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,false);
    2af4:	2300      	movs	r3, #0
    2af6:	2200      	movs	r2, #0
    2af8:	2102      	movs	r1, #2
    2afa:	2000      	movs	r0, #0
    2afc:	4c30      	ldr	r4, [pc, #192]	; (2bc0 <flashy_fades+0x194>)
    2afe:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    2b00:	2300      	movs	r3, #0
    2b02:	2200      	movs	r2, #0
    2b04:	2103      	movs	r1, #3
    2b06:	2000      	movs	r0, #0
    2b08:	4c2d      	ldr	r4, [pc, #180]	; (2bc0 <flashy_fades+0x194>)
    2b0a:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    2b0c:	2300      	movs	r3, #0
    2b0e:	2200      	movs	r2, #0
    2b10:	2104      	movs	r1, #4
    2b12:	2000      	movs	r0, #0
    2b14:	4c2a      	ldr	r4, [pc, #168]	; (2bc0 <flashy_fades+0x194>)
    2b16:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    2b18:	2300      	movs	r3, #0
    2b1a:	2201      	movs	r2, #1
    2b1c:	2102      	movs	r1, #2
    2b1e:	2000      	movs	r0, #0
    2b20:	4c27      	ldr	r4, [pc, #156]	; (2bc0 <flashy_fades+0x194>)
    2b22:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    2b24:	2300      	movs	r3, #0
    2b26:	2201      	movs	r2, #1
    2b28:	2101      	movs	r1, #1
    2b2a:	2000      	movs	r0, #0
    2b2c:	4c24      	ldr	r4, [pc, #144]	; (2bc0 <flashy_fades+0x194>)
    2b2e:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    2b30:	2300      	movs	r3, #0
    2b32:	2202      	movs	r2, #2
    2b34:	2102      	movs	r1, #2
    2b36:	2000      	movs	r0, #0
    2b38:	4c21      	ldr	r4, [pc, #132]	; (2bc0 <flashy_fades+0x194>)
    2b3a:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    2b3c:	2300      	movs	r3, #0
    2b3e:	2202      	movs	r2, #2
    2b40:	2101      	movs	r1, #1
    2b42:	2000      	movs	r0, #0
    2b44:	4c1e      	ldr	r4, [pc, #120]	; (2bc0 <flashy_fades+0x194>)
    2b46:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,false);
    2b48:	2300      	movs	r3, #0
    2b4a:	2202      	movs	r2, #2
    2b4c:	2104      	movs	r1, #4
    2b4e:	2000      	movs	r0, #0
    2b50:	4c1b      	ldr	r4, [pc, #108]	; (2bc0 <flashy_fades+0x194>)
    2b52:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,false);
    2b54:	2300      	movs	r3, #0
    2b56:	2202      	movs	r2, #2
    2b58:	2103      	movs	r1, #3
    2b5a:	2000      	movs	r0, #0
    2b5c:	4c18      	ldr	r4, [pc, #96]	; (2bc0 <flashy_fades+0x194>)
    2b5e:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    2b60:	2300      	movs	r3, #0
    2b62:	2201      	movs	r2, #1
    2b64:	2103      	movs	r1, #3
    2b66:	2000      	movs	r0, #0
    2b68:	4c15      	ldr	r4, [pc, #84]	; (2bc0 <flashy_fades+0x194>)
    2b6a:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    2b6c:	2300      	movs	r3, #0
    2b6e:	2201      	movs	r2, #1
    2b70:	2104      	movs	r1, #4
    2b72:	2000      	movs	r0, #0
    2b74:	4c12      	ldr	r4, [pc, #72]	; (2bc0 <flashy_fades+0x194>)
    2b76:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    2b78:	2300      	movs	r3, #0
    2b7a:	2203      	movs	r2, #3
    2b7c:	2102      	movs	r1, #2
    2b7e:	2000      	movs	r0, #0
    2b80:	4c0f      	ldr	r4, [pc, #60]	; (2bc0 <flashy_fades+0x194>)
    2b82:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    2b84:	2300      	movs	r3, #0
    2b86:	2203      	movs	r2, #3
    2b88:	2101      	movs	r1, #1
    2b8a:	2000      	movs	r0, #0
    2b8c:	4c0c      	ldr	r4, [pc, #48]	; (2bc0 <flashy_fades+0x194>)
    2b8e:	47a0      	blx	r4
	}
	
	//pwm_val++;
	if (pwm_count >= PWM_FREQ)
    2b90:	4b0a      	ldr	r3, [pc, #40]	; (2bbc <flashy_fades+0x190>)
    2b92:	681b      	ldr	r3, [r3, #0]
    2b94:	2bf9      	cmp	r3, #249	; 0xf9
    2b96:	dd0c      	ble.n	2bb2 <flashy_fades+0x186>
	{
		//pwm_val = 0;
		duty_cycle += PWM_FREQ/10;
    2b98:	4b07      	ldr	r3, [pc, #28]	; (2bb8 <flashy_fades+0x18c>)
    2b9a:	781b      	ldrb	r3, [r3, #0]
    2b9c:	3319      	adds	r3, #25
    2b9e:	b2da      	uxtb	r2, r3
    2ba0:	4b05      	ldr	r3, [pc, #20]	; (2bb8 <flashy_fades+0x18c>)
    2ba2:	701a      	strb	r2, [r3, #0]
		if (duty_cycle >= PWM_FREQ)
    2ba4:	4b04      	ldr	r3, [pc, #16]	; (2bb8 <flashy_fades+0x18c>)
    2ba6:	781b      	ldrb	r3, [r3, #0]
    2ba8:	2bf9      	cmp	r3, #249	; 0xf9
    2baa:	d902      	bls.n	2bb2 <flashy_fades+0x186>
		{
			duty_cycle = PWM_FREQ/4;
    2bac:	4b02      	ldr	r3, [pc, #8]	; (2bb8 <flashy_fades+0x18c>)
    2bae:	223e      	movs	r2, #62	; 0x3e
    2bb0:	701a      	strb	r2, [r3, #0]
		}
	}
}
    2bb2:	46c0      	nop			; (mov r8, r8)
    2bb4:	46bd      	mov	sp, r7
    2bb6:	bdb0      	pop	{r4, r5, r7, pc}
    2bb8:	20000160 	.word	0x20000160
    2bbc:	20001700 	.word	0x20001700
    2bc0:	00002f35 	.word	0x00002f35

00002bc4 <flashy_flash3>:

void flashy_flash3(void)
{
    2bc4:	b5b0      	push	{r4, r5, r7, lr}
    2bc6:	af00      	add	r7, sp, #0
	static uint8_t count = 0;
	
	reset_all_lights();
    2bc8:	4b38      	ldr	r3, [pc, #224]	; (2cac <flashy_flash3+0xe8>)
    2bca:	4798      	blx	r3

	configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,bool_map_1[count][0]);
    2bcc:	4b38      	ldr	r3, [pc, #224]	; (2cb0 <flashy_flash3+0xec>)
    2bce:	781b      	ldrb	r3, [r3, #0]
    2bd0:	001a      	movs	r2, r3
    2bd2:	4b38      	ldr	r3, [pc, #224]	; (2cb4 <flashy_flash3+0xf0>)
    2bd4:	00d2      	lsls	r2, r2, #3
    2bd6:	5cd3      	ldrb	r3, [r2, r3]
    2bd8:	2202      	movs	r2, #2
    2bda:	2103      	movs	r1, #3
    2bdc:	2000      	movs	r0, #0
    2bde:	4c36      	ldr	r4, [pc, #216]	; (2cb8 <flashy_flash3+0xf4>)
    2be0:	47a0      	blx	r4
	configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,bool_map_1[count][1]);
    2be2:	4b33      	ldr	r3, [pc, #204]	; (2cb0 <flashy_flash3+0xec>)
    2be4:	781b      	ldrb	r3, [r3, #0]
    2be6:	4a33      	ldr	r2, [pc, #204]	; (2cb4 <flashy_flash3+0xf0>)
    2be8:	00db      	lsls	r3, r3, #3
    2bea:	18d3      	adds	r3, r2, r3
    2bec:	3301      	adds	r3, #1
    2bee:	781b      	ldrb	r3, [r3, #0]
    2bf0:	2201      	movs	r2, #1
    2bf2:	2101      	movs	r1, #1
    2bf4:	2000      	movs	r0, #0
    2bf6:	4c30      	ldr	r4, [pc, #192]	; (2cb8 <flashy_flash3+0xf4>)
    2bf8:	47a0      	blx	r4
	configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,bool_map_1[count][2]);
    2bfa:	4b2d      	ldr	r3, [pc, #180]	; (2cb0 <flashy_flash3+0xec>)
    2bfc:	781b      	ldrb	r3, [r3, #0]
    2bfe:	4a2d      	ldr	r2, [pc, #180]	; (2cb4 <flashy_flash3+0xf0>)
    2c00:	00db      	lsls	r3, r3, #3
    2c02:	18d3      	adds	r3, r2, r3
    2c04:	3302      	adds	r3, #2
    2c06:	781b      	ldrb	r3, [r3, #0]
    2c08:	2202      	movs	r2, #2
    2c0a:	2101      	movs	r1, #1
    2c0c:	2000      	movs	r0, #0
    2c0e:	4c2a      	ldr	r4, [pc, #168]	; (2cb8 <flashy_flash3+0xf4>)
    2c10:	47a0      	blx	r4
	configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,bool_map_1[count][3]);
    2c12:	4b27      	ldr	r3, [pc, #156]	; (2cb0 <flashy_flash3+0xec>)
    2c14:	781b      	ldrb	r3, [r3, #0]
    2c16:	4a27      	ldr	r2, [pc, #156]	; (2cb4 <flashy_flash3+0xf0>)
    2c18:	00db      	lsls	r3, r3, #3
    2c1a:	18d3      	adds	r3, r2, r3
    2c1c:	3303      	adds	r3, #3
    2c1e:	781b      	ldrb	r3, [r3, #0]
    2c20:	2200      	movs	r2, #0
    2c22:	2101      	movs	r1, #1
    2c24:	2000      	movs	r0, #0
    2c26:	4c24      	ldr	r4, [pc, #144]	; (2cb8 <flashy_flash3+0xf4>)
    2c28:	47a0      	blx	r4
	configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,bool_map_1[count][4]);
    2c2a:	4b21      	ldr	r3, [pc, #132]	; (2cb0 <flashy_flash3+0xec>)
    2c2c:	781b      	ldrb	r3, [r3, #0]
    2c2e:	4a21      	ldr	r2, [pc, #132]	; (2cb4 <flashy_flash3+0xf0>)
    2c30:	00db      	lsls	r3, r3, #3
    2c32:	18d3      	adds	r3, r2, r3
    2c34:	3304      	adds	r3, #4
    2c36:	781b      	ldrb	r3, [r3, #0]
    2c38:	2200      	movs	r2, #0
    2c3a:	2102      	movs	r1, #2
    2c3c:	2000      	movs	r0, #0
    2c3e:	4c1e      	ldr	r4, [pc, #120]	; (2cb8 <flashy_flash3+0xf4>)
    2c40:	47a0      	blx	r4
	configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,bool_map_1[count][5]);
    2c42:	4b1b      	ldr	r3, [pc, #108]	; (2cb0 <flashy_flash3+0xec>)
    2c44:	781b      	ldrb	r3, [r3, #0]
    2c46:	4a1b      	ldr	r2, [pc, #108]	; (2cb4 <flashy_flash3+0xf0>)
    2c48:	00db      	lsls	r3, r3, #3
    2c4a:	18d3      	adds	r3, r2, r3
    2c4c:	3305      	adds	r3, #5
    2c4e:	781b      	ldrb	r3, [r3, #0]
    2c50:	2202      	movs	r2, #2
    2c52:	2102      	movs	r1, #2
    2c54:	2000      	movs	r0, #0
    2c56:	4c18      	ldr	r4, [pc, #96]	; (2cb8 <flashy_flash3+0xf4>)
    2c58:	47a0      	blx	r4
	configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,bool_map_1[count][6]);
    2c5a:	4b15      	ldr	r3, [pc, #84]	; (2cb0 <flashy_flash3+0xec>)
    2c5c:	781b      	ldrb	r3, [r3, #0]
    2c5e:	4a15      	ldr	r2, [pc, #84]	; (2cb4 <flashy_flash3+0xf0>)
    2c60:	00db      	lsls	r3, r3, #3
    2c62:	18d3      	adds	r3, r2, r3
    2c64:	3306      	adds	r3, #6
    2c66:	781b      	ldrb	r3, [r3, #0]
    2c68:	2201      	movs	r2, #1
    2c6a:	2102      	movs	r1, #2
    2c6c:	2000      	movs	r0, #0
    2c6e:	4c12      	ldr	r4, [pc, #72]	; (2cb8 <flashy_flash3+0xf4>)
    2c70:	47a0      	blx	r4
	configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,bool_map_1[count][7]);
    2c72:	4b0f      	ldr	r3, [pc, #60]	; (2cb0 <flashy_flash3+0xec>)
    2c74:	781b      	ldrb	r3, [r3, #0]
    2c76:	4a0f      	ldr	r2, [pc, #60]	; (2cb4 <flashy_flash3+0xf0>)
    2c78:	00db      	lsls	r3, r3, #3
    2c7a:	18d3      	adds	r3, r2, r3
    2c7c:	3307      	adds	r3, #7
    2c7e:	781b      	ldrb	r3, [r3, #0]
    2c80:	2202      	movs	r2, #2
    2c82:	2104      	movs	r1, #4
    2c84:	2000      	movs	r0, #0
    2c86:	4c0c      	ldr	r4, [pc, #48]	; (2cb8 <flashy_flash3+0xf4>)
    2c88:	47a0      	blx	r4
	count++;
    2c8a:	4b09      	ldr	r3, [pc, #36]	; (2cb0 <flashy_flash3+0xec>)
    2c8c:	781b      	ldrb	r3, [r3, #0]
    2c8e:	3301      	adds	r3, #1
    2c90:	b2da      	uxtb	r2, r3
    2c92:	4b07      	ldr	r3, [pc, #28]	; (2cb0 <flashy_flash3+0xec>)
    2c94:	701a      	strb	r2, [r3, #0]
	if(count > 25)
    2c96:	4b06      	ldr	r3, [pc, #24]	; (2cb0 <flashy_flash3+0xec>)
    2c98:	781b      	ldrb	r3, [r3, #0]
    2c9a:	2b19      	cmp	r3, #25
    2c9c:	d902      	bls.n	2ca4 <flashy_flash3+0xe0>
	{
		count = 0;
    2c9e:	4b04      	ldr	r3, [pc, #16]	; (2cb0 <flashy_flash3+0xec>)
    2ca0:	2200      	movs	r2, #0
    2ca2:	701a      	strb	r2, [r3, #0]
	}
}
    2ca4:	46c0      	nop			; (mov r8, r8)
    2ca6:	46bd      	mov	sp, r7
    2ca8:	bdb0      	pop	{r4, r5, r7, pc}
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	00002cbd 	.word	0x00002cbd
    2cb0:	20000562 	.word	0x20000562
    2cb4:	20000010 	.word	0x20000010
    2cb8:	00002f35 	.word	0x00002f35

00002cbc <reset_all_lights>:

void reset_all_lights()
{
    2cbc:	b580      	push	{r7, lr}
    2cbe:	b082      	sub	sp, #8
    2cc0:	af00      	add	r7, sp, #0
	for (int i=0;i<8;i++)
    2cc2:	2300      	movs	r3, #0
    2cc4:	607b      	str	r3, [r7, #4]
    2cc6:	e010      	b.n	2cea <reset_all_lights+0x2e>
	{
		mcp23017_data.devices[i].outputs.ports[0] = 0x80;
    2cc8:	4a0b      	ldr	r2, [pc, #44]	; (2cf8 <reset_all_lights+0x3c>)
    2cca:	687b      	ldr	r3, [r7, #4]
    2ccc:	011b      	lsls	r3, r3, #4
    2cce:	18d3      	adds	r3, r2, r3
    2cd0:	3308      	adds	r3, #8
    2cd2:	2280      	movs	r2, #128	; 0x80
    2cd4:	701a      	strb	r2, [r3, #0]
		mcp23017_data.devices[i].outputs.ports[1] = 0x80;
    2cd6:	4a08      	ldr	r2, [pc, #32]	; (2cf8 <reset_all_lights+0x3c>)
    2cd8:	687b      	ldr	r3, [r7, #4]
    2cda:	011b      	lsls	r3, r3, #4
    2cdc:	18d3      	adds	r3, r2, r3
    2cde:	3309      	adds	r3, #9
    2ce0:	2280      	movs	r2, #128	; 0x80
    2ce2:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
    2ce4:	687b      	ldr	r3, [r7, #4]
    2ce6:	3301      	adds	r3, #1
    2ce8:	607b      	str	r3, [r7, #4]
    2cea:	687b      	ldr	r3, [r7, #4]
    2cec:	2b07      	cmp	r3, #7
    2cee:	ddeb      	ble.n	2cc8 <reset_all_lights+0xc>
	}
}
    2cf0:	46c0      	nop			; (mov r8, r8)
    2cf2:	46bd      	mov	sp, r7
    2cf4:	b002      	add	sp, #8
    2cf6:	bd80      	pop	{r7, pc}
    2cf8:	200000e0 	.word	0x200000e0

00002cfc <a_okay>:

bool a_okay()
{
    2cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cfe:	46ce      	mov	lr, r9
    2d00:	4647      	mov	r7, r8
    2d02:	b580      	push	{r7, lr}
    2d04:	b095      	sub	sp, #84	; 0x54
    2d06:	af06      	add	r7, sp, #24
	char buffer[32];
	uint8_t states[8];
	mcp23017_read_all_ports(read_data,states);
    2d08:	2308      	movs	r3, #8
    2d0a:	18fa      	adds	r2, r7, r3
    2d0c:	4b81      	ldr	r3, [pc, #516]	; (2f14 <a_okay+0x218>)
    2d0e:	0011      	movs	r1, r2
    2d10:	0018      	movs	r0, r3
    2d12:	4b81      	ldr	r3, [pc, #516]	; (2f18 <a_okay+0x21c>)
    2d14:	4798      	blx	r3
	
	bool return_val = true;
    2d16:	232f      	movs	r3, #47	; 0x2f
    2d18:	2208      	movs	r2, #8
    2d1a:	4694      	mov	ip, r2
    2d1c:	44bc      	add	ip, r7
    2d1e:	4463      	add	r3, ip
    2d20:	2201      	movs	r2, #1
    2d22:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
    2d24:	2300      	movs	r3, #0
    2d26:	633b      	str	r3, [r7, #48]	; 0x30
    2d28:	e0a2      	b.n	2e70 <a_okay+0x174>
	{
		if (mcp23017_data.devices[i].should_be_enabled)
    2d2a:	4b7c      	ldr	r3, [pc, #496]	; (2f1c <a_okay+0x220>)
    2d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2d2e:	0112      	lsls	r2, r2, #4
    2d30:	5cd3      	ldrb	r3, [r2, r3]
    2d32:	2b00      	cmp	r3, #0
    2d34:	d06e      	beq.n	2e14 <a_okay+0x118>
		{
			mcp23017_data.devices[i].output_errors.ports[0] = mcp23017_data.devices[i].outputs.ports[0] - read_data[0][i];
    2d36:	4a79      	ldr	r2, [pc, #484]	; (2f1c <a_okay+0x220>)
    2d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d3a:	011b      	lsls	r3, r3, #4
    2d3c:	18d3      	adds	r3, r2, r3
    2d3e:	3308      	adds	r3, #8
    2d40:	781a      	ldrb	r2, [r3, #0]
    2d42:	4974      	ldr	r1, [pc, #464]	; (2f14 <a_okay+0x218>)
    2d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d46:	18cb      	adds	r3, r1, r3
    2d48:	781b      	ldrb	r3, [r3, #0]
    2d4a:	1ad3      	subs	r3, r2, r3
    2d4c:	b2d9      	uxtb	r1, r3
    2d4e:	4a73      	ldr	r2, [pc, #460]	; (2f1c <a_okay+0x220>)
    2d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d52:	011b      	lsls	r3, r3, #4
    2d54:	18d3      	adds	r3, r2, r3
    2d56:	330c      	adds	r3, #12
    2d58:	1c0a      	adds	r2, r1, #0
    2d5a:	701a      	strb	r2, [r3, #0]
			mcp23017_data.devices[i].output_errors.ports[1] = mcp23017_data.devices[i].outputs.ports[1] - read_data[1][i];
    2d5c:	4a6f      	ldr	r2, [pc, #444]	; (2f1c <a_okay+0x220>)
    2d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d60:	011b      	lsls	r3, r3, #4
    2d62:	18d3      	adds	r3, r2, r3
    2d64:	3309      	adds	r3, #9
    2d66:	781a      	ldrb	r2, [r3, #0]
    2d68:	496a      	ldr	r1, [pc, #424]	; (2f14 <a_okay+0x218>)
    2d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d6c:	18cb      	adds	r3, r1, r3
    2d6e:	3308      	adds	r3, #8
    2d70:	781b      	ldrb	r3, [r3, #0]
    2d72:	1ad3      	subs	r3, r2, r3
    2d74:	b2d9      	uxtb	r1, r3
    2d76:	4a69      	ldr	r2, [pc, #420]	; (2f1c <a_okay+0x220>)
    2d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d7a:	011b      	lsls	r3, r3, #4
    2d7c:	18d3      	adds	r3, r2, r3
    2d7e:	330d      	adds	r3, #13
    2d80:	1c0a      	adds	r2, r1, #0
    2d82:	701a      	strb	r2, [r3, #0]
			
			if ((mcp23017_data.devices[i].output_errors.ports[0] + mcp23017_data.devices[i].output_errors.ports[1]) > 0)
    2d84:	4a65      	ldr	r2, [pc, #404]	; (2f1c <a_okay+0x220>)
    2d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d88:	011b      	lsls	r3, r3, #4
    2d8a:	18d3      	adds	r3, r2, r3
    2d8c:	330c      	adds	r3, #12
    2d8e:	781b      	ldrb	r3, [r3, #0]
    2d90:	0019      	movs	r1, r3
    2d92:	4a62      	ldr	r2, [pc, #392]	; (2f1c <a_okay+0x220>)
    2d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d96:	011b      	lsls	r3, r3, #4
    2d98:	18d3      	adds	r3, r2, r3
    2d9a:	330d      	adds	r3, #13
    2d9c:	781b      	ldrb	r3, [r3, #0]
    2d9e:	18cb      	adds	r3, r1, r3
    2da0:	2b00      	cmp	r3, #0
    2da2:	dd06      	ble.n	2db2 <a_okay+0xb6>
			{
				mcp23017_data.devices[i].error_detected = true;
    2da4:	4a5d      	ldr	r2, [pc, #372]	; (2f1c <a_okay+0x220>)
    2da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2da8:	011b      	lsls	r3, r3, #4
    2daa:	18d3      	adds	r3, r2, r3
    2dac:	3302      	adds	r3, #2
    2dae:	2201      	movs	r2, #1
    2db0:	701a      	strb	r2, [r3, #0]
			}
			
			if ((read_data[0][i] & ~0x80) != (mcp23017_data.devices[i].outputs.ports[0] & ~0x80))
    2db2:	4a58      	ldr	r2, [pc, #352]	; (2f14 <a_okay+0x218>)
    2db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2db6:	18d3      	adds	r3, r2, r3
    2db8:	781a      	ldrb	r2, [r3, #0]
    2dba:	4958      	ldr	r1, [pc, #352]	; (2f1c <a_okay+0x220>)
    2dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2dbe:	011b      	lsls	r3, r3, #4
    2dc0:	18cb      	adds	r3, r1, r3
    2dc2:	3308      	adds	r3, #8
    2dc4:	781b      	ldrb	r3, [r3, #0]
    2dc6:	4053      	eors	r3, r2
    2dc8:	b2db      	uxtb	r3, r3
    2dca:	001a      	movs	r2, r3
    2dcc:	2380      	movs	r3, #128	; 0x80
    2dce:	439a      	bics	r2, r3
    2dd0:	1e13      	subs	r3, r2, #0
    2dd2:	d006      	beq.n	2de2 <a_okay+0xe6>
			{
				return_val = false;
    2dd4:	232f      	movs	r3, #47	; 0x2f
    2dd6:	2208      	movs	r2, #8
    2dd8:	4694      	mov	ip, r2
    2dda:	44bc      	add	ip, r7
    2ddc:	4463      	add	r3, ip
    2dde:	2200      	movs	r2, #0
    2de0:	701a      	strb	r2, [r3, #0]
			}
			if ((read_data[1][i] & ~0x80) != (mcp23017_data.devices[i].outputs.ports[1] & ~0x80))
    2de2:	4a4c      	ldr	r2, [pc, #304]	; (2f14 <a_okay+0x218>)
    2de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2de6:	18d3      	adds	r3, r2, r3
    2de8:	3308      	adds	r3, #8
    2dea:	781a      	ldrb	r2, [r3, #0]
    2dec:	494b      	ldr	r1, [pc, #300]	; (2f1c <a_okay+0x220>)
    2dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2df0:	011b      	lsls	r3, r3, #4
    2df2:	18cb      	adds	r3, r1, r3
    2df4:	3309      	adds	r3, #9
    2df6:	781b      	ldrb	r3, [r3, #0]
    2df8:	4053      	eors	r3, r2
    2dfa:	b2db      	uxtb	r3, r3
    2dfc:	001a      	movs	r2, r3
    2dfe:	2380      	movs	r3, #128	; 0x80
    2e00:	439a      	bics	r2, r3
    2e02:	1e13      	subs	r3, r2, #0
    2e04:	d006      	beq.n	2e14 <a_okay+0x118>
			{
				return_val = false;
    2e06:	232f      	movs	r3, #47	; 0x2f
    2e08:	2208      	movs	r2, #8
    2e0a:	4694      	mov	ip, r2
    2e0c:	44bc      	add	ip, r7
    2e0e:	4463      	add	r3, ip
    2e10:	2200      	movs	r2, #0
    2e12:	701a      	strb	r2, [r3, #0]
			}
		}
		mcp23017_data.devices[i].status = states[i];
    2e14:	2308      	movs	r3, #8
    2e16:	18fa      	adds	r2, r7, r3
    2e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e1a:	18d3      	adds	r3, r2, r3
    2e1c:	7819      	ldrb	r1, [r3, #0]
    2e1e:	4a3f      	ldr	r2, [pc, #252]	; (2f1c <a_okay+0x220>)
    2e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e22:	011b      	lsls	r3, r3, #4
    2e24:	18d3      	adds	r3, r2, r3
    2e26:	3303      	adds	r3, #3
    2e28:	1c0a      	adds	r2, r1, #0
    2e2a:	701a      	strb	r2, [r3, #0]
		sprintf(buffer,"ADDR: %d -> %d\n",i,mcp23017_data.devices[i].status);
    2e2c:	4a3b      	ldr	r2, [pc, #236]	; (2f1c <a_okay+0x220>)
    2e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e30:	011b      	lsls	r3, r3, #4
    2e32:	18d3      	adds	r3, r2, r3
    2e34:	3303      	adds	r3, #3
    2e36:	781b      	ldrb	r3, [r3, #0]
    2e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2e3a:	4939      	ldr	r1, [pc, #228]	; (2f20 <a_okay+0x224>)
    2e3c:	2008      	movs	r0, #8
    2e3e:	2408      	movs	r4, #8
    2e40:	46a4      	mov	ip, r4
    2e42:	44bc      	add	ip, r7
    2e44:	4460      	add	r0, ip
    2e46:	4c37      	ldr	r4, [pc, #220]	; (2f24 <a_okay+0x228>)
    2e48:	47a0      	blx	r4
		ble_uart_write(buffer);
    2e4a:	2308      	movs	r3, #8
    2e4c:	2208      	movs	r2, #8
    2e4e:	4694      	mov	ip, r2
    2e50:	44bc      	add	ip, r7
    2e52:	4463      	add	r3, ip
    2e54:	0018      	movs	r0, r3
    2e56:	4b34      	ldr	r3, [pc, #208]	; (2f28 <a_okay+0x22c>)
    2e58:	4798      	blx	r3
		sb_uart_write(buffer);
    2e5a:	2308      	movs	r3, #8
    2e5c:	2208      	movs	r2, #8
    2e5e:	4694      	mov	ip, r2
    2e60:	44bc      	add	ip, r7
    2e62:	4463      	add	r3, ip
    2e64:	0018      	movs	r0, r3
    2e66:	4b31      	ldr	r3, [pc, #196]	; (2f2c <a_okay+0x230>)
    2e68:	4798      	blx	r3
	for (int i=0;i<8;i++)
    2e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e6c:	3301      	adds	r3, #1
    2e6e:	633b      	str	r3, [r7, #48]	; 0x30
    2e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e72:	2b07      	cmp	r3, #7
    2e74:	dc00      	bgt.n	2e78 <a_okay+0x17c>
    2e76:	e758      	b.n	2d2a <a_okay+0x2e>
	}
	sprintf(buffer,"ERR: %d%d%d%d%d%d%d%d\r\n",mcp23017_data.devices[7].error_detected,mcp23017_data.devices[6].error_detected,mcp23017_data.devices[5].error_detected,mcp23017_data.devices[4].error_detected,mcp23017_data.devices[3].error_detected,mcp23017_data.devices[2].error_detected,mcp23017_data.devices[1].error_detected,mcp23017_data.devices[0].error_detected);
    2e78:	4b28      	ldr	r3, [pc, #160]	; (2f1c <a_okay+0x220>)
    2e7a:	2272      	movs	r2, #114	; 0x72
    2e7c:	5c9b      	ldrb	r3, [r3, r2]
    2e7e:	607b      	str	r3, [r7, #4]
    2e80:	4b26      	ldr	r3, [pc, #152]	; (2f1c <a_okay+0x220>)
    2e82:	2262      	movs	r2, #98	; 0x62
    2e84:	5c9b      	ldrb	r3, [r3, r2]
    2e86:	603b      	str	r3, [r7, #0]
    2e88:	4b24      	ldr	r3, [pc, #144]	; (2f1c <a_okay+0x220>)
    2e8a:	2252      	movs	r2, #82	; 0x52
    2e8c:	5c9b      	ldrb	r3, [r3, r2]
    2e8e:	001c      	movs	r4, r3
    2e90:	4b22      	ldr	r3, [pc, #136]	; (2f1c <a_okay+0x220>)
    2e92:	2242      	movs	r2, #66	; 0x42
    2e94:	5c9b      	ldrb	r3, [r3, r2]
    2e96:	001d      	movs	r5, r3
    2e98:	4b20      	ldr	r3, [pc, #128]	; (2f1c <a_okay+0x220>)
    2e9a:	2232      	movs	r2, #50	; 0x32
    2e9c:	5c9b      	ldrb	r3, [r3, r2]
    2e9e:	001e      	movs	r6, r3
    2ea0:	4b1e      	ldr	r3, [pc, #120]	; (2f1c <a_okay+0x220>)
    2ea2:	2222      	movs	r2, #34	; 0x22
    2ea4:	5c9b      	ldrb	r3, [r3, r2]
    2ea6:	001a      	movs	r2, r3
    2ea8:	4b1c      	ldr	r3, [pc, #112]	; (2f1c <a_okay+0x220>)
    2eaa:	7c9b      	ldrb	r3, [r3, #18]
    2eac:	469c      	mov	ip, r3
    2eae:	4b1b      	ldr	r3, [pc, #108]	; (2f1c <a_okay+0x220>)
    2eb0:	789b      	ldrb	r3, [r3, #2]
    2eb2:	4699      	mov	r9, r3
    2eb4:	491e      	ldr	r1, [pc, #120]	; (2f30 <a_okay+0x234>)
    2eb6:	2008      	movs	r0, #8
    2eb8:	2308      	movs	r3, #8
    2eba:	4698      	mov	r8, r3
    2ebc:	44b8      	add	r8, r7
    2ebe:	4440      	add	r0, r8
    2ec0:	464b      	mov	r3, r9
    2ec2:	9305      	str	r3, [sp, #20]
    2ec4:	4663      	mov	r3, ip
    2ec6:	9304      	str	r3, [sp, #16]
    2ec8:	9203      	str	r2, [sp, #12]
    2eca:	9602      	str	r6, [sp, #8]
    2ecc:	9501      	str	r5, [sp, #4]
    2ece:	9400      	str	r4, [sp, #0]
    2ed0:	683b      	ldr	r3, [r7, #0]
    2ed2:	687a      	ldr	r2, [r7, #4]
    2ed4:	4c13      	ldr	r4, [pc, #76]	; (2f24 <a_okay+0x228>)
    2ed6:	47a0      	blx	r4
	ble_uart_write(buffer);
    2ed8:	2308      	movs	r3, #8
    2eda:	2208      	movs	r2, #8
    2edc:	4694      	mov	ip, r2
    2ede:	44bc      	add	ip, r7
    2ee0:	4463      	add	r3, ip
    2ee2:	0018      	movs	r0, r3
    2ee4:	4b10      	ldr	r3, [pc, #64]	; (2f28 <a_okay+0x22c>)
    2ee6:	4798      	blx	r3
	sb_uart_write(buffer);
    2ee8:	2308      	movs	r3, #8
    2eea:	2208      	movs	r2, #8
    2eec:	4694      	mov	ip, r2
    2eee:	44bc      	add	ip, r7
    2ef0:	4463      	add	r3, ip
    2ef2:	0018      	movs	r0, r3
    2ef4:	4b0d      	ldr	r3, [pc, #52]	; (2f2c <a_okay+0x230>)
    2ef6:	4798      	blx	r3
	
	return return_val;
    2ef8:	232f      	movs	r3, #47	; 0x2f
    2efa:	2208      	movs	r2, #8
    2efc:	4694      	mov	ip, r2
    2efe:	44bc      	add	ip, r7
    2f00:	4463      	add	r3, ip
    2f02:	781b      	ldrb	r3, [r3, #0]
}
    2f04:	0018      	movs	r0, r3
    2f06:	46bd      	mov	sp, r7
    2f08:	b00f      	add	sp, #60	; 0x3c
    2f0a:	bc0c      	pop	{r2, r3}
    2f0c:	4690      	mov	r8, r2
    2f0e:	4699      	mov	r9, r3
    2f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f12:	46c0      	nop			; (mov r8, r8)
    2f14:	20000e28 	.word	0x20000e28
    2f18:	00003475 	.word	0x00003475
    2f1c:	200000e0 	.word	0x200000e0
    2f20:	00006f04 	.word	0x00006f04
    2f24:	00005a3d 	.word	0x00005a3d
    2f28:	00001299 	.word	0x00001299
    2f2c:	000041f5 	.word	0x000041f5
    2f30:	00006f14 	.word	0x00006f14

00002f34 <configure_pin>:

void configure_pin(uint8_t port, uint8_t addr, uint8_t pin, bool value)
{
    2f34:	b5b0      	push	{r4, r5, r7, lr}
    2f36:	b082      	sub	sp, #8
    2f38:	af00      	add	r7, sp, #0
    2f3a:	0005      	movs	r5, r0
    2f3c:	000c      	movs	r4, r1
    2f3e:	0010      	movs	r0, r2
    2f40:	0019      	movs	r1, r3
    2f42:	1dfb      	adds	r3, r7, #7
    2f44:	1c2a      	adds	r2, r5, #0
    2f46:	701a      	strb	r2, [r3, #0]
    2f48:	1dbb      	adds	r3, r7, #6
    2f4a:	1c22      	adds	r2, r4, #0
    2f4c:	701a      	strb	r2, [r3, #0]
    2f4e:	1d7b      	adds	r3, r7, #5
    2f50:	1c02      	adds	r2, r0, #0
    2f52:	701a      	strb	r2, [r3, #0]
    2f54:	1d3b      	adds	r3, r7, #4
    2f56:	1c0a      	adds	r2, r1, #0
    2f58:	701a      	strb	r2, [r3, #0]
	if(value)
    2f5a:	1d3b      	adds	r3, r7, #4
    2f5c:	781b      	ldrb	r3, [r3, #0]
    2f5e:	2b00      	cmp	r3, #0
    2f60:	d01f      	beq.n	2fa2 <configure_pin+0x6e>
	{
		mcp23017_data.devices[addr].outputs.ports[port] |= (1 << pin);
    2f62:	1dbb      	adds	r3, r7, #6
    2f64:	781a      	ldrb	r2, [r3, #0]
    2f66:	1dfb      	adds	r3, r7, #7
    2f68:	781b      	ldrb	r3, [r3, #0]
    2f6a:	1db9      	adds	r1, r7, #6
    2f6c:	7808      	ldrb	r0, [r1, #0]
    2f6e:	1df9      	adds	r1, r7, #7
    2f70:	7809      	ldrb	r1, [r1, #0]
    2f72:	4c1e      	ldr	r4, [pc, #120]	; (2fec <configure_pin+0xb8>)
    2f74:	0100      	lsls	r0, r0, #4
    2f76:	1820      	adds	r0, r4, r0
    2f78:	1841      	adds	r1, r0, r1
    2f7a:	3108      	adds	r1, #8
    2f7c:	7809      	ldrb	r1, [r1, #0]
    2f7e:	b248      	sxtb	r0, r1
    2f80:	1d79      	adds	r1, r7, #5
    2f82:	7809      	ldrb	r1, [r1, #0]
    2f84:	2401      	movs	r4, #1
    2f86:	408c      	lsls	r4, r1
    2f88:	0021      	movs	r1, r4
    2f8a:	b249      	sxtb	r1, r1
    2f8c:	4301      	orrs	r1, r0
    2f8e:	b249      	sxtb	r1, r1
    2f90:	b2c8      	uxtb	r0, r1
    2f92:	4916      	ldr	r1, [pc, #88]	; (2fec <configure_pin+0xb8>)
    2f94:	0112      	lsls	r2, r2, #4
    2f96:	188a      	adds	r2, r1, r2
    2f98:	18d3      	adds	r3, r2, r3
    2f9a:	3308      	adds	r3, #8
    2f9c:	1c02      	adds	r2, r0, #0
    2f9e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		mcp23017_data.devices[addr].outputs.ports[port] &= ~(1 << pin);
	}
}
    2fa0:	e020      	b.n	2fe4 <configure_pin+0xb0>
		mcp23017_data.devices[addr].outputs.ports[port] &= ~(1 << pin);
    2fa2:	1dbb      	adds	r3, r7, #6
    2fa4:	781a      	ldrb	r2, [r3, #0]
    2fa6:	1dfb      	adds	r3, r7, #7
    2fa8:	781b      	ldrb	r3, [r3, #0]
    2faa:	1db9      	adds	r1, r7, #6
    2fac:	7808      	ldrb	r0, [r1, #0]
    2fae:	1df9      	adds	r1, r7, #7
    2fb0:	7809      	ldrb	r1, [r1, #0]
    2fb2:	4c0e      	ldr	r4, [pc, #56]	; (2fec <configure_pin+0xb8>)
    2fb4:	0100      	lsls	r0, r0, #4
    2fb6:	1820      	adds	r0, r4, r0
    2fb8:	1841      	adds	r1, r0, r1
    2fba:	3108      	adds	r1, #8
    2fbc:	7809      	ldrb	r1, [r1, #0]
    2fbe:	b249      	sxtb	r1, r1
    2fc0:	1d78      	adds	r0, r7, #5
    2fc2:	7800      	ldrb	r0, [r0, #0]
    2fc4:	2401      	movs	r4, #1
    2fc6:	4084      	lsls	r4, r0
    2fc8:	0020      	movs	r0, r4
    2fca:	b240      	sxtb	r0, r0
    2fcc:	43c0      	mvns	r0, r0
    2fce:	b240      	sxtb	r0, r0
    2fd0:	4001      	ands	r1, r0
    2fd2:	b249      	sxtb	r1, r1
    2fd4:	b2c8      	uxtb	r0, r1
    2fd6:	4905      	ldr	r1, [pc, #20]	; (2fec <configure_pin+0xb8>)
    2fd8:	0112      	lsls	r2, r2, #4
    2fda:	188a      	adds	r2, r1, r2
    2fdc:	18d3      	adds	r3, r2, r3
    2fde:	3308      	adds	r3, #8
    2fe0:	1c02      	adds	r2, r0, #0
    2fe2:	701a      	strb	r2, [r3, #0]
}
    2fe4:	46c0      	nop			; (mov r8, r8)
    2fe6:	46bd      	mov	sp, r7
    2fe8:	b002      	add	sp, #8
    2fea:	bdb0      	pop	{r4, r5, r7, pc}
    2fec:	200000e0 	.word	0x200000e0

00002ff0 <mcp23017_check_all>:
		mcp23017_data.devices[i].status = STATUS_OK;
	}
}

void mcp23017_check_all()
{
    2ff0:	b590      	push	{r4, r7, lr}
    2ff2:	b08b      	sub	sp, #44	; 0x2c
    2ff4:	af00      	add	r7, sp, #0
	bool returnVal = false;
    2ff6:	2327      	movs	r3, #39	; 0x27
    2ff8:	18fb      	adds	r3, r7, r3
    2ffa:	2200      	movs	r2, #0
    2ffc:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[32];
	for (int i=0;i<8;i++)
    2ffe:	2300      	movs	r3, #0
    3000:	623b      	str	r3, [r7, #32]
    3002:	e025      	b.n	3050 <mcp23017_check_all+0x60>
	{
		if (mcp23017_data.devices[i].should_be_enabled & mcp23017_data.devices[i].status != STATUS_OK)
    3004:	4b1c      	ldr	r3, [pc, #112]	; (3078 <mcp23017_check_all+0x88>)
    3006:	6a3a      	ldr	r2, [r7, #32]
    3008:	0112      	lsls	r2, r2, #4
    300a:	5cd3      	ldrb	r3, [r2, r3]
    300c:	0019      	movs	r1, r3
    300e:	4a1a      	ldr	r2, [pc, #104]	; (3078 <mcp23017_check_all+0x88>)
    3010:	6a3b      	ldr	r3, [r7, #32]
    3012:	011b      	lsls	r3, r3, #4
    3014:	18d3      	adds	r3, r2, r3
    3016:	3303      	adds	r3, #3
    3018:	781b      	ldrb	r3, [r3, #0]
    301a:	1e5a      	subs	r2, r3, #1
    301c:	4193      	sbcs	r3, r2
    301e:	b2db      	uxtb	r3, r3
    3020:	400b      	ands	r3, r1
    3022:	d012      	beq.n	304a <mcp23017_check_all+0x5a>
		{
			sprintf(buffer,"E: %d - %d\n",i,mcp23017_data.devices[i].status);
    3024:	4a14      	ldr	r2, [pc, #80]	; (3078 <mcp23017_check_all+0x88>)
    3026:	6a3b      	ldr	r3, [r7, #32]
    3028:	011b      	lsls	r3, r3, #4
    302a:	18d3      	adds	r3, r2, r3
    302c:	3303      	adds	r3, #3
    302e:	781b      	ldrb	r3, [r3, #0]
    3030:	6a3a      	ldr	r2, [r7, #32]
    3032:	4912      	ldr	r1, [pc, #72]	; (307c <mcp23017_check_all+0x8c>)
    3034:	0038      	movs	r0, r7
    3036:	4c12      	ldr	r4, [pc, #72]	; (3080 <mcp23017_check_all+0x90>)
    3038:	47a0      	blx	r4
			ble_uart_write(buffer);
    303a:	003b      	movs	r3, r7
    303c:	0018      	movs	r0, r3
    303e:	4b11      	ldr	r3, [pc, #68]	; (3084 <mcp23017_check_all+0x94>)
    3040:	4798      	blx	r3
			returnVal = true;
    3042:	2327      	movs	r3, #39	; 0x27
    3044:	18fb      	adds	r3, r7, r3
    3046:	2201      	movs	r2, #1
    3048:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
    304a:	6a3b      	ldr	r3, [r7, #32]
    304c:	3301      	adds	r3, #1
    304e:	623b      	str	r3, [r7, #32]
    3050:	6a3b      	ldr	r3, [r7, #32]
    3052:	2b07      	cmp	r3, #7
    3054:	ddd6      	ble.n	3004 <mcp23017_check_all+0x14>
		}
	}
	if (!returnVal)
    3056:	2327      	movs	r3, #39	; 0x27
    3058:	18fb      	adds	r3, r7, r3
    305a:	781b      	ldrb	r3, [r3, #0]
    305c:	2201      	movs	r2, #1
    305e:	4053      	eors	r3, r2
    3060:	b2db      	uxtb	r3, r3
    3062:	2b00      	cmp	r3, #0
    3064:	d003      	beq.n	306e <mcp23017_check_all+0x7e>
	{
		ble_uart_write("ALL OK");
    3066:	4b08      	ldr	r3, [pc, #32]	; (3088 <mcp23017_check_all+0x98>)
    3068:	0018      	movs	r0, r3
    306a:	4b06      	ldr	r3, [pc, #24]	; (3084 <mcp23017_check_all+0x94>)
    306c:	4798      	blx	r3
	}
    306e:	46c0      	nop			; (mov r8, r8)
    3070:	46bd      	mov	sp, r7
    3072:	b00b      	add	sp, #44	; 0x2c
    3074:	bd90      	pop	{r4, r7, pc}
    3076:	46c0      	nop			; (mov r8, r8)
    3078:	200000e0 	.word	0x200000e0
    307c:	00006f2c 	.word	0x00006f2c
    3080:	00005a3d 	.word	0x00005a3d
    3084:	00001299 	.word	0x00001299
    3088:	00006f38 	.word	0x00006f38

0000308c <i2c_write>:
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
	i2c_master_enable(&i2c_master_instance);
}

uint8_t i2c_write(uint8_t address,uint8_t* data, uint8_t data_size)
{
    308c:	b580      	push	{r7, lr}
    308e:	b086      	sub	sp, #24
    3090:	af00      	add	r7, sp, #0
    3092:	6039      	str	r1, [r7, #0]
    3094:	0011      	movs	r1, r2
    3096:	1dfb      	adds	r3, r7, #7
    3098:	1c02      	adds	r2, r0, #0
    309a:	701a      	strb	r2, [r3, #0]
    309c:	1dbb      	adds	r3, r7, #6
    309e:	1c0a      	adds	r2, r1, #0
    30a0:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
    30a2:	1dfb      	adds	r3, r7, #7
    30a4:	781b      	ldrb	r3, [r3, #0]
    30a6:	b29a      	uxth	r2, r3
    30a8:	2308      	movs	r3, #8
    30aa:	18fb      	adds	r3, r7, r3
    30ac:	801a      	strh	r2, [r3, #0]
    30ae:	1dbb      	adds	r3, r7, #6
    30b0:	781b      	ldrb	r3, [r3, #0]
    30b2:	b29a      	uxth	r2, r3
    30b4:	2308      	movs	r3, #8
    30b6:	18fb      	adds	r3, r7, r3
    30b8:	805a      	strh	r2, [r3, #2]
    30ba:	2308      	movs	r3, #8
    30bc:	18fb      	adds	r3, r7, r3
    30be:	683a      	ldr	r2, [r7, #0]
    30c0:	605a      	str	r2, [r3, #4]
    30c2:	2308      	movs	r3, #8
    30c4:	18fb      	adds	r3, r7, r3
    30c6:	2200      	movs	r2, #0
    30c8:	721a      	strb	r2, [r3, #8]
    30ca:	2308      	movs	r3, #8
    30cc:	18fb      	adds	r3, r7, r3
    30ce:	2200      	movs	r2, #0
    30d0:	725a      	strb	r2, [r3, #9]
    30d2:	2308      	movs	r3, #8
    30d4:	18fb      	adds	r3, r7, r3
    30d6:	2200      	movs	r2, #0
    30d8:	729a      	strb	r2, [r3, #10]
		.data        = data,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	uint16_t timeout = 0;
    30da:	2316      	movs	r3, #22
    30dc:	18fb      	adds	r3, r7, r3
    30de:	2200      	movs	r2, #0
    30e0:	801a      	strh	r2, [r3, #0]

	return i2c_master_write_packet_wait(&i2c_master_instance,&packet);
    30e2:	2308      	movs	r3, #8
    30e4:	18fa      	adds	r2, r7, r3
    30e6:	4b05      	ldr	r3, [pc, #20]	; (30fc <i2c_write+0x70>)
    30e8:	0011      	movs	r1, r2
    30ea:	0018      	movs	r0, r3
    30ec:	4b04      	ldr	r3, [pc, #16]	; (3100 <i2c_write+0x74>)
    30ee:	4798      	blx	r3
    30f0:	0003      	movs	r3, r0
	{
		if (timeout++ == I2C_TIMEOUT) {
			break;
		}
	}*/
}
    30f2:	0018      	movs	r0, r3
    30f4:	46bd      	mov	sp, r7
    30f6:	b006      	add	sp, #24
    30f8:	bd80      	pop	{r7, pc}
    30fa:	46c0      	nop			; (mov r8, r8)
    30fc:	20001704 	.word	0x20001704
    3100:	00000fcd 	.word	0x00000fcd

00003104 <i2c_read>:
	}	
	return found_array;
}

uint8_t i2c_read(uint8_t addr,uint8_t reg, uint8_t data_length,uint8_t* data_ptr)
{
    3104:	b590      	push	{r4, r7, lr}
    3106:	b08b      	sub	sp, #44	; 0x2c
    3108:	af00      	add	r7, sp, #0
    310a:	0004      	movs	r4, r0
    310c:	0008      	movs	r0, r1
    310e:	0011      	movs	r1, r2
    3110:	603b      	str	r3, [r7, #0]
    3112:	1dfb      	adds	r3, r7, #7
    3114:	1c22      	adds	r2, r4, #0
    3116:	701a      	strb	r2, [r3, #0]
    3118:	1dbb      	adds	r3, r7, #6
    311a:	1c02      	adds	r2, r0, #0
    311c:	701a      	strb	r2, [r3, #0]
    311e:	1d7b      	adds	r3, r7, #5
    3120:	1c0a      	adds	r2, r1, #0
    3122:	701a      	strb	r2, [r3, #0]
	//uint8_t read_datab[data_length];
	uint8_t state = 0;
    3124:	2325      	movs	r3, #37	; 0x25
    3126:	18fb      	adds	r3, r7, r3
    3128:	2200      	movs	r2, #0
    312a:	701a      	strb	r2, [r3, #0]
	//uint8_t address = (addr << 1) + 1;
	
	uint8_t data[2];
	data[0] = reg;
    312c:	2320      	movs	r3, #32
    312e:	18fb      	adds	r3, r7, r3
    3130:	1dba      	adds	r2, r7, #6
    3132:	7812      	ldrb	r2, [r2, #0]
    3134:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
    3136:	2320      	movs	r3, #32
    3138:	18fb      	adds	r3, r7, r3
    313a:	22ff      	movs	r2, #255	; 0xff
    313c:	705a      	strb	r2, [r3, #1]
	
	struct i2c_master_packet packet = {
		.address     = addr | (1 << 8),
    313e:	1dfb      	adds	r3, r7, #7
    3140:	781b      	ldrb	r3, [r3, #0]
    3142:	b29b      	uxth	r3, r3
    3144:	2280      	movs	r2, #128	; 0x80
    3146:	0052      	lsls	r2, r2, #1
    3148:	4313      	orrs	r3, r2
    314a:	b29a      	uxth	r2, r3
	struct i2c_master_packet packet = {
    314c:	2314      	movs	r3, #20
    314e:	18fb      	adds	r3, r7, r3
    3150:	801a      	strh	r2, [r3, #0]
    3152:	1d7b      	adds	r3, r7, #5
    3154:	781b      	ldrb	r3, [r3, #0]
    3156:	b29a      	uxth	r2, r3
    3158:	2314      	movs	r3, #20
    315a:	18fb      	adds	r3, r7, r3
    315c:	805a      	strh	r2, [r3, #2]
    315e:	2314      	movs	r3, #20
    3160:	18fb      	adds	r3, r7, r3
    3162:	2220      	movs	r2, #32
    3164:	18ba      	adds	r2, r7, r2
    3166:	605a      	str	r2, [r3, #4]
    3168:	2314      	movs	r3, #20
    316a:	18fb      	adds	r3, r7, r3
    316c:	2200      	movs	r2, #0
    316e:	721a      	strb	r2, [r3, #8]
    3170:	2314      	movs	r3, #20
    3172:	18fb      	adds	r3, r7, r3
    3174:	2200      	movs	r2, #0
    3176:	725a      	strb	r2, [r3, #9]
    3178:	2314      	movs	r3, #20
    317a:	18fb      	adds	r3, r7, r3
    317c:	2200      	movs	r2, #0
    317e:	729a      	strb	r2, [r3, #10]
		.data        = data,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	uint16_t timeout = 0;
    3180:	2326      	movs	r3, #38	; 0x26
    3182:	18fb      	adds	r3, r7, r3
    3184:	2200      	movs	r2, #0
    3186:	801a      	strh	r2, [r3, #0]

	do
	{
		state = i2c_master_write_packet_wait(&i2c_master_instance,&packet);
    3188:	2325      	movs	r3, #37	; 0x25
    318a:	18fc      	adds	r4, r7, r3
    318c:	2314      	movs	r3, #20
    318e:	18fa      	adds	r2, r7, r3
    3190:	4b23      	ldr	r3, [pc, #140]	; (3220 <i2c_read+0x11c>)
    3192:	0011      	movs	r1, r2
    3194:	0018      	movs	r0, r3
    3196:	4b23      	ldr	r3, [pc, #140]	; (3224 <i2c_read+0x120>)
    3198:	4798      	blx	r3
    319a:	0003      	movs	r3, r0
    319c:	7023      	strb	r3, [r4, #0]
		if (timeout++ == I2C_TIMEOUT) {
    319e:	2326      	movs	r3, #38	; 0x26
    31a0:	18fb      	adds	r3, r7, r3
    31a2:	881b      	ldrh	r3, [r3, #0]
    31a4:	2226      	movs	r2, #38	; 0x26
    31a6:	18ba      	adds	r2, r7, r2
    31a8:	1c59      	adds	r1, r3, #1
    31aa:	8011      	strh	r1, [r2, #0]
    31ac:	2b0a      	cmp	r3, #10
    31ae:	d103      	bne.n	31b8 <i2c_read+0xb4>
			return state;
    31b0:	2325      	movs	r3, #37	; 0x25
    31b2:	18fb      	adds	r3, r7, r3
    31b4:	781b      	ldrb	r3, [r3, #0]
    31b6:	e02e      	b.n	3216 <i2c_read+0x112>
			break;
		}
	}
	while (state != STATUS_OK);
    31b8:	2325      	movs	r3, #37	; 0x25
    31ba:	18fb      	adds	r3, r7, r3
    31bc:	781b      	ldrb	r3, [r3, #0]
    31be:	2b00      	cmp	r3, #0
    31c0:	d1e2      	bne.n	3188 <i2c_read+0x84>
	
	struct i2c_master_packet read_packet = {
    31c2:	1dfb      	adds	r3, r7, #7
    31c4:	781b      	ldrb	r3, [r3, #0]
    31c6:	b29a      	uxth	r2, r3
    31c8:	2308      	movs	r3, #8
    31ca:	18fb      	adds	r3, r7, r3
    31cc:	801a      	strh	r2, [r3, #0]
    31ce:	1d7b      	adds	r3, r7, #5
    31d0:	781b      	ldrb	r3, [r3, #0]
    31d2:	b29a      	uxth	r2, r3
    31d4:	2308      	movs	r3, #8
    31d6:	18fb      	adds	r3, r7, r3
    31d8:	805a      	strh	r2, [r3, #2]
    31da:	2308      	movs	r3, #8
    31dc:	18fb      	adds	r3, r7, r3
    31de:	683a      	ldr	r2, [r7, #0]
    31e0:	605a      	str	r2, [r3, #4]
    31e2:	2308      	movs	r3, #8
    31e4:	18fb      	adds	r3, r7, r3
    31e6:	2200      	movs	r2, #0
    31e8:	721a      	strb	r2, [r3, #8]
    31ea:	2308      	movs	r3, #8
    31ec:	18fb      	adds	r3, r7, r3
    31ee:	2200      	movs	r2, #0
    31f0:	725a      	strb	r2, [r3, #9]
    31f2:	2308      	movs	r3, #8
    31f4:	18fb      	adds	r3, r7, r3
    31f6:	2200      	movs	r2, #0
    31f8:	729a      	strb	r2, [r3, #10]
		.data        = data_ptr,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	state = i2c_master_read_packet_wait(&i2c_master_instance,&read_packet);
    31fa:	2325      	movs	r3, #37	; 0x25
    31fc:	18fc      	adds	r4, r7, r3
    31fe:	2308      	movs	r3, #8
    3200:	18fa      	adds	r2, r7, r3
    3202:	4b07      	ldr	r3, [pc, #28]	; (3220 <i2c_read+0x11c>)
    3204:	0011      	movs	r1, r2
    3206:	0018      	movs	r0, r3
    3208:	4b07      	ldr	r3, [pc, #28]	; (3228 <i2c_read+0x124>)
    320a:	4798      	blx	r3
    320c:	0003      	movs	r3, r0
    320e:	7023      	strb	r3, [r4, #0]
	return state;
    3210:	2325      	movs	r3, #37	; 0x25
    3212:	18fb      	adds	r3, r7, r3
    3214:	781b      	ldrb	r3, [r3, #0]
}
    3216:	0018      	movs	r0, r3
    3218:	46bd      	mov	sp, r7
    321a:	b00b      	add	sp, #44	; 0x2c
    321c:	bd90      	pop	{r4, r7, pc}
    321e:	46c0      	nop			; (mov r8, r8)
    3220:	20001704 	.word	0x20001704
    3224:	00000fcd 	.word	0x00000fcd
    3228:	00000e25 	.word	0x00000e25

0000322c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    322c:	b580      	push	{r7, lr}
    322e:	b084      	sub	sp, #16
    3230:	af00      	add	r7, sp, #0
    3232:	0002      	movs	r2, r0
    3234:	1dfb      	adds	r3, r7, #7
    3236:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3238:	230f      	movs	r3, #15
    323a:	18fb      	adds	r3, r7, r3
    323c:	1dfa      	adds	r2, r7, #7
    323e:	7812      	ldrb	r2, [r2, #0]
    3240:	09d2      	lsrs	r2, r2, #7
    3242:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3244:	230e      	movs	r3, #14
    3246:	18fb      	adds	r3, r7, r3
    3248:	1dfa      	adds	r2, r7, #7
    324a:	7812      	ldrb	r2, [r2, #0]
    324c:	0952      	lsrs	r2, r2, #5
    324e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3250:	4b0d      	ldr	r3, [pc, #52]	; (3288 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3252:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3254:	230f      	movs	r3, #15
    3256:	18fb      	adds	r3, r7, r3
    3258:	781b      	ldrb	r3, [r3, #0]
    325a:	2b00      	cmp	r3, #0
    325c:	d10f      	bne.n	327e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    325e:	230f      	movs	r3, #15
    3260:	18fb      	adds	r3, r7, r3
    3262:	781b      	ldrb	r3, [r3, #0]
    3264:	009b      	lsls	r3, r3, #2
    3266:	2210      	movs	r2, #16
    3268:	4694      	mov	ip, r2
    326a:	44bc      	add	ip, r7
    326c:	4463      	add	r3, ip
    326e:	3b08      	subs	r3, #8
    3270:	681a      	ldr	r2, [r3, #0]
    3272:	230e      	movs	r3, #14
    3274:	18fb      	adds	r3, r7, r3
    3276:	781b      	ldrb	r3, [r3, #0]
    3278:	01db      	lsls	r3, r3, #7
    327a:	18d3      	adds	r3, r2, r3
    327c:	e000      	b.n	3280 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    327e:	2300      	movs	r3, #0
	}
}
    3280:	0018      	movs	r0, r3
    3282:	46bd      	mov	sp, r7
    3284:	b004      	add	sp, #16
    3286:	bd80      	pop	{r7, pc}
    3288:	41004400 	.word	0x41004400

0000328c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    328c:	b580      	push	{r7, lr}
    328e:	b082      	sub	sp, #8
    3290:	af00      	add	r7, sp, #0
    3292:	0002      	movs	r2, r0
    3294:	1dfb      	adds	r3, r7, #7
    3296:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3298:	1dfb      	adds	r3, r7, #7
    329a:	781b      	ldrb	r3, [r3, #0]
    329c:	0018      	movs	r0, r3
    329e:	4b03      	ldr	r3, [pc, #12]	; (32ac <port_get_group_from_gpio_pin+0x20>)
    32a0:	4798      	blx	r3
    32a2:	0003      	movs	r3, r0
}
    32a4:	0018      	movs	r0, r3
    32a6:	46bd      	mov	sp, r7
    32a8:	b002      	add	sp, #8
    32aa:	bd80      	pop	{r7, pc}
    32ac:	0000322d 	.word	0x0000322d

000032b0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    32b0:	b580      	push	{r7, lr}
    32b2:	b084      	sub	sp, #16
    32b4:	af00      	add	r7, sp, #0
    32b6:	0002      	movs	r2, r0
    32b8:	1dfb      	adds	r3, r7, #7
    32ba:	701a      	strb	r2, [r3, #0]
    32bc:	1dbb      	adds	r3, r7, #6
    32be:	1c0a      	adds	r2, r1, #0
    32c0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    32c2:	1dfb      	adds	r3, r7, #7
    32c4:	781b      	ldrb	r3, [r3, #0]
    32c6:	0018      	movs	r0, r3
    32c8:	4b0d      	ldr	r3, [pc, #52]	; (3300 <port_pin_set_output_level+0x50>)
    32ca:	4798      	blx	r3
    32cc:	0003      	movs	r3, r0
    32ce:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    32d0:	1dfb      	adds	r3, r7, #7
    32d2:	781b      	ldrb	r3, [r3, #0]
    32d4:	221f      	movs	r2, #31
    32d6:	4013      	ands	r3, r2
    32d8:	2201      	movs	r2, #1
    32da:	409a      	lsls	r2, r3
    32dc:	0013      	movs	r3, r2
    32de:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    32e0:	1dbb      	adds	r3, r7, #6
    32e2:	781b      	ldrb	r3, [r3, #0]
    32e4:	2b00      	cmp	r3, #0
    32e6:	d003      	beq.n	32f0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    32e8:	68fb      	ldr	r3, [r7, #12]
    32ea:	68ba      	ldr	r2, [r7, #8]
    32ec:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    32ee:	e002      	b.n	32f6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    32f0:	68fb      	ldr	r3, [r7, #12]
    32f2:	68ba      	ldr	r2, [r7, #8]
    32f4:	615a      	str	r2, [r3, #20]
}
    32f6:	46c0      	nop			; (mov r8, r8)
    32f8:	46bd      	mov	sp, r7
    32fa:	b004      	add	sp, #16
    32fc:	bd80      	pop	{r7, pc}
    32fe:	46c0      	nop			; (mov r8, r8)
    3300:	0000328d 	.word	0x0000328d

00003304 <init_all_ports>:
	data[1] = 0xFF;
	state = i2c_write(MCP23017_I2C_ADDR_000,(uint8_t *)data,2);
}

uint8_t init_all_ports(void)
{
    3304:	b590      	push	{r4, r7, lr}
    3306:	b085      	sub	sp, #20
    3308:	af00      	add	r7, sp, #0
	uint8_t states = 0;
    330a:	230f      	movs	r3, #15
    330c:	18fb      	adds	r3, r7, r3
    330e:	2200      	movs	r2, #0
    3310:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[1] = 0x00;
    3312:	1d3b      	adds	r3, r7, #4
    3314:	2200      	movs	r2, #0
    3316:	705a      	strb	r2, [r3, #1]
	
	for (int i=0;i<8;i++)
    3318:	2300      	movs	r3, #0
    331a:	60bb      	str	r3, [r7, #8]
    331c:	e036      	b.n	338c <init_all_ports+0x88>
	{
		data[0] = MCP23017_IODIRA;
    331e:	1d3b      	adds	r3, r7, #4
    3320:	2200      	movs	r2, #0
    3322:	701a      	strb	r2, [r3, #0]
		uint8_t state = i2c_write(MCP23017_I2C_ADDR_000+i,(uint8_t *)data,2);
    3324:	68bb      	ldr	r3, [r7, #8]
    3326:	b2db      	uxtb	r3, r3
    3328:	3320      	adds	r3, #32
    332a:	b2db      	uxtb	r3, r3
    332c:	1dfc      	adds	r4, r7, #7
    332e:	1d39      	adds	r1, r7, #4
    3330:	2202      	movs	r2, #2
    3332:	0018      	movs	r0, r3
    3334:	4b28      	ldr	r3, [pc, #160]	; (33d8 <init_all_ports+0xd4>)
    3336:	4798      	blx	r3
    3338:	0003      	movs	r3, r0
    333a:	7023      	strb	r3, [r4, #0]
		if (state == STATUS_OK)
    333c:	1dfb      	adds	r3, r7, #7
    333e:	781b      	ldrb	r3, [r3, #0]
    3340:	2b00      	cmp	r3, #0
    3342:	d120      	bne.n	3386 <init_all_ports+0x82>
		{
			data[0] = MCP23017_IODIRB;
    3344:	1d3b      	adds	r3, r7, #4
    3346:	2201      	movs	r2, #1
    3348:	701a      	strb	r2, [r3, #0]
			state = i2c_write(MCP23017_I2C_ADDR_000+i,(uint8_t *)data,2);
    334a:	68bb      	ldr	r3, [r7, #8]
    334c:	b2db      	uxtb	r3, r3
    334e:	3320      	adds	r3, #32
    3350:	b2db      	uxtb	r3, r3
    3352:	1dfc      	adds	r4, r7, #7
    3354:	1d39      	adds	r1, r7, #4
    3356:	2202      	movs	r2, #2
    3358:	0018      	movs	r0, r3
    335a:	4b1f      	ldr	r3, [pc, #124]	; (33d8 <init_all_ports+0xd4>)
    335c:	4798      	blx	r3
    335e:	0003      	movs	r3, r0
    3360:	7023      	strb	r3, [r4, #0]
			if (state == STATUS_OK)
    3362:	1dfb      	adds	r3, r7, #7
    3364:	781b      	ldrb	r3, [r3, #0]
    3366:	2b00      	cmp	r3, #0
    3368:	d10d      	bne.n	3386 <init_all_ports+0x82>
			{
				states |= (1 << i);
    336a:	2201      	movs	r2, #1
    336c:	68bb      	ldr	r3, [r7, #8]
    336e:	409a      	lsls	r2, r3
    3370:	0013      	movs	r3, r2
    3372:	b25a      	sxtb	r2, r3
    3374:	230f      	movs	r3, #15
    3376:	18fb      	adds	r3, r7, r3
    3378:	781b      	ldrb	r3, [r3, #0]
    337a:	b25b      	sxtb	r3, r3
    337c:	4313      	orrs	r3, r2
    337e:	b25a      	sxtb	r2, r3
    3380:	230f      	movs	r3, #15
    3382:	18fb      	adds	r3, r7, r3
    3384:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
    3386:	68bb      	ldr	r3, [r7, #8]
    3388:	3301      	adds	r3, #1
    338a:	60bb      	str	r3, [r7, #8]
    338c:	68bb      	ldr	r3, [r7, #8]
    338e:	2b07      	cmp	r3, #7
    3390:	ddc5      	ble.n	331e <init_all_ports+0x1a>
			}
		}
	}
	
	data[1] = 0x80;
    3392:	1d3b      	adds	r3, r7, #4
    3394:	2280      	movs	r2, #128	; 0x80
    3396:	705a      	strb	r2, [r3, #1]
	data[0] = MCP23017_GPIOA;
    3398:	1d3b      	adds	r3, r7, #4
    339a:	2212      	movs	r2, #18
    339c:	701a      	strb	r2, [r3, #0]
	uint8_t state = i2c_write(MCP23017_I2C_ADDR_001,(uint8_t *)data,2);
    339e:	1dbc      	adds	r4, r7, #6
    33a0:	1d3b      	adds	r3, r7, #4
    33a2:	2202      	movs	r2, #2
    33a4:	0019      	movs	r1, r3
    33a6:	2021      	movs	r0, #33	; 0x21
    33a8:	4b0b      	ldr	r3, [pc, #44]	; (33d8 <init_all_ports+0xd4>)
    33aa:	4798      	blx	r3
    33ac:	0003      	movs	r3, r0
    33ae:	7023      	strb	r3, [r4, #0]
	data[0] = MCP23017_GPIOB;
    33b0:	1d3b      	adds	r3, r7, #4
    33b2:	2213      	movs	r2, #19
    33b4:	701a      	strb	r2, [r3, #0]
	state = i2c_write(MCP23017_I2C_ADDR_001,(uint8_t *)data,2);
    33b6:	1dbc      	adds	r4, r7, #6
    33b8:	1d3b      	adds	r3, r7, #4
    33ba:	2202      	movs	r2, #2
    33bc:	0019      	movs	r1, r3
    33be:	2021      	movs	r0, #33	; 0x21
    33c0:	4b05      	ldr	r3, [pc, #20]	; (33d8 <init_all_ports+0xd4>)
    33c2:	4798      	blx	r3
    33c4:	0003      	movs	r3, r0
    33c6:	7023      	strb	r3, [r4, #0]
	
	return states;
    33c8:	230f      	movs	r3, #15
    33ca:	18fb      	adds	r3, r7, r3
    33cc:	781b      	ldrb	r3, [r3, #0]
}
    33ce:	0018      	movs	r0, r3
    33d0:	46bd      	mov	sp, r7
    33d2:	b005      	add	sp, #20
    33d4:	bd90      	pop	{r4, r7, pc}
    33d6:	46c0      	nop			; (mov r8, r8)
    33d8:	0000308d 	.word	0x0000308d

000033dc <mcp23017_set_pins>:
	data[0] = MCP23017_GPIOB;
	state = i2c_write(MCP23017_I2C_ADDR_000,(uint8_t *)data,2);	
}

uint8_t mcp23017_set_pins(uint8_t addr, uint8_t porta, uint8_t portb)
{
    33dc:	b590      	push	{r4, r7, lr}
    33de:	b085      	sub	sp, #20
    33e0:	af00      	add	r7, sp, #0
    33e2:	0004      	movs	r4, r0
    33e4:	0008      	movs	r0, r1
    33e6:	0011      	movs	r1, r2
    33e8:	1dfb      	adds	r3, r7, #7
    33ea:	1c22      	adds	r2, r4, #0
    33ec:	701a      	strb	r2, [r3, #0]
    33ee:	1dbb      	adds	r3, r7, #6
    33f0:	1c02      	adds	r2, r0, #0
    33f2:	701a      	strb	r2, [r3, #0]
    33f4:	1d7b      	adds	r3, r7, #5
    33f6:	1c0a      	adds	r2, r1, #0
    33f8:	701a      	strb	r2, [r3, #0]
	uint8_t state = 0x00;
    33fa:	230f      	movs	r3, #15
    33fc:	18fb      	adds	r3, r7, r3
    33fe:	2200      	movs	r2, #0
    3400:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = MCP23017_GPIOA;
    3402:	230c      	movs	r3, #12
    3404:	18fb      	adds	r3, r7, r3
    3406:	2212      	movs	r2, #18
    3408:	701a      	strb	r2, [r3, #0]
	data[1] = porta;
    340a:	230c      	movs	r3, #12
    340c:	18fb      	adds	r3, r7, r3
    340e:	1dba      	adds	r2, r7, #6
    3410:	7812      	ldrb	r2, [r2, #0]
    3412:	705a      	strb	r2, [r3, #1]
	state = i2c_write(addr,(uint8_t *)data,2);
    3414:	230f      	movs	r3, #15
    3416:	18fc      	adds	r4, r7, r3
    3418:	230c      	movs	r3, #12
    341a:	18f9      	adds	r1, r7, r3
    341c:	1dfb      	adds	r3, r7, #7
    341e:	781b      	ldrb	r3, [r3, #0]
    3420:	2202      	movs	r2, #2
    3422:	0018      	movs	r0, r3
    3424:	4b12      	ldr	r3, [pc, #72]	; (3470 <mcp23017_set_pins+0x94>)
    3426:	4798      	blx	r3
    3428:	0003      	movs	r3, r0
    342a:	7023      	strb	r3, [r4, #0]
	data[0] = MCP23017_GPIOB;
    342c:	230c      	movs	r3, #12
    342e:	18fb      	adds	r3, r7, r3
    3430:	2213      	movs	r2, #19
    3432:	701a      	strb	r2, [r3, #0]
	data[1] = portb;
    3434:	230c      	movs	r3, #12
    3436:	18fb      	adds	r3, r7, r3
    3438:	1d7a      	adds	r2, r7, #5
    343a:	7812      	ldrb	r2, [r2, #0]
    343c:	705a      	strb	r2, [r3, #1]
	state |= i2c_write(addr,(uint8_t *)data,2);
    343e:	230c      	movs	r3, #12
    3440:	18f9      	adds	r1, r7, r3
    3442:	1dfb      	adds	r3, r7, #7
    3444:	781b      	ldrb	r3, [r3, #0]
    3446:	2202      	movs	r2, #2
    3448:	0018      	movs	r0, r3
    344a:	4b09      	ldr	r3, [pc, #36]	; (3470 <mcp23017_set_pins+0x94>)
    344c:	4798      	blx	r3
    344e:	0003      	movs	r3, r0
    3450:	0019      	movs	r1, r3
    3452:	230f      	movs	r3, #15
    3454:	18fb      	adds	r3, r7, r3
    3456:	220f      	movs	r2, #15
    3458:	18ba      	adds	r2, r7, r2
    345a:	7812      	ldrb	r2, [r2, #0]
    345c:	430a      	orrs	r2, r1
    345e:	701a      	strb	r2, [r3, #0]
	
	return state;
    3460:	230f      	movs	r3, #15
    3462:	18fb      	adds	r3, r7, r3
    3464:	781b      	ldrb	r3, [r3, #0]
}
    3466:	0018      	movs	r0, r3
    3468:	46bd      	mov	sp, r7
    346a:	b005      	add	sp, #20
    346c:	bd90      	pop	{r4, r7, pc}
    346e:	46c0      	nop			; (mov r8, r8)
    3470:	0000308d 	.word	0x0000308d

00003474 <mcp23017_read_all_ports>:

uint8_t data_being_read[8][2];

void mcp23017_read_all_ports(uint8_t read_data_ptr[2][8], uint8_t states[8])
{
    3474:	b5b0      	push	{r4, r5, r7, lr}
    3476:	b084      	sub	sp, #16
    3478:	af00      	add	r7, sp, #0
    347a:	6078      	str	r0, [r7, #4]
    347c:	6039      	str	r1, [r7, #0]
	uint8_t state = 0x00;
    347e:	230e      	movs	r3, #14
    3480:	18fb      	adds	r3, r7, r3
    3482:	2200      	movs	r2, #0
    3484:	701a      	strb	r2, [r3, #0]
	//uint8_t data = 0x00;
	for (uint8_t i=0;i<8;i++)
    3486:	230f      	movs	r3, #15
    3488:	18fb      	adds	r3, r7, r3
    348a:	2200      	movs	r2, #0
    348c:	701a      	strb	r2, [r3, #0]
    348e:	e03e      	b.n	350e <mcp23017_read_all_ports+0x9a>
	{
		//data = 0x00;
		//data_being_read[i][0] = 0;
		//read_data_ptr[i][0] = 0;
		state = i2c_read(MCP23017_I2C_ADDR_000+i,MCP23017_GPIOA, 1,(uint8_t *)&read_data_ptr[0][i]);
    3490:	230f      	movs	r3, #15
    3492:	18fb      	adds	r3, r7, r3
    3494:	781b      	ldrb	r3, [r3, #0]
    3496:	3320      	adds	r3, #32
    3498:	b2d8      	uxtb	r0, r3
    349a:	230f      	movs	r3, #15
    349c:	18fb      	adds	r3, r7, r3
    349e:	781b      	ldrb	r3, [r3, #0]
    34a0:	687a      	ldr	r2, [r7, #4]
    34a2:	18d3      	adds	r3, r2, r3
    34a4:	220e      	movs	r2, #14
    34a6:	18bc      	adds	r4, r7, r2
    34a8:	2201      	movs	r2, #1
    34aa:	2112      	movs	r1, #18
    34ac:	4d1c      	ldr	r5, [pc, #112]	; (3520 <mcp23017_read_all_ports+0xac>)
    34ae:	47a8      	blx	r5
    34b0:	0003      	movs	r3, r0
    34b2:	7023      	strb	r3, [r4, #0]
		//read_data[i][0] = data;
		//data_being_read[i][0] = data;
		//read_data_ptr[i][1] = 0;
		state |= i2c_read(MCP23017_I2C_ADDR_000+i,MCP23017_GPIOB, 1,(uint8_t *)&read_data_ptr[1][i]);
    34b4:	230f      	movs	r3, #15
    34b6:	18fb      	adds	r3, r7, r3
    34b8:	781b      	ldrb	r3, [r3, #0]
    34ba:	3320      	adds	r3, #32
    34bc:	b2d8      	uxtb	r0, r3
    34be:	687b      	ldr	r3, [r7, #4]
    34c0:	3308      	adds	r3, #8
    34c2:	001a      	movs	r2, r3
    34c4:	230f      	movs	r3, #15
    34c6:	18fb      	adds	r3, r7, r3
    34c8:	781b      	ldrb	r3, [r3, #0]
    34ca:	18d3      	adds	r3, r2, r3
    34cc:	2201      	movs	r2, #1
    34ce:	2113      	movs	r1, #19
    34d0:	4c13      	ldr	r4, [pc, #76]	; (3520 <mcp23017_read_all_ports+0xac>)
    34d2:	47a0      	blx	r4
    34d4:	0003      	movs	r3, r0
    34d6:	0019      	movs	r1, r3
    34d8:	230e      	movs	r3, #14
    34da:	18fb      	adds	r3, r7, r3
    34dc:	220e      	movs	r2, #14
    34de:	18ba      	adds	r2, r7, r2
    34e0:	7812      	ldrb	r2, [r2, #0]
    34e2:	430a      	orrs	r2, r1
    34e4:	701a      	strb	r2, [r3, #0]
		//data_being_read[i][1] = data;
		//read_data[i][1] = data;
		states[i] = state;
    34e6:	230f      	movs	r3, #15
    34e8:	18fb      	adds	r3, r7, r3
    34ea:	781b      	ldrb	r3, [r3, #0]
    34ec:	683a      	ldr	r2, [r7, #0]
    34ee:	18d3      	adds	r3, r2, r3
    34f0:	220e      	movs	r2, #14
    34f2:	18ba      	adds	r2, r7, r2
    34f4:	7812      	ldrb	r2, [r2, #0]
    34f6:	701a      	strb	r2, [r3, #0]
		state = 0x00;
    34f8:	230e      	movs	r3, #14
    34fa:	18fb      	adds	r3, r7, r3
    34fc:	2200      	movs	r2, #0
    34fe:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0;i<8;i++)
    3500:	230f      	movs	r3, #15
    3502:	18fb      	adds	r3, r7, r3
    3504:	781a      	ldrb	r2, [r3, #0]
    3506:	230f      	movs	r3, #15
    3508:	18fb      	adds	r3, r7, r3
    350a:	3201      	adds	r2, #1
    350c:	701a      	strb	r2, [r3, #0]
    350e:	230f      	movs	r3, #15
    3510:	18fb      	adds	r3, r7, r3
    3512:	781b      	ldrb	r3, [r3, #0]
    3514:	2b07      	cmp	r3, #7
    3516:	d9bb      	bls.n	3490 <mcp23017_read_all_ports+0x1c>
	}
	//read_data = data_being_read;
	//return state;
}
    3518:	46c0      	nop			; (mov r8, r8)
    351a:	46bd      	mov	sp, r7
    351c:	b004      	add	sp, #16
    351e:	bdb0      	pop	{r4, r5, r7, pc}
    3520:	00003105 	.word	0x00003105

00003524 <mcp23017_reset>:
	port_pin_set_config(MCP23017_PWR_PIN,&config_port_pin);
	port_pin_set_output_level(MCP23017_PWR_PIN,true);
}

void mcp23017_reset(void)
{
    3524:	b5f0      	push	{r4, r5, r6, r7, lr}
    3526:	b087      	sub	sp, #28
    3528:	af00      	add	r7, sp, #0
	port_pin_set_output_level(MCP23017_PWR_PIN, false);
    352a:	2100      	movs	r1, #0
    352c:	2007      	movs	r0, #7
    352e:	4b32      	ldr	r3, [pc, #200]	; (35f8 <mcp23017_reset+0xd4>)
    3530:	4798      	blx	r3
	delay_ms(250);
    3532:	2000      	movs	r0, #0
    3534:	4b31      	ldr	r3, [pc, #196]	; (35fc <mcp23017_reset+0xd8>)
    3536:	4798      	blx	r3
    3538:	0003      	movs	r3, r0
    353a:	001d      	movs	r5, r3
    353c:	2300      	movs	r3, #0
    353e:	001e      	movs	r6, r3
    3540:	4c2f      	ldr	r4, [pc, #188]	; (3600 <mcp23017_reset+0xdc>)
    3542:	22fa      	movs	r2, #250	; 0xfa
    3544:	2300      	movs	r3, #0
    3546:	0028      	movs	r0, r5
    3548:	0031      	movs	r1, r6
    354a:	47a0      	blx	r4
    354c:	0003      	movs	r3, r0
    354e:	000c      	movs	r4, r1
    3550:	0019      	movs	r1, r3
    3552:	0022      	movs	r2, r4
    3554:	4b2b      	ldr	r3, [pc, #172]	; (3604 <mcp23017_reset+0xe0>)
    3556:	2400      	movs	r4, #0
    3558:	18c9      	adds	r1, r1, r3
    355a:	4162      	adcs	r2, r4
    355c:	0008      	movs	r0, r1
    355e:	0011      	movs	r1, r2
    3560:	4c29      	ldr	r4, [pc, #164]	; (3608 <mcp23017_reset+0xe4>)
    3562:	4a2a      	ldr	r2, [pc, #168]	; (360c <mcp23017_reset+0xe8>)
    3564:	2300      	movs	r3, #0
    3566:	47a0      	blx	r4
    3568:	0003      	movs	r3, r0
    356a:	000c      	movs	r4, r1
    356c:	0018      	movs	r0, r3
    356e:	4b28      	ldr	r3, [pc, #160]	; (3610 <mcp23017_reset+0xec>)
    3570:	4798      	blx	r3
	port_pin_set_output_level(MCP23017_PWR_PIN, true);
    3572:	2101      	movs	r1, #1
    3574:	2007      	movs	r0, #7
    3576:	4b20      	ldr	r3, [pc, #128]	; (35f8 <mcp23017_reset+0xd4>)
    3578:	4798      	blx	r3
	delay_ms(125);
    357a:	2000      	movs	r0, #0
    357c:	4b1f      	ldr	r3, [pc, #124]	; (35fc <mcp23017_reset+0xd8>)
    357e:	4798      	blx	r3
    3580:	0003      	movs	r3, r0
    3582:	603b      	str	r3, [r7, #0]
    3584:	2300      	movs	r3, #0
    3586:	607b      	str	r3, [r7, #4]
    3588:	6838      	ldr	r0, [r7, #0]
    358a:	6879      	ldr	r1, [r7, #4]
    358c:	0003      	movs	r3, r0
    358e:	000c      	movs	r4, r1
    3590:	0eda      	lsrs	r2, r3, #27
    3592:	0165      	lsls	r5, r4, #5
    3594:	617d      	str	r5, [r7, #20]
    3596:	697d      	ldr	r5, [r7, #20]
    3598:	4315      	orrs	r5, r2
    359a:	617d      	str	r5, [r7, #20]
    359c:	015b      	lsls	r3, r3, #5
    359e:	613b      	str	r3, [r7, #16]
    35a0:	693c      	ldr	r4, [r7, #16]
    35a2:	697d      	ldr	r5, [r7, #20]
    35a4:	0002      	movs	r2, r0
    35a6:	000b      	movs	r3, r1
    35a8:	1aa4      	subs	r4, r4, r2
    35aa:	419d      	sbcs	r5, r3
    35ac:	0023      	movs	r3, r4
    35ae:	002c      	movs	r4, r5
    35b0:	0f9a      	lsrs	r2, r3, #30
    35b2:	00a5      	lsls	r5, r4, #2
    35b4:	60fd      	str	r5, [r7, #12]
    35b6:	68fd      	ldr	r5, [r7, #12]
    35b8:	4315      	orrs	r5, r2
    35ba:	60fd      	str	r5, [r7, #12]
    35bc:	009b      	lsls	r3, r3, #2
    35be:	60bb      	str	r3, [r7, #8]
    35c0:	0003      	movs	r3, r0
    35c2:	000c      	movs	r4, r1
    35c4:	68b9      	ldr	r1, [r7, #8]
    35c6:	68fa      	ldr	r2, [r7, #12]
    35c8:	185b      	adds	r3, r3, r1
    35ca:	4154      	adcs	r4, r2
    35cc:	490d      	ldr	r1, [pc, #52]	; (3604 <mcp23017_reset+0xe0>)
    35ce:	2200      	movs	r2, #0
    35d0:	185b      	adds	r3, r3, r1
    35d2:	4154      	adcs	r4, r2
    35d4:	0018      	movs	r0, r3
    35d6:	0021      	movs	r1, r4
    35d8:	4c0b      	ldr	r4, [pc, #44]	; (3608 <mcp23017_reset+0xe4>)
    35da:	4a0c      	ldr	r2, [pc, #48]	; (360c <mcp23017_reset+0xe8>)
    35dc:	2300      	movs	r3, #0
    35de:	47a0      	blx	r4
    35e0:	0003      	movs	r3, r0
    35e2:	000c      	movs	r4, r1
    35e4:	0018      	movs	r0, r3
    35e6:	4b0a      	ldr	r3, [pc, #40]	; (3610 <mcp23017_reset+0xec>)
    35e8:	4798      	blx	r3
	init_all_ports();
    35ea:	4b0a      	ldr	r3, [pc, #40]	; (3614 <mcp23017_reset+0xf0>)
    35ec:	4798      	blx	r3
	//TODO pull PWR or RESET to MCP23017 ICs.
}
    35ee:	46c0      	nop			; (mov r8, r8)
    35f0:	46bd      	mov	sp, r7
    35f2:	b007      	add	sp, #28
    35f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35f6:	46c0      	nop			; (mov r8, r8)
    35f8:	000032b1 	.word	0x000032b1
    35fc:	00004aa5 	.word	0x00004aa5
    3600:	00005621 	.word	0x00005621
    3604:	00001b57 	.word	0x00001b57
    3608:	000055e1 	.word	0x000055e1
    360c:	00001b58 	.word	0x00001b58
    3610:	20000001 	.word	0x20000001
    3614:	00003305 	.word	0x00003305

00003618 <system_pinmux_get_group_from_gpio_pin>:
{
    3618:	b580      	push	{r7, lr}
    361a:	b084      	sub	sp, #16
    361c:	af00      	add	r7, sp, #0
    361e:	0002      	movs	r2, r0
    3620:	1dfb      	adds	r3, r7, #7
    3622:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3624:	230f      	movs	r3, #15
    3626:	18fb      	adds	r3, r7, r3
    3628:	1dfa      	adds	r2, r7, #7
    362a:	7812      	ldrb	r2, [r2, #0]
    362c:	09d2      	lsrs	r2, r2, #7
    362e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3630:	230e      	movs	r3, #14
    3632:	18fb      	adds	r3, r7, r3
    3634:	1dfa      	adds	r2, r7, #7
    3636:	7812      	ldrb	r2, [r2, #0]
    3638:	0952      	lsrs	r2, r2, #5
    363a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    363c:	4b0d      	ldr	r3, [pc, #52]	; (3674 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    363e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3640:	230f      	movs	r3, #15
    3642:	18fb      	adds	r3, r7, r3
    3644:	781b      	ldrb	r3, [r3, #0]
    3646:	2b00      	cmp	r3, #0
    3648:	d10f      	bne.n	366a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    364a:	230f      	movs	r3, #15
    364c:	18fb      	adds	r3, r7, r3
    364e:	781b      	ldrb	r3, [r3, #0]
    3650:	009b      	lsls	r3, r3, #2
    3652:	2210      	movs	r2, #16
    3654:	4694      	mov	ip, r2
    3656:	44bc      	add	ip, r7
    3658:	4463      	add	r3, ip
    365a:	3b08      	subs	r3, #8
    365c:	681a      	ldr	r2, [r3, #0]
    365e:	230e      	movs	r3, #14
    3660:	18fb      	adds	r3, r7, r3
    3662:	781b      	ldrb	r3, [r3, #0]
    3664:	01db      	lsls	r3, r3, #7
    3666:	18d3      	adds	r3, r2, r3
    3668:	e000      	b.n	366c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    366a:	2300      	movs	r3, #0
}
    366c:	0018      	movs	r0, r3
    366e:	46bd      	mov	sp, r7
    3670:	b004      	add	sp, #16
    3672:	bd80      	pop	{r7, pc}
    3674:	41004400 	.word	0x41004400

00003678 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    3678:	b580      	push	{r7, lr}
    367a:	b084      	sub	sp, #16
    367c:	af00      	add	r7, sp, #0
    367e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3680:	687b      	ldr	r3, [r7, #4]
    3682:	681b      	ldr	r3, [r3, #0]
    3684:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3686:	68fb      	ldr	r3, [r7, #12]
    3688:	7e5b      	ldrb	r3, [r3, #25]
    368a:	b2db      	uxtb	r3, r3
    368c:	b25b      	sxtb	r3, r3
    368e:	2b00      	cmp	r3, #0
    3690:	da01      	bge.n	3696 <adc_is_syncing+0x1e>
		return true;
    3692:	2301      	movs	r3, #1
    3694:	e000      	b.n	3698 <adc_is_syncing+0x20>
	}

	return false;
    3696:	2300      	movs	r3, #0
}
    3698:	0018      	movs	r0, r3
    369a:	46bd      	mov	sp, r7
    369c:	b004      	add	sp, #16
    369e:	bd80      	pop	{r7, pc}

000036a0 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    36a0:	b580      	push	{r7, lr}
    36a2:	b086      	sub	sp, #24
    36a4:	af00      	add	r7, sp, #0
    36a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    36a8:	687b      	ldr	r3, [r7, #4]
    36aa:	681b      	ldr	r3, [r3, #0]
    36ac:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    36ae:	693b      	ldr	r3, [r7, #16]
    36b0:	7e1b      	ldrb	r3, [r3, #24]
    36b2:	b2db      	uxtb	r3, r3
    36b4:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    36b6:	2300      	movs	r3, #0
    36b8:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    36ba:	68fb      	ldr	r3, [r7, #12]
    36bc:	2201      	movs	r2, #1
    36be:	4013      	ands	r3, r2
    36c0:	d003      	beq.n	36ca <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    36c2:	697b      	ldr	r3, [r7, #20]
    36c4:	2201      	movs	r2, #1
    36c6:	4313      	orrs	r3, r2
    36c8:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    36ca:	68fb      	ldr	r3, [r7, #12]
    36cc:	2204      	movs	r2, #4
    36ce:	4013      	ands	r3, r2
    36d0:	d003      	beq.n	36da <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    36d2:	697b      	ldr	r3, [r7, #20]
    36d4:	2202      	movs	r2, #2
    36d6:	4313      	orrs	r3, r2
    36d8:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    36da:	68fb      	ldr	r3, [r7, #12]
    36dc:	2202      	movs	r2, #2
    36de:	4013      	ands	r3, r2
    36e0:	d003      	beq.n	36ea <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    36e2:	697b      	ldr	r3, [r7, #20]
    36e4:	2204      	movs	r2, #4
    36e6:	4313      	orrs	r3, r2
    36e8:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    36ea:	697b      	ldr	r3, [r7, #20]
}
    36ec:	0018      	movs	r0, r3
    36ee:	46bd      	mov	sp, r7
    36f0:	b006      	add	sp, #24
    36f2:	bd80      	pop	{r7, pc}

000036f4 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    36f4:	b580      	push	{r7, lr}
    36f6:	b084      	sub	sp, #16
    36f8:	af00      	add	r7, sp, #0
    36fa:	6078      	str	r0, [r7, #4]
    36fc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    36fe:	687b      	ldr	r3, [r7, #4]
    3700:	681b      	ldr	r3, [r3, #0]
    3702:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    3704:	2300      	movs	r3, #0
    3706:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    3708:	683b      	ldr	r3, [r7, #0]
    370a:	2201      	movs	r2, #1
    370c:	4013      	ands	r3, r2
    370e:	d003      	beq.n	3718 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    3710:	68fb      	ldr	r3, [r7, #12]
    3712:	2201      	movs	r2, #1
    3714:	4313      	orrs	r3, r2
    3716:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    3718:	683b      	ldr	r3, [r7, #0]
    371a:	2202      	movs	r2, #2
    371c:	4013      	ands	r3, r2
    371e:	d003      	beq.n	3728 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    3720:	68fb      	ldr	r3, [r7, #12]
    3722:	2204      	movs	r2, #4
    3724:	4313      	orrs	r3, r2
    3726:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    3728:	683b      	ldr	r3, [r7, #0]
    372a:	2204      	movs	r2, #4
    372c:	4013      	ands	r3, r2
    372e:	d003      	beq.n	3738 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    3730:	68fb      	ldr	r3, [r7, #12]
    3732:	2202      	movs	r2, #2
    3734:	4313      	orrs	r3, r2
    3736:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    3738:	68fb      	ldr	r3, [r7, #12]
    373a:	b2da      	uxtb	r2, r3
    373c:	68bb      	ldr	r3, [r7, #8]
    373e:	761a      	strb	r2, [r3, #24]
}
    3740:	46c0      	nop			; (mov r8, r8)
    3742:	46bd      	mov	sp, r7
    3744:	b004      	add	sp, #16
    3746:	bd80      	pop	{r7, pc}

00003748 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    3748:	b580      	push	{r7, lr}
    374a:	b084      	sub	sp, #16
    374c:	af00      	add	r7, sp, #0
    374e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3750:	687b      	ldr	r3, [r7, #4]
    3752:	681b      	ldr	r3, [r3, #0]
    3754:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    3756:	46c0      	nop			; (mov r8, r8)
    3758:	687b      	ldr	r3, [r7, #4]
    375a:	0018      	movs	r0, r3
    375c:	4b0b      	ldr	r3, [pc, #44]	; (378c <adc_start_conversion+0x44>)
    375e:	4798      	blx	r3
    3760:	1e03      	subs	r3, r0, #0
    3762:	d1f9      	bne.n	3758 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3764:	68fb      	ldr	r3, [r7, #12]
    3766:	7b1b      	ldrb	r3, [r3, #12]
    3768:	b2db      	uxtb	r3, r3
    376a:	2202      	movs	r2, #2
    376c:	4313      	orrs	r3, r2
    376e:	b2da      	uxtb	r2, r3
    3770:	68fb      	ldr	r3, [r7, #12]
    3772:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    3774:	46c0      	nop			; (mov r8, r8)
    3776:	687b      	ldr	r3, [r7, #4]
    3778:	0018      	movs	r0, r3
    377a:	4b04      	ldr	r3, [pc, #16]	; (378c <adc_start_conversion+0x44>)
    377c:	4798      	blx	r3
    377e:	1e03      	subs	r3, r0, #0
    3780:	d1f9      	bne.n	3776 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    3782:	46c0      	nop			; (mov r8, r8)
    3784:	46bd      	mov	sp, r7
    3786:	b004      	add	sp, #16
    3788:	bd80      	pop	{r7, pc}
    378a:	46c0      	nop			; (mov r8, r8)
    378c:	00003679 	.word	0x00003679

00003790 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    3790:	b580      	push	{r7, lr}
    3792:	b084      	sub	sp, #16
    3794:	af00      	add	r7, sp, #0
    3796:	6078      	str	r0, [r7, #4]
    3798:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    379a:	687b      	ldr	r3, [r7, #4]
    379c:	0018      	movs	r0, r3
    379e:	4b18      	ldr	r3, [pc, #96]	; (3800 <adc_read+0x70>)
    37a0:	4798      	blx	r3
    37a2:	0002      	movs	r2, r0
    37a4:	2301      	movs	r3, #1
    37a6:	4013      	ands	r3, r2
    37a8:	d101      	bne.n	37ae <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    37aa:	2305      	movs	r3, #5
    37ac:	e023      	b.n	37f6 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    37ae:	687b      	ldr	r3, [r7, #4]
    37b0:	681b      	ldr	r3, [r3, #0]
    37b2:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    37b4:	46c0      	nop			; (mov r8, r8)
    37b6:	687b      	ldr	r3, [r7, #4]
    37b8:	0018      	movs	r0, r3
    37ba:	4b12      	ldr	r3, [pc, #72]	; (3804 <adc_read+0x74>)
    37bc:	4798      	blx	r3
    37be:	1e03      	subs	r3, r0, #0
    37c0:	d1f9      	bne.n	37b6 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    37c2:	68fb      	ldr	r3, [r7, #12]
    37c4:	8b5b      	ldrh	r3, [r3, #26]
    37c6:	b29a      	uxth	r2, r3
    37c8:	683b      	ldr	r3, [r7, #0]
    37ca:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    37cc:	687b      	ldr	r3, [r7, #4]
    37ce:	2101      	movs	r1, #1
    37d0:	0018      	movs	r0, r3
    37d2:	4b0d      	ldr	r3, [pc, #52]	; (3808 <adc_read+0x78>)
    37d4:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    37d6:	687b      	ldr	r3, [r7, #4]
    37d8:	0018      	movs	r0, r3
    37da:	4b09      	ldr	r3, [pc, #36]	; (3800 <adc_read+0x70>)
    37dc:	4798      	blx	r3
    37de:	0002      	movs	r2, r0
    37e0:	2304      	movs	r3, #4
    37e2:	4013      	ands	r3, r2
    37e4:	d006      	beq.n	37f4 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    37e6:	687b      	ldr	r3, [r7, #4]
    37e8:	2104      	movs	r1, #4
    37ea:	0018      	movs	r0, r3
    37ec:	4b06      	ldr	r3, [pc, #24]	; (3808 <adc_read+0x78>)
    37ee:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    37f0:	231e      	movs	r3, #30
    37f2:	e000      	b.n	37f6 <adc_read+0x66>
	}

	return STATUS_OK;
    37f4:	2300      	movs	r3, #0
}
    37f6:	0018      	movs	r0, r3
    37f8:	46bd      	mov	sp, r7
    37fa:	b004      	add	sp, #16
    37fc:	bd80      	pop	{r7, pc}
    37fe:	46c0      	nop			; (mov r8, r8)
    3800:	000036a1 	.word	0x000036a1
    3804:	00003679 	.word	0x00003679
    3808:	000036f5 	.word	0x000036f5

0000380c <port_get_group_from_gpio_pin>:
{
    380c:	b580      	push	{r7, lr}
    380e:	b082      	sub	sp, #8
    3810:	af00      	add	r7, sp, #0
    3812:	0002      	movs	r2, r0
    3814:	1dfb      	adds	r3, r7, #7
    3816:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3818:	1dfb      	adds	r3, r7, #7
    381a:	781b      	ldrb	r3, [r3, #0]
    381c:	0018      	movs	r0, r3
    381e:	4b03      	ldr	r3, [pc, #12]	; (382c <port_get_group_from_gpio_pin+0x20>)
    3820:	4798      	blx	r3
    3822:	0003      	movs	r3, r0
}
    3824:	0018      	movs	r0, r3
    3826:	46bd      	mov	sp, r7
    3828:	b002      	add	sp, #8
    382a:	bd80      	pop	{r7, pc}
    382c:	00003619 	.word	0x00003619

00003830 <port_pin_set_output_level>:
{
    3830:	b580      	push	{r7, lr}
    3832:	b084      	sub	sp, #16
    3834:	af00      	add	r7, sp, #0
    3836:	0002      	movs	r2, r0
    3838:	1dfb      	adds	r3, r7, #7
    383a:	701a      	strb	r2, [r3, #0]
    383c:	1dbb      	adds	r3, r7, #6
    383e:	1c0a      	adds	r2, r1, #0
    3840:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3842:	1dfb      	adds	r3, r7, #7
    3844:	781b      	ldrb	r3, [r3, #0]
    3846:	0018      	movs	r0, r3
    3848:	4b0d      	ldr	r3, [pc, #52]	; (3880 <port_pin_set_output_level+0x50>)
    384a:	4798      	blx	r3
    384c:	0003      	movs	r3, r0
    384e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3850:	1dfb      	adds	r3, r7, #7
    3852:	781b      	ldrb	r3, [r3, #0]
    3854:	221f      	movs	r2, #31
    3856:	4013      	ands	r3, r2
    3858:	2201      	movs	r2, #1
    385a:	409a      	lsls	r2, r3
    385c:	0013      	movs	r3, r2
    385e:	60bb      	str	r3, [r7, #8]
	if (level) {
    3860:	1dbb      	adds	r3, r7, #6
    3862:	781b      	ldrb	r3, [r3, #0]
    3864:	2b00      	cmp	r3, #0
    3866:	d003      	beq.n	3870 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3868:	68fb      	ldr	r3, [r7, #12]
    386a:	68ba      	ldr	r2, [r7, #8]
    386c:	619a      	str	r2, [r3, #24]
}
    386e:	e002      	b.n	3876 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3870:	68fb      	ldr	r3, [r7, #12]
    3872:	68ba      	ldr	r2, [r7, #8]
    3874:	615a      	str	r2, [r3, #20]
}
    3876:	46c0      	nop			; (mov r8, r8)
    3878:	46bd      	mov	sp, r7
    387a:	b004      	add	sp, #16
    387c:	bd80      	pop	{r7, pc}
    387e:	46c0      	nop			; (mov r8, r8)
    3880:	0000380d 	.word	0x0000380d

00003884 <single_conversion>:
	adc_enable(&adc_instance);
}


uint16_t single_conversion()
{
    3884:	b580      	push	{r7, lr}
    3886:	b082      	sub	sp, #8
    3888:	af00      	add	r7, sp, #0
	adc_start_conversion(&adc_instance);
    388a:	4b09      	ldr	r3, [pc, #36]	; (38b0 <single_conversion+0x2c>)
    388c:	0018      	movs	r0, r3
    388e:	4b09      	ldr	r3, [pc, #36]	; (38b4 <single_conversion+0x30>)
    3890:	4798      	blx	r3
	uint16_t result;

	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
    3892:	1dba      	adds	r2, r7, #6
    3894:	4b06      	ldr	r3, [pc, #24]	; (38b0 <single_conversion+0x2c>)
    3896:	0011      	movs	r1, r2
    3898:	0018      	movs	r0, r3
    389a:	4b07      	ldr	r3, [pc, #28]	; (38b8 <single_conversion+0x34>)
    389c:	4798      	blx	r3
    389e:	0003      	movs	r3, r0
    38a0:	2b05      	cmp	r3, #5
    38a2:	d0f6      	beq.n	3892 <single_conversion+0xe>
	return result;
    38a4:	1dbb      	adds	r3, r7, #6
    38a6:	881b      	ldrh	r3, [r3, #0]
}
    38a8:	0018      	movs	r0, r3
    38aa:	46bd      	mov	sp, r7
    38ac:	b002      	add	sp, #8
    38ae:	bd80      	pop	{r7, pc}
    38b0:	20001710 	.word	0x20001710
    38b4:	00003749 	.word	0x00003749
    38b8:	00003791 	.word	0x00003791

000038bc <msgeq7_all_bands>:

void msgeq7_all_bands(uint16_t bands[])
{
    38bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    38be:	b08f      	sub	sp, #60	; 0x3c
    38c0:	af00      	add	r7, sp, #0
    38c2:	62f8      	str	r0, [r7, #44]	; 0x2c
	port_pin_set_output_level(MSGEQ7_PIN_RESET,true);
    38c4:	2101      	movs	r1, #1
    38c6:	2019      	movs	r0, #25
    38c8:	4b53      	ldr	r3, [pc, #332]	; (3a18 <msgeq7_all_bands+0x15c>)
    38ca:	4798      	blx	r3
	delay_us(1);
    38cc:	2000      	movs	r0, #0
    38ce:	4b53      	ldr	r3, [pc, #332]	; (3a1c <msgeq7_all_bands+0x160>)
    38d0:	4798      	blx	r3
    38d2:	0003      	movs	r3, r0
    38d4:	613b      	str	r3, [r7, #16]
    38d6:	2300      	movs	r3, #0
    38d8:	617b      	str	r3, [r7, #20]
    38da:	4b51      	ldr	r3, [pc, #324]	; (3a20 <msgeq7_all_bands+0x164>)
    38dc:	2400      	movs	r4, #0
    38de:	6938      	ldr	r0, [r7, #16]
    38e0:	6979      	ldr	r1, [r7, #20]
    38e2:	18c0      	adds	r0, r0, r3
    38e4:	4161      	adcs	r1, r4
    38e6:	4c4f      	ldr	r4, [pc, #316]	; (3a24 <msgeq7_all_bands+0x168>)
    38e8:	4a4f      	ldr	r2, [pc, #316]	; (3a28 <msgeq7_all_bands+0x16c>)
    38ea:	2300      	movs	r3, #0
    38ec:	47a0      	blx	r4
    38ee:	0003      	movs	r3, r0
    38f0:	000c      	movs	r4, r1
    38f2:	0018      	movs	r0, r3
    38f4:	4b4d      	ldr	r3, [pc, #308]	; (3a2c <msgeq7_all_bands+0x170>)
    38f6:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_RESET,false);
    38f8:	2100      	movs	r1, #0
    38fa:	2019      	movs	r0, #25
    38fc:	4b46      	ldr	r3, [pc, #280]	; (3a18 <msgeq7_all_bands+0x15c>)
    38fe:	4798      	blx	r3
	delay_us(75);
    3900:	2000      	movs	r0, #0
    3902:	4b46      	ldr	r3, [pc, #280]	; (3a1c <msgeq7_all_bands+0x160>)
    3904:	4798      	blx	r3
    3906:	0003      	movs	r3, r0
    3908:	61bb      	str	r3, [r7, #24]
    390a:	2300      	movs	r3, #0
    390c:	61fb      	str	r3, [r7, #28]
    390e:	69bb      	ldr	r3, [r7, #24]
    3910:	69fc      	ldr	r4, [r7, #28]
    3912:	0f9a      	lsrs	r2, r3, #30
    3914:	00a0      	lsls	r0, r4, #2
    3916:	6278      	str	r0, [r7, #36]	; 0x24
    3918:	6a78      	ldr	r0, [r7, #36]	; 0x24
    391a:	4310      	orrs	r0, r2
    391c:	6278      	str	r0, [r7, #36]	; 0x24
    391e:	009b      	lsls	r3, r3, #2
    3920:	623b      	str	r3, [r7, #32]
    3922:	6a3b      	ldr	r3, [r7, #32]
    3924:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    3926:	69b9      	ldr	r1, [r7, #24]
    3928:	69fa      	ldr	r2, [r7, #28]
    392a:	185b      	adds	r3, r3, r1
    392c:	4154      	adcs	r4, r2
    392e:	0f1a      	lsrs	r2, r3, #28
    3930:	0126      	lsls	r6, r4, #4
    3932:	4316      	orrs	r6, r2
    3934:	011d      	lsls	r5, r3, #4
    3936:	1aed      	subs	r5, r5, r3
    3938:	41a6      	sbcs	r6, r4
    393a:	002b      	movs	r3, r5
    393c:	0034      	movs	r4, r6
    393e:	4938      	ldr	r1, [pc, #224]	; (3a20 <msgeq7_all_bands+0x164>)
    3940:	2200      	movs	r2, #0
    3942:	185b      	adds	r3, r3, r1
    3944:	4154      	adcs	r4, r2
    3946:	0018      	movs	r0, r3
    3948:	0021      	movs	r1, r4
    394a:	4c36      	ldr	r4, [pc, #216]	; (3a24 <msgeq7_all_bands+0x168>)
    394c:	4a36      	ldr	r2, [pc, #216]	; (3a28 <msgeq7_all_bands+0x16c>)
    394e:	2300      	movs	r3, #0
    3950:	47a0      	blx	r4
    3952:	0003      	movs	r3, r0
    3954:	000c      	movs	r4, r1
    3956:	0018      	movs	r0, r3
    3958:	4b34      	ldr	r3, [pc, #208]	; (3a2c <msgeq7_all_bands+0x170>)
    395a:	4798      	blx	r3
	
	for (int i=0;i<7;i++)
    395c:	2300      	movs	r3, #0
    395e:	637b      	str	r3, [r7, #52]	; 0x34
    3960:	e052      	b.n	3a08 <msgeq7_all_bands+0x14c>
	{
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,false);
    3962:	2100      	movs	r1, #0
    3964:	2018      	movs	r0, #24
    3966:	4b2c      	ldr	r3, [pc, #176]	; (3a18 <msgeq7_all_bands+0x15c>)
    3968:	4798      	blx	r3
		delay_us(40);
    396a:	2000      	movs	r0, #0
    396c:	4b2b      	ldr	r3, [pc, #172]	; (3a1c <msgeq7_all_bands+0x160>)
    396e:	4798      	blx	r3
    3970:	0003      	movs	r3, r0
    3972:	60bb      	str	r3, [r7, #8]
    3974:	2300      	movs	r3, #0
    3976:	60fb      	str	r3, [r7, #12]
    3978:	4c2d      	ldr	r4, [pc, #180]	; (3a30 <msgeq7_all_bands+0x174>)
    397a:	2228      	movs	r2, #40	; 0x28
    397c:	2300      	movs	r3, #0
    397e:	68b8      	ldr	r0, [r7, #8]
    3980:	68f9      	ldr	r1, [r7, #12]
    3982:	47a0      	blx	r4
    3984:	0003      	movs	r3, r0
    3986:	000c      	movs	r4, r1
    3988:	0019      	movs	r1, r3
    398a:	0022      	movs	r2, r4
    398c:	4b24      	ldr	r3, [pc, #144]	; (3a20 <msgeq7_all_bands+0x164>)
    398e:	2400      	movs	r4, #0
    3990:	18c9      	adds	r1, r1, r3
    3992:	4162      	adcs	r2, r4
    3994:	0008      	movs	r0, r1
    3996:	0011      	movs	r1, r2
    3998:	4c22      	ldr	r4, [pc, #136]	; (3a24 <msgeq7_all_bands+0x168>)
    399a:	4a23      	ldr	r2, [pc, #140]	; (3a28 <msgeq7_all_bands+0x16c>)
    399c:	2300      	movs	r3, #0
    399e:	47a0      	blx	r4
    39a0:	0003      	movs	r3, r0
    39a2:	000c      	movs	r4, r1
    39a4:	0018      	movs	r0, r3
    39a6:	4b21      	ldr	r3, [pc, #132]	; (3a2c <msgeq7_all_bands+0x170>)
    39a8:	4798      	blx	r3
		bands[i] = single_conversion();
    39aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    39ac:	005b      	lsls	r3, r3, #1
    39ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    39b0:	18d4      	adds	r4, r2, r3
    39b2:	4b20      	ldr	r3, [pc, #128]	; (3a34 <msgeq7_all_bands+0x178>)
    39b4:	4798      	blx	r3
    39b6:	0003      	movs	r3, r0
    39b8:	8023      	strh	r3, [r4, #0]
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,true);
    39ba:	2101      	movs	r1, #1
    39bc:	2018      	movs	r0, #24
    39be:	4b16      	ldr	r3, [pc, #88]	; (3a18 <msgeq7_all_bands+0x15c>)
    39c0:	4798      	blx	r3
		delay_us(40);
    39c2:	2000      	movs	r0, #0
    39c4:	4b15      	ldr	r3, [pc, #84]	; (3a1c <msgeq7_all_bands+0x160>)
    39c6:	4798      	blx	r3
    39c8:	0003      	movs	r3, r0
    39ca:	603b      	str	r3, [r7, #0]
    39cc:	2300      	movs	r3, #0
    39ce:	607b      	str	r3, [r7, #4]
    39d0:	4c17      	ldr	r4, [pc, #92]	; (3a30 <msgeq7_all_bands+0x174>)
    39d2:	2228      	movs	r2, #40	; 0x28
    39d4:	2300      	movs	r3, #0
    39d6:	6838      	ldr	r0, [r7, #0]
    39d8:	6879      	ldr	r1, [r7, #4]
    39da:	47a0      	blx	r4
    39dc:	0003      	movs	r3, r0
    39de:	000c      	movs	r4, r1
    39e0:	0019      	movs	r1, r3
    39e2:	0022      	movs	r2, r4
    39e4:	4b0e      	ldr	r3, [pc, #56]	; (3a20 <msgeq7_all_bands+0x164>)
    39e6:	2400      	movs	r4, #0
    39e8:	18c9      	adds	r1, r1, r3
    39ea:	4162      	adcs	r2, r4
    39ec:	0008      	movs	r0, r1
    39ee:	0011      	movs	r1, r2
    39f0:	4c0c      	ldr	r4, [pc, #48]	; (3a24 <msgeq7_all_bands+0x168>)
    39f2:	4a0d      	ldr	r2, [pc, #52]	; (3a28 <msgeq7_all_bands+0x16c>)
    39f4:	2300      	movs	r3, #0
    39f6:	47a0      	blx	r4
    39f8:	0003      	movs	r3, r0
    39fa:	000c      	movs	r4, r1
    39fc:	0018      	movs	r0, r3
    39fe:	4b0b      	ldr	r3, [pc, #44]	; (3a2c <msgeq7_all_bands+0x170>)
    3a00:	4798      	blx	r3
	for (int i=0;i<7;i++)
    3a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a04:	3301      	adds	r3, #1
    3a06:	637b      	str	r3, [r7, #52]	; 0x34
    3a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a0a:	2b06      	cmp	r3, #6
    3a0c:	dda9      	ble.n	3962 <msgeq7_all_bands+0xa6>
	}
    3a0e:	46c0      	nop			; (mov r8, r8)
    3a10:	46bd      	mov	sp, r7
    3a12:	b00f      	add	sp, #60	; 0x3c
    3a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a16:	46c0      	nop			; (mov r8, r8)
    3a18:	00003831 	.word	0x00003831
    3a1c:	00004aa5 	.word	0x00004aa5
    3a20:	006acfbf 	.word	0x006acfbf
    3a24:	000055e1 	.word	0x000055e1
    3a28:	006acfc0 	.word	0x006acfc0
    3a2c:	20000001 	.word	0x20000001
    3a30:	00005621 	.word	0x00005621
    3a34:	00003885 	.word	0x00003885

00003a38 <TC3_Handler>:
uint16_t values_bands[6];

bool a_okayish = true;
char buffer[64];
void TC3_Handler()
{
    3a38:	b580      	push	{r7, lr}
    3a3a:	af00      	add	r7, sp, #0
	static bool blink_state = false;
	// Overflow interrupt triggered
	if ( TC3->COUNT16.INTFLAG.bit.OVF == 1 )
    3a3c:	4b1d      	ldr	r3, [pc, #116]	; (3ab4 <TC3_Handler+0x7c>)
    3a3e:	7b9b      	ldrb	r3, [r3, #14]
    3a40:	07db      	lsls	r3, r3, #31
    3a42:	0fdb      	lsrs	r3, r3, #31
    3a44:	b2db      	uxtb	r3, r3
    3a46:	2b01      	cmp	r3, #1
    3a48:	d131      	bne.n	3aae <TC3_Handler+0x76>
	{
		if ((pwm_count % 5) == 0)
    3a4a:	4b1b      	ldr	r3, [pc, #108]	; (3ab8 <TC3_Handler+0x80>)
    3a4c:	681a      	ldr	r2, [r3, #0]
    3a4e:	4b1b      	ldr	r3, [pc, #108]	; (3abc <TC3_Handler+0x84>)
    3a50:	2105      	movs	r1, #5
    3a52:	0010      	movs	r0, r2
    3a54:	4798      	blx	r3
    3a56:	1e0b      	subs	r3, r1, #0
    3a58:	d107      	bne.n	3a6a <TC3_Handler+0x32>
		{
			should_update = true;
    3a5a:	4b19      	ldr	r3, [pc, #100]	; (3ac0 <TC3_Handler+0x88>)
    3a5c:	2201      	movs	r2, #1
    3a5e:	701a      	strb	r2, [r3, #0]
			should_updates++;
    3a60:	4b18      	ldr	r3, [pc, #96]	; (3ac4 <TC3_Handler+0x8c>)
    3a62:	681b      	ldr	r3, [r3, #0]
    3a64:	1c5a      	adds	r2, r3, #1
    3a66:	4b17      	ldr	r3, [pc, #92]	; (3ac4 <TC3_Handler+0x8c>)
    3a68:	601a      	str	r2, [r3, #0]
		}
		
		pwm_count++;
    3a6a:	4b13      	ldr	r3, [pc, #76]	; (3ab8 <TC3_Handler+0x80>)
    3a6c:	681b      	ldr	r3, [r3, #0]
    3a6e:	1c5a      	adds	r2, r3, #1
    3a70:	4b11      	ldr	r3, [pc, #68]	; (3ab8 <TC3_Handler+0x80>)
    3a72:	601a      	str	r2, [r3, #0]

		if (pwm_count > PWM_FREQ)
    3a74:	4b10      	ldr	r3, [pc, #64]	; (3ab8 <TC3_Handler+0x80>)
    3a76:	681b      	ldr	r3, [r3, #0]
    3a78:	2bfa      	cmp	r3, #250	; 0xfa
    3a7a:	dd15      	ble.n	3aa8 <TC3_Handler+0x70>
		{
			should_updates = 0;
    3a7c:	4b11      	ldr	r3, [pc, #68]	; (3ac4 <TC3_Handler+0x8c>)
    3a7e:	2200      	movs	r2, #0
    3a80:	601a      	str	r2, [r3, #0]
			/*if ((seconds % 300) == 0)
			{
				execute_order_66 = true;
			}*/
			seconds++;
    3a82:	4b11      	ldr	r3, [pc, #68]	; (3ac8 <TC3_Handler+0x90>)
    3a84:	681b      	ldr	r3, [r3, #0]
    3a86:	1c5a      	adds	r2, r3, #1
    3a88:	4b0f      	ldr	r3, [pc, #60]	; (3ac8 <TC3_Handler+0x90>)
    3a8a:	601a      	str	r2, [r3, #0]
			if ((seconds % 5) == 0)
    3a8c:	4b0e      	ldr	r3, [pc, #56]	; (3ac8 <TC3_Handler+0x90>)
    3a8e:	681a      	ldr	r2, [r3, #0]
    3a90:	4b0a      	ldr	r3, [pc, #40]	; (3abc <TC3_Handler+0x84>)
    3a92:	2105      	movs	r1, #5
    3a94:	0010      	movs	r0, r2
    3a96:	4798      	blx	r3
    3a98:	1e0b      	subs	r3, r1, #0
    3a9a:	d102      	bne.n	3aa2 <TC3_Handler+0x6a>
			{
				should_check = true;
    3a9c:	4b0b      	ldr	r3, [pc, #44]	; (3acc <TC3_Handler+0x94>)
    3a9e:	2201      	movs	r2, #1
    3aa0:	701a      	strb	r2, [r3, #0]
			if (party)
			{
				sprintf(buffer,"%d %d %d %d %d %d",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
				ble_uart_write(buffer);
			}*/
			pwm_count = 0;
    3aa2:	4b05      	ldr	r3, [pc, #20]	; (3ab8 <TC3_Handler+0x80>)
    3aa4:	2200      	movs	r2, #0
    3aa6:	601a      	str	r2, [r3, #0]
		}
		TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0;
    3aa8:	4b02      	ldr	r3, [pc, #8]	; (3ab4 <TC3_Handler+0x7c>)
    3aaa:	2210      	movs	r2, #16
    3aac:	739a      	strb	r2, [r3, #14]
	}
}
    3aae:	46c0      	nop			; (mov r8, r8)
    3ab0:	46bd      	mov	sp, r7
    3ab2:	bd80      	pop	{r7, pc}
    3ab4:	42002c00 	.word	0x42002c00
    3ab8:	20001700 	.word	0x20001700
    3abc:	000055d5 	.word	0x000055d5
    3ac0:	200012d0 	.word	0x200012d0
    3ac4:	200012d4 	.word	0x200012d4
    3ac8:	200012dc 	.word	0x200012dc
    3acc:	200012e0 	.word	0x200012e0

00003ad0 <things_to_do>:

void things_to_do(void)
{
    3ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ad2:	b087      	sub	sp, #28
    3ad4:	af04      	add	r7, sp, #16
	if (party)
    3ad6:	4b2b      	ldr	r3, [pc, #172]	; (3b84 <things_to_do+0xb4>)
    3ad8:	781b      	ldrb	r3, [r3, #0]
    3ada:	b2db      	uxtb	r3, r3
    3adc:	2b00      	cmp	r3, #0
    3ade:	d026      	beq.n	3b2e <things_to_do+0x5e>
	{
		msgeq7_all_bands(values_bands);
    3ae0:	4b29      	ldr	r3, [pc, #164]	; (3b88 <things_to_do+0xb8>)
    3ae2:	0018      	movs	r0, r3
    3ae4:	4b29      	ldr	r3, [pc, #164]	; (3b8c <things_to_do+0xbc>)
    3ae6:	4798      	blx	r3
		party_lights(values_bands);
    3ae8:	4b27      	ldr	r3, [pc, #156]	; (3b88 <things_to_do+0xb8>)
    3aea:	0018      	movs	r0, r3
    3aec:	4b28      	ldr	r3, [pc, #160]	; (3b90 <things_to_do+0xc0>)
    3aee:	4798      	blx	r3
		sprintf(buffer,"%04d %04d %04d %04d %04d %04d\r\n",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
    3af0:	4b25      	ldr	r3, [pc, #148]	; (3b88 <things_to_do+0xb8>)
    3af2:	881b      	ldrh	r3, [r3, #0]
    3af4:	001e      	movs	r6, r3
    3af6:	4b24      	ldr	r3, [pc, #144]	; (3b88 <things_to_do+0xb8>)
    3af8:	885b      	ldrh	r3, [r3, #2]
    3afa:	607b      	str	r3, [r7, #4]
    3afc:	4b22      	ldr	r3, [pc, #136]	; (3b88 <things_to_do+0xb8>)
    3afe:	889b      	ldrh	r3, [r3, #4]
    3b00:	001a      	movs	r2, r3
    3b02:	4b21      	ldr	r3, [pc, #132]	; (3b88 <things_to_do+0xb8>)
    3b04:	88db      	ldrh	r3, [r3, #6]
    3b06:	001c      	movs	r4, r3
    3b08:	4b1f      	ldr	r3, [pc, #124]	; (3b88 <things_to_do+0xb8>)
    3b0a:	891b      	ldrh	r3, [r3, #8]
    3b0c:	001d      	movs	r5, r3
    3b0e:	4b1e      	ldr	r3, [pc, #120]	; (3b88 <things_to_do+0xb8>)
    3b10:	895b      	ldrh	r3, [r3, #10]
    3b12:	4920      	ldr	r1, [pc, #128]	; (3b94 <things_to_do+0xc4>)
    3b14:	4820      	ldr	r0, [pc, #128]	; (3b98 <things_to_do+0xc8>)
    3b16:	9303      	str	r3, [sp, #12]
    3b18:	9502      	str	r5, [sp, #8]
    3b1a:	9401      	str	r4, [sp, #4]
    3b1c:	9200      	str	r2, [sp, #0]
    3b1e:	687b      	ldr	r3, [r7, #4]
    3b20:	0032      	movs	r2, r6
    3b22:	4c1e      	ldr	r4, [pc, #120]	; (3b9c <things_to_do+0xcc>)
    3b24:	47a0      	blx	r4
		sb_uart_write(&buffer);
    3b26:	4b1c      	ldr	r3, [pc, #112]	; (3b98 <things_to_do+0xc8>)
    3b28:	0018      	movs	r0, r3
    3b2a:	4b1d      	ldr	r3, [pc, #116]	; (3ba0 <things_to_do+0xd0>)
    3b2c:	4798      	blx	r3
	}
	if ((should_updates % 25) == 0)
    3b2e:	4b1d      	ldr	r3, [pc, #116]	; (3ba4 <things_to_do+0xd4>)
    3b30:	681a      	ldr	r2, [r3, #0]
    3b32:	4b1d      	ldr	r3, [pc, #116]	; (3ba8 <things_to_do+0xd8>)
    3b34:	2119      	movs	r1, #25
    3b36:	0010      	movs	r0, r2
    3b38:	4798      	blx	r3
    3b3a:	1e0b      	subs	r3, r1, #0
    3b3c:	d116      	bne.n	3b6c <things_to_do+0x9c>
	{
		if (flashy1)
    3b3e:	4b1b      	ldr	r3, [pc, #108]	; (3bac <things_to_do+0xdc>)
    3b40:	781b      	ldrb	r3, [r3, #0]
    3b42:	b2db      	uxtb	r3, r3
    3b44:	2b00      	cmp	r3, #0
    3b46:	d002      	beq.n	3b4e <things_to_do+0x7e>
		{
			flashy_flash1();
    3b48:	4b19      	ldr	r3, [pc, #100]	; (3bb0 <things_to_do+0xe0>)
    3b4a:	4798      	blx	r3
    3b4c:	e00e      	b.n	3b6c <things_to_do+0x9c>
		}
		else if (flashy2)
    3b4e:	4b19      	ldr	r3, [pc, #100]	; (3bb4 <things_to_do+0xe4>)
    3b50:	781b      	ldrb	r3, [r3, #0]
    3b52:	b2db      	uxtb	r3, r3
    3b54:	2b00      	cmp	r3, #0
    3b56:	d002      	beq.n	3b5e <things_to_do+0x8e>
		{
			flashy_flash2();
    3b58:	4b17      	ldr	r3, [pc, #92]	; (3bb8 <things_to_do+0xe8>)
    3b5a:	4798      	blx	r3
    3b5c:	e006      	b.n	3b6c <things_to_do+0x9c>
		}
		else if (flashy3)
    3b5e:	4b17      	ldr	r3, [pc, #92]	; (3bbc <things_to_do+0xec>)
    3b60:	781b      	ldrb	r3, [r3, #0]
    3b62:	b2db      	uxtb	r3, r3
    3b64:	2b00      	cmp	r3, #0
    3b66:	d001      	beq.n	3b6c <things_to_do+0x9c>
		{
			flashy_flash3();
    3b68:	4b15      	ldr	r3, [pc, #84]	; (3bc0 <things_to_do+0xf0>)
    3b6a:	4798      	blx	r3
		}
	}
	if (flashyfade)
    3b6c:	4b15      	ldr	r3, [pc, #84]	; (3bc4 <things_to_do+0xf4>)
    3b6e:	781b      	ldrb	r3, [r3, #0]
    3b70:	b2db      	uxtb	r3, r3
    3b72:	2b00      	cmp	r3, #0
    3b74:	d001      	beq.n	3b7a <things_to_do+0xaa>
	{
		flashy_fades();
    3b76:	4b14      	ldr	r3, [pc, #80]	; (3bc8 <things_to_do+0xf8>)
    3b78:	4798      	blx	r3
	/*if (party)
	{
		sprintf(buffer,"%d %d %d %d %d %d\r\n",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
		ble_uart_write(buffer);
	}*/
}
    3b7a:	46c0      	nop			; (mov r8, r8)
    3b7c:	46bd      	mov	sp, r7
    3b7e:	b003      	add	sp, #12
    3b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b82:	46c0      	nop			; (mov r8, r8)
    3b84:	20000e39 	.word	0x20000e39
    3b88:	20001758 	.word	0x20001758
    3b8c:	000038bd 	.word	0x000038bd
    3b90:	0000243d 	.word	0x0000243d
    3b94:	00006fa0 	.word	0x00006fa0
    3b98:	20001718 	.word	0x20001718
    3b9c:	00005a3d 	.word	0x00005a3d
    3ba0:	000041f5 	.word	0x000041f5
    3ba4:	200012d4 	.word	0x200012d4
    3ba8:	000055d5 	.word	0x000055d5
    3bac:	20000a10 	.word	0x20000a10
    3bb0:	000026a5 	.word	0x000026a5
    3bb4:	20000e27 	.word	0x20000e27
    3bb8:	000027dd 	.word	0x000027dd
    3bbc:	20000e45 	.word	0x20000e45
    3bc0:	00002bc5 	.word	0x00002bc5
    3bc4:	20000e43 	.word	0x20000e43
    3bc8:	00002a2d 	.word	0x00002a2d

00003bcc <system_pinmux_get_group_from_gpio_pin>:
{
    3bcc:	b580      	push	{r7, lr}
    3bce:	b084      	sub	sp, #16
    3bd0:	af00      	add	r7, sp, #0
    3bd2:	0002      	movs	r2, r0
    3bd4:	1dfb      	adds	r3, r7, #7
    3bd6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3bd8:	230f      	movs	r3, #15
    3bda:	18fb      	adds	r3, r7, r3
    3bdc:	1dfa      	adds	r2, r7, #7
    3bde:	7812      	ldrb	r2, [r2, #0]
    3be0:	09d2      	lsrs	r2, r2, #7
    3be2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3be4:	230e      	movs	r3, #14
    3be6:	18fb      	adds	r3, r7, r3
    3be8:	1dfa      	adds	r2, r7, #7
    3bea:	7812      	ldrb	r2, [r2, #0]
    3bec:	0952      	lsrs	r2, r2, #5
    3bee:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3bf0:	4b0d      	ldr	r3, [pc, #52]	; (3c28 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3bf2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3bf4:	230f      	movs	r3, #15
    3bf6:	18fb      	adds	r3, r7, r3
    3bf8:	781b      	ldrb	r3, [r3, #0]
    3bfa:	2b00      	cmp	r3, #0
    3bfc:	d10f      	bne.n	3c1e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3bfe:	230f      	movs	r3, #15
    3c00:	18fb      	adds	r3, r7, r3
    3c02:	781b      	ldrb	r3, [r3, #0]
    3c04:	009b      	lsls	r3, r3, #2
    3c06:	2210      	movs	r2, #16
    3c08:	4694      	mov	ip, r2
    3c0a:	44bc      	add	ip, r7
    3c0c:	4463      	add	r3, ip
    3c0e:	3b08      	subs	r3, #8
    3c10:	681a      	ldr	r2, [r3, #0]
    3c12:	230e      	movs	r3, #14
    3c14:	18fb      	adds	r3, r7, r3
    3c16:	781b      	ldrb	r3, [r3, #0]
    3c18:	01db      	lsls	r3, r3, #7
    3c1a:	18d3      	adds	r3, r2, r3
    3c1c:	e000      	b.n	3c20 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3c1e:	2300      	movs	r3, #0
}
    3c20:	0018      	movs	r0, r3
    3c22:	46bd      	mov	sp, r7
    3c24:	b004      	add	sp, #16
    3c26:	bd80      	pop	{r7, pc}
    3c28:	41004400 	.word	0x41004400

00003c2c <port_get_group_from_gpio_pin>:
{
    3c2c:	b580      	push	{r7, lr}
    3c2e:	b082      	sub	sp, #8
    3c30:	af00      	add	r7, sp, #0
    3c32:	0002      	movs	r2, r0
    3c34:	1dfb      	adds	r3, r7, #7
    3c36:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3c38:	1dfb      	adds	r3, r7, #7
    3c3a:	781b      	ldrb	r3, [r3, #0]
    3c3c:	0018      	movs	r0, r3
    3c3e:	4b03      	ldr	r3, [pc, #12]	; (3c4c <port_get_group_from_gpio_pin+0x20>)
    3c40:	4798      	blx	r3
    3c42:	0003      	movs	r3, r0
}
    3c44:	0018      	movs	r0, r3
    3c46:	46bd      	mov	sp, r7
    3c48:	b002      	add	sp, #8
    3c4a:	bd80      	pop	{r7, pc}
    3c4c:	00003bcd 	.word	0x00003bcd

00003c50 <port_pin_set_output_level>:
{
    3c50:	b580      	push	{r7, lr}
    3c52:	b084      	sub	sp, #16
    3c54:	af00      	add	r7, sp, #0
    3c56:	0002      	movs	r2, r0
    3c58:	1dfb      	adds	r3, r7, #7
    3c5a:	701a      	strb	r2, [r3, #0]
    3c5c:	1dbb      	adds	r3, r7, #6
    3c5e:	1c0a      	adds	r2, r1, #0
    3c60:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3c62:	1dfb      	adds	r3, r7, #7
    3c64:	781b      	ldrb	r3, [r3, #0]
    3c66:	0018      	movs	r0, r3
    3c68:	4b0d      	ldr	r3, [pc, #52]	; (3ca0 <port_pin_set_output_level+0x50>)
    3c6a:	4798      	blx	r3
    3c6c:	0003      	movs	r3, r0
    3c6e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c70:	1dfb      	adds	r3, r7, #7
    3c72:	781b      	ldrb	r3, [r3, #0]
    3c74:	221f      	movs	r2, #31
    3c76:	4013      	ands	r3, r2
    3c78:	2201      	movs	r2, #1
    3c7a:	409a      	lsls	r2, r3
    3c7c:	0013      	movs	r3, r2
    3c7e:	60bb      	str	r3, [r7, #8]
	if (level) {
    3c80:	1dbb      	adds	r3, r7, #6
    3c82:	781b      	ldrb	r3, [r3, #0]
    3c84:	2b00      	cmp	r3, #0
    3c86:	d003      	beq.n	3c90 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3c88:	68fb      	ldr	r3, [r7, #12]
    3c8a:	68ba      	ldr	r2, [r7, #8]
    3c8c:	619a      	str	r2, [r3, #24]
}
    3c8e:	e002      	b.n	3c96 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3c90:	68fb      	ldr	r3, [r7, #12]
    3c92:	68ba      	ldr	r2, [r7, #8]
    3c94:	615a      	str	r2, [r3, #20]
}
    3c96:	46c0      	nop			; (mov r8, r8)
    3c98:	46bd      	mov	sp, r7
    3c9a:	b004      	add	sp, #16
    3c9c:	bd80      	pop	{r7, pc}
    3c9e:	46c0      	nop			; (mov r8, r8)
    3ca0:	00003c2d 	.word	0x00003c2d

00003ca4 <release_sb_btn>:
{
	port_pin_set_output_level(btn,false);
}

void release_sb_btn(uint8_t btn)
{
    3ca4:	b580      	push	{r7, lr}
    3ca6:	b082      	sub	sp, #8
    3ca8:	af00      	add	r7, sp, #0
    3caa:	0002      	movs	r2, r0
    3cac:	1dfb      	adds	r3, r7, #7
    3cae:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(btn,true);
    3cb0:	1dfb      	adds	r3, r7, #7
    3cb2:	781b      	ldrb	r3, [r3, #0]
    3cb4:	2101      	movs	r1, #1
    3cb6:	0018      	movs	r0, r3
    3cb8:	4b02      	ldr	r3, [pc, #8]	; (3cc4 <release_sb_btn+0x20>)
    3cba:	4798      	blx	r3
}
    3cbc:	46c0      	nop			; (mov r8, r8)
    3cbe:	46bd      	mov	sp, r7
    3cc0:	b002      	add	sp, #8
    3cc2:	bd80      	pop	{r7, pc}
    3cc4:	00003c51 	.word	0x00003c51

00003cc8 <sounds_reset>:
{
	mcp23017_set_pins(MTH_ADDR,0x00,0x00);
}

void sounds_reset(void)
{
    3cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cca:	af00      	add	r7, sp, #0
	port_pin_set_output_level(SB_PIN_RESET,false);
    3ccc:	2100      	movs	r1, #0
    3cce:	2007      	movs	r0, #7
    3cd0:	4b24      	ldr	r3, [pc, #144]	; (3d64 <sounds_reset+0x9c>)
    3cd2:	4798      	blx	r3
	delay_ms(50);
    3cd4:	2000      	movs	r0, #0
    3cd6:	4b24      	ldr	r3, [pc, #144]	; (3d68 <sounds_reset+0xa0>)
    3cd8:	4798      	blx	r3
    3cda:	0003      	movs	r3, r0
    3cdc:	001d      	movs	r5, r3
    3cde:	2300      	movs	r3, #0
    3ce0:	001e      	movs	r6, r3
    3ce2:	4c22      	ldr	r4, [pc, #136]	; (3d6c <sounds_reset+0xa4>)
    3ce4:	2232      	movs	r2, #50	; 0x32
    3ce6:	2300      	movs	r3, #0
    3ce8:	0028      	movs	r0, r5
    3cea:	0031      	movs	r1, r6
    3cec:	47a0      	blx	r4
    3cee:	0003      	movs	r3, r0
    3cf0:	000c      	movs	r4, r1
    3cf2:	0019      	movs	r1, r3
    3cf4:	0022      	movs	r2, r4
    3cf6:	4b1e      	ldr	r3, [pc, #120]	; (3d70 <sounds_reset+0xa8>)
    3cf8:	2400      	movs	r4, #0
    3cfa:	18c9      	adds	r1, r1, r3
    3cfc:	4162      	adcs	r2, r4
    3cfe:	0008      	movs	r0, r1
    3d00:	0011      	movs	r1, r2
    3d02:	4c1c      	ldr	r4, [pc, #112]	; (3d74 <sounds_reset+0xac>)
    3d04:	4a1c      	ldr	r2, [pc, #112]	; (3d78 <sounds_reset+0xb0>)
    3d06:	2300      	movs	r3, #0
    3d08:	47a0      	blx	r4
    3d0a:	0003      	movs	r3, r0
    3d0c:	000c      	movs	r4, r1
    3d0e:	0018      	movs	r0, r3
    3d10:	4b1a      	ldr	r3, [pc, #104]	; (3d7c <sounds_reset+0xb4>)
    3d12:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_RESET,true);
    3d14:	2101      	movs	r1, #1
    3d16:	2007      	movs	r0, #7
    3d18:	4b12      	ldr	r3, [pc, #72]	; (3d64 <sounds_reset+0x9c>)
    3d1a:	4798      	blx	r3
	//delay_ms(1000);
	release_sb_btn(SB_PIN_BTN00);
    3d1c:	200b      	movs	r0, #11
    3d1e:	4b18      	ldr	r3, [pc, #96]	; (3d80 <sounds_reset+0xb8>)
    3d20:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN01);
    3d22:	200c      	movs	r0, #12
    3d24:	4b16      	ldr	r3, [pc, #88]	; (3d80 <sounds_reset+0xb8>)
    3d26:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN02);
    3d28:	200d      	movs	r0, #13
    3d2a:	4b15      	ldr	r3, [pc, #84]	; (3d80 <sounds_reset+0xb8>)
    3d2c:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN03);
    3d2e:	200e      	movs	r0, #14
    3d30:	4b13      	ldr	r3, [pc, #76]	; (3d80 <sounds_reset+0xb8>)
    3d32:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN04);
    3d34:	200f      	movs	r0, #15
    3d36:	4b12      	ldr	r3, [pc, #72]	; (3d80 <sounds_reset+0xb8>)
    3d38:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN05);
    3d3a:	2010      	movs	r0, #16
    3d3c:	4b10      	ldr	r3, [pc, #64]	; (3d80 <sounds_reset+0xb8>)
    3d3e:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN06);
    3d40:	2011      	movs	r0, #17
    3d42:	4b0f      	ldr	r3, [pc, #60]	; (3d80 <sounds_reset+0xb8>)
    3d44:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN07);
    3d46:	2012      	movs	r0, #18
    3d48:	4b0d      	ldr	r3, [pc, #52]	; (3d80 <sounds_reset+0xb8>)
    3d4a:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN08);
    3d4c:	2013      	movs	r0, #19
    3d4e:	4b0c      	ldr	r3, [pc, #48]	; (3d80 <sounds_reset+0xb8>)
    3d50:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN09);
    3d52:	2014      	movs	r0, #20
    3d54:	4b0a      	ldr	r3, [pc, #40]	; (3d80 <sounds_reset+0xb8>)
    3d56:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN10);
    3d58:	2015      	movs	r0, #21
    3d5a:	4b09      	ldr	r3, [pc, #36]	; (3d80 <sounds_reset+0xb8>)
    3d5c:	4798      	blx	r3
	//delay_ms(150);

}
    3d5e:	46c0      	nop			; (mov r8, r8)
    3d60:	46bd      	mov	sp, r7
    3d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d64:	00003c51 	.word	0x00003c51
    3d68:	00004aa5 	.word	0x00004aa5
    3d6c:	00005621 	.word	0x00005621
    3d70:	00001b57 	.word	0x00001b57
    3d74:	000055e1 	.word	0x000055e1
    3d78:	00001b58 	.word	0x00001b58
    3d7c:	20000001 	.word	0x20000001
    3d80:	00003ca5 	.word	0x00003ca5

00003d84 <sb_event_handler>:
int temp_track = 0;
char * stringy_pointy;
void sb_event_handler(char buffer[])
{
    3d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d86:	b095      	sub	sp, #84	; 0x54
    3d88:	af02      	add	r7, sp, #8
    3d8a:	6078      	str	r0, [r7, #4]
	if (strstr(buffer,"Adafruit FX Sound Board") != NULL && line_count > 3)
    3d8c:	4abc      	ldr	r2, [pc, #752]	; (4080 <sb_event_handler+0x2fc>)
    3d8e:	687b      	ldr	r3, [r7, #4]
    3d90:	0011      	movs	r1, r2
    3d92:	0018      	movs	r0, r3
    3d94:	4bbb      	ldr	r3, [pc, #748]	; (4084 <sb_event_handler+0x300>)
    3d96:	4798      	blx	r3
    3d98:	1e03      	subs	r3, r0, #0
    3d9a:	d056      	beq.n	3e4a <sb_event_handler+0xc6>
    3d9c:	4bba      	ldr	r3, [pc, #744]	; (4088 <sb_event_handler+0x304>)
    3d9e:	681b      	ldr	r3, [r3, #0]
    3da0:	2b03      	cmp	r3, #3
    3da2:	dd52      	ble.n	3e4a <sb_event_handler+0xc6>
	{
		line_count = 0;
    3da4:	4bb8      	ldr	r3, [pc, #736]	; (4088 <sb_event_handler+0x304>)
    3da6:	2200      	movs	r2, #0
    3da8:	601a      	str	r2, [r3, #0]
		int files = 0;
    3daa:	2300      	movs	r3, #0
    3dac:	63bb      	str	r3, [r7, #56]	; 0x38
		char * string_pointer = strstr(buffer,"Files ");
    3dae:	4ab7      	ldr	r2, [pc, #732]	; (408c <sb_event_handler+0x308>)
    3db0:	687b      	ldr	r3, [r7, #4]
    3db2:	0011      	movs	r1, r2
    3db4:	0018      	movs	r0, r3
    3db6:	4bb3      	ldr	r3, [pc, #716]	; (4084 <sb_event_handler+0x300>)
    3db8:	4798      	blx	r3
    3dba:	0003      	movs	r3, r0
    3dbc:	643b      	str	r3, [r7, #64]	; 0x40
		sscanf(string_pointer,"Files %d\r\n",&files);
    3dbe:	2338      	movs	r3, #56	; 0x38
    3dc0:	18fa      	adds	r2, r7, r3
    3dc2:	49b3      	ldr	r1, [pc, #716]	; (4090 <sb_event_handler+0x30c>)
    3dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3dc6:	0018      	movs	r0, r3
    3dc8:	4bb2      	ldr	r3, [pc, #712]	; (4094 <sb_event_handler+0x310>)
    3dca:	4798      	blx	r3
		soundboard_instance.number_of_tracks = files;
    3dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3dce:	4bb2      	ldr	r3, [pc, #712]	; (4098 <sb_event_handler+0x314>)
    3dd0:	605a      	str	r2, [r3, #4]
		
		string_pointer = strstr(buffer,"FAT ");
    3dd2:	4ab2      	ldr	r2, [pc, #712]	; (409c <sb_event_handler+0x318>)
    3dd4:	687b      	ldr	r3, [r7, #4]
    3dd6:	0011      	movs	r1, r2
    3dd8:	0018      	movs	r0, r3
    3dda:	4baa      	ldr	r3, [pc, #680]	; (4084 <sb_event_handler+0x300>)
    3ddc:	4798      	blx	r3
    3dde:	0003      	movs	r3, r0
    3de0:	643b      	str	r3, [r7, #64]	; 0x40
		if (string_pointer != NULL)
    3de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3de4:	2b00      	cmp	r3, #0
    3de6:	d009      	beq.n	3dfc <sb_event_handler+0x78>
		{
			int size;
			sscanf(string_pointer,"FAT %x\r\n",&size);
    3de8:	2334      	movs	r3, #52	; 0x34
    3dea:	18fa      	adds	r2, r7, r3
    3dec:	49ac      	ldr	r1, [pc, #688]	; (40a0 <sb_event_handler+0x31c>)
    3dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3df0:	0018      	movs	r0, r3
    3df2:	4ba8      	ldr	r3, [pc, #672]	; (4094 <sb_event_handler+0x310>)
    3df4:	4798      	blx	r3
			soundboard_instance.partition_size = size;
    3df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3df8:	4ba7      	ldr	r3, [pc, #668]	; (4098 <sb_event_handler+0x314>)
    3dfa:	609a      	str	r2, [r3, #8]
		}
		
		sb_reset_buffers();
    3dfc:	4ba9      	ldr	r3, [pc, #676]	; (40a4 <sb_event_handler+0x320>)
    3dfe:	4798      	blx	r3
		delay_ms(500);
    3e00:	2000      	movs	r0, #0
    3e02:	4ba9      	ldr	r3, [pc, #676]	; (40a8 <sb_event_handler+0x324>)
    3e04:	4798      	blx	r3
    3e06:	0003      	movs	r3, r0
    3e08:	001d      	movs	r5, r3
    3e0a:	2300      	movs	r3, #0
    3e0c:	001e      	movs	r6, r3
    3e0e:	4ca7      	ldr	r4, [pc, #668]	; (40ac <sb_event_handler+0x328>)
    3e10:	22fa      	movs	r2, #250	; 0xfa
    3e12:	0052      	lsls	r2, r2, #1
    3e14:	2300      	movs	r3, #0
    3e16:	0028      	movs	r0, r5
    3e18:	0031      	movs	r1, r6
    3e1a:	47a0      	blx	r4
    3e1c:	0003      	movs	r3, r0
    3e1e:	000c      	movs	r4, r1
    3e20:	0019      	movs	r1, r3
    3e22:	0022      	movs	r2, r4
    3e24:	4ba2      	ldr	r3, [pc, #648]	; (40b0 <sb_event_handler+0x32c>)
    3e26:	2400      	movs	r4, #0
    3e28:	18c9      	adds	r1, r1, r3
    3e2a:	4162      	adcs	r2, r4
    3e2c:	0008      	movs	r0, r1
    3e2e:	0011      	movs	r1, r2
    3e30:	4ca0      	ldr	r4, [pc, #640]	; (40b4 <sb_event_handler+0x330>)
    3e32:	4aa1      	ldr	r2, [pc, #644]	; (40b8 <sb_event_handler+0x334>)
    3e34:	2300      	movs	r3, #0
    3e36:	47a0      	blx	r4
    3e38:	0003      	movs	r3, r0
    3e3a:	000c      	movs	r4, r1
    3e3c:	0018      	movs	r0, r3
    3e3e:	4b9f      	ldr	r3, [pc, #636]	; (40bc <sb_event_handler+0x338>)
    3e40:	4798      	blx	r3
		sb_uart_write("L\n");
    3e42:	4b9f      	ldr	r3, [pc, #636]	; (40c0 <sb_event_handler+0x33c>)
    3e44:	0018      	movs	r0, r3
    3e46:	4b9f      	ldr	r3, [pc, #636]	; (40c4 <sb_event_handler+0x340>)
    3e48:	4798      	blx	r3
		//Adafruit Soundboard started.
	}
	if (strstr(buffer,"NoFile") != NULL)
    3e4a:	4a9f      	ldr	r2, [pc, #636]	; (40c8 <sb_event_handler+0x344>)
    3e4c:	687b      	ldr	r3, [r7, #4]
    3e4e:	0011      	movs	r1, r2
    3e50:	0018      	movs	r0, r3
    3e52:	4b8c      	ldr	r3, [pc, #560]	; (4084 <sb_event_handler+0x300>)
    3e54:	4798      	blx	r3
    3e56:	1e03      	subs	r3, r0, #0
    3e58:	d002      	beq.n	3e60 <sb_event_handler+0xdc>
	{
		line_count = 0;
    3e5a:	4b8b      	ldr	r3, [pc, #556]	; (4088 <sb_event_handler+0x304>)
    3e5c:	2200      	movs	r2, #0
    3e5e:	601a      	str	r2, [r3, #0]
		//The file wasn't found.
	}
	if (strstr(buffer,"done") != NULL)
    3e60:	4a9a      	ldr	r2, [pc, #616]	; (40cc <sb_event_handler+0x348>)
    3e62:	687b      	ldr	r3, [r7, #4]
    3e64:	0011      	movs	r1, r2
    3e66:	0018      	movs	r0, r3
    3e68:	4b86      	ldr	r3, [pc, #536]	; (4084 <sb_event_handler+0x300>)
    3e6a:	4798      	blx	r3
    3e6c:	1e03      	subs	r3, r0, #0
    3e6e:	d012      	beq.n	3e96 <sb_event_handler+0x112>
	{
		line_count = 0;
    3e70:	4b85      	ldr	r3, [pc, #532]	; (4088 <sb_event_handler+0x304>)
    3e72:	2200      	movs	r2, #0
    3e74:	601a      	str	r2, [r3, #0]
		soundboard_instance.is_playing = false;
    3e76:	4b88      	ldr	r3, [pc, #544]	; (4098 <sb_event_handler+0x314>)
    3e78:	2200      	movs	r2, #0
    3e7a:	705a      	strb	r2, [r3, #1]
		soundboard_instance.tracks[soundboard_instance.currently_playing].is_playing = false;
    3e7c:	4b86      	ldr	r3, [pc, #536]	; (4098 <sb_event_handler+0x314>)
    3e7e:	68da      	ldr	r2, [r3, #12]
    3e80:	4985      	ldr	r1, [pc, #532]	; (4098 <sb_event_handler+0x314>)
    3e82:	0013      	movs	r3, r2
    3e84:	009b      	lsls	r3, r3, #2
    3e86:	189b      	adds	r3, r3, r2
    3e88:	009b      	lsls	r3, r3, #2
    3e8a:	18cb      	adds	r3, r1, r3
    3e8c:	3310      	adds	r3, #16
    3e8e:	2200      	movs	r2, #0
    3e90:	701a      	strb	r2, [r3, #0]
		sb_reset_buffers();
    3e92:	4b84      	ldr	r3, [pc, #528]	; (40a4 <sb_event_handler+0x320>)
    3e94:	4798      	blx	r3
	}
	if(strstr(buffer,"play") != NULL && (strstr(buffer,"WAV") != NULL || strstr(buffer,"OGG") != NULL))
    3e96:	4a8e      	ldr	r2, [pc, #568]	; (40d0 <sb_event_handler+0x34c>)
    3e98:	687b      	ldr	r3, [r7, #4]
    3e9a:	0011      	movs	r1, r2
    3e9c:	0018      	movs	r0, r3
    3e9e:	4b79      	ldr	r3, [pc, #484]	; (4084 <sb_event_handler+0x300>)
    3ea0:	4798      	blx	r3
    3ea2:	1e03      	subs	r3, r0, #0
    3ea4:	d03c      	beq.n	3f20 <sb_event_handler+0x19c>
    3ea6:	4a8b      	ldr	r2, [pc, #556]	; (40d4 <sb_event_handler+0x350>)
    3ea8:	687b      	ldr	r3, [r7, #4]
    3eaa:	0011      	movs	r1, r2
    3eac:	0018      	movs	r0, r3
    3eae:	4b75      	ldr	r3, [pc, #468]	; (4084 <sb_event_handler+0x300>)
    3eb0:	4798      	blx	r3
    3eb2:	1e03      	subs	r3, r0, #0
    3eb4:	d107      	bne.n	3ec6 <sb_event_handler+0x142>
    3eb6:	4a88      	ldr	r2, [pc, #544]	; (40d8 <sb_event_handler+0x354>)
    3eb8:	687b      	ldr	r3, [r7, #4]
    3eba:	0011      	movs	r1, r2
    3ebc:	0018      	movs	r0, r3
    3ebe:	4b71      	ldr	r3, [pc, #452]	; (4084 <sb_event_handler+0x300>)
    3ec0:	4798      	blx	r3
    3ec2:	1e03      	subs	r3, r0, #0
    3ec4:	d02c      	beq.n	3f20 <sb_event_handler+0x19c>
	{
		line_count = 0;
    3ec6:	4b70      	ldr	r3, [pc, #448]	; (4088 <sb_event_handler+0x304>)
    3ec8:	2200      	movs	r2, #0
    3eca:	601a      	str	r2, [r3, #0]
		int track;
		int no;
		char filetype[3];
		char filename[8];
		sscanf(buffer,"\r\n\rplay\t%d\tT%d     %3[^\n]",&track,&no,filetype);
    3ecc:	232c      	movs	r3, #44	; 0x2c
    3ece:	18fc      	adds	r4, r7, r3
    3ed0:	2330      	movs	r3, #48	; 0x30
    3ed2:	18fa      	adds	r2, r7, r3
    3ed4:	4981      	ldr	r1, [pc, #516]	; (40dc <sb_event_handler+0x358>)
    3ed6:	6878      	ldr	r0, [r7, #4]
    3ed8:	2328      	movs	r3, #40	; 0x28
    3eda:	18fb      	adds	r3, r7, r3
    3edc:	9300      	str	r3, [sp, #0]
    3ede:	0023      	movs	r3, r4
    3ee0:	4c6c      	ldr	r4, [pc, #432]	; (4094 <sb_event_handler+0x310>)
    3ee2:	47a0      	blx	r4
		sscanf(buffer,"\r\n\rplay\t%d\t%s     %3[^\n]",&track,filename,filetype);
    3ee4:	2320      	movs	r3, #32
    3ee6:	18fc      	adds	r4, r7, r3
    3ee8:	2330      	movs	r3, #48	; 0x30
    3eea:	18fa      	adds	r2, r7, r3
    3eec:	497c      	ldr	r1, [pc, #496]	; (40e0 <sb_event_handler+0x35c>)
    3eee:	6878      	ldr	r0, [r7, #4]
    3ef0:	2328      	movs	r3, #40	; 0x28
    3ef2:	18fb      	adds	r3, r7, r3
    3ef4:	9300      	str	r3, [sp, #0]
    3ef6:	0023      	movs	r3, r4
    3ef8:	4c66      	ldr	r4, [pc, #408]	; (4094 <sb_event_handler+0x310>)
    3efa:	47a0      	blx	r4
		soundboard_instance.is_playing = true;
    3efc:	4b66      	ldr	r3, [pc, #408]	; (4098 <sb_event_handler+0x314>)
    3efe:	2201      	movs	r2, #1
    3f00:	705a      	strb	r2, [r3, #1]
		soundboard_instance.tracks[no].is_playing = true;
    3f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3f04:	4964      	ldr	r1, [pc, #400]	; (4098 <sb_event_handler+0x314>)
    3f06:	0013      	movs	r3, r2
    3f08:	009b      	lsls	r3, r3, #2
    3f0a:	189b      	adds	r3, r3, r2
    3f0c:	009b      	lsls	r3, r3, #2
    3f0e:	18cb      	adds	r3, r1, r3
    3f10:	3310      	adds	r3, #16
    3f12:	2201      	movs	r2, #1
    3f14:	701a      	strb	r2, [r3, #0]
		soundboard_instance.currently_playing = no;
    3f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3f18:	4b5f      	ldr	r3, [pc, #380]	; (4098 <sb_event_handler+0x314>)
    3f1a:	60da      	str	r2, [r3, #12]
		sb_reset_buffers();
    3f1c:	4b61      	ldr	r3, [pc, #388]	; (40a4 <sb_event_handler+0x320>)
    3f1e:	4798      	blx	r3
	}
	if(strstr(buffer,"play") == NULL && (strstr(buffer,"WAV") != NULL || strstr(buffer,"OGG") != NULL) && (strstr(buffer,"\t\r\n") != NULL))
    3f20:	4a6b      	ldr	r2, [pc, #428]	; (40d0 <sb_event_handler+0x34c>)
    3f22:	687b      	ldr	r3, [r7, #4]
    3f24:	0011      	movs	r1, r2
    3f26:	0018      	movs	r0, r3
    3f28:	4b56      	ldr	r3, [pc, #344]	; (4084 <sb_event_handler+0x300>)
    3f2a:	4798      	blx	r3
    3f2c:	1e03      	subs	r3, r0, #0
    3f2e:	d000      	beq.n	3f32 <sb_event_handler+0x1ae>
    3f30:	e0a1      	b.n	4076 <sb_event_handler+0x2f2>
    3f32:	4a68      	ldr	r2, [pc, #416]	; (40d4 <sb_event_handler+0x350>)
    3f34:	687b      	ldr	r3, [r7, #4]
    3f36:	0011      	movs	r1, r2
    3f38:	0018      	movs	r0, r3
    3f3a:	4b52      	ldr	r3, [pc, #328]	; (4084 <sb_event_handler+0x300>)
    3f3c:	4798      	blx	r3
    3f3e:	1e03      	subs	r3, r0, #0
    3f40:	d108      	bne.n	3f54 <sb_event_handler+0x1d0>
    3f42:	4a65      	ldr	r2, [pc, #404]	; (40d8 <sb_event_handler+0x354>)
    3f44:	687b      	ldr	r3, [r7, #4]
    3f46:	0011      	movs	r1, r2
    3f48:	0018      	movs	r0, r3
    3f4a:	4b4e      	ldr	r3, [pc, #312]	; (4084 <sb_event_handler+0x300>)
    3f4c:	4798      	blx	r3
    3f4e:	1e03      	subs	r3, r0, #0
    3f50:	d100      	bne.n	3f54 <sb_event_handler+0x1d0>
    3f52:	e090      	b.n	4076 <sb_event_handler+0x2f2>
    3f54:	4a63      	ldr	r2, [pc, #396]	; (40e4 <sb_event_handler+0x360>)
    3f56:	687b      	ldr	r3, [r7, #4]
    3f58:	0011      	movs	r1, r2
    3f5a:	0018      	movs	r0, r3
    3f5c:	4b49      	ldr	r3, [pc, #292]	; (4084 <sb_event_handler+0x300>)
    3f5e:	4798      	blx	r3
    3f60:	1e03      	subs	r3, r0, #0
    3f62:	d100      	bne.n	3f66 <sb_event_handler+0x1e2>
    3f64:	e087      	b.n	4076 <sb_event_handler+0x2f2>
	{
		if (line_count==soundboard_instance.number_of_tracks+2 && line_count > 0 && soundboard_instance.number_of_tracks > 0)
    3f66:	4b4c      	ldr	r3, [pc, #304]	; (4098 <sb_event_handler+0x314>)
    3f68:	685b      	ldr	r3, [r3, #4]
    3f6a:	1c9a      	adds	r2, r3, #2
    3f6c:	4b46      	ldr	r3, [pc, #280]	; (4088 <sb_event_handler+0x304>)
    3f6e:	681b      	ldr	r3, [r3, #0]
    3f70:	429a      	cmp	r2, r3
    3f72:	d000      	beq.n	3f76 <sb_event_handler+0x1f2>
    3f74:	e07f      	b.n	4076 <sb_event_handler+0x2f2>
    3f76:	4b44      	ldr	r3, [pc, #272]	; (4088 <sb_event_handler+0x304>)
    3f78:	681b      	ldr	r3, [r3, #0]
    3f7a:	2b00      	cmp	r3, #0
    3f7c:	dc00      	bgt.n	3f80 <sb_event_handler+0x1fc>
    3f7e:	e07a      	b.n	4076 <sb_event_handler+0x2f2>
    3f80:	4b45      	ldr	r3, [pc, #276]	; (4098 <sb_event_handler+0x314>)
    3f82:	685b      	ldr	r3, [r3, #4]
    3f84:	2b00      	cmp	r3, #0
    3f86:	dd76      	ble.n	4076 <sb_event_handler+0x2f2>
		{
			line_count = 0;
    3f88:	4b3f      	ldr	r3, [pc, #252]	; (4088 <sb_event_handler+0x304>)
    3f8a:	2200      	movs	r2, #0
    3f8c:	601a      	str	r2, [r3, #0]
			char *pointy;
			char tempName[9];
			char tempType[4];
			int tempSize;
			for (int k=0;k<soundboard_instance.number_of_tracks;k++)
    3f8e:	2300      	movs	r3, #0
    3f90:	647b      	str	r3, [r7, #68]	; 0x44
    3f92:	e066      	b.n	4062 <sb_event_handler+0x2de>
			{
				
				pointy = strstr(buffer,"\n");
    3f94:	687b      	ldr	r3, [r7, #4]
    3f96:	210a      	movs	r1, #10
    3f98:	0018      	movs	r0, r3
    3f9a:	4b53      	ldr	r3, [pc, #332]	; (40e8 <sb_event_handler+0x364>)
    3f9c:	4798      	blx	r3
    3f9e:	0003      	movs	r3, r0
    3fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
				pointy += k*25;
    3fa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3fa4:	0013      	movs	r3, r2
    3fa6:	009b      	lsls	r3, r3, #2
    3fa8:	189b      	adds	r3, r3, r2
    3faa:	009a      	lsls	r2, r3, #2
    3fac:	189b      	adds	r3, r3, r2
    3fae:	001a      	movs	r2, r3
    3fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3fb2:	189b      	adds	r3, r3, r2
    3fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
				if (pointy != NULL)
    3fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3fb8:	2b00      	cmp	r3, #0
    3fba:	d04f      	beq.n	405c <sb_event_handler+0x2d8>
				{
					sscanf(pointy,"%8s%3s%d\t",tempName,tempType,&tempSize);
    3fbc:	2310      	movs	r3, #16
    3fbe:	18fc      	adds	r4, r7, r3
    3fc0:	2314      	movs	r3, #20
    3fc2:	18fa      	adds	r2, r7, r3
    3fc4:	4949      	ldr	r1, [pc, #292]	; (40ec <sb_event_handler+0x368>)
    3fc6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3fc8:	230c      	movs	r3, #12
    3fca:	18fb      	adds	r3, r7, r3
    3fcc:	9300      	str	r3, [sp, #0]
    3fce:	0023      	movs	r3, r4
    3fd0:	4c30      	ldr	r4, [pc, #192]	; (4094 <sb_event_handler+0x310>)
    3fd2:	47a0      	blx	r4
					soundboard_instance.tracks[k].filetype = malloc(4);
    3fd4:	2004      	movs	r0, #4
    3fd6:	4b46      	ldr	r3, [pc, #280]	; (40f0 <sb_event_handler+0x36c>)
    3fd8:	4798      	blx	r3
    3fda:	0003      	movs	r3, r0
    3fdc:	0018      	movs	r0, r3
    3fde:	492e      	ldr	r1, [pc, #184]	; (4098 <sb_event_handler+0x314>)
    3fe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3fe2:	0013      	movs	r3, r2
    3fe4:	009b      	lsls	r3, r3, #2
    3fe6:	189b      	adds	r3, r3, r2
    3fe8:	009b      	lsls	r3, r3, #2
    3fea:	18cb      	adds	r3, r1, r3
    3fec:	331c      	adds	r3, #28
    3fee:	6018      	str	r0, [r3, #0]
					strcpy(soundboard_instance.tracks[k].filetype,tempType);
    3ff0:	4929      	ldr	r1, [pc, #164]	; (4098 <sb_event_handler+0x314>)
    3ff2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3ff4:	0013      	movs	r3, r2
    3ff6:	009b      	lsls	r3, r3, #2
    3ff8:	189b      	adds	r3, r3, r2
    3ffa:	009b      	lsls	r3, r3, #2
    3ffc:	18cb      	adds	r3, r1, r3
    3ffe:	331c      	adds	r3, #28
    4000:	681b      	ldr	r3, [r3, #0]
    4002:	2210      	movs	r2, #16
    4004:	18ba      	adds	r2, r7, r2
    4006:	0011      	movs	r1, r2
    4008:	0018      	movs	r0, r3
    400a:	4b3a      	ldr	r3, [pc, #232]	; (40f4 <sb_event_handler+0x370>)
    400c:	4798      	blx	r3
					soundboard_instance.tracks[k].filename = malloc(9);
    400e:	2009      	movs	r0, #9
    4010:	4b37      	ldr	r3, [pc, #220]	; (40f0 <sb_event_handler+0x36c>)
    4012:	4798      	blx	r3
    4014:	0003      	movs	r3, r0
    4016:	0018      	movs	r0, r3
    4018:	491f      	ldr	r1, [pc, #124]	; (4098 <sb_event_handler+0x314>)
    401a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    401c:	0013      	movs	r3, r2
    401e:	009b      	lsls	r3, r3, #2
    4020:	189b      	adds	r3, r3, r2
    4022:	009b      	lsls	r3, r3, #2
    4024:	18cb      	adds	r3, r1, r3
    4026:	3318      	adds	r3, #24
    4028:	6018      	str	r0, [r3, #0]
					strcpy(soundboard_instance.tracks[k].filename,tempName);
    402a:	491b      	ldr	r1, [pc, #108]	; (4098 <sb_event_handler+0x314>)
    402c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    402e:	0013      	movs	r3, r2
    4030:	009b      	lsls	r3, r3, #2
    4032:	189b      	adds	r3, r3, r2
    4034:	009b      	lsls	r3, r3, #2
    4036:	18cb      	adds	r3, r1, r3
    4038:	3318      	adds	r3, #24
    403a:	681b      	ldr	r3, [r3, #0]
    403c:	2214      	movs	r2, #20
    403e:	18ba      	adds	r2, r7, r2
    4040:	0011      	movs	r1, r2
    4042:	0018      	movs	r0, r3
    4044:	4b2b      	ldr	r3, [pc, #172]	; (40f4 <sb_event_handler+0x370>)
    4046:	4798      	blx	r3
					soundboard_instance.tracks[k].filesize = tempSize;
    4048:	68f9      	ldr	r1, [r7, #12]
    404a:	4813      	ldr	r0, [pc, #76]	; (4098 <sb_event_handler+0x314>)
    404c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    404e:	0013      	movs	r3, r2
    4050:	009b      	lsls	r3, r3, #2
    4052:	189b      	adds	r3, r3, r2
    4054:	009b      	lsls	r3, r3, #2
    4056:	18c3      	adds	r3, r0, r3
    4058:	3320      	adds	r3, #32
    405a:	6019      	str	r1, [r3, #0]
			for (int k=0;k<soundboard_instance.number_of_tracks;k++)
    405c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    405e:	3301      	adds	r3, #1
    4060:	647b      	str	r3, [r7, #68]	; 0x44
    4062:	4b0d      	ldr	r3, [pc, #52]	; (4098 <sb_event_handler+0x314>)
    4064:	685a      	ldr	r2, [r3, #4]
    4066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4068:	429a      	cmp	r2, r3
    406a:	dc93      	bgt.n	3f94 <sb_event_handler+0x210>
				}
			}
			soundboard_instance.started = true;
    406c:	4b0a      	ldr	r3, [pc, #40]	; (4098 <sb_event_handler+0x314>)
    406e:	2201      	movs	r2, #1
    4070:	701a      	strb	r2, [r3, #0]
			sb_reset_buffers();
    4072:	4b0c      	ldr	r3, [pc, #48]	; (40a4 <sb_event_handler+0x320>)
    4074:	4798      	blx	r3
		}
	}
}
    4076:	46c0      	nop			; (mov r8, r8)
    4078:	46bd      	mov	sp, r7
    407a:	b013      	add	sp, #76	; 0x4c
    407c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    407e:	46c0      	nop			; (mov r8, r8)
    4080:	00006fd4 	.word	0x00006fd4
    4084:	00005b31 	.word	0x00005b31
    4088:	20000998 	.word	0x20000998
    408c:	00006fec 	.word	0x00006fec
    4090:	00006ff4 	.word	0x00006ff4
    4094:	00005a81 	.word	0x00005a81
    4098:	20000164 	.word	0x20000164
    409c:	00007000 	.word	0x00007000
    40a0:	00007008 	.word	0x00007008
    40a4:	0000423d 	.word	0x0000423d
    40a8:	00004aa5 	.word	0x00004aa5
    40ac:	00005621 	.word	0x00005621
    40b0:	00001b57 	.word	0x00001b57
    40b4:	000055e1 	.word	0x000055e1
    40b8:	00001b58 	.word	0x00001b58
    40bc:	20000001 	.word	0x20000001
    40c0:	00007014 	.word	0x00007014
    40c4:	000041f5 	.word	0x000041f5
    40c8:	00007018 	.word	0x00007018
    40cc:	00007020 	.word	0x00007020
    40d0:	00007028 	.word	0x00007028
    40d4:	00007030 	.word	0x00007030
    40d8:	00007034 	.word	0x00007034
    40dc:	00007038 	.word	0x00007038
    40e0:	00007054 	.word	0x00007054
    40e4:	00007070 	.word	0x00007070
    40e8:	00005ad5 	.word	0x00005ad5
    40ec:	00007074 	.word	0x00007074
    40f0:	00005891 	.word	0x00005891
    40f4:	00005af1 	.word	0x00005af1

000040f8 <sb_play_track_by_number>:

void sb_play_track_by_number(int number)
{
    40f8:	b580      	push	{r7, lr}
    40fa:	b084      	sub	sp, #16
    40fc:	af00      	add	r7, sp, #0
    40fe:	6078      	str	r0, [r7, #4]
	char buffer[8];
	sprintf(buffer,"#%d\n",number);
    4100:	687a      	ldr	r2, [r7, #4]
    4102:	4907      	ldr	r1, [pc, #28]	; (4120 <sb_play_track_by_number+0x28>)
    4104:	2308      	movs	r3, #8
    4106:	18fb      	adds	r3, r7, r3
    4108:	0018      	movs	r0, r3
    410a:	4b06      	ldr	r3, [pc, #24]	; (4124 <sb_play_track_by_number+0x2c>)
    410c:	4798      	blx	r3
	sb_uart_write(buffer);
    410e:	2308      	movs	r3, #8
    4110:	18fb      	adds	r3, r7, r3
    4112:	0018      	movs	r0, r3
    4114:	4b04      	ldr	r3, [pc, #16]	; (4128 <sb_play_track_by_number+0x30>)
    4116:	4798      	blx	r3
}
    4118:	46c0      	nop			; (mov r8, r8)
    411a:	46bd      	mov	sp, r7
    411c:	b004      	add	sp, #16
    411e:	bd80      	pop	{r7, pc}
    4120:	00007080 	.word	0x00007080
    4124:	00005a3d 	.word	0x00005a3d
    4128:	000041f5 	.word	0x000041f5

0000412c <sb_quit>:

void sb_quit(void)
{
    412c:	b580      	push	{r7, lr}
    412e:	af00      	add	r7, sp, #0
	sb_uart_write("q\n");
    4130:	4b03      	ldr	r3, [pc, #12]	; (4140 <sb_quit+0x14>)
    4132:	0018      	movs	r0, r3
    4134:	4b03      	ldr	r3, [pc, #12]	; (4144 <sb_quit+0x18>)
    4136:	4798      	blx	r3
}
    4138:	46c0      	nop			; (mov r8, r8)
    413a:	46bd      	mov	sp, r7
    413c:	bd80      	pop	{r7, pc}
    413e:	46c0      	nop			; (mov r8, r8)
    4140:	00007088 	.word	0x00007088
    4144:	000041f5 	.word	0x000041f5

00004148 <is_started>:

bool is_started(void)
{
    4148:	b580      	push	{r7, lr}
    414a:	af00      	add	r7, sp, #0
	return soundboard_instance.started;
    414c:	4b02      	ldr	r3, [pc, #8]	; (4158 <is_started+0x10>)
    414e:	781b      	ldrb	r3, [r3, #0]
}
    4150:	0018      	movs	r0, r3
    4152:	46bd      	mov	sp, r7
    4154:	bd80      	pop	{r7, pc}
    4156:	46c0      	nop			; (mov r8, r8)
    4158:	20000164 	.word	0x20000164

0000415c <SERCOM1_Handler>:
	while(CONF_STDIO_USART_MODULE->USART.SYNCBUSY.bit.ENABLE);
}


void SERCOM1_Handler()
{
    415c:	b580      	push	{r7, lr}
    415e:	af00      	add	r7, sp, #0
	if (CONF_STDIO_USART_MODULE->USART.INTFLAG.bit.RXC)
    4160:	4b1f      	ldr	r3, [pc, #124]	; (41e0 <SERCOM1_Handler+0x84>)
    4162:	7e1b      	ldrb	r3, [r3, #24]
    4164:	075b      	lsls	r3, r3, #29
    4166:	0fdb      	lsrs	r3, r3, #31
    4168:	b2db      	uxtb	r3, r3
    416a:	2b00      	cmp	r3, #0
    416c:	d035      	beq.n	41da <SERCOM1_Handler+0x7e>
	{
		// Got a character
		if (sb_buff_count > sizeof(sb_rx_buffer_array)-1)
    416e:	4b1d      	ldr	r3, [pc, #116]	; (41e4 <SERCOM1_Handler+0x88>)
    4170:	681b      	ldr	r3, [r3, #0]
    4172:	001a      	movs	r2, r3
    4174:	4b1c      	ldr	r3, [pc, #112]	; (41e8 <SERCOM1_Handler+0x8c>)
    4176:	429a      	cmp	r2, r3
    4178:	d917      	bls.n	41aa <SERCOM1_Handler+0x4e>
		{
			sb_buff_count = 0;
    417a:	4b1a      	ldr	r3, [pc, #104]	; (41e4 <SERCOM1_Handler+0x88>)
    417c:	2200      	movs	r2, #0
    417e:	601a      	str	r2, [r3, #0]
			sb_rx_buffer_array[sb_buff_count] = (uint8_t) CONF_STDIO_USART_MODULE->USART.DATA.reg;
    4180:	4b18      	ldr	r3, [pc, #96]	; (41e4 <SERCOM1_Handler+0x88>)
    4182:	681b      	ldr	r3, [r3, #0]
    4184:	4a16      	ldr	r2, [pc, #88]	; (41e0 <SERCOM1_Handler+0x84>)
    4186:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    4188:	b292      	uxth	r2, r2
    418a:	b2d1      	uxtb	r1, r2
    418c:	4a17      	ldr	r2, [pc, #92]	; (41ec <SERCOM1_Handler+0x90>)
    418e:	54d1      	strb	r1, [r2, r3]
			if (sb_rx_buffer_array[sb_buff_count] == 13)
    4190:	4b14      	ldr	r3, [pc, #80]	; (41e4 <SERCOM1_Handler+0x88>)
    4192:	681b      	ldr	r3, [r3, #0]
    4194:	4a15      	ldr	r2, [pc, #84]	; (41ec <SERCOM1_Handler+0x90>)
    4196:	5cd3      	ldrb	r3, [r2, r3]
    4198:	b2db      	uxtb	r3, r3
    419a:	2b0d      	cmp	r3, #13
    419c:	d11d      	bne.n	41da <SERCOM1_Handler+0x7e>
			{
				line_count++;
    419e:	4b14      	ldr	r3, [pc, #80]	; (41f0 <SERCOM1_Handler+0x94>)
    41a0:	681b      	ldr	r3, [r3, #0]
    41a2:	1c5a      	adds	r2, r3, #1
    41a4:	4b12      	ldr	r3, [pc, #72]	; (41f0 <SERCOM1_Handler+0x94>)
    41a6:	601a      	str	r2, [r3, #0]
			{
				line_count++;
			}
		}
	}
}
    41a8:	e017      	b.n	41da <SERCOM1_Handler+0x7e>
			sb_rx_buffer_array[sb_buff_count++] = (uint8_t)CONF_STDIO_USART_MODULE->USART.DATA.reg;
    41aa:	4b0e      	ldr	r3, [pc, #56]	; (41e4 <SERCOM1_Handler+0x88>)
    41ac:	681b      	ldr	r3, [r3, #0]
    41ae:	1c59      	adds	r1, r3, #1
    41b0:	4a0c      	ldr	r2, [pc, #48]	; (41e4 <SERCOM1_Handler+0x88>)
    41b2:	6011      	str	r1, [r2, #0]
    41b4:	4a0a      	ldr	r2, [pc, #40]	; (41e0 <SERCOM1_Handler+0x84>)
    41b6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    41b8:	b292      	uxth	r2, r2
    41ba:	b2d1      	uxtb	r1, r2
    41bc:	4a0b      	ldr	r2, [pc, #44]	; (41ec <SERCOM1_Handler+0x90>)
    41be:	54d1      	strb	r1, [r2, r3]
			if (sb_rx_buffer_array[sb_buff_count-1] == 13)
    41c0:	4b08      	ldr	r3, [pc, #32]	; (41e4 <SERCOM1_Handler+0x88>)
    41c2:	681b      	ldr	r3, [r3, #0]
    41c4:	3b01      	subs	r3, #1
    41c6:	4a09      	ldr	r2, [pc, #36]	; (41ec <SERCOM1_Handler+0x90>)
    41c8:	5cd3      	ldrb	r3, [r2, r3]
    41ca:	b2db      	uxtb	r3, r3
    41cc:	2b0d      	cmp	r3, #13
    41ce:	d104      	bne.n	41da <SERCOM1_Handler+0x7e>
				line_count++;
    41d0:	4b07      	ldr	r3, [pc, #28]	; (41f0 <SERCOM1_Handler+0x94>)
    41d2:	681b      	ldr	r3, [r3, #0]
    41d4:	1c5a      	adds	r2, r3, #1
    41d6:	4b06      	ldr	r3, [pc, #24]	; (41f0 <SERCOM1_Handler+0x94>)
    41d8:	601a      	str	r2, [r3, #0]
}
    41da:	46c0      	nop			; (mov r8, r8)
    41dc:	46bd      	mov	sp, r7
    41de:	bd80      	pop	{r7, pc}
    41e0:	42000c00 	.word	0x42000c00
    41e4:	20000564 	.word	0x20000564
    41e8:	000003ff 	.word	0x000003ff
    41ec:	20000ed0 	.word	0x20000ed0
    41f0:	20000998 	.word	0x20000998

000041f4 <sb_uart_write>:

void sb_uart_write(char buffer[])
{
    41f4:	b580      	push	{r7, lr}
    41f6:	b084      	sub	sp, #16
    41f8:	af00      	add	r7, sp, #0
    41fa:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
    41fc:	2300      	movs	r3, #0
    41fe:	60fb      	str	r3, [r7, #12]
	while(buffer[i] != '\0')
    4200:	e00f      	b.n	4222 <sb_uart_write+0x2e>
	{
		if(CONF_STDIO_USART_MODULE->USART.INTFLAG.bit.DRE == 1)
    4202:	4b0d      	ldr	r3, [pc, #52]	; (4238 <sb_uart_write+0x44>)
    4204:	7e1b      	ldrb	r3, [r3, #24]
    4206:	07db      	lsls	r3, r3, #31
    4208:	0fdb      	lsrs	r3, r3, #31
    420a:	b2db      	uxtb	r3, r3
    420c:	2b01      	cmp	r3, #1
    420e:	d108      	bne.n	4222 <sb_uart_write+0x2e>
		{
			CONF_STDIO_USART_MODULE->USART.DATA.reg = (uint16_t)buffer[i++];
    4210:	4909      	ldr	r1, [pc, #36]	; (4238 <sb_uart_write+0x44>)
    4212:	68fb      	ldr	r3, [r7, #12]
    4214:	1c5a      	adds	r2, r3, #1
    4216:	60fa      	str	r2, [r7, #12]
    4218:	687a      	ldr	r2, [r7, #4]
    421a:	18d3      	adds	r3, r2, r3
    421c:	781b      	ldrb	r3, [r3, #0]
    421e:	b29b      	uxth	r3, r3
    4220:	850b      	strh	r3, [r1, #40]	; 0x28
	while(buffer[i] != '\0')
    4222:	687a      	ldr	r2, [r7, #4]
    4224:	68fb      	ldr	r3, [r7, #12]
    4226:	18d3      	adds	r3, r2, r3
    4228:	781b      	ldrb	r3, [r3, #0]
    422a:	2b00      	cmp	r3, #0
    422c:	d1e9      	bne.n	4202 <sb_uart_write+0xe>
		}
	}
}
    422e:	46c0      	nop			; (mov r8, r8)
    4230:	46bd      	mov	sp, r7
    4232:	b004      	add	sp, #16
    4234:	bd80      	pop	{r7, pc}
    4236:	46c0      	nop			; (mov r8, r8)
    4238:	42000c00 	.word	0x42000c00

0000423c <sb_reset_buffers>:

void sb_reset_buffers(void)
{
    423c:	b580      	push	{r7, lr}
    423e:	b082      	sub	sp, #8
    4240:	af00      	add	r7, sp, #0
	for (uint32_t k=0;k<sizeof(sb_rx_buffer_array);k++)
    4242:	2300      	movs	r3, #0
    4244:	607b      	str	r3, [r7, #4]
    4246:	e007      	b.n	4258 <sb_reset_buffers+0x1c>
	{
		sb_rx_buffer_array[k] = 0;
    4248:	4a09      	ldr	r2, [pc, #36]	; (4270 <sb_reset_buffers+0x34>)
    424a:	687b      	ldr	r3, [r7, #4]
    424c:	18d3      	adds	r3, r2, r3
    424e:	2200      	movs	r2, #0
    4250:	701a      	strb	r2, [r3, #0]
	for (uint32_t k=0;k<sizeof(sb_rx_buffer_array);k++)
    4252:	687b      	ldr	r3, [r7, #4]
    4254:	3301      	adds	r3, #1
    4256:	607b      	str	r3, [r7, #4]
    4258:	687b      	ldr	r3, [r7, #4]
    425a:	4a06      	ldr	r2, [pc, #24]	; (4274 <sb_reset_buffers+0x38>)
    425c:	4293      	cmp	r3, r2
    425e:	d9f3      	bls.n	4248 <sb_reset_buffers+0xc>
	}
	sb_buff_count = 0;
    4260:	4b05      	ldr	r3, [pc, #20]	; (4278 <sb_reset_buffers+0x3c>)
    4262:	2200      	movs	r2, #0
    4264:	601a      	str	r2, [r3, #0]
}
    4266:	46c0      	nop			; (mov r8, r8)
    4268:	46bd      	mov	sp, r7
    426a:	b002      	add	sp, #8
    426c:	bd80      	pop	{r7, pc}
    426e:	46c0      	nop			; (mov r8, r8)
    4270:	20000ed0 	.word	0x20000ed0
    4274:	000003ff 	.word	0x000003ff
    4278:	20000564 	.word	0x20000564

0000427c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    427c:	b580      	push	{r7, lr}
    427e:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    4280:	46c0      	nop			; (mov r8, r8)
    4282:	46bd      	mov	sp, r7
    4284:	bd80      	pop	{r7, pc}
	...

00004288 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    4288:	b580      	push	{r7, lr}
    428a:	b082      	sub	sp, #8
    428c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    428e:	4b10      	ldr	r3, [pc, #64]	; (42d0 <cpu_irq_enter_critical+0x48>)
    4290:	681b      	ldr	r3, [r3, #0]
    4292:	2b00      	cmp	r3, #0
    4294:	d112      	bne.n	42bc <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4296:	f3ef 8310 	mrs	r3, PRIMASK
    429a:	607b      	str	r3, [r7, #4]
  return(result);
    429c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    429e:	2b00      	cmp	r3, #0
    42a0:	d109      	bne.n	42b6 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    42a2:	b672      	cpsid	i
    42a4:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    42a8:	4b0a      	ldr	r3, [pc, #40]	; (42d4 <cpu_irq_enter_critical+0x4c>)
    42aa:	2200      	movs	r2, #0
    42ac:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    42ae:	4b0a      	ldr	r3, [pc, #40]	; (42d8 <cpu_irq_enter_critical+0x50>)
    42b0:	2201      	movs	r2, #1
    42b2:	701a      	strb	r2, [r3, #0]
    42b4:	e002      	b.n	42bc <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    42b6:	4b08      	ldr	r3, [pc, #32]	; (42d8 <cpu_irq_enter_critical+0x50>)
    42b8:	2200      	movs	r2, #0
    42ba:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    42bc:	4b04      	ldr	r3, [pc, #16]	; (42d0 <cpu_irq_enter_critical+0x48>)
    42be:	681b      	ldr	r3, [r3, #0]
    42c0:	1c5a      	adds	r2, r3, #1
    42c2:	4b03      	ldr	r3, [pc, #12]	; (42d0 <cpu_irq_enter_critical+0x48>)
    42c4:	601a      	str	r2, [r3, #0]
}
    42c6:	46c0      	nop			; (mov r8, r8)
    42c8:	46bd      	mov	sp, r7
    42ca:	b002      	add	sp, #8
    42cc:	bd80      	pop	{r7, pc}
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	20000568 	.word	0x20000568
    42d4:	20000368 	.word	0x20000368
    42d8:	2000056c 	.word	0x2000056c

000042dc <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    42dc:	b580      	push	{r7, lr}
    42de:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    42e0:	4b0b      	ldr	r3, [pc, #44]	; (4310 <cpu_irq_leave_critical+0x34>)
    42e2:	681b      	ldr	r3, [r3, #0]
    42e4:	1e5a      	subs	r2, r3, #1
    42e6:	4b0a      	ldr	r3, [pc, #40]	; (4310 <cpu_irq_leave_critical+0x34>)
    42e8:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    42ea:	4b09      	ldr	r3, [pc, #36]	; (4310 <cpu_irq_leave_critical+0x34>)
    42ec:	681b      	ldr	r3, [r3, #0]
    42ee:	2b00      	cmp	r3, #0
    42f0:	d10a      	bne.n	4308 <cpu_irq_leave_critical+0x2c>
    42f2:	4b08      	ldr	r3, [pc, #32]	; (4314 <cpu_irq_leave_critical+0x38>)
    42f4:	781b      	ldrb	r3, [r3, #0]
    42f6:	b2db      	uxtb	r3, r3
    42f8:	2b00      	cmp	r3, #0
    42fa:	d005      	beq.n	4308 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    42fc:	4b06      	ldr	r3, [pc, #24]	; (4318 <cpu_irq_leave_critical+0x3c>)
    42fe:	2201      	movs	r2, #1
    4300:	701a      	strb	r2, [r3, #0]
    4302:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4306:	b662      	cpsie	i
	}
}
    4308:	46c0      	nop			; (mov r8, r8)
    430a:	46bd      	mov	sp, r7
    430c:	bd80      	pop	{r7, pc}
    430e:	46c0      	nop			; (mov r8, r8)
    4310:	20000568 	.word	0x20000568
    4314:	2000056c 	.word	0x2000056c
    4318:	20000368 	.word	0x20000368

0000431c <system_gclk_gen_get_config_defaults>:
{
    431c:	b580      	push	{r7, lr}
    431e:	b082      	sub	sp, #8
    4320:	af00      	add	r7, sp, #0
    4322:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    4324:	687b      	ldr	r3, [r7, #4]
    4326:	2201      	movs	r2, #1
    4328:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    432a:	687b      	ldr	r3, [r7, #4]
    432c:	2200      	movs	r2, #0
    432e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4330:	687b      	ldr	r3, [r7, #4]
    4332:	2206      	movs	r2, #6
    4334:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    4336:	687b      	ldr	r3, [r7, #4]
    4338:	2200      	movs	r2, #0
    433a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    433c:	687b      	ldr	r3, [r7, #4]
    433e:	2200      	movs	r2, #0
    4340:	725a      	strb	r2, [r3, #9]
}
    4342:	46c0      	nop			; (mov r8, r8)
    4344:	46bd      	mov	sp, r7
    4346:	b002      	add	sp, #8
    4348:	bd80      	pop	{r7, pc}

0000434a <system_clock_source_osc8m_get_config_defaults>:
{
    434a:	b580      	push	{r7, lr}
    434c:	b082      	sub	sp, #8
    434e:	af00      	add	r7, sp, #0
    4350:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    4352:	687b      	ldr	r3, [r7, #4]
    4354:	2203      	movs	r2, #3
    4356:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    4358:	687b      	ldr	r3, [r7, #4]
    435a:	2200      	movs	r2, #0
    435c:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    435e:	687b      	ldr	r3, [r7, #4]
    4360:	2201      	movs	r2, #1
    4362:	709a      	strb	r2, [r3, #2]
}
    4364:	46c0      	nop			; (mov r8, r8)
    4366:	46bd      	mov	sp, r7
    4368:	b002      	add	sp, #8
    436a:	bd80      	pop	{r7, pc}

0000436c <system_cpu_clock_set_divider>:
{
    436c:	b580      	push	{r7, lr}
    436e:	b082      	sub	sp, #8
    4370:	af00      	add	r7, sp, #0
    4372:	0002      	movs	r2, r0
    4374:	1dfb      	adds	r3, r7, #7
    4376:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    4378:	4a03      	ldr	r2, [pc, #12]	; (4388 <system_cpu_clock_set_divider+0x1c>)
    437a:	1dfb      	adds	r3, r7, #7
    437c:	781b      	ldrb	r3, [r3, #0]
    437e:	7213      	strb	r3, [r2, #8]
}
    4380:	46c0      	nop			; (mov r8, r8)
    4382:	46bd      	mov	sp, r7
    4384:	b002      	add	sp, #8
    4386:	bd80      	pop	{r7, pc}
    4388:	40000400 	.word	0x40000400

0000438c <system_apb_clock_set_divider>:
{
    438c:	b580      	push	{r7, lr}
    438e:	b082      	sub	sp, #8
    4390:	af00      	add	r7, sp, #0
    4392:	0002      	movs	r2, r0
    4394:	1dfb      	adds	r3, r7, #7
    4396:	701a      	strb	r2, [r3, #0]
    4398:	1dbb      	adds	r3, r7, #6
    439a:	1c0a      	adds	r2, r1, #0
    439c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    439e:	1dfb      	adds	r3, r7, #7
    43a0:	781b      	ldrb	r3, [r3, #0]
    43a2:	2b01      	cmp	r3, #1
    43a4:	d008      	beq.n	43b8 <system_apb_clock_set_divider+0x2c>
    43a6:	2b02      	cmp	r3, #2
    43a8:	d00b      	beq.n	43c2 <system_apb_clock_set_divider+0x36>
    43aa:	2b00      	cmp	r3, #0
    43ac:	d10e      	bne.n	43cc <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    43ae:	4a0b      	ldr	r2, [pc, #44]	; (43dc <system_apb_clock_set_divider+0x50>)
    43b0:	1dbb      	adds	r3, r7, #6
    43b2:	781b      	ldrb	r3, [r3, #0]
    43b4:	7253      	strb	r3, [r2, #9]
			break;
    43b6:	e00b      	b.n	43d0 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    43b8:	4a08      	ldr	r2, [pc, #32]	; (43dc <system_apb_clock_set_divider+0x50>)
    43ba:	1dbb      	adds	r3, r7, #6
    43bc:	781b      	ldrb	r3, [r3, #0]
    43be:	7293      	strb	r3, [r2, #10]
			break;
    43c0:	e006      	b.n	43d0 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    43c2:	4a06      	ldr	r2, [pc, #24]	; (43dc <system_apb_clock_set_divider+0x50>)
    43c4:	1dbb      	adds	r3, r7, #6
    43c6:	781b      	ldrb	r3, [r3, #0]
    43c8:	72d3      	strb	r3, [r2, #11]
			break;
    43ca:	e001      	b.n	43d0 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    43cc:	2317      	movs	r3, #23
    43ce:	e000      	b.n	43d2 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    43d0:	2300      	movs	r3, #0
}
    43d2:	0018      	movs	r0, r3
    43d4:	46bd      	mov	sp, r7
    43d6:	b002      	add	sp, #8
    43d8:	bd80      	pop	{r7, pc}
    43da:	46c0      	nop			; (mov r8, r8)
    43dc:	40000400 	.word	0x40000400

000043e0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    43e0:	b580      	push	{r7, lr}
    43e2:	b082      	sub	sp, #8
    43e4:	af00      	add	r7, sp, #0
    43e6:	0002      	movs	r2, r0
    43e8:	1dfb      	adds	r3, r7, #7
    43ea:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    43ec:	4a08      	ldr	r2, [pc, #32]	; (4410 <system_flash_set_waitstates+0x30>)
    43ee:	1dfb      	adds	r3, r7, #7
    43f0:	781b      	ldrb	r3, [r3, #0]
    43f2:	210f      	movs	r1, #15
    43f4:	400b      	ands	r3, r1
    43f6:	b2d9      	uxtb	r1, r3
    43f8:	6853      	ldr	r3, [r2, #4]
    43fa:	200f      	movs	r0, #15
    43fc:	4001      	ands	r1, r0
    43fe:	0049      	lsls	r1, r1, #1
    4400:	201e      	movs	r0, #30
    4402:	4383      	bics	r3, r0
    4404:	430b      	orrs	r3, r1
    4406:	6053      	str	r3, [r2, #4]
}
    4408:	46c0      	nop			; (mov r8, r8)
    440a:	46bd      	mov	sp, r7
    440c:	b002      	add	sp, #8
    440e:	bd80      	pop	{r7, pc}
    4410:	41004000 	.word	0x41004000

00004414 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    4414:	b580      	push	{r7, lr}
    4416:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4418:	46c0      	nop			; (mov r8, r8)
    441a:	4b04      	ldr	r3, [pc, #16]	; (442c <_system_dfll_wait_for_sync+0x18>)
    441c:	68db      	ldr	r3, [r3, #12]
    441e:	2210      	movs	r2, #16
    4420:	4013      	ands	r3, r2
    4422:	d0fa      	beq.n	441a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    4424:	46c0      	nop			; (mov r8, r8)
    4426:	46bd      	mov	sp, r7
    4428:	bd80      	pop	{r7, pc}
    442a:	46c0      	nop			; (mov r8, r8)
    442c:	40000800 	.word	0x40000800

00004430 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    4430:	b580      	push	{r7, lr}
    4432:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4434:	4b0c      	ldr	r3, [pc, #48]	; (4468 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4436:	2202      	movs	r2, #2
    4438:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    443a:	4b0c      	ldr	r3, [pc, #48]	; (446c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    443c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    443e:	4a0a      	ldr	r2, [pc, #40]	; (4468 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4440:	4b0b      	ldr	r3, [pc, #44]	; (4470 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4442:	689b      	ldr	r3, [r3, #8]
    4444:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4446:	4a08      	ldr	r2, [pc, #32]	; (4468 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4448:	4b09      	ldr	r3, [pc, #36]	; (4470 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    444a:	685b      	ldr	r3, [r3, #4]
    444c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    444e:	4b06      	ldr	r3, [pc, #24]	; (4468 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4450:	2200      	movs	r2, #0
    4452:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4454:	4b05      	ldr	r3, [pc, #20]	; (446c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4456:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4458:	4a03      	ldr	r2, [pc, #12]	; (4468 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    445a:	4b05      	ldr	r3, [pc, #20]	; (4470 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    445c:	681b      	ldr	r3, [r3, #0]
    445e:	b29b      	uxth	r3, r3
    4460:	8493      	strh	r3, [r2, #36]	; 0x24
}
    4462:	46c0      	nop			; (mov r8, r8)
    4464:	46bd      	mov	sp, r7
    4466:	bd80      	pop	{r7, pc}
    4468:	40000800 	.word	0x40000800
    446c:	00004415 	.word	0x00004415
    4470:	20000570 	.word	0x20000570

00004474 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4474:	b580      	push	{r7, lr}
    4476:	b082      	sub	sp, #8
    4478:	af00      	add	r7, sp, #0
    447a:	0002      	movs	r2, r0
    447c:	1dfb      	adds	r3, r7, #7
    447e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4480:	1dfb      	adds	r3, r7, #7
    4482:	781b      	ldrb	r3, [r3, #0]
    4484:	2b08      	cmp	r3, #8
    4486:	d840      	bhi.n	450a <system_clock_source_get_hz+0x96>
    4488:	009a      	lsls	r2, r3, #2
    448a:	4b22      	ldr	r3, [pc, #136]	; (4514 <system_clock_source_get_hz+0xa0>)
    448c:	18d3      	adds	r3, r2, r3
    448e:	681b      	ldr	r3, [r3, #0]
    4490:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    4492:	4b21      	ldr	r3, [pc, #132]	; (4518 <system_clock_source_get_hz+0xa4>)
    4494:	691b      	ldr	r3, [r3, #16]
    4496:	e039      	b.n	450c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4498:	4b20      	ldr	r3, [pc, #128]	; (451c <system_clock_source_get_hz+0xa8>)
    449a:	6a1b      	ldr	r3, [r3, #32]
    449c:	059b      	lsls	r3, r3, #22
    449e:	0f9b      	lsrs	r3, r3, #30
    44a0:	b2db      	uxtb	r3, r3
    44a2:	001a      	movs	r2, r3
    44a4:	4b1e      	ldr	r3, [pc, #120]	; (4520 <system_clock_source_get_hz+0xac>)
    44a6:	40d3      	lsrs	r3, r2
    44a8:	e030      	b.n	450c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    44aa:	2380      	movs	r3, #128	; 0x80
    44ac:	021b      	lsls	r3, r3, #8
    44ae:	e02d      	b.n	450c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    44b0:	2380      	movs	r3, #128	; 0x80
    44b2:	021b      	lsls	r3, r3, #8
    44b4:	e02a      	b.n	450c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    44b6:	4b18      	ldr	r3, [pc, #96]	; (4518 <system_clock_source_get_hz+0xa4>)
    44b8:	695b      	ldr	r3, [r3, #20]
    44ba:	e027      	b.n	450c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    44bc:	4b16      	ldr	r3, [pc, #88]	; (4518 <system_clock_source_get_hz+0xa4>)
    44be:	681b      	ldr	r3, [r3, #0]
    44c0:	2202      	movs	r2, #2
    44c2:	4013      	ands	r3, r2
    44c4:	d101      	bne.n	44ca <system_clock_source_get_hz+0x56>
			return 0;
    44c6:	2300      	movs	r3, #0
    44c8:	e020      	b.n	450c <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    44ca:	4b16      	ldr	r3, [pc, #88]	; (4524 <system_clock_source_get_hz+0xb0>)
    44cc:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    44ce:	4b12      	ldr	r3, [pc, #72]	; (4518 <system_clock_source_get_hz+0xa4>)
    44d0:	681b      	ldr	r3, [r3, #0]
    44d2:	2204      	movs	r2, #4
    44d4:	4013      	ands	r3, r2
    44d6:	d009      	beq.n	44ec <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    44d8:	2000      	movs	r0, #0
    44da:	4b13      	ldr	r3, [pc, #76]	; (4528 <system_clock_source_get_hz+0xb4>)
    44dc:	4798      	blx	r3
    44de:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    44e0:	4b0d      	ldr	r3, [pc, #52]	; (4518 <system_clock_source_get_hz+0xa4>)
    44e2:	689b      	ldr	r3, [r3, #8]
    44e4:	041b      	lsls	r3, r3, #16
    44e6:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    44e8:	4353      	muls	r3, r2
    44ea:	e00f      	b.n	450c <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    44ec:	4b0f      	ldr	r3, [pc, #60]	; (452c <system_clock_source_get_hz+0xb8>)
    44ee:	e00d      	b.n	450c <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    44f0:	4a0a      	ldr	r2, [pc, #40]	; (451c <system_clock_source_get_hz+0xa8>)
    44f2:	2350      	movs	r3, #80	; 0x50
    44f4:	5cd3      	ldrb	r3, [r2, r3]
    44f6:	b2db      	uxtb	r3, r3
    44f8:	001a      	movs	r2, r3
    44fa:	2304      	movs	r3, #4
    44fc:	4013      	ands	r3, r2
    44fe:	d101      	bne.n	4504 <system_clock_source_get_hz+0x90>
			return 0;
    4500:	2300      	movs	r3, #0
    4502:	e003      	b.n	450c <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    4504:	4b04      	ldr	r3, [pc, #16]	; (4518 <system_clock_source_get_hz+0xa4>)
    4506:	68db      	ldr	r3, [r3, #12]
    4508:	e000      	b.n	450c <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    450a:	2300      	movs	r3, #0
	}
}
    450c:	0018      	movs	r0, r3
    450e:	46bd      	mov	sp, r7
    4510:	b002      	add	sp, #8
    4512:	bd80      	pop	{r7, pc}
    4514:	0000708c 	.word	0x0000708c
    4518:	20000570 	.word	0x20000570
    451c:	40000800 	.word	0x40000800
    4520:	007a1200 	.word	0x007a1200
    4524:	00004415 	.word	0x00004415
    4528:	00004ce9 	.word	0x00004ce9
    452c:	02dc6c00 	.word	0x02dc6c00

00004530 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4530:	b580      	push	{r7, lr}
    4532:	b084      	sub	sp, #16
    4534:	af00      	add	r7, sp, #0
    4536:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4538:	4b1a      	ldr	r3, [pc, #104]	; (45a4 <system_clock_source_osc8m_set_config+0x74>)
    453a:	6a1b      	ldr	r3, [r3, #32]
    453c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    453e:	687b      	ldr	r3, [r7, #4]
    4540:	781b      	ldrb	r3, [r3, #0]
    4542:	1c1a      	adds	r2, r3, #0
    4544:	2303      	movs	r3, #3
    4546:	4013      	ands	r3, r2
    4548:	b2da      	uxtb	r2, r3
    454a:	230d      	movs	r3, #13
    454c:	18fb      	adds	r3, r7, r3
    454e:	2103      	movs	r1, #3
    4550:	400a      	ands	r2, r1
    4552:	0010      	movs	r0, r2
    4554:	781a      	ldrb	r2, [r3, #0]
    4556:	2103      	movs	r1, #3
    4558:	438a      	bics	r2, r1
    455a:	1c11      	adds	r1, r2, #0
    455c:	1c02      	adds	r2, r0, #0
    455e:	430a      	orrs	r2, r1
    4560:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4562:	687b      	ldr	r3, [r7, #4]
    4564:	789a      	ldrb	r2, [r3, #2]
    4566:	230c      	movs	r3, #12
    4568:	18fb      	adds	r3, r7, r3
    456a:	01d0      	lsls	r0, r2, #7
    456c:	781a      	ldrb	r2, [r3, #0]
    456e:	217f      	movs	r1, #127	; 0x7f
    4570:	400a      	ands	r2, r1
    4572:	1c11      	adds	r1, r2, #0
    4574:	1c02      	adds	r2, r0, #0
    4576:	430a      	orrs	r2, r1
    4578:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    457a:	687b      	ldr	r3, [r7, #4]
    457c:	785a      	ldrb	r2, [r3, #1]
    457e:	230c      	movs	r3, #12
    4580:	18fb      	adds	r3, r7, r3
    4582:	2101      	movs	r1, #1
    4584:	400a      	ands	r2, r1
    4586:	0190      	lsls	r0, r2, #6
    4588:	781a      	ldrb	r2, [r3, #0]
    458a:	2140      	movs	r1, #64	; 0x40
    458c:	438a      	bics	r2, r1
    458e:	1c11      	adds	r1, r2, #0
    4590:	1c02      	adds	r2, r0, #0
    4592:	430a      	orrs	r2, r1
    4594:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    4596:	4b03      	ldr	r3, [pc, #12]	; (45a4 <system_clock_source_osc8m_set_config+0x74>)
    4598:	68fa      	ldr	r2, [r7, #12]
    459a:	621a      	str	r2, [r3, #32]
}
    459c:	46c0      	nop			; (mov r8, r8)
    459e:	46bd      	mov	sp, r7
    45a0:	b004      	add	sp, #16
    45a2:	bd80      	pop	{r7, pc}
    45a4:	40000800 	.word	0x40000800

000045a8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    45a8:	b580      	push	{r7, lr}
    45aa:	b082      	sub	sp, #8
    45ac:	af00      	add	r7, sp, #0
    45ae:	0002      	movs	r2, r0
    45b0:	1dfb      	adds	r3, r7, #7
    45b2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    45b4:	1dfb      	adds	r3, r7, #7
    45b6:	781b      	ldrb	r3, [r3, #0]
    45b8:	2b08      	cmp	r3, #8
    45ba:	d83b      	bhi.n	4634 <system_clock_source_enable+0x8c>
    45bc:	009a      	lsls	r2, r3, #2
    45be:	4b21      	ldr	r3, [pc, #132]	; (4644 <system_clock_source_enable+0x9c>)
    45c0:	18d3      	adds	r3, r2, r3
    45c2:	681b      	ldr	r3, [r3, #0]
    45c4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    45c6:	4b20      	ldr	r3, [pc, #128]	; (4648 <system_clock_source_enable+0xa0>)
    45c8:	4a1f      	ldr	r2, [pc, #124]	; (4648 <system_clock_source_enable+0xa0>)
    45ca:	6a12      	ldr	r2, [r2, #32]
    45cc:	2102      	movs	r1, #2
    45ce:	430a      	orrs	r2, r1
    45d0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    45d2:	2300      	movs	r3, #0
    45d4:	e031      	b.n	463a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    45d6:	4b1c      	ldr	r3, [pc, #112]	; (4648 <system_clock_source_enable+0xa0>)
    45d8:	4a1b      	ldr	r2, [pc, #108]	; (4648 <system_clock_source_enable+0xa0>)
    45da:	6992      	ldr	r2, [r2, #24]
    45dc:	2102      	movs	r1, #2
    45de:	430a      	orrs	r2, r1
    45e0:	619a      	str	r2, [r3, #24]
		break;
    45e2:	e029      	b.n	4638 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    45e4:	4a18      	ldr	r2, [pc, #96]	; (4648 <system_clock_source_enable+0xa0>)
    45e6:	4b18      	ldr	r3, [pc, #96]	; (4648 <system_clock_source_enable+0xa0>)
    45e8:	8a1b      	ldrh	r3, [r3, #16]
    45ea:	b29b      	uxth	r3, r3
    45ec:	2102      	movs	r1, #2
    45ee:	430b      	orrs	r3, r1
    45f0:	b29b      	uxth	r3, r3
    45f2:	8213      	strh	r3, [r2, #16]
		break;
    45f4:	e020      	b.n	4638 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    45f6:	4a14      	ldr	r2, [pc, #80]	; (4648 <system_clock_source_enable+0xa0>)
    45f8:	4b13      	ldr	r3, [pc, #76]	; (4648 <system_clock_source_enable+0xa0>)
    45fa:	8a9b      	ldrh	r3, [r3, #20]
    45fc:	b29b      	uxth	r3, r3
    45fe:	2102      	movs	r1, #2
    4600:	430b      	orrs	r3, r1
    4602:	b29b      	uxth	r3, r3
    4604:	8293      	strh	r3, [r2, #20]
		break;
    4606:	e017      	b.n	4638 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4608:	4b10      	ldr	r3, [pc, #64]	; (464c <system_clock_source_enable+0xa4>)
    460a:	681b      	ldr	r3, [r3, #0]
    460c:	2202      	movs	r2, #2
    460e:	431a      	orrs	r2, r3
    4610:	4b0e      	ldr	r3, [pc, #56]	; (464c <system_clock_source_enable+0xa4>)
    4612:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    4614:	4b0e      	ldr	r3, [pc, #56]	; (4650 <system_clock_source_enable+0xa8>)
    4616:	4798      	blx	r3
		break;
    4618:	e00e      	b.n	4638 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    461a:	4a0b      	ldr	r2, [pc, #44]	; (4648 <system_clock_source_enable+0xa0>)
    461c:	490a      	ldr	r1, [pc, #40]	; (4648 <system_clock_source_enable+0xa0>)
    461e:	2344      	movs	r3, #68	; 0x44
    4620:	5ccb      	ldrb	r3, [r1, r3]
    4622:	b2db      	uxtb	r3, r3
    4624:	2102      	movs	r1, #2
    4626:	430b      	orrs	r3, r1
    4628:	b2d9      	uxtb	r1, r3
    462a:	2344      	movs	r3, #68	; 0x44
    462c:	54d1      	strb	r1, [r2, r3]
		break;
    462e:	e003      	b.n	4638 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4630:	2300      	movs	r3, #0
    4632:	e002      	b.n	463a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4634:	2317      	movs	r3, #23
    4636:	e000      	b.n	463a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    4638:	2300      	movs	r3, #0
}
    463a:	0018      	movs	r0, r3
    463c:	46bd      	mov	sp, r7
    463e:	b002      	add	sp, #8
    4640:	bd80      	pop	{r7, pc}
    4642:	46c0      	nop			; (mov r8, r8)
    4644:	000070b0 	.word	0x000070b0
    4648:	40000800 	.word	0x40000800
    464c:	20000570 	.word	0x20000570
    4650:	00004431 	.word	0x00004431

00004654 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    4654:	b580      	push	{r7, lr}
    4656:	b082      	sub	sp, #8
    4658:	af00      	add	r7, sp, #0
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
#elif CONF_CLOCK_GCLK_5_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    465a:	003b      	movs	r3, r7
    465c:	2205      	movs	r2, #5
    465e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4660:	2300      	movs	r3, #0
    4662:	607b      	str	r3, [r7, #4]
    4664:	e009      	b.n	467a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4666:	687b      	ldr	r3, [r7, #4]
    4668:	b2db      	uxtb	r3, r3
    466a:	003a      	movs	r2, r7
    466c:	0011      	movs	r1, r2
    466e:	0018      	movs	r0, r3
    4670:	4b05      	ldr	r3, [pc, #20]	; (4688 <_switch_peripheral_gclk+0x34>)
    4672:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4674:	687b      	ldr	r3, [r7, #4]
    4676:	3301      	adds	r3, #1
    4678:	607b      	str	r3, [r7, #4]
    467a:	687b      	ldr	r3, [r7, #4]
    467c:	2b24      	cmp	r3, #36	; 0x24
    467e:	d9f2      	bls.n	4666 <_switch_peripheral_gclk+0x12>
	}
}
    4680:	46c0      	nop			; (mov r8, r8)
    4682:	46bd      	mov	sp, r7
    4684:	b002      	add	sp, #8
    4686:	bd80      	pop	{r7, pc}
    4688:	00004b7d 	.word	0x00004b7d

0000468c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    468c:	b580      	push	{r7, lr}
    468e:	b0a0      	sub	sp, #128	; 0x80
    4690:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4692:	4b63      	ldr	r3, [pc, #396]	; (4820 <system_clock_init+0x194>)
    4694:	22c2      	movs	r2, #194	; 0xc2
    4696:	00d2      	lsls	r2, r2, #3
    4698:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    469a:	2000      	movs	r0, #0
    469c:	4b61      	ldr	r3, [pc, #388]	; (4824 <system_clock_init+0x198>)
    469e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    46a0:	4b61      	ldr	r3, [pc, #388]	; (4828 <system_clock_init+0x19c>)
    46a2:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    46a4:	237c      	movs	r3, #124	; 0x7c
    46a6:	18fb      	adds	r3, r7, r3
    46a8:	0018      	movs	r0, r3
    46aa:	4b60      	ldr	r3, [pc, #384]	; (482c <system_clock_init+0x1a0>)
    46ac:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    46ae:	237c      	movs	r3, #124	; 0x7c
    46b0:	18fb      	adds	r3, r7, r3
    46b2:	2200      	movs	r2, #0
    46b4:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    46b6:	237c      	movs	r3, #124	; 0x7c
    46b8:	18fb      	adds	r3, r7, r3
    46ba:	2201      	movs	r2, #1
    46bc:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    46be:	237c      	movs	r3, #124	; 0x7c
    46c0:	18fb      	adds	r3, r7, r3
    46c2:	2200      	movs	r2, #0
    46c4:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    46c6:	237c      	movs	r3, #124	; 0x7c
    46c8:	18fb      	adds	r3, r7, r3
    46ca:	0018      	movs	r0, r3
    46cc:	4b58      	ldr	r3, [pc, #352]	; (4830 <system_clock_init+0x1a4>)
    46ce:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    46d0:	2006      	movs	r0, #6
    46d2:	4b58      	ldr	r3, [pc, #352]	; (4834 <system_clock_init+0x1a8>)
    46d4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    46d6:	4b58      	ldr	r3, [pc, #352]	; (4838 <system_clock_init+0x1ac>)
    46d8:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    46da:	2364      	movs	r3, #100	; 0x64
    46dc:	18fb      	adds	r3, r7, r3
    46de:	0018      	movs	r0, r3
    46e0:	4b56      	ldr	r3, [pc, #344]	; (483c <system_clock_init+0x1b0>)
    46e2:	4798      	blx	r3
    46e4:	2364      	movs	r3, #100	; 0x64
    46e6:	18fb      	adds	r3, r7, r3
    46e8:	2206      	movs	r2, #6
    46ea:	701a      	strb	r2, [r3, #0]
    46ec:	2364      	movs	r3, #100	; 0x64
    46ee:	18fb      	adds	r3, r7, r3
    46f0:	2201      	movs	r2, #1
    46f2:	605a      	str	r2, [r3, #4]
    46f4:	2364      	movs	r3, #100	; 0x64
    46f6:	18fb      	adds	r3, r7, r3
    46f8:	2201      	movs	r2, #1
    46fa:	721a      	strb	r2, [r3, #8]
    46fc:	2364      	movs	r3, #100	; 0x64
    46fe:	18fb      	adds	r3, r7, r3
    4700:	2200      	movs	r2, #0
    4702:	725a      	strb	r2, [r3, #9]
    4704:	2364      	movs	r3, #100	; 0x64
    4706:	18fb      	adds	r3, r7, r3
    4708:	0019      	movs	r1, r3
    470a:	2001      	movs	r0, #1
    470c:	4b4c      	ldr	r3, [pc, #304]	; (4840 <system_clock_init+0x1b4>)
    470e:	4798      	blx	r3
    4710:	2001      	movs	r0, #1
    4712:	4b4c      	ldr	r3, [pc, #304]	; (4844 <system_clock_init+0x1b8>)
    4714:	4798      	blx	r3
    4716:	2358      	movs	r3, #88	; 0x58
    4718:	18fb      	adds	r3, r7, r3
    471a:	0018      	movs	r0, r3
    471c:	4b47      	ldr	r3, [pc, #284]	; (483c <system_clock_init+0x1b0>)
    471e:	4798      	blx	r3
    4720:	2358      	movs	r3, #88	; 0x58
    4722:	18fb      	adds	r3, r7, r3
    4724:	2206      	movs	r2, #6
    4726:	701a      	strb	r2, [r3, #0]
    4728:	2358      	movs	r3, #88	; 0x58
    472a:	18fb      	adds	r3, r7, r3
    472c:	2201      	movs	r2, #1
    472e:	605a      	str	r2, [r3, #4]
    4730:	2358      	movs	r3, #88	; 0x58
    4732:	18fb      	adds	r3, r7, r3
    4734:	2201      	movs	r2, #1
    4736:	721a      	strb	r2, [r3, #8]
    4738:	2358      	movs	r3, #88	; 0x58
    473a:	18fb      	adds	r3, r7, r3
    473c:	2200      	movs	r2, #0
    473e:	725a      	strb	r2, [r3, #9]
    4740:	2358      	movs	r3, #88	; 0x58
    4742:	18fb      	adds	r3, r7, r3
    4744:	0019      	movs	r1, r3
    4746:	2002      	movs	r0, #2
    4748:	4b3d      	ldr	r3, [pc, #244]	; (4840 <system_clock_init+0x1b4>)
    474a:	4798      	blx	r3
    474c:	2002      	movs	r0, #2
    474e:	4b3d      	ldr	r3, [pc, #244]	; (4844 <system_clock_init+0x1b8>)
    4750:	4798      	blx	r3
    4752:	234c      	movs	r3, #76	; 0x4c
    4754:	18fb      	adds	r3, r7, r3
    4756:	0018      	movs	r0, r3
    4758:	4b38      	ldr	r3, [pc, #224]	; (483c <system_clock_init+0x1b0>)
    475a:	4798      	blx	r3
    475c:	234c      	movs	r3, #76	; 0x4c
    475e:	18fb      	adds	r3, r7, r3
    4760:	2206      	movs	r2, #6
    4762:	701a      	strb	r2, [r3, #0]
    4764:	234c      	movs	r3, #76	; 0x4c
    4766:	18fb      	adds	r3, r7, r3
    4768:	2201      	movs	r2, #1
    476a:	605a      	str	r2, [r3, #4]
    476c:	234c      	movs	r3, #76	; 0x4c
    476e:	18fb      	adds	r3, r7, r3
    4770:	2201      	movs	r2, #1
    4772:	721a      	strb	r2, [r3, #8]
    4774:	234c      	movs	r3, #76	; 0x4c
    4776:	18fb      	adds	r3, r7, r3
    4778:	2200      	movs	r2, #0
    477a:	725a      	strb	r2, [r3, #9]
    477c:	234c      	movs	r3, #76	; 0x4c
    477e:	18fb      	adds	r3, r7, r3
    4780:	0019      	movs	r1, r3
    4782:	2003      	movs	r0, #3
    4784:	4b2e      	ldr	r3, [pc, #184]	; (4840 <system_clock_init+0x1b4>)
    4786:	4798      	blx	r3
    4788:	2003      	movs	r0, #3
    478a:	4b2e      	ldr	r3, [pc, #184]	; (4844 <system_clock_init+0x1b8>)
    478c:	4798      	blx	r3
    478e:	2340      	movs	r3, #64	; 0x40
    4790:	18fb      	adds	r3, r7, r3
    4792:	0018      	movs	r0, r3
    4794:	4b29      	ldr	r3, [pc, #164]	; (483c <system_clock_init+0x1b0>)
    4796:	4798      	blx	r3
    4798:	2340      	movs	r3, #64	; 0x40
    479a:	18fb      	adds	r3, r7, r3
    479c:	2206      	movs	r2, #6
    479e:	701a      	strb	r2, [r3, #0]
    47a0:	2340      	movs	r3, #64	; 0x40
    47a2:	18fb      	adds	r3, r7, r3
    47a4:	2201      	movs	r2, #1
    47a6:	605a      	str	r2, [r3, #4]
    47a8:	2340      	movs	r3, #64	; 0x40
    47aa:	18fb      	adds	r3, r7, r3
    47ac:	2200      	movs	r2, #0
    47ae:	721a      	strb	r2, [r3, #8]
    47b0:	2340      	movs	r3, #64	; 0x40
    47b2:	18fb      	adds	r3, r7, r3
    47b4:	2200      	movs	r2, #0
    47b6:	725a      	strb	r2, [r3, #9]
    47b8:	2340      	movs	r3, #64	; 0x40
    47ba:	18fb      	adds	r3, r7, r3
    47bc:	0019      	movs	r1, r3
    47be:	2004      	movs	r0, #4
    47c0:	4b1f      	ldr	r3, [pc, #124]	; (4840 <system_clock_init+0x1b4>)
    47c2:	4798      	blx	r3
    47c4:	2004      	movs	r0, #4
    47c6:	4b1f      	ldr	r3, [pc, #124]	; (4844 <system_clock_init+0x1b8>)
    47c8:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    47ca:	2000      	movs	r0, #0
    47cc:	4b1e      	ldr	r3, [pc, #120]	; (4848 <system_clock_init+0x1bc>)
    47ce:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    47d0:	2100      	movs	r1, #0
    47d2:	2000      	movs	r0, #0
    47d4:	4b1d      	ldr	r3, [pc, #116]	; (484c <system_clock_init+0x1c0>)
    47d6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    47d8:	2100      	movs	r1, #0
    47da:	2001      	movs	r0, #1
    47dc:	4b1b      	ldr	r3, [pc, #108]	; (484c <system_clock_init+0x1c0>)
    47de:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    47e0:	2100      	movs	r1, #0
    47e2:	2002      	movs	r0, #2
    47e4:	4b19      	ldr	r3, [pc, #100]	; (484c <system_clock_init+0x1c0>)
    47e6:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    47e8:	1d3b      	adds	r3, r7, #4
    47ea:	0018      	movs	r0, r3
    47ec:	4b13      	ldr	r3, [pc, #76]	; (483c <system_clock_init+0x1b0>)
    47ee:	4798      	blx	r3
    47f0:	1d3b      	adds	r3, r7, #4
    47f2:	2206      	movs	r2, #6
    47f4:	701a      	strb	r2, [r3, #0]
    47f6:	1d3b      	adds	r3, r7, #4
    47f8:	2201      	movs	r2, #1
    47fa:	605a      	str	r2, [r3, #4]
    47fc:	1d3b      	adds	r3, r7, #4
    47fe:	2201      	movs	r2, #1
    4800:	721a      	strb	r2, [r3, #8]
    4802:	1d3b      	adds	r3, r7, #4
    4804:	2200      	movs	r2, #0
    4806:	725a      	strb	r2, [r3, #9]
    4808:	1d3b      	adds	r3, r7, #4
    480a:	0019      	movs	r1, r3
    480c:	2000      	movs	r0, #0
    480e:	4b0c      	ldr	r3, [pc, #48]	; (4840 <system_clock_init+0x1b4>)
    4810:	4798      	blx	r3
    4812:	2000      	movs	r0, #0
    4814:	4b0b      	ldr	r3, [pc, #44]	; (4844 <system_clock_init+0x1b8>)
    4816:	4798      	blx	r3
#endif
}
    4818:	46c0      	nop			; (mov r8, r8)
    481a:	46bd      	mov	sp, r7
    481c:	b020      	add	sp, #128	; 0x80
    481e:	bd80      	pop	{r7, pc}
    4820:	40000800 	.word	0x40000800
    4824:	000043e1 	.word	0x000043e1
    4828:	00004655 	.word	0x00004655
    482c:	0000434b 	.word	0x0000434b
    4830:	00004531 	.word	0x00004531
    4834:	000045a9 	.word	0x000045a9
    4838:	000048f5 	.word	0x000048f5
    483c:	0000431d 	.word	0x0000431d
    4840:	00004925 	.word	0x00004925
    4844:	00004a49 	.word	0x00004a49
    4848:	0000436d 	.word	0x0000436d
    484c:	0000438d 	.word	0x0000438d

00004850 <system_apb_clock_set_mask>:
{
    4850:	b580      	push	{r7, lr}
    4852:	b082      	sub	sp, #8
    4854:	af00      	add	r7, sp, #0
    4856:	0002      	movs	r2, r0
    4858:	6039      	str	r1, [r7, #0]
    485a:	1dfb      	adds	r3, r7, #7
    485c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    485e:	1dfb      	adds	r3, r7, #7
    4860:	781b      	ldrb	r3, [r3, #0]
    4862:	2b01      	cmp	r3, #1
    4864:	d00a      	beq.n	487c <system_apb_clock_set_mask+0x2c>
    4866:	2b02      	cmp	r3, #2
    4868:	d00f      	beq.n	488a <system_apb_clock_set_mask+0x3a>
    486a:	2b00      	cmp	r3, #0
    486c:	d114      	bne.n	4898 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    486e:	4b0e      	ldr	r3, [pc, #56]	; (48a8 <system_apb_clock_set_mask+0x58>)
    4870:	4a0d      	ldr	r2, [pc, #52]	; (48a8 <system_apb_clock_set_mask+0x58>)
    4872:	6991      	ldr	r1, [r2, #24]
    4874:	683a      	ldr	r2, [r7, #0]
    4876:	430a      	orrs	r2, r1
    4878:	619a      	str	r2, [r3, #24]
			break;
    487a:	e00f      	b.n	489c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    487c:	4b0a      	ldr	r3, [pc, #40]	; (48a8 <system_apb_clock_set_mask+0x58>)
    487e:	4a0a      	ldr	r2, [pc, #40]	; (48a8 <system_apb_clock_set_mask+0x58>)
    4880:	69d1      	ldr	r1, [r2, #28]
    4882:	683a      	ldr	r2, [r7, #0]
    4884:	430a      	orrs	r2, r1
    4886:	61da      	str	r2, [r3, #28]
			break;
    4888:	e008      	b.n	489c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    488a:	4b07      	ldr	r3, [pc, #28]	; (48a8 <system_apb_clock_set_mask+0x58>)
    488c:	4a06      	ldr	r2, [pc, #24]	; (48a8 <system_apb_clock_set_mask+0x58>)
    488e:	6a11      	ldr	r1, [r2, #32]
    4890:	683a      	ldr	r2, [r7, #0]
    4892:	430a      	orrs	r2, r1
    4894:	621a      	str	r2, [r3, #32]
			break;
    4896:	e001      	b.n	489c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4898:	2317      	movs	r3, #23
    489a:	e000      	b.n	489e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    489c:	2300      	movs	r3, #0
}
    489e:	0018      	movs	r0, r3
    48a0:	46bd      	mov	sp, r7
    48a2:	b002      	add	sp, #8
    48a4:	bd80      	pop	{r7, pc}
    48a6:	46c0      	nop			; (mov r8, r8)
    48a8:	40000400 	.word	0x40000400

000048ac <system_interrupt_enter_critical_section>:
{
    48ac:	b580      	push	{r7, lr}
    48ae:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    48b0:	4b02      	ldr	r3, [pc, #8]	; (48bc <system_interrupt_enter_critical_section+0x10>)
    48b2:	4798      	blx	r3
}
    48b4:	46c0      	nop			; (mov r8, r8)
    48b6:	46bd      	mov	sp, r7
    48b8:	bd80      	pop	{r7, pc}
    48ba:	46c0      	nop			; (mov r8, r8)
    48bc:	00004289 	.word	0x00004289

000048c0 <system_interrupt_leave_critical_section>:
{
    48c0:	b580      	push	{r7, lr}
    48c2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    48c4:	4b02      	ldr	r3, [pc, #8]	; (48d0 <system_interrupt_leave_critical_section+0x10>)
    48c6:	4798      	blx	r3
}
    48c8:	46c0      	nop			; (mov r8, r8)
    48ca:	46bd      	mov	sp, r7
    48cc:	bd80      	pop	{r7, pc}
    48ce:	46c0      	nop			; (mov r8, r8)
    48d0:	000042dd 	.word	0x000042dd

000048d4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    48d4:	b580      	push	{r7, lr}
    48d6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    48d8:	4b05      	ldr	r3, [pc, #20]	; (48f0 <system_gclk_is_syncing+0x1c>)
    48da:	785b      	ldrb	r3, [r3, #1]
    48dc:	b2db      	uxtb	r3, r3
    48de:	b25b      	sxtb	r3, r3
    48e0:	2b00      	cmp	r3, #0
    48e2:	da01      	bge.n	48e8 <system_gclk_is_syncing+0x14>
		return true;
    48e4:	2301      	movs	r3, #1
    48e6:	e000      	b.n	48ea <system_gclk_is_syncing+0x16>
	}

	return false;
    48e8:	2300      	movs	r3, #0
}
    48ea:	0018      	movs	r0, r3
    48ec:	46bd      	mov	sp, r7
    48ee:	bd80      	pop	{r7, pc}
    48f0:	40000c00 	.word	0x40000c00

000048f4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    48f4:	b580      	push	{r7, lr}
    48f6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    48f8:	2108      	movs	r1, #8
    48fa:	2000      	movs	r0, #0
    48fc:	4b07      	ldr	r3, [pc, #28]	; (491c <system_gclk_init+0x28>)
    48fe:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4900:	4b07      	ldr	r3, [pc, #28]	; (4920 <system_gclk_init+0x2c>)
    4902:	2201      	movs	r2, #1
    4904:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4906:	46c0      	nop			; (mov r8, r8)
    4908:	4b05      	ldr	r3, [pc, #20]	; (4920 <system_gclk_init+0x2c>)
    490a:	781b      	ldrb	r3, [r3, #0]
    490c:	b2db      	uxtb	r3, r3
    490e:	001a      	movs	r2, r3
    4910:	2301      	movs	r3, #1
    4912:	4013      	ands	r3, r2
    4914:	d1f8      	bne.n	4908 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    4916:	46c0      	nop			; (mov r8, r8)
    4918:	46bd      	mov	sp, r7
    491a:	bd80      	pop	{r7, pc}
    491c:	00004851 	.word	0x00004851
    4920:	40000c00 	.word	0x40000c00

00004924 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4924:	b580      	push	{r7, lr}
    4926:	b086      	sub	sp, #24
    4928:	af00      	add	r7, sp, #0
    492a:	0002      	movs	r2, r0
    492c:	6039      	str	r1, [r7, #0]
    492e:	1dfb      	adds	r3, r7, #7
    4930:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4932:	1dfb      	adds	r3, r7, #7
    4934:	781b      	ldrb	r3, [r3, #0]
    4936:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    4938:	1dfb      	adds	r3, r7, #7
    493a:	781b      	ldrb	r3, [r3, #0]
    493c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    493e:	683b      	ldr	r3, [r7, #0]
    4940:	781b      	ldrb	r3, [r3, #0]
    4942:	021b      	lsls	r3, r3, #8
    4944:	001a      	movs	r2, r3
    4946:	697b      	ldr	r3, [r7, #20]
    4948:	4313      	orrs	r3, r2
    494a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    494c:	683b      	ldr	r3, [r7, #0]
    494e:	785b      	ldrb	r3, [r3, #1]
    4950:	2b00      	cmp	r3, #0
    4952:	d004      	beq.n	495e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4954:	697b      	ldr	r3, [r7, #20]
    4956:	2280      	movs	r2, #128	; 0x80
    4958:	02d2      	lsls	r2, r2, #11
    495a:	4313      	orrs	r3, r2
    495c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    495e:	683b      	ldr	r3, [r7, #0]
    4960:	7a5b      	ldrb	r3, [r3, #9]
    4962:	2b00      	cmp	r3, #0
    4964:	d004      	beq.n	4970 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4966:	697b      	ldr	r3, [r7, #20]
    4968:	2280      	movs	r2, #128	; 0x80
    496a:	0312      	lsls	r2, r2, #12
    496c:	4313      	orrs	r3, r2
    496e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4970:	683b      	ldr	r3, [r7, #0]
    4972:	685b      	ldr	r3, [r3, #4]
    4974:	2b01      	cmp	r3, #1
    4976:	d92c      	bls.n	49d2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4978:	683b      	ldr	r3, [r7, #0]
    497a:	685a      	ldr	r2, [r3, #4]
    497c:	683b      	ldr	r3, [r7, #0]
    497e:	685b      	ldr	r3, [r3, #4]
    4980:	3b01      	subs	r3, #1
    4982:	4013      	ands	r3, r2
    4984:	d11a      	bne.n	49bc <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    4986:	2300      	movs	r3, #0
    4988:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    498a:	2302      	movs	r3, #2
    498c:	60bb      	str	r3, [r7, #8]
    498e:	e005      	b.n	499c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    4990:	68fb      	ldr	r3, [r7, #12]
    4992:	3301      	adds	r3, #1
    4994:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    4996:	68bb      	ldr	r3, [r7, #8]
    4998:	005b      	lsls	r3, r3, #1
    499a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    499c:	683b      	ldr	r3, [r7, #0]
    499e:	685a      	ldr	r2, [r3, #4]
    49a0:	68bb      	ldr	r3, [r7, #8]
    49a2:	429a      	cmp	r2, r3
    49a4:	d8f4      	bhi.n	4990 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    49a6:	68fb      	ldr	r3, [r7, #12]
    49a8:	021b      	lsls	r3, r3, #8
    49aa:	693a      	ldr	r2, [r7, #16]
    49ac:	4313      	orrs	r3, r2
    49ae:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    49b0:	697b      	ldr	r3, [r7, #20]
    49b2:	2280      	movs	r2, #128	; 0x80
    49b4:	0352      	lsls	r2, r2, #13
    49b6:	4313      	orrs	r3, r2
    49b8:	617b      	str	r3, [r7, #20]
    49ba:	e00a      	b.n	49d2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    49bc:	683b      	ldr	r3, [r7, #0]
    49be:	685b      	ldr	r3, [r3, #4]
    49c0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    49c2:	693a      	ldr	r2, [r7, #16]
    49c4:	4313      	orrs	r3, r2
    49c6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    49c8:	697b      	ldr	r3, [r7, #20]
    49ca:	2280      	movs	r2, #128	; 0x80
    49cc:	0292      	lsls	r2, r2, #10
    49ce:	4313      	orrs	r3, r2
    49d0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    49d2:	683b      	ldr	r3, [r7, #0]
    49d4:	7a1b      	ldrb	r3, [r3, #8]
    49d6:	2b00      	cmp	r3, #0
    49d8:	d004      	beq.n	49e4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    49da:	697b      	ldr	r3, [r7, #20]
    49dc:	2280      	movs	r2, #128	; 0x80
    49de:	0392      	lsls	r2, r2, #14
    49e0:	4313      	orrs	r3, r2
    49e2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    49e4:	46c0      	nop			; (mov r8, r8)
    49e6:	4b13      	ldr	r3, [pc, #76]	; (4a34 <system_gclk_gen_set_config+0x110>)
    49e8:	4798      	blx	r3
    49ea:	1e03      	subs	r3, r0, #0
    49ec:	d1fb      	bne.n	49e6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    49ee:	4b12      	ldr	r3, [pc, #72]	; (4a38 <system_gclk_gen_set_config+0x114>)
    49f0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    49f2:	4a12      	ldr	r2, [pc, #72]	; (4a3c <system_gclk_gen_set_config+0x118>)
    49f4:	1dfb      	adds	r3, r7, #7
    49f6:	781b      	ldrb	r3, [r3, #0]
    49f8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    49fa:	46c0      	nop			; (mov r8, r8)
    49fc:	4b0d      	ldr	r3, [pc, #52]	; (4a34 <system_gclk_gen_set_config+0x110>)
    49fe:	4798      	blx	r3
    4a00:	1e03      	subs	r3, r0, #0
    4a02:	d1fb      	bne.n	49fc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4a04:	4b0e      	ldr	r3, [pc, #56]	; (4a40 <system_gclk_gen_set_config+0x11c>)
    4a06:	693a      	ldr	r2, [r7, #16]
    4a08:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    4a0a:	46c0      	nop			; (mov r8, r8)
    4a0c:	4b09      	ldr	r3, [pc, #36]	; (4a34 <system_gclk_gen_set_config+0x110>)
    4a0e:	4798      	blx	r3
    4a10:	1e03      	subs	r3, r0, #0
    4a12:	d1fb      	bne.n	4a0c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4a14:	4b0a      	ldr	r3, [pc, #40]	; (4a40 <system_gclk_gen_set_config+0x11c>)
    4a16:	4a0a      	ldr	r2, [pc, #40]	; (4a40 <system_gclk_gen_set_config+0x11c>)
    4a18:	6851      	ldr	r1, [r2, #4]
    4a1a:	2280      	movs	r2, #128	; 0x80
    4a1c:	0252      	lsls	r2, r2, #9
    4a1e:	4011      	ands	r1, r2
    4a20:	697a      	ldr	r2, [r7, #20]
    4a22:	430a      	orrs	r2, r1
    4a24:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4a26:	4b07      	ldr	r3, [pc, #28]	; (4a44 <system_gclk_gen_set_config+0x120>)
    4a28:	4798      	blx	r3
}
    4a2a:	46c0      	nop			; (mov r8, r8)
    4a2c:	46bd      	mov	sp, r7
    4a2e:	b006      	add	sp, #24
    4a30:	bd80      	pop	{r7, pc}
    4a32:	46c0      	nop			; (mov r8, r8)
    4a34:	000048d5 	.word	0x000048d5
    4a38:	000048ad 	.word	0x000048ad
    4a3c:	40000c08 	.word	0x40000c08
    4a40:	40000c00 	.word	0x40000c00
    4a44:	000048c1 	.word	0x000048c1

00004a48 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4a48:	b580      	push	{r7, lr}
    4a4a:	b082      	sub	sp, #8
    4a4c:	af00      	add	r7, sp, #0
    4a4e:	0002      	movs	r2, r0
    4a50:	1dfb      	adds	r3, r7, #7
    4a52:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4a54:	46c0      	nop			; (mov r8, r8)
    4a56:	4b0e      	ldr	r3, [pc, #56]	; (4a90 <system_gclk_gen_enable+0x48>)
    4a58:	4798      	blx	r3
    4a5a:	1e03      	subs	r3, r0, #0
    4a5c:	d1fb      	bne.n	4a56 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4a5e:	4b0d      	ldr	r3, [pc, #52]	; (4a94 <system_gclk_gen_enable+0x4c>)
    4a60:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4a62:	4a0d      	ldr	r2, [pc, #52]	; (4a98 <system_gclk_gen_enable+0x50>)
    4a64:	1dfb      	adds	r3, r7, #7
    4a66:	781b      	ldrb	r3, [r3, #0]
    4a68:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4a6a:	46c0      	nop			; (mov r8, r8)
    4a6c:	4b08      	ldr	r3, [pc, #32]	; (4a90 <system_gclk_gen_enable+0x48>)
    4a6e:	4798      	blx	r3
    4a70:	1e03      	subs	r3, r0, #0
    4a72:	d1fb      	bne.n	4a6c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4a74:	4b09      	ldr	r3, [pc, #36]	; (4a9c <system_gclk_gen_enable+0x54>)
    4a76:	4a09      	ldr	r2, [pc, #36]	; (4a9c <system_gclk_gen_enable+0x54>)
    4a78:	6852      	ldr	r2, [r2, #4]
    4a7a:	2180      	movs	r1, #128	; 0x80
    4a7c:	0249      	lsls	r1, r1, #9
    4a7e:	430a      	orrs	r2, r1
    4a80:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4a82:	4b07      	ldr	r3, [pc, #28]	; (4aa0 <system_gclk_gen_enable+0x58>)
    4a84:	4798      	blx	r3
}
    4a86:	46c0      	nop			; (mov r8, r8)
    4a88:	46bd      	mov	sp, r7
    4a8a:	b002      	add	sp, #8
    4a8c:	bd80      	pop	{r7, pc}
    4a8e:	46c0      	nop			; (mov r8, r8)
    4a90:	000048d5 	.word	0x000048d5
    4a94:	000048ad 	.word	0x000048ad
    4a98:	40000c04 	.word	0x40000c04
    4a9c:	40000c00 	.word	0x40000c00
    4aa0:	000048c1 	.word	0x000048c1

00004aa4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4aa4:	b580      	push	{r7, lr}
    4aa6:	b086      	sub	sp, #24
    4aa8:	af00      	add	r7, sp, #0
    4aaa:	0002      	movs	r2, r0
    4aac:	1dfb      	adds	r3, r7, #7
    4aae:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4ab0:	46c0      	nop			; (mov r8, r8)
    4ab2:	4b2a      	ldr	r3, [pc, #168]	; (4b5c <system_gclk_gen_get_hz+0xb8>)
    4ab4:	4798      	blx	r3
    4ab6:	1e03      	subs	r3, r0, #0
    4ab8:	d1fb      	bne.n	4ab2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4aba:	4b29      	ldr	r3, [pc, #164]	; (4b60 <system_gclk_gen_get_hz+0xbc>)
    4abc:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4abe:	4a29      	ldr	r2, [pc, #164]	; (4b64 <system_gclk_gen_get_hz+0xc0>)
    4ac0:	1dfb      	adds	r3, r7, #7
    4ac2:	781b      	ldrb	r3, [r3, #0]
    4ac4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4ac6:	46c0      	nop			; (mov r8, r8)
    4ac8:	4b24      	ldr	r3, [pc, #144]	; (4b5c <system_gclk_gen_get_hz+0xb8>)
    4aca:	4798      	blx	r3
    4acc:	1e03      	subs	r3, r0, #0
    4ace:	d1fb      	bne.n	4ac8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4ad0:	4b25      	ldr	r3, [pc, #148]	; (4b68 <system_gclk_gen_get_hz+0xc4>)
    4ad2:	685b      	ldr	r3, [r3, #4]
    4ad4:	04db      	lsls	r3, r3, #19
    4ad6:	0edb      	lsrs	r3, r3, #27
    4ad8:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4ada:	0018      	movs	r0, r3
    4adc:	4b23      	ldr	r3, [pc, #140]	; (4b6c <system_gclk_gen_get_hz+0xc8>)
    4ade:	4798      	blx	r3
    4ae0:	0003      	movs	r3, r0
    4ae2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4ae4:	4a1f      	ldr	r2, [pc, #124]	; (4b64 <system_gclk_gen_get_hz+0xc0>)
    4ae6:	1dfb      	adds	r3, r7, #7
    4ae8:	781b      	ldrb	r3, [r3, #0]
    4aea:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4aec:	4b1e      	ldr	r3, [pc, #120]	; (4b68 <system_gclk_gen_get_hz+0xc4>)
    4aee:	685b      	ldr	r3, [r3, #4]
    4af0:	02db      	lsls	r3, r3, #11
    4af2:	0fdb      	lsrs	r3, r3, #31
    4af4:	b2da      	uxtb	r2, r3
    4af6:	2313      	movs	r3, #19
    4af8:	18fb      	adds	r3, r7, r3
    4afa:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4afc:	4a1c      	ldr	r2, [pc, #112]	; (4b70 <system_gclk_gen_get_hz+0xcc>)
    4afe:	1dfb      	adds	r3, r7, #7
    4b00:	781b      	ldrb	r3, [r3, #0]
    4b02:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4b04:	46c0      	nop			; (mov r8, r8)
    4b06:	4b15      	ldr	r3, [pc, #84]	; (4b5c <system_gclk_gen_get_hz+0xb8>)
    4b08:	4798      	blx	r3
    4b0a:	1e03      	subs	r3, r0, #0
    4b0c:	d1fb      	bne.n	4b06 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4b0e:	4b16      	ldr	r3, [pc, #88]	; (4b68 <system_gclk_gen_get_hz+0xc4>)
    4b10:	689b      	ldr	r3, [r3, #8]
    4b12:	021b      	lsls	r3, r3, #8
    4b14:	0c1b      	lsrs	r3, r3, #16
    4b16:	b29b      	uxth	r3, r3
    4b18:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    4b1a:	4b16      	ldr	r3, [pc, #88]	; (4b74 <system_gclk_gen_get_hz+0xd0>)
    4b1c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4b1e:	2313      	movs	r3, #19
    4b20:	18fb      	adds	r3, r7, r3
    4b22:	781b      	ldrb	r3, [r3, #0]
    4b24:	2b00      	cmp	r3, #0
    4b26:	d109      	bne.n	4b3c <system_gclk_gen_get_hz+0x98>
    4b28:	68fb      	ldr	r3, [r7, #12]
    4b2a:	2b01      	cmp	r3, #1
    4b2c:	d906      	bls.n	4b3c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    4b2e:	4b12      	ldr	r3, [pc, #72]	; (4b78 <system_gclk_gen_get_hz+0xd4>)
    4b30:	68f9      	ldr	r1, [r7, #12]
    4b32:	6978      	ldr	r0, [r7, #20]
    4b34:	4798      	blx	r3
    4b36:	0003      	movs	r3, r0
    4b38:	617b      	str	r3, [r7, #20]
    4b3a:	e00a      	b.n	4b52 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    4b3c:	2313      	movs	r3, #19
    4b3e:	18fb      	adds	r3, r7, r3
    4b40:	781b      	ldrb	r3, [r3, #0]
    4b42:	2b00      	cmp	r3, #0
    4b44:	d005      	beq.n	4b52 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    4b46:	68fb      	ldr	r3, [r7, #12]
    4b48:	3301      	adds	r3, #1
    4b4a:	697a      	ldr	r2, [r7, #20]
    4b4c:	40da      	lsrs	r2, r3
    4b4e:	0013      	movs	r3, r2
    4b50:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    4b52:	697b      	ldr	r3, [r7, #20]
}
    4b54:	0018      	movs	r0, r3
    4b56:	46bd      	mov	sp, r7
    4b58:	b006      	add	sp, #24
    4b5a:	bd80      	pop	{r7, pc}
    4b5c:	000048d5 	.word	0x000048d5
    4b60:	000048ad 	.word	0x000048ad
    4b64:	40000c04 	.word	0x40000c04
    4b68:	40000c00 	.word	0x40000c00
    4b6c:	00004475 	.word	0x00004475
    4b70:	40000c08 	.word	0x40000c08
    4b74:	000048c1 	.word	0x000048c1
    4b78:	000052f5 	.word	0x000052f5

00004b7c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4b7c:	b580      	push	{r7, lr}
    4b7e:	b084      	sub	sp, #16
    4b80:	af00      	add	r7, sp, #0
    4b82:	0002      	movs	r2, r0
    4b84:	6039      	str	r1, [r7, #0]
    4b86:	1dfb      	adds	r3, r7, #7
    4b88:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    4b8a:	1dfb      	adds	r3, r7, #7
    4b8c:	781b      	ldrb	r3, [r3, #0]
    4b8e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4b90:	683b      	ldr	r3, [r7, #0]
    4b92:	781b      	ldrb	r3, [r3, #0]
    4b94:	021b      	lsls	r3, r3, #8
    4b96:	001a      	movs	r2, r3
    4b98:	68fb      	ldr	r3, [r7, #12]
    4b9a:	4313      	orrs	r3, r2
    4b9c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4b9e:	1dfb      	adds	r3, r7, #7
    4ba0:	781b      	ldrb	r3, [r3, #0]
    4ba2:	0018      	movs	r0, r3
    4ba4:	4b04      	ldr	r3, [pc, #16]	; (4bb8 <system_gclk_chan_set_config+0x3c>)
    4ba6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4ba8:	4b04      	ldr	r3, [pc, #16]	; (4bbc <system_gclk_chan_set_config+0x40>)
    4baa:	68fa      	ldr	r2, [r7, #12]
    4bac:	b292      	uxth	r2, r2
    4bae:	805a      	strh	r2, [r3, #2]
}
    4bb0:	46c0      	nop			; (mov r8, r8)
    4bb2:	46bd      	mov	sp, r7
    4bb4:	b004      	add	sp, #16
    4bb6:	bd80      	pop	{r7, pc}
    4bb8:	00004c09 	.word	0x00004c09
    4bbc:	40000c00 	.word	0x40000c00

00004bc0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4bc0:	b580      	push	{r7, lr}
    4bc2:	b082      	sub	sp, #8
    4bc4:	af00      	add	r7, sp, #0
    4bc6:	0002      	movs	r2, r0
    4bc8:	1dfb      	adds	r3, r7, #7
    4bca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4bcc:	4b0a      	ldr	r3, [pc, #40]	; (4bf8 <system_gclk_chan_enable+0x38>)
    4bce:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4bd0:	4a0a      	ldr	r2, [pc, #40]	; (4bfc <system_gclk_chan_enable+0x3c>)
    4bd2:	1dfb      	adds	r3, r7, #7
    4bd4:	781b      	ldrb	r3, [r3, #0]
    4bd6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4bd8:	4909      	ldr	r1, [pc, #36]	; (4c00 <system_gclk_chan_enable+0x40>)
    4bda:	4b09      	ldr	r3, [pc, #36]	; (4c00 <system_gclk_chan_enable+0x40>)
    4bdc:	885b      	ldrh	r3, [r3, #2]
    4bde:	b29b      	uxth	r3, r3
    4be0:	2280      	movs	r2, #128	; 0x80
    4be2:	01d2      	lsls	r2, r2, #7
    4be4:	4313      	orrs	r3, r2
    4be6:	b29b      	uxth	r3, r3
    4be8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    4bea:	4b06      	ldr	r3, [pc, #24]	; (4c04 <system_gclk_chan_enable+0x44>)
    4bec:	4798      	blx	r3
}
    4bee:	46c0      	nop			; (mov r8, r8)
    4bf0:	46bd      	mov	sp, r7
    4bf2:	b002      	add	sp, #8
    4bf4:	bd80      	pop	{r7, pc}
    4bf6:	46c0      	nop			; (mov r8, r8)
    4bf8:	000048ad 	.word	0x000048ad
    4bfc:	40000c02 	.word	0x40000c02
    4c00:	40000c00 	.word	0x40000c00
    4c04:	000048c1 	.word	0x000048c1

00004c08 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4c08:	b580      	push	{r7, lr}
    4c0a:	b084      	sub	sp, #16
    4c0c:	af00      	add	r7, sp, #0
    4c0e:	0002      	movs	r2, r0
    4c10:	1dfb      	adds	r3, r7, #7
    4c12:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4c14:	4b1c      	ldr	r3, [pc, #112]	; (4c88 <system_gclk_chan_disable+0x80>)
    4c16:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4c18:	4a1c      	ldr	r2, [pc, #112]	; (4c8c <system_gclk_chan_disable+0x84>)
    4c1a:	1dfb      	adds	r3, r7, #7
    4c1c:	781b      	ldrb	r3, [r3, #0]
    4c1e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4c20:	4b1b      	ldr	r3, [pc, #108]	; (4c90 <system_gclk_chan_disable+0x88>)
    4c22:	885b      	ldrh	r3, [r3, #2]
    4c24:	051b      	lsls	r3, r3, #20
    4c26:	0f1b      	lsrs	r3, r3, #28
    4c28:	b2db      	uxtb	r3, r3
    4c2a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    4c2c:	4a18      	ldr	r2, [pc, #96]	; (4c90 <system_gclk_chan_disable+0x88>)
    4c2e:	8853      	ldrh	r3, [r2, #2]
    4c30:	4918      	ldr	r1, [pc, #96]	; (4c94 <system_gclk_chan_disable+0x8c>)
    4c32:	400b      	ands	r3, r1
    4c34:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4c36:	4a16      	ldr	r2, [pc, #88]	; (4c90 <system_gclk_chan_disable+0x88>)
    4c38:	4b15      	ldr	r3, [pc, #84]	; (4c90 <system_gclk_chan_disable+0x88>)
    4c3a:	885b      	ldrh	r3, [r3, #2]
    4c3c:	b29b      	uxth	r3, r3
    4c3e:	4916      	ldr	r1, [pc, #88]	; (4c98 <system_gclk_chan_disable+0x90>)
    4c40:	400b      	ands	r3, r1
    4c42:	b29b      	uxth	r3, r3
    4c44:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4c46:	46c0      	nop			; (mov r8, r8)
    4c48:	4b11      	ldr	r3, [pc, #68]	; (4c90 <system_gclk_chan_disable+0x88>)
    4c4a:	885b      	ldrh	r3, [r3, #2]
    4c4c:	b29b      	uxth	r3, r3
    4c4e:	001a      	movs	r2, r3
    4c50:	2380      	movs	r3, #128	; 0x80
    4c52:	01db      	lsls	r3, r3, #7
    4c54:	4013      	ands	r3, r2
    4c56:	d1f7      	bne.n	4c48 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4c58:	4a0d      	ldr	r2, [pc, #52]	; (4c90 <system_gclk_chan_disable+0x88>)
    4c5a:	68fb      	ldr	r3, [r7, #12]
    4c5c:	b2db      	uxtb	r3, r3
    4c5e:	1c19      	adds	r1, r3, #0
    4c60:	230f      	movs	r3, #15
    4c62:	400b      	ands	r3, r1
    4c64:	b2d9      	uxtb	r1, r3
    4c66:	8853      	ldrh	r3, [r2, #2]
    4c68:	1c08      	adds	r0, r1, #0
    4c6a:	210f      	movs	r1, #15
    4c6c:	4001      	ands	r1, r0
    4c6e:	0208      	lsls	r0, r1, #8
    4c70:	4908      	ldr	r1, [pc, #32]	; (4c94 <system_gclk_chan_disable+0x8c>)
    4c72:	400b      	ands	r3, r1
    4c74:	1c19      	adds	r1, r3, #0
    4c76:	1c03      	adds	r3, r0, #0
    4c78:	430b      	orrs	r3, r1
    4c7a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    4c7c:	4b07      	ldr	r3, [pc, #28]	; (4c9c <system_gclk_chan_disable+0x94>)
    4c7e:	4798      	blx	r3
}
    4c80:	46c0      	nop			; (mov r8, r8)
    4c82:	46bd      	mov	sp, r7
    4c84:	b004      	add	sp, #16
    4c86:	bd80      	pop	{r7, pc}
    4c88:	000048ad 	.word	0x000048ad
    4c8c:	40000c02 	.word	0x40000c02
    4c90:	40000c00 	.word	0x40000c00
    4c94:	fffff0ff 	.word	0xfffff0ff
    4c98:	ffffbfff 	.word	0xffffbfff
    4c9c:	000048c1 	.word	0x000048c1

00004ca0 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    4ca0:	b580      	push	{r7, lr}
    4ca2:	b082      	sub	sp, #8
    4ca4:	af00      	add	r7, sp, #0
    4ca6:	0002      	movs	r2, r0
    4ca8:	1dfb      	adds	r3, r7, #7
    4caa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4cac:	4b09      	ldr	r3, [pc, #36]	; (4cd4 <system_gclk_chan_lock+0x34>)
    4cae:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4cb0:	4a09      	ldr	r2, [pc, #36]	; (4cd8 <system_gclk_chan_lock+0x38>)
    4cb2:	1dfb      	adds	r3, r7, #7
    4cb4:	781b      	ldrb	r3, [r3, #0]
    4cb6:	7013      	strb	r3, [r2, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    4cb8:	4a08      	ldr	r2, [pc, #32]	; (4cdc <system_gclk_chan_lock+0x3c>)
    4cba:	4b08      	ldr	r3, [pc, #32]	; (4cdc <system_gclk_chan_lock+0x3c>)
    4cbc:	885b      	ldrh	r3, [r3, #2]
    4cbe:	b29b      	uxth	r3, r3
    4cc0:	4907      	ldr	r1, [pc, #28]	; (4ce0 <system_gclk_chan_lock+0x40>)
    4cc2:	430b      	orrs	r3, r1
    4cc4:	b29b      	uxth	r3, r3
    4cc6:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    4cc8:	4b06      	ldr	r3, [pc, #24]	; (4ce4 <system_gclk_chan_lock+0x44>)
    4cca:	4798      	blx	r3
}
    4ccc:	46c0      	nop			; (mov r8, r8)
    4cce:	46bd      	mov	sp, r7
    4cd0:	b002      	add	sp, #8
    4cd2:	bd80      	pop	{r7, pc}
    4cd4:	000048ad 	.word	0x000048ad
    4cd8:	40000c02 	.word	0x40000c02
    4cdc:	40000c00 	.word	0x40000c00
    4ce0:	ffffc000 	.word	0xffffc000
    4ce4:	000048c1 	.word	0x000048c1

00004ce8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4ce8:	b580      	push	{r7, lr}
    4cea:	b084      	sub	sp, #16
    4cec:	af00      	add	r7, sp, #0
    4cee:	0002      	movs	r2, r0
    4cf0:	1dfb      	adds	r3, r7, #7
    4cf2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4cf4:	4b0d      	ldr	r3, [pc, #52]	; (4d2c <system_gclk_chan_get_hz+0x44>)
    4cf6:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4cf8:	4a0d      	ldr	r2, [pc, #52]	; (4d30 <system_gclk_chan_get_hz+0x48>)
    4cfa:	1dfb      	adds	r3, r7, #7
    4cfc:	781b      	ldrb	r3, [r3, #0]
    4cfe:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4d00:	4b0c      	ldr	r3, [pc, #48]	; (4d34 <system_gclk_chan_get_hz+0x4c>)
    4d02:	885b      	ldrh	r3, [r3, #2]
    4d04:	051b      	lsls	r3, r3, #20
    4d06:	0f1b      	lsrs	r3, r3, #28
    4d08:	b2da      	uxtb	r2, r3
    4d0a:	230f      	movs	r3, #15
    4d0c:	18fb      	adds	r3, r7, r3
    4d0e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    4d10:	4b09      	ldr	r3, [pc, #36]	; (4d38 <system_gclk_chan_get_hz+0x50>)
    4d12:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4d14:	230f      	movs	r3, #15
    4d16:	18fb      	adds	r3, r7, r3
    4d18:	781b      	ldrb	r3, [r3, #0]
    4d1a:	0018      	movs	r0, r3
    4d1c:	4b07      	ldr	r3, [pc, #28]	; (4d3c <system_gclk_chan_get_hz+0x54>)
    4d1e:	4798      	blx	r3
    4d20:	0003      	movs	r3, r0
}
    4d22:	0018      	movs	r0, r3
    4d24:	46bd      	mov	sp, r7
    4d26:	b004      	add	sp, #16
    4d28:	bd80      	pop	{r7, pc}
    4d2a:	46c0      	nop			; (mov r8, r8)
    4d2c:	000048ad 	.word	0x000048ad
    4d30:	40000c02 	.word	0x40000c02
    4d34:	40000c00 	.word	0x40000c00
    4d38:	000048c1 	.word	0x000048c1
    4d3c:	00004aa5 	.word	0x00004aa5

00004d40 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    4d40:	b580      	push	{r7, lr}
    4d42:	af00      	add	r7, sp, #0
	return;
    4d44:	46c0      	nop			; (mov r8, r8)
}
    4d46:	46bd      	mov	sp, r7
    4d48:	bd80      	pop	{r7, pc}
	...

00004d4c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4d4c:	b580      	push	{r7, lr}
    4d4e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4d50:	4b06      	ldr	r3, [pc, #24]	; (4d6c <system_init+0x20>)
    4d52:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4d54:	4b06      	ldr	r3, [pc, #24]	; (4d70 <system_init+0x24>)
    4d56:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4d58:	4b06      	ldr	r3, [pc, #24]	; (4d74 <system_init+0x28>)
    4d5a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4d5c:	4b06      	ldr	r3, [pc, #24]	; (4d78 <system_init+0x2c>)
    4d5e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4d60:	4b06      	ldr	r3, [pc, #24]	; (4d7c <system_init+0x30>)
    4d62:	4798      	blx	r3
}
    4d64:	46c0      	nop			; (mov r8, r8)
    4d66:	46bd      	mov	sp, r7
    4d68:	bd80      	pop	{r7, pc}
    4d6a:	46c0      	nop			; (mov r8, r8)
    4d6c:	0000468d 	.word	0x0000468d
    4d70:	0000427d 	.word	0x0000427d
    4d74:	00004d41 	.word	0x00004d41
    4d78:	00000915 	.word	0x00000915
    4d7c:	00004d41 	.word	0x00004d41

00004d80 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4d80:	b580      	push	{r7, lr}
    4d82:	b082      	sub	sp, #8
    4d84:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    4d86:	4b2f      	ldr	r3, [pc, #188]	; (4e44 <Reset_Handler+0xc4>)
    4d88:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    4d8a:	4b2f      	ldr	r3, [pc, #188]	; (4e48 <Reset_Handler+0xc8>)
    4d8c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    4d8e:	687a      	ldr	r2, [r7, #4]
    4d90:	683b      	ldr	r3, [r7, #0]
    4d92:	429a      	cmp	r2, r3
    4d94:	d00c      	beq.n	4db0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    4d96:	e007      	b.n	4da8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    4d98:	683b      	ldr	r3, [r7, #0]
    4d9a:	1d1a      	adds	r2, r3, #4
    4d9c:	603a      	str	r2, [r7, #0]
    4d9e:	687a      	ldr	r2, [r7, #4]
    4da0:	1d11      	adds	r1, r2, #4
    4da2:	6079      	str	r1, [r7, #4]
    4da4:	6812      	ldr	r2, [r2, #0]
    4da6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    4da8:	683a      	ldr	r2, [r7, #0]
    4daa:	4b28      	ldr	r3, [pc, #160]	; (4e4c <Reset_Handler+0xcc>)
    4dac:	429a      	cmp	r2, r3
    4dae:	d3f3      	bcc.n	4d98 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4db0:	4b27      	ldr	r3, [pc, #156]	; (4e50 <Reset_Handler+0xd0>)
    4db2:	603b      	str	r3, [r7, #0]
    4db4:	e004      	b.n	4dc0 <Reset_Handler+0x40>
                *pDest++ = 0;
    4db6:	683b      	ldr	r3, [r7, #0]
    4db8:	1d1a      	adds	r2, r3, #4
    4dba:	603a      	str	r2, [r7, #0]
    4dbc:	2200      	movs	r2, #0
    4dbe:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    4dc0:	683a      	ldr	r2, [r7, #0]
    4dc2:	4b24      	ldr	r3, [pc, #144]	; (4e54 <Reset_Handler+0xd4>)
    4dc4:	429a      	cmp	r2, r3
    4dc6:	d3f6      	bcc.n	4db6 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    4dc8:	4b23      	ldr	r3, [pc, #140]	; (4e58 <Reset_Handler+0xd8>)
    4dca:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4dcc:	4b23      	ldr	r3, [pc, #140]	; (4e5c <Reset_Handler+0xdc>)
    4dce:	687a      	ldr	r2, [r7, #4]
    4dd0:	21ff      	movs	r1, #255	; 0xff
    4dd2:	438a      	bics	r2, r1
    4dd4:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4dd6:	4a22      	ldr	r2, [pc, #136]	; (4e60 <Reset_Handler+0xe0>)
    4dd8:	2390      	movs	r3, #144	; 0x90
    4dda:	005b      	lsls	r3, r3, #1
    4ddc:	2102      	movs	r1, #2
    4dde:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4de0:	4a20      	ldr	r2, [pc, #128]	; (4e64 <Reset_Handler+0xe4>)
    4de2:	78d3      	ldrb	r3, [r2, #3]
    4de4:	2103      	movs	r1, #3
    4de6:	438b      	bics	r3, r1
    4de8:	1c19      	adds	r1, r3, #0
    4dea:	2302      	movs	r3, #2
    4dec:	430b      	orrs	r3, r1
    4dee:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4df0:	4a1c      	ldr	r2, [pc, #112]	; (4e64 <Reset_Handler+0xe4>)
    4df2:	78d3      	ldrb	r3, [r2, #3]
    4df4:	210c      	movs	r1, #12
    4df6:	438b      	bics	r3, r1
    4df8:	1c19      	adds	r1, r3, #0
    4dfa:	2308      	movs	r3, #8
    4dfc:	430b      	orrs	r3, r1
    4dfe:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    4e00:	4a19      	ldr	r2, [pc, #100]	; (4e68 <Reset_Handler+0xe8>)
    4e02:	7b93      	ldrb	r3, [r2, #14]
    4e04:	2130      	movs	r1, #48	; 0x30
    4e06:	438b      	bics	r3, r1
    4e08:	1c19      	adds	r1, r3, #0
    4e0a:	2320      	movs	r3, #32
    4e0c:	430b      	orrs	r3, r1
    4e0e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4e10:	4a15      	ldr	r2, [pc, #84]	; (4e68 <Reset_Handler+0xe8>)
    4e12:	7b93      	ldrb	r3, [r2, #14]
    4e14:	210c      	movs	r1, #12
    4e16:	438b      	bics	r3, r1
    4e18:	1c19      	adds	r1, r3, #0
    4e1a:	2308      	movs	r3, #8
    4e1c:	430b      	orrs	r3, r1
    4e1e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4e20:	4a11      	ldr	r2, [pc, #68]	; (4e68 <Reset_Handler+0xe8>)
    4e22:	7b93      	ldrb	r3, [r2, #14]
    4e24:	2103      	movs	r1, #3
    4e26:	438b      	bics	r3, r1
    4e28:	1c19      	adds	r1, r3, #0
    4e2a:	2302      	movs	r3, #2
    4e2c:	430b      	orrs	r3, r1
    4e2e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    4e30:	4a0e      	ldr	r2, [pc, #56]	; (4e6c <Reset_Handler+0xec>)
    4e32:	6853      	ldr	r3, [r2, #4]
    4e34:	2180      	movs	r1, #128	; 0x80
    4e36:	430b      	orrs	r3, r1
    4e38:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    4e3a:	4b0d      	ldr	r3, [pc, #52]	; (4e70 <Reset_Handler+0xf0>)
    4e3c:	4798      	blx	r3

        /* Branch to main function */
        main();
    4e3e:	4b0d      	ldr	r3, [pc, #52]	; (4e74 <Reset_Handler+0xf4>)
    4e40:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    4e42:	e7fe      	b.n	4e42 <Reset_Handler+0xc2>
    4e44:	000072d4 	.word	0x000072d4
    4e48:	20000000 	.word	0x20000000
    4e4c:	2000053c 	.word	0x2000053c
    4e50:	2000053c 	.word	0x2000053c
    4e54:	20001768 	.word	0x20001768
    4e58:	00000000 	.word	0x00000000
    4e5c:	e000ed00 	.word	0xe000ed00
    4e60:	41007000 	.word	0x41007000
    4e64:	41005000 	.word	0x41005000
    4e68:	41004800 	.word	0x41004800
    4e6c:	41004000 	.word	0x41004000
    4e70:	00005849 	.word	0x00005849
    4e74:	00004f09 	.word	0x00004f09

00004e78 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4e78:	b580      	push	{r7, lr}
    4e7a:	b082      	sub	sp, #8
    4e7c:	af00      	add	r7, sp, #0
	int32_t phantomISR = 9999;
    4e7e:	4b04      	ldr	r3, [pc, #16]	; (4e90 <Dummy_Handler+0x18>)
    4e80:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4e82:	f3ef 8305 	mrs	r3, IPSR
    4e86:	603b      	str	r3, [r7, #0]
  return(result);
    4e88:	683b      	ldr	r3, [r7, #0]
        while (1) {
			phantomISR = __get_IPSR();
    4e8a:	607b      	str	r3, [r7, #4]
    4e8c:	e7f9      	b.n	4e82 <Dummy_Handler+0xa>
    4e8e:	46c0      	nop			; (mov r8, r8)
    4e90:	0000270f 	.word	0x0000270f

00004e94 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4e94:	b580      	push	{r7, lr}
    4e96:	b084      	sub	sp, #16
    4e98:	af00      	add	r7, sp, #0
    4e9a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4e9c:	4b0a      	ldr	r3, [pc, #40]	; (4ec8 <_sbrk+0x34>)
    4e9e:	681b      	ldr	r3, [r3, #0]
    4ea0:	2b00      	cmp	r3, #0
    4ea2:	d102      	bne.n	4eaa <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    4ea4:	4b08      	ldr	r3, [pc, #32]	; (4ec8 <_sbrk+0x34>)
    4ea6:	4a09      	ldr	r2, [pc, #36]	; (4ecc <_sbrk+0x38>)
    4ea8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    4eaa:	4b07      	ldr	r3, [pc, #28]	; (4ec8 <_sbrk+0x34>)
    4eac:	681b      	ldr	r3, [r3, #0]
    4eae:	60fb      	str	r3, [r7, #12]

	heap += incr;
    4eb0:	4b05      	ldr	r3, [pc, #20]	; (4ec8 <_sbrk+0x34>)
    4eb2:	681a      	ldr	r2, [r3, #0]
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	18d2      	adds	r2, r2, r3
    4eb8:	4b03      	ldr	r3, [pc, #12]	; (4ec8 <_sbrk+0x34>)
    4eba:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    4ebc:	68fb      	ldr	r3, [r7, #12]
}
    4ebe:	0018      	movs	r0, r3
    4ec0:	46bd      	mov	sp, r7
    4ec2:	b004      	add	sp, #16
    4ec4:	bd80      	pop	{r7, pc}
    4ec6:	46c0      	nop			; (mov r8, r8)
    4ec8:	20000588 	.word	0x20000588
    4ecc:	20003768 	.word	0x20003768

00004ed0 <system_interrupt_enable_global>:
{
    4ed0:	b580      	push	{r7, lr}
    4ed2:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    4ed4:	4b04      	ldr	r3, [pc, #16]	; (4ee8 <system_interrupt_enable_global+0x18>)
    4ed6:	2201      	movs	r2, #1
    4ed8:	701a      	strb	r2, [r3, #0]
    4eda:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4ede:	b662      	cpsie	i
}
    4ee0:	46c0      	nop			; (mov r8, r8)
    4ee2:	46bd      	mov	sp, r7
    4ee4:	bd80      	pop	{r7, pc}
    4ee6:	46c0      	nop			; (mov r8, r8)
    4ee8:	20000368 	.word	0x20000368

00004eec <system_interrupt_disable_global>:
{
    4eec:	b580      	push	{r7, lr}
    4eee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
    4ef0:	b672      	cpsid	i
    4ef2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4ef6:	4b03      	ldr	r3, [pc, #12]	; (4f04 <system_interrupt_disable_global+0x18>)
    4ef8:	2200      	movs	r2, #0
    4efa:	701a      	strb	r2, [r3, #0]
}
    4efc:	46c0      	nop			; (mov r8, r8)
    4efe:	46bd      	mov	sp, r7
    4f00:	bd80      	pop	{r7, pc}
    4f02:	46c0      	nop			; (mov r8, r8)
    4f04:	20000368 	.word	0x20000368

00004f08 <main>:
char buffer[32];



int main (void)
{
    4f08:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f0a:	b08f      	sub	sp, #60	; 0x3c
    4f0c:	af00      	add	r7, sp, #0
	
	system_init();
    4f0e:	4bd9      	ldr	r3, [pc, #868]	; (5274 <main+0x36c>)
    4f10:	4798      	blx	r3
	delay_init();
    4f12:	4bd9      	ldr	r3, [pc, #868]	; (5278 <main+0x370>)
    4f14:	4798      	blx	r3
	
	
	
	//sounds_init_pins();
	//sb_uart_init();
	delay_ms(1500);
    4f16:	2000      	movs	r0, #0
    4f18:	4bd8      	ldr	r3, [pc, #864]	; (527c <main+0x374>)
    4f1a:	4798      	blx	r3
    4f1c:	0003      	movs	r3, r0
    4f1e:	001d      	movs	r5, r3
    4f20:	2300      	movs	r3, #0
    4f22:	001e      	movs	r6, r3
    4f24:	4cd6      	ldr	r4, [pc, #856]	; (5280 <main+0x378>)
    4f26:	4ad7      	ldr	r2, [pc, #860]	; (5284 <main+0x37c>)
    4f28:	2300      	movs	r3, #0
    4f2a:	0028      	movs	r0, r5
    4f2c:	0031      	movs	r1, r6
    4f2e:	47a0      	blx	r4
    4f30:	0003      	movs	r3, r0
    4f32:	000c      	movs	r4, r1
    4f34:	0019      	movs	r1, r3
    4f36:	0022      	movs	r2, r4
    4f38:	4bd3      	ldr	r3, [pc, #844]	; (5288 <main+0x380>)
    4f3a:	2400      	movs	r4, #0
    4f3c:	18c9      	adds	r1, r1, r3
    4f3e:	4162      	adcs	r2, r4
    4f40:	0008      	movs	r0, r1
    4f42:	0011      	movs	r1, r2
    4f44:	4cd1      	ldr	r4, [pc, #836]	; (528c <main+0x384>)
    4f46:	4ad2      	ldr	r2, [pc, #840]	; (5290 <main+0x388>)
    4f48:	2300      	movs	r3, #0
    4f4a:	47a0      	blx	r4
    4f4c:	0003      	movs	r3, r0
    4f4e:	000c      	movs	r4, r1
    4f50:	0018      	movs	r0, r3
    4f52:	4bd0      	ldr	r3, [pc, #832]	; (5294 <main+0x38c>)
    4f54:	4798      	blx	r3
	//sounds_reset();

	obd_init();
    4f56:	4bd0      	ldr	r3, [pc, #832]	; (5298 <main+0x390>)
    4f58:	4798      	blx	r3
	party_thresholds[5] = 2000;
	party_thresholds[6] = 2375;
	 
	*/
	
	int sound_no = 0;
    4f5a:	2300      	movs	r3, #0
    4f5c:	633b      	str	r3, [r7, #48]	; 0x30
	
	while (1)
	{
		
		if (is_started())
    4f5e:	4bcf      	ldr	r3, [pc, #828]	; (529c <main+0x394>)
    4f60:	4798      	blx	r3
			delay_ms(1000);
			sb_play_track_by_number(4);*/
		}
		
		
		for (uint32_t i=0;i<sizeof(rx_buffer_array)-1;i++)
    4f62:	2300      	movs	r3, #0
    4f64:	637b      	str	r3, [r7, #52]	; 0x34
    4f66:	e025      	b.n	4fb4 <main+0xac>
		{
			if (rx_buffer_array[i] == '\n' & rx_buffer_array[i+1] == 0)//'\n')
    4f68:	4acd      	ldr	r2, [pc, #820]	; (52a0 <main+0x398>)
    4f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4f6c:	18d3      	adds	r3, r2, r3
    4f6e:	781b      	ldrb	r3, [r3, #0]
    4f70:	b2db      	uxtb	r3, r3
    4f72:	3b0a      	subs	r3, #10
    4f74:	425a      	negs	r2, r3
    4f76:	4153      	adcs	r3, r2
    4f78:	b2d9      	uxtb	r1, r3
    4f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4f7c:	1c5a      	adds	r2, r3, #1
    4f7e:	4bc8      	ldr	r3, [pc, #800]	; (52a0 <main+0x398>)
    4f80:	5c9b      	ldrb	r3, [r3, r2]
    4f82:	b2db      	uxtb	r3, r3
    4f84:	425a      	negs	r2, r3
    4f86:	4153      	adcs	r3, r2
    4f88:	b2db      	uxtb	r3, r3
    4f8a:	400b      	ands	r3, r1
    4f8c:	b2db      	uxtb	r3, r3
    4f8e:	2b00      	cmp	r3, #0
    4f90:	d006      	beq.n	4fa0 <main+0x98>
			{
				data_handler(rx_buffer_array);
    4f92:	4bc3      	ldr	r3, [pc, #780]	; (52a0 <main+0x398>)
    4f94:	0018      	movs	r0, r3
    4f96:	4bc3      	ldr	r3, [pc, #780]	; (52a4 <main+0x39c>)
    4f98:	4798      	blx	r3
				reset_buffers();
    4f9a:	4bc3      	ldr	r3, [pc, #780]	; (52a8 <main+0x3a0>)
    4f9c:	4798      	blx	r3
    4f9e:	e006      	b.n	4fae <main+0xa6>
			}
			else if (rx_buffer_array[i] == 0)
    4fa0:	4abf      	ldr	r2, [pc, #764]	; (52a0 <main+0x398>)
    4fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4fa4:	18d3      	adds	r3, r2, r3
    4fa6:	781b      	ldrb	r3, [r3, #0]
    4fa8:	b2db      	uxtb	r3, r3
    4faa:	2b00      	cmp	r3, #0
    4fac:	d007      	beq.n	4fbe <main+0xb6>
		for (uint32_t i=0;i<sizeof(rx_buffer_array)-1;i++)
    4fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4fb0:	3301      	adds	r3, #1
    4fb2:	637b      	str	r3, [r7, #52]	; 0x34
    4fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4fb6:	4bbd      	ldr	r3, [pc, #756]	; (52ac <main+0x3a4>)
    4fb8:	429a      	cmp	r2, r3
    4fba:	d9d5      	bls.n	4f68 <main+0x60>
    4fbc:	e000      	b.n	4fc0 <main+0xb8>
			{
				break;
    4fbe:	46c0      	nop			; (mov r8, r8)
			}
		}
		
		sb_event_handler(sb_rx_buffer_array);
    4fc0:	4bbb      	ldr	r3, [pc, #748]	; (52b0 <main+0x3a8>)
    4fc2:	0018      	movs	r0, r3
    4fc4:	4bbb      	ldr	r3, [pc, #748]	; (52b4 <main+0x3ac>)
    4fc6:	4798      	blx	r3
				delay_ms(250);
				sb_play_track_by_number(2);
			}
			//sb_uart_write(buffer);
		}*/
		if (should_update)
    4fc8:	4bbb      	ldr	r3, [pc, #748]	; (52b8 <main+0x3b0>)
    4fca:	781b      	ldrb	r3, [r3, #0]
    4fcc:	2b00      	cmp	r3, #0
    4fce:	d006      	beq.n	4fde <main+0xd6>
		{
			should_update = false;
    4fd0:	4ab9      	ldr	r2, [pc, #740]	; (52b8 <main+0x3b0>)
    4fd2:	2300      	movs	r3, #0
    4fd4:	7013      	strb	r3, [r2, #0]
			things_to_do();
    4fd6:	4bb9      	ldr	r3, [pc, #740]	; (52bc <main+0x3b4>)
    4fd8:	4798      	blx	r3
			update_all_ports();
    4fda:	4bb9      	ldr	r3, [pc, #740]	; (52c0 <main+0x3b8>)
    4fdc:	4798      	blx	r3
		}
		if (execute_order_66)
    4fde:	4bb9      	ldr	r3, [pc, #740]	; (52c4 <main+0x3bc>)
    4fe0:	781b      	ldrb	r3, [r3, #0]
    4fe2:	2b00      	cmp	r3, #0
    4fe4:	d00e      	beq.n	5004 <main+0xfc>
		{
			system_interrupt_disable_global();
    4fe6:	4bb8      	ldr	r3, [pc, #736]	; (52c8 <main+0x3c0>)
    4fe8:	4798      	blx	r3
			ble_uart_write("EXEC ORDER 66\n");
    4fea:	4bb8      	ldr	r3, [pc, #736]	; (52cc <main+0x3c4>)
    4fec:	0018      	movs	r0, r3
    4fee:	4bb8      	ldr	r3, [pc, #736]	; (52d0 <main+0x3c8>)
    4ff0:	4798      	blx	r3
			execute_order_66 = false;
    4ff2:	4ab4      	ldr	r2, [pc, #720]	; (52c4 <main+0x3bc>)
    4ff4:	2300      	movs	r3, #0
    4ff6:	7013      	strb	r3, [r2, #0]
			//init_all_ports();
			mcp23017_reset();
    4ff8:	4bb6      	ldr	r3, [pc, #728]	; (52d4 <main+0x3cc>)
    4ffa:	4798      	blx	r3
			a_okay();
    4ffc:	4bb6      	ldr	r3, [pc, #728]	; (52d8 <main+0x3d0>)
    4ffe:	4798      	blx	r3
			system_interrupt_enable_global();
    5000:	4bb6      	ldr	r3, [pc, #728]	; (52dc <main+0x3d4>)
    5002:	4798      	blx	r3
		}
		
		if (valve_open)
    5004:	4bb6      	ldr	r3, [pc, #728]	; (52e0 <main+0x3d8>)
    5006:	781b      	ldrb	r3, [r3, #0]
    5008:	b2db      	uxtb	r3, r3
    500a:	2b00      	cmp	r3, #0
    500c:	d100      	bne.n	5010 <main+0x108>
    500e:	e08f      	b.n	5130 <main+0x228>
		{
			system_interrupt_disable_global();
    5010:	4bad      	ldr	r3, [pc, #692]	; (52c8 <main+0x3c0>)
    5012:	4798      	blx	r3
			valve_open = false;
    5014:	4ab2      	ldr	r2, [pc, #712]	; (52e0 <main+0x3d8>)
    5016:	2300      	movs	r3, #0
    5018:	7013      	strb	r3, [r2, #0]
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,true);
    501a:	2301      	movs	r3, #1
    501c:	2200      	movs	r2, #0
    501e:	2105      	movs	r1, #5
    5020:	2000      	movs	r0, #0
    5022:	4cb0      	ldr	r4, [pc, #704]	; (52e4 <main+0x3dc>)
    5024:	47a0      	blx	r4
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    5026:	2300      	movs	r3, #0
    5028:	2201      	movs	r2, #1
    502a:	2105      	movs	r1, #5
    502c:	2000      	movs	r0, #0
    502e:	4cad      	ldr	r4, [pc, #692]	; (52e4 <main+0x3dc>)
    5030:	47a0      	blx	r4
			update_all_ports();
    5032:	4ba3      	ldr	r3, [pc, #652]	; (52c0 <main+0x3b8>)
    5034:	4798      	blx	r3
			delay_ms(300);
    5036:	2000      	movs	r0, #0
    5038:	4b90      	ldr	r3, [pc, #576]	; (527c <main+0x374>)
    503a:	4798      	blx	r3
    503c:	0003      	movs	r3, r0
    503e:	62bb      	str	r3, [r7, #40]	; 0x28
    5040:	2300      	movs	r3, #0
    5042:	62fb      	str	r3, [r7, #44]	; 0x2c
    5044:	4c8e      	ldr	r4, [pc, #568]	; (5280 <main+0x378>)
    5046:	2296      	movs	r2, #150	; 0x96
    5048:	0052      	lsls	r2, r2, #1
    504a:	2300      	movs	r3, #0
    504c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    504e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    5050:	47a0      	blx	r4
    5052:	0003      	movs	r3, r0
    5054:	000c      	movs	r4, r1
    5056:	0019      	movs	r1, r3
    5058:	0022      	movs	r2, r4
    505a:	4b8b      	ldr	r3, [pc, #556]	; (5288 <main+0x380>)
    505c:	2400      	movs	r4, #0
    505e:	18c9      	adds	r1, r1, r3
    5060:	4162      	adcs	r2, r4
    5062:	0008      	movs	r0, r1
    5064:	0011      	movs	r1, r2
    5066:	4c89      	ldr	r4, [pc, #548]	; (528c <main+0x384>)
    5068:	4a89      	ldr	r2, [pc, #548]	; (5290 <main+0x388>)
    506a:	2300      	movs	r3, #0
    506c:	47a0      	blx	r4
    506e:	0003      	movs	r3, r0
    5070:	000c      	movs	r4, r1
    5072:	0018      	movs	r0, r3
    5074:	4b87      	ldr	r3, [pc, #540]	; (5294 <main+0x38c>)
    5076:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    5078:	2300      	movs	r3, #0
    507a:	2200      	movs	r2, #0
    507c:	2105      	movs	r1, #5
    507e:	2000      	movs	r0, #0
    5080:	4c98      	ldr	r4, [pc, #608]	; (52e4 <main+0x3dc>)
    5082:	47a0      	blx	r4
			update_all_ports();
    5084:	4b8e      	ldr	r3, [pc, #568]	; (52c0 <main+0x3b8>)
    5086:	4798      	blx	r3
			delay_ms(4000);
    5088:	2000      	movs	r0, #0
    508a:	4b7c      	ldr	r3, [pc, #496]	; (527c <main+0x374>)
    508c:	4798      	blx	r3
    508e:	0003      	movs	r3, r0
    5090:	623b      	str	r3, [r7, #32]
    5092:	2300      	movs	r3, #0
    5094:	627b      	str	r3, [r7, #36]	; 0x24
    5096:	4c7a      	ldr	r4, [pc, #488]	; (5280 <main+0x378>)
    5098:	22fa      	movs	r2, #250	; 0xfa
    509a:	0112      	lsls	r2, r2, #4
    509c:	2300      	movs	r3, #0
    509e:	6a38      	ldr	r0, [r7, #32]
    50a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
    50a2:	47a0      	blx	r4
    50a4:	0003      	movs	r3, r0
    50a6:	000c      	movs	r4, r1
    50a8:	0019      	movs	r1, r3
    50aa:	0022      	movs	r2, r4
    50ac:	4b76      	ldr	r3, [pc, #472]	; (5288 <main+0x380>)
    50ae:	2400      	movs	r4, #0
    50b0:	18c9      	adds	r1, r1, r3
    50b2:	4162      	adcs	r2, r4
    50b4:	0008      	movs	r0, r1
    50b6:	0011      	movs	r1, r2
    50b8:	4c74      	ldr	r4, [pc, #464]	; (528c <main+0x384>)
    50ba:	4a75      	ldr	r2, [pc, #468]	; (5290 <main+0x388>)
    50bc:	2300      	movs	r3, #0
    50be:	47a0      	blx	r4
    50c0:	0003      	movs	r3, r0
    50c2:	000c      	movs	r4, r1
    50c4:	0018      	movs	r0, r3
    50c6:	4b73      	ldr	r3, [pc, #460]	; (5294 <main+0x38c>)
    50c8:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,true);
    50ca:	2301      	movs	r3, #1
    50cc:	2200      	movs	r2, #0
    50ce:	2105      	movs	r1, #5
    50d0:	2000      	movs	r0, #0
    50d2:	4c84      	ldr	r4, [pc, #528]	; (52e4 <main+0x3dc>)
    50d4:	47a0      	blx	r4
			update_all_ports();
    50d6:	4b7a      	ldr	r3, [pc, #488]	; (52c0 <main+0x3b8>)
    50d8:	4798      	blx	r3
			delay_ms(300);
    50da:	2000      	movs	r0, #0
    50dc:	4b67      	ldr	r3, [pc, #412]	; (527c <main+0x374>)
    50de:	4798      	blx	r3
    50e0:	0003      	movs	r3, r0
    50e2:	61bb      	str	r3, [r7, #24]
    50e4:	2300      	movs	r3, #0
    50e6:	61fb      	str	r3, [r7, #28]
    50e8:	4c65      	ldr	r4, [pc, #404]	; (5280 <main+0x378>)
    50ea:	2296      	movs	r2, #150	; 0x96
    50ec:	0052      	lsls	r2, r2, #1
    50ee:	2300      	movs	r3, #0
    50f0:	69b8      	ldr	r0, [r7, #24]
    50f2:	69f9      	ldr	r1, [r7, #28]
    50f4:	47a0      	blx	r4
    50f6:	0003      	movs	r3, r0
    50f8:	000c      	movs	r4, r1
    50fa:	0019      	movs	r1, r3
    50fc:	0022      	movs	r2, r4
    50fe:	4b62      	ldr	r3, [pc, #392]	; (5288 <main+0x380>)
    5100:	2400      	movs	r4, #0
    5102:	18c9      	adds	r1, r1, r3
    5104:	4162      	adcs	r2, r4
    5106:	0008      	movs	r0, r1
    5108:	0011      	movs	r1, r2
    510a:	4c60      	ldr	r4, [pc, #384]	; (528c <main+0x384>)
    510c:	4a60      	ldr	r2, [pc, #384]	; (5290 <main+0x388>)
    510e:	2300      	movs	r3, #0
    5110:	47a0      	blx	r4
    5112:	0003      	movs	r3, r0
    5114:	000c      	movs	r4, r1
    5116:	0018      	movs	r0, r3
    5118:	4b5e      	ldr	r3, [pc, #376]	; (5294 <main+0x38c>)
    511a:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    511c:	2300      	movs	r3, #0
    511e:	2200      	movs	r2, #0
    5120:	2105      	movs	r1, #5
    5122:	2000      	movs	r0, #0
    5124:	4c6f      	ldr	r4, [pc, #444]	; (52e4 <main+0x3dc>)
    5126:	47a0      	blx	r4
			update_all_ports();
    5128:	4b65      	ldr	r3, [pc, #404]	; (52c0 <main+0x3b8>)
    512a:	4798      	blx	r3
			system_interrupt_enable_global();
    512c:	4b6b      	ldr	r3, [pc, #428]	; (52dc <main+0x3d4>)
    512e:	4798      	blx	r3
		}
		if (valve_close)
    5130:	4b6d      	ldr	r3, [pc, #436]	; (52e8 <main+0x3e0>)
    5132:	781b      	ldrb	r3, [r3, #0]
    5134:	b2db      	uxtb	r3, r3
    5136:	2b00      	cmp	r3, #0
    5138:	d100      	bne.n	513c <main+0x234>
    513a:	e08f      	b.n	525c <main+0x354>
		{
			system_interrupt_disable_global();
    513c:	4b62      	ldr	r3, [pc, #392]	; (52c8 <main+0x3c0>)
    513e:	4798      	blx	r3
			valve_close = false;
    5140:	4a69      	ldr	r2, [pc, #420]	; (52e8 <main+0x3e0>)
    5142:	2300      	movs	r3, #0
    5144:	7013      	strb	r3, [r2, #0]
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    5146:	2300      	movs	r3, #0
    5148:	2200      	movs	r2, #0
    514a:	2105      	movs	r1, #5
    514c:	2000      	movs	r0, #0
    514e:	4c65      	ldr	r4, [pc, #404]	; (52e4 <main+0x3dc>)
    5150:	47a0      	blx	r4
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,true);
    5152:	2301      	movs	r3, #1
    5154:	2201      	movs	r2, #1
    5156:	2105      	movs	r1, #5
    5158:	2000      	movs	r0, #0
    515a:	4c62      	ldr	r4, [pc, #392]	; (52e4 <main+0x3dc>)
    515c:	47a0      	blx	r4
			update_all_ports();
    515e:	4b58      	ldr	r3, [pc, #352]	; (52c0 <main+0x3b8>)
    5160:	4798      	blx	r3
			delay_ms(300);
    5162:	2000      	movs	r0, #0
    5164:	4b45      	ldr	r3, [pc, #276]	; (527c <main+0x374>)
    5166:	4798      	blx	r3
    5168:	0003      	movs	r3, r0
    516a:	613b      	str	r3, [r7, #16]
    516c:	2300      	movs	r3, #0
    516e:	617b      	str	r3, [r7, #20]
    5170:	4c43      	ldr	r4, [pc, #268]	; (5280 <main+0x378>)
    5172:	2296      	movs	r2, #150	; 0x96
    5174:	0052      	lsls	r2, r2, #1
    5176:	2300      	movs	r3, #0
    5178:	6938      	ldr	r0, [r7, #16]
    517a:	6979      	ldr	r1, [r7, #20]
    517c:	47a0      	blx	r4
    517e:	0003      	movs	r3, r0
    5180:	000c      	movs	r4, r1
    5182:	0019      	movs	r1, r3
    5184:	0022      	movs	r2, r4
    5186:	4b40      	ldr	r3, [pc, #256]	; (5288 <main+0x380>)
    5188:	2400      	movs	r4, #0
    518a:	18c9      	adds	r1, r1, r3
    518c:	4162      	adcs	r2, r4
    518e:	0008      	movs	r0, r1
    5190:	0011      	movs	r1, r2
    5192:	4c3e      	ldr	r4, [pc, #248]	; (528c <main+0x384>)
    5194:	4a3e      	ldr	r2, [pc, #248]	; (5290 <main+0x388>)
    5196:	2300      	movs	r3, #0
    5198:	47a0      	blx	r4
    519a:	0003      	movs	r3, r0
    519c:	000c      	movs	r4, r1
    519e:	0018      	movs	r0, r3
    51a0:	4b3c      	ldr	r3, [pc, #240]	; (5294 <main+0x38c>)
    51a2:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    51a4:	2300      	movs	r3, #0
    51a6:	2201      	movs	r2, #1
    51a8:	2105      	movs	r1, #5
    51aa:	2000      	movs	r0, #0
    51ac:	4c4d      	ldr	r4, [pc, #308]	; (52e4 <main+0x3dc>)
    51ae:	47a0      	blx	r4
			update_all_ports();
    51b0:	4b43      	ldr	r3, [pc, #268]	; (52c0 <main+0x3b8>)
    51b2:	4798      	blx	r3
			delay_ms(4000);
    51b4:	2000      	movs	r0, #0
    51b6:	4b31      	ldr	r3, [pc, #196]	; (527c <main+0x374>)
    51b8:	4798      	blx	r3
    51ba:	0003      	movs	r3, r0
    51bc:	60bb      	str	r3, [r7, #8]
    51be:	2300      	movs	r3, #0
    51c0:	60fb      	str	r3, [r7, #12]
    51c2:	4c2f      	ldr	r4, [pc, #188]	; (5280 <main+0x378>)
    51c4:	22fa      	movs	r2, #250	; 0xfa
    51c6:	0112      	lsls	r2, r2, #4
    51c8:	2300      	movs	r3, #0
    51ca:	68b8      	ldr	r0, [r7, #8]
    51cc:	68f9      	ldr	r1, [r7, #12]
    51ce:	47a0      	blx	r4
    51d0:	0003      	movs	r3, r0
    51d2:	000c      	movs	r4, r1
    51d4:	0019      	movs	r1, r3
    51d6:	0022      	movs	r2, r4
    51d8:	4b2b      	ldr	r3, [pc, #172]	; (5288 <main+0x380>)
    51da:	2400      	movs	r4, #0
    51dc:	18c9      	adds	r1, r1, r3
    51de:	4162      	adcs	r2, r4
    51e0:	0008      	movs	r0, r1
    51e2:	0011      	movs	r1, r2
    51e4:	4c29      	ldr	r4, [pc, #164]	; (528c <main+0x384>)
    51e6:	4a2a      	ldr	r2, [pc, #168]	; (5290 <main+0x388>)
    51e8:	2300      	movs	r3, #0
    51ea:	47a0      	blx	r4
    51ec:	0003      	movs	r3, r0
    51ee:	000c      	movs	r4, r1
    51f0:	0018      	movs	r0, r3
    51f2:	4b28      	ldr	r3, [pc, #160]	; (5294 <main+0x38c>)
    51f4:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,true);
    51f6:	2301      	movs	r3, #1
    51f8:	2201      	movs	r2, #1
    51fa:	2105      	movs	r1, #5
    51fc:	2000      	movs	r0, #0
    51fe:	4c39      	ldr	r4, [pc, #228]	; (52e4 <main+0x3dc>)
    5200:	47a0      	blx	r4
			update_all_ports();
    5202:	4b2f      	ldr	r3, [pc, #188]	; (52c0 <main+0x3b8>)
    5204:	4798      	blx	r3
			delay_ms(300);
    5206:	2000      	movs	r0, #0
    5208:	4b1c      	ldr	r3, [pc, #112]	; (527c <main+0x374>)
    520a:	4798      	blx	r3
    520c:	0003      	movs	r3, r0
    520e:	603b      	str	r3, [r7, #0]
    5210:	2300      	movs	r3, #0
    5212:	607b      	str	r3, [r7, #4]
    5214:	4c1a      	ldr	r4, [pc, #104]	; (5280 <main+0x378>)
    5216:	2296      	movs	r2, #150	; 0x96
    5218:	0052      	lsls	r2, r2, #1
    521a:	2300      	movs	r3, #0
    521c:	6838      	ldr	r0, [r7, #0]
    521e:	6879      	ldr	r1, [r7, #4]
    5220:	47a0      	blx	r4
    5222:	0003      	movs	r3, r0
    5224:	000c      	movs	r4, r1
    5226:	0019      	movs	r1, r3
    5228:	0022      	movs	r2, r4
    522a:	4b17      	ldr	r3, [pc, #92]	; (5288 <main+0x380>)
    522c:	2400      	movs	r4, #0
    522e:	18c9      	adds	r1, r1, r3
    5230:	4162      	adcs	r2, r4
    5232:	0008      	movs	r0, r1
    5234:	0011      	movs	r1, r2
    5236:	4c15      	ldr	r4, [pc, #84]	; (528c <main+0x384>)
    5238:	4a15      	ldr	r2, [pc, #84]	; (5290 <main+0x388>)
    523a:	2300      	movs	r3, #0
    523c:	47a0      	blx	r4
    523e:	0003      	movs	r3, r0
    5240:	000c      	movs	r4, r1
    5242:	0018      	movs	r0, r3
    5244:	4b13      	ldr	r3, [pc, #76]	; (5294 <main+0x38c>)
    5246:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    5248:	2300      	movs	r3, #0
    524a:	2201      	movs	r2, #1
    524c:	2105      	movs	r1, #5
    524e:	2000      	movs	r0, #0
    5250:	4c24      	ldr	r4, [pc, #144]	; (52e4 <main+0x3dc>)
    5252:	47a0      	blx	r4
			update_all_ports();
    5254:	4b1a      	ldr	r3, [pc, #104]	; (52c0 <main+0x3b8>)
    5256:	4798      	blx	r3
			system_interrupt_enable_global();
    5258:	4b20      	ldr	r3, [pc, #128]	; (52dc <main+0x3d4>)
    525a:	4798      	blx	r3
		}
		
		if (should_check)
    525c:	4b23      	ldr	r3, [pc, #140]	; (52ec <main+0x3e4>)
    525e:	781b      	ldrb	r3, [r3, #0]
    5260:	2b00      	cmp	r3, #0
    5262:	d100      	bne.n	5266 <main+0x35e>
    5264:	e67b      	b.n	4f5e <main+0x56>
		{
			should_check = false;
    5266:	4a21      	ldr	r2, [pc, #132]	; (52ec <main+0x3e4>)
    5268:	2300      	movs	r3, #0
    526a:	7013      	strb	r3, [r2, #0]
			mcp23017_check_all();
    526c:	4b20      	ldr	r3, [pc, #128]	; (52f0 <main+0x3e8>)
    526e:	4798      	blx	r3
		if (is_started())
    5270:	e675      	b.n	4f5e <main+0x56>
    5272:	46c0      	nop			; (mov r8, r8)
    5274:	00004d4d 	.word	0x00004d4d
    5278:	000006e9 	.word	0x000006e9
    527c:	00004aa5 	.word	0x00004aa5
    5280:	00005621 	.word	0x00005621
    5284:	000005dc 	.word	0x000005dc
    5288:	00001b57 	.word	0x00001b57
    528c:	000055e1 	.word	0x000055e1
    5290:	00001b58 	.word	0x00001b58
    5294:	20000001 	.word	0x20000001
    5298:	00000115 	.word	0x00000115
    529c:	00004149 	.word	0x00004149
    52a0:	20000a24 	.word	0x20000a24
    52a4:	000013cd 	.word	0x000013cd
    52a8:	00001355 	.word	0x00001355
    52ac:	000003fe 	.word	0x000003fe
    52b0:	20000ed0 	.word	0x20000ed0
    52b4:	00003d85 	.word	0x00003d85
    52b8:	200012d0 	.word	0x200012d0
    52bc:	00003ad1 	.word	0x00003ad1
    52c0:	00002389 	.word	0x00002389
    52c4:	20000ecc 	.word	0x20000ecc
    52c8:	00004eed 	.word	0x00004eed
    52cc:	000070d4 	.word	0x000070d4
    52d0:	00001299 	.word	0x00001299
    52d4:	00003525 	.word	0x00003525
    52d8:	00002cfd 	.word	0x00002cfd
    52dc:	00004ed1 	.word	0x00004ed1
    52e0:	20000a0f 	.word	0x20000a0f
    52e4:	00002f35 	.word	0x00002f35
    52e8:	20000a0c 	.word	0x20000a0c
    52ec:	200012e0 	.word	0x200012e0
    52f0:	00002ff1 	.word	0x00002ff1

000052f4 <__udivsi3>:
    52f4:	2200      	movs	r2, #0
    52f6:	0843      	lsrs	r3, r0, #1
    52f8:	428b      	cmp	r3, r1
    52fa:	d374      	bcc.n	53e6 <__udivsi3+0xf2>
    52fc:	0903      	lsrs	r3, r0, #4
    52fe:	428b      	cmp	r3, r1
    5300:	d35f      	bcc.n	53c2 <__udivsi3+0xce>
    5302:	0a03      	lsrs	r3, r0, #8
    5304:	428b      	cmp	r3, r1
    5306:	d344      	bcc.n	5392 <__udivsi3+0x9e>
    5308:	0b03      	lsrs	r3, r0, #12
    530a:	428b      	cmp	r3, r1
    530c:	d328      	bcc.n	5360 <__udivsi3+0x6c>
    530e:	0c03      	lsrs	r3, r0, #16
    5310:	428b      	cmp	r3, r1
    5312:	d30d      	bcc.n	5330 <__udivsi3+0x3c>
    5314:	22ff      	movs	r2, #255	; 0xff
    5316:	0209      	lsls	r1, r1, #8
    5318:	ba12      	rev	r2, r2
    531a:	0c03      	lsrs	r3, r0, #16
    531c:	428b      	cmp	r3, r1
    531e:	d302      	bcc.n	5326 <__udivsi3+0x32>
    5320:	1212      	asrs	r2, r2, #8
    5322:	0209      	lsls	r1, r1, #8
    5324:	d065      	beq.n	53f2 <__udivsi3+0xfe>
    5326:	0b03      	lsrs	r3, r0, #12
    5328:	428b      	cmp	r3, r1
    532a:	d319      	bcc.n	5360 <__udivsi3+0x6c>
    532c:	e000      	b.n	5330 <__udivsi3+0x3c>
    532e:	0a09      	lsrs	r1, r1, #8
    5330:	0bc3      	lsrs	r3, r0, #15
    5332:	428b      	cmp	r3, r1
    5334:	d301      	bcc.n	533a <__udivsi3+0x46>
    5336:	03cb      	lsls	r3, r1, #15
    5338:	1ac0      	subs	r0, r0, r3
    533a:	4152      	adcs	r2, r2
    533c:	0b83      	lsrs	r3, r0, #14
    533e:	428b      	cmp	r3, r1
    5340:	d301      	bcc.n	5346 <__udivsi3+0x52>
    5342:	038b      	lsls	r3, r1, #14
    5344:	1ac0      	subs	r0, r0, r3
    5346:	4152      	adcs	r2, r2
    5348:	0b43      	lsrs	r3, r0, #13
    534a:	428b      	cmp	r3, r1
    534c:	d301      	bcc.n	5352 <__udivsi3+0x5e>
    534e:	034b      	lsls	r3, r1, #13
    5350:	1ac0      	subs	r0, r0, r3
    5352:	4152      	adcs	r2, r2
    5354:	0b03      	lsrs	r3, r0, #12
    5356:	428b      	cmp	r3, r1
    5358:	d301      	bcc.n	535e <__udivsi3+0x6a>
    535a:	030b      	lsls	r3, r1, #12
    535c:	1ac0      	subs	r0, r0, r3
    535e:	4152      	adcs	r2, r2
    5360:	0ac3      	lsrs	r3, r0, #11
    5362:	428b      	cmp	r3, r1
    5364:	d301      	bcc.n	536a <__udivsi3+0x76>
    5366:	02cb      	lsls	r3, r1, #11
    5368:	1ac0      	subs	r0, r0, r3
    536a:	4152      	adcs	r2, r2
    536c:	0a83      	lsrs	r3, r0, #10
    536e:	428b      	cmp	r3, r1
    5370:	d301      	bcc.n	5376 <__udivsi3+0x82>
    5372:	028b      	lsls	r3, r1, #10
    5374:	1ac0      	subs	r0, r0, r3
    5376:	4152      	adcs	r2, r2
    5378:	0a43      	lsrs	r3, r0, #9
    537a:	428b      	cmp	r3, r1
    537c:	d301      	bcc.n	5382 <__udivsi3+0x8e>
    537e:	024b      	lsls	r3, r1, #9
    5380:	1ac0      	subs	r0, r0, r3
    5382:	4152      	adcs	r2, r2
    5384:	0a03      	lsrs	r3, r0, #8
    5386:	428b      	cmp	r3, r1
    5388:	d301      	bcc.n	538e <__udivsi3+0x9a>
    538a:	020b      	lsls	r3, r1, #8
    538c:	1ac0      	subs	r0, r0, r3
    538e:	4152      	adcs	r2, r2
    5390:	d2cd      	bcs.n	532e <__udivsi3+0x3a>
    5392:	09c3      	lsrs	r3, r0, #7
    5394:	428b      	cmp	r3, r1
    5396:	d301      	bcc.n	539c <__udivsi3+0xa8>
    5398:	01cb      	lsls	r3, r1, #7
    539a:	1ac0      	subs	r0, r0, r3
    539c:	4152      	adcs	r2, r2
    539e:	0983      	lsrs	r3, r0, #6
    53a0:	428b      	cmp	r3, r1
    53a2:	d301      	bcc.n	53a8 <__udivsi3+0xb4>
    53a4:	018b      	lsls	r3, r1, #6
    53a6:	1ac0      	subs	r0, r0, r3
    53a8:	4152      	adcs	r2, r2
    53aa:	0943      	lsrs	r3, r0, #5
    53ac:	428b      	cmp	r3, r1
    53ae:	d301      	bcc.n	53b4 <__udivsi3+0xc0>
    53b0:	014b      	lsls	r3, r1, #5
    53b2:	1ac0      	subs	r0, r0, r3
    53b4:	4152      	adcs	r2, r2
    53b6:	0903      	lsrs	r3, r0, #4
    53b8:	428b      	cmp	r3, r1
    53ba:	d301      	bcc.n	53c0 <__udivsi3+0xcc>
    53bc:	010b      	lsls	r3, r1, #4
    53be:	1ac0      	subs	r0, r0, r3
    53c0:	4152      	adcs	r2, r2
    53c2:	08c3      	lsrs	r3, r0, #3
    53c4:	428b      	cmp	r3, r1
    53c6:	d301      	bcc.n	53cc <__udivsi3+0xd8>
    53c8:	00cb      	lsls	r3, r1, #3
    53ca:	1ac0      	subs	r0, r0, r3
    53cc:	4152      	adcs	r2, r2
    53ce:	0883      	lsrs	r3, r0, #2
    53d0:	428b      	cmp	r3, r1
    53d2:	d301      	bcc.n	53d8 <__udivsi3+0xe4>
    53d4:	008b      	lsls	r3, r1, #2
    53d6:	1ac0      	subs	r0, r0, r3
    53d8:	4152      	adcs	r2, r2
    53da:	0843      	lsrs	r3, r0, #1
    53dc:	428b      	cmp	r3, r1
    53de:	d301      	bcc.n	53e4 <__udivsi3+0xf0>
    53e0:	004b      	lsls	r3, r1, #1
    53e2:	1ac0      	subs	r0, r0, r3
    53e4:	4152      	adcs	r2, r2
    53e6:	1a41      	subs	r1, r0, r1
    53e8:	d200      	bcs.n	53ec <__udivsi3+0xf8>
    53ea:	4601      	mov	r1, r0
    53ec:	4152      	adcs	r2, r2
    53ee:	4610      	mov	r0, r2
    53f0:	4770      	bx	lr
    53f2:	e7ff      	b.n	53f4 <__udivsi3+0x100>
    53f4:	b501      	push	{r0, lr}
    53f6:	2000      	movs	r0, #0
    53f8:	f000 f8f0 	bl	55dc <__aeabi_idiv0>
    53fc:	bd02      	pop	{r1, pc}
    53fe:	46c0      	nop			; (mov r8, r8)

00005400 <__aeabi_uidivmod>:
    5400:	2900      	cmp	r1, #0
    5402:	d0f7      	beq.n	53f4 <__udivsi3+0x100>
    5404:	e776      	b.n	52f4 <__udivsi3>
    5406:	4770      	bx	lr

00005408 <__divsi3>:
    5408:	4603      	mov	r3, r0
    540a:	430b      	orrs	r3, r1
    540c:	d47f      	bmi.n	550e <__divsi3+0x106>
    540e:	2200      	movs	r2, #0
    5410:	0843      	lsrs	r3, r0, #1
    5412:	428b      	cmp	r3, r1
    5414:	d374      	bcc.n	5500 <__divsi3+0xf8>
    5416:	0903      	lsrs	r3, r0, #4
    5418:	428b      	cmp	r3, r1
    541a:	d35f      	bcc.n	54dc <__divsi3+0xd4>
    541c:	0a03      	lsrs	r3, r0, #8
    541e:	428b      	cmp	r3, r1
    5420:	d344      	bcc.n	54ac <__divsi3+0xa4>
    5422:	0b03      	lsrs	r3, r0, #12
    5424:	428b      	cmp	r3, r1
    5426:	d328      	bcc.n	547a <__divsi3+0x72>
    5428:	0c03      	lsrs	r3, r0, #16
    542a:	428b      	cmp	r3, r1
    542c:	d30d      	bcc.n	544a <__divsi3+0x42>
    542e:	22ff      	movs	r2, #255	; 0xff
    5430:	0209      	lsls	r1, r1, #8
    5432:	ba12      	rev	r2, r2
    5434:	0c03      	lsrs	r3, r0, #16
    5436:	428b      	cmp	r3, r1
    5438:	d302      	bcc.n	5440 <__divsi3+0x38>
    543a:	1212      	asrs	r2, r2, #8
    543c:	0209      	lsls	r1, r1, #8
    543e:	d065      	beq.n	550c <__divsi3+0x104>
    5440:	0b03      	lsrs	r3, r0, #12
    5442:	428b      	cmp	r3, r1
    5444:	d319      	bcc.n	547a <__divsi3+0x72>
    5446:	e000      	b.n	544a <__divsi3+0x42>
    5448:	0a09      	lsrs	r1, r1, #8
    544a:	0bc3      	lsrs	r3, r0, #15
    544c:	428b      	cmp	r3, r1
    544e:	d301      	bcc.n	5454 <__divsi3+0x4c>
    5450:	03cb      	lsls	r3, r1, #15
    5452:	1ac0      	subs	r0, r0, r3
    5454:	4152      	adcs	r2, r2
    5456:	0b83      	lsrs	r3, r0, #14
    5458:	428b      	cmp	r3, r1
    545a:	d301      	bcc.n	5460 <__divsi3+0x58>
    545c:	038b      	lsls	r3, r1, #14
    545e:	1ac0      	subs	r0, r0, r3
    5460:	4152      	adcs	r2, r2
    5462:	0b43      	lsrs	r3, r0, #13
    5464:	428b      	cmp	r3, r1
    5466:	d301      	bcc.n	546c <__divsi3+0x64>
    5468:	034b      	lsls	r3, r1, #13
    546a:	1ac0      	subs	r0, r0, r3
    546c:	4152      	adcs	r2, r2
    546e:	0b03      	lsrs	r3, r0, #12
    5470:	428b      	cmp	r3, r1
    5472:	d301      	bcc.n	5478 <__divsi3+0x70>
    5474:	030b      	lsls	r3, r1, #12
    5476:	1ac0      	subs	r0, r0, r3
    5478:	4152      	adcs	r2, r2
    547a:	0ac3      	lsrs	r3, r0, #11
    547c:	428b      	cmp	r3, r1
    547e:	d301      	bcc.n	5484 <__divsi3+0x7c>
    5480:	02cb      	lsls	r3, r1, #11
    5482:	1ac0      	subs	r0, r0, r3
    5484:	4152      	adcs	r2, r2
    5486:	0a83      	lsrs	r3, r0, #10
    5488:	428b      	cmp	r3, r1
    548a:	d301      	bcc.n	5490 <__divsi3+0x88>
    548c:	028b      	lsls	r3, r1, #10
    548e:	1ac0      	subs	r0, r0, r3
    5490:	4152      	adcs	r2, r2
    5492:	0a43      	lsrs	r3, r0, #9
    5494:	428b      	cmp	r3, r1
    5496:	d301      	bcc.n	549c <__divsi3+0x94>
    5498:	024b      	lsls	r3, r1, #9
    549a:	1ac0      	subs	r0, r0, r3
    549c:	4152      	adcs	r2, r2
    549e:	0a03      	lsrs	r3, r0, #8
    54a0:	428b      	cmp	r3, r1
    54a2:	d301      	bcc.n	54a8 <__divsi3+0xa0>
    54a4:	020b      	lsls	r3, r1, #8
    54a6:	1ac0      	subs	r0, r0, r3
    54a8:	4152      	adcs	r2, r2
    54aa:	d2cd      	bcs.n	5448 <__divsi3+0x40>
    54ac:	09c3      	lsrs	r3, r0, #7
    54ae:	428b      	cmp	r3, r1
    54b0:	d301      	bcc.n	54b6 <__divsi3+0xae>
    54b2:	01cb      	lsls	r3, r1, #7
    54b4:	1ac0      	subs	r0, r0, r3
    54b6:	4152      	adcs	r2, r2
    54b8:	0983      	lsrs	r3, r0, #6
    54ba:	428b      	cmp	r3, r1
    54bc:	d301      	bcc.n	54c2 <__divsi3+0xba>
    54be:	018b      	lsls	r3, r1, #6
    54c0:	1ac0      	subs	r0, r0, r3
    54c2:	4152      	adcs	r2, r2
    54c4:	0943      	lsrs	r3, r0, #5
    54c6:	428b      	cmp	r3, r1
    54c8:	d301      	bcc.n	54ce <__divsi3+0xc6>
    54ca:	014b      	lsls	r3, r1, #5
    54cc:	1ac0      	subs	r0, r0, r3
    54ce:	4152      	adcs	r2, r2
    54d0:	0903      	lsrs	r3, r0, #4
    54d2:	428b      	cmp	r3, r1
    54d4:	d301      	bcc.n	54da <__divsi3+0xd2>
    54d6:	010b      	lsls	r3, r1, #4
    54d8:	1ac0      	subs	r0, r0, r3
    54da:	4152      	adcs	r2, r2
    54dc:	08c3      	lsrs	r3, r0, #3
    54de:	428b      	cmp	r3, r1
    54e0:	d301      	bcc.n	54e6 <__divsi3+0xde>
    54e2:	00cb      	lsls	r3, r1, #3
    54e4:	1ac0      	subs	r0, r0, r3
    54e6:	4152      	adcs	r2, r2
    54e8:	0883      	lsrs	r3, r0, #2
    54ea:	428b      	cmp	r3, r1
    54ec:	d301      	bcc.n	54f2 <__divsi3+0xea>
    54ee:	008b      	lsls	r3, r1, #2
    54f0:	1ac0      	subs	r0, r0, r3
    54f2:	4152      	adcs	r2, r2
    54f4:	0843      	lsrs	r3, r0, #1
    54f6:	428b      	cmp	r3, r1
    54f8:	d301      	bcc.n	54fe <__divsi3+0xf6>
    54fa:	004b      	lsls	r3, r1, #1
    54fc:	1ac0      	subs	r0, r0, r3
    54fe:	4152      	adcs	r2, r2
    5500:	1a41      	subs	r1, r0, r1
    5502:	d200      	bcs.n	5506 <__divsi3+0xfe>
    5504:	4601      	mov	r1, r0
    5506:	4152      	adcs	r2, r2
    5508:	4610      	mov	r0, r2
    550a:	4770      	bx	lr
    550c:	e05d      	b.n	55ca <__divsi3+0x1c2>
    550e:	0fca      	lsrs	r2, r1, #31
    5510:	d000      	beq.n	5514 <__divsi3+0x10c>
    5512:	4249      	negs	r1, r1
    5514:	1003      	asrs	r3, r0, #32
    5516:	d300      	bcc.n	551a <__divsi3+0x112>
    5518:	4240      	negs	r0, r0
    551a:	4053      	eors	r3, r2
    551c:	2200      	movs	r2, #0
    551e:	469c      	mov	ip, r3
    5520:	0903      	lsrs	r3, r0, #4
    5522:	428b      	cmp	r3, r1
    5524:	d32d      	bcc.n	5582 <__divsi3+0x17a>
    5526:	0a03      	lsrs	r3, r0, #8
    5528:	428b      	cmp	r3, r1
    552a:	d312      	bcc.n	5552 <__divsi3+0x14a>
    552c:	22fc      	movs	r2, #252	; 0xfc
    552e:	0189      	lsls	r1, r1, #6
    5530:	ba12      	rev	r2, r2
    5532:	0a03      	lsrs	r3, r0, #8
    5534:	428b      	cmp	r3, r1
    5536:	d30c      	bcc.n	5552 <__divsi3+0x14a>
    5538:	0189      	lsls	r1, r1, #6
    553a:	1192      	asrs	r2, r2, #6
    553c:	428b      	cmp	r3, r1
    553e:	d308      	bcc.n	5552 <__divsi3+0x14a>
    5540:	0189      	lsls	r1, r1, #6
    5542:	1192      	asrs	r2, r2, #6
    5544:	428b      	cmp	r3, r1
    5546:	d304      	bcc.n	5552 <__divsi3+0x14a>
    5548:	0189      	lsls	r1, r1, #6
    554a:	d03a      	beq.n	55c2 <__divsi3+0x1ba>
    554c:	1192      	asrs	r2, r2, #6
    554e:	e000      	b.n	5552 <__divsi3+0x14a>
    5550:	0989      	lsrs	r1, r1, #6
    5552:	09c3      	lsrs	r3, r0, #7
    5554:	428b      	cmp	r3, r1
    5556:	d301      	bcc.n	555c <__divsi3+0x154>
    5558:	01cb      	lsls	r3, r1, #7
    555a:	1ac0      	subs	r0, r0, r3
    555c:	4152      	adcs	r2, r2
    555e:	0983      	lsrs	r3, r0, #6
    5560:	428b      	cmp	r3, r1
    5562:	d301      	bcc.n	5568 <__divsi3+0x160>
    5564:	018b      	lsls	r3, r1, #6
    5566:	1ac0      	subs	r0, r0, r3
    5568:	4152      	adcs	r2, r2
    556a:	0943      	lsrs	r3, r0, #5
    556c:	428b      	cmp	r3, r1
    556e:	d301      	bcc.n	5574 <__divsi3+0x16c>
    5570:	014b      	lsls	r3, r1, #5
    5572:	1ac0      	subs	r0, r0, r3
    5574:	4152      	adcs	r2, r2
    5576:	0903      	lsrs	r3, r0, #4
    5578:	428b      	cmp	r3, r1
    557a:	d301      	bcc.n	5580 <__divsi3+0x178>
    557c:	010b      	lsls	r3, r1, #4
    557e:	1ac0      	subs	r0, r0, r3
    5580:	4152      	adcs	r2, r2
    5582:	08c3      	lsrs	r3, r0, #3
    5584:	428b      	cmp	r3, r1
    5586:	d301      	bcc.n	558c <__divsi3+0x184>
    5588:	00cb      	lsls	r3, r1, #3
    558a:	1ac0      	subs	r0, r0, r3
    558c:	4152      	adcs	r2, r2
    558e:	0883      	lsrs	r3, r0, #2
    5590:	428b      	cmp	r3, r1
    5592:	d301      	bcc.n	5598 <__divsi3+0x190>
    5594:	008b      	lsls	r3, r1, #2
    5596:	1ac0      	subs	r0, r0, r3
    5598:	4152      	adcs	r2, r2
    559a:	d2d9      	bcs.n	5550 <__divsi3+0x148>
    559c:	0843      	lsrs	r3, r0, #1
    559e:	428b      	cmp	r3, r1
    55a0:	d301      	bcc.n	55a6 <__divsi3+0x19e>
    55a2:	004b      	lsls	r3, r1, #1
    55a4:	1ac0      	subs	r0, r0, r3
    55a6:	4152      	adcs	r2, r2
    55a8:	1a41      	subs	r1, r0, r1
    55aa:	d200      	bcs.n	55ae <__divsi3+0x1a6>
    55ac:	4601      	mov	r1, r0
    55ae:	4663      	mov	r3, ip
    55b0:	4152      	adcs	r2, r2
    55b2:	105b      	asrs	r3, r3, #1
    55b4:	4610      	mov	r0, r2
    55b6:	d301      	bcc.n	55bc <__divsi3+0x1b4>
    55b8:	4240      	negs	r0, r0
    55ba:	2b00      	cmp	r3, #0
    55bc:	d500      	bpl.n	55c0 <__divsi3+0x1b8>
    55be:	4249      	negs	r1, r1
    55c0:	4770      	bx	lr
    55c2:	4663      	mov	r3, ip
    55c4:	105b      	asrs	r3, r3, #1
    55c6:	d300      	bcc.n	55ca <__divsi3+0x1c2>
    55c8:	4240      	negs	r0, r0
    55ca:	b501      	push	{r0, lr}
    55cc:	2000      	movs	r0, #0
    55ce:	f000 f805 	bl	55dc <__aeabi_idiv0>
    55d2:	bd02      	pop	{r1, pc}

000055d4 <__aeabi_idivmod>:
    55d4:	2900      	cmp	r1, #0
    55d6:	d0f8      	beq.n	55ca <__divsi3+0x1c2>
    55d8:	e716      	b.n	5408 <__divsi3>
    55da:	4770      	bx	lr

000055dc <__aeabi_idiv0>:
    55dc:	4770      	bx	lr
    55de:	46c0      	nop			; (mov r8, r8)

000055e0 <__aeabi_uldivmod>:
    55e0:	2b00      	cmp	r3, #0
    55e2:	d111      	bne.n	5608 <__aeabi_uldivmod+0x28>
    55e4:	2a00      	cmp	r2, #0
    55e6:	d10f      	bne.n	5608 <__aeabi_uldivmod+0x28>
    55e8:	2900      	cmp	r1, #0
    55ea:	d100      	bne.n	55ee <__aeabi_uldivmod+0xe>
    55ec:	2800      	cmp	r0, #0
    55ee:	d002      	beq.n	55f6 <__aeabi_uldivmod+0x16>
    55f0:	2100      	movs	r1, #0
    55f2:	43c9      	mvns	r1, r1
    55f4:	1c08      	adds	r0, r1, #0
    55f6:	b407      	push	{r0, r1, r2}
    55f8:	4802      	ldr	r0, [pc, #8]	; (5604 <__aeabi_uldivmod+0x24>)
    55fa:	a102      	add	r1, pc, #8	; (adr r1, 5604 <__aeabi_uldivmod+0x24>)
    55fc:	1840      	adds	r0, r0, r1
    55fe:	9002      	str	r0, [sp, #8]
    5600:	bd03      	pop	{r0, r1, pc}
    5602:	46c0      	nop			; (mov r8, r8)
    5604:	ffffffd9 	.word	0xffffffd9
    5608:	b403      	push	{r0, r1}
    560a:	4668      	mov	r0, sp
    560c:	b501      	push	{r0, lr}
    560e:	9802      	ldr	r0, [sp, #8]
    5610:	f000 f830 	bl	5674 <__udivmoddi4>
    5614:	9b01      	ldr	r3, [sp, #4]
    5616:	469e      	mov	lr, r3
    5618:	b002      	add	sp, #8
    561a:	bc0c      	pop	{r2, r3}
    561c:	4770      	bx	lr
    561e:	46c0      	nop			; (mov r8, r8)

00005620 <__aeabi_lmul>:
    5620:	b5f0      	push	{r4, r5, r6, r7, lr}
    5622:	46ce      	mov	lr, r9
    5624:	4647      	mov	r7, r8
    5626:	0415      	lsls	r5, r2, #16
    5628:	0c2d      	lsrs	r5, r5, #16
    562a:	002e      	movs	r6, r5
    562c:	b580      	push	{r7, lr}
    562e:	0407      	lsls	r7, r0, #16
    5630:	0c14      	lsrs	r4, r2, #16
    5632:	0c3f      	lsrs	r7, r7, #16
    5634:	4699      	mov	r9, r3
    5636:	0c03      	lsrs	r3, r0, #16
    5638:	437e      	muls	r6, r7
    563a:	435d      	muls	r5, r3
    563c:	4367      	muls	r7, r4
    563e:	4363      	muls	r3, r4
    5640:	197f      	adds	r7, r7, r5
    5642:	0c34      	lsrs	r4, r6, #16
    5644:	19e4      	adds	r4, r4, r7
    5646:	469c      	mov	ip, r3
    5648:	42a5      	cmp	r5, r4
    564a:	d903      	bls.n	5654 <__aeabi_lmul+0x34>
    564c:	2380      	movs	r3, #128	; 0x80
    564e:	025b      	lsls	r3, r3, #9
    5650:	4698      	mov	r8, r3
    5652:	44c4      	add	ip, r8
    5654:	464b      	mov	r3, r9
    5656:	4351      	muls	r1, r2
    5658:	4343      	muls	r3, r0
    565a:	0436      	lsls	r6, r6, #16
    565c:	0c36      	lsrs	r6, r6, #16
    565e:	0c25      	lsrs	r5, r4, #16
    5660:	0424      	lsls	r4, r4, #16
    5662:	4465      	add	r5, ip
    5664:	19a4      	adds	r4, r4, r6
    5666:	1859      	adds	r1, r3, r1
    5668:	1949      	adds	r1, r1, r5
    566a:	0020      	movs	r0, r4
    566c:	bc0c      	pop	{r2, r3}
    566e:	4690      	mov	r8, r2
    5670:	4699      	mov	r9, r3
    5672:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005674 <__udivmoddi4>:
    5674:	b5f0      	push	{r4, r5, r6, r7, lr}
    5676:	4657      	mov	r7, sl
    5678:	464e      	mov	r6, r9
    567a:	4645      	mov	r5, r8
    567c:	46de      	mov	lr, fp
    567e:	b5e0      	push	{r5, r6, r7, lr}
    5680:	0004      	movs	r4, r0
    5682:	b083      	sub	sp, #12
    5684:	000d      	movs	r5, r1
    5686:	4692      	mov	sl, r2
    5688:	4699      	mov	r9, r3
    568a:	428b      	cmp	r3, r1
    568c:	d82f      	bhi.n	56ee <__udivmoddi4+0x7a>
    568e:	d02c      	beq.n	56ea <__udivmoddi4+0x76>
    5690:	4649      	mov	r1, r9
    5692:	4650      	mov	r0, sl
    5694:	f000 f8cc 	bl	5830 <__clzdi2>
    5698:	0029      	movs	r1, r5
    569a:	0006      	movs	r6, r0
    569c:	0020      	movs	r0, r4
    569e:	f000 f8c7 	bl	5830 <__clzdi2>
    56a2:	1a33      	subs	r3, r6, r0
    56a4:	4698      	mov	r8, r3
    56a6:	3b20      	subs	r3, #32
    56a8:	469b      	mov	fp, r3
    56aa:	d500      	bpl.n	56ae <__udivmoddi4+0x3a>
    56ac:	e074      	b.n	5798 <__udivmoddi4+0x124>
    56ae:	4653      	mov	r3, sl
    56b0:	465a      	mov	r2, fp
    56b2:	4093      	lsls	r3, r2
    56b4:	001f      	movs	r7, r3
    56b6:	4653      	mov	r3, sl
    56b8:	4642      	mov	r2, r8
    56ba:	4093      	lsls	r3, r2
    56bc:	001e      	movs	r6, r3
    56be:	42af      	cmp	r7, r5
    56c0:	d829      	bhi.n	5716 <__udivmoddi4+0xa2>
    56c2:	d026      	beq.n	5712 <__udivmoddi4+0x9e>
    56c4:	465b      	mov	r3, fp
    56c6:	1ba4      	subs	r4, r4, r6
    56c8:	41bd      	sbcs	r5, r7
    56ca:	2b00      	cmp	r3, #0
    56cc:	da00      	bge.n	56d0 <__udivmoddi4+0x5c>
    56ce:	e079      	b.n	57c4 <__udivmoddi4+0x150>
    56d0:	2200      	movs	r2, #0
    56d2:	2300      	movs	r3, #0
    56d4:	9200      	str	r2, [sp, #0]
    56d6:	9301      	str	r3, [sp, #4]
    56d8:	2301      	movs	r3, #1
    56da:	465a      	mov	r2, fp
    56dc:	4093      	lsls	r3, r2
    56de:	9301      	str	r3, [sp, #4]
    56e0:	2301      	movs	r3, #1
    56e2:	4642      	mov	r2, r8
    56e4:	4093      	lsls	r3, r2
    56e6:	9300      	str	r3, [sp, #0]
    56e8:	e019      	b.n	571e <__udivmoddi4+0xaa>
    56ea:	4282      	cmp	r2, r0
    56ec:	d9d0      	bls.n	5690 <__udivmoddi4+0x1c>
    56ee:	2200      	movs	r2, #0
    56f0:	2300      	movs	r3, #0
    56f2:	9200      	str	r2, [sp, #0]
    56f4:	9301      	str	r3, [sp, #4]
    56f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    56f8:	2b00      	cmp	r3, #0
    56fa:	d001      	beq.n	5700 <__udivmoddi4+0x8c>
    56fc:	601c      	str	r4, [r3, #0]
    56fe:	605d      	str	r5, [r3, #4]
    5700:	9800      	ldr	r0, [sp, #0]
    5702:	9901      	ldr	r1, [sp, #4]
    5704:	b003      	add	sp, #12
    5706:	bc3c      	pop	{r2, r3, r4, r5}
    5708:	4690      	mov	r8, r2
    570a:	4699      	mov	r9, r3
    570c:	46a2      	mov	sl, r4
    570e:	46ab      	mov	fp, r5
    5710:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5712:	42a3      	cmp	r3, r4
    5714:	d9d6      	bls.n	56c4 <__udivmoddi4+0x50>
    5716:	2200      	movs	r2, #0
    5718:	2300      	movs	r3, #0
    571a:	9200      	str	r2, [sp, #0]
    571c:	9301      	str	r3, [sp, #4]
    571e:	4643      	mov	r3, r8
    5720:	2b00      	cmp	r3, #0
    5722:	d0e8      	beq.n	56f6 <__udivmoddi4+0x82>
    5724:	07fb      	lsls	r3, r7, #31
    5726:	0872      	lsrs	r2, r6, #1
    5728:	431a      	orrs	r2, r3
    572a:	4646      	mov	r6, r8
    572c:	087b      	lsrs	r3, r7, #1
    572e:	e00e      	b.n	574e <__udivmoddi4+0xda>
    5730:	42ab      	cmp	r3, r5
    5732:	d101      	bne.n	5738 <__udivmoddi4+0xc4>
    5734:	42a2      	cmp	r2, r4
    5736:	d80c      	bhi.n	5752 <__udivmoddi4+0xde>
    5738:	1aa4      	subs	r4, r4, r2
    573a:	419d      	sbcs	r5, r3
    573c:	2001      	movs	r0, #1
    573e:	1924      	adds	r4, r4, r4
    5740:	416d      	adcs	r5, r5
    5742:	2100      	movs	r1, #0
    5744:	3e01      	subs	r6, #1
    5746:	1824      	adds	r4, r4, r0
    5748:	414d      	adcs	r5, r1
    574a:	2e00      	cmp	r6, #0
    574c:	d006      	beq.n	575c <__udivmoddi4+0xe8>
    574e:	42ab      	cmp	r3, r5
    5750:	d9ee      	bls.n	5730 <__udivmoddi4+0xbc>
    5752:	3e01      	subs	r6, #1
    5754:	1924      	adds	r4, r4, r4
    5756:	416d      	adcs	r5, r5
    5758:	2e00      	cmp	r6, #0
    575a:	d1f8      	bne.n	574e <__udivmoddi4+0xda>
    575c:	465b      	mov	r3, fp
    575e:	9800      	ldr	r0, [sp, #0]
    5760:	9901      	ldr	r1, [sp, #4]
    5762:	1900      	adds	r0, r0, r4
    5764:	4169      	adcs	r1, r5
    5766:	2b00      	cmp	r3, #0
    5768:	db22      	blt.n	57b0 <__udivmoddi4+0x13c>
    576a:	002b      	movs	r3, r5
    576c:	465a      	mov	r2, fp
    576e:	40d3      	lsrs	r3, r2
    5770:	002a      	movs	r2, r5
    5772:	4644      	mov	r4, r8
    5774:	40e2      	lsrs	r2, r4
    5776:	001c      	movs	r4, r3
    5778:	465b      	mov	r3, fp
    577a:	0015      	movs	r5, r2
    577c:	2b00      	cmp	r3, #0
    577e:	db2c      	blt.n	57da <__udivmoddi4+0x166>
    5780:	0026      	movs	r6, r4
    5782:	409e      	lsls	r6, r3
    5784:	0033      	movs	r3, r6
    5786:	0026      	movs	r6, r4
    5788:	4647      	mov	r7, r8
    578a:	40be      	lsls	r6, r7
    578c:	0032      	movs	r2, r6
    578e:	1a80      	subs	r0, r0, r2
    5790:	4199      	sbcs	r1, r3
    5792:	9000      	str	r0, [sp, #0]
    5794:	9101      	str	r1, [sp, #4]
    5796:	e7ae      	b.n	56f6 <__udivmoddi4+0x82>
    5798:	4642      	mov	r2, r8
    579a:	2320      	movs	r3, #32
    579c:	1a9b      	subs	r3, r3, r2
    579e:	4652      	mov	r2, sl
    57a0:	40da      	lsrs	r2, r3
    57a2:	4641      	mov	r1, r8
    57a4:	0013      	movs	r3, r2
    57a6:	464a      	mov	r2, r9
    57a8:	408a      	lsls	r2, r1
    57aa:	0017      	movs	r7, r2
    57ac:	431f      	orrs	r7, r3
    57ae:	e782      	b.n	56b6 <__udivmoddi4+0x42>
    57b0:	4642      	mov	r2, r8
    57b2:	2320      	movs	r3, #32
    57b4:	1a9b      	subs	r3, r3, r2
    57b6:	002a      	movs	r2, r5
    57b8:	4646      	mov	r6, r8
    57ba:	409a      	lsls	r2, r3
    57bc:	0023      	movs	r3, r4
    57be:	40f3      	lsrs	r3, r6
    57c0:	4313      	orrs	r3, r2
    57c2:	e7d5      	b.n	5770 <__udivmoddi4+0xfc>
    57c4:	4642      	mov	r2, r8
    57c6:	2320      	movs	r3, #32
    57c8:	2100      	movs	r1, #0
    57ca:	1a9b      	subs	r3, r3, r2
    57cc:	2200      	movs	r2, #0
    57ce:	9100      	str	r1, [sp, #0]
    57d0:	9201      	str	r2, [sp, #4]
    57d2:	2201      	movs	r2, #1
    57d4:	40da      	lsrs	r2, r3
    57d6:	9201      	str	r2, [sp, #4]
    57d8:	e782      	b.n	56e0 <__udivmoddi4+0x6c>
    57da:	4642      	mov	r2, r8
    57dc:	2320      	movs	r3, #32
    57de:	0026      	movs	r6, r4
    57e0:	1a9b      	subs	r3, r3, r2
    57e2:	40de      	lsrs	r6, r3
    57e4:	002f      	movs	r7, r5
    57e6:	46b4      	mov	ip, r6
    57e8:	4097      	lsls	r7, r2
    57ea:	4666      	mov	r6, ip
    57ec:	003b      	movs	r3, r7
    57ee:	4333      	orrs	r3, r6
    57f0:	e7c9      	b.n	5786 <__udivmoddi4+0x112>
    57f2:	46c0      	nop			; (mov r8, r8)

000057f4 <__clzsi2>:
    57f4:	211c      	movs	r1, #28
    57f6:	2301      	movs	r3, #1
    57f8:	041b      	lsls	r3, r3, #16
    57fa:	4298      	cmp	r0, r3
    57fc:	d301      	bcc.n	5802 <__clzsi2+0xe>
    57fe:	0c00      	lsrs	r0, r0, #16
    5800:	3910      	subs	r1, #16
    5802:	0a1b      	lsrs	r3, r3, #8
    5804:	4298      	cmp	r0, r3
    5806:	d301      	bcc.n	580c <__clzsi2+0x18>
    5808:	0a00      	lsrs	r0, r0, #8
    580a:	3908      	subs	r1, #8
    580c:	091b      	lsrs	r3, r3, #4
    580e:	4298      	cmp	r0, r3
    5810:	d301      	bcc.n	5816 <__clzsi2+0x22>
    5812:	0900      	lsrs	r0, r0, #4
    5814:	3904      	subs	r1, #4
    5816:	a202      	add	r2, pc, #8	; (adr r2, 5820 <__clzsi2+0x2c>)
    5818:	5c10      	ldrb	r0, [r2, r0]
    581a:	1840      	adds	r0, r0, r1
    581c:	4770      	bx	lr
    581e:	46c0      	nop			; (mov r8, r8)
    5820:	02020304 	.word	0x02020304
    5824:	01010101 	.word	0x01010101
	...

00005830 <__clzdi2>:
    5830:	b510      	push	{r4, lr}
    5832:	2900      	cmp	r1, #0
    5834:	d103      	bne.n	583e <__clzdi2+0xe>
    5836:	f7ff ffdd 	bl	57f4 <__clzsi2>
    583a:	3020      	adds	r0, #32
    583c:	e002      	b.n	5844 <__clzdi2+0x14>
    583e:	1c08      	adds	r0, r1, #0
    5840:	f7ff ffd8 	bl	57f4 <__clzsi2>
    5844:	bd10      	pop	{r4, pc}
    5846:	46c0      	nop			; (mov r8, r8)

00005848 <__libc_init_array>:
    5848:	b570      	push	{r4, r5, r6, lr}
    584a:	2600      	movs	r6, #0
    584c:	4d0c      	ldr	r5, [pc, #48]	; (5880 <__libc_init_array+0x38>)
    584e:	4c0d      	ldr	r4, [pc, #52]	; (5884 <__libc_init_array+0x3c>)
    5850:	1b64      	subs	r4, r4, r5
    5852:	10a4      	asrs	r4, r4, #2
    5854:	42a6      	cmp	r6, r4
    5856:	d109      	bne.n	586c <__libc_init_array+0x24>
    5858:	2600      	movs	r6, #0
    585a:	f001 fd27 	bl	72ac <_init>
    585e:	4d0a      	ldr	r5, [pc, #40]	; (5888 <__libc_init_array+0x40>)
    5860:	4c0a      	ldr	r4, [pc, #40]	; (588c <__libc_init_array+0x44>)
    5862:	1b64      	subs	r4, r4, r5
    5864:	10a4      	asrs	r4, r4, #2
    5866:	42a6      	cmp	r6, r4
    5868:	d105      	bne.n	5876 <__libc_init_array+0x2e>
    586a:	bd70      	pop	{r4, r5, r6, pc}
    586c:	00b3      	lsls	r3, r6, #2
    586e:	58eb      	ldr	r3, [r5, r3]
    5870:	4798      	blx	r3
    5872:	3601      	adds	r6, #1
    5874:	e7ee      	b.n	5854 <__libc_init_array+0xc>
    5876:	00b3      	lsls	r3, r6, #2
    5878:	58eb      	ldr	r3, [r5, r3]
    587a:	4798      	blx	r3
    587c:	3601      	adds	r6, #1
    587e:	e7f2      	b.n	5866 <__libc_init_array+0x1e>
    5880:	000072b8 	.word	0x000072b8
    5884:	000072b8 	.word	0x000072b8
    5888:	000072b8 	.word	0x000072b8
    588c:	000072bc 	.word	0x000072bc

00005890 <malloc>:
    5890:	b510      	push	{r4, lr}
    5892:	4b03      	ldr	r3, [pc, #12]	; (58a0 <malloc+0x10>)
    5894:	0001      	movs	r1, r0
    5896:	6818      	ldr	r0, [r3, #0]
    5898:	f000 f860 	bl	595c <_malloc_r>
    589c:	bd10      	pop	{r4, pc}
    589e:	46c0      	nop			; (mov r8, r8)
    58a0:	2000036c 	.word	0x2000036c

000058a4 <memcpy>:
    58a4:	2300      	movs	r3, #0
    58a6:	b510      	push	{r4, lr}
    58a8:	429a      	cmp	r2, r3
    58aa:	d100      	bne.n	58ae <memcpy+0xa>
    58ac:	bd10      	pop	{r4, pc}
    58ae:	5ccc      	ldrb	r4, [r1, r3]
    58b0:	54c4      	strb	r4, [r0, r3]
    58b2:	3301      	adds	r3, #1
    58b4:	e7f8      	b.n	58a8 <memcpy+0x4>

000058b6 <memset>:
    58b6:	0003      	movs	r3, r0
    58b8:	1882      	adds	r2, r0, r2
    58ba:	4293      	cmp	r3, r2
    58bc:	d100      	bne.n	58c0 <memset+0xa>
    58be:	4770      	bx	lr
    58c0:	7019      	strb	r1, [r3, #0]
    58c2:	3301      	adds	r3, #1
    58c4:	e7f9      	b.n	58ba <memset+0x4>
	...

000058c8 <_free_r>:
    58c8:	b570      	push	{r4, r5, r6, lr}
    58ca:	0005      	movs	r5, r0
    58cc:	2900      	cmp	r1, #0
    58ce:	d010      	beq.n	58f2 <_free_r+0x2a>
    58d0:	1f0c      	subs	r4, r1, #4
    58d2:	6823      	ldr	r3, [r4, #0]
    58d4:	2b00      	cmp	r3, #0
    58d6:	da00      	bge.n	58da <_free_r+0x12>
    58d8:	18e4      	adds	r4, r4, r3
    58da:	0028      	movs	r0, r5
    58dc:	f000 f940 	bl	5b60 <__malloc_lock>
    58e0:	4a1d      	ldr	r2, [pc, #116]	; (5958 <_free_r+0x90>)
    58e2:	6813      	ldr	r3, [r2, #0]
    58e4:	2b00      	cmp	r3, #0
    58e6:	d105      	bne.n	58f4 <_free_r+0x2c>
    58e8:	6063      	str	r3, [r4, #4]
    58ea:	6014      	str	r4, [r2, #0]
    58ec:	0028      	movs	r0, r5
    58ee:	f000 f938 	bl	5b62 <__malloc_unlock>
    58f2:	bd70      	pop	{r4, r5, r6, pc}
    58f4:	42a3      	cmp	r3, r4
    58f6:	d909      	bls.n	590c <_free_r+0x44>
    58f8:	6821      	ldr	r1, [r4, #0]
    58fa:	1860      	adds	r0, r4, r1
    58fc:	4283      	cmp	r3, r0
    58fe:	d1f3      	bne.n	58e8 <_free_r+0x20>
    5900:	6818      	ldr	r0, [r3, #0]
    5902:	685b      	ldr	r3, [r3, #4]
    5904:	1841      	adds	r1, r0, r1
    5906:	6021      	str	r1, [r4, #0]
    5908:	e7ee      	b.n	58e8 <_free_r+0x20>
    590a:	0013      	movs	r3, r2
    590c:	685a      	ldr	r2, [r3, #4]
    590e:	2a00      	cmp	r2, #0
    5910:	d001      	beq.n	5916 <_free_r+0x4e>
    5912:	42a2      	cmp	r2, r4
    5914:	d9f9      	bls.n	590a <_free_r+0x42>
    5916:	6819      	ldr	r1, [r3, #0]
    5918:	1858      	adds	r0, r3, r1
    591a:	42a0      	cmp	r0, r4
    591c:	d10b      	bne.n	5936 <_free_r+0x6e>
    591e:	6820      	ldr	r0, [r4, #0]
    5920:	1809      	adds	r1, r1, r0
    5922:	1858      	adds	r0, r3, r1
    5924:	6019      	str	r1, [r3, #0]
    5926:	4282      	cmp	r2, r0
    5928:	d1e0      	bne.n	58ec <_free_r+0x24>
    592a:	6810      	ldr	r0, [r2, #0]
    592c:	6852      	ldr	r2, [r2, #4]
    592e:	1841      	adds	r1, r0, r1
    5930:	6019      	str	r1, [r3, #0]
    5932:	605a      	str	r2, [r3, #4]
    5934:	e7da      	b.n	58ec <_free_r+0x24>
    5936:	42a0      	cmp	r0, r4
    5938:	d902      	bls.n	5940 <_free_r+0x78>
    593a:	230c      	movs	r3, #12
    593c:	602b      	str	r3, [r5, #0]
    593e:	e7d5      	b.n	58ec <_free_r+0x24>
    5940:	6821      	ldr	r1, [r4, #0]
    5942:	1860      	adds	r0, r4, r1
    5944:	4282      	cmp	r2, r0
    5946:	d103      	bne.n	5950 <_free_r+0x88>
    5948:	6810      	ldr	r0, [r2, #0]
    594a:	6852      	ldr	r2, [r2, #4]
    594c:	1841      	adds	r1, r0, r1
    594e:	6021      	str	r1, [r4, #0]
    5950:	6062      	str	r2, [r4, #4]
    5952:	605c      	str	r4, [r3, #4]
    5954:	e7ca      	b.n	58ec <_free_r+0x24>
    5956:	46c0      	nop			; (mov r8, r8)
    5958:	2000058c 	.word	0x2000058c

0000595c <_malloc_r>:
    595c:	2303      	movs	r3, #3
    595e:	b570      	push	{r4, r5, r6, lr}
    5960:	1ccd      	adds	r5, r1, #3
    5962:	439d      	bics	r5, r3
    5964:	3508      	adds	r5, #8
    5966:	0006      	movs	r6, r0
    5968:	2d0c      	cmp	r5, #12
    596a:	d21e      	bcs.n	59aa <_malloc_r+0x4e>
    596c:	250c      	movs	r5, #12
    596e:	42a9      	cmp	r1, r5
    5970:	d81d      	bhi.n	59ae <_malloc_r+0x52>
    5972:	0030      	movs	r0, r6
    5974:	f000 f8f4 	bl	5b60 <__malloc_lock>
    5978:	4a25      	ldr	r2, [pc, #148]	; (5a10 <_malloc_r+0xb4>)
    597a:	6814      	ldr	r4, [r2, #0]
    597c:	0021      	movs	r1, r4
    597e:	2900      	cmp	r1, #0
    5980:	d119      	bne.n	59b6 <_malloc_r+0x5a>
    5982:	4c24      	ldr	r4, [pc, #144]	; (5a14 <_malloc_r+0xb8>)
    5984:	6823      	ldr	r3, [r4, #0]
    5986:	2b00      	cmp	r3, #0
    5988:	d103      	bne.n	5992 <_malloc_r+0x36>
    598a:	0030      	movs	r0, r6
    598c:	f000 f844 	bl	5a18 <_sbrk_r>
    5990:	6020      	str	r0, [r4, #0]
    5992:	0029      	movs	r1, r5
    5994:	0030      	movs	r0, r6
    5996:	f000 f83f 	bl	5a18 <_sbrk_r>
    599a:	1c43      	adds	r3, r0, #1
    599c:	d12c      	bne.n	59f8 <_malloc_r+0x9c>
    599e:	230c      	movs	r3, #12
    59a0:	0030      	movs	r0, r6
    59a2:	6033      	str	r3, [r6, #0]
    59a4:	f000 f8dd 	bl	5b62 <__malloc_unlock>
    59a8:	e003      	b.n	59b2 <_malloc_r+0x56>
    59aa:	2d00      	cmp	r5, #0
    59ac:	dadf      	bge.n	596e <_malloc_r+0x12>
    59ae:	230c      	movs	r3, #12
    59b0:	6033      	str	r3, [r6, #0]
    59b2:	2000      	movs	r0, #0
    59b4:	bd70      	pop	{r4, r5, r6, pc}
    59b6:	680b      	ldr	r3, [r1, #0]
    59b8:	1b5b      	subs	r3, r3, r5
    59ba:	d41a      	bmi.n	59f2 <_malloc_r+0x96>
    59bc:	2b0b      	cmp	r3, #11
    59be:	d903      	bls.n	59c8 <_malloc_r+0x6c>
    59c0:	600b      	str	r3, [r1, #0]
    59c2:	18cc      	adds	r4, r1, r3
    59c4:	6025      	str	r5, [r4, #0]
    59c6:	e003      	b.n	59d0 <_malloc_r+0x74>
    59c8:	428c      	cmp	r4, r1
    59ca:	d10e      	bne.n	59ea <_malloc_r+0x8e>
    59cc:	6863      	ldr	r3, [r4, #4]
    59ce:	6013      	str	r3, [r2, #0]
    59d0:	0030      	movs	r0, r6
    59d2:	f000 f8c6 	bl	5b62 <__malloc_unlock>
    59d6:	0020      	movs	r0, r4
    59d8:	2207      	movs	r2, #7
    59da:	300b      	adds	r0, #11
    59dc:	1d23      	adds	r3, r4, #4
    59de:	4390      	bics	r0, r2
    59e0:	1ac3      	subs	r3, r0, r3
    59e2:	d0e7      	beq.n	59b4 <_malloc_r+0x58>
    59e4:	425a      	negs	r2, r3
    59e6:	50e2      	str	r2, [r4, r3]
    59e8:	e7e4      	b.n	59b4 <_malloc_r+0x58>
    59ea:	684b      	ldr	r3, [r1, #4]
    59ec:	6063      	str	r3, [r4, #4]
    59ee:	000c      	movs	r4, r1
    59f0:	e7ee      	b.n	59d0 <_malloc_r+0x74>
    59f2:	000c      	movs	r4, r1
    59f4:	6849      	ldr	r1, [r1, #4]
    59f6:	e7c2      	b.n	597e <_malloc_r+0x22>
    59f8:	2303      	movs	r3, #3
    59fa:	1cc4      	adds	r4, r0, #3
    59fc:	439c      	bics	r4, r3
    59fe:	42a0      	cmp	r0, r4
    5a00:	d0e0      	beq.n	59c4 <_malloc_r+0x68>
    5a02:	1a21      	subs	r1, r4, r0
    5a04:	0030      	movs	r0, r6
    5a06:	f000 f807 	bl	5a18 <_sbrk_r>
    5a0a:	1c43      	adds	r3, r0, #1
    5a0c:	d1da      	bne.n	59c4 <_malloc_r+0x68>
    5a0e:	e7c6      	b.n	599e <_malloc_r+0x42>
    5a10:	2000058c 	.word	0x2000058c
    5a14:	20000590 	.word	0x20000590

00005a18 <_sbrk_r>:
    5a18:	2300      	movs	r3, #0
    5a1a:	b570      	push	{r4, r5, r6, lr}
    5a1c:	4c06      	ldr	r4, [pc, #24]	; (5a38 <_sbrk_r+0x20>)
    5a1e:	0005      	movs	r5, r0
    5a20:	0008      	movs	r0, r1
    5a22:	6023      	str	r3, [r4, #0]
    5a24:	f7ff fa36 	bl	4e94 <_sbrk>
    5a28:	1c43      	adds	r3, r0, #1
    5a2a:	d103      	bne.n	5a34 <_sbrk_r+0x1c>
    5a2c:	6823      	ldr	r3, [r4, #0]
    5a2e:	2b00      	cmp	r3, #0
    5a30:	d000      	beq.n	5a34 <_sbrk_r+0x1c>
    5a32:	602b      	str	r3, [r5, #0]
    5a34:	bd70      	pop	{r4, r5, r6, pc}
    5a36:	46c0      	nop			; (mov r8, r8)
    5a38:	20001764 	.word	0x20001764

00005a3c <siprintf>:
    5a3c:	b40e      	push	{r1, r2, r3}
    5a3e:	b510      	push	{r4, lr}
    5a40:	b09d      	sub	sp, #116	; 0x74
    5a42:	a902      	add	r1, sp, #8
    5a44:	9002      	str	r0, [sp, #8]
    5a46:	6108      	str	r0, [r1, #16]
    5a48:	480b      	ldr	r0, [pc, #44]	; (5a78 <siprintf+0x3c>)
    5a4a:	2482      	movs	r4, #130	; 0x82
    5a4c:	6088      	str	r0, [r1, #8]
    5a4e:	6148      	str	r0, [r1, #20]
    5a50:	2001      	movs	r0, #1
    5a52:	4240      	negs	r0, r0
    5a54:	ab1f      	add	r3, sp, #124	; 0x7c
    5a56:	81c8      	strh	r0, [r1, #14]
    5a58:	4808      	ldr	r0, [pc, #32]	; (5a7c <siprintf+0x40>)
    5a5a:	cb04      	ldmia	r3!, {r2}
    5a5c:	00a4      	lsls	r4, r4, #2
    5a5e:	6800      	ldr	r0, [r0, #0]
    5a60:	9301      	str	r3, [sp, #4]
    5a62:	818c      	strh	r4, [r1, #12]
    5a64:	f000 f8e0 	bl	5c28 <_svfiprintf_r>
    5a68:	2300      	movs	r3, #0
    5a6a:	9a02      	ldr	r2, [sp, #8]
    5a6c:	7013      	strb	r3, [r2, #0]
    5a6e:	b01d      	add	sp, #116	; 0x74
    5a70:	bc10      	pop	{r4}
    5a72:	bc08      	pop	{r3}
    5a74:	b003      	add	sp, #12
    5a76:	4718      	bx	r3
    5a78:	7fffffff 	.word	0x7fffffff
    5a7c:	2000036c 	.word	0x2000036c

00005a80 <siscanf>:
    5a80:	b40e      	push	{r1, r2, r3}
    5a82:	2381      	movs	r3, #129	; 0x81
    5a84:	b570      	push	{r4, r5, r6, lr}
    5a86:	b09d      	sub	sp, #116	; 0x74
    5a88:	ac02      	add	r4, sp, #8
    5a8a:	ad21      	add	r5, sp, #132	; 0x84
    5a8c:	009b      	lsls	r3, r3, #2
    5a8e:	cd40      	ldmia	r5!, {r6}
    5a90:	81a3      	strh	r3, [r4, #12]
    5a92:	9002      	str	r0, [sp, #8]
    5a94:	9006      	str	r0, [sp, #24]
    5a96:	f000 f833 	bl	5b00 <strlen>
    5a9a:	4b0b      	ldr	r3, [pc, #44]	; (5ac8 <siscanf+0x48>)
    5a9c:	6060      	str	r0, [r4, #4]
    5a9e:	6263      	str	r3, [r4, #36]	; 0x24
    5aa0:	2300      	movs	r3, #0
    5aa2:	6160      	str	r0, [r4, #20]
    5aa4:	4809      	ldr	r0, [pc, #36]	; (5acc <siscanf+0x4c>)
    5aa6:	6363      	str	r3, [r4, #52]	; 0x34
    5aa8:	64a3      	str	r3, [r4, #72]	; 0x48
    5aaa:	3b01      	subs	r3, #1
    5aac:	81e3      	strh	r3, [r4, #14]
    5aae:	0032      	movs	r2, r6
    5ab0:	002b      	movs	r3, r5
    5ab2:	0021      	movs	r1, r4
    5ab4:	6800      	ldr	r0, [r0, #0]
    5ab6:	9501      	str	r5, [sp, #4]
    5ab8:	f000 fa16 	bl	5ee8 <__ssvfiscanf_r>
    5abc:	b01d      	add	sp, #116	; 0x74
    5abe:	bc70      	pop	{r4, r5, r6}
    5ac0:	bc08      	pop	{r3}
    5ac2:	b003      	add	sp, #12
    5ac4:	4718      	bx	r3
    5ac6:	46c0      	nop			; (mov r8, r8)
    5ac8:	00005ad1 	.word	0x00005ad1
    5acc:	2000036c 	.word	0x2000036c

00005ad0 <__seofread>:
    5ad0:	2000      	movs	r0, #0
    5ad2:	4770      	bx	lr

00005ad4 <strchr>:
    5ad4:	b2c9      	uxtb	r1, r1
    5ad6:	7803      	ldrb	r3, [r0, #0]
    5ad8:	2b00      	cmp	r3, #0
    5ada:	d004      	beq.n	5ae6 <strchr+0x12>
    5adc:	4299      	cmp	r1, r3
    5ade:	d100      	bne.n	5ae2 <strchr+0xe>
    5ae0:	4770      	bx	lr
    5ae2:	3001      	adds	r0, #1
    5ae4:	e7f7      	b.n	5ad6 <strchr+0x2>
    5ae6:	424b      	negs	r3, r1
    5ae8:	4159      	adcs	r1, r3
    5aea:	4249      	negs	r1, r1
    5aec:	4008      	ands	r0, r1
    5aee:	e7f7      	b.n	5ae0 <strchr+0xc>

00005af0 <strcpy>:
    5af0:	1c03      	adds	r3, r0, #0
    5af2:	780a      	ldrb	r2, [r1, #0]
    5af4:	3101      	adds	r1, #1
    5af6:	701a      	strb	r2, [r3, #0]
    5af8:	3301      	adds	r3, #1
    5afa:	2a00      	cmp	r2, #0
    5afc:	d1f9      	bne.n	5af2 <strcpy+0x2>
    5afe:	4770      	bx	lr

00005b00 <strlen>:
    5b00:	2300      	movs	r3, #0
    5b02:	5cc2      	ldrb	r2, [r0, r3]
    5b04:	3301      	adds	r3, #1
    5b06:	2a00      	cmp	r2, #0
    5b08:	d1fb      	bne.n	5b02 <strlen+0x2>
    5b0a:	1e58      	subs	r0, r3, #1
    5b0c:	4770      	bx	lr

00005b0e <strncmp>:
    5b0e:	2300      	movs	r3, #0
    5b10:	b530      	push	{r4, r5, lr}
    5b12:	429a      	cmp	r2, r3
    5b14:	d00a      	beq.n	5b2c <strncmp+0x1e>
    5b16:	3a01      	subs	r2, #1
    5b18:	5cc4      	ldrb	r4, [r0, r3]
    5b1a:	5ccd      	ldrb	r5, [r1, r3]
    5b1c:	42ac      	cmp	r4, r5
    5b1e:	d104      	bne.n	5b2a <strncmp+0x1c>
    5b20:	429a      	cmp	r2, r3
    5b22:	d002      	beq.n	5b2a <strncmp+0x1c>
    5b24:	3301      	adds	r3, #1
    5b26:	2c00      	cmp	r4, #0
    5b28:	d1f6      	bne.n	5b18 <strncmp+0xa>
    5b2a:	1b63      	subs	r3, r4, r5
    5b2c:	0018      	movs	r0, r3
    5b2e:	bd30      	pop	{r4, r5, pc}

00005b30 <strstr>:
    5b30:	b510      	push	{r4, lr}
    5b32:	0002      	movs	r2, r0
    5b34:	7800      	ldrb	r0, [r0, #0]
    5b36:	2800      	cmp	r0, #0
    5b38:	d104      	bne.n	5b44 <strstr+0x14>
    5b3a:	7809      	ldrb	r1, [r1, #0]
    5b3c:	2900      	cmp	r1, #0
    5b3e:	d00d      	beq.n	5b5c <strstr+0x2c>
    5b40:	bd10      	pop	{r4, pc}
    5b42:	3201      	adds	r2, #1
    5b44:	7810      	ldrb	r0, [r2, #0]
    5b46:	2800      	cmp	r0, #0
    5b48:	d0fa      	beq.n	5b40 <strstr+0x10>
    5b4a:	2300      	movs	r3, #0
    5b4c:	5cc8      	ldrb	r0, [r1, r3]
    5b4e:	2800      	cmp	r0, #0
    5b50:	d004      	beq.n	5b5c <strstr+0x2c>
    5b52:	5cd4      	ldrb	r4, [r2, r3]
    5b54:	4284      	cmp	r4, r0
    5b56:	d1f4      	bne.n	5b42 <strstr+0x12>
    5b58:	3301      	adds	r3, #1
    5b5a:	e7f7      	b.n	5b4c <strstr+0x1c>
    5b5c:	0010      	movs	r0, r2
    5b5e:	e7ef      	b.n	5b40 <strstr+0x10>

00005b60 <__malloc_lock>:
    5b60:	4770      	bx	lr

00005b62 <__malloc_unlock>:
    5b62:	4770      	bx	lr

00005b64 <__ssputs_r>:
    5b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b66:	688e      	ldr	r6, [r1, #8]
    5b68:	b085      	sub	sp, #20
    5b6a:	0007      	movs	r7, r0
    5b6c:	000c      	movs	r4, r1
    5b6e:	9203      	str	r2, [sp, #12]
    5b70:	9301      	str	r3, [sp, #4]
    5b72:	429e      	cmp	r6, r3
    5b74:	d839      	bhi.n	5bea <__ssputs_r+0x86>
    5b76:	2390      	movs	r3, #144	; 0x90
    5b78:	898a      	ldrh	r2, [r1, #12]
    5b7a:	00db      	lsls	r3, r3, #3
    5b7c:	421a      	tst	r2, r3
    5b7e:	d034      	beq.n	5bea <__ssputs_r+0x86>
    5b80:	2503      	movs	r5, #3
    5b82:	6909      	ldr	r1, [r1, #16]
    5b84:	6823      	ldr	r3, [r4, #0]
    5b86:	1a5b      	subs	r3, r3, r1
    5b88:	9302      	str	r3, [sp, #8]
    5b8a:	6963      	ldr	r3, [r4, #20]
    5b8c:	9802      	ldr	r0, [sp, #8]
    5b8e:	435d      	muls	r5, r3
    5b90:	0feb      	lsrs	r3, r5, #31
    5b92:	195d      	adds	r5, r3, r5
    5b94:	9b01      	ldr	r3, [sp, #4]
    5b96:	106d      	asrs	r5, r5, #1
    5b98:	3301      	adds	r3, #1
    5b9a:	181b      	adds	r3, r3, r0
    5b9c:	42ab      	cmp	r3, r5
    5b9e:	d900      	bls.n	5ba2 <__ssputs_r+0x3e>
    5ba0:	001d      	movs	r5, r3
    5ba2:	0553      	lsls	r3, r2, #21
    5ba4:	d532      	bpl.n	5c0c <__ssputs_r+0xa8>
    5ba6:	0029      	movs	r1, r5
    5ba8:	0038      	movs	r0, r7
    5baa:	f7ff fed7 	bl	595c <_malloc_r>
    5bae:	1e06      	subs	r6, r0, #0
    5bb0:	d109      	bne.n	5bc6 <__ssputs_r+0x62>
    5bb2:	230c      	movs	r3, #12
    5bb4:	603b      	str	r3, [r7, #0]
    5bb6:	2340      	movs	r3, #64	; 0x40
    5bb8:	2001      	movs	r0, #1
    5bba:	89a2      	ldrh	r2, [r4, #12]
    5bbc:	4240      	negs	r0, r0
    5bbe:	4313      	orrs	r3, r2
    5bc0:	81a3      	strh	r3, [r4, #12]
    5bc2:	b005      	add	sp, #20
    5bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bc6:	9a02      	ldr	r2, [sp, #8]
    5bc8:	6921      	ldr	r1, [r4, #16]
    5bca:	f7ff fe6b 	bl	58a4 <memcpy>
    5bce:	89a3      	ldrh	r3, [r4, #12]
    5bd0:	4a14      	ldr	r2, [pc, #80]	; (5c24 <__ssputs_r+0xc0>)
    5bd2:	401a      	ands	r2, r3
    5bd4:	2380      	movs	r3, #128	; 0x80
    5bd6:	4313      	orrs	r3, r2
    5bd8:	81a3      	strh	r3, [r4, #12]
    5bda:	9b02      	ldr	r3, [sp, #8]
    5bdc:	6126      	str	r6, [r4, #16]
    5bde:	18f6      	adds	r6, r6, r3
    5be0:	6026      	str	r6, [r4, #0]
    5be2:	6165      	str	r5, [r4, #20]
    5be4:	9e01      	ldr	r6, [sp, #4]
    5be6:	1aed      	subs	r5, r5, r3
    5be8:	60a5      	str	r5, [r4, #8]
    5bea:	9b01      	ldr	r3, [sp, #4]
    5bec:	42b3      	cmp	r3, r6
    5bee:	d200      	bcs.n	5bf2 <__ssputs_r+0x8e>
    5bf0:	001e      	movs	r6, r3
    5bf2:	0032      	movs	r2, r6
    5bf4:	9903      	ldr	r1, [sp, #12]
    5bf6:	6820      	ldr	r0, [r4, #0]
    5bf8:	f000 ffb5 	bl	6b66 <memmove>
    5bfc:	68a3      	ldr	r3, [r4, #8]
    5bfe:	2000      	movs	r0, #0
    5c00:	1b9b      	subs	r3, r3, r6
    5c02:	60a3      	str	r3, [r4, #8]
    5c04:	6823      	ldr	r3, [r4, #0]
    5c06:	199e      	adds	r6, r3, r6
    5c08:	6026      	str	r6, [r4, #0]
    5c0a:	e7da      	b.n	5bc2 <__ssputs_r+0x5e>
    5c0c:	002a      	movs	r2, r5
    5c0e:	0038      	movs	r0, r7
    5c10:	f000 ffbb 	bl	6b8a <_realloc_r>
    5c14:	1e06      	subs	r6, r0, #0
    5c16:	d1e0      	bne.n	5bda <__ssputs_r+0x76>
    5c18:	6921      	ldr	r1, [r4, #16]
    5c1a:	0038      	movs	r0, r7
    5c1c:	f7ff fe54 	bl	58c8 <_free_r>
    5c20:	e7c7      	b.n	5bb2 <__ssputs_r+0x4e>
    5c22:	46c0      	nop			; (mov r8, r8)
    5c24:	fffffb7f 	.word	0xfffffb7f

00005c28 <_svfiprintf_r>:
    5c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c2a:	b09f      	sub	sp, #124	; 0x7c
    5c2c:	9002      	str	r0, [sp, #8]
    5c2e:	9305      	str	r3, [sp, #20]
    5c30:	898b      	ldrh	r3, [r1, #12]
    5c32:	000f      	movs	r7, r1
    5c34:	0016      	movs	r6, r2
    5c36:	061b      	lsls	r3, r3, #24
    5c38:	d511      	bpl.n	5c5e <_svfiprintf_r+0x36>
    5c3a:	690b      	ldr	r3, [r1, #16]
    5c3c:	2b00      	cmp	r3, #0
    5c3e:	d10e      	bne.n	5c5e <_svfiprintf_r+0x36>
    5c40:	2140      	movs	r1, #64	; 0x40
    5c42:	f7ff fe8b 	bl	595c <_malloc_r>
    5c46:	6038      	str	r0, [r7, #0]
    5c48:	6138      	str	r0, [r7, #16]
    5c4a:	2800      	cmp	r0, #0
    5c4c:	d105      	bne.n	5c5a <_svfiprintf_r+0x32>
    5c4e:	230c      	movs	r3, #12
    5c50:	9a02      	ldr	r2, [sp, #8]
    5c52:	3801      	subs	r0, #1
    5c54:	6013      	str	r3, [r2, #0]
    5c56:	b01f      	add	sp, #124	; 0x7c
    5c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c5a:	2340      	movs	r3, #64	; 0x40
    5c5c:	617b      	str	r3, [r7, #20]
    5c5e:	2300      	movs	r3, #0
    5c60:	ad06      	add	r5, sp, #24
    5c62:	616b      	str	r3, [r5, #20]
    5c64:	3320      	adds	r3, #32
    5c66:	766b      	strb	r3, [r5, #25]
    5c68:	3310      	adds	r3, #16
    5c6a:	76ab      	strb	r3, [r5, #26]
    5c6c:	0034      	movs	r4, r6
    5c6e:	7823      	ldrb	r3, [r4, #0]
    5c70:	2b00      	cmp	r3, #0
    5c72:	d147      	bne.n	5d04 <_svfiprintf_r+0xdc>
    5c74:	1ba3      	subs	r3, r4, r6
    5c76:	9304      	str	r3, [sp, #16]
    5c78:	d00d      	beq.n	5c96 <_svfiprintf_r+0x6e>
    5c7a:	1ba3      	subs	r3, r4, r6
    5c7c:	0032      	movs	r2, r6
    5c7e:	0039      	movs	r1, r7
    5c80:	9802      	ldr	r0, [sp, #8]
    5c82:	f7ff ff6f 	bl	5b64 <__ssputs_r>
    5c86:	1c43      	adds	r3, r0, #1
    5c88:	d100      	bne.n	5c8c <_svfiprintf_r+0x64>
    5c8a:	e0b5      	b.n	5df8 <_svfiprintf_r+0x1d0>
    5c8c:	696a      	ldr	r2, [r5, #20]
    5c8e:	9b04      	ldr	r3, [sp, #16]
    5c90:	4694      	mov	ip, r2
    5c92:	4463      	add	r3, ip
    5c94:	616b      	str	r3, [r5, #20]
    5c96:	7823      	ldrb	r3, [r4, #0]
    5c98:	2b00      	cmp	r3, #0
    5c9a:	d100      	bne.n	5c9e <_svfiprintf_r+0x76>
    5c9c:	e0ac      	b.n	5df8 <_svfiprintf_r+0x1d0>
    5c9e:	2201      	movs	r2, #1
    5ca0:	2300      	movs	r3, #0
    5ca2:	4252      	negs	r2, r2
    5ca4:	606a      	str	r2, [r5, #4]
    5ca6:	a902      	add	r1, sp, #8
    5ca8:	3254      	adds	r2, #84	; 0x54
    5caa:	1852      	adds	r2, r2, r1
    5cac:	3401      	adds	r4, #1
    5cae:	602b      	str	r3, [r5, #0]
    5cb0:	60eb      	str	r3, [r5, #12]
    5cb2:	60ab      	str	r3, [r5, #8]
    5cb4:	7013      	strb	r3, [r2, #0]
    5cb6:	65ab      	str	r3, [r5, #88]	; 0x58
    5cb8:	4e58      	ldr	r6, [pc, #352]	; (5e1c <_svfiprintf_r+0x1f4>)
    5cba:	2205      	movs	r2, #5
    5cbc:	7821      	ldrb	r1, [r4, #0]
    5cbe:	0030      	movs	r0, r6
    5cc0:	f000 ff46 	bl	6b50 <memchr>
    5cc4:	1c62      	adds	r2, r4, #1
    5cc6:	2800      	cmp	r0, #0
    5cc8:	d120      	bne.n	5d0c <_svfiprintf_r+0xe4>
    5cca:	6829      	ldr	r1, [r5, #0]
    5ccc:	06cb      	lsls	r3, r1, #27
    5cce:	d504      	bpl.n	5cda <_svfiprintf_r+0xb2>
    5cd0:	2353      	movs	r3, #83	; 0x53
    5cd2:	ae02      	add	r6, sp, #8
    5cd4:	3020      	adds	r0, #32
    5cd6:	199b      	adds	r3, r3, r6
    5cd8:	7018      	strb	r0, [r3, #0]
    5cda:	070b      	lsls	r3, r1, #28
    5cdc:	d504      	bpl.n	5ce8 <_svfiprintf_r+0xc0>
    5cde:	2353      	movs	r3, #83	; 0x53
    5ce0:	202b      	movs	r0, #43	; 0x2b
    5ce2:	ae02      	add	r6, sp, #8
    5ce4:	199b      	adds	r3, r3, r6
    5ce6:	7018      	strb	r0, [r3, #0]
    5ce8:	7823      	ldrb	r3, [r4, #0]
    5cea:	2b2a      	cmp	r3, #42	; 0x2a
    5cec:	d016      	beq.n	5d1c <_svfiprintf_r+0xf4>
    5cee:	2000      	movs	r0, #0
    5cf0:	210a      	movs	r1, #10
    5cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5cf4:	7822      	ldrb	r2, [r4, #0]
    5cf6:	3a30      	subs	r2, #48	; 0x30
    5cf8:	2a09      	cmp	r2, #9
    5cfa:	d955      	bls.n	5da8 <_svfiprintf_r+0x180>
    5cfc:	2800      	cmp	r0, #0
    5cfe:	d015      	beq.n	5d2c <_svfiprintf_r+0x104>
    5d00:	9309      	str	r3, [sp, #36]	; 0x24
    5d02:	e013      	b.n	5d2c <_svfiprintf_r+0x104>
    5d04:	2b25      	cmp	r3, #37	; 0x25
    5d06:	d0b5      	beq.n	5c74 <_svfiprintf_r+0x4c>
    5d08:	3401      	adds	r4, #1
    5d0a:	e7b0      	b.n	5c6e <_svfiprintf_r+0x46>
    5d0c:	2301      	movs	r3, #1
    5d0e:	1b80      	subs	r0, r0, r6
    5d10:	4083      	lsls	r3, r0
    5d12:	6829      	ldr	r1, [r5, #0]
    5d14:	0014      	movs	r4, r2
    5d16:	430b      	orrs	r3, r1
    5d18:	602b      	str	r3, [r5, #0]
    5d1a:	e7cd      	b.n	5cb8 <_svfiprintf_r+0x90>
    5d1c:	9b05      	ldr	r3, [sp, #20]
    5d1e:	1d18      	adds	r0, r3, #4
    5d20:	681b      	ldr	r3, [r3, #0]
    5d22:	9005      	str	r0, [sp, #20]
    5d24:	2b00      	cmp	r3, #0
    5d26:	db39      	blt.n	5d9c <_svfiprintf_r+0x174>
    5d28:	9309      	str	r3, [sp, #36]	; 0x24
    5d2a:	0014      	movs	r4, r2
    5d2c:	7823      	ldrb	r3, [r4, #0]
    5d2e:	2b2e      	cmp	r3, #46	; 0x2e
    5d30:	d10b      	bne.n	5d4a <_svfiprintf_r+0x122>
    5d32:	7863      	ldrb	r3, [r4, #1]
    5d34:	1c62      	adds	r2, r4, #1
    5d36:	2b2a      	cmp	r3, #42	; 0x2a
    5d38:	d13e      	bne.n	5db8 <_svfiprintf_r+0x190>
    5d3a:	9b05      	ldr	r3, [sp, #20]
    5d3c:	3402      	adds	r4, #2
    5d3e:	1d1a      	adds	r2, r3, #4
    5d40:	681b      	ldr	r3, [r3, #0]
    5d42:	9205      	str	r2, [sp, #20]
    5d44:	2b00      	cmp	r3, #0
    5d46:	db34      	blt.n	5db2 <_svfiprintf_r+0x18a>
    5d48:	9307      	str	r3, [sp, #28]
    5d4a:	4e35      	ldr	r6, [pc, #212]	; (5e20 <_svfiprintf_r+0x1f8>)
    5d4c:	7821      	ldrb	r1, [r4, #0]
    5d4e:	2203      	movs	r2, #3
    5d50:	0030      	movs	r0, r6
    5d52:	f000 fefd 	bl	6b50 <memchr>
    5d56:	2800      	cmp	r0, #0
    5d58:	d006      	beq.n	5d68 <_svfiprintf_r+0x140>
    5d5a:	2340      	movs	r3, #64	; 0x40
    5d5c:	1b80      	subs	r0, r0, r6
    5d5e:	4083      	lsls	r3, r0
    5d60:	682a      	ldr	r2, [r5, #0]
    5d62:	3401      	adds	r4, #1
    5d64:	4313      	orrs	r3, r2
    5d66:	602b      	str	r3, [r5, #0]
    5d68:	7821      	ldrb	r1, [r4, #0]
    5d6a:	2206      	movs	r2, #6
    5d6c:	482d      	ldr	r0, [pc, #180]	; (5e24 <_svfiprintf_r+0x1fc>)
    5d6e:	1c66      	adds	r6, r4, #1
    5d70:	7629      	strb	r1, [r5, #24]
    5d72:	f000 feed 	bl	6b50 <memchr>
    5d76:	2800      	cmp	r0, #0
    5d78:	d046      	beq.n	5e08 <_svfiprintf_r+0x1e0>
    5d7a:	4b2b      	ldr	r3, [pc, #172]	; (5e28 <_svfiprintf_r+0x200>)
    5d7c:	2b00      	cmp	r3, #0
    5d7e:	d12f      	bne.n	5de0 <_svfiprintf_r+0x1b8>
    5d80:	6829      	ldr	r1, [r5, #0]
    5d82:	9b05      	ldr	r3, [sp, #20]
    5d84:	2207      	movs	r2, #7
    5d86:	05c9      	lsls	r1, r1, #23
    5d88:	d528      	bpl.n	5ddc <_svfiprintf_r+0x1b4>
    5d8a:	189b      	adds	r3, r3, r2
    5d8c:	4393      	bics	r3, r2
    5d8e:	3308      	adds	r3, #8
    5d90:	9305      	str	r3, [sp, #20]
    5d92:	696b      	ldr	r3, [r5, #20]
    5d94:	9a03      	ldr	r2, [sp, #12]
    5d96:	189b      	adds	r3, r3, r2
    5d98:	616b      	str	r3, [r5, #20]
    5d9a:	e767      	b.n	5c6c <_svfiprintf_r+0x44>
    5d9c:	425b      	negs	r3, r3
    5d9e:	60eb      	str	r3, [r5, #12]
    5da0:	2302      	movs	r3, #2
    5da2:	430b      	orrs	r3, r1
    5da4:	602b      	str	r3, [r5, #0]
    5da6:	e7c0      	b.n	5d2a <_svfiprintf_r+0x102>
    5da8:	434b      	muls	r3, r1
    5daa:	3401      	adds	r4, #1
    5dac:	189b      	adds	r3, r3, r2
    5dae:	2001      	movs	r0, #1
    5db0:	e7a0      	b.n	5cf4 <_svfiprintf_r+0xcc>
    5db2:	2301      	movs	r3, #1
    5db4:	425b      	negs	r3, r3
    5db6:	e7c7      	b.n	5d48 <_svfiprintf_r+0x120>
    5db8:	2300      	movs	r3, #0
    5dba:	0014      	movs	r4, r2
    5dbc:	200a      	movs	r0, #10
    5dbe:	001a      	movs	r2, r3
    5dc0:	606b      	str	r3, [r5, #4]
    5dc2:	7821      	ldrb	r1, [r4, #0]
    5dc4:	3930      	subs	r1, #48	; 0x30
    5dc6:	2909      	cmp	r1, #9
    5dc8:	d903      	bls.n	5dd2 <_svfiprintf_r+0x1aa>
    5dca:	2b00      	cmp	r3, #0
    5dcc:	d0bd      	beq.n	5d4a <_svfiprintf_r+0x122>
    5dce:	9207      	str	r2, [sp, #28]
    5dd0:	e7bb      	b.n	5d4a <_svfiprintf_r+0x122>
    5dd2:	4342      	muls	r2, r0
    5dd4:	3401      	adds	r4, #1
    5dd6:	1852      	adds	r2, r2, r1
    5dd8:	2301      	movs	r3, #1
    5dda:	e7f2      	b.n	5dc2 <_svfiprintf_r+0x19a>
    5ddc:	3307      	adds	r3, #7
    5dde:	e7d5      	b.n	5d8c <_svfiprintf_r+0x164>
    5de0:	ab05      	add	r3, sp, #20
    5de2:	9300      	str	r3, [sp, #0]
    5de4:	003a      	movs	r2, r7
    5de6:	4b11      	ldr	r3, [pc, #68]	; (5e2c <_svfiprintf_r+0x204>)
    5de8:	0029      	movs	r1, r5
    5dea:	9802      	ldr	r0, [sp, #8]
    5dec:	e000      	b.n	5df0 <_svfiprintf_r+0x1c8>
    5dee:	bf00      	nop
    5df0:	9003      	str	r0, [sp, #12]
    5df2:	9b03      	ldr	r3, [sp, #12]
    5df4:	3301      	adds	r3, #1
    5df6:	d1cc      	bne.n	5d92 <_svfiprintf_r+0x16a>
    5df8:	89bb      	ldrh	r3, [r7, #12]
    5dfa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5dfc:	065b      	lsls	r3, r3, #25
    5dfe:	d400      	bmi.n	5e02 <_svfiprintf_r+0x1da>
    5e00:	e729      	b.n	5c56 <_svfiprintf_r+0x2e>
    5e02:	2001      	movs	r0, #1
    5e04:	4240      	negs	r0, r0
    5e06:	e726      	b.n	5c56 <_svfiprintf_r+0x2e>
    5e08:	ab05      	add	r3, sp, #20
    5e0a:	9300      	str	r3, [sp, #0]
    5e0c:	003a      	movs	r2, r7
    5e0e:	4b07      	ldr	r3, [pc, #28]	; (5e2c <_svfiprintf_r+0x204>)
    5e10:	0029      	movs	r1, r5
    5e12:	9802      	ldr	r0, [sp, #8]
    5e14:	f000 fa5c 	bl	62d0 <_printf_i>
    5e18:	e7ea      	b.n	5df0 <_svfiprintf_r+0x1c8>
    5e1a:	46c0      	nop			; (mov r8, r8)
    5e1c:	000070e3 	.word	0x000070e3
    5e20:	000070e9 	.word	0x000070e9
    5e24:	000070ed 	.word	0x000070ed
    5e28:	00000000 	.word	0x00000000
    5e2c:	00005b65 	.word	0x00005b65

00005e30 <_sungetc_r>:
    5e30:	b570      	push	{r4, r5, r6, lr}
    5e32:	0014      	movs	r4, r2
    5e34:	1c4b      	adds	r3, r1, #1
    5e36:	d103      	bne.n	5e40 <_sungetc_r+0x10>
    5e38:	2501      	movs	r5, #1
    5e3a:	426d      	negs	r5, r5
    5e3c:	0028      	movs	r0, r5
    5e3e:	bd70      	pop	{r4, r5, r6, pc}
    5e40:	8993      	ldrh	r3, [r2, #12]
    5e42:	2220      	movs	r2, #32
    5e44:	4393      	bics	r3, r2
    5e46:	6b62      	ldr	r2, [r4, #52]	; 0x34
    5e48:	81a3      	strh	r3, [r4, #12]
    5e4a:	b2ce      	uxtb	r6, r1
    5e4c:	b2cd      	uxtb	r5, r1
    5e4e:	6863      	ldr	r3, [r4, #4]
    5e50:	2a00      	cmp	r2, #0
    5e52:	d010      	beq.n	5e76 <_sungetc_r+0x46>
    5e54:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    5e56:	4293      	cmp	r3, r2
    5e58:	da07      	bge.n	5e6a <_sungetc_r+0x3a>
    5e5a:	6823      	ldr	r3, [r4, #0]
    5e5c:	3b01      	subs	r3, #1
    5e5e:	6023      	str	r3, [r4, #0]
    5e60:	701e      	strb	r6, [r3, #0]
    5e62:	6863      	ldr	r3, [r4, #4]
    5e64:	3301      	adds	r3, #1
    5e66:	6063      	str	r3, [r4, #4]
    5e68:	e7e8      	b.n	5e3c <_sungetc_r+0xc>
    5e6a:	0021      	movs	r1, r4
    5e6c:	f000 fe0e 	bl	6a8c <__submore>
    5e70:	2800      	cmp	r0, #0
    5e72:	d0f2      	beq.n	5e5a <_sungetc_r+0x2a>
    5e74:	e7e0      	b.n	5e38 <_sungetc_r+0x8>
    5e76:	6921      	ldr	r1, [r4, #16]
    5e78:	6822      	ldr	r2, [r4, #0]
    5e7a:	2900      	cmp	r1, #0
    5e7c:	d007      	beq.n	5e8e <_sungetc_r+0x5e>
    5e7e:	4291      	cmp	r1, r2
    5e80:	d205      	bcs.n	5e8e <_sungetc_r+0x5e>
    5e82:	1e51      	subs	r1, r2, #1
    5e84:	7808      	ldrb	r0, [r1, #0]
    5e86:	4285      	cmp	r5, r0
    5e88:	d101      	bne.n	5e8e <_sungetc_r+0x5e>
    5e8a:	6021      	str	r1, [r4, #0]
    5e8c:	e7ea      	b.n	5e64 <_sungetc_r+0x34>
    5e8e:	6423      	str	r3, [r4, #64]	; 0x40
    5e90:	0023      	movs	r3, r4
    5e92:	3344      	adds	r3, #68	; 0x44
    5e94:	6363      	str	r3, [r4, #52]	; 0x34
    5e96:	2303      	movs	r3, #3
    5e98:	63a3      	str	r3, [r4, #56]	; 0x38
    5e9a:	0023      	movs	r3, r4
    5e9c:	3346      	adds	r3, #70	; 0x46
    5e9e:	63e2      	str	r2, [r4, #60]	; 0x3c
    5ea0:	701e      	strb	r6, [r3, #0]
    5ea2:	6023      	str	r3, [r4, #0]
    5ea4:	2301      	movs	r3, #1
    5ea6:	e7de      	b.n	5e66 <_sungetc_r+0x36>

00005ea8 <__ssrefill_r>:
    5ea8:	b510      	push	{r4, lr}
    5eaa:	000c      	movs	r4, r1
    5eac:	6b49      	ldr	r1, [r1, #52]	; 0x34
    5eae:	2900      	cmp	r1, #0
    5eb0:	d00e      	beq.n	5ed0 <__ssrefill_r+0x28>
    5eb2:	0023      	movs	r3, r4
    5eb4:	3344      	adds	r3, #68	; 0x44
    5eb6:	4299      	cmp	r1, r3
    5eb8:	d001      	beq.n	5ebe <__ssrefill_r+0x16>
    5eba:	f7ff fd05 	bl	58c8 <_free_r>
    5ebe:	2000      	movs	r0, #0
    5ec0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5ec2:	6360      	str	r0, [r4, #52]	; 0x34
    5ec4:	6063      	str	r3, [r4, #4]
    5ec6:	4283      	cmp	r3, r0
    5ec8:	d002      	beq.n	5ed0 <__ssrefill_r+0x28>
    5eca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5ecc:	6023      	str	r3, [r4, #0]
    5ece:	bd10      	pop	{r4, pc}
    5ed0:	6923      	ldr	r3, [r4, #16]
    5ed2:	2001      	movs	r0, #1
    5ed4:	6023      	str	r3, [r4, #0]
    5ed6:	2300      	movs	r3, #0
    5ed8:	89a2      	ldrh	r2, [r4, #12]
    5eda:	6063      	str	r3, [r4, #4]
    5edc:	3320      	adds	r3, #32
    5ede:	4313      	orrs	r3, r2
    5ee0:	81a3      	strh	r3, [r4, #12]
    5ee2:	4240      	negs	r0, r0
    5ee4:	e7f3      	b.n	5ece <__ssrefill_r+0x26>
	...

00005ee8 <__ssvfiscanf_r>:
    5ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5eea:	4cbd      	ldr	r4, [pc, #756]	; (61e0 <__ssvfiscanf_r+0x2f8>)
    5eec:	2586      	movs	r5, #134	; 0x86
    5eee:	44a5      	add	sp, r4
    5ef0:	9303      	str	r3, [sp, #12]
    5ef2:	2300      	movs	r3, #0
    5ef4:	9348      	str	r3, [sp, #288]	; 0x120
    5ef6:	9349      	str	r3, [sp, #292]	; 0x124
    5ef8:	ab05      	add	r3, sp, #20
    5efa:	934a      	str	r3, [sp, #296]	; 0x128
    5efc:	23be      	movs	r3, #190	; 0xbe
    5efe:	006d      	lsls	r5, r5, #1
    5f00:	9000      	str	r0, [sp, #0]
    5f02:	000c      	movs	r4, r1
    5f04:	a802      	add	r0, sp, #8
    5f06:	49b7      	ldr	r1, [pc, #732]	; (61e4 <__ssvfiscanf_r+0x2fc>)
    5f08:	005b      	lsls	r3, r3, #1
    5f0a:	1940      	adds	r0, r0, r5
    5f0c:	27c0      	movs	r7, #192	; 0xc0
    5f0e:	50c1      	str	r1, [r0, r3]
    5f10:	ab02      	add	r3, sp, #8
    5f12:	195b      	adds	r3, r3, r5
    5f14:	0015      	movs	r5, r2
    5f16:	49b4      	ldr	r1, [pc, #720]	; (61e8 <__ssvfiscanf_r+0x300>)
    5f18:	007f      	lsls	r7, r7, #1
    5f1a:	51d9      	str	r1, [r3, r7]
    5f1c:	782b      	ldrb	r3, [r5, #0]
    5f1e:	2b00      	cmp	r3, #0
    5f20:	d100      	bne.n	5f24 <__ssvfiscanf_r+0x3c>
    5f22:	e15b      	b.n	61dc <__ssvfiscanf_r+0x2f4>
    5f24:	f000 fdf4 	bl	6b10 <__locale_ctype_ptr>
    5f28:	2208      	movs	r2, #8
    5f2a:	782b      	ldrb	r3, [r5, #0]
    5f2c:	18c0      	adds	r0, r0, r3
    5f2e:	9301      	str	r3, [sp, #4]
    5f30:	7843      	ldrb	r3, [r0, #1]
    5f32:	4013      	ands	r3, r2
    5f34:	d141      	bne.n	5fba <__ssvfiscanf_r+0xd2>
    5f36:	9a01      	ldr	r2, [sp, #4]
    5f38:	1c6e      	adds	r6, r5, #1
    5f3a:	2a25      	cmp	r2, #37	; 0x25
    5f3c:	d000      	beq.n	5f40 <__ssvfiscanf_r+0x58>
    5f3e:	e0a8      	b.n	6092 <__ssvfiscanf_r+0x1aa>
    5f40:	9347      	str	r3, [sp, #284]	; 0x11c
    5f42:	9345      	str	r3, [sp, #276]	; 0x114
    5f44:	786b      	ldrb	r3, [r5, #1]
    5f46:	2b2a      	cmp	r3, #42	; 0x2a
    5f48:	d102      	bne.n	5f50 <__ssvfiscanf_r+0x68>
    5f4a:	3b1a      	subs	r3, #26
    5f4c:	9345      	str	r3, [sp, #276]	; 0x114
    5f4e:	1cae      	adds	r6, r5, #2
    5f50:	0035      	movs	r5, r6
    5f52:	220a      	movs	r2, #10
    5f54:	7829      	ldrb	r1, [r5, #0]
    5f56:	000b      	movs	r3, r1
    5f58:	3b30      	subs	r3, #48	; 0x30
    5f5a:	2b09      	cmp	r3, #9
    5f5c:	d948      	bls.n	5ff0 <__ssvfiscanf_r+0x108>
    5f5e:	4ea3      	ldr	r6, [pc, #652]	; (61ec <__ssvfiscanf_r+0x304>)
    5f60:	2203      	movs	r2, #3
    5f62:	0030      	movs	r0, r6
    5f64:	f000 fdf4 	bl	6b50 <memchr>
    5f68:	2800      	cmp	r0, #0
    5f6a:	d007      	beq.n	5f7c <__ssvfiscanf_r+0x94>
    5f6c:	2301      	movs	r3, #1
    5f6e:	1b80      	subs	r0, r0, r6
    5f70:	4083      	lsls	r3, r0
    5f72:	9a45      	ldr	r2, [sp, #276]	; 0x114
    5f74:	3501      	adds	r5, #1
    5f76:	4313      	orrs	r3, r2
    5f78:	9202      	str	r2, [sp, #8]
    5f7a:	9345      	str	r3, [sp, #276]	; 0x114
    5f7c:	782b      	ldrb	r3, [r5, #0]
    5f7e:	1c6e      	adds	r6, r5, #1
    5f80:	2b67      	cmp	r3, #103	; 0x67
    5f82:	d858      	bhi.n	6036 <__ssvfiscanf_r+0x14e>
    5f84:	2b65      	cmp	r3, #101	; 0x65
    5f86:	d300      	bcc.n	5f8a <__ssvfiscanf_r+0xa2>
    5f88:	e0dd      	b.n	6146 <__ssvfiscanf_r+0x25e>
    5f8a:	2b47      	cmp	r3, #71	; 0x47
    5f8c:	d838      	bhi.n	6000 <__ssvfiscanf_r+0x118>
    5f8e:	2b45      	cmp	r3, #69	; 0x45
    5f90:	d300      	bcc.n	5f94 <__ssvfiscanf_r+0xac>
    5f92:	e0d8      	b.n	6146 <__ssvfiscanf_r+0x25e>
    5f94:	2b00      	cmp	r3, #0
    5f96:	d100      	bne.n	5f9a <__ssvfiscanf_r+0xb2>
    5f98:	e11d      	b.n	61d6 <__ssvfiscanf_r+0x2ee>
    5f9a:	2b25      	cmp	r3, #37	; 0x25
    5f9c:	d079      	beq.n	6092 <__ssvfiscanf_r+0x1aa>
    5f9e:	2303      	movs	r3, #3
    5fa0:	934b      	str	r3, [sp, #300]	; 0x12c
    5fa2:	3307      	adds	r3, #7
    5fa4:	9346      	str	r3, [sp, #280]	; 0x118
    5fa6:	e053      	b.n	6050 <__ssvfiscanf_r+0x168>
    5fa8:	9a49      	ldr	r2, [sp, #292]	; 0x124
    5faa:	3301      	adds	r3, #1
    5fac:	9201      	str	r2, [sp, #4]
    5fae:	3201      	adds	r2, #1
    5fb0:	9249      	str	r2, [sp, #292]	; 0x124
    5fb2:	6862      	ldr	r2, [r4, #4]
    5fb4:	6023      	str	r3, [r4, #0]
    5fb6:	3a01      	subs	r2, #1
    5fb8:	6062      	str	r2, [r4, #4]
    5fba:	6863      	ldr	r3, [r4, #4]
    5fbc:	2b00      	cmp	r3, #0
    5fbe:	dd0b      	ble.n	5fd8 <__ssvfiscanf_r+0xf0>
    5fc0:	f000 fda6 	bl	6b10 <__locale_ctype_ptr>
    5fc4:	2108      	movs	r1, #8
    5fc6:	6823      	ldr	r3, [r4, #0]
    5fc8:	781a      	ldrb	r2, [r3, #0]
    5fca:	1880      	adds	r0, r0, r2
    5fcc:	7842      	ldrb	r2, [r0, #1]
    5fce:	420a      	tst	r2, r1
    5fd0:	d1ea      	bne.n	5fa8 <__ssvfiscanf_r+0xc0>
    5fd2:	1c6e      	adds	r6, r5, #1
    5fd4:	0035      	movs	r5, r6
    5fd6:	e7a1      	b.n	5f1c <__ssvfiscanf_r+0x34>
    5fd8:	2286      	movs	r2, #134	; 0x86
    5fda:	ab02      	add	r3, sp, #8
    5fdc:	0052      	lsls	r2, r2, #1
    5fde:	189b      	adds	r3, r3, r2
    5fe0:	59db      	ldr	r3, [r3, r7]
    5fe2:	0021      	movs	r1, r4
    5fe4:	9800      	ldr	r0, [sp, #0]
    5fe6:	9301      	str	r3, [sp, #4]
    5fe8:	4798      	blx	r3
    5fea:	2800      	cmp	r0, #0
    5fec:	d0e8      	beq.n	5fc0 <__ssvfiscanf_r+0xd8>
    5fee:	e7f0      	b.n	5fd2 <__ssvfiscanf_r+0xea>
    5ff0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    5ff2:	3501      	adds	r5, #1
    5ff4:	9302      	str	r3, [sp, #8]
    5ff6:	4353      	muls	r3, r2
    5ff8:	3b30      	subs	r3, #48	; 0x30
    5ffa:	1859      	adds	r1, r3, r1
    5ffc:	9147      	str	r1, [sp, #284]	; 0x11c
    5ffe:	e7a9      	b.n	5f54 <__ssvfiscanf_r+0x6c>
    6000:	2b5b      	cmp	r3, #91	; 0x5b
    6002:	d100      	bne.n	6006 <__ssvfiscanf_r+0x11e>
    6004:	e077      	b.n	60f6 <__ssvfiscanf_r+0x20e>
    6006:	d80f      	bhi.n	6028 <__ssvfiscanf_r+0x140>
    6008:	2b58      	cmp	r3, #88	; 0x58
    600a:	d1c8      	bne.n	5f9e <__ssvfiscanf_r+0xb6>
    600c:	9a45      	ldr	r2, [sp, #276]	; 0x114
    600e:	9201      	str	r2, [sp, #4]
    6010:	2280      	movs	r2, #128	; 0x80
    6012:	9901      	ldr	r1, [sp, #4]
    6014:	0092      	lsls	r2, r2, #2
    6016:	430a      	orrs	r2, r1
    6018:	9245      	str	r2, [sp, #276]	; 0x114
    601a:	2210      	movs	r2, #16
    601c:	9246      	str	r2, [sp, #280]	; 0x118
    601e:	2203      	movs	r2, #3
    6020:	2b6e      	cmp	r3, #110	; 0x6e
    6022:	dd14      	ble.n	604e <__ssvfiscanf_r+0x166>
    6024:	3201      	adds	r2, #1
    6026:	e012      	b.n	604e <__ssvfiscanf_r+0x166>
    6028:	2b63      	cmp	r3, #99	; 0x63
    602a:	d100      	bne.n	602e <__ssvfiscanf_r+0x146>
    602c:	e071      	b.n	6112 <__ssvfiscanf_r+0x22a>
    602e:	2b64      	cmp	r3, #100	; 0x64
    6030:	d1b5      	bne.n	5f9e <__ssvfiscanf_r+0xb6>
    6032:	220a      	movs	r2, #10
    6034:	e7f2      	b.n	601c <__ssvfiscanf_r+0x134>
    6036:	2b70      	cmp	r3, #112	; 0x70
    6038:	d052      	beq.n	60e0 <__ssvfiscanf_r+0x1f8>
    603a:	d822      	bhi.n	6082 <__ssvfiscanf_r+0x19a>
    603c:	2b6e      	cmp	r3, #110	; 0x6e
    603e:	d100      	bne.n	6042 <__ssvfiscanf_r+0x15a>
    6040:	e06f      	b.n	6122 <__ssvfiscanf_r+0x23a>
    6042:	d854      	bhi.n	60ee <__ssvfiscanf_r+0x206>
    6044:	2b69      	cmp	r3, #105	; 0x69
    6046:	d1aa      	bne.n	5f9e <__ssvfiscanf_r+0xb6>
    6048:	2300      	movs	r3, #0
    604a:	2203      	movs	r2, #3
    604c:	9346      	str	r3, [sp, #280]	; 0x118
    604e:	924b      	str	r2, [sp, #300]	; 0x12c
    6050:	6863      	ldr	r3, [r4, #4]
    6052:	2b00      	cmp	r3, #0
    6054:	dc00      	bgt.n	6058 <__ssvfiscanf_r+0x170>
    6056:	e078      	b.n	614a <__ssvfiscanf_r+0x262>
    6058:	9b45      	ldr	r3, [sp, #276]	; 0x114
    605a:	9301      	str	r3, [sp, #4]
    605c:	065b      	lsls	r3, r3, #25
    605e:	d400      	bmi.n	6062 <__ssvfiscanf_r+0x17a>
    6060:	e08b      	b.n	617a <__ssvfiscanf_r+0x292>
    6062:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    6064:	2b02      	cmp	r3, #2
    6066:	dd00      	ble.n	606a <__ssvfiscanf_r+0x182>
    6068:	e09d      	b.n	61a6 <__ssvfiscanf_r+0x2be>
    606a:	ab03      	add	r3, sp, #12
    606c:	0022      	movs	r2, r4
    606e:	a945      	add	r1, sp, #276	; 0x114
    6070:	9800      	ldr	r0, [sp, #0]
    6072:	f000 fa47 	bl	6504 <_scanf_chars>
    6076:	2801      	cmp	r0, #1
    6078:	d100      	bne.n	607c <__ssvfiscanf_r+0x194>
    607a:	e0af      	b.n	61dc <__ssvfiscanf_r+0x2f4>
    607c:	2802      	cmp	r0, #2
    607e:	d1a9      	bne.n	5fd4 <__ssvfiscanf_r+0xec>
    6080:	e025      	b.n	60ce <__ssvfiscanf_r+0x1e6>
    6082:	2b75      	cmp	r3, #117	; 0x75
    6084:	d0d5      	beq.n	6032 <__ssvfiscanf_r+0x14a>
    6086:	2b78      	cmp	r3, #120	; 0x78
    6088:	d0c0      	beq.n	600c <__ssvfiscanf_r+0x124>
    608a:	2b73      	cmp	r3, #115	; 0x73
    608c:	d187      	bne.n	5f9e <__ssvfiscanf_r+0xb6>
    608e:	2302      	movs	r3, #2
    6090:	e03d      	b.n	610e <__ssvfiscanf_r+0x226>
    6092:	6863      	ldr	r3, [r4, #4]
    6094:	2b00      	cmp	r3, #0
    6096:	dd0f      	ble.n	60b8 <__ssvfiscanf_r+0x1d0>
    6098:	6823      	ldr	r3, [r4, #0]
    609a:	9901      	ldr	r1, [sp, #4]
    609c:	781a      	ldrb	r2, [r3, #0]
    609e:	4291      	cmp	r1, r2
    60a0:	d000      	beq.n	60a4 <__ssvfiscanf_r+0x1bc>
    60a2:	e09b      	b.n	61dc <__ssvfiscanf_r+0x2f4>
    60a4:	3301      	adds	r3, #1
    60a6:	6862      	ldr	r2, [r4, #4]
    60a8:	6023      	str	r3, [r4, #0]
    60aa:	9b49      	ldr	r3, [sp, #292]	; 0x124
    60ac:	3a01      	subs	r2, #1
    60ae:	9301      	str	r3, [sp, #4]
    60b0:	3301      	adds	r3, #1
    60b2:	6062      	str	r2, [r4, #4]
    60b4:	9349      	str	r3, [sp, #292]	; 0x124
    60b6:	e78d      	b.n	5fd4 <__ssvfiscanf_r+0xec>
    60b8:	2286      	movs	r2, #134	; 0x86
    60ba:	ab02      	add	r3, sp, #8
    60bc:	0052      	lsls	r2, r2, #1
    60be:	189b      	adds	r3, r3, r2
    60c0:	59db      	ldr	r3, [r3, r7]
    60c2:	0021      	movs	r1, r4
    60c4:	9800      	ldr	r0, [sp, #0]
    60c6:	9302      	str	r3, [sp, #8]
    60c8:	4798      	blx	r3
    60ca:	2800      	cmp	r0, #0
    60cc:	d0e4      	beq.n	6098 <__ssvfiscanf_r+0x1b0>
    60ce:	9848      	ldr	r0, [sp, #288]	; 0x120
    60d0:	2800      	cmp	r0, #0
    60d2:	d000      	beq.n	60d6 <__ssvfiscanf_r+0x1ee>
    60d4:	e07b      	b.n	61ce <__ssvfiscanf_r+0x2e6>
    60d6:	3801      	subs	r0, #1
    60d8:	23a7      	movs	r3, #167	; 0xa7
    60da:	009b      	lsls	r3, r3, #2
    60dc:	449d      	add	sp, r3
    60de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
    60e2:	9201      	str	r2, [sp, #4]
    60e4:	2220      	movs	r2, #32
    60e6:	9901      	ldr	r1, [sp, #4]
    60e8:	430a      	orrs	r2, r1
    60ea:	9245      	str	r2, [sp, #276]	; 0x114
    60ec:	e78e      	b.n	600c <__ssvfiscanf_r+0x124>
    60ee:	2308      	movs	r3, #8
    60f0:	2204      	movs	r2, #4
    60f2:	9346      	str	r3, [sp, #280]	; 0x118
    60f4:	e7ab      	b.n	604e <__ssvfiscanf_r+0x166>
    60f6:	0031      	movs	r1, r6
    60f8:	a805      	add	r0, sp, #20
    60fa:	f000 fb67 	bl	67cc <__sccl>
    60fe:	9b45      	ldr	r3, [sp, #276]	; 0x114
    6100:	0006      	movs	r6, r0
    6102:	9301      	str	r3, [sp, #4]
    6104:	2340      	movs	r3, #64	; 0x40
    6106:	9a01      	ldr	r2, [sp, #4]
    6108:	4313      	orrs	r3, r2
    610a:	9345      	str	r3, [sp, #276]	; 0x114
    610c:	2301      	movs	r3, #1
    610e:	934b      	str	r3, [sp, #300]	; 0x12c
    6110:	e79e      	b.n	6050 <__ssvfiscanf_r+0x168>
    6112:	9b45      	ldr	r3, [sp, #276]	; 0x114
    6114:	9301      	str	r3, [sp, #4]
    6116:	2340      	movs	r3, #64	; 0x40
    6118:	9a01      	ldr	r2, [sp, #4]
    611a:	4313      	orrs	r3, r2
    611c:	9345      	str	r3, [sp, #276]	; 0x114
    611e:	2300      	movs	r3, #0
    6120:	e7f5      	b.n	610e <__ssvfiscanf_r+0x226>
    6122:	9945      	ldr	r1, [sp, #276]	; 0x114
    6124:	06cb      	lsls	r3, r1, #27
    6126:	d500      	bpl.n	612a <__ssvfiscanf_r+0x242>
    6128:	e754      	b.n	5fd4 <__ssvfiscanf_r+0xec>
    612a:	9b03      	ldr	r3, [sp, #12]
    612c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    612e:	07c8      	lsls	r0, r1, #31
    6130:	d504      	bpl.n	613c <__ssvfiscanf_r+0x254>
    6132:	1d19      	adds	r1, r3, #4
    6134:	9103      	str	r1, [sp, #12]
    6136:	681b      	ldr	r3, [r3, #0]
    6138:	801a      	strh	r2, [r3, #0]
    613a:	e74b      	b.n	5fd4 <__ssvfiscanf_r+0xec>
    613c:	1d19      	adds	r1, r3, #4
    613e:	9103      	str	r1, [sp, #12]
    6140:	681b      	ldr	r3, [r3, #0]
    6142:	601a      	str	r2, [r3, #0]
    6144:	e746      	b.n	5fd4 <__ssvfiscanf_r+0xec>
    6146:	2305      	movs	r3, #5
    6148:	e7e1      	b.n	610e <__ssvfiscanf_r+0x226>
    614a:	2286      	movs	r2, #134	; 0x86
    614c:	ab02      	add	r3, sp, #8
    614e:	0052      	lsls	r2, r2, #1
    6150:	189b      	adds	r3, r3, r2
    6152:	59db      	ldr	r3, [r3, r7]
    6154:	0021      	movs	r1, r4
    6156:	9800      	ldr	r0, [sp, #0]
    6158:	9301      	str	r3, [sp, #4]
    615a:	4798      	blx	r3
    615c:	2800      	cmp	r0, #0
    615e:	d100      	bne.n	6162 <__ssvfiscanf_r+0x27a>
    6160:	e77a      	b.n	6058 <__ssvfiscanf_r+0x170>
    6162:	e7b4      	b.n	60ce <__ssvfiscanf_r+0x1e6>
    6164:	9a49      	ldr	r2, [sp, #292]	; 0x124
    6166:	9201      	str	r2, [sp, #4]
    6168:	3201      	adds	r2, #1
    616a:	9249      	str	r2, [sp, #292]	; 0x124
    616c:	6862      	ldr	r2, [r4, #4]
    616e:	3a01      	subs	r2, #1
    6170:	6062      	str	r2, [r4, #4]
    6172:	2a00      	cmp	r2, #0
    6174:	dd0b      	ble.n	618e <__ssvfiscanf_r+0x2a6>
    6176:	3301      	adds	r3, #1
    6178:	6023      	str	r3, [r4, #0]
    617a:	f000 fcc9 	bl	6b10 <__locale_ctype_ptr>
    617e:	2108      	movs	r1, #8
    6180:	6823      	ldr	r3, [r4, #0]
    6182:	781a      	ldrb	r2, [r3, #0]
    6184:	1880      	adds	r0, r0, r2
    6186:	7842      	ldrb	r2, [r0, #1]
    6188:	420a      	tst	r2, r1
    618a:	d1eb      	bne.n	6164 <__ssvfiscanf_r+0x27c>
    618c:	e769      	b.n	6062 <__ssvfiscanf_r+0x17a>
    618e:	2286      	movs	r2, #134	; 0x86
    6190:	ab02      	add	r3, sp, #8
    6192:	0052      	lsls	r2, r2, #1
    6194:	189b      	adds	r3, r3, r2
    6196:	59db      	ldr	r3, [r3, r7]
    6198:	0021      	movs	r1, r4
    619a:	9800      	ldr	r0, [sp, #0]
    619c:	9301      	str	r3, [sp, #4]
    619e:	4798      	blx	r3
    61a0:	2800      	cmp	r0, #0
    61a2:	d0ea      	beq.n	617a <__ssvfiscanf_r+0x292>
    61a4:	e793      	b.n	60ce <__ssvfiscanf_r+0x1e6>
    61a6:	2b04      	cmp	r3, #4
    61a8:	dc06      	bgt.n	61b8 <__ssvfiscanf_r+0x2d0>
    61aa:	ab03      	add	r3, sp, #12
    61ac:	0022      	movs	r2, r4
    61ae:	a945      	add	r1, sp, #276	; 0x114
    61b0:	9800      	ldr	r0, [sp, #0]
    61b2:	f000 fa0b 	bl	65cc <_scanf_i>
    61b6:	e75e      	b.n	6076 <__ssvfiscanf_r+0x18e>
    61b8:	4b0d      	ldr	r3, [pc, #52]	; (61f0 <__ssvfiscanf_r+0x308>)
    61ba:	2b00      	cmp	r3, #0
    61bc:	d100      	bne.n	61c0 <__ssvfiscanf_r+0x2d8>
    61be:	e709      	b.n	5fd4 <__ssvfiscanf_r+0xec>
    61c0:	ab03      	add	r3, sp, #12
    61c2:	0022      	movs	r2, r4
    61c4:	a945      	add	r1, sp, #276	; 0x114
    61c6:	9800      	ldr	r0, [sp, #0]
    61c8:	e000      	b.n	61cc <__ssvfiscanf_r+0x2e4>
    61ca:	bf00      	nop
    61cc:	e753      	b.n	6076 <__ssvfiscanf_r+0x18e>
    61ce:	89a3      	ldrh	r3, [r4, #12]
    61d0:	065b      	lsls	r3, r3, #25
    61d2:	d400      	bmi.n	61d6 <__ssvfiscanf_r+0x2ee>
    61d4:	e780      	b.n	60d8 <__ssvfiscanf_r+0x1f0>
    61d6:	2001      	movs	r0, #1
    61d8:	4240      	negs	r0, r0
    61da:	e77d      	b.n	60d8 <__ssvfiscanf_r+0x1f0>
    61dc:	9848      	ldr	r0, [sp, #288]	; 0x120
    61de:	e77b      	b.n	60d8 <__ssvfiscanf_r+0x1f0>
    61e0:	fffffd64 	.word	0xfffffd64
    61e4:	00005e31 	.word	0x00005e31
    61e8:	00005ea9 	.word	0x00005ea9
    61ec:	000070e9 	.word	0x000070e9
    61f0:	00000000 	.word	0x00000000

000061f4 <_printf_common>:
    61f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    61f6:	0015      	movs	r5, r2
    61f8:	9301      	str	r3, [sp, #4]
    61fa:	688a      	ldr	r2, [r1, #8]
    61fc:	690b      	ldr	r3, [r1, #16]
    61fe:	9000      	str	r0, [sp, #0]
    6200:	000c      	movs	r4, r1
    6202:	4293      	cmp	r3, r2
    6204:	da00      	bge.n	6208 <_printf_common+0x14>
    6206:	0013      	movs	r3, r2
    6208:	0022      	movs	r2, r4
    620a:	602b      	str	r3, [r5, #0]
    620c:	3243      	adds	r2, #67	; 0x43
    620e:	7812      	ldrb	r2, [r2, #0]
    6210:	2a00      	cmp	r2, #0
    6212:	d001      	beq.n	6218 <_printf_common+0x24>
    6214:	3301      	adds	r3, #1
    6216:	602b      	str	r3, [r5, #0]
    6218:	6823      	ldr	r3, [r4, #0]
    621a:	069b      	lsls	r3, r3, #26
    621c:	d502      	bpl.n	6224 <_printf_common+0x30>
    621e:	682b      	ldr	r3, [r5, #0]
    6220:	3302      	adds	r3, #2
    6222:	602b      	str	r3, [r5, #0]
    6224:	2706      	movs	r7, #6
    6226:	6823      	ldr	r3, [r4, #0]
    6228:	401f      	ands	r7, r3
    622a:	d027      	beq.n	627c <_printf_common+0x88>
    622c:	0023      	movs	r3, r4
    622e:	3343      	adds	r3, #67	; 0x43
    6230:	781b      	ldrb	r3, [r3, #0]
    6232:	1e5a      	subs	r2, r3, #1
    6234:	4193      	sbcs	r3, r2
    6236:	6822      	ldr	r2, [r4, #0]
    6238:	0692      	lsls	r2, r2, #26
    623a:	d430      	bmi.n	629e <_printf_common+0xaa>
    623c:	0022      	movs	r2, r4
    623e:	9901      	ldr	r1, [sp, #4]
    6240:	3243      	adds	r2, #67	; 0x43
    6242:	9800      	ldr	r0, [sp, #0]
    6244:	9e08      	ldr	r6, [sp, #32]
    6246:	47b0      	blx	r6
    6248:	1c43      	adds	r3, r0, #1
    624a:	d025      	beq.n	6298 <_printf_common+0xa4>
    624c:	2306      	movs	r3, #6
    624e:	6820      	ldr	r0, [r4, #0]
    6250:	682a      	ldr	r2, [r5, #0]
    6252:	68e1      	ldr	r1, [r4, #12]
    6254:	4003      	ands	r3, r0
    6256:	2500      	movs	r5, #0
    6258:	2b04      	cmp	r3, #4
    625a:	d103      	bne.n	6264 <_printf_common+0x70>
    625c:	1a8d      	subs	r5, r1, r2
    625e:	43eb      	mvns	r3, r5
    6260:	17db      	asrs	r3, r3, #31
    6262:	401d      	ands	r5, r3
    6264:	68a3      	ldr	r3, [r4, #8]
    6266:	6922      	ldr	r2, [r4, #16]
    6268:	4293      	cmp	r3, r2
    626a:	dd01      	ble.n	6270 <_printf_common+0x7c>
    626c:	1a9b      	subs	r3, r3, r2
    626e:	18ed      	adds	r5, r5, r3
    6270:	2700      	movs	r7, #0
    6272:	42bd      	cmp	r5, r7
    6274:	d120      	bne.n	62b8 <_printf_common+0xc4>
    6276:	2000      	movs	r0, #0
    6278:	e010      	b.n	629c <_printf_common+0xa8>
    627a:	3701      	adds	r7, #1
    627c:	68e3      	ldr	r3, [r4, #12]
    627e:	682a      	ldr	r2, [r5, #0]
    6280:	1a9b      	subs	r3, r3, r2
    6282:	429f      	cmp	r7, r3
    6284:	dad2      	bge.n	622c <_printf_common+0x38>
    6286:	0022      	movs	r2, r4
    6288:	2301      	movs	r3, #1
    628a:	3219      	adds	r2, #25
    628c:	9901      	ldr	r1, [sp, #4]
    628e:	9800      	ldr	r0, [sp, #0]
    6290:	9e08      	ldr	r6, [sp, #32]
    6292:	47b0      	blx	r6
    6294:	1c43      	adds	r3, r0, #1
    6296:	d1f0      	bne.n	627a <_printf_common+0x86>
    6298:	2001      	movs	r0, #1
    629a:	4240      	negs	r0, r0
    629c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    629e:	2030      	movs	r0, #48	; 0x30
    62a0:	18e1      	adds	r1, r4, r3
    62a2:	3143      	adds	r1, #67	; 0x43
    62a4:	7008      	strb	r0, [r1, #0]
    62a6:	0021      	movs	r1, r4
    62a8:	1c5a      	adds	r2, r3, #1
    62aa:	3145      	adds	r1, #69	; 0x45
    62ac:	7809      	ldrb	r1, [r1, #0]
    62ae:	18a2      	adds	r2, r4, r2
    62b0:	3243      	adds	r2, #67	; 0x43
    62b2:	3302      	adds	r3, #2
    62b4:	7011      	strb	r1, [r2, #0]
    62b6:	e7c1      	b.n	623c <_printf_common+0x48>
    62b8:	0022      	movs	r2, r4
    62ba:	2301      	movs	r3, #1
    62bc:	321a      	adds	r2, #26
    62be:	9901      	ldr	r1, [sp, #4]
    62c0:	9800      	ldr	r0, [sp, #0]
    62c2:	9e08      	ldr	r6, [sp, #32]
    62c4:	47b0      	blx	r6
    62c6:	1c43      	adds	r3, r0, #1
    62c8:	d0e6      	beq.n	6298 <_printf_common+0xa4>
    62ca:	3701      	adds	r7, #1
    62cc:	e7d1      	b.n	6272 <_printf_common+0x7e>
	...

000062d0 <_printf_i>:
    62d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    62d2:	b08b      	sub	sp, #44	; 0x2c
    62d4:	9206      	str	r2, [sp, #24]
    62d6:	000a      	movs	r2, r1
    62d8:	3243      	adds	r2, #67	; 0x43
    62da:	9307      	str	r3, [sp, #28]
    62dc:	9005      	str	r0, [sp, #20]
    62de:	9204      	str	r2, [sp, #16]
    62e0:	7e0a      	ldrb	r2, [r1, #24]
    62e2:	000c      	movs	r4, r1
    62e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    62e6:	2a6e      	cmp	r2, #110	; 0x6e
    62e8:	d100      	bne.n	62ec <_printf_i+0x1c>
    62ea:	e08f      	b.n	640c <_printf_i+0x13c>
    62ec:	d817      	bhi.n	631e <_printf_i+0x4e>
    62ee:	2a63      	cmp	r2, #99	; 0x63
    62f0:	d02c      	beq.n	634c <_printf_i+0x7c>
    62f2:	d808      	bhi.n	6306 <_printf_i+0x36>
    62f4:	2a00      	cmp	r2, #0
    62f6:	d100      	bne.n	62fa <_printf_i+0x2a>
    62f8:	e099      	b.n	642e <_printf_i+0x15e>
    62fa:	2a58      	cmp	r2, #88	; 0x58
    62fc:	d054      	beq.n	63a8 <_printf_i+0xd8>
    62fe:	0026      	movs	r6, r4
    6300:	3642      	adds	r6, #66	; 0x42
    6302:	7032      	strb	r2, [r6, #0]
    6304:	e029      	b.n	635a <_printf_i+0x8a>
    6306:	2a64      	cmp	r2, #100	; 0x64
    6308:	d001      	beq.n	630e <_printf_i+0x3e>
    630a:	2a69      	cmp	r2, #105	; 0x69
    630c:	d1f7      	bne.n	62fe <_printf_i+0x2e>
    630e:	6821      	ldr	r1, [r4, #0]
    6310:	681a      	ldr	r2, [r3, #0]
    6312:	0608      	lsls	r0, r1, #24
    6314:	d523      	bpl.n	635e <_printf_i+0x8e>
    6316:	1d11      	adds	r1, r2, #4
    6318:	6019      	str	r1, [r3, #0]
    631a:	6815      	ldr	r5, [r2, #0]
    631c:	e025      	b.n	636a <_printf_i+0x9a>
    631e:	2a73      	cmp	r2, #115	; 0x73
    6320:	d100      	bne.n	6324 <_printf_i+0x54>
    6322:	e088      	b.n	6436 <_printf_i+0x166>
    6324:	d808      	bhi.n	6338 <_printf_i+0x68>
    6326:	2a6f      	cmp	r2, #111	; 0x6f
    6328:	d029      	beq.n	637e <_printf_i+0xae>
    632a:	2a70      	cmp	r2, #112	; 0x70
    632c:	d1e7      	bne.n	62fe <_printf_i+0x2e>
    632e:	2220      	movs	r2, #32
    6330:	6809      	ldr	r1, [r1, #0]
    6332:	430a      	orrs	r2, r1
    6334:	6022      	str	r2, [r4, #0]
    6336:	e003      	b.n	6340 <_printf_i+0x70>
    6338:	2a75      	cmp	r2, #117	; 0x75
    633a:	d020      	beq.n	637e <_printf_i+0xae>
    633c:	2a78      	cmp	r2, #120	; 0x78
    633e:	d1de      	bne.n	62fe <_printf_i+0x2e>
    6340:	0022      	movs	r2, r4
    6342:	2178      	movs	r1, #120	; 0x78
    6344:	3245      	adds	r2, #69	; 0x45
    6346:	7011      	strb	r1, [r2, #0]
    6348:	4a6c      	ldr	r2, [pc, #432]	; (64fc <_printf_i+0x22c>)
    634a:	e030      	b.n	63ae <_printf_i+0xde>
    634c:	000e      	movs	r6, r1
    634e:	681a      	ldr	r2, [r3, #0]
    6350:	3642      	adds	r6, #66	; 0x42
    6352:	1d11      	adds	r1, r2, #4
    6354:	6019      	str	r1, [r3, #0]
    6356:	6813      	ldr	r3, [r2, #0]
    6358:	7033      	strb	r3, [r6, #0]
    635a:	2301      	movs	r3, #1
    635c:	e079      	b.n	6452 <_printf_i+0x182>
    635e:	0649      	lsls	r1, r1, #25
    6360:	d5d9      	bpl.n	6316 <_printf_i+0x46>
    6362:	1d11      	adds	r1, r2, #4
    6364:	6019      	str	r1, [r3, #0]
    6366:	2300      	movs	r3, #0
    6368:	5ed5      	ldrsh	r5, [r2, r3]
    636a:	2d00      	cmp	r5, #0
    636c:	da03      	bge.n	6376 <_printf_i+0xa6>
    636e:	232d      	movs	r3, #45	; 0x2d
    6370:	9a04      	ldr	r2, [sp, #16]
    6372:	426d      	negs	r5, r5
    6374:	7013      	strb	r3, [r2, #0]
    6376:	4b62      	ldr	r3, [pc, #392]	; (6500 <_printf_i+0x230>)
    6378:	270a      	movs	r7, #10
    637a:	9303      	str	r3, [sp, #12]
    637c:	e02f      	b.n	63de <_printf_i+0x10e>
    637e:	6820      	ldr	r0, [r4, #0]
    6380:	6819      	ldr	r1, [r3, #0]
    6382:	0605      	lsls	r5, r0, #24
    6384:	d503      	bpl.n	638e <_printf_i+0xbe>
    6386:	1d08      	adds	r0, r1, #4
    6388:	6018      	str	r0, [r3, #0]
    638a:	680d      	ldr	r5, [r1, #0]
    638c:	e005      	b.n	639a <_printf_i+0xca>
    638e:	0640      	lsls	r0, r0, #25
    6390:	d5f9      	bpl.n	6386 <_printf_i+0xb6>
    6392:	680d      	ldr	r5, [r1, #0]
    6394:	1d08      	adds	r0, r1, #4
    6396:	6018      	str	r0, [r3, #0]
    6398:	b2ad      	uxth	r5, r5
    639a:	4b59      	ldr	r3, [pc, #356]	; (6500 <_printf_i+0x230>)
    639c:	2708      	movs	r7, #8
    639e:	9303      	str	r3, [sp, #12]
    63a0:	2a6f      	cmp	r2, #111	; 0x6f
    63a2:	d018      	beq.n	63d6 <_printf_i+0x106>
    63a4:	270a      	movs	r7, #10
    63a6:	e016      	b.n	63d6 <_printf_i+0x106>
    63a8:	3145      	adds	r1, #69	; 0x45
    63aa:	700a      	strb	r2, [r1, #0]
    63ac:	4a54      	ldr	r2, [pc, #336]	; (6500 <_printf_i+0x230>)
    63ae:	9203      	str	r2, [sp, #12]
    63b0:	681a      	ldr	r2, [r3, #0]
    63b2:	6821      	ldr	r1, [r4, #0]
    63b4:	1d10      	adds	r0, r2, #4
    63b6:	6018      	str	r0, [r3, #0]
    63b8:	6815      	ldr	r5, [r2, #0]
    63ba:	0608      	lsls	r0, r1, #24
    63bc:	d522      	bpl.n	6404 <_printf_i+0x134>
    63be:	07cb      	lsls	r3, r1, #31
    63c0:	d502      	bpl.n	63c8 <_printf_i+0xf8>
    63c2:	2320      	movs	r3, #32
    63c4:	4319      	orrs	r1, r3
    63c6:	6021      	str	r1, [r4, #0]
    63c8:	2710      	movs	r7, #16
    63ca:	2d00      	cmp	r5, #0
    63cc:	d103      	bne.n	63d6 <_printf_i+0x106>
    63ce:	2320      	movs	r3, #32
    63d0:	6822      	ldr	r2, [r4, #0]
    63d2:	439a      	bics	r2, r3
    63d4:	6022      	str	r2, [r4, #0]
    63d6:	0023      	movs	r3, r4
    63d8:	2200      	movs	r2, #0
    63da:	3343      	adds	r3, #67	; 0x43
    63dc:	701a      	strb	r2, [r3, #0]
    63de:	6863      	ldr	r3, [r4, #4]
    63e0:	60a3      	str	r3, [r4, #8]
    63e2:	2b00      	cmp	r3, #0
    63e4:	db5c      	blt.n	64a0 <_printf_i+0x1d0>
    63e6:	2204      	movs	r2, #4
    63e8:	6821      	ldr	r1, [r4, #0]
    63ea:	4391      	bics	r1, r2
    63ec:	6021      	str	r1, [r4, #0]
    63ee:	2d00      	cmp	r5, #0
    63f0:	d158      	bne.n	64a4 <_printf_i+0x1d4>
    63f2:	9e04      	ldr	r6, [sp, #16]
    63f4:	2b00      	cmp	r3, #0
    63f6:	d064      	beq.n	64c2 <_printf_i+0x1f2>
    63f8:	0026      	movs	r6, r4
    63fa:	9b03      	ldr	r3, [sp, #12]
    63fc:	3642      	adds	r6, #66	; 0x42
    63fe:	781b      	ldrb	r3, [r3, #0]
    6400:	7033      	strb	r3, [r6, #0]
    6402:	e05e      	b.n	64c2 <_printf_i+0x1f2>
    6404:	0648      	lsls	r0, r1, #25
    6406:	d5da      	bpl.n	63be <_printf_i+0xee>
    6408:	b2ad      	uxth	r5, r5
    640a:	e7d8      	b.n	63be <_printf_i+0xee>
    640c:	6809      	ldr	r1, [r1, #0]
    640e:	681a      	ldr	r2, [r3, #0]
    6410:	0608      	lsls	r0, r1, #24
    6412:	d505      	bpl.n	6420 <_printf_i+0x150>
    6414:	1d11      	adds	r1, r2, #4
    6416:	6019      	str	r1, [r3, #0]
    6418:	6813      	ldr	r3, [r2, #0]
    641a:	6962      	ldr	r2, [r4, #20]
    641c:	601a      	str	r2, [r3, #0]
    641e:	e006      	b.n	642e <_printf_i+0x15e>
    6420:	0649      	lsls	r1, r1, #25
    6422:	d5f7      	bpl.n	6414 <_printf_i+0x144>
    6424:	1d11      	adds	r1, r2, #4
    6426:	6019      	str	r1, [r3, #0]
    6428:	6813      	ldr	r3, [r2, #0]
    642a:	8aa2      	ldrh	r2, [r4, #20]
    642c:	801a      	strh	r2, [r3, #0]
    642e:	2300      	movs	r3, #0
    6430:	9e04      	ldr	r6, [sp, #16]
    6432:	6123      	str	r3, [r4, #16]
    6434:	e054      	b.n	64e0 <_printf_i+0x210>
    6436:	681a      	ldr	r2, [r3, #0]
    6438:	1d11      	adds	r1, r2, #4
    643a:	6019      	str	r1, [r3, #0]
    643c:	6816      	ldr	r6, [r2, #0]
    643e:	2100      	movs	r1, #0
    6440:	6862      	ldr	r2, [r4, #4]
    6442:	0030      	movs	r0, r6
    6444:	f000 fb84 	bl	6b50 <memchr>
    6448:	2800      	cmp	r0, #0
    644a:	d001      	beq.n	6450 <_printf_i+0x180>
    644c:	1b80      	subs	r0, r0, r6
    644e:	6060      	str	r0, [r4, #4]
    6450:	6863      	ldr	r3, [r4, #4]
    6452:	6123      	str	r3, [r4, #16]
    6454:	2300      	movs	r3, #0
    6456:	9a04      	ldr	r2, [sp, #16]
    6458:	7013      	strb	r3, [r2, #0]
    645a:	e041      	b.n	64e0 <_printf_i+0x210>
    645c:	6923      	ldr	r3, [r4, #16]
    645e:	0032      	movs	r2, r6
    6460:	9906      	ldr	r1, [sp, #24]
    6462:	9805      	ldr	r0, [sp, #20]
    6464:	9d07      	ldr	r5, [sp, #28]
    6466:	47a8      	blx	r5
    6468:	1c43      	adds	r3, r0, #1
    646a:	d043      	beq.n	64f4 <_printf_i+0x224>
    646c:	6823      	ldr	r3, [r4, #0]
    646e:	2500      	movs	r5, #0
    6470:	079b      	lsls	r3, r3, #30
    6472:	d40f      	bmi.n	6494 <_printf_i+0x1c4>
    6474:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6476:	68e0      	ldr	r0, [r4, #12]
    6478:	4298      	cmp	r0, r3
    647a:	da3d      	bge.n	64f8 <_printf_i+0x228>
    647c:	0018      	movs	r0, r3
    647e:	e03b      	b.n	64f8 <_printf_i+0x228>
    6480:	0022      	movs	r2, r4
    6482:	2301      	movs	r3, #1
    6484:	3219      	adds	r2, #25
    6486:	9906      	ldr	r1, [sp, #24]
    6488:	9805      	ldr	r0, [sp, #20]
    648a:	9e07      	ldr	r6, [sp, #28]
    648c:	47b0      	blx	r6
    648e:	1c43      	adds	r3, r0, #1
    6490:	d030      	beq.n	64f4 <_printf_i+0x224>
    6492:	3501      	adds	r5, #1
    6494:	68e3      	ldr	r3, [r4, #12]
    6496:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6498:	1a9b      	subs	r3, r3, r2
    649a:	429d      	cmp	r5, r3
    649c:	dbf0      	blt.n	6480 <_printf_i+0x1b0>
    649e:	e7e9      	b.n	6474 <_printf_i+0x1a4>
    64a0:	2d00      	cmp	r5, #0
    64a2:	d0a9      	beq.n	63f8 <_printf_i+0x128>
    64a4:	9e04      	ldr	r6, [sp, #16]
    64a6:	0028      	movs	r0, r5
    64a8:	0039      	movs	r1, r7
    64aa:	f7fe ffa9 	bl	5400 <__aeabi_uidivmod>
    64ae:	9b03      	ldr	r3, [sp, #12]
    64b0:	3e01      	subs	r6, #1
    64b2:	5c5b      	ldrb	r3, [r3, r1]
    64b4:	0028      	movs	r0, r5
    64b6:	7033      	strb	r3, [r6, #0]
    64b8:	0039      	movs	r1, r7
    64ba:	f7fe ff1b 	bl	52f4 <__udivsi3>
    64be:	1e05      	subs	r5, r0, #0
    64c0:	d1f1      	bne.n	64a6 <_printf_i+0x1d6>
    64c2:	2f08      	cmp	r7, #8
    64c4:	d109      	bne.n	64da <_printf_i+0x20a>
    64c6:	6823      	ldr	r3, [r4, #0]
    64c8:	07db      	lsls	r3, r3, #31
    64ca:	d506      	bpl.n	64da <_printf_i+0x20a>
    64cc:	6863      	ldr	r3, [r4, #4]
    64ce:	6922      	ldr	r2, [r4, #16]
    64d0:	4293      	cmp	r3, r2
    64d2:	dc02      	bgt.n	64da <_printf_i+0x20a>
    64d4:	2330      	movs	r3, #48	; 0x30
    64d6:	3e01      	subs	r6, #1
    64d8:	7033      	strb	r3, [r6, #0]
    64da:	9b04      	ldr	r3, [sp, #16]
    64dc:	1b9b      	subs	r3, r3, r6
    64de:	6123      	str	r3, [r4, #16]
    64e0:	9b07      	ldr	r3, [sp, #28]
    64e2:	aa09      	add	r2, sp, #36	; 0x24
    64e4:	9300      	str	r3, [sp, #0]
    64e6:	0021      	movs	r1, r4
    64e8:	9b06      	ldr	r3, [sp, #24]
    64ea:	9805      	ldr	r0, [sp, #20]
    64ec:	f7ff fe82 	bl	61f4 <_printf_common>
    64f0:	1c43      	adds	r3, r0, #1
    64f2:	d1b3      	bne.n	645c <_printf_i+0x18c>
    64f4:	2001      	movs	r0, #1
    64f6:	4240      	negs	r0, r0
    64f8:	b00b      	add	sp, #44	; 0x2c
    64fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64fc:	00007105 	.word	0x00007105
    6500:	000070f4 	.word	0x000070f4

00006504 <_scanf_chars>:
    6504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6506:	0015      	movs	r5, r2
    6508:	688a      	ldr	r2, [r1, #8]
    650a:	9001      	str	r0, [sp, #4]
    650c:	000c      	movs	r4, r1
    650e:	2a00      	cmp	r2, #0
    6510:	d106      	bne.n	6520 <_scanf_chars+0x1c>
    6512:	698a      	ldr	r2, [r1, #24]
    6514:	1e51      	subs	r1, r2, #1
    6516:	418a      	sbcs	r2, r1
    6518:	2101      	movs	r1, #1
    651a:	4252      	negs	r2, r2
    651c:	430a      	orrs	r2, r1
    651e:	60a2      	str	r2, [r4, #8]
    6520:	6822      	ldr	r2, [r4, #0]
    6522:	06d2      	lsls	r2, r2, #27
    6524:	d403      	bmi.n	652e <_scanf_chars+0x2a>
    6526:	681a      	ldr	r2, [r3, #0]
    6528:	1d11      	adds	r1, r2, #4
    652a:	6019      	str	r1, [r3, #0]
    652c:	6817      	ldr	r7, [r2, #0]
    652e:	2600      	movs	r6, #0
    6530:	69a3      	ldr	r3, [r4, #24]
    6532:	2b00      	cmp	r3, #0
    6534:	d01c      	beq.n	6570 <_scanf_chars+0x6c>
    6536:	2b01      	cmp	r3, #1
    6538:	d108      	bne.n	654c <_scanf_chars+0x48>
    653a:	682b      	ldr	r3, [r5, #0]
    653c:	6962      	ldr	r2, [r4, #20]
    653e:	781b      	ldrb	r3, [r3, #0]
    6540:	5cd3      	ldrb	r3, [r2, r3]
    6542:	2b00      	cmp	r3, #0
    6544:	d114      	bne.n	6570 <_scanf_chars+0x6c>
    6546:	2e00      	cmp	r6, #0
    6548:	d130      	bne.n	65ac <_scanf_chars+0xa8>
    654a:	e006      	b.n	655a <_scanf_chars+0x56>
    654c:	2b02      	cmp	r3, #2
    654e:	d006      	beq.n	655e <_scanf_chars+0x5a>
    6550:	2e00      	cmp	r6, #0
    6552:	d12b      	bne.n	65ac <_scanf_chars+0xa8>
    6554:	69a3      	ldr	r3, [r4, #24]
    6556:	2b01      	cmp	r3, #1
    6558:	d128      	bne.n	65ac <_scanf_chars+0xa8>
    655a:	2001      	movs	r0, #1
    655c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    655e:	f000 fad7 	bl	6b10 <__locale_ctype_ptr>
    6562:	2208      	movs	r2, #8
    6564:	682b      	ldr	r3, [r5, #0]
    6566:	781b      	ldrb	r3, [r3, #0]
    6568:	18c0      	adds	r0, r0, r3
    656a:	7843      	ldrb	r3, [r0, #1]
    656c:	4213      	tst	r3, r2
    656e:	d1ef      	bne.n	6550 <_scanf_chars+0x4c>
    6570:	2210      	movs	r2, #16
    6572:	6823      	ldr	r3, [r4, #0]
    6574:	3601      	adds	r6, #1
    6576:	4213      	tst	r3, r2
    6578:	d103      	bne.n	6582 <_scanf_chars+0x7e>
    657a:	682b      	ldr	r3, [r5, #0]
    657c:	781b      	ldrb	r3, [r3, #0]
    657e:	703b      	strb	r3, [r7, #0]
    6580:	3701      	adds	r7, #1
    6582:	682a      	ldr	r2, [r5, #0]
    6584:	686b      	ldr	r3, [r5, #4]
    6586:	3201      	adds	r2, #1
    6588:	602a      	str	r2, [r5, #0]
    658a:	68a2      	ldr	r2, [r4, #8]
    658c:	3b01      	subs	r3, #1
    658e:	3a01      	subs	r2, #1
    6590:	606b      	str	r3, [r5, #4]
    6592:	60a2      	str	r2, [r4, #8]
    6594:	2a00      	cmp	r2, #0
    6596:	d009      	beq.n	65ac <_scanf_chars+0xa8>
    6598:	2b00      	cmp	r3, #0
    659a:	dcc9      	bgt.n	6530 <_scanf_chars+0x2c>
    659c:	23c0      	movs	r3, #192	; 0xc0
    659e:	005b      	lsls	r3, r3, #1
    65a0:	58e3      	ldr	r3, [r4, r3]
    65a2:	0029      	movs	r1, r5
    65a4:	9801      	ldr	r0, [sp, #4]
    65a6:	4798      	blx	r3
    65a8:	2800      	cmp	r0, #0
    65aa:	d0c1      	beq.n	6530 <_scanf_chars+0x2c>
    65ac:	2310      	movs	r3, #16
    65ae:	6822      	ldr	r2, [r4, #0]
    65b0:	4013      	ands	r3, r2
    65b2:	d106      	bne.n	65c2 <_scanf_chars+0xbe>
    65b4:	68e2      	ldr	r2, [r4, #12]
    65b6:	3201      	adds	r2, #1
    65b8:	60e2      	str	r2, [r4, #12]
    65ba:	69a2      	ldr	r2, [r4, #24]
    65bc:	2a00      	cmp	r2, #0
    65be:	d000      	beq.n	65c2 <_scanf_chars+0xbe>
    65c0:	703b      	strb	r3, [r7, #0]
    65c2:	6923      	ldr	r3, [r4, #16]
    65c4:	2000      	movs	r0, #0
    65c6:	199e      	adds	r6, r3, r6
    65c8:	6126      	str	r6, [r4, #16]
    65ca:	e7c7      	b.n	655c <_scanf_chars+0x58>

000065cc <_scanf_i>:
    65cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    65ce:	000c      	movs	r4, r1
    65d0:	b08d      	sub	sp, #52	; 0x34
    65d2:	9302      	str	r3, [sp, #8]
    65d4:	4b77      	ldr	r3, [pc, #476]	; (67b4 <_scanf_i+0x1e8>)
    65d6:	9005      	str	r0, [sp, #20]
    65d8:	0016      	movs	r6, r2
    65da:	aa09      	add	r2, sp, #36	; 0x24
    65dc:	cb23      	ldmia	r3!, {r0, r1, r5}
    65de:	c223      	stmia	r2!, {r0, r1, r5}
    65e0:	4b75      	ldr	r3, [pc, #468]	; (67b8 <_scanf_i+0x1ec>)
    65e2:	9306      	str	r3, [sp, #24]
    65e4:	69a3      	ldr	r3, [r4, #24]
    65e6:	2b03      	cmp	r3, #3
    65e8:	d001      	beq.n	65ee <_scanf_i+0x22>
    65ea:	4b74      	ldr	r3, [pc, #464]	; (67bc <_scanf_i+0x1f0>)
    65ec:	9306      	str	r3, [sp, #24]
    65ee:	22ae      	movs	r2, #174	; 0xae
    65f0:	2000      	movs	r0, #0
    65f2:	68a3      	ldr	r3, [r4, #8]
    65f4:	0052      	lsls	r2, r2, #1
    65f6:	1e59      	subs	r1, r3, #1
    65f8:	9004      	str	r0, [sp, #16]
    65fa:	4291      	cmp	r1, r2
    65fc:	d905      	bls.n	660a <_scanf_i+0x3e>
    65fe:	3b5e      	subs	r3, #94	; 0x5e
    6600:	3bff      	subs	r3, #255	; 0xff
    6602:	9304      	str	r3, [sp, #16]
    6604:	235e      	movs	r3, #94	; 0x5e
    6606:	33ff      	adds	r3, #255	; 0xff
    6608:	60a3      	str	r3, [r4, #8]
    660a:	0023      	movs	r3, r4
    660c:	331c      	adds	r3, #28
    660e:	9301      	str	r3, [sp, #4]
    6610:	23d0      	movs	r3, #208	; 0xd0
    6612:	2700      	movs	r7, #0
    6614:	6822      	ldr	r2, [r4, #0]
    6616:	011b      	lsls	r3, r3, #4
    6618:	4313      	orrs	r3, r2
    661a:	6023      	str	r3, [r4, #0]
    661c:	9b01      	ldr	r3, [sp, #4]
    661e:	9303      	str	r3, [sp, #12]
    6620:	6833      	ldr	r3, [r6, #0]
    6622:	a809      	add	r0, sp, #36	; 0x24
    6624:	7819      	ldrb	r1, [r3, #0]
    6626:	00bb      	lsls	r3, r7, #2
    6628:	2202      	movs	r2, #2
    662a:	5818      	ldr	r0, [r3, r0]
    662c:	f000 fa90 	bl	6b50 <memchr>
    6630:	2800      	cmp	r0, #0
    6632:	d02b      	beq.n	668c <_scanf_i+0xc0>
    6634:	2f01      	cmp	r7, #1
    6636:	d15f      	bne.n	66f8 <_scanf_i+0x12c>
    6638:	6863      	ldr	r3, [r4, #4]
    663a:	2b00      	cmp	r3, #0
    663c:	d106      	bne.n	664c <_scanf_i+0x80>
    663e:	3308      	adds	r3, #8
    6640:	6822      	ldr	r2, [r4, #0]
    6642:	6063      	str	r3, [r4, #4]
    6644:	33f9      	adds	r3, #249	; 0xf9
    6646:	33ff      	adds	r3, #255	; 0xff
    6648:	4313      	orrs	r3, r2
    664a:	6023      	str	r3, [r4, #0]
    664c:	4b5c      	ldr	r3, [pc, #368]	; (67c0 <_scanf_i+0x1f4>)
    664e:	6822      	ldr	r2, [r4, #0]
    6650:	4013      	ands	r3, r2
    6652:	6023      	str	r3, [r4, #0]
    6654:	68a3      	ldr	r3, [r4, #8]
    6656:	1e5a      	subs	r2, r3, #1
    6658:	60a2      	str	r2, [r4, #8]
    665a:	2b00      	cmp	r3, #0
    665c:	d016      	beq.n	668c <_scanf_i+0xc0>
    665e:	9b03      	ldr	r3, [sp, #12]
    6660:	1c5d      	adds	r5, r3, #1
    6662:	6833      	ldr	r3, [r6, #0]
    6664:	1c5a      	adds	r2, r3, #1
    6666:	6032      	str	r2, [r6, #0]
    6668:	781b      	ldrb	r3, [r3, #0]
    666a:	9a03      	ldr	r2, [sp, #12]
    666c:	9503      	str	r5, [sp, #12]
    666e:	7013      	strb	r3, [r2, #0]
    6670:	6873      	ldr	r3, [r6, #4]
    6672:	3b01      	subs	r3, #1
    6674:	6073      	str	r3, [r6, #4]
    6676:	2b00      	cmp	r3, #0
    6678:	dc08      	bgt.n	668c <_scanf_i+0xc0>
    667a:	23c0      	movs	r3, #192	; 0xc0
    667c:	005b      	lsls	r3, r3, #1
    667e:	58e3      	ldr	r3, [r4, r3]
    6680:	0031      	movs	r1, r6
    6682:	9805      	ldr	r0, [sp, #20]
    6684:	9307      	str	r3, [sp, #28]
    6686:	4798      	blx	r3
    6688:	2800      	cmp	r0, #0
    668a:	d17d      	bne.n	6788 <_scanf_i+0x1bc>
    668c:	3701      	adds	r7, #1
    668e:	2f03      	cmp	r7, #3
    6690:	d1c6      	bne.n	6620 <_scanf_i+0x54>
    6692:	6863      	ldr	r3, [r4, #4]
    6694:	2b00      	cmp	r3, #0
    6696:	d101      	bne.n	669c <_scanf_i+0xd0>
    6698:	330a      	adds	r3, #10
    669a:	6063      	str	r3, [r4, #4]
    669c:	2110      	movs	r1, #16
    669e:	2700      	movs	r7, #0
    66a0:	6863      	ldr	r3, [r4, #4]
    66a2:	6960      	ldr	r0, [r4, #20]
    66a4:	1ac9      	subs	r1, r1, r3
    66a6:	4b47      	ldr	r3, [pc, #284]	; (67c4 <_scanf_i+0x1f8>)
    66a8:	18c9      	adds	r1, r1, r3
    66aa:	f000 f88f 	bl	67cc <__sccl>
    66ae:	9d03      	ldr	r5, [sp, #12]
    66b0:	68a3      	ldr	r3, [r4, #8]
    66b2:	2b00      	cmp	r3, #0
    66b4:	d041      	beq.n	673a <_scanf_i+0x16e>
    66b6:	6832      	ldr	r2, [r6, #0]
    66b8:	6960      	ldr	r0, [r4, #20]
    66ba:	7811      	ldrb	r1, [r2, #0]
    66bc:	5c40      	ldrb	r0, [r0, r1]
    66be:	2800      	cmp	r0, #0
    66c0:	d03b      	beq.n	673a <_scanf_i+0x16e>
    66c2:	2930      	cmp	r1, #48	; 0x30
    66c4:	d128      	bne.n	6718 <_scanf_i+0x14c>
    66c6:	2080      	movs	r0, #128	; 0x80
    66c8:	6821      	ldr	r1, [r4, #0]
    66ca:	0100      	lsls	r0, r0, #4
    66cc:	4201      	tst	r1, r0
    66ce:	d023      	beq.n	6718 <_scanf_i+0x14c>
    66d0:	9a04      	ldr	r2, [sp, #16]
    66d2:	3701      	adds	r7, #1
    66d4:	2a00      	cmp	r2, #0
    66d6:	d003      	beq.n	66e0 <_scanf_i+0x114>
    66d8:	3a01      	subs	r2, #1
    66da:	3301      	adds	r3, #1
    66dc:	9204      	str	r2, [sp, #16]
    66de:	60a3      	str	r3, [r4, #8]
    66e0:	6873      	ldr	r3, [r6, #4]
    66e2:	3b01      	subs	r3, #1
    66e4:	6073      	str	r3, [r6, #4]
    66e6:	2b00      	cmp	r3, #0
    66e8:	dd1e      	ble.n	6728 <_scanf_i+0x15c>
    66ea:	6833      	ldr	r3, [r6, #0]
    66ec:	3301      	adds	r3, #1
    66ee:	6033      	str	r3, [r6, #0]
    66f0:	68a3      	ldr	r3, [r4, #8]
    66f2:	3b01      	subs	r3, #1
    66f4:	60a3      	str	r3, [r4, #8]
    66f6:	e7db      	b.n	66b0 <_scanf_i+0xe4>
    66f8:	2f02      	cmp	r7, #2
    66fa:	d1ab      	bne.n	6654 <_scanf_i+0x88>
    66fc:	21c0      	movs	r1, #192	; 0xc0
    66fe:	2380      	movs	r3, #128	; 0x80
    6700:	6822      	ldr	r2, [r4, #0]
    6702:	00c9      	lsls	r1, r1, #3
    6704:	4011      	ands	r1, r2
    6706:	009b      	lsls	r3, r3, #2
    6708:	4299      	cmp	r1, r3
    670a:	d1c2      	bne.n	6692 <_scanf_i+0xc6>
    670c:	3bf1      	subs	r3, #241	; 0xf1
    670e:	3bff      	subs	r3, #255	; 0xff
    6710:	6063      	str	r3, [r4, #4]
    6712:	33f0      	adds	r3, #240	; 0xf0
    6714:	4313      	orrs	r3, r2
    6716:	e79c      	b.n	6652 <_scanf_i+0x86>
    6718:	6821      	ldr	r1, [r4, #0]
    671a:	4b2b      	ldr	r3, [pc, #172]	; (67c8 <_scanf_i+0x1fc>)
    671c:	400b      	ands	r3, r1
    671e:	6023      	str	r3, [r4, #0]
    6720:	7813      	ldrb	r3, [r2, #0]
    6722:	702b      	strb	r3, [r5, #0]
    6724:	3501      	adds	r5, #1
    6726:	e7db      	b.n	66e0 <_scanf_i+0x114>
    6728:	23c0      	movs	r3, #192	; 0xc0
    672a:	005b      	lsls	r3, r3, #1
    672c:	58e3      	ldr	r3, [r4, r3]
    672e:	0031      	movs	r1, r6
    6730:	9805      	ldr	r0, [sp, #20]
    6732:	9303      	str	r3, [sp, #12]
    6734:	4798      	blx	r3
    6736:	2800      	cmp	r0, #0
    6738:	d0da      	beq.n	66f0 <_scanf_i+0x124>
    673a:	6823      	ldr	r3, [r4, #0]
    673c:	05db      	lsls	r3, r3, #23
    673e:	d50e      	bpl.n	675e <_scanf_i+0x192>
    6740:	9b01      	ldr	r3, [sp, #4]
    6742:	429d      	cmp	r5, r3
    6744:	d907      	bls.n	6756 <_scanf_i+0x18a>
    6746:	23be      	movs	r3, #190	; 0xbe
    6748:	3d01      	subs	r5, #1
    674a:	005b      	lsls	r3, r3, #1
    674c:	7829      	ldrb	r1, [r5, #0]
    674e:	58e3      	ldr	r3, [r4, r3]
    6750:	0032      	movs	r2, r6
    6752:	9805      	ldr	r0, [sp, #20]
    6754:	4798      	blx	r3
    6756:	9b01      	ldr	r3, [sp, #4]
    6758:	2001      	movs	r0, #1
    675a:	429d      	cmp	r5, r3
    675c:	d027      	beq.n	67ae <_scanf_i+0x1e2>
    675e:	2210      	movs	r2, #16
    6760:	6823      	ldr	r3, [r4, #0]
    6762:	401a      	ands	r2, r3
    6764:	d11c      	bne.n	67a0 <_scanf_i+0x1d4>
    6766:	702a      	strb	r2, [r5, #0]
    6768:	6863      	ldr	r3, [r4, #4]
    676a:	9901      	ldr	r1, [sp, #4]
    676c:	9805      	ldr	r0, [sp, #20]
    676e:	9e06      	ldr	r6, [sp, #24]
    6770:	47b0      	blx	r6
    6772:	9b02      	ldr	r3, [sp, #8]
    6774:	6822      	ldr	r2, [r4, #0]
    6776:	681b      	ldr	r3, [r3, #0]
    6778:	0691      	lsls	r1, r2, #26
    677a:	d507      	bpl.n	678c <_scanf_i+0x1c0>
    677c:	9902      	ldr	r1, [sp, #8]
    677e:	1d1a      	adds	r2, r3, #4
    6780:	600a      	str	r2, [r1, #0]
    6782:	681b      	ldr	r3, [r3, #0]
    6784:	6018      	str	r0, [r3, #0]
    6786:	e008      	b.n	679a <_scanf_i+0x1ce>
    6788:	2700      	movs	r7, #0
    678a:	e7d6      	b.n	673a <_scanf_i+0x16e>
    678c:	07d1      	lsls	r1, r2, #31
    678e:	d5f5      	bpl.n	677c <_scanf_i+0x1b0>
    6790:	9902      	ldr	r1, [sp, #8]
    6792:	1d1a      	adds	r2, r3, #4
    6794:	600a      	str	r2, [r1, #0]
    6796:	681b      	ldr	r3, [r3, #0]
    6798:	8018      	strh	r0, [r3, #0]
    679a:	68e3      	ldr	r3, [r4, #12]
    679c:	3301      	adds	r3, #1
    679e:	60e3      	str	r3, [r4, #12]
    67a0:	2000      	movs	r0, #0
    67a2:	9b01      	ldr	r3, [sp, #4]
    67a4:	1aed      	subs	r5, r5, r3
    67a6:	6923      	ldr	r3, [r4, #16]
    67a8:	19ef      	adds	r7, r5, r7
    67aa:	19df      	adds	r7, r3, r7
    67ac:	6127      	str	r7, [r4, #16]
    67ae:	b00d      	add	sp, #52	; 0x34
    67b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67b2:	46c0      	nop			; (mov r8, r8)
    67b4:	00007118 	.word	0x00007118
    67b8:	0000693d 	.word	0x0000693d
    67bc:	00006a6d 	.word	0x00006a6d
    67c0:	fffffaff 	.word	0xfffffaff
    67c4:	00007124 	.word	0x00007124
    67c8:	fffff6ff 	.word	0xfffff6ff

000067cc <__sccl>:
    67cc:	b570      	push	{r4, r5, r6, lr}
    67ce:	780b      	ldrb	r3, [r1, #0]
    67d0:	2b5e      	cmp	r3, #94	; 0x5e
    67d2:	d00d      	beq.n	67f0 <__sccl+0x24>
    67d4:	1c4a      	adds	r2, r1, #1
    67d6:	2100      	movs	r1, #0
    67d8:	0004      	movs	r4, r0
    67da:	1c45      	adds	r5, r0, #1
    67dc:	35ff      	adds	r5, #255	; 0xff
    67de:	7021      	strb	r1, [r4, #0]
    67e0:	3401      	adds	r4, #1
    67e2:	42a5      	cmp	r5, r4
    67e4:	d1fb      	bne.n	67de <__sccl+0x12>
    67e6:	2b00      	cmp	r3, #0
    67e8:	d106      	bne.n	67f8 <__sccl+0x2c>
    67ea:	3a01      	subs	r2, #1
    67ec:	0010      	movs	r0, r2
    67ee:	bd70      	pop	{r4, r5, r6, pc}
    67f0:	1c8a      	adds	r2, r1, #2
    67f2:	784b      	ldrb	r3, [r1, #1]
    67f4:	2101      	movs	r1, #1
    67f6:	e7ef      	b.n	67d8 <__sccl+0xc>
    67f8:	2401      	movs	r4, #1
    67fa:	404c      	eors	r4, r1
    67fc:	0011      	movs	r1, r2
    67fe:	54c4      	strb	r4, [r0, r3]
    6800:	780d      	ldrb	r5, [r1, #0]
    6802:	1c4a      	adds	r2, r1, #1
    6804:	2d2d      	cmp	r5, #45	; 0x2d
    6806:	d007      	beq.n	6818 <__sccl+0x4c>
    6808:	2d5d      	cmp	r5, #93	; 0x5d
    680a:	d0ef      	beq.n	67ec <__sccl+0x20>
    680c:	2d00      	cmp	r5, #0
    680e:	d101      	bne.n	6814 <__sccl+0x48>
    6810:	000a      	movs	r2, r1
    6812:	e7eb      	b.n	67ec <__sccl+0x20>
    6814:	002b      	movs	r3, r5
    6816:	e7f1      	b.n	67fc <__sccl+0x30>
    6818:	784e      	ldrb	r6, [r1, #1]
    681a:	2e5d      	cmp	r6, #93	; 0x5d
    681c:	d0fa      	beq.n	6814 <__sccl+0x48>
    681e:	42b3      	cmp	r3, r6
    6820:	dcf8      	bgt.n	6814 <__sccl+0x48>
    6822:	3102      	adds	r1, #2
    6824:	3301      	adds	r3, #1
    6826:	54c4      	strb	r4, [r0, r3]
    6828:	429e      	cmp	r6, r3
    682a:	dcfb      	bgt.n	6824 <__sccl+0x58>
    682c:	e7e8      	b.n	6800 <__sccl+0x34>
	...

00006830 <_strtol_l.isra.0>:
    6830:	b5f0      	push	{r4, r5, r6, r7, lr}
    6832:	001f      	movs	r7, r3
    6834:	000e      	movs	r6, r1
    6836:	b087      	sub	sp, #28
    6838:	9005      	str	r0, [sp, #20]
    683a:	9103      	str	r1, [sp, #12]
    683c:	9202      	str	r2, [sp, #8]
    683e:	980c      	ldr	r0, [sp, #48]	; 0x30
    6840:	7834      	ldrb	r4, [r6, #0]
    6842:	f000 f961 	bl	6b08 <__locale_ctype_ptr_l>
    6846:	2208      	movs	r2, #8
    6848:	1900      	adds	r0, r0, r4
    684a:	7843      	ldrb	r3, [r0, #1]
    684c:	1c75      	adds	r5, r6, #1
    684e:	4013      	ands	r3, r2
    6850:	d10c      	bne.n	686c <_strtol_l.isra.0+0x3c>
    6852:	2c2d      	cmp	r4, #45	; 0x2d
    6854:	d10c      	bne.n	6870 <_strtol_l.isra.0+0x40>
    6856:	3301      	adds	r3, #1
    6858:	782c      	ldrb	r4, [r5, #0]
    685a:	9301      	str	r3, [sp, #4]
    685c:	1cb5      	adds	r5, r6, #2
    685e:	2f00      	cmp	r7, #0
    6860:	d00c      	beq.n	687c <_strtol_l.isra.0+0x4c>
    6862:	2f10      	cmp	r7, #16
    6864:	d114      	bne.n	6890 <_strtol_l.isra.0+0x60>
    6866:	2c30      	cmp	r4, #48	; 0x30
    6868:	d00a      	beq.n	6880 <_strtol_l.isra.0+0x50>
    686a:	e011      	b.n	6890 <_strtol_l.isra.0+0x60>
    686c:	002e      	movs	r6, r5
    686e:	e7e6      	b.n	683e <_strtol_l.isra.0+0xe>
    6870:	9301      	str	r3, [sp, #4]
    6872:	2c2b      	cmp	r4, #43	; 0x2b
    6874:	d1f3      	bne.n	685e <_strtol_l.isra.0+0x2e>
    6876:	782c      	ldrb	r4, [r5, #0]
    6878:	1cb5      	adds	r5, r6, #2
    687a:	e7f0      	b.n	685e <_strtol_l.isra.0+0x2e>
    687c:	2c30      	cmp	r4, #48	; 0x30
    687e:	d12f      	bne.n	68e0 <_strtol_l.isra.0+0xb0>
    6880:	2220      	movs	r2, #32
    6882:	782b      	ldrb	r3, [r5, #0]
    6884:	4393      	bics	r3, r2
    6886:	2b58      	cmp	r3, #88	; 0x58
    6888:	d151      	bne.n	692e <_strtol_l.isra.0+0xfe>
    688a:	2710      	movs	r7, #16
    688c:	786c      	ldrb	r4, [r5, #1]
    688e:	3502      	adds	r5, #2
    6890:	9b01      	ldr	r3, [sp, #4]
    6892:	4a29      	ldr	r2, [pc, #164]	; (6938 <_strtol_l.isra.0+0x108>)
    6894:	0039      	movs	r1, r7
    6896:	189e      	adds	r6, r3, r2
    6898:	0030      	movs	r0, r6
    689a:	f7fe fdb1 	bl	5400 <__aeabi_uidivmod>
    689e:	0030      	movs	r0, r6
    68a0:	9104      	str	r1, [sp, #16]
    68a2:	0039      	movs	r1, r7
    68a4:	f7fe fd26 	bl	52f4 <__udivsi3>
    68a8:	2101      	movs	r1, #1
    68aa:	2300      	movs	r3, #0
    68ac:	4249      	negs	r1, r1
    68ae:	0002      	movs	r2, r0
    68b0:	468c      	mov	ip, r1
    68b2:	0018      	movs	r0, r3
    68b4:	0021      	movs	r1, r4
    68b6:	3930      	subs	r1, #48	; 0x30
    68b8:	2909      	cmp	r1, #9
    68ba:	d813      	bhi.n	68e4 <_strtol_l.isra.0+0xb4>
    68bc:	000c      	movs	r4, r1
    68be:	42a7      	cmp	r7, r4
    68c0:	dd1c      	ble.n	68fc <_strtol_l.isra.0+0xcc>
    68c2:	1c59      	adds	r1, r3, #1
    68c4:	d009      	beq.n	68da <_strtol_l.isra.0+0xaa>
    68c6:	4663      	mov	r3, ip
    68c8:	4282      	cmp	r2, r0
    68ca:	d306      	bcc.n	68da <_strtol_l.isra.0+0xaa>
    68cc:	d102      	bne.n	68d4 <_strtol_l.isra.0+0xa4>
    68ce:	9904      	ldr	r1, [sp, #16]
    68d0:	42a1      	cmp	r1, r4
    68d2:	db02      	blt.n	68da <_strtol_l.isra.0+0xaa>
    68d4:	2301      	movs	r3, #1
    68d6:	4378      	muls	r0, r7
    68d8:	1820      	adds	r0, r4, r0
    68da:	782c      	ldrb	r4, [r5, #0]
    68dc:	3501      	adds	r5, #1
    68de:	e7e9      	b.n	68b4 <_strtol_l.isra.0+0x84>
    68e0:	270a      	movs	r7, #10
    68e2:	e7d5      	b.n	6890 <_strtol_l.isra.0+0x60>
    68e4:	0021      	movs	r1, r4
    68e6:	3941      	subs	r1, #65	; 0x41
    68e8:	2919      	cmp	r1, #25
    68ea:	d801      	bhi.n	68f0 <_strtol_l.isra.0+0xc0>
    68ec:	3c37      	subs	r4, #55	; 0x37
    68ee:	e7e6      	b.n	68be <_strtol_l.isra.0+0x8e>
    68f0:	0021      	movs	r1, r4
    68f2:	3961      	subs	r1, #97	; 0x61
    68f4:	2919      	cmp	r1, #25
    68f6:	d801      	bhi.n	68fc <_strtol_l.isra.0+0xcc>
    68f8:	3c57      	subs	r4, #87	; 0x57
    68fa:	e7e0      	b.n	68be <_strtol_l.isra.0+0x8e>
    68fc:	1c5a      	adds	r2, r3, #1
    68fe:	d108      	bne.n	6912 <_strtol_l.isra.0+0xe2>
    6900:	9a05      	ldr	r2, [sp, #20]
    6902:	3323      	adds	r3, #35	; 0x23
    6904:	6013      	str	r3, [r2, #0]
    6906:	9b02      	ldr	r3, [sp, #8]
    6908:	0030      	movs	r0, r6
    690a:	2b00      	cmp	r3, #0
    690c:	d10b      	bne.n	6926 <_strtol_l.isra.0+0xf6>
    690e:	b007      	add	sp, #28
    6910:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6912:	9a01      	ldr	r2, [sp, #4]
    6914:	2a00      	cmp	r2, #0
    6916:	d000      	beq.n	691a <_strtol_l.isra.0+0xea>
    6918:	4240      	negs	r0, r0
    691a:	9a02      	ldr	r2, [sp, #8]
    691c:	2a00      	cmp	r2, #0
    691e:	d0f6      	beq.n	690e <_strtol_l.isra.0+0xde>
    6920:	9a03      	ldr	r2, [sp, #12]
    6922:	2b00      	cmp	r3, #0
    6924:	d000      	beq.n	6928 <_strtol_l.isra.0+0xf8>
    6926:	1e6a      	subs	r2, r5, #1
    6928:	9b02      	ldr	r3, [sp, #8]
    692a:	601a      	str	r2, [r3, #0]
    692c:	e7ef      	b.n	690e <_strtol_l.isra.0+0xde>
    692e:	2430      	movs	r4, #48	; 0x30
    6930:	2f00      	cmp	r7, #0
    6932:	d1ad      	bne.n	6890 <_strtol_l.isra.0+0x60>
    6934:	3708      	adds	r7, #8
    6936:	e7ab      	b.n	6890 <_strtol_l.isra.0+0x60>
    6938:	7fffffff 	.word	0x7fffffff

0000693c <_strtol_r>:
    693c:	b513      	push	{r0, r1, r4, lr}
    693e:	4c05      	ldr	r4, [pc, #20]	; (6954 <_strtol_r+0x18>)
    6940:	6824      	ldr	r4, [r4, #0]
    6942:	6a24      	ldr	r4, [r4, #32]
    6944:	2c00      	cmp	r4, #0
    6946:	d100      	bne.n	694a <_strtol_r+0xe>
    6948:	4c03      	ldr	r4, [pc, #12]	; (6958 <_strtol_r+0x1c>)
    694a:	9400      	str	r4, [sp, #0]
    694c:	f7ff ff70 	bl	6830 <_strtol_l.isra.0>
    6950:	bd16      	pop	{r1, r2, r4, pc}
    6952:	46c0      	nop			; (mov r8, r8)
    6954:	2000036c 	.word	0x2000036c
    6958:	200003d0 	.word	0x200003d0

0000695c <_strtoul_l.isra.0>:
    695c:	b5f0      	push	{r4, r5, r6, r7, lr}
    695e:	001f      	movs	r7, r3
    6960:	000e      	movs	r6, r1
    6962:	b087      	sub	sp, #28
    6964:	9005      	str	r0, [sp, #20]
    6966:	9103      	str	r1, [sp, #12]
    6968:	9201      	str	r2, [sp, #4]
    696a:	980c      	ldr	r0, [sp, #48]	; 0x30
    696c:	7834      	ldrb	r4, [r6, #0]
    696e:	f000 f8cb 	bl	6b08 <__locale_ctype_ptr_l>
    6972:	2208      	movs	r2, #8
    6974:	1900      	adds	r0, r0, r4
    6976:	7843      	ldrb	r3, [r0, #1]
    6978:	1c75      	adds	r5, r6, #1
    697a:	4013      	ands	r3, r2
    697c:	d10c      	bne.n	6998 <_strtoul_l.isra.0+0x3c>
    697e:	2c2d      	cmp	r4, #45	; 0x2d
    6980:	d10c      	bne.n	699c <_strtoul_l.isra.0+0x40>
    6982:	3301      	adds	r3, #1
    6984:	782c      	ldrb	r4, [r5, #0]
    6986:	9302      	str	r3, [sp, #8]
    6988:	1cb5      	adds	r5, r6, #2
    698a:	2f00      	cmp	r7, #0
    698c:	d00c      	beq.n	69a8 <_strtoul_l.isra.0+0x4c>
    698e:	2f10      	cmp	r7, #16
    6990:	d114      	bne.n	69bc <_strtoul_l.isra.0+0x60>
    6992:	2c30      	cmp	r4, #48	; 0x30
    6994:	d00a      	beq.n	69ac <_strtoul_l.isra.0+0x50>
    6996:	e011      	b.n	69bc <_strtoul_l.isra.0+0x60>
    6998:	002e      	movs	r6, r5
    699a:	e7e6      	b.n	696a <_strtoul_l.isra.0+0xe>
    699c:	9302      	str	r3, [sp, #8]
    699e:	2c2b      	cmp	r4, #43	; 0x2b
    69a0:	d1f3      	bne.n	698a <_strtoul_l.isra.0+0x2e>
    69a2:	782c      	ldrb	r4, [r5, #0]
    69a4:	1cb5      	adds	r5, r6, #2
    69a6:	e7f0      	b.n	698a <_strtoul_l.isra.0+0x2e>
    69a8:	2c30      	cmp	r4, #48	; 0x30
    69aa:	d12f      	bne.n	6a0c <_strtoul_l.isra.0+0xb0>
    69ac:	2220      	movs	r2, #32
    69ae:	782b      	ldrb	r3, [r5, #0]
    69b0:	4393      	bics	r3, r2
    69b2:	2b58      	cmp	r3, #88	; 0x58
    69b4:	d154      	bne.n	6a60 <_strtoul_l.isra.0+0x104>
    69b6:	2710      	movs	r7, #16
    69b8:	786c      	ldrb	r4, [r5, #1]
    69ba:	3502      	adds	r5, #2
    69bc:	2001      	movs	r0, #1
    69be:	0039      	movs	r1, r7
    69c0:	4240      	negs	r0, r0
    69c2:	f7fe fc97 	bl	52f4 <__udivsi3>
    69c6:	0006      	movs	r6, r0
    69c8:	2001      	movs	r0, #1
    69ca:	0039      	movs	r1, r7
    69cc:	4240      	negs	r0, r0
    69ce:	f7fe fd17 	bl	5400 <__aeabi_uidivmod>
    69d2:	2300      	movs	r3, #0
    69d4:	9104      	str	r1, [sp, #16]
    69d6:	2101      	movs	r1, #1
    69d8:	2201      	movs	r2, #1
    69da:	0018      	movs	r0, r3
    69dc:	468c      	mov	ip, r1
    69de:	4252      	negs	r2, r2
    69e0:	0021      	movs	r1, r4
    69e2:	3930      	subs	r1, #48	; 0x30
    69e4:	2909      	cmp	r1, #9
    69e6:	d813      	bhi.n	6a10 <_strtoul_l.isra.0+0xb4>
    69e8:	000c      	movs	r4, r1
    69ea:	42a7      	cmp	r7, r4
    69ec:	dd1e      	ble.n	6a2c <_strtoul_l.isra.0+0xd0>
    69ee:	2b00      	cmp	r3, #0
    69f0:	db1a      	blt.n	6a28 <_strtoul_l.isra.0+0xcc>
    69f2:	0013      	movs	r3, r2
    69f4:	4286      	cmp	r6, r0
    69f6:	d306      	bcc.n	6a06 <_strtoul_l.isra.0+0xaa>
    69f8:	d102      	bne.n	6a00 <_strtoul_l.isra.0+0xa4>
    69fa:	9904      	ldr	r1, [sp, #16]
    69fc:	42a1      	cmp	r1, r4
    69fe:	db02      	blt.n	6a06 <_strtoul_l.isra.0+0xaa>
    6a00:	4663      	mov	r3, ip
    6a02:	4378      	muls	r0, r7
    6a04:	1820      	adds	r0, r4, r0
    6a06:	782c      	ldrb	r4, [r5, #0]
    6a08:	3501      	adds	r5, #1
    6a0a:	e7e9      	b.n	69e0 <_strtoul_l.isra.0+0x84>
    6a0c:	270a      	movs	r7, #10
    6a0e:	e7d5      	b.n	69bc <_strtoul_l.isra.0+0x60>
    6a10:	0021      	movs	r1, r4
    6a12:	3941      	subs	r1, #65	; 0x41
    6a14:	2919      	cmp	r1, #25
    6a16:	d801      	bhi.n	6a1c <_strtoul_l.isra.0+0xc0>
    6a18:	3c37      	subs	r4, #55	; 0x37
    6a1a:	e7e6      	b.n	69ea <_strtoul_l.isra.0+0x8e>
    6a1c:	0021      	movs	r1, r4
    6a1e:	3961      	subs	r1, #97	; 0x61
    6a20:	2919      	cmp	r1, #25
    6a22:	d803      	bhi.n	6a2c <_strtoul_l.isra.0+0xd0>
    6a24:	3c57      	subs	r4, #87	; 0x57
    6a26:	e7e0      	b.n	69ea <_strtoul_l.isra.0+0x8e>
    6a28:	0013      	movs	r3, r2
    6a2a:	e7ec      	b.n	6a06 <_strtoul_l.isra.0+0xaa>
    6a2c:	2b00      	cmp	r3, #0
    6a2e:	da09      	bge.n	6a44 <_strtoul_l.isra.0+0xe8>
    6a30:	2322      	movs	r3, #34	; 0x22
    6a32:	2001      	movs	r0, #1
    6a34:	9a05      	ldr	r2, [sp, #20]
    6a36:	4240      	negs	r0, r0
    6a38:	6013      	str	r3, [r2, #0]
    6a3a:	9b01      	ldr	r3, [sp, #4]
    6a3c:	2b00      	cmp	r3, #0
    6a3e:	d10b      	bne.n	6a58 <_strtoul_l.isra.0+0xfc>
    6a40:	b007      	add	sp, #28
    6a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a44:	9a02      	ldr	r2, [sp, #8]
    6a46:	2a00      	cmp	r2, #0
    6a48:	d000      	beq.n	6a4c <_strtoul_l.isra.0+0xf0>
    6a4a:	4240      	negs	r0, r0
    6a4c:	9a01      	ldr	r2, [sp, #4]
    6a4e:	2a00      	cmp	r2, #0
    6a50:	d0f6      	beq.n	6a40 <_strtoul_l.isra.0+0xe4>
    6a52:	9a03      	ldr	r2, [sp, #12]
    6a54:	2b00      	cmp	r3, #0
    6a56:	d000      	beq.n	6a5a <_strtoul_l.isra.0+0xfe>
    6a58:	1e6a      	subs	r2, r5, #1
    6a5a:	9b01      	ldr	r3, [sp, #4]
    6a5c:	601a      	str	r2, [r3, #0]
    6a5e:	e7ef      	b.n	6a40 <_strtoul_l.isra.0+0xe4>
    6a60:	2430      	movs	r4, #48	; 0x30
    6a62:	2f00      	cmp	r7, #0
    6a64:	d1aa      	bne.n	69bc <_strtoul_l.isra.0+0x60>
    6a66:	3708      	adds	r7, #8
    6a68:	e7a8      	b.n	69bc <_strtoul_l.isra.0+0x60>
	...

00006a6c <_strtoul_r>:
    6a6c:	b513      	push	{r0, r1, r4, lr}
    6a6e:	4c05      	ldr	r4, [pc, #20]	; (6a84 <_strtoul_r+0x18>)
    6a70:	6824      	ldr	r4, [r4, #0]
    6a72:	6a24      	ldr	r4, [r4, #32]
    6a74:	2c00      	cmp	r4, #0
    6a76:	d100      	bne.n	6a7a <_strtoul_r+0xe>
    6a78:	4c03      	ldr	r4, [pc, #12]	; (6a88 <_strtoul_r+0x1c>)
    6a7a:	9400      	str	r4, [sp, #0]
    6a7c:	f7ff ff6e 	bl	695c <_strtoul_l.isra.0>
    6a80:	bd16      	pop	{r1, r2, r4, pc}
    6a82:	46c0      	nop			; (mov r8, r8)
    6a84:	2000036c 	.word	0x2000036c
    6a88:	200003d0 	.word	0x200003d0

00006a8c <__submore>:
    6a8c:	000b      	movs	r3, r1
    6a8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6a90:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    6a92:	3344      	adds	r3, #68	; 0x44
    6a94:	000c      	movs	r4, r1
    6a96:	429d      	cmp	r5, r3
    6a98:	d11c      	bne.n	6ad4 <__submore+0x48>
    6a9a:	2680      	movs	r6, #128	; 0x80
    6a9c:	00f6      	lsls	r6, r6, #3
    6a9e:	0031      	movs	r1, r6
    6aa0:	f7fe ff5c 	bl	595c <_malloc_r>
    6aa4:	2800      	cmp	r0, #0
    6aa6:	d102      	bne.n	6aae <__submore+0x22>
    6aa8:	2001      	movs	r0, #1
    6aaa:	4240      	negs	r0, r0
    6aac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6aae:	0023      	movs	r3, r4
    6ab0:	6360      	str	r0, [r4, #52]	; 0x34
    6ab2:	63a6      	str	r6, [r4, #56]	; 0x38
    6ab4:	3346      	adds	r3, #70	; 0x46
    6ab6:	781a      	ldrb	r2, [r3, #0]
    6ab8:	4b10      	ldr	r3, [pc, #64]	; (6afc <__submore+0x70>)
    6aba:	54c2      	strb	r2, [r0, r3]
    6abc:	0023      	movs	r3, r4
    6abe:	3345      	adds	r3, #69	; 0x45
    6ac0:	781a      	ldrb	r2, [r3, #0]
    6ac2:	4b0f      	ldr	r3, [pc, #60]	; (6b00 <__submore+0x74>)
    6ac4:	54c2      	strb	r2, [r0, r3]
    6ac6:	782a      	ldrb	r2, [r5, #0]
    6ac8:	4b0e      	ldr	r3, [pc, #56]	; (6b04 <__submore+0x78>)
    6aca:	54c2      	strb	r2, [r0, r3]
    6acc:	18c0      	adds	r0, r0, r3
    6ace:	6020      	str	r0, [r4, #0]
    6ad0:	2000      	movs	r0, #0
    6ad2:	e7eb      	b.n	6aac <__submore+0x20>
    6ad4:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    6ad6:	0029      	movs	r1, r5
    6ad8:	0073      	lsls	r3, r6, #1
    6ada:	001a      	movs	r2, r3
    6adc:	9301      	str	r3, [sp, #4]
    6ade:	f000 f854 	bl	6b8a <_realloc_r>
    6ae2:	1e05      	subs	r5, r0, #0
    6ae4:	d0e0      	beq.n	6aa8 <__submore+0x1c>
    6ae6:	1987      	adds	r7, r0, r6
    6ae8:	0001      	movs	r1, r0
    6aea:	0032      	movs	r2, r6
    6aec:	0038      	movs	r0, r7
    6aee:	f7fe fed9 	bl	58a4 <memcpy>
    6af2:	9b01      	ldr	r3, [sp, #4]
    6af4:	6027      	str	r7, [r4, #0]
    6af6:	6365      	str	r5, [r4, #52]	; 0x34
    6af8:	63a3      	str	r3, [r4, #56]	; 0x38
    6afa:	e7e9      	b.n	6ad0 <__submore+0x44>
    6afc:	000003ff 	.word	0x000003ff
    6b00:	000003fe 	.word	0x000003fe
    6b04:	000003fd 	.word	0x000003fd

00006b08 <__locale_ctype_ptr_l>:
    6b08:	30ec      	adds	r0, #236	; 0xec
    6b0a:	6800      	ldr	r0, [r0, #0]
    6b0c:	4770      	bx	lr
	...

00006b10 <__locale_ctype_ptr>:
    6b10:	4b04      	ldr	r3, [pc, #16]	; (6b24 <__locale_ctype_ptr+0x14>)
    6b12:	681b      	ldr	r3, [r3, #0]
    6b14:	6a1b      	ldr	r3, [r3, #32]
    6b16:	2b00      	cmp	r3, #0
    6b18:	d100      	bne.n	6b1c <__locale_ctype_ptr+0xc>
    6b1a:	4b03      	ldr	r3, [pc, #12]	; (6b28 <__locale_ctype_ptr+0x18>)
    6b1c:	33ec      	adds	r3, #236	; 0xec
    6b1e:	6818      	ldr	r0, [r3, #0]
    6b20:	4770      	bx	lr
    6b22:	46c0      	nop			; (mov r8, r8)
    6b24:	2000036c 	.word	0x2000036c
    6b28:	200003d0 	.word	0x200003d0

00006b2c <__ascii_mbtowc>:
    6b2c:	b082      	sub	sp, #8
    6b2e:	2900      	cmp	r1, #0
    6b30:	d100      	bne.n	6b34 <__ascii_mbtowc+0x8>
    6b32:	a901      	add	r1, sp, #4
    6b34:	1e10      	subs	r0, r2, #0
    6b36:	d006      	beq.n	6b46 <__ascii_mbtowc+0x1a>
    6b38:	2b00      	cmp	r3, #0
    6b3a:	d006      	beq.n	6b4a <__ascii_mbtowc+0x1e>
    6b3c:	7813      	ldrb	r3, [r2, #0]
    6b3e:	600b      	str	r3, [r1, #0]
    6b40:	7810      	ldrb	r0, [r2, #0]
    6b42:	1e43      	subs	r3, r0, #1
    6b44:	4198      	sbcs	r0, r3
    6b46:	b002      	add	sp, #8
    6b48:	4770      	bx	lr
    6b4a:	2002      	movs	r0, #2
    6b4c:	4240      	negs	r0, r0
    6b4e:	e7fa      	b.n	6b46 <__ascii_mbtowc+0x1a>

00006b50 <memchr>:
    6b50:	b2c9      	uxtb	r1, r1
    6b52:	1882      	adds	r2, r0, r2
    6b54:	4290      	cmp	r0, r2
    6b56:	d101      	bne.n	6b5c <memchr+0xc>
    6b58:	2000      	movs	r0, #0
    6b5a:	4770      	bx	lr
    6b5c:	7803      	ldrb	r3, [r0, #0]
    6b5e:	428b      	cmp	r3, r1
    6b60:	d0fb      	beq.n	6b5a <memchr+0xa>
    6b62:	3001      	adds	r0, #1
    6b64:	e7f6      	b.n	6b54 <memchr+0x4>

00006b66 <memmove>:
    6b66:	b510      	push	{r4, lr}
    6b68:	4288      	cmp	r0, r1
    6b6a:	d902      	bls.n	6b72 <memmove+0xc>
    6b6c:	188b      	adds	r3, r1, r2
    6b6e:	4298      	cmp	r0, r3
    6b70:	d308      	bcc.n	6b84 <memmove+0x1e>
    6b72:	2300      	movs	r3, #0
    6b74:	429a      	cmp	r2, r3
    6b76:	d007      	beq.n	6b88 <memmove+0x22>
    6b78:	5ccc      	ldrb	r4, [r1, r3]
    6b7a:	54c4      	strb	r4, [r0, r3]
    6b7c:	3301      	adds	r3, #1
    6b7e:	e7f9      	b.n	6b74 <memmove+0xe>
    6b80:	5c8b      	ldrb	r3, [r1, r2]
    6b82:	5483      	strb	r3, [r0, r2]
    6b84:	3a01      	subs	r2, #1
    6b86:	d2fb      	bcs.n	6b80 <memmove+0x1a>
    6b88:	bd10      	pop	{r4, pc}

00006b8a <_realloc_r>:
    6b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b8c:	0007      	movs	r7, r0
    6b8e:	000d      	movs	r5, r1
    6b90:	0016      	movs	r6, r2
    6b92:	2900      	cmp	r1, #0
    6b94:	d105      	bne.n	6ba2 <_realloc_r+0x18>
    6b96:	0011      	movs	r1, r2
    6b98:	f7fe fee0 	bl	595c <_malloc_r>
    6b9c:	0004      	movs	r4, r0
    6b9e:	0020      	movs	r0, r4
    6ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ba2:	2a00      	cmp	r2, #0
    6ba4:	d103      	bne.n	6bae <_realloc_r+0x24>
    6ba6:	f7fe fe8f 	bl	58c8 <_free_r>
    6baa:	0034      	movs	r4, r6
    6bac:	e7f7      	b.n	6b9e <_realloc_r+0x14>
    6bae:	f000 f81e 	bl	6bee <_malloc_usable_size_r>
    6bb2:	002c      	movs	r4, r5
    6bb4:	4286      	cmp	r6, r0
    6bb6:	d9f2      	bls.n	6b9e <_realloc_r+0x14>
    6bb8:	0031      	movs	r1, r6
    6bba:	0038      	movs	r0, r7
    6bbc:	f7fe fece 	bl	595c <_malloc_r>
    6bc0:	1e04      	subs	r4, r0, #0
    6bc2:	d0ec      	beq.n	6b9e <_realloc_r+0x14>
    6bc4:	0029      	movs	r1, r5
    6bc6:	0032      	movs	r2, r6
    6bc8:	f7fe fe6c 	bl	58a4 <memcpy>
    6bcc:	0029      	movs	r1, r5
    6bce:	0038      	movs	r0, r7
    6bd0:	f7fe fe7a 	bl	58c8 <_free_r>
    6bd4:	e7e3      	b.n	6b9e <_realloc_r+0x14>

00006bd6 <__ascii_wctomb>:
    6bd6:	1e0b      	subs	r3, r1, #0
    6bd8:	d004      	beq.n	6be4 <__ascii_wctomb+0xe>
    6bda:	2aff      	cmp	r2, #255	; 0xff
    6bdc:	d904      	bls.n	6be8 <__ascii_wctomb+0x12>
    6bde:	238a      	movs	r3, #138	; 0x8a
    6be0:	6003      	str	r3, [r0, #0]
    6be2:	3b8b      	subs	r3, #139	; 0x8b
    6be4:	0018      	movs	r0, r3
    6be6:	4770      	bx	lr
    6be8:	700a      	strb	r2, [r1, #0]
    6bea:	2301      	movs	r3, #1
    6bec:	e7fa      	b.n	6be4 <__ascii_wctomb+0xe>

00006bee <_malloc_usable_size_r>:
    6bee:	1f0b      	subs	r3, r1, #4
    6bf0:	681b      	ldr	r3, [r3, #0]
    6bf2:	1f18      	subs	r0, r3, #4
    6bf4:	2b00      	cmp	r3, #0
    6bf6:	da01      	bge.n	6bfc <_malloc_usable_size_r+0xe>
    6bf8:	580b      	ldr	r3, [r1, r0]
    6bfa:	18c0      	adds	r0, r0, r3
    6bfc:	4770      	bx	lr
    6bfe:	0000      	movs	r0, r0
    6c00:	0d5a5441 	.word	0x0d5a5441
    6c04:	00000000 	.word	0x00000000
    6c08:	30455441 	.word	0x30455441
    6c0c:	0000000d 	.word	0x0000000d
    6c10:	30485441 	.word	0x30485441
    6c14:	0000000d 	.word	0x0000000d
    6c18:	44303130 	.word	0x44303130
    6c1c:	0000000d 	.word	0x0000000d
    6c20:	58323025 	.word	0x58323025
    6c24:	58323025 	.word	0x58323025
    6c28:	0000000d 	.word	0x0000000d
    6c2c:	410d0a0d 	.word	0x410d0a0d
    6c30:	72666164 	.word	0x72666164
    6c34:	00746975 	.word	0x00746975
    6c38:	0a313023 	.word	0x0a313023
    6c3c:	00000000 	.word	0x00000000
    6c40:	00303054 	.word	0x00303054
    6c44:	00000a4c 	.word	0x00000a4c
    6c48:	64253054 	.word	0x64253054
    6c4c:	00000000 	.word	0x00000000
    6c50:	20626f62 	.word	0x20626f62
    6c54:	20736177 	.word	0x20736177
    6c58:	6e756f66 	.word	0x6e756f66
    6c5c:	00000064 	.word	0x00000064
    6c60:	204d5750 	.word	0x204d5750
    6c64:	00006425 	.word	0x00006425
    6c68:	6425203a 	.word	0x6425203a
    6c6c:	00000000 	.word	0x00000000
    6c70:	31414846 	.word	0x31414846
    6c74:	00000000 	.word	0x00000000
    6c78:	00202d20 	.word	0x00202d20
    6c7c:	004b4341 	.word	0x004b4341
    6c80:	30414846 	.word	0x30414846
    6c84:	00000000 	.word	0x00000000
    6c88:	20414b42 	.word	0x20414b42
    6c8c:	00000031 	.word	0x00000031
    6c90:	20414b42 	.word	0x20414b42
    6c94:	00000030 	.word	0x00000030
    6c98:	204c4b42 	.word	0x204c4b42
    6c9c:	00000031 	.word	0x00000031
    6ca0:	204c4b42 	.word	0x204c4b42
    6ca4:	00000030 	.word	0x00000030
    6ca8:	20524b42 	.word	0x20524b42
    6cac:	00000031 	.word	0x00000031
    6cb0:	20524b42 	.word	0x20524b42
    6cb4:	00000030 	.word	0x00000030
    6cb8:	314e5248 	.word	0x314e5248
    6cbc:	00003120 	.word	0x00003120
    6cc0:	314e5248 	.word	0x314e5248
    6cc4:	00003020 	.word	0x00003020
    6cc8:	324e5248 	.word	0x324e5248
    6ccc:	00003120 	.word	0x00003120
    6cd0:	324e5248 	.word	0x324e5248
    6cd4:	00003020 	.word	0x00003020
    6cd8:	334e5248 	.word	0x334e5248
    6cdc:	00003120 	.word	0x00003120
    6ce0:	334e5248 	.word	0x334e5248
    6ce4:	00003020 	.word	0x00003020
    6ce8:	344e5248 	.word	0x344e5248
    6cec:	00003120 	.word	0x00003120
    6cf0:	344e5248 	.word	0x344e5248
    6cf4:	00003020 	.word	0x00003020
    6cf8:	00004253 	.word	0x00004253
    6cfc:	64254253 	.word	0x64254253
    6d00:	0000000a 	.word	0x0000000a
    6d04:	53524253 	.word	0x53524253
    6d08:	32342054 	.word	0x32342054
    6d0c:	00000000 	.word	0x00000000
    6d10:	203a4253 	.word	0x203a4253
    6d14:	45534552 	.word	0x45534552
    6d18:	4e495454 	.word	0x4e495454
    6d1c:	00000047 	.word	0x00000047
    6d20:	20545250 	.word	0x20545250
    6d24:	00000031 	.word	0x00000031
    6d28:	20545250 	.word	0x20545250
    6d2c:	00000030 	.word	0x00000030
    6d30:	20525457 	.word	0x20525457
    6d34:	00000031 	.word	0x00000031
    6d38:	20415453 	.word	0x20415453
    6d3c:	00000031 	.word	0x00000031
    6d40:	20415453 	.word	0x20415453
    6d44:	00000030 	.word	0x00000030
    6d48:	2044454c 	.word	0x2044454c
    6d4c:	00000031 	.word	0x00000031
    6d50:	2044454c 	.word	0x2044454c
    6d54:	00000030 	.word	0x00000030
    6d58:	204c4448 	.word	0x204c4448
    6d5c:	00000031 	.word	0x00000031
    6d60:	204c4448 	.word	0x204c4448
    6d64:	00000030 	.word	0x00000030
    6d68:	41495242 	.word	0x41495242
    6d6c:	0031204e 	.word	0x0031204e
    6d70:	41495242 	.word	0x41495242
    6d74:	0030204e 	.word	0x0030204e
    6d78:	48534c46 	.word	0x48534c46
    6d7c:	00312031 	.word	0x00312031
    6d80:	48534c46 	.word	0x48534c46
    6d84:	00302031 	.word	0x00302031
    6d88:	48534c46 	.word	0x48534c46
    6d8c:	00312032 	.word	0x00312032
    6d90:	48534c46 	.word	0x48534c46
    6d94:	00302032 	.word	0x00302032
    6d98:	48534c46 	.word	0x48534c46
    6d9c:	00312033 	.word	0x00312033
    6da0:	48534c46 	.word	0x48534c46
    6da4:	00302033 	.word	0x00302033
    6da8:	48534c46 	.word	0x48534c46
    6dac:	31204446 	.word	0x31204446
    6db0:	00000000 	.word	0x00000000
    6db4:	48534c46 	.word	0x48534c46
    6db8:	30204446 	.word	0x30204446
    6dbc:	00000000 	.word	0x00000000
    6dc0:	5254534d 	.word	0x5254534d
    6dc4:	20545352 	.word	0x20545352
    6dc8:	00003234 	.word	0x00003234
    6dcc:	45534552 	.word	0x45534552
    6dd0:	43412054 	.word	0x43412054
    6dd4:	00000a4b 	.word	0x00000a4b
    6dd8:	52524e4d 	.word	0x52524e4d
    6ddc:	34205453 	.word	0x34205453
    6de0:	00000032 	.word	0x00000032
    6de4:	4f4e494d 	.word	0x4f4e494d
    6de8:	45522052 	.word	0x45522052
    6dec:	20544553 	.word	0x20544553
    6df0:	0a4b4341 	.word	0x0a4b4341
    6df4:	00000000 	.word	0x00000000
    6df8:	4f4e494d 	.word	0x4f4e494d
    6dfc:	45522052 	.word	0x45522052
    6e00:	20544553 	.word	0x20544553
    6e04:	454e4f44 	.word	0x454e4f44
    6e08:	0000000a 	.word	0x0000000a
    6e0c:	54545250 	.word	0x54545250
    6e10:	30485352 	.word	0x30485352
    6e14:	00000000 	.word	0x00000000
    6e18:	54545250 	.word	0x54545250
    6e1c:	30485352 	.word	0x30485352
    6e20:	00642520 	.word	0x00642520
    6e24:	54545250 	.word	0x54545250
    6e28:	31485352 	.word	0x31485352
    6e2c:	00000000 	.word	0x00000000
    6e30:	54545250 	.word	0x54545250
    6e34:	31485352 	.word	0x31485352
    6e38:	00642520 	.word	0x00642520
    6e3c:	54545250 	.word	0x54545250
    6e40:	32485352 	.word	0x32485352
    6e44:	00000000 	.word	0x00000000
    6e48:	54545250 	.word	0x54545250
    6e4c:	32485352 	.word	0x32485352
    6e50:	00642520 	.word	0x00642520
    6e54:	54545250 	.word	0x54545250
    6e58:	33485352 	.word	0x33485352
    6e5c:	00000000 	.word	0x00000000
    6e60:	54545250 	.word	0x54545250
    6e64:	33485352 	.word	0x33485352
    6e68:	00642520 	.word	0x00642520
    6e6c:	54545250 	.word	0x54545250
    6e70:	34485352 	.word	0x34485352
    6e74:	00000000 	.word	0x00000000
    6e78:	54545250 	.word	0x54545250
    6e7c:	34485352 	.word	0x34485352
    6e80:	00642520 	.word	0x00642520
    6e84:	54545250 	.word	0x54545250
    6e88:	35485352 	.word	0x35485352
    6e8c:	00000000 	.word	0x00000000
    6e90:	54545250 	.word	0x54545250
    6e94:	35485352 	.word	0x35485352
    6e98:	00642520 	.word	0x00642520
    6e9c:	54545250 	.word	0x54545250
    6ea0:	36485352 	.word	0x36485352
    6ea4:	00000000 	.word	0x00000000
    6ea8:	54545250 	.word	0x54545250
    6eac:	36485352 	.word	0x36485352
    6eb0:	00642520 	.word	0x00642520
    6eb4:	54545250 	.word	0x54545250
    6eb8:	37485352 	.word	0x37485352
    6ebc:	00000000 	.word	0x00000000
    6ec0:	54545250 	.word	0x54545250
    6ec4:	37485352 	.word	0x37485352
    6ec8:	00642520 	.word	0x00642520
    6ecc:	20564f43 	.word	0x20564f43
    6ed0:	00000031 	.word	0x00000031
    6ed4:	20564f43 	.word	0x20564f43
    6ed8:	00000030 	.word	0x00000030
    6edc:	52545250 	.word	0x52545250
    6ee0:	00313256 	.word	0x00313256
    6ee4:	52545250 	.word	0x52545250
    6ee8:	20313256 	.word	0x20313256
    6eec:	00006425 	.word	0x00006425
    6ef0:	52545250 	.word	0x52545250
    6ef4:	00303256 	.word	0x00303256
    6ef8:	5254534d 	.word	0x5254534d
    6efc:	20545354 	.word	0x20545354
    6f00:	00003234 	.word	0x00003234
    6f04:	52444441 	.word	0x52444441
    6f08:	6425203a 	.word	0x6425203a
    6f0c:	203e2d20 	.word	0x203e2d20
    6f10:	000a6425 	.word	0x000a6425
    6f14:	3a525245 	.word	0x3a525245
    6f18:	25642520 	.word	0x25642520
    6f1c:	25642564 	.word	0x25642564
    6f20:	25642564 	.word	0x25642564
    6f24:	25642564 	.word	0x25642564
    6f28:	000a0d64 	.word	0x000a0d64
    6f2c:	25203a45 	.word	0x25203a45
    6f30:	202d2064 	.word	0x202d2064
    6f34:	000a6425 	.word	0x000a6425
    6f38:	204c4c41 	.word	0x204c4c41
    6f3c:	00004b4f 	.word	0x00004b4f
    6f40:	000026bc 	.word	0x000026bc
    6f44:	000026ce 	.word	0x000026ce
    6f48:	000026e0 	.word	0x000026e0
    6f4c:	000026f2 	.word	0x000026f2
    6f50:	00002710 	.word	0x00002710
    6f54:	00002722 	.word	0x00002722
    6f58:	00002734 	.word	0x00002734
    6f5c:	00002746 	.word	0x00002746
    6f60:	00002758 	.word	0x00002758
    6f64:	0000276a 	.word	0x0000276a
    6f68:	0000277c 	.word	0x0000277c
    6f6c:	0000278e 	.word	0x0000278e
    6f70:	000027a0 	.word	0x000027a0
    6f74:	000027f4 	.word	0x000027f4
    6f78:	00002812 	.word	0x00002812
    6f7c:	0000282c 	.word	0x0000282c
    6f80:	00002846 	.word	0x00002846
    6f84:	00002860 	.word	0x00002860
    6f88:	0000287a 	.word	0x0000287a
    6f8c:	00002894 	.word	0x00002894
    6f90:	000028d2 	.word	0x000028d2
    6f94:	00002928 	.word	0x00002928
    6f98:	0000297e 	.word	0x0000297e
    6f9c:	000029d4 	.word	0x000029d4
    6fa0:	64343025 	.word	0x64343025
    6fa4:	34302520 	.word	0x34302520
    6fa8:	30252064 	.word	0x30252064
    6fac:	25206434 	.word	0x25206434
    6fb0:	20643430 	.word	0x20643430
    6fb4:	64343025 	.word	0x64343025
    6fb8:	34302520 	.word	0x34302520
    6fbc:	000a0d64 	.word	0x000a0d64
    6fc0:	45444e55 	.word	0x45444e55
    6fc4:	454e4946 	.word	0x454e4946
    6fc8:	49462044 	.word	0x49462044
    6fcc:	0000454c 	.word	0x0000454c
    6fd0:	00412f4e 	.word	0x00412f4e
    6fd4:	66616441 	.word	0x66616441
    6fd8:	74697572 	.word	0x74697572
    6fdc:	20584620 	.word	0x20584620
    6fe0:	6e756f53 	.word	0x6e756f53
    6fe4:	6f422064 	.word	0x6f422064
    6fe8:	00647261 	.word	0x00647261
    6fec:	656c6946 	.word	0x656c6946
    6ff0:	00002073 	.word	0x00002073
    6ff4:	656c6946 	.word	0x656c6946
    6ff8:	64252073 	.word	0x64252073
    6ffc:	00000a0d 	.word	0x00000a0d
    7000:	20544146 	.word	0x20544146
    7004:	00000000 	.word	0x00000000
    7008:	20544146 	.word	0x20544146
    700c:	0a0d7825 	.word	0x0a0d7825
    7010:	00000000 	.word	0x00000000
    7014:	00000a4c 	.word	0x00000a4c
    7018:	69466f4e 	.word	0x69466f4e
    701c:	0000656c 	.word	0x0000656c
    7020:	656e6f64 	.word	0x656e6f64
    7024:	00000000 	.word	0x00000000
    7028:	79616c70 	.word	0x79616c70
    702c:	00000000 	.word	0x00000000
    7030:	00564157 	.word	0x00564157
    7034:	0047474f 	.word	0x0047474f
    7038:	700d0a0d 	.word	0x700d0a0d
    703c:	0979616c 	.word	0x0979616c
    7040:	54096425 	.word	0x54096425
    7044:	20206425 	.word	0x20206425
    7048:	25202020 	.word	0x25202020
    704c:	0a5e5b33 	.word	0x0a5e5b33
    7050:	0000005d 	.word	0x0000005d
    7054:	700d0a0d 	.word	0x700d0a0d
    7058:	0979616c 	.word	0x0979616c
    705c:	25096425 	.word	0x25096425
    7060:	20202073 	.word	0x20202073
    7064:	33252020 	.word	0x33252020
    7068:	5d0a5e5b 	.word	0x5d0a5e5b
    706c:	00000000 	.word	0x00000000
    7070:	000a0d09 	.word	0x000a0d09
    7074:	25733825 	.word	0x25733825
    7078:	64257333 	.word	0x64257333
    707c:	00000009 	.word	0x00000009
    7080:	0a642523 	.word	0x0a642523
    7084:	00000000 	.word	0x00000000
    7088:	00000a71 	.word	0x00000a71
    708c:	00004492 	.word	0x00004492
    7090:	0000450a 	.word	0x0000450a
    7094:	0000450a 	.word	0x0000450a
    7098:	000044b0 	.word	0x000044b0
    709c:	000044aa 	.word	0x000044aa
    70a0:	000044b6 	.word	0x000044b6
    70a4:	00004498 	.word	0x00004498
    70a8:	000044bc 	.word	0x000044bc
    70ac:	000044f0 	.word	0x000044f0
    70b0:	000045e4 	.word	0x000045e4
    70b4:	00004634 	.word	0x00004634
    70b8:	00004634 	.word	0x00004634
    70bc:	00004630 	.word	0x00004630
    70c0:	000045d6 	.word	0x000045d6
    70c4:	000045f6 	.word	0x000045f6
    70c8:	000045c6 	.word	0x000045c6
    70cc:	00004608 	.word	0x00004608
    70d0:	0000461a 	.word	0x0000461a
    70d4:	43455845 	.word	0x43455845
    70d8:	44524f20 	.word	0x44524f20
    70dc:	36205245 	.word	0x36205245
    70e0:	0a36      	.short	0x0a36
    70e2:	00          	.byte	0x00
    70e3:	23          	.byte	0x23
    70e4:	202b302d 	.word	0x202b302d
    70e8:	4c6c6800 	.word	0x4c6c6800
    70ec:	67666500 	.word	0x67666500
    70f0:	00474645 	.word	0x00474645
    70f4:	33323130 	.word	0x33323130
    70f8:	37363534 	.word	0x37363534
    70fc:	42413938 	.word	0x42413938
    7100:	46454443 	.word	0x46454443
    7104:	32313000 	.word	0x32313000
    7108:	36353433 	.word	0x36353433
    710c:	61393837 	.word	0x61393837
    7110:	65646362 	.word	0x65646362
    7114:	00000066 	.word	0x00000066
    7118:	00007136 	.word	0x00007136
    711c:	00007139 	.word	0x00007139
    7120:	0000713c 	.word	0x0000713c
    7124:	61462d41 	.word	0x61462d41
    7128:	3938662d 	.word	0x3938662d
    712c:	33323130 	.word	0x33323130
    7130:	37363534 	.word	0x37363534
    7134:	005d      	.short	0x005d
    7136:	2d2b      	.short	0x2d2b
    7138:	00303000 	.word	0x00303000
    713c:	00005878 	.word	0x00005878

00007140 <__sf_fake_stderr>:
	...

00007160 <__sf_fake_stdin>:
	...

00007180 <__sf_fake_stdout>:
	...
    71a0:	4f500043 00584953 2000002e                       C.POSIX...

000071aa <_ctype_>:
    71aa:	20202000 20202020 28282020 20282828     .         ((((( 
    71ba:	20202020 20202020 20202020 20202020                     
    71ca:	10108820 10101010 10101010 10101010      ...............
    71da:	04040410 04040404 10040404 10101010     ................
    71ea:	41411010 41414141 01010101 01010101     ..AAAAAA........
    71fa:	01010101 01010101 01010101 10101010     ................
    720a:	42421010 42424242 02020202 02020202     ..BBBBBB........
    721a:	02020202 02020202 02020202 10101010     ................
    722a:	00000020 00000000 00000000 00000000      ...............
	...

000072ac <_init>:
    72ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72ae:	46c0      	nop			; (mov r8, r8)
    72b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    72b2:	bc08      	pop	{r3}
    72b4:	469e      	mov	lr, r3
    72b6:	4770      	bx	lr

000072b8 <__init_array_start>:
    72b8:	000000dd 	.word	0x000000dd

000072bc <_fini>:
    72bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72be:	46c0      	nop			; (mov r8, r8)
    72c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    72c2:	bc08      	pop	{r3}
    72c4:	469e      	mov	lr, r3
    72c6:	4770      	bx	lr

000072c8 <__fini_array_start>:
    72c8:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <test_bob>:
2000000c:	5750 004d                                   PWM.

20000010 <bool_map_1>:
	...
20000018:	0100 0000 0000 0000 0000 0001 0000 0000     ................
20000028:	0000 0100 0000 0000 0000 0000 0001 0000     ................
20000038:	0000 0000 0100 0000 0000 0000 0000 0001     ................
20000048:	0000 0000 0000 0100 0000 0000 0000 0001     ................
20000058:	0000 0000 0100 0000 0000 0000 0001 0000     ................
20000068:	0000 0100 0000 0000 0000 0001 0000 0000     ................
20000078:	0100 0000 0000 0000 0001 0000 0000 0000     ................
20000088:	0000 0100 0001 0000 0000 0001 0100 0000     ................
20000098:	0100 0000 0000 0001 0001 0000 0000 0100     ................
200000a8:	0100 0000 0000 0001 0000 0001 0100 0000     ................
200000b8:	0000 0100 0001 0000 0000 0000 0000 0000     ................
200000c8:	0000 0100 0001 0000 0000 0000 0000 0000     ................
200000d8:	0101 0101 0101 0101                         ........

200000e0 <mcp23017_data>:
200000e0:	0000 0000 0020 0000 0000 0000 0000 0000     .... ...........
200000f0:	0001 0000 0021 0000 0000 0000 0000 0000     ....!...........
20000100:	0001 0000 0022 0000 0000 0000 0000 0000     ...."...........
20000110:	0001 0000 0023 0000 0000 0000 0000 0000     ....#...........
20000120:	0001 0000 0024 0000 0000 0000 0000 0000     ....$...........
20000130:	0001 0000 0025 0000 0000 0000 0000 0000     ....%...........
20000140:	0000 0000 0026 0000 0000 0000 0000 0000     ....&...........
20000150:	0000 0000 0027 0000 0000 0000 0000 0000     ....'...........

20000160 <duty_cycle.13750>:
20000160:	003e 0000                                   >...

20000164 <soundboard_instance>:
	...
2000017c:	6fc0 0000 6fd0 0000 0000 0000 0000 0000     .o...o..........
2000018c:	0001 0000 6fc0 0000 6fd0 0000 0000 0000     .....o...o......
2000019c:	0000 0000 0002 0000 6fc0 0000 6fd0 0000     .........o...o..
	...
200001b4:	0003 0000 6fc0 0000 6fd0 0000 0000 0000     .....o...o......
200001c4:	0000 0000 0004 0000 6fc0 0000 6fd0 0000     .........o...o..
	...
200001dc:	0005 0000 6fc0 0000 6fd0 0000 0000 0000     .....o...o......
200001ec:	0000 0000 0006 0000 6fc0 0000 6fd0 0000     .........o...o..
	...
20000204:	0007 0000 6fc0 0000 6fd0 0000 0000 0000     .....o...o......
20000214:	0000 0000 0008 0000 6fc0 0000 6fd0 0000     .........o...o..
	...
2000022c:	0009 0000 6fc0 0000 6fd0 0000 0000 0000     .....o...o......
2000023c:	0000 0000 000a 0000 6fc0 0000 6fd0 0000     .........o...o..
	...
20000254:	000b 0000 6fc0 0000 6fd0 0000 0000 0000     .....o...o......
20000264:	0000 0000 000c 0000 6fc0 0000 6fd0 0000     .........o...o..
	...
2000027c:	000d 0000 6fc0 0000 6fd0 0000 0000 0000     .....o...o......
2000028c:	0000 0000 000e 0000 6fc0 0000 6fd0 0000     .........o...o..
	...
200002a4:	000f 0000 6fc0 0000 6fd0 0000 0000 0000     .....o...o......
200002b4:	0000 0000 0010 0000 6fc0 0000 6fd0 0000     .........o...o..
	...
200002cc:	0011 0000 6fc0 0000 6fd0 0000 0000 0000     .....o...o......
200002dc:	0000 0000 0012 0000 6fc0 0000 6fd0 0000     .........o...o..
	...
200002f4:	0013 0000 6fc0 0000 6fd0 0000 0000 0000     .....o...o......
20000304:	0000 0000 0014 0000 6fc0 0000 6fd0 0000     .........o...o..
	...
2000031c:	0015 0000 6fc0 0000 6fd0 0000 0000 0000     .....o...o......
2000032c:	0000 0000 0016 0000 6fc0 0000 6fd0 0000     .........o...o..
	...
20000344:	0017 0000 6fc0 0000 6fd0 0000 0000 0000     .....o...o......
20000354:	0000 0000 0018 0000 6fc0 0000 6fd0 0000     .........o...o..
20000364:	0000 0000                                   ....

20000368 <g_interrupt_enabled>:
20000368:	0001 0000                                   ....

2000036c <_impure_ptr>:
2000036c:	0370 2000                                   p.. 

20000370 <impure_data>:
20000370:	0000 0000 7160 0000 7180 0000 7140 0000     ....`q...q..@q..
	...

200003d0 <__global_locale>:
200003d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200003f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000410:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000430:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000450:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000470:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000490:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004b0:	6bd7 0000 6b2d 0000 0000 0000 71aa 0000     .k..-k.......q..
200004c0:	71a8 0000 70e8 0000 70e8 0000 70e8 0000     .q...p...p...p..
200004d0:	70e8 0000 70e8 0000 70e8 0000 70e8 0000     .p...p...p...p..
200004e0:	70e8 0000 70e8 0000 ffff ffff ffff ffff     .p...p..........
200004f0:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000518:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
