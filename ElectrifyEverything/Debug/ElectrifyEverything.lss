
ElectrifyEverything.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000089dc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000089dc  000089dc  000189dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000000bc  20000000  000089e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001c4  200000bc  00008aa0  000200bc  2**2
                  ALLOC
  4 .stack        00002000  20000280  00008c64  000200bc  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
  7 .debug_info   000376ca  00000000  00000000  0002013d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003d50  00000000  00000000  00057807  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003127  00000000  00000000  0005b557  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000980  00000000  00000000  0005e67e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000800  00000000  00000000  0005effe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009201  00000000  00000000  0005f7fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000116b1  00000000  00000000  000689ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00089698  00000000  00000000  0007a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002718  00000000  00000000  00103748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002280 	.word	0x20002280
       4:	00004fd1 	.word	0x00004fd1
       8:	000050c9 	.word	0x000050c9
       c:	000050c9 	.word	0x000050c9
	...
      2c:	000050c9 	.word	0x000050c9
	...
      38:	000050c9 	.word	0x000050c9
      3c:	000050c9 	.word	0x000050c9
      40:	000050c9 	.word	0x000050c9
      44:	000050c9 	.word	0x000050c9
      48:	00001ad1 	.word	0x00001ad1
      4c:	000050c9 	.word	0x000050c9
      50:	000009bd 	.word	0x000009bd
      54:	000050c9 	.word	0x000050c9
      58:	000050c9 	.word	0x000050c9
      5c:	000050c9 	.word	0x000050c9
      60:	000050c9 	.word	0x000050c9
      64:	000050c9 	.word	0x000050c9
      68:	000050c9 	.word	0x000050c9
      6c:	00001df5 	.word	0x00001df5
      70:	000050c9 	.word	0x000050c9
      74:	000050c9 	.word	0x000050c9
      78:	000050c9 	.word	0x000050c9
      7c:	000050c9 	.word	0x000050c9
      80:	000050c9 	.word	0x000050c9
      84:	000050c9 	.word	0x000050c9
      88:	00004021 	.word	0x00004021
      8c:	000050c9 	.word	0x000050c9
      90:	000050c9 	.word	0x000050c9
	...
      9c:	000050c9 	.word	0x000050c9
      a0:	000050c9 	.word	0x000050c9
      a4:	000050c9 	.word	0x000050c9
      a8:	000050c9 	.word	0x000050c9
      ac:	000050c9 	.word	0x000050c9
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000bc 	.word	0x200000bc
      d4:	00000000 	.word	0x00000000
      d8:	000089e4 	.word	0x000089e4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000c0 	.word	0x200000c0
     108:	000089e4 	.word	0x000089e4
     10c:	000089e4 	.word	0x000089e4
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
}
     118:	46c0      	nop			; (mov r8, r8)
     11a:	46bd      	mov	sp, r7
     11c:	bd80      	pop	{r7, pc}
     11e:	46c0      	nop			; (mov r8, r8)

00000120 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     120:	b580      	push	{r7, lr}
     122:	b082      	sub	sp, #8
     124:	af00      	add	r7, sp, #0
     126:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     128:	687b      	ldr	r3, [r7, #4]
     12a:	2200      	movs	r2, #0
     12c:	701a      	strb	r2, [r3, #0]
}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	46bd      	mov	sp, r7
     132:	b002      	add	sp, #8
     134:	bd80      	pop	{r7, pc}
     136:	46c0      	nop			; (mov r8, r8)

00000138 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     138:	b580      	push	{r7, lr}
     13a:	b082      	sub	sp, #8
     13c:	af00      	add	r7, sp, #0
     13e:	0002      	movs	r2, r0
     140:	6039      	str	r1, [r7, #0]
     142:	1dfb      	adds	r3, r7, #7
     144:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     146:	1dfb      	adds	r3, r7, #7
     148:	781b      	ldrb	r3, [r3, #0]
     14a:	2b01      	cmp	r3, #1
     14c:	d00a      	beq.n	164 <system_apb_clock_set_mask+0x2c>
     14e:	2b02      	cmp	r3, #2
     150:	d00f      	beq.n	172 <system_apb_clock_set_mask+0x3a>
     152:	2b00      	cmp	r3, #0
     154:	d114      	bne.n	180 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     156:	4b0e      	ldr	r3, [pc, #56]	; (190 <system_apb_clock_set_mask+0x58>)
     158:	4a0d      	ldr	r2, [pc, #52]	; (190 <system_apb_clock_set_mask+0x58>)
     15a:	6991      	ldr	r1, [r2, #24]
     15c:	683a      	ldr	r2, [r7, #0]
     15e:	430a      	orrs	r2, r1
     160:	619a      	str	r2, [r3, #24]
			break;
     162:	e00f      	b.n	184 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     164:	4b0a      	ldr	r3, [pc, #40]	; (190 <system_apb_clock_set_mask+0x58>)
     166:	4a0a      	ldr	r2, [pc, #40]	; (190 <system_apb_clock_set_mask+0x58>)
     168:	69d1      	ldr	r1, [r2, #28]
     16a:	683a      	ldr	r2, [r7, #0]
     16c:	430a      	orrs	r2, r1
     16e:	61da      	str	r2, [r3, #28]
			break;
     170:	e008      	b.n	184 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     172:	4b07      	ldr	r3, [pc, #28]	; (190 <system_apb_clock_set_mask+0x58>)
     174:	4a06      	ldr	r2, [pc, #24]	; (190 <system_apb_clock_set_mask+0x58>)
     176:	6a11      	ldr	r1, [r2, #32]
     178:	683a      	ldr	r2, [r7, #0]
     17a:	430a      	orrs	r2, r1
     17c:	621a      	str	r2, [r3, #32]
			break;
     17e:	e001      	b.n	184 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     180:	2317      	movs	r3, #23
     182:	e000      	b.n	186 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     184:	2300      	movs	r3, #0
}
     186:	0018      	movs	r0, r3
     188:	46bd      	mov	sp, r7
     18a:	b002      	add	sp, #8
     18c:	bd80      	pop	{r7, pc}
     18e:	46c0      	nop			; (mov r8, r8)
     190:	40000400 	.word	0x40000400

00000194 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     194:	b580      	push	{r7, lr}
     196:	b082      	sub	sp, #8
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	2280      	movs	r2, #128	; 0x80
     1a0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1a2:	687b      	ldr	r3, [r7, #4]
     1a4:	2200      	movs	r2, #0
     1a6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1a8:	687b      	ldr	r3, [r7, #4]
     1aa:	2201      	movs	r2, #1
     1ac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     1ae:	687b      	ldr	r3, [r7, #4]
     1b0:	2200      	movs	r2, #0
     1b2:	70da      	strb	r2, [r3, #3]
}
     1b4:	46c0      	nop			; (mov r8, r8)
     1b6:	46bd      	mov	sp, r7
     1b8:	b002      	add	sp, #8
     1ba:	bd80      	pop	{r7, pc}

000001bc <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     1bc:	b580      	push	{r7, lr}
     1be:	b082      	sub	sp, #8
     1c0:	af00      	add	r7, sp, #0
     1c2:	0002      	movs	r2, r0
     1c4:	1dfb      	adds	r3, r7, #7
     1c6:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     1c8:	1dfb      	adds	r3, r7, #7
     1ca:	781b      	ldrb	r3, [r3, #0]
     1cc:	2b00      	cmp	r3, #0
     1ce:	d002      	beq.n	1d6 <system_voltage_reference_enable+0x1a>
     1d0:	2b01      	cmp	r3, #1
     1d2:	d007      	beq.n	1e4 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
     1d4:	e00d      	b.n	1f2 <system_voltage_reference_enable+0x36>
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     1d6:	4b08      	ldr	r3, [pc, #32]	; (1f8 <system_voltage_reference_enable+0x3c>)
     1d8:	4a07      	ldr	r2, [pc, #28]	; (1f8 <system_voltage_reference_enable+0x3c>)
     1da:	6c12      	ldr	r2, [r2, #64]	; 0x40
     1dc:	2102      	movs	r1, #2
     1de:	430a      	orrs	r2, r1
     1e0:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     1e2:	e006      	b.n	1f2 <system_voltage_reference_enable+0x36>

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     1e4:	4b04      	ldr	r3, [pc, #16]	; (1f8 <system_voltage_reference_enable+0x3c>)
     1e6:	4a04      	ldr	r2, [pc, #16]	; (1f8 <system_voltage_reference_enable+0x3c>)
     1e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
     1ea:	2104      	movs	r1, #4
     1ec:	430a      	orrs	r2, r1
     1ee:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     1f0:	46c0      	nop			; (mov r8, r8)

		default:
			Assert(false);
			return;
	}
}
     1f2:	46bd      	mov	sp, r7
     1f4:	b002      	add	sp, #8
     1f6:	bd80      	pop	{r7, pc}
     1f8:	40000800 	.word	0x40000800

000001fc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b084      	sub	sp, #16
     200:	af00      	add	r7, sp, #0
     202:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     204:	687b      	ldr	r3, [r7, #4]
     206:	681b      	ldr	r3, [r3, #0]
     208:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     20a:	68fb      	ldr	r3, [r7, #12]
     20c:	7e5b      	ldrb	r3, [r3, #25]
     20e:	b2db      	uxtb	r3, r3
     210:	b25b      	sxtb	r3, r3
     212:	2b00      	cmp	r3, #0
     214:	da01      	bge.n	21a <adc_is_syncing+0x1e>
		return true;
     216:	2301      	movs	r3, #1
     218:	e000      	b.n	21c <adc_is_syncing+0x20>
	}

	return false;
     21a:	2300      	movs	r3, #0
}
     21c:	0018      	movs	r0, r3
     21e:	46bd      	mov	sp, r7
     220:	b004      	add	sp, #16
     222:	bd80      	pop	{r7, pc}

00000224 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     224:	b580      	push	{r7, lr}
     226:	b082      	sub	sp, #8
     228:	af00      	add	r7, sp, #0
     22a:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     22c:	687b      	ldr	r3, [r7, #4]
     22e:	2200      	movs	r2, #0
     230:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     232:	687b      	ldr	r3, [r7, #4]
     234:	2200      	movs	r2, #0
     236:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     238:	687b      	ldr	r3, [r7, #4]
     23a:	2200      	movs	r2, #0
     23c:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     23e:	687b      	ldr	r3, [r7, #4]
     240:	2200      	movs	r2, #0
     242:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     244:	687b      	ldr	r3, [r7, #4]
     246:	2200      	movs	r2, #0
     248:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	2200      	movs	r2, #0
     24e:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     250:	687b      	ldr	r3, [r7, #4]
     252:	2200      	movs	r2, #0
     254:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     256:	687b      	ldr	r3, [r7, #4]
     258:	2200      	movs	r2, #0
     25a:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     25c:	687b      	ldr	r3, [r7, #4]
     25e:	2200      	movs	r2, #0
     260:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     262:	687b      	ldr	r3, [r7, #4]
     264:	22c0      	movs	r2, #192	; 0xc0
     266:	0152      	lsls	r2, r2, #5
     268:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     26a:	687b      	ldr	r3, [r7, #4]
     26c:	2200      	movs	r2, #0
     26e:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     270:	687b      	ldr	r3, [r7, #4]
     272:	2200      	movs	r2, #0
     274:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
     276:	687b      	ldr	r3, [r7, #4]
     278:	2200      	movs	r2, #0
     27a:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
     27c:	687b      	ldr	r3, [r7, #4]
     27e:	2200      	movs	r2, #0
     280:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
     282:	687b      	ldr	r3, [r7, #4]
     284:	2200      	movs	r2, #0
     286:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     288:	687b      	ldr	r3, [r7, #4]
     28a:	222a      	movs	r2, #42	; 0x2a
     28c:	2100      	movs	r1, #0
     28e:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     290:	687b      	ldr	r3, [r7, #4]
     292:	2200      	movs	r2, #0
     294:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
     296:	687b      	ldr	r3, [r7, #4]
     298:	2200      	movs	r2, #0
     29a:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
     29c:	687b      	ldr	r3, [r7, #4]
     29e:	2224      	movs	r2, #36	; 0x24
     2a0:	2100      	movs	r1, #0
     2a2:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     2a4:	687b      	ldr	r3, [r7, #4]
     2a6:	2200      	movs	r2, #0
     2a8:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	2200      	movs	r2, #0
     2ae:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     2b0:	687b      	ldr	r3, [r7, #4]
     2b2:	2200      	movs	r2, #0
     2b4:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
     2b6:	687b      	ldr	r3, [r7, #4]
     2b8:	222b      	movs	r2, #43	; 0x2b
     2ba:	2100      	movs	r1, #0
     2bc:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
     2be:	687b      	ldr	r3, [r7, #4]
     2c0:	222c      	movs	r2, #44	; 0x2c
     2c2:	2100      	movs	r1, #0
     2c4:	5499      	strb	r1, [r3, r2]
}
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	46bd      	mov	sp, r7
     2ca:	b002      	add	sp, #8
     2cc:	bd80      	pop	{r7, pc}
     2ce:	46c0      	nop			; (mov r8, r8)

000002d0 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b098      	sub	sp, #96	; 0x60
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     2d8:	230c      	movs	r3, #12
     2da:	18fa      	adds	r2, r7, r3
     2dc:	4b15      	ldr	r3, [pc, #84]	; (334 <_adc_configure_ain_pin+0x64>)
     2de:	0010      	movs	r0, r2
     2e0:	0019      	movs	r1, r3
     2e2:	2350      	movs	r3, #80	; 0x50
     2e4:	001a      	movs	r2, r3
     2e6:	4b14      	ldr	r3, [pc, #80]	; (338 <_adc_configure_ain_pin+0x68>)
     2e8:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     2ea:	4b14      	ldr	r3, [pc, #80]	; (33c <_adc_configure_ain_pin+0x6c>)
     2ec:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
     2ee:	687b      	ldr	r3, [r7, #4]
     2f0:	2b13      	cmp	r3, #19
     2f2:	d81a      	bhi.n	32a <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2f4:	230c      	movs	r3, #12
     2f6:	18fb      	adds	r3, r7, r3
     2f8:	687a      	ldr	r2, [r7, #4]
     2fa:	0092      	lsls	r2, r2, #2
     2fc:	58d3      	ldr	r3, [r2, r3]
     2fe:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     300:	2308      	movs	r3, #8
     302:	18fb      	adds	r3, r7, r3
     304:	0018      	movs	r0, r3
     306:	4b0e      	ldr	r3, [pc, #56]	; (340 <_adc_configure_ain_pin+0x70>)
     308:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     30a:	2308      	movs	r3, #8
     30c:	18fb      	adds	r3, r7, r3
     30e:	2200      	movs	r2, #0
     310:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     312:	2308      	movs	r3, #8
     314:	18fb      	adds	r3, r7, r3
     316:	2201      	movs	r2, #1
     318:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     31a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     31c:	b2db      	uxtb	r3, r3
     31e:	2208      	movs	r2, #8
     320:	18ba      	adds	r2, r7, r2
     322:	0011      	movs	r1, r2
     324:	0018      	movs	r0, r3
     326:	4b07      	ldr	r3, [pc, #28]	; (344 <_adc_configure_ain_pin+0x74>)
     328:	4798      	blx	r3
	}
}
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	46bd      	mov	sp, r7
     32e:	b018      	add	sp, #96	; 0x60
     330:	bd80      	pop	{r7, pc}
     332:	46c0      	nop			; (mov r8, r8)
     334:	00008358 	.word	0x00008358
     338:	00007115 	.word	0x00007115
     33c:	0000ffff 	.word	0x0000ffff
     340:	00000195 	.word	0x00000195
     344:	00004f49 	.word	0x00004f49

00000348 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     348:	b5f0      	push	{r4, r5, r6, r7, lr}
     34a:	b089      	sub	sp, #36	; 0x24
     34c:	af00      	add	r7, sp, #0
     34e:	6078      	str	r0, [r7, #4]
     350:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
     352:	231f      	movs	r3, #31
     354:	18fb      	adds	r3, r7, r3
     356:	2200      	movs	r2, #0
     358:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     35a:	2310      	movs	r3, #16
     35c:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     35e:	2317      	movs	r3, #23
     360:	18fb      	adds	r3, r7, r3
     362:	2200      	movs	r2, #0
     364:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     366:	687b      	ldr	r3, [r7, #4]
     368:	681b      	ldr	r3, [r3, #0]
     36a:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     36c:	230c      	movs	r3, #12
     36e:	18fb      	adds	r3, r7, r3
     370:	0018      	movs	r0, r3
     372:	4bce      	ldr	r3, [pc, #824]	; (6ac <_adc_set_config+0x364>)
     374:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     376:	683b      	ldr	r3, [r7, #0]
     378:	781a      	ldrb	r2, [r3, #0]
     37a:	230c      	movs	r3, #12
     37c:	18fb      	adds	r3, r7, r3
     37e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     380:	230c      	movs	r3, #12
     382:	18fb      	adds	r3, r7, r3
     384:	0019      	movs	r1, r3
     386:	201e      	movs	r0, #30
     388:	4bc9      	ldr	r3, [pc, #804]	; (6b0 <_adc_set_config+0x368>)
     38a:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     38c:	201e      	movs	r0, #30
     38e:	4bc9      	ldr	r3, [pc, #804]	; (6b4 <_adc_set_config+0x36c>)
     390:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     392:	683b      	ldr	r3, [r7, #0]
     394:	222c      	movs	r2, #44	; 0x2c
     396:	5c9b      	ldrb	r3, [r3, r2]
     398:	2b00      	cmp	r3, #0
     39a:	d040      	beq.n	41e <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
     39c:	2316      	movs	r3, #22
     39e:	18fb      	adds	r3, r7, r3
     3a0:	683a      	ldr	r2, [r7, #0]
     3a2:	212b      	movs	r1, #43	; 0x2b
     3a4:	5c52      	ldrb	r2, [r2, r1]
     3a6:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     3a8:	683b      	ldr	r3, [r7, #0]
     3aa:	7b19      	ldrb	r1, [r3, #12]
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     3ac:	2315      	movs	r3, #21
     3ae:	18fb      	adds	r3, r7, r3
     3b0:	2216      	movs	r2, #22
     3b2:	18ba      	adds	r2, r7, r2
     3b4:	7812      	ldrb	r2, [r2, #0]
     3b6:	188a      	adds	r2, r1, r2
     3b8:	701a      	strb	r2, [r3, #0]
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
     3ba:	683b      	ldr	r3, [r7, #0]
     3bc:	222c      	movs	r2, #44	; 0x2c
     3be:	5c99      	ldrb	r1, [r3, r2]
	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     3c0:	230f      	movs	r3, #15
     3c2:	18fb      	adds	r3, r7, r3
     3c4:	2215      	movs	r2, #21
     3c6:	18ba      	adds	r2, r7, r2
     3c8:	7812      	ldrb	r2, [r2, #0]
     3ca:	188a      	adds	r2, r1, r2
     3cc:	701a      	strb	r2, [r3, #0]
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     3ce:	e018      	b.n	402 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     3d0:	2316      	movs	r3, #22
     3d2:	18fb      	adds	r3, r7, r3
     3d4:	781b      	ldrb	r3, [r3, #0]
     3d6:	220f      	movs	r2, #15
     3d8:	4013      	ands	r3, r2
     3da:	683a      	ldr	r2, [r7, #0]
     3dc:	7b12      	ldrb	r2, [r2, #12]
     3de:	189b      	adds	r3, r3, r2
     3e0:	0018      	movs	r0, r3
     3e2:	4bb5      	ldr	r3, [pc, #724]	; (6b8 <_adc_set_config+0x370>)
     3e4:	4798      	blx	r3
			start_pin++;
     3e6:	2315      	movs	r3, #21
     3e8:	18fb      	adds	r3, r7, r3
     3ea:	781a      	ldrb	r2, [r3, #0]
     3ec:	2315      	movs	r3, #21
     3ee:	18fb      	adds	r3, r7, r3
     3f0:	3201      	adds	r2, #1
     3f2:	701a      	strb	r2, [r3, #0]
			offset++;
     3f4:	2316      	movs	r3, #22
     3f6:	18fb      	adds	r3, r7, r3
     3f8:	781a      	ldrb	r2, [r3, #0]
     3fa:	2316      	movs	r3, #22
     3fc:	18fb      	adds	r3, r7, r3
     3fe:	3201      	adds	r2, #1
     400:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     402:	2315      	movs	r3, #21
     404:	18fa      	adds	r2, r7, r3
     406:	230f      	movs	r3, #15
     408:	18fb      	adds	r3, r7, r3
     40a:	7812      	ldrb	r2, [r2, #0]
     40c:	781b      	ldrb	r3, [r3, #0]
     40e:	429a      	cmp	r2, r3
     410:	d3de      	bcc.n	3d0 <_adc_set_config+0x88>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     412:	683b      	ldr	r3, [r7, #0]
     414:	89db      	ldrh	r3, [r3, #14]
     416:	0018      	movs	r0, r3
     418:	4ba7      	ldr	r3, [pc, #668]	; (6b8 <_adc_set_config+0x370>)
     41a:	4798      	blx	r3
     41c:	e009      	b.n	432 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
     41e:	683b      	ldr	r3, [r7, #0]
     420:	7b1b      	ldrb	r3, [r3, #12]
     422:	0018      	movs	r0, r3
     424:	4ba4      	ldr	r3, [pc, #656]	; (6b8 <_adc_set_config+0x370>)
     426:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
     428:	683b      	ldr	r3, [r7, #0]
     42a:	89db      	ldrh	r3, [r3, #14]
     42c:	0018      	movs	r0, r3
     42e:	4ba2      	ldr	r3, [pc, #648]	; (6b8 <_adc_set_config+0x370>)
     430:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     432:	683b      	ldr	r3, [r7, #0]
     434:	7d5b      	ldrb	r3, [r3, #21]
     436:	009b      	lsls	r3, r3, #2
     438:	b2da      	uxtb	r2, r3
     43a:	693b      	ldr	r3, [r7, #16]
     43c:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     43e:	683b      	ldr	r3, [r7, #0]
     440:	7d9b      	ldrb	r3, [r3, #22]
     442:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     444:	b25a      	sxtb	r2, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);
     446:	683b      	ldr	r3, [r7, #0]
     448:	785b      	ldrb	r3, [r3, #1]

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     44a:	b25b      	sxtb	r3, r3
     44c:	4313      	orrs	r3, r2
     44e:	b25b      	sxtb	r3, r3
     450:	b2da      	uxtb	r2, r3
     452:	693b      	ldr	r3, [r7, #16]
     454:	705a      	strb	r2, [r3, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     456:	683b      	ldr	r3, [r7, #0]
     458:	791b      	ldrb	r3, [r3, #4]
     45a:	2b34      	cmp	r3, #52	; 0x34
     45c:	d846      	bhi.n	4ec <_adc_set_config+0x1a4>
     45e:	009a      	lsls	r2, r3, #2
     460:	4b96      	ldr	r3, [pc, #600]	; (6bc <_adc_set_config+0x374>)
     462:	18d3      	adds	r3, r2, r3
     464:	681b      	ldr	r3, [r3, #0]
     466:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     468:	231f      	movs	r3, #31
     46a:	18fb      	adds	r3, r7, r3
     46c:	683a      	ldr	r2, [r7, #0]
     46e:	7c52      	ldrb	r2, [r2, #17]
     470:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     472:	2317      	movs	r3, #23
     474:	18fb      	adds	r3, r7, r3
     476:	683a      	ldr	r2, [r7, #0]
     478:	7c12      	ldrb	r2, [r2, #16]
     47a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     47c:	2310      	movs	r3, #16
     47e:	61bb      	str	r3, [r7, #24]
		break;
     480:	e036      	b.n	4f0 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     482:	231f      	movs	r3, #31
     484:	18fb      	adds	r3, r7, r3
     486:	2201      	movs	r2, #1
     488:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     48a:	2317      	movs	r3, #23
     48c:	18fb      	adds	r3, r7, r3
     48e:	2202      	movs	r2, #2
     490:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     492:	2310      	movs	r3, #16
     494:	61bb      	str	r3, [r7, #24]
		break;
     496:	e02b      	b.n	4f0 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     498:	231f      	movs	r3, #31
     49a:	18fb      	adds	r3, r7, r3
     49c:	2202      	movs	r2, #2
     49e:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     4a0:	2317      	movs	r3, #23
     4a2:	18fb      	adds	r3, r7, r3
     4a4:	2204      	movs	r2, #4
     4a6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4a8:	2310      	movs	r3, #16
     4aa:	61bb      	str	r3, [r7, #24]
		break;
     4ac:	e020      	b.n	4f0 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     4ae:	231f      	movs	r3, #31
     4b0:	18fb      	adds	r3, r7, r3
     4b2:	2201      	movs	r2, #1
     4b4:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     4b6:	2317      	movs	r3, #23
     4b8:	18fb      	adds	r3, r7, r3
     4ba:	2206      	movs	r2, #6
     4bc:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4be:	2310      	movs	r3, #16
     4c0:	61bb      	str	r3, [r7, #24]
		break;
     4c2:	e015      	b.n	4f0 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     4c4:	231f      	movs	r3, #31
     4c6:	18fb      	adds	r3, r7, r3
     4c8:	2200      	movs	r2, #0
     4ca:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     4cc:	2317      	movs	r3, #23
     4ce:	18fb      	adds	r3, r7, r3
     4d0:	2208      	movs	r2, #8
     4d2:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4d4:	2310      	movs	r3, #16
     4d6:	61bb      	str	r3, [r7, #24]
		break;
     4d8:	e00a      	b.n	4f0 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     4da:	2330      	movs	r3, #48	; 0x30
     4dc:	61bb      	str	r3, [r7, #24]
		break;
     4de:	e007      	b.n	4f0 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     4e0:	2320      	movs	r3, #32
     4e2:	61bb      	str	r3, [r7, #24]
		break;
     4e4:	e004      	b.n	4f0 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     4e6:	2300      	movs	r3, #0
     4e8:	61bb      	str	r3, [r7, #24]
		break;
     4ea:	e001      	b.n	4f0 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     4ec:	2317      	movs	r3, #23
     4ee:	e1ae      	b.n	84e <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     4f0:	231f      	movs	r3, #31
     4f2:	18fb      	adds	r3, r7, r3
     4f4:	781b      	ldrb	r3, [r3, #0]
     4f6:	011b      	lsls	r3, r3, #4
     4f8:	b2db      	uxtb	r3, r3
     4fa:	2270      	movs	r2, #112	; 0x70
     4fc:	4013      	ands	r3, r2
     4fe:	b2da      	uxtb	r2, r3
     500:	2317      	movs	r3, #23
     502:	18fb      	adds	r3, r7, r3
     504:	781b      	ldrb	r3, [r3, #0]
     506:	4313      	orrs	r3, r2
     508:	b2da      	uxtb	r2, r3
     50a:	693b      	ldr	r3, [r7, #16]
     50c:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     50e:	683b      	ldr	r3, [r7, #0]
     510:	7ddb      	ldrb	r3, [r3, #23]
     512:	2b3f      	cmp	r3, #63	; 0x3f
     514:	d901      	bls.n	51a <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
     516:	2317      	movs	r3, #23
     518:	e199      	b.n	84e <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
     51a:	683b      	ldr	r3, [r7, #0]
     51c:	7dda      	ldrb	r2, [r3, #23]
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     51e:	693b      	ldr	r3, [r7, #16]
     520:	70da      	strb	r2, [r3, #3]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     522:	46c0      	nop			; (mov r8, r8)
     524:	687b      	ldr	r3, [r7, #4]
     526:	0018      	movs	r0, r3
     528:	4b65      	ldr	r3, [pc, #404]	; (6c0 <_adc_set_config+0x378>)
     52a:	4798      	blx	r3
     52c:	1e03      	subs	r3, r0, #0
     52e:	d1f9      	bne.n	524 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
     530:	683b      	ldr	r3, [r7, #0]
     532:	885a      	ldrh	r2, [r3, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     534:	69bb      	ldr	r3, [r7, #24]
     536:	b29b      	uxth	r3, r3
     538:	4313      	orrs	r3, r2
     53a:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     53c:	683b      	ldr	r3, [r7, #0]
     53e:	2124      	movs	r1, #36	; 0x24
     540:	5c5b      	ldrb	r3, [r3, r1]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     542:	b29b      	uxth	r3, r3
     544:	00db      	lsls	r3, r3, #3
     546:	b29b      	uxth	r3, r3
     548:	4313      	orrs	r3, r2
     54a:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     54c:	683b      	ldr	r3, [r7, #0]
     54e:	7d1b      	ldrb	r3, [r3, #20]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     550:	b29b      	uxth	r3, r3
     552:	009b      	lsls	r3, r3, #2
     554:	b29b      	uxth	r3, r3
     556:	4313      	orrs	r3, r2
     558:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     55a:	683b      	ldr	r3, [r7, #0]
     55c:	7c9b      	ldrb	r3, [r3, #18]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     55e:	b29b      	uxth	r3, r3
     560:	18db      	adds	r3, r3, r3
     562:	b29b      	uxth	r3, r3
     564:	4313      	orrs	r3, r2
     566:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     568:	683b      	ldr	r3, [r7, #0]
     56a:	7cdb      	ldrb	r3, [r3, #19]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     56c:	b29b      	uxth	r3, r3
     56e:	4313      	orrs	r3, r2
     570:	b29a      	uxth	r2, r3
     572:	693b      	ldr	r3, [r7, #16]
     574:	809a      	strh	r2, [r3, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     576:	683b      	ldr	r3, [r7, #0]
     578:	7e1b      	ldrb	r3, [r3, #24]
     57a:	2b00      	cmp	r3, #0
     57c:	d100      	bne.n	580 <_adc_set_config+0x238>
     57e:	e0c4      	b.n	70a <_adc_set_config+0x3c2>
		switch (resolution) {
     580:	69bb      	ldr	r3, [r7, #24]
     582:	2b10      	cmp	r3, #16
     584:	d100      	bne.n	588 <_adc_set_config+0x240>
     586:	e076      	b.n	676 <_adc_set_config+0x32e>
     588:	d802      	bhi.n	590 <_adc_set_config+0x248>
     58a:	2b00      	cmp	r3, #0
     58c:	d04d      	beq.n	62a <_adc_set_config+0x2e2>
     58e:	e0bc      	b.n	70a <_adc_set_config+0x3c2>
     590:	2b20      	cmp	r3, #32
     592:	d023      	beq.n	5dc <_adc_set_config+0x294>
     594:	2b30      	cmp	r3, #48	; 0x30
     596:	d000      	beq.n	59a <_adc_set_config+0x252>
     598:	e0b7      	b.n	70a <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     59a:	683b      	ldr	r3, [r7, #0]
     59c:	7cdb      	ldrb	r3, [r3, #19]
     59e:	2b00      	cmp	r3, #0
     5a0:	d011      	beq.n	5c6 <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
     5a2:	683b      	ldr	r3, [r7, #0]
     5a4:	69db      	ldr	r3, [r3, #28]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     5a6:	2b7f      	cmp	r3, #127	; 0x7f
     5a8:	dc0b      	bgt.n	5c2 <_adc_set_config+0x27a>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     5aa:	683b      	ldr	r3, [r7, #0]
     5ac:	69db      	ldr	r3, [r3, #28]
	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
     5ae:	3380      	adds	r3, #128	; 0x80
     5b0:	db07      	blt.n	5c2 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
     5b2:	683b      	ldr	r3, [r7, #0]
     5b4:	6a1b      	ldr	r3, [r3, #32]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     5b6:	2b7f      	cmp	r3, #127	; 0x7f
     5b8:	dc03      	bgt.n	5c2 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
     5ba:	683b      	ldr	r3, [r7, #0]
     5bc:	6a1b      	ldr	r3, [r3, #32]
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
     5be:	3380      	adds	r3, #128	; 0x80
     5c0:	da01      	bge.n	5c6 <_adc_set_config+0x27e>
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     5c2:	2317      	movs	r3, #23
     5c4:	e143      	b.n	84e <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
     5c6:	683b      	ldr	r3, [r7, #0]
     5c8:	69db      	ldr	r3, [r3, #28]
     5ca:	2bff      	cmp	r3, #255	; 0xff
     5cc:	dc04      	bgt.n	5d8 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
     5ce:	683b      	ldr	r3, [r7, #0]
     5d0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     5d2:	2bff      	cmp	r3, #255	; 0xff
     5d4:	dc00      	bgt.n	5d8 <_adc_set_config+0x290>
     5d6:	e091      	b.n	6fc <_adc_set_config+0x3b4>
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     5d8:	2317      	movs	r3, #23
     5da:	e138      	b.n	84e <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     5dc:	683b      	ldr	r3, [r7, #0]
     5de:	7cdb      	ldrb	r3, [r3, #19]
     5e0:	2b00      	cmp	r3, #0
     5e2:	d015      	beq.n	610 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
     5e4:	683b      	ldr	r3, [r7, #0]
     5e6:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     5e8:	4a36      	ldr	r2, [pc, #216]	; (6c4 <_adc_set_config+0x37c>)
     5ea:	4293      	cmp	r3, r2
     5ec:	dc0e      	bgt.n	60c <_adc_set_config+0x2c4>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     5ee:	683b      	ldr	r3, [r7, #0]
     5f0:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
     5f2:	4a35      	ldr	r2, [pc, #212]	; (6c8 <_adc_set_config+0x380>)
     5f4:	4293      	cmp	r3, r2
     5f6:	db09      	blt.n	60c <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     5f8:	683b      	ldr	r3, [r7, #0]
     5fa:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     5fc:	4a31      	ldr	r2, [pc, #196]	; (6c4 <_adc_set_config+0x37c>)
     5fe:	4293      	cmp	r3, r2
     600:	dc04      	bgt.n	60c <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
     602:	683b      	ldr	r3, [r7, #0]
     604:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     606:	4a30      	ldr	r2, [pc, #192]	; (6c8 <_adc_set_config+0x380>)
     608:	4293      	cmp	r3, r2
     60a:	da01      	bge.n	610 <_adc_set_config+0x2c8>
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     60c:	2317      	movs	r3, #23
     60e:	e11e      	b.n	84e <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
     610:	683b      	ldr	r3, [r7, #0]
     612:	69db      	ldr	r3, [r3, #28]
     614:	4a2d      	ldr	r2, [pc, #180]	; (6cc <_adc_set_config+0x384>)
     616:	4293      	cmp	r3, r2
     618:	dc05      	bgt.n	626 <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
     61a:	683b      	ldr	r3, [r7, #0]
     61c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     61e:	4a2b      	ldr	r2, [pc, #172]	; (6cc <_adc_set_config+0x384>)
     620:	4293      	cmp	r3, r2
     622:	dc00      	bgt.n	626 <_adc_set_config+0x2de>
     624:	e06c      	b.n	700 <_adc_set_config+0x3b8>
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     626:	2317      	movs	r3, #23
     628:	e111      	b.n	84e <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     62a:	683b      	ldr	r3, [r7, #0]
     62c:	7cdb      	ldrb	r3, [r3, #19]
     62e:	2b00      	cmp	r3, #0
     630:	d015      	beq.n	65e <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
     632:	683b      	ldr	r3, [r7, #0]
     634:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     636:	4a26      	ldr	r2, [pc, #152]	; (6d0 <_adc_set_config+0x388>)
     638:	4293      	cmp	r3, r2
     63a:	dc0e      	bgt.n	65a <_adc_set_config+0x312>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     63c:	683b      	ldr	r3, [r7, #0]
     63e:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
     640:	4a24      	ldr	r2, [pc, #144]	; (6d4 <_adc_set_config+0x38c>)
     642:	4293      	cmp	r3, r2
     644:	db09      	blt.n	65a <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
     646:	683b      	ldr	r3, [r7, #0]
     648:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     64a:	4a21      	ldr	r2, [pc, #132]	; (6d0 <_adc_set_config+0x388>)
     64c:	4293      	cmp	r3, r2
     64e:	dc04      	bgt.n	65a <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
     650:	683b      	ldr	r3, [r7, #0]
     652:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
     654:	4a1f      	ldr	r2, [pc, #124]	; (6d4 <_adc_set_config+0x38c>)
     656:	4293      	cmp	r3, r2
     658:	da01      	bge.n	65e <_adc_set_config+0x316>
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     65a:	2317      	movs	r3, #23
     65c:	e0f7      	b.n	84e <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
     65e:	683b      	ldr	r3, [r7, #0]
     660:	69db      	ldr	r3, [r3, #28]
     662:	4a1d      	ldr	r2, [pc, #116]	; (6d8 <_adc_set_config+0x390>)
     664:	4293      	cmp	r3, r2
     666:	dc04      	bgt.n	672 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
     668:	683b      	ldr	r3, [r7, #0]
     66a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     66c:	4a1a      	ldr	r2, [pc, #104]	; (6d8 <_adc_set_config+0x390>)
     66e:	4293      	cmp	r3, r2
     670:	dd48      	ble.n	704 <_adc_set_config+0x3bc>
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     672:	2317      	movs	r3, #23
     674:	e0eb      	b.n	84e <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     676:	683b      	ldr	r3, [r7, #0]
     678:	7cdb      	ldrb	r3, [r3, #19]
     67a:	2b00      	cmp	r3, #0
     67c:	d032      	beq.n	6e4 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
     67e:	683b      	ldr	r3, [r7, #0]
     680:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     682:	4a16      	ldr	r2, [pc, #88]	; (6dc <_adc_set_config+0x394>)
     684:	4293      	cmp	r3, r2
     686:	dc0e      	bgt.n	6a6 <_adc_set_config+0x35e>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     688:	683b      	ldr	r3, [r7, #0]
     68a:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
     68c:	4a14      	ldr	r2, [pc, #80]	; (6e0 <_adc_set_config+0x398>)
     68e:	4293      	cmp	r3, r2
     690:	db09      	blt.n	6a6 <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
     692:	683b      	ldr	r3, [r7, #0]
     694:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     696:	4a11      	ldr	r2, [pc, #68]	; (6dc <_adc_set_config+0x394>)
     698:	4293      	cmp	r3, r2
     69a:	dc04      	bgt.n	6a6 <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
     69c:	683b      	ldr	r3, [r7, #0]
     69e:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
     6a0:	4a0f      	ldr	r2, [pc, #60]	; (6e0 <_adc_set_config+0x398>)
     6a2:	4293      	cmp	r3, r2
     6a4:	da1e      	bge.n	6e4 <_adc_set_config+0x39c>
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6a6:	2317      	movs	r3, #23
     6a8:	e0d1      	b.n	84e <_adc_set_config+0x506>
     6aa:	46c0      	nop			; (mov r8, r8)
     6ac:	00000121 	.word	0x00000121
     6b0:	00004c5d 	.word	0x00004c5d
     6b4:	00004ca1 	.word	0x00004ca1
     6b8:	000002d1 	.word	0x000002d1
     6bc:	000083a8 	.word	0x000083a8
     6c0:	000001fd 	.word	0x000001fd
     6c4:	000001ff 	.word	0x000001ff
     6c8:	fffffe00 	.word	0xfffffe00
     6cc:	000003ff 	.word	0x000003ff
     6d0:	000007ff 	.word	0x000007ff
     6d4:	fffff800 	.word	0xfffff800
     6d8:	00000fff 	.word	0x00000fff
     6dc:	00007fff 	.word	0x00007fff
     6e0:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
     6e4:	683b      	ldr	r3, [r7, #0]
     6e6:	69db      	ldr	r3, [r3, #28]
     6e8:	4a5b      	ldr	r2, [pc, #364]	; (858 <_adc_set_config+0x510>)
     6ea:	4293      	cmp	r3, r2
     6ec:	dc04      	bgt.n	6f8 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
     6ee:	683b      	ldr	r3, [r7, #0]
     6f0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     6f2:	4a59      	ldr	r2, [pc, #356]	; (858 <_adc_set_config+0x510>)
     6f4:	4293      	cmp	r3, r2
     6f6:	dd07      	ble.n	708 <_adc_set_config+0x3c0>
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6f8:	2317      	movs	r3, #23
     6fa:	e0a8      	b.n	84e <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
     6fc:	46c0      	nop			; (mov r8, r8)
     6fe:	e004      	b.n	70a <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
     700:	46c0      	nop			; (mov r8, r8)
     702:	e002      	b.n	70a <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
     704:	46c0      	nop			; (mov r8, r8)
     706:	e000      	b.n	70a <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
     708:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
     70a:	46c0      	nop			; (mov r8, r8)
     70c:	687b      	ldr	r3, [r7, #4]
     70e:	0018      	movs	r0, r3
     710:	4b52      	ldr	r3, [pc, #328]	; (85c <_adc_set_config+0x514>)
     712:	4798      	blx	r3
     714:	1e03      	subs	r3, r0, #0
     716:	d1f9      	bne.n	70c <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     718:	683b      	ldr	r3, [r7, #0]
     71a:	7e1a      	ldrb	r2, [r3, #24]
     71c:	693b      	ldr	r3, [r7, #16]
     71e:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     720:	46c0      	nop			; (mov r8, r8)
     722:	687b      	ldr	r3, [r7, #4]
     724:	0018      	movs	r0, r3
     726:	4b4d      	ldr	r3, [pc, #308]	; (85c <_adc_set_config+0x514>)
     728:	4798      	blx	r3
     72a:	1e03      	subs	r3, r0, #0
     72c:	d1f9      	bne.n	722 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     72e:	683b      	ldr	r3, [r7, #0]
     730:	69db      	ldr	r3, [r3, #28]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     732:	b29a      	uxth	r2, r3
     734:	693b      	ldr	r3, [r7, #16]
     736:	839a      	strh	r2, [r3, #28]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
     738:	46c0      	nop			; (mov r8, r8)
     73a:	687b      	ldr	r3, [r7, #4]
     73c:	0018      	movs	r0, r3
     73e:	4b47      	ldr	r3, [pc, #284]	; (85c <_adc_set_config+0x514>)
     740:	4798      	blx	r3
     742:	1e03      	subs	r3, r0, #0
     744:	d1f9      	bne.n	73a <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     746:	683b      	ldr	r3, [r7, #0]
     748:	6a1b      	ldr	r3, [r3, #32]
     74a:	b29a      	uxth	r2, r3
     74c:	693b      	ldr	r3, [r7, #16]
     74e:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     750:	2314      	movs	r3, #20
     752:	18fb      	adds	r3, r7, r3
     754:	683a      	ldr	r2, [r7, #0]
     756:	212c      	movs	r1, #44	; 0x2c
     758:	5c52      	ldrb	r2, [r2, r1]
     75a:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
     75c:	2314      	movs	r3, #20
     75e:	18fb      	adds	r3, r7, r3
     760:	781b      	ldrb	r3, [r3, #0]
     762:	2b00      	cmp	r3, #0
     764:	d006      	beq.n	774 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     766:	2314      	movs	r3, #20
     768:	18fb      	adds	r3, r7, r3
     76a:	781a      	ldrb	r2, [r3, #0]
     76c:	2314      	movs	r3, #20
     76e:	18fb      	adds	r3, r7, r3
     770:	3a01      	subs	r2, #1
     772:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     774:	2314      	movs	r3, #20
     776:	18fb      	adds	r3, r7, r3
     778:	781b      	ldrb	r3, [r3, #0]
     77a:	2b0f      	cmp	r3, #15
     77c:	d804      	bhi.n	788 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     77e:	683b      	ldr	r3, [r7, #0]
     780:	222b      	movs	r2, #43	; 0x2b
     782:	5c9b      	ldrb	r3, [r3, r2]
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     784:	2b0f      	cmp	r3, #15
     786:	d901      	bls.n	78c <_adc_set_config+0x444>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     788:	2317      	movs	r3, #23
     78a:	e060      	b.n	84e <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
     78c:	46c0      	nop			; (mov r8, r8)
     78e:	687b      	ldr	r3, [r7, #4]
     790:	0018      	movs	r0, r3
     792:	4b32      	ldr	r3, [pc, #200]	; (85c <_adc_set_config+0x514>)
     794:	4798      	blx	r3
     796:	1e03      	subs	r3, r0, #0
     798:	d1f9      	bne.n	78e <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     79a:	683b      	ldr	r3, [r7, #0]
     79c:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
     79e:	683a      	ldr	r2, [r7, #0]
     7a0:	212b      	movs	r1, #43	; 0x2b
     7a2:	5c52      	ldrb	r2, [r2, r1]
     7a4:	0512      	lsls	r2, r2, #20
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     7a6:	4313      	orrs	r3, r2
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     7a8:	2214      	movs	r2, #20
     7aa:	18ba      	adds	r2, r7, r2
     7ac:	7812      	ldrb	r2, [r2, #0]
     7ae:	0412      	lsls	r2, r2, #16

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     7b0:	4313      	orrs	r3, r2
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
     7b2:	683a      	ldr	r2, [r7, #0]
     7b4:	89d2      	ldrh	r2, [r2, #14]
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     7b6:	4313      	orrs	r3, r2
			config->negative_input |
			config->positive_input;
     7b8:	683a      	ldr	r2, [r7, #0]
     7ba:	7b12      	ldrb	r2, [r2, #12]
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
     7bc:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     7be:	693b      	ldr	r3, [r7, #16]
     7c0:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     7c2:	683b      	ldr	r3, [r7, #0]
     7c4:	222a      	movs	r2, #42	; 0x2a
     7c6:	5c9a      	ldrb	r2, [r3, r2]
     7c8:	693b      	ldr	r3, [r7, #16]
     7ca:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     7cc:	693b      	ldr	r3, [r7, #16]
     7ce:	220f      	movs	r2, #15
     7d0:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     7d2:	683b      	ldr	r3, [r7, #0]
     7d4:	2224      	movs	r2, #36	; 0x24
     7d6:	5c9b      	ldrb	r3, [r3, r2]
     7d8:	2b00      	cmp	r3, #0
     7da:	d01e      	beq.n	81a <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     7dc:	683b      	ldr	r3, [r7, #0]
     7de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     7e0:	4a1f      	ldr	r2, [pc, #124]	; (860 <_adc_set_config+0x518>)
     7e2:	4293      	cmp	r3, r2
     7e4:	d901      	bls.n	7ea <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
     7e6:	2317      	movs	r3, #23
     7e8:	e031      	b.n	84e <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     7ea:	683b      	ldr	r3, [r7, #0]
     7ec:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     7ee:	693b      	ldr	r3, [r7, #16]
     7f0:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     7f2:	683b      	ldr	r3, [r7, #0]
     7f4:	2228      	movs	r2, #40	; 0x28
     7f6:	5e9b      	ldrsh	r3, [r3, r2]
     7f8:	4a1a      	ldr	r2, [pc, #104]	; (864 <_adc_set_config+0x51c>)
     7fa:	4293      	cmp	r3, r2
     7fc:	dc05      	bgt.n	80a <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
     7fe:	683b      	ldr	r3, [r7, #0]
     800:	2228      	movs	r2, #40	; 0x28
     802:	5e9b      	ldrsh	r3, [r3, r2]
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     804:	4a18      	ldr	r2, [pc, #96]	; (868 <_adc_set_config+0x520>)
     806:	4293      	cmp	r3, r2
     808:	da01      	bge.n	80e <_adc_set_config+0x4c6>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
     80a:	2317      	movs	r3, #23
     80c:	e01f      	b.n	84e <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     80e:	683b      	ldr	r3, [r7, #0]
     810:	2228      	movs	r2, #40	; 0x28
     812:	5e9b      	ldrsh	r3, [r3, r2]
     814:	b29a      	uxth	r2, r3
     816:	693b      	ldr	r3, [r7, #16]
     818:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     81a:	4b14      	ldr	r3, [pc, #80]	; (86c <_adc_set_config+0x524>)
     81c:	681b      	ldr	r3, [r3, #0]
     81e:	08db      	lsrs	r3, r3, #3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     820:	b29b      	uxth	r3, r3
     822:	021b      	lsls	r3, r3, #8
     824:	b29a      	uxth	r2, r3
     826:	23e0      	movs	r3, #224	; 0xe0
     828:	00db      	lsls	r3, r3, #3
     82a:	4013      	ands	r3, r2
     82c:	b29a      	uxth	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     82e:	4b10      	ldr	r3, [pc, #64]	; (870 <_adc_set_config+0x528>)
     830:	685c      	ldr	r4, [r3, #4]
     832:	681b      	ldr	r3, [r3, #0]
     834:	0161      	lsls	r1, r4, #5
     836:	0edd      	lsrs	r5, r3, #27
     838:	430d      	orrs	r5, r1
     83a:	0ee6      	lsrs	r6, r4, #27
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     83c:	b2ab      	uxth	r3, r5
     83e:	21ff      	movs	r1, #255	; 0xff
     840:	400b      	ands	r3, r1
     842:	b29b      	uxth	r3, r3
     844:	4313      	orrs	r3, r2
     846:	b29a      	uxth	r2, r3
     848:	693b      	ldr	r3, [r7, #16]
     84a:	851a      	strh	r2, [r3, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     84c:	2300      	movs	r3, #0
}
     84e:	0018      	movs	r0, r3
     850:	46bd      	mov	sp, r7
     852:	b009      	add	sp, #36	; 0x24
     854:	bdf0      	pop	{r4, r5, r6, r7, pc}
     856:	46c0      	nop			; (mov r8, r8)
     858:	0000ffff 	.word	0x0000ffff
     85c:	000001fd 	.word	0x000001fd
     860:	00000fff 	.word	0x00000fff
     864:	000007ff 	.word	0x000007ff
     868:	fffff800 	.word	0xfffff800
     86c:	00806024 	.word	0x00806024
     870:	00806020 	.word	0x00806020

00000874 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     874:	b580      	push	{r7, lr}
     876:	b084      	sub	sp, #16
     878:	af00      	add	r7, sp, #0
     87a:	60f8      	str	r0, [r7, #12]
     87c:	60b9      	str	r1, [r7, #8]
     87e:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     880:	68fb      	ldr	r3, [r7, #12]
     882:	68ba      	ldr	r2, [r7, #8]
     884:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
     886:	2380      	movs	r3, #128	; 0x80
     888:	025b      	lsls	r3, r3, #9
     88a:	0019      	movs	r1, r3
     88c:	2002      	movs	r0, #2
     88e:	4b15      	ldr	r3, [pc, #84]	; (8e4 <adc_init+0x70>)
     890:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     892:	68bb      	ldr	r3, [r7, #8]
     894:	781b      	ldrb	r3, [r3, #0]
     896:	b2db      	uxtb	r3, r3
     898:	001a      	movs	r2, r3
     89a:	2301      	movs	r3, #1
     89c:	4013      	ands	r3, r2
     89e:	d001      	beq.n	8a4 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     8a0:	2305      	movs	r3, #5
     8a2:	e01a      	b.n	8da <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     8a4:	68bb      	ldr	r3, [r7, #8]
     8a6:	781b      	ldrb	r3, [r3, #0]
     8a8:	b2db      	uxtb	r3, r3
     8aa:	001a      	movs	r2, r3
     8ac:	2302      	movs	r3, #2
     8ae:	4013      	ands	r3, r2
     8b0:	d001      	beq.n	8b6 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     8b2:	231c      	movs	r3, #28
     8b4:	e011      	b.n	8da <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     8b6:	687b      	ldr	r3, [r7, #4]
     8b8:	785a      	ldrb	r2, [r3, #1]
     8ba:	68fb      	ldr	r3, [r7, #12]
     8bc:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     8be:	68fb      	ldr	r3, [r7, #12]
     8c0:	791b      	ldrb	r3, [r3, #4]
     8c2:	2b00      	cmp	r3, #0
     8c4:	d102      	bne.n	8cc <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
     8c6:	2001      	movs	r0, #1
     8c8:	4b07      	ldr	r3, [pc, #28]	; (8e8 <adc_init+0x74>)
     8ca:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     8cc:	687a      	ldr	r2, [r7, #4]
     8ce:	68fb      	ldr	r3, [r7, #12]
     8d0:	0011      	movs	r1, r2
     8d2:	0018      	movs	r0, r3
     8d4:	4b05      	ldr	r3, [pc, #20]	; (8ec <adc_init+0x78>)
     8d6:	4798      	blx	r3
     8d8:	0003      	movs	r3, r0
}
     8da:	0018      	movs	r0, r3
     8dc:	46bd      	mov	sp, r7
     8de:	b004      	add	sp, #16
     8e0:	bd80      	pop	{r7, pc}
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	00000139 	.word	0x00000139
     8e8:	000001bd 	.word	0x000001bd
     8ec:	00000349 	.word	0x00000349

000008f0 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     8f0:	b580      	push	{r7, lr}
     8f2:	b084      	sub	sp, #16
     8f4:	af00      	add	r7, sp, #0
     8f6:	0002      	movs	r2, r0
     8f8:	1dfb      	adds	r3, r7, #7
     8fa:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     8fc:	230f      	movs	r3, #15
     8fe:	18fb      	adds	r3, r7, r3
     900:	1dfa      	adds	r2, r7, #7
     902:	7812      	ldrb	r2, [r2, #0]
     904:	0952      	lsrs	r2, r2, #5
     906:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     908:	230f      	movs	r3, #15
     90a:	18fb      	adds	r3, r7, r3
     90c:	781b      	ldrb	r3, [r3, #0]
     90e:	2b00      	cmp	r3, #0
     910:	d10c      	bne.n	92c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     912:	4b09      	ldr	r3, [pc, #36]	; (938 <_extint_get_eic_from_channel+0x48>)
     914:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     916:	230f      	movs	r3, #15
     918:	18fb      	adds	r3, r7, r3
     91a:	781b      	ldrb	r3, [r3, #0]
     91c:	009b      	lsls	r3, r3, #2
     91e:	2210      	movs	r2, #16
     920:	4694      	mov	ip, r2
     922:	44bc      	add	ip, r7
     924:	4463      	add	r3, ip
     926:	3b08      	subs	r3, #8
     928:	681b      	ldr	r3, [r3, #0]
     92a:	e000      	b.n	92e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     92c:	2300      	movs	r3, #0
	}
}
     92e:	0018      	movs	r0, r3
     930:	46bd      	mov	sp, r7
     932:	b004      	add	sp, #16
     934:	bd80      	pop	{r7, pc}
     936:	46c0      	nop			; (mov r8, r8)
     938:	40001800 	.word	0x40001800

0000093c <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     93c:	b580      	push	{r7, lr}
     93e:	b084      	sub	sp, #16
     940:	af00      	add	r7, sp, #0
     942:	0002      	movs	r2, r0
     944:	1dfb      	adds	r3, r7, #7
     946:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     948:	1dfb      	adds	r3, r7, #7
     94a:	781b      	ldrb	r3, [r3, #0]
     94c:	0018      	movs	r0, r3
     94e:	4b0b      	ldr	r3, [pc, #44]	; (97c <extint_chan_is_detected+0x40>)
     950:	4798      	blx	r3
     952:	0003      	movs	r3, r0
     954:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     956:	1dfb      	adds	r3, r7, #7
     958:	781b      	ldrb	r3, [r3, #0]
     95a:	221f      	movs	r2, #31
     95c:	4013      	ands	r3, r2
     95e:	2201      	movs	r2, #1
     960:	409a      	lsls	r2, r3
     962:	0013      	movs	r3, r2
     964:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     966:	68fb      	ldr	r3, [r7, #12]
     968:	691b      	ldr	r3, [r3, #16]
     96a:	68ba      	ldr	r2, [r7, #8]
     96c:	4013      	ands	r3, r2
     96e:	1e5a      	subs	r2, r3, #1
     970:	4193      	sbcs	r3, r2
     972:	b2db      	uxtb	r3, r3
}
     974:	0018      	movs	r0, r3
     976:	46bd      	mov	sp, r7
     978:	b004      	add	sp, #16
     97a:	bd80      	pop	{r7, pc}
     97c:	000008f1 	.word	0x000008f1

00000980 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     980:	b580      	push	{r7, lr}
     982:	b084      	sub	sp, #16
     984:	af00      	add	r7, sp, #0
     986:	0002      	movs	r2, r0
     988:	1dfb      	adds	r3, r7, #7
     98a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     98c:	1dfb      	adds	r3, r7, #7
     98e:	781b      	ldrb	r3, [r3, #0]
     990:	0018      	movs	r0, r3
     992:	4b09      	ldr	r3, [pc, #36]	; (9b8 <extint_chan_clear_detected+0x38>)
     994:	4798      	blx	r3
     996:	0003      	movs	r3, r0
     998:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     99a:	1dfb      	adds	r3, r7, #7
     99c:	781b      	ldrb	r3, [r3, #0]
     99e:	221f      	movs	r2, #31
     9a0:	4013      	ands	r3, r2
     9a2:	2201      	movs	r2, #1
     9a4:	409a      	lsls	r2, r3
     9a6:	0013      	movs	r3, r2
     9a8:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     9aa:	68fb      	ldr	r3, [r7, #12]
     9ac:	68ba      	ldr	r2, [r7, #8]
     9ae:	611a      	str	r2, [r3, #16]
}
     9b0:	46c0      	nop			; (mov r8, r8)
     9b2:	46bd      	mov	sp, r7
     9b4:	b004      	add	sp, #16
     9b6:	bd80      	pop	{r7, pc}
     9b8:	000008f1 	.word	0x000008f1

000009bc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     9bc:	b580      	push	{r7, lr}
     9be:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     9c0:	4b15      	ldr	r3, [pc, #84]	; (a18 <EIC_Handler+0x5c>)
     9c2:	2200      	movs	r2, #0
     9c4:	701a      	strb	r2, [r3, #0]
     9c6:	e020      	b.n	a0a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     9c8:	4b13      	ldr	r3, [pc, #76]	; (a18 <EIC_Handler+0x5c>)
     9ca:	781b      	ldrb	r3, [r3, #0]
     9cc:	0018      	movs	r0, r3
     9ce:	4b13      	ldr	r3, [pc, #76]	; (a1c <EIC_Handler+0x60>)
     9d0:	4798      	blx	r3
     9d2:	1e03      	subs	r3, r0, #0
     9d4:	d013      	beq.n	9fe <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     9d6:	4b10      	ldr	r3, [pc, #64]	; (a18 <EIC_Handler+0x5c>)
     9d8:	781b      	ldrb	r3, [r3, #0]
     9da:	0018      	movs	r0, r3
     9dc:	4b10      	ldr	r3, [pc, #64]	; (a20 <EIC_Handler+0x64>)
     9de:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     9e0:	4b0d      	ldr	r3, [pc, #52]	; (a18 <EIC_Handler+0x5c>)
     9e2:	781b      	ldrb	r3, [r3, #0]
     9e4:	001a      	movs	r2, r3
     9e6:	4b0f      	ldr	r3, [pc, #60]	; (a24 <EIC_Handler+0x68>)
     9e8:	0092      	lsls	r2, r2, #2
     9ea:	58d3      	ldr	r3, [r2, r3]
     9ec:	2b00      	cmp	r3, #0
     9ee:	d006      	beq.n	9fe <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     9f0:	4b09      	ldr	r3, [pc, #36]	; (a18 <EIC_Handler+0x5c>)
     9f2:	781b      	ldrb	r3, [r3, #0]
     9f4:	001a      	movs	r2, r3
     9f6:	4b0b      	ldr	r3, [pc, #44]	; (a24 <EIC_Handler+0x68>)
     9f8:	0092      	lsls	r2, r2, #2
     9fa:	58d3      	ldr	r3, [r2, r3]
     9fc:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     9fe:	4b06      	ldr	r3, [pc, #24]	; (a18 <EIC_Handler+0x5c>)
     a00:	781b      	ldrb	r3, [r3, #0]
     a02:	3301      	adds	r3, #1
     a04:	b2da      	uxtb	r2, r3
     a06:	4b04      	ldr	r3, [pc, #16]	; (a18 <EIC_Handler+0x5c>)
     a08:	701a      	strb	r2, [r3, #0]
     a0a:	4b03      	ldr	r3, [pc, #12]	; (a18 <EIC_Handler+0x5c>)
     a0c:	781b      	ldrb	r3, [r3, #0]
     a0e:	2b0f      	cmp	r3, #15
     a10:	d9da      	bls.n	9c8 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	46bd      	mov	sp, r7
     a16:	bd80      	pop	{r7, pc}
     a18:	20000110 	.word	0x20000110
     a1c:	0000093d 	.word	0x0000093d
     a20:	00000981 	.word	0x00000981
     a24:	20000114 	.word	0x20000114

00000a28 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     a28:	b580      	push	{r7, lr}
     a2a:	b082      	sub	sp, #8
     a2c:	af00      	add	r7, sp, #0
     a2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     a30:	687b      	ldr	r3, [r7, #4]
     a32:	2200      	movs	r2, #0
     a34:	701a      	strb	r2, [r3, #0]
}
     a36:	46c0      	nop			; (mov r8, r8)
     a38:	46bd      	mov	sp, r7
     a3a:	b002      	add	sp, #8
     a3c:	bd80      	pop	{r7, pc}
     a3e:	46c0      	nop			; (mov r8, r8)

00000a40 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     a40:	b580      	push	{r7, lr}
     a42:	b082      	sub	sp, #8
     a44:	af00      	add	r7, sp, #0
     a46:	0002      	movs	r2, r0
     a48:	6039      	str	r1, [r7, #0]
     a4a:	1dfb      	adds	r3, r7, #7
     a4c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     a4e:	1dfb      	adds	r3, r7, #7
     a50:	781b      	ldrb	r3, [r3, #0]
     a52:	2b01      	cmp	r3, #1
     a54:	d00a      	beq.n	a6c <system_apb_clock_set_mask+0x2c>
     a56:	2b02      	cmp	r3, #2
     a58:	d00f      	beq.n	a7a <system_apb_clock_set_mask+0x3a>
     a5a:	2b00      	cmp	r3, #0
     a5c:	d114      	bne.n	a88 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     a5e:	4b0e      	ldr	r3, [pc, #56]	; (a98 <system_apb_clock_set_mask+0x58>)
     a60:	4a0d      	ldr	r2, [pc, #52]	; (a98 <system_apb_clock_set_mask+0x58>)
     a62:	6991      	ldr	r1, [r2, #24]
     a64:	683a      	ldr	r2, [r7, #0]
     a66:	430a      	orrs	r2, r1
     a68:	619a      	str	r2, [r3, #24]
			break;
     a6a:	e00f      	b.n	a8c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     a6c:	4b0a      	ldr	r3, [pc, #40]	; (a98 <system_apb_clock_set_mask+0x58>)
     a6e:	4a0a      	ldr	r2, [pc, #40]	; (a98 <system_apb_clock_set_mask+0x58>)
     a70:	69d1      	ldr	r1, [r2, #28]
     a72:	683a      	ldr	r2, [r7, #0]
     a74:	430a      	orrs	r2, r1
     a76:	61da      	str	r2, [r3, #28]
			break;
     a78:	e008      	b.n	a8c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     a7a:	4b07      	ldr	r3, [pc, #28]	; (a98 <system_apb_clock_set_mask+0x58>)
     a7c:	4a06      	ldr	r2, [pc, #24]	; (a98 <system_apb_clock_set_mask+0x58>)
     a7e:	6a11      	ldr	r1, [r2, #32]
     a80:	683a      	ldr	r2, [r7, #0]
     a82:	430a      	orrs	r2, r1
     a84:	621a      	str	r2, [r3, #32]
			break;
     a86:	e001      	b.n	a8c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     a88:	2317      	movs	r3, #23
     a8a:	e000      	b.n	a8e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     a8c:	2300      	movs	r3, #0
}
     a8e:	0018      	movs	r0, r3
     a90:	46bd      	mov	sp, r7
     a92:	b002      	add	sp, #8
     a94:	bd80      	pop	{r7, pc}
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	40000400 	.word	0x40000400

00000a9c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     a9c:	b580      	push	{r7, lr}
     a9e:	b082      	sub	sp, #8
     aa0:	af00      	add	r7, sp, #0
     aa2:	0002      	movs	r2, r0
     aa4:	1dfb      	adds	r3, r7, #7
     aa6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     aa8:	4b06      	ldr	r3, [pc, #24]	; (ac4 <system_interrupt_enable+0x28>)
     aaa:	1dfa      	adds	r2, r7, #7
     aac:	7812      	ldrb	r2, [r2, #0]
     aae:	0011      	movs	r1, r2
     ab0:	221f      	movs	r2, #31
     ab2:	400a      	ands	r2, r1
     ab4:	2101      	movs	r1, #1
     ab6:	4091      	lsls	r1, r2
     ab8:	000a      	movs	r2, r1
     aba:	601a      	str	r2, [r3, #0]
}
     abc:	46c0      	nop			; (mov r8, r8)
     abe:	46bd      	mov	sp, r7
     ac0:	b002      	add	sp, #8
     ac2:	bd80      	pop	{r7, pc}
     ac4:	e000e100 	.word	0xe000e100

00000ac8 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     ac8:	b580      	push	{r7, lr}
     aca:	b082      	sub	sp, #8
     acc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     ace:	4b0f      	ldr	r3, [pc, #60]	; (b0c <extint_is_syncing+0x44>)
     ad0:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     ad2:	2300      	movs	r3, #0
     ad4:	607b      	str	r3, [r7, #4]
     ad6:	e011      	b.n	afc <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     ad8:	687b      	ldr	r3, [r7, #4]
     ada:	009b      	lsls	r3, r3, #2
     adc:	2208      	movs	r2, #8
     ade:	4694      	mov	ip, r2
     ae0:	44bc      	add	ip, r7
     ae2:	4463      	add	r3, ip
     ae4:	3b08      	subs	r3, #8
     ae6:	681b      	ldr	r3, [r3, #0]
     ae8:	785b      	ldrb	r3, [r3, #1]
     aea:	b2db      	uxtb	r3, r3
     aec:	b25b      	sxtb	r3, r3
     aee:	2b00      	cmp	r3, #0
     af0:	da01      	bge.n	af6 <extint_is_syncing+0x2e>
			return true;
     af2:	2301      	movs	r3, #1
     af4:	e006      	b.n	b04 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     af6:	687b      	ldr	r3, [r7, #4]
     af8:	3301      	adds	r3, #1
     afa:	607b      	str	r3, [r7, #4]
     afc:	687b      	ldr	r3, [r7, #4]
     afe:	2b00      	cmp	r3, #0
     b00:	d0ea      	beq.n	ad8 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
     b02:	2300      	movs	r3, #0
}
     b04:	0018      	movs	r0, r3
     b06:	46bd      	mov	sp, r7
     b08:	b002      	add	sp, #8
     b0a:	bd80      	pop	{r7, pc}
     b0c:	40001800 	.word	0x40001800

00000b10 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     b10:	b580      	push	{r7, lr}
     b12:	b084      	sub	sp, #16
     b14:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     b16:	4b2d      	ldr	r3, [pc, #180]	; (bcc <_system_extint_init+0xbc>)
     b18:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     b1a:	2140      	movs	r1, #64	; 0x40
     b1c:	2000      	movs	r0, #0
     b1e:	4b2c      	ldr	r3, [pc, #176]	; (bd0 <_system_extint_init+0xc0>)
     b20:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     b22:	003b      	movs	r3, r7
     b24:	0018      	movs	r0, r3
     b26:	4b2b      	ldr	r3, [pc, #172]	; (bd4 <_system_extint_init+0xc4>)
     b28:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     b2a:	003b      	movs	r3, r7
     b2c:	2200      	movs	r2, #0
     b2e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     b30:	003b      	movs	r3, r7
     b32:	0019      	movs	r1, r3
     b34:	2005      	movs	r0, #5
     b36:	4b28      	ldr	r3, [pc, #160]	; (bd8 <_system_extint_init+0xc8>)
     b38:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     b3a:	2005      	movs	r0, #5
     b3c:	4b27      	ldr	r3, [pc, #156]	; (bdc <_system_extint_init+0xcc>)
     b3e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     b40:	2300      	movs	r3, #0
     b42:	60fb      	str	r3, [r7, #12]
     b44:	e018      	b.n	b78 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     b46:	68fb      	ldr	r3, [r7, #12]
     b48:	009b      	lsls	r3, r3, #2
     b4a:	2210      	movs	r2, #16
     b4c:	4694      	mov	ip, r2
     b4e:	44bc      	add	ip, r7
     b50:	4463      	add	r3, ip
     b52:	3b0c      	subs	r3, #12
     b54:	681a      	ldr	r2, [r3, #0]
     b56:	68fb      	ldr	r3, [r7, #12]
     b58:	009b      	lsls	r3, r3, #2
     b5a:	2110      	movs	r1, #16
     b5c:	468c      	mov	ip, r1
     b5e:	44bc      	add	ip, r7
     b60:	4463      	add	r3, ip
     b62:	3b0c      	subs	r3, #12
     b64:	681b      	ldr	r3, [r3, #0]
     b66:	781b      	ldrb	r3, [r3, #0]
     b68:	b2db      	uxtb	r3, r3
     b6a:	2101      	movs	r1, #1
     b6c:	430b      	orrs	r3, r1
     b6e:	b2db      	uxtb	r3, r3
     b70:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     b72:	68fb      	ldr	r3, [r7, #12]
     b74:	3301      	adds	r3, #1
     b76:	60fb      	str	r3, [r7, #12]
     b78:	68fb      	ldr	r3, [r7, #12]
     b7a:	2b00      	cmp	r3, #0
     b7c:	d0e3      	beq.n	b46 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	4b17      	ldr	r3, [pc, #92]	; (be0 <_system_extint_init+0xd0>)
     b82:	4798      	blx	r3
     b84:	1e03      	subs	r3, r0, #0
     b86:	d1fb      	bne.n	b80 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     b88:	230b      	movs	r3, #11
     b8a:	18fb      	adds	r3, r7, r3
     b8c:	2200      	movs	r2, #0
     b8e:	701a      	strb	r2, [r3, #0]
     b90:	e00d      	b.n	bae <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     b92:	230b      	movs	r3, #11
     b94:	18fb      	adds	r3, r7, r3
     b96:	781a      	ldrb	r2, [r3, #0]
     b98:	4b12      	ldr	r3, [pc, #72]	; (be4 <_system_extint_init+0xd4>)
     b9a:	0092      	lsls	r2, r2, #2
     b9c:	2100      	movs	r1, #0
     b9e:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     ba0:	230b      	movs	r3, #11
     ba2:	18fb      	adds	r3, r7, r3
     ba4:	781a      	ldrb	r2, [r3, #0]
     ba6:	230b      	movs	r3, #11
     ba8:	18fb      	adds	r3, r7, r3
     baa:	3201      	adds	r2, #1
     bac:	701a      	strb	r2, [r3, #0]
     bae:	230b      	movs	r3, #11
     bb0:	18fb      	adds	r3, r7, r3
     bb2:	781b      	ldrb	r3, [r3, #0]
     bb4:	2b0f      	cmp	r3, #15
     bb6:	d9ec      	bls.n	b92 <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     bb8:	2004      	movs	r0, #4
     bba:	4b0b      	ldr	r3, [pc, #44]	; (be8 <_system_extint_init+0xd8>)
     bbc:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     bbe:	4b0b      	ldr	r3, [pc, #44]	; (bec <_system_extint_init+0xdc>)
     bc0:	4798      	blx	r3
}
     bc2:	46c0      	nop			; (mov r8, r8)
     bc4:	46bd      	mov	sp, r7
     bc6:	b004      	add	sp, #16
     bc8:	bd80      	pop	{r7, pc}
     bca:	46c0      	nop			; (mov r8, r8)
     bcc:	40001800 	.word	0x40001800
     bd0:	00000a41 	.word	0x00000a41
     bd4:	00000a29 	.word	0x00000a29
     bd8:	00004c5d 	.word	0x00004c5d
     bdc:	00004ca1 	.word	0x00004ca1
     be0:	00000ac9 	.word	0x00000ac9
     be4:	20000114 	.word	0x20000114
     be8:	00000a9d 	.word	0x00000a9d
     bec:	00000bf1 	.word	0x00000bf1

00000bf0 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     bf0:	b580      	push	{r7, lr}
     bf2:	b082      	sub	sp, #8
     bf4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     bf6:	4b15      	ldr	r3, [pc, #84]	; (c4c <_extint_enable+0x5c>)
     bf8:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     bfa:	2300      	movs	r3, #0
     bfc:	607b      	str	r3, [r7, #4]
     bfe:	e018      	b.n	c32 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     c00:	687b      	ldr	r3, [r7, #4]
     c02:	009b      	lsls	r3, r3, #2
     c04:	2208      	movs	r2, #8
     c06:	4694      	mov	ip, r2
     c08:	44bc      	add	ip, r7
     c0a:	4463      	add	r3, ip
     c0c:	3b08      	subs	r3, #8
     c0e:	681a      	ldr	r2, [r3, #0]
     c10:	687b      	ldr	r3, [r7, #4]
     c12:	009b      	lsls	r3, r3, #2
     c14:	2108      	movs	r1, #8
     c16:	468c      	mov	ip, r1
     c18:	44bc      	add	ip, r7
     c1a:	4463      	add	r3, ip
     c1c:	3b08      	subs	r3, #8
     c1e:	681b      	ldr	r3, [r3, #0]
     c20:	781b      	ldrb	r3, [r3, #0]
     c22:	b2db      	uxtb	r3, r3
     c24:	2102      	movs	r1, #2
     c26:	430b      	orrs	r3, r1
     c28:	b2db      	uxtb	r3, r3
     c2a:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     c2c:	687b      	ldr	r3, [r7, #4]
     c2e:	3301      	adds	r3, #1
     c30:	607b      	str	r3, [r7, #4]
     c32:	687b      	ldr	r3, [r7, #4]
     c34:	2b00      	cmp	r3, #0
     c36:	d0e3      	beq.n	c00 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     c38:	46c0      	nop			; (mov r8, r8)
     c3a:	4b05      	ldr	r3, [pc, #20]	; (c50 <_extint_enable+0x60>)
     c3c:	4798      	blx	r3
     c3e:	1e03      	subs	r3, r0, #0
     c40:	d1fb      	bne.n	c3a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	46bd      	mov	sp, r7
     c46:	b002      	add	sp, #8
     c48:	bd80      	pop	{r7, pc}
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	40001800 	.word	0x40001800
     c50:	00000ac9 	.word	0x00000ac9

00000c54 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     c54:	b580      	push	{r7, lr}
     c56:	b082      	sub	sp, #8
     c58:	af00      	add	r7, sp, #0
     c5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     c5c:	687b      	ldr	r3, [r7, #4]
     c5e:	2280      	movs	r2, #128	; 0x80
     c60:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c62:	687b      	ldr	r3, [r7, #4]
     c64:	2200      	movs	r2, #0
     c66:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	2201      	movs	r2, #1
     c6c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     c6e:	687b      	ldr	r3, [r7, #4]
     c70:	2200      	movs	r2, #0
     c72:	70da      	strb	r2, [r3, #3]
}
     c74:	46c0      	nop			; (mov r8, r8)
     c76:	46bd      	mov	sp, r7
     c78:	b002      	add	sp, #8
     c7a:	bd80      	pop	{r7, pc}

00000c7c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     c7c:	b580      	push	{r7, lr}
     c7e:	b084      	sub	sp, #16
     c80:	af00      	add	r7, sp, #0
     c82:	0002      	movs	r2, r0
     c84:	6039      	str	r1, [r7, #0]
     c86:	1dfb      	adds	r3, r7, #7
     c88:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     c8a:	230c      	movs	r3, #12
     c8c:	18fb      	adds	r3, r7, r3
     c8e:	0018      	movs	r0, r3
     c90:	4b10      	ldr	r3, [pc, #64]	; (cd4 <port_pin_set_config+0x58>)
     c92:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     c94:	230c      	movs	r3, #12
     c96:	18fb      	adds	r3, r7, r3
     c98:	2280      	movs	r2, #128	; 0x80
     c9a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     c9c:	683b      	ldr	r3, [r7, #0]
     c9e:	781a      	ldrb	r2, [r3, #0]
     ca0:	230c      	movs	r3, #12
     ca2:	18fb      	adds	r3, r7, r3
     ca4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     ca6:	683b      	ldr	r3, [r7, #0]
     ca8:	785a      	ldrb	r2, [r3, #1]
     caa:	230c      	movs	r3, #12
     cac:	18fb      	adds	r3, r7, r3
     cae:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     cb0:	683b      	ldr	r3, [r7, #0]
     cb2:	789a      	ldrb	r2, [r3, #2]
     cb4:	230c      	movs	r3, #12
     cb6:	18fb      	adds	r3, r7, r3
     cb8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     cba:	230c      	movs	r3, #12
     cbc:	18fa      	adds	r2, r7, r3
     cbe:	1dfb      	adds	r3, r7, #7
     cc0:	781b      	ldrb	r3, [r3, #0]
     cc2:	0011      	movs	r1, r2
     cc4:	0018      	movs	r0, r3
     cc6:	4b04      	ldr	r3, [pc, #16]	; (cd8 <port_pin_set_config+0x5c>)
     cc8:	4798      	blx	r3
}
     cca:	46c0      	nop			; (mov r8, r8)
     ccc:	46bd      	mov	sp, r7
     cce:	b004      	add	sp, #16
     cd0:	bd80      	pop	{r7, pc}
     cd2:	46c0      	nop			; (mov r8, r8)
     cd4:	00000c55 	.word	0x00000c55
     cd8:	00004f49 	.word	0x00004f49

00000cdc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     cdc:	b580      	push	{r7, lr}
     cde:	b082      	sub	sp, #8
     ce0:	af00      	add	r7, sp, #0
     ce2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     ce4:	687b      	ldr	r3, [r7, #4]
     ce6:	2200      	movs	r2, #0
     ce8:	701a      	strb	r2, [r3, #0]
}
     cea:	46c0      	nop			; (mov r8, r8)
     cec:	46bd      	mov	sp, r7
     cee:	b002      	add	sp, #8
     cf0:	bd80      	pop	{r7, pc}
     cf2:	46c0      	nop			; (mov r8, r8)

00000cf4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     cf4:	b580      	push	{r7, lr}
     cf6:	b082      	sub	sp, #8
     cf8:	af00      	add	r7, sp, #0
     cfa:	0002      	movs	r2, r0
     cfc:	6039      	str	r1, [r7, #0]
     cfe:	1dfb      	adds	r3, r7, #7
     d00:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     d02:	1dfb      	adds	r3, r7, #7
     d04:	781b      	ldrb	r3, [r3, #0]
     d06:	2b01      	cmp	r3, #1
     d08:	d00a      	beq.n	d20 <system_apb_clock_set_mask+0x2c>
     d0a:	2b02      	cmp	r3, #2
     d0c:	d00f      	beq.n	d2e <system_apb_clock_set_mask+0x3a>
     d0e:	2b00      	cmp	r3, #0
     d10:	d114      	bne.n	d3c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     d12:	4b0e      	ldr	r3, [pc, #56]	; (d4c <system_apb_clock_set_mask+0x58>)
     d14:	4a0d      	ldr	r2, [pc, #52]	; (d4c <system_apb_clock_set_mask+0x58>)
     d16:	6991      	ldr	r1, [r2, #24]
     d18:	683a      	ldr	r2, [r7, #0]
     d1a:	430a      	orrs	r2, r1
     d1c:	619a      	str	r2, [r3, #24]
			break;
     d1e:	e00f      	b.n	d40 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     d20:	4b0a      	ldr	r3, [pc, #40]	; (d4c <system_apb_clock_set_mask+0x58>)
     d22:	4a0a      	ldr	r2, [pc, #40]	; (d4c <system_apb_clock_set_mask+0x58>)
     d24:	69d1      	ldr	r1, [r2, #28]
     d26:	683a      	ldr	r2, [r7, #0]
     d28:	430a      	orrs	r2, r1
     d2a:	61da      	str	r2, [r3, #28]
			break;
     d2c:	e008      	b.n	d40 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     d2e:	4b07      	ldr	r3, [pc, #28]	; (d4c <system_apb_clock_set_mask+0x58>)
     d30:	4a06      	ldr	r2, [pc, #24]	; (d4c <system_apb_clock_set_mask+0x58>)
     d32:	6a11      	ldr	r1, [r2, #32]
     d34:	683a      	ldr	r2, [r7, #0]
     d36:	430a      	orrs	r2, r1
     d38:	621a      	str	r2, [r3, #32]
			break;
     d3a:	e001      	b.n	d40 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     d3c:	2317      	movs	r3, #23
     d3e:	e000      	b.n	d42 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     d40:	2300      	movs	r3, #0
}
     d42:	0018      	movs	r0, r3
     d44:	46bd      	mov	sp, r7
     d46:	b002      	add	sp, #8
     d48:	bd80      	pop	{r7, pc}
     d4a:	46c0      	nop			; (mov r8, r8)
     d4c:	40000400 	.word	0x40000400

00000d50 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     d50:	b580      	push	{r7, lr}
     d52:	b082      	sub	sp, #8
     d54:	af00      	add	r7, sp, #0
     d56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     d58:	687b      	ldr	r3, [r7, #4]
     d5a:	2280      	movs	r2, #128	; 0x80
     d5c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d5e:	687b      	ldr	r3, [r7, #4]
     d60:	2200      	movs	r2, #0
     d62:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d64:	687b      	ldr	r3, [r7, #4]
     d66:	2201      	movs	r2, #1
     d68:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     d6a:	687b      	ldr	r3, [r7, #4]
     d6c:	2200      	movs	r2, #0
     d6e:	70da      	strb	r2, [r3, #3]
}
     d70:	46c0      	nop			; (mov r8, r8)
     d72:	46bd      	mov	sp, r7
     d74:	b002      	add	sp, #8
     d76:	bd80      	pop	{r7, pc}

00000d78 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     d78:	b580      	push	{r7, lr}
     d7a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     d7c:	4b05      	ldr	r3, [pc, #20]	; (d94 <system_is_debugger_present+0x1c>)
     d7e:	789b      	ldrb	r3, [r3, #2]
     d80:	b2db      	uxtb	r3, r3
     d82:	001a      	movs	r2, r3
     d84:	2302      	movs	r3, #2
     d86:	4013      	ands	r3, r2
     d88:	1e5a      	subs	r2, r3, #1
     d8a:	4193      	sbcs	r3, r2
     d8c:	b2db      	uxtb	r3, r3
}
     d8e:	0018      	movs	r0, r3
     d90:	46bd      	mov	sp, r7
     d92:	bd80      	pop	{r7, pc}
     d94:	41002000 	.word	0x41002000

00000d98 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     d98:	b580      	push	{r7, lr}
     d9a:	b084      	sub	sp, #16
     d9c:	af00      	add	r7, sp, #0
     d9e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     da0:	687b      	ldr	r3, [r7, #4]
     da2:	681b      	ldr	r3, [r3, #0]
     da4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     da6:	68fb      	ldr	r3, [r7, #12]
     da8:	69db      	ldr	r3, [r3, #28]
     daa:	2207      	movs	r2, #7
     dac:	4013      	ands	r3, r2
     dae:	1e5a      	subs	r2, r3, #1
     db0:	4193      	sbcs	r3, r2
     db2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     db4:	0018      	movs	r0, r3
     db6:	46bd      	mov	sp, r7
     db8:	b004      	add	sp, #16
     dba:	bd80      	pop	{r7, pc}

00000dbc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     dbc:	b580      	push	{r7, lr}
     dbe:	b082      	sub	sp, #8
     dc0:	af00      	add	r7, sp, #0
     dc2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     dc4:	46c0      	nop			; (mov r8, r8)
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	0018      	movs	r0, r3
     dca:	4b04      	ldr	r3, [pc, #16]	; (ddc <_i2c_master_wait_for_sync+0x20>)
     dcc:	4798      	blx	r3
     dce:	1e03      	subs	r3, r0, #0
     dd0:	d1f9      	bne.n	dc6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     dd2:	46c0      	nop			; (mov r8, r8)
     dd4:	46bd      	mov	sp, r7
     dd6:	b002      	add	sp, #8
     dd8:	bd80      	pop	{r7, pc}
     dda:	46c0      	nop			; (mov r8, r8)
     ddc:	00000d99 	.word	0x00000d99

00000de0 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
     de0:	b5f0      	push	{r4, r5, r6, r7, lr}
     de2:	b095      	sub	sp, #84	; 0x54
     de4:	af00      	add	r7, sp, #0
     de6:	60f8      	str	r0, [r7, #12]
     de8:	60b9      	str	r1, [r7, #8]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
     dea:	2300      	movs	r3, #0
     dec:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t tmp_baud_hs = 0;
     dee:	2300      	movs	r3, #0
     df0:	64bb      	str	r3, [r7, #72]	; 0x48
	int32_t tmp_baudlow_hs = 0;
     df2:	2300      	movs	r3, #0
     df4:	647b      	str	r3, [r7, #68]	; 0x44
	enum status_code tmp_status_code = STATUS_OK;
     df6:	233b      	movs	r3, #59	; 0x3b
     df8:	2208      	movs	r2, #8
     dfa:	4694      	mov	ip, r2
     dfc:	44bc      	add	ip, r7
     dfe:	4463      	add	r3, ip
     e00:	2200      	movs	r2, #0
     e02:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     e04:	68fb      	ldr	r3, [r7, #12]
     e06:	681b      	ldr	r3, [r3, #0]
     e08:	633b      	str	r3, [r7, #48]	; 0x30
	Sercom *const sercom_hw = module->hw;
     e0a:	68fb      	ldr	r3, [r7, #12]
     e0c:	681b      	ldr	r3, [r3, #0]
     e0e:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     e10:	2323      	movs	r3, #35	; 0x23
     e12:	2208      	movs	r2, #8
     e14:	18ba      	adds	r2, r7, r2
     e16:	18d4      	adds	r4, r2, r3
     e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e1a:	0018      	movs	r0, r3
     e1c:	4bdb      	ldr	r3, [pc, #876]	; (118c <_i2c_master_set_config+0x3ac>)
     e1e:	4798      	blx	r3
     e20:	0003      	movs	r3, r0
     e22:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     e24:	230c      	movs	r3, #12
     e26:	2208      	movs	r2, #8
     e28:	4694      	mov	ip, r2
     e2a:	44bc      	add	ip, r7
     e2c:	4463      	add	r3, ip
     e2e:	0018      	movs	r0, r3
     e30:	4bd7      	ldr	r3, [pc, #860]	; (1190 <_i2c_master_set_config+0x3b0>)
     e32:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
     e34:	68bb      	ldr	r3, [r7, #8]
     e36:	69db      	ldr	r3, [r3, #28]
     e38:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pad1 = config->pinmux_pad1;
     e3a:	68bb      	ldr	r3, [r7, #8]
     e3c:	6a1b      	ldr	r3, [r3, #32]
     e3e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e42:	2b00      	cmp	r3, #0
     e44:	d106      	bne.n	e54 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e48:	2100      	movs	r1, #0
     e4a:	0018      	movs	r0, r3
     e4c:	4bd1      	ldr	r3, [pc, #836]	; (1194 <_i2c_master_set_config+0x3b4>)
     e4e:	4798      	blx	r3
     e50:	0003      	movs	r3, r0
     e52:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e56:	b2da      	uxtb	r2, r3
     e58:	230c      	movs	r3, #12
     e5a:	2108      	movs	r1, #8
     e5c:	468c      	mov	ip, r1
     e5e:	44bc      	add	ip, r7
     e60:	4463      	add	r3, ip
     e62:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     e64:	230c      	movs	r3, #12
     e66:	2208      	movs	r2, #8
     e68:	4694      	mov	ip, r2
     e6a:	44bc      	add	ip, r7
     e6c:	4463      	add	r3, ip
     e6e:	2202      	movs	r2, #2
     e70:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e74:	0c1b      	lsrs	r3, r3, #16
     e76:	b2db      	uxtb	r3, r3
     e78:	220c      	movs	r2, #12
     e7a:	2108      	movs	r1, #8
     e7c:	468c      	mov	ip, r1
     e7e:	44bc      	add	ip, r7
     e80:	4462      	add	r2, ip
     e82:	0011      	movs	r1, r2
     e84:	0018      	movs	r0, r3
     e86:	4bc4      	ldr	r3, [pc, #784]	; (1198 <_i2c_master_set_config+0x3b8>)
     e88:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e8c:	2b00      	cmp	r3, #0
     e8e:	d106      	bne.n	e9e <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e92:	2101      	movs	r1, #1
     e94:	0018      	movs	r0, r3
     e96:	4bbf      	ldr	r3, [pc, #764]	; (1194 <_i2c_master_set_config+0x3b4>)
     e98:	4798      	blx	r3
     e9a:	0003      	movs	r3, r0
     e9c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ea0:	b2da      	uxtb	r2, r3
     ea2:	230c      	movs	r3, #12
     ea4:	2108      	movs	r1, #8
     ea6:	468c      	mov	ip, r1
     ea8:	44bc      	add	ip, r7
     eaa:	4463      	add	r3, ip
     eac:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     eae:	230c      	movs	r3, #12
     eb0:	2208      	movs	r2, #8
     eb2:	4694      	mov	ip, r2
     eb4:	44bc      	add	ip, r7
     eb6:	4463      	add	r3, ip
     eb8:	2202      	movs	r2, #2
     eba:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ebe:	0c1b      	lsrs	r3, r3, #16
     ec0:	b2db      	uxtb	r3, r3
     ec2:	220c      	movs	r2, #12
     ec4:	2108      	movs	r1, #8
     ec6:	468c      	mov	ip, r1
     ec8:	44bc      	add	ip, r7
     eca:	4462      	add	r2, ip
     ecc:	0011      	movs	r1, r2
     ece:	0018      	movs	r0, r3
     ed0:	4bb1      	ldr	r3, [pc, #708]	; (1198 <_i2c_master_set_config+0x3b8>)
     ed2:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     ed4:	68bb      	ldr	r3, [r7, #8]
     ed6:	8a9a      	ldrh	r2, [r3, #20]
     ed8:	68fb      	ldr	r3, [r7, #12]
     eda:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     edc:	68bb      	ldr	r3, [r7, #8]
     ede:	8ada      	ldrh	r2, [r3, #22]
     ee0:	68fb      	ldr	r3, [r7, #12]
     ee2:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     ee4:	68bb      	ldr	r3, [r7, #8]
     ee6:	7e1b      	ldrb	r3, [r3, #24]
     ee8:	2b00      	cmp	r3, #0
     eea:	d103      	bne.n	ef4 <_i2c_master_set_config+0x114>
     eec:	4bab      	ldr	r3, [pc, #684]	; (119c <_i2c_master_set_config+0x3bc>)
     eee:	4798      	blx	r3
     ef0:	1e03      	subs	r3, r0, #0
     ef2:	d002      	beq.n	efa <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     ef4:	2380      	movs	r3, #128	; 0x80
     ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
     ef8:	e001      	b.n	efe <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
     efa:	2300      	movs	r3, #0
     efc:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     efe:	68bb      	ldr	r3, [r7, #8]
     f00:	691b      	ldr	r3, [r3, #16]
     f02:	2b00      	cmp	r3, #0
     f04:	d004      	beq.n	f10 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
     f06:	68bb      	ldr	r3, [r7, #8]
     f08:	691b      	ldr	r3, [r3, #16]
     f0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f0c:	4313      	orrs	r3, r2
     f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     f10:	68bb      	ldr	r3, [r7, #8]
     f12:	689b      	ldr	r3, [r3, #8]
     f14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f16:	4313      	orrs	r3, r2
     f18:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     f1a:	68bb      	ldr	r3, [r7, #8]
     f1c:	2224      	movs	r2, #36	; 0x24
     f1e:	5c9b      	ldrb	r3, [r3, r2]
     f20:	2b00      	cmp	r3, #0
     f22:	d004      	beq.n	f2e <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f26:	2280      	movs	r2, #128	; 0x80
     f28:	05d2      	lsls	r2, r2, #23
     f2a:	4313      	orrs	r3, r2
     f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     f2e:	68bb      	ldr	r3, [r7, #8]
     f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f32:	2b00      	cmp	r3, #0
     f34:	d004      	beq.n	f40 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
     f36:	68bb      	ldr	r3, [r7, #8]
     f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f3c:	4313      	orrs	r3, r2
     f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     f40:	68bb      	ldr	r3, [r7, #8]
     f42:	222c      	movs	r2, #44	; 0x2c
     f44:	5c9b      	ldrb	r3, [r3, r2]
     f46:	2b00      	cmp	r3, #0
     f48:	d105      	bne.n	f56 <_i2c_master_set_config+0x176>
     f4a:	68bb      	ldr	r3, [r7, #8]
     f4c:	689a      	ldr	r2, [r3, #8]
     f4e:	2380      	movs	r3, #128	; 0x80
     f50:	049b      	lsls	r3, r3, #18
     f52:	429a      	cmp	r2, r3
     f54:	d104      	bne.n	f60 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f58:	2280      	movs	r2, #128	; 0x80
     f5a:	0512      	lsls	r2, r2, #20
     f5c:	4313      	orrs	r3, r2
     f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     f60:	68bb      	ldr	r3, [r7, #8]
     f62:	222d      	movs	r2, #45	; 0x2d
     f64:	5c9b      	ldrb	r3, [r3, r2]
     f66:	2b00      	cmp	r3, #0
     f68:	d004      	beq.n	f74 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f6c:	2280      	movs	r2, #128	; 0x80
     f6e:	0412      	lsls	r2, r2, #16
     f70:	4313      	orrs	r3, r2
     f72:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     f74:	68bb      	ldr	r3, [r7, #8]
     f76:	222e      	movs	r2, #46	; 0x2e
     f78:	5c9b      	ldrb	r3, [r3, r2]
     f7a:	2b00      	cmp	r3, #0
     f7c:	d004      	beq.n	f88 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f80:	2280      	movs	r2, #128	; 0x80
     f82:	03d2      	lsls	r2, r2, #15
     f84:	4313      	orrs	r3, r2
     f86:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f8a:	681a      	ldr	r2, [r3, #0]
     f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f8e:	431a      	orrs	r2, r3
     f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f92:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f96:	2280      	movs	r2, #128	; 0x80
     f98:	0052      	lsls	r2, r2, #1
     f9a:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     f9c:	2323      	movs	r3, #35	; 0x23
     f9e:	2208      	movs	r2, #8
     fa0:	4694      	mov	ip, r2
     fa2:	44bc      	add	ip, r7
     fa4:	4463      	add	r3, ip
     fa6:	781b      	ldrb	r3, [r3, #0]
     fa8:	3314      	adds	r3, #20
     faa:	b2db      	uxtb	r3, r3
     fac:	0018      	movs	r0, r3
     fae:	4b7c      	ldr	r3, [pc, #496]	; (11a0 <_i2c_master_set_config+0x3c0>)
     fb0:	4798      	blx	r3
     fb2:	0003      	movs	r3, r0
     fb4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fscl        = 1000 * config->baud_rate;
     fb6:	68bb      	ldr	r3, [r7, #8]
     fb8:	681b      	ldr	r3, [r3, #0]
     fba:	22fa      	movs	r2, #250	; 0xfa
     fbc:	0092      	lsls	r2, r2, #2
     fbe:	4353      	muls	r3, r2
     fc0:	623b      	str	r3, [r7, #32]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     fc2:	68bb      	ldr	r3, [r7, #8]
     fc4:	685b      	ldr	r3, [r3, #4]
     fc6:	22fa      	movs	r2, #250	; 0xfa
     fc8:	0092      	lsls	r2, r2, #2
     fca:	4353      	muls	r3, r2
     fcc:	61fb      	str	r3, [r7, #28]
	uint32_t trise       = config->sda_scl_rise_time_ns;
     fce:	68bb      	ldr	r3, [r7, #8]
     fd0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
     fd2:	61bb      	str	r3, [r7, #24]
	
	tmp_baud = (int32_t)(div_ceil(
     fd4:	4b73      	ldr	r3, [pc, #460]	; (11a4 <_i2c_master_set_config+0x3c4>)
     fd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
     fd8:	4798      	blx	r3
     fda:	0005      	movs	r5, r0
     fdc:	000e      	movs	r6, r1
     fde:	4b71      	ldr	r3, [pc, #452]	; (11a4 <_i2c_master_set_config+0x3c4>)
     fe0:	6a38      	ldr	r0, [r7, #32]
     fe2:	4798      	blx	r3
     fe4:	6038      	str	r0, [r7, #0]
     fe6:	6079      	str	r1, [r7, #4]
     fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fea:	69ba      	ldr	r2, [r7, #24]
     fec:	435a      	muls	r2, r3
     fee:	4b6d      	ldr	r3, [pc, #436]	; (11a4 <_i2c_master_set_config+0x3c4>)
     ff0:	0010      	movs	r0, r2
     ff2:	4798      	blx	r3
     ff4:	4c6c      	ldr	r4, [pc, #432]	; (11a8 <_i2c_master_set_config+0x3c8>)
     ff6:	4a6d      	ldr	r2, [pc, #436]	; (11ac <_i2c_master_set_config+0x3cc>)
     ff8:	4b6d      	ldr	r3, [pc, #436]	; (11b0 <_i2c_master_set_config+0x3d0>)
     ffa:	47a0      	blx	r4
     ffc:	0003      	movs	r3, r0
     ffe:	000c      	movs	r4, r1
    1000:	0018      	movs	r0, r3
    1002:	0021      	movs	r1, r4
    1004:	4c6b      	ldr	r4, [pc, #428]	; (11b4 <_i2c_master_set_config+0x3d4>)
    1006:	2200      	movs	r2, #0
    1008:	4b6b      	ldr	r3, [pc, #428]	; (11b8 <_i2c_master_set_config+0x3d8>)
    100a:	47a0      	blx	r4
    100c:	0003      	movs	r3, r0
    100e:	000c      	movs	r4, r1
    1010:	001a      	movs	r2, r3
    1012:	0023      	movs	r3, r4
    1014:	4c64      	ldr	r4, [pc, #400]	; (11a8 <_i2c_master_set_config+0x3c8>)
    1016:	6838      	ldr	r0, [r7, #0]
    1018:	6879      	ldr	r1, [r7, #4]
    101a:	47a0      	blx	r4
    101c:	0003      	movs	r3, r0
    101e:	000c      	movs	r4, r1
    1020:	001a      	movs	r2, r3
    1022:	0023      	movs	r3, r4
    1024:	4c65      	ldr	r4, [pc, #404]	; (11bc <_i2c_master_set_config+0x3dc>)
    1026:	0028      	movs	r0, r5
    1028:	0031      	movs	r1, r6
    102a:	47a0      	blx	r4
    102c:	0003      	movs	r3, r0
    102e:	000c      	movs	r4, r1
    1030:	001d      	movs	r5, r3
    1032:	0026      	movs	r6, r4
    1034:	6a3b      	ldr	r3, [r7, #32]
    1036:	005a      	lsls	r2, r3, #1
    1038:	4b5a      	ldr	r3, [pc, #360]	; (11a4 <_i2c_master_set_config+0x3c4>)
    103a:	0010      	movs	r0, r2
    103c:	4798      	blx	r3
    103e:	0002      	movs	r2, r0
    1040:	000b      	movs	r3, r1
    1042:	4c5c      	ldr	r4, [pc, #368]	; (11b4 <_i2c_master_set_config+0x3d4>)
    1044:	0028      	movs	r0, r5
    1046:	0031      	movs	r1, r6
    1048:	47a0      	blx	r4
    104a:	0003      	movs	r3, r0
    104c:	000c      	movs	r4, r1
    104e:	0018      	movs	r0, r3
    1050:	0021      	movs	r1, r4
    1052:	4c5a      	ldr	r4, [pc, #360]	; (11bc <_i2c_master_set_config+0x3dc>)
    1054:	2200      	movs	r2, #0
    1056:	4b5a      	ldr	r3, [pc, #360]	; (11c0 <_i2c_master_set_config+0x3e0>)
    1058:	47a0      	blx	r4
    105a:	0003      	movs	r3, r0
    105c:	000c      	movs	r4, r1
    105e:	001d      	movs	r5, r3
    1060:	0026      	movs	r6, r4
    1062:	6a3b      	ldr	r3, [r7, #32]
    1064:	005a      	lsls	r2, r3, #1
    1066:	4b4f      	ldr	r3, [pc, #316]	; (11a4 <_i2c_master_set_config+0x3c4>)
    1068:	0010      	movs	r0, r2
    106a:	4798      	blx	r3
    106c:	0002      	movs	r2, r0
    106e:	000b      	movs	r3, r1
    1070:	4c54      	ldr	r4, [pc, #336]	; (11c4 <_i2c_master_set_config+0x3e4>)
    1072:	0028      	movs	r0, r5
    1074:	0031      	movs	r1, r6
    1076:	47a0      	blx	r4
    1078:	0003      	movs	r3, r0
    107a:	000c      	movs	r4, r1
    107c:	0019      	movs	r1, r3
    107e:	0022      	movs	r2, r4
    1080:	4b51      	ldr	r3, [pc, #324]	; (11c8 <_i2c_master_set_config+0x3e8>)
    1082:	0008      	movs	r0, r1
    1084:	0011      	movs	r1, r2
    1086:	4798      	blx	r3
    1088:	0003      	movs	r3, r0
    108a:	637b      	str	r3, [r7, #52]	; 0x34
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    108c:	68bb      	ldr	r3, [r7, #8]
    108e:	689a      	ldr	r2, [r3, #8]
    1090:	2380      	movs	r3, #128	; 0x80
    1092:	049b      	lsls	r3, r3, #18
    1094:	429a      	cmp	r2, r3
    1096:	d145      	bne.n	1124 <_i2c_master_set_config+0x344>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    1098:	4b42      	ldr	r3, [pc, #264]	; (11a4 <_i2c_master_set_config+0x3c4>)
    109a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    109c:	4798      	blx	r3
    109e:	4c45      	ldr	r4, [pc, #276]	; (11b4 <_i2c_master_set_config+0x3d4>)
    10a0:	0002      	movs	r2, r0
    10a2:	000b      	movs	r3, r1
    10a4:	47a0      	blx	r4
    10a6:	0003      	movs	r3, r0
    10a8:	000c      	movs	r4, r1
    10aa:	001d      	movs	r5, r3
    10ac:	0026      	movs	r6, r4
    10ae:	4b3d      	ldr	r3, [pc, #244]	; (11a4 <_i2c_master_set_config+0x3c4>)
    10b0:	69f8      	ldr	r0, [r7, #28]
    10b2:	4798      	blx	r3
    10b4:	4c3c      	ldr	r4, [pc, #240]	; (11a8 <_i2c_master_set_config+0x3c8>)
    10b6:	2200      	movs	r2, #0
    10b8:	4b44      	ldr	r3, [pc, #272]	; (11cc <_i2c_master_set_config+0x3ec>)
    10ba:	47a0      	blx	r4
    10bc:	0003      	movs	r3, r0
    10be:	000c      	movs	r4, r1
    10c0:	001a      	movs	r2, r3
    10c2:	0023      	movs	r3, r4
    10c4:	4c3f      	ldr	r4, [pc, #252]	; (11c4 <_i2c_master_set_config+0x3e4>)
    10c6:	0028      	movs	r0, r5
    10c8:	0031      	movs	r1, r6
    10ca:	47a0      	blx	r4
    10cc:	0003      	movs	r3, r0
    10ce:	000c      	movs	r4, r1
    10d0:	0018      	movs	r0, r3
    10d2:	0021      	movs	r1, r4
    10d4:	4c39      	ldr	r4, [pc, #228]	; (11bc <_i2c_master_set_config+0x3dc>)
    10d6:	2200      	movs	r2, #0
    10d8:	4b39      	ldr	r3, [pc, #228]	; (11c0 <_i2c_master_set_config+0x3e0>)
    10da:	47a0      	blx	r4
    10dc:	0003      	movs	r3, r0
    10de:	000c      	movs	r4, r1
    10e0:	0019      	movs	r1, r3
    10e2:	0022      	movs	r2, r4
    10e4:	4b38      	ldr	r3, [pc, #224]	; (11c8 <_i2c_master_set_config+0x3e8>)
    10e6:	0008      	movs	r0, r1
    10e8:	0011      	movs	r1, r2
    10ea:	4798      	blx	r3
    10ec:	0003      	movs	r3, r0
    10ee:	647b      	str	r3, [r7, #68]	; 0x44
		if (tmp_baudlow_hs) {
    10f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    10f2:	2b00      	cmp	r3, #0
    10f4:	d009      	beq.n	110a <_i2c_master_set_config+0x32a>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    10f6:	4b36      	ldr	r3, [pc, #216]	; (11d0 <_i2c_master_set_config+0x3f0>)
    10f8:	69f9      	ldr	r1, [r7, #28]
    10fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
    10fc:	4798      	blx	r3
    10fe:	0003      	movs	r3, r0
    1100:	1e9a      	subs	r2, r3, #2
    1102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1104:	1ad3      	subs	r3, r2, r3
    1106:	64bb      	str	r3, [r7, #72]	; 0x48
    1108:	e00c      	b.n	1124 <_i2c_master_set_config+0x344>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    110a:	69fb      	ldr	r3, [r7, #28]
    110c:	005a      	lsls	r2, r3, #1
    110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1110:	18d3      	adds	r3, r2, r3
    1112:	1e5a      	subs	r2, r3, #1
    1114:	69fb      	ldr	r3, [r7, #28]
    1116:	0059      	lsls	r1, r3, #1
    1118:	4b2d      	ldr	r3, [pc, #180]	; (11d0 <_i2c_master_set_config+0x3f0>)
    111a:	0010      	movs	r0, r2
    111c:	4798      	blx	r3
    111e:	0003      	movs	r3, r0
    1120:	3b01      	subs	r3, #1
    1122:	64bb      	str	r3, [r7, #72]	; 0x48
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1126:	2bff      	cmp	r3, #255	; 0xff
    1128:	dc08      	bgt.n	113c <_i2c_master_set_config+0x35c>
    112a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    112c:	2b00      	cmp	r3, #0
    112e:	db05      	blt.n	113c <_i2c_master_set_config+0x35c>
    1130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1132:	2bff      	cmp	r3, #255	; 0xff
    1134:	dc02      	bgt.n	113c <_i2c_master_set_config+0x35c>
    1136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1138:	2b00      	cmp	r3, #0
    113a:	da06      	bge.n	114a <_i2c_master_set_config+0x36a>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    113c:	233b      	movs	r3, #59	; 0x3b
    113e:	2208      	movs	r2, #8
    1140:	4694      	mov	ip, r2
    1142:	44bc      	add	ip, r7
    1144:	4463      	add	r3, ip
    1146:	2240      	movs	r2, #64	; 0x40
    1148:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    114a:	233b      	movs	r3, #59	; 0x3b
    114c:	2208      	movs	r2, #8
    114e:	4694      	mov	ip, r2
    1150:	44bc      	add	ip, r7
    1152:	4463      	add	r3, ip
    1154:	781b      	ldrb	r3, [r3, #0]
    1156:	2b40      	cmp	r3, #64	; 0x40
    1158:	d00e      	beq.n	1178 <_i2c_master_set_config+0x398>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    115a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    115c:	22ff      	movs	r2, #255	; 0xff
    115e:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    1160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1162:	041b      	lsls	r3, r3, #16
    1164:	0019      	movs	r1, r3
    1166:	23ff      	movs	r3, #255	; 0xff
    1168:	041b      	lsls	r3, r3, #16
    116a:	400b      	ands	r3, r1
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    116c:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    116e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1170:	0612      	lsls	r2, r2, #24
    1172:	431a      	orrs	r2, r3
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1176:	60da      	str	r2, [r3, #12]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
	}

	return tmp_status_code;
    1178:	233b      	movs	r3, #59	; 0x3b
    117a:	2208      	movs	r2, #8
    117c:	4694      	mov	ip, r2
    117e:	44bc      	add	ip, r7
    1180:	4463      	add	r3, ip
    1182:	781b      	ldrb	r3, [r3, #0]
}
    1184:	0018      	movs	r0, r3
    1186:	46bd      	mov	sp, r7
    1188:	b015      	add	sp, #84	; 0x54
    118a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    118c:	00001a65 	.word	0x00001a65
    1190:	00000d51 	.word	0x00000d51
    1194:	000018a9 	.word	0x000018a9
    1198:	00004f49 	.word	0x00004f49
    119c:	00000d79 	.word	0x00000d79
    11a0:	00004d81 	.word	0x00004d81
    11a4:	00007005 	.word	0x00007005
    11a8:	000063fd 	.word	0x000063fd
    11ac:	e826d695 	.word	0xe826d695
    11b0:	3e112e0b 	.word	0x3e112e0b
    11b4:	00005779 	.word	0x00005779
    11b8:	40240000 	.word	0x40240000
    11bc:	000068f1 	.word	0x000068f1
    11c0:	3ff00000 	.word	0x3ff00000
    11c4:	00005dd1 	.word	0x00005dd1
    11c8:	00006f99 	.word	0x00006f99
    11cc:	40080000 	.word	0x40080000
    11d0:	00005275 	.word	0x00005275

000011d4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    11d4:	b580      	push	{r7, lr}
    11d6:	b08a      	sub	sp, #40	; 0x28
    11d8:	af00      	add	r7, sp, #0
    11da:	60f8      	str	r0, [r7, #12]
    11dc:	60b9      	str	r1, [r7, #8]
    11de:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    11e0:	68fb      	ldr	r3, [r7, #12]
    11e2:	68ba      	ldr	r2, [r7, #8]
    11e4:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    11e6:	68fb      	ldr	r3, [r7, #12]
    11e8:	681b      	ldr	r3, [r3, #0]
    11ea:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    11ec:	68fb      	ldr	r3, [r7, #12]
    11ee:	681b      	ldr	r3, [r3, #0]
    11f0:	0018      	movs	r0, r3
    11f2:	4b25      	ldr	r3, [pc, #148]	; (1288 <i2c_master_init+0xb4>)
    11f4:	4798      	blx	r3
    11f6:	0003      	movs	r3, r0
    11f8:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    11fa:	6a3b      	ldr	r3, [r7, #32]
    11fc:	3302      	adds	r3, #2
    11fe:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1200:	6a3b      	ldr	r3, [r7, #32]
    1202:	3314      	adds	r3, #20
    1204:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1206:	2201      	movs	r2, #1
    1208:	69fb      	ldr	r3, [r7, #28]
    120a:	409a      	lsls	r2, r3
    120c:	0013      	movs	r3, r2
    120e:	0019      	movs	r1, r3
    1210:	2002      	movs	r0, #2
    1212:	4b1e      	ldr	r3, [pc, #120]	; (128c <i2c_master_init+0xb8>)
    1214:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1216:	2314      	movs	r3, #20
    1218:	18fb      	adds	r3, r7, r3
    121a:	0018      	movs	r0, r3
    121c:	4b1c      	ldr	r3, [pc, #112]	; (1290 <i2c_master_init+0xbc>)
    121e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1220:	687b      	ldr	r3, [r7, #4]
    1222:	7b1a      	ldrb	r2, [r3, #12]
    1224:	2314      	movs	r3, #20
    1226:	18fb      	adds	r3, r7, r3
    1228:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    122a:	69bb      	ldr	r3, [r7, #24]
    122c:	b2db      	uxtb	r3, r3
    122e:	2214      	movs	r2, #20
    1230:	18ba      	adds	r2, r7, r2
    1232:	0011      	movs	r1, r2
    1234:	0018      	movs	r0, r3
    1236:	4b17      	ldr	r3, [pc, #92]	; (1294 <i2c_master_init+0xc0>)
    1238:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    123a:	69bb      	ldr	r3, [r7, #24]
    123c:	b2db      	uxtb	r3, r3
    123e:	0018      	movs	r0, r3
    1240:	4b15      	ldr	r3, [pc, #84]	; (1298 <i2c_master_init+0xc4>)
    1242:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1244:	687b      	ldr	r3, [r7, #4]
    1246:	7b1b      	ldrb	r3, [r3, #12]
    1248:	2100      	movs	r1, #0
    124a:	0018      	movs	r0, r3
    124c:	4b13      	ldr	r3, [pc, #76]	; (129c <i2c_master_init+0xc8>)
    124e:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1252:	681b      	ldr	r3, [r3, #0]
    1254:	2202      	movs	r2, #2
    1256:	4013      	ands	r3, r2
    1258:	d001      	beq.n	125e <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    125a:	231c      	movs	r3, #28
    125c:	e010      	b.n	1280 <i2c_master_init+0xac>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1260:	681b      	ldr	r3, [r3, #0]
    1262:	2201      	movs	r2, #1
    1264:	4013      	ands	r3, r2
    1266:	d001      	beq.n	126c <i2c_master_init+0x98>
		return STATUS_BUSY;
    1268:	2305      	movs	r3, #5
    126a:	e009      	b.n	1280 <i2c_master_init+0xac>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    126e:	2214      	movs	r2, #20
    1270:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    1272:	687a      	ldr	r2, [r7, #4]
    1274:	68fb      	ldr	r3, [r7, #12]
    1276:	0011      	movs	r1, r2
    1278:	0018      	movs	r0, r3
    127a:	4b09      	ldr	r3, [pc, #36]	; (12a0 <i2c_master_init+0xcc>)
    127c:	4798      	blx	r3
    127e:	0003      	movs	r3, r0
}
    1280:	0018      	movs	r0, r3
    1282:	46bd      	mov	sp, r7
    1284:	b00a      	add	sp, #40	; 0x28
    1286:	bd80      	pop	{r7, pc}
    1288:	00001a65 	.word	0x00001a65
    128c:	00000cf5 	.word	0x00000cf5
    1290:	00000cdd 	.word	0x00000cdd
    1294:	00004c5d 	.word	0x00004c5d
    1298:	00004ca1 	.word	0x00004ca1
    129c:	0000181d 	.word	0x0000181d
    12a0:	00000de1 	.word	0x00000de1

000012a4 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    12a4:	b580      	push	{r7, lr}
    12a6:	b084      	sub	sp, #16
    12a8:	af00      	add	r7, sp, #0
    12aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    12ac:	687b      	ldr	r3, [r7, #4]
    12ae:	681b      	ldr	r3, [r3, #0]
    12b0:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    12b2:	68fb      	ldr	r3, [r7, #12]
    12b4:	7e1b      	ldrb	r3, [r3, #24]
    12b6:	b2db      	uxtb	r3, r3
    12b8:	001a      	movs	r2, r3
    12ba:	2302      	movs	r3, #2
    12bc:	4013      	ands	r3, r2
    12be:	d00b      	beq.n	12d8 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    12c0:	68fb      	ldr	r3, [r7, #12]
    12c2:	2202      	movs	r2, #2
    12c4:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    12c6:	68fb      	ldr	r3, [r7, #12]
    12c8:	8b5b      	ldrh	r3, [r3, #26]
    12ca:	b29b      	uxth	r3, r3
    12cc:	001a      	movs	r2, r3
    12ce:	2302      	movs	r3, #2
    12d0:	4013      	ands	r3, r2
    12d2:	d011      	beq.n	12f8 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    12d4:	2341      	movs	r3, #65	; 0x41
    12d6:	e010      	b.n	12fa <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    12d8:	68fb      	ldr	r3, [r7, #12]
    12da:	8b5b      	ldrh	r3, [r3, #26]
    12dc:	b29b      	uxth	r3, r3
    12de:	001a      	movs	r2, r3
    12e0:	2304      	movs	r3, #4
    12e2:	4013      	ands	r3, r2
    12e4:	d008      	beq.n	12f8 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    12e6:	68fb      	ldr	r3, [r7, #12]
    12e8:	685b      	ldr	r3, [r3, #4]
    12ea:	22c0      	movs	r2, #192	; 0xc0
    12ec:	0292      	lsls	r2, r2, #10
    12ee:	431a      	orrs	r2, r3
    12f0:	68fb      	ldr	r3, [r7, #12]
    12f2:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    12f4:	2318      	movs	r3, #24
    12f6:	e000      	b.n	12fa <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    12f8:	2300      	movs	r3, #0
}
    12fa:	0018      	movs	r0, r3
    12fc:	46bd      	mov	sp, r7
    12fe:	b004      	add	sp, #16
    1300:	bd80      	pop	{r7, pc}
    1302:	46c0      	nop			; (mov r8, r8)

00001304 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1304:	b580      	push	{r7, lr}
    1306:	b084      	sub	sp, #16
    1308:	af00      	add	r7, sp, #0
    130a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    130c:	687b      	ldr	r3, [r7, #4]
    130e:	681b      	ldr	r3, [r3, #0]
    1310:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1312:	230e      	movs	r3, #14
    1314:	18fb      	adds	r3, r7, r3
    1316:	2200      	movs	r2, #0
    1318:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    131a:	e00f      	b.n	133c <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    131c:	230e      	movs	r3, #14
    131e:	18fb      	adds	r3, r7, r3
    1320:	220e      	movs	r2, #14
    1322:	18ba      	adds	r2, r7, r2
    1324:	8812      	ldrh	r2, [r2, #0]
    1326:	3201      	adds	r2, #1
    1328:	801a      	strh	r2, [r3, #0]
    132a:	687b      	ldr	r3, [r7, #4]
    132c:	891b      	ldrh	r3, [r3, #8]
    132e:	220e      	movs	r2, #14
    1330:	18ba      	adds	r2, r7, r2
    1332:	8812      	ldrh	r2, [r2, #0]
    1334:	429a      	cmp	r2, r3
    1336:	d301      	bcc.n	133c <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    1338:	2312      	movs	r3, #18
    133a:	e00e      	b.n	135a <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    133c:	68bb      	ldr	r3, [r7, #8]
    133e:	7e1b      	ldrb	r3, [r3, #24]
    1340:	b2db      	uxtb	r3, r3
    1342:	001a      	movs	r2, r3
    1344:	2301      	movs	r3, #1
    1346:	4013      	ands	r3, r2
    1348:	d106      	bne.n	1358 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    134a:	68bb      	ldr	r3, [r7, #8]
    134c:	7e1b      	ldrb	r3, [r3, #24]
    134e:	b2db      	uxtb	r3, r3
    1350:	001a      	movs	r2, r3
    1352:	2302      	movs	r3, #2
    1354:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1356:	d0e1      	beq.n	131c <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    1358:	2300      	movs	r3, #0
}
    135a:	0018      	movs	r0, r3
    135c:	46bd      	mov	sp, r7
    135e:	b004      	add	sp, #16
    1360:	bd80      	pop	{r7, pc}
    1362:	46c0      	nop			; (mov r8, r8)

00001364 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    1364:	b590      	push	{r4, r7, lr}
    1366:	b085      	sub	sp, #20
    1368:	af00      	add	r7, sp, #0
    136a:	6078      	str	r0, [r7, #4]
    136c:	000a      	movs	r2, r1
    136e:	1cfb      	adds	r3, r7, #3
    1370:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1372:	687b      	ldr	r3, [r7, #4]
    1374:	681b      	ldr	r3, [r3, #0]
    1376:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1378:	68fb      	ldr	r3, [r7, #12]
    137a:	685b      	ldr	r3, [r3, #4]
    137c:	2280      	movs	r2, #128	; 0x80
    137e:	02d2      	lsls	r2, r2, #11
    1380:	431a      	orrs	r2, r3
    1382:	68fb      	ldr	r3, [r7, #12]
    1384:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    1386:	1cfb      	adds	r3, r7, #3
    1388:	781a      	ldrb	r2, [r3, #0]
    138a:	68fb      	ldr	r3, [r7, #12]
    138c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    138e:	230b      	movs	r3, #11
    1390:	18fc      	adds	r4, r7, r3
    1392:	687b      	ldr	r3, [r7, #4]
    1394:	0018      	movs	r0, r3
    1396:	4b07      	ldr	r3, [pc, #28]	; (13b4 <_i2c_master_send_hs_master_code+0x50>)
    1398:	4798      	blx	r3
    139a:	0003      	movs	r3, r0
    139c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    139e:	68fb      	ldr	r3, [r7, #12]
    13a0:	2201      	movs	r2, #1
    13a2:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    13a4:	230b      	movs	r3, #11
    13a6:	18fb      	adds	r3, r7, r3
    13a8:	781b      	ldrb	r3, [r3, #0]
}
    13aa:	0018      	movs	r0, r3
    13ac:	46bd      	mov	sp, r7
    13ae:	b005      	add	sp, #20
    13b0:	bd90      	pop	{r4, r7, pc}
    13b2:	46c0      	nop			; (mov r8, r8)
    13b4:	00001305 	.word	0x00001305

000013b8 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    13b8:	b590      	push	{r4, r7, lr}
    13ba:	b087      	sub	sp, #28
    13bc:	af00      	add	r7, sp, #0
    13be:	6078      	str	r0, [r7, #4]
    13c0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13c2:	687b      	ldr	r3, [r7, #4]
    13c4:	681b      	ldr	r3, [r3, #0]
    13c6:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    13c8:	2314      	movs	r3, #20
    13ca:	18fb      	adds	r3, r7, r3
    13cc:	683a      	ldr	r2, [r7, #0]
    13ce:	8852      	ldrh	r2, [r2, #2]
    13d0:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    13d2:	2312      	movs	r3, #18
    13d4:	18fb      	adds	r3, r7, r3
    13d6:	2200      	movs	r2, #0
    13d8:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    13da:	68fb      	ldr	r3, [r7, #12]
    13dc:	681b      	ldr	r3, [r3, #0]
    13de:	011b      	lsls	r3, r3, #4
    13e0:	0fdb      	lsrs	r3, r3, #31
    13e2:	b2db      	uxtb	r3, r3
    13e4:	001a      	movs	r2, r3
    13e6:	230b      	movs	r3, #11
    13e8:	18fb      	adds	r3, r7, r3
    13ea:	1e51      	subs	r1, r2, #1
    13ec:	418a      	sbcs	r2, r1
    13ee:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    13f0:	683b      	ldr	r3, [r7, #0]
    13f2:	7a5b      	ldrb	r3, [r3, #9]
    13f4:	2b00      	cmp	r3, #0
    13f6:	d006      	beq.n	1406 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    13f8:	683b      	ldr	r3, [r7, #0]
    13fa:	7a9a      	ldrb	r2, [r3, #10]
    13fc:	687b      	ldr	r3, [r7, #4]
    13fe:	0011      	movs	r1, r2
    1400:	0018      	movs	r0, r3
    1402:	4b85      	ldr	r3, [pc, #532]	; (1618 <_i2c_master_read_packet+0x260>)
    1404:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1406:	68fb      	ldr	r3, [r7, #12]
    1408:	685b      	ldr	r3, [r3, #4]
    140a:	4a84      	ldr	r2, [pc, #528]	; (161c <_i2c_master_read_packet+0x264>)
    140c:	401a      	ands	r2, r3
    140e:	68fb      	ldr	r3, [r7, #12]
    1410:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1412:	683b      	ldr	r3, [r7, #0]
    1414:	7a1b      	ldrb	r3, [r3, #8]
    1416:	2b00      	cmp	r3, #0
    1418:	d042      	beq.n	14a0 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    141a:	683b      	ldr	r3, [r7, #0]
    141c:	881b      	ldrh	r3, [r3, #0]
    141e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1420:	683b      	ldr	r3, [r7, #0]
    1422:	7a5b      	ldrb	r3, [r3, #9]
    1424:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1426:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1428:	001a      	movs	r2, r3
    142a:	2380      	movs	r3, #128	; 0x80
    142c:	021b      	lsls	r3, r3, #8
    142e:	431a      	orrs	r2, r3
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1430:	68fb      	ldr	r3, [r7, #12]
    1432:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    1434:	2317      	movs	r3, #23
    1436:	18fc      	adds	r4, r7, r3
    1438:	687b      	ldr	r3, [r7, #4]
    143a:	0018      	movs	r0, r3
    143c:	4b78      	ldr	r3, [pc, #480]	; (1620 <_i2c_master_read_packet+0x268>)
    143e:	4798      	blx	r3
    1440:	0003      	movs	r3, r0
    1442:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1444:	68fb      	ldr	r3, [r7, #12]
    1446:	685b      	ldr	r3, [r3, #4]
    1448:	4a74      	ldr	r2, [pc, #464]	; (161c <_i2c_master_read_packet+0x264>)
    144a:	401a      	ands	r2, r3
    144c:	68fb      	ldr	r3, [r7, #12]
    144e:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    1450:	2317      	movs	r3, #23
    1452:	18fb      	adds	r3, r7, r3
    1454:	781b      	ldrb	r3, [r3, #0]
    1456:	2b00      	cmp	r3, #0
    1458:	d107      	bne.n	146a <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    145a:	2317      	movs	r3, #23
    145c:	18fc      	adds	r4, r7, r3
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	0018      	movs	r0, r3
    1462:	4b70      	ldr	r3, [pc, #448]	; (1624 <_i2c_master_read_packet+0x26c>)
    1464:	4798      	blx	r3
    1466:	0003      	movs	r3, r0
    1468:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    146a:	2317      	movs	r3, #23
    146c:	18fb      	adds	r3, r7, r3
    146e:	781b      	ldrb	r3, [r3, #0]
    1470:	2b00      	cmp	r3, #0
    1472:	d111      	bne.n	1498 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1474:	683b      	ldr	r3, [r7, #0]
    1476:	881b      	ldrh	r3, [r3, #0]
    1478:	0a1b      	lsrs	r3, r3, #8
    147a:	b29b      	uxth	r3, r3
    147c:	2278      	movs	r2, #120	; 0x78
    147e:	4313      	orrs	r3, r2
    1480:	b29b      	uxth	r3, r3
    1482:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1484:	683b      	ldr	r3, [r7, #0]
    1486:	7a5b      	ldrb	r3, [r3, #9]
    1488:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    148a:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    148c:	2201      	movs	r2, #1
    148e:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1490:	001a      	movs	r2, r3
    1492:	68fb      	ldr	r3, [r7, #12]
    1494:	625a      	str	r2, [r3, #36]	; 0x24
    1496:	e00f      	b.n	14b8 <_i2c_master_read_packet+0x100>
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    1498:	2317      	movs	r3, #23
    149a:	18fb      	adds	r3, r7, r3
    149c:	781b      	ldrb	r3, [r3, #0]
    149e:	e0b6      	b.n	160e <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    14a0:	683b      	ldr	r3, [r7, #0]
    14a2:	881b      	ldrh	r3, [r3, #0]
    14a4:	005b      	lsls	r3, r3, #1
    14a6:	2201      	movs	r2, #1
    14a8:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    14aa:	683b      	ldr	r3, [r7, #0]
    14ac:	7a5b      	ldrb	r3, [r3, #9]
    14ae:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    14b0:	4313      	orrs	r3, r2
    14b2:	001a      	movs	r2, r3
    14b4:	68fb      	ldr	r3, [r7, #12]
    14b6:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    14b8:	2317      	movs	r3, #23
    14ba:	18fc      	adds	r4, r7, r3
    14bc:	687b      	ldr	r3, [r7, #4]
    14be:	0018      	movs	r0, r3
    14c0:	4b57      	ldr	r3, [pc, #348]	; (1620 <_i2c_master_read_packet+0x268>)
    14c2:	4798      	blx	r3
    14c4:	0003      	movs	r3, r0
    14c6:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    14c8:	230b      	movs	r3, #11
    14ca:	18fb      	adds	r3, r7, r3
    14cc:	781b      	ldrb	r3, [r3, #0]
    14ce:	2b00      	cmp	r3, #0
    14d0:	d00b      	beq.n	14ea <_i2c_master_read_packet+0x132>
    14d2:	683b      	ldr	r3, [r7, #0]
    14d4:	885b      	ldrh	r3, [r3, #2]
    14d6:	2b01      	cmp	r3, #1
    14d8:	d107      	bne.n	14ea <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    14da:	68fb      	ldr	r3, [r7, #12]
    14dc:	685b      	ldr	r3, [r3, #4]
    14de:	2280      	movs	r2, #128	; 0x80
    14e0:	02d2      	lsls	r2, r2, #11
    14e2:	431a      	orrs	r2, r3
    14e4:	68fb      	ldr	r3, [r7, #12]
    14e6:	605a      	str	r2, [r3, #4]
    14e8:	e005      	b.n	14f6 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    14ea:	68fb      	ldr	r3, [r7, #12]
    14ec:	685b      	ldr	r3, [r3, #4]
    14ee:	4a4b      	ldr	r2, [pc, #300]	; (161c <_i2c_master_read_packet+0x264>)
    14f0:	401a      	ands	r2, r3
    14f2:	68fb      	ldr	r3, [r7, #12]
    14f4:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    14f6:	2317      	movs	r3, #23
    14f8:	18fb      	adds	r3, r7, r3
    14fa:	781b      	ldrb	r3, [r3, #0]
    14fc:	2b00      	cmp	r3, #0
    14fe:	d107      	bne.n	1510 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    1500:	2317      	movs	r3, #23
    1502:	18fc      	adds	r4, r7, r3
    1504:	687b      	ldr	r3, [r7, #4]
    1506:	0018      	movs	r0, r3
    1508:	4b46      	ldr	r3, [pc, #280]	; (1624 <_i2c_master_read_packet+0x26c>)
    150a:	4798      	blx	r3
    150c:	0003      	movs	r3, r0
    150e:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1510:	2317      	movs	r3, #23
    1512:	18fb      	adds	r3, r7, r3
    1514:	781b      	ldrb	r3, [r3, #0]
    1516:	2b00      	cmp	r3, #0
    1518:	d000      	beq.n	151c <_i2c_master_read_packet+0x164>
    151a:	e075      	b.n	1608 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    151c:	e04b      	b.n	15b6 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    151e:	68fb      	ldr	r3, [r7, #12]
    1520:	8b5b      	ldrh	r3, [r3, #26]
    1522:	b29b      	uxth	r3, r3
    1524:	001a      	movs	r2, r3
    1526:	2320      	movs	r3, #32
    1528:	4013      	ands	r3, r2
    152a:	d101      	bne.n	1530 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    152c:	2341      	movs	r3, #65	; 0x41
    152e:	e06e      	b.n	160e <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    1530:	687b      	ldr	r3, [r7, #4]
    1532:	7adb      	ldrb	r3, [r3, #11]
    1534:	2b00      	cmp	r3, #0
    1536:	d01e      	beq.n	1576 <_i2c_master_read_packet+0x1be>
    1538:	230b      	movs	r3, #11
    153a:	18fb      	adds	r3, r7, r3
    153c:	781b      	ldrb	r3, [r3, #0]
    153e:	2201      	movs	r2, #1
    1540:	4053      	eors	r3, r2
    1542:	b2db      	uxtb	r3, r3
    1544:	2b00      	cmp	r3, #0
    1546:	d004      	beq.n	1552 <_i2c_master_read_packet+0x19a>
    1548:	2314      	movs	r3, #20
    154a:	18fb      	adds	r3, r7, r3
    154c:	881b      	ldrh	r3, [r3, #0]
    154e:	2b00      	cmp	r3, #0
    1550:	d009      	beq.n	1566 <_i2c_master_read_packet+0x1ae>
    1552:	230b      	movs	r3, #11
    1554:	18fb      	adds	r3, r7, r3
    1556:	781b      	ldrb	r3, [r3, #0]
    1558:	2b00      	cmp	r3, #0
    155a:	d00c      	beq.n	1576 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    155c:	2314      	movs	r3, #20
    155e:	18fb      	adds	r3, r7, r3
    1560:	881b      	ldrh	r3, [r3, #0]
    1562:	2b01      	cmp	r3, #1
    1564:	d107      	bne.n	1576 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1566:	68fb      	ldr	r3, [r7, #12]
    1568:	685b      	ldr	r3, [r3, #4]
    156a:	2280      	movs	r2, #128	; 0x80
    156c:	02d2      	lsls	r2, r2, #11
    156e:	431a      	orrs	r2, r3
    1570:	68fb      	ldr	r3, [r7, #12]
    1572:	605a      	str	r2, [r3, #4]
    1574:	e01a      	b.n	15ac <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0018      	movs	r0, r3
    157a:	4b2b      	ldr	r3, [pc, #172]	; (1628 <_i2c_master_read_packet+0x270>)
    157c:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    157e:	683b      	ldr	r3, [r7, #0]
    1580:	685a      	ldr	r2, [r3, #4]
    1582:	2312      	movs	r3, #18
    1584:	18fb      	adds	r3, r7, r3
    1586:	881b      	ldrh	r3, [r3, #0]
    1588:	2112      	movs	r1, #18
    158a:	1879      	adds	r1, r7, r1
    158c:	1c58      	adds	r0, r3, #1
    158e:	8008      	strh	r0, [r1, #0]
    1590:	18d3      	adds	r3, r2, r3
    1592:	68fa      	ldr	r2, [r7, #12]
    1594:	2128      	movs	r1, #40	; 0x28
    1596:	5c52      	ldrb	r2, [r2, r1]
    1598:	b2d2      	uxtb	r2, r2
    159a:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    159c:	2317      	movs	r3, #23
    159e:	18fc      	adds	r4, r7, r3
    15a0:	687b      	ldr	r3, [r7, #4]
    15a2:	0018      	movs	r0, r3
    15a4:	4b1e      	ldr	r3, [pc, #120]	; (1620 <_i2c_master_read_packet+0x268>)
    15a6:	4798      	blx	r3
    15a8:	0003      	movs	r3, r0
    15aa:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    15ac:	2317      	movs	r3, #23
    15ae:	18fb      	adds	r3, r7, r3
    15b0:	781b      	ldrb	r3, [r3, #0]
    15b2:	2b00      	cmp	r3, #0
    15b4:	d109      	bne.n	15ca <_i2c_master_read_packet+0x212>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
    15b6:	2314      	movs	r3, #20
    15b8:	18fb      	adds	r3, r7, r3
    15ba:	881b      	ldrh	r3, [r3, #0]
    15bc:	2214      	movs	r2, #20
    15be:	18ba      	adds	r2, r7, r2
    15c0:	1e59      	subs	r1, r3, #1
    15c2:	8011      	strh	r1, [r2, #0]
    15c4:	2b00      	cmp	r3, #0
    15c6:	d1aa      	bne.n	151e <_i2c_master_read_packet+0x166>
    15c8:	e000      	b.n	15cc <_i2c_master_read_packet+0x214>
				tmp_status = _i2c_master_wait_for_bus(module);
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    15ca:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    15cc:	687b      	ldr	r3, [r7, #4]
    15ce:	7a9b      	ldrb	r3, [r3, #10]
    15d0:	2b00      	cmp	r3, #0
    15d2:	d00a      	beq.n	15ea <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    15d4:	687b      	ldr	r3, [r7, #4]
    15d6:	0018      	movs	r0, r3
    15d8:	4b13      	ldr	r3, [pc, #76]	; (1628 <_i2c_master_read_packet+0x270>)
    15da:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    15dc:	68fb      	ldr	r3, [r7, #12]
    15de:	685b      	ldr	r3, [r3, #4]
    15e0:	22c0      	movs	r2, #192	; 0xc0
    15e2:	0292      	lsls	r2, r2, #10
    15e4:	431a      	orrs	r2, r3
    15e6:	68fb      	ldr	r3, [r7, #12]
    15e8:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    15ea:	687b      	ldr	r3, [r7, #4]
    15ec:	0018      	movs	r0, r3
    15ee:	4b0e      	ldr	r3, [pc, #56]	; (1628 <_i2c_master_read_packet+0x270>)
    15f0:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    15f2:	683b      	ldr	r3, [r7, #0]
    15f4:	685a      	ldr	r2, [r3, #4]
    15f6:	2312      	movs	r3, #18
    15f8:	18fb      	adds	r3, r7, r3
    15fa:	881b      	ldrh	r3, [r3, #0]
    15fc:	18d3      	adds	r3, r2, r3
    15fe:	68fa      	ldr	r2, [r7, #12]
    1600:	2128      	movs	r1, #40	; 0x28
    1602:	5c52      	ldrb	r2, [r2, r1]
    1604:	b2d2      	uxtb	r2, r2
    1606:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    1608:	2317      	movs	r3, #23
    160a:	18fb      	adds	r3, r7, r3
    160c:	781b      	ldrb	r3, [r3, #0]
}
    160e:	0018      	movs	r0, r3
    1610:	46bd      	mov	sp, r7
    1612:	b007      	add	sp, #28
    1614:	bd90      	pop	{r4, r7, pc}
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	00001365 	.word	0x00001365
    161c:	fffbffff 	.word	0xfffbffff
    1620:	00001305 	.word	0x00001305
    1624:	000012a5 	.word	0x000012a5
    1628:	00000dbd 	.word	0x00000dbd

0000162c <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    162c:	b580      	push	{r7, lr}
    162e:	b082      	sub	sp, #8
    1630:	af00      	add	r7, sp, #0
    1632:	6078      	str	r0, [r7, #4]
    1634:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    1636:	687b      	ldr	r3, [r7, #4]
    1638:	2201      	movs	r2, #1
    163a:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    163c:	687b      	ldr	r3, [r7, #4]
    163e:	2201      	movs	r2, #1
    1640:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    1642:	683a      	ldr	r2, [r7, #0]
    1644:	687b      	ldr	r3, [r7, #4]
    1646:	0011      	movs	r1, r2
    1648:	0018      	movs	r0, r3
    164a:	4b03      	ldr	r3, [pc, #12]	; (1658 <i2c_master_read_packet_wait+0x2c>)
    164c:	4798      	blx	r3
    164e:	0003      	movs	r3, r0
}
    1650:	0018      	movs	r0, r3
    1652:	46bd      	mov	sp, r7
    1654:	b002      	add	sp, #8
    1656:	bd80      	pop	{r7, pc}
    1658:	000013b9 	.word	0x000013b9

0000165c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    165c:	b590      	push	{r4, r7, lr}
    165e:	b087      	sub	sp, #28
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
    1664:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1666:	687b      	ldr	r3, [r7, #4]
    1668:	681b      	ldr	r3, [r3, #0]
    166a:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    166c:	2314      	movs	r3, #20
    166e:	18fb      	adds	r3, r7, r3
    1670:	683a      	ldr	r2, [r7, #0]
    1672:	8852      	ldrh	r2, [r2, #2]
    1674:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    1676:	687b      	ldr	r3, [r7, #4]
    1678:	0018      	movs	r0, r3
    167a:	4b51      	ldr	r3, [pc, #324]	; (17c0 <_i2c_master_write_packet+0x164>)
    167c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    167e:	683b      	ldr	r3, [r7, #0]
    1680:	7a5b      	ldrb	r3, [r3, #9]
    1682:	2b00      	cmp	r3, #0
    1684:	d006      	beq.n	1694 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1686:	683b      	ldr	r3, [r7, #0]
    1688:	7a9a      	ldrb	r2, [r3, #10]
    168a:	687b      	ldr	r3, [r7, #4]
    168c:	0011      	movs	r1, r2
    168e:	0018      	movs	r0, r3
    1690:	4b4c      	ldr	r3, [pc, #304]	; (17c4 <_i2c_master_write_packet+0x168>)
    1692:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1694:	68fb      	ldr	r3, [r7, #12]
    1696:	685b      	ldr	r3, [r3, #4]
    1698:	4a4b      	ldr	r2, [pc, #300]	; (17c8 <_i2c_master_write_packet+0x16c>)
    169a:	401a      	ands	r2, r3
    169c:	68fb      	ldr	r3, [r7, #12]
    169e:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    16a0:	683b      	ldr	r3, [r7, #0]
    16a2:	7a1b      	ldrb	r3, [r3, #8]
    16a4:	2b00      	cmp	r3, #0
    16a6:	d00d      	beq.n	16c4 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    16a8:	683b      	ldr	r3, [r7, #0]
    16aa:	881b      	ldrh	r3, [r3, #0]
    16ac:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    16ae:	683b      	ldr	r3, [r7, #0]
    16b0:	7a5b      	ldrb	r3, [r3, #9]
    16b2:	039b      	lsls	r3, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    16b4:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    16b6:	001a      	movs	r2, r3
    16b8:	2380      	movs	r3, #128	; 0x80
    16ba:	021b      	lsls	r3, r3, #8
    16bc:	431a      	orrs	r2, r3
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    16be:	68fb      	ldr	r3, [r7, #12]
    16c0:	625a      	str	r2, [r3, #36]	; 0x24
    16c2:	e009      	b.n	16d8 <_i2c_master_write_packet+0x7c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    16c4:	683b      	ldr	r3, [r7, #0]
    16c6:	881b      	ldrh	r3, [r3, #0]
    16c8:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    16ca:	683b      	ldr	r3, [r7, #0]
    16cc:	7a5b      	ldrb	r3, [r3, #9]
    16ce:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    16d0:	4313      	orrs	r3, r2
    16d2:	001a      	movs	r2, r3
    16d4:	68fb      	ldr	r3, [r7, #12]
    16d6:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    16d8:	2317      	movs	r3, #23
    16da:	18fc      	adds	r4, r7, r3
    16dc:	687b      	ldr	r3, [r7, #4]
    16de:	0018      	movs	r0, r3
    16e0:	4b3a      	ldr	r3, [pc, #232]	; (17cc <_i2c_master_write_packet+0x170>)
    16e2:	4798      	blx	r3
    16e4:	0003      	movs	r3, r0
    16e6:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    16e8:	2317      	movs	r3, #23
    16ea:	18fb      	adds	r3, r7, r3
    16ec:	781b      	ldrb	r3, [r3, #0]
    16ee:	2b00      	cmp	r3, #0
    16f0:	d107      	bne.n	1702 <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    16f2:	2317      	movs	r3, #23
    16f4:	18fc      	adds	r4, r7, r3
    16f6:	687b      	ldr	r3, [r7, #4]
    16f8:	0018      	movs	r0, r3
    16fa:	4b35      	ldr	r3, [pc, #212]	; (17d0 <_i2c_master_write_packet+0x174>)
    16fc:	4798      	blx	r3
    16fe:	0003      	movs	r3, r0
    1700:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1702:	2317      	movs	r3, #23
    1704:	18fb      	adds	r3, r7, r3
    1706:	781b      	ldrb	r3, [r3, #0]
    1708:	2b00      	cmp	r3, #0
    170a:	d152      	bne.n	17b2 <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    170c:	2312      	movs	r3, #18
    170e:	18fb      	adds	r3, r7, r3
    1710:	2200      	movs	r2, #0
    1712:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    1714:	e033      	b.n	177e <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1716:	68fb      	ldr	r3, [r7, #12]
    1718:	8b5b      	ldrh	r3, [r3, #26]
    171a:	b29b      	uxth	r3, r3
    171c:	001a      	movs	r2, r3
    171e:	2320      	movs	r3, #32
    1720:	4013      	ands	r3, r2
    1722:	d101      	bne.n	1728 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    1724:	2341      	movs	r3, #65	; 0x41
    1726:	e047      	b.n	17b8 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    1728:	687b      	ldr	r3, [r7, #4]
    172a:	0018      	movs	r0, r3
    172c:	4b24      	ldr	r3, [pc, #144]	; (17c0 <_i2c_master_write_packet+0x164>)
    172e:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1730:	683b      	ldr	r3, [r7, #0]
    1732:	685a      	ldr	r2, [r3, #4]
    1734:	2312      	movs	r3, #18
    1736:	18fb      	adds	r3, r7, r3
    1738:	881b      	ldrh	r3, [r3, #0]
    173a:	2112      	movs	r1, #18
    173c:	1879      	adds	r1, r7, r1
    173e:	1c58      	adds	r0, r3, #1
    1740:	8008      	strh	r0, [r1, #0]
    1742:	18d3      	adds	r3, r2, r3
    1744:	7819      	ldrb	r1, [r3, #0]
    1746:	68fb      	ldr	r3, [r7, #12]
    1748:	2228      	movs	r2, #40	; 0x28
    174a:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    174c:	2317      	movs	r3, #23
    174e:	18fc      	adds	r4, r7, r3
    1750:	687b      	ldr	r3, [r7, #4]
    1752:	0018      	movs	r0, r3
    1754:	4b1d      	ldr	r3, [pc, #116]	; (17cc <_i2c_master_write_packet+0x170>)
    1756:	4798      	blx	r3
    1758:	0003      	movs	r3, r0
    175a:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    175c:	2317      	movs	r3, #23
    175e:	18fb      	adds	r3, r7, r3
    1760:	781b      	ldrb	r3, [r3, #0]
    1762:	2b00      	cmp	r3, #0
    1764:	d115      	bne.n	1792 <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1766:	68fb      	ldr	r3, [r7, #12]
    1768:	8b5b      	ldrh	r3, [r3, #26]
    176a:	b29b      	uxth	r3, r3
    176c:	001a      	movs	r2, r3
    176e:	2304      	movs	r3, #4
    1770:	4013      	ands	r3, r2
    1772:	d004      	beq.n	177e <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    1774:	2317      	movs	r3, #23
    1776:	18fb      	adds	r3, r7, r3
    1778:	221e      	movs	r2, #30
    177a:	701a      	strb	r2, [r3, #0]
				break;
    177c:	e00a      	b.n	1794 <_i2c_master_write_packet+0x138>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    177e:	2314      	movs	r3, #20
    1780:	18fb      	adds	r3, r7, r3
    1782:	881b      	ldrh	r3, [r3, #0]
    1784:	2214      	movs	r2, #20
    1786:	18ba      	adds	r2, r7, r2
    1788:	1e59      	subs	r1, r3, #1
    178a:	8011      	strh	r1, [r2, #0]
    178c:	2b00      	cmp	r3, #0
    178e:	d1c2      	bne.n	1716 <_i2c_master_write_packet+0xba>
    1790:	e000      	b.n	1794 <_i2c_master_write_packet+0x138>
			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    1792:	46c0      	nop			; (mov r8, r8)
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
    1794:	687b      	ldr	r3, [r7, #4]
    1796:	7a9b      	ldrb	r3, [r3, #10]
    1798:	2b00      	cmp	r3, #0
    179a:	d00a      	beq.n	17b2 <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    179c:	687b      	ldr	r3, [r7, #4]
    179e:	0018      	movs	r0, r3
    17a0:	4b07      	ldr	r3, [pc, #28]	; (17c0 <_i2c_master_write_packet+0x164>)
    17a2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    17a4:	68fb      	ldr	r3, [r7, #12]
    17a6:	685b      	ldr	r3, [r3, #4]
    17a8:	22c0      	movs	r2, #192	; 0xc0
    17aa:	0292      	lsls	r2, r2, #10
    17ac:	431a      	orrs	r2, r3
    17ae:	68fb      	ldr	r3, [r7, #12]
    17b0:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    17b2:	2317      	movs	r3, #23
    17b4:	18fb      	adds	r3, r7, r3
    17b6:	781b      	ldrb	r3, [r3, #0]
}
    17b8:	0018      	movs	r0, r3
    17ba:	46bd      	mov	sp, r7
    17bc:	b007      	add	sp, #28
    17be:	bd90      	pop	{r4, r7, pc}
    17c0:	00000dbd 	.word	0x00000dbd
    17c4:	00001365 	.word	0x00001365
    17c8:	fffbffff 	.word	0xfffbffff
    17cc:	00001305 	.word	0x00001305
    17d0:	000012a5 	.word	0x000012a5

000017d4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    17d4:	b580      	push	{r7, lr}
    17d6:	b082      	sub	sp, #8
    17d8:	af00      	add	r7, sp, #0
    17da:	6078      	str	r0, [r7, #4]
    17dc:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    17de:	687b      	ldr	r3, [r7, #4]
    17e0:	2201      	movs	r2, #1
    17e2:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    17e4:	687b      	ldr	r3, [r7, #4]
    17e6:	2201      	movs	r2, #1
    17e8:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    17ea:	683a      	ldr	r2, [r7, #0]
    17ec:	687b      	ldr	r3, [r7, #4]
    17ee:	0011      	movs	r1, r2
    17f0:	0018      	movs	r0, r3
    17f2:	4b03      	ldr	r3, [pc, #12]	; (1800 <i2c_master_write_packet_wait+0x2c>)
    17f4:	4798      	blx	r3
    17f6:	0003      	movs	r3, r0
}
    17f8:	0018      	movs	r0, r3
    17fa:	46bd      	mov	sp, r7
    17fc:	b002      	add	sp, #8
    17fe:	bd80      	pop	{r7, pc}
    1800:	0000165d 	.word	0x0000165d

00001804 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1804:	b580      	push	{r7, lr}
    1806:	b082      	sub	sp, #8
    1808:	af00      	add	r7, sp, #0
    180a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    180c:	687b      	ldr	r3, [r7, #4]
    180e:	2200      	movs	r2, #0
    1810:	701a      	strb	r2, [r3, #0]
}
    1812:	46c0      	nop			; (mov r8, r8)
    1814:	46bd      	mov	sp, r7
    1816:	b002      	add	sp, #8
    1818:	bd80      	pop	{r7, pc}
    181a:	46c0      	nop			; (mov r8, r8)

0000181c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    181c:	b580      	push	{r7, lr}
    181e:	b084      	sub	sp, #16
    1820:	af00      	add	r7, sp, #0
    1822:	0002      	movs	r2, r0
    1824:	1dfb      	adds	r3, r7, #7
    1826:	701a      	strb	r2, [r3, #0]
    1828:	1dbb      	adds	r3, r7, #6
    182a:	1c0a      	adds	r2, r1, #0
    182c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    182e:	4b1a      	ldr	r3, [pc, #104]	; (1898 <sercom_set_gclk_generator+0x7c>)
    1830:	781b      	ldrb	r3, [r3, #0]
    1832:	2201      	movs	r2, #1
    1834:	4053      	eors	r3, r2
    1836:	b2db      	uxtb	r3, r3
    1838:	2b00      	cmp	r3, #0
    183a:	d103      	bne.n	1844 <sercom_set_gclk_generator+0x28>
    183c:	1dbb      	adds	r3, r7, #6
    183e:	781b      	ldrb	r3, [r3, #0]
    1840:	2b00      	cmp	r3, #0
    1842:	d01b      	beq.n	187c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1844:	230c      	movs	r3, #12
    1846:	18fb      	adds	r3, r7, r3
    1848:	0018      	movs	r0, r3
    184a:	4b14      	ldr	r3, [pc, #80]	; (189c <sercom_set_gclk_generator+0x80>)
    184c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    184e:	230c      	movs	r3, #12
    1850:	18fb      	adds	r3, r7, r3
    1852:	1dfa      	adds	r2, r7, #7
    1854:	7812      	ldrb	r2, [r2, #0]
    1856:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1858:	230c      	movs	r3, #12
    185a:	18fb      	adds	r3, r7, r3
    185c:	0019      	movs	r1, r3
    185e:	2013      	movs	r0, #19
    1860:	4b0f      	ldr	r3, [pc, #60]	; (18a0 <sercom_set_gclk_generator+0x84>)
    1862:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1864:	2013      	movs	r0, #19
    1866:	4b0f      	ldr	r3, [pc, #60]	; (18a4 <sercom_set_gclk_generator+0x88>)
    1868:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    186a:	4b0b      	ldr	r3, [pc, #44]	; (1898 <sercom_set_gclk_generator+0x7c>)
    186c:	1dfa      	adds	r2, r7, #7
    186e:	7812      	ldrb	r2, [r2, #0]
    1870:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    1872:	4b09      	ldr	r3, [pc, #36]	; (1898 <sercom_set_gclk_generator+0x7c>)
    1874:	2201      	movs	r2, #1
    1876:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    1878:	2300      	movs	r3, #0
    187a:	e008      	b.n	188e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    187c:	4b06      	ldr	r3, [pc, #24]	; (1898 <sercom_set_gclk_generator+0x7c>)
    187e:	785b      	ldrb	r3, [r3, #1]
    1880:	1dfa      	adds	r2, r7, #7
    1882:	7812      	ldrb	r2, [r2, #0]
    1884:	429a      	cmp	r2, r3
    1886:	d101      	bne.n	188c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    1888:	2300      	movs	r3, #0
    188a:	e000      	b.n	188e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    188c:	231d      	movs	r3, #29
}
    188e:	0018      	movs	r0, r3
    1890:	46bd      	mov	sp, r7
    1892:	b004      	add	sp, #16
    1894:	bd80      	pop	{r7, pc}
    1896:	46c0      	nop			; (mov r8, r8)
    1898:	200000d8 	.word	0x200000d8
    189c:	00001805 	.word	0x00001805
    18a0:	00004c5d 	.word	0x00004c5d
    18a4:	00004ca1 	.word	0x00004ca1

000018a8 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    18a8:	b580      	push	{r7, lr}
    18aa:	b082      	sub	sp, #8
    18ac:	af00      	add	r7, sp, #0
    18ae:	6078      	str	r0, [r7, #4]
    18b0:	000a      	movs	r2, r1
    18b2:	1cfb      	adds	r3, r7, #3
    18b4:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    18b6:	687b      	ldr	r3, [r7, #4]
    18b8:	4a4d      	ldr	r2, [pc, #308]	; (19f0 <_sercom_get_default_pad+0x148>)
    18ba:	4293      	cmp	r3, r2
    18bc:	d03f      	beq.n	193e <_sercom_get_default_pad+0x96>
    18be:	4a4c      	ldr	r2, [pc, #304]	; (19f0 <_sercom_get_default_pad+0x148>)
    18c0:	4293      	cmp	r3, r2
    18c2:	d806      	bhi.n	18d2 <_sercom_get_default_pad+0x2a>
    18c4:	4a4b      	ldr	r2, [pc, #300]	; (19f4 <_sercom_get_default_pad+0x14c>)
    18c6:	4293      	cmp	r3, r2
    18c8:	d00f      	beq.n	18ea <_sercom_get_default_pad+0x42>
    18ca:	4a4b      	ldr	r2, [pc, #300]	; (19f8 <_sercom_get_default_pad+0x150>)
    18cc:	4293      	cmp	r3, r2
    18ce:	d021      	beq.n	1914 <_sercom_get_default_pad+0x6c>
    18d0:	e089      	b.n	19e6 <_sercom_get_default_pad+0x13e>
    18d2:	4a4a      	ldr	r2, [pc, #296]	; (19fc <_sercom_get_default_pad+0x154>)
    18d4:	4293      	cmp	r3, r2
    18d6:	d100      	bne.n	18da <_sercom_get_default_pad+0x32>
    18d8:	e05b      	b.n	1992 <_sercom_get_default_pad+0xea>
    18da:	4a49      	ldr	r2, [pc, #292]	; (1a00 <_sercom_get_default_pad+0x158>)
    18dc:	4293      	cmp	r3, r2
    18de:	d100      	bne.n	18e2 <_sercom_get_default_pad+0x3a>
    18e0:	e06c      	b.n	19bc <_sercom_get_default_pad+0x114>
    18e2:	4a48      	ldr	r2, [pc, #288]	; (1a04 <_sercom_get_default_pad+0x15c>)
    18e4:	4293      	cmp	r3, r2
    18e6:	d03f      	beq.n	1968 <_sercom_get_default_pad+0xc0>
    18e8:	e07d      	b.n	19e6 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    18ea:	1cfb      	adds	r3, r7, #3
    18ec:	781b      	ldrb	r3, [r3, #0]
    18ee:	2b01      	cmp	r3, #1
    18f0:	d00a      	beq.n	1908 <_sercom_get_default_pad+0x60>
    18f2:	dc02      	bgt.n	18fa <_sercom_get_default_pad+0x52>
    18f4:	2b00      	cmp	r3, #0
    18f6:	d005      	beq.n	1904 <_sercom_get_default_pad+0x5c>
    18f8:	e075      	b.n	19e6 <_sercom_get_default_pad+0x13e>
    18fa:	2b02      	cmp	r3, #2
    18fc:	d006      	beq.n	190c <_sercom_get_default_pad+0x64>
    18fe:	2b03      	cmp	r3, #3
    1900:	d006      	beq.n	1910 <_sercom_get_default_pad+0x68>
    1902:	e070      	b.n	19e6 <_sercom_get_default_pad+0x13e>
    1904:	4b40      	ldr	r3, [pc, #256]	; (1a08 <_sercom_get_default_pad+0x160>)
    1906:	e06f      	b.n	19e8 <_sercom_get_default_pad+0x140>
    1908:	4b40      	ldr	r3, [pc, #256]	; (1a0c <_sercom_get_default_pad+0x164>)
    190a:	e06d      	b.n	19e8 <_sercom_get_default_pad+0x140>
    190c:	4b40      	ldr	r3, [pc, #256]	; (1a10 <_sercom_get_default_pad+0x168>)
    190e:	e06b      	b.n	19e8 <_sercom_get_default_pad+0x140>
    1910:	4b40      	ldr	r3, [pc, #256]	; (1a14 <_sercom_get_default_pad+0x16c>)
    1912:	e069      	b.n	19e8 <_sercom_get_default_pad+0x140>
    1914:	1cfb      	adds	r3, r7, #3
    1916:	781b      	ldrb	r3, [r3, #0]
    1918:	2b01      	cmp	r3, #1
    191a:	d00a      	beq.n	1932 <_sercom_get_default_pad+0x8a>
    191c:	dc02      	bgt.n	1924 <_sercom_get_default_pad+0x7c>
    191e:	2b00      	cmp	r3, #0
    1920:	d005      	beq.n	192e <_sercom_get_default_pad+0x86>
    1922:	e060      	b.n	19e6 <_sercom_get_default_pad+0x13e>
    1924:	2b02      	cmp	r3, #2
    1926:	d006      	beq.n	1936 <_sercom_get_default_pad+0x8e>
    1928:	2b03      	cmp	r3, #3
    192a:	d006      	beq.n	193a <_sercom_get_default_pad+0x92>
    192c:	e05b      	b.n	19e6 <_sercom_get_default_pad+0x13e>
    192e:	2303      	movs	r3, #3
    1930:	e05a      	b.n	19e8 <_sercom_get_default_pad+0x140>
    1932:	4b39      	ldr	r3, [pc, #228]	; (1a18 <_sercom_get_default_pad+0x170>)
    1934:	e058      	b.n	19e8 <_sercom_get_default_pad+0x140>
    1936:	4b39      	ldr	r3, [pc, #228]	; (1a1c <_sercom_get_default_pad+0x174>)
    1938:	e056      	b.n	19e8 <_sercom_get_default_pad+0x140>
    193a:	4b39      	ldr	r3, [pc, #228]	; (1a20 <_sercom_get_default_pad+0x178>)
    193c:	e054      	b.n	19e8 <_sercom_get_default_pad+0x140>
    193e:	1cfb      	adds	r3, r7, #3
    1940:	781b      	ldrb	r3, [r3, #0]
    1942:	2b01      	cmp	r3, #1
    1944:	d00a      	beq.n	195c <_sercom_get_default_pad+0xb4>
    1946:	dc02      	bgt.n	194e <_sercom_get_default_pad+0xa6>
    1948:	2b00      	cmp	r3, #0
    194a:	d005      	beq.n	1958 <_sercom_get_default_pad+0xb0>
    194c:	e04b      	b.n	19e6 <_sercom_get_default_pad+0x13e>
    194e:	2b02      	cmp	r3, #2
    1950:	d006      	beq.n	1960 <_sercom_get_default_pad+0xb8>
    1952:	2b03      	cmp	r3, #3
    1954:	d006      	beq.n	1964 <_sercom_get_default_pad+0xbc>
    1956:	e046      	b.n	19e6 <_sercom_get_default_pad+0x13e>
    1958:	4b32      	ldr	r3, [pc, #200]	; (1a24 <_sercom_get_default_pad+0x17c>)
    195a:	e045      	b.n	19e8 <_sercom_get_default_pad+0x140>
    195c:	4b32      	ldr	r3, [pc, #200]	; (1a28 <_sercom_get_default_pad+0x180>)
    195e:	e043      	b.n	19e8 <_sercom_get_default_pad+0x140>
    1960:	4b32      	ldr	r3, [pc, #200]	; (1a2c <_sercom_get_default_pad+0x184>)
    1962:	e041      	b.n	19e8 <_sercom_get_default_pad+0x140>
    1964:	4b32      	ldr	r3, [pc, #200]	; (1a30 <_sercom_get_default_pad+0x188>)
    1966:	e03f      	b.n	19e8 <_sercom_get_default_pad+0x140>
    1968:	1cfb      	adds	r3, r7, #3
    196a:	781b      	ldrb	r3, [r3, #0]
    196c:	2b01      	cmp	r3, #1
    196e:	d00a      	beq.n	1986 <_sercom_get_default_pad+0xde>
    1970:	dc02      	bgt.n	1978 <_sercom_get_default_pad+0xd0>
    1972:	2b00      	cmp	r3, #0
    1974:	d005      	beq.n	1982 <_sercom_get_default_pad+0xda>
    1976:	e036      	b.n	19e6 <_sercom_get_default_pad+0x13e>
    1978:	2b02      	cmp	r3, #2
    197a:	d006      	beq.n	198a <_sercom_get_default_pad+0xe2>
    197c:	2b03      	cmp	r3, #3
    197e:	d006      	beq.n	198e <_sercom_get_default_pad+0xe6>
    1980:	e031      	b.n	19e6 <_sercom_get_default_pad+0x13e>
    1982:	4b2c      	ldr	r3, [pc, #176]	; (1a34 <_sercom_get_default_pad+0x18c>)
    1984:	e030      	b.n	19e8 <_sercom_get_default_pad+0x140>
    1986:	4b2c      	ldr	r3, [pc, #176]	; (1a38 <_sercom_get_default_pad+0x190>)
    1988:	e02e      	b.n	19e8 <_sercom_get_default_pad+0x140>
    198a:	4b2c      	ldr	r3, [pc, #176]	; (1a3c <_sercom_get_default_pad+0x194>)
    198c:	e02c      	b.n	19e8 <_sercom_get_default_pad+0x140>
    198e:	4b2c      	ldr	r3, [pc, #176]	; (1a40 <_sercom_get_default_pad+0x198>)
    1990:	e02a      	b.n	19e8 <_sercom_get_default_pad+0x140>
    1992:	1cfb      	adds	r3, r7, #3
    1994:	781b      	ldrb	r3, [r3, #0]
    1996:	2b01      	cmp	r3, #1
    1998:	d00a      	beq.n	19b0 <_sercom_get_default_pad+0x108>
    199a:	dc02      	bgt.n	19a2 <_sercom_get_default_pad+0xfa>
    199c:	2b00      	cmp	r3, #0
    199e:	d005      	beq.n	19ac <_sercom_get_default_pad+0x104>
    19a0:	e021      	b.n	19e6 <_sercom_get_default_pad+0x13e>
    19a2:	2b02      	cmp	r3, #2
    19a4:	d006      	beq.n	19b4 <_sercom_get_default_pad+0x10c>
    19a6:	2b03      	cmp	r3, #3
    19a8:	d006      	beq.n	19b8 <_sercom_get_default_pad+0x110>
    19aa:	e01c      	b.n	19e6 <_sercom_get_default_pad+0x13e>
    19ac:	4b25      	ldr	r3, [pc, #148]	; (1a44 <_sercom_get_default_pad+0x19c>)
    19ae:	e01b      	b.n	19e8 <_sercom_get_default_pad+0x140>
    19b0:	4b25      	ldr	r3, [pc, #148]	; (1a48 <_sercom_get_default_pad+0x1a0>)
    19b2:	e019      	b.n	19e8 <_sercom_get_default_pad+0x140>
    19b4:	4b25      	ldr	r3, [pc, #148]	; (1a4c <_sercom_get_default_pad+0x1a4>)
    19b6:	e017      	b.n	19e8 <_sercom_get_default_pad+0x140>
    19b8:	4b25      	ldr	r3, [pc, #148]	; (1a50 <_sercom_get_default_pad+0x1a8>)
    19ba:	e015      	b.n	19e8 <_sercom_get_default_pad+0x140>
    19bc:	1cfb      	adds	r3, r7, #3
    19be:	781b      	ldrb	r3, [r3, #0]
    19c0:	2b01      	cmp	r3, #1
    19c2:	d00a      	beq.n	19da <_sercom_get_default_pad+0x132>
    19c4:	dc02      	bgt.n	19cc <_sercom_get_default_pad+0x124>
    19c6:	2b00      	cmp	r3, #0
    19c8:	d005      	beq.n	19d6 <_sercom_get_default_pad+0x12e>
    19ca:	e00c      	b.n	19e6 <_sercom_get_default_pad+0x13e>
    19cc:	2b02      	cmp	r3, #2
    19ce:	d006      	beq.n	19de <_sercom_get_default_pad+0x136>
    19d0:	2b03      	cmp	r3, #3
    19d2:	d006      	beq.n	19e2 <_sercom_get_default_pad+0x13a>
    19d4:	e007      	b.n	19e6 <_sercom_get_default_pad+0x13e>
    19d6:	4b1f      	ldr	r3, [pc, #124]	; (1a54 <_sercom_get_default_pad+0x1ac>)
    19d8:	e006      	b.n	19e8 <_sercom_get_default_pad+0x140>
    19da:	4b1f      	ldr	r3, [pc, #124]	; (1a58 <_sercom_get_default_pad+0x1b0>)
    19dc:	e004      	b.n	19e8 <_sercom_get_default_pad+0x140>
    19de:	4b1f      	ldr	r3, [pc, #124]	; (1a5c <_sercom_get_default_pad+0x1b4>)
    19e0:	e002      	b.n	19e8 <_sercom_get_default_pad+0x140>
    19e2:	4b1f      	ldr	r3, [pc, #124]	; (1a60 <_sercom_get_default_pad+0x1b8>)
    19e4:	e000      	b.n	19e8 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    19e6:	2300      	movs	r3, #0
}
    19e8:	0018      	movs	r0, r3
    19ea:	46bd      	mov	sp, r7
    19ec:	b002      	add	sp, #8
    19ee:	bd80      	pop	{r7, pc}
    19f0:	42001000 	.word	0x42001000
    19f4:	42000800 	.word	0x42000800
    19f8:	42000c00 	.word	0x42000c00
    19fc:	42001800 	.word	0x42001800
    1a00:	42001c00 	.word	0x42001c00
    1a04:	42001400 	.word	0x42001400
    1a08:	00040003 	.word	0x00040003
    1a0c:	00050003 	.word	0x00050003
    1a10:	00060003 	.word	0x00060003
    1a14:	00070003 	.word	0x00070003
    1a18:	00010003 	.word	0x00010003
    1a1c:	001e0003 	.word	0x001e0003
    1a20:	001f0003 	.word	0x001f0003
    1a24:	00080003 	.word	0x00080003
    1a28:	00090003 	.word	0x00090003
    1a2c:	000a0003 	.word	0x000a0003
    1a30:	000b0003 	.word	0x000b0003
    1a34:	00100003 	.word	0x00100003
    1a38:	00110003 	.word	0x00110003
    1a3c:	00120003 	.word	0x00120003
    1a40:	00130003 	.word	0x00130003
    1a44:	000c0003 	.word	0x000c0003
    1a48:	000d0003 	.word	0x000d0003
    1a4c:	000e0003 	.word	0x000e0003
    1a50:	000f0003 	.word	0x000f0003
    1a54:	00160003 	.word	0x00160003
    1a58:	00170003 	.word	0x00170003
    1a5c:	00180003 	.word	0x00180003
    1a60:	00190003 	.word	0x00190003

00001a64 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1a64:	b590      	push	{r4, r7, lr}
    1a66:	b08b      	sub	sp, #44	; 0x2c
    1a68:	af00      	add	r7, sp, #0
    1a6a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1a6c:	230c      	movs	r3, #12
    1a6e:	18fb      	adds	r3, r7, r3
    1a70:	4a0f      	ldr	r2, [pc, #60]	; (1ab0 <_sercom_get_sercom_inst_index+0x4c>)
    1a72:	ca13      	ldmia	r2!, {r0, r1, r4}
    1a74:	c313      	stmia	r3!, {r0, r1, r4}
    1a76:	ca13      	ldmia	r2!, {r0, r1, r4}
    1a78:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1a7a:	2300      	movs	r3, #0
    1a7c:	627b      	str	r3, [r7, #36]	; 0x24
    1a7e:	e00e      	b.n	1a9e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1a80:	230c      	movs	r3, #12
    1a82:	18fb      	adds	r3, r7, r3
    1a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1a86:	0092      	lsls	r2, r2, #2
    1a88:	58d3      	ldr	r3, [r2, r3]
    1a8a:	1e1a      	subs	r2, r3, #0
    1a8c:	687b      	ldr	r3, [r7, #4]
    1a8e:	429a      	cmp	r2, r3
    1a90:	d102      	bne.n	1a98 <_sercom_get_sercom_inst_index+0x34>
			return i;
    1a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a94:	b2db      	uxtb	r3, r3
    1a96:	e006      	b.n	1aa6 <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a9a:	3301      	adds	r3, #1
    1a9c:	627b      	str	r3, [r7, #36]	; 0x24
    1a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1aa0:	2b05      	cmp	r3, #5
    1aa2:	d9ed      	bls.n	1a80 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1aa4:	2300      	movs	r3, #0
}
    1aa6:	0018      	movs	r0, r3
    1aa8:	46bd      	mov	sp, r7
    1aaa:	b00b      	add	sp, #44	; 0x2c
    1aac:	bd90      	pop	{r4, r7, pc}
    1aae:	46c0      	nop			; (mov r8, r8)
    1ab0:	0000847c 	.word	0x0000847c

00001ab4 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    1ab4:	b580      	push	{r7, lr}
    1ab6:	b082      	sub	sp, #8
    1ab8:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1aba:	4b04      	ldr	r3, [pc, #16]	; (1acc <wdt_clear_early_warning+0x18>)
    1abc:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	2201      	movs	r2, #1
    1ac2:	719a      	strb	r2, [r3, #6]
}
    1ac4:	46c0      	nop			; (mov r8, r8)
    1ac6:	46bd      	mov	sp, r7
    1ac8:	b002      	add	sp, #8
    1aca:	bd80      	pop	{r7, pc}
    1acc:	40001000 	.word	0x40001000

00001ad0 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    1ad0:	b580      	push	{r7, lr}
    1ad2:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    1ad4:	4b05      	ldr	r3, [pc, #20]	; (1aec <WDT_Handler+0x1c>)
    1ad6:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    1ad8:	4b05      	ldr	r3, [pc, #20]	; (1af0 <WDT_Handler+0x20>)
    1ada:	681b      	ldr	r3, [r3, #0]
    1adc:	2b00      	cmp	r3, #0
    1ade:	d002      	beq.n	1ae6 <WDT_Handler+0x16>
		wdt_early_warning_callback();
    1ae0:	4b03      	ldr	r3, [pc, #12]	; (1af0 <WDT_Handler+0x20>)
    1ae2:	681b      	ldr	r3, [r3, #0]
    1ae4:	4798      	blx	r3
	}
}
    1ae6:	46c0      	nop			; (mov r8, r8)
    1ae8:	46bd      	mov	sp, r7
    1aea:	bd80      	pop	{r7, pc}
    1aec:	00001ab5 	.word	0x00001ab5
    1af0:	20000154 	.word	0x20000154

00001af4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1af4:	b580      	push	{r7, lr}
    1af6:	b082      	sub	sp, #8
    1af8:	af00      	add	r7, sp, #0
    1afa:	0002      	movs	r2, r0
    1afc:	1dfb      	adds	r3, r7, #7
    1afe:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1b00:	4b06      	ldr	r3, [pc, #24]	; (1b1c <NVIC_EnableIRQ+0x28>)
    1b02:	1dfa      	adds	r2, r7, #7
    1b04:	7812      	ldrb	r2, [r2, #0]
    1b06:	0011      	movs	r1, r2
    1b08:	221f      	movs	r2, #31
    1b0a:	400a      	ands	r2, r1
    1b0c:	2101      	movs	r1, #1
    1b0e:	4091      	lsls	r1, r2
    1b10:	000a      	movs	r2, r1
    1b12:	601a      	str	r2, [r3, #0]
}
    1b14:	46c0      	nop			; (mov r8, r8)
    1b16:	46bd      	mov	sp, r7
    1b18:	b002      	add	sp, #8
    1b1a:	bd80      	pop	{r7, pc}
    1b1c:	e000e100 	.word	0xe000e100

00001b20 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1b20:	b5b0      	push	{r4, r5, r7, lr}
    1b22:	b082      	sub	sp, #8
    1b24:	af00      	add	r7, sp, #0
    1b26:	0002      	movs	r2, r0
    1b28:	6039      	str	r1, [r7, #0]
    1b2a:	1dfb      	adds	r3, r7, #7
    1b2c:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    1b2e:	1dfb      	adds	r3, r7, #7
    1b30:	781b      	ldrb	r3, [r3, #0]
    1b32:	2b7f      	cmp	r3, #127	; 0x7f
    1b34:	d932      	bls.n	1b9c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1b36:	4c2f      	ldr	r4, [pc, #188]	; (1bf4 <NVIC_SetPriority+0xd4>)
    1b38:	1dfb      	adds	r3, r7, #7
    1b3a:	781b      	ldrb	r3, [r3, #0]
    1b3c:	001a      	movs	r2, r3
    1b3e:	230f      	movs	r3, #15
    1b40:	4013      	ands	r3, r2
    1b42:	3b08      	subs	r3, #8
    1b44:	0899      	lsrs	r1, r3, #2
    1b46:	4a2b      	ldr	r2, [pc, #172]	; (1bf4 <NVIC_SetPriority+0xd4>)
    1b48:	1dfb      	adds	r3, r7, #7
    1b4a:	781b      	ldrb	r3, [r3, #0]
    1b4c:	0018      	movs	r0, r3
    1b4e:	230f      	movs	r3, #15
    1b50:	4003      	ands	r3, r0
    1b52:	3b08      	subs	r3, #8
    1b54:	089b      	lsrs	r3, r3, #2
    1b56:	3306      	adds	r3, #6
    1b58:	009b      	lsls	r3, r3, #2
    1b5a:	18d3      	adds	r3, r2, r3
    1b5c:	3304      	adds	r3, #4
    1b5e:	681b      	ldr	r3, [r3, #0]
    1b60:	1dfa      	adds	r2, r7, #7
    1b62:	7812      	ldrb	r2, [r2, #0]
    1b64:	0010      	movs	r0, r2
    1b66:	2203      	movs	r2, #3
    1b68:	4002      	ands	r2, r0
    1b6a:	00d2      	lsls	r2, r2, #3
    1b6c:	20ff      	movs	r0, #255	; 0xff
    1b6e:	4090      	lsls	r0, r2
    1b70:	0002      	movs	r2, r0
    1b72:	43d2      	mvns	r2, r2
    1b74:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    1b76:	683b      	ldr	r3, [r7, #0]
    1b78:	019b      	lsls	r3, r3, #6
    1b7a:	20ff      	movs	r0, #255	; 0xff
    1b7c:	4018      	ands	r0, r3
    1b7e:	1dfb      	adds	r3, r7, #7
    1b80:	781b      	ldrb	r3, [r3, #0]
    1b82:	001d      	movs	r5, r3
    1b84:	2303      	movs	r3, #3
    1b86:	402b      	ands	r3, r5
    1b88:	00db      	lsls	r3, r3, #3
    1b8a:	4098      	lsls	r0, r3
    1b8c:	0003      	movs	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1b8e:	431a      	orrs	r2, r3
    1b90:	1d8b      	adds	r3, r1, #6
    1b92:	009b      	lsls	r3, r3, #2
    1b94:	18e3      	adds	r3, r4, r3
    1b96:	3304      	adds	r3, #4
    1b98:	601a      	str	r2, [r3, #0]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    1b9a:	e027      	b.n	1bec <NVIC_SetPriority+0xcc>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1b9c:	4c16      	ldr	r4, [pc, #88]	; (1bf8 <NVIC_SetPriority+0xd8>)
    1b9e:	1dfb      	adds	r3, r7, #7
    1ba0:	781b      	ldrb	r3, [r3, #0]
    1ba2:	b25b      	sxtb	r3, r3
    1ba4:	089b      	lsrs	r3, r3, #2
    1ba6:	4914      	ldr	r1, [pc, #80]	; (1bf8 <NVIC_SetPriority+0xd8>)
    1ba8:	1dfa      	adds	r2, r7, #7
    1baa:	7812      	ldrb	r2, [r2, #0]
    1bac:	b252      	sxtb	r2, r2
    1bae:	0892      	lsrs	r2, r2, #2
    1bb0:	32c0      	adds	r2, #192	; 0xc0
    1bb2:	0092      	lsls	r2, r2, #2
    1bb4:	5852      	ldr	r2, [r2, r1]
    1bb6:	1df9      	adds	r1, r7, #7
    1bb8:	7809      	ldrb	r1, [r1, #0]
    1bba:	0008      	movs	r0, r1
    1bbc:	2103      	movs	r1, #3
    1bbe:	4001      	ands	r1, r0
    1bc0:	00c9      	lsls	r1, r1, #3
    1bc2:	20ff      	movs	r0, #255	; 0xff
    1bc4:	4088      	lsls	r0, r1
    1bc6:	0001      	movs	r1, r0
    1bc8:	43c9      	mvns	r1, r1
    1bca:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    1bcc:	683a      	ldr	r2, [r7, #0]
    1bce:	0192      	lsls	r2, r2, #6
    1bd0:	20ff      	movs	r0, #255	; 0xff
    1bd2:	4010      	ands	r0, r2
    1bd4:	1dfa      	adds	r2, r7, #7
    1bd6:	7812      	ldrb	r2, [r2, #0]
    1bd8:	0015      	movs	r5, r2
    1bda:	2203      	movs	r2, #3
    1bdc:	402a      	ands	r2, r5
    1bde:	00d2      	lsls	r2, r2, #3
    1be0:	4090      	lsls	r0, r2
    1be2:	0002      	movs	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1be4:	430a      	orrs	r2, r1
    1be6:	33c0      	adds	r3, #192	; 0xc0
    1be8:	009b      	lsls	r3, r3, #2
    1bea:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    1bec:	46c0      	nop			; (mov r8, r8)
    1bee:	46bd      	mov	sp, r7
    1bf0:	b002      	add	sp, #8
    1bf2:	bdb0      	pop	{r4, r5, r7, pc}
    1bf4:	e000ed00 	.word	0xe000ed00
    1bf8:	e000e100 	.word	0xe000e100

00001bfc <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    1bfc:	b580      	push	{r7, lr}
    1bfe:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    1c00:	4b04      	ldr	r3, [pc, #16]	; (1c14 <system_interrupt_enable_global+0x18>)
    1c02:	2201      	movs	r2, #1
    1c04:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1c06:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1c0a:	b662      	cpsie	i
}
    1c0c:	46c0      	nop			; (mov r8, r8)
    1c0e:	46bd      	mov	sp, r7
    1c10:	bd80      	pop	{r7, pc}
    1c12:	46c0      	nop			; (mov r8, r8)
    1c14:	20000052 	.word	0x20000052

00001c18 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    1c18:	b580      	push	{r7, lr}
    1c1a:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1c1c:	b672      	cpsid	i
    1c1e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1c22:	4b03      	ldr	r3, [pc, #12]	; (1c30 <system_interrupt_disable_global+0x18>)
    1c24:	2200      	movs	r2, #0
    1c26:	701a      	strb	r2, [r3, #0]
}
    1c28:	46c0      	nop			; (mov r8, r8)
    1c2a:	46bd      	mov	sp, r7
    1c2c:	bd80      	pop	{r7, pc}
    1c2e:	46c0      	nop			; (mov r8, r8)
    1c30:	20000052 	.word	0x20000052

00001c34 <uart_clk_init>:
	SERCOM_RX_PAD_3
} SercomRXPad;


void uart_clk_init(void)
{
    1c34:	b580      	push	{r7, lr}
    1c36:	af00      	add	r7, sp, #0
	// Start the Software Reset and wait for it to finish
	BLE_UART_SERCOM->USART.CTRLA.bit.SWRST = 1 ;
    1c38:	4a13      	ldr	r2, [pc, #76]	; (1c88 <uart_clk_init+0x54>)
    1c3a:	6813      	ldr	r3, [r2, #0]
    1c3c:	2101      	movs	r1, #1
    1c3e:	430b      	orrs	r3, r1
    1c40:	6013      	str	r3, [r2, #0]
	while ( BLE_UART_SERCOM->USART.CTRLA.bit.SWRST || BLE_UART_SERCOM->USART.SYNCBUSY.bit.SWRST );
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	4b10      	ldr	r3, [pc, #64]	; (1c88 <uart_clk_init+0x54>)
    1c46:	681b      	ldr	r3, [r3, #0]
    1c48:	07db      	lsls	r3, r3, #31
    1c4a:	0fdb      	lsrs	r3, r3, #31
    1c4c:	b2db      	uxtb	r3, r3
    1c4e:	2b00      	cmp	r3, #0
    1c50:	d1f8      	bne.n	1c44 <uart_clk_init+0x10>
    1c52:	4b0d      	ldr	r3, [pc, #52]	; (1c88 <uart_clk_init+0x54>)
    1c54:	69db      	ldr	r3, [r3, #28]
    1c56:	07db      	lsls	r3, r3, #31
    1c58:	0fdb      	lsrs	r3, r3, #31
    1c5a:	b2db      	uxtb	r3, r3
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	d1f1      	bne.n	1c44 <uart_clk_init+0x10>
	
	// Turn on peripheral clock for SERCOM being used
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM2;
    1c60:	4b0a      	ldr	r3, [pc, #40]	; (1c8c <uart_clk_init+0x58>)
    1c62:	4a0a      	ldr	r2, [pc, #40]	; (1c8c <uart_clk_init+0x58>)
    1c64:	6a12      	ldr	r2, [r2, #32]
    1c66:	2110      	movs	r1, #16
    1c68:	430a      	orrs	r2, r1
    1c6a:	621a      	str	r2, [r3, #32]

	//Setting clock
	GCLK->CLKCTRL.reg =
    1c6c:	4b08      	ldr	r3, [pc, #32]	; (1c90 <uart_clk_init+0x5c>)
    1c6e:	4a09      	ldr	r2, [pc, #36]	; (1c94 <uart_clk_init+0x60>)
    1c70:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID( GCM_SERCOM2_CORE )	|	// connected  SERCOMx to
	GCLK_CLKCTRL_GEN_GCLK0		|	// generic Clock Generator 0
	GCLK_CLKCTRL_CLKEN;			// and enable it

	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY ); // Wait for synchronization
    1c72:	46c0      	nop			; (mov r8, r8)
    1c74:	4b06      	ldr	r3, [pc, #24]	; (1c90 <uart_clk_init+0x5c>)
    1c76:	785b      	ldrb	r3, [r3, #1]
    1c78:	b2db      	uxtb	r3, r3
    1c7a:	b25b      	sxtb	r3, r3
    1c7c:	2b00      	cmp	r3, #0
    1c7e:	dbf9      	blt.n	1c74 <uart_clk_init+0x40>
	
}
    1c80:	46c0      	nop			; (mov r8, r8)
    1c82:	46bd      	mov	sp, r7
    1c84:	bd80      	pop	{r7, pc}
    1c86:	46c0      	nop			; (mov r8, r8)
    1c88:	42001000 	.word	0x42001000
    1c8c:	40000400 	.word	0x40000400
    1c90:	40000c00 	.word	0x40000c00
    1c94:	00004016 	.word	0x00004016

00001c98 <uart_pin_init>:

void uart_pin_init(void)
{
    1c98:	b580      	push	{r7, lr}
    1c9a:	b082      	sub	sp, #8
    1c9c:	af00      	add	r7, sp, #0
	PORT->Group[PORTGROUP_A].DIRCLR.reg = PORT_PA08;	// RX as input
    1c9e:	4b1c      	ldr	r3, [pc, #112]	; (1d10 <uart_pin_init+0x78>)
    1ca0:	2280      	movs	r2, #128	; 0x80
    1ca2:	0052      	lsls	r2, r2, #1
    1ca4:	605a      	str	r2, [r3, #4]
	
	PORT->Group[PORTGROUP_A].DIRSET.reg = PORT_PA10;	// TX as output
    1ca6:	4b1a      	ldr	r3, [pc, #104]	; (1d10 <uart_pin_init+0x78>)
    1ca8:	2280      	movs	r2, #128	; 0x80
    1caa:	00d2      	lsls	r2, r2, #3
    1cac:	609a      	str	r2, [r3, #8]
	PORT->Group[PORTGROUP_A].OUTSET.reg = PORT_PA10;	// TX idle state is high
    1cae:	4b18      	ldr	r3, [pc, #96]	; (1d10 <uart_pin_init+0x78>)
    1cb0:	2280      	movs	r2, #128	; 0x80
    1cb2:	00d2      	lsls	r2, r2, #3
    1cb4:	619a      	str	r2, [r3, #24]

	// set port multiplexer for peripheral TX
	// =======================================
	uint32_t temp = (PORT->Group[PORTGROUP_A].PMUX[TX_PIN>>1].reg) & PORT_PMUX_PMUXO( GPIO_SERCOM_ALT_D );
    1cb6:	4a16      	ldr	r2, [pc, #88]	; (1d10 <uart_pin_init+0x78>)
    1cb8:	2335      	movs	r3, #53	; 0x35
    1cba:	5cd3      	ldrb	r3, [r2, r3]
    1cbc:	b2db      	uxtb	r3, r3
    1cbe:	001a      	movs	r2, r3
    1cc0:	2330      	movs	r3, #48	; 0x30
    1cc2:	4013      	ands	r3, r2
    1cc4:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[TX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( GPIO_SERCOM_ALT_D );
    1cc6:	4a12      	ldr	r2, [pc, #72]	; (1d10 <uart_pin_init+0x78>)
    1cc8:	687b      	ldr	r3, [r7, #4]
    1cca:	b2db      	uxtb	r3, r3
    1ccc:	2103      	movs	r1, #3
    1cce:	430b      	orrs	r3, r1
    1cd0:	b2d9      	uxtb	r1, r3
    1cd2:	2335      	movs	r3, #53	; 0x35
    1cd4:	54d1      	strb	r1, [r2, r3]
	
	PORT->Group[PORTGROUP_A].PINCFG[TX_PIN].reg = PORT_PINCFG_PMUXEN ; // Enable port mux
    1cd6:	4a0e      	ldr	r2, [pc, #56]	; (1d10 <uart_pin_init+0x78>)
    1cd8:	234a      	movs	r3, #74	; 0x4a
    1cda:	2101      	movs	r1, #1
    1cdc:	54d1      	strb	r1, [r2, r3]
	temp = (PORT->Group[PORTGROUP_A].PMUX[RX_PIN>>1].reg) & PORT_PMUX_PMUXO( GPIO_SERCOM_ALT_D );
    1cde:	4a0c      	ldr	r2, [pc, #48]	; (1d10 <uart_pin_init+0x78>)
    1ce0:	2334      	movs	r3, #52	; 0x34
    1ce2:	5cd3      	ldrb	r3, [r2, r3]
    1ce4:	b2db      	uxtb	r3, r3
    1ce6:	001a      	movs	r2, r3
    1ce8:	2330      	movs	r3, #48	; 0x30
    1cea:	4013      	ands	r3, r2
    1cec:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[RX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( GPIO_SERCOM_ALT_D );
    1cee:	4a08      	ldr	r2, [pc, #32]	; (1d10 <uart_pin_init+0x78>)
    1cf0:	687b      	ldr	r3, [r7, #4]
    1cf2:	b2db      	uxtb	r3, r3
    1cf4:	2103      	movs	r1, #3
    1cf6:	430b      	orrs	r3, r1
    1cf8:	b2d9      	uxtb	r1, r3
    1cfa:	2334      	movs	r3, #52	; 0x34
    1cfc:	54d1      	strb	r1, [r2, r3]
	PORT->Group[PORTGROUP_A].PINCFG[RX_PIN].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN; // Enable port mux
    1cfe:	4a04      	ldr	r2, [pc, #16]	; (1d10 <uart_pin_init+0x78>)
    1d00:	2348      	movs	r3, #72	; 0x48
    1d02:	2103      	movs	r1, #3
    1d04:	54d1      	strb	r1, [r2, r3]
}
    1d06:	46c0      	nop			; (mov r8, r8)
    1d08:	46bd      	mov	sp, r7
    1d0a:	b002      	add	sp, #8
    1d0c:	bd80      	pop	{r7, pc}
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	41004400 	.word	0x41004400

00001d14 <ble_uart_init>:

void ble_uart_init(void)
{	
    1d14:	b580      	push	{r7, lr}
    1d16:	af00      	add	r7, sp, #0
	uart_clk_init();
    1d18:	4b18      	ldr	r3, [pc, #96]	; (1d7c <ble_uart_init+0x68>)
    1d1a:	4798      	blx	r3
	uart_pin_init();
    1d1c:	4b18      	ldr	r3, [pc, #96]	; (1d80 <ble_uart_init+0x6c>)
    1d1e:	4798      	blx	r3
	
	
	
	BLE_UART_SERCOM->USART.CTRLA.reg =
    1d20:	4b18      	ldr	r3, [pc, #96]	; (1d84 <ble_uart_init+0x70>)
    1d22:	4a19      	ldr	r2, [pc, #100]	; (1d88 <ble_uart_init+0x74>)
    1d24:	601a      	str	r2, [r3, #0]
	
	
	// Asynchronous arithmetic mode
	// 65535 * ( 1 - sampleRateValue * baudrate / SystemCoreClock);
	// 65535 - 65535 * (sampleRateValue * baudrate / SystemCoreClock));
	BLE_UART_SERCOM->USART.BAUD.reg = 65535.0f * ( 1.0f - (16.0 * (float)(BAUDRATE)) / (float)(SYSTEM_CLK));
    1d26:	4b17      	ldr	r3, [pc, #92]	; (1d84 <ble_uart_init+0x70>)
    1d28:	4a18      	ldr	r2, [pc, #96]	; (1d8c <ble_uart_init+0x78>)
    1d2a:	819a      	strh	r2, [r3, #12]
	//BLE_UART_SERCOM->USART.BAUD.bit.BAUD = 9600;
	
	BLE_UART_SERCOM->USART.CTRLB.reg =
    1d2c:	4b15      	ldr	r3, [pc, #84]	; (1d84 <ble_uart_init+0x70>)
    1d2e:	22c0      	movs	r2, #192	; 0xc0
    1d30:	0292      	lsls	r2, r2, #10
    1d32:	605a      	str	r2, [r3, #4]
	SERCOM_USART_CTRLB_CHSIZE(0)	|	// 8 bit character size
	SERCOM_USART_CTRLB_TXEN			|	// Enable Transmit
	SERCOM_USART_CTRLB_RXEN;			// Enable Receive

	// Get Synced
	while (BLE_UART_SERCOM->USART.SYNCBUSY.bit.CTRLB);
    1d34:	46c0      	nop			; (mov r8, r8)
    1d36:	4b13      	ldr	r3, [pc, #76]	; (1d84 <ble_uart_init+0x70>)
    1d38:	69db      	ldr	r3, [r3, #28]
    1d3a:	075b      	lsls	r3, r3, #29
    1d3c:	0fdb      	lsrs	r3, r3, #31
    1d3e:	b2db      	uxtb	r3, r3
    1d40:	2b00      	cmp	r3, #0
    1d42:	d1f8      	bne.n	1d36 <ble_uart_init+0x22>

	//Set the Interrupt to use
	BLE_UART_SERCOM->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;	// Interrupt on received complete
    1d44:	4b0f      	ldr	r3, [pc, #60]	; (1d84 <ble_uart_init+0x70>)
    1d46:	2204      	movs	r2, #4
    1d48:	759a      	strb	r2, [r3, #22]
	
	// Enable interrupts
	NVIC_EnableIRQ(SERCOM2_IRQn);
    1d4a:	200b      	movs	r0, #11
    1d4c:	4b10      	ldr	r3, [pc, #64]	; (1d90 <ble_uart_init+0x7c>)
    1d4e:	4798      	blx	r3
	NVIC_SetPriority(SERCOM2_IRQn,1);
    1d50:	2101      	movs	r1, #1
    1d52:	200b      	movs	r0, #11
    1d54:	4b0f      	ldr	r3, [pc, #60]	; (1d94 <ble_uart_init+0x80>)
    1d56:	4798      	blx	r3
	
	// enable the peripheral block
	BLE_UART_SERCOM->USART.CTRLA.bit.ENABLE = 0x1u;
    1d58:	4a0a      	ldr	r2, [pc, #40]	; (1d84 <ble_uart_init+0x70>)
    1d5a:	6813      	ldr	r3, [r2, #0]
    1d5c:	2102      	movs	r1, #2
    1d5e:	430b      	orrs	r3, r1
    1d60:	6013      	str	r3, [r2, #0]
	
	// Wait for sercom to enable
	while(BLE_UART_SERCOM->USART.SYNCBUSY.bit.ENABLE);
    1d62:	46c0      	nop			; (mov r8, r8)
    1d64:	4b07      	ldr	r3, [pc, #28]	; (1d84 <ble_uart_init+0x70>)
    1d66:	69db      	ldr	r3, [r3, #28]
    1d68:	079b      	lsls	r3, r3, #30
    1d6a:	0fdb      	lsrs	r3, r3, #31
    1d6c:	b2db      	uxtb	r3, r3
    1d6e:	2b00      	cmp	r3, #0
    1d70:	d1f8      	bne.n	1d64 <ble_uart_init+0x50>
	
	reset_buffers();
    1d72:	4b09      	ldr	r3, [pc, #36]	; (1d98 <ble_uart_init+0x84>)
    1d74:	4798      	blx	r3
}
    1d76:	46c0      	nop			; (mov r8, r8)
    1d78:	46bd      	mov	sp, r7
    1d7a:	bd80      	pop	{r7, pc}
    1d7c:	00001c35 	.word	0x00001c35
    1d80:	00001c99 	.word	0x00001c99
    1d84:	42001000 	.word	0x42001000
    1d88:	40010084 	.word	0x40010084
    1d8c:	fffffb14 	.word	0xfffffb14
    1d90:	00001af5 	.word	0x00001af5
    1d94:	00001b21 	.word	0x00001b21
    1d98:	00001e51 	.word	0x00001e51

00001d9c <ble_uart_write>:

void ble_uart_write(char buffer[])
{
    1d9c:	b580      	push	{r7, lr}
    1d9e:	b084      	sub	sp, #16
    1da0:	af00      	add	r7, sp, #0
    1da2:	6078      	str	r0, [r7, #4]
	system_interrupt_disable_global();
    1da4:	4b10      	ldr	r3, [pc, #64]	; (1de8 <ble_uart_write+0x4c>)
    1da6:	4798      	blx	r3
	uint32_t i = 0;
    1da8:	2300      	movs	r3, #0
    1daa:	60fb      	str	r3, [r7, #12]
	while(buffer[i] != '\0')
    1dac:	e00f      	b.n	1dce <ble_uart_write+0x32>
	{
		if(BLE_UART_SERCOM->USART.INTFLAG.bit.DRE == 1)
    1dae:	4b0f      	ldr	r3, [pc, #60]	; (1dec <ble_uart_write+0x50>)
    1db0:	7e1b      	ldrb	r3, [r3, #24]
    1db2:	07db      	lsls	r3, r3, #31
    1db4:	0fdb      	lsrs	r3, r3, #31
    1db6:	b2db      	uxtb	r3, r3
    1db8:	2b01      	cmp	r3, #1
    1dba:	d108      	bne.n	1dce <ble_uart_write+0x32>
		{
			BLE_UART_SERCOM->USART.DATA.reg = (uint16_t)buffer[i++];
    1dbc:	490b      	ldr	r1, [pc, #44]	; (1dec <ble_uart_write+0x50>)
    1dbe:	68fb      	ldr	r3, [r7, #12]
    1dc0:	1c5a      	adds	r2, r3, #1
    1dc2:	60fa      	str	r2, [r7, #12]
    1dc4:	687a      	ldr	r2, [r7, #4]
    1dc6:	18d3      	adds	r3, r2, r3
    1dc8:	781b      	ldrb	r3, [r3, #0]
    1dca:	b29b      	uxth	r3, r3
    1dcc:	850b      	strh	r3, [r1, #40]	; 0x28

void ble_uart_write(char buffer[])
{
	system_interrupt_disable_global();
	uint32_t i = 0;
	while(buffer[i] != '\0')
    1dce:	687a      	ldr	r2, [r7, #4]
    1dd0:	68fb      	ldr	r3, [r7, #12]
    1dd2:	18d3      	adds	r3, r2, r3
    1dd4:	781b      	ldrb	r3, [r3, #0]
    1dd6:	2b00      	cmp	r3, #0
    1dd8:	d1e9      	bne.n	1dae <ble_uart_write+0x12>
		if(BLE_UART_SERCOM->USART.INTFLAG.bit.DRE == 1)
		{
			BLE_UART_SERCOM->USART.DATA.reg = (uint16_t)buffer[i++];
		}
	}
	system_interrupt_enable_global();
    1dda:	4b05      	ldr	r3, [pc, #20]	; (1df0 <ble_uart_write+0x54>)
    1ddc:	4798      	blx	r3
}
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	46bd      	mov	sp, r7
    1de2:	b004      	add	sp, #16
    1de4:	bd80      	pop	{r7, pc}
    1de6:	46c0      	nop			; (mov r8, r8)
    1de8:	00001c19 	.word	0x00001c19
    1dec:	42001000 	.word	0x42001000
    1df0:	00001bfd 	.word	0x00001bfd

00001df4 <SERCOM2_Handler>:
	BLE_UART_SERCOM->USART.DATA.reg = data;
}


void SERCOM2_Handler()
{
    1df4:	b580      	push	{r7, lr}
    1df6:	af00      	add	r7, sp, #0
	if (BLE_UART_SERCOM->USART.INTFLAG.bit.RXC)
    1df8:	4b12      	ldr	r3, [pc, #72]	; (1e44 <SERCOM2_Handler+0x50>)
    1dfa:	7e1b      	ldrb	r3, [r3, #24]
    1dfc:	075b      	lsls	r3, r3, #29
    1dfe:	0fdb      	lsrs	r3, r3, #31
    1e00:	b2db      	uxtb	r3, r3
    1e02:	2b00      	cmp	r3, #0
    1e04:	d01a      	beq.n	1e3c <SERCOM2_Handler+0x48>
	{
		//while (BLE_UART_SERCOM->USART.INTFLAG.bit.DRE != 0 )
		//{
			// Got a character
			if (buff_count > 127)
    1e06:	4b10      	ldr	r3, [pc, #64]	; (1e48 <SERCOM2_Handler+0x54>)
    1e08:	681b      	ldr	r3, [r3, #0]
    1e0a:	2b7f      	cmp	r3, #127	; 0x7f
    1e0c:	dd0b      	ble.n	1e26 <SERCOM2_Handler+0x32>
			{
				buff_count = 0;
    1e0e:	4b0e      	ldr	r3, [pc, #56]	; (1e48 <SERCOM2_Handler+0x54>)
    1e10:	2200      	movs	r2, #0
    1e12:	601a      	str	r2, [r3, #0]
				rx_buffer_array[buff_count] = (uint8_t) BLE_UART_SERCOM->USART.DATA.reg;
    1e14:	4b0c      	ldr	r3, [pc, #48]	; (1e48 <SERCOM2_Handler+0x54>)
    1e16:	681b      	ldr	r3, [r3, #0]
    1e18:	4a0a      	ldr	r2, [pc, #40]	; (1e44 <SERCOM2_Handler+0x50>)
    1e1a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    1e1c:	b292      	uxth	r2, r2
    1e1e:	b2d1      	uxtb	r1, r2
    1e20:	4a0a      	ldr	r2, [pc, #40]	; (1e4c <SERCOM2_Handler+0x58>)
    1e22:	54d1      	strb	r1, [r2, r3]
				rx_buffer_array[buff_count++] = (uint8_t)BLE_UART_SERCOM->USART.DATA.reg;
			}
		//}

	}
}
    1e24:	e00a      	b.n	1e3c <SERCOM2_Handler+0x48>
				buff_count = 0;
				rx_buffer_array[buff_count] = (uint8_t) BLE_UART_SERCOM->USART.DATA.reg;
			}
			else
			{
				rx_buffer_array[buff_count++] = (uint8_t)BLE_UART_SERCOM->USART.DATA.reg;
    1e26:	4b08      	ldr	r3, [pc, #32]	; (1e48 <SERCOM2_Handler+0x54>)
    1e28:	681b      	ldr	r3, [r3, #0]
    1e2a:	1c59      	adds	r1, r3, #1
    1e2c:	4a06      	ldr	r2, [pc, #24]	; (1e48 <SERCOM2_Handler+0x54>)
    1e2e:	6011      	str	r1, [r2, #0]
    1e30:	4a04      	ldr	r2, [pc, #16]	; (1e44 <SERCOM2_Handler+0x50>)
    1e32:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    1e34:	b292      	uxth	r2, r2
    1e36:	b2d1      	uxtb	r1, r2
    1e38:	4a04      	ldr	r2, [pc, #16]	; (1e4c <SERCOM2_Handler+0x58>)
    1e3a:	54d1      	strb	r1, [r2, r3]
			}
		//}

	}
}
    1e3c:	46c0      	nop			; (mov r8, r8)
    1e3e:	46bd      	mov	sp, r7
    1e40:	bd80      	pop	{r7, pc}
    1e42:	46c0      	nop			; (mov r8, r8)
    1e44:	42001000 	.word	0x42001000
    1e48:	200000dc 	.word	0x200000dc
    1e4c:	20000174 	.word	0x20000174

00001e50 <reset_buffers>:

void reset_buffers()
{
    1e50:	b580      	push	{r7, lr}
    1e52:	b082      	sub	sp, #8
    1e54:	af00      	add	r7, sp, #0
	for (int k=0;k<sizeof(rx_buffer_array);k++)
    1e56:	2300      	movs	r3, #0
    1e58:	607b      	str	r3, [r7, #4]
    1e5a:	e007      	b.n	1e6c <reset_buffers+0x1c>
	{
		rx_buffer_array[k] = 0;
    1e5c:	4a08      	ldr	r2, [pc, #32]	; (1e80 <reset_buffers+0x30>)
    1e5e:	687b      	ldr	r3, [r7, #4]
    1e60:	18d3      	adds	r3, r2, r3
    1e62:	2200      	movs	r2, #0
    1e64:	701a      	strb	r2, [r3, #0]
	}
}

void reset_buffers()
{
	for (int k=0;k<sizeof(rx_buffer_array);k++)
    1e66:	687b      	ldr	r3, [r7, #4]
    1e68:	3301      	adds	r3, #1
    1e6a:	607b      	str	r3, [r7, #4]
    1e6c:	687b      	ldr	r3, [r7, #4]
    1e6e:	2b7f      	cmp	r3, #127	; 0x7f
    1e70:	d9f4      	bls.n	1e5c <reset_buffers+0xc>
	{
		rx_buffer_array[k] = 0;
	}
	buff_count = 0;
    1e72:	4b04      	ldr	r3, [pc, #16]	; (1e84 <reset_buffers+0x34>)
    1e74:	2200      	movs	r2, #0
    1e76:	601a      	str	r2, [r3, #0]
}
    1e78:	46c0      	nop			; (mov r8, r8)
    1e7a:	46bd      	mov	sp, r7
    1e7c:	b002      	add	sp, #8
    1e7e:	bd80      	pop	{r7, pc}
    1e80:	20000174 	.word	0x20000174
    1e84:	200000dc 	.word	0x200000dc

00001e88 <data_handler>:
	.devices[7].ports.portb = 0x00};



void data_handler(char buffer[])
{
    1e88:	b590      	push	{r4, r7, lr}
    1e8a:	b08d      	sub	sp, #52	; 0x34
    1e8c:	af00      	add	r7, sp, #0
    1e8e:	6078      	str	r0, [r7, #4]
	int buf_s = strlen(buffer);
    1e90:	687b      	ldr	r3, [r7, #4]
    1e92:	0018      	movs	r0, r3
    1e94:	4be6      	ldr	r3, [pc, #920]	; (2230 <STACK_SIZE+0x230>)
    1e96:	4798      	blx	r3
    1e98:	0003      	movs	r3, r0
    1e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (strncmp(buffer,test_bob,3) == 0)
    1e9c:	49e5      	ldr	r1, [pc, #916]	; (2234 <STACK_SIZE+0x234>)
    1e9e:	687b      	ldr	r3, [r7, #4]
    1ea0:	2203      	movs	r2, #3
    1ea2:	0018      	movs	r0, r3
    1ea4:	4be4      	ldr	r3, [pc, #912]	; (2238 <STACK_SIZE+0x238>)
    1ea6:	4798      	blx	r3
    1ea8:	1e03      	subs	r3, r0, #0
    1eaa:	d12a      	bne.n	1f02 <data_handler+0x7a>
	{
		ble_uart_write("bob was found");
    1eac:	4be3      	ldr	r3, [pc, #908]	; (223c <STACK_SIZE+0x23c>)
    1eae:	0018      	movs	r0, r3
    1eb0:	4be3      	ldr	r3, [pc, #908]	; (2240 <STACK_SIZE+0x240>)
    1eb2:	4798      	blx	r3
		
		if (strlen(buffer) > strlen(test_bob))
    1eb4:	687b      	ldr	r3, [r7, #4]
    1eb6:	0018      	movs	r0, r3
    1eb8:	4bdd      	ldr	r3, [pc, #884]	; (2230 <STACK_SIZE+0x230>)
    1eba:	4798      	blx	r3
    1ebc:	0004      	movs	r4, r0
    1ebe:	4bdd      	ldr	r3, [pc, #884]	; (2234 <STACK_SIZE+0x234>)
    1ec0:	0018      	movs	r0, r3
    1ec2:	4bdb      	ldr	r3, [pc, #876]	; (2230 <STACK_SIZE+0x230>)
    1ec4:	4798      	blx	r3
    1ec6:	0003      	movs	r3, r0
    1ec8:	429c      	cmp	r4, r3
    1eca:	d91a      	bls.n	1f02 <data_handler+0x7a>
		{
			int arg1;
			sscanf(buffer,"PWM %d",&arg1);
    1ecc:	2328      	movs	r3, #40	; 0x28
    1ece:	18fa      	adds	r2, r7, r3
    1ed0:	49dc      	ldr	r1, [pc, #880]	; (2244 <STACK_SIZE+0x244>)
    1ed2:	687b      	ldr	r3, [r7, #4]
    1ed4:	0018      	movs	r0, r3
    1ed6:	4bdc      	ldr	r3, [pc, #880]	; (2248 <STACK_SIZE+0x248>)
    1ed8:	4798      	blx	r3
			//arg1 = buffer[4]-'0';
			if (arg1 < 1)
    1eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1edc:	2b00      	cmp	r3, #0
    1ede:	dc01      	bgt.n	1ee4 <data_handler+0x5c>
			{
				arg1 = 1;
    1ee0:	2301      	movs	r3, #1
    1ee2:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			pwm_bob = arg1;
    1ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1ee6:	4bd9      	ldr	r3, [pc, #868]	; (224c <STACK_SIZE+0x24c>)
    1ee8:	601a      	str	r2, [r3, #0]
			char string_buffer[32];
			sprintf(string_buffer,": %d",arg1);
    1eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1eec:	49d8      	ldr	r1, [pc, #864]	; (2250 <STACK_SIZE+0x250>)
    1eee:	2308      	movs	r3, #8
    1ef0:	18fb      	adds	r3, r7, r3
    1ef2:	0018      	movs	r0, r3
    1ef4:	4bd7      	ldr	r3, [pc, #860]	; (2254 <STACK_SIZE+0x254>)
    1ef6:	4798      	blx	r3
			ble_uart_write(string_buffer);
    1ef8:	2308      	movs	r3, #8
    1efa:	18fb      	adds	r3, r7, r3
    1efc:	0018      	movs	r0, r3
    1efe:	4bd0      	ldr	r3, [pc, #832]	; (2240 <STACK_SIZE+0x240>)
    1f00:	4798      	blx	r3
		}
	}


	if(strncmp(buffer,FLASH_ALL_ON,4) == 0)
    1f02:	49d5      	ldr	r1, [pc, #852]	; (2258 <STACK_SIZE+0x258>)
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	2204      	movs	r2, #4
    1f08:	0018      	movs	r0, r3
    1f0a:	4bcb      	ldr	r3, [pc, #812]	; (2238 <STACK_SIZE+0x238>)
    1f0c:	4798      	blx	r3
    1f0e:	1e03      	subs	r3, r0, #0
    1f10:	d17b      	bne.n	200a <STACK_SIZE+0xa>
	{
		data_LED[POSITION_FRONT_LEFT_PORT][POSITION_FRONT_LEFT_ADR] |= (1 << POSITION_FRONT_LEFT_PIN);
    1f12:	4bd2      	ldr	r3, [pc, #840]	; (225c <STACK_SIZE+0x25c>)
    1f14:	785b      	ldrb	r3, [r3, #1]
    1f16:	2201      	movs	r2, #1
    1f18:	4313      	orrs	r3, r2
    1f1a:	b2da      	uxtb	r2, r3
    1f1c:	4bcf      	ldr	r3, [pc, #828]	; (225c <STACK_SIZE+0x25c>)
    1f1e:	705a      	strb	r2, [r3, #1]
		data_LED[POSITION_FRONT_RIGHT_PORT][POSITION_FRONT_RIGHT_ADR] |= (1 << POSITION_FRONT_RIGHT_PIN);
    1f20:	4bce      	ldr	r3, [pc, #824]	; (225c <STACK_SIZE+0x25c>)
    1f22:	789b      	ldrb	r3, [r3, #2]
    1f24:	2201      	movs	r2, #1
    1f26:	4313      	orrs	r3, r2
    1f28:	b2da      	uxtb	r2, r3
    1f2a:	4bcc      	ldr	r3, [pc, #816]	; (225c <STACK_SIZE+0x25c>)
    1f2c:	709a      	strb	r2, [r3, #2]
		data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] |= (1 << POSITION_REAR_LEFT_PIN);
    1f2e:	4bcb      	ldr	r3, [pc, #812]	; (225c <STACK_SIZE+0x25c>)
    1f30:	78db      	ldrb	r3, [r3, #3]
    1f32:	2201      	movs	r2, #1
    1f34:	4313      	orrs	r3, r2
    1f36:	b2da      	uxtb	r2, r3
    1f38:	4bc8      	ldr	r3, [pc, #800]	; (225c <STACK_SIZE+0x25c>)
    1f3a:	70da      	strb	r2, [r3, #3]
		data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] |= (1 << POSITION_REAR_RIGHT_PIN);
    1f3c:	4bc7      	ldr	r3, [pc, #796]	; (225c <STACK_SIZE+0x25c>)
    1f3e:	791b      	ldrb	r3, [r3, #4]
    1f40:	2201      	movs	r2, #1
    1f42:	4313      	orrs	r3, r2
    1f44:	b2da      	uxtb	r2, r3
    1f46:	4bc5      	ldr	r3, [pc, #788]	; (225c <STACK_SIZE+0x25c>)
    1f48:	711a      	strb	r2, [r3, #4]
		
		data_LED[LOW_BEAM_RIGHT_PORT][LOW_BEAM_RIGHT_ADR] |= (1 << LOW_BEAM_RIGHT_PIN);
    1f4a:	4bc4      	ldr	r3, [pc, #784]	; (225c <STACK_SIZE+0x25c>)
    1f4c:	789b      	ldrb	r3, [r3, #2]
    1f4e:	2202      	movs	r2, #2
    1f50:	4313      	orrs	r3, r2
    1f52:	b2da      	uxtb	r2, r3
    1f54:	4bc1      	ldr	r3, [pc, #772]	; (225c <STACK_SIZE+0x25c>)
    1f56:	709a      	strb	r2, [r3, #2]
		data_LED[LOW_BEAM_LEFT_PORT][LOW_BEAM_LEFT_ADR] |= (1 << LOW_BEAM_LEFT_PIN);
    1f58:	4bc0      	ldr	r3, [pc, #768]	; (225c <STACK_SIZE+0x25c>)
    1f5a:	785b      	ldrb	r3, [r3, #1]
    1f5c:	2202      	movs	r2, #2
    1f5e:	4313      	orrs	r3, r2
    1f60:	b2da      	uxtb	r2, r3
    1f62:	4bbe      	ldr	r3, [pc, #760]	; (225c <STACK_SIZE+0x25c>)
    1f64:	705a      	strb	r2, [r3, #1]
		
		data_LED[HIGH_BEAM_RIGHT_PORT][HIGH_BEAM_RIGHT_ADR] |= (1 << HIGH_BEAM_RIGHT_PIN);
    1f66:	4bbd      	ldr	r3, [pc, #756]	; (225c <STACK_SIZE+0x25c>)
    1f68:	789b      	ldrb	r3, [r3, #2]
    1f6a:	2204      	movs	r2, #4
    1f6c:	4313      	orrs	r3, r2
    1f6e:	b2da      	uxtb	r2, r3
    1f70:	4bba      	ldr	r3, [pc, #744]	; (225c <STACK_SIZE+0x25c>)
    1f72:	709a      	strb	r2, [r3, #2]
		data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_LEFT_ADR] |= (1 << HIGH_BEAM_LEFT_PIN);
    1f74:	4bb9      	ldr	r3, [pc, #740]	; (225c <STACK_SIZE+0x25c>)
    1f76:	785b      	ldrb	r3, [r3, #1]
    1f78:	2204      	movs	r2, #4
    1f7a:	4313      	orrs	r3, r2
    1f7c:	b2da      	uxtb	r2, r3
    1f7e:	4bb7      	ldr	r3, [pc, #732]	; (225c <STACK_SIZE+0x25c>)
    1f80:	705a      	strb	r2, [r3, #1]
		
		data_LED[BLINK_RIGHT_PORT][BLINK_RIGHT_ADR] |= (1 << BLINK_RIGHT_PIN);
    1f82:	4bb6      	ldr	r3, [pc, #728]	; (225c <STACK_SIZE+0x25c>)
    1f84:	791b      	ldrb	r3, [r3, #4]
    1f86:	2204      	movs	r2, #4
    1f88:	4313      	orrs	r3, r2
    1f8a:	b2da      	uxtb	r2, r3
    1f8c:	4bb3      	ldr	r3, [pc, #716]	; (225c <STACK_SIZE+0x25c>)
    1f8e:	711a      	strb	r2, [r3, #4]
		data_LED[BLINK_LEFT_PORT][BLINK_LEFT_ADR] |= (1 << BLINK_LEFT_PIN);
    1f90:	4bb2      	ldr	r3, [pc, #712]	; (225c <STACK_SIZE+0x25c>)
    1f92:	78db      	ldrb	r3, [r3, #3]
    1f94:	2204      	movs	r2, #4
    1f96:	4313      	orrs	r3, r2
    1f98:	b2da      	uxtb	r2, r3
    1f9a:	4bb0      	ldr	r3, [pc, #704]	; (225c <STACK_SIZE+0x25c>)
    1f9c:	70da      	strb	r2, [r3, #3]
		
		data_LED[REVERSE_LEFT_PORT][REVERSE_LEFT_ADR] |= (1 << REVERSE_LEFT_PIN);
    1f9e:	4baf      	ldr	r3, [pc, #700]	; (225c <STACK_SIZE+0x25c>)
    1fa0:	78db      	ldrb	r3, [r3, #3]
    1fa2:	2202      	movs	r2, #2
    1fa4:	4313      	orrs	r3, r2
    1fa6:	b2da      	uxtb	r2, r3
    1fa8:	4bac      	ldr	r3, [pc, #688]	; (225c <STACK_SIZE+0x25c>)
    1faa:	70da      	strb	r2, [r3, #3]
		data_LED[REVERSE_RIGHT_PORT][REVERSE_RIGHT_ADR] |= (1 << REVERSE_RIGHT_PIN);
    1fac:	4bab      	ldr	r3, [pc, #684]	; (225c <STACK_SIZE+0x25c>)
    1fae:	791b      	ldrb	r3, [r3, #4]
    1fb0:	2202      	movs	r2, #2
    1fb2:	4313      	orrs	r3, r2
    1fb4:	b2da      	uxtb	r2, r3
    1fb6:	4ba9      	ldr	r3, [pc, #676]	; (225c <STACK_SIZE+0x25c>)
    1fb8:	711a      	strb	r2, [r3, #4]
		
		data_LED[FOG_FRONT_RIGHT_PORT][FOG_FRONT_RIGHT_ADR] |= (1 << FOG_FRONT_RIGHT_PIN);
    1fba:	4ba8      	ldr	r3, [pc, #672]	; (225c <STACK_SIZE+0x25c>)
    1fbc:	789b      	ldrb	r3, [r3, #2]
    1fbe:	2208      	movs	r2, #8
    1fc0:	4313      	orrs	r3, r2
    1fc2:	b2da      	uxtb	r2, r3
    1fc4:	4ba5      	ldr	r3, [pc, #660]	; (225c <STACK_SIZE+0x25c>)
    1fc6:	709a      	strb	r2, [r3, #2]
		data_LED[FOG_FRONT_LEFT_PORT][FOG_FRONT_LEFT_ADR] |= (1 << FOG_FRONT_LEFT_PIN);
    1fc8:	4ba4      	ldr	r3, [pc, #656]	; (225c <STACK_SIZE+0x25c>)
    1fca:	785b      	ldrb	r3, [r3, #1]
    1fcc:	2208      	movs	r2, #8
    1fce:	4313      	orrs	r3, r2
    1fd0:	b2da      	uxtb	r2, r3
    1fd2:	4ba2      	ldr	r3, [pc, #648]	; (225c <STACK_SIZE+0x25c>)
    1fd4:	705a      	strb	r2, [r3, #1]
		
		data_LED[SUB_LEFT_PORT][SUB_LEFT_ADR] |= (1 << SUB_LEFT_PIN);
    1fd6:	4ba1      	ldr	r3, [pc, #644]	; (225c <STACK_SIZE+0x25c>)
    1fd8:	78db      	ldrb	r3, [r3, #3]
    1fda:	2208      	movs	r2, #8
    1fdc:	4313      	orrs	r3, r2
    1fde:	b2da      	uxtb	r2, r3
    1fe0:	4b9e      	ldr	r3, [pc, #632]	; (225c <STACK_SIZE+0x25c>)
    1fe2:	70da      	strb	r2, [r3, #3]
		data_LED[SUB_RIGHT_PORT][SUB_RIGHT_ADR] |= (1 << SUB_RIGHT_PIN);
    1fe4:	4b9d      	ldr	r3, [pc, #628]	; (225c <STACK_SIZE+0x25c>)
    1fe6:	78db      	ldrb	r3, [r3, #3]
    1fe8:	2210      	movs	r2, #16
    1fea:	4313      	orrs	r3, r2
    1fec:	b2da      	uxtb	r2, r3
    1fee:	4b9b      	ldr	r3, [pc, #620]	; (225c <STACK_SIZE+0x25c>)
    1ff0:	70da      	strb	r2, [r3, #3]
		
		data_LED[LEDBAR_PORT][LEDBAR_ADR] |= (1 << LEDBAR_PIN);
    1ff2:	4b9a      	ldr	r3, [pc, #616]	; (225c <STACK_SIZE+0x25c>)
    1ff4:	785b      	ldrb	r3, [r3, #1]
    1ff6:	2210      	movs	r2, #16
    1ff8:	4313      	orrs	r3, r2
    1ffa:	b2da      	uxtb	r2, r3
    1ffc:	4b97      	ldr	r3, [pc, #604]	; (225c <STACK_SIZE+0x25c>)
    1ffe:	705a      	strb	r2, [r3, #1]
		
		flash_all = true;
    2000:	4b97      	ldr	r3, [pc, #604]	; (2260 <STACK_SIZE+0x260>)
    2002:	2201      	movs	r2, #1
    2004:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2006:	f000 fc87 	bl	2918 <STACK_SIZE+0x918>
		
		data_LED[LEDBAR_PORT][LEDBAR_ADR] |= (1 << LEDBAR_PIN);
		
		flash_all = true;
	}
	else if(strncmp(buffer,FLASH_ALL_OFF,4) == 0)
    200a:	4996      	ldr	r1, [pc, #600]	; (2264 <STACK_SIZE+0x264>)
    200c:	687b      	ldr	r3, [r7, #4]
    200e:	2204      	movs	r2, #4
    2010:	0018      	movs	r0, r3
    2012:	4b89      	ldr	r3, [pc, #548]	; (2238 <STACK_SIZE+0x238>)
    2014:	4798      	blx	r3
    2016:	1e03      	subs	r3, r0, #0
    2018:	d17b      	bne.n	2112 <STACK_SIZE+0x112>
	{
		data_LED[POSITION_FRONT_LEFT_PORT][POSITION_FRONT_LEFT_ADR] &= ~(1 << POSITION_FRONT_LEFT_PIN);
    201a:	4b90      	ldr	r3, [pc, #576]	; (225c <STACK_SIZE+0x25c>)
    201c:	785b      	ldrb	r3, [r3, #1]
    201e:	2201      	movs	r2, #1
    2020:	4393      	bics	r3, r2
    2022:	b2da      	uxtb	r2, r3
    2024:	4b8d      	ldr	r3, [pc, #564]	; (225c <STACK_SIZE+0x25c>)
    2026:	705a      	strb	r2, [r3, #1]
		data_LED[POSITION_FRONT_RIGHT_PORT][POSITION_FRONT_RIGHT_ADR] &= ~(1 << POSITION_FRONT_RIGHT_PIN);
    2028:	4b8c      	ldr	r3, [pc, #560]	; (225c <STACK_SIZE+0x25c>)
    202a:	789b      	ldrb	r3, [r3, #2]
    202c:	2201      	movs	r2, #1
    202e:	4393      	bics	r3, r2
    2030:	b2da      	uxtb	r2, r3
    2032:	4b8a      	ldr	r3, [pc, #552]	; (225c <STACK_SIZE+0x25c>)
    2034:	709a      	strb	r2, [r3, #2]
		data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] &= ~(1 << POSITION_REAR_LEFT_PIN);
    2036:	4b89      	ldr	r3, [pc, #548]	; (225c <STACK_SIZE+0x25c>)
    2038:	78db      	ldrb	r3, [r3, #3]
    203a:	2201      	movs	r2, #1
    203c:	4393      	bics	r3, r2
    203e:	b2da      	uxtb	r2, r3
    2040:	4b86      	ldr	r3, [pc, #536]	; (225c <STACK_SIZE+0x25c>)
    2042:	70da      	strb	r2, [r3, #3]
		data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] &= ~(1 << POSITION_REAR_RIGHT_PIN);
    2044:	4b85      	ldr	r3, [pc, #532]	; (225c <STACK_SIZE+0x25c>)
    2046:	791b      	ldrb	r3, [r3, #4]
    2048:	2201      	movs	r2, #1
    204a:	4393      	bics	r3, r2
    204c:	b2da      	uxtb	r2, r3
    204e:	4b83      	ldr	r3, [pc, #524]	; (225c <STACK_SIZE+0x25c>)
    2050:	711a      	strb	r2, [r3, #4]
		
		data_LED[LOW_BEAM_RIGHT_PORT][LOW_BEAM_RIGHT_ADR] &= ~(1 << LOW_BEAM_RIGHT_PIN);
    2052:	4b82      	ldr	r3, [pc, #520]	; (225c <STACK_SIZE+0x25c>)
    2054:	789b      	ldrb	r3, [r3, #2]
    2056:	2202      	movs	r2, #2
    2058:	4393      	bics	r3, r2
    205a:	b2da      	uxtb	r2, r3
    205c:	4b7f      	ldr	r3, [pc, #508]	; (225c <STACK_SIZE+0x25c>)
    205e:	709a      	strb	r2, [r3, #2]
		data_LED[LOW_BEAM_LEFT_PORT][LOW_BEAM_LEFT_ADR] &= ~(1 << LOW_BEAM_LEFT_PIN);
    2060:	4b7e      	ldr	r3, [pc, #504]	; (225c <STACK_SIZE+0x25c>)
    2062:	785b      	ldrb	r3, [r3, #1]
    2064:	2202      	movs	r2, #2
    2066:	4393      	bics	r3, r2
    2068:	b2da      	uxtb	r2, r3
    206a:	4b7c      	ldr	r3, [pc, #496]	; (225c <STACK_SIZE+0x25c>)
    206c:	705a      	strb	r2, [r3, #1]
		
		data_LED[HIGH_BEAM_RIGHT_PORT][HIGH_BEAM_RIGHT_ADR] &= ~(1 << HIGH_BEAM_RIGHT_PIN);
    206e:	4b7b      	ldr	r3, [pc, #492]	; (225c <STACK_SIZE+0x25c>)
    2070:	789b      	ldrb	r3, [r3, #2]
    2072:	2204      	movs	r2, #4
    2074:	4393      	bics	r3, r2
    2076:	b2da      	uxtb	r2, r3
    2078:	4b78      	ldr	r3, [pc, #480]	; (225c <STACK_SIZE+0x25c>)
    207a:	709a      	strb	r2, [r3, #2]
		data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_LEFT_ADR] &= ~(1 << HIGH_BEAM_LEFT_PIN);
    207c:	4b77      	ldr	r3, [pc, #476]	; (225c <STACK_SIZE+0x25c>)
    207e:	785b      	ldrb	r3, [r3, #1]
    2080:	2204      	movs	r2, #4
    2082:	4393      	bics	r3, r2
    2084:	b2da      	uxtb	r2, r3
    2086:	4b75      	ldr	r3, [pc, #468]	; (225c <STACK_SIZE+0x25c>)
    2088:	705a      	strb	r2, [r3, #1]
		
		data_LED[BLINK_RIGHT_PORT][BLINK_RIGHT_ADR] &= ~(1 << BLINK_RIGHT_PIN);
    208a:	4b74      	ldr	r3, [pc, #464]	; (225c <STACK_SIZE+0x25c>)
    208c:	791b      	ldrb	r3, [r3, #4]
    208e:	2204      	movs	r2, #4
    2090:	4393      	bics	r3, r2
    2092:	b2da      	uxtb	r2, r3
    2094:	4b71      	ldr	r3, [pc, #452]	; (225c <STACK_SIZE+0x25c>)
    2096:	711a      	strb	r2, [r3, #4]
		data_LED[BLINK_LEFT_PORT][BLINK_LEFT_ADR] &= ~(1 << BLINK_LEFT_PIN);
    2098:	4b70      	ldr	r3, [pc, #448]	; (225c <STACK_SIZE+0x25c>)
    209a:	78db      	ldrb	r3, [r3, #3]
    209c:	2204      	movs	r2, #4
    209e:	4393      	bics	r3, r2
    20a0:	b2da      	uxtb	r2, r3
    20a2:	4b6e      	ldr	r3, [pc, #440]	; (225c <STACK_SIZE+0x25c>)
    20a4:	70da      	strb	r2, [r3, #3]
		
		data_LED[REVERSE_LEFT_PORT][REVERSE_LEFT_ADR] &= ~(1 << REVERSE_LEFT_PIN);
    20a6:	4b6d      	ldr	r3, [pc, #436]	; (225c <STACK_SIZE+0x25c>)
    20a8:	78db      	ldrb	r3, [r3, #3]
    20aa:	2202      	movs	r2, #2
    20ac:	4393      	bics	r3, r2
    20ae:	b2da      	uxtb	r2, r3
    20b0:	4b6a      	ldr	r3, [pc, #424]	; (225c <STACK_SIZE+0x25c>)
    20b2:	70da      	strb	r2, [r3, #3]
		data_LED[REVERSE_RIGHT_PORT][REVERSE_RIGHT_ADR] &= ~(1 << REVERSE_RIGHT_PIN);
    20b4:	4b69      	ldr	r3, [pc, #420]	; (225c <STACK_SIZE+0x25c>)
    20b6:	791b      	ldrb	r3, [r3, #4]
    20b8:	2202      	movs	r2, #2
    20ba:	4393      	bics	r3, r2
    20bc:	b2da      	uxtb	r2, r3
    20be:	4b67      	ldr	r3, [pc, #412]	; (225c <STACK_SIZE+0x25c>)
    20c0:	711a      	strb	r2, [r3, #4]
		
		data_LED[FOG_FRONT_RIGHT_PORT][FOG_FRONT_RIGHT_ADR] &= ~(1 << FOG_FRONT_RIGHT_PIN);
    20c2:	4b66      	ldr	r3, [pc, #408]	; (225c <STACK_SIZE+0x25c>)
    20c4:	789b      	ldrb	r3, [r3, #2]
    20c6:	2208      	movs	r2, #8
    20c8:	4393      	bics	r3, r2
    20ca:	b2da      	uxtb	r2, r3
    20cc:	4b63      	ldr	r3, [pc, #396]	; (225c <STACK_SIZE+0x25c>)
    20ce:	709a      	strb	r2, [r3, #2]
		data_LED[FOG_FRONT_LEFT_PORT][FOG_FRONT_LEFT_ADR] &= ~(1 << FOG_FRONT_LEFT_PIN);
    20d0:	4b62      	ldr	r3, [pc, #392]	; (225c <STACK_SIZE+0x25c>)
    20d2:	785b      	ldrb	r3, [r3, #1]
    20d4:	2208      	movs	r2, #8
    20d6:	4393      	bics	r3, r2
    20d8:	b2da      	uxtb	r2, r3
    20da:	4b60      	ldr	r3, [pc, #384]	; (225c <STACK_SIZE+0x25c>)
    20dc:	705a      	strb	r2, [r3, #1]
		
		data_LED[SUB_LEFT_PORT][SUB_LEFT_ADR] &= ~(1 << SUB_LEFT_PIN);
    20de:	4b5f      	ldr	r3, [pc, #380]	; (225c <STACK_SIZE+0x25c>)
    20e0:	78db      	ldrb	r3, [r3, #3]
    20e2:	2208      	movs	r2, #8
    20e4:	4393      	bics	r3, r2
    20e6:	b2da      	uxtb	r2, r3
    20e8:	4b5c      	ldr	r3, [pc, #368]	; (225c <STACK_SIZE+0x25c>)
    20ea:	70da      	strb	r2, [r3, #3]
		data_LED[SUB_RIGHT_PORT][SUB_RIGHT_ADR] &= ~(1 << SUB_RIGHT_PIN);
    20ec:	4b5b      	ldr	r3, [pc, #364]	; (225c <STACK_SIZE+0x25c>)
    20ee:	78db      	ldrb	r3, [r3, #3]
    20f0:	2210      	movs	r2, #16
    20f2:	4393      	bics	r3, r2
    20f4:	b2da      	uxtb	r2, r3
    20f6:	4b59      	ldr	r3, [pc, #356]	; (225c <STACK_SIZE+0x25c>)
    20f8:	70da      	strb	r2, [r3, #3]
		
		data_LED[LEDBAR_PORT][LEDBAR_ADR] &= ~(1 << LEDBAR_PIN);
    20fa:	4b58      	ldr	r3, [pc, #352]	; (225c <STACK_SIZE+0x25c>)
    20fc:	785b      	ldrb	r3, [r3, #1]
    20fe:	2210      	movs	r2, #16
    2100:	4393      	bics	r3, r2
    2102:	b2da      	uxtb	r2, r3
    2104:	4b55      	ldr	r3, [pc, #340]	; (225c <STACK_SIZE+0x25c>)
    2106:	705a      	strb	r2, [r3, #1]
		
		flash_all = false;
    2108:	4b55      	ldr	r3, [pc, #340]	; (2260 <STACK_SIZE+0x260>)
    210a:	2200      	movs	r2, #0
    210c:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    210e:	f000 fc03 	bl	2918 <STACK_SIZE+0x918>
		
		data_LED[LEDBAR_PORT][LEDBAR_ADR] &= ~(1 << LEDBAR_PIN);
		
		flash_all = false;
	}
	else if(strncmp(buffer,BLINK_ALL_ON,5) == 0)
    2112:	4955      	ldr	r1, [pc, #340]	; (2268 <STACK_SIZE+0x268>)
    2114:	687b      	ldr	r3, [r7, #4]
    2116:	2205      	movs	r2, #5
    2118:	0018      	movs	r0, r3
    211a:	4b47      	ldr	r3, [pc, #284]	; (2238 <STACK_SIZE+0x238>)
    211c:	4798      	blx	r3
    211e:	1e03      	subs	r3, r0, #0
    2120:	d10a      	bne.n	2138 <STACK_SIZE+0x138>
	{
		blink_left = true;
    2122:	4b52      	ldr	r3, [pc, #328]	; (226c <STACK_SIZE+0x26c>)
    2124:	2201      	movs	r2, #1
    2126:	701a      	strb	r2, [r3, #0]
		blink_right = true;
    2128:	4b51      	ldr	r3, [pc, #324]	; (2270 <STACK_SIZE+0x270>)
    212a:	2201      	movs	r2, #1
    212c:	701a      	strb	r2, [r3, #0]
		blink_all = true;
    212e:	4b51      	ldr	r3, [pc, #324]	; (2274 <STACK_SIZE+0x274>)
    2130:	2201      	movs	r2, #1
    2132:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2134:	f000 fbf0 	bl	2918 <STACK_SIZE+0x918>
	{
		blink_left = true;
		blink_right = true;
		blink_all = true;
	}
	else if(strncmp(buffer,BLINK_ALL_OFF,5) == 0)
    2138:	494f      	ldr	r1, [pc, #316]	; (2278 <STACK_SIZE+0x278>)
    213a:	687b      	ldr	r3, [r7, #4]
    213c:	2205      	movs	r2, #5
    213e:	0018      	movs	r0, r3
    2140:	4b3d      	ldr	r3, [pc, #244]	; (2238 <STACK_SIZE+0x238>)
    2142:	4798      	blx	r3
    2144:	1e03      	subs	r3, r0, #0
    2146:	d10a      	bne.n	215e <STACK_SIZE+0x15e>
	{
		blink_left = false;
    2148:	4b48      	ldr	r3, [pc, #288]	; (226c <STACK_SIZE+0x26c>)
    214a:	2200      	movs	r2, #0
    214c:	701a      	strb	r2, [r3, #0]
		blink_right = false;
    214e:	4b48      	ldr	r3, [pc, #288]	; (2270 <STACK_SIZE+0x270>)
    2150:	2200      	movs	r2, #0
    2152:	701a      	strb	r2, [r3, #0]
		blink_all = false;
    2154:	4b47      	ldr	r3, [pc, #284]	; (2274 <STACK_SIZE+0x274>)
    2156:	2200      	movs	r2, #0
    2158:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    215a:	f000 fbdd 	bl	2918 <STACK_SIZE+0x918>
	{
		blink_left = false;
		blink_right = false;
		blink_all = false;
	}
	else if(strncmp(buffer,BLINK_LEFT_ON,5) == 0)
    215e:	4947      	ldr	r1, [pc, #284]	; (227c <STACK_SIZE+0x27c>)
    2160:	687b      	ldr	r3, [r7, #4]
    2162:	2205      	movs	r2, #5
    2164:	0018      	movs	r0, r3
    2166:	4b34      	ldr	r3, [pc, #208]	; (2238 <STACK_SIZE+0x238>)
    2168:	4798      	blx	r3
    216a:	1e03      	subs	r3, r0, #0
    216c:	d104      	bne.n	2178 <STACK_SIZE+0x178>
	{
		blink_left = true;
    216e:	4b3f      	ldr	r3, [pc, #252]	; (226c <STACK_SIZE+0x26c>)
    2170:	2201      	movs	r2, #1
    2172:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2174:	f000 fbd0 	bl	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,BLINK_LEFT_ON,5) == 0)
	{
		blink_left = true;
	}
	else if(strncmp(buffer,BLINK_LEFT_OFF,5) == 0)
    2178:	4941      	ldr	r1, [pc, #260]	; (2280 <STACK_SIZE+0x280>)
    217a:	687b      	ldr	r3, [r7, #4]
    217c:	2205      	movs	r2, #5
    217e:	0018      	movs	r0, r3
    2180:	4b2d      	ldr	r3, [pc, #180]	; (2238 <STACK_SIZE+0x238>)
    2182:	4798      	blx	r3
    2184:	1e03      	subs	r3, r0, #0
    2186:	d104      	bne.n	2192 <STACK_SIZE+0x192>
	{
		blink_left = false;
    2188:	4b38      	ldr	r3, [pc, #224]	; (226c <STACK_SIZE+0x26c>)
    218a:	2200      	movs	r2, #0
    218c:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    218e:	f000 fbc3 	bl	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,BLINK_LEFT_OFF,5) == 0)
	{
		blink_left = false;
	}
	else if(strncmp(buffer,BLINK_RIGHT_ON,5) == 0)
    2192:	493c      	ldr	r1, [pc, #240]	; (2284 <STACK_SIZE+0x284>)
    2194:	687b      	ldr	r3, [r7, #4]
    2196:	2205      	movs	r2, #5
    2198:	0018      	movs	r0, r3
    219a:	4b27      	ldr	r3, [pc, #156]	; (2238 <STACK_SIZE+0x238>)
    219c:	4798      	blx	r3
    219e:	1e03      	subs	r3, r0, #0
    21a0:	d104      	bne.n	21ac <STACK_SIZE+0x1ac>
	{
		blink_right = true;
    21a2:	4b33      	ldr	r3, [pc, #204]	; (2270 <STACK_SIZE+0x270>)
    21a4:	2201      	movs	r2, #1
    21a6:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    21a8:	f000 fbb6 	bl	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,BLINK_RIGHT_ON,5) == 0)
	{
		blink_right = true;
	}
	else if(strncmp(buffer,BLINK_RIGHT_OFF,5) == 0)
    21ac:	4936      	ldr	r1, [pc, #216]	; (2288 <STACK_SIZE+0x288>)
    21ae:	687b      	ldr	r3, [r7, #4]
    21b0:	2205      	movs	r2, #5
    21b2:	0018      	movs	r0, r3
    21b4:	4b20      	ldr	r3, [pc, #128]	; (2238 <STACK_SIZE+0x238>)
    21b6:	4798      	blx	r3
    21b8:	1e03      	subs	r3, r0, #0
    21ba:	d104      	bne.n	21c6 <STACK_SIZE+0x1c6>
	{
		blink_right = false;
    21bc:	4b2c      	ldr	r3, [pc, #176]	; (2270 <STACK_SIZE+0x270>)
    21be:	2200      	movs	r2, #0
    21c0:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    21c2:	f000 fba9 	bl	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,BLINK_RIGHT_OFF,5) == 0)
	{
		blink_right = false;
	}
	else if(strncmp(buffer,HORN_0_ON,6) == 0)
    21c6:	4931      	ldr	r1, [pc, #196]	; (228c <STACK_SIZE+0x28c>)
    21c8:	687b      	ldr	r3, [r7, #4]
    21ca:	2206      	movs	r2, #6
    21cc:	0018      	movs	r0, r3
    21ce:	4b1a      	ldr	r3, [pc, #104]	; (2238 <STACK_SIZE+0x238>)
    21d0:	4798      	blx	r3
    21d2:	1e03      	subs	r3, r0, #0
    21d4:	d104      	bne.n	21e0 <STACK_SIZE+0x1e0>
	{
		horn0 = true;
    21d6:	4b2e      	ldr	r3, [pc, #184]	; (2290 <STACK_SIZE+0x290>)
    21d8:	2201      	movs	r2, #1
    21da:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    21dc:	f000 fb9c 	bl	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,HORN_0_ON,6) == 0)
	{
		horn0 = true;
	}
	else if(strncmp(buffer,HORN_0_OFF,6) == 0)
    21e0:	492c      	ldr	r1, [pc, #176]	; (2294 <STACK_SIZE+0x294>)
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	2206      	movs	r2, #6
    21e6:	0018      	movs	r0, r3
    21e8:	4b13      	ldr	r3, [pc, #76]	; (2238 <STACK_SIZE+0x238>)
    21ea:	4798      	blx	r3
    21ec:	1e03      	subs	r3, r0, #0
    21ee:	d104      	bne.n	21fa <STACK_SIZE+0x1fa>
	{
		horn0 = false;
    21f0:	4b27      	ldr	r3, [pc, #156]	; (2290 <STACK_SIZE+0x290>)
    21f2:	2200      	movs	r2, #0
    21f4:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    21f6:	f000 fb8f 	bl	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,HORN_0_OFF,6) == 0)
	{
		horn0 = false;
	}
	else if(strncmp(buffer,HORN_1_ON,6) == 0)
    21fa:	4927      	ldr	r1, [pc, #156]	; (2298 <STACK_SIZE+0x298>)
    21fc:	687b      	ldr	r3, [r7, #4]
    21fe:	2206      	movs	r2, #6
    2200:	0018      	movs	r0, r3
    2202:	4b0d      	ldr	r3, [pc, #52]	; (2238 <STACK_SIZE+0x238>)
    2204:	4798      	blx	r3
    2206:	1e03      	subs	r3, r0, #0
    2208:	d104      	bne.n	2214 <STACK_SIZE+0x214>
	{
		horn1 = true;
    220a:	4b24      	ldr	r3, [pc, #144]	; (229c <STACK_SIZE+0x29c>)
    220c:	2201      	movs	r2, #1
    220e:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2210:	f000 fb82 	bl	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,HORN_1_ON,6) == 0)
	{
		horn1 = true;
	}
	else if(strncmp(buffer,HORN_1_OFF,6) == 0)
    2214:	4922      	ldr	r1, [pc, #136]	; (22a0 <STACK_SIZE+0x2a0>)
    2216:	687b      	ldr	r3, [r7, #4]
    2218:	2206      	movs	r2, #6
    221a:	0018      	movs	r0, r3
    221c:	4b06      	ldr	r3, [pc, #24]	; (2238 <STACK_SIZE+0x238>)
    221e:	4798      	blx	r3
    2220:	1e03      	subs	r3, r0, #0
    2222:	d13f      	bne.n	22a4 <STACK_SIZE+0x2a4>
	{
		horn1 = false;
    2224:	4b1d      	ldr	r3, [pc, #116]	; (229c <STACK_SIZE+0x29c>)
    2226:	2200      	movs	r2, #0
    2228:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    222a:	f000 fb75 	bl	2918 <STACK_SIZE+0x918>
    222e:	46c0      	nop			; (mov r8, r8)
    2230:	000071c1 	.word	0x000071c1
    2234:	2000000c 	.word	0x2000000c
    2238:	000071cf 	.word	0x000071cf
    223c:	00008494 	.word	0x00008494
    2240:	00001d9d 	.word	0x00001d9d
    2244:	000084a4 	.word	0x000084a4
    2248:	0000716d 	.word	0x0000716d
    224c:	20000218 	.word	0x20000218
    2250:	000084ac 	.word	0x000084ac
    2254:	00007129 	.word	0x00007129
    2258:	000084b4 	.word	0x000084b4
    225c:	2000015c 	.word	0x2000015c
    2260:	2000020e 	.word	0x2000020e
    2264:	000084bc 	.word	0x000084bc
    2268:	000084c4 	.word	0x000084c4
    226c:	2000016d 	.word	0x2000016d
    2270:	2000020d 	.word	0x2000020d
    2274:	2000020a 	.word	0x2000020a
    2278:	000084cc 	.word	0x000084cc
    227c:	000084d4 	.word	0x000084d4
    2280:	000084dc 	.word	0x000084dc
    2284:	000084e4 	.word	0x000084e4
    2288:	000084ec 	.word	0x000084ec
    228c:	000084f4 	.word	0x000084f4
    2290:	2000020f 	.word	0x2000020f
    2294:	000084fc 	.word	0x000084fc
    2298:	00008504 	.word	0x00008504
    229c:	2000016e 	.word	0x2000016e
    22a0:	0000850c 	.word	0x0000850c
	}
	else if(strncmp(buffer,HORN_1_OFF,6) == 0)
	{
		horn1 = false;
	}
	else if(strncmp(buffer,HORN_2_ON,6) == 0)
    22a4:	49ba      	ldr	r1, [pc, #744]	; (2590 <STACK_SIZE+0x590>)
    22a6:	687b      	ldr	r3, [r7, #4]
    22a8:	2206      	movs	r2, #6
    22aa:	0018      	movs	r0, r3
    22ac:	4bb9      	ldr	r3, [pc, #740]	; (2594 <STACK_SIZE+0x594>)
    22ae:	4798      	blx	r3
    22b0:	1e03      	subs	r3, r0, #0
    22b2:	d103      	bne.n	22bc <STACK_SIZE+0x2bc>
	{
		horn2 = true;
    22b4:	4bb8      	ldr	r3, [pc, #736]	; (2598 <STACK_SIZE+0x598>)
    22b6:	2201      	movs	r2, #1
    22b8:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    22ba:	e32d      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,HORN_2_ON,6) == 0)
	{
		horn2 = true;
	}
	else if(strncmp(buffer,HORN_2_OFF,6) == 0)
    22bc:	49b7      	ldr	r1, [pc, #732]	; (259c <STACK_SIZE+0x59c>)
    22be:	687b      	ldr	r3, [r7, #4]
    22c0:	2206      	movs	r2, #6
    22c2:	0018      	movs	r0, r3
    22c4:	4bb3      	ldr	r3, [pc, #716]	; (2594 <STACK_SIZE+0x594>)
    22c6:	4798      	blx	r3
    22c8:	1e03      	subs	r3, r0, #0
    22ca:	d103      	bne.n	22d4 <STACK_SIZE+0x2d4>
	{
		horn2 = false;
    22cc:	4bb2      	ldr	r3, [pc, #712]	; (2598 <STACK_SIZE+0x598>)
    22ce:	2200      	movs	r2, #0
    22d0:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    22d2:	e321      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,HORN_2_OFF,6) == 0)
	{
		horn2 = false;
	}
	else if(strncmp(buffer,HORN_3_ON,6) == 0)
    22d4:	49b2      	ldr	r1, [pc, #712]	; (25a0 <STACK_SIZE+0x5a0>)
    22d6:	687b      	ldr	r3, [r7, #4]
    22d8:	2206      	movs	r2, #6
    22da:	0018      	movs	r0, r3
    22dc:	4bad      	ldr	r3, [pc, #692]	; (2594 <STACK_SIZE+0x594>)
    22de:	4798      	blx	r3
    22e0:	1e03      	subs	r3, r0, #0
    22e2:	d103      	bne.n	22ec <STACK_SIZE+0x2ec>
	{
		horn3 = true;
    22e4:	4baf      	ldr	r3, [pc, #700]	; (25a4 <STACK_SIZE+0x5a4>)
    22e6:	2201      	movs	r2, #1
    22e8:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    22ea:	e315      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,HORN_3_ON,6) == 0)
	{
		horn3 = true;
	}
	else if(strncmp(buffer,HORN_3_OFF,6) == 0)
    22ec:	49ae      	ldr	r1, [pc, #696]	; (25a8 <STACK_SIZE+0x5a8>)
    22ee:	687b      	ldr	r3, [r7, #4]
    22f0:	2206      	movs	r2, #6
    22f2:	0018      	movs	r0, r3
    22f4:	4ba7      	ldr	r3, [pc, #668]	; (2594 <STACK_SIZE+0x594>)
    22f6:	4798      	blx	r3
    22f8:	1e03      	subs	r3, r0, #0
    22fa:	d103      	bne.n	2304 <STACK_SIZE+0x304>
	{
		horn3 = false;
    22fc:	4ba9      	ldr	r3, [pc, #676]	; (25a4 <STACK_SIZE+0x5a4>)
    22fe:	2200      	movs	r2, #0
    2300:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2302:	e309      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,HORN_3_OFF,6) == 0)
	{
		horn3 = false;
	}
	else if(strncmp(buffer,SOUND_0_ON,6) == 0)
    2304:	49a9      	ldr	r1, [pc, #676]	; (25ac <STACK_SIZE+0x5ac>)
    2306:	687b      	ldr	r3, [r7, #4]
    2308:	2206      	movs	r2, #6
    230a:	0018      	movs	r0, r3
    230c:	4ba1      	ldr	r3, [pc, #644]	; (2594 <STACK_SIZE+0x594>)
    230e:	4798      	blx	r3
    2310:	1e03      	subs	r3, r0, #0
    2312:	d103      	bne.n	231c <STACK_SIZE+0x31c>
	{
		press_sb_btn(SB_PIN_BTN00);
    2314:	200b      	movs	r0, #11
    2316:	4ba6      	ldr	r3, [pc, #664]	; (25b0 <STACK_SIZE+0x5b0>)
    2318:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    231a:	e2fd      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_0_ON,6) == 0)
	{
		press_sb_btn(SB_PIN_BTN00);
	}
	else if(strncmp(buffer,SOUND_0_OFF,6) == 0)
    231c:	49a5      	ldr	r1, [pc, #660]	; (25b4 <STACK_SIZE+0x5b4>)
    231e:	687b      	ldr	r3, [r7, #4]
    2320:	2206      	movs	r2, #6
    2322:	0018      	movs	r0, r3
    2324:	4b9b      	ldr	r3, [pc, #620]	; (2594 <STACK_SIZE+0x594>)
    2326:	4798      	blx	r3
    2328:	1e03      	subs	r3, r0, #0
    232a:	d103      	bne.n	2334 <STACK_SIZE+0x334>
	{
		release_sb_btn(SB_PIN_BTN00);
    232c:	200b      	movs	r0, #11
    232e:	4ba2      	ldr	r3, [pc, #648]	; (25b8 <STACK_SIZE+0x5b8>)
    2330:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2332:	e2f1      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_0_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN00);
	}
	else if(strncmp(buffer,SOUND_1_ON,6) == 0)
    2334:	49a1      	ldr	r1, [pc, #644]	; (25bc <STACK_SIZE+0x5bc>)
    2336:	687b      	ldr	r3, [r7, #4]
    2338:	2206      	movs	r2, #6
    233a:	0018      	movs	r0, r3
    233c:	4b95      	ldr	r3, [pc, #596]	; (2594 <STACK_SIZE+0x594>)
    233e:	4798      	blx	r3
    2340:	1e03      	subs	r3, r0, #0
    2342:	d103      	bne.n	234c <STACK_SIZE+0x34c>
	{
		press_sb_btn(SB_PIN_BTN01);
    2344:	200c      	movs	r0, #12
    2346:	4b9a      	ldr	r3, [pc, #616]	; (25b0 <STACK_SIZE+0x5b0>)
    2348:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    234a:	e2e5      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_1_ON,6) == 0)
	{
		press_sb_btn(SB_PIN_BTN01);
	}
	else if(strncmp(buffer,SOUND_1_OFF,6) == 0)
    234c:	499c      	ldr	r1, [pc, #624]	; (25c0 <STACK_SIZE+0x5c0>)
    234e:	687b      	ldr	r3, [r7, #4]
    2350:	2206      	movs	r2, #6
    2352:	0018      	movs	r0, r3
    2354:	4b8f      	ldr	r3, [pc, #572]	; (2594 <STACK_SIZE+0x594>)
    2356:	4798      	blx	r3
    2358:	1e03      	subs	r3, r0, #0
    235a:	d103      	bne.n	2364 <STACK_SIZE+0x364>
	{
		release_sb_btn(SB_PIN_BTN01);
    235c:	200c      	movs	r0, #12
    235e:	4b96      	ldr	r3, [pc, #600]	; (25b8 <STACK_SIZE+0x5b8>)
    2360:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2362:	e2d9      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_1_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN01);
	}
	else if(strncmp(buffer,SOUND_2_ON,6) == 0)
    2364:	4997      	ldr	r1, [pc, #604]	; (25c4 <STACK_SIZE+0x5c4>)
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	2206      	movs	r2, #6
    236a:	0018      	movs	r0, r3
    236c:	4b89      	ldr	r3, [pc, #548]	; (2594 <STACK_SIZE+0x594>)
    236e:	4798      	blx	r3
    2370:	1e03      	subs	r3, r0, #0
    2372:	d103      	bne.n	237c <STACK_SIZE+0x37c>
	{
		press_sb_btn(SB_PIN_BTN02);
    2374:	200d      	movs	r0, #13
    2376:	4b8e      	ldr	r3, [pc, #568]	; (25b0 <STACK_SIZE+0x5b0>)
    2378:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    237a:	e2cd      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_2_ON,6) == 0)
	{
		press_sb_btn(SB_PIN_BTN02);
	}
	else if(strncmp(buffer,SOUND_2_OFF,6) == 0)
    237c:	4992      	ldr	r1, [pc, #584]	; (25c8 <STACK_SIZE+0x5c8>)
    237e:	687b      	ldr	r3, [r7, #4]
    2380:	2206      	movs	r2, #6
    2382:	0018      	movs	r0, r3
    2384:	4b83      	ldr	r3, [pc, #524]	; (2594 <STACK_SIZE+0x594>)
    2386:	4798      	blx	r3
    2388:	1e03      	subs	r3, r0, #0
    238a:	d103      	bne.n	2394 <STACK_SIZE+0x394>
	{
		release_sb_btn(SB_PIN_BTN02);
    238c:	200d      	movs	r0, #13
    238e:	4b8a      	ldr	r3, [pc, #552]	; (25b8 <STACK_SIZE+0x5b8>)
    2390:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2392:	e2c1      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_2_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN02);
	}
	else if(strncmp(buffer,SOUND_3_ON,6) == 0)
    2394:	498d      	ldr	r1, [pc, #564]	; (25cc <STACK_SIZE+0x5cc>)
    2396:	687b      	ldr	r3, [r7, #4]
    2398:	2206      	movs	r2, #6
    239a:	0018      	movs	r0, r3
    239c:	4b7d      	ldr	r3, [pc, #500]	; (2594 <STACK_SIZE+0x594>)
    239e:	4798      	blx	r3
    23a0:	1e03      	subs	r3, r0, #0
    23a2:	d103      	bne.n	23ac <STACK_SIZE+0x3ac>
	{
		press_sb_btn(SB_PIN_BTN03);
    23a4:	200e      	movs	r0, #14
    23a6:	4b82      	ldr	r3, [pc, #520]	; (25b0 <STACK_SIZE+0x5b0>)
    23a8:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    23aa:	e2b5      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_3_ON,6) == 0)
	{
		press_sb_btn(SB_PIN_BTN03);
	}
	else if(strncmp(buffer,SOUND_3_OFF,6) == 0)
    23ac:	4988      	ldr	r1, [pc, #544]	; (25d0 <STACK_SIZE+0x5d0>)
    23ae:	687b      	ldr	r3, [r7, #4]
    23b0:	2206      	movs	r2, #6
    23b2:	0018      	movs	r0, r3
    23b4:	4b77      	ldr	r3, [pc, #476]	; (2594 <STACK_SIZE+0x594>)
    23b6:	4798      	blx	r3
    23b8:	1e03      	subs	r3, r0, #0
    23ba:	d103      	bne.n	23c4 <STACK_SIZE+0x3c4>
	{
		release_sb_btn(SB_PIN_BTN03);
    23bc:	200e      	movs	r0, #14
    23be:	4b7e      	ldr	r3, [pc, #504]	; (25b8 <STACK_SIZE+0x5b8>)
    23c0:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    23c2:	e2a9      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_3_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN03);
	}
	else if(strncmp(buffer,SOUND_4_ON,6) == 0)
    23c4:	4983      	ldr	r1, [pc, #524]	; (25d4 <STACK_SIZE+0x5d4>)
    23c6:	687b      	ldr	r3, [r7, #4]
    23c8:	2206      	movs	r2, #6
    23ca:	0018      	movs	r0, r3
    23cc:	4b71      	ldr	r3, [pc, #452]	; (2594 <STACK_SIZE+0x594>)
    23ce:	4798      	blx	r3
    23d0:	1e03      	subs	r3, r0, #0
    23d2:	d103      	bne.n	23dc <STACK_SIZE+0x3dc>
	{
		press_sb_btn(SB_PIN_BTN04);
    23d4:	200f      	movs	r0, #15
    23d6:	4b76      	ldr	r3, [pc, #472]	; (25b0 <STACK_SIZE+0x5b0>)
    23d8:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    23da:	e29d      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_4_ON,6) == 0)
	{
		press_sb_btn(SB_PIN_BTN04);
	}
	else if(strncmp(buffer,SOUND_4_OFF,6) == 0)
    23dc:	497e      	ldr	r1, [pc, #504]	; (25d8 <STACK_SIZE+0x5d8>)
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	2206      	movs	r2, #6
    23e2:	0018      	movs	r0, r3
    23e4:	4b6b      	ldr	r3, [pc, #428]	; (2594 <STACK_SIZE+0x594>)
    23e6:	4798      	blx	r3
    23e8:	1e03      	subs	r3, r0, #0
    23ea:	d103      	bne.n	23f4 <STACK_SIZE+0x3f4>
	{
		release_sb_btn(SB_PIN_BTN04);
    23ec:	200f      	movs	r0, #15
    23ee:	4b72      	ldr	r3, [pc, #456]	; (25b8 <STACK_SIZE+0x5b8>)
    23f0:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    23f2:	e291      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_4_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN04);
	}
	else if(strncmp(buffer,SOUND_5_ON,6) == 0)
    23f4:	4979      	ldr	r1, [pc, #484]	; (25dc <STACK_SIZE+0x5dc>)
    23f6:	687b      	ldr	r3, [r7, #4]
    23f8:	2206      	movs	r2, #6
    23fa:	0018      	movs	r0, r3
    23fc:	4b65      	ldr	r3, [pc, #404]	; (2594 <STACK_SIZE+0x594>)
    23fe:	4798      	blx	r3
    2400:	1e03      	subs	r3, r0, #0
    2402:	d103      	bne.n	240c <STACK_SIZE+0x40c>
	{
		press_sb_btn(SB_PIN_BTN05);
    2404:	2010      	movs	r0, #16
    2406:	4b6a      	ldr	r3, [pc, #424]	; (25b0 <STACK_SIZE+0x5b0>)
    2408:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    240a:	e285      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_5_ON,6) == 0)
	{
		press_sb_btn(SB_PIN_BTN05);
	}
	else if(strncmp(buffer,SOUND_5_OFF,6) == 0)
    240c:	4974      	ldr	r1, [pc, #464]	; (25e0 <STACK_SIZE+0x5e0>)
    240e:	687b      	ldr	r3, [r7, #4]
    2410:	2206      	movs	r2, #6
    2412:	0018      	movs	r0, r3
    2414:	4b5f      	ldr	r3, [pc, #380]	; (2594 <STACK_SIZE+0x594>)
    2416:	4798      	blx	r3
    2418:	1e03      	subs	r3, r0, #0
    241a:	d103      	bne.n	2424 <STACK_SIZE+0x424>
	{
		release_sb_btn(SB_PIN_BTN05);
    241c:	2010      	movs	r0, #16
    241e:	4b66      	ldr	r3, [pc, #408]	; (25b8 <STACK_SIZE+0x5b8>)
    2420:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2422:	e279      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_5_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN05);
	}
	else if(strncmp(buffer,SOUND_6_ON,6) == 0)
    2424:	496f      	ldr	r1, [pc, #444]	; (25e4 <STACK_SIZE+0x5e4>)
    2426:	687b      	ldr	r3, [r7, #4]
    2428:	2206      	movs	r2, #6
    242a:	0018      	movs	r0, r3
    242c:	4b59      	ldr	r3, [pc, #356]	; (2594 <STACK_SIZE+0x594>)
    242e:	4798      	blx	r3
    2430:	1e03      	subs	r3, r0, #0
    2432:	d103      	bne.n	243c <STACK_SIZE+0x43c>
	{
		press_sb_btn(SB_PIN_BTN06);
    2434:	2011      	movs	r0, #17
    2436:	4b5e      	ldr	r3, [pc, #376]	; (25b0 <STACK_SIZE+0x5b0>)
    2438:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    243a:	e26d      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_6_ON,6) == 0)
	{
		press_sb_btn(SB_PIN_BTN06);
	}
	else if(strncmp(buffer,SOUND_6_OFF,6) == 0)
    243c:	496a      	ldr	r1, [pc, #424]	; (25e8 <STACK_SIZE+0x5e8>)
    243e:	687b      	ldr	r3, [r7, #4]
    2440:	2206      	movs	r2, #6
    2442:	0018      	movs	r0, r3
    2444:	4b53      	ldr	r3, [pc, #332]	; (2594 <STACK_SIZE+0x594>)
    2446:	4798      	blx	r3
    2448:	1e03      	subs	r3, r0, #0
    244a:	d103      	bne.n	2454 <STACK_SIZE+0x454>
	{
		release_sb_btn(SB_PIN_BTN06);
    244c:	2011      	movs	r0, #17
    244e:	4b5a      	ldr	r3, [pc, #360]	; (25b8 <STACK_SIZE+0x5b8>)
    2450:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2452:	e261      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_6_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN06);
	}
	else if(strncmp(buffer,SOUND_7_ON,6) == 0)
    2454:	4965      	ldr	r1, [pc, #404]	; (25ec <STACK_SIZE+0x5ec>)
    2456:	687b      	ldr	r3, [r7, #4]
    2458:	2206      	movs	r2, #6
    245a:	0018      	movs	r0, r3
    245c:	4b4d      	ldr	r3, [pc, #308]	; (2594 <STACK_SIZE+0x594>)
    245e:	4798      	blx	r3
    2460:	1e03      	subs	r3, r0, #0
    2462:	d103      	bne.n	246c <STACK_SIZE+0x46c>
	{
		press_sb_btn(SB_PIN_BTN07);
    2464:	2012      	movs	r0, #18
    2466:	4b52      	ldr	r3, [pc, #328]	; (25b0 <STACK_SIZE+0x5b0>)
    2468:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    246a:	e255      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_7_ON,6) == 0)
	{
		press_sb_btn(SB_PIN_BTN07);
	}
	else if(strncmp(buffer,SOUND_7_OFF,6) == 0)
    246c:	4960      	ldr	r1, [pc, #384]	; (25f0 <STACK_SIZE+0x5f0>)
    246e:	687b      	ldr	r3, [r7, #4]
    2470:	2206      	movs	r2, #6
    2472:	0018      	movs	r0, r3
    2474:	4b47      	ldr	r3, [pc, #284]	; (2594 <STACK_SIZE+0x594>)
    2476:	4798      	blx	r3
    2478:	1e03      	subs	r3, r0, #0
    247a:	d103      	bne.n	2484 <STACK_SIZE+0x484>
	{
		release_sb_btn(SB_PIN_BTN07);
    247c:	2012      	movs	r0, #18
    247e:	4b4e      	ldr	r3, [pc, #312]	; (25b8 <STACK_SIZE+0x5b8>)
    2480:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2482:	e249      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_7_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN07);
	}
	else if(strncmp(buffer,SOUND_8_ON,6) == 0)
    2484:	495b      	ldr	r1, [pc, #364]	; (25f4 <STACK_SIZE+0x5f4>)
    2486:	687b      	ldr	r3, [r7, #4]
    2488:	2206      	movs	r2, #6
    248a:	0018      	movs	r0, r3
    248c:	4b41      	ldr	r3, [pc, #260]	; (2594 <STACK_SIZE+0x594>)
    248e:	4798      	blx	r3
    2490:	1e03      	subs	r3, r0, #0
    2492:	d103      	bne.n	249c <STACK_SIZE+0x49c>
	{
		press_sb_btn(SB_PIN_BTN08);
    2494:	2013      	movs	r0, #19
    2496:	4b46      	ldr	r3, [pc, #280]	; (25b0 <STACK_SIZE+0x5b0>)
    2498:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    249a:	e23d      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_8_ON,6) == 0)
	{
		press_sb_btn(SB_PIN_BTN08);
	}
	else if(strncmp(buffer,SOUND_8_OFF,6) == 0)
    249c:	4956      	ldr	r1, [pc, #344]	; (25f8 <STACK_SIZE+0x5f8>)
    249e:	687b      	ldr	r3, [r7, #4]
    24a0:	2206      	movs	r2, #6
    24a2:	0018      	movs	r0, r3
    24a4:	4b3b      	ldr	r3, [pc, #236]	; (2594 <STACK_SIZE+0x594>)
    24a6:	4798      	blx	r3
    24a8:	1e03      	subs	r3, r0, #0
    24aa:	d103      	bne.n	24b4 <STACK_SIZE+0x4b4>
	{
		release_sb_btn(SB_PIN_BTN08);
    24ac:	2013      	movs	r0, #19
    24ae:	4b42      	ldr	r3, [pc, #264]	; (25b8 <STACK_SIZE+0x5b8>)
    24b0:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    24b2:	e231      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_8_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN08);
	}
	else if(strncmp(buffer,SOUND_9_ON,6) == 0)
    24b4:	4951      	ldr	r1, [pc, #324]	; (25fc <STACK_SIZE+0x5fc>)
    24b6:	687b      	ldr	r3, [r7, #4]
    24b8:	2206      	movs	r2, #6
    24ba:	0018      	movs	r0, r3
    24bc:	4b35      	ldr	r3, [pc, #212]	; (2594 <STACK_SIZE+0x594>)
    24be:	4798      	blx	r3
    24c0:	1e03      	subs	r3, r0, #0
    24c2:	d103      	bne.n	24cc <STACK_SIZE+0x4cc>
	{
		press_sb_btn(SB_PIN_BTN09);
    24c4:	2014      	movs	r0, #20
    24c6:	4b3a      	ldr	r3, [pc, #232]	; (25b0 <STACK_SIZE+0x5b0>)
    24c8:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    24ca:	e225      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_9_ON,6) == 0)
	{
		press_sb_btn(SB_PIN_BTN09);
	}
	else if(strncmp(buffer,SOUND_9_OFF,6) == 0)
    24cc:	494c      	ldr	r1, [pc, #304]	; (2600 <STACK_SIZE+0x600>)
    24ce:	687b      	ldr	r3, [r7, #4]
    24d0:	2206      	movs	r2, #6
    24d2:	0018      	movs	r0, r3
    24d4:	4b2f      	ldr	r3, [pc, #188]	; (2594 <STACK_SIZE+0x594>)
    24d6:	4798      	blx	r3
    24d8:	1e03      	subs	r3, r0, #0
    24da:	d103      	bne.n	24e4 <STACK_SIZE+0x4e4>
	{
		release_sb_btn(SB_PIN_BTN09);
    24dc:	2014      	movs	r0, #20
    24de:	4b36      	ldr	r3, [pc, #216]	; (25b8 <STACK_SIZE+0x5b8>)
    24e0:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    24e2:	e219      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_9_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN09);
	}
	else if(strncmp(buffer,SOUND_10_ON,6) == 0)
    24e4:	4947      	ldr	r1, [pc, #284]	; (2604 <STACK_SIZE+0x604>)
    24e6:	687b      	ldr	r3, [r7, #4]
    24e8:	2206      	movs	r2, #6
    24ea:	0018      	movs	r0, r3
    24ec:	4b29      	ldr	r3, [pc, #164]	; (2594 <STACK_SIZE+0x594>)
    24ee:	4798      	blx	r3
    24f0:	1e03      	subs	r3, r0, #0
    24f2:	d103      	bne.n	24fc <STACK_SIZE+0x4fc>
	{
		press_sb_btn(SB_PIN_BTN10);
    24f4:	2015      	movs	r0, #21
    24f6:	4b2e      	ldr	r3, [pc, #184]	; (25b0 <STACK_SIZE+0x5b0>)
    24f8:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    24fa:	e20d      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_10_ON,6) == 0)
	{
		press_sb_btn(SB_PIN_BTN10);
	}
	else if(strncmp(buffer,SOUND_10_OFF,6) == 0)
    24fc:	4942      	ldr	r1, [pc, #264]	; (2608 <STACK_SIZE+0x608>)
    24fe:	687b      	ldr	r3, [r7, #4]
    2500:	2206      	movs	r2, #6
    2502:	0018      	movs	r0, r3
    2504:	4b23      	ldr	r3, [pc, #140]	; (2594 <STACK_SIZE+0x594>)
    2506:	4798      	blx	r3
    2508:	1e03      	subs	r3, r0, #0
    250a:	d103      	bne.n	2514 <STACK_SIZE+0x514>
	{
		release_sb_btn(SB_PIN_BTN10);
    250c:	2015      	movs	r0, #21
    250e:	4b2a      	ldr	r3, [pc, #168]	; (25b8 <STACK_SIZE+0x5b8>)
    2510:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2512:	e201      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,SOUND_10_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN10);
	}
	else if(strncmp(buffer,PARTY_ON,5) == 0)
    2514:	493d      	ldr	r1, [pc, #244]	; (260c <STACK_SIZE+0x60c>)
    2516:	687b      	ldr	r3, [r7, #4]
    2518:	2205      	movs	r2, #5
    251a:	0018      	movs	r0, r3
    251c:	4b1d      	ldr	r3, [pc, #116]	; (2594 <STACK_SIZE+0x594>)
    251e:	4798      	blx	r3
    2520:	1e03      	subs	r3, r0, #0
    2522:	d103      	bne.n	252c <STACK_SIZE+0x52c>
	{
		party = true;
    2524:	4b3a      	ldr	r3, [pc, #232]	; (2610 <STACK_SIZE+0x610>)
    2526:	2201      	movs	r2, #1
    2528:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    252a:	e1f5      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,PARTY_ON,5) == 0)
	{
		party = true;
	}
	else if(strncmp(buffer,PARTY_OFF,5) == 0)
    252c:	4939      	ldr	r1, [pc, #228]	; (2614 <STACK_SIZE+0x614>)
    252e:	687b      	ldr	r3, [r7, #4]
    2530:	2205      	movs	r2, #5
    2532:	0018      	movs	r0, r3
    2534:	4b17      	ldr	r3, [pc, #92]	; (2594 <STACK_SIZE+0x594>)
    2536:	4798      	blx	r3
    2538:	1e03      	subs	r3, r0, #0
    253a:	d105      	bne.n	2548 <STACK_SIZE+0x548>
	{
		party = false;
    253c:	4b34      	ldr	r3, [pc, #208]	; (2610 <STACK_SIZE+0x610>)
    253e:	2200      	movs	r2, #0
    2540:	701a      	strb	r2, [r3, #0]
		reset_all_lights();
    2542:	4b35      	ldr	r3, [pc, #212]	; (2618 <STACK_SIZE+0x618>)
    2544:	4798      	blx	r3
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2546:	e1e7      	b.n	2918 <STACK_SIZE+0x918>
	else if(strncmp(buffer,PARTY_OFF,5) == 0)
	{
		party = false;
		reset_all_lights();
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
    2548:	4934      	ldr	r1, [pc, #208]	; (261c <STACK_SIZE+0x61c>)
    254a:	687b      	ldr	r3, [r7, #4]
    254c:	2205      	movs	r2, #5
    254e:	0018      	movs	r0, r3
    2550:	4b10      	ldr	r3, [pc, #64]	; (2594 <STACK_SIZE+0x594>)
    2552:	4798      	blx	r3
    2554:	1e03      	subs	r3, r0, #0
    2556:	d103      	bne.n	2560 <STACK_SIZE+0x560>
	{
		water = true;
    2558:	4b31      	ldr	r3, [pc, #196]	; (2620 <STACK_SIZE+0x620>)
    255a:	2201      	movs	r2, #1
    255c:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    255e:	e1db      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
	{
		water = true;
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
    2560:	492e      	ldr	r1, [pc, #184]	; (261c <STACK_SIZE+0x61c>)
    2562:	687b      	ldr	r3, [r7, #4]
    2564:	2205      	movs	r2, #5
    2566:	0018      	movs	r0, r3
    2568:	4b0a      	ldr	r3, [pc, #40]	; (2594 <STACK_SIZE+0x594>)
    256a:	4798      	blx	r3
    256c:	1e03      	subs	r3, r0, #0
    256e:	d103      	bne.n	2578 <STACK_SIZE+0x578>
	{
		water = false;
    2570:	4b2b      	ldr	r3, [pc, #172]	; (2620 <STACK_SIZE+0x620>)
    2572:	2200      	movs	r2, #0
    2574:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2576:	e1cf      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
	{
		water = false;
	}
	else if(strncmp(buffer,START_ON,5) == 0)
    2578:	492a      	ldr	r1, [pc, #168]	; (2624 <STACK_SIZE+0x624>)
    257a:	687b      	ldr	r3, [r7, #4]
    257c:	2205      	movs	r2, #5
    257e:	0018      	movs	r0, r3
    2580:	4b04      	ldr	r3, [pc, #16]	; (2594 <STACK_SIZE+0x594>)
    2582:	4798      	blx	r3
    2584:	1e03      	subs	r3, r0, #0
    2586:	d151      	bne.n	262c <STACK_SIZE+0x62c>
	{
		start = true;
    2588:	4b27      	ldr	r3, [pc, #156]	; (2628 <STACK_SIZE+0x628>)
    258a:	2201      	movs	r2, #1
    258c:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    258e:	e1c3      	b.n	2918 <STACK_SIZE+0x918>
    2590:	00008514 	.word	0x00008514
    2594:	000071cf 	.word	0x000071cf
    2598:	200001f5 	.word	0x200001f5
    259c:	0000851c 	.word	0x0000851c
    25a0:	00008524 	.word	0x00008524
    25a4:	20000215 	.word	0x20000215
    25a8:	0000852c 	.word	0x0000852c
    25ac:	00008534 	.word	0x00008534
    25b0:	00004389 	.word	0x00004389
    25b4:	0000853c 	.word	0x0000853c
    25b8:	000043ad 	.word	0x000043ad
    25bc:	00008544 	.word	0x00008544
    25c0:	0000854c 	.word	0x0000854c
    25c4:	00008554 	.word	0x00008554
    25c8:	0000855c 	.word	0x0000855c
    25cc:	00008564 	.word	0x00008564
    25d0:	0000856c 	.word	0x0000856c
    25d4:	00008574 	.word	0x00008574
    25d8:	0000857c 	.word	0x0000857c
    25dc:	00008584 	.word	0x00008584
    25e0:	0000858c 	.word	0x0000858c
    25e4:	00008594 	.word	0x00008594
    25e8:	0000859c 	.word	0x0000859c
    25ec:	000085a4 	.word	0x000085a4
    25f0:	000085ac 	.word	0x000085ac
    25f4:	000085b4 	.word	0x000085b4
    25f8:	000085bc 	.word	0x000085bc
    25fc:	000085c4 	.word	0x000085c4
    2600:	000085cc 	.word	0x000085cc
    2604:	000085d4 	.word	0x000085d4
    2608:	000085dc 	.word	0x000085dc
    260c:	000085e4 	.word	0x000085e4
    2610:	20000209 	.word	0x20000209
    2614:	000085ec 	.word	0x000085ec
    2618:	0000331d 	.word	0x0000331d
    261c:	000085f4 	.word	0x000085f4
    2620:	20000159 	.word	0x20000159
    2624:	000085fc 	.word	0x000085fc
    2628:	20000214 	.word	0x20000214
	}
	else if(strncmp(buffer,START_ON,5) == 0)
	{
		start = true;
	}
	else if(strncmp(buffer,START_OFF,5) == 0)
    262c:	49bc      	ldr	r1, [pc, #752]	; (2920 <STACK_SIZE+0x920>)
    262e:	687b      	ldr	r3, [r7, #4]
    2630:	2205      	movs	r2, #5
    2632:	0018      	movs	r0, r3
    2634:	4bbb      	ldr	r3, [pc, #748]	; (2924 <STACK_SIZE+0x924>)
    2636:	4798      	blx	r3
    2638:	1e03      	subs	r3, r0, #0
    263a:	d103      	bne.n	2644 <STACK_SIZE+0x644>
	{
		start = false;
    263c:	4bba      	ldr	r3, [pc, #744]	; (2928 <STACK_SIZE+0x928>)
    263e:	2200      	movs	r2, #0
    2640:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2642:	e169      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,START_OFF,5) == 0)
	{
		start = false;
	}
	else if(strncmp(buffer,LED_BAR_ON,5) == 0)
    2644:	49b9      	ldr	r1, [pc, #740]	; (292c <STACK_SIZE+0x92c>)
    2646:	687b      	ldr	r3, [r7, #4]
    2648:	2205      	movs	r2, #5
    264a:	0018      	movs	r0, r3
    264c:	4bb5      	ldr	r3, [pc, #724]	; (2924 <STACK_SIZE+0x924>)
    264e:	4798      	blx	r3
    2650:	1e03      	subs	r3, r0, #0
    2652:	d118      	bne.n	2686 <STACK_SIZE+0x686>
	{
		data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_LEFT_ADR] |= (1 << HIGH_BEAM_LEFT_PIN);
    2654:	4bb6      	ldr	r3, [pc, #728]	; (2930 <STACK_SIZE+0x930>)
    2656:	785b      	ldrb	r3, [r3, #1]
    2658:	2204      	movs	r2, #4
    265a:	4313      	orrs	r3, r2
    265c:	b2da      	uxtb	r2, r3
    265e:	4bb4      	ldr	r3, [pc, #720]	; (2930 <STACK_SIZE+0x930>)
    2660:	705a      	strb	r2, [r3, #1]
		data_LED[HIGH_BEAM_RIGHT_PORT][HIGH_BEAM_RIGHT_ADR] |= (1 << HIGH_BEAM_RIGHT_PIN);
    2662:	4bb3      	ldr	r3, [pc, #716]	; (2930 <STACK_SIZE+0x930>)
    2664:	789b      	ldrb	r3, [r3, #2]
    2666:	2204      	movs	r2, #4
    2668:	4313      	orrs	r3, r2
    266a:	b2da      	uxtb	r2, r3
    266c:	4bb0      	ldr	r3, [pc, #704]	; (2930 <STACK_SIZE+0x930>)
    266e:	709a      	strb	r2, [r3, #2]
		data_LED[LEDBAR_PORT][LEDBAR_ADR] |= (1 << LEDBAR_PIN);
    2670:	4baf      	ldr	r3, [pc, #700]	; (2930 <STACK_SIZE+0x930>)
    2672:	785b      	ldrb	r3, [r3, #1]
    2674:	2210      	movs	r2, #16
    2676:	4313      	orrs	r3, r2
    2678:	b2da      	uxtb	r2, r3
    267a:	4bad      	ldr	r3, [pc, #692]	; (2930 <STACK_SIZE+0x930>)
    267c:	705a      	strb	r2, [r3, #1]
		led_bar = true;
    267e:	4bad      	ldr	r3, [pc, #692]	; (2934 <STACK_SIZE+0x934>)
    2680:	2201      	movs	r2, #1
    2682:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2684:	e148      	b.n	2918 <STACK_SIZE+0x918>
		data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_LEFT_ADR] |= (1 << HIGH_BEAM_LEFT_PIN);
		data_LED[HIGH_BEAM_RIGHT_PORT][HIGH_BEAM_RIGHT_ADR] |= (1 << HIGH_BEAM_RIGHT_PIN);
		data_LED[LEDBAR_PORT][LEDBAR_ADR] |= (1 << LEDBAR_PIN);
		led_bar = true;
	}
	else if(strncmp(buffer,LED_BAR_OFF,5) == 0)
    2686:	49ac      	ldr	r1, [pc, #688]	; (2938 <STACK_SIZE+0x938>)
    2688:	687b      	ldr	r3, [r7, #4]
    268a:	2205      	movs	r2, #5
    268c:	0018      	movs	r0, r3
    268e:	4ba5      	ldr	r3, [pc, #660]	; (2924 <STACK_SIZE+0x924>)
    2690:	4798      	blx	r3
    2692:	1e03      	subs	r3, r0, #0
    2694:	d118      	bne.n	26c8 <STACK_SIZE+0x6c8>
	{
		data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_LEFT_ADR] &= ~(1 << HIGH_BEAM_LEFT_PIN);
    2696:	4ba6      	ldr	r3, [pc, #664]	; (2930 <STACK_SIZE+0x930>)
    2698:	785b      	ldrb	r3, [r3, #1]
    269a:	2204      	movs	r2, #4
    269c:	4393      	bics	r3, r2
    269e:	b2da      	uxtb	r2, r3
    26a0:	4ba3      	ldr	r3, [pc, #652]	; (2930 <STACK_SIZE+0x930>)
    26a2:	705a      	strb	r2, [r3, #1]
		data_LED[HIGH_BEAM_RIGHT_PORT][HIGH_BEAM_RIGHT_ADR] &= ~(1 << HIGH_BEAM_RIGHT_PIN);
    26a4:	4ba2      	ldr	r3, [pc, #648]	; (2930 <STACK_SIZE+0x930>)
    26a6:	789b      	ldrb	r3, [r3, #2]
    26a8:	2204      	movs	r2, #4
    26aa:	4393      	bics	r3, r2
    26ac:	b2da      	uxtb	r2, r3
    26ae:	4ba0      	ldr	r3, [pc, #640]	; (2930 <STACK_SIZE+0x930>)
    26b0:	709a      	strb	r2, [r3, #2]
		data_LED[LEDBAR_PORT][LEDBAR_ADR] &= ~(1 << LEDBAR_PIN);
    26b2:	4b9f      	ldr	r3, [pc, #636]	; (2930 <STACK_SIZE+0x930>)
    26b4:	785b      	ldrb	r3, [r3, #1]
    26b6:	2210      	movs	r2, #16
    26b8:	4393      	bics	r3, r2
    26ba:	b2da      	uxtb	r2, r3
    26bc:	4b9c      	ldr	r3, [pc, #624]	; (2930 <STACK_SIZE+0x930>)
    26be:	705a      	strb	r2, [r3, #1]
		led_bar = false;
    26c0:	4b9c      	ldr	r3, [pc, #624]	; (2934 <STACK_SIZE+0x934>)
    26c2:	2200      	movs	r2, #0
    26c4:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    26c6:	e127      	b.n	2918 <STACK_SIZE+0x918>
		data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_LEFT_ADR] &= ~(1 << HIGH_BEAM_LEFT_PIN);
		data_LED[HIGH_BEAM_RIGHT_PORT][HIGH_BEAM_RIGHT_ADR] &= ~(1 << HIGH_BEAM_RIGHT_PIN);
		data_LED[LEDBAR_PORT][LEDBAR_ADR] &= ~(1 << LEDBAR_PIN);
		led_bar = false;
	}
	else if(strncmp(buffer,HDL_ON,5) == 0)
    26c8:	499c      	ldr	r1, [pc, #624]	; (293c <STACK_SIZE+0x93c>)
    26ca:	687b      	ldr	r3, [r7, #4]
    26cc:	2205      	movs	r2, #5
    26ce:	0018      	movs	r0, r3
    26d0:	4b94      	ldr	r3, [pc, #592]	; (2924 <STACK_SIZE+0x924>)
    26d2:	4798      	blx	r3
    26d4:	1e03      	subs	r3, r0, #0
    26d6:	d12a      	bne.n	272e <STACK_SIZE+0x72e>
	{
		data_LED[LOW_BEAM_RIGHT_PORT][LOW_BEAM_RIGHT_ADR] |= (1 << LOW_BEAM_RIGHT_PIN);
    26d8:	4b95      	ldr	r3, [pc, #596]	; (2930 <STACK_SIZE+0x930>)
    26da:	789b      	ldrb	r3, [r3, #2]
    26dc:	2202      	movs	r2, #2
    26de:	4313      	orrs	r3, r2
    26e0:	b2da      	uxtb	r2, r3
    26e2:	4b93      	ldr	r3, [pc, #588]	; (2930 <STACK_SIZE+0x930>)
    26e4:	709a      	strb	r2, [r3, #2]
		data_LED[LOW_BEAM_LEFT_PORT][LOW_BEAM_LEFT_ADR] |= (1 << LOW_BEAM_LEFT_PIN);
    26e6:	4b92      	ldr	r3, [pc, #584]	; (2930 <STACK_SIZE+0x930>)
    26e8:	785b      	ldrb	r3, [r3, #1]
    26ea:	2202      	movs	r2, #2
    26ec:	4313      	orrs	r3, r2
    26ee:	b2da      	uxtb	r2, r3
    26f0:	4b8f      	ldr	r3, [pc, #572]	; (2930 <STACK_SIZE+0x930>)
    26f2:	705a      	strb	r2, [r3, #1]
		data_LED[POSITION_FRONT_LEFT_PORT][POSITION_FRONT_LEFT_ADR] |= (1 << POSITION_FRONT_LEFT_PIN);
    26f4:	4b8e      	ldr	r3, [pc, #568]	; (2930 <STACK_SIZE+0x930>)
    26f6:	785b      	ldrb	r3, [r3, #1]
    26f8:	2201      	movs	r2, #1
    26fa:	4313      	orrs	r3, r2
    26fc:	b2da      	uxtb	r2, r3
    26fe:	4b8c      	ldr	r3, [pc, #560]	; (2930 <STACK_SIZE+0x930>)
    2700:	705a      	strb	r2, [r3, #1]
		data_LED[POSITION_FRONT_RIGHT_PORT][POSITION_FRONT_RIGHT_ADR] |= (1 << POSITION_FRONT_RIGHT_PIN);
    2702:	4b8b      	ldr	r3, [pc, #556]	; (2930 <STACK_SIZE+0x930>)
    2704:	789b      	ldrb	r3, [r3, #2]
    2706:	2201      	movs	r2, #1
    2708:	4313      	orrs	r3, r2
    270a:	b2da      	uxtb	r2, r3
    270c:	4b88      	ldr	r3, [pc, #544]	; (2930 <STACK_SIZE+0x930>)
    270e:	709a      	strb	r2, [r3, #2]
		data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] |= (1 << POSITION_REAR_LEFT_PIN);
    2710:	4b87      	ldr	r3, [pc, #540]	; (2930 <STACK_SIZE+0x930>)
    2712:	78db      	ldrb	r3, [r3, #3]
    2714:	2201      	movs	r2, #1
    2716:	4313      	orrs	r3, r2
    2718:	b2da      	uxtb	r2, r3
    271a:	4b85      	ldr	r3, [pc, #532]	; (2930 <STACK_SIZE+0x930>)
    271c:	70da      	strb	r2, [r3, #3]
		data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] |= (1 << POSITION_REAR_RIGHT_PIN);
    271e:	4b84      	ldr	r3, [pc, #528]	; (2930 <STACK_SIZE+0x930>)
    2720:	791b      	ldrb	r3, [r3, #4]
    2722:	2201      	movs	r2, #1
    2724:	4313      	orrs	r3, r2
    2726:	b2da      	uxtb	r2, r3
    2728:	4b81      	ldr	r3, [pc, #516]	; (2930 <STACK_SIZE+0x930>)
    272a:	711a      	strb	r2, [r3, #4]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    272c:	e0f4      	b.n	2918 <STACK_SIZE+0x918>
		data_LED[POSITION_FRONT_LEFT_PORT][POSITION_FRONT_LEFT_ADR] |= (1 << POSITION_FRONT_LEFT_PIN);
		data_LED[POSITION_FRONT_RIGHT_PORT][POSITION_FRONT_RIGHT_ADR] |= (1 << POSITION_FRONT_RIGHT_PIN);
		data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] |= (1 << POSITION_REAR_LEFT_PIN);
		data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] |= (1 << POSITION_REAR_RIGHT_PIN);
	}
	else if(strncmp(buffer,HDL_OFF,5) == 0)
    272e:	4984      	ldr	r1, [pc, #528]	; (2940 <STACK_SIZE+0x940>)
    2730:	687b      	ldr	r3, [r7, #4]
    2732:	2205      	movs	r2, #5
    2734:	0018      	movs	r0, r3
    2736:	4b7b      	ldr	r3, [pc, #492]	; (2924 <STACK_SIZE+0x924>)
    2738:	4798      	blx	r3
    273a:	1e03      	subs	r3, r0, #0
    273c:	d12a      	bne.n	2794 <STACK_SIZE+0x794>
	{
		data_LED[LOW_BEAM_RIGHT_PORT][LOW_BEAM_RIGHT_ADR] &= ~(1 << LOW_BEAM_RIGHT_PIN);
    273e:	4b7c      	ldr	r3, [pc, #496]	; (2930 <STACK_SIZE+0x930>)
    2740:	789b      	ldrb	r3, [r3, #2]
    2742:	2202      	movs	r2, #2
    2744:	4393      	bics	r3, r2
    2746:	b2da      	uxtb	r2, r3
    2748:	4b79      	ldr	r3, [pc, #484]	; (2930 <STACK_SIZE+0x930>)
    274a:	709a      	strb	r2, [r3, #2]
		data_LED[LOW_BEAM_LEFT_PORT][LOW_BEAM_LEFT_ADR] &= ~(1 << LOW_BEAM_LEFT_PIN);
    274c:	4b78      	ldr	r3, [pc, #480]	; (2930 <STACK_SIZE+0x930>)
    274e:	785b      	ldrb	r3, [r3, #1]
    2750:	2202      	movs	r2, #2
    2752:	4393      	bics	r3, r2
    2754:	b2da      	uxtb	r2, r3
    2756:	4b76      	ldr	r3, [pc, #472]	; (2930 <STACK_SIZE+0x930>)
    2758:	705a      	strb	r2, [r3, #1]
		data_LED[POSITION_FRONT_LEFT_PORT][POSITION_FRONT_LEFT_ADR] &= ~(1 << POSITION_FRONT_LEFT_PIN);
    275a:	4b75      	ldr	r3, [pc, #468]	; (2930 <STACK_SIZE+0x930>)
    275c:	785b      	ldrb	r3, [r3, #1]
    275e:	2201      	movs	r2, #1
    2760:	4393      	bics	r3, r2
    2762:	b2da      	uxtb	r2, r3
    2764:	4b72      	ldr	r3, [pc, #456]	; (2930 <STACK_SIZE+0x930>)
    2766:	705a      	strb	r2, [r3, #1]
		data_LED[POSITION_FRONT_RIGHT_PORT][POSITION_FRONT_RIGHT_ADR] &= ~(1 << POSITION_FRONT_RIGHT_PIN);
    2768:	4b71      	ldr	r3, [pc, #452]	; (2930 <STACK_SIZE+0x930>)
    276a:	789b      	ldrb	r3, [r3, #2]
    276c:	2201      	movs	r2, #1
    276e:	4393      	bics	r3, r2
    2770:	b2da      	uxtb	r2, r3
    2772:	4b6f      	ldr	r3, [pc, #444]	; (2930 <STACK_SIZE+0x930>)
    2774:	709a      	strb	r2, [r3, #2]
		data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] &= ~(1 << POSITION_REAR_LEFT_PIN);
    2776:	4b6e      	ldr	r3, [pc, #440]	; (2930 <STACK_SIZE+0x930>)
    2778:	78db      	ldrb	r3, [r3, #3]
    277a:	2201      	movs	r2, #1
    277c:	4393      	bics	r3, r2
    277e:	b2da      	uxtb	r2, r3
    2780:	4b6b      	ldr	r3, [pc, #428]	; (2930 <STACK_SIZE+0x930>)
    2782:	70da      	strb	r2, [r3, #3]
		data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] &= ~(1 << POSITION_REAR_RIGHT_PIN);
    2784:	4b6a      	ldr	r3, [pc, #424]	; (2930 <STACK_SIZE+0x930>)
    2786:	791b      	ldrb	r3, [r3, #4]
    2788:	2201      	movs	r2, #1
    278a:	4393      	bics	r3, r2
    278c:	b2da      	uxtb	r2, r3
    278e:	4b68      	ldr	r3, [pc, #416]	; (2930 <STACK_SIZE+0x930>)
    2790:	711a      	strb	r2, [r3, #4]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2792:	e0c1      	b.n	2918 <STACK_SIZE+0x918>
		data_LED[POSITION_FRONT_LEFT_PORT][POSITION_FRONT_LEFT_ADR] &= ~(1 << POSITION_FRONT_LEFT_PIN);
		data_LED[POSITION_FRONT_RIGHT_PORT][POSITION_FRONT_RIGHT_ADR] &= ~(1 << POSITION_FRONT_RIGHT_PIN);
		data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] &= ~(1 << POSITION_REAR_LEFT_PIN);
		data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] &= ~(1 << POSITION_REAR_RIGHT_PIN);
	}
	else if(strncmp(buffer,BRIAN_ON,7) == 0)
    2794:	496b      	ldr	r1, [pc, #428]	; (2944 <STACK_SIZE+0x944>)
    2796:	687b      	ldr	r3, [r7, #4]
    2798:	2207      	movs	r2, #7
    279a:	0018      	movs	r0, r3
    279c:	4b61      	ldr	r3, [pc, #388]	; (2924 <STACK_SIZE+0x924>)
    279e:	4798      	blx	r3
    27a0:	1e03      	subs	r3, r0, #0
    27a2:	d12a      	bne.n	27fa <STACK_SIZE+0x7fa>
	{
		data_LED[FOG_FRONT_RIGHT_PORT][FOG_FRONT_RIGHT_ADR] |= (1 << FOG_FRONT_RIGHT_PIN);
    27a4:	4b62      	ldr	r3, [pc, #392]	; (2930 <STACK_SIZE+0x930>)
    27a6:	789b      	ldrb	r3, [r3, #2]
    27a8:	2208      	movs	r2, #8
    27aa:	4313      	orrs	r3, r2
    27ac:	b2da      	uxtb	r2, r3
    27ae:	4b60      	ldr	r3, [pc, #384]	; (2930 <STACK_SIZE+0x930>)
    27b0:	709a      	strb	r2, [r3, #2]
		data_LED[FOG_FRONT_LEFT_PORT][FOG_FRONT_LEFT_ADR] |= (1 << FOG_FRONT_LEFT_PIN);
    27b2:	4b5f      	ldr	r3, [pc, #380]	; (2930 <STACK_SIZE+0x930>)
    27b4:	785b      	ldrb	r3, [r3, #1]
    27b6:	2208      	movs	r2, #8
    27b8:	4313      	orrs	r3, r2
    27ba:	b2da      	uxtb	r2, r3
    27bc:	4b5c      	ldr	r3, [pc, #368]	; (2930 <STACK_SIZE+0x930>)
    27be:	705a      	strb	r2, [r3, #1]
		data_LED[POSITION_FRONT_LEFT_PORT][POSITION_FRONT_LEFT_ADR] |= (1 << POSITION_FRONT_LEFT_PIN);
    27c0:	4b5b      	ldr	r3, [pc, #364]	; (2930 <STACK_SIZE+0x930>)
    27c2:	785b      	ldrb	r3, [r3, #1]
    27c4:	2201      	movs	r2, #1
    27c6:	4313      	orrs	r3, r2
    27c8:	b2da      	uxtb	r2, r3
    27ca:	4b59      	ldr	r3, [pc, #356]	; (2930 <STACK_SIZE+0x930>)
    27cc:	705a      	strb	r2, [r3, #1]
		data_LED[POSITION_FRONT_RIGHT_PORT][POSITION_FRONT_RIGHT_ADR] |= (1 << POSITION_FRONT_RIGHT_PIN);
    27ce:	4b58      	ldr	r3, [pc, #352]	; (2930 <STACK_SIZE+0x930>)
    27d0:	789b      	ldrb	r3, [r3, #2]
    27d2:	2201      	movs	r2, #1
    27d4:	4313      	orrs	r3, r2
    27d6:	b2da      	uxtb	r2, r3
    27d8:	4b55      	ldr	r3, [pc, #340]	; (2930 <STACK_SIZE+0x930>)
    27da:	709a      	strb	r2, [r3, #2]
		data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] |= (1 << POSITION_REAR_LEFT_PIN);
    27dc:	4b54      	ldr	r3, [pc, #336]	; (2930 <STACK_SIZE+0x930>)
    27de:	78db      	ldrb	r3, [r3, #3]
    27e0:	2201      	movs	r2, #1
    27e2:	4313      	orrs	r3, r2
    27e4:	b2da      	uxtb	r2, r3
    27e6:	4b52      	ldr	r3, [pc, #328]	; (2930 <STACK_SIZE+0x930>)
    27e8:	70da      	strb	r2, [r3, #3]
		data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] |= (1 << POSITION_REAR_RIGHT_PIN);
    27ea:	4b51      	ldr	r3, [pc, #324]	; (2930 <STACK_SIZE+0x930>)
    27ec:	791b      	ldrb	r3, [r3, #4]
    27ee:	2201      	movs	r2, #1
    27f0:	4313      	orrs	r3, r2
    27f2:	b2da      	uxtb	r2, r3
    27f4:	4b4e      	ldr	r3, [pc, #312]	; (2930 <STACK_SIZE+0x930>)
    27f6:	711a      	strb	r2, [r3, #4]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    27f8:	e08e      	b.n	2918 <STACK_SIZE+0x918>
		data_LED[POSITION_FRONT_LEFT_PORT][POSITION_FRONT_LEFT_ADR] |= (1 << POSITION_FRONT_LEFT_PIN);
		data_LED[POSITION_FRONT_RIGHT_PORT][POSITION_FRONT_RIGHT_ADR] |= (1 << POSITION_FRONT_RIGHT_PIN);
		data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] |= (1 << POSITION_REAR_LEFT_PIN);
		data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] |= (1 << POSITION_REAR_RIGHT_PIN);
	}
	else if(strncmp(buffer,BRIAN_OFF,7) == 0)
    27fa:	4953      	ldr	r1, [pc, #332]	; (2948 <STACK_SIZE+0x948>)
    27fc:	687b      	ldr	r3, [r7, #4]
    27fe:	2207      	movs	r2, #7
    2800:	0018      	movs	r0, r3
    2802:	4b48      	ldr	r3, [pc, #288]	; (2924 <STACK_SIZE+0x924>)
    2804:	4798      	blx	r3
    2806:	1e03      	subs	r3, r0, #0
    2808:	d12a      	bne.n	2860 <STACK_SIZE+0x860>
	{
		data_LED[FOG_FRONT_RIGHT_PORT][FOG_FRONT_RIGHT_ADR] &= ~(1 << FOG_FRONT_RIGHT_PIN);
    280a:	4b49      	ldr	r3, [pc, #292]	; (2930 <STACK_SIZE+0x930>)
    280c:	789b      	ldrb	r3, [r3, #2]
    280e:	2208      	movs	r2, #8
    2810:	4393      	bics	r3, r2
    2812:	b2da      	uxtb	r2, r3
    2814:	4b46      	ldr	r3, [pc, #280]	; (2930 <STACK_SIZE+0x930>)
    2816:	709a      	strb	r2, [r3, #2]
		data_LED[FOG_FRONT_LEFT_PORT][FOG_FRONT_LEFT_ADR] &= ~(1 << FOG_FRONT_LEFT_PIN);
    2818:	4b45      	ldr	r3, [pc, #276]	; (2930 <STACK_SIZE+0x930>)
    281a:	785b      	ldrb	r3, [r3, #1]
    281c:	2208      	movs	r2, #8
    281e:	4393      	bics	r3, r2
    2820:	b2da      	uxtb	r2, r3
    2822:	4b43      	ldr	r3, [pc, #268]	; (2930 <STACK_SIZE+0x930>)
    2824:	705a      	strb	r2, [r3, #1]
		data_LED[POSITION_FRONT_LEFT_PORT][POSITION_FRONT_LEFT_ADR] &= ~(1 << POSITION_FRONT_LEFT_PIN);
    2826:	4b42      	ldr	r3, [pc, #264]	; (2930 <STACK_SIZE+0x930>)
    2828:	785b      	ldrb	r3, [r3, #1]
    282a:	2201      	movs	r2, #1
    282c:	4393      	bics	r3, r2
    282e:	b2da      	uxtb	r2, r3
    2830:	4b3f      	ldr	r3, [pc, #252]	; (2930 <STACK_SIZE+0x930>)
    2832:	705a      	strb	r2, [r3, #1]
		data_LED[POSITION_FRONT_RIGHT_PORT][POSITION_FRONT_RIGHT_ADR] &= ~(1 << POSITION_FRONT_RIGHT_PIN);
    2834:	4b3e      	ldr	r3, [pc, #248]	; (2930 <STACK_SIZE+0x930>)
    2836:	789b      	ldrb	r3, [r3, #2]
    2838:	2201      	movs	r2, #1
    283a:	4393      	bics	r3, r2
    283c:	b2da      	uxtb	r2, r3
    283e:	4b3c      	ldr	r3, [pc, #240]	; (2930 <STACK_SIZE+0x930>)
    2840:	709a      	strb	r2, [r3, #2]
		data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] &= ~(1 << POSITION_REAR_LEFT_PIN);
    2842:	4b3b      	ldr	r3, [pc, #236]	; (2930 <STACK_SIZE+0x930>)
    2844:	78db      	ldrb	r3, [r3, #3]
    2846:	2201      	movs	r2, #1
    2848:	4393      	bics	r3, r2
    284a:	b2da      	uxtb	r2, r3
    284c:	4b38      	ldr	r3, [pc, #224]	; (2930 <STACK_SIZE+0x930>)
    284e:	70da      	strb	r2, [r3, #3]
		data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] &= ~(1 << POSITION_REAR_RIGHT_PIN);
    2850:	4b37      	ldr	r3, [pc, #220]	; (2930 <STACK_SIZE+0x930>)
    2852:	791b      	ldrb	r3, [r3, #4]
    2854:	2201      	movs	r2, #1
    2856:	4393      	bics	r3, r2
    2858:	b2da      	uxtb	r2, r3
    285a:	4b35      	ldr	r3, [pc, #212]	; (2930 <STACK_SIZE+0x930>)
    285c:	711a      	strb	r2, [r3, #4]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    285e:	e05b      	b.n	2918 <STACK_SIZE+0x918>
		data_LED[POSITION_FRONT_LEFT_PORT][POSITION_FRONT_LEFT_ADR] &= ~(1 << POSITION_FRONT_LEFT_PIN);
		data_LED[POSITION_FRONT_RIGHT_PORT][POSITION_FRONT_RIGHT_ADR] &= ~(1 << POSITION_FRONT_RIGHT_PIN);
		data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] &= ~(1 << POSITION_REAR_LEFT_PIN);
		data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] &= ~(1 << POSITION_REAR_RIGHT_PIN);
	}
	else if(strncmp(buffer,FLASHY1_ON,7) == 0)
    2860:	493a      	ldr	r1, [pc, #232]	; (294c <STACK_SIZE+0x94c>)
    2862:	687b      	ldr	r3, [r7, #4]
    2864:	2207      	movs	r2, #7
    2866:	0018      	movs	r0, r3
    2868:	4b2e      	ldr	r3, [pc, #184]	; (2924 <STACK_SIZE+0x924>)
    286a:	4798      	blx	r3
    286c:	1e03      	subs	r3, r0, #0
    286e:	d103      	bne.n	2878 <STACK_SIZE+0x878>
	{
		flashy1 = true;
    2870:	4b37      	ldr	r3, [pc, #220]	; (2950 <STACK_SIZE+0x950>)
    2872:	2201      	movs	r2, #1
    2874:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    2876:	e04f      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,FLASHY1_ON,7) == 0)
	{
		flashy1 = true;
	}
	else if(strncmp(buffer,FLASHY1_OFF,7) == 0)
    2878:	4936      	ldr	r1, [pc, #216]	; (2954 <STACK_SIZE+0x954>)
    287a:	687b      	ldr	r3, [r7, #4]
    287c:	2207      	movs	r2, #7
    287e:	0018      	movs	r0, r3
    2880:	4b28      	ldr	r3, [pc, #160]	; (2924 <STACK_SIZE+0x924>)
    2882:	4798      	blx	r3
    2884:	1e03      	subs	r3, r0, #0
    2886:	d103      	bne.n	2890 <STACK_SIZE+0x890>
	{
		flashy1 = false;
    2888:	4b31      	ldr	r3, [pc, #196]	; (2950 <STACK_SIZE+0x950>)
    288a:	2200      	movs	r2, #0
    288c:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    288e:	e043      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,FLASHY1_OFF,7) == 0)
	{
		flashy1 = false;
	}
	else if(strncmp(buffer,FLASHY2_ON,7) == 0)
    2890:	4931      	ldr	r1, [pc, #196]	; (2958 <STACK_SIZE+0x958>)
    2892:	687b      	ldr	r3, [r7, #4]
    2894:	2207      	movs	r2, #7
    2896:	0018      	movs	r0, r3
    2898:	4b22      	ldr	r3, [pc, #136]	; (2924 <STACK_SIZE+0x924>)
    289a:	4798      	blx	r3
    289c:	1e03      	subs	r3, r0, #0
    289e:	d103      	bne.n	28a8 <STACK_SIZE+0x8a8>
	{
		flashy2 = true;
    28a0:	4b2e      	ldr	r3, [pc, #184]	; (295c <STACK_SIZE+0x95c>)
    28a2:	2201      	movs	r2, #1
    28a4:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    28a6:	e037      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,FLASHY2_ON,7) == 0)
	{
		flashy2 = true;
	}
	else if(strncmp(buffer,FLASHY2_OFF,7) == 0)
    28a8:	492d      	ldr	r1, [pc, #180]	; (2960 <STACK_SIZE+0x960>)
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	2207      	movs	r2, #7
    28ae:	0018      	movs	r0, r3
    28b0:	4b1c      	ldr	r3, [pc, #112]	; (2924 <STACK_SIZE+0x924>)
    28b2:	4798      	blx	r3
    28b4:	1e03      	subs	r3, r0, #0
    28b6:	d103      	bne.n	28c0 <STACK_SIZE+0x8c0>
	{
		flashy2 = false;
    28b8:	4b28      	ldr	r3, [pc, #160]	; (295c <STACK_SIZE+0x95c>)
    28ba:	2200      	movs	r2, #0
    28bc:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    28be:	e02b      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,FLASHY2_OFF,7) == 0)
	{
		flashy2 = false;
	}
	else if(strncmp(buffer,FLASHYFADE_ON,8) == 0)
    28c0:	4928      	ldr	r1, [pc, #160]	; (2964 <STACK_SIZE+0x964>)
    28c2:	687b      	ldr	r3, [r7, #4]
    28c4:	2208      	movs	r2, #8
    28c6:	0018      	movs	r0, r3
    28c8:	4b16      	ldr	r3, [pc, #88]	; (2924 <STACK_SIZE+0x924>)
    28ca:	4798      	blx	r3
    28cc:	1e03      	subs	r3, r0, #0
    28ce:	d103      	bne.n	28d8 <STACK_SIZE+0x8d8>
	{
		flashyfade = true;
    28d0:	4b25      	ldr	r3, [pc, #148]	; (2968 <STACK_SIZE+0x968>)
    28d2:	2201      	movs	r2, #1
    28d4:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    28d6:	e01f      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,FLASHYFADE_ON,8) == 0)
	{
		flashyfade = true;
	}
	else if(strncmp(buffer,FLASHYFADE_OFF,8) == 0)
    28d8:	4924      	ldr	r1, [pc, #144]	; (296c <STACK_SIZE+0x96c>)
    28da:	687b      	ldr	r3, [r7, #4]
    28dc:	2208      	movs	r2, #8
    28de:	0018      	movs	r0, r3
    28e0:	4b10      	ldr	r3, [pc, #64]	; (2924 <STACK_SIZE+0x924>)
    28e2:	4798      	blx	r3
    28e4:	1e03      	subs	r3, r0, #0
    28e6:	d103      	bne.n	28f0 <STACK_SIZE+0x8f0>
	{
		flashyfade = false;
    28e8:	4b1f      	ldr	r3, [pc, #124]	; (2968 <STACK_SIZE+0x968>)
    28ea:	2200      	movs	r2, #0
    28ec:	701a      	strb	r2, [r3, #0]
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
	{
		master_test = true;
	}
}
    28ee:	e013      	b.n	2918 <STACK_SIZE+0x918>
	}
	else if(strncmp(buffer,FLASHYFADE_OFF,8) == 0)
	{
		flashyfade = false;
	}
	else if (strncmp(buffer,MASTER_RESET,10) == 0)
    28f0:	491f      	ldr	r1, [pc, #124]	; (2970 <STACK_SIZE+0x970>)
    28f2:	687b      	ldr	r3, [r7, #4]
    28f4:	220a      	movs	r2, #10
    28f6:	0018      	movs	r0, r3
    28f8:	4b0a      	ldr	r3, [pc, #40]	; (2924 <STACK_SIZE+0x924>)
    28fa:	4798      	blx	r3
    28fc:	1e03      	subs	r3, r0, #0
    28fe:	d100      	bne.n	2902 <STACK_SIZE+0x902>
	{
		//wdt_init();
		while (1)
		{
			//
		}
    2900:	e7fe      	b.n	2900 <STACK_SIZE+0x900>
	}
	else if (strncmp(buffer,MASTER_TEST,10) == 0)
    2902:	491c      	ldr	r1, [pc, #112]	; (2974 <STACK_SIZE+0x974>)
    2904:	687b      	ldr	r3, [r7, #4]
    2906:	220a      	movs	r2, #10
    2908:	0018      	movs	r0, r3
    290a:	4b06      	ldr	r3, [pc, #24]	; (2924 <STACK_SIZE+0x924>)
    290c:	4798      	blx	r3
    290e:	1e03      	subs	r3, r0, #0
    2910:	d102      	bne.n	2918 <STACK_SIZE+0x918>
	{
		master_test = true;
    2912:	4b19      	ldr	r3, [pc, #100]	; (2978 <STACK_SIZE+0x978>)
    2914:	2201      	movs	r2, #1
    2916:	701a      	strb	r2, [r3, #0]
	}
}
    2918:	46c0      	nop			; (mov r8, r8)
    291a:	46bd      	mov	sp, r7
    291c:	b00d      	add	sp, #52	; 0x34
    291e:	bd90      	pop	{r4, r7, pc}
    2920:	00008604 	.word	0x00008604
    2924:	000071cf 	.word	0x000071cf
    2928:	20000214 	.word	0x20000214
    292c:	0000860c 	.word	0x0000860c
    2930:	2000015c 	.word	0x2000015c
    2934:	200001f4 	.word	0x200001f4
    2938:	00008614 	.word	0x00008614
    293c:	0000861c 	.word	0x0000861c
    2940:	00008624 	.word	0x00008624
    2944:	0000862c 	.word	0x0000862c
    2948:	00008634 	.word	0x00008634
    294c:	0000863c 	.word	0x0000863c
    2950:	20000171 	.word	0x20000171
    2954:	00008644 	.word	0x00008644
    2958:	0000864c 	.word	0x0000864c
    295c:	200001f7 	.word	0x200001f7
    2960:	00008654 	.word	0x00008654
    2964:	0000865c 	.word	0x0000865c
    2968:	20000212 	.word	0x20000212
    296c:	00008668 	.word	0x00008668
    2970:	00008674 	.word	0x00008674
    2974:	00008680 	.word	0x00008680
    2978:	2000020c 	.word	0x2000020c

0000297c <update_all_ports>:

void update_all_ports()
{
    297c:	b580      	push	{r7, lr}
    297e:	b082      	sub	sp, #8
    2980:	af00      	add	r7, sp, #0
	{
		data[1] = 0x00;
	}*/


	for (int i=0;i<8;i++)
    2982:	2300      	movs	r3, #0
    2984:	607b      	str	r3, [r7, #4]
    2986:	e01e      	b.n	29c6 <update_all_ports+0x4a>
	{
		data_LED[0][i] |= 0x80;
    2988:	4a32      	ldr	r2, [pc, #200]	; (2a54 <update_all_ports+0xd8>)
    298a:	687b      	ldr	r3, [r7, #4]
    298c:	18d3      	adds	r3, r2, r3
    298e:	781b      	ldrb	r3, [r3, #0]
    2990:	2280      	movs	r2, #128	; 0x80
    2992:	4252      	negs	r2, r2
    2994:	4313      	orrs	r3, r2
    2996:	b2d9      	uxtb	r1, r3
    2998:	4a2e      	ldr	r2, [pc, #184]	; (2a54 <update_all_ports+0xd8>)
    299a:	687b      	ldr	r3, [r7, #4]
    299c:	18d3      	adds	r3, r2, r3
    299e:	1c0a      	adds	r2, r1, #0
    29a0:	701a      	strb	r2, [r3, #0]
		data_LED[1][i] |= 0x80;
    29a2:	4a2c      	ldr	r2, [pc, #176]	; (2a54 <update_all_ports+0xd8>)
    29a4:	687b      	ldr	r3, [r7, #4]
    29a6:	18d3      	adds	r3, r2, r3
    29a8:	3308      	adds	r3, #8
    29aa:	781b      	ldrb	r3, [r3, #0]
    29ac:	2280      	movs	r2, #128	; 0x80
    29ae:	4252      	negs	r2, r2
    29b0:	4313      	orrs	r3, r2
    29b2:	b2d9      	uxtb	r1, r3
    29b4:	4a27      	ldr	r2, [pc, #156]	; (2a54 <update_all_ports+0xd8>)
    29b6:	687b      	ldr	r3, [r7, #4]
    29b8:	18d3      	adds	r3, r2, r3
    29ba:	3308      	adds	r3, #8
    29bc:	1c0a      	adds	r2, r1, #0
    29be:	701a      	strb	r2, [r3, #0]
	{
		data[1] = 0x00;
	}*/


	for (int i=0;i<8;i++)
    29c0:	687b      	ldr	r3, [r7, #4]
    29c2:	3301      	adds	r3, #1
    29c4:	607b      	str	r3, [r7, #4]
    29c6:	687b      	ldr	r3, [r7, #4]
    29c8:	2b07      	cmp	r3, #7
    29ca:	dddd      	ble.n	2988 <update_all_ports+0xc>
		data_LED[1][i] |= 0x80;
	}

	
	
	mcp23017_set_pins(MCP23017_I2C_ADDR_000,data_LED[0][0],data_LED[1][0]);
    29cc:	4b21      	ldr	r3, [pc, #132]	; (2a54 <update_all_ports+0xd8>)
    29ce:	7819      	ldrb	r1, [r3, #0]
    29d0:	4b20      	ldr	r3, [pc, #128]	; (2a54 <update_all_ports+0xd8>)
    29d2:	7a1b      	ldrb	r3, [r3, #8]
    29d4:	001a      	movs	r2, r3
    29d6:	2020      	movs	r0, #32
    29d8:	4b1f      	ldr	r3, [pc, #124]	; (2a58 <update_all_ports+0xdc>)
    29da:	4798      	blx	r3
	mcp23017_set_pins(MCP23017_I2C_ADDR_001,data_LED[0][1],data_LED[1][1]);
    29dc:	4b1d      	ldr	r3, [pc, #116]	; (2a54 <update_all_ports+0xd8>)
    29de:	7859      	ldrb	r1, [r3, #1]
    29e0:	4b1c      	ldr	r3, [pc, #112]	; (2a54 <update_all_ports+0xd8>)
    29e2:	7a5b      	ldrb	r3, [r3, #9]
    29e4:	001a      	movs	r2, r3
    29e6:	2021      	movs	r0, #33	; 0x21
    29e8:	4b1b      	ldr	r3, [pc, #108]	; (2a58 <update_all_ports+0xdc>)
    29ea:	4798      	blx	r3
	mcp23017_set_pins(MCP23017_I2C_ADDR_010,data_LED[0][2],data_LED[1][2]);
    29ec:	4b19      	ldr	r3, [pc, #100]	; (2a54 <update_all_ports+0xd8>)
    29ee:	7899      	ldrb	r1, [r3, #2]
    29f0:	4b18      	ldr	r3, [pc, #96]	; (2a54 <update_all_ports+0xd8>)
    29f2:	7a9b      	ldrb	r3, [r3, #10]
    29f4:	001a      	movs	r2, r3
    29f6:	2022      	movs	r0, #34	; 0x22
    29f8:	4b17      	ldr	r3, [pc, #92]	; (2a58 <update_all_ports+0xdc>)
    29fa:	4798      	blx	r3
	mcp23017_set_pins(MCP23017_I2C_ADDR_011,data_LED[0][3],data_LED[1][3]);
    29fc:	4b15      	ldr	r3, [pc, #84]	; (2a54 <update_all_ports+0xd8>)
    29fe:	78d9      	ldrb	r1, [r3, #3]
    2a00:	4b14      	ldr	r3, [pc, #80]	; (2a54 <update_all_ports+0xd8>)
    2a02:	7adb      	ldrb	r3, [r3, #11]
    2a04:	001a      	movs	r2, r3
    2a06:	2023      	movs	r0, #35	; 0x23
    2a08:	4b13      	ldr	r3, [pc, #76]	; (2a58 <update_all_ports+0xdc>)
    2a0a:	4798      	blx	r3
	mcp23017_set_pins(MCP23017_I2C_ADDR_100,data_LED[0][4],data_LED[1][4]);
    2a0c:	4b11      	ldr	r3, [pc, #68]	; (2a54 <update_all_ports+0xd8>)
    2a0e:	7919      	ldrb	r1, [r3, #4]
    2a10:	4b10      	ldr	r3, [pc, #64]	; (2a54 <update_all_ports+0xd8>)
    2a12:	7b1b      	ldrb	r3, [r3, #12]
    2a14:	001a      	movs	r2, r3
    2a16:	2024      	movs	r0, #36	; 0x24
    2a18:	4b0f      	ldr	r3, [pc, #60]	; (2a58 <update_all_ports+0xdc>)
    2a1a:	4798      	blx	r3
	mcp23017_set_pins(MCP23017_I2C_ADDR_101,data_LED[0][5],data_LED[1][5]);
    2a1c:	4b0d      	ldr	r3, [pc, #52]	; (2a54 <update_all_ports+0xd8>)
    2a1e:	7959      	ldrb	r1, [r3, #5]
    2a20:	4b0c      	ldr	r3, [pc, #48]	; (2a54 <update_all_ports+0xd8>)
    2a22:	7b5b      	ldrb	r3, [r3, #13]
    2a24:	001a      	movs	r2, r3
    2a26:	2025      	movs	r0, #37	; 0x25
    2a28:	4b0b      	ldr	r3, [pc, #44]	; (2a58 <update_all_ports+0xdc>)
    2a2a:	4798      	blx	r3
	mcp23017_set_pins(MCP23017_I2C_ADDR_110,data_LED[0][6],data_LED[1][6]);
    2a2c:	4b09      	ldr	r3, [pc, #36]	; (2a54 <update_all_ports+0xd8>)
    2a2e:	7999      	ldrb	r1, [r3, #6]
    2a30:	4b08      	ldr	r3, [pc, #32]	; (2a54 <update_all_ports+0xd8>)
    2a32:	7b9b      	ldrb	r3, [r3, #14]
    2a34:	001a      	movs	r2, r3
    2a36:	2026      	movs	r0, #38	; 0x26
    2a38:	4b07      	ldr	r3, [pc, #28]	; (2a58 <update_all_ports+0xdc>)
    2a3a:	4798      	blx	r3
	mcp23017_set_pins(MCP23017_I2C_ADDR_111,data_LED[0][7],data_LED[1][7]);
    2a3c:	4b05      	ldr	r3, [pc, #20]	; (2a54 <update_all_ports+0xd8>)
    2a3e:	79d9      	ldrb	r1, [r3, #7]
    2a40:	4b04      	ldr	r3, [pc, #16]	; (2a54 <update_all_ports+0xd8>)
    2a42:	7bdb      	ldrb	r3, [r3, #15]
    2a44:	001a      	movs	r2, r3
    2a46:	2027      	movs	r0, #39	; 0x27
    2a48:	4b03      	ldr	r3, [pc, #12]	; (2a58 <update_all_ports+0xdc>)
    2a4a:	4798      	blx	r3
	/*
	for(int i=0;i<8;i++)
	{
		mcp23017_set_pins(MCP23017_I2C_ADDR_000+i,(uint8_t)data[1],(uint8_t)data[1]);
	}*/
}
    2a4c:	46c0      	nop			; (mov r8, r8)
    2a4e:	46bd      	mov	sp, r7
    2a50:	b002      	add	sp, #8
    2a52:	bd80      	pop	{r7, pc}
    2a54:	2000015c 	.word	0x2000015c
    2a58:	000037cd 	.word	0x000037cd

00002a5c <party_lights>:
	}
}


void party_lights(uint16_t party_vals[])
{
    2a5c:	b580      	push	{r7, lr}
    2a5e:	b082      	sub	sp, #8
    2a60:	af00      	add	r7, sp, #0
    2a62:	6078      	str	r0, [r7, #4]
	if (party_vals[0] > party_treshold)
    2a64:	687b      	ldr	r3, [r7, #4]
    2a66:	881b      	ldrh	r3, [r3, #0]
    2a68:	4a81      	ldr	r2, [pc, #516]	; (2c70 <party_lights+0x214>)
    2a6a:	4293      	cmp	r3, r2
    2a6c:	d92a      	bls.n	2ac4 <party_lights+0x68>
	{
		data_LED[SUB_LEFT_PORT][SUB_LEFT_ADR] |= (1 << SUB_LEFT_PIN);
    2a6e:	4b81      	ldr	r3, [pc, #516]	; (2c74 <party_lights+0x218>)
    2a70:	78db      	ldrb	r3, [r3, #3]
    2a72:	2208      	movs	r2, #8
    2a74:	4313      	orrs	r3, r2
    2a76:	b2da      	uxtb	r2, r3
    2a78:	4b7e      	ldr	r3, [pc, #504]	; (2c74 <party_lights+0x218>)
    2a7a:	70da      	strb	r2, [r3, #3]
		data_LED[SUB_RIGHT_PORT][SUB_RIGHT_ADR] |= (1 << SUB_RIGHT_PIN);
    2a7c:	4b7d      	ldr	r3, [pc, #500]	; (2c74 <party_lights+0x218>)
    2a7e:	78db      	ldrb	r3, [r3, #3]
    2a80:	2210      	movs	r2, #16
    2a82:	4313      	orrs	r3, r2
    2a84:	b2da      	uxtb	r2, r3
    2a86:	4b7b      	ldr	r3, [pc, #492]	; (2c74 <party_lights+0x218>)
    2a88:	70da      	strb	r2, [r3, #3]
		data_LED[REVERSE_RIGHT_PORT][REVERSE_RIGHT_ADR] |= (1 << REVERSE_RIGHT_PIN);
    2a8a:	4b7a      	ldr	r3, [pc, #488]	; (2c74 <party_lights+0x218>)
    2a8c:	791b      	ldrb	r3, [r3, #4]
    2a8e:	2202      	movs	r2, #2
    2a90:	4313      	orrs	r3, r2
    2a92:	b2da      	uxtb	r2, r3
    2a94:	4b77      	ldr	r3, [pc, #476]	; (2c74 <party_lights+0x218>)
    2a96:	711a      	strb	r2, [r3, #4]
		data_LED[REVERSE_LEFT_PORT][REVERSE_LEFT_ADR] |= (1 << REVERSE_LEFT_PIN);
    2a98:	4b76      	ldr	r3, [pc, #472]	; (2c74 <party_lights+0x218>)
    2a9a:	78db      	ldrb	r3, [r3, #3]
    2a9c:	2202      	movs	r2, #2
    2a9e:	4313      	orrs	r3, r2
    2aa0:	b2da      	uxtb	r2, r3
    2aa2:	4b74      	ldr	r3, [pc, #464]	; (2c74 <party_lights+0x218>)
    2aa4:	70da      	strb	r2, [r3, #3]
		data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_RIGHT_ADR] |= (1 << HIGH_BEAM_RIGHT_PIN);
    2aa6:	4b73      	ldr	r3, [pc, #460]	; (2c74 <party_lights+0x218>)
    2aa8:	789b      	ldrb	r3, [r3, #2]
    2aaa:	2204      	movs	r2, #4
    2aac:	4313      	orrs	r3, r2
    2aae:	b2da      	uxtb	r2, r3
    2ab0:	4b70      	ldr	r3, [pc, #448]	; (2c74 <party_lights+0x218>)
    2ab2:	709a      	strb	r2, [r3, #2]
		data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_LEFT_ADR] |= (1 << HIGH_BEAM_LEFT_PIN);
    2ab4:	4b6f      	ldr	r3, [pc, #444]	; (2c74 <party_lights+0x218>)
    2ab6:	785b      	ldrb	r3, [r3, #1]
    2ab8:	2204      	movs	r2, #4
    2aba:	4313      	orrs	r3, r2
    2abc:	b2da      	uxtb	r2, r3
    2abe:	4b6d      	ldr	r3, [pc, #436]	; (2c74 <party_lights+0x218>)
    2ac0:	705a      	strb	r2, [r3, #1]
    2ac2:	e029      	b.n	2b18 <party_lights+0xbc>
	}
	else
	{
		data_LED[SUB_LEFT_PORT][SUB_LEFT_ADR] &= ~(1 << SUB_LEFT_PIN);
    2ac4:	4b6b      	ldr	r3, [pc, #428]	; (2c74 <party_lights+0x218>)
    2ac6:	78db      	ldrb	r3, [r3, #3]
    2ac8:	2208      	movs	r2, #8
    2aca:	4393      	bics	r3, r2
    2acc:	b2da      	uxtb	r2, r3
    2ace:	4b69      	ldr	r3, [pc, #420]	; (2c74 <party_lights+0x218>)
    2ad0:	70da      	strb	r2, [r3, #3]
		data_LED[SUB_RIGHT_PORT][SUB_RIGHT_ADR] &= ~(1 << SUB_RIGHT_PIN);
    2ad2:	4b68      	ldr	r3, [pc, #416]	; (2c74 <party_lights+0x218>)
    2ad4:	78db      	ldrb	r3, [r3, #3]
    2ad6:	2210      	movs	r2, #16
    2ad8:	4393      	bics	r3, r2
    2ada:	b2da      	uxtb	r2, r3
    2adc:	4b65      	ldr	r3, [pc, #404]	; (2c74 <party_lights+0x218>)
    2ade:	70da      	strb	r2, [r3, #3]
		data_LED[REVERSE_RIGHT_PORT][REVERSE_RIGHT_ADR] &= ~(1 << REVERSE_RIGHT_PIN);
    2ae0:	4b64      	ldr	r3, [pc, #400]	; (2c74 <party_lights+0x218>)
    2ae2:	791b      	ldrb	r3, [r3, #4]
    2ae4:	2202      	movs	r2, #2
    2ae6:	4393      	bics	r3, r2
    2ae8:	b2da      	uxtb	r2, r3
    2aea:	4b62      	ldr	r3, [pc, #392]	; (2c74 <party_lights+0x218>)
    2aec:	711a      	strb	r2, [r3, #4]
		data_LED[REVERSE_LEFT_PORT][REVERSE_LEFT_ADR] &= ~(1 << REVERSE_LEFT_PIN);
    2aee:	4b61      	ldr	r3, [pc, #388]	; (2c74 <party_lights+0x218>)
    2af0:	78db      	ldrb	r3, [r3, #3]
    2af2:	2202      	movs	r2, #2
    2af4:	4393      	bics	r3, r2
    2af6:	b2da      	uxtb	r2, r3
    2af8:	4b5e      	ldr	r3, [pc, #376]	; (2c74 <party_lights+0x218>)
    2afa:	70da      	strb	r2, [r3, #3]
		data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_RIGHT_ADR] &= ~(1 << HIGH_BEAM_RIGHT_PIN);
    2afc:	4b5d      	ldr	r3, [pc, #372]	; (2c74 <party_lights+0x218>)
    2afe:	789b      	ldrb	r3, [r3, #2]
    2b00:	2204      	movs	r2, #4
    2b02:	4393      	bics	r3, r2
    2b04:	b2da      	uxtb	r2, r3
    2b06:	4b5b      	ldr	r3, [pc, #364]	; (2c74 <party_lights+0x218>)
    2b08:	709a      	strb	r2, [r3, #2]
		data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_LEFT_ADR] &= ~(1 << HIGH_BEAM_LEFT_PIN);
    2b0a:	4b5a      	ldr	r3, [pc, #360]	; (2c74 <party_lights+0x218>)
    2b0c:	785b      	ldrb	r3, [r3, #1]
    2b0e:	2204      	movs	r2, #4
    2b10:	4393      	bics	r3, r2
    2b12:	b2da      	uxtb	r2, r3
    2b14:	4b57      	ldr	r3, [pc, #348]	; (2c74 <party_lights+0x218>)
    2b16:	705a      	strb	r2, [r3, #1]
	}
	if (party_vals[1] > party_treshold)
    2b18:	687b      	ldr	r3, [r7, #4]
    2b1a:	3302      	adds	r3, #2
    2b1c:	881b      	ldrh	r3, [r3, #0]
    2b1e:	4a54      	ldr	r2, [pc, #336]	; (2c70 <party_lights+0x214>)
    2b20:	4293      	cmp	r3, r2
    2b22:	d91c      	bls.n	2b5e <party_lights+0x102>
	{
		data_LED[POSITION_FRONT_RIGHT_PORT][POSITION_FRONT_RIGHT_ADR] |= (1 << POSITION_FRONT_RIGHT_PIN);
    2b24:	4b53      	ldr	r3, [pc, #332]	; (2c74 <party_lights+0x218>)
    2b26:	789b      	ldrb	r3, [r3, #2]
    2b28:	2201      	movs	r2, #1
    2b2a:	4313      	orrs	r3, r2
    2b2c:	b2da      	uxtb	r2, r3
    2b2e:	4b51      	ldr	r3, [pc, #324]	; (2c74 <party_lights+0x218>)
    2b30:	709a      	strb	r2, [r3, #2]
		data_LED[POSITION_FRONT_LEFT_PORT][POSITION_FRONT_LEFT_ADR] |= (1 << POSITION_FRONT_LEFT_PIN);
    2b32:	4b50      	ldr	r3, [pc, #320]	; (2c74 <party_lights+0x218>)
    2b34:	785b      	ldrb	r3, [r3, #1]
    2b36:	2201      	movs	r2, #1
    2b38:	4313      	orrs	r3, r2
    2b3a:	b2da      	uxtb	r2, r3
    2b3c:	4b4d      	ldr	r3, [pc, #308]	; (2c74 <party_lights+0x218>)
    2b3e:	705a      	strb	r2, [r3, #1]
		data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] |= (1 << POSITION_REAR_RIGHT_PIN);
    2b40:	4b4c      	ldr	r3, [pc, #304]	; (2c74 <party_lights+0x218>)
    2b42:	791b      	ldrb	r3, [r3, #4]
    2b44:	2201      	movs	r2, #1
    2b46:	4313      	orrs	r3, r2
    2b48:	b2da      	uxtb	r2, r3
    2b4a:	4b4a      	ldr	r3, [pc, #296]	; (2c74 <party_lights+0x218>)
    2b4c:	711a      	strb	r2, [r3, #4]
		data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] |= (1 << POSITION_REAR_LEFT_PIN);
    2b4e:	4b49      	ldr	r3, [pc, #292]	; (2c74 <party_lights+0x218>)
    2b50:	78db      	ldrb	r3, [r3, #3]
    2b52:	2201      	movs	r2, #1
    2b54:	4313      	orrs	r3, r2
    2b56:	b2da      	uxtb	r2, r3
    2b58:	4b46      	ldr	r3, [pc, #280]	; (2c74 <party_lights+0x218>)
    2b5a:	70da      	strb	r2, [r3, #3]
    2b5c:	e01b      	b.n	2b96 <party_lights+0x13a>
	}
	else
	{
		data_LED[POSITION_FRONT_RIGHT_PORT][POSITION_FRONT_RIGHT_ADR] &= ~(1 << POSITION_FRONT_RIGHT_PIN);
    2b5e:	4b45      	ldr	r3, [pc, #276]	; (2c74 <party_lights+0x218>)
    2b60:	789b      	ldrb	r3, [r3, #2]
    2b62:	2201      	movs	r2, #1
    2b64:	4393      	bics	r3, r2
    2b66:	b2da      	uxtb	r2, r3
    2b68:	4b42      	ldr	r3, [pc, #264]	; (2c74 <party_lights+0x218>)
    2b6a:	709a      	strb	r2, [r3, #2]
		data_LED[POSITION_FRONT_LEFT_PORT][POSITION_FRONT_LEFT_ADR] &= ~(1 << POSITION_FRONT_LEFT_PIN);
    2b6c:	4b41      	ldr	r3, [pc, #260]	; (2c74 <party_lights+0x218>)
    2b6e:	785b      	ldrb	r3, [r3, #1]
    2b70:	2201      	movs	r2, #1
    2b72:	4393      	bics	r3, r2
    2b74:	b2da      	uxtb	r2, r3
    2b76:	4b3f      	ldr	r3, [pc, #252]	; (2c74 <party_lights+0x218>)
    2b78:	705a      	strb	r2, [r3, #1]
		data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] &= ~(1 << POSITION_REAR_RIGHT_PIN);
    2b7a:	4b3e      	ldr	r3, [pc, #248]	; (2c74 <party_lights+0x218>)
    2b7c:	791b      	ldrb	r3, [r3, #4]
    2b7e:	2201      	movs	r2, #1
    2b80:	4393      	bics	r3, r2
    2b82:	b2da      	uxtb	r2, r3
    2b84:	4b3b      	ldr	r3, [pc, #236]	; (2c74 <party_lights+0x218>)
    2b86:	711a      	strb	r2, [r3, #4]
		data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] &= ~(1 << POSITION_REAR_LEFT_PIN);
    2b88:	4b3a      	ldr	r3, [pc, #232]	; (2c74 <party_lights+0x218>)
    2b8a:	78db      	ldrb	r3, [r3, #3]
    2b8c:	2201      	movs	r2, #1
    2b8e:	4393      	bics	r3, r2
    2b90:	b2da      	uxtb	r2, r3
    2b92:	4b38      	ldr	r3, [pc, #224]	; (2c74 <party_lights+0x218>)
    2b94:	70da      	strb	r2, [r3, #3]
	}
	if (party_vals[2] > party_treshold)
    2b96:	687b      	ldr	r3, [r7, #4]
    2b98:	3304      	adds	r3, #4
    2b9a:	881b      	ldrh	r3, [r3, #0]
    2b9c:	4a34      	ldr	r2, [pc, #208]	; (2c70 <party_lights+0x214>)
    2b9e:	4293      	cmp	r3, r2
    2ba0:	d90e      	bls.n	2bc0 <party_lights+0x164>
	{
		data_LED[LOW_BEAM_LEFT_PORT][LOW_BEAM_RIGHT_ADR] |= (1 << LOW_BEAM_RIGHT_PIN);
    2ba2:	4b34      	ldr	r3, [pc, #208]	; (2c74 <party_lights+0x218>)
    2ba4:	789b      	ldrb	r3, [r3, #2]
    2ba6:	2202      	movs	r2, #2
    2ba8:	4313      	orrs	r3, r2
    2baa:	b2da      	uxtb	r2, r3
    2bac:	4b31      	ldr	r3, [pc, #196]	; (2c74 <party_lights+0x218>)
    2bae:	709a      	strb	r2, [r3, #2]
		data_LED[LOW_BEAM_LEFT_PORT][LOW_BEAM_LEFT_ADR] |= (1 << LOW_BEAM_LEFT_PIN);
    2bb0:	4b30      	ldr	r3, [pc, #192]	; (2c74 <party_lights+0x218>)
    2bb2:	785b      	ldrb	r3, [r3, #1]
    2bb4:	2202      	movs	r2, #2
    2bb6:	4313      	orrs	r3, r2
    2bb8:	b2da      	uxtb	r2, r3
    2bba:	4b2e      	ldr	r3, [pc, #184]	; (2c74 <party_lights+0x218>)
    2bbc:	705a      	strb	r2, [r3, #1]
    2bbe:	e00d      	b.n	2bdc <party_lights+0x180>
	}
	else
	{
		data_LED[LOW_BEAM_LEFT_PORT][LOW_BEAM_RIGHT_ADR] &= ~(1 << LOW_BEAM_RIGHT_PIN);
    2bc0:	4b2c      	ldr	r3, [pc, #176]	; (2c74 <party_lights+0x218>)
    2bc2:	789b      	ldrb	r3, [r3, #2]
    2bc4:	2202      	movs	r2, #2
    2bc6:	4393      	bics	r3, r2
    2bc8:	b2da      	uxtb	r2, r3
    2bca:	4b2a      	ldr	r3, [pc, #168]	; (2c74 <party_lights+0x218>)
    2bcc:	709a      	strb	r2, [r3, #2]
		data_LED[LOW_BEAM_LEFT_PORT][LOW_BEAM_LEFT_ADR] &= ~(1 << LOW_BEAM_LEFT_PIN);
    2bce:	4b29      	ldr	r3, [pc, #164]	; (2c74 <party_lights+0x218>)
    2bd0:	785b      	ldrb	r3, [r3, #1]
    2bd2:	2202      	movs	r2, #2
    2bd4:	4393      	bics	r3, r2
    2bd6:	b2da      	uxtb	r2, r3
    2bd8:	4b26      	ldr	r3, [pc, #152]	; (2c74 <party_lights+0x218>)
    2bda:	705a      	strb	r2, [r3, #1]
	else
	{
		data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_RIGHT_ADR] &= ~(1 << HIGH_BEAM_RIGHT_PIN);
		data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_LEFT_ADR] &= ~(1 << HIGH_BEAM_LEFT_PIN);
	}*/
	if (party_vals[4] > party_treshold)
    2bdc:	687b      	ldr	r3, [r7, #4]
    2bde:	3308      	adds	r3, #8
    2be0:	881b      	ldrh	r3, [r3, #0]
    2be2:	4a23      	ldr	r2, [pc, #140]	; (2c70 <party_lights+0x214>)
    2be4:	4293      	cmp	r3, r2
    2be6:	d90e      	bls.n	2c06 <party_lights+0x1aa>
	{
		data_LED[BLINK_RIGHT_PORT][BLINK_RIGHT_ADR] |= (1 << BLINK_RIGHT_PIN);
    2be8:	4b22      	ldr	r3, [pc, #136]	; (2c74 <party_lights+0x218>)
    2bea:	791b      	ldrb	r3, [r3, #4]
    2bec:	2204      	movs	r2, #4
    2bee:	4313      	orrs	r3, r2
    2bf0:	b2da      	uxtb	r2, r3
    2bf2:	4b20      	ldr	r3, [pc, #128]	; (2c74 <party_lights+0x218>)
    2bf4:	711a      	strb	r2, [r3, #4]
		data_LED[BLINK_LEFT_PORT][BLINK_LEFT_ADR] |= (1 << BLINK_LEFT_PIN);
    2bf6:	4b1f      	ldr	r3, [pc, #124]	; (2c74 <party_lights+0x218>)
    2bf8:	78db      	ldrb	r3, [r3, #3]
    2bfa:	2204      	movs	r2, #4
    2bfc:	4313      	orrs	r3, r2
    2bfe:	b2da      	uxtb	r2, r3
    2c00:	4b1c      	ldr	r3, [pc, #112]	; (2c74 <party_lights+0x218>)
    2c02:	70da      	strb	r2, [r3, #3]
    2c04:	e00d      	b.n	2c22 <party_lights+0x1c6>
	}
	else
	{
		data_LED[BLINK_RIGHT_PORT][BLINK_RIGHT_ADR] &= ~(1 << BLINK_RIGHT_PIN);
    2c06:	4b1b      	ldr	r3, [pc, #108]	; (2c74 <party_lights+0x218>)
    2c08:	791b      	ldrb	r3, [r3, #4]
    2c0a:	2204      	movs	r2, #4
    2c0c:	4393      	bics	r3, r2
    2c0e:	b2da      	uxtb	r2, r3
    2c10:	4b18      	ldr	r3, [pc, #96]	; (2c74 <party_lights+0x218>)
    2c12:	711a      	strb	r2, [r3, #4]
		data_LED[BLINK_LEFT_PORT][BLINK_LEFT_ADR] &= ~(1 << BLINK_LEFT_PIN);
    2c14:	4b17      	ldr	r3, [pc, #92]	; (2c74 <party_lights+0x218>)
    2c16:	78db      	ldrb	r3, [r3, #3]
    2c18:	2204      	movs	r2, #4
    2c1a:	4393      	bics	r3, r2
    2c1c:	b2da      	uxtb	r2, r3
    2c1e:	4b15      	ldr	r3, [pc, #84]	; (2c74 <party_lights+0x218>)
    2c20:	70da      	strb	r2, [r3, #3]
	}
	if (party_vals[5] > party_treshold)
    2c22:	687b      	ldr	r3, [r7, #4]
    2c24:	330a      	adds	r3, #10
    2c26:	881b      	ldrh	r3, [r3, #0]
    2c28:	4a11      	ldr	r2, [pc, #68]	; (2c70 <party_lights+0x214>)
    2c2a:	4293      	cmp	r3, r2
    2c2c:	d90e      	bls.n	2c4c <party_lights+0x1f0>
	{
		data_LED[FOG_FRONT_LEFT_PORT][FOG_FRONT_LEFT_ADR] |= (1 << FOG_FRONT_LEFT_PIN);
    2c2e:	4b11      	ldr	r3, [pc, #68]	; (2c74 <party_lights+0x218>)
    2c30:	785b      	ldrb	r3, [r3, #1]
    2c32:	2208      	movs	r2, #8
    2c34:	4313      	orrs	r3, r2
    2c36:	b2da      	uxtb	r2, r3
    2c38:	4b0e      	ldr	r3, [pc, #56]	; (2c74 <party_lights+0x218>)
    2c3a:	705a      	strb	r2, [r3, #1]
		data_LED[FOG_FRONT_RIGHT_PORT][FOG_FRONT_RIGHT_ADR] |= (1 << FOG_FRONT_RIGHT_PIN);
    2c3c:	4b0d      	ldr	r3, [pc, #52]	; (2c74 <party_lights+0x218>)
    2c3e:	789b      	ldrb	r3, [r3, #2]
    2c40:	2208      	movs	r2, #8
    2c42:	4313      	orrs	r3, r2
    2c44:	b2da      	uxtb	r2, r3
    2c46:	4b0b      	ldr	r3, [pc, #44]	; (2c74 <party_lights+0x218>)
    2c48:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		data_LED[LEDBAR_PORT][LEDBAR_ADR] &= ~(1 << LEDBAR_PIN);
	}*/
}
    2c4a:	e00d      	b.n	2c68 <party_lights+0x20c>
		data_LED[FOG_FRONT_LEFT_PORT][FOG_FRONT_LEFT_ADR] |= (1 << FOG_FRONT_LEFT_PIN);
		data_LED[FOG_FRONT_RIGHT_PORT][FOG_FRONT_RIGHT_ADR] |= (1 << FOG_FRONT_RIGHT_PIN);
	}
	else
	{
		data_LED[FOG_FRONT_LEFT_PORT][FOG_FRONT_LEFT_ADR] &= ~(1 << FOG_FRONT_LEFT_PIN);
    2c4c:	4b09      	ldr	r3, [pc, #36]	; (2c74 <party_lights+0x218>)
    2c4e:	785b      	ldrb	r3, [r3, #1]
    2c50:	2208      	movs	r2, #8
    2c52:	4393      	bics	r3, r2
    2c54:	b2da      	uxtb	r2, r3
    2c56:	4b07      	ldr	r3, [pc, #28]	; (2c74 <party_lights+0x218>)
    2c58:	705a      	strb	r2, [r3, #1]
		data_LED[FOG_FRONT_RIGHT_PORT][FOG_FRONT_RIGHT_ADR] &= ~(1 << FOG_FRONT_RIGHT_PIN);
    2c5a:	4b06      	ldr	r3, [pc, #24]	; (2c74 <party_lights+0x218>)
    2c5c:	789b      	ldrb	r3, [r3, #2]
    2c5e:	2208      	movs	r2, #8
    2c60:	4393      	bics	r3, r2
    2c62:	b2da      	uxtb	r2, r3
    2c64:	4b03      	ldr	r3, [pc, #12]	; (2c74 <party_lights+0x218>)
    2c66:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		data_LED[LEDBAR_PORT][LEDBAR_ADR] &= ~(1 << LEDBAR_PIN);
	}*/
}
    2c68:	46c0      	nop			; (mov r8, r8)
    2c6a:	46bd      	mov	sp, r7
    2c6c:	b002      	add	sp, #8
    2c6e:	bd80      	pop	{r7, pc}
    2c70:	000009c4 	.word	0x000009c4
    2c74:	2000015c 	.word	0x2000015c

00002c78 <flashy_flash1>:

void flashy_flash1()
{
    2c78:	b580      	push	{r7, lr}
    2c7a:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
    2c7c:	4b87      	ldr	r3, [pc, #540]	; (2e9c <flashy_flash1+0x224>)
    2c7e:	781b      	ldrb	r3, [r3, #0]
    2c80:	2b13      	cmp	r3, #19
    2c82:	d900      	bls.n	2c86 <flashy_flash1+0xe>
    2c84:	e101      	b.n	2e8a <flashy_flash1+0x212>
    2c86:	009a      	lsls	r2, r3, #2
    2c88:	4b85      	ldr	r3, [pc, #532]	; (2ea0 <flashy_flash1+0x228>)
    2c8a:	18d3      	adds	r3, r2, r3
    2c8c:	681b      	ldr	r3, [r3, #0]
    2c8e:	469f      	mov	pc, r3
	{
		case 0:
			reset_all_lights();
    2c90:	4b84      	ldr	r3, [pc, #528]	; (2ea4 <flashy_flash1+0x22c>)
    2c92:	4798      	blx	r3
			data_LED[HIGH_BEAM_RIGHT_PORT][HIGH_BEAM_RIGHT_ADR] |= (1 << HIGH_BEAM_RIGHT_PIN);
    2c94:	4b84      	ldr	r3, [pc, #528]	; (2ea8 <flashy_flash1+0x230>)
    2c96:	789b      	ldrb	r3, [r3, #2]
    2c98:	2204      	movs	r2, #4
    2c9a:	4313      	orrs	r3, r2
    2c9c:	b2da      	uxtb	r2, r3
    2c9e:	4b82      	ldr	r3, [pc, #520]	; (2ea8 <flashy_flash1+0x230>)
    2ca0:	709a      	strb	r2, [r3, #2]
			state++;
    2ca2:	4b7e      	ldr	r3, [pc, #504]	; (2e9c <flashy_flash1+0x224>)
    2ca4:	781b      	ldrb	r3, [r3, #0]
    2ca6:	3301      	adds	r3, #1
    2ca8:	b2da      	uxtb	r2, r3
    2caa:	4b7c      	ldr	r3, [pc, #496]	; (2e9c <flashy_flash1+0x224>)
    2cac:	701a      	strb	r2, [r3, #0]
			break;
    2cae:	e0f2      	b.n	2e96 <flashy_flash1+0x21e>
		case 1:
			data_LED[HIGH_BEAM_RIGHT_PORT][HIGH_BEAM_RIGHT_ADR] &= ~(1 << HIGH_BEAM_RIGHT_PIN);
    2cb0:	4b7d      	ldr	r3, [pc, #500]	; (2ea8 <flashy_flash1+0x230>)
    2cb2:	789b      	ldrb	r3, [r3, #2]
    2cb4:	2204      	movs	r2, #4
    2cb6:	4393      	bics	r3, r2
    2cb8:	b2da      	uxtb	r2, r3
    2cba:	4b7b      	ldr	r3, [pc, #492]	; (2ea8 <flashy_flash1+0x230>)
    2cbc:	709a      	strb	r2, [r3, #2]
			data_LED[LOW_BEAM_RIGHT_PORT][LOW_BEAM_RIGHT_ADR] |= (1 << LOW_BEAM_RIGHT_PIN);
    2cbe:	4b7a      	ldr	r3, [pc, #488]	; (2ea8 <flashy_flash1+0x230>)
    2cc0:	789b      	ldrb	r3, [r3, #2]
    2cc2:	2202      	movs	r2, #2
    2cc4:	4313      	orrs	r3, r2
    2cc6:	b2da      	uxtb	r2, r3
    2cc8:	4b77      	ldr	r3, [pc, #476]	; (2ea8 <flashy_flash1+0x230>)
    2cca:	709a      	strb	r2, [r3, #2]
			state++;
    2ccc:	4b73      	ldr	r3, [pc, #460]	; (2e9c <flashy_flash1+0x224>)
    2cce:	781b      	ldrb	r3, [r3, #0]
    2cd0:	3301      	adds	r3, #1
    2cd2:	b2da      	uxtb	r2, r3
    2cd4:	4b71      	ldr	r3, [pc, #452]	; (2e9c <flashy_flash1+0x224>)
    2cd6:	701a      	strb	r2, [r3, #0]
			break;
    2cd8:	e0dd      	b.n	2e96 <flashy_flash1+0x21e>
		case 2:
			data_LED[LOW_BEAM_RIGHT_PORT][LOW_BEAM_RIGHT_ADR] &= ~(1 << LOW_BEAM_RIGHT_PIN);
    2cda:	4b73      	ldr	r3, [pc, #460]	; (2ea8 <flashy_flash1+0x230>)
    2cdc:	789b      	ldrb	r3, [r3, #2]
    2cde:	2202      	movs	r2, #2
    2ce0:	4393      	bics	r3, r2
    2ce2:	b2da      	uxtb	r2, r3
    2ce4:	4b70      	ldr	r3, [pc, #448]	; (2ea8 <flashy_flash1+0x230>)
    2ce6:	709a      	strb	r2, [r3, #2]
			data_LED[POSITION_FRONT_RIGHT_PORT][POSITION_FRONT_RIGHT_ADR] |= (1 << POSITION_FRONT_RIGHT_PIN);
    2ce8:	4b6f      	ldr	r3, [pc, #444]	; (2ea8 <flashy_flash1+0x230>)
    2cea:	789b      	ldrb	r3, [r3, #2]
    2cec:	2201      	movs	r2, #1
    2cee:	4313      	orrs	r3, r2
    2cf0:	b2da      	uxtb	r2, r3
    2cf2:	4b6d      	ldr	r3, [pc, #436]	; (2ea8 <flashy_flash1+0x230>)
    2cf4:	709a      	strb	r2, [r3, #2]
			state++;
    2cf6:	4b69      	ldr	r3, [pc, #420]	; (2e9c <flashy_flash1+0x224>)
    2cf8:	781b      	ldrb	r3, [r3, #0]
    2cfa:	3301      	adds	r3, #1
    2cfc:	b2da      	uxtb	r2, r3
    2cfe:	4b67      	ldr	r3, [pc, #412]	; (2e9c <flashy_flash1+0x224>)
    2d00:	701a      	strb	r2, [r3, #0]
			break;
    2d02:	e0c8      	b.n	2e96 <flashy_flash1+0x21e>
		case 3:
			data_LED[POSITION_FRONT_RIGHT_PORT][POSITION_FRONT_RIGHT_ADR] &= ~(1 << POSITION_FRONT_RIGHT_PIN);
    2d04:	4b68      	ldr	r3, [pc, #416]	; (2ea8 <flashy_flash1+0x230>)
    2d06:	789b      	ldrb	r3, [r3, #2]
    2d08:	2201      	movs	r2, #1
    2d0a:	4393      	bics	r3, r2
    2d0c:	b2da      	uxtb	r2, r3
    2d0e:	4b66      	ldr	r3, [pc, #408]	; (2ea8 <flashy_flash1+0x230>)
    2d10:	709a      	strb	r2, [r3, #2]
			data_LED[POSITION_FRONT_LEFT_PORT][POSITION_FRONT_LEFT_ADR] |= (1 << POSITION_FRONT_LEFT_PIN);
    2d12:	4b65      	ldr	r3, [pc, #404]	; (2ea8 <flashy_flash1+0x230>)
    2d14:	785b      	ldrb	r3, [r3, #1]
    2d16:	2201      	movs	r2, #1
    2d18:	4313      	orrs	r3, r2
    2d1a:	b2da      	uxtb	r2, r3
    2d1c:	4b62      	ldr	r3, [pc, #392]	; (2ea8 <flashy_flash1+0x230>)
    2d1e:	705a      	strb	r2, [r3, #1]
			state++;
    2d20:	4b5e      	ldr	r3, [pc, #376]	; (2e9c <flashy_flash1+0x224>)
    2d22:	781b      	ldrb	r3, [r3, #0]
    2d24:	3301      	adds	r3, #1
    2d26:	b2da      	uxtb	r2, r3
    2d28:	4b5c      	ldr	r3, [pc, #368]	; (2e9c <flashy_flash1+0x224>)
    2d2a:	701a      	strb	r2, [r3, #0]
			break;
    2d2c:	e0b3      	b.n	2e96 <flashy_flash1+0x21e>
		case 4:
			data_LED[POSITION_FRONT_LEFT_PORT][POSITION_FRONT_LEFT_ADR] &= ~(1 << POSITION_FRONT_LEFT_PIN);
    2d2e:	4b5e      	ldr	r3, [pc, #376]	; (2ea8 <flashy_flash1+0x230>)
    2d30:	785b      	ldrb	r3, [r3, #1]
    2d32:	2201      	movs	r2, #1
    2d34:	4393      	bics	r3, r2
    2d36:	b2da      	uxtb	r2, r3
    2d38:	4b5b      	ldr	r3, [pc, #364]	; (2ea8 <flashy_flash1+0x230>)
    2d3a:	705a      	strb	r2, [r3, #1]
			data_LED[LOW_BEAM_LEFT_PORT][LOW_BEAM_LEFT_ADR] |= (1 << LOW_BEAM_LEFT_PIN);
    2d3c:	4b5a      	ldr	r3, [pc, #360]	; (2ea8 <flashy_flash1+0x230>)
    2d3e:	785b      	ldrb	r3, [r3, #1]
    2d40:	2202      	movs	r2, #2
    2d42:	4313      	orrs	r3, r2
    2d44:	b2da      	uxtb	r2, r3
    2d46:	4b58      	ldr	r3, [pc, #352]	; (2ea8 <flashy_flash1+0x230>)
    2d48:	705a      	strb	r2, [r3, #1]
			state++;
    2d4a:	4b54      	ldr	r3, [pc, #336]	; (2e9c <flashy_flash1+0x224>)
    2d4c:	781b      	ldrb	r3, [r3, #0]
    2d4e:	3301      	adds	r3, #1
    2d50:	b2da      	uxtb	r2, r3
    2d52:	4b52      	ldr	r3, [pc, #328]	; (2e9c <flashy_flash1+0x224>)
    2d54:	701a      	strb	r2, [r3, #0]
			break;
    2d56:	e09e      	b.n	2e96 <flashy_flash1+0x21e>
		case 5:
			data_LED[LOW_BEAM_LEFT_PORT][LOW_BEAM_LEFT_ADR] &= ~(1 << LOW_BEAM_LEFT_PIN);
    2d58:	4b53      	ldr	r3, [pc, #332]	; (2ea8 <flashy_flash1+0x230>)
    2d5a:	785b      	ldrb	r3, [r3, #1]
    2d5c:	2202      	movs	r2, #2
    2d5e:	4393      	bics	r3, r2
    2d60:	b2da      	uxtb	r2, r3
    2d62:	4b51      	ldr	r3, [pc, #324]	; (2ea8 <flashy_flash1+0x230>)
    2d64:	705a      	strb	r2, [r3, #1]
			data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_LEFT_ADR] |= (1 << HIGH_BEAM_LEFT_PIN);
    2d66:	4b50      	ldr	r3, [pc, #320]	; (2ea8 <flashy_flash1+0x230>)
    2d68:	785b      	ldrb	r3, [r3, #1]
    2d6a:	2204      	movs	r2, #4
    2d6c:	4313      	orrs	r3, r2
    2d6e:	b2da      	uxtb	r2, r3
    2d70:	4b4d      	ldr	r3, [pc, #308]	; (2ea8 <flashy_flash1+0x230>)
    2d72:	705a      	strb	r2, [r3, #1]
			state++;
    2d74:	4b49      	ldr	r3, [pc, #292]	; (2e9c <flashy_flash1+0x224>)
    2d76:	781b      	ldrb	r3, [r3, #0]
    2d78:	3301      	adds	r3, #1
    2d7a:	b2da      	uxtb	r2, r3
    2d7c:	4b47      	ldr	r3, [pc, #284]	; (2e9c <flashy_flash1+0x224>)
    2d7e:	701a      	strb	r2, [r3, #0]
			break;
    2d80:	e089      	b.n	2e96 <flashy_flash1+0x21e>
		case 6:
			data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_LEFT_ADR] &= ~(1 << HIGH_BEAM_LEFT_PIN);
    2d82:	4b49      	ldr	r3, [pc, #292]	; (2ea8 <flashy_flash1+0x230>)
    2d84:	785b      	ldrb	r3, [r3, #1]
    2d86:	2204      	movs	r2, #4
    2d88:	4393      	bics	r3, r2
    2d8a:	b2da      	uxtb	r2, r3
    2d8c:	4b46      	ldr	r3, [pc, #280]	; (2ea8 <flashy_flash1+0x230>)
    2d8e:	705a      	strb	r2, [r3, #1]
			data_LED[BLINK_LEFT_PORT][BLINK_LEFT_ADR] |= (1 << BLINK_LEFT_PIN);
    2d90:	4b45      	ldr	r3, [pc, #276]	; (2ea8 <flashy_flash1+0x230>)
    2d92:	78db      	ldrb	r3, [r3, #3]
    2d94:	2204      	movs	r2, #4
    2d96:	4313      	orrs	r3, r2
    2d98:	b2da      	uxtb	r2, r3
    2d9a:	4b43      	ldr	r3, [pc, #268]	; (2ea8 <flashy_flash1+0x230>)
    2d9c:	70da      	strb	r2, [r3, #3]
			state++;
    2d9e:	4b3f      	ldr	r3, [pc, #252]	; (2e9c <flashy_flash1+0x224>)
    2da0:	781b      	ldrb	r3, [r3, #0]
    2da2:	3301      	adds	r3, #1
    2da4:	b2da      	uxtb	r2, r3
    2da6:	4b3d      	ldr	r3, [pc, #244]	; (2e9c <flashy_flash1+0x224>)
    2da8:	701a      	strb	r2, [r3, #0]
			break;
    2daa:	e074      	b.n	2e96 <flashy_flash1+0x21e>
		case 7:
			data_LED[BLINK_LEFT_PORT][BLINK_LEFT_ADR] &= ~(1 << BLINK_LEFT_PIN);
    2dac:	4b3e      	ldr	r3, [pc, #248]	; (2ea8 <flashy_flash1+0x230>)
    2dae:	78db      	ldrb	r3, [r3, #3]
    2db0:	2204      	movs	r2, #4
    2db2:	4393      	bics	r3, r2
    2db4:	b2da      	uxtb	r2, r3
    2db6:	4b3c      	ldr	r3, [pc, #240]	; (2ea8 <flashy_flash1+0x230>)
    2db8:	70da      	strb	r2, [r3, #3]
			data_LED[REVERSE_LEFT_PORT][REVERSE_LEFT_ADR] |= (1 << REVERSE_LEFT_PIN);
    2dba:	4b3b      	ldr	r3, [pc, #236]	; (2ea8 <flashy_flash1+0x230>)
    2dbc:	78db      	ldrb	r3, [r3, #3]
    2dbe:	2202      	movs	r2, #2
    2dc0:	4313      	orrs	r3, r2
    2dc2:	b2da      	uxtb	r2, r3
    2dc4:	4b38      	ldr	r3, [pc, #224]	; (2ea8 <flashy_flash1+0x230>)
    2dc6:	70da      	strb	r2, [r3, #3]
			state++;
    2dc8:	4b34      	ldr	r3, [pc, #208]	; (2e9c <flashy_flash1+0x224>)
    2dca:	781b      	ldrb	r3, [r3, #0]
    2dcc:	3301      	adds	r3, #1
    2dce:	b2da      	uxtb	r2, r3
    2dd0:	4b32      	ldr	r3, [pc, #200]	; (2e9c <flashy_flash1+0x224>)
    2dd2:	701a      	strb	r2, [r3, #0]
			break;
    2dd4:	e05f      	b.n	2e96 <flashy_flash1+0x21e>
		case 8:
			data_LED[REVERSE_LEFT_PORT][REVERSE_LEFT_ADR] &= ~(1 << REVERSE_LEFT_PIN);
    2dd6:	4b34      	ldr	r3, [pc, #208]	; (2ea8 <flashy_flash1+0x230>)
    2dd8:	78db      	ldrb	r3, [r3, #3]
    2dda:	2202      	movs	r2, #2
    2ddc:	4393      	bics	r3, r2
    2dde:	b2da      	uxtb	r2, r3
    2de0:	4b31      	ldr	r3, [pc, #196]	; (2ea8 <flashy_flash1+0x230>)
    2de2:	70da      	strb	r2, [r3, #3]
			data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] |= (1 << POSITION_REAR_LEFT_PIN);
    2de4:	4b30      	ldr	r3, [pc, #192]	; (2ea8 <flashy_flash1+0x230>)
    2de6:	78db      	ldrb	r3, [r3, #3]
    2de8:	2201      	movs	r2, #1
    2dea:	4313      	orrs	r3, r2
    2dec:	b2da      	uxtb	r2, r3
    2dee:	4b2e      	ldr	r3, [pc, #184]	; (2ea8 <flashy_flash1+0x230>)
    2df0:	70da      	strb	r2, [r3, #3]
			state++;
    2df2:	4b2a      	ldr	r3, [pc, #168]	; (2e9c <flashy_flash1+0x224>)
    2df4:	781b      	ldrb	r3, [r3, #0]
    2df6:	3301      	adds	r3, #1
    2df8:	b2da      	uxtb	r2, r3
    2dfa:	4b28      	ldr	r3, [pc, #160]	; (2e9c <flashy_flash1+0x224>)
    2dfc:	701a      	strb	r2, [r3, #0]
			break;
    2dfe:	e04a      	b.n	2e96 <flashy_flash1+0x21e>
		case 9:
			data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] &= ~(1 << POSITION_REAR_LEFT_PIN);
    2e00:	4b29      	ldr	r3, [pc, #164]	; (2ea8 <flashy_flash1+0x230>)
    2e02:	78db      	ldrb	r3, [r3, #3]
    2e04:	2201      	movs	r2, #1
    2e06:	4393      	bics	r3, r2
    2e08:	b2da      	uxtb	r2, r3
    2e0a:	4b27      	ldr	r3, [pc, #156]	; (2ea8 <flashy_flash1+0x230>)
    2e0c:	70da      	strb	r2, [r3, #3]
			data_LED[REVERSE_RIGHT_PORT][REVERSE_RIGHT_ADR] |= (1 << REVERSE_RIGHT_PIN);
    2e0e:	4b26      	ldr	r3, [pc, #152]	; (2ea8 <flashy_flash1+0x230>)
    2e10:	791b      	ldrb	r3, [r3, #4]
    2e12:	2202      	movs	r2, #2
    2e14:	4313      	orrs	r3, r2
    2e16:	b2da      	uxtb	r2, r3
    2e18:	4b23      	ldr	r3, [pc, #140]	; (2ea8 <flashy_flash1+0x230>)
    2e1a:	711a      	strb	r2, [r3, #4]
			state++;
    2e1c:	4b1f      	ldr	r3, [pc, #124]	; (2e9c <flashy_flash1+0x224>)
    2e1e:	781b      	ldrb	r3, [r3, #0]
    2e20:	3301      	adds	r3, #1
    2e22:	b2da      	uxtb	r2, r3
    2e24:	4b1d      	ldr	r3, [pc, #116]	; (2e9c <flashy_flash1+0x224>)
    2e26:	701a      	strb	r2, [r3, #0]
			break;
    2e28:	e035      	b.n	2e96 <flashy_flash1+0x21e>
		case 10:
			data_LED[REVERSE_RIGHT_PORT][REVERSE_RIGHT_ADR] &= ~(1 << REVERSE_RIGHT_PIN);
    2e2a:	4b1f      	ldr	r3, [pc, #124]	; (2ea8 <flashy_flash1+0x230>)
    2e2c:	791b      	ldrb	r3, [r3, #4]
    2e2e:	2202      	movs	r2, #2
    2e30:	4393      	bics	r3, r2
    2e32:	b2da      	uxtb	r2, r3
    2e34:	4b1c      	ldr	r3, [pc, #112]	; (2ea8 <flashy_flash1+0x230>)
    2e36:	711a      	strb	r2, [r3, #4]
			data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] |= (1 << POSITION_REAR_RIGHT_PIN);
    2e38:	4b1b      	ldr	r3, [pc, #108]	; (2ea8 <flashy_flash1+0x230>)
    2e3a:	791b      	ldrb	r3, [r3, #4]
    2e3c:	2201      	movs	r2, #1
    2e3e:	4313      	orrs	r3, r2
    2e40:	b2da      	uxtb	r2, r3
    2e42:	4b19      	ldr	r3, [pc, #100]	; (2ea8 <flashy_flash1+0x230>)
    2e44:	711a      	strb	r2, [r3, #4]
			state++;
    2e46:	4b15      	ldr	r3, [pc, #84]	; (2e9c <flashy_flash1+0x224>)
    2e48:	781b      	ldrb	r3, [r3, #0]
    2e4a:	3301      	adds	r3, #1
    2e4c:	b2da      	uxtb	r2, r3
    2e4e:	4b13      	ldr	r3, [pc, #76]	; (2e9c <flashy_flash1+0x224>)
    2e50:	701a      	strb	r2, [r3, #0]
			break;
    2e52:	e020      	b.n	2e96 <flashy_flash1+0x21e>
		case 11:
			data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] &= ~(1 << POSITION_REAR_RIGHT_PIN);
    2e54:	4b14      	ldr	r3, [pc, #80]	; (2ea8 <flashy_flash1+0x230>)
    2e56:	791b      	ldrb	r3, [r3, #4]
    2e58:	2201      	movs	r2, #1
    2e5a:	4393      	bics	r3, r2
    2e5c:	b2da      	uxtb	r2, r3
    2e5e:	4b12      	ldr	r3, [pc, #72]	; (2ea8 <flashy_flash1+0x230>)
    2e60:	711a      	strb	r2, [r3, #4]
			data_LED[BLINK_RIGHT_PORT][BLINK_RIGHT_ADR] |= (1 << BLINK_RIGHT_PIN);
    2e62:	4b11      	ldr	r3, [pc, #68]	; (2ea8 <flashy_flash1+0x230>)
    2e64:	791b      	ldrb	r3, [r3, #4]
    2e66:	2204      	movs	r2, #4
    2e68:	4313      	orrs	r3, r2
    2e6a:	b2da      	uxtb	r2, r3
    2e6c:	4b0e      	ldr	r3, [pc, #56]	; (2ea8 <flashy_flash1+0x230>)
    2e6e:	711a      	strb	r2, [r3, #4]
			state++;
    2e70:	4b0a      	ldr	r3, [pc, #40]	; (2e9c <flashy_flash1+0x224>)
    2e72:	781b      	ldrb	r3, [r3, #0]
    2e74:	3301      	adds	r3, #1
    2e76:	b2da      	uxtb	r2, r3
    2e78:	4b08      	ldr	r3, [pc, #32]	; (2e9c <flashy_flash1+0x224>)
    2e7a:	701a      	strb	r2, [r3, #0]
			break;
    2e7c:	e00b      	b.n	2e96 <flashy_flash1+0x21e>
		case 18:
			data_LED[LEDBAR_PORT][LEDBAR_ADR] |= (1 << LEDBAR_PIN);
			state++;
			break;*/
		case 19:
			reset_all_lights();
    2e7e:	4b09      	ldr	r3, [pc, #36]	; (2ea4 <flashy_flash1+0x22c>)
    2e80:	4798      	blx	r3
			state = 0;
    2e82:	4b06      	ldr	r3, [pc, #24]	; (2e9c <flashy_flash1+0x224>)
    2e84:	2200      	movs	r2, #0
    2e86:	701a      	strb	r2, [r3, #0]
			break;
    2e88:	e005      	b.n	2e96 <flashy_flash1+0x21e>
			
		default:
			reset_all_lights();
    2e8a:	4b06      	ldr	r3, [pc, #24]	; (2ea4 <flashy_flash1+0x22c>)
    2e8c:	4798      	blx	r3
			state = 0;
    2e8e:	4b03      	ldr	r3, [pc, #12]	; (2e9c <flashy_flash1+0x224>)
    2e90:	2200      	movs	r2, #0
    2e92:	701a      	strb	r2, [r3, #0]
			break;
    2e94:	46c0      	nop			; (mov r8, r8)
	}
}
    2e96:	46c0      	nop			; (mov r8, r8)
    2e98:	46bd      	mov	sp, r7
    2e9a:	bd80      	pop	{r7, pc}
    2e9c:	200000e0 	.word	0x200000e0
    2ea0:	0000868c 	.word	0x0000868c
    2ea4:	0000331d 	.word	0x0000331d
    2ea8:	2000015c 	.word	0x2000015c

00002eac <flashy_flash2>:

void flashy_flash2()
{
    2eac:	b580      	push	{r7, lr}
    2eae:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
    2eb0:	4b9e      	ldr	r3, [pc, #632]	; (312c <flashy_flash2+0x280>)
    2eb2:	781b      	ldrb	r3, [r3, #0]
    2eb4:	2b0a      	cmp	r3, #10
    2eb6:	d900      	bls.n	2eba <flashy_flash2+0xe>
    2eb8:	e130      	b.n	311c <flashy_flash2+0x270>
    2eba:	009a      	lsls	r2, r3, #2
    2ebc:	4b9c      	ldr	r3, [pc, #624]	; (3130 <flashy_flash2+0x284>)
    2ebe:	18d3      	adds	r3, r2, r3
    2ec0:	681b      	ldr	r3, [r3, #0]
    2ec2:	469f      	mov	pc, r3
	{
		case 0:
			reset_all_lights();
    2ec4:	4b9b      	ldr	r3, [pc, #620]	; (3134 <flashy_flash2+0x288>)
    2ec6:	4798      	blx	r3
			data_LED[LEDBAR_PORT][LEDBAR_ADR] |= (1 << LEDBAR_PIN);
    2ec8:	4b9b      	ldr	r3, [pc, #620]	; (3138 <flashy_flash2+0x28c>)
    2eca:	785b      	ldrb	r3, [r3, #1]
    2ecc:	2210      	movs	r2, #16
    2ece:	4313      	orrs	r3, r2
    2ed0:	b2da      	uxtb	r2, r3
    2ed2:	4b99      	ldr	r3, [pc, #612]	; (3138 <flashy_flash2+0x28c>)
    2ed4:	705a      	strb	r2, [r3, #1]
			state++;
    2ed6:	4b95      	ldr	r3, [pc, #596]	; (312c <flashy_flash2+0x280>)
    2ed8:	781b      	ldrb	r3, [r3, #0]
    2eda:	3301      	adds	r3, #1
    2edc:	b2da      	uxtb	r2, r3
    2ede:	4b93      	ldr	r3, [pc, #588]	; (312c <flashy_flash2+0x280>)
    2ee0:	701a      	strb	r2, [r3, #0]
			break;
    2ee2:	e120      	b.n	3126 <flashy_flash2+0x27a>
		case 1:
			data_LED[LEDBAR_PORT][LEDBAR_ADR] &= ~(1 << LEDBAR_PIN);
    2ee4:	4b94      	ldr	r3, [pc, #592]	; (3138 <flashy_flash2+0x28c>)
    2ee6:	785b      	ldrb	r3, [r3, #1]
    2ee8:	2210      	movs	r2, #16
    2eea:	4393      	bics	r3, r2
    2eec:	b2da      	uxtb	r2, r3
    2eee:	4b92      	ldr	r3, [pc, #584]	; (3138 <flashy_flash2+0x28c>)
    2ef0:	705a      	strb	r2, [r3, #1]
			state++;
    2ef2:	4b8e      	ldr	r3, [pc, #568]	; (312c <flashy_flash2+0x280>)
    2ef4:	781b      	ldrb	r3, [r3, #0]
    2ef6:	3301      	adds	r3, #1
    2ef8:	b2da      	uxtb	r2, r3
    2efa:	4b8c      	ldr	r3, [pc, #560]	; (312c <flashy_flash2+0x280>)
    2efc:	701a      	strb	r2, [r3, #0]
			break;
    2efe:	e112      	b.n	3126 <flashy_flash2+0x27a>
		case 2:
			data_LED[LEDBAR_PORT][LEDBAR_ADR] |= (1 << LEDBAR_PIN);
    2f00:	4b8d      	ldr	r3, [pc, #564]	; (3138 <flashy_flash2+0x28c>)
    2f02:	785b      	ldrb	r3, [r3, #1]
    2f04:	2210      	movs	r2, #16
    2f06:	4313      	orrs	r3, r2
    2f08:	b2da      	uxtb	r2, r3
    2f0a:	4b8b      	ldr	r3, [pc, #556]	; (3138 <flashy_flash2+0x28c>)
    2f0c:	705a      	strb	r2, [r3, #1]
			state++;
    2f0e:	4b87      	ldr	r3, [pc, #540]	; (312c <flashy_flash2+0x280>)
    2f10:	781b      	ldrb	r3, [r3, #0]
    2f12:	3301      	adds	r3, #1
    2f14:	b2da      	uxtb	r2, r3
    2f16:	4b85      	ldr	r3, [pc, #532]	; (312c <flashy_flash2+0x280>)
    2f18:	701a      	strb	r2, [r3, #0]
			break;
    2f1a:	e104      	b.n	3126 <flashy_flash2+0x27a>
		case 3:
			data_LED[LEDBAR_PORT][LEDBAR_ADR] &= ~(1 << LEDBAR_PIN);
    2f1c:	4b86      	ldr	r3, [pc, #536]	; (3138 <flashy_flash2+0x28c>)
    2f1e:	785b      	ldrb	r3, [r3, #1]
    2f20:	2210      	movs	r2, #16
    2f22:	4393      	bics	r3, r2
    2f24:	b2da      	uxtb	r2, r3
    2f26:	4b84      	ldr	r3, [pc, #528]	; (3138 <flashy_flash2+0x28c>)
    2f28:	705a      	strb	r2, [r3, #1]
			state++;
    2f2a:	4b80      	ldr	r3, [pc, #512]	; (312c <flashy_flash2+0x280>)
    2f2c:	781b      	ldrb	r3, [r3, #0]
    2f2e:	3301      	adds	r3, #1
    2f30:	b2da      	uxtb	r2, r3
    2f32:	4b7e      	ldr	r3, [pc, #504]	; (312c <flashy_flash2+0x280>)
    2f34:	701a      	strb	r2, [r3, #0]
			break;
    2f36:	e0f6      	b.n	3126 <flashy_flash2+0x27a>
		case 4:
			data_LED[LEDBAR_PORT][LEDBAR_ADR] |= (1 << LEDBAR_PIN);
    2f38:	4b7f      	ldr	r3, [pc, #508]	; (3138 <flashy_flash2+0x28c>)
    2f3a:	785b      	ldrb	r3, [r3, #1]
    2f3c:	2210      	movs	r2, #16
    2f3e:	4313      	orrs	r3, r2
    2f40:	b2da      	uxtb	r2, r3
    2f42:	4b7d      	ldr	r3, [pc, #500]	; (3138 <flashy_flash2+0x28c>)
    2f44:	705a      	strb	r2, [r3, #1]
			state++;
    2f46:	4b79      	ldr	r3, [pc, #484]	; (312c <flashy_flash2+0x280>)
    2f48:	781b      	ldrb	r3, [r3, #0]
    2f4a:	3301      	adds	r3, #1
    2f4c:	b2da      	uxtb	r2, r3
    2f4e:	4b77      	ldr	r3, [pc, #476]	; (312c <flashy_flash2+0x280>)
    2f50:	701a      	strb	r2, [r3, #0]
			break;
    2f52:	e0e8      	b.n	3126 <flashy_flash2+0x27a>
		case 5:
			data_LED[LEDBAR_PORT][LEDBAR_ADR] &= ~(1 << LEDBAR_PIN);
    2f54:	4b78      	ldr	r3, [pc, #480]	; (3138 <flashy_flash2+0x28c>)
    2f56:	785b      	ldrb	r3, [r3, #1]
    2f58:	2210      	movs	r2, #16
    2f5a:	4393      	bics	r3, r2
    2f5c:	b2da      	uxtb	r2, r3
    2f5e:	4b76      	ldr	r3, [pc, #472]	; (3138 <flashy_flash2+0x28c>)
    2f60:	705a      	strb	r2, [r3, #1]
			state++;
    2f62:	4b72      	ldr	r3, [pc, #456]	; (312c <flashy_flash2+0x280>)
    2f64:	781b      	ldrb	r3, [r3, #0]
    2f66:	3301      	adds	r3, #1
    2f68:	b2da      	uxtb	r2, r3
    2f6a:	4b70      	ldr	r3, [pc, #448]	; (312c <flashy_flash2+0x280>)
    2f6c:	701a      	strb	r2, [r3, #0]
			break;
    2f6e:	e0da      	b.n	3126 <flashy_flash2+0x27a>
		case 6:
			data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_LEFT_ADR] |= (1 << HIGH_BEAM_LEFT_PIN);
    2f70:	4b71      	ldr	r3, [pc, #452]	; (3138 <flashy_flash2+0x28c>)
    2f72:	785b      	ldrb	r3, [r3, #1]
    2f74:	2204      	movs	r2, #4
    2f76:	4313      	orrs	r3, r2
    2f78:	b2da      	uxtb	r2, r3
    2f7a:	4b6f      	ldr	r3, [pc, #444]	; (3138 <flashy_flash2+0x28c>)
    2f7c:	705a      	strb	r2, [r3, #1]
			data_LED[HIGH_BEAM_RIGHT_PORT][HIGH_BEAM_RIGHT_ADR] |= (1 << HIGH_BEAM_RIGHT_PIN);
    2f7e:	4b6e      	ldr	r3, [pc, #440]	; (3138 <flashy_flash2+0x28c>)
    2f80:	789b      	ldrb	r3, [r3, #2]
    2f82:	2204      	movs	r2, #4
    2f84:	4313      	orrs	r3, r2
    2f86:	b2da      	uxtb	r2, r3
    2f88:	4b6b      	ldr	r3, [pc, #428]	; (3138 <flashy_flash2+0x28c>)
    2f8a:	709a      	strb	r2, [r3, #2]
			data_LED[REVERSE_LEFT_PORT][REVERSE_LEFT_ADR] |= (1 << REVERSE_LEFT_PIN);
    2f8c:	4b6a      	ldr	r3, [pc, #424]	; (3138 <flashy_flash2+0x28c>)
    2f8e:	78db      	ldrb	r3, [r3, #3]
    2f90:	2202      	movs	r2, #2
    2f92:	4313      	orrs	r3, r2
    2f94:	b2da      	uxtb	r2, r3
    2f96:	4b68      	ldr	r3, [pc, #416]	; (3138 <flashy_flash2+0x28c>)
    2f98:	70da      	strb	r2, [r3, #3]
			data_LED[REVERSE_RIGHT_PORT][REVERSE_RIGHT_ADR] |= (1 << REVERSE_RIGHT_PIN);
    2f9a:	4b67      	ldr	r3, [pc, #412]	; (3138 <flashy_flash2+0x28c>)
    2f9c:	791b      	ldrb	r3, [r3, #4]
    2f9e:	2202      	movs	r2, #2
    2fa0:	4313      	orrs	r3, r2
    2fa2:	b2da      	uxtb	r2, r3
    2fa4:	4b64      	ldr	r3, [pc, #400]	; (3138 <flashy_flash2+0x28c>)
    2fa6:	711a      	strb	r2, [r3, #4]
			state++;
    2fa8:	4b60      	ldr	r3, [pc, #384]	; (312c <flashy_flash2+0x280>)
    2faa:	781b      	ldrb	r3, [r3, #0]
    2fac:	3301      	adds	r3, #1
    2fae:	b2da      	uxtb	r2, r3
    2fb0:	4b5e      	ldr	r3, [pc, #376]	; (312c <flashy_flash2+0x280>)
    2fb2:	701a      	strb	r2, [r3, #0]
			break;
    2fb4:	e0b7      	b.n	3126 <flashy_flash2+0x27a>
		case 7:
			data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_LEFT_ADR] &= ~(1 << HIGH_BEAM_LEFT_PIN);
    2fb6:	4b60      	ldr	r3, [pc, #384]	; (3138 <flashy_flash2+0x28c>)
    2fb8:	785b      	ldrb	r3, [r3, #1]
    2fba:	2204      	movs	r2, #4
    2fbc:	4393      	bics	r3, r2
    2fbe:	b2da      	uxtb	r2, r3
    2fc0:	4b5d      	ldr	r3, [pc, #372]	; (3138 <flashy_flash2+0x28c>)
    2fc2:	705a      	strb	r2, [r3, #1]
			data_LED[HIGH_BEAM_RIGHT_PORT][HIGH_BEAM_RIGHT_ADR] &= ~(1 << HIGH_BEAM_RIGHT_PIN);
    2fc4:	4b5c      	ldr	r3, [pc, #368]	; (3138 <flashy_flash2+0x28c>)
    2fc6:	789b      	ldrb	r3, [r3, #2]
    2fc8:	2204      	movs	r2, #4
    2fca:	4393      	bics	r3, r2
    2fcc:	b2da      	uxtb	r2, r3
    2fce:	4b5a      	ldr	r3, [pc, #360]	; (3138 <flashy_flash2+0x28c>)
    2fd0:	709a      	strb	r2, [r3, #2]
			data_LED[LOW_BEAM_LEFT_PORT][LOW_BEAM_LEFT_ADR] |= (1 << LOW_BEAM_LEFT_PIN);
    2fd2:	4b59      	ldr	r3, [pc, #356]	; (3138 <flashy_flash2+0x28c>)
    2fd4:	785b      	ldrb	r3, [r3, #1]
    2fd6:	2202      	movs	r2, #2
    2fd8:	4313      	orrs	r3, r2
    2fda:	b2da      	uxtb	r2, r3
    2fdc:	4b56      	ldr	r3, [pc, #344]	; (3138 <flashy_flash2+0x28c>)
    2fde:	705a      	strb	r2, [r3, #1]
			data_LED[LOW_BEAM_RIGHT_PORT][LOW_BEAM_RIGHT_ADR] |= (1 << LOW_BEAM_RIGHT_PIN);
    2fe0:	4b55      	ldr	r3, [pc, #340]	; (3138 <flashy_flash2+0x28c>)
    2fe2:	789b      	ldrb	r3, [r3, #2]
    2fe4:	2202      	movs	r2, #2
    2fe6:	4313      	orrs	r3, r2
    2fe8:	b2da      	uxtb	r2, r3
    2fea:	4b53      	ldr	r3, [pc, #332]	; (3138 <flashy_flash2+0x28c>)
    2fec:	709a      	strb	r2, [r3, #2]
			data_LED[REVERSE_LEFT_PORT][REVERSE_LEFT_ADR] &= ~(1 << REVERSE_LEFT_PIN);
    2fee:	4b52      	ldr	r3, [pc, #328]	; (3138 <flashy_flash2+0x28c>)
    2ff0:	78db      	ldrb	r3, [r3, #3]
    2ff2:	2202      	movs	r2, #2
    2ff4:	4393      	bics	r3, r2
    2ff6:	b2da      	uxtb	r2, r3
    2ff8:	4b4f      	ldr	r3, [pc, #316]	; (3138 <flashy_flash2+0x28c>)
    2ffa:	70da      	strb	r2, [r3, #3]
			data_LED[REVERSE_RIGHT_PORT][REVERSE_RIGHT_ADR] &= ~(1 << REVERSE_RIGHT_PIN);
    2ffc:	4b4e      	ldr	r3, [pc, #312]	; (3138 <flashy_flash2+0x28c>)
    2ffe:	791b      	ldrb	r3, [r3, #4]
    3000:	2202      	movs	r2, #2
    3002:	4393      	bics	r3, r2
    3004:	b2da      	uxtb	r2, r3
    3006:	4b4c      	ldr	r3, [pc, #304]	; (3138 <flashy_flash2+0x28c>)
    3008:	711a      	strb	r2, [r3, #4]
			state++;
    300a:	4b48      	ldr	r3, [pc, #288]	; (312c <flashy_flash2+0x280>)
    300c:	781b      	ldrb	r3, [r3, #0]
    300e:	3301      	adds	r3, #1
    3010:	b2da      	uxtb	r2, r3
    3012:	4b46      	ldr	r3, [pc, #280]	; (312c <flashy_flash2+0x280>)
    3014:	701a      	strb	r2, [r3, #0]
			break;
    3016:	e086      	b.n	3126 <flashy_flash2+0x27a>
		case 8:
			data_LED[LOW_BEAM_LEFT_PORT][LOW_BEAM_LEFT_ADR] &= ~(1 << LOW_BEAM_LEFT_PIN);
    3018:	4b47      	ldr	r3, [pc, #284]	; (3138 <flashy_flash2+0x28c>)
    301a:	785b      	ldrb	r3, [r3, #1]
    301c:	2202      	movs	r2, #2
    301e:	4393      	bics	r3, r2
    3020:	b2da      	uxtb	r2, r3
    3022:	4b45      	ldr	r3, [pc, #276]	; (3138 <flashy_flash2+0x28c>)
    3024:	705a      	strb	r2, [r3, #1]
			data_LED[LOW_BEAM_RIGHT_PORT][LOW_BEAM_RIGHT_ADR] &= ~(1 << LOW_BEAM_RIGHT_PIN);
    3026:	4b44      	ldr	r3, [pc, #272]	; (3138 <flashy_flash2+0x28c>)
    3028:	789b      	ldrb	r3, [r3, #2]
    302a:	2202      	movs	r2, #2
    302c:	4393      	bics	r3, r2
    302e:	b2da      	uxtb	r2, r3
    3030:	4b41      	ldr	r3, [pc, #260]	; (3138 <flashy_flash2+0x28c>)
    3032:	709a      	strb	r2, [r3, #2]
			data_LED[FOG_FRONT_LEFT_PORT][FOG_FRONT_LEFT_ADR] |= (1 << FOG_FRONT_LEFT_PIN);
    3034:	4b40      	ldr	r3, [pc, #256]	; (3138 <flashy_flash2+0x28c>)
    3036:	785b      	ldrb	r3, [r3, #1]
    3038:	2208      	movs	r2, #8
    303a:	4313      	orrs	r3, r2
    303c:	b2da      	uxtb	r2, r3
    303e:	4b3e      	ldr	r3, [pc, #248]	; (3138 <flashy_flash2+0x28c>)
    3040:	705a      	strb	r2, [r3, #1]
			data_LED[FOG_FRONT_RIGHT_PORT][FOG_FRONT_RIGHT_ADR] |= (1 << FOG_FRONT_RIGHT_PIN);
    3042:	4b3d      	ldr	r3, [pc, #244]	; (3138 <flashy_flash2+0x28c>)
    3044:	789b      	ldrb	r3, [r3, #2]
    3046:	2208      	movs	r2, #8
    3048:	4313      	orrs	r3, r2
    304a:	b2da      	uxtb	r2, r3
    304c:	4b3a      	ldr	r3, [pc, #232]	; (3138 <flashy_flash2+0x28c>)
    304e:	709a      	strb	r2, [r3, #2]
			data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] |= (1 << POSITION_REAR_LEFT_PIN);
    3050:	4b39      	ldr	r3, [pc, #228]	; (3138 <flashy_flash2+0x28c>)
    3052:	78db      	ldrb	r3, [r3, #3]
    3054:	2201      	movs	r2, #1
    3056:	4313      	orrs	r3, r2
    3058:	b2da      	uxtb	r2, r3
    305a:	4b37      	ldr	r3, [pc, #220]	; (3138 <flashy_flash2+0x28c>)
    305c:	70da      	strb	r2, [r3, #3]
			data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] |= (1 << POSITION_REAR_RIGHT_PIN);
    305e:	4b36      	ldr	r3, [pc, #216]	; (3138 <flashy_flash2+0x28c>)
    3060:	791b      	ldrb	r3, [r3, #4]
    3062:	2201      	movs	r2, #1
    3064:	4313      	orrs	r3, r2
    3066:	b2da      	uxtb	r2, r3
    3068:	4b33      	ldr	r3, [pc, #204]	; (3138 <flashy_flash2+0x28c>)
    306a:	711a      	strb	r2, [r3, #4]
			state++;
    306c:	4b2f      	ldr	r3, [pc, #188]	; (312c <flashy_flash2+0x280>)
    306e:	781b      	ldrb	r3, [r3, #0]
    3070:	3301      	adds	r3, #1
    3072:	b2da      	uxtb	r2, r3
    3074:	4b2d      	ldr	r3, [pc, #180]	; (312c <flashy_flash2+0x280>)
    3076:	701a      	strb	r2, [r3, #0]
			break;
    3078:	e055      	b.n	3126 <flashy_flash2+0x27a>
		case 9:
			data_LED[FOG_FRONT_LEFT_PORT][FOG_FRONT_LEFT_ADR] &= ~(1 << FOG_FRONT_LEFT_PIN);
    307a:	4b2f      	ldr	r3, [pc, #188]	; (3138 <flashy_flash2+0x28c>)
    307c:	785b      	ldrb	r3, [r3, #1]
    307e:	2208      	movs	r2, #8
    3080:	4393      	bics	r3, r2
    3082:	b2da      	uxtb	r2, r3
    3084:	4b2c      	ldr	r3, [pc, #176]	; (3138 <flashy_flash2+0x28c>)
    3086:	705a      	strb	r2, [r3, #1]
			data_LED[FOG_FRONT_RIGHT_PORT][FOG_FRONT_RIGHT_ADR] &= ~(1 << FOG_FRONT_RIGHT_PIN);
    3088:	4b2b      	ldr	r3, [pc, #172]	; (3138 <flashy_flash2+0x28c>)
    308a:	789b      	ldrb	r3, [r3, #2]
    308c:	2208      	movs	r2, #8
    308e:	4393      	bics	r3, r2
    3090:	b2da      	uxtb	r2, r3
    3092:	4b29      	ldr	r3, [pc, #164]	; (3138 <flashy_flash2+0x28c>)
    3094:	709a      	strb	r2, [r3, #2]
			data_LED[LOW_BEAM_LEFT_PORT][LOW_BEAM_LEFT_ADR] |= (1 << LOW_BEAM_LEFT_PIN);
    3096:	4b28      	ldr	r3, [pc, #160]	; (3138 <flashy_flash2+0x28c>)
    3098:	785b      	ldrb	r3, [r3, #1]
    309a:	2202      	movs	r2, #2
    309c:	4313      	orrs	r3, r2
    309e:	b2da      	uxtb	r2, r3
    30a0:	4b25      	ldr	r3, [pc, #148]	; (3138 <flashy_flash2+0x28c>)
    30a2:	705a      	strb	r2, [r3, #1]
			data_LED[LOW_BEAM_RIGHT_PORT][LOW_BEAM_RIGHT_ADR] |= (1 << LOW_BEAM_RIGHT_PIN);
    30a4:	4b24      	ldr	r3, [pc, #144]	; (3138 <flashy_flash2+0x28c>)
    30a6:	789b      	ldrb	r3, [r3, #2]
    30a8:	2202      	movs	r2, #2
    30aa:	4313      	orrs	r3, r2
    30ac:	b2da      	uxtb	r2, r3
    30ae:	4b22      	ldr	r3, [pc, #136]	; (3138 <flashy_flash2+0x28c>)
    30b0:	709a      	strb	r2, [r3, #2]
			data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] &= ~(1 << POSITION_REAR_LEFT_PIN);
    30b2:	4b21      	ldr	r3, [pc, #132]	; (3138 <flashy_flash2+0x28c>)
    30b4:	78db      	ldrb	r3, [r3, #3]
    30b6:	2201      	movs	r2, #1
    30b8:	4393      	bics	r3, r2
    30ba:	b2da      	uxtb	r2, r3
    30bc:	4b1e      	ldr	r3, [pc, #120]	; (3138 <flashy_flash2+0x28c>)
    30be:	70da      	strb	r2, [r3, #3]
			data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] &= ~(1 << POSITION_REAR_RIGHT_PIN);
    30c0:	4b1d      	ldr	r3, [pc, #116]	; (3138 <flashy_flash2+0x28c>)
    30c2:	791b      	ldrb	r3, [r3, #4]
    30c4:	2201      	movs	r2, #1
    30c6:	4393      	bics	r3, r2
    30c8:	b2da      	uxtb	r2, r3
    30ca:	4b1b      	ldr	r3, [pc, #108]	; (3138 <flashy_flash2+0x28c>)
    30cc:	711a      	strb	r2, [r3, #4]
			state++;
    30ce:	4b17      	ldr	r3, [pc, #92]	; (312c <flashy_flash2+0x280>)
    30d0:	781b      	ldrb	r3, [r3, #0]
    30d2:	3301      	adds	r3, #1
    30d4:	b2da      	uxtb	r2, r3
    30d6:	4b15      	ldr	r3, [pc, #84]	; (312c <flashy_flash2+0x280>)
    30d8:	701a      	strb	r2, [r3, #0]
			break;
    30da:	e024      	b.n	3126 <flashy_flash2+0x27a>
		case 10:
			data_LED[LOW_BEAM_LEFT_PORT][LOW_BEAM_LEFT_ADR] &= ~(1 << LOW_BEAM_LEFT_PIN);
    30dc:	4b16      	ldr	r3, [pc, #88]	; (3138 <flashy_flash2+0x28c>)
    30de:	785b      	ldrb	r3, [r3, #1]
    30e0:	2202      	movs	r2, #2
    30e2:	4393      	bics	r3, r2
    30e4:	b2da      	uxtb	r2, r3
    30e6:	4b14      	ldr	r3, [pc, #80]	; (3138 <flashy_flash2+0x28c>)
    30e8:	705a      	strb	r2, [r3, #1]
			data_LED[LOW_BEAM_RIGHT_PORT][LOW_BEAM_RIGHT_ADR] &= ~(1 << LOW_BEAM_RIGHT_PIN);
    30ea:	4b13      	ldr	r3, [pc, #76]	; (3138 <flashy_flash2+0x28c>)
    30ec:	789b      	ldrb	r3, [r3, #2]
    30ee:	2202      	movs	r2, #2
    30f0:	4393      	bics	r3, r2
    30f2:	b2da      	uxtb	r2, r3
    30f4:	4b10      	ldr	r3, [pc, #64]	; (3138 <flashy_flash2+0x28c>)
    30f6:	709a      	strb	r2, [r3, #2]
			data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_LEFT_ADR] |= (1 << HIGH_BEAM_LEFT_PIN);
    30f8:	4b0f      	ldr	r3, [pc, #60]	; (3138 <flashy_flash2+0x28c>)
    30fa:	785b      	ldrb	r3, [r3, #1]
    30fc:	2204      	movs	r2, #4
    30fe:	4313      	orrs	r3, r2
    3100:	b2da      	uxtb	r2, r3
    3102:	4b0d      	ldr	r3, [pc, #52]	; (3138 <flashy_flash2+0x28c>)
    3104:	705a      	strb	r2, [r3, #1]
			data_LED[HIGH_BEAM_RIGHT_PORT][HIGH_BEAM_RIGHT_ADR] |= (1 << HIGH_BEAM_RIGHT_PIN);
    3106:	4b0c      	ldr	r3, [pc, #48]	; (3138 <flashy_flash2+0x28c>)
    3108:	789b      	ldrb	r3, [r3, #2]
    310a:	2204      	movs	r2, #4
    310c:	4313      	orrs	r3, r2
    310e:	b2da      	uxtb	r2, r3
    3110:	4b09      	ldr	r3, [pc, #36]	; (3138 <flashy_flash2+0x28c>)
    3112:	709a      	strb	r2, [r3, #2]
			state = 0;
    3114:	4b05      	ldr	r3, [pc, #20]	; (312c <flashy_flash2+0x280>)
    3116:	2200      	movs	r2, #0
    3118:	701a      	strb	r2, [r3, #0]
			break;
    311a:	e004      	b.n	3126 <flashy_flash2+0x27a>
		default:
			reset_all_lights();
    311c:	4b05      	ldr	r3, [pc, #20]	; (3134 <flashy_flash2+0x288>)
    311e:	4798      	blx	r3
			state = 0;
    3120:	4b02      	ldr	r3, [pc, #8]	; (312c <flashy_flash2+0x280>)
    3122:	2200      	movs	r2, #0
    3124:	701a      	strb	r2, [r3, #0]
	}
}
    3126:	46c0      	nop			; (mov r8, r8)
    3128:	46bd      	mov	sp, r7
    312a:	bd80      	pop	{r7, pc}
    312c:	200000e1 	.word	0x200000e1
    3130:	000086dc 	.word	0x000086dc
    3134:	0000331d 	.word	0x0000331d
    3138:	2000015c 	.word	0x2000015c

0000313c <flashy_fades>:

void flashy_fades()
{
    313c:	b580      	push	{r7, lr}
    313e:	af00      	add	r7, sp, #0
	static uint8_t pwm_val = 0;
	static uint8_t duty_cycle = 10;
	
	if (pwm_val > duty_cycle)
    3140:	4b73      	ldr	r3, [pc, #460]	; (3310 <flashy_fades+0x1d4>)
    3142:	781a      	ldrb	r2, [r3, #0]
    3144:	4b73      	ldr	r3, [pc, #460]	; (3314 <flashy_fades+0x1d8>)
    3146:	781b      	ldrb	r3, [r3, #0]
    3148:	429a      	cmp	r2, r3
    314a:	d962      	bls.n	3212 <flashy_fades+0xd6>
	{
		data_LED[POSITION_FRONT_LEFT_PORT][POSITION_FRONT_LEFT_ADR] |= (1 << POSITION_FRONT_LEFT_PIN);
    314c:	4b72      	ldr	r3, [pc, #456]	; (3318 <flashy_fades+0x1dc>)
    314e:	785b      	ldrb	r3, [r3, #1]
    3150:	2201      	movs	r2, #1
    3152:	4313      	orrs	r3, r2
    3154:	b2da      	uxtb	r2, r3
    3156:	4b70      	ldr	r3, [pc, #448]	; (3318 <flashy_fades+0x1dc>)
    3158:	705a      	strb	r2, [r3, #1]
		data_LED[POSITION_FRONT_RIGHT_PORT][POSITION_FRONT_RIGHT_ADR] |= (1 << POSITION_FRONT_RIGHT_PIN);
    315a:	4b6f      	ldr	r3, [pc, #444]	; (3318 <flashy_fades+0x1dc>)
    315c:	789b      	ldrb	r3, [r3, #2]
    315e:	2201      	movs	r2, #1
    3160:	4313      	orrs	r3, r2
    3162:	b2da      	uxtb	r2, r3
    3164:	4b6c      	ldr	r3, [pc, #432]	; (3318 <flashy_fades+0x1dc>)
    3166:	709a      	strb	r2, [r3, #2]
		data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] |= (1 << POSITION_REAR_LEFT_PIN);
    3168:	4b6b      	ldr	r3, [pc, #428]	; (3318 <flashy_fades+0x1dc>)
    316a:	78db      	ldrb	r3, [r3, #3]
    316c:	2201      	movs	r2, #1
    316e:	4313      	orrs	r3, r2
    3170:	b2da      	uxtb	r2, r3
    3172:	4b69      	ldr	r3, [pc, #420]	; (3318 <flashy_fades+0x1dc>)
    3174:	70da      	strb	r2, [r3, #3]
		data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] |= (1 << POSITION_REAR_RIGHT_PIN);
    3176:	4b68      	ldr	r3, [pc, #416]	; (3318 <flashy_fades+0x1dc>)
    3178:	791b      	ldrb	r3, [r3, #4]
    317a:	2201      	movs	r2, #1
    317c:	4313      	orrs	r3, r2
    317e:	b2da      	uxtb	r2, r3
    3180:	4b65      	ldr	r3, [pc, #404]	; (3318 <flashy_fades+0x1dc>)
    3182:	711a      	strb	r2, [r3, #4]
		
		data_LED[LOW_BEAM_RIGHT_PORT][LOW_BEAM_RIGHT_ADR] |= (1 << LOW_BEAM_RIGHT_PIN);
    3184:	4b64      	ldr	r3, [pc, #400]	; (3318 <flashy_fades+0x1dc>)
    3186:	789b      	ldrb	r3, [r3, #2]
    3188:	2202      	movs	r2, #2
    318a:	4313      	orrs	r3, r2
    318c:	b2da      	uxtb	r2, r3
    318e:	4b62      	ldr	r3, [pc, #392]	; (3318 <flashy_fades+0x1dc>)
    3190:	709a      	strb	r2, [r3, #2]
		data_LED[LOW_BEAM_LEFT_PORT][LOW_BEAM_LEFT_ADR] |= (1 << LOW_BEAM_LEFT_PIN);
    3192:	4b61      	ldr	r3, [pc, #388]	; (3318 <flashy_fades+0x1dc>)
    3194:	785b      	ldrb	r3, [r3, #1]
    3196:	2202      	movs	r2, #2
    3198:	4313      	orrs	r3, r2
    319a:	b2da      	uxtb	r2, r3
    319c:	4b5e      	ldr	r3, [pc, #376]	; (3318 <flashy_fades+0x1dc>)
    319e:	705a      	strb	r2, [r3, #1]
		
		data_LED[HIGH_BEAM_RIGHT_PORT][HIGH_BEAM_RIGHT_ADR] |= (1 << HIGH_BEAM_RIGHT_PIN);
    31a0:	4b5d      	ldr	r3, [pc, #372]	; (3318 <flashy_fades+0x1dc>)
    31a2:	789b      	ldrb	r3, [r3, #2]
    31a4:	2204      	movs	r2, #4
    31a6:	4313      	orrs	r3, r2
    31a8:	b2da      	uxtb	r2, r3
    31aa:	4b5b      	ldr	r3, [pc, #364]	; (3318 <flashy_fades+0x1dc>)
    31ac:	709a      	strb	r2, [r3, #2]
		data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_LEFT_ADR] |= (1 << HIGH_BEAM_LEFT_PIN);
    31ae:	4b5a      	ldr	r3, [pc, #360]	; (3318 <flashy_fades+0x1dc>)
    31b0:	785b      	ldrb	r3, [r3, #1]
    31b2:	2204      	movs	r2, #4
    31b4:	4313      	orrs	r3, r2
    31b6:	b2da      	uxtb	r2, r3
    31b8:	4b57      	ldr	r3, [pc, #348]	; (3318 <flashy_fades+0x1dc>)
    31ba:	705a      	strb	r2, [r3, #1]
		
		data_LED[BLINK_RIGHT_PORT][BLINK_RIGHT_ADR] |= (1 << BLINK_RIGHT_PIN);
    31bc:	4b56      	ldr	r3, [pc, #344]	; (3318 <flashy_fades+0x1dc>)
    31be:	791b      	ldrb	r3, [r3, #4]
    31c0:	2204      	movs	r2, #4
    31c2:	4313      	orrs	r3, r2
    31c4:	b2da      	uxtb	r2, r3
    31c6:	4b54      	ldr	r3, [pc, #336]	; (3318 <flashy_fades+0x1dc>)
    31c8:	711a      	strb	r2, [r3, #4]
		data_LED[BLINK_LEFT_PORT][BLINK_LEFT_ADR] |= (1 << BLINK_LEFT_PIN);
    31ca:	4b53      	ldr	r3, [pc, #332]	; (3318 <flashy_fades+0x1dc>)
    31cc:	78db      	ldrb	r3, [r3, #3]
    31ce:	2204      	movs	r2, #4
    31d0:	4313      	orrs	r3, r2
    31d2:	b2da      	uxtb	r2, r3
    31d4:	4b50      	ldr	r3, [pc, #320]	; (3318 <flashy_fades+0x1dc>)
    31d6:	70da      	strb	r2, [r3, #3]
		
		data_LED[REVERSE_LEFT_PORT][REVERSE_LEFT_ADR] |= (1 << REVERSE_LEFT_PIN);
    31d8:	4b4f      	ldr	r3, [pc, #316]	; (3318 <flashy_fades+0x1dc>)
    31da:	78db      	ldrb	r3, [r3, #3]
    31dc:	2202      	movs	r2, #2
    31de:	4313      	orrs	r3, r2
    31e0:	b2da      	uxtb	r2, r3
    31e2:	4b4d      	ldr	r3, [pc, #308]	; (3318 <flashy_fades+0x1dc>)
    31e4:	70da      	strb	r2, [r3, #3]
		data_LED[REVERSE_RIGHT_PORT][REVERSE_RIGHT_ADR] |= (1 << REVERSE_RIGHT_PIN);
    31e6:	4b4c      	ldr	r3, [pc, #304]	; (3318 <flashy_fades+0x1dc>)
    31e8:	791b      	ldrb	r3, [r3, #4]
    31ea:	2202      	movs	r2, #2
    31ec:	4313      	orrs	r3, r2
    31ee:	b2da      	uxtb	r2, r3
    31f0:	4b49      	ldr	r3, [pc, #292]	; (3318 <flashy_fades+0x1dc>)
    31f2:	711a      	strb	r2, [r3, #4]
		
		data_LED[FOG_FRONT_RIGHT_PORT][FOG_FRONT_RIGHT_ADR] |= (1 << FOG_FRONT_RIGHT_PIN);
    31f4:	4b48      	ldr	r3, [pc, #288]	; (3318 <flashy_fades+0x1dc>)
    31f6:	789b      	ldrb	r3, [r3, #2]
    31f8:	2208      	movs	r2, #8
    31fa:	4313      	orrs	r3, r2
    31fc:	b2da      	uxtb	r2, r3
    31fe:	4b46      	ldr	r3, [pc, #280]	; (3318 <flashy_fades+0x1dc>)
    3200:	709a      	strb	r2, [r3, #2]
		data_LED[FOG_FRONT_LEFT_PORT][FOG_FRONT_LEFT_ADR] |= (1 << FOG_FRONT_LEFT_PIN);
    3202:	4b45      	ldr	r3, [pc, #276]	; (3318 <flashy_fades+0x1dc>)
    3204:	785b      	ldrb	r3, [r3, #1]
    3206:	2208      	movs	r2, #8
    3208:	4313      	orrs	r3, r2
    320a:	b2da      	uxtb	r2, r3
    320c:	4b42      	ldr	r3, [pc, #264]	; (3318 <flashy_fades+0x1dc>)
    320e:	705a      	strb	r2, [r3, #1]
    3210:	e061      	b.n	32d6 <flashy_fades+0x19a>
	}
	else
	{
		data_LED[POSITION_FRONT_LEFT_PORT][POSITION_FRONT_LEFT_ADR] &= ~(1 << POSITION_FRONT_LEFT_PIN);
    3212:	4b41      	ldr	r3, [pc, #260]	; (3318 <flashy_fades+0x1dc>)
    3214:	785b      	ldrb	r3, [r3, #1]
    3216:	2201      	movs	r2, #1
    3218:	4393      	bics	r3, r2
    321a:	b2da      	uxtb	r2, r3
    321c:	4b3e      	ldr	r3, [pc, #248]	; (3318 <flashy_fades+0x1dc>)
    321e:	705a      	strb	r2, [r3, #1]
		data_LED[POSITION_FRONT_RIGHT_PORT][POSITION_FRONT_RIGHT_ADR] &= ~(1 << POSITION_FRONT_RIGHT_PIN);
    3220:	4b3d      	ldr	r3, [pc, #244]	; (3318 <flashy_fades+0x1dc>)
    3222:	789b      	ldrb	r3, [r3, #2]
    3224:	2201      	movs	r2, #1
    3226:	4393      	bics	r3, r2
    3228:	b2da      	uxtb	r2, r3
    322a:	4b3b      	ldr	r3, [pc, #236]	; (3318 <flashy_fades+0x1dc>)
    322c:	709a      	strb	r2, [r3, #2]
		data_LED[POSITION_REAR_LEFT_PORT][POSITION_REAR_LEFT_ADR] &= ~(1 << POSITION_REAR_LEFT_PIN);
    322e:	4b3a      	ldr	r3, [pc, #232]	; (3318 <flashy_fades+0x1dc>)
    3230:	78db      	ldrb	r3, [r3, #3]
    3232:	2201      	movs	r2, #1
    3234:	4393      	bics	r3, r2
    3236:	b2da      	uxtb	r2, r3
    3238:	4b37      	ldr	r3, [pc, #220]	; (3318 <flashy_fades+0x1dc>)
    323a:	70da      	strb	r2, [r3, #3]
		data_LED[POSITION_REAR_RIGHT_PORT][POSITION_REAR_RIGHT_ADR] &= ~(1 << POSITION_REAR_RIGHT_PIN);
    323c:	4b36      	ldr	r3, [pc, #216]	; (3318 <flashy_fades+0x1dc>)
    323e:	791b      	ldrb	r3, [r3, #4]
    3240:	2201      	movs	r2, #1
    3242:	4393      	bics	r3, r2
    3244:	b2da      	uxtb	r2, r3
    3246:	4b34      	ldr	r3, [pc, #208]	; (3318 <flashy_fades+0x1dc>)
    3248:	711a      	strb	r2, [r3, #4]
		
		data_LED[LOW_BEAM_RIGHT_PORT][LOW_BEAM_RIGHT_ADR] &= ~(1 << LOW_BEAM_RIGHT_PIN);
    324a:	4b33      	ldr	r3, [pc, #204]	; (3318 <flashy_fades+0x1dc>)
    324c:	789b      	ldrb	r3, [r3, #2]
    324e:	2202      	movs	r2, #2
    3250:	4393      	bics	r3, r2
    3252:	b2da      	uxtb	r2, r3
    3254:	4b30      	ldr	r3, [pc, #192]	; (3318 <flashy_fades+0x1dc>)
    3256:	709a      	strb	r2, [r3, #2]
		data_LED[LOW_BEAM_LEFT_PORT][LOW_BEAM_LEFT_ADR] &= ~(1 << LOW_BEAM_LEFT_PIN);
    3258:	4b2f      	ldr	r3, [pc, #188]	; (3318 <flashy_fades+0x1dc>)
    325a:	785b      	ldrb	r3, [r3, #1]
    325c:	2202      	movs	r2, #2
    325e:	4393      	bics	r3, r2
    3260:	b2da      	uxtb	r2, r3
    3262:	4b2d      	ldr	r3, [pc, #180]	; (3318 <flashy_fades+0x1dc>)
    3264:	705a      	strb	r2, [r3, #1]
		
		data_LED[HIGH_BEAM_RIGHT_PORT][HIGH_BEAM_RIGHT_ADR] &= ~(1 << HIGH_BEAM_RIGHT_PIN);
    3266:	4b2c      	ldr	r3, [pc, #176]	; (3318 <flashy_fades+0x1dc>)
    3268:	789b      	ldrb	r3, [r3, #2]
    326a:	2204      	movs	r2, #4
    326c:	4393      	bics	r3, r2
    326e:	b2da      	uxtb	r2, r3
    3270:	4b29      	ldr	r3, [pc, #164]	; (3318 <flashy_fades+0x1dc>)
    3272:	709a      	strb	r2, [r3, #2]
		data_LED[HIGH_BEAM_LEFT_PORT][HIGH_BEAM_LEFT_ADR] &= ~(1 << HIGH_BEAM_LEFT_PIN);
    3274:	4b28      	ldr	r3, [pc, #160]	; (3318 <flashy_fades+0x1dc>)
    3276:	785b      	ldrb	r3, [r3, #1]
    3278:	2204      	movs	r2, #4
    327a:	4393      	bics	r3, r2
    327c:	b2da      	uxtb	r2, r3
    327e:	4b26      	ldr	r3, [pc, #152]	; (3318 <flashy_fades+0x1dc>)
    3280:	705a      	strb	r2, [r3, #1]
		
		data_LED[BLINK_RIGHT_PORT][BLINK_RIGHT_ADR] &= ~(1 << BLINK_RIGHT_PIN);
    3282:	4b25      	ldr	r3, [pc, #148]	; (3318 <flashy_fades+0x1dc>)
    3284:	791b      	ldrb	r3, [r3, #4]
    3286:	2204      	movs	r2, #4
    3288:	4393      	bics	r3, r2
    328a:	b2da      	uxtb	r2, r3
    328c:	4b22      	ldr	r3, [pc, #136]	; (3318 <flashy_fades+0x1dc>)
    328e:	711a      	strb	r2, [r3, #4]
		data_LED[BLINK_LEFT_PORT][BLINK_LEFT_ADR] &= ~(1 << BLINK_LEFT_PIN);
    3290:	4b21      	ldr	r3, [pc, #132]	; (3318 <flashy_fades+0x1dc>)
    3292:	78db      	ldrb	r3, [r3, #3]
    3294:	2204      	movs	r2, #4
    3296:	4393      	bics	r3, r2
    3298:	b2da      	uxtb	r2, r3
    329a:	4b1f      	ldr	r3, [pc, #124]	; (3318 <flashy_fades+0x1dc>)
    329c:	70da      	strb	r2, [r3, #3]
		
		data_LED[REVERSE_LEFT_PORT][REVERSE_LEFT_ADR] &= ~(1 << REVERSE_LEFT_PIN);
    329e:	4b1e      	ldr	r3, [pc, #120]	; (3318 <flashy_fades+0x1dc>)
    32a0:	78db      	ldrb	r3, [r3, #3]
    32a2:	2202      	movs	r2, #2
    32a4:	4393      	bics	r3, r2
    32a6:	b2da      	uxtb	r2, r3
    32a8:	4b1b      	ldr	r3, [pc, #108]	; (3318 <flashy_fades+0x1dc>)
    32aa:	70da      	strb	r2, [r3, #3]
		data_LED[REVERSE_RIGHT_PORT][REVERSE_RIGHT_ADR] &= ~(1 << REVERSE_RIGHT_PIN);
    32ac:	4b1a      	ldr	r3, [pc, #104]	; (3318 <flashy_fades+0x1dc>)
    32ae:	791b      	ldrb	r3, [r3, #4]
    32b0:	2202      	movs	r2, #2
    32b2:	4393      	bics	r3, r2
    32b4:	b2da      	uxtb	r2, r3
    32b6:	4b18      	ldr	r3, [pc, #96]	; (3318 <flashy_fades+0x1dc>)
    32b8:	711a      	strb	r2, [r3, #4]
		
		data_LED[FOG_FRONT_RIGHT_PORT][FOG_FRONT_RIGHT_ADR] &= ~(1 << FOG_FRONT_RIGHT_PIN);
    32ba:	4b17      	ldr	r3, [pc, #92]	; (3318 <flashy_fades+0x1dc>)
    32bc:	789b      	ldrb	r3, [r3, #2]
    32be:	2208      	movs	r2, #8
    32c0:	4393      	bics	r3, r2
    32c2:	b2da      	uxtb	r2, r3
    32c4:	4b14      	ldr	r3, [pc, #80]	; (3318 <flashy_fades+0x1dc>)
    32c6:	709a      	strb	r2, [r3, #2]
		data_LED[FOG_FRONT_LEFT_PORT][FOG_FRONT_LEFT_ADR] &= ~(1 << FOG_FRONT_LEFT_PIN);
    32c8:	4b13      	ldr	r3, [pc, #76]	; (3318 <flashy_fades+0x1dc>)
    32ca:	785b      	ldrb	r3, [r3, #1]
    32cc:	2208      	movs	r2, #8
    32ce:	4393      	bics	r3, r2
    32d0:	b2da      	uxtb	r2, r3
    32d2:	4b11      	ldr	r3, [pc, #68]	; (3318 <flashy_fades+0x1dc>)
    32d4:	705a      	strb	r2, [r3, #1]
	}
	
	pwm_val++;
    32d6:	4b0e      	ldr	r3, [pc, #56]	; (3310 <flashy_fades+0x1d4>)
    32d8:	781b      	ldrb	r3, [r3, #0]
    32da:	3301      	adds	r3, #1
    32dc:	b2da      	uxtb	r2, r3
    32de:	4b0c      	ldr	r3, [pc, #48]	; (3310 <flashy_fades+0x1d4>)
    32e0:	701a      	strb	r2, [r3, #0]
	if (pwm_val >= PWM_FREQ)
    32e2:	4b0b      	ldr	r3, [pc, #44]	; (3310 <flashy_fades+0x1d4>)
    32e4:	781b      	ldrb	r3, [r3, #0]
    32e6:	2b63      	cmp	r3, #99	; 0x63
    32e8:	d90f      	bls.n	330a <flashy_fades+0x1ce>
	{
		pwm_val = 0;
    32ea:	4b09      	ldr	r3, [pc, #36]	; (3310 <flashy_fades+0x1d4>)
    32ec:	2200      	movs	r2, #0
    32ee:	701a      	strb	r2, [r3, #0]
		duty_cycle += 10;
    32f0:	4b08      	ldr	r3, [pc, #32]	; (3314 <flashy_fades+0x1d8>)
    32f2:	781b      	ldrb	r3, [r3, #0]
    32f4:	330a      	adds	r3, #10
    32f6:	b2da      	uxtb	r2, r3
    32f8:	4b06      	ldr	r3, [pc, #24]	; (3314 <flashy_fades+0x1d8>)
    32fa:	701a      	strb	r2, [r3, #0]
		if (duty_cycle >= PWM_FREQ)
    32fc:	4b05      	ldr	r3, [pc, #20]	; (3314 <flashy_fades+0x1d8>)
    32fe:	781b      	ldrb	r3, [r3, #0]
    3300:	2b63      	cmp	r3, #99	; 0x63
    3302:	d902      	bls.n	330a <flashy_fades+0x1ce>
		{
			duty_cycle = 10;
    3304:	4b03      	ldr	r3, [pc, #12]	; (3314 <flashy_fades+0x1d8>)
    3306:	220a      	movs	r2, #10
    3308:	701a      	strb	r2, [r3, #0]
		}
	}
	
}
    330a:	46c0      	nop			; (mov r8, r8)
    330c:	46bd      	mov	sp, r7
    330e:	bd80      	pop	{r7, pc}
    3310:	200000e2 	.word	0x200000e2
    3314:	20000050 	.word	0x20000050
    3318:	2000015c 	.word	0x2000015c

0000331c <reset_all_lights>:

void reset_all_lights()
{
    331c:	b580      	push	{r7, lr}
    331e:	b082      	sub	sp, #8
    3320:	af00      	add	r7, sp, #0
	for (int i=0;i<8;i++)
    3322:	2300      	movs	r3, #0
    3324:	607b      	str	r3, [r7, #4]
    3326:	e00d      	b.n	3344 <reset_all_lights+0x28>
	{
		data_LED[0][i] = 0x80;
    3328:	4a0a      	ldr	r2, [pc, #40]	; (3354 <reset_all_lights+0x38>)
    332a:	687b      	ldr	r3, [r7, #4]
    332c:	18d3      	adds	r3, r2, r3
    332e:	2280      	movs	r2, #128	; 0x80
    3330:	701a      	strb	r2, [r3, #0]
		data_LED[1][i] = 0x80;
    3332:	4a08      	ldr	r2, [pc, #32]	; (3354 <reset_all_lights+0x38>)
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	18d3      	adds	r3, r2, r3
    3338:	3308      	adds	r3, #8
    333a:	2280      	movs	r2, #128	; 0x80
    333c:	701a      	strb	r2, [r3, #0]
	
}

void reset_all_lights()
{
	for (int i=0;i<8;i++)
    333e:	687b      	ldr	r3, [r7, #4]
    3340:	3301      	adds	r3, #1
    3342:	607b      	str	r3, [r7, #4]
    3344:	687b      	ldr	r3, [r7, #4]
    3346:	2b07      	cmp	r3, #7
    3348:	ddee      	ble.n	3328 <reset_all_lights+0xc>
	{
		data_LED[0][i] = 0x80;
		data_LED[1][i] = 0x80;
	}
}
    334a:	46c0      	nop			; (mov r8, r8)
    334c:	46bd      	mov	sp, r7
    334e:	b002      	add	sp, #8
    3350:	bd80      	pop	{r7, pc}
    3352:	46c0      	nop			; (mov r8, r8)
    3354:	2000015c 	.word	0x2000015c

00003358 <a_okay>:

bool a_okay()
{
    3358:	b580      	push	{r7, lr}
    335a:	b082      	sub	sp, #8
    335c:	af00      	add	r7, sp, #0
	mcp23017_read_all_ports(read_data);
    335e:	4b21      	ldr	r3, [pc, #132]	; (33e4 <a_okay+0x8c>)
    3360:	0018      	movs	r0, r3
    3362:	4b21      	ldr	r3, [pc, #132]	; (33e8 <a_okay+0x90>)
    3364:	4798      	blx	r3
	
	bool return_val = true;
    3366:	1dfb      	adds	r3, r7, #7
    3368:	2201      	movs	r2, #1
    336a:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
    336c:	2300      	movs	r3, #0
    336e:	603b      	str	r3, [r7, #0]
    3370:	e02e      	b.n	33d0 <a_okay+0x78>
	{
		if (mcp23017_data.devices[i].should_be_enabled)
    3372:	4b1e      	ldr	r3, [pc, #120]	; (33ec <a_okay+0x94>)
    3374:	683a      	ldr	r2, [r7, #0]
    3376:	00d2      	lsls	r2, r2, #3
    3378:	5cd3      	ldrb	r3, [r2, r3]
    337a:	2b00      	cmp	r3, #0
    337c:	d025      	beq.n	33ca <a_okay+0x72>
		{
			if ((read_data[0][i] & ~0x80) != (data_LED[0][i] & ~0x80))
    337e:	4a19      	ldr	r2, [pc, #100]	; (33e4 <a_okay+0x8c>)
    3380:	683b      	ldr	r3, [r7, #0]
    3382:	18d3      	adds	r3, r2, r3
    3384:	781a      	ldrb	r2, [r3, #0]
    3386:	491a      	ldr	r1, [pc, #104]	; (33f0 <a_okay+0x98>)
    3388:	683b      	ldr	r3, [r7, #0]
    338a:	18cb      	adds	r3, r1, r3
    338c:	781b      	ldrb	r3, [r3, #0]
    338e:	4053      	eors	r3, r2
    3390:	b2db      	uxtb	r3, r3
    3392:	001a      	movs	r2, r3
    3394:	2380      	movs	r3, #128	; 0x80
    3396:	439a      	bics	r2, r3
    3398:	1e13      	subs	r3, r2, #0
    339a:	d002      	beq.n	33a2 <a_okay+0x4a>
			{
				return_val = false;
    339c:	1dfb      	adds	r3, r7, #7
    339e:	2200      	movs	r2, #0
    33a0:	701a      	strb	r2, [r3, #0]
			}
			if ((read_data[1][i] & ~0x80) != (data_LED[1][i] & ~0x80))
    33a2:	4a10      	ldr	r2, [pc, #64]	; (33e4 <a_okay+0x8c>)
    33a4:	683b      	ldr	r3, [r7, #0]
    33a6:	18d3      	adds	r3, r2, r3
    33a8:	3308      	adds	r3, #8
    33aa:	781a      	ldrb	r2, [r3, #0]
    33ac:	4910      	ldr	r1, [pc, #64]	; (33f0 <a_okay+0x98>)
    33ae:	683b      	ldr	r3, [r7, #0]
    33b0:	18cb      	adds	r3, r1, r3
    33b2:	3308      	adds	r3, #8
    33b4:	781b      	ldrb	r3, [r3, #0]
    33b6:	4053      	eors	r3, r2
    33b8:	b2db      	uxtb	r3, r3
    33ba:	001a      	movs	r2, r3
    33bc:	2380      	movs	r3, #128	; 0x80
    33be:	439a      	bics	r2, r3
    33c0:	1e13      	subs	r3, r2, #0
    33c2:	d002      	beq.n	33ca <a_okay+0x72>
			{
				return_val = false;
    33c4:	1dfb      	adds	r3, r7, #7
    33c6:	2200      	movs	r2, #0
    33c8:	701a      	strb	r2, [r3, #0]
bool a_okay()
{
	mcp23017_read_all_ports(read_data);
	
	bool return_val = true;
	for (int i=0;i<8;i++)
    33ca:	683b      	ldr	r3, [r7, #0]
    33cc:	3301      	adds	r3, #1
    33ce:	603b      	str	r3, [r7, #0]
    33d0:	683b      	ldr	r3, [r7, #0]
    33d2:	2b07      	cmp	r3, #7
    33d4:	ddcd      	ble.n	3372 <a_okay+0x1a>
			{
				return_val = false;
			}
		}
	}
	return return_val;
    33d6:	1dfb      	adds	r3, r7, #7
    33d8:	781b      	ldrb	r3, [r3, #0]
    33da:	0018      	movs	r0, r3
    33dc:	46bd      	mov	sp, r7
    33de:	b002      	add	sp, #8
    33e0:	bd80      	pop	{r7, pc}
    33e2:	46c0      	nop			; (mov r8, r8)
    33e4:	200001f8 	.word	0x200001f8
    33e8:	0000383d 	.word	0x0000383d
    33ec:	20000010 	.word	0x20000010
    33f0:	2000015c 	.word	0x2000015c

000033f4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    33f4:	b580      	push	{r7, lr}
    33f6:	b084      	sub	sp, #16
    33f8:	af00      	add	r7, sp, #0
    33fa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    33fc:	687b      	ldr	r3, [r7, #4]
    33fe:	681b      	ldr	r3, [r3, #0]
    3400:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3402:	68fb      	ldr	r3, [r7, #12]
    3404:	69db      	ldr	r3, [r3, #28]
    3406:	2207      	movs	r2, #7
    3408:	4013      	ands	r3, r2
    340a:	1e5a      	subs	r2, r3, #1
    340c:	4193      	sbcs	r3, r2
    340e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    3410:	0018      	movs	r0, r3
    3412:	46bd      	mov	sp, r7
    3414:	b004      	add	sp, #16
    3416:	bd80      	pop	{r7, pc}

00003418 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    3418:	b580      	push	{r7, lr}
    341a:	b082      	sub	sp, #8
    341c:	af00      	add	r7, sp, #0
    341e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    3420:	46c0      	nop			; (mov r8, r8)
    3422:	687b      	ldr	r3, [r7, #4]
    3424:	0018      	movs	r0, r3
    3426:	4b04      	ldr	r3, [pc, #16]	; (3438 <_i2c_master_wait_for_sync+0x20>)
    3428:	4798      	blx	r3
    342a:	1e03      	subs	r3, r0, #0
    342c:	d1f9      	bne.n	3422 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    342e:	46c0      	nop			; (mov r8, r8)
    3430:	46bd      	mov	sp, r7
    3432:	b002      	add	sp, #8
    3434:	bd80      	pop	{r7, pc}
    3436:	46c0      	nop			; (mov r8, r8)
    3438:	000033f5 	.word	0x000033f5

0000343c <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    343c:	b580      	push	{r7, lr}
    343e:	b082      	sub	sp, #8
    3440:	af00      	add	r7, sp, #0
    3442:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    3444:	687b      	ldr	r3, [r7, #4]
    3446:	2264      	movs	r2, #100	; 0x64
    3448:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    344a:	687b      	ldr	r3, [r7, #4]
    344c:	4a1b      	ldr	r2, [pc, #108]	; (34bc <i2c_master_get_config_defaults+0x80>)
    344e:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    3450:	687b      	ldr	r3, [r7, #4]
    3452:	2200      	movs	r2, #0
    3454:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    3456:	687b      	ldr	r3, [r7, #4]
    3458:	2200      	movs	r2, #0
    345a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    345c:	687b      	ldr	r3, [r7, #4]
    345e:	2200      	movs	r2, #0
    3460:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    3462:	687b      	ldr	r3, [r7, #4]
    3464:	2280      	movs	r2, #128	; 0x80
    3466:	0392      	lsls	r2, r2, #14
    3468:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    346a:	687b      	ldr	r3, [r7, #4]
    346c:	2201      	movs	r2, #1
    346e:	4252      	negs	r2, r2
    3470:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    3472:	687b      	ldr	r3, [r7, #4]
    3474:	2201      	movs	r2, #1
    3476:	4252      	negs	r2, r2
    3478:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    347a:	687b      	ldr	r3, [r7, #4]
    347c:	2200      	movs	r2, #0
    347e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    3480:	687b      	ldr	r3, [r7, #4]
    3482:	2200      	movs	r2, #0
    3484:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    3486:	687b      	ldr	r3, [r7, #4]
    3488:	2224      	movs	r2, #36	; 0x24
    348a:	2100      	movs	r1, #0
    348c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    348e:	687b      	ldr	r3, [r7, #4]
    3490:	2200      	movs	r2, #0
    3492:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    3494:	687b      	ldr	r3, [r7, #4]
    3496:	222c      	movs	r2, #44	; 0x2c
    3498:	2100      	movs	r1, #0
    349a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    349c:	687b      	ldr	r3, [r7, #4]
    349e:	222d      	movs	r2, #45	; 0x2d
    34a0:	2100      	movs	r1, #0
    34a2:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    34a4:	687b      	ldr	r3, [r7, #4]
    34a6:	222e      	movs	r2, #46	; 0x2e
    34a8:	2100      	movs	r1, #0
    34aa:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    34ac:	687b      	ldr	r3, [r7, #4]
    34ae:	22d7      	movs	r2, #215	; 0xd7
    34b0:	861a      	strh	r2, [r3, #48]	; 0x30
}
    34b2:	46c0      	nop			; (mov r8, r8)
    34b4:	46bd      	mov	sp, r7
    34b6:	b002      	add	sp, #8
    34b8:	bd80      	pop	{r7, pc}
    34ba:	46c0      	nop			; (mov r8, r8)
    34bc:	00000d48 	.word	0x00000d48

000034c0 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    34c0:	b580      	push	{r7, lr}
    34c2:	b084      	sub	sp, #16
    34c4:	af00      	add	r7, sp, #0
    34c6:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    34c8:	687b      	ldr	r3, [r7, #4]
    34ca:	681b      	ldr	r3, [r3, #0]
    34cc:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    34ce:	2300      	movs	r3, #0
    34d0:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    34d2:	687b      	ldr	r3, [r7, #4]
    34d4:	0018      	movs	r0, r3
    34d6:	4b10      	ldr	r3, [pc, #64]	; (3518 <i2c_master_enable+0x58>)
    34d8:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    34da:	68bb      	ldr	r3, [r7, #8]
    34dc:	681b      	ldr	r3, [r3, #0]
    34de:	2202      	movs	r2, #2
    34e0:	431a      	orrs	r2, r3
    34e2:	68bb      	ldr	r3, [r7, #8]
    34e4:	601a      	str	r2, [r3, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    34e6:	e00c      	b.n	3502 <i2c_master_enable+0x42>
		timeout_counter++;
    34e8:	68fb      	ldr	r3, [r7, #12]
    34ea:	3301      	adds	r3, #1
    34ec:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    34ee:	687b      	ldr	r3, [r7, #4]
    34f0:	88db      	ldrh	r3, [r3, #6]
    34f2:	1e1a      	subs	r2, r3, #0
    34f4:	68fb      	ldr	r3, [r7, #12]
    34f6:	429a      	cmp	r2, r3
    34f8:	d803      	bhi.n	3502 <i2c_master_enable+0x42>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    34fa:	68bb      	ldr	r3, [r7, #8]
    34fc:	2210      	movs	r2, #16
    34fe:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    3500:	e006      	b.n	3510 <i2c_master_enable+0x50>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    3502:	68bb      	ldr	r3, [r7, #8]
    3504:	8b5b      	ldrh	r3, [r3, #26]
    3506:	b29b      	uxth	r3, r3
    3508:	001a      	movs	r2, r3
    350a:	2310      	movs	r3, #16
    350c:	4013      	ands	r3, r2
    350e:	d0eb      	beq.n	34e8 <i2c_master_enable+0x28>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
			/* Workaround #1 */
			return;
		}
	}
}
    3510:	46bd      	mov	sp, r7
    3512:	b004      	add	sp, #16
    3514:	bd80      	pop	{r7, pc}
    3516:	46c0      	nop			; (mov r8, r8)
    3518:	00003419 	.word	0x00003419

0000351c <configure_i2c_master>:
 */ 

#include "i2c.h"

void configure_i2c_master(void)
{
    351c:	b580      	push	{r7, lr}
    351e:	b08e      	sub	sp, #56	; 0x38
    3520:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    3522:	1d3b      	adds	r3, r7, #4
    3524:	0018      	movs	r0, r3
    3526:	4b0b      	ldr	r3, [pc, #44]	; (3554 <configure_i2c_master+0x38>)
    3528:	4798      	blx	r3
	/* Change buffer timeout to something longer. */
	config_i2c_master.buffer_timeout = 10000;
    352a:	1d3b      	adds	r3, r7, #4
    352c:	4a0a      	ldr	r2, [pc, #40]	; (3558 <configure_i2c_master+0x3c>)
    352e:	82da      	strh	r2, [r3, #22]
	config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_100KHZ;
    3530:	1d3b      	adds	r3, r7, #4
    3532:	2264      	movs	r2, #100	; 0x64
    3534:	601a      	str	r2, [r3, #0]
	/* Initialize and enable device with config. */
	i2c_master_init(&i2c_master_instance, SERCOM5, &config_i2c_master);
    3536:	1d3a      	adds	r2, r7, #4
    3538:	4908      	ldr	r1, [pc, #32]	; (355c <configure_i2c_master+0x40>)
    353a:	4b09      	ldr	r3, [pc, #36]	; (3560 <configure_i2c_master+0x44>)
    353c:	0018      	movs	r0, r3
    353e:	4b09      	ldr	r3, [pc, #36]	; (3564 <configure_i2c_master+0x48>)
    3540:	4798      	blx	r3
	i2c_master_enable(&i2c_master_instance);
    3542:	4b07      	ldr	r3, [pc, #28]	; (3560 <configure_i2c_master+0x44>)
    3544:	0018      	movs	r0, r3
    3546:	4b08      	ldr	r3, [pc, #32]	; (3568 <configure_i2c_master+0x4c>)
    3548:	4798      	blx	r3
}
    354a:	46c0      	nop			; (mov r8, r8)
    354c:	46bd      	mov	sp, r7
    354e:	b00e      	add	sp, #56	; 0x38
    3550:	bd80      	pop	{r7, pc}
    3552:	46c0      	nop			; (mov r8, r8)
    3554:	0000343d 	.word	0x0000343d
    3558:	00002710 	.word	0x00002710
    355c:	42001c00 	.word	0x42001c00
    3560:	2000023c 	.word	0x2000023c
    3564:	000011d5 	.word	0x000011d5
    3568:	000034c1 	.word	0x000034c1

0000356c <i2c_write>:

uint8_t i2c_write(uint8_t address,uint8_t* data, uint8_t data_size)
{
    356c:	b580      	push	{r7, lr}
    356e:	b086      	sub	sp, #24
    3570:	af00      	add	r7, sp, #0
    3572:	6039      	str	r1, [r7, #0]
    3574:	0011      	movs	r1, r2
    3576:	1dfb      	adds	r3, r7, #7
    3578:	1c02      	adds	r2, r0, #0
    357a:	701a      	strb	r2, [r3, #0]
    357c:	1dbb      	adds	r3, r7, #6
    357e:	1c0a      	adds	r2, r1, #0
    3580:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
    3582:	1dfb      	adds	r3, r7, #7
    3584:	781b      	ldrb	r3, [r3, #0]
    3586:	b29a      	uxth	r2, r3
    3588:	2308      	movs	r3, #8
    358a:	18fb      	adds	r3, r7, r3
    358c:	801a      	strh	r2, [r3, #0]
    358e:	1dbb      	adds	r3, r7, #6
    3590:	781b      	ldrb	r3, [r3, #0]
    3592:	b29a      	uxth	r2, r3
    3594:	2308      	movs	r3, #8
    3596:	18fb      	adds	r3, r7, r3
    3598:	805a      	strh	r2, [r3, #2]
    359a:	2308      	movs	r3, #8
    359c:	18fb      	adds	r3, r7, r3
    359e:	683a      	ldr	r2, [r7, #0]
    35a0:	605a      	str	r2, [r3, #4]
    35a2:	2308      	movs	r3, #8
    35a4:	18fb      	adds	r3, r7, r3
    35a6:	2200      	movs	r2, #0
    35a8:	721a      	strb	r2, [r3, #8]
    35aa:	2308      	movs	r3, #8
    35ac:	18fb      	adds	r3, r7, r3
    35ae:	2200      	movs	r2, #0
    35b0:	725a      	strb	r2, [r3, #9]
    35b2:	2308      	movs	r3, #8
    35b4:	18fb      	adds	r3, r7, r3
    35b6:	2200      	movs	r2, #0
    35b8:	729a      	strb	r2, [r3, #10]
		.data        = data,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	uint16_t timeout = 0;
    35ba:	2316      	movs	r3, #22
    35bc:	18fb      	adds	r3, r7, r3
    35be:	2200      	movs	r2, #0
    35c0:	801a      	strh	r2, [r3, #0]

	return i2c_master_write_packet_wait(&i2c_master_instance,&packet);
    35c2:	2308      	movs	r3, #8
    35c4:	18fa      	adds	r2, r7, r3
    35c6:	4b05      	ldr	r3, [pc, #20]	; (35dc <i2c_write+0x70>)
    35c8:	0011      	movs	r1, r2
    35ca:	0018      	movs	r0, r3
    35cc:	4b04      	ldr	r3, [pc, #16]	; (35e0 <i2c_write+0x74>)
    35ce:	4798      	blx	r3
    35d0:	0003      	movs	r3, r0
	{
		if (timeout++ == I2C_TIMEOUT) {
			break;
		}
	}*/
}
    35d2:	0018      	movs	r0, r3
    35d4:	46bd      	mov	sp, r7
    35d6:	b006      	add	sp, #24
    35d8:	bd80      	pop	{r7, pc}
    35da:	46c0      	nop			; (mov r8, r8)
    35dc:	2000023c 	.word	0x2000023c
    35e0:	000017d5 	.word	0x000017d5

000035e4 <i2c_read>:
	}	
	return found_array;
}

void i2c_read(uint8_t addr,uint8_t reg, uint8_t data_length,uint8_t* data_ptr)
{
    35e4:	b590      	push	{r4, r7, lr}
    35e6:	b08b      	sub	sp, #44	; 0x2c
    35e8:	af00      	add	r7, sp, #0
    35ea:	0004      	movs	r4, r0
    35ec:	0008      	movs	r0, r1
    35ee:	0011      	movs	r1, r2
    35f0:	603b      	str	r3, [r7, #0]
    35f2:	1dfb      	adds	r3, r7, #7
    35f4:	1c22      	adds	r2, r4, #0
    35f6:	701a      	strb	r2, [r3, #0]
    35f8:	1dbb      	adds	r3, r7, #6
    35fa:	1c02      	adds	r2, r0, #0
    35fc:	701a      	strb	r2, [r3, #0]
    35fe:	1d7b      	adds	r3, r7, #5
    3600:	1c0a      	adds	r2, r1, #0
    3602:	701a      	strb	r2, [r3, #0]
	//uint8_t read_datab[data_length];
	uint8_t state = 0;
    3604:	2325      	movs	r3, #37	; 0x25
    3606:	18fb      	adds	r3, r7, r3
    3608:	2200      	movs	r2, #0
    360a:	701a      	strb	r2, [r3, #0]
	//uint8_t address = (addr << 1) + 1;
	
	uint8_t data[2];
	data[0] = reg;
    360c:	2320      	movs	r3, #32
    360e:	18fb      	adds	r3, r7, r3
    3610:	1dba      	adds	r2, r7, #6
    3612:	7812      	ldrb	r2, [r2, #0]
    3614:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
    3616:	2320      	movs	r3, #32
    3618:	18fb      	adds	r3, r7, r3
    361a:	22ff      	movs	r2, #255	; 0xff
    361c:	705a      	strb	r2, [r3, #1]
	
	struct i2c_master_packet packet = {
    361e:	1dfb      	adds	r3, r7, #7
    3620:	781b      	ldrb	r3, [r3, #0]
    3622:	b29b      	uxth	r3, r3
    3624:	2280      	movs	r2, #128	; 0x80
    3626:	0052      	lsls	r2, r2, #1
    3628:	4313      	orrs	r3, r2
    362a:	b29a      	uxth	r2, r3
    362c:	2314      	movs	r3, #20
    362e:	18fb      	adds	r3, r7, r3
    3630:	801a      	strh	r2, [r3, #0]
    3632:	1d7b      	adds	r3, r7, #5
    3634:	781b      	ldrb	r3, [r3, #0]
    3636:	b29a      	uxth	r2, r3
    3638:	2314      	movs	r3, #20
    363a:	18fb      	adds	r3, r7, r3
    363c:	805a      	strh	r2, [r3, #2]
    363e:	2314      	movs	r3, #20
    3640:	18fb      	adds	r3, r7, r3
    3642:	2220      	movs	r2, #32
    3644:	18ba      	adds	r2, r7, r2
    3646:	605a      	str	r2, [r3, #4]
    3648:	2314      	movs	r3, #20
    364a:	18fb      	adds	r3, r7, r3
    364c:	2200      	movs	r2, #0
    364e:	721a      	strb	r2, [r3, #8]
    3650:	2314      	movs	r3, #20
    3652:	18fb      	adds	r3, r7, r3
    3654:	2200      	movs	r2, #0
    3656:	725a      	strb	r2, [r3, #9]
    3658:	2314      	movs	r3, #20
    365a:	18fb      	adds	r3, r7, r3
    365c:	2200      	movs	r2, #0
    365e:	729a      	strb	r2, [r3, #10]
		.data        = data,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	uint16_t timeout = 0;
    3660:	2326      	movs	r3, #38	; 0x26
    3662:	18fb      	adds	r3, r7, r3
    3664:	2200      	movs	r2, #0
    3666:	801a      	strh	r2, [r3, #0]

	while (i2c_master_write_packet_wait(&i2c_master_instance,&packet) != STATUS_OK)
    3668:	e008      	b.n	367c <i2c_read+0x98>
	{
		if (timeout++ == I2C_TIMEOUT) {
    366a:	2326      	movs	r3, #38	; 0x26
    366c:	18fb      	adds	r3, r7, r3
    366e:	881b      	ldrh	r3, [r3, #0]
    3670:	2226      	movs	r2, #38	; 0x26
    3672:	18ba      	adds	r2, r7, r2
    3674:	1c59      	adds	r1, r3, #1
    3676:	8011      	strh	r1, [r2, #0]
    3678:	2b0a      	cmp	r3, #10
    367a:	d030      	beq.n	36de <i2c_read+0xfa>
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	uint16_t timeout = 0;

	while (i2c_master_write_packet_wait(&i2c_master_instance,&packet) != STATUS_OK)
    367c:	2314      	movs	r3, #20
    367e:	18fa      	adds	r2, r7, r3
    3680:	4b19      	ldr	r3, [pc, #100]	; (36e8 <i2c_read+0x104>)
    3682:	0011      	movs	r1, r2
    3684:	0018      	movs	r0, r3
    3686:	4b19      	ldr	r3, [pc, #100]	; (36ec <i2c_read+0x108>)
    3688:	4798      	blx	r3
    368a:	1e03      	subs	r3, r0, #0
    368c:	d1ed      	bne.n	366a <i2c_read+0x86>
			return;
			break;
		}
	}
	
	struct i2c_master_packet read_packet = {
    368e:	1dfb      	adds	r3, r7, #7
    3690:	781b      	ldrb	r3, [r3, #0]
    3692:	b29a      	uxth	r2, r3
    3694:	2308      	movs	r3, #8
    3696:	18fb      	adds	r3, r7, r3
    3698:	801a      	strh	r2, [r3, #0]
    369a:	1d7b      	adds	r3, r7, #5
    369c:	781b      	ldrb	r3, [r3, #0]
    369e:	b29a      	uxth	r2, r3
    36a0:	2308      	movs	r3, #8
    36a2:	18fb      	adds	r3, r7, r3
    36a4:	805a      	strh	r2, [r3, #2]
    36a6:	2308      	movs	r3, #8
    36a8:	18fb      	adds	r3, r7, r3
    36aa:	683a      	ldr	r2, [r7, #0]
    36ac:	605a      	str	r2, [r3, #4]
    36ae:	2308      	movs	r3, #8
    36b0:	18fb      	adds	r3, r7, r3
    36b2:	2200      	movs	r2, #0
    36b4:	721a      	strb	r2, [r3, #8]
    36b6:	2308      	movs	r3, #8
    36b8:	18fb      	adds	r3, r7, r3
    36ba:	2200      	movs	r2, #0
    36bc:	725a      	strb	r2, [r3, #9]
    36be:	2308      	movs	r3, #8
    36c0:	18fb      	adds	r3, r7, r3
    36c2:	2200      	movs	r2, #0
    36c4:	729a      	strb	r2, [r3, #10]
		.data        = data_ptr,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	state = i2c_master_read_packet_wait(&i2c_master_instance,&read_packet);
    36c6:	2325      	movs	r3, #37	; 0x25
    36c8:	18fc      	adds	r4, r7, r3
    36ca:	2308      	movs	r3, #8
    36cc:	18fa      	adds	r2, r7, r3
    36ce:	4b06      	ldr	r3, [pc, #24]	; (36e8 <i2c_read+0x104>)
    36d0:	0011      	movs	r1, r2
    36d2:	0018      	movs	r0, r3
    36d4:	4b06      	ldr	r3, [pc, #24]	; (36f0 <i2c_read+0x10c>)
    36d6:	4798      	blx	r3
    36d8:	0003      	movs	r3, r0
    36da:	7023      	strb	r3, [r4, #0]
    36dc:	e000      	b.n	36e0 <i2c_read+0xfc>
	uint16_t timeout = 0;

	while (i2c_master_write_packet_wait(&i2c_master_instance,&packet) != STATUS_OK)
	{
		if (timeout++ == I2C_TIMEOUT) {
			return;
    36de:	46c0      	nop			; (mov r8, r8)
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	state = i2c_master_read_packet_wait(&i2c_master_instance,&read_packet);
	//return read_data;
}
    36e0:	46bd      	mov	sp, r7
    36e2:	b00b      	add	sp, #44	; 0x2c
    36e4:	bd90      	pop	{r4, r7, pc}
    36e6:	46c0      	nop			; (mov r8, r8)
    36e8:	2000023c 	.word	0x2000023c
    36ec:	000017d5 	.word	0x000017d5
    36f0:	0000162d 	.word	0x0000162d

000036f4 <init_all_ports>:
	data[1] = 0xFF;
	state = i2c_write(MCP23017_I2C_ADDR_000,(uint8_t *)data,2);
}

uint8_t init_all_ports(void)
{
    36f4:	b590      	push	{r4, r7, lr}
    36f6:	b085      	sub	sp, #20
    36f8:	af00      	add	r7, sp, #0
	uint8_t states = 0;
    36fa:	230f      	movs	r3, #15
    36fc:	18fb      	adds	r3, r7, r3
    36fe:	2200      	movs	r2, #0
    3700:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[1] = 0x00;
    3702:	1d3b      	adds	r3, r7, #4
    3704:	2200      	movs	r2, #0
    3706:	705a      	strb	r2, [r3, #1]
	
	for (int i=0;i<8;i++)
    3708:	2300      	movs	r3, #0
    370a:	60bb      	str	r3, [r7, #8]
    370c:	e036      	b.n	377c <init_all_ports+0x88>
	{
		data[0] = MCP23017_IODIRA;
    370e:	1d3b      	adds	r3, r7, #4
    3710:	2200      	movs	r2, #0
    3712:	701a      	strb	r2, [r3, #0]
		uint8_t state = i2c_write(MCP23017_I2C_ADDR_000+i,(uint8_t *)data,2);
    3714:	68bb      	ldr	r3, [r7, #8]
    3716:	b2db      	uxtb	r3, r3
    3718:	3320      	adds	r3, #32
    371a:	b2db      	uxtb	r3, r3
    371c:	1dfc      	adds	r4, r7, #7
    371e:	1d39      	adds	r1, r7, #4
    3720:	2202      	movs	r2, #2
    3722:	0018      	movs	r0, r3
    3724:	4b28      	ldr	r3, [pc, #160]	; (37c8 <init_all_ports+0xd4>)
    3726:	4798      	blx	r3
    3728:	0003      	movs	r3, r0
    372a:	7023      	strb	r3, [r4, #0]
		if (state == STATUS_OK)
    372c:	1dfb      	adds	r3, r7, #7
    372e:	781b      	ldrb	r3, [r3, #0]
    3730:	2b00      	cmp	r3, #0
    3732:	d120      	bne.n	3776 <init_all_ports+0x82>
		{
			data[0] = MCP23017_IODIRB;
    3734:	1d3b      	adds	r3, r7, #4
    3736:	2201      	movs	r2, #1
    3738:	701a      	strb	r2, [r3, #0]
			state = i2c_write(MCP23017_I2C_ADDR_000+i,(uint8_t *)data,2);
    373a:	68bb      	ldr	r3, [r7, #8]
    373c:	b2db      	uxtb	r3, r3
    373e:	3320      	adds	r3, #32
    3740:	b2db      	uxtb	r3, r3
    3742:	1dfc      	adds	r4, r7, #7
    3744:	1d39      	adds	r1, r7, #4
    3746:	2202      	movs	r2, #2
    3748:	0018      	movs	r0, r3
    374a:	4b1f      	ldr	r3, [pc, #124]	; (37c8 <init_all_ports+0xd4>)
    374c:	4798      	blx	r3
    374e:	0003      	movs	r3, r0
    3750:	7023      	strb	r3, [r4, #0]
			if (state == STATUS_OK)
    3752:	1dfb      	adds	r3, r7, #7
    3754:	781b      	ldrb	r3, [r3, #0]
    3756:	2b00      	cmp	r3, #0
    3758:	d10d      	bne.n	3776 <init_all_ports+0x82>
			{
				states |= (1 << i);
    375a:	2201      	movs	r2, #1
    375c:	68bb      	ldr	r3, [r7, #8]
    375e:	409a      	lsls	r2, r3
    3760:	0013      	movs	r3, r2
    3762:	b25a      	sxtb	r2, r3
    3764:	230f      	movs	r3, #15
    3766:	18fb      	adds	r3, r7, r3
    3768:	781b      	ldrb	r3, [r3, #0]
    376a:	b25b      	sxtb	r3, r3
    376c:	4313      	orrs	r3, r2
    376e:	b25a      	sxtb	r2, r3
    3770:	230f      	movs	r3, #15
    3772:	18fb      	adds	r3, r7, r3
    3774:	701a      	strb	r2, [r3, #0]
{
	uint8_t states = 0;
	uint8_t data[2];
	data[1] = 0x00;
	
	for (int i=0;i<8;i++)
    3776:	68bb      	ldr	r3, [r7, #8]
    3778:	3301      	adds	r3, #1
    377a:	60bb      	str	r3, [r7, #8]
    377c:	68bb      	ldr	r3, [r7, #8]
    377e:	2b07      	cmp	r3, #7
    3780:	ddc5      	ble.n	370e <init_all_ports+0x1a>
				states |= (1 << i);
			}
		}
	}
	
	data[1] = 0x80;
    3782:	1d3b      	adds	r3, r7, #4
    3784:	2280      	movs	r2, #128	; 0x80
    3786:	705a      	strb	r2, [r3, #1]
	data[0] = MCP23017_GPIOA;
    3788:	1d3b      	adds	r3, r7, #4
    378a:	2212      	movs	r2, #18
    378c:	701a      	strb	r2, [r3, #0]
	uint8_t state = i2c_write(MCP23017_I2C_ADDR_001,(uint8_t *)data,2);
    378e:	1dbc      	adds	r4, r7, #6
    3790:	1d3b      	adds	r3, r7, #4
    3792:	2202      	movs	r2, #2
    3794:	0019      	movs	r1, r3
    3796:	2021      	movs	r0, #33	; 0x21
    3798:	4b0b      	ldr	r3, [pc, #44]	; (37c8 <init_all_ports+0xd4>)
    379a:	4798      	blx	r3
    379c:	0003      	movs	r3, r0
    379e:	7023      	strb	r3, [r4, #0]
	data[0] = MCP23017_GPIOB;
    37a0:	1d3b      	adds	r3, r7, #4
    37a2:	2213      	movs	r2, #19
    37a4:	701a      	strb	r2, [r3, #0]
	state = i2c_write(MCP23017_I2C_ADDR_001,(uint8_t *)data,2);
    37a6:	1dbc      	adds	r4, r7, #6
    37a8:	1d3b      	adds	r3, r7, #4
    37aa:	2202      	movs	r2, #2
    37ac:	0019      	movs	r1, r3
    37ae:	2021      	movs	r0, #33	; 0x21
    37b0:	4b05      	ldr	r3, [pc, #20]	; (37c8 <init_all_ports+0xd4>)
    37b2:	4798      	blx	r3
    37b4:	0003      	movs	r3, r0
    37b6:	7023      	strb	r3, [r4, #0]
	
	return states;
    37b8:	230f      	movs	r3, #15
    37ba:	18fb      	adds	r3, r7, r3
    37bc:	781b      	ldrb	r3, [r3, #0]
}
    37be:	0018      	movs	r0, r3
    37c0:	46bd      	mov	sp, r7
    37c2:	b005      	add	sp, #20
    37c4:	bd90      	pop	{r4, r7, pc}
    37c6:	46c0      	nop			; (mov r8, r8)
    37c8:	0000356d 	.word	0x0000356d

000037cc <mcp23017_set_pins>:
	data[0] = MCP23017_GPIOB;
	state = i2c_write(MCP23017_I2C_ADDR_000,(uint8_t *)data,2);	
}

void mcp23017_set_pins(uint8_t addr, uint8_t porta, uint8_t portb)
{
    37cc:	b590      	push	{r4, r7, lr}
    37ce:	b085      	sub	sp, #20
    37d0:	af00      	add	r7, sp, #0
    37d2:	0004      	movs	r4, r0
    37d4:	0008      	movs	r0, r1
    37d6:	0011      	movs	r1, r2
    37d8:	1dfb      	adds	r3, r7, #7
    37da:	1c22      	adds	r2, r4, #0
    37dc:	701a      	strb	r2, [r3, #0]
    37de:	1dbb      	adds	r3, r7, #6
    37e0:	1c02      	adds	r2, r0, #0
    37e2:	701a      	strb	r2, [r3, #0]
    37e4:	1d7b      	adds	r3, r7, #5
    37e6:	1c0a      	adds	r2, r1, #0
    37e8:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = MCP23017_GPIOA;
    37ea:	230c      	movs	r3, #12
    37ec:	18fb      	adds	r3, r7, r3
    37ee:	2212      	movs	r2, #18
    37f0:	701a      	strb	r2, [r3, #0]
	data[1] = porta;
    37f2:	230c      	movs	r3, #12
    37f4:	18fb      	adds	r3, r7, r3
    37f6:	1dba      	adds	r2, r7, #6
    37f8:	7812      	ldrb	r2, [r2, #0]
    37fa:	705a      	strb	r2, [r3, #1]
	i2c_write(addr,(uint8_t *)data,2);
    37fc:	230c      	movs	r3, #12
    37fe:	18f9      	adds	r1, r7, r3
    3800:	1dfb      	adds	r3, r7, #7
    3802:	781b      	ldrb	r3, [r3, #0]
    3804:	2202      	movs	r2, #2
    3806:	0018      	movs	r0, r3
    3808:	4b0b      	ldr	r3, [pc, #44]	; (3838 <mcp23017_set_pins+0x6c>)
    380a:	4798      	blx	r3
	data[0] = MCP23017_GPIOB;
    380c:	230c      	movs	r3, #12
    380e:	18fb      	adds	r3, r7, r3
    3810:	2213      	movs	r2, #19
    3812:	701a      	strb	r2, [r3, #0]
	data[1] = portb;
    3814:	230c      	movs	r3, #12
    3816:	18fb      	adds	r3, r7, r3
    3818:	1d7a      	adds	r2, r7, #5
    381a:	7812      	ldrb	r2, [r2, #0]
    381c:	705a      	strb	r2, [r3, #1]
	i2c_write(addr,(uint8_t *)data,2);
    381e:	230c      	movs	r3, #12
    3820:	18f9      	adds	r1, r7, r3
    3822:	1dfb      	adds	r3, r7, #7
    3824:	781b      	ldrb	r3, [r3, #0]
    3826:	2202      	movs	r2, #2
    3828:	0018      	movs	r0, r3
    382a:	4b03      	ldr	r3, [pc, #12]	; (3838 <mcp23017_set_pins+0x6c>)
    382c:	4798      	blx	r3
}
    382e:	46c0      	nop			; (mov r8, r8)
    3830:	46bd      	mov	sp, r7
    3832:	b005      	add	sp, #20
    3834:	bd90      	pop	{r4, r7, pc}
    3836:	46c0      	nop			; (mov r8, r8)
    3838:	0000356d 	.word	0x0000356d

0000383c <mcp23017_read_all_ports>:

uint8_t data_being_read[8][2];

void mcp23017_read_all_ports(uint8_t read_data_ptr[2][8])
{
    383c:	b590      	push	{r4, r7, lr}
    383e:	b085      	sub	sp, #20
    3840:	af00      	add	r7, sp, #0
    3842:	6078      	str	r0, [r7, #4]
	
	//uint8_t data = 0x00;
	for (uint8_t i=0;i<8;i++)
    3844:	230f      	movs	r3, #15
    3846:	18fb      	adds	r3, r7, r3
    3848:	2200      	movs	r2, #0
    384a:	701a      	strb	r2, [r3, #0]
    384c:	e024      	b.n	3898 <mcp23017_read_all_ports+0x5c>
	{
		//data = 0x00;
		//data_being_read[i][0] = 0;
		//read_data_ptr[i][0] = 0;
		i2c_read(MCP23017_I2C_ADDR_000+i,MCP23017_GPIOA, 1,(uint8_t *)&read_data_ptr[0][i]);
    384e:	230f      	movs	r3, #15
    3850:	18fb      	adds	r3, r7, r3
    3852:	781b      	ldrb	r3, [r3, #0]
    3854:	3320      	adds	r3, #32
    3856:	b2d8      	uxtb	r0, r3
    3858:	230f      	movs	r3, #15
    385a:	18fb      	adds	r3, r7, r3
    385c:	781b      	ldrb	r3, [r3, #0]
    385e:	687a      	ldr	r2, [r7, #4]
    3860:	18d3      	adds	r3, r2, r3
    3862:	2201      	movs	r2, #1
    3864:	2112      	movs	r1, #18
    3866:	4c11      	ldr	r4, [pc, #68]	; (38ac <mcp23017_read_all_ports+0x70>)
    3868:	47a0      	blx	r4
		//read_data[i][0] = data;
		//data_being_read[i][0] = data;
		//read_data_ptr[i][1] = 0;
		i2c_read(MCP23017_I2C_ADDR_000+i,MCP23017_GPIOB, 1,(uint8_t *)&read_data_ptr[1][i]);
    386a:	230f      	movs	r3, #15
    386c:	18fb      	adds	r3, r7, r3
    386e:	781b      	ldrb	r3, [r3, #0]
    3870:	3320      	adds	r3, #32
    3872:	b2d8      	uxtb	r0, r3
    3874:	687b      	ldr	r3, [r7, #4]
    3876:	3308      	adds	r3, #8
    3878:	001a      	movs	r2, r3
    387a:	230f      	movs	r3, #15
    387c:	18fb      	adds	r3, r7, r3
    387e:	781b      	ldrb	r3, [r3, #0]
    3880:	18d3      	adds	r3, r2, r3
    3882:	2201      	movs	r2, #1
    3884:	2113      	movs	r1, #19
    3886:	4c09      	ldr	r4, [pc, #36]	; (38ac <mcp23017_read_all_ports+0x70>)
    3888:	47a0      	blx	r4

void mcp23017_read_all_ports(uint8_t read_data_ptr[2][8])
{
	
	//uint8_t data = 0x00;
	for (uint8_t i=0;i<8;i++)
    388a:	230f      	movs	r3, #15
    388c:	18fb      	adds	r3, r7, r3
    388e:	781a      	ldrb	r2, [r3, #0]
    3890:	230f      	movs	r3, #15
    3892:	18fb      	adds	r3, r7, r3
    3894:	3201      	adds	r2, #1
    3896:	701a      	strb	r2, [r3, #0]
    3898:	230f      	movs	r3, #15
    389a:	18fb      	adds	r3, r7, r3
    389c:	781b      	ldrb	r3, [r3, #0]
    389e:	2b07      	cmp	r3, #7
    38a0:	d9d5      	bls.n	384e <mcp23017_read_all_ports+0x12>
		i2c_read(MCP23017_I2C_ADDR_000+i,MCP23017_GPIOB, 1,(uint8_t *)&read_data_ptr[1][i]);
		//data_being_read[i][1] = data;
		//read_data[i][1] = data;
	}
	//read_data = data_being_read;
    38a2:	46c0      	nop			; (mov r8, r8)
    38a4:	46bd      	mov	sp, r7
    38a6:	b005      	add	sp, #20
    38a8:	bd90      	pop	{r4, r7, pc}
    38aa:	46c0      	nop			; (mov r8, r8)
    38ac:	000035e5 	.word	0x000035e5

000038b0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    38b0:	b580      	push	{r7, lr}
    38b2:	b084      	sub	sp, #16
    38b4:	af00      	add	r7, sp, #0
    38b6:	0002      	movs	r2, r0
    38b8:	1dfb      	adds	r3, r7, #7
    38ba:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    38bc:	230f      	movs	r3, #15
    38be:	18fb      	adds	r3, r7, r3
    38c0:	1dfa      	adds	r2, r7, #7
    38c2:	7812      	ldrb	r2, [r2, #0]
    38c4:	09d2      	lsrs	r2, r2, #7
    38c6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    38c8:	230e      	movs	r3, #14
    38ca:	18fb      	adds	r3, r7, r3
    38cc:	1dfa      	adds	r2, r7, #7
    38ce:	7812      	ldrb	r2, [r2, #0]
    38d0:	0952      	lsrs	r2, r2, #5
    38d2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    38d4:	4b0d      	ldr	r3, [pc, #52]	; (390c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    38d6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    38d8:	230f      	movs	r3, #15
    38da:	18fb      	adds	r3, r7, r3
    38dc:	781b      	ldrb	r3, [r3, #0]
    38de:	2b00      	cmp	r3, #0
    38e0:	d10f      	bne.n	3902 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    38e2:	230f      	movs	r3, #15
    38e4:	18fb      	adds	r3, r7, r3
    38e6:	781b      	ldrb	r3, [r3, #0]
    38e8:	009b      	lsls	r3, r3, #2
    38ea:	2210      	movs	r2, #16
    38ec:	4694      	mov	ip, r2
    38ee:	44bc      	add	ip, r7
    38f0:	4463      	add	r3, ip
    38f2:	3b08      	subs	r3, #8
    38f4:	681a      	ldr	r2, [r3, #0]
    38f6:	230e      	movs	r3, #14
    38f8:	18fb      	adds	r3, r7, r3
    38fa:	781b      	ldrb	r3, [r3, #0]
    38fc:	01db      	lsls	r3, r3, #7
    38fe:	18d3      	adds	r3, r2, r3
    3900:	e000      	b.n	3904 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3902:	2300      	movs	r3, #0
	}
}
    3904:	0018      	movs	r0, r3
    3906:	46bd      	mov	sp, r7
    3908:	b004      	add	sp, #16
    390a:	bd80      	pop	{r7, pc}
    390c:	41004400 	.word	0x41004400

00003910 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    3910:	b580      	push	{r7, lr}
    3912:	b084      	sub	sp, #16
    3914:	af00      	add	r7, sp, #0
    3916:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3918:	687b      	ldr	r3, [r7, #4]
    391a:	681b      	ldr	r3, [r3, #0]
    391c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    391e:	68fb      	ldr	r3, [r7, #12]
    3920:	7e5b      	ldrb	r3, [r3, #25]
    3922:	b2db      	uxtb	r3, r3
    3924:	b25b      	sxtb	r3, r3
    3926:	2b00      	cmp	r3, #0
    3928:	da01      	bge.n	392e <adc_is_syncing+0x1e>
		return true;
    392a:	2301      	movs	r3, #1
    392c:	e000      	b.n	3930 <adc_is_syncing+0x20>
	}

	return false;
    392e:	2300      	movs	r3, #0
}
    3930:	0018      	movs	r0, r3
    3932:	46bd      	mov	sp, r7
    3934:	b004      	add	sp, #16
    3936:	bd80      	pop	{r7, pc}

00003938 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    3938:	b580      	push	{r7, lr}
    393a:	b086      	sub	sp, #24
    393c:	af00      	add	r7, sp, #0
    393e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3940:	687b      	ldr	r3, [r7, #4]
    3942:	681b      	ldr	r3, [r3, #0]
    3944:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    3946:	693b      	ldr	r3, [r7, #16]
    3948:	7e1b      	ldrb	r3, [r3, #24]
    394a:	b2db      	uxtb	r3, r3
    394c:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    394e:	2300      	movs	r3, #0
    3950:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3952:	68fb      	ldr	r3, [r7, #12]
    3954:	2201      	movs	r2, #1
    3956:	4013      	ands	r3, r2
    3958:	d003      	beq.n	3962 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    395a:	697b      	ldr	r3, [r7, #20]
    395c:	2201      	movs	r2, #1
    395e:	4313      	orrs	r3, r2
    3960:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    3962:	68fb      	ldr	r3, [r7, #12]
    3964:	2204      	movs	r2, #4
    3966:	4013      	ands	r3, r2
    3968:	d003      	beq.n	3972 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    396a:	697b      	ldr	r3, [r7, #20]
    396c:	2202      	movs	r2, #2
    396e:	4313      	orrs	r3, r2
    3970:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3972:	68fb      	ldr	r3, [r7, #12]
    3974:	2202      	movs	r2, #2
    3976:	4013      	ands	r3, r2
    3978:	d003      	beq.n	3982 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    397a:	697b      	ldr	r3, [r7, #20]
    397c:	2204      	movs	r2, #4
    397e:	4313      	orrs	r3, r2
    3980:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    3982:	697b      	ldr	r3, [r7, #20]
}
    3984:	0018      	movs	r0, r3
    3986:	46bd      	mov	sp, r7
    3988:	b006      	add	sp, #24
    398a:	bd80      	pop	{r7, pc}

0000398c <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    398c:	b580      	push	{r7, lr}
    398e:	b084      	sub	sp, #16
    3990:	af00      	add	r7, sp, #0
    3992:	6078      	str	r0, [r7, #4]
    3994:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3996:	687b      	ldr	r3, [r7, #4]
    3998:	681b      	ldr	r3, [r3, #0]
    399a:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    399c:	2300      	movs	r3, #0
    399e:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    39a0:	683b      	ldr	r3, [r7, #0]
    39a2:	2201      	movs	r2, #1
    39a4:	4013      	ands	r3, r2
    39a6:	d003      	beq.n	39b0 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    39a8:	68fb      	ldr	r3, [r7, #12]
    39aa:	2201      	movs	r2, #1
    39ac:	4313      	orrs	r3, r2
    39ae:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    39b0:	683b      	ldr	r3, [r7, #0]
    39b2:	2202      	movs	r2, #2
    39b4:	4013      	ands	r3, r2
    39b6:	d003      	beq.n	39c0 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    39b8:	68fb      	ldr	r3, [r7, #12]
    39ba:	2204      	movs	r2, #4
    39bc:	4313      	orrs	r3, r2
    39be:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    39c0:	683b      	ldr	r3, [r7, #0]
    39c2:	2204      	movs	r2, #4
    39c4:	4013      	ands	r3, r2
    39c6:	d003      	beq.n	39d0 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    39c8:	68fb      	ldr	r3, [r7, #12]
    39ca:	2202      	movs	r2, #2
    39cc:	4313      	orrs	r3, r2
    39ce:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    39d0:	68fb      	ldr	r3, [r7, #12]
    39d2:	b2da      	uxtb	r2, r3
    39d4:	68bb      	ldr	r3, [r7, #8]
    39d6:	761a      	strb	r2, [r3, #24]
}
    39d8:	46c0      	nop			; (mov r8, r8)
    39da:	46bd      	mov	sp, r7
    39dc:	b004      	add	sp, #16
    39de:	bd80      	pop	{r7, pc}

000039e0 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    39e0:	b580      	push	{r7, lr}
    39e2:	b084      	sub	sp, #16
    39e4:	af00      	add	r7, sp, #0
    39e6:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    39e8:	687b      	ldr	r3, [r7, #4]
    39ea:	681b      	ldr	r3, [r3, #0]
    39ec:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    39ee:	46c0      	nop			; (mov r8, r8)
    39f0:	687b      	ldr	r3, [r7, #4]
    39f2:	0018      	movs	r0, r3
    39f4:	4b0e      	ldr	r3, [pc, #56]	; (3a30 <adc_enable+0x50>)
    39f6:	4798      	blx	r3
    39f8:	1e03      	subs	r3, r0, #0
    39fa:	d1f9      	bne.n	39f0 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    39fc:	68fb      	ldr	r3, [r7, #12]
    39fe:	220f      	movs	r2, #15
    3a00:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    3a02:	68fb      	ldr	r3, [r7, #12]
    3a04:	220f      	movs	r2, #15
    3a06:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3a08:	68fb      	ldr	r3, [r7, #12]
    3a0a:	781b      	ldrb	r3, [r3, #0]
    3a0c:	b2db      	uxtb	r3, r3
    3a0e:	2202      	movs	r2, #2
    3a10:	4313      	orrs	r3, r2
    3a12:	b2da      	uxtb	r2, r3
    3a14:	68fb      	ldr	r3, [r7, #12]
    3a16:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    3a18:	46c0      	nop			; (mov r8, r8)
    3a1a:	687b      	ldr	r3, [r7, #4]
    3a1c:	0018      	movs	r0, r3
    3a1e:	4b04      	ldr	r3, [pc, #16]	; (3a30 <adc_enable+0x50>)
    3a20:	4798      	blx	r3
    3a22:	1e03      	subs	r3, r0, #0
    3a24:	d1f9      	bne.n	3a1a <adc_enable+0x3a>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    3a26:	2300      	movs	r3, #0
}
    3a28:	0018      	movs	r0, r3
    3a2a:	46bd      	mov	sp, r7
    3a2c:	b004      	add	sp, #16
    3a2e:	bd80      	pop	{r7, pc}
    3a30:	00003911 	.word	0x00003911

00003a34 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    3a34:	b580      	push	{r7, lr}
    3a36:	b084      	sub	sp, #16
    3a38:	af00      	add	r7, sp, #0
    3a3a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3a3c:	687b      	ldr	r3, [r7, #4]
    3a3e:	681b      	ldr	r3, [r3, #0]
    3a40:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    3a42:	46c0      	nop			; (mov r8, r8)
    3a44:	687b      	ldr	r3, [r7, #4]
    3a46:	0018      	movs	r0, r3
    3a48:	4b0b      	ldr	r3, [pc, #44]	; (3a78 <adc_start_conversion+0x44>)
    3a4a:	4798      	blx	r3
    3a4c:	1e03      	subs	r3, r0, #0
    3a4e:	d1f9      	bne.n	3a44 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3a50:	68fb      	ldr	r3, [r7, #12]
    3a52:	7b1b      	ldrb	r3, [r3, #12]
    3a54:	b2db      	uxtb	r3, r3
    3a56:	2202      	movs	r2, #2
    3a58:	4313      	orrs	r3, r2
    3a5a:	b2da      	uxtb	r2, r3
    3a5c:	68fb      	ldr	r3, [r7, #12]
    3a5e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    3a60:	46c0      	nop			; (mov r8, r8)
    3a62:	687b      	ldr	r3, [r7, #4]
    3a64:	0018      	movs	r0, r3
    3a66:	4b04      	ldr	r3, [pc, #16]	; (3a78 <adc_start_conversion+0x44>)
    3a68:	4798      	blx	r3
    3a6a:	1e03      	subs	r3, r0, #0
    3a6c:	d1f9      	bne.n	3a62 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    3a6e:	46c0      	nop			; (mov r8, r8)
    3a70:	46bd      	mov	sp, r7
    3a72:	b004      	add	sp, #16
    3a74:	bd80      	pop	{r7, pc}
    3a76:	46c0      	nop			; (mov r8, r8)
    3a78:	00003911 	.word	0x00003911

00003a7c <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    3a7c:	b580      	push	{r7, lr}
    3a7e:	b084      	sub	sp, #16
    3a80:	af00      	add	r7, sp, #0
    3a82:	6078      	str	r0, [r7, #4]
    3a84:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    3a86:	687b      	ldr	r3, [r7, #4]
    3a88:	0018      	movs	r0, r3
    3a8a:	4b18      	ldr	r3, [pc, #96]	; (3aec <adc_read+0x70>)
    3a8c:	4798      	blx	r3
    3a8e:	0002      	movs	r2, r0
    3a90:	2301      	movs	r3, #1
    3a92:	4013      	ands	r3, r2
    3a94:	d101      	bne.n	3a9a <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    3a96:	2305      	movs	r3, #5
    3a98:	e023      	b.n	3ae2 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    3a9a:	687b      	ldr	r3, [r7, #4]
    3a9c:	681b      	ldr	r3, [r3, #0]
    3a9e:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    3aa0:	46c0      	nop			; (mov r8, r8)
    3aa2:	687b      	ldr	r3, [r7, #4]
    3aa4:	0018      	movs	r0, r3
    3aa6:	4b12      	ldr	r3, [pc, #72]	; (3af0 <adc_read+0x74>)
    3aa8:	4798      	blx	r3
    3aaa:	1e03      	subs	r3, r0, #0
    3aac:	d1f9      	bne.n	3aa2 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    3aae:	68fb      	ldr	r3, [r7, #12]
    3ab0:	8b5b      	ldrh	r3, [r3, #26]
    3ab2:	b29a      	uxth	r2, r3
    3ab4:	683b      	ldr	r3, [r7, #0]
    3ab6:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    3ab8:	687b      	ldr	r3, [r7, #4]
    3aba:	2101      	movs	r1, #1
    3abc:	0018      	movs	r0, r3
    3abe:	4b0d      	ldr	r3, [pc, #52]	; (3af4 <adc_read+0x78>)
    3ac0:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    3ac2:	687b      	ldr	r3, [r7, #4]
    3ac4:	0018      	movs	r0, r3
    3ac6:	4b09      	ldr	r3, [pc, #36]	; (3aec <adc_read+0x70>)
    3ac8:	4798      	blx	r3
    3aca:	0002      	movs	r2, r0
    3acc:	2304      	movs	r3, #4
    3ace:	4013      	ands	r3, r2
    3ad0:	d006      	beq.n	3ae0 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    3ad2:	687b      	ldr	r3, [r7, #4]
    3ad4:	2104      	movs	r1, #4
    3ad6:	0018      	movs	r0, r3
    3ad8:	4b06      	ldr	r3, [pc, #24]	; (3af4 <adc_read+0x78>)
    3ada:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    3adc:	231e      	movs	r3, #30
    3ade:	e000      	b.n	3ae2 <adc_read+0x66>
	}

	return STATUS_OK;
    3ae0:	2300      	movs	r3, #0
}
    3ae2:	0018      	movs	r0, r3
    3ae4:	46bd      	mov	sp, r7
    3ae6:	b004      	add	sp, #16
    3ae8:	bd80      	pop	{r7, pc}
    3aea:	46c0      	nop			; (mov r8, r8)
    3aec:	00003939 	.word	0x00003939
    3af0:	00003911 	.word	0x00003911
    3af4:	0000398d 	.word	0x0000398d

00003af8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3af8:	b580      	push	{r7, lr}
    3afa:	b082      	sub	sp, #8
    3afc:	af00      	add	r7, sp, #0
    3afe:	0002      	movs	r2, r0
    3b00:	1dfb      	adds	r3, r7, #7
    3b02:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3b04:	1dfb      	adds	r3, r7, #7
    3b06:	781b      	ldrb	r3, [r3, #0]
    3b08:	0018      	movs	r0, r3
    3b0a:	4b03      	ldr	r3, [pc, #12]	; (3b18 <port_get_group_from_gpio_pin+0x20>)
    3b0c:	4798      	blx	r3
    3b0e:	0003      	movs	r3, r0
}
    3b10:	0018      	movs	r0, r3
    3b12:	46bd      	mov	sp, r7
    3b14:	b002      	add	sp, #8
    3b16:	bd80      	pop	{r7, pc}
    3b18:	000038b1 	.word	0x000038b1

00003b1c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3b1c:	b580      	push	{r7, lr}
    3b1e:	b082      	sub	sp, #8
    3b20:	af00      	add	r7, sp, #0
    3b22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3b24:	687b      	ldr	r3, [r7, #4]
    3b26:	2200      	movs	r2, #0
    3b28:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3b2a:	687b      	ldr	r3, [r7, #4]
    3b2c:	2201      	movs	r2, #1
    3b2e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3b30:	687b      	ldr	r3, [r7, #4]
    3b32:	2200      	movs	r2, #0
    3b34:	709a      	strb	r2, [r3, #2]
}
    3b36:	46c0      	nop			; (mov r8, r8)
    3b38:	46bd      	mov	sp, r7
    3b3a:	b002      	add	sp, #8
    3b3c:	bd80      	pop	{r7, pc}
    3b3e:	46c0      	nop			; (mov r8, r8)

00003b40 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3b40:	b580      	push	{r7, lr}
    3b42:	b084      	sub	sp, #16
    3b44:	af00      	add	r7, sp, #0
    3b46:	0002      	movs	r2, r0
    3b48:	1dfb      	adds	r3, r7, #7
    3b4a:	701a      	strb	r2, [r3, #0]
    3b4c:	1dbb      	adds	r3, r7, #6
    3b4e:	1c0a      	adds	r2, r1, #0
    3b50:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3b52:	1dfb      	adds	r3, r7, #7
    3b54:	781b      	ldrb	r3, [r3, #0]
    3b56:	0018      	movs	r0, r3
    3b58:	4b0d      	ldr	r3, [pc, #52]	; (3b90 <port_pin_set_output_level+0x50>)
    3b5a:	4798      	blx	r3
    3b5c:	0003      	movs	r3, r0
    3b5e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3b60:	1dfb      	adds	r3, r7, #7
    3b62:	781b      	ldrb	r3, [r3, #0]
    3b64:	221f      	movs	r2, #31
    3b66:	4013      	ands	r3, r2
    3b68:	2201      	movs	r2, #1
    3b6a:	409a      	lsls	r2, r3
    3b6c:	0013      	movs	r3, r2
    3b6e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3b70:	1dbb      	adds	r3, r7, #6
    3b72:	781b      	ldrb	r3, [r3, #0]
    3b74:	2b00      	cmp	r3, #0
    3b76:	d003      	beq.n	3b80 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3b78:	68fb      	ldr	r3, [r7, #12]
    3b7a:	68ba      	ldr	r2, [r7, #8]
    3b7c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3b7e:	e002      	b.n	3b86 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3b80:	68fb      	ldr	r3, [r7, #12]
    3b82:	68ba      	ldr	r2, [r7, #8]
    3b84:	615a      	str	r2, [r3, #20]
	}
}
    3b86:	46c0      	nop			; (mov r8, r8)
    3b88:	46bd      	mov	sp, r7
    3b8a:	b004      	add	sp, #16
    3b8c:	bd80      	pop	{r7, pc}
    3b8e:	46c0      	nop			; (mov r8, r8)
    3b90:	00003af9 	.word	0x00003af9

00003b94 <msgeq7_init>:
#include "msgeq7.h"

struct adc_module adc_instance;

void msgeq7_init()
{
    3b94:	b580      	push	{r7, lr}
    3b96:	af00      	add	r7, sp, #0
	msgeq7_port_init();
    3b98:	4b03      	ldr	r3, [pc, #12]	; (3ba8 <msgeq7_init+0x14>)
    3b9a:	4798      	blx	r3
	msgeq7_adc_init();
    3b9c:	4b03      	ldr	r3, [pc, #12]	; (3bac <msgeq7_init+0x18>)
    3b9e:	4798      	blx	r3
}
    3ba0:	46c0      	nop			; (mov r8, r8)
    3ba2:	46bd      	mov	sp, r7
    3ba4:	bd80      	pop	{r7, pc}
    3ba6:	46c0      	nop			; (mov r8, r8)
    3ba8:	00003bb1 	.word	0x00003bb1
    3bac:	00003c09 	.word	0x00003c09

00003bb0 <msgeq7_port_init>:

void msgeq7_port_init()
{
    3bb0:	b580      	push	{r7, lr}
    3bb2:	b082      	sub	sp, #8
    3bb4:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    3bb6:	1d3b      	adds	r3, r7, #4
    3bb8:	0018      	movs	r0, r3
    3bba:	4b10      	ldr	r3, [pc, #64]	; (3bfc <msgeq7_port_init+0x4c>)
    3bbc:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    3bbe:	1d3b      	adds	r3, r7, #4
    3bc0:	2202      	movs	r2, #2
    3bc2:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    3bc4:	1d3b      	adds	r3, r7, #4
    3bc6:	2201      	movs	r2, #1
    3bc8:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(MSGEQ7_PIN_RESET,&config_port_pin);
    3bca:	1d3b      	adds	r3, r7, #4
    3bcc:	0019      	movs	r1, r3
    3bce:	2019      	movs	r0, #25
    3bd0:	4b0b      	ldr	r3, [pc, #44]	; (3c00 <msgeq7_port_init+0x50>)
    3bd2:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_RESET,false);
    3bd4:	2100      	movs	r1, #0
    3bd6:	2019      	movs	r0, #25
    3bd8:	4b0a      	ldr	r3, [pc, #40]	; (3c04 <msgeq7_port_init+0x54>)
    3bda:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    3bdc:	1d3b      	adds	r3, r7, #4
    3bde:	2201      	movs	r2, #1
    3be0:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(MSGEQ7_PIN_STROBE,&config_port_pin);
    3be2:	1d3b      	adds	r3, r7, #4
    3be4:	0019      	movs	r1, r3
    3be6:	2018      	movs	r0, #24
    3be8:	4b05      	ldr	r3, [pc, #20]	; (3c00 <msgeq7_port_init+0x50>)
    3bea:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_STROBE,true);
    3bec:	2101      	movs	r1, #1
    3bee:	2018      	movs	r0, #24
    3bf0:	4b04      	ldr	r3, [pc, #16]	; (3c04 <msgeq7_port_init+0x54>)
    3bf2:	4798      	blx	r3
}
    3bf4:	46c0      	nop			; (mov r8, r8)
    3bf6:	46bd      	mov	sp, r7
    3bf8:	b002      	add	sp, #8
    3bfa:	bd80      	pop	{r7, pc}
    3bfc:	00003b1d 	.word	0x00003b1d
    3c00:	00000c7d 	.word	0x00000c7d
    3c04:	00003b41 	.word	0x00003b41

00003c08 <msgeq7_adc_init>:

void msgeq7_adc_init()
{
    3c08:	b580      	push	{r7, lr}
    3c0a:	b08c      	sub	sp, #48	; 0x30
    3c0c:	af00      	add	r7, sp, #0
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    3c0e:	003b      	movs	r3, r7
    3c10:	0018      	movs	r0, r3
    3c12:	4b0e      	ldr	r3, [pc, #56]	; (3c4c <msgeq7_adc_init+0x44>)
    3c14:	4798      	blx	r3
	
	config_adc.gain_factor = ADC_GAIN_FACTOR_1X;
    3c16:	003b      	movs	r3, r7
    3c18:	2200      	movs	r2, #0
    3c1a:	609a      	str	r2, [r3, #8]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN2; //PIN_PB08
    3c1c:	003b      	movs	r3, r7
    3c1e:	2202      	movs	r2, #2
    3c20:	731a      	strb	r2, [r3, #12]
	config_adc.differential_mode = false;
    3c22:	003b      	movs	r3, r7
    3c24:	2200      	movs	r2, #0
    3c26:	74da      	strb	r2, [r3, #19]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    3c28:	003b      	movs	r3, r7
    3c2a:	22c0      	movs	r2, #192	; 0xc0
    3c2c:	0152      	lsls	r2, r2, #5
    3c2e:	81da      	strh	r2, [r3, #14]
	
	adc_init(&adc_instance, ADC, &config_adc);
    3c30:	003a      	movs	r2, r7
    3c32:	4907      	ldr	r1, [pc, #28]	; (3c50 <msgeq7_adc_init+0x48>)
    3c34:	4b07      	ldr	r3, [pc, #28]	; (3c54 <msgeq7_adc_init+0x4c>)
    3c36:	0018      	movs	r0, r3
    3c38:	4b07      	ldr	r3, [pc, #28]	; (3c58 <msgeq7_adc_init+0x50>)
    3c3a:	4798      	blx	r3
	adc_enable(&adc_instance);
    3c3c:	4b05      	ldr	r3, [pc, #20]	; (3c54 <msgeq7_adc_init+0x4c>)
    3c3e:	0018      	movs	r0, r3
    3c40:	4b06      	ldr	r3, [pc, #24]	; (3c5c <msgeq7_adc_init+0x54>)
    3c42:	4798      	blx	r3
}
    3c44:	46c0      	nop			; (mov r8, r8)
    3c46:	46bd      	mov	sp, r7
    3c48:	b00c      	add	sp, #48	; 0x30
    3c4a:	bd80      	pop	{r7, pc}
    3c4c:	00000225 	.word	0x00000225
    3c50:	42004000 	.word	0x42004000
    3c54:	20000248 	.word	0x20000248
    3c58:	00000875 	.word	0x00000875
    3c5c:	000039e1 	.word	0x000039e1

00003c60 <single_conversion>:


uint16_t single_conversion()
{
    3c60:	b580      	push	{r7, lr}
    3c62:	b082      	sub	sp, #8
    3c64:	af00      	add	r7, sp, #0
	adc_start_conversion(&adc_instance);
    3c66:	4b09      	ldr	r3, [pc, #36]	; (3c8c <single_conversion+0x2c>)
    3c68:	0018      	movs	r0, r3
    3c6a:	4b09      	ldr	r3, [pc, #36]	; (3c90 <single_conversion+0x30>)
    3c6c:	4798      	blx	r3
	uint16_t result;

	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
    3c6e:	1dba      	adds	r2, r7, #6
    3c70:	4b06      	ldr	r3, [pc, #24]	; (3c8c <single_conversion+0x2c>)
    3c72:	0011      	movs	r1, r2
    3c74:	0018      	movs	r0, r3
    3c76:	4b07      	ldr	r3, [pc, #28]	; (3c94 <single_conversion+0x34>)
    3c78:	4798      	blx	r3
    3c7a:	1e03      	subs	r3, r0, #0
    3c7c:	2b05      	cmp	r3, #5
    3c7e:	d0f6      	beq.n	3c6e <single_conversion+0xe>
	return result;
    3c80:	1dbb      	adds	r3, r7, #6
    3c82:	881b      	ldrh	r3, [r3, #0]
}
    3c84:	0018      	movs	r0, r3
    3c86:	46bd      	mov	sp, r7
    3c88:	b002      	add	sp, #8
    3c8a:	bd80      	pop	{r7, pc}
    3c8c:	20000248 	.word	0x20000248
    3c90:	00003a35 	.word	0x00003a35
    3c94:	00003a7d 	.word	0x00003a7d

00003c98 <msgeq7_all_bands>:

void msgeq7_all_bands(uint16_t bands[])
{
    3c98:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c9a:	b08f      	sub	sp, #60	; 0x3c
    3c9c:	af00      	add	r7, sp, #0
    3c9e:	62f8      	str	r0, [r7, #44]	; 0x2c
	port_pin_set_output_level(MSGEQ7_PIN_RESET,true);
    3ca0:	2101      	movs	r1, #1
    3ca2:	2019      	movs	r0, #25
    3ca4:	4b53      	ldr	r3, [pc, #332]	; (3df4 <msgeq7_all_bands+0x15c>)
    3ca6:	4798      	blx	r3
	delay_us(1);
    3ca8:	2000      	movs	r0, #0
    3caa:	4b53      	ldr	r3, [pc, #332]	; (3df8 <msgeq7_all_bands+0x160>)
    3cac:	4798      	blx	r3
    3cae:	0003      	movs	r3, r0
    3cb0:	613b      	str	r3, [r7, #16]
    3cb2:	2300      	movs	r3, #0
    3cb4:	617b      	str	r3, [r7, #20]
    3cb6:	4b51      	ldr	r3, [pc, #324]	; (3dfc <msgeq7_all_bands+0x164>)
    3cb8:	2400      	movs	r4, #0
    3cba:	6938      	ldr	r0, [r7, #16]
    3cbc:	6979      	ldr	r1, [r7, #20]
    3cbe:	18c0      	adds	r0, r0, r3
    3cc0:	4161      	adcs	r1, r4
    3cc2:	4c4f      	ldr	r4, [pc, #316]	; (3e00 <msgeq7_all_bands+0x168>)
    3cc4:	4a4f      	ldr	r2, [pc, #316]	; (3e04 <msgeq7_all_bands+0x16c>)
    3cc6:	2300      	movs	r3, #0
    3cc8:	47a0      	blx	r4
    3cca:	0003      	movs	r3, r0
    3ccc:	000c      	movs	r4, r1
    3cce:	0018      	movs	r0, r3
    3cd0:	4b4d      	ldr	r3, [pc, #308]	; (3e08 <msgeq7_all_bands+0x170>)
    3cd2:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_RESET,false);
    3cd4:	2100      	movs	r1, #0
    3cd6:	2019      	movs	r0, #25
    3cd8:	4b46      	ldr	r3, [pc, #280]	; (3df4 <msgeq7_all_bands+0x15c>)
    3cda:	4798      	blx	r3
	delay_us(75);
    3cdc:	2000      	movs	r0, #0
    3cde:	4b46      	ldr	r3, [pc, #280]	; (3df8 <msgeq7_all_bands+0x160>)
    3ce0:	4798      	blx	r3
    3ce2:	0003      	movs	r3, r0
    3ce4:	61bb      	str	r3, [r7, #24]
    3ce6:	2300      	movs	r3, #0
    3ce8:	61fb      	str	r3, [r7, #28]
    3cea:	69bb      	ldr	r3, [r7, #24]
    3cec:	69fc      	ldr	r4, [r7, #28]
    3cee:	0f9a      	lsrs	r2, r3, #30
    3cf0:	00a0      	lsls	r0, r4, #2
    3cf2:	6278      	str	r0, [r7, #36]	; 0x24
    3cf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3cf6:	4310      	orrs	r0, r2
    3cf8:	6278      	str	r0, [r7, #36]	; 0x24
    3cfa:	009b      	lsls	r3, r3, #2
    3cfc:	623b      	str	r3, [r7, #32]
    3cfe:	6a3b      	ldr	r3, [r7, #32]
    3d00:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    3d02:	69b9      	ldr	r1, [r7, #24]
    3d04:	69fa      	ldr	r2, [r7, #28]
    3d06:	185b      	adds	r3, r3, r1
    3d08:	4154      	adcs	r4, r2
    3d0a:	0f1a      	lsrs	r2, r3, #28
    3d0c:	0126      	lsls	r6, r4, #4
    3d0e:	4316      	orrs	r6, r2
    3d10:	011d      	lsls	r5, r3, #4
    3d12:	1aed      	subs	r5, r5, r3
    3d14:	41a6      	sbcs	r6, r4
    3d16:	002b      	movs	r3, r5
    3d18:	0034      	movs	r4, r6
    3d1a:	4938      	ldr	r1, [pc, #224]	; (3dfc <msgeq7_all_bands+0x164>)
    3d1c:	2200      	movs	r2, #0
    3d1e:	185b      	adds	r3, r3, r1
    3d20:	4154      	adcs	r4, r2
    3d22:	0018      	movs	r0, r3
    3d24:	0021      	movs	r1, r4
    3d26:	4c36      	ldr	r4, [pc, #216]	; (3e00 <msgeq7_all_bands+0x168>)
    3d28:	4a36      	ldr	r2, [pc, #216]	; (3e04 <msgeq7_all_bands+0x16c>)
    3d2a:	2300      	movs	r3, #0
    3d2c:	47a0      	blx	r4
    3d2e:	0003      	movs	r3, r0
    3d30:	000c      	movs	r4, r1
    3d32:	0018      	movs	r0, r3
    3d34:	4b34      	ldr	r3, [pc, #208]	; (3e08 <msgeq7_all_bands+0x170>)
    3d36:	4798      	blx	r3
	
	for (int i=0;i<7;i++)
    3d38:	2300      	movs	r3, #0
    3d3a:	637b      	str	r3, [r7, #52]	; 0x34
    3d3c:	e052      	b.n	3de4 <msgeq7_all_bands+0x14c>
	{
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,false);
    3d3e:	2100      	movs	r1, #0
    3d40:	2018      	movs	r0, #24
    3d42:	4b2c      	ldr	r3, [pc, #176]	; (3df4 <msgeq7_all_bands+0x15c>)
    3d44:	4798      	blx	r3
		delay_us(40);
    3d46:	2000      	movs	r0, #0
    3d48:	4b2b      	ldr	r3, [pc, #172]	; (3df8 <msgeq7_all_bands+0x160>)
    3d4a:	4798      	blx	r3
    3d4c:	0003      	movs	r3, r0
    3d4e:	60bb      	str	r3, [r7, #8]
    3d50:	2300      	movs	r3, #0
    3d52:	60fb      	str	r3, [r7, #12]
    3d54:	4c2d      	ldr	r4, [pc, #180]	; (3e0c <msgeq7_all_bands+0x174>)
    3d56:	2228      	movs	r2, #40	; 0x28
    3d58:	2300      	movs	r3, #0
    3d5a:	68b8      	ldr	r0, [r7, #8]
    3d5c:	68f9      	ldr	r1, [r7, #12]
    3d5e:	47a0      	blx	r4
    3d60:	0003      	movs	r3, r0
    3d62:	000c      	movs	r4, r1
    3d64:	0019      	movs	r1, r3
    3d66:	0022      	movs	r2, r4
    3d68:	4b24      	ldr	r3, [pc, #144]	; (3dfc <msgeq7_all_bands+0x164>)
    3d6a:	2400      	movs	r4, #0
    3d6c:	18c9      	adds	r1, r1, r3
    3d6e:	4162      	adcs	r2, r4
    3d70:	0008      	movs	r0, r1
    3d72:	0011      	movs	r1, r2
    3d74:	4c22      	ldr	r4, [pc, #136]	; (3e00 <msgeq7_all_bands+0x168>)
    3d76:	4a23      	ldr	r2, [pc, #140]	; (3e04 <msgeq7_all_bands+0x16c>)
    3d78:	2300      	movs	r3, #0
    3d7a:	47a0      	blx	r4
    3d7c:	0003      	movs	r3, r0
    3d7e:	000c      	movs	r4, r1
    3d80:	0018      	movs	r0, r3
    3d82:	4b21      	ldr	r3, [pc, #132]	; (3e08 <msgeq7_all_bands+0x170>)
    3d84:	4798      	blx	r3
		bands[i] = single_conversion();
    3d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3d88:	005b      	lsls	r3, r3, #1
    3d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3d8c:	18d4      	adds	r4, r2, r3
    3d8e:	4b20      	ldr	r3, [pc, #128]	; (3e10 <msgeq7_all_bands+0x178>)
    3d90:	4798      	blx	r3
    3d92:	0003      	movs	r3, r0
    3d94:	8023      	strh	r3, [r4, #0]
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,true);
    3d96:	2101      	movs	r1, #1
    3d98:	2018      	movs	r0, #24
    3d9a:	4b16      	ldr	r3, [pc, #88]	; (3df4 <msgeq7_all_bands+0x15c>)
    3d9c:	4798      	blx	r3
		delay_us(40);
    3d9e:	2000      	movs	r0, #0
    3da0:	4b15      	ldr	r3, [pc, #84]	; (3df8 <msgeq7_all_bands+0x160>)
    3da2:	4798      	blx	r3
    3da4:	0003      	movs	r3, r0
    3da6:	603b      	str	r3, [r7, #0]
    3da8:	2300      	movs	r3, #0
    3daa:	607b      	str	r3, [r7, #4]
    3dac:	4c17      	ldr	r4, [pc, #92]	; (3e0c <msgeq7_all_bands+0x174>)
    3dae:	2228      	movs	r2, #40	; 0x28
    3db0:	2300      	movs	r3, #0
    3db2:	6838      	ldr	r0, [r7, #0]
    3db4:	6879      	ldr	r1, [r7, #4]
    3db6:	47a0      	blx	r4
    3db8:	0003      	movs	r3, r0
    3dba:	000c      	movs	r4, r1
    3dbc:	0019      	movs	r1, r3
    3dbe:	0022      	movs	r2, r4
    3dc0:	4b0e      	ldr	r3, [pc, #56]	; (3dfc <msgeq7_all_bands+0x164>)
    3dc2:	2400      	movs	r4, #0
    3dc4:	18c9      	adds	r1, r1, r3
    3dc6:	4162      	adcs	r2, r4
    3dc8:	0008      	movs	r0, r1
    3dca:	0011      	movs	r1, r2
    3dcc:	4c0c      	ldr	r4, [pc, #48]	; (3e00 <msgeq7_all_bands+0x168>)
    3dce:	4a0d      	ldr	r2, [pc, #52]	; (3e04 <msgeq7_all_bands+0x16c>)
    3dd0:	2300      	movs	r3, #0
    3dd2:	47a0      	blx	r4
    3dd4:	0003      	movs	r3, r0
    3dd6:	000c      	movs	r4, r1
    3dd8:	0018      	movs	r0, r3
    3dda:	4b0b      	ldr	r3, [pc, #44]	; (3e08 <msgeq7_all_bands+0x170>)
    3ddc:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_RESET,true);
	delay_us(1);
	port_pin_set_output_level(MSGEQ7_PIN_RESET,false);
	delay_us(75);
	
	for (int i=0;i<7;i++)
    3dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3de0:	3301      	adds	r3, #1
    3de2:	637b      	str	r3, [r7, #52]	; 0x34
    3de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3de6:	2b06      	cmp	r3, #6
    3de8:	dda9      	ble.n	3d3e <msgeq7_all_bands+0xa6>
		delay_us(40);
		bands[i] = single_conversion();
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,true);
		delay_us(40);
	}
    3dea:	46c0      	nop			; (mov r8, r8)
    3dec:	46bd      	mov	sp, r7
    3dee:	b00f      	add	sp, #60	; 0x3c
    3df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3df2:	46c0      	nop			; (mov r8, r8)
    3df4:	00003b41 	.word	0x00003b41
    3df8:	00004b85 	.word	0x00004b85
    3dfc:	006acfbf 	.word	0x006acfbf
    3e00:	00005561 	.word	0x00005561
    3e04:	006acfc0 	.word	0x006acfc0
    3e08:	20000001 	.word	0x20000001
    3e0c:	000055a1 	.word	0x000055a1
    3e10:	00003c61 	.word	0x00003c61

00003e14 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3e14:	b580      	push	{r7, lr}
    3e16:	b082      	sub	sp, #8
    3e18:	af00      	add	r7, sp, #0
    3e1a:	0002      	movs	r2, r0
    3e1c:	1dfb      	adds	r3, r7, #7
    3e1e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    3e20:	4b06      	ldr	r3, [pc, #24]	; (3e3c <NVIC_EnableIRQ+0x28>)
    3e22:	1dfa      	adds	r2, r7, #7
    3e24:	7812      	ldrb	r2, [r2, #0]
    3e26:	0011      	movs	r1, r2
    3e28:	221f      	movs	r2, #31
    3e2a:	400a      	ands	r2, r1
    3e2c:	2101      	movs	r1, #1
    3e2e:	4091      	lsls	r1, r2
    3e30:	000a      	movs	r2, r1
    3e32:	601a      	str	r2, [r3, #0]
}
    3e34:	46c0      	nop			; (mov r8, r8)
    3e36:	46bd      	mov	sp, r7
    3e38:	b002      	add	sp, #8
    3e3a:	bd80      	pop	{r7, pc}
    3e3c:	e000e100 	.word	0xe000e100

00003e40 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    3e40:	b5b0      	push	{r4, r5, r7, lr}
    3e42:	b082      	sub	sp, #8
    3e44:	af00      	add	r7, sp, #0
    3e46:	0002      	movs	r2, r0
    3e48:	6039      	str	r1, [r7, #0]
    3e4a:	1dfb      	adds	r3, r7, #7
    3e4c:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    3e4e:	1dfb      	adds	r3, r7, #7
    3e50:	781b      	ldrb	r3, [r3, #0]
    3e52:	2b7f      	cmp	r3, #127	; 0x7f
    3e54:	d932      	bls.n	3ebc <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3e56:	4c2f      	ldr	r4, [pc, #188]	; (3f14 <NVIC_SetPriority+0xd4>)
    3e58:	1dfb      	adds	r3, r7, #7
    3e5a:	781b      	ldrb	r3, [r3, #0]
    3e5c:	001a      	movs	r2, r3
    3e5e:	230f      	movs	r3, #15
    3e60:	4013      	ands	r3, r2
    3e62:	3b08      	subs	r3, #8
    3e64:	0899      	lsrs	r1, r3, #2
    3e66:	4a2b      	ldr	r2, [pc, #172]	; (3f14 <NVIC_SetPriority+0xd4>)
    3e68:	1dfb      	adds	r3, r7, #7
    3e6a:	781b      	ldrb	r3, [r3, #0]
    3e6c:	0018      	movs	r0, r3
    3e6e:	230f      	movs	r3, #15
    3e70:	4003      	ands	r3, r0
    3e72:	3b08      	subs	r3, #8
    3e74:	089b      	lsrs	r3, r3, #2
    3e76:	3306      	adds	r3, #6
    3e78:	009b      	lsls	r3, r3, #2
    3e7a:	18d3      	adds	r3, r2, r3
    3e7c:	3304      	adds	r3, #4
    3e7e:	681b      	ldr	r3, [r3, #0]
    3e80:	1dfa      	adds	r2, r7, #7
    3e82:	7812      	ldrb	r2, [r2, #0]
    3e84:	0010      	movs	r0, r2
    3e86:	2203      	movs	r2, #3
    3e88:	4002      	ands	r2, r0
    3e8a:	00d2      	lsls	r2, r2, #3
    3e8c:	20ff      	movs	r0, #255	; 0xff
    3e8e:	4090      	lsls	r0, r2
    3e90:	0002      	movs	r2, r0
    3e92:	43d2      	mvns	r2, r2
    3e94:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    3e96:	683b      	ldr	r3, [r7, #0]
    3e98:	019b      	lsls	r3, r3, #6
    3e9a:	20ff      	movs	r0, #255	; 0xff
    3e9c:	4018      	ands	r0, r3
    3e9e:	1dfb      	adds	r3, r7, #7
    3ea0:	781b      	ldrb	r3, [r3, #0]
    3ea2:	001d      	movs	r5, r3
    3ea4:	2303      	movs	r3, #3
    3ea6:	402b      	ands	r3, r5
    3ea8:	00db      	lsls	r3, r3, #3
    3eaa:	4098      	lsls	r0, r3
    3eac:	0003      	movs	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3eae:	431a      	orrs	r2, r3
    3eb0:	1d8b      	adds	r3, r1, #6
    3eb2:	009b      	lsls	r3, r3, #2
    3eb4:	18e3      	adds	r3, r4, r3
    3eb6:	3304      	adds	r3, #4
    3eb8:	601a      	str	r2, [r3, #0]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    3eba:	e027      	b.n	3f0c <NVIC_SetPriority+0xcc>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3ebc:	4c16      	ldr	r4, [pc, #88]	; (3f18 <NVIC_SetPriority+0xd8>)
    3ebe:	1dfb      	adds	r3, r7, #7
    3ec0:	781b      	ldrb	r3, [r3, #0]
    3ec2:	b25b      	sxtb	r3, r3
    3ec4:	089b      	lsrs	r3, r3, #2
    3ec6:	4914      	ldr	r1, [pc, #80]	; (3f18 <NVIC_SetPriority+0xd8>)
    3ec8:	1dfa      	adds	r2, r7, #7
    3eca:	7812      	ldrb	r2, [r2, #0]
    3ecc:	b252      	sxtb	r2, r2
    3ece:	0892      	lsrs	r2, r2, #2
    3ed0:	32c0      	adds	r2, #192	; 0xc0
    3ed2:	0092      	lsls	r2, r2, #2
    3ed4:	5852      	ldr	r2, [r2, r1]
    3ed6:	1df9      	adds	r1, r7, #7
    3ed8:	7809      	ldrb	r1, [r1, #0]
    3eda:	0008      	movs	r0, r1
    3edc:	2103      	movs	r1, #3
    3ede:	4001      	ands	r1, r0
    3ee0:	00c9      	lsls	r1, r1, #3
    3ee2:	20ff      	movs	r0, #255	; 0xff
    3ee4:	4088      	lsls	r0, r1
    3ee6:	0001      	movs	r1, r0
    3ee8:	43c9      	mvns	r1, r1
    3eea:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    3eec:	683a      	ldr	r2, [r7, #0]
    3eee:	0192      	lsls	r2, r2, #6
    3ef0:	20ff      	movs	r0, #255	; 0xff
    3ef2:	4010      	ands	r0, r2
    3ef4:	1dfa      	adds	r2, r7, #7
    3ef6:	7812      	ldrb	r2, [r2, #0]
    3ef8:	0015      	movs	r5, r2
    3efa:	2203      	movs	r2, #3
    3efc:	402a      	ands	r2, r5
    3efe:	00d2      	lsls	r2, r2, #3
    3f00:	4090      	lsls	r0, r2
    3f02:	0002      	movs	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3f04:	430a      	orrs	r2, r1
    3f06:	33c0      	adds	r3, #192	; 0xc0
    3f08:	009b      	lsls	r3, r3, #2
    3f0a:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    3f0c:	46c0      	nop			; (mov r8, r8)
    3f0e:	46bd      	mov	sp, r7
    3f10:	b002      	add	sp, #8
    3f12:	bdb0      	pop	{r4, r5, r7, pc}
    3f14:	e000ed00 	.word	0xe000ed00
    3f18:	e000e100 	.word	0xe000e100

00003f1c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3f1c:	b580      	push	{r7, lr}
    3f1e:	b082      	sub	sp, #8
    3f20:	af00      	add	r7, sp, #0
    3f22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3f24:	687b      	ldr	r3, [r7, #4]
    3f26:	2200      	movs	r2, #0
    3f28:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3f2a:	687b      	ldr	r3, [r7, #4]
    3f2c:	2201      	movs	r2, #1
    3f2e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3f30:	687b      	ldr	r3, [r7, #4]
    3f32:	2200      	movs	r2, #0
    3f34:	709a      	strb	r2, [r3, #2]
}
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	46bd      	mov	sp, r7
    3f3a:	b002      	add	sp, #8
    3f3c:	bd80      	pop	{r7, pc}
    3f3e:	46c0      	nop			; (mov r8, r8)

00003f40 <pwm_port>:
#include "msgeq7.h"
#include "ble_uart.h"
#include "i2c.h"

void pwm_port()
{
    3f40:	b580      	push	{r7, lr}
    3f42:	b082      	sub	sp, #8
    3f44:	af00      	add	r7, sp, #0
	pwm_count = 0;
    3f46:	4b0b      	ldr	r3, [pc, #44]	; (3f74 <pwm_port+0x34>)
    3f48:	2200      	movs	r2, #0
    3f4a:	601a      	str	r2, [r3, #0]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    3f4c:	1d3b      	adds	r3, r7, #4
    3f4e:	0018      	movs	r0, r3
    3f50:	4b09      	ldr	r3, [pc, #36]	; (3f78 <pwm_port+0x38>)
    3f52:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    3f54:	1d3b      	adds	r3, r7, #4
    3f56:	2200      	movs	r2, #0
    3f58:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    3f5a:	1d3b      	adds	r3, r7, #4
    3f5c:	2201      	movs	r2, #1
    3f5e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA02,&config_port_pin);
    3f60:	1d3b      	adds	r3, r7, #4
    3f62:	0019      	movs	r1, r3
    3f64:	2002      	movs	r0, #2
    3f66:	4b05      	ldr	r3, [pc, #20]	; (3f7c <pwm_port+0x3c>)
    3f68:	4798      	blx	r3
}
    3f6a:	46c0      	nop			; (mov r8, r8)
    3f6c:	46bd      	mov	sp, r7
    3f6e:	b002      	add	sp, #8
    3f70:	bd80      	pop	{r7, pc}
    3f72:	46c0      	nop			; (mov r8, r8)
    3f74:	20000238 	.word	0x20000238
    3f78:	00003f1d 	.word	0x00003f1d
    3f7c:	00000c7d 	.word	0x00000c7d

00003f80 <init_TC3>:

void init_TC3()
{	
    3f80:	b580      	push	{r7, lr}
    3f82:	af00      	add	r7, sp, #0
	PM->APBCMASK.reg |= PM_APBCMASK_TC3;
    3f84:	4b1e      	ldr	r3, [pc, #120]	; (4000 <init_TC3+0x80>)
    3f86:	4a1e      	ldr	r2, [pc, #120]	; (4000 <init_TC3+0x80>)
    3f88:	6a12      	ldr	r2, [r2, #32]
    3f8a:	2180      	movs	r1, #128	; 0x80
    3f8c:	0109      	lsls	r1, r1, #4
    3f8e:	430a      	orrs	r2, r1
    3f90:	621a      	str	r2, [r3, #32]

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_ID_TCC2_TC3;
    3f92:	4b1c      	ldr	r3, [pc, #112]	; (4004 <init_TC3+0x84>)
    3f94:	4a1c      	ldr	r2, [pc, #112]	; (4008 <init_TC3+0x88>)
    3f96:	805a      	strh	r2, [r3, #2]
	
	TC3->COUNT16.CTRLA.reg = TC_CTRLA_MODE_COUNT16 | TC_CTRLA_WAVEGEN_MFRQ |
    3f98:	4b1c      	ldr	r3, [pc, #112]	; (400c <init_TC3+0x8c>)
    3f9a:	4a1d      	ldr	r2, [pc, #116]	; (4010 <init_TC3+0x90>)
    3f9c:	801a      	strh	r2, [r3, #0]
	TC_CTRLA_PRESCALER_DIV1 | TC_CTRLA_PRESCSYNC_RESYNC;

	TC3->COUNT16.COUNT.reg = 0;
    3f9e:	4b1b      	ldr	r3, [pc, #108]	; (400c <init_TC3+0x8c>)
    3fa0:	2200      	movs	r2, #0
    3fa2:	821a      	strh	r2, [r3, #16]
	TC3->COUNT16.CC[0].reg = COMPARE_MATCH;
    3fa4:	4b19      	ldr	r3, [pc, #100]	; (400c <init_TC3+0x8c>)
    3fa6:	22e2      	movs	r2, #226	; 0xe2
    3fa8:	0192      	lsls	r2, r2, #6
    3faa:	831a      	strh	r2, [r3, #24]
	
	
	TC3->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    3fac:	4a17      	ldr	r2, [pc, #92]	; (400c <init_TC3+0x8c>)
    3fae:	4b17      	ldr	r3, [pc, #92]	; (400c <init_TC3+0x8c>)
    3fb0:	881b      	ldrh	r3, [r3, #0]
    3fb2:	b29b      	uxth	r3, r3
    3fb4:	2102      	movs	r1, #2
    3fb6:	430b      	orrs	r3, r1
    3fb8:	b29b      	uxth	r3, r3
    3fba:	8013      	strh	r3, [r2, #0]
	TC3->COUNT16.DBGCTRL.reg = TC_DBGCTRL_DBGRUN;
    3fbc:	4b13      	ldr	r3, [pc, #76]	; (400c <init_TC3+0x8c>)
    3fbe:	2201      	movs	r2, #1
    3fc0:	721a      	strb	r2, [r3, #8]
	TC3->COUNT16.INTENSET.reg = TC_INTENSET_MC0;
    3fc2:	4b12      	ldr	r3, [pc, #72]	; (400c <init_TC3+0x8c>)
    3fc4:	2210      	movs	r2, #16
    3fc6:	735a      	strb	r2, [r3, #13]
	NVIC_EnableIRQ(TC3_IRQn);
    3fc8:	2012      	movs	r0, #18
    3fca:	4b12      	ldr	r3, [pc, #72]	; (4014 <init_TC3+0x94>)
    3fcc:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,2);
    3fce:	2102      	movs	r1, #2
    3fd0:	2012      	movs	r0, #18
    3fd2:	4b11      	ldr	r3, [pc, #68]	; (4018 <init_TC3+0x98>)
    3fd4:	4798      	blx	r3
	PORT->Group[0].DIRSET.reg=18;
    3fd6:	4b11      	ldr	r3, [pc, #68]	; (401c <init_TC3+0x9c>)
    3fd8:	2212      	movs	r2, #18
    3fda:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PINCFG[18].bit.PMUXEN=1;
    3fdc:	490f      	ldr	r1, [pc, #60]	; (401c <init_TC3+0x9c>)
    3fde:	2252      	movs	r2, #82	; 0x52
    3fe0:	5c8b      	ldrb	r3, [r1, r2]
    3fe2:	2001      	movs	r0, #1
    3fe4:	4303      	orrs	r3, r0
    3fe6:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX[9].bit.PMUXE = 4;
    3fe8:	490c      	ldr	r1, [pc, #48]	; (401c <init_TC3+0x9c>)
    3fea:	2239      	movs	r2, #57	; 0x39
    3fec:	5c8b      	ldrb	r3, [r1, r2]
    3fee:	200f      	movs	r0, #15
    3ff0:	4383      	bics	r3, r0
    3ff2:	1c18      	adds	r0, r3, #0
    3ff4:	2304      	movs	r3, #4
    3ff6:	4303      	orrs	r3, r0
    3ff8:	548b      	strb	r3, [r1, r2]
}
    3ffa:	46c0      	nop			; (mov r8, r8)
    3ffc:	46bd      	mov	sp, r7
    3ffe:	bd80      	pop	{r7, pc}
    4000:	40000400 	.word	0x40000400
    4004:	40000c00 	.word	0x40000c00
    4008:	0000401b 	.word	0x0000401b
    400c:	42002c00 	.word	0x42002c00
    4010:	00002020 	.word	0x00002020
    4014:	00003e15 	.word	0x00003e15
    4018:	00003e41 	.word	0x00003e41
    401c:	41004400 	.word	0x41004400

00004020 <TC3_Handler>:
bool pin_state = false;
uint16_t values_bands[6];

bool a_okayish = true;
void TC3_Handler()
{
    4020:	b5f0      	push	{r4, r5, r6, r7, lr}
    4022:	b097      	sub	sp, #92	; 0x5c
    4024:	af04      	add	r7, sp, #16
	static bool blink_state = false;
	// Overflow interrupt triggered
	if ( TC3->COUNT16.INTFLAG.bit.OVF == 1 )
    4026:	4b3a      	ldr	r3, [pc, #232]	; (4110 <TC3_Handler+0xf0>)
    4028:	7b9b      	ldrb	r3, [r3, #14]
    402a:	07db      	lsls	r3, r3, #31
    402c:	0fdb      	lsrs	r3, r3, #31
    402e:	b2db      	uxtb	r3, r3
    4030:	2b01      	cmp	r3, #1
    4032:	d169      	bne.n	4108 <TC3_Handler+0xe8>
	{
		if (party)
    4034:	4b37      	ldr	r3, [pc, #220]	; (4114 <TC3_Handler+0xf4>)
    4036:	781b      	ldrb	r3, [r3, #0]
    4038:	b2db      	uxtb	r3, r3
    403a:	2b00      	cmp	r3, #0
    403c:	d007      	beq.n	404e <TC3_Handler+0x2e>
		{
			msgeq7_all_bands(values_bands);
    403e:	4b36      	ldr	r3, [pc, #216]	; (4118 <TC3_Handler+0xf8>)
    4040:	0018      	movs	r0, r3
    4042:	4b36      	ldr	r3, [pc, #216]	; (411c <TC3_Handler+0xfc>)
    4044:	4798      	blx	r3
			party_lights(values_bands);
    4046:	4b34      	ldr	r3, [pc, #208]	; (4118 <TC3_Handler+0xf8>)
    4048:	0018      	movs	r0, r3
    404a:	4b35      	ldr	r3, [pc, #212]	; (4120 <TC3_Handler+0x100>)
    404c:	4798      	blx	r3
		}
		if ((pwm_count % 25) == 0)
    404e:	4b35      	ldr	r3, [pc, #212]	; (4124 <TC3_Handler+0x104>)
    4050:	681a      	ldr	r2, [r3, #0]
    4052:	4b35      	ldr	r3, [pc, #212]	; (4128 <TC3_Handler+0x108>)
    4054:	2119      	movs	r1, #25
    4056:	0010      	movs	r0, r2
    4058:	4798      	blx	r3
    405a:	1e0b      	subs	r3, r1, #0
    405c:	d10e      	bne.n	407c <TC3_Handler+0x5c>
		{
			if (flashy2)
    405e:	4b33      	ldr	r3, [pc, #204]	; (412c <TC3_Handler+0x10c>)
    4060:	781b      	ldrb	r3, [r3, #0]
    4062:	b2db      	uxtb	r3, r3
    4064:	2b00      	cmp	r3, #0
    4066:	d002      	beq.n	406e <TC3_Handler+0x4e>
			{
				flashy_flash1();
    4068:	4b31      	ldr	r3, [pc, #196]	; (4130 <TC3_Handler+0x110>)
    406a:	4798      	blx	r3
    406c:	e006      	b.n	407c <TC3_Handler+0x5c>
			}
			else if (flashy1)
    406e:	4b31      	ldr	r3, [pc, #196]	; (4134 <TC3_Handler+0x114>)
    4070:	781b      	ldrb	r3, [r3, #0]
    4072:	b2db      	uxtb	r3, r3
    4074:	2b00      	cmp	r3, #0
    4076:	d001      	beq.n	407c <TC3_Handler+0x5c>
			{
				flashy_flash2();
    4078:	4b2f      	ldr	r3, [pc, #188]	; (4138 <TC3_Handler+0x118>)
    407a:	4798      	blx	r3
			}
		}
		if (flashyfade)
    407c:	4b2f      	ldr	r3, [pc, #188]	; (413c <TC3_Handler+0x11c>)
    407e:	781b      	ldrb	r3, [r3, #0]
    4080:	b2db      	uxtb	r3, r3
    4082:	2b00      	cmp	r3, #0
    4084:	d001      	beq.n	408a <TC3_Handler+0x6a>
		{
			flashy_fades();
    4086:	4b2e      	ldr	r3, [pc, #184]	; (4140 <TC3_Handler+0x120>)
    4088:	4798      	blx	r3
		}

		
		update_all_ports();
    408a:	4b2e      	ldr	r3, [pc, #184]	; (4144 <TC3_Handler+0x124>)
    408c:	4798      	blx	r3
		
		pwm_count++;
    408e:	4b25      	ldr	r3, [pc, #148]	; (4124 <TC3_Handler+0x104>)
    4090:	681b      	ldr	r3, [r3, #0]
    4092:	1c5a      	adds	r2, r3, #1
    4094:	4b23      	ldr	r3, [pc, #140]	; (4124 <TC3_Handler+0x104>)
    4096:	601a      	str	r2, [r3, #0]
		if (pwm_count > PWM_FREQ)
    4098:	4b22      	ldr	r3, [pc, #136]	; (4124 <TC3_Handler+0x104>)
    409a:	681b      	ldr	r3, [r3, #0]
    409c:	2b64      	cmp	r3, #100	; 0x64
    409e:	dd30      	ble.n	4102 <TC3_Handler+0xe2>
		{
			//uint8_t *ptr = &read_data[0][0];
			a_okayish = a_okay(read_data);
    40a0:	4b29      	ldr	r3, [pc, #164]	; (4148 <TC3_Handler+0x128>)
    40a2:	0018      	movs	r0, r3
    40a4:	4b29      	ldr	r3, [pc, #164]	; (414c <TC3_Handler+0x12c>)
    40a6:	4798      	blx	r3
    40a8:	0003      	movs	r3, r0
    40aa:	001a      	movs	r2, r3
    40ac:	4b28      	ldr	r3, [pc, #160]	; (4150 <TC3_Handler+0x130>)
    40ae:	701a      	strb	r2, [r3, #0]
			/*set_blinker(blink_state, blink_left,blink_right);
			blink_state = !blink_state;*/
			char buffer[64];
			if (party)
    40b0:	4b18      	ldr	r3, [pc, #96]	; (4114 <TC3_Handler+0xf4>)
    40b2:	781b      	ldrb	r3, [r3, #0]
    40b4:	b2db      	uxtb	r3, r3
    40b6:	2b00      	cmp	r3, #0
    40b8:	d020      	beq.n	40fc <TC3_Handler+0xdc>
			{
				sprintf(buffer,"%d %d %d %d %d %d",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
    40ba:	4b17      	ldr	r3, [pc, #92]	; (4118 <TC3_Handler+0xf8>)
    40bc:	881b      	ldrh	r3, [r3, #0]
    40be:	001e      	movs	r6, r3
    40c0:	4b15      	ldr	r3, [pc, #84]	; (4118 <TC3_Handler+0xf8>)
    40c2:	885b      	ldrh	r3, [r3, #2]
    40c4:	607b      	str	r3, [r7, #4]
    40c6:	4b14      	ldr	r3, [pc, #80]	; (4118 <TC3_Handler+0xf8>)
    40c8:	889b      	ldrh	r3, [r3, #4]
    40ca:	001a      	movs	r2, r3
    40cc:	4b12      	ldr	r3, [pc, #72]	; (4118 <TC3_Handler+0xf8>)
    40ce:	88db      	ldrh	r3, [r3, #6]
    40d0:	001c      	movs	r4, r3
    40d2:	4b11      	ldr	r3, [pc, #68]	; (4118 <TC3_Handler+0xf8>)
    40d4:	891b      	ldrh	r3, [r3, #8]
    40d6:	001d      	movs	r5, r3
    40d8:	4b0f      	ldr	r3, [pc, #60]	; (4118 <TC3_Handler+0xf8>)
    40da:	895b      	ldrh	r3, [r3, #10]
    40dc:	491d      	ldr	r1, [pc, #116]	; (4154 <TC3_Handler+0x134>)
    40de:	2008      	movs	r0, #8
    40e0:	1838      	adds	r0, r7, r0
    40e2:	9303      	str	r3, [sp, #12]
    40e4:	9502      	str	r5, [sp, #8]
    40e6:	9401      	str	r4, [sp, #4]
    40e8:	9200      	str	r2, [sp, #0]
    40ea:	687b      	ldr	r3, [r7, #4]
    40ec:	0032      	movs	r2, r6
    40ee:	4c1a      	ldr	r4, [pc, #104]	; (4158 <TC3_Handler+0x138>)
    40f0:	47a0      	blx	r4
				ble_uart_write(buffer);
    40f2:	2308      	movs	r3, #8
    40f4:	18fb      	adds	r3, r7, r3
    40f6:	0018      	movs	r0, r3
    40f8:	4b18      	ldr	r3, [pc, #96]	; (415c <TC3_Handler+0x13c>)
    40fa:	4798      	blx	r3
			}
			pwm_count = 0;
    40fc:	4b09      	ldr	r3, [pc, #36]	; (4124 <TC3_Handler+0x104>)
    40fe:	2200      	movs	r2, #0
    4100:	601a      	str	r2, [r3, #0]
		}
		TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0;
    4102:	4b03      	ldr	r3, [pc, #12]	; (4110 <TC3_Handler+0xf0>)
    4104:	2210      	movs	r2, #16
    4106:	739a      	strb	r2, [r3, #14]
	}
}
    4108:	46c0      	nop			; (mov r8, r8)
    410a:	46bd      	mov	sp, r7
    410c:	b013      	add	sp, #76	; 0x4c
    410e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4110:	42002c00 	.word	0x42002c00
    4114:	20000209 	.word	0x20000209
    4118:	20000250 	.word	0x20000250
    411c:	00003c99 	.word	0x00003c99
    4120:	00002a5d 	.word	0x00002a5d
    4124:	20000238 	.word	0x20000238
    4128:	00005555 	.word	0x00005555
    412c:	200001f7 	.word	0x200001f7
    4130:	00002c79 	.word	0x00002c79
    4134:	20000171 	.word	0x20000171
    4138:	00002ead 	.word	0x00002ead
    413c:	20000212 	.word	0x20000212
    4140:	0000313d 	.word	0x0000313d
    4144:	0000297d 	.word	0x0000297d
    4148:	200001f8 	.word	0x200001f8
    414c:	00003359 	.word	0x00003359
    4150:	20000051 	.word	0x20000051
    4154:	00008708 	.word	0x00008708
    4158:	00007129 	.word	0x00007129
    415c:	00001d9d 	.word	0x00001d9d

00004160 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4160:	b580      	push	{r7, lr}
    4162:	b084      	sub	sp, #16
    4164:	af00      	add	r7, sp, #0
    4166:	0002      	movs	r2, r0
    4168:	1dfb      	adds	r3, r7, #7
    416a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    416c:	230f      	movs	r3, #15
    416e:	18fb      	adds	r3, r7, r3
    4170:	1dfa      	adds	r2, r7, #7
    4172:	7812      	ldrb	r2, [r2, #0]
    4174:	09d2      	lsrs	r2, r2, #7
    4176:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4178:	230e      	movs	r3, #14
    417a:	18fb      	adds	r3, r7, r3
    417c:	1dfa      	adds	r2, r7, #7
    417e:	7812      	ldrb	r2, [r2, #0]
    4180:	0952      	lsrs	r2, r2, #5
    4182:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4184:	4b0d      	ldr	r3, [pc, #52]	; (41bc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4186:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4188:	230f      	movs	r3, #15
    418a:	18fb      	adds	r3, r7, r3
    418c:	781b      	ldrb	r3, [r3, #0]
    418e:	2b00      	cmp	r3, #0
    4190:	d10f      	bne.n	41b2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4192:	230f      	movs	r3, #15
    4194:	18fb      	adds	r3, r7, r3
    4196:	781b      	ldrb	r3, [r3, #0]
    4198:	009b      	lsls	r3, r3, #2
    419a:	2210      	movs	r2, #16
    419c:	4694      	mov	ip, r2
    419e:	44bc      	add	ip, r7
    41a0:	4463      	add	r3, ip
    41a2:	3b08      	subs	r3, #8
    41a4:	681a      	ldr	r2, [r3, #0]
    41a6:	230e      	movs	r3, #14
    41a8:	18fb      	adds	r3, r7, r3
    41aa:	781b      	ldrb	r3, [r3, #0]
    41ac:	01db      	lsls	r3, r3, #7
    41ae:	18d3      	adds	r3, r2, r3
    41b0:	e000      	b.n	41b4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    41b2:	2300      	movs	r3, #0
	}
}
    41b4:	0018      	movs	r0, r3
    41b6:	46bd      	mov	sp, r7
    41b8:	b004      	add	sp, #16
    41ba:	bd80      	pop	{r7, pc}
    41bc:	41004400 	.word	0x41004400

000041c0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    41c0:	b580      	push	{r7, lr}
    41c2:	b082      	sub	sp, #8
    41c4:	af00      	add	r7, sp, #0
    41c6:	0002      	movs	r2, r0
    41c8:	1dfb      	adds	r3, r7, #7
    41ca:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    41cc:	1dfb      	adds	r3, r7, #7
    41ce:	781b      	ldrb	r3, [r3, #0]
    41d0:	0018      	movs	r0, r3
    41d2:	4b03      	ldr	r3, [pc, #12]	; (41e0 <port_get_group_from_gpio_pin+0x20>)
    41d4:	4798      	blx	r3
    41d6:	0003      	movs	r3, r0
}
    41d8:	0018      	movs	r0, r3
    41da:	46bd      	mov	sp, r7
    41dc:	b002      	add	sp, #8
    41de:	bd80      	pop	{r7, pc}
    41e0:	00004161 	.word	0x00004161

000041e4 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    41e4:	b580      	push	{r7, lr}
    41e6:	b082      	sub	sp, #8
    41e8:	af00      	add	r7, sp, #0
    41ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    41ec:	687b      	ldr	r3, [r7, #4]
    41ee:	2200      	movs	r2, #0
    41f0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    41f2:	687b      	ldr	r3, [r7, #4]
    41f4:	2201      	movs	r2, #1
    41f6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	2200      	movs	r2, #0
    41fc:	709a      	strb	r2, [r3, #2]
}
    41fe:	46c0      	nop			; (mov r8, r8)
    4200:	46bd      	mov	sp, r7
    4202:	b002      	add	sp, #8
    4204:	bd80      	pop	{r7, pc}
    4206:	46c0      	nop			; (mov r8, r8)

00004208 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    4208:	b580      	push	{r7, lr}
    420a:	b084      	sub	sp, #16
    420c:	af00      	add	r7, sp, #0
    420e:	0002      	movs	r2, r0
    4210:	1dfb      	adds	r3, r7, #7
    4212:	701a      	strb	r2, [r3, #0]
    4214:	1dbb      	adds	r3, r7, #6
    4216:	1c0a      	adds	r2, r1, #0
    4218:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    421a:	1dfb      	adds	r3, r7, #7
    421c:	781b      	ldrb	r3, [r3, #0]
    421e:	0018      	movs	r0, r3
    4220:	4b0d      	ldr	r3, [pc, #52]	; (4258 <port_pin_set_output_level+0x50>)
    4222:	4798      	blx	r3
    4224:	0003      	movs	r3, r0
    4226:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4228:	1dfb      	adds	r3, r7, #7
    422a:	781b      	ldrb	r3, [r3, #0]
    422c:	221f      	movs	r2, #31
    422e:	4013      	ands	r3, r2
    4230:	2201      	movs	r2, #1
    4232:	409a      	lsls	r2, r3
    4234:	0013      	movs	r3, r2
    4236:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4238:	1dbb      	adds	r3, r7, #6
    423a:	781b      	ldrb	r3, [r3, #0]
    423c:	2b00      	cmp	r3, #0
    423e:	d003      	beq.n	4248 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4240:	68fb      	ldr	r3, [r7, #12]
    4242:	68ba      	ldr	r2, [r7, #8]
    4244:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    4246:	e002      	b.n	424e <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4248:	68fb      	ldr	r3, [r7, #12]
    424a:	68ba      	ldr	r2, [r7, #8]
    424c:	615a      	str	r2, [r3, #20]
	}
}
    424e:	46c0      	nop			; (mov r8, r8)
    4250:	46bd      	mov	sp, r7
    4252:	b004      	add	sp, #16
    4254:	bd80      	pop	{r7, pc}
    4256:	46c0      	nop			; (mov r8, r8)
    4258:	000041c1 	.word	0x000041c1

0000425c <sounds_init_pins>:
 *  Author: Andreas
 */ 
#include "sounds.h"

void sounds_init_pins(void)
{
    425c:	b580      	push	{r7, lr}
    425e:	b082      	sub	sp, #8
    4260:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    4262:	1d3b      	adds	r3, r7, #4
    4264:	0018      	movs	r0, r3
    4266:	4b3f      	ldr	r3, [pc, #252]	; (4364 <sounds_init_pins+0x108>)
    4268:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    426a:	1d3b      	adds	r3, r7, #4
    426c:	2200      	movs	r2, #0
    426e:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4270:	1d3b      	adds	r3, r7, #4
    4272:	2201      	movs	r2, #1
    4274:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SOUNDS_PIN_SS,&config_port_pin);
    4276:	1d3b      	adds	r3, r7, #4
    4278:	0019      	movs	r1, r3
    427a:	2005      	movs	r0, #5
    427c:	4b3a      	ldr	r3, [pc, #232]	; (4368 <sounds_init_pins+0x10c>)
    427e:	4798      	blx	r3
	port_pin_set_config(SOUNDS_PIN_SPDT_SEL1,&config_port_pin);
    4280:	1d3b      	adds	r3, r7, #4
    4282:	0019      	movs	r1, r3
    4284:	2006      	movs	r0, #6
    4286:	4b38      	ldr	r3, [pc, #224]	; (4368 <sounds_init_pins+0x10c>)
    4288:	4798      	blx	r3
	port_pin_set_config(SOUNDS_PIN_SPDT_SEL2,&config_port_pin);
    428a:	1d3b      	adds	r3, r7, #4
    428c:	0019      	movs	r1, r3
    428e:	2007      	movs	r0, #7
    4290:	4b35      	ldr	r3, [pc, #212]	; (4368 <sounds_init_pins+0x10c>)
    4292:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN00,&config_port_pin);
    4294:	1d3b      	adds	r3, r7, #4
    4296:	0019      	movs	r1, r3
    4298:	200b      	movs	r0, #11
    429a:	4b33      	ldr	r3, [pc, #204]	; (4368 <sounds_init_pins+0x10c>)
    429c:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN00,true);
    429e:	2101      	movs	r1, #1
    42a0:	200b      	movs	r0, #11
    42a2:	4b32      	ldr	r3, [pc, #200]	; (436c <sounds_init_pins+0x110>)
    42a4:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN01,&config_port_pin);
    42a6:	1d3b      	adds	r3, r7, #4
    42a8:	0019      	movs	r1, r3
    42aa:	200c      	movs	r0, #12
    42ac:	4b2e      	ldr	r3, [pc, #184]	; (4368 <sounds_init_pins+0x10c>)
    42ae:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN01,true);
    42b0:	2101      	movs	r1, #1
    42b2:	200c      	movs	r0, #12
    42b4:	4b2d      	ldr	r3, [pc, #180]	; (436c <sounds_init_pins+0x110>)
    42b6:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN02,&config_port_pin);
    42b8:	1d3b      	adds	r3, r7, #4
    42ba:	0019      	movs	r1, r3
    42bc:	200d      	movs	r0, #13
    42be:	4b2a      	ldr	r3, [pc, #168]	; (4368 <sounds_init_pins+0x10c>)
    42c0:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN02,true);
    42c2:	2101      	movs	r1, #1
    42c4:	200d      	movs	r0, #13
    42c6:	4b29      	ldr	r3, [pc, #164]	; (436c <sounds_init_pins+0x110>)
    42c8:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN03,&config_port_pin);
    42ca:	1d3b      	adds	r3, r7, #4
    42cc:	0019      	movs	r1, r3
    42ce:	200e      	movs	r0, #14
    42d0:	4b25      	ldr	r3, [pc, #148]	; (4368 <sounds_init_pins+0x10c>)
    42d2:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN03,true);
    42d4:	2101      	movs	r1, #1
    42d6:	200e      	movs	r0, #14
    42d8:	4b24      	ldr	r3, [pc, #144]	; (436c <sounds_init_pins+0x110>)
    42da:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN04,&config_port_pin);
    42dc:	1d3b      	adds	r3, r7, #4
    42de:	0019      	movs	r1, r3
    42e0:	200f      	movs	r0, #15
    42e2:	4b21      	ldr	r3, [pc, #132]	; (4368 <sounds_init_pins+0x10c>)
    42e4:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN04,true);
    42e6:	2101      	movs	r1, #1
    42e8:	200f      	movs	r0, #15
    42ea:	4b20      	ldr	r3, [pc, #128]	; (436c <sounds_init_pins+0x110>)
    42ec:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN05,&config_port_pin);
    42ee:	1d3b      	adds	r3, r7, #4
    42f0:	0019      	movs	r1, r3
    42f2:	2010      	movs	r0, #16
    42f4:	4b1c      	ldr	r3, [pc, #112]	; (4368 <sounds_init_pins+0x10c>)
    42f6:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN05,true);
    42f8:	2101      	movs	r1, #1
    42fa:	2010      	movs	r0, #16
    42fc:	4b1b      	ldr	r3, [pc, #108]	; (436c <sounds_init_pins+0x110>)
    42fe:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN06,&config_port_pin);
    4300:	1d3b      	adds	r3, r7, #4
    4302:	0019      	movs	r1, r3
    4304:	2011      	movs	r0, #17
    4306:	4b18      	ldr	r3, [pc, #96]	; (4368 <sounds_init_pins+0x10c>)
    4308:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN06,true);
    430a:	2101      	movs	r1, #1
    430c:	2011      	movs	r0, #17
    430e:	4b17      	ldr	r3, [pc, #92]	; (436c <sounds_init_pins+0x110>)
    4310:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN07,&config_port_pin);
    4312:	1d3b      	adds	r3, r7, #4
    4314:	0019      	movs	r1, r3
    4316:	2012      	movs	r0, #18
    4318:	4b13      	ldr	r3, [pc, #76]	; (4368 <sounds_init_pins+0x10c>)
    431a:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN07,true);
    431c:	2101      	movs	r1, #1
    431e:	2012      	movs	r0, #18
    4320:	4b12      	ldr	r3, [pc, #72]	; (436c <sounds_init_pins+0x110>)
    4322:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN08,&config_port_pin);
    4324:	1d3b      	adds	r3, r7, #4
    4326:	0019      	movs	r1, r3
    4328:	2013      	movs	r0, #19
    432a:	4b0f      	ldr	r3, [pc, #60]	; (4368 <sounds_init_pins+0x10c>)
    432c:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN08,true);
    432e:	2101      	movs	r1, #1
    4330:	2013      	movs	r0, #19
    4332:	4b0e      	ldr	r3, [pc, #56]	; (436c <sounds_init_pins+0x110>)
    4334:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN09,&config_port_pin);
    4336:	1d3b      	adds	r3, r7, #4
    4338:	0019      	movs	r1, r3
    433a:	2014      	movs	r0, #20
    433c:	4b0a      	ldr	r3, [pc, #40]	; (4368 <sounds_init_pins+0x10c>)
    433e:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN09,true);
    4340:	2101      	movs	r1, #1
    4342:	2014      	movs	r0, #20
    4344:	4b09      	ldr	r3, [pc, #36]	; (436c <sounds_init_pins+0x110>)
    4346:	4798      	blx	r3
	
	port_pin_set_config(SB_PIN_BTN10,&config_port_pin);
    4348:	1d3b      	adds	r3, r7, #4
    434a:	0019      	movs	r1, r3
    434c:	2015      	movs	r0, #21
    434e:	4b06      	ldr	r3, [pc, #24]	; (4368 <sounds_init_pins+0x10c>)
    4350:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN10,true);
    4352:	2101      	movs	r1, #1
    4354:	2015      	movs	r0, #21
    4356:	4b05      	ldr	r3, [pc, #20]	; (436c <sounds_init_pins+0x110>)
    4358:	4798      	blx	r3
}
    435a:	46c0      	nop			; (mov r8, r8)
    435c:	46bd      	mov	sp, r7
    435e:	b002      	add	sp, #8
    4360:	bd80      	pop	{r7, pc}
    4362:	46c0      	nop			; (mov r8, r8)
    4364:	000041e5 	.word	0x000041e5
    4368:	00000c7d 	.word	0x00000c7d
    436c:	00004209 	.word	0x00004209

00004370 <select_sample>:
{
	port_pin_set_output_level(SOUNDS_PIN_SS,true);
	port_pin_set_output_level(SOUNDS_PIN_SPDT_SEL2,true);
}
void select_sample(void)
{
    4370:	b580      	push	{r7, lr}
    4372:	af00      	add	r7, sp, #0
	port_pin_set_output_level(SOUNDS_PIN_SS,false);
    4374:	2100      	movs	r1, #0
    4376:	2005      	movs	r0, #5
    4378:	4b02      	ldr	r3, [pc, #8]	; (4384 <select_sample+0x14>)
    437a:	4798      	blx	r3
}
    437c:	46c0      	nop			; (mov r8, r8)
    437e:	46bd      	mov	sp, r7
    4380:	bd80      	pop	{r7, pc}
    4382:	46c0      	nop			; (mov r8, r8)
    4384:	00004209 	.word	0x00004209

00004388 <press_sb_btn>:
	port_pin_set_output_level(SOUNDS_PIN_SPDT_SEL1,false);
	port_pin_set_output_level(SOUNDS_PIN_SPDT_SEL2,false);
}

void press_sb_btn(uint8_t btn)
{
    4388:	b580      	push	{r7, lr}
    438a:	b082      	sub	sp, #8
    438c:	af00      	add	r7, sp, #0
    438e:	0002      	movs	r2, r0
    4390:	1dfb      	adds	r3, r7, #7
    4392:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(btn,false);
    4394:	1dfb      	adds	r3, r7, #7
    4396:	781b      	ldrb	r3, [r3, #0]
    4398:	2100      	movs	r1, #0
    439a:	0018      	movs	r0, r3
    439c:	4b02      	ldr	r3, [pc, #8]	; (43a8 <press_sb_btn+0x20>)
    439e:	4798      	blx	r3
}
    43a0:	46c0      	nop			; (mov r8, r8)
    43a2:	46bd      	mov	sp, r7
    43a4:	b002      	add	sp, #8
    43a6:	bd80      	pop	{r7, pc}
    43a8:	00004209 	.word	0x00004209

000043ac <release_sb_btn>:

void release_sb_btn(uint8_t btn)
{
    43ac:	b580      	push	{r7, lr}
    43ae:	b082      	sub	sp, #8
    43b0:	af00      	add	r7, sp, #0
    43b2:	0002      	movs	r2, r0
    43b4:	1dfb      	adds	r3, r7, #7
    43b6:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(btn,true);
    43b8:	1dfb      	adds	r3, r7, #7
    43ba:	781b      	ldrb	r3, [r3, #0]
    43bc:	2101      	movs	r1, #1
    43be:	0018      	movs	r0, r3
    43c0:	4b02      	ldr	r3, [pc, #8]	; (43cc <release_sb_btn+0x20>)
    43c2:	4798      	blx	r3
}
    43c4:	46c0      	nop			; (mov r8, r8)
    43c6:	46bd      	mov	sp, r7
    43c8:	b002      	add	sp, #8
    43ca:	bd80      	pop	{r7, pc}
    43cc:	00004209 	.word	0x00004209

000043d0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    43d0:	b580      	push	{r7, lr}
    43d2:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    43d4:	46c0      	nop			; (mov r8, r8)
    43d6:	46bd      	mov	sp, r7
    43d8:	bd80      	pop	{r7, pc}
    43da:	46c0      	nop			; (mov r8, r8)

000043dc <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    43dc:	b580      	push	{r7, lr}
    43de:	b082      	sub	sp, #8
    43e0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    43e2:	4b10      	ldr	r3, [pc, #64]	; (4424 <cpu_irq_enter_critical+0x48>)
    43e4:	681b      	ldr	r3, [r3, #0]
    43e6:	2b00      	cmp	r3, #0
    43e8:	d112      	bne.n	4410 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    43ea:	f3ef 8310 	mrs	r3, PRIMASK
    43ee:	607b      	str	r3, [r7, #4]
  return(result);
    43f0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    43f2:	2b00      	cmp	r3, #0
    43f4:	d109      	bne.n	440a <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    43f6:	b672      	cpsid	i
    43f8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    43fc:	4b0a      	ldr	r3, [pc, #40]	; (4428 <cpu_irq_enter_critical+0x4c>)
    43fe:	2200      	movs	r2, #0
    4400:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4402:	4b0a      	ldr	r3, [pc, #40]	; (442c <cpu_irq_enter_critical+0x50>)
    4404:	2201      	movs	r2, #1
    4406:	701a      	strb	r2, [r3, #0]
    4408:	e002      	b.n	4410 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    440a:	4b08      	ldr	r3, [pc, #32]	; (442c <cpu_irq_enter_critical+0x50>)
    440c:	2200      	movs	r2, #0
    440e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4410:	4b04      	ldr	r3, [pc, #16]	; (4424 <cpu_irq_enter_critical+0x48>)
    4412:	681b      	ldr	r3, [r3, #0]
    4414:	1c5a      	adds	r2, r3, #1
    4416:	4b03      	ldr	r3, [pc, #12]	; (4424 <cpu_irq_enter_critical+0x48>)
    4418:	601a      	str	r2, [r3, #0]
}
    441a:	46c0      	nop			; (mov r8, r8)
    441c:	46bd      	mov	sp, r7
    441e:	b002      	add	sp, #8
    4420:	bd80      	pop	{r7, pc}
    4422:	46c0      	nop			; (mov r8, r8)
    4424:	200000e4 	.word	0x200000e4
    4428:	20000052 	.word	0x20000052
    442c:	200000e8 	.word	0x200000e8

00004430 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    4430:	b580      	push	{r7, lr}
    4432:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4434:	4b0b      	ldr	r3, [pc, #44]	; (4464 <cpu_irq_leave_critical+0x34>)
    4436:	681b      	ldr	r3, [r3, #0]
    4438:	1e5a      	subs	r2, r3, #1
    443a:	4b0a      	ldr	r3, [pc, #40]	; (4464 <cpu_irq_leave_critical+0x34>)
    443c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    443e:	4b09      	ldr	r3, [pc, #36]	; (4464 <cpu_irq_leave_critical+0x34>)
    4440:	681b      	ldr	r3, [r3, #0]
    4442:	2b00      	cmp	r3, #0
    4444:	d10a      	bne.n	445c <cpu_irq_leave_critical+0x2c>
    4446:	4b08      	ldr	r3, [pc, #32]	; (4468 <cpu_irq_leave_critical+0x38>)
    4448:	781b      	ldrb	r3, [r3, #0]
    444a:	b2db      	uxtb	r3, r3
    444c:	2b00      	cmp	r3, #0
    444e:	d005      	beq.n	445c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    4450:	4b06      	ldr	r3, [pc, #24]	; (446c <cpu_irq_leave_critical+0x3c>)
    4452:	2201      	movs	r2, #1
    4454:	701a      	strb	r2, [r3, #0]
    4456:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    445a:	b662      	cpsie	i
	}
}
    445c:	46c0      	nop			; (mov r8, r8)
    445e:	46bd      	mov	sp, r7
    4460:	bd80      	pop	{r7, pc}
    4462:	46c0      	nop			; (mov r8, r8)
    4464:	200000e4 	.word	0x200000e4
    4468:	200000e8 	.word	0x200000e8
    446c:	20000052 	.word	0x20000052

00004470 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    4470:	b580      	push	{r7, lr}
    4472:	b082      	sub	sp, #8
    4474:	af00      	add	r7, sp, #0
    4476:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4478:	687b      	ldr	r3, [r7, #4]
    447a:	2201      	movs	r2, #1
    447c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    447e:	687b      	ldr	r3, [r7, #4]
    4480:	2200      	movs	r2, #0
    4482:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4484:	687b      	ldr	r3, [r7, #4]
    4486:	2206      	movs	r2, #6
    4488:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    448a:	687b      	ldr	r3, [r7, #4]
    448c:	2200      	movs	r2, #0
    448e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    4490:	687b      	ldr	r3, [r7, #4]
    4492:	2200      	movs	r2, #0
    4494:	725a      	strb	r2, [r3, #9]
}
    4496:	46c0      	nop			; (mov r8, r8)
    4498:	46bd      	mov	sp, r7
    449a:	b002      	add	sp, #8
    449c:	bd80      	pop	{r7, pc}
    449e:	46c0      	nop			; (mov r8, r8)

000044a0 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    44a0:	b580      	push	{r7, lr}
    44a2:	b082      	sub	sp, #8
    44a4:	af00      	add	r7, sp, #0
    44a6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	2203      	movs	r2, #3
    44ac:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    44ae:	687b      	ldr	r3, [r7, #4]
    44b0:	2200      	movs	r2, #0
    44b2:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    44b4:	687b      	ldr	r3, [r7, #4]
    44b6:	2201      	movs	r2, #1
    44b8:	709a      	strb	r2, [r3, #2]
}
    44ba:	46c0      	nop			; (mov r8, r8)
    44bc:	46bd      	mov	sp, r7
    44be:	b002      	add	sp, #8
    44c0:	bd80      	pop	{r7, pc}
    44c2:	46c0      	nop			; (mov r8, r8)

000044c4 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    44c4:	b580      	push	{r7, lr}
    44c6:	b082      	sub	sp, #8
    44c8:	af00      	add	r7, sp, #0
    44ca:	0002      	movs	r2, r0
    44cc:	1dfb      	adds	r3, r7, #7
    44ce:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    44d0:	4a03      	ldr	r2, [pc, #12]	; (44e0 <system_cpu_clock_set_divider+0x1c>)
    44d2:	1dfb      	adds	r3, r7, #7
    44d4:	781b      	ldrb	r3, [r3, #0]
    44d6:	7213      	strb	r3, [r2, #8]
}
    44d8:	46c0      	nop			; (mov r8, r8)
    44da:	46bd      	mov	sp, r7
    44dc:	b002      	add	sp, #8
    44de:	bd80      	pop	{r7, pc}
    44e0:	40000400 	.word	0x40000400

000044e4 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    44e4:	b580      	push	{r7, lr}
    44e6:	b082      	sub	sp, #8
    44e8:	af00      	add	r7, sp, #0
    44ea:	0002      	movs	r2, r0
    44ec:	1dfb      	adds	r3, r7, #7
    44ee:	701a      	strb	r2, [r3, #0]
    44f0:	1dbb      	adds	r3, r7, #6
    44f2:	1c0a      	adds	r2, r1, #0
    44f4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    44f6:	1dfb      	adds	r3, r7, #7
    44f8:	781b      	ldrb	r3, [r3, #0]
    44fa:	2b01      	cmp	r3, #1
    44fc:	d008      	beq.n	4510 <system_apb_clock_set_divider+0x2c>
    44fe:	2b02      	cmp	r3, #2
    4500:	d00b      	beq.n	451a <system_apb_clock_set_divider+0x36>
    4502:	2b00      	cmp	r3, #0
    4504:	d10e      	bne.n	4524 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    4506:	4a0b      	ldr	r2, [pc, #44]	; (4534 <system_apb_clock_set_divider+0x50>)
    4508:	1dbb      	adds	r3, r7, #6
    450a:	781b      	ldrb	r3, [r3, #0]
    450c:	7253      	strb	r3, [r2, #9]
			break;
    450e:	e00b      	b.n	4528 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    4510:	4a08      	ldr	r2, [pc, #32]	; (4534 <system_apb_clock_set_divider+0x50>)
    4512:	1dbb      	adds	r3, r7, #6
    4514:	781b      	ldrb	r3, [r3, #0]
    4516:	7293      	strb	r3, [r2, #10]
			break;
    4518:	e006      	b.n	4528 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    451a:	4a06      	ldr	r2, [pc, #24]	; (4534 <system_apb_clock_set_divider+0x50>)
    451c:	1dbb      	adds	r3, r7, #6
    451e:	781b      	ldrb	r3, [r3, #0]
    4520:	72d3      	strb	r3, [r2, #11]
			break;
    4522:	e001      	b.n	4528 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4524:	2317      	movs	r3, #23
    4526:	e000      	b.n	452a <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    4528:	2300      	movs	r3, #0
}
    452a:	0018      	movs	r0, r3
    452c:	46bd      	mov	sp, r7
    452e:	b002      	add	sp, #8
    4530:	bd80      	pop	{r7, pc}
    4532:	46c0      	nop			; (mov r8, r8)
    4534:	40000400 	.word	0x40000400

00004538 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    4538:	b580      	push	{r7, lr}
    453a:	b082      	sub	sp, #8
    453c:	af00      	add	r7, sp, #0
    453e:	0002      	movs	r2, r0
    4540:	1dfb      	adds	r3, r7, #7
    4542:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4544:	4a08      	ldr	r2, [pc, #32]	; (4568 <system_flash_set_waitstates+0x30>)
    4546:	1dfb      	adds	r3, r7, #7
    4548:	781b      	ldrb	r3, [r3, #0]
    454a:	210f      	movs	r1, #15
    454c:	400b      	ands	r3, r1
    454e:	b2d9      	uxtb	r1, r3
    4550:	6853      	ldr	r3, [r2, #4]
    4552:	200f      	movs	r0, #15
    4554:	4001      	ands	r1, r0
    4556:	0049      	lsls	r1, r1, #1
    4558:	201e      	movs	r0, #30
    455a:	4383      	bics	r3, r0
    455c:	430b      	orrs	r3, r1
    455e:	6053      	str	r3, [r2, #4]
}
    4560:	46c0      	nop			; (mov r8, r8)
    4562:	46bd      	mov	sp, r7
    4564:	b002      	add	sp, #8
    4566:	bd80      	pop	{r7, pc}
    4568:	41004000 	.word	0x41004000

0000456c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    456c:	b580      	push	{r7, lr}
    456e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4570:	46c0      	nop			; (mov r8, r8)
    4572:	4b04      	ldr	r3, [pc, #16]	; (4584 <_system_dfll_wait_for_sync+0x18>)
    4574:	68db      	ldr	r3, [r3, #12]
    4576:	2210      	movs	r2, #16
    4578:	4013      	ands	r3, r2
    457a:	d0fa      	beq.n	4572 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    457c:	46c0      	nop			; (mov r8, r8)
    457e:	46bd      	mov	sp, r7
    4580:	bd80      	pop	{r7, pc}
    4582:	46c0      	nop			; (mov r8, r8)
    4584:	40000800 	.word	0x40000800

00004588 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    4588:	b580      	push	{r7, lr}
    458a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    458c:	4b0c      	ldr	r3, [pc, #48]	; (45c0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    458e:	2202      	movs	r2, #2
    4590:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4592:	4b0c      	ldr	r3, [pc, #48]	; (45c4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4594:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4596:	4a0a      	ldr	r2, [pc, #40]	; (45c0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4598:	4b0b      	ldr	r3, [pc, #44]	; (45c8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    459a:	689b      	ldr	r3, [r3, #8]
    459c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    459e:	4a08      	ldr	r2, [pc, #32]	; (45c0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    45a0:	4b09      	ldr	r3, [pc, #36]	; (45c8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    45a2:	685b      	ldr	r3, [r3, #4]
    45a4:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    45a6:	4b06      	ldr	r3, [pc, #24]	; (45c0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    45a8:	2200      	movs	r2, #0
    45aa:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    45ac:	4b05      	ldr	r3, [pc, #20]	; (45c4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    45ae:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    45b0:	4a03      	ldr	r2, [pc, #12]	; (45c0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    45b2:	4b05      	ldr	r3, [pc, #20]	; (45c8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    45b4:	681b      	ldr	r3, [r3, #0]
    45b6:	b29b      	uxth	r3, r3
    45b8:	8493      	strh	r3, [r2, #36]	; 0x24
}
    45ba:	46c0      	nop			; (mov r8, r8)
    45bc:	46bd      	mov	sp, r7
    45be:	bd80      	pop	{r7, pc}
    45c0:	40000800 	.word	0x40000800
    45c4:	0000456d 	.word	0x0000456d
    45c8:	200000ec 	.word	0x200000ec

000045cc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    45cc:	b580      	push	{r7, lr}
    45ce:	b082      	sub	sp, #8
    45d0:	af00      	add	r7, sp, #0
    45d2:	0002      	movs	r2, r0
    45d4:	1dfb      	adds	r3, r7, #7
    45d6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    45d8:	1dfb      	adds	r3, r7, #7
    45da:	781b      	ldrb	r3, [r3, #0]
    45dc:	2b08      	cmp	r3, #8
    45de:	d840      	bhi.n	4662 <system_clock_source_get_hz+0x96>
    45e0:	009a      	lsls	r2, r3, #2
    45e2:	4b22      	ldr	r3, [pc, #136]	; (466c <system_clock_source_get_hz+0xa0>)
    45e4:	18d3      	adds	r3, r2, r3
    45e6:	681b      	ldr	r3, [r3, #0]
    45e8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    45ea:	4b21      	ldr	r3, [pc, #132]	; (4670 <system_clock_source_get_hz+0xa4>)
    45ec:	691b      	ldr	r3, [r3, #16]
    45ee:	e039      	b.n	4664 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    45f0:	4b20      	ldr	r3, [pc, #128]	; (4674 <system_clock_source_get_hz+0xa8>)
    45f2:	6a1b      	ldr	r3, [r3, #32]
    45f4:	059b      	lsls	r3, r3, #22
    45f6:	0f9b      	lsrs	r3, r3, #30
    45f8:	b2db      	uxtb	r3, r3
    45fa:	001a      	movs	r2, r3
    45fc:	4b1e      	ldr	r3, [pc, #120]	; (4678 <system_clock_source_get_hz+0xac>)
    45fe:	40d3      	lsrs	r3, r2
    4600:	e030      	b.n	4664 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    4602:	2380      	movs	r3, #128	; 0x80
    4604:	021b      	lsls	r3, r3, #8
    4606:	e02d      	b.n	4664 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    4608:	2380      	movs	r3, #128	; 0x80
    460a:	021b      	lsls	r3, r3, #8
    460c:	e02a      	b.n	4664 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    460e:	4b18      	ldr	r3, [pc, #96]	; (4670 <system_clock_source_get_hz+0xa4>)
    4610:	695b      	ldr	r3, [r3, #20]
    4612:	e027      	b.n	4664 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4614:	4b16      	ldr	r3, [pc, #88]	; (4670 <system_clock_source_get_hz+0xa4>)
    4616:	681b      	ldr	r3, [r3, #0]
    4618:	2202      	movs	r2, #2
    461a:	4013      	ands	r3, r2
    461c:	d101      	bne.n	4622 <system_clock_source_get_hz+0x56>
			return 0;
    461e:	2300      	movs	r3, #0
    4620:	e020      	b.n	4664 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    4622:	4b16      	ldr	r3, [pc, #88]	; (467c <system_clock_source_get_hz+0xb0>)
    4624:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4626:	4b12      	ldr	r3, [pc, #72]	; (4670 <system_clock_source_get_hz+0xa4>)
    4628:	681b      	ldr	r3, [r3, #0]
    462a:	2204      	movs	r2, #4
    462c:	4013      	ands	r3, r2
    462e:	d009      	beq.n	4644 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4630:	2000      	movs	r0, #0
    4632:	4b13      	ldr	r3, [pc, #76]	; (4680 <system_clock_source_get_hz+0xb4>)
    4634:	4798      	blx	r3
    4636:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    4638:	4b0d      	ldr	r3, [pc, #52]	; (4670 <system_clock_source_get_hz+0xa4>)
    463a:	689b      	ldr	r3, [r3, #8]
    463c:	041b      	lsls	r3, r3, #16
    463e:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4640:	4353      	muls	r3, r2
    4642:	e00f      	b.n	4664 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    4644:	4b0f      	ldr	r3, [pc, #60]	; (4684 <system_clock_source_get_hz+0xb8>)
    4646:	e00d      	b.n	4664 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4648:	4a0a      	ldr	r2, [pc, #40]	; (4674 <system_clock_source_get_hz+0xa8>)
    464a:	2350      	movs	r3, #80	; 0x50
    464c:	5cd3      	ldrb	r3, [r2, r3]
    464e:	b2db      	uxtb	r3, r3
    4650:	001a      	movs	r2, r3
    4652:	2304      	movs	r3, #4
    4654:	4013      	ands	r3, r2
    4656:	d101      	bne.n	465c <system_clock_source_get_hz+0x90>
			return 0;
    4658:	2300      	movs	r3, #0
    465a:	e003      	b.n	4664 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    465c:	4b04      	ldr	r3, [pc, #16]	; (4670 <system_clock_source_get_hz+0xa4>)
    465e:	68db      	ldr	r3, [r3, #12]
    4660:	e000      	b.n	4664 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    4662:	2300      	movs	r3, #0
	}
}
    4664:	0018      	movs	r0, r3
    4666:	46bd      	mov	sp, r7
    4668:	b002      	add	sp, #8
    466a:	bd80      	pop	{r7, pc}
    466c:	0000871c 	.word	0x0000871c
    4670:	200000ec 	.word	0x200000ec
    4674:	40000800 	.word	0x40000800
    4678:	007a1200 	.word	0x007a1200
    467c:	0000456d 	.word	0x0000456d
    4680:	00004d81 	.word	0x00004d81
    4684:	02dc6c00 	.word	0x02dc6c00

00004688 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4688:	b580      	push	{r7, lr}
    468a:	b084      	sub	sp, #16
    468c:	af00      	add	r7, sp, #0
    468e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4690:	4b1a      	ldr	r3, [pc, #104]	; (46fc <system_clock_source_osc8m_set_config+0x74>)
    4692:	6a1b      	ldr	r3, [r3, #32]
    4694:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4696:	687b      	ldr	r3, [r7, #4]
    4698:	781b      	ldrb	r3, [r3, #0]
    469a:	1c1a      	adds	r2, r3, #0
    469c:	2303      	movs	r3, #3
    469e:	4013      	ands	r3, r2
    46a0:	b2da      	uxtb	r2, r3
    46a2:	230d      	movs	r3, #13
    46a4:	18fb      	adds	r3, r7, r3
    46a6:	2103      	movs	r1, #3
    46a8:	400a      	ands	r2, r1
    46aa:	0010      	movs	r0, r2
    46ac:	781a      	ldrb	r2, [r3, #0]
    46ae:	2103      	movs	r1, #3
    46b0:	438a      	bics	r2, r1
    46b2:	1c11      	adds	r1, r2, #0
    46b4:	1c02      	adds	r2, r0, #0
    46b6:	430a      	orrs	r2, r1
    46b8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    46ba:	687b      	ldr	r3, [r7, #4]
    46bc:	789a      	ldrb	r2, [r3, #2]
    46be:	230c      	movs	r3, #12
    46c0:	18fb      	adds	r3, r7, r3
    46c2:	01d0      	lsls	r0, r2, #7
    46c4:	781a      	ldrb	r2, [r3, #0]
    46c6:	217f      	movs	r1, #127	; 0x7f
    46c8:	400a      	ands	r2, r1
    46ca:	1c11      	adds	r1, r2, #0
    46cc:	1c02      	adds	r2, r0, #0
    46ce:	430a      	orrs	r2, r1
    46d0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    46d2:	687b      	ldr	r3, [r7, #4]
    46d4:	785a      	ldrb	r2, [r3, #1]
    46d6:	230c      	movs	r3, #12
    46d8:	18fb      	adds	r3, r7, r3
    46da:	2101      	movs	r1, #1
    46dc:	400a      	ands	r2, r1
    46de:	0190      	lsls	r0, r2, #6
    46e0:	781a      	ldrb	r2, [r3, #0]
    46e2:	2140      	movs	r1, #64	; 0x40
    46e4:	438a      	bics	r2, r1
    46e6:	1c11      	adds	r1, r2, #0
    46e8:	1c02      	adds	r2, r0, #0
    46ea:	430a      	orrs	r2, r1
    46ec:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    46ee:	4b03      	ldr	r3, [pc, #12]	; (46fc <system_clock_source_osc8m_set_config+0x74>)
    46f0:	68fa      	ldr	r2, [r7, #12]
    46f2:	621a      	str	r2, [r3, #32]
}
    46f4:	46c0      	nop			; (mov r8, r8)
    46f6:	46bd      	mov	sp, r7
    46f8:	b004      	add	sp, #16
    46fa:	bd80      	pop	{r7, pc}
    46fc:	40000800 	.word	0x40000800

00004700 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    4700:	b580      	push	{r7, lr}
    4702:	b082      	sub	sp, #8
    4704:	af00      	add	r7, sp, #0
    4706:	0002      	movs	r2, r0
    4708:	1dfb      	adds	r3, r7, #7
    470a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    470c:	1dfb      	adds	r3, r7, #7
    470e:	781b      	ldrb	r3, [r3, #0]
    4710:	2b08      	cmp	r3, #8
    4712:	d83b      	bhi.n	478c <system_clock_source_enable+0x8c>
    4714:	009a      	lsls	r2, r3, #2
    4716:	4b21      	ldr	r3, [pc, #132]	; (479c <system_clock_source_enable+0x9c>)
    4718:	18d3      	adds	r3, r2, r3
    471a:	681b      	ldr	r3, [r3, #0]
    471c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    471e:	4b20      	ldr	r3, [pc, #128]	; (47a0 <system_clock_source_enable+0xa0>)
    4720:	4a1f      	ldr	r2, [pc, #124]	; (47a0 <system_clock_source_enable+0xa0>)
    4722:	6a12      	ldr	r2, [r2, #32]
    4724:	2102      	movs	r1, #2
    4726:	430a      	orrs	r2, r1
    4728:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    472a:	2300      	movs	r3, #0
    472c:	e031      	b.n	4792 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    472e:	4b1c      	ldr	r3, [pc, #112]	; (47a0 <system_clock_source_enable+0xa0>)
    4730:	4a1b      	ldr	r2, [pc, #108]	; (47a0 <system_clock_source_enable+0xa0>)
    4732:	6992      	ldr	r2, [r2, #24]
    4734:	2102      	movs	r1, #2
    4736:	430a      	orrs	r2, r1
    4738:	619a      	str	r2, [r3, #24]
		break;
    473a:	e029      	b.n	4790 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    473c:	4a18      	ldr	r2, [pc, #96]	; (47a0 <system_clock_source_enable+0xa0>)
    473e:	4b18      	ldr	r3, [pc, #96]	; (47a0 <system_clock_source_enable+0xa0>)
    4740:	8a1b      	ldrh	r3, [r3, #16]
    4742:	b29b      	uxth	r3, r3
    4744:	2102      	movs	r1, #2
    4746:	430b      	orrs	r3, r1
    4748:	b29b      	uxth	r3, r3
    474a:	8213      	strh	r3, [r2, #16]
		break;
    474c:	e020      	b.n	4790 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    474e:	4a14      	ldr	r2, [pc, #80]	; (47a0 <system_clock_source_enable+0xa0>)
    4750:	4b13      	ldr	r3, [pc, #76]	; (47a0 <system_clock_source_enable+0xa0>)
    4752:	8a9b      	ldrh	r3, [r3, #20]
    4754:	b29b      	uxth	r3, r3
    4756:	2102      	movs	r1, #2
    4758:	430b      	orrs	r3, r1
    475a:	b29b      	uxth	r3, r3
    475c:	8293      	strh	r3, [r2, #20]
		break;
    475e:	e017      	b.n	4790 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4760:	4b10      	ldr	r3, [pc, #64]	; (47a4 <system_clock_source_enable+0xa4>)
    4762:	681b      	ldr	r3, [r3, #0]
    4764:	2202      	movs	r2, #2
    4766:	431a      	orrs	r2, r3
    4768:	4b0e      	ldr	r3, [pc, #56]	; (47a4 <system_clock_source_enable+0xa4>)
    476a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    476c:	4b0e      	ldr	r3, [pc, #56]	; (47a8 <system_clock_source_enable+0xa8>)
    476e:	4798      	blx	r3
		break;
    4770:	e00e      	b.n	4790 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4772:	4a0b      	ldr	r2, [pc, #44]	; (47a0 <system_clock_source_enable+0xa0>)
    4774:	490a      	ldr	r1, [pc, #40]	; (47a0 <system_clock_source_enable+0xa0>)
    4776:	2344      	movs	r3, #68	; 0x44
    4778:	5ccb      	ldrb	r3, [r1, r3]
    477a:	b2db      	uxtb	r3, r3
    477c:	2102      	movs	r1, #2
    477e:	430b      	orrs	r3, r1
    4780:	b2d9      	uxtb	r1, r3
    4782:	2344      	movs	r3, #68	; 0x44
    4784:	54d1      	strb	r1, [r2, r3]
		break;
    4786:	e003      	b.n	4790 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4788:	2300      	movs	r3, #0
    478a:	e002      	b.n	4792 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    478c:	2317      	movs	r3, #23
    478e:	e000      	b.n	4792 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    4790:	2300      	movs	r3, #0
}
    4792:	0018      	movs	r0, r3
    4794:	46bd      	mov	sp, r7
    4796:	b002      	add	sp, #8
    4798:	bd80      	pop	{r7, pc}
    479a:	46c0      	nop			; (mov r8, r8)
    479c:	00008740 	.word	0x00008740
    47a0:	40000800 	.word	0x40000800
    47a4:	200000ec 	.word	0x200000ec
    47a8:	00004589 	.word	0x00004589

000047ac <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    47ac:	b580      	push	{r7, lr}
    47ae:	b082      	sub	sp, #8
    47b0:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    47b2:	003b      	movs	r3, r7
    47b4:	2202      	movs	r2, #2
    47b6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    47b8:	2300      	movs	r3, #0
    47ba:	607b      	str	r3, [r7, #4]
    47bc:	e009      	b.n	47d2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    47be:	687b      	ldr	r3, [r7, #4]
    47c0:	b2db      	uxtb	r3, r3
    47c2:	003a      	movs	r2, r7
    47c4:	0011      	movs	r1, r2
    47c6:	0018      	movs	r0, r3
    47c8:	4b05      	ldr	r3, [pc, #20]	; (47e0 <_switch_peripheral_gclk+0x34>)
    47ca:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    47cc:	687b      	ldr	r3, [r7, #4]
    47ce:	3301      	adds	r3, #1
    47d0:	607b      	str	r3, [r7, #4]
    47d2:	687b      	ldr	r3, [r7, #4]
    47d4:	2b24      	cmp	r3, #36	; 0x24
    47d6:	d9f2      	bls.n	47be <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    47d8:	46c0      	nop			; (mov r8, r8)
    47da:	46bd      	mov	sp, r7
    47dc:	b002      	add	sp, #8
    47de:	bd80      	pop	{r7, pc}
    47e0:	00004c5d 	.word	0x00004c5d

000047e4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    47e4:	b580      	push	{r7, lr}
    47e6:	b0a0      	sub	sp, #128	; 0x80
    47e8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    47ea:	4b45      	ldr	r3, [pc, #276]	; (4900 <system_clock_init+0x11c>)
    47ec:	22c2      	movs	r2, #194	; 0xc2
    47ee:	00d2      	lsls	r2, r2, #3
    47f0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    47f2:	2000      	movs	r0, #0
    47f4:	4b43      	ldr	r3, [pc, #268]	; (4904 <system_clock_init+0x120>)
    47f6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    47f8:	4b43      	ldr	r3, [pc, #268]	; (4908 <system_clock_init+0x124>)
    47fa:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    47fc:	237c      	movs	r3, #124	; 0x7c
    47fe:	18fb      	adds	r3, r7, r3
    4800:	0018      	movs	r0, r3
    4802:	4b42      	ldr	r3, [pc, #264]	; (490c <system_clock_init+0x128>)
    4804:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4806:	237c      	movs	r3, #124	; 0x7c
    4808:	18fb      	adds	r3, r7, r3
    480a:	2200      	movs	r2, #0
    480c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    480e:	237c      	movs	r3, #124	; 0x7c
    4810:	18fb      	adds	r3, r7, r3
    4812:	2201      	movs	r2, #1
    4814:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    4816:	237c      	movs	r3, #124	; 0x7c
    4818:	18fb      	adds	r3, r7, r3
    481a:	2200      	movs	r2, #0
    481c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    481e:	237c      	movs	r3, #124	; 0x7c
    4820:	18fb      	adds	r3, r7, r3
    4822:	0018      	movs	r0, r3
    4824:	4b3a      	ldr	r3, [pc, #232]	; (4910 <system_clock_init+0x12c>)
    4826:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4828:	2006      	movs	r0, #6
    482a:	4b3a      	ldr	r3, [pc, #232]	; (4914 <system_clock_init+0x130>)
    482c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    482e:	4b3a      	ldr	r3, [pc, #232]	; (4918 <system_clock_init+0x134>)
    4830:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4832:	2364      	movs	r3, #100	; 0x64
    4834:	18fb      	adds	r3, r7, r3
    4836:	0018      	movs	r0, r3
    4838:	4b38      	ldr	r3, [pc, #224]	; (491c <system_clock_init+0x138>)
    483a:	4798      	blx	r3
    483c:	2364      	movs	r3, #100	; 0x64
    483e:	18fb      	adds	r3, r7, r3
    4840:	2206      	movs	r2, #6
    4842:	701a      	strb	r2, [r3, #0]
    4844:	2364      	movs	r3, #100	; 0x64
    4846:	18fb      	adds	r3, r7, r3
    4848:	2201      	movs	r2, #1
    484a:	605a      	str	r2, [r3, #4]
    484c:	2364      	movs	r3, #100	; 0x64
    484e:	18fb      	adds	r3, r7, r3
    4850:	2201      	movs	r2, #1
    4852:	721a      	strb	r2, [r3, #8]
    4854:	2364      	movs	r3, #100	; 0x64
    4856:	18fb      	adds	r3, r7, r3
    4858:	2200      	movs	r2, #0
    485a:	725a      	strb	r2, [r3, #9]
    485c:	2364      	movs	r3, #100	; 0x64
    485e:	18fb      	adds	r3, r7, r3
    4860:	0019      	movs	r1, r3
    4862:	2001      	movs	r0, #1
    4864:	4b2e      	ldr	r3, [pc, #184]	; (4920 <system_clock_init+0x13c>)
    4866:	4798      	blx	r3
    4868:	2001      	movs	r0, #1
    486a:	4b2e      	ldr	r3, [pc, #184]	; (4924 <system_clock_init+0x140>)
    486c:	4798      	blx	r3
    486e:	2340      	movs	r3, #64	; 0x40
    4870:	18fb      	adds	r3, r7, r3
    4872:	0018      	movs	r0, r3
    4874:	4b29      	ldr	r3, [pc, #164]	; (491c <system_clock_init+0x138>)
    4876:	4798      	blx	r3
    4878:	2340      	movs	r3, #64	; 0x40
    487a:	18fb      	adds	r3, r7, r3
    487c:	2206      	movs	r2, #6
    487e:	701a      	strb	r2, [r3, #0]
    4880:	2340      	movs	r3, #64	; 0x40
    4882:	18fb      	adds	r3, r7, r3
    4884:	2201      	movs	r2, #1
    4886:	605a      	str	r2, [r3, #4]
    4888:	2340      	movs	r3, #64	; 0x40
    488a:	18fb      	adds	r3, r7, r3
    488c:	2200      	movs	r2, #0
    488e:	721a      	strb	r2, [r3, #8]
    4890:	2340      	movs	r3, #64	; 0x40
    4892:	18fb      	adds	r3, r7, r3
    4894:	2200      	movs	r2, #0
    4896:	725a      	strb	r2, [r3, #9]
    4898:	2340      	movs	r3, #64	; 0x40
    489a:	18fb      	adds	r3, r7, r3
    489c:	0019      	movs	r1, r3
    489e:	2004      	movs	r0, #4
    48a0:	4b1f      	ldr	r3, [pc, #124]	; (4920 <system_clock_init+0x13c>)
    48a2:	4798      	blx	r3
    48a4:	2004      	movs	r0, #4
    48a6:	4b1f      	ldr	r3, [pc, #124]	; (4924 <system_clock_init+0x140>)
    48a8:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    48aa:	2000      	movs	r0, #0
    48ac:	4b1e      	ldr	r3, [pc, #120]	; (4928 <system_clock_init+0x144>)
    48ae:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    48b0:	2100      	movs	r1, #0
    48b2:	2000      	movs	r0, #0
    48b4:	4b1d      	ldr	r3, [pc, #116]	; (492c <system_clock_init+0x148>)
    48b6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    48b8:	2100      	movs	r1, #0
    48ba:	2001      	movs	r0, #1
    48bc:	4b1b      	ldr	r3, [pc, #108]	; (492c <system_clock_init+0x148>)
    48be:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    48c0:	2100      	movs	r1, #0
    48c2:	2002      	movs	r0, #2
    48c4:	4b19      	ldr	r3, [pc, #100]	; (492c <system_clock_init+0x148>)
    48c6:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    48c8:	1d3b      	adds	r3, r7, #4
    48ca:	0018      	movs	r0, r3
    48cc:	4b13      	ldr	r3, [pc, #76]	; (491c <system_clock_init+0x138>)
    48ce:	4798      	blx	r3
    48d0:	1d3b      	adds	r3, r7, #4
    48d2:	2206      	movs	r2, #6
    48d4:	701a      	strb	r2, [r3, #0]
    48d6:	1d3b      	adds	r3, r7, #4
    48d8:	2201      	movs	r2, #1
    48da:	605a      	str	r2, [r3, #4]
    48dc:	1d3b      	adds	r3, r7, #4
    48de:	2201      	movs	r2, #1
    48e0:	721a      	strb	r2, [r3, #8]
    48e2:	1d3b      	adds	r3, r7, #4
    48e4:	2200      	movs	r2, #0
    48e6:	725a      	strb	r2, [r3, #9]
    48e8:	1d3b      	adds	r3, r7, #4
    48ea:	0019      	movs	r1, r3
    48ec:	2000      	movs	r0, #0
    48ee:	4b0c      	ldr	r3, [pc, #48]	; (4920 <system_clock_init+0x13c>)
    48f0:	4798      	blx	r3
    48f2:	2000      	movs	r0, #0
    48f4:	4b0b      	ldr	r3, [pc, #44]	; (4924 <system_clock_init+0x140>)
    48f6:	4798      	blx	r3
#endif
}
    48f8:	46c0      	nop			; (mov r8, r8)
    48fa:	46bd      	mov	sp, r7
    48fc:	b020      	add	sp, #128	; 0x80
    48fe:	bd80      	pop	{r7, pc}
    4900:	40000800 	.word	0x40000800
    4904:	00004539 	.word	0x00004539
    4908:	000047ad 	.word	0x000047ad
    490c:	000044a1 	.word	0x000044a1
    4910:	00004689 	.word	0x00004689
    4914:	00004701 	.word	0x00004701
    4918:	000049d5 	.word	0x000049d5
    491c:	00004471 	.word	0x00004471
    4920:	00004a05 	.word	0x00004a05
    4924:	00004b29 	.word	0x00004b29
    4928:	000044c5 	.word	0x000044c5
    492c:	000044e5 	.word	0x000044e5

00004930 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4930:	b580      	push	{r7, lr}
    4932:	b082      	sub	sp, #8
    4934:	af00      	add	r7, sp, #0
    4936:	0002      	movs	r2, r0
    4938:	6039      	str	r1, [r7, #0]
    493a:	1dfb      	adds	r3, r7, #7
    493c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    493e:	1dfb      	adds	r3, r7, #7
    4940:	781b      	ldrb	r3, [r3, #0]
    4942:	2b01      	cmp	r3, #1
    4944:	d00a      	beq.n	495c <system_apb_clock_set_mask+0x2c>
    4946:	2b02      	cmp	r3, #2
    4948:	d00f      	beq.n	496a <system_apb_clock_set_mask+0x3a>
    494a:	2b00      	cmp	r3, #0
    494c:	d114      	bne.n	4978 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    494e:	4b0e      	ldr	r3, [pc, #56]	; (4988 <system_apb_clock_set_mask+0x58>)
    4950:	4a0d      	ldr	r2, [pc, #52]	; (4988 <system_apb_clock_set_mask+0x58>)
    4952:	6991      	ldr	r1, [r2, #24]
    4954:	683a      	ldr	r2, [r7, #0]
    4956:	430a      	orrs	r2, r1
    4958:	619a      	str	r2, [r3, #24]
			break;
    495a:	e00f      	b.n	497c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    495c:	4b0a      	ldr	r3, [pc, #40]	; (4988 <system_apb_clock_set_mask+0x58>)
    495e:	4a0a      	ldr	r2, [pc, #40]	; (4988 <system_apb_clock_set_mask+0x58>)
    4960:	69d1      	ldr	r1, [r2, #28]
    4962:	683a      	ldr	r2, [r7, #0]
    4964:	430a      	orrs	r2, r1
    4966:	61da      	str	r2, [r3, #28]
			break;
    4968:	e008      	b.n	497c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    496a:	4b07      	ldr	r3, [pc, #28]	; (4988 <system_apb_clock_set_mask+0x58>)
    496c:	4a06      	ldr	r2, [pc, #24]	; (4988 <system_apb_clock_set_mask+0x58>)
    496e:	6a11      	ldr	r1, [r2, #32]
    4970:	683a      	ldr	r2, [r7, #0]
    4972:	430a      	orrs	r2, r1
    4974:	621a      	str	r2, [r3, #32]
			break;
    4976:	e001      	b.n	497c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4978:	2317      	movs	r3, #23
    497a:	e000      	b.n	497e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    497c:	2300      	movs	r3, #0
}
    497e:	0018      	movs	r0, r3
    4980:	46bd      	mov	sp, r7
    4982:	b002      	add	sp, #8
    4984:	bd80      	pop	{r7, pc}
    4986:	46c0      	nop			; (mov r8, r8)
    4988:	40000400 	.word	0x40000400

0000498c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    498c:	b580      	push	{r7, lr}
    498e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    4990:	4b02      	ldr	r3, [pc, #8]	; (499c <system_interrupt_enter_critical_section+0x10>)
    4992:	4798      	blx	r3
}
    4994:	46c0      	nop			; (mov r8, r8)
    4996:	46bd      	mov	sp, r7
    4998:	bd80      	pop	{r7, pc}
    499a:	46c0      	nop			; (mov r8, r8)
    499c:	000043dd 	.word	0x000043dd

000049a0 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    49a0:	b580      	push	{r7, lr}
    49a2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    49a4:	4b02      	ldr	r3, [pc, #8]	; (49b0 <system_interrupt_leave_critical_section+0x10>)
    49a6:	4798      	blx	r3
}
    49a8:	46c0      	nop			; (mov r8, r8)
    49aa:	46bd      	mov	sp, r7
    49ac:	bd80      	pop	{r7, pc}
    49ae:	46c0      	nop			; (mov r8, r8)
    49b0:	00004431 	.word	0x00004431

000049b4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    49b4:	b580      	push	{r7, lr}
    49b6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    49b8:	4b05      	ldr	r3, [pc, #20]	; (49d0 <system_gclk_is_syncing+0x1c>)
    49ba:	785b      	ldrb	r3, [r3, #1]
    49bc:	b2db      	uxtb	r3, r3
    49be:	b25b      	sxtb	r3, r3
    49c0:	2b00      	cmp	r3, #0
    49c2:	da01      	bge.n	49c8 <system_gclk_is_syncing+0x14>
		return true;
    49c4:	2301      	movs	r3, #1
    49c6:	e000      	b.n	49ca <system_gclk_is_syncing+0x16>
	}

	return false;
    49c8:	2300      	movs	r3, #0
}
    49ca:	0018      	movs	r0, r3
    49cc:	46bd      	mov	sp, r7
    49ce:	bd80      	pop	{r7, pc}
    49d0:	40000c00 	.word	0x40000c00

000049d4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    49d4:	b580      	push	{r7, lr}
    49d6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    49d8:	2108      	movs	r1, #8
    49da:	2000      	movs	r0, #0
    49dc:	4b07      	ldr	r3, [pc, #28]	; (49fc <system_gclk_init+0x28>)
    49de:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    49e0:	4b07      	ldr	r3, [pc, #28]	; (4a00 <system_gclk_init+0x2c>)
    49e2:	2201      	movs	r2, #1
    49e4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    49e6:	46c0      	nop			; (mov r8, r8)
    49e8:	4b05      	ldr	r3, [pc, #20]	; (4a00 <system_gclk_init+0x2c>)
    49ea:	781b      	ldrb	r3, [r3, #0]
    49ec:	b2db      	uxtb	r3, r3
    49ee:	001a      	movs	r2, r3
    49f0:	2301      	movs	r3, #1
    49f2:	4013      	ands	r3, r2
    49f4:	d1f8      	bne.n	49e8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    49f6:	46c0      	nop			; (mov r8, r8)
    49f8:	46bd      	mov	sp, r7
    49fa:	bd80      	pop	{r7, pc}
    49fc:	00004931 	.word	0x00004931
    4a00:	40000c00 	.word	0x40000c00

00004a04 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4a04:	b580      	push	{r7, lr}
    4a06:	b086      	sub	sp, #24
    4a08:	af00      	add	r7, sp, #0
    4a0a:	0002      	movs	r2, r0
    4a0c:	6039      	str	r1, [r7, #0]
    4a0e:	1dfb      	adds	r3, r7, #7
    4a10:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4a12:	1dfb      	adds	r3, r7, #7
    4a14:	781b      	ldrb	r3, [r3, #0]
    4a16:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    4a18:	1dfb      	adds	r3, r7, #7
    4a1a:	781b      	ldrb	r3, [r3, #0]
    4a1c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4a1e:	683b      	ldr	r3, [r7, #0]
    4a20:	781b      	ldrb	r3, [r3, #0]
    4a22:	021b      	lsls	r3, r3, #8
    4a24:	001a      	movs	r2, r3
    4a26:	697b      	ldr	r3, [r7, #20]
    4a28:	4313      	orrs	r3, r2
    4a2a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4a2c:	683b      	ldr	r3, [r7, #0]
    4a2e:	785b      	ldrb	r3, [r3, #1]
    4a30:	2b00      	cmp	r3, #0
    4a32:	d004      	beq.n	4a3e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4a34:	697b      	ldr	r3, [r7, #20]
    4a36:	2280      	movs	r2, #128	; 0x80
    4a38:	02d2      	lsls	r2, r2, #11
    4a3a:	4313      	orrs	r3, r2
    4a3c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4a3e:	683b      	ldr	r3, [r7, #0]
    4a40:	7a5b      	ldrb	r3, [r3, #9]
    4a42:	2b00      	cmp	r3, #0
    4a44:	d004      	beq.n	4a50 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4a46:	697b      	ldr	r3, [r7, #20]
    4a48:	2280      	movs	r2, #128	; 0x80
    4a4a:	0312      	lsls	r2, r2, #12
    4a4c:	4313      	orrs	r3, r2
    4a4e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4a50:	683b      	ldr	r3, [r7, #0]
    4a52:	685b      	ldr	r3, [r3, #4]
    4a54:	2b01      	cmp	r3, #1
    4a56:	d92c      	bls.n	4ab2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4a58:	683b      	ldr	r3, [r7, #0]
    4a5a:	685a      	ldr	r2, [r3, #4]
    4a5c:	683b      	ldr	r3, [r7, #0]
    4a5e:	685b      	ldr	r3, [r3, #4]
    4a60:	3b01      	subs	r3, #1
    4a62:	4013      	ands	r3, r2
    4a64:	d11a      	bne.n	4a9c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    4a66:	2300      	movs	r3, #0
    4a68:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4a6a:	2302      	movs	r3, #2
    4a6c:	60bb      	str	r3, [r7, #8]
    4a6e:	e005      	b.n	4a7c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    4a70:	68fb      	ldr	r3, [r7, #12]
    4a72:	3301      	adds	r3, #1
    4a74:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    4a76:	68bb      	ldr	r3, [r7, #8]
    4a78:	005b      	lsls	r3, r3, #1
    4a7a:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4a7c:	683b      	ldr	r3, [r7, #0]
    4a7e:	685a      	ldr	r2, [r3, #4]
    4a80:	68bb      	ldr	r3, [r7, #8]
    4a82:	429a      	cmp	r2, r3
    4a84:	d8f4      	bhi.n	4a70 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4a86:	68fb      	ldr	r3, [r7, #12]
    4a88:	021b      	lsls	r3, r3, #8
    4a8a:	693a      	ldr	r2, [r7, #16]
    4a8c:	4313      	orrs	r3, r2
    4a8e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4a90:	697b      	ldr	r3, [r7, #20]
    4a92:	2280      	movs	r2, #128	; 0x80
    4a94:	0352      	lsls	r2, r2, #13
    4a96:	4313      	orrs	r3, r2
    4a98:	617b      	str	r3, [r7, #20]
    4a9a:	e00a      	b.n	4ab2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4a9c:	683b      	ldr	r3, [r7, #0]
    4a9e:	685b      	ldr	r3, [r3, #4]
    4aa0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    4aa2:	693a      	ldr	r2, [r7, #16]
    4aa4:	4313      	orrs	r3, r2
    4aa6:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4aa8:	697b      	ldr	r3, [r7, #20]
    4aaa:	2280      	movs	r2, #128	; 0x80
    4aac:	0292      	lsls	r2, r2, #10
    4aae:	4313      	orrs	r3, r2
    4ab0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4ab2:	683b      	ldr	r3, [r7, #0]
    4ab4:	7a1b      	ldrb	r3, [r3, #8]
    4ab6:	2b00      	cmp	r3, #0
    4ab8:	d004      	beq.n	4ac4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4aba:	697b      	ldr	r3, [r7, #20]
    4abc:	2280      	movs	r2, #128	; 0x80
    4abe:	0392      	lsls	r2, r2, #14
    4ac0:	4313      	orrs	r3, r2
    4ac2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    4ac4:	46c0      	nop			; (mov r8, r8)
    4ac6:	4b13      	ldr	r3, [pc, #76]	; (4b14 <system_gclk_gen_set_config+0x110>)
    4ac8:	4798      	blx	r3
    4aca:	1e03      	subs	r3, r0, #0
    4acc:	d1fb      	bne.n	4ac6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4ace:	4b12      	ldr	r3, [pc, #72]	; (4b18 <system_gclk_gen_set_config+0x114>)
    4ad0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4ad2:	4a12      	ldr	r2, [pc, #72]	; (4b1c <system_gclk_gen_set_config+0x118>)
    4ad4:	1dfb      	adds	r3, r7, #7
    4ad6:	781b      	ldrb	r3, [r3, #0]
    4ad8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4ada:	46c0      	nop			; (mov r8, r8)
    4adc:	4b0d      	ldr	r3, [pc, #52]	; (4b14 <system_gclk_gen_set_config+0x110>)
    4ade:	4798      	blx	r3
    4ae0:	1e03      	subs	r3, r0, #0
    4ae2:	d1fb      	bne.n	4adc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4ae4:	4b0e      	ldr	r3, [pc, #56]	; (4b20 <system_gclk_gen_set_config+0x11c>)
    4ae6:	693a      	ldr	r2, [r7, #16]
    4ae8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    4aea:	46c0      	nop			; (mov r8, r8)
    4aec:	4b09      	ldr	r3, [pc, #36]	; (4b14 <system_gclk_gen_set_config+0x110>)
    4aee:	4798      	blx	r3
    4af0:	1e03      	subs	r3, r0, #0
    4af2:	d1fb      	bne.n	4aec <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4af4:	4b0a      	ldr	r3, [pc, #40]	; (4b20 <system_gclk_gen_set_config+0x11c>)
    4af6:	4a0a      	ldr	r2, [pc, #40]	; (4b20 <system_gclk_gen_set_config+0x11c>)
    4af8:	6851      	ldr	r1, [r2, #4]
    4afa:	2280      	movs	r2, #128	; 0x80
    4afc:	0252      	lsls	r2, r2, #9
    4afe:	4011      	ands	r1, r2
    4b00:	697a      	ldr	r2, [r7, #20]
    4b02:	430a      	orrs	r2, r1
    4b04:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4b06:	4b07      	ldr	r3, [pc, #28]	; (4b24 <system_gclk_gen_set_config+0x120>)
    4b08:	4798      	blx	r3
}
    4b0a:	46c0      	nop			; (mov r8, r8)
    4b0c:	46bd      	mov	sp, r7
    4b0e:	b006      	add	sp, #24
    4b10:	bd80      	pop	{r7, pc}
    4b12:	46c0      	nop			; (mov r8, r8)
    4b14:	000049b5 	.word	0x000049b5
    4b18:	0000498d 	.word	0x0000498d
    4b1c:	40000c08 	.word	0x40000c08
    4b20:	40000c00 	.word	0x40000c00
    4b24:	000049a1 	.word	0x000049a1

00004b28 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4b28:	b580      	push	{r7, lr}
    4b2a:	b082      	sub	sp, #8
    4b2c:	af00      	add	r7, sp, #0
    4b2e:	0002      	movs	r2, r0
    4b30:	1dfb      	adds	r3, r7, #7
    4b32:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4b34:	46c0      	nop			; (mov r8, r8)
    4b36:	4b0e      	ldr	r3, [pc, #56]	; (4b70 <system_gclk_gen_enable+0x48>)
    4b38:	4798      	blx	r3
    4b3a:	1e03      	subs	r3, r0, #0
    4b3c:	d1fb      	bne.n	4b36 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4b3e:	4b0d      	ldr	r3, [pc, #52]	; (4b74 <system_gclk_gen_enable+0x4c>)
    4b40:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4b42:	4a0d      	ldr	r2, [pc, #52]	; (4b78 <system_gclk_gen_enable+0x50>)
    4b44:	1dfb      	adds	r3, r7, #7
    4b46:	781b      	ldrb	r3, [r3, #0]
    4b48:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4b4a:	46c0      	nop			; (mov r8, r8)
    4b4c:	4b08      	ldr	r3, [pc, #32]	; (4b70 <system_gclk_gen_enable+0x48>)
    4b4e:	4798      	blx	r3
    4b50:	1e03      	subs	r3, r0, #0
    4b52:	d1fb      	bne.n	4b4c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4b54:	4b09      	ldr	r3, [pc, #36]	; (4b7c <system_gclk_gen_enable+0x54>)
    4b56:	4a09      	ldr	r2, [pc, #36]	; (4b7c <system_gclk_gen_enable+0x54>)
    4b58:	6852      	ldr	r2, [r2, #4]
    4b5a:	2180      	movs	r1, #128	; 0x80
    4b5c:	0249      	lsls	r1, r1, #9
    4b5e:	430a      	orrs	r2, r1
    4b60:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4b62:	4b07      	ldr	r3, [pc, #28]	; (4b80 <system_gclk_gen_enable+0x58>)
    4b64:	4798      	blx	r3
}
    4b66:	46c0      	nop			; (mov r8, r8)
    4b68:	46bd      	mov	sp, r7
    4b6a:	b002      	add	sp, #8
    4b6c:	bd80      	pop	{r7, pc}
    4b6e:	46c0      	nop			; (mov r8, r8)
    4b70:	000049b5 	.word	0x000049b5
    4b74:	0000498d 	.word	0x0000498d
    4b78:	40000c04 	.word	0x40000c04
    4b7c:	40000c00 	.word	0x40000c00
    4b80:	000049a1 	.word	0x000049a1

00004b84 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4b84:	b580      	push	{r7, lr}
    4b86:	b086      	sub	sp, #24
    4b88:	af00      	add	r7, sp, #0
    4b8a:	0002      	movs	r2, r0
    4b8c:	1dfb      	adds	r3, r7, #7
    4b8e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4b90:	46c0      	nop			; (mov r8, r8)
    4b92:	4b2a      	ldr	r3, [pc, #168]	; (4c3c <system_gclk_gen_get_hz+0xb8>)
    4b94:	4798      	blx	r3
    4b96:	1e03      	subs	r3, r0, #0
    4b98:	d1fb      	bne.n	4b92 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4b9a:	4b29      	ldr	r3, [pc, #164]	; (4c40 <system_gclk_gen_get_hz+0xbc>)
    4b9c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4b9e:	4a29      	ldr	r2, [pc, #164]	; (4c44 <system_gclk_gen_get_hz+0xc0>)
    4ba0:	1dfb      	adds	r3, r7, #7
    4ba2:	781b      	ldrb	r3, [r3, #0]
    4ba4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4ba6:	46c0      	nop			; (mov r8, r8)
    4ba8:	4b24      	ldr	r3, [pc, #144]	; (4c3c <system_gclk_gen_get_hz+0xb8>)
    4baa:	4798      	blx	r3
    4bac:	1e03      	subs	r3, r0, #0
    4bae:	d1fb      	bne.n	4ba8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4bb0:	4b25      	ldr	r3, [pc, #148]	; (4c48 <system_gclk_gen_get_hz+0xc4>)
    4bb2:	685b      	ldr	r3, [r3, #4]
    4bb4:	04db      	lsls	r3, r3, #19
    4bb6:	0edb      	lsrs	r3, r3, #27
    4bb8:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4bba:	0018      	movs	r0, r3
    4bbc:	4b23      	ldr	r3, [pc, #140]	; (4c4c <system_gclk_gen_get_hz+0xc8>)
    4bbe:	4798      	blx	r3
    4bc0:	0003      	movs	r3, r0
    4bc2:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4bc4:	4a1f      	ldr	r2, [pc, #124]	; (4c44 <system_gclk_gen_get_hz+0xc0>)
    4bc6:	1dfb      	adds	r3, r7, #7
    4bc8:	781b      	ldrb	r3, [r3, #0]
    4bca:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4bcc:	4b1e      	ldr	r3, [pc, #120]	; (4c48 <system_gclk_gen_get_hz+0xc4>)
    4bce:	685b      	ldr	r3, [r3, #4]
    4bd0:	02db      	lsls	r3, r3, #11
    4bd2:	0fdb      	lsrs	r3, r3, #31
    4bd4:	b2da      	uxtb	r2, r3
    4bd6:	2313      	movs	r3, #19
    4bd8:	18fb      	adds	r3, r7, r3
    4bda:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4bdc:	4a1c      	ldr	r2, [pc, #112]	; (4c50 <system_gclk_gen_get_hz+0xcc>)
    4bde:	1dfb      	adds	r3, r7, #7
    4be0:	781b      	ldrb	r3, [r3, #0]
    4be2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4be4:	46c0      	nop			; (mov r8, r8)
    4be6:	4b15      	ldr	r3, [pc, #84]	; (4c3c <system_gclk_gen_get_hz+0xb8>)
    4be8:	4798      	blx	r3
    4bea:	1e03      	subs	r3, r0, #0
    4bec:	d1fb      	bne.n	4be6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4bee:	4b16      	ldr	r3, [pc, #88]	; (4c48 <system_gclk_gen_get_hz+0xc4>)
    4bf0:	689b      	ldr	r3, [r3, #8]
    4bf2:	021b      	lsls	r3, r3, #8
    4bf4:	0c1b      	lsrs	r3, r3, #16
    4bf6:	b29b      	uxth	r3, r3
    4bf8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    4bfa:	4b16      	ldr	r3, [pc, #88]	; (4c54 <system_gclk_gen_get_hz+0xd0>)
    4bfc:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4bfe:	2313      	movs	r3, #19
    4c00:	18fb      	adds	r3, r7, r3
    4c02:	781b      	ldrb	r3, [r3, #0]
    4c04:	2b00      	cmp	r3, #0
    4c06:	d109      	bne.n	4c1c <system_gclk_gen_get_hz+0x98>
    4c08:	68fb      	ldr	r3, [r7, #12]
    4c0a:	2b01      	cmp	r3, #1
    4c0c:	d906      	bls.n	4c1c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    4c0e:	4b12      	ldr	r3, [pc, #72]	; (4c58 <system_gclk_gen_get_hz+0xd4>)
    4c10:	68f9      	ldr	r1, [r7, #12]
    4c12:	6978      	ldr	r0, [r7, #20]
    4c14:	4798      	blx	r3
    4c16:	0003      	movs	r3, r0
    4c18:	617b      	str	r3, [r7, #20]
    4c1a:	e00a      	b.n	4c32 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    4c1c:	2313      	movs	r3, #19
    4c1e:	18fb      	adds	r3, r7, r3
    4c20:	781b      	ldrb	r3, [r3, #0]
    4c22:	2b00      	cmp	r3, #0
    4c24:	d005      	beq.n	4c32 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    4c26:	68fb      	ldr	r3, [r7, #12]
    4c28:	3301      	adds	r3, #1
    4c2a:	697a      	ldr	r2, [r7, #20]
    4c2c:	40da      	lsrs	r2, r3
    4c2e:	0013      	movs	r3, r2
    4c30:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    4c32:	697b      	ldr	r3, [r7, #20]
}
    4c34:	0018      	movs	r0, r3
    4c36:	46bd      	mov	sp, r7
    4c38:	b006      	add	sp, #24
    4c3a:	bd80      	pop	{r7, pc}
    4c3c:	000049b5 	.word	0x000049b5
    4c40:	0000498d 	.word	0x0000498d
    4c44:	40000c04 	.word	0x40000c04
    4c48:	40000c00 	.word	0x40000c00
    4c4c:	000045cd 	.word	0x000045cd
    4c50:	40000c08 	.word	0x40000c08
    4c54:	000049a1 	.word	0x000049a1
    4c58:	00005275 	.word	0x00005275

00004c5c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4c5c:	b580      	push	{r7, lr}
    4c5e:	b084      	sub	sp, #16
    4c60:	af00      	add	r7, sp, #0
    4c62:	0002      	movs	r2, r0
    4c64:	6039      	str	r1, [r7, #0]
    4c66:	1dfb      	adds	r3, r7, #7
    4c68:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    4c6a:	1dfb      	adds	r3, r7, #7
    4c6c:	781b      	ldrb	r3, [r3, #0]
    4c6e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4c70:	683b      	ldr	r3, [r7, #0]
    4c72:	781b      	ldrb	r3, [r3, #0]
    4c74:	021b      	lsls	r3, r3, #8
    4c76:	001a      	movs	r2, r3
    4c78:	68fb      	ldr	r3, [r7, #12]
    4c7a:	4313      	orrs	r3, r2
    4c7c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4c7e:	1dfb      	adds	r3, r7, #7
    4c80:	781b      	ldrb	r3, [r3, #0]
    4c82:	0018      	movs	r0, r3
    4c84:	4b04      	ldr	r3, [pc, #16]	; (4c98 <system_gclk_chan_set_config+0x3c>)
    4c86:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4c88:	4b04      	ldr	r3, [pc, #16]	; (4c9c <system_gclk_chan_set_config+0x40>)
    4c8a:	68fa      	ldr	r2, [r7, #12]
    4c8c:	b292      	uxth	r2, r2
    4c8e:	805a      	strh	r2, [r3, #2]
}
    4c90:	46c0      	nop			; (mov r8, r8)
    4c92:	46bd      	mov	sp, r7
    4c94:	b004      	add	sp, #16
    4c96:	bd80      	pop	{r7, pc}
    4c98:	00004ce9 	.word	0x00004ce9
    4c9c:	40000c00 	.word	0x40000c00

00004ca0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4ca0:	b580      	push	{r7, lr}
    4ca2:	b082      	sub	sp, #8
    4ca4:	af00      	add	r7, sp, #0
    4ca6:	0002      	movs	r2, r0
    4ca8:	1dfb      	adds	r3, r7, #7
    4caa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4cac:	4b0a      	ldr	r3, [pc, #40]	; (4cd8 <system_gclk_chan_enable+0x38>)
    4cae:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4cb0:	4a0a      	ldr	r2, [pc, #40]	; (4cdc <system_gclk_chan_enable+0x3c>)
    4cb2:	1dfb      	adds	r3, r7, #7
    4cb4:	781b      	ldrb	r3, [r3, #0]
    4cb6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4cb8:	4909      	ldr	r1, [pc, #36]	; (4ce0 <system_gclk_chan_enable+0x40>)
    4cba:	4b09      	ldr	r3, [pc, #36]	; (4ce0 <system_gclk_chan_enable+0x40>)
    4cbc:	885b      	ldrh	r3, [r3, #2]
    4cbe:	b29b      	uxth	r3, r3
    4cc0:	2280      	movs	r2, #128	; 0x80
    4cc2:	01d2      	lsls	r2, r2, #7
    4cc4:	4313      	orrs	r3, r2
    4cc6:	b29b      	uxth	r3, r3
    4cc8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    4cca:	4b06      	ldr	r3, [pc, #24]	; (4ce4 <system_gclk_chan_enable+0x44>)
    4ccc:	4798      	blx	r3
}
    4cce:	46c0      	nop			; (mov r8, r8)
    4cd0:	46bd      	mov	sp, r7
    4cd2:	b002      	add	sp, #8
    4cd4:	bd80      	pop	{r7, pc}
    4cd6:	46c0      	nop			; (mov r8, r8)
    4cd8:	0000498d 	.word	0x0000498d
    4cdc:	40000c02 	.word	0x40000c02
    4ce0:	40000c00 	.word	0x40000c00
    4ce4:	000049a1 	.word	0x000049a1

00004ce8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4ce8:	b580      	push	{r7, lr}
    4cea:	b084      	sub	sp, #16
    4cec:	af00      	add	r7, sp, #0
    4cee:	0002      	movs	r2, r0
    4cf0:	1dfb      	adds	r3, r7, #7
    4cf2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4cf4:	4b1c      	ldr	r3, [pc, #112]	; (4d68 <system_gclk_chan_disable+0x80>)
    4cf6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4cf8:	4a1c      	ldr	r2, [pc, #112]	; (4d6c <system_gclk_chan_disable+0x84>)
    4cfa:	1dfb      	adds	r3, r7, #7
    4cfc:	781b      	ldrb	r3, [r3, #0]
    4cfe:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4d00:	4b1b      	ldr	r3, [pc, #108]	; (4d70 <system_gclk_chan_disable+0x88>)
    4d02:	885b      	ldrh	r3, [r3, #2]
    4d04:	051b      	lsls	r3, r3, #20
    4d06:	0f1b      	lsrs	r3, r3, #28
    4d08:	b2db      	uxtb	r3, r3
    4d0a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    4d0c:	4a18      	ldr	r2, [pc, #96]	; (4d70 <system_gclk_chan_disable+0x88>)
    4d0e:	8853      	ldrh	r3, [r2, #2]
    4d10:	4918      	ldr	r1, [pc, #96]	; (4d74 <system_gclk_chan_disable+0x8c>)
    4d12:	400b      	ands	r3, r1
    4d14:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4d16:	4a16      	ldr	r2, [pc, #88]	; (4d70 <system_gclk_chan_disable+0x88>)
    4d18:	4b15      	ldr	r3, [pc, #84]	; (4d70 <system_gclk_chan_disable+0x88>)
    4d1a:	885b      	ldrh	r3, [r3, #2]
    4d1c:	b29b      	uxth	r3, r3
    4d1e:	4916      	ldr	r1, [pc, #88]	; (4d78 <system_gclk_chan_disable+0x90>)
    4d20:	400b      	ands	r3, r1
    4d22:	b29b      	uxth	r3, r3
    4d24:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4d26:	46c0      	nop			; (mov r8, r8)
    4d28:	4b11      	ldr	r3, [pc, #68]	; (4d70 <system_gclk_chan_disable+0x88>)
    4d2a:	885b      	ldrh	r3, [r3, #2]
    4d2c:	b29b      	uxth	r3, r3
    4d2e:	001a      	movs	r2, r3
    4d30:	2380      	movs	r3, #128	; 0x80
    4d32:	01db      	lsls	r3, r3, #7
    4d34:	4013      	ands	r3, r2
    4d36:	d1f7      	bne.n	4d28 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4d38:	4a0d      	ldr	r2, [pc, #52]	; (4d70 <system_gclk_chan_disable+0x88>)
    4d3a:	68fb      	ldr	r3, [r7, #12]
    4d3c:	b2db      	uxtb	r3, r3
    4d3e:	1c19      	adds	r1, r3, #0
    4d40:	230f      	movs	r3, #15
    4d42:	400b      	ands	r3, r1
    4d44:	b2d9      	uxtb	r1, r3
    4d46:	8853      	ldrh	r3, [r2, #2]
    4d48:	1c08      	adds	r0, r1, #0
    4d4a:	210f      	movs	r1, #15
    4d4c:	4001      	ands	r1, r0
    4d4e:	0208      	lsls	r0, r1, #8
    4d50:	4908      	ldr	r1, [pc, #32]	; (4d74 <system_gclk_chan_disable+0x8c>)
    4d52:	400b      	ands	r3, r1
    4d54:	1c19      	adds	r1, r3, #0
    4d56:	1c03      	adds	r3, r0, #0
    4d58:	430b      	orrs	r3, r1
    4d5a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    4d5c:	4b07      	ldr	r3, [pc, #28]	; (4d7c <system_gclk_chan_disable+0x94>)
    4d5e:	4798      	blx	r3
}
    4d60:	46c0      	nop			; (mov r8, r8)
    4d62:	46bd      	mov	sp, r7
    4d64:	b004      	add	sp, #16
    4d66:	bd80      	pop	{r7, pc}
    4d68:	0000498d 	.word	0x0000498d
    4d6c:	40000c02 	.word	0x40000c02
    4d70:	40000c00 	.word	0x40000c00
    4d74:	fffff0ff 	.word	0xfffff0ff
    4d78:	ffffbfff 	.word	0xffffbfff
    4d7c:	000049a1 	.word	0x000049a1

00004d80 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4d80:	b580      	push	{r7, lr}
    4d82:	b084      	sub	sp, #16
    4d84:	af00      	add	r7, sp, #0
    4d86:	0002      	movs	r2, r0
    4d88:	1dfb      	adds	r3, r7, #7
    4d8a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4d8c:	4b0d      	ldr	r3, [pc, #52]	; (4dc4 <system_gclk_chan_get_hz+0x44>)
    4d8e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4d90:	4a0d      	ldr	r2, [pc, #52]	; (4dc8 <system_gclk_chan_get_hz+0x48>)
    4d92:	1dfb      	adds	r3, r7, #7
    4d94:	781b      	ldrb	r3, [r3, #0]
    4d96:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4d98:	4b0c      	ldr	r3, [pc, #48]	; (4dcc <system_gclk_chan_get_hz+0x4c>)
    4d9a:	885b      	ldrh	r3, [r3, #2]
    4d9c:	051b      	lsls	r3, r3, #20
    4d9e:	0f1b      	lsrs	r3, r3, #28
    4da0:	b2da      	uxtb	r2, r3
    4da2:	230f      	movs	r3, #15
    4da4:	18fb      	adds	r3, r7, r3
    4da6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    4da8:	4b09      	ldr	r3, [pc, #36]	; (4dd0 <system_gclk_chan_get_hz+0x50>)
    4daa:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4dac:	230f      	movs	r3, #15
    4dae:	18fb      	adds	r3, r7, r3
    4db0:	781b      	ldrb	r3, [r3, #0]
    4db2:	0018      	movs	r0, r3
    4db4:	4b07      	ldr	r3, [pc, #28]	; (4dd4 <system_gclk_chan_get_hz+0x54>)
    4db6:	4798      	blx	r3
    4db8:	0003      	movs	r3, r0
}
    4dba:	0018      	movs	r0, r3
    4dbc:	46bd      	mov	sp, r7
    4dbe:	b004      	add	sp, #16
    4dc0:	bd80      	pop	{r7, pc}
    4dc2:	46c0      	nop			; (mov r8, r8)
    4dc4:	0000498d 	.word	0x0000498d
    4dc8:	40000c02 	.word	0x40000c02
    4dcc:	40000c00 	.word	0x40000c00
    4dd0:	000049a1 	.word	0x000049a1
    4dd4:	00004b85 	.word	0x00004b85

00004dd8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4dd8:	b580      	push	{r7, lr}
    4dda:	b084      	sub	sp, #16
    4ddc:	af00      	add	r7, sp, #0
    4dde:	0002      	movs	r2, r0
    4de0:	1dfb      	adds	r3, r7, #7
    4de2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4de4:	230f      	movs	r3, #15
    4de6:	18fb      	adds	r3, r7, r3
    4de8:	1dfa      	adds	r2, r7, #7
    4dea:	7812      	ldrb	r2, [r2, #0]
    4dec:	09d2      	lsrs	r2, r2, #7
    4dee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4df0:	230e      	movs	r3, #14
    4df2:	18fb      	adds	r3, r7, r3
    4df4:	1dfa      	adds	r2, r7, #7
    4df6:	7812      	ldrb	r2, [r2, #0]
    4df8:	0952      	lsrs	r2, r2, #5
    4dfa:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4dfc:	4b0d      	ldr	r3, [pc, #52]	; (4e34 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4dfe:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4e00:	230f      	movs	r3, #15
    4e02:	18fb      	adds	r3, r7, r3
    4e04:	781b      	ldrb	r3, [r3, #0]
    4e06:	2b00      	cmp	r3, #0
    4e08:	d10f      	bne.n	4e2a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4e0a:	230f      	movs	r3, #15
    4e0c:	18fb      	adds	r3, r7, r3
    4e0e:	781b      	ldrb	r3, [r3, #0]
    4e10:	009b      	lsls	r3, r3, #2
    4e12:	2210      	movs	r2, #16
    4e14:	4694      	mov	ip, r2
    4e16:	44bc      	add	ip, r7
    4e18:	4463      	add	r3, ip
    4e1a:	3b08      	subs	r3, #8
    4e1c:	681a      	ldr	r2, [r3, #0]
    4e1e:	230e      	movs	r3, #14
    4e20:	18fb      	adds	r3, r7, r3
    4e22:	781b      	ldrb	r3, [r3, #0]
    4e24:	01db      	lsls	r3, r3, #7
    4e26:	18d3      	adds	r3, r2, r3
    4e28:	e000      	b.n	4e2c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4e2a:	2300      	movs	r3, #0
	}
}
    4e2c:	0018      	movs	r0, r3
    4e2e:	46bd      	mov	sp, r7
    4e30:	b004      	add	sp, #16
    4e32:	bd80      	pop	{r7, pc}
    4e34:	41004400 	.word	0x41004400

00004e38 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4e38:	b580      	push	{r7, lr}
    4e3a:	b088      	sub	sp, #32
    4e3c:	af00      	add	r7, sp, #0
    4e3e:	60f8      	str	r0, [r7, #12]
    4e40:	60b9      	str	r1, [r7, #8]
    4e42:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4e44:	2300      	movs	r3, #0
    4e46:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4e48:	687b      	ldr	r3, [r7, #4]
    4e4a:	78db      	ldrb	r3, [r3, #3]
    4e4c:	2201      	movs	r2, #1
    4e4e:	4053      	eors	r3, r2
    4e50:	b2db      	uxtb	r3, r3
    4e52:	2b00      	cmp	r3, #0
    4e54:	d035      	beq.n	4ec2 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4e56:	687b      	ldr	r3, [r7, #4]
    4e58:	781b      	ldrb	r3, [r3, #0]
    4e5a:	2b80      	cmp	r3, #128	; 0x80
    4e5c:	d00b      	beq.n	4e76 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    4e5e:	69fb      	ldr	r3, [r7, #28]
    4e60:	2280      	movs	r2, #128	; 0x80
    4e62:	0252      	lsls	r2, r2, #9
    4e64:	4313      	orrs	r3, r2
    4e66:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4e68:	687b      	ldr	r3, [r7, #4]
    4e6a:	781b      	ldrb	r3, [r3, #0]
    4e6c:	061b      	lsls	r3, r3, #24
    4e6e:	001a      	movs	r2, r3
    4e70:	69fb      	ldr	r3, [r7, #28]
    4e72:	4313      	orrs	r3, r2
    4e74:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4e76:	687b      	ldr	r3, [r7, #4]
    4e78:	785b      	ldrb	r3, [r3, #1]
    4e7a:	2b00      	cmp	r3, #0
    4e7c:	d003      	beq.n	4e86 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4e7e:	687b      	ldr	r3, [r7, #4]
    4e80:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4e82:	2b02      	cmp	r3, #2
    4e84:	d110      	bne.n	4ea8 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4e86:	69fb      	ldr	r3, [r7, #28]
    4e88:	2280      	movs	r2, #128	; 0x80
    4e8a:	0292      	lsls	r2, r2, #10
    4e8c:	4313      	orrs	r3, r2
    4e8e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4e90:	687b      	ldr	r3, [r7, #4]
    4e92:	789b      	ldrb	r3, [r3, #2]
    4e94:	2b00      	cmp	r3, #0
    4e96:	d004      	beq.n	4ea2 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4e98:	69fb      	ldr	r3, [r7, #28]
    4e9a:	2280      	movs	r2, #128	; 0x80
    4e9c:	02d2      	lsls	r2, r2, #11
    4e9e:	4313      	orrs	r3, r2
    4ea0:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4ea2:	68fb      	ldr	r3, [r7, #12]
    4ea4:	68ba      	ldr	r2, [r7, #8]
    4ea6:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4ea8:	687b      	ldr	r3, [r7, #4]
    4eaa:	785b      	ldrb	r3, [r3, #1]
    4eac:	2b01      	cmp	r3, #1
    4eae:	d003      	beq.n	4eb8 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4eb0:	687b      	ldr	r3, [r7, #4]
    4eb2:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4eb4:	2b02      	cmp	r3, #2
    4eb6:	d107      	bne.n	4ec8 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4eb8:	69fb      	ldr	r3, [r7, #28]
    4eba:	4a22      	ldr	r2, [pc, #136]	; (4f44 <_system_pinmux_config+0x10c>)
    4ebc:	4013      	ands	r3, r2
    4ebe:	61fb      	str	r3, [r7, #28]
    4ec0:	e002      	b.n	4ec8 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4ec2:	68fb      	ldr	r3, [r7, #12]
    4ec4:	68ba      	ldr	r2, [r7, #8]
    4ec6:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4ec8:	68bb      	ldr	r3, [r7, #8]
    4eca:	041b      	lsls	r3, r3, #16
    4ecc:	0c1b      	lsrs	r3, r3, #16
    4ece:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4ed0:	68bb      	ldr	r3, [r7, #8]
    4ed2:	0c1b      	lsrs	r3, r3, #16
    4ed4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4ed6:	69ba      	ldr	r2, [r7, #24]
    4ed8:	69fb      	ldr	r3, [r7, #28]
    4eda:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4edc:	22a0      	movs	r2, #160	; 0xa0
    4ede:	05d2      	lsls	r2, r2, #23
    4ee0:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4ee2:	68fb      	ldr	r3, [r7, #12]
    4ee4:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4ee6:	697a      	ldr	r2, [r7, #20]
    4ee8:	69fb      	ldr	r3, [r7, #28]
    4eea:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4eec:	22d0      	movs	r2, #208	; 0xd0
    4eee:	0612      	lsls	r2, r2, #24
    4ef0:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4ef2:	68fb      	ldr	r3, [r7, #12]
    4ef4:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4ef6:	687b      	ldr	r3, [r7, #4]
    4ef8:	78db      	ldrb	r3, [r3, #3]
    4efa:	2201      	movs	r2, #1
    4efc:	4053      	eors	r3, r2
    4efe:	b2db      	uxtb	r3, r3
    4f00:	2b00      	cmp	r3, #0
    4f02:	d01a      	beq.n	4f3a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4f04:	69fa      	ldr	r2, [r7, #28]
    4f06:	2380      	movs	r3, #128	; 0x80
    4f08:	02db      	lsls	r3, r3, #11
    4f0a:	4013      	ands	r3, r2
    4f0c:	d00a      	beq.n	4f24 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4f0e:	687b      	ldr	r3, [r7, #4]
    4f10:	789b      	ldrb	r3, [r3, #2]
    4f12:	2b01      	cmp	r3, #1
    4f14:	d103      	bne.n	4f1e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    4f16:	68fb      	ldr	r3, [r7, #12]
    4f18:	68ba      	ldr	r2, [r7, #8]
    4f1a:	619a      	str	r2, [r3, #24]
    4f1c:	e002      	b.n	4f24 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    4f1e:	68fb      	ldr	r3, [r7, #12]
    4f20:	68ba      	ldr	r2, [r7, #8]
    4f22:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4f24:	687b      	ldr	r3, [r7, #4]
    4f26:	785b      	ldrb	r3, [r3, #1]
    4f28:	2b01      	cmp	r3, #1
    4f2a:	d003      	beq.n	4f34 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4f2c:	687b      	ldr	r3, [r7, #4]
    4f2e:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4f30:	2b02      	cmp	r3, #2
    4f32:	d102      	bne.n	4f3a <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4f34:	68fb      	ldr	r3, [r7, #12]
    4f36:	68ba      	ldr	r2, [r7, #8]
    4f38:	609a      	str	r2, [r3, #8]
		}
	}
}
    4f3a:	46c0      	nop			; (mov r8, r8)
    4f3c:	46bd      	mov	sp, r7
    4f3e:	b008      	add	sp, #32
    4f40:	bd80      	pop	{r7, pc}
    4f42:	46c0      	nop			; (mov r8, r8)
    4f44:	fffbffff 	.word	0xfffbffff

00004f48 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4f48:	b580      	push	{r7, lr}
    4f4a:	b084      	sub	sp, #16
    4f4c:	af00      	add	r7, sp, #0
    4f4e:	0002      	movs	r2, r0
    4f50:	6039      	str	r1, [r7, #0]
    4f52:	1dfb      	adds	r3, r7, #7
    4f54:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4f56:	1dfb      	adds	r3, r7, #7
    4f58:	781b      	ldrb	r3, [r3, #0]
    4f5a:	0018      	movs	r0, r3
    4f5c:	4b0a      	ldr	r3, [pc, #40]	; (4f88 <system_pinmux_pin_set_config+0x40>)
    4f5e:	4798      	blx	r3
    4f60:	0003      	movs	r3, r0
    4f62:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4f64:	1dfb      	adds	r3, r7, #7
    4f66:	781b      	ldrb	r3, [r3, #0]
    4f68:	221f      	movs	r2, #31
    4f6a:	4013      	ands	r3, r2
    4f6c:	2201      	movs	r2, #1
    4f6e:	409a      	lsls	r2, r3
    4f70:	0013      	movs	r3, r2
    4f72:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    4f74:	683a      	ldr	r2, [r7, #0]
    4f76:	68b9      	ldr	r1, [r7, #8]
    4f78:	68fb      	ldr	r3, [r7, #12]
    4f7a:	0018      	movs	r0, r3
    4f7c:	4b03      	ldr	r3, [pc, #12]	; (4f8c <system_pinmux_pin_set_config+0x44>)
    4f7e:	4798      	blx	r3
}
    4f80:	46c0      	nop			; (mov r8, r8)
    4f82:	46bd      	mov	sp, r7
    4f84:	b004      	add	sp, #16
    4f86:	bd80      	pop	{r7, pc}
    4f88:	00004dd9 	.word	0x00004dd9
    4f8c:	00004e39 	.word	0x00004e39

00004f90 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    4f90:	b580      	push	{r7, lr}
    4f92:	af00      	add	r7, sp, #0
	return;
    4f94:	46c0      	nop			; (mov r8, r8)
}
    4f96:	46bd      	mov	sp, r7
    4f98:	bd80      	pop	{r7, pc}
    4f9a:	46c0      	nop			; (mov r8, r8)

00004f9c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4f9c:	b580      	push	{r7, lr}
    4f9e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4fa0:	4b06      	ldr	r3, [pc, #24]	; (4fbc <system_init+0x20>)
    4fa2:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4fa4:	4b06      	ldr	r3, [pc, #24]	; (4fc0 <system_init+0x24>)
    4fa6:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4fa8:	4b06      	ldr	r3, [pc, #24]	; (4fc4 <system_init+0x28>)
    4faa:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4fac:	4b06      	ldr	r3, [pc, #24]	; (4fc8 <system_init+0x2c>)
    4fae:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4fb0:	4b06      	ldr	r3, [pc, #24]	; (4fcc <system_init+0x30>)
    4fb2:	4798      	blx	r3
}
    4fb4:	46c0      	nop			; (mov r8, r8)
    4fb6:	46bd      	mov	sp, r7
    4fb8:	bd80      	pop	{r7, pc}
    4fba:	46c0      	nop			; (mov r8, r8)
    4fbc:	000047e5 	.word	0x000047e5
    4fc0:	000043d1 	.word	0x000043d1
    4fc4:	00004f91 	.word	0x00004f91
    4fc8:	00000b11 	.word	0x00000b11
    4fcc:	00004f91 	.word	0x00004f91

00004fd0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4fd0:	b580      	push	{r7, lr}
    4fd2:	b082      	sub	sp, #8
    4fd4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    4fd6:	4b2f      	ldr	r3, [pc, #188]	; (5094 <Reset_Handler+0xc4>)
    4fd8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    4fda:	4b2f      	ldr	r3, [pc, #188]	; (5098 <Reset_Handler+0xc8>)
    4fdc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    4fde:	687a      	ldr	r2, [r7, #4]
    4fe0:	683b      	ldr	r3, [r7, #0]
    4fe2:	429a      	cmp	r2, r3
    4fe4:	d00c      	beq.n	5000 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    4fe6:	e007      	b.n	4ff8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    4fe8:	683b      	ldr	r3, [r7, #0]
    4fea:	1d1a      	adds	r2, r3, #4
    4fec:	603a      	str	r2, [r7, #0]
    4fee:	687a      	ldr	r2, [r7, #4]
    4ff0:	1d11      	adds	r1, r2, #4
    4ff2:	6079      	str	r1, [r7, #4]
    4ff4:	6812      	ldr	r2, [r2, #0]
    4ff6:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4ff8:	683a      	ldr	r2, [r7, #0]
    4ffa:	4b28      	ldr	r3, [pc, #160]	; (509c <Reset_Handler+0xcc>)
    4ffc:	429a      	cmp	r2, r3
    4ffe:	d3f3      	bcc.n	4fe8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5000:	4b27      	ldr	r3, [pc, #156]	; (50a0 <Reset_Handler+0xd0>)
    5002:	603b      	str	r3, [r7, #0]
    5004:	e004      	b.n	5010 <Reset_Handler+0x40>
                *pDest++ = 0;
    5006:	683b      	ldr	r3, [r7, #0]
    5008:	1d1a      	adds	r2, r3, #4
    500a:	603a      	str	r2, [r7, #0]
    500c:	2200      	movs	r2, #0
    500e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5010:	683a      	ldr	r2, [r7, #0]
    5012:	4b24      	ldr	r3, [pc, #144]	; (50a4 <Reset_Handler+0xd4>)
    5014:	429a      	cmp	r2, r3
    5016:	d3f6      	bcc.n	5006 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    5018:	4b23      	ldr	r3, [pc, #140]	; (50a8 <Reset_Handler+0xd8>)
    501a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    501c:	4b23      	ldr	r3, [pc, #140]	; (50ac <Reset_Handler+0xdc>)
    501e:	687a      	ldr	r2, [r7, #4]
    5020:	21ff      	movs	r1, #255	; 0xff
    5022:	438a      	bics	r2, r1
    5024:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    5026:	4a22      	ldr	r2, [pc, #136]	; (50b0 <Reset_Handler+0xe0>)
    5028:	2390      	movs	r3, #144	; 0x90
    502a:	005b      	lsls	r3, r3, #1
    502c:	2102      	movs	r1, #2
    502e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5030:	4a20      	ldr	r2, [pc, #128]	; (50b4 <Reset_Handler+0xe4>)
    5032:	78d3      	ldrb	r3, [r2, #3]
    5034:	2103      	movs	r1, #3
    5036:	438b      	bics	r3, r1
    5038:	1c19      	adds	r1, r3, #0
    503a:	2302      	movs	r3, #2
    503c:	430b      	orrs	r3, r1
    503e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5040:	4a1c      	ldr	r2, [pc, #112]	; (50b4 <Reset_Handler+0xe4>)
    5042:	78d3      	ldrb	r3, [r2, #3]
    5044:	210c      	movs	r1, #12
    5046:	438b      	bics	r3, r1
    5048:	1c19      	adds	r1, r3, #0
    504a:	2308      	movs	r3, #8
    504c:	430b      	orrs	r3, r1
    504e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    5050:	4a19      	ldr	r2, [pc, #100]	; (50b8 <Reset_Handler+0xe8>)
    5052:	7b93      	ldrb	r3, [r2, #14]
    5054:	2130      	movs	r1, #48	; 0x30
    5056:	438b      	bics	r3, r1
    5058:	1c19      	adds	r1, r3, #0
    505a:	2320      	movs	r3, #32
    505c:	430b      	orrs	r3, r1
    505e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    5060:	4a15      	ldr	r2, [pc, #84]	; (50b8 <Reset_Handler+0xe8>)
    5062:	7b93      	ldrb	r3, [r2, #14]
    5064:	210c      	movs	r1, #12
    5066:	438b      	bics	r3, r1
    5068:	1c19      	adds	r1, r3, #0
    506a:	2308      	movs	r3, #8
    506c:	430b      	orrs	r3, r1
    506e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5070:	4a11      	ldr	r2, [pc, #68]	; (50b8 <Reset_Handler+0xe8>)
    5072:	7b93      	ldrb	r3, [r2, #14]
    5074:	2103      	movs	r1, #3
    5076:	438b      	bics	r3, r1
    5078:	1c19      	adds	r1, r3, #0
    507a:	2302      	movs	r3, #2
    507c:	430b      	orrs	r3, r1
    507e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    5080:	4a0e      	ldr	r2, [pc, #56]	; (50bc <Reset_Handler+0xec>)
    5082:	6853      	ldr	r3, [r2, #4]
    5084:	2180      	movs	r1, #128	; 0x80
    5086:	430b      	orrs	r3, r1
    5088:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    508a:	4b0d      	ldr	r3, [pc, #52]	; (50c0 <Reset_Handler+0xf0>)
    508c:	4798      	blx	r3

        /* Branch to main function */
        main();
    508e:	4b0d      	ldr	r3, [pc, #52]	; (50c4 <Reset_Handler+0xf4>)
    5090:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    5092:	e7fe      	b.n	5092 <Reset_Handler+0xc2>
    5094:	000089e4 	.word	0x000089e4
    5098:	20000000 	.word	0x20000000
    509c:	200000bc 	.word	0x200000bc
    50a0:	200000bc 	.word	0x200000bc
    50a4:	20000280 	.word	0x20000280
    50a8:	00000000 	.word	0x00000000
    50ac:	e000ed00 	.word	0xe000ed00
    50b0:	41007000 	.word	0x41007000
    50b4:	41005000 	.word	0x41005000
    50b8:	41004800 	.word	0x41004800
    50bc:	41004000 	.word	0x41004000
    50c0:	000070c9 	.word	0x000070c9
    50c4:	00005121 	.word	0x00005121

000050c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    50c8:	b580      	push	{r7, lr}
    50ca:	b082      	sub	sp, #8
    50cc:	af00      	add	r7, sp, #0
	int32_t phantomISR = 9999;
    50ce:	4b04      	ldr	r3, [pc, #16]	; (50e0 <Dummy_Handler+0x18>)
    50d0:	607b      	str	r3, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    50d2:	f3ef 8305 	mrs	r3, IPSR
    50d6:	603b      	str	r3, [r7, #0]
  return(result);
    50d8:	683b      	ldr	r3, [r7, #0]
        while (1) {
			phantomISR = __get_IPSR();
    50da:	607b      	str	r3, [r7, #4]
        }
    50dc:	e7f9      	b.n	50d2 <Dummy_Handler+0xa>
    50de:	46c0      	nop			; (mov r8, r8)
    50e0:	0000270f 	.word	0x0000270f

000050e4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    50e4:	b580      	push	{r7, lr}
    50e6:	b084      	sub	sp, #16
    50e8:	af00      	add	r7, sp, #0
    50ea:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    50ec:	4b0a      	ldr	r3, [pc, #40]	; (5118 <_sbrk+0x34>)
    50ee:	681b      	ldr	r3, [r3, #0]
    50f0:	2b00      	cmp	r3, #0
    50f2:	d102      	bne.n	50fa <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    50f4:	4b08      	ldr	r3, [pc, #32]	; (5118 <_sbrk+0x34>)
    50f6:	4a09      	ldr	r2, [pc, #36]	; (511c <_sbrk+0x38>)
    50f8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    50fa:	4b07      	ldr	r3, [pc, #28]	; (5118 <_sbrk+0x34>)
    50fc:	681b      	ldr	r3, [r3, #0]
    50fe:	60fb      	str	r3, [r7, #12]

	heap += incr;
    5100:	4b05      	ldr	r3, [pc, #20]	; (5118 <_sbrk+0x34>)
    5102:	681a      	ldr	r2, [r3, #0]
    5104:	687b      	ldr	r3, [r7, #4]
    5106:	18d2      	adds	r2, r2, r3
    5108:	4b03      	ldr	r3, [pc, #12]	; (5118 <_sbrk+0x34>)
    510a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    510c:	68fb      	ldr	r3, [r7, #12]
}
    510e:	0018      	movs	r0, r3
    5110:	46bd      	mov	sp, r7
    5112:	b004      	add	sp, #16
    5114:	bd80      	pop	{r7, pc}
    5116:	46c0      	nop			; (mov r8, r8)
    5118:	20000104 	.word	0x20000104
    511c:	20002280 	.word	0x20002280

00005120 <main>:
char buffer[32];



int main (void)
{
    5120:	b5f0      	push	{r4, r5, r6, r7, lr}
    5122:	464f      	mov	r7, r9
    5124:	4646      	mov	r6, r8
    5126:	b4c0      	push	{r6, r7}
    5128:	b089      	sub	sp, #36	; 0x24
    512a:	af06      	add	r7, sp, #24
	
	system_init();
    512c:	4b40      	ldr	r3, [pc, #256]	; (5230 <main+0x110>)
    512e:	4798      	blx	r3
	delay_init();
    5130:	4b40      	ldr	r3, [pc, #256]	; (5234 <main+0x114>)
    5132:	4798      	blx	r3
	ble_uart_init();
    5134:	4b40      	ldr	r3, [pc, #256]	; (5238 <main+0x118>)
    5136:	4798      	blx	r3
	configure_i2c_master();
    5138:	4b40      	ldr	r3, [pc, #256]	; (523c <main+0x11c>)
    513a:	4798      	blx	r3
	
	uint8_t states = init_all_ports();
    513c:	1cfc      	adds	r4, r7, #3
    513e:	4b40      	ldr	r3, [pc, #256]	; (5240 <main+0x120>)
    5140:	4798      	blx	r3
    5142:	0003      	movs	r3, r0
    5144:	7023      	strb	r3, [r4, #0]
	sprintf(buffer,"I2C: %d%d%d%d%d%d%d%d",(states >> 7)&0x01,(states >> 6)&0x01,(states >> 5)&0x01,(states >> 4)&0x01,(states >> 3)&0x01,(states >> 2)&0x01,(states >> 1)&0x01,(states >> 0)&0x01);
    5146:	1cfb      	adds	r3, r7, #3
    5148:	781b      	ldrb	r3, [r3, #0]
    514a:	09db      	lsrs	r3, r3, #7
    514c:	b2db      	uxtb	r3, r3
    514e:	001a      	movs	r2, r3
    5150:	2301      	movs	r3, #1
    5152:	401a      	ands	r2, r3
    5154:	4690      	mov	r8, r2
    5156:	1cfb      	adds	r3, r7, #3
    5158:	781b      	ldrb	r3, [r3, #0]
    515a:	099b      	lsrs	r3, r3, #6
    515c:	b2db      	uxtb	r3, r3
    515e:	001a      	movs	r2, r3
    5160:	2301      	movs	r3, #1
    5162:	401a      	ands	r2, r3
    5164:	4691      	mov	r9, r2
    5166:	1cfb      	adds	r3, r7, #3
    5168:	781b      	ldrb	r3, [r3, #0]
    516a:	095b      	lsrs	r3, r3, #5
    516c:	b2db      	uxtb	r3, r3
    516e:	001a      	movs	r2, r3
    5170:	2301      	movs	r3, #1
    5172:	4013      	ands	r3, r2
    5174:	1cfa      	adds	r2, r7, #3
    5176:	7812      	ldrb	r2, [r2, #0]
    5178:	0912      	lsrs	r2, r2, #4
    517a:	b2d2      	uxtb	r2, r2
    517c:	0011      	movs	r1, r2
    517e:	2201      	movs	r2, #1
    5180:	400a      	ands	r2, r1
    5182:	1cf9      	adds	r1, r7, #3
    5184:	7809      	ldrb	r1, [r1, #0]
    5186:	08c9      	lsrs	r1, r1, #3
    5188:	b2c9      	uxtb	r1, r1
    518a:	0008      	movs	r0, r1
    518c:	2101      	movs	r1, #1
    518e:	4001      	ands	r1, r0
    5190:	1cf8      	adds	r0, r7, #3
    5192:	7800      	ldrb	r0, [r0, #0]
    5194:	0880      	lsrs	r0, r0, #2
    5196:	b2c0      	uxtb	r0, r0
    5198:	0004      	movs	r4, r0
    519a:	2001      	movs	r0, #1
    519c:	4020      	ands	r0, r4
    519e:	1cfc      	adds	r4, r7, #3
    51a0:	7824      	ldrb	r4, [r4, #0]
    51a2:	0864      	lsrs	r4, r4, #1
    51a4:	b2e4      	uxtb	r4, r4
    51a6:	0025      	movs	r5, r4
    51a8:	2401      	movs	r4, #1
    51aa:	402c      	ands	r4, r5
    51ac:	1cfd      	adds	r5, r7, #3
    51ae:	782d      	ldrb	r5, [r5, #0]
    51b0:	2601      	movs	r6, #1
    51b2:	4035      	ands	r5, r6
    51b4:	4e23      	ldr	r6, [pc, #140]	; (5244 <main+0x124>)
    51b6:	46b4      	mov	ip, r6
    51b8:	4e23      	ldr	r6, [pc, #140]	; (5248 <main+0x128>)
    51ba:	9505      	str	r5, [sp, #20]
    51bc:	9404      	str	r4, [sp, #16]
    51be:	9003      	str	r0, [sp, #12]
    51c0:	9102      	str	r1, [sp, #8]
    51c2:	9201      	str	r2, [sp, #4]
    51c4:	9300      	str	r3, [sp, #0]
    51c6:	464b      	mov	r3, r9
    51c8:	4642      	mov	r2, r8
    51ca:	4661      	mov	r1, ip
    51cc:	0030      	movs	r0, r6
    51ce:	4c1f      	ldr	r4, [pc, #124]	; (524c <main+0x12c>)
    51d0:	47a0      	blx	r4
	
	ble_uart_write(buffer);
    51d2:	4b1d      	ldr	r3, [pc, #116]	; (5248 <main+0x128>)
    51d4:	0018      	movs	r0, r3
    51d6:	4b1e      	ldr	r3, [pc, #120]	; (5250 <main+0x130>)
    51d8:	4798      	blx	r3
	
	sounds_init_pins();
    51da:	4b1e      	ldr	r3, [pc, #120]	; (5254 <main+0x134>)
    51dc:	4798      	blx	r3
	
	pwm_port();
    51de:	4b1e      	ldr	r3, [pc, #120]	; (5258 <main+0x138>)
    51e0:	4798      	blx	r3
	init_TC3();
    51e2:	4b1e      	ldr	r3, [pc, #120]	; (525c <main+0x13c>)
    51e4:	4798      	blx	r3
	
	//select_audio_out();
	
	msgeq7_init();
    51e6:	4b1e      	ldr	r3, [pc, #120]	; (5260 <main+0x140>)
    51e8:	4798      	blx	r3
	select_sample();
    51ea:	4b1e      	ldr	r3, [pc, #120]	; (5264 <main+0x144>)
    51ec:	4798      	blx	r3
	//flashyfade = true;

	
	while (1)
	{
		for (int i=0;i<sizeof(rx_buffer_array);i++)
    51ee:	2300      	movs	r3, #0
    51f0:	607b      	str	r3, [r7, #4]
    51f2:	e017      	b.n	5224 <main+0x104>
		{
			if (rx_buffer_array[i] == '\n')
    51f4:	4a1c      	ldr	r2, [pc, #112]	; (5268 <main+0x148>)
    51f6:	687b      	ldr	r3, [r7, #4]
    51f8:	18d3      	adds	r3, r2, r3
    51fa:	781b      	ldrb	r3, [r3, #0]
    51fc:	b2db      	uxtb	r3, r3
    51fe:	2b0a      	cmp	r3, #10
    5200:	d106      	bne.n	5210 <main+0xf0>
			{
				data_handler(rx_buffer_array);
    5202:	4b19      	ldr	r3, [pc, #100]	; (5268 <main+0x148>)
    5204:	0018      	movs	r0, r3
    5206:	4b19      	ldr	r3, [pc, #100]	; (526c <main+0x14c>)
    5208:	4798      	blx	r3
				reset_buffers();
    520a:	4b19      	ldr	r3, [pc, #100]	; (5270 <main+0x150>)
    520c:	4798      	blx	r3
    520e:	e006      	b.n	521e <main+0xfe>
			}
			else if (rx_buffer_array[i] == 0)
    5210:	4a15      	ldr	r2, [pc, #84]	; (5268 <main+0x148>)
    5212:	687b      	ldr	r3, [r7, #4]
    5214:	18d3      	adds	r3, r2, r3
    5216:	781b      	ldrb	r3, [r3, #0]
    5218:	b2db      	uxtb	r3, r3
    521a:	2b00      	cmp	r3, #0
    521c:	d006      	beq.n	522c <main+0x10c>
	//flashyfade = true;

	
	while (1)
	{
		for (int i=0;i<sizeof(rx_buffer_array);i++)
    521e:	687b      	ldr	r3, [r7, #4]
    5220:	3301      	adds	r3, #1
    5222:	607b      	str	r3, [r7, #4]
    5224:	687b      	ldr	r3, [r7, #4]
    5226:	2b7f      	cmp	r3, #127	; 0x7f
    5228:	d9e4      	bls.n	51f4 <main+0xd4>
    522a:	e7e0      	b.n	51ee <main+0xce>
				data_handler(rx_buffer_array);
				reset_buffers();
			}
			else if (rx_buffer_array[i] == 0)
			{
				break;
    522c:	46c0      	nop			; (mov r8, r8)
		//ble_uart_read();
		
		
		

	}
    522e:	e7de      	b.n	51ee <main+0xce>
    5230:	00004f9d 	.word	0x00004f9d
    5234:	00000115 	.word	0x00000115
    5238:	00001d15 	.word	0x00001d15
    523c:	0000351d 	.word	0x0000351d
    5240:	000036f5 	.word	0x000036f5
    5244:	00008764 	.word	0x00008764
    5248:	2000025c 	.word	0x2000025c
    524c:	00007129 	.word	0x00007129
    5250:	00001d9d 	.word	0x00001d9d
    5254:	0000425d 	.word	0x0000425d
    5258:	00003f41 	.word	0x00003f41
    525c:	00003f81 	.word	0x00003f81
    5260:	00003b95 	.word	0x00003b95
    5264:	00004371 	.word	0x00004371
    5268:	20000174 	.word	0x20000174
    526c:	00001e89 	.word	0x00001e89
    5270:	00001e51 	.word	0x00001e51

00005274 <__aeabi_uidiv>:
    5274:	2200      	movs	r2, #0
    5276:	0843      	lsrs	r3, r0, #1
    5278:	428b      	cmp	r3, r1
    527a:	d374      	bcc.n	5366 <__aeabi_uidiv+0xf2>
    527c:	0903      	lsrs	r3, r0, #4
    527e:	428b      	cmp	r3, r1
    5280:	d35f      	bcc.n	5342 <__aeabi_uidiv+0xce>
    5282:	0a03      	lsrs	r3, r0, #8
    5284:	428b      	cmp	r3, r1
    5286:	d344      	bcc.n	5312 <__aeabi_uidiv+0x9e>
    5288:	0b03      	lsrs	r3, r0, #12
    528a:	428b      	cmp	r3, r1
    528c:	d328      	bcc.n	52e0 <__aeabi_uidiv+0x6c>
    528e:	0c03      	lsrs	r3, r0, #16
    5290:	428b      	cmp	r3, r1
    5292:	d30d      	bcc.n	52b0 <__aeabi_uidiv+0x3c>
    5294:	22ff      	movs	r2, #255	; 0xff
    5296:	0209      	lsls	r1, r1, #8
    5298:	ba12      	rev	r2, r2
    529a:	0c03      	lsrs	r3, r0, #16
    529c:	428b      	cmp	r3, r1
    529e:	d302      	bcc.n	52a6 <__aeabi_uidiv+0x32>
    52a0:	1212      	asrs	r2, r2, #8
    52a2:	0209      	lsls	r1, r1, #8
    52a4:	d065      	beq.n	5372 <__aeabi_uidiv+0xfe>
    52a6:	0b03      	lsrs	r3, r0, #12
    52a8:	428b      	cmp	r3, r1
    52aa:	d319      	bcc.n	52e0 <__aeabi_uidiv+0x6c>
    52ac:	e000      	b.n	52b0 <__aeabi_uidiv+0x3c>
    52ae:	0a09      	lsrs	r1, r1, #8
    52b0:	0bc3      	lsrs	r3, r0, #15
    52b2:	428b      	cmp	r3, r1
    52b4:	d301      	bcc.n	52ba <__aeabi_uidiv+0x46>
    52b6:	03cb      	lsls	r3, r1, #15
    52b8:	1ac0      	subs	r0, r0, r3
    52ba:	4152      	adcs	r2, r2
    52bc:	0b83      	lsrs	r3, r0, #14
    52be:	428b      	cmp	r3, r1
    52c0:	d301      	bcc.n	52c6 <__aeabi_uidiv+0x52>
    52c2:	038b      	lsls	r3, r1, #14
    52c4:	1ac0      	subs	r0, r0, r3
    52c6:	4152      	adcs	r2, r2
    52c8:	0b43      	lsrs	r3, r0, #13
    52ca:	428b      	cmp	r3, r1
    52cc:	d301      	bcc.n	52d2 <__aeabi_uidiv+0x5e>
    52ce:	034b      	lsls	r3, r1, #13
    52d0:	1ac0      	subs	r0, r0, r3
    52d2:	4152      	adcs	r2, r2
    52d4:	0b03      	lsrs	r3, r0, #12
    52d6:	428b      	cmp	r3, r1
    52d8:	d301      	bcc.n	52de <__aeabi_uidiv+0x6a>
    52da:	030b      	lsls	r3, r1, #12
    52dc:	1ac0      	subs	r0, r0, r3
    52de:	4152      	adcs	r2, r2
    52e0:	0ac3      	lsrs	r3, r0, #11
    52e2:	428b      	cmp	r3, r1
    52e4:	d301      	bcc.n	52ea <__aeabi_uidiv+0x76>
    52e6:	02cb      	lsls	r3, r1, #11
    52e8:	1ac0      	subs	r0, r0, r3
    52ea:	4152      	adcs	r2, r2
    52ec:	0a83      	lsrs	r3, r0, #10
    52ee:	428b      	cmp	r3, r1
    52f0:	d301      	bcc.n	52f6 <__aeabi_uidiv+0x82>
    52f2:	028b      	lsls	r3, r1, #10
    52f4:	1ac0      	subs	r0, r0, r3
    52f6:	4152      	adcs	r2, r2
    52f8:	0a43      	lsrs	r3, r0, #9
    52fa:	428b      	cmp	r3, r1
    52fc:	d301      	bcc.n	5302 <__aeabi_uidiv+0x8e>
    52fe:	024b      	lsls	r3, r1, #9
    5300:	1ac0      	subs	r0, r0, r3
    5302:	4152      	adcs	r2, r2
    5304:	0a03      	lsrs	r3, r0, #8
    5306:	428b      	cmp	r3, r1
    5308:	d301      	bcc.n	530e <__aeabi_uidiv+0x9a>
    530a:	020b      	lsls	r3, r1, #8
    530c:	1ac0      	subs	r0, r0, r3
    530e:	4152      	adcs	r2, r2
    5310:	d2cd      	bcs.n	52ae <__aeabi_uidiv+0x3a>
    5312:	09c3      	lsrs	r3, r0, #7
    5314:	428b      	cmp	r3, r1
    5316:	d301      	bcc.n	531c <__aeabi_uidiv+0xa8>
    5318:	01cb      	lsls	r3, r1, #7
    531a:	1ac0      	subs	r0, r0, r3
    531c:	4152      	adcs	r2, r2
    531e:	0983      	lsrs	r3, r0, #6
    5320:	428b      	cmp	r3, r1
    5322:	d301      	bcc.n	5328 <__aeabi_uidiv+0xb4>
    5324:	018b      	lsls	r3, r1, #6
    5326:	1ac0      	subs	r0, r0, r3
    5328:	4152      	adcs	r2, r2
    532a:	0943      	lsrs	r3, r0, #5
    532c:	428b      	cmp	r3, r1
    532e:	d301      	bcc.n	5334 <__aeabi_uidiv+0xc0>
    5330:	014b      	lsls	r3, r1, #5
    5332:	1ac0      	subs	r0, r0, r3
    5334:	4152      	adcs	r2, r2
    5336:	0903      	lsrs	r3, r0, #4
    5338:	428b      	cmp	r3, r1
    533a:	d301      	bcc.n	5340 <__aeabi_uidiv+0xcc>
    533c:	010b      	lsls	r3, r1, #4
    533e:	1ac0      	subs	r0, r0, r3
    5340:	4152      	adcs	r2, r2
    5342:	08c3      	lsrs	r3, r0, #3
    5344:	428b      	cmp	r3, r1
    5346:	d301      	bcc.n	534c <__aeabi_uidiv+0xd8>
    5348:	00cb      	lsls	r3, r1, #3
    534a:	1ac0      	subs	r0, r0, r3
    534c:	4152      	adcs	r2, r2
    534e:	0883      	lsrs	r3, r0, #2
    5350:	428b      	cmp	r3, r1
    5352:	d301      	bcc.n	5358 <__aeabi_uidiv+0xe4>
    5354:	008b      	lsls	r3, r1, #2
    5356:	1ac0      	subs	r0, r0, r3
    5358:	4152      	adcs	r2, r2
    535a:	0843      	lsrs	r3, r0, #1
    535c:	428b      	cmp	r3, r1
    535e:	d301      	bcc.n	5364 <__aeabi_uidiv+0xf0>
    5360:	004b      	lsls	r3, r1, #1
    5362:	1ac0      	subs	r0, r0, r3
    5364:	4152      	adcs	r2, r2
    5366:	1a41      	subs	r1, r0, r1
    5368:	d200      	bcs.n	536c <__aeabi_uidiv+0xf8>
    536a:	4601      	mov	r1, r0
    536c:	4152      	adcs	r2, r2
    536e:	4610      	mov	r0, r2
    5370:	4770      	bx	lr
    5372:	e7ff      	b.n	5374 <__aeabi_uidiv+0x100>
    5374:	b501      	push	{r0, lr}
    5376:	2000      	movs	r0, #0
    5378:	f000 f8f0 	bl	555c <__aeabi_idiv0>
    537c:	bd02      	pop	{r1, pc}
    537e:	46c0      	nop			; (mov r8, r8)

00005380 <__aeabi_uidivmod>:
    5380:	2900      	cmp	r1, #0
    5382:	d0f7      	beq.n	5374 <__aeabi_uidiv+0x100>
    5384:	e776      	b.n	5274 <__aeabi_uidiv>
    5386:	4770      	bx	lr

00005388 <__aeabi_idiv>:
    5388:	4603      	mov	r3, r0
    538a:	430b      	orrs	r3, r1
    538c:	d47f      	bmi.n	548e <__aeabi_idiv+0x106>
    538e:	2200      	movs	r2, #0
    5390:	0843      	lsrs	r3, r0, #1
    5392:	428b      	cmp	r3, r1
    5394:	d374      	bcc.n	5480 <__aeabi_idiv+0xf8>
    5396:	0903      	lsrs	r3, r0, #4
    5398:	428b      	cmp	r3, r1
    539a:	d35f      	bcc.n	545c <__aeabi_idiv+0xd4>
    539c:	0a03      	lsrs	r3, r0, #8
    539e:	428b      	cmp	r3, r1
    53a0:	d344      	bcc.n	542c <__aeabi_idiv+0xa4>
    53a2:	0b03      	lsrs	r3, r0, #12
    53a4:	428b      	cmp	r3, r1
    53a6:	d328      	bcc.n	53fa <__aeabi_idiv+0x72>
    53a8:	0c03      	lsrs	r3, r0, #16
    53aa:	428b      	cmp	r3, r1
    53ac:	d30d      	bcc.n	53ca <__aeabi_idiv+0x42>
    53ae:	22ff      	movs	r2, #255	; 0xff
    53b0:	0209      	lsls	r1, r1, #8
    53b2:	ba12      	rev	r2, r2
    53b4:	0c03      	lsrs	r3, r0, #16
    53b6:	428b      	cmp	r3, r1
    53b8:	d302      	bcc.n	53c0 <__aeabi_idiv+0x38>
    53ba:	1212      	asrs	r2, r2, #8
    53bc:	0209      	lsls	r1, r1, #8
    53be:	d065      	beq.n	548c <__aeabi_idiv+0x104>
    53c0:	0b03      	lsrs	r3, r0, #12
    53c2:	428b      	cmp	r3, r1
    53c4:	d319      	bcc.n	53fa <__aeabi_idiv+0x72>
    53c6:	e000      	b.n	53ca <__aeabi_idiv+0x42>
    53c8:	0a09      	lsrs	r1, r1, #8
    53ca:	0bc3      	lsrs	r3, r0, #15
    53cc:	428b      	cmp	r3, r1
    53ce:	d301      	bcc.n	53d4 <__aeabi_idiv+0x4c>
    53d0:	03cb      	lsls	r3, r1, #15
    53d2:	1ac0      	subs	r0, r0, r3
    53d4:	4152      	adcs	r2, r2
    53d6:	0b83      	lsrs	r3, r0, #14
    53d8:	428b      	cmp	r3, r1
    53da:	d301      	bcc.n	53e0 <__aeabi_idiv+0x58>
    53dc:	038b      	lsls	r3, r1, #14
    53de:	1ac0      	subs	r0, r0, r3
    53e0:	4152      	adcs	r2, r2
    53e2:	0b43      	lsrs	r3, r0, #13
    53e4:	428b      	cmp	r3, r1
    53e6:	d301      	bcc.n	53ec <__aeabi_idiv+0x64>
    53e8:	034b      	lsls	r3, r1, #13
    53ea:	1ac0      	subs	r0, r0, r3
    53ec:	4152      	adcs	r2, r2
    53ee:	0b03      	lsrs	r3, r0, #12
    53f0:	428b      	cmp	r3, r1
    53f2:	d301      	bcc.n	53f8 <__aeabi_idiv+0x70>
    53f4:	030b      	lsls	r3, r1, #12
    53f6:	1ac0      	subs	r0, r0, r3
    53f8:	4152      	adcs	r2, r2
    53fa:	0ac3      	lsrs	r3, r0, #11
    53fc:	428b      	cmp	r3, r1
    53fe:	d301      	bcc.n	5404 <__aeabi_idiv+0x7c>
    5400:	02cb      	lsls	r3, r1, #11
    5402:	1ac0      	subs	r0, r0, r3
    5404:	4152      	adcs	r2, r2
    5406:	0a83      	lsrs	r3, r0, #10
    5408:	428b      	cmp	r3, r1
    540a:	d301      	bcc.n	5410 <__aeabi_idiv+0x88>
    540c:	028b      	lsls	r3, r1, #10
    540e:	1ac0      	subs	r0, r0, r3
    5410:	4152      	adcs	r2, r2
    5412:	0a43      	lsrs	r3, r0, #9
    5414:	428b      	cmp	r3, r1
    5416:	d301      	bcc.n	541c <__aeabi_idiv+0x94>
    5418:	024b      	lsls	r3, r1, #9
    541a:	1ac0      	subs	r0, r0, r3
    541c:	4152      	adcs	r2, r2
    541e:	0a03      	lsrs	r3, r0, #8
    5420:	428b      	cmp	r3, r1
    5422:	d301      	bcc.n	5428 <__aeabi_idiv+0xa0>
    5424:	020b      	lsls	r3, r1, #8
    5426:	1ac0      	subs	r0, r0, r3
    5428:	4152      	adcs	r2, r2
    542a:	d2cd      	bcs.n	53c8 <__aeabi_idiv+0x40>
    542c:	09c3      	lsrs	r3, r0, #7
    542e:	428b      	cmp	r3, r1
    5430:	d301      	bcc.n	5436 <__aeabi_idiv+0xae>
    5432:	01cb      	lsls	r3, r1, #7
    5434:	1ac0      	subs	r0, r0, r3
    5436:	4152      	adcs	r2, r2
    5438:	0983      	lsrs	r3, r0, #6
    543a:	428b      	cmp	r3, r1
    543c:	d301      	bcc.n	5442 <__aeabi_idiv+0xba>
    543e:	018b      	lsls	r3, r1, #6
    5440:	1ac0      	subs	r0, r0, r3
    5442:	4152      	adcs	r2, r2
    5444:	0943      	lsrs	r3, r0, #5
    5446:	428b      	cmp	r3, r1
    5448:	d301      	bcc.n	544e <__aeabi_idiv+0xc6>
    544a:	014b      	lsls	r3, r1, #5
    544c:	1ac0      	subs	r0, r0, r3
    544e:	4152      	adcs	r2, r2
    5450:	0903      	lsrs	r3, r0, #4
    5452:	428b      	cmp	r3, r1
    5454:	d301      	bcc.n	545a <__aeabi_idiv+0xd2>
    5456:	010b      	lsls	r3, r1, #4
    5458:	1ac0      	subs	r0, r0, r3
    545a:	4152      	adcs	r2, r2
    545c:	08c3      	lsrs	r3, r0, #3
    545e:	428b      	cmp	r3, r1
    5460:	d301      	bcc.n	5466 <__aeabi_idiv+0xde>
    5462:	00cb      	lsls	r3, r1, #3
    5464:	1ac0      	subs	r0, r0, r3
    5466:	4152      	adcs	r2, r2
    5468:	0883      	lsrs	r3, r0, #2
    546a:	428b      	cmp	r3, r1
    546c:	d301      	bcc.n	5472 <__aeabi_idiv+0xea>
    546e:	008b      	lsls	r3, r1, #2
    5470:	1ac0      	subs	r0, r0, r3
    5472:	4152      	adcs	r2, r2
    5474:	0843      	lsrs	r3, r0, #1
    5476:	428b      	cmp	r3, r1
    5478:	d301      	bcc.n	547e <__aeabi_idiv+0xf6>
    547a:	004b      	lsls	r3, r1, #1
    547c:	1ac0      	subs	r0, r0, r3
    547e:	4152      	adcs	r2, r2
    5480:	1a41      	subs	r1, r0, r1
    5482:	d200      	bcs.n	5486 <__aeabi_idiv+0xfe>
    5484:	4601      	mov	r1, r0
    5486:	4152      	adcs	r2, r2
    5488:	4610      	mov	r0, r2
    548a:	4770      	bx	lr
    548c:	e05d      	b.n	554a <__aeabi_idiv+0x1c2>
    548e:	0fca      	lsrs	r2, r1, #31
    5490:	d000      	beq.n	5494 <__aeabi_idiv+0x10c>
    5492:	4249      	negs	r1, r1
    5494:	1003      	asrs	r3, r0, #32
    5496:	d300      	bcc.n	549a <__aeabi_idiv+0x112>
    5498:	4240      	negs	r0, r0
    549a:	4053      	eors	r3, r2
    549c:	2200      	movs	r2, #0
    549e:	469c      	mov	ip, r3
    54a0:	0903      	lsrs	r3, r0, #4
    54a2:	428b      	cmp	r3, r1
    54a4:	d32d      	bcc.n	5502 <__aeabi_idiv+0x17a>
    54a6:	0a03      	lsrs	r3, r0, #8
    54a8:	428b      	cmp	r3, r1
    54aa:	d312      	bcc.n	54d2 <__aeabi_idiv+0x14a>
    54ac:	22fc      	movs	r2, #252	; 0xfc
    54ae:	0189      	lsls	r1, r1, #6
    54b0:	ba12      	rev	r2, r2
    54b2:	0a03      	lsrs	r3, r0, #8
    54b4:	428b      	cmp	r3, r1
    54b6:	d30c      	bcc.n	54d2 <__aeabi_idiv+0x14a>
    54b8:	0189      	lsls	r1, r1, #6
    54ba:	1192      	asrs	r2, r2, #6
    54bc:	428b      	cmp	r3, r1
    54be:	d308      	bcc.n	54d2 <__aeabi_idiv+0x14a>
    54c0:	0189      	lsls	r1, r1, #6
    54c2:	1192      	asrs	r2, r2, #6
    54c4:	428b      	cmp	r3, r1
    54c6:	d304      	bcc.n	54d2 <__aeabi_idiv+0x14a>
    54c8:	0189      	lsls	r1, r1, #6
    54ca:	d03a      	beq.n	5542 <__aeabi_idiv+0x1ba>
    54cc:	1192      	asrs	r2, r2, #6
    54ce:	e000      	b.n	54d2 <__aeabi_idiv+0x14a>
    54d0:	0989      	lsrs	r1, r1, #6
    54d2:	09c3      	lsrs	r3, r0, #7
    54d4:	428b      	cmp	r3, r1
    54d6:	d301      	bcc.n	54dc <__aeabi_idiv+0x154>
    54d8:	01cb      	lsls	r3, r1, #7
    54da:	1ac0      	subs	r0, r0, r3
    54dc:	4152      	adcs	r2, r2
    54de:	0983      	lsrs	r3, r0, #6
    54e0:	428b      	cmp	r3, r1
    54e2:	d301      	bcc.n	54e8 <__aeabi_idiv+0x160>
    54e4:	018b      	lsls	r3, r1, #6
    54e6:	1ac0      	subs	r0, r0, r3
    54e8:	4152      	adcs	r2, r2
    54ea:	0943      	lsrs	r3, r0, #5
    54ec:	428b      	cmp	r3, r1
    54ee:	d301      	bcc.n	54f4 <__aeabi_idiv+0x16c>
    54f0:	014b      	lsls	r3, r1, #5
    54f2:	1ac0      	subs	r0, r0, r3
    54f4:	4152      	adcs	r2, r2
    54f6:	0903      	lsrs	r3, r0, #4
    54f8:	428b      	cmp	r3, r1
    54fa:	d301      	bcc.n	5500 <__aeabi_idiv+0x178>
    54fc:	010b      	lsls	r3, r1, #4
    54fe:	1ac0      	subs	r0, r0, r3
    5500:	4152      	adcs	r2, r2
    5502:	08c3      	lsrs	r3, r0, #3
    5504:	428b      	cmp	r3, r1
    5506:	d301      	bcc.n	550c <__aeabi_idiv+0x184>
    5508:	00cb      	lsls	r3, r1, #3
    550a:	1ac0      	subs	r0, r0, r3
    550c:	4152      	adcs	r2, r2
    550e:	0883      	lsrs	r3, r0, #2
    5510:	428b      	cmp	r3, r1
    5512:	d301      	bcc.n	5518 <__aeabi_idiv+0x190>
    5514:	008b      	lsls	r3, r1, #2
    5516:	1ac0      	subs	r0, r0, r3
    5518:	4152      	adcs	r2, r2
    551a:	d2d9      	bcs.n	54d0 <__aeabi_idiv+0x148>
    551c:	0843      	lsrs	r3, r0, #1
    551e:	428b      	cmp	r3, r1
    5520:	d301      	bcc.n	5526 <__aeabi_idiv+0x19e>
    5522:	004b      	lsls	r3, r1, #1
    5524:	1ac0      	subs	r0, r0, r3
    5526:	4152      	adcs	r2, r2
    5528:	1a41      	subs	r1, r0, r1
    552a:	d200      	bcs.n	552e <__aeabi_idiv+0x1a6>
    552c:	4601      	mov	r1, r0
    552e:	4663      	mov	r3, ip
    5530:	4152      	adcs	r2, r2
    5532:	105b      	asrs	r3, r3, #1
    5534:	4610      	mov	r0, r2
    5536:	d301      	bcc.n	553c <__aeabi_idiv+0x1b4>
    5538:	4240      	negs	r0, r0
    553a:	2b00      	cmp	r3, #0
    553c:	d500      	bpl.n	5540 <__aeabi_idiv+0x1b8>
    553e:	4249      	negs	r1, r1
    5540:	4770      	bx	lr
    5542:	4663      	mov	r3, ip
    5544:	105b      	asrs	r3, r3, #1
    5546:	d300      	bcc.n	554a <__aeabi_idiv+0x1c2>
    5548:	4240      	negs	r0, r0
    554a:	b501      	push	{r0, lr}
    554c:	2000      	movs	r0, #0
    554e:	f000 f805 	bl	555c <__aeabi_idiv0>
    5552:	bd02      	pop	{r1, pc}

00005554 <__aeabi_idivmod>:
    5554:	2900      	cmp	r1, #0
    5556:	d0f8      	beq.n	554a <__aeabi_idiv+0x1c2>
    5558:	e716      	b.n	5388 <__aeabi_idiv>
    555a:	4770      	bx	lr

0000555c <__aeabi_idiv0>:
    555c:	4770      	bx	lr
    555e:	46c0      	nop			; (mov r8, r8)

00005560 <__aeabi_uldivmod>:
    5560:	2b00      	cmp	r3, #0
    5562:	d111      	bne.n	5588 <__aeabi_uldivmod+0x28>
    5564:	2a00      	cmp	r2, #0
    5566:	d10f      	bne.n	5588 <__aeabi_uldivmod+0x28>
    5568:	2900      	cmp	r1, #0
    556a:	d100      	bne.n	556e <__aeabi_uldivmod+0xe>
    556c:	2800      	cmp	r0, #0
    556e:	d002      	beq.n	5576 <__aeabi_uldivmod+0x16>
    5570:	2100      	movs	r1, #0
    5572:	43c9      	mvns	r1, r1
    5574:	1c08      	adds	r0, r1, #0
    5576:	b407      	push	{r0, r1, r2}
    5578:	4802      	ldr	r0, [pc, #8]	; (5584 <__aeabi_uldivmod+0x24>)
    557a:	a102      	add	r1, pc, #8	; (adr r1, 5584 <__aeabi_uldivmod+0x24>)
    557c:	1840      	adds	r0, r0, r1
    557e:	9002      	str	r0, [sp, #8]
    5580:	bd03      	pop	{r0, r1, pc}
    5582:	46c0      	nop			; (mov r8, r8)
    5584:	ffffffd9 	.word	0xffffffd9
    5588:	b403      	push	{r0, r1}
    558a:	4668      	mov	r0, sp
    558c:	b501      	push	{r0, lr}
    558e:	9802      	ldr	r0, [sp, #8]
    5590:	f000 f832 	bl	55f8 <__udivmoddi4>
    5594:	9b01      	ldr	r3, [sp, #4]
    5596:	469e      	mov	lr, r3
    5598:	b002      	add	sp, #8
    559a:	bc0c      	pop	{r2, r3}
    559c:	4770      	bx	lr
    559e:	46c0      	nop			; (mov r8, r8)

000055a0 <__aeabi_lmul>:
    55a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    55a2:	464f      	mov	r7, r9
    55a4:	4646      	mov	r6, r8
    55a6:	b4c0      	push	{r6, r7}
    55a8:	0416      	lsls	r6, r2, #16
    55aa:	0c36      	lsrs	r6, r6, #16
    55ac:	4699      	mov	r9, r3
    55ae:	0033      	movs	r3, r6
    55b0:	0405      	lsls	r5, r0, #16
    55b2:	0c2c      	lsrs	r4, r5, #16
    55b4:	0c07      	lsrs	r7, r0, #16
    55b6:	0c15      	lsrs	r5, r2, #16
    55b8:	4363      	muls	r3, r4
    55ba:	437e      	muls	r6, r7
    55bc:	436f      	muls	r7, r5
    55be:	4365      	muls	r5, r4
    55c0:	0c1c      	lsrs	r4, r3, #16
    55c2:	19ad      	adds	r5, r5, r6
    55c4:	1964      	adds	r4, r4, r5
    55c6:	469c      	mov	ip, r3
    55c8:	42a6      	cmp	r6, r4
    55ca:	d903      	bls.n	55d4 <__aeabi_lmul+0x34>
    55cc:	2380      	movs	r3, #128	; 0x80
    55ce:	025b      	lsls	r3, r3, #9
    55d0:	4698      	mov	r8, r3
    55d2:	4447      	add	r7, r8
    55d4:	4663      	mov	r3, ip
    55d6:	0c25      	lsrs	r5, r4, #16
    55d8:	19ef      	adds	r7, r5, r7
    55da:	041d      	lsls	r5, r3, #16
    55dc:	464b      	mov	r3, r9
    55de:	434a      	muls	r2, r1
    55e0:	4343      	muls	r3, r0
    55e2:	0c2d      	lsrs	r5, r5, #16
    55e4:	0424      	lsls	r4, r4, #16
    55e6:	1964      	adds	r4, r4, r5
    55e8:	1899      	adds	r1, r3, r2
    55ea:	19c9      	adds	r1, r1, r7
    55ec:	0020      	movs	r0, r4
    55ee:	bc0c      	pop	{r2, r3}
    55f0:	4690      	mov	r8, r2
    55f2:	4699      	mov	r9, r3
    55f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55f6:	46c0      	nop			; (mov r8, r8)

000055f8 <__udivmoddi4>:
    55f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    55fa:	464d      	mov	r5, r9
    55fc:	4656      	mov	r6, sl
    55fe:	4644      	mov	r4, r8
    5600:	465f      	mov	r7, fp
    5602:	b4f0      	push	{r4, r5, r6, r7}
    5604:	4692      	mov	sl, r2
    5606:	b083      	sub	sp, #12
    5608:	0004      	movs	r4, r0
    560a:	000d      	movs	r5, r1
    560c:	4699      	mov	r9, r3
    560e:	428b      	cmp	r3, r1
    5610:	d82f      	bhi.n	5672 <__udivmoddi4+0x7a>
    5612:	d02c      	beq.n	566e <__udivmoddi4+0x76>
    5614:	4649      	mov	r1, r9
    5616:	4650      	mov	r0, sl
    5618:	f001 fd4a 	bl	70b0 <__clzdi2>
    561c:	0029      	movs	r1, r5
    561e:	0006      	movs	r6, r0
    5620:	0020      	movs	r0, r4
    5622:	f001 fd45 	bl	70b0 <__clzdi2>
    5626:	1a33      	subs	r3, r6, r0
    5628:	4698      	mov	r8, r3
    562a:	3b20      	subs	r3, #32
    562c:	469b      	mov	fp, r3
    562e:	d500      	bpl.n	5632 <__udivmoddi4+0x3a>
    5630:	e074      	b.n	571c <__udivmoddi4+0x124>
    5632:	4653      	mov	r3, sl
    5634:	465a      	mov	r2, fp
    5636:	4093      	lsls	r3, r2
    5638:	001f      	movs	r7, r3
    563a:	4653      	mov	r3, sl
    563c:	4642      	mov	r2, r8
    563e:	4093      	lsls	r3, r2
    5640:	001e      	movs	r6, r3
    5642:	42af      	cmp	r7, r5
    5644:	d829      	bhi.n	569a <__udivmoddi4+0xa2>
    5646:	d026      	beq.n	5696 <__udivmoddi4+0x9e>
    5648:	465b      	mov	r3, fp
    564a:	1ba4      	subs	r4, r4, r6
    564c:	41bd      	sbcs	r5, r7
    564e:	2b00      	cmp	r3, #0
    5650:	da00      	bge.n	5654 <__udivmoddi4+0x5c>
    5652:	e079      	b.n	5748 <__udivmoddi4+0x150>
    5654:	2200      	movs	r2, #0
    5656:	2300      	movs	r3, #0
    5658:	9200      	str	r2, [sp, #0]
    565a:	9301      	str	r3, [sp, #4]
    565c:	2301      	movs	r3, #1
    565e:	465a      	mov	r2, fp
    5660:	4093      	lsls	r3, r2
    5662:	9301      	str	r3, [sp, #4]
    5664:	2301      	movs	r3, #1
    5666:	4642      	mov	r2, r8
    5668:	4093      	lsls	r3, r2
    566a:	9300      	str	r3, [sp, #0]
    566c:	e019      	b.n	56a2 <__udivmoddi4+0xaa>
    566e:	4282      	cmp	r2, r0
    5670:	d9d0      	bls.n	5614 <__udivmoddi4+0x1c>
    5672:	2200      	movs	r2, #0
    5674:	2300      	movs	r3, #0
    5676:	9200      	str	r2, [sp, #0]
    5678:	9301      	str	r3, [sp, #4]
    567a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    567c:	2b00      	cmp	r3, #0
    567e:	d001      	beq.n	5684 <__udivmoddi4+0x8c>
    5680:	601c      	str	r4, [r3, #0]
    5682:	605d      	str	r5, [r3, #4]
    5684:	9800      	ldr	r0, [sp, #0]
    5686:	9901      	ldr	r1, [sp, #4]
    5688:	b003      	add	sp, #12
    568a:	bc3c      	pop	{r2, r3, r4, r5}
    568c:	4690      	mov	r8, r2
    568e:	4699      	mov	r9, r3
    5690:	46a2      	mov	sl, r4
    5692:	46ab      	mov	fp, r5
    5694:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5696:	42a3      	cmp	r3, r4
    5698:	d9d6      	bls.n	5648 <__udivmoddi4+0x50>
    569a:	2200      	movs	r2, #0
    569c:	2300      	movs	r3, #0
    569e:	9200      	str	r2, [sp, #0]
    56a0:	9301      	str	r3, [sp, #4]
    56a2:	4643      	mov	r3, r8
    56a4:	2b00      	cmp	r3, #0
    56a6:	d0e8      	beq.n	567a <__udivmoddi4+0x82>
    56a8:	07fb      	lsls	r3, r7, #31
    56aa:	0872      	lsrs	r2, r6, #1
    56ac:	431a      	orrs	r2, r3
    56ae:	4646      	mov	r6, r8
    56b0:	087b      	lsrs	r3, r7, #1
    56b2:	e00e      	b.n	56d2 <__udivmoddi4+0xda>
    56b4:	42ab      	cmp	r3, r5
    56b6:	d101      	bne.n	56bc <__udivmoddi4+0xc4>
    56b8:	42a2      	cmp	r2, r4
    56ba:	d80c      	bhi.n	56d6 <__udivmoddi4+0xde>
    56bc:	1aa4      	subs	r4, r4, r2
    56be:	419d      	sbcs	r5, r3
    56c0:	2001      	movs	r0, #1
    56c2:	1924      	adds	r4, r4, r4
    56c4:	416d      	adcs	r5, r5
    56c6:	2100      	movs	r1, #0
    56c8:	3e01      	subs	r6, #1
    56ca:	1824      	adds	r4, r4, r0
    56cc:	414d      	adcs	r5, r1
    56ce:	2e00      	cmp	r6, #0
    56d0:	d006      	beq.n	56e0 <__udivmoddi4+0xe8>
    56d2:	42ab      	cmp	r3, r5
    56d4:	d9ee      	bls.n	56b4 <__udivmoddi4+0xbc>
    56d6:	3e01      	subs	r6, #1
    56d8:	1924      	adds	r4, r4, r4
    56da:	416d      	adcs	r5, r5
    56dc:	2e00      	cmp	r6, #0
    56de:	d1f8      	bne.n	56d2 <__udivmoddi4+0xda>
    56e0:	465b      	mov	r3, fp
    56e2:	9800      	ldr	r0, [sp, #0]
    56e4:	9901      	ldr	r1, [sp, #4]
    56e6:	1900      	adds	r0, r0, r4
    56e8:	4169      	adcs	r1, r5
    56ea:	2b00      	cmp	r3, #0
    56ec:	db22      	blt.n	5734 <__udivmoddi4+0x13c>
    56ee:	002b      	movs	r3, r5
    56f0:	465a      	mov	r2, fp
    56f2:	40d3      	lsrs	r3, r2
    56f4:	002a      	movs	r2, r5
    56f6:	4644      	mov	r4, r8
    56f8:	40e2      	lsrs	r2, r4
    56fa:	001c      	movs	r4, r3
    56fc:	465b      	mov	r3, fp
    56fe:	0015      	movs	r5, r2
    5700:	2b00      	cmp	r3, #0
    5702:	db2c      	blt.n	575e <__udivmoddi4+0x166>
    5704:	0026      	movs	r6, r4
    5706:	409e      	lsls	r6, r3
    5708:	0033      	movs	r3, r6
    570a:	0026      	movs	r6, r4
    570c:	4647      	mov	r7, r8
    570e:	40be      	lsls	r6, r7
    5710:	0032      	movs	r2, r6
    5712:	1a80      	subs	r0, r0, r2
    5714:	4199      	sbcs	r1, r3
    5716:	9000      	str	r0, [sp, #0]
    5718:	9101      	str	r1, [sp, #4]
    571a:	e7ae      	b.n	567a <__udivmoddi4+0x82>
    571c:	4642      	mov	r2, r8
    571e:	2320      	movs	r3, #32
    5720:	1a9b      	subs	r3, r3, r2
    5722:	4652      	mov	r2, sl
    5724:	40da      	lsrs	r2, r3
    5726:	4641      	mov	r1, r8
    5728:	0013      	movs	r3, r2
    572a:	464a      	mov	r2, r9
    572c:	408a      	lsls	r2, r1
    572e:	0017      	movs	r7, r2
    5730:	431f      	orrs	r7, r3
    5732:	e782      	b.n	563a <__udivmoddi4+0x42>
    5734:	4642      	mov	r2, r8
    5736:	2320      	movs	r3, #32
    5738:	1a9b      	subs	r3, r3, r2
    573a:	002a      	movs	r2, r5
    573c:	4646      	mov	r6, r8
    573e:	409a      	lsls	r2, r3
    5740:	0023      	movs	r3, r4
    5742:	40f3      	lsrs	r3, r6
    5744:	4313      	orrs	r3, r2
    5746:	e7d5      	b.n	56f4 <__udivmoddi4+0xfc>
    5748:	4642      	mov	r2, r8
    574a:	2320      	movs	r3, #32
    574c:	2100      	movs	r1, #0
    574e:	1a9b      	subs	r3, r3, r2
    5750:	2200      	movs	r2, #0
    5752:	9100      	str	r1, [sp, #0]
    5754:	9201      	str	r2, [sp, #4]
    5756:	2201      	movs	r2, #1
    5758:	40da      	lsrs	r2, r3
    575a:	9201      	str	r2, [sp, #4]
    575c:	e782      	b.n	5664 <__udivmoddi4+0x6c>
    575e:	4642      	mov	r2, r8
    5760:	2320      	movs	r3, #32
    5762:	0026      	movs	r6, r4
    5764:	1a9b      	subs	r3, r3, r2
    5766:	40de      	lsrs	r6, r3
    5768:	002f      	movs	r7, r5
    576a:	46b4      	mov	ip, r6
    576c:	4097      	lsls	r7, r2
    576e:	4666      	mov	r6, ip
    5770:	003b      	movs	r3, r7
    5772:	4333      	orrs	r3, r6
    5774:	e7c9      	b.n	570a <__udivmoddi4+0x112>
    5776:	46c0      	nop			; (mov r8, r8)

00005778 <__aeabi_dadd>:
    5778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    577a:	4656      	mov	r6, sl
    577c:	465f      	mov	r7, fp
    577e:	464d      	mov	r5, r9
    5780:	4644      	mov	r4, r8
    5782:	b4f0      	push	{r4, r5, r6, r7}
    5784:	000f      	movs	r7, r1
    5786:	0ffd      	lsrs	r5, r7, #31
    5788:	46aa      	mov	sl, r5
    578a:	0309      	lsls	r1, r1, #12
    578c:	007c      	lsls	r4, r7, #1
    578e:	002e      	movs	r6, r5
    5790:	005f      	lsls	r7, r3, #1
    5792:	0f45      	lsrs	r5, r0, #29
    5794:	0a49      	lsrs	r1, r1, #9
    5796:	0d7f      	lsrs	r7, r7, #21
    5798:	4329      	orrs	r1, r5
    579a:	00c5      	lsls	r5, r0, #3
    579c:	0318      	lsls	r0, r3, #12
    579e:	46bc      	mov	ip, r7
    57a0:	0a40      	lsrs	r0, r0, #9
    57a2:	0f57      	lsrs	r7, r2, #29
    57a4:	0d64      	lsrs	r4, r4, #21
    57a6:	0fdb      	lsrs	r3, r3, #31
    57a8:	4338      	orrs	r0, r7
    57aa:	00d2      	lsls	r2, r2, #3
    57ac:	459a      	cmp	sl, r3
    57ae:	d100      	bne.n	57b2 <__aeabi_dadd+0x3a>
    57b0:	e0aa      	b.n	5908 <__aeabi_dadd+0x190>
    57b2:	4666      	mov	r6, ip
    57b4:	1ba6      	subs	r6, r4, r6
    57b6:	2e00      	cmp	r6, #0
    57b8:	dc00      	bgt.n	57bc <__aeabi_dadd+0x44>
    57ba:	e0ff      	b.n	59bc <__aeabi_dadd+0x244>
    57bc:	4663      	mov	r3, ip
    57be:	2b00      	cmp	r3, #0
    57c0:	d139      	bne.n	5836 <__aeabi_dadd+0xbe>
    57c2:	0003      	movs	r3, r0
    57c4:	4313      	orrs	r3, r2
    57c6:	d000      	beq.n	57ca <__aeabi_dadd+0x52>
    57c8:	e0d9      	b.n	597e <__aeabi_dadd+0x206>
    57ca:	076b      	lsls	r3, r5, #29
    57cc:	d009      	beq.n	57e2 <__aeabi_dadd+0x6a>
    57ce:	230f      	movs	r3, #15
    57d0:	402b      	ands	r3, r5
    57d2:	2b04      	cmp	r3, #4
    57d4:	d005      	beq.n	57e2 <__aeabi_dadd+0x6a>
    57d6:	1d2b      	adds	r3, r5, #4
    57d8:	42ab      	cmp	r3, r5
    57da:	41ad      	sbcs	r5, r5
    57dc:	426d      	negs	r5, r5
    57de:	1949      	adds	r1, r1, r5
    57e0:	001d      	movs	r5, r3
    57e2:	020b      	lsls	r3, r1, #8
    57e4:	d400      	bmi.n	57e8 <__aeabi_dadd+0x70>
    57e6:	e082      	b.n	58ee <__aeabi_dadd+0x176>
    57e8:	4bca      	ldr	r3, [pc, #808]	; (5b14 <__aeabi_dadd+0x39c>)
    57ea:	3401      	adds	r4, #1
    57ec:	429c      	cmp	r4, r3
    57ee:	d100      	bne.n	57f2 <__aeabi_dadd+0x7a>
    57f0:	e0fe      	b.n	59f0 <__aeabi_dadd+0x278>
    57f2:	000a      	movs	r2, r1
    57f4:	4656      	mov	r6, sl
    57f6:	4bc8      	ldr	r3, [pc, #800]	; (5b18 <__aeabi_dadd+0x3a0>)
    57f8:	08ed      	lsrs	r5, r5, #3
    57fa:	401a      	ands	r2, r3
    57fc:	0750      	lsls	r0, r2, #29
    57fe:	0564      	lsls	r4, r4, #21
    5800:	0252      	lsls	r2, r2, #9
    5802:	4305      	orrs	r5, r0
    5804:	0b12      	lsrs	r2, r2, #12
    5806:	0d64      	lsrs	r4, r4, #21
    5808:	2100      	movs	r1, #0
    580a:	0312      	lsls	r2, r2, #12
    580c:	0d0b      	lsrs	r3, r1, #20
    580e:	051b      	lsls	r3, r3, #20
    5810:	0564      	lsls	r4, r4, #21
    5812:	0b12      	lsrs	r2, r2, #12
    5814:	431a      	orrs	r2, r3
    5816:	0863      	lsrs	r3, r4, #1
    5818:	4cc0      	ldr	r4, [pc, #768]	; (5b1c <__aeabi_dadd+0x3a4>)
    581a:	07f6      	lsls	r6, r6, #31
    581c:	4014      	ands	r4, r2
    581e:	431c      	orrs	r4, r3
    5820:	0064      	lsls	r4, r4, #1
    5822:	0864      	lsrs	r4, r4, #1
    5824:	4334      	orrs	r4, r6
    5826:	0028      	movs	r0, r5
    5828:	0021      	movs	r1, r4
    582a:	bc3c      	pop	{r2, r3, r4, r5}
    582c:	4690      	mov	r8, r2
    582e:	4699      	mov	r9, r3
    5830:	46a2      	mov	sl, r4
    5832:	46ab      	mov	fp, r5
    5834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5836:	4bb7      	ldr	r3, [pc, #732]	; (5b14 <__aeabi_dadd+0x39c>)
    5838:	429c      	cmp	r4, r3
    583a:	d0c6      	beq.n	57ca <__aeabi_dadd+0x52>
    583c:	2380      	movs	r3, #128	; 0x80
    583e:	041b      	lsls	r3, r3, #16
    5840:	4318      	orrs	r0, r3
    5842:	2e38      	cmp	r6, #56	; 0x38
    5844:	dd00      	ble.n	5848 <__aeabi_dadd+0xd0>
    5846:	e0eb      	b.n	5a20 <__aeabi_dadd+0x2a8>
    5848:	2e1f      	cmp	r6, #31
    584a:	dd00      	ble.n	584e <__aeabi_dadd+0xd6>
    584c:	e11e      	b.n	5a8c <__aeabi_dadd+0x314>
    584e:	2320      	movs	r3, #32
    5850:	1b9b      	subs	r3, r3, r6
    5852:	469c      	mov	ip, r3
    5854:	0003      	movs	r3, r0
    5856:	4667      	mov	r7, ip
    5858:	40bb      	lsls	r3, r7
    585a:	4698      	mov	r8, r3
    585c:	0013      	movs	r3, r2
    585e:	4647      	mov	r7, r8
    5860:	40f3      	lsrs	r3, r6
    5862:	433b      	orrs	r3, r7
    5864:	4667      	mov	r7, ip
    5866:	40ba      	lsls	r2, r7
    5868:	1e57      	subs	r7, r2, #1
    586a:	41ba      	sbcs	r2, r7
    586c:	4313      	orrs	r3, r2
    586e:	0002      	movs	r2, r0
    5870:	40f2      	lsrs	r2, r6
    5872:	1aeb      	subs	r3, r5, r3
    5874:	429d      	cmp	r5, r3
    5876:	41b6      	sbcs	r6, r6
    5878:	001d      	movs	r5, r3
    587a:	1a8a      	subs	r2, r1, r2
    587c:	4276      	negs	r6, r6
    587e:	1b91      	subs	r1, r2, r6
    5880:	020b      	lsls	r3, r1, #8
    5882:	d531      	bpl.n	58e8 <__aeabi_dadd+0x170>
    5884:	024a      	lsls	r2, r1, #9
    5886:	0a56      	lsrs	r6, r2, #9
    5888:	2e00      	cmp	r6, #0
    588a:	d100      	bne.n	588e <__aeabi_dadd+0x116>
    588c:	e0b4      	b.n	59f8 <__aeabi_dadd+0x280>
    588e:	0030      	movs	r0, r6
    5890:	f001 fbf0 	bl	7074 <__clzsi2>
    5894:	0003      	movs	r3, r0
    5896:	3b08      	subs	r3, #8
    5898:	2b1f      	cmp	r3, #31
    589a:	dd00      	ble.n	589e <__aeabi_dadd+0x126>
    589c:	e0b5      	b.n	5a0a <__aeabi_dadd+0x292>
    589e:	2220      	movs	r2, #32
    58a0:	0029      	movs	r1, r5
    58a2:	1ad2      	subs	r2, r2, r3
    58a4:	40d1      	lsrs	r1, r2
    58a6:	409e      	lsls	r6, r3
    58a8:	000a      	movs	r2, r1
    58aa:	409d      	lsls	r5, r3
    58ac:	4332      	orrs	r2, r6
    58ae:	429c      	cmp	r4, r3
    58b0:	dd00      	ble.n	58b4 <__aeabi_dadd+0x13c>
    58b2:	e0b1      	b.n	5a18 <__aeabi_dadd+0x2a0>
    58b4:	1b1c      	subs	r4, r3, r4
    58b6:	1c63      	adds	r3, r4, #1
    58b8:	2b1f      	cmp	r3, #31
    58ba:	dd00      	ble.n	58be <__aeabi_dadd+0x146>
    58bc:	e0d5      	b.n	5a6a <__aeabi_dadd+0x2f2>
    58be:	2120      	movs	r1, #32
    58c0:	0014      	movs	r4, r2
    58c2:	0028      	movs	r0, r5
    58c4:	1ac9      	subs	r1, r1, r3
    58c6:	408c      	lsls	r4, r1
    58c8:	40d8      	lsrs	r0, r3
    58ca:	408d      	lsls	r5, r1
    58cc:	4304      	orrs	r4, r0
    58ce:	40da      	lsrs	r2, r3
    58d0:	1e68      	subs	r0, r5, #1
    58d2:	4185      	sbcs	r5, r0
    58d4:	0011      	movs	r1, r2
    58d6:	4325      	orrs	r5, r4
    58d8:	2400      	movs	r4, #0
    58da:	e776      	b.n	57ca <__aeabi_dadd+0x52>
    58dc:	4641      	mov	r1, r8
    58de:	4331      	orrs	r1, r6
    58e0:	d100      	bne.n	58e4 <__aeabi_dadd+0x16c>
    58e2:	e234      	b.n	5d4e <__aeabi_dadd+0x5d6>
    58e4:	0031      	movs	r1, r6
    58e6:	4645      	mov	r5, r8
    58e8:	076b      	lsls	r3, r5, #29
    58ea:	d000      	beq.n	58ee <__aeabi_dadd+0x176>
    58ec:	e76f      	b.n	57ce <__aeabi_dadd+0x56>
    58ee:	4656      	mov	r6, sl
    58f0:	0748      	lsls	r0, r1, #29
    58f2:	08ed      	lsrs	r5, r5, #3
    58f4:	08c9      	lsrs	r1, r1, #3
    58f6:	4305      	orrs	r5, r0
    58f8:	4b86      	ldr	r3, [pc, #536]	; (5b14 <__aeabi_dadd+0x39c>)
    58fa:	429c      	cmp	r4, r3
    58fc:	d035      	beq.n	596a <__aeabi_dadd+0x1f2>
    58fe:	030a      	lsls	r2, r1, #12
    5900:	0564      	lsls	r4, r4, #21
    5902:	0b12      	lsrs	r2, r2, #12
    5904:	0d64      	lsrs	r4, r4, #21
    5906:	e77f      	b.n	5808 <__aeabi_dadd+0x90>
    5908:	4663      	mov	r3, ip
    590a:	1ae3      	subs	r3, r4, r3
    590c:	469b      	mov	fp, r3
    590e:	2b00      	cmp	r3, #0
    5910:	dc00      	bgt.n	5914 <__aeabi_dadd+0x19c>
    5912:	e08b      	b.n	5a2c <__aeabi_dadd+0x2b4>
    5914:	4667      	mov	r7, ip
    5916:	2f00      	cmp	r7, #0
    5918:	d03c      	beq.n	5994 <__aeabi_dadd+0x21c>
    591a:	4f7e      	ldr	r7, [pc, #504]	; (5b14 <__aeabi_dadd+0x39c>)
    591c:	42bc      	cmp	r4, r7
    591e:	d100      	bne.n	5922 <__aeabi_dadd+0x1aa>
    5920:	e753      	b.n	57ca <__aeabi_dadd+0x52>
    5922:	2780      	movs	r7, #128	; 0x80
    5924:	043f      	lsls	r7, r7, #16
    5926:	4338      	orrs	r0, r7
    5928:	465b      	mov	r3, fp
    592a:	2b38      	cmp	r3, #56	; 0x38
    592c:	dc00      	bgt.n	5930 <__aeabi_dadd+0x1b8>
    592e:	e0f7      	b.n	5b20 <__aeabi_dadd+0x3a8>
    5930:	4302      	orrs	r2, r0
    5932:	1e50      	subs	r0, r2, #1
    5934:	4182      	sbcs	r2, r0
    5936:	2000      	movs	r0, #0
    5938:	b2d2      	uxtb	r2, r2
    593a:	1953      	adds	r3, r2, r5
    593c:	1842      	adds	r2, r0, r1
    593e:	42ab      	cmp	r3, r5
    5940:	4189      	sbcs	r1, r1
    5942:	001d      	movs	r5, r3
    5944:	4249      	negs	r1, r1
    5946:	1889      	adds	r1, r1, r2
    5948:	020b      	lsls	r3, r1, #8
    594a:	d5cd      	bpl.n	58e8 <__aeabi_dadd+0x170>
    594c:	4b71      	ldr	r3, [pc, #452]	; (5b14 <__aeabi_dadd+0x39c>)
    594e:	3401      	adds	r4, #1
    5950:	429c      	cmp	r4, r3
    5952:	d100      	bne.n	5956 <__aeabi_dadd+0x1de>
    5954:	e13d      	b.n	5bd2 <__aeabi_dadd+0x45a>
    5956:	2001      	movs	r0, #1
    5958:	4a6f      	ldr	r2, [pc, #444]	; (5b18 <__aeabi_dadd+0x3a0>)
    595a:	086b      	lsrs	r3, r5, #1
    595c:	400a      	ands	r2, r1
    595e:	4028      	ands	r0, r5
    5960:	4318      	orrs	r0, r3
    5962:	07d5      	lsls	r5, r2, #31
    5964:	4305      	orrs	r5, r0
    5966:	0851      	lsrs	r1, r2, #1
    5968:	e72f      	b.n	57ca <__aeabi_dadd+0x52>
    596a:	002b      	movs	r3, r5
    596c:	430b      	orrs	r3, r1
    596e:	d100      	bne.n	5972 <__aeabi_dadd+0x1fa>
    5970:	e1cb      	b.n	5d0a <__aeabi_dadd+0x592>
    5972:	2380      	movs	r3, #128	; 0x80
    5974:	031b      	lsls	r3, r3, #12
    5976:	430b      	orrs	r3, r1
    5978:	031a      	lsls	r2, r3, #12
    597a:	0b12      	lsrs	r2, r2, #12
    597c:	e744      	b.n	5808 <__aeabi_dadd+0x90>
    597e:	3e01      	subs	r6, #1
    5980:	2e00      	cmp	r6, #0
    5982:	d16d      	bne.n	5a60 <__aeabi_dadd+0x2e8>
    5984:	1aae      	subs	r6, r5, r2
    5986:	42b5      	cmp	r5, r6
    5988:	419b      	sbcs	r3, r3
    598a:	1a09      	subs	r1, r1, r0
    598c:	425b      	negs	r3, r3
    598e:	1ac9      	subs	r1, r1, r3
    5990:	0035      	movs	r5, r6
    5992:	e775      	b.n	5880 <__aeabi_dadd+0x108>
    5994:	0007      	movs	r7, r0
    5996:	4317      	orrs	r7, r2
    5998:	d100      	bne.n	599c <__aeabi_dadd+0x224>
    599a:	e716      	b.n	57ca <__aeabi_dadd+0x52>
    599c:	2301      	movs	r3, #1
    599e:	425b      	negs	r3, r3
    59a0:	469c      	mov	ip, r3
    59a2:	44e3      	add	fp, ip
    59a4:	465b      	mov	r3, fp
    59a6:	2b00      	cmp	r3, #0
    59a8:	d000      	beq.n	59ac <__aeabi_dadd+0x234>
    59aa:	e0e0      	b.n	5b6e <__aeabi_dadd+0x3f6>
    59ac:	18aa      	adds	r2, r5, r2
    59ae:	42aa      	cmp	r2, r5
    59b0:	419b      	sbcs	r3, r3
    59b2:	1809      	adds	r1, r1, r0
    59b4:	425b      	negs	r3, r3
    59b6:	1859      	adds	r1, r3, r1
    59b8:	0015      	movs	r5, r2
    59ba:	e7c5      	b.n	5948 <__aeabi_dadd+0x1d0>
    59bc:	2e00      	cmp	r6, #0
    59be:	d175      	bne.n	5aac <__aeabi_dadd+0x334>
    59c0:	1c66      	adds	r6, r4, #1
    59c2:	0576      	lsls	r6, r6, #21
    59c4:	0d76      	lsrs	r6, r6, #21
    59c6:	2e01      	cmp	r6, #1
    59c8:	dc00      	bgt.n	59cc <__aeabi_dadd+0x254>
    59ca:	e0f3      	b.n	5bb4 <__aeabi_dadd+0x43c>
    59cc:	1aae      	subs	r6, r5, r2
    59ce:	46b0      	mov	r8, r6
    59d0:	4545      	cmp	r5, r8
    59d2:	41bf      	sbcs	r7, r7
    59d4:	1a0e      	subs	r6, r1, r0
    59d6:	427f      	negs	r7, r7
    59d8:	1bf6      	subs	r6, r6, r7
    59da:	0237      	lsls	r7, r6, #8
    59dc:	d400      	bmi.n	59e0 <__aeabi_dadd+0x268>
    59de:	e08f      	b.n	5b00 <__aeabi_dadd+0x388>
    59e0:	1b55      	subs	r5, r2, r5
    59e2:	42aa      	cmp	r2, r5
    59e4:	41b6      	sbcs	r6, r6
    59e6:	1a41      	subs	r1, r0, r1
    59e8:	4276      	negs	r6, r6
    59ea:	1b8e      	subs	r6, r1, r6
    59ec:	469a      	mov	sl, r3
    59ee:	e74b      	b.n	5888 <__aeabi_dadd+0x110>
    59f0:	4656      	mov	r6, sl
    59f2:	2200      	movs	r2, #0
    59f4:	2500      	movs	r5, #0
    59f6:	e707      	b.n	5808 <__aeabi_dadd+0x90>
    59f8:	0028      	movs	r0, r5
    59fa:	f001 fb3b 	bl	7074 <__clzsi2>
    59fe:	3020      	adds	r0, #32
    5a00:	0003      	movs	r3, r0
    5a02:	3b08      	subs	r3, #8
    5a04:	2b1f      	cmp	r3, #31
    5a06:	dc00      	bgt.n	5a0a <__aeabi_dadd+0x292>
    5a08:	e749      	b.n	589e <__aeabi_dadd+0x126>
    5a0a:	002a      	movs	r2, r5
    5a0c:	3828      	subs	r0, #40	; 0x28
    5a0e:	4082      	lsls	r2, r0
    5a10:	2500      	movs	r5, #0
    5a12:	429c      	cmp	r4, r3
    5a14:	dc00      	bgt.n	5a18 <__aeabi_dadd+0x2a0>
    5a16:	e74d      	b.n	58b4 <__aeabi_dadd+0x13c>
    5a18:	493f      	ldr	r1, [pc, #252]	; (5b18 <__aeabi_dadd+0x3a0>)
    5a1a:	1ae4      	subs	r4, r4, r3
    5a1c:	4011      	ands	r1, r2
    5a1e:	e6d4      	b.n	57ca <__aeabi_dadd+0x52>
    5a20:	4302      	orrs	r2, r0
    5a22:	1e50      	subs	r0, r2, #1
    5a24:	4182      	sbcs	r2, r0
    5a26:	b2d3      	uxtb	r3, r2
    5a28:	2200      	movs	r2, #0
    5a2a:	e722      	b.n	5872 <__aeabi_dadd+0xfa>
    5a2c:	2b00      	cmp	r3, #0
    5a2e:	d000      	beq.n	5a32 <__aeabi_dadd+0x2ba>
    5a30:	e0f3      	b.n	5c1a <__aeabi_dadd+0x4a2>
    5a32:	1c63      	adds	r3, r4, #1
    5a34:	469c      	mov	ip, r3
    5a36:	055b      	lsls	r3, r3, #21
    5a38:	0d5b      	lsrs	r3, r3, #21
    5a3a:	2b01      	cmp	r3, #1
    5a3c:	dc00      	bgt.n	5a40 <__aeabi_dadd+0x2c8>
    5a3e:	e09f      	b.n	5b80 <__aeabi_dadd+0x408>
    5a40:	4b34      	ldr	r3, [pc, #208]	; (5b14 <__aeabi_dadd+0x39c>)
    5a42:	459c      	cmp	ip, r3
    5a44:	d100      	bne.n	5a48 <__aeabi_dadd+0x2d0>
    5a46:	e0c3      	b.n	5bd0 <__aeabi_dadd+0x458>
    5a48:	18aa      	adds	r2, r5, r2
    5a4a:	1809      	adds	r1, r1, r0
    5a4c:	42aa      	cmp	r2, r5
    5a4e:	4180      	sbcs	r0, r0
    5a50:	4240      	negs	r0, r0
    5a52:	1841      	adds	r1, r0, r1
    5a54:	07cd      	lsls	r5, r1, #31
    5a56:	0852      	lsrs	r2, r2, #1
    5a58:	4315      	orrs	r5, r2
    5a5a:	0849      	lsrs	r1, r1, #1
    5a5c:	4664      	mov	r4, ip
    5a5e:	e6b4      	b.n	57ca <__aeabi_dadd+0x52>
    5a60:	4b2c      	ldr	r3, [pc, #176]	; (5b14 <__aeabi_dadd+0x39c>)
    5a62:	429c      	cmp	r4, r3
    5a64:	d000      	beq.n	5a68 <__aeabi_dadd+0x2f0>
    5a66:	e6ec      	b.n	5842 <__aeabi_dadd+0xca>
    5a68:	e6af      	b.n	57ca <__aeabi_dadd+0x52>
    5a6a:	0011      	movs	r1, r2
    5a6c:	3c1f      	subs	r4, #31
    5a6e:	40e1      	lsrs	r1, r4
    5a70:	000c      	movs	r4, r1
    5a72:	2b20      	cmp	r3, #32
    5a74:	d100      	bne.n	5a78 <__aeabi_dadd+0x300>
    5a76:	e07f      	b.n	5b78 <__aeabi_dadd+0x400>
    5a78:	2140      	movs	r1, #64	; 0x40
    5a7a:	1acb      	subs	r3, r1, r3
    5a7c:	409a      	lsls	r2, r3
    5a7e:	4315      	orrs	r5, r2
    5a80:	1e6a      	subs	r2, r5, #1
    5a82:	4195      	sbcs	r5, r2
    5a84:	2100      	movs	r1, #0
    5a86:	4325      	orrs	r5, r4
    5a88:	2400      	movs	r4, #0
    5a8a:	e72d      	b.n	58e8 <__aeabi_dadd+0x170>
    5a8c:	0033      	movs	r3, r6
    5a8e:	0007      	movs	r7, r0
    5a90:	3b20      	subs	r3, #32
    5a92:	40df      	lsrs	r7, r3
    5a94:	003b      	movs	r3, r7
    5a96:	2e20      	cmp	r6, #32
    5a98:	d070      	beq.n	5b7c <__aeabi_dadd+0x404>
    5a9a:	2740      	movs	r7, #64	; 0x40
    5a9c:	1bbe      	subs	r6, r7, r6
    5a9e:	40b0      	lsls	r0, r6
    5aa0:	4302      	orrs	r2, r0
    5aa2:	1e50      	subs	r0, r2, #1
    5aa4:	4182      	sbcs	r2, r0
    5aa6:	4313      	orrs	r3, r2
    5aa8:	2200      	movs	r2, #0
    5aaa:	e6e2      	b.n	5872 <__aeabi_dadd+0xfa>
    5aac:	2c00      	cmp	r4, #0
    5aae:	d04f      	beq.n	5b50 <__aeabi_dadd+0x3d8>
    5ab0:	4c18      	ldr	r4, [pc, #96]	; (5b14 <__aeabi_dadd+0x39c>)
    5ab2:	45a4      	cmp	ip, r4
    5ab4:	d100      	bne.n	5ab8 <__aeabi_dadd+0x340>
    5ab6:	e0ab      	b.n	5c10 <__aeabi_dadd+0x498>
    5ab8:	2480      	movs	r4, #128	; 0x80
    5aba:	0424      	lsls	r4, r4, #16
    5abc:	4276      	negs	r6, r6
    5abe:	4321      	orrs	r1, r4
    5ac0:	2e38      	cmp	r6, #56	; 0x38
    5ac2:	dd00      	ble.n	5ac6 <__aeabi_dadd+0x34e>
    5ac4:	e0df      	b.n	5c86 <__aeabi_dadd+0x50e>
    5ac6:	2e1f      	cmp	r6, #31
    5ac8:	dd00      	ble.n	5acc <__aeabi_dadd+0x354>
    5aca:	e143      	b.n	5d54 <__aeabi_dadd+0x5dc>
    5acc:	2720      	movs	r7, #32
    5ace:	1bbc      	subs	r4, r7, r6
    5ad0:	46a1      	mov	r9, r4
    5ad2:	000c      	movs	r4, r1
    5ad4:	464f      	mov	r7, r9
    5ad6:	40bc      	lsls	r4, r7
    5ad8:	46a0      	mov	r8, r4
    5ada:	002c      	movs	r4, r5
    5adc:	4647      	mov	r7, r8
    5ade:	40f4      	lsrs	r4, r6
    5ae0:	433c      	orrs	r4, r7
    5ae2:	464f      	mov	r7, r9
    5ae4:	40bd      	lsls	r5, r7
    5ae6:	1e6f      	subs	r7, r5, #1
    5ae8:	41bd      	sbcs	r5, r7
    5aea:	40f1      	lsrs	r1, r6
    5aec:	432c      	orrs	r4, r5
    5aee:	1b15      	subs	r5, r2, r4
    5af0:	42aa      	cmp	r2, r5
    5af2:	4192      	sbcs	r2, r2
    5af4:	1a41      	subs	r1, r0, r1
    5af6:	4252      	negs	r2, r2
    5af8:	1a89      	subs	r1, r1, r2
    5afa:	4664      	mov	r4, ip
    5afc:	469a      	mov	sl, r3
    5afe:	e6bf      	b.n	5880 <__aeabi_dadd+0x108>
    5b00:	4641      	mov	r1, r8
    5b02:	4645      	mov	r5, r8
    5b04:	4331      	orrs	r1, r6
    5b06:	d000      	beq.n	5b0a <__aeabi_dadd+0x392>
    5b08:	e6be      	b.n	5888 <__aeabi_dadd+0x110>
    5b0a:	2600      	movs	r6, #0
    5b0c:	2400      	movs	r4, #0
    5b0e:	2500      	movs	r5, #0
    5b10:	e6f2      	b.n	58f8 <__aeabi_dadd+0x180>
    5b12:	46c0      	nop			; (mov r8, r8)
    5b14:	000007ff 	.word	0x000007ff
    5b18:	ff7fffff 	.word	0xff7fffff
    5b1c:	800fffff 	.word	0x800fffff
    5b20:	2b1f      	cmp	r3, #31
    5b22:	dc59      	bgt.n	5bd8 <__aeabi_dadd+0x460>
    5b24:	2720      	movs	r7, #32
    5b26:	1aff      	subs	r7, r7, r3
    5b28:	46bc      	mov	ip, r7
    5b2a:	0007      	movs	r7, r0
    5b2c:	4663      	mov	r3, ip
    5b2e:	409f      	lsls	r7, r3
    5b30:	465b      	mov	r3, fp
    5b32:	46b9      	mov	r9, r7
    5b34:	0017      	movs	r7, r2
    5b36:	40df      	lsrs	r7, r3
    5b38:	46b8      	mov	r8, r7
    5b3a:	464f      	mov	r7, r9
    5b3c:	4643      	mov	r3, r8
    5b3e:	431f      	orrs	r7, r3
    5b40:	4663      	mov	r3, ip
    5b42:	409a      	lsls	r2, r3
    5b44:	1e53      	subs	r3, r2, #1
    5b46:	419a      	sbcs	r2, r3
    5b48:	465b      	mov	r3, fp
    5b4a:	433a      	orrs	r2, r7
    5b4c:	40d8      	lsrs	r0, r3
    5b4e:	e6f4      	b.n	593a <__aeabi_dadd+0x1c2>
    5b50:	000c      	movs	r4, r1
    5b52:	432c      	orrs	r4, r5
    5b54:	d05c      	beq.n	5c10 <__aeabi_dadd+0x498>
    5b56:	43f6      	mvns	r6, r6
    5b58:	2e00      	cmp	r6, #0
    5b5a:	d155      	bne.n	5c08 <__aeabi_dadd+0x490>
    5b5c:	1b55      	subs	r5, r2, r5
    5b5e:	42aa      	cmp	r2, r5
    5b60:	41a4      	sbcs	r4, r4
    5b62:	1a41      	subs	r1, r0, r1
    5b64:	4264      	negs	r4, r4
    5b66:	1b09      	subs	r1, r1, r4
    5b68:	469a      	mov	sl, r3
    5b6a:	4664      	mov	r4, ip
    5b6c:	e688      	b.n	5880 <__aeabi_dadd+0x108>
    5b6e:	4f96      	ldr	r7, [pc, #600]	; (5dc8 <__aeabi_dadd+0x650>)
    5b70:	42bc      	cmp	r4, r7
    5b72:	d000      	beq.n	5b76 <__aeabi_dadd+0x3fe>
    5b74:	e6d8      	b.n	5928 <__aeabi_dadd+0x1b0>
    5b76:	e628      	b.n	57ca <__aeabi_dadd+0x52>
    5b78:	2200      	movs	r2, #0
    5b7a:	e780      	b.n	5a7e <__aeabi_dadd+0x306>
    5b7c:	2000      	movs	r0, #0
    5b7e:	e78f      	b.n	5aa0 <__aeabi_dadd+0x328>
    5b80:	000b      	movs	r3, r1
    5b82:	432b      	orrs	r3, r5
    5b84:	2c00      	cmp	r4, #0
    5b86:	d000      	beq.n	5b8a <__aeabi_dadd+0x412>
    5b88:	e0c2      	b.n	5d10 <__aeabi_dadd+0x598>
    5b8a:	2b00      	cmp	r3, #0
    5b8c:	d100      	bne.n	5b90 <__aeabi_dadd+0x418>
    5b8e:	e101      	b.n	5d94 <__aeabi_dadd+0x61c>
    5b90:	0003      	movs	r3, r0
    5b92:	4313      	orrs	r3, r2
    5b94:	d100      	bne.n	5b98 <__aeabi_dadd+0x420>
    5b96:	e618      	b.n	57ca <__aeabi_dadd+0x52>
    5b98:	18ab      	adds	r3, r5, r2
    5b9a:	42ab      	cmp	r3, r5
    5b9c:	41b6      	sbcs	r6, r6
    5b9e:	1809      	adds	r1, r1, r0
    5ba0:	4276      	negs	r6, r6
    5ba2:	1871      	adds	r1, r6, r1
    5ba4:	020a      	lsls	r2, r1, #8
    5ba6:	d400      	bmi.n	5baa <__aeabi_dadd+0x432>
    5ba8:	e109      	b.n	5dbe <__aeabi_dadd+0x646>
    5baa:	4a88      	ldr	r2, [pc, #544]	; (5dcc <__aeabi_dadd+0x654>)
    5bac:	001d      	movs	r5, r3
    5bae:	4011      	ands	r1, r2
    5bb0:	4664      	mov	r4, ip
    5bb2:	e60a      	b.n	57ca <__aeabi_dadd+0x52>
    5bb4:	2c00      	cmp	r4, #0
    5bb6:	d15b      	bne.n	5c70 <__aeabi_dadd+0x4f8>
    5bb8:	000e      	movs	r6, r1
    5bba:	432e      	orrs	r6, r5
    5bbc:	d000      	beq.n	5bc0 <__aeabi_dadd+0x448>
    5bbe:	e08a      	b.n	5cd6 <__aeabi_dadd+0x55e>
    5bc0:	0001      	movs	r1, r0
    5bc2:	4311      	orrs	r1, r2
    5bc4:	d100      	bne.n	5bc8 <__aeabi_dadd+0x450>
    5bc6:	e0c2      	b.n	5d4e <__aeabi_dadd+0x5d6>
    5bc8:	0001      	movs	r1, r0
    5bca:	0015      	movs	r5, r2
    5bcc:	469a      	mov	sl, r3
    5bce:	e5fc      	b.n	57ca <__aeabi_dadd+0x52>
    5bd0:	4664      	mov	r4, ip
    5bd2:	2100      	movs	r1, #0
    5bd4:	2500      	movs	r5, #0
    5bd6:	e68f      	b.n	58f8 <__aeabi_dadd+0x180>
    5bd8:	2320      	movs	r3, #32
    5bda:	425b      	negs	r3, r3
    5bdc:	469c      	mov	ip, r3
    5bde:	44dc      	add	ip, fp
    5be0:	4663      	mov	r3, ip
    5be2:	0007      	movs	r7, r0
    5be4:	40df      	lsrs	r7, r3
    5be6:	465b      	mov	r3, fp
    5be8:	46bc      	mov	ip, r7
    5bea:	2b20      	cmp	r3, #32
    5bec:	d100      	bne.n	5bf0 <__aeabi_dadd+0x478>
    5bee:	e0ac      	b.n	5d4a <__aeabi_dadd+0x5d2>
    5bf0:	2340      	movs	r3, #64	; 0x40
    5bf2:	465f      	mov	r7, fp
    5bf4:	1bdb      	subs	r3, r3, r7
    5bf6:	4098      	lsls	r0, r3
    5bf8:	4302      	orrs	r2, r0
    5bfa:	1e50      	subs	r0, r2, #1
    5bfc:	4182      	sbcs	r2, r0
    5bfe:	4663      	mov	r3, ip
    5c00:	4313      	orrs	r3, r2
    5c02:	001a      	movs	r2, r3
    5c04:	2000      	movs	r0, #0
    5c06:	e698      	b.n	593a <__aeabi_dadd+0x1c2>
    5c08:	4c6f      	ldr	r4, [pc, #444]	; (5dc8 <__aeabi_dadd+0x650>)
    5c0a:	45a4      	cmp	ip, r4
    5c0c:	d000      	beq.n	5c10 <__aeabi_dadd+0x498>
    5c0e:	e757      	b.n	5ac0 <__aeabi_dadd+0x348>
    5c10:	0001      	movs	r1, r0
    5c12:	0015      	movs	r5, r2
    5c14:	4664      	mov	r4, ip
    5c16:	469a      	mov	sl, r3
    5c18:	e5d7      	b.n	57ca <__aeabi_dadd+0x52>
    5c1a:	2c00      	cmp	r4, #0
    5c1c:	d139      	bne.n	5c92 <__aeabi_dadd+0x51a>
    5c1e:	000c      	movs	r4, r1
    5c20:	432c      	orrs	r4, r5
    5c22:	d06e      	beq.n	5d02 <__aeabi_dadd+0x58a>
    5c24:	43db      	mvns	r3, r3
    5c26:	2b00      	cmp	r3, #0
    5c28:	d01a      	beq.n	5c60 <__aeabi_dadd+0x4e8>
    5c2a:	4c67      	ldr	r4, [pc, #412]	; (5dc8 <__aeabi_dadd+0x650>)
    5c2c:	45a4      	cmp	ip, r4
    5c2e:	d068      	beq.n	5d02 <__aeabi_dadd+0x58a>
    5c30:	2b38      	cmp	r3, #56	; 0x38
    5c32:	dd00      	ble.n	5c36 <__aeabi_dadd+0x4be>
    5c34:	e0a4      	b.n	5d80 <__aeabi_dadd+0x608>
    5c36:	2b1f      	cmp	r3, #31
    5c38:	dd00      	ble.n	5c3c <__aeabi_dadd+0x4c4>
    5c3a:	e0ae      	b.n	5d9a <__aeabi_dadd+0x622>
    5c3c:	2420      	movs	r4, #32
    5c3e:	000f      	movs	r7, r1
    5c40:	1ae4      	subs	r4, r4, r3
    5c42:	40a7      	lsls	r7, r4
    5c44:	46b9      	mov	r9, r7
    5c46:	002f      	movs	r7, r5
    5c48:	40df      	lsrs	r7, r3
    5c4a:	46b8      	mov	r8, r7
    5c4c:	46a3      	mov	fp, r4
    5c4e:	464f      	mov	r7, r9
    5c50:	4644      	mov	r4, r8
    5c52:	4327      	orrs	r7, r4
    5c54:	465c      	mov	r4, fp
    5c56:	40a5      	lsls	r5, r4
    5c58:	1e6c      	subs	r4, r5, #1
    5c5a:	41a5      	sbcs	r5, r4
    5c5c:	40d9      	lsrs	r1, r3
    5c5e:	433d      	orrs	r5, r7
    5c60:	18ad      	adds	r5, r5, r2
    5c62:	4295      	cmp	r5, r2
    5c64:	419b      	sbcs	r3, r3
    5c66:	1809      	adds	r1, r1, r0
    5c68:	425b      	negs	r3, r3
    5c6a:	1859      	adds	r1, r3, r1
    5c6c:	4664      	mov	r4, ip
    5c6e:	e66b      	b.n	5948 <__aeabi_dadd+0x1d0>
    5c70:	000c      	movs	r4, r1
    5c72:	432c      	orrs	r4, r5
    5c74:	d115      	bne.n	5ca2 <__aeabi_dadd+0x52a>
    5c76:	0001      	movs	r1, r0
    5c78:	4311      	orrs	r1, r2
    5c7a:	d07b      	beq.n	5d74 <__aeabi_dadd+0x5fc>
    5c7c:	0001      	movs	r1, r0
    5c7e:	0015      	movs	r5, r2
    5c80:	469a      	mov	sl, r3
    5c82:	4c51      	ldr	r4, [pc, #324]	; (5dc8 <__aeabi_dadd+0x650>)
    5c84:	e5a1      	b.n	57ca <__aeabi_dadd+0x52>
    5c86:	430d      	orrs	r5, r1
    5c88:	1e69      	subs	r1, r5, #1
    5c8a:	418d      	sbcs	r5, r1
    5c8c:	2100      	movs	r1, #0
    5c8e:	b2ec      	uxtb	r4, r5
    5c90:	e72d      	b.n	5aee <__aeabi_dadd+0x376>
    5c92:	4c4d      	ldr	r4, [pc, #308]	; (5dc8 <__aeabi_dadd+0x650>)
    5c94:	45a4      	cmp	ip, r4
    5c96:	d034      	beq.n	5d02 <__aeabi_dadd+0x58a>
    5c98:	2480      	movs	r4, #128	; 0x80
    5c9a:	0424      	lsls	r4, r4, #16
    5c9c:	425b      	negs	r3, r3
    5c9e:	4321      	orrs	r1, r4
    5ca0:	e7c6      	b.n	5c30 <__aeabi_dadd+0x4b8>
    5ca2:	0004      	movs	r4, r0
    5ca4:	4314      	orrs	r4, r2
    5ca6:	d04e      	beq.n	5d46 <__aeabi_dadd+0x5ce>
    5ca8:	08ed      	lsrs	r5, r5, #3
    5caa:	074c      	lsls	r4, r1, #29
    5cac:	432c      	orrs	r4, r5
    5cae:	2580      	movs	r5, #128	; 0x80
    5cb0:	08c9      	lsrs	r1, r1, #3
    5cb2:	032d      	lsls	r5, r5, #12
    5cb4:	4229      	tst	r1, r5
    5cb6:	d008      	beq.n	5cca <__aeabi_dadd+0x552>
    5cb8:	08c6      	lsrs	r6, r0, #3
    5cba:	422e      	tst	r6, r5
    5cbc:	d105      	bne.n	5cca <__aeabi_dadd+0x552>
    5cbe:	08d2      	lsrs	r2, r2, #3
    5cc0:	0741      	lsls	r1, r0, #29
    5cc2:	4311      	orrs	r1, r2
    5cc4:	000c      	movs	r4, r1
    5cc6:	469a      	mov	sl, r3
    5cc8:	0031      	movs	r1, r6
    5cca:	0f62      	lsrs	r2, r4, #29
    5ccc:	00c9      	lsls	r1, r1, #3
    5cce:	00e5      	lsls	r5, r4, #3
    5cd0:	4311      	orrs	r1, r2
    5cd2:	4c3d      	ldr	r4, [pc, #244]	; (5dc8 <__aeabi_dadd+0x650>)
    5cd4:	e579      	b.n	57ca <__aeabi_dadd+0x52>
    5cd6:	0006      	movs	r6, r0
    5cd8:	4316      	orrs	r6, r2
    5cda:	d100      	bne.n	5cde <__aeabi_dadd+0x566>
    5cdc:	e575      	b.n	57ca <__aeabi_dadd+0x52>
    5cde:	1aae      	subs	r6, r5, r2
    5ce0:	46b0      	mov	r8, r6
    5ce2:	4545      	cmp	r5, r8
    5ce4:	41bf      	sbcs	r7, r7
    5ce6:	1a0e      	subs	r6, r1, r0
    5ce8:	427f      	negs	r7, r7
    5cea:	1bf6      	subs	r6, r6, r7
    5cec:	0237      	lsls	r7, r6, #8
    5cee:	d400      	bmi.n	5cf2 <__aeabi_dadd+0x57a>
    5cf0:	e5f4      	b.n	58dc <__aeabi_dadd+0x164>
    5cf2:	1b55      	subs	r5, r2, r5
    5cf4:	42aa      	cmp	r2, r5
    5cf6:	41b6      	sbcs	r6, r6
    5cf8:	1a41      	subs	r1, r0, r1
    5cfa:	4276      	negs	r6, r6
    5cfc:	1b89      	subs	r1, r1, r6
    5cfe:	469a      	mov	sl, r3
    5d00:	e563      	b.n	57ca <__aeabi_dadd+0x52>
    5d02:	0001      	movs	r1, r0
    5d04:	0015      	movs	r5, r2
    5d06:	4664      	mov	r4, ip
    5d08:	e55f      	b.n	57ca <__aeabi_dadd+0x52>
    5d0a:	2200      	movs	r2, #0
    5d0c:	2500      	movs	r5, #0
    5d0e:	e57b      	b.n	5808 <__aeabi_dadd+0x90>
    5d10:	2b00      	cmp	r3, #0
    5d12:	d03b      	beq.n	5d8c <__aeabi_dadd+0x614>
    5d14:	0003      	movs	r3, r0
    5d16:	4313      	orrs	r3, r2
    5d18:	d015      	beq.n	5d46 <__aeabi_dadd+0x5ce>
    5d1a:	08ed      	lsrs	r5, r5, #3
    5d1c:	074b      	lsls	r3, r1, #29
    5d1e:	432b      	orrs	r3, r5
    5d20:	2580      	movs	r5, #128	; 0x80
    5d22:	08c9      	lsrs	r1, r1, #3
    5d24:	032d      	lsls	r5, r5, #12
    5d26:	4229      	tst	r1, r5
    5d28:	d007      	beq.n	5d3a <__aeabi_dadd+0x5c2>
    5d2a:	08c4      	lsrs	r4, r0, #3
    5d2c:	422c      	tst	r4, r5
    5d2e:	d104      	bne.n	5d3a <__aeabi_dadd+0x5c2>
    5d30:	0741      	lsls	r1, r0, #29
    5d32:	000b      	movs	r3, r1
    5d34:	0021      	movs	r1, r4
    5d36:	08d2      	lsrs	r2, r2, #3
    5d38:	4313      	orrs	r3, r2
    5d3a:	00c9      	lsls	r1, r1, #3
    5d3c:	0f5a      	lsrs	r2, r3, #29
    5d3e:	4311      	orrs	r1, r2
    5d40:	00dd      	lsls	r5, r3, #3
    5d42:	4c21      	ldr	r4, [pc, #132]	; (5dc8 <__aeabi_dadd+0x650>)
    5d44:	e541      	b.n	57ca <__aeabi_dadd+0x52>
    5d46:	4c20      	ldr	r4, [pc, #128]	; (5dc8 <__aeabi_dadd+0x650>)
    5d48:	e53f      	b.n	57ca <__aeabi_dadd+0x52>
    5d4a:	2000      	movs	r0, #0
    5d4c:	e754      	b.n	5bf8 <__aeabi_dadd+0x480>
    5d4e:	2600      	movs	r6, #0
    5d50:	2500      	movs	r5, #0
    5d52:	e5d1      	b.n	58f8 <__aeabi_dadd+0x180>
    5d54:	0034      	movs	r4, r6
    5d56:	000f      	movs	r7, r1
    5d58:	3c20      	subs	r4, #32
    5d5a:	40e7      	lsrs	r7, r4
    5d5c:	003c      	movs	r4, r7
    5d5e:	2e20      	cmp	r6, #32
    5d60:	d02b      	beq.n	5dba <__aeabi_dadd+0x642>
    5d62:	2740      	movs	r7, #64	; 0x40
    5d64:	1bbe      	subs	r6, r7, r6
    5d66:	40b1      	lsls	r1, r6
    5d68:	430d      	orrs	r5, r1
    5d6a:	1e69      	subs	r1, r5, #1
    5d6c:	418d      	sbcs	r5, r1
    5d6e:	2100      	movs	r1, #0
    5d70:	432c      	orrs	r4, r5
    5d72:	e6bc      	b.n	5aee <__aeabi_dadd+0x376>
    5d74:	2180      	movs	r1, #128	; 0x80
    5d76:	2600      	movs	r6, #0
    5d78:	0309      	lsls	r1, r1, #12
    5d7a:	4c13      	ldr	r4, [pc, #76]	; (5dc8 <__aeabi_dadd+0x650>)
    5d7c:	2500      	movs	r5, #0
    5d7e:	e5bb      	b.n	58f8 <__aeabi_dadd+0x180>
    5d80:	430d      	orrs	r5, r1
    5d82:	1e69      	subs	r1, r5, #1
    5d84:	418d      	sbcs	r5, r1
    5d86:	2100      	movs	r1, #0
    5d88:	b2ed      	uxtb	r5, r5
    5d8a:	e769      	b.n	5c60 <__aeabi_dadd+0x4e8>
    5d8c:	0001      	movs	r1, r0
    5d8e:	0015      	movs	r5, r2
    5d90:	4c0d      	ldr	r4, [pc, #52]	; (5dc8 <__aeabi_dadd+0x650>)
    5d92:	e51a      	b.n	57ca <__aeabi_dadd+0x52>
    5d94:	0001      	movs	r1, r0
    5d96:	0015      	movs	r5, r2
    5d98:	e517      	b.n	57ca <__aeabi_dadd+0x52>
    5d9a:	001c      	movs	r4, r3
    5d9c:	000f      	movs	r7, r1
    5d9e:	3c20      	subs	r4, #32
    5da0:	40e7      	lsrs	r7, r4
    5da2:	003c      	movs	r4, r7
    5da4:	2b20      	cmp	r3, #32
    5da6:	d00c      	beq.n	5dc2 <__aeabi_dadd+0x64a>
    5da8:	2740      	movs	r7, #64	; 0x40
    5daa:	1afb      	subs	r3, r7, r3
    5dac:	4099      	lsls	r1, r3
    5dae:	430d      	orrs	r5, r1
    5db0:	1e69      	subs	r1, r5, #1
    5db2:	418d      	sbcs	r5, r1
    5db4:	2100      	movs	r1, #0
    5db6:	4325      	orrs	r5, r4
    5db8:	e752      	b.n	5c60 <__aeabi_dadd+0x4e8>
    5dba:	2100      	movs	r1, #0
    5dbc:	e7d4      	b.n	5d68 <__aeabi_dadd+0x5f0>
    5dbe:	001d      	movs	r5, r3
    5dc0:	e592      	b.n	58e8 <__aeabi_dadd+0x170>
    5dc2:	2100      	movs	r1, #0
    5dc4:	e7f3      	b.n	5dae <__aeabi_dadd+0x636>
    5dc6:	46c0      	nop			; (mov r8, r8)
    5dc8:	000007ff 	.word	0x000007ff
    5dcc:	ff7fffff 	.word	0xff7fffff

00005dd0 <__aeabi_ddiv>:
    5dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dd2:	4656      	mov	r6, sl
    5dd4:	464d      	mov	r5, r9
    5dd6:	4644      	mov	r4, r8
    5dd8:	465f      	mov	r7, fp
    5dda:	b4f0      	push	{r4, r5, r6, r7}
    5ddc:	001d      	movs	r5, r3
    5dde:	030e      	lsls	r6, r1, #12
    5de0:	004c      	lsls	r4, r1, #1
    5de2:	0fcb      	lsrs	r3, r1, #31
    5de4:	b087      	sub	sp, #28
    5de6:	0007      	movs	r7, r0
    5de8:	4692      	mov	sl, r2
    5dea:	4681      	mov	r9, r0
    5dec:	0b36      	lsrs	r6, r6, #12
    5dee:	0d64      	lsrs	r4, r4, #21
    5df0:	4698      	mov	r8, r3
    5df2:	d06a      	beq.n	5eca <__aeabi_ddiv+0xfa>
    5df4:	4b6d      	ldr	r3, [pc, #436]	; (5fac <__aeabi_ddiv+0x1dc>)
    5df6:	429c      	cmp	r4, r3
    5df8:	d035      	beq.n	5e66 <__aeabi_ddiv+0x96>
    5dfa:	2280      	movs	r2, #128	; 0x80
    5dfc:	0f43      	lsrs	r3, r0, #29
    5dfe:	0412      	lsls	r2, r2, #16
    5e00:	4313      	orrs	r3, r2
    5e02:	00f6      	lsls	r6, r6, #3
    5e04:	431e      	orrs	r6, r3
    5e06:	00c3      	lsls	r3, r0, #3
    5e08:	4699      	mov	r9, r3
    5e0a:	4b69      	ldr	r3, [pc, #420]	; (5fb0 <__aeabi_ddiv+0x1e0>)
    5e0c:	2700      	movs	r7, #0
    5e0e:	469c      	mov	ip, r3
    5e10:	2300      	movs	r3, #0
    5e12:	4464      	add	r4, ip
    5e14:	9302      	str	r3, [sp, #8]
    5e16:	032b      	lsls	r3, r5, #12
    5e18:	0068      	lsls	r0, r5, #1
    5e1a:	0b1b      	lsrs	r3, r3, #12
    5e1c:	0fed      	lsrs	r5, r5, #31
    5e1e:	4651      	mov	r1, sl
    5e20:	469b      	mov	fp, r3
    5e22:	0d40      	lsrs	r0, r0, #21
    5e24:	9500      	str	r5, [sp, #0]
    5e26:	d100      	bne.n	5e2a <__aeabi_ddiv+0x5a>
    5e28:	e078      	b.n	5f1c <__aeabi_ddiv+0x14c>
    5e2a:	4b60      	ldr	r3, [pc, #384]	; (5fac <__aeabi_ddiv+0x1dc>)
    5e2c:	4298      	cmp	r0, r3
    5e2e:	d06c      	beq.n	5f0a <__aeabi_ddiv+0x13a>
    5e30:	465b      	mov	r3, fp
    5e32:	00da      	lsls	r2, r3, #3
    5e34:	0f4b      	lsrs	r3, r1, #29
    5e36:	2180      	movs	r1, #128	; 0x80
    5e38:	0409      	lsls	r1, r1, #16
    5e3a:	430b      	orrs	r3, r1
    5e3c:	4313      	orrs	r3, r2
    5e3e:	469b      	mov	fp, r3
    5e40:	4653      	mov	r3, sl
    5e42:	00d9      	lsls	r1, r3, #3
    5e44:	4b5a      	ldr	r3, [pc, #360]	; (5fb0 <__aeabi_ddiv+0x1e0>)
    5e46:	469c      	mov	ip, r3
    5e48:	2300      	movs	r3, #0
    5e4a:	4460      	add	r0, ip
    5e4c:	4642      	mov	r2, r8
    5e4e:	1a20      	subs	r0, r4, r0
    5e50:	406a      	eors	r2, r5
    5e52:	4692      	mov	sl, r2
    5e54:	9001      	str	r0, [sp, #4]
    5e56:	431f      	orrs	r7, r3
    5e58:	2f0f      	cmp	r7, #15
    5e5a:	d900      	bls.n	5e5e <__aeabi_ddiv+0x8e>
    5e5c:	e0b0      	b.n	5fc0 <__aeabi_ddiv+0x1f0>
    5e5e:	4855      	ldr	r0, [pc, #340]	; (5fb4 <__aeabi_ddiv+0x1e4>)
    5e60:	00bf      	lsls	r7, r7, #2
    5e62:	59c0      	ldr	r0, [r0, r7]
    5e64:	4687      	mov	pc, r0
    5e66:	4337      	orrs	r7, r6
    5e68:	d000      	beq.n	5e6c <__aeabi_ddiv+0x9c>
    5e6a:	e088      	b.n	5f7e <__aeabi_ddiv+0x1ae>
    5e6c:	2300      	movs	r3, #0
    5e6e:	4699      	mov	r9, r3
    5e70:	3302      	adds	r3, #2
    5e72:	2708      	movs	r7, #8
    5e74:	2600      	movs	r6, #0
    5e76:	9302      	str	r3, [sp, #8]
    5e78:	e7cd      	b.n	5e16 <__aeabi_ddiv+0x46>
    5e7a:	4643      	mov	r3, r8
    5e7c:	46b3      	mov	fp, r6
    5e7e:	4649      	mov	r1, r9
    5e80:	9300      	str	r3, [sp, #0]
    5e82:	9b02      	ldr	r3, [sp, #8]
    5e84:	9a00      	ldr	r2, [sp, #0]
    5e86:	4692      	mov	sl, r2
    5e88:	2b02      	cmp	r3, #2
    5e8a:	d000      	beq.n	5e8e <__aeabi_ddiv+0xbe>
    5e8c:	e1bf      	b.n	620e <__aeabi_ddiv+0x43e>
    5e8e:	2100      	movs	r1, #0
    5e90:	4653      	mov	r3, sl
    5e92:	2201      	movs	r2, #1
    5e94:	2600      	movs	r6, #0
    5e96:	4689      	mov	r9, r1
    5e98:	401a      	ands	r2, r3
    5e9a:	4b44      	ldr	r3, [pc, #272]	; (5fac <__aeabi_ddiv+0x1dc>)
    5e9c:	2100      	movs	r1, #0
    5e9e:	0336      	lsls	r6, r6, #12
    5ea0:	0d0c      	lsrs	r4, r1, #20
    5ea2:	0524      	lsls	r4, r4, #20
    5ea4:	0b36      	lsrs	r6, r6, #12
    5ea6:	4326      	orrs	r6, r4
    5ea8:	4c43      	ldr	r4, [pc, #268]	; (5fb8 <__aeabi_ddiv+0x1e8>)
    5eaa:	051b      	lsls	r3, r3, #20
    5eac:	4026      	ands	r6, r4
    5eae:	431e      	orrs	r6, r3
    5eb0:	0076      	lsls	r6, r6, #1
    5eb2:	07d2      	lsls	r2, r2, #31
    5eb4:	0876      	lsrs	r6, r6, #1
    5eb6:	4316      	orrs	r6, r2
    5eb8:	4648      	mov	r0, r9
    5eba:	0031      	movs	r1, r6
    5ebc:	b007      	add	sp, #28
    5ebe:	bc3c      	pop	{r2, r3, r4, r5}
    5ec0:	4690      	mov	r8, r2
    5ec2:	4699      	mov	r9, r3
    5ec4:	46a2      	mov	sl, r4
    5ec6:	46ab      	mov	fp, r5
    5ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5eca:	0033      	movs	r3, r6
    5ecc:	4303      	orrs	r3, r0
    5ece:	d04f      	beq.n	5f70 <__aeabi_ddiv+0x1a0>
    5ed0:	2e00      	cmp	r6, #0
    5ed2:	d100      	bne.n	5ed6 <__aeabi_ddiv+0x106>
    5ed4:	e1bc      	b.n	6250 <__aeabi_ddiv+0x480>
    5ed6:	0030      	movs	r0, r6
    5ed8:	f001 f8cc 	bl	7074 <__clzsi2>
    5edc:	0003      	movs	r3, r0
    5ede:	3b0b      	subs	r3, #11
    5ee0:	2b1c      	cmp	r3, #28
    5ee2:	dd00      	ble.n	5ee6 <__aeabi_ddiv+0x116>
    5ee4:	e1ad      	b.n	6242 <__aeabi_ddiv+0x472>
    5ee6:	221d      	movs	r2, #29
    5ee8:	0001      	movs	r1, r0
    5eea:	1ad3      	subs	r3, r2, r3
    5eec:	3908      	subs	r1, #8
    5eee:	003a      	movs	r2, r7
    5ef0:	408f      	lsls	r7, r1
    5ef2:	408e      	lsls	r6, r1
    5ef4:	40da      	lsrs	r2, r3
    5ef6:	46b9      	mov	r9, r7
    5ef8:	4316      	orrs	r6, r2
    5efa:	4b30      	ldr	r3, [pc, #192]	; (5fbc <__aeabi_ddiv+0x1ec>)
    5efc:	2700      	movs	r7, #0
    5efe:	469c      	mov	ip, r3
    5f00:	2300      	movs	r3, #0
    5f02:	4460      	add	r0, ip
    5f04:	4244      	negs	r4, r0
    5f06:	9302      	str	r3, [sp, #8]
    5f08:	e785      	b.n	5e16 <__aeabi_ddiv+0x46>
    5f0a:	4653      	mov	r3, sl
    5f0c:	465a      	mov	r2, fp
    5f0e:	4313      	orrs	r3, r2
    5f10:	d12c      	bne.n	5f6c <__aeabi_ddiv+0x19c>
    5f12:	2300      	movs	r3, #0
    5f14:	2100      	movs	r1, #0
    5f16:	469b      	mov	fp, r3
    5f18:	3302      	adds	r3, #2
    5f1a:	e797      	b.n	5e4c <__aeabi_ddiv+0x7c>
    5f1c:	430b      	orrs	r3, r1
    5f1e:	d020      	beq.n	5f62 <__aeabi_ddiv+0x192>
    5f20:	465b      	mov	r3, fp
    5f22:	2b00      	cmp	r3, #0
    5f24:	d100      	bne.n	5f28 <__aeabi_ddiv+0x158>
    5f26:	e19e      	b.n	6266 <__aeabi_ddiv+0x496>
    5f28:	4658      	mov	r0, fp
    5f2a:	f001 f8a3 	bl	7074 <__clzsi2>
    5f2e:	0003      	movs	r3, r0
    5f30:	3b0b      	subs	r3, #11
    5f32:	2b1c      	cmp	r3, #28
    5f34:	dd00      	ble.n	5f38 <__aeabi_ddiv+0x168>
    5f36:	e18f      	b.n	6258 <__aeabi_ddiv+0x488>
    5f38:	0002      	movs	r2, r0
    5f3a:	4659      	mov	r1, fp
    5f3c:	3a08      	subs	r2, #8
    5f3e:	4091      	lsls	r1, r2
    5f40:	468b      	mov	fp, r1
    5f42:	211d      	movs	r1, #29
    5f44:	1acb      	subs	r3, r1, r3
    5f46:	4651      	mov	r1, sl
    5f48:	40d9      	lsrs	r1, r3
    5f4a:	000b      	movs	r3, r1
    5f4c:	4659      	mov	r1, fp
    5f4e:	430b      	orrs	r3, r1
    5f50:	4651      	mov	r1, sl
    5f52:	469b      	mov	fp, r3
    5f54:	4091      	lsls	r1, r2
    5f56:	4b19      	ldr	r3, [pc, #100]	; (5fbc <__aeabi_ddiv+0x1ec>)
    5f58:	469c      	mov	ip, r3
    5f5a:	4460      	add	r0, ip
    5f5c:	4240      	negs	r0, r0
    5f5e:	2300      	movs	r3, #0
    5f60:	e774      	b.n	5e4c <__aeabi_ddiv+0x7c>
    5f62:	2300      	movs	r3, #0
    5f64:	2100      	movs	r1, #0
    5f66:	469b      	mov	fp, r3
    5f68:	3301      	adds	r3, #1
    5f6a:	e76f      	b.n	5e4c <__aeabi_ddiv+0x7c>
    5f6c:	2303      	movs	r3, #3
    5f6e:	e76d      	b.n	5e4c <__aeabi_ddiv+0x7c>
    5f70:	2300      	movs	r3, #0
    5f72:	4699      	mov	r9, r3
    5f74:	3301      	adds	r3, #1
    5f76:	2704      	movs	r7, #4
    5f78:	2600      	movs	r6, #0
    5f7a:	9302      	str	r3, [sp, #8]
    5f7c:	e74b      	b.n	5e16 <__aeabi_ddiv+0x46>
    5f7e:	2303      	movs	r3, #3
    5f80:	270c      	movs	r7, #12
    5f82:	9302      	str	r3, [sp, #8]
    5f84:	e747      	b.n	5e16 <__aeabi_ddiv+0x46>
    5f86:	2201      	movs	r2, #1
    5f88:	1ad5      	subs	r5, r2, r3
    5f8a:	2d38      	cmp	r5, #56	; 0x38
    5f8c:	dc00      	bgt.n	5f90 <__aeabi_ddiv+0x1c0>
    5f8e:	e1b0      	b.n	62f2 <__aeabi_ddiv+0x522>
    5f90:	4653      	mov	r3, sl
    5f92:	401a      	ands	r2, r3
    5f94:	2100      	movs	r1, #0
    5f96:	2300      	movs	r3, #0
    5f98:	2600      	movs	r6, #0
    5f9a:	4689      	mov	r9, r1
    5f9c:	e77e      	b.n	5e9c <__aeabi_ddiv+0xcc>
    5f9e:	2300      	movs	r3, #0
    5fa0:	2680      	movs	r6, #128	; 0x80
    5fa2:	4699      	mov	r9, r3
    5fa4:	2200      	movs	r2, #0
    5fa6:	0336      	lsls	r6, r6, #12
    5fa8:	4b00      	ldr	r3, [pc, #0]	; (5fac <__aeabi_ddiv+0x1dc>)
    5faa:	e777      	b.n	5e9c <__aeabi_ddiv+0xcc>
    5fac:	000007ff 	.word	0x000007ff
    5fb0:	fffffc01 	.word	0xfffffc01
    5fb4:	0000877c 	.word	0x0000877c
    5fb8:	800fffff 	.word	0x800fffff
    5fbc:	000003f3 	.word	0x000003f3
    5fc0:	455e      	cmp	r6, fp
    5fc2:	d900      	bls.n	5fc6 <__aeabi_ddiv+0x1f6>
    5fc4:	e172      	b.n	62ac <__aeabi_ddiv+0x4dc>
    5fc6:	d100      	bne.n	5fca <__aeabi_ddiv+0x1fa>
    5fc8:	e16d      	b.n	62a6 <__aeabi_ddiv+0x4d6>
    5fca:	9b01      	ldr	r3, [sp, #4]
    5fcc:	464d      	mov	r5, r9
    5fce:	3b01      	subs	r3, #1
    5fd0:	9301      	str	r3, [sp, #4]
    5fd2:	2300      	movs	r3, #0
    5fd4:	0034      	movs	r4, r6
    5fd6:	9302      	str	r3, [sp, #8]
    5fd8:	465b      	mov	r3, fp
    5fda:	021e      	lsls	r6, r3, #8
    5fdc:	0e0b      	lsrs	r3, r1, #24
    5fde:	431e      	orrs	r6, r3
    5fe0:	020b      	lsls	r3, r1, #8
    5fe2:	9303      	str	r3, [sp, #12]
    5fe4:	0c33      	lsrs	r3, r6, #16
    5fe6:	4699      	mov	r9, r3
    5fe8:	0433      	lsls	r3, r6, #16
    5fea:	0c1b      	lsrs	r3, r3, #16
    5fec:	4649      	mov	r1, r9
    5fee:	0020      	movs	r0, r4
    5ff0:	9300      	str	r3, [sp, #0]
    5ff2:	f7ff f93f 	bl	5274 <__aeabi_uidiv>
    5ff6:	9b00      	ldr	r3, [sp, #0]
    5ff8:	0037      	movs	r7, r6
    5ffa:	4343      	muls	r3, r0
    5ffc:	0006      	movs	r6, r0
    5ffe:	4649      	mov	r1, r9
    6000:	0020      	movs	r0, r4
    6002:	4698      	mov	r8, r3
    6004:	f7ff f9bc 	bl	5380 <__aeabi_uidivmod>
    6008:	0c2c      	lsrs	r4, r5, #16
    600a:	0409      	lsls	r1, r1, #16
    600c:	430c      	orrs	r4, r1
    600e:	45a0      	cmp	r8, r4
    6010:	d909      	bls.n	6026 <__aeabi_ddiv+0x256>
    6012:	19e4      	adds	r4, r4, r7
    6014:	1e73      	subs	r3, r6, #1
    6016:	42a7      	cmp	r7, r4
    6018:	d900      	bls.n	601c <__aeabi_ddiv+0x24c>
    601a:	e15c      	b.n	62d6 <__aeabi_ddiv+0x506>
    601c:	45a0      	cmp	r8, r4
    601e:	d800      	bhi.n	6022 <__aeabi_ddiv+0x252>
    6020:	e159      	b.n	62d6 <__aeabi_ddiv+0x506>
    6022:	3e02      	subs	r6, #2
    6024:	19e4      	adds	r4, r4, r7
    6026:	4643      	mov	r3, r8
    6028:	1ae4      	subs	r4, r4, r3
    602a:	4649      	mov	r1, r9
    602c:	0020      	movs	r0, r4
    602e:	f7ff f921 	bl	5274 <__aeabi_uidiv>
    6032:	0003      	movs	r3, r0
    6034:	9a00      	ldr	r2, [sp, #0]
    6036:	4680      	mov	r8, r0
    6038:	4353      	muls	r3, r2
    603a:	4649      	mov	r1, r9
    603c:	0020      	movs	r0, r4
    603e:	469b      	mov	fp, r3
    6040:	f7ff f99e 	bl	5380 <__aeabi_uidivmod>
    6044:	042a      	lsls	r2, r5, #16
    6046:	0409      	lsls	r1, r1, #16
    6048:	0c12      	lsrs	r2, r2, #16
    604a:	430a      	orrs	r2, r1
    604c:	4593      	cmp	fp, r2
    604e:	d90d      	bls.n	606c <__aeabi_ddiv+0x29c>
    6050:	4643      	mov	r3, r8
    6052:	19d2      	adds	r2, r2, r7
    6054:	3b01      	subs	r3, #1
    6056:	4297      	cmp	r7, r2
    6058:	d900      	bls.n	605c <__aeabi_ddiv+0x28c>
    605a:	e13a      	b.n	62d2 <__aeabi_ddiv+0x502>
    605c:	4593      	cmp	fp, r2
    605e:	d800      	bhi.n	6062 <__aeabi_ddiv+0x292>
    6060:	e137      	b.n	62d2 <__aeabi_ddiv+0x502>
    6062:	2302      	movs	r3, #2
    6064:	425b      	negs	r3, r3
    6066:	469c      	mov	ip, r3
    6068:	19d2      	adds	r2, r2, r7
    606a:	44e0      	add	r8, ip
    606c:	465b      	mov	r3, fp
    606e:	1ad2      	subs	r2, r2, r3
    6070:	4643      	mov	r3, r8
    6072:	0436      	lsls	r6, r6, #16
    6074:	4333      	orrs	r3, r6
    6076:	469b      	mov	fp, r3
    6078:	9903      	ldr	r1, [sp, #12]
    607a:	0c18      	lsrs	r0, r3, #16
    607c:	0c0b      	lsrs	r3, r1, #16
    607e:	001d      	movs	r5, r3
    6080:	9305      	str	r3, [sp, #20]
    6082:	0409      	lsls	r1, r1, #16
    6084:	465b      	mov	r3, fp
    6086:	0c09      	lsrs	r1, r1, #16
    6088:	000c      	movs	r4, r1
    608a:	041b      	lsls	r3, r3, #16
    608c:	0c1b      	lsrs	r3, r3, #16
    608e:	4344      	muls	r4, r0
    6090:	9104      	str	r1, [sp, #16]
    6092:	4359      	muls	r1, r3
    6094:	436b      	muls	r3, r5
    6096:	4368      	muls	r0, r5
    6098:	191b      	adds	r3, r3, r4
    609a:	0c0d      	lsrs	r5, r1, #16
    609c:	18eb      	adds	r3, r5, r3
    609e:	429c      	cmp	r4, r3
    60a0:	d903      	bls.n	60aa <__aeabi_ddiv+0x2da>
    60a2:	2480      	movs	r4, #128	; 0x80
    60a4:	0264      	lsls	r4, r4, #9
    60a6:	46a4      	mov	ip, r4
    60a8:	4460      	add	r0, ip
    60aa:	0c1c      	lsrs	r4, r3, #16
    60ac:	0409      	lsls	r1, r1, #16
    60ae:	041b      	lsls	r3, r3, #16
    60b0:	0c09      	lsrs	r1, r1, #16
    60b2:	1820      	adds	r0, r4, r0
    60b4:	185d      	adds	r5, r3, r1
    60b6:	4282      	cmp	r2, r0
    60b8:	d200      	bcs.n	60bc <__aeabi_ddiv+0x2ec>
    60ba:	e0de      	b.n	627a <__aeabi_ddiv+0x4aa>
    60bc:	d100      	bne.n	60c0 <__aeabi_ddiv+0x2f0>
    60be:	e0d7      	b.n	6270 <__aeabi_ddiv+0x4a0>
    60c0:	1a16      	subs	r6, r2, r0
    60c2:	9b02      	ldr	r3, [sp, #8]
    60c4:	469c      	mov	ip, r3
    60c6:	1b5d      	subs	r5, r3, r5
    60c8:	45ac      	cmp	ip, r5
    60ca:	419b      	sbcs	r3, r3
    60cc:	425b      	negs	r3, r3
    60ce:	1af6      	subs	r6, r6, r3
    60d0:	42b7      	cmp	r7, r6
    60d2:	d100      	bne.n	60d6 <__aeabi_ddiv+0x306>
    60d4:	e106      	b.n	62e4 <__aeabi_ddiv+0x514>
    60d6:	4649      	mov	r1, r9
    60d8:	0030      	movs	r0, r6
    60da:	f7ff f8cb 	bl	5274 <__aeabi_uidiv>
    60de:	9b00      	ldr	r3, [sp, #0]
    60e0:	0004      	movs	r4, r0
    60e2:	4343      	muls	r3, r0
    60e4:	4649      	mov	r1, r9
    60e6:	0030      	movs	r0, r6
    60e8:	4698      	mov	r8, r3
    60ea:	f7ff f949 	bl	5380 <__aeabi_uidivmod>
    60ee:	0c2e      	lsrs	r6, r5, #16
    60f0:	0409      	lsls	r1, r1, #16
    60f2:	430e      	orrs	r6, r1
    60f4:	45b0      	cmp	r8, r6
    60f6:	d909      	bls.n	610c <__aeabi_ddiv+0x33c>
    60f8:	19f6      	adds	r6, r6, r7
    60fa:	1e63      	subs	r3, r4, #1
    60fc:	42b7      	cmp	r7, r6
    60fe:	d900      	bls.n	6102 <__aeabi_ddiv+0x332>
    6100:	e0f3      	b.n	62ea <__aeabi_ddiv+0x51a>
    6102:	45b0      	cmp	r8, r6
    6104:	d800      	bhi.n	6108 <__aeabi_ddiv+0x338>
    6106:	e0f0      	b.n	62ea <__aeabi_ddiv+0x51a>
    6108:	3c02      	subs	r4, #2
    610a:	19f6      	adds	r6, r6, r7
    610c:	4643      	mov	r3, r8
    610e:	1af3      	subs	r3, r6, r3
    6110:	4649      	mov	r1, r9
    6112:	0018      	movs	r0, r3
    6114:	9302      	str	r3, [sp, #8]
    6116:	f7ff f8ad 	bl	5274 <__aeabi_uidiv>
    611a:	9b00      	ldr	r3, [sp, #0]
    611c:	0006      	movs	r6, r0
    611e:	4343      	muls	r3, r0
    6120:	4649      	mov	r1, r9
    6122:	9802      	ldr	r0, [sp, #8]
    6124:	4698      	mov	r8, r3
    6126:	f7ff f92b 	bl	5380 <__aeabi_uidivmod>
    612a:	042d      	lsls	r5, r5, #16
    612c:	0409      	lsls	r1, r1, #16
    612e:	0c2d      	lsrs	r5, r5, #16
    6130:	430d      	orrs	r5, r1
    6132:	45a8      	cmp	r8, r5
    6134:	d909      	bls.n	614a <__aeabi_ddiv+0x37a>
    6136:	19ed      	adds	r5, r5, r7
    6138:	1e73      	subs	r3, r6, #1
    613a:	42af      	cmp	r7, r5
    613c:	d900      	bls.n	6140 <__aeabi_ddiv+0x370>
    613e:	e0d6      	b.n	62ee <__aeabi_ddiv+0x51e>
    6140:	45a8      	cmp	r8, r5
    6142:	d800      	bhi.n	6146 <__aeabi_ddiv+0x376>
    6144:	e0d3      	b.n	62ee <__aeabi_ddiv+0x51e>
    6146:	3e02      	subs	r6, #2
    6148:	19ed      	adds	r5, r5, r7
    614a:	0424      	lsls	r4, r4, #16
    614c:	0021      	movs	r1, r4
    614e:	4643      	mov	r3, r8
    6150:	4331      	orrs	r1, r6
    6152:	9e04      	ldr	r6, [sp, #16]
    6154:	9a05      	ldr	r2, [sp, #20]
    6156:	0030      	movs	r0, r6
    6158:	1aed      	subs	r5, r5, r3
    615a:	040b      	lsls	r3, r1, #16
    615c:	0c0c      	lsrs	r4, r1, #16
    615e:	0c1b      	lsrs	r3, r3, #16
    6160:	4358      	muls	r0, r3
    6162:	4366      	muls	r6, r4
    6164:	4353      	muls	r3, r2
    6166:	4354      	muls	r4, r2
    6168:	199a      	adds	r2, r3, r6
    616a:	0c03      	lsrs	r3, r0, #16
    616c:	189b      	adds	r3, r3, r2
    616e:	429e      	cmp	r6, r3
    6170:	d903      	bls.n	617a <__aeabi_ddiv+0x3aa>
    6172:	2280      	movs	r2, #128	; 0x80
    6174:	0252      	lsls	r2, r2, #9
    6176:	4694      	mov	ip, r2
    6178:	4464      	add	r4, ip
    617a:	0c1a      	lsrs	r2, r3, #16
    617c:	0400      	lsls	r0, r0, #16
    617e:	041b      	lsls	r3, r3, #16
    6180:	0c00      	lsrs	r0, r0, #16
    6182:	1914      	adds	r4, r2, r4
    6184:	181b      	adds	r3, r3, r0
    6186:	42a5      	cmp	r5, r4
    6188:	d350      	bcc.n	622c <__aeabi_ddiv+0x45c>
    618a:	d04d      	beq.n	6228 <__aeabi_ddiv+0x458>
    618c:	2301      	movs	r3, #1
    618e:	4319      	orrs	r1, r3
    6190:	4a96      	ldr	r2, [pc, #600]	; (63ec <__aeabi_ddiv+0x61c>)
    6192:	9b01      	ldr	r3, [sp, #4]
    6194:	4694      	mov	ip, r2
    6196:	4463      	add	r3, ip
    6198:	2b00      	cmp	r3, #0
    619a:	dc00      	bgt.n	619e <__aeabi_ddiv+0x3ce>
    619c:	e6f3      	b.n	5f86 <__aeabi_ddiv+0x1b6>
    619e:	074a      	lsls	r2, r1, #29
    61a0:	d009      	beq.n	61b6 <__aeabi_ddiv+0x3e6>
    61a2:	220f      	movs	r2, #15
    61a4:	400a      	ands	r2, r1
    61a6:	2a04      	cmp	r2, #4
    61a8:	d005      	beq.n	61b6 <__aeabi_ddiv+0x3e6>
    61aa:	1d0a      	adds	r2, r1, #4
    61ac:	428a      	cmp	r2, r1
    61ae:	4189      	sbcs	r1, r1
    61b0:	4249      	negs	r1, r1
    61b2:	448b      	add	fp, r1
    61b4:	0011      	movs	r1, r2
    61b6:	465a      	mov	r2, fp
    61b8:	01d2      	lsls	r2, r2, #7
    61ba:	d508      	bpl.n	61ce <__aeabi_ddiv+0x3fe>
    61bc:	465a      	mov	r2, fp
    61be:	4b8c      	ldr	r3, [pc, #560]	; (63f0 <__aeabi_ddiv+0x620>)
    61c0:	401a      	ands	r2, r3
    61c2:	4693      	mov	fp, r2
    61c4:	2280      	movs	r2, #128	; 0x80
    61c6:	00d2      	lsls	r2, r2, #3
    61c8:	4694      	mov	ip, r2
    61ca:	9b01      	ldr	r3, [sp, #4]
    61cc:	4463      	add	r3, ip
    61ce:	4a89      	ldr	r2, [pc, #548]	; (63f4 <__aeabi_ddiv+0x624>)
    61d0:	4293      	cmp	r3, r2
    61d2:	dd00      	ble.n	61d6 <__aeabi_ddiv+0x406>
    61d4:	e65b      	b.n	5e8e <__aeabi_ddiv+0xbe>
    61d6:	465a      	mov	r2, fp
    61d8:	08c9      	lsrs	r1, r1, #3
    61da:	0750      	lsls	r0, r2, #29
    61dc:	4308      	orrs	r0, r1
    61de:	0256      	lsls	r6, r2, #9
    61e0:	4651      	mov	r1, sl
    61e2:	2201      	movs	r2, #1
    61e4:	055b      	lsls	r3, r3, #21
    61e6:	4681      	mov	r9, r0
    61e8:	0b36      	lsrs	r6, r6, #12
    61ea:	0d5b      	lsrs	r3, r3, #21
    61ec:	400a      	ands	r2, r1
    61ee:	e655      	b.n	5e9c <__aeabi_ddiv+0xcc>
    61f0:	2380      	movs	r3, #128	; 0x80
    61f2:	031b      	lsls	r3, r3, #12
    61f4:	421e      	tst	r6, r3
    61f6:	d011      	beq.n	621c <__aeabi_ddiv+0x44c>
    61f8:	465a      	mov	r2, fp
    61fa:	421a      	tst	r2, r3
    61fc:	d10e      	bne.n	621c <__aeabi_ddiv+0x44c>
    61fe:	465e      	mov	r6, fp
    6200:	431e      	orrs	r6, r3
    6202:	0336      	lsls	r6, r6, #12
    6204:	0b36      	lsrs	r6, r6, #12
    6206:	002a      	movs	r2, r5
    6208:	4689      	mov	r9, r1
    620a:	4b7b      	ldr	r3, [pc, #492]	; (63f8 <__aeabi_ddiv+0x628>)
    620c:	e646      	b.n	5e9c <__aeabi_ddiv+0xcc>
    620e:	2b03      	cmp	r3, #3
    6210:	d100      	bne.n	6214 <__aeabi_ddiv+0x444>
    6212:	e0e1      	b.n	63d8 <__aeabi_ddiv+0x608>
    6214:	2b01      	cmp	r3, #1
    6216:	d1bb      	bne.n	6190 <__aeabi_ddiv+0x3c0>
    6218:	401a      	ands	r2, r3
    621a:	e6bb      	b.n	5f94 <__aeabi_ddiv+0x1c4>
    621c:	431e      	orrs	r6, r3
    621e:	0336      	lsls	r6, r6, #12
    6220:	0b36      	lsrs	r6, r6, #12
    6222:	4642      	mov	r2, r8
    6224:	4b74      	ldr	r3, [pc, #464]	; (63f8 <__aeabi_ddiv+0x628>)
    6226:	e639      	b.n	5e9c <__aeabi_ddiv+0xcc>
    6228:	2b00      	cmp	r3, #0
    622a:	d0b1      	beq.n	6190 <__aeabi_ddiv+0x3c0>
    622c:	197d      	adds	r5, r7, r5
    622e:	1e4a      	subs	r2, r1, #1
    6230:	42af      	cmp	r7, r5
    6232:	d952      	bls.n	62da <__aeabi_ddiv+0x50a>
    6234:	0011      	movs	r1, r2
    6236:	42a5      	cmp	r5, r4
    6238:	d1a8      	bne.n	618c <__aeabi_ddiv+0x3bc>
    623a:	9a03      	ldr	r2, [sp, #12]
    623c:	429a      	cmp	r2, r3
    623e:	d1a5      	bne.n	618c <__aeabi_ddiv+0x3bc>
    6240:	e7a6      	b.n	6190 <__aeabi_ddiv+0x3c0>
    6242:	0003      	movs	r3, r0
    6244:	003e      	movs	r6, r7
    6246:	3b28      	subs	r3, #40	; 0x28
    6248:	409e      	lsls	r6, r3
    624a:	2300      	movs	r3, #0
    624c:	4699      	mov	r9, r3
    624e:	e654      	b.n	5efa <__aeabi_ddiv+0x12a>
    6250:	f000 ff10 	bl	7074 <__clzsi2>
    6254:	3020      	adds	r0, #32
    6256:	e641      	b.n	5edc <__aeabi_ddiv+0x10c>
    6258:	0003      	movs	r3, r0
    625a:	4652      	mov	r2, sl
    625c:	3b28      	subs	r3, #40	; 0x28
    625e:	409a      	lsls	r2, r3
    6260:	2100      	movs	r1, #0
    6262:	4693      	mov	fp, r2
    6264:	e677      	b.n	5f56 <__aeabi_ddiv+0x186>
    6266:	4650      	mov	r0, sl
    6268:	f000 ff04 	bl	7074 <__clzsi2>
    626c:	3020      	adds	r0, #32
    626e:	e65e      	b.n	5f2e <__aeabi_ddiv+0x15e>
    6270:	9b02      	ldr	r3, [sp, #8]
    6272:	2600      	movs	r6, #0
    6274:	42ab      	cmp	r3, r5
    6276:	d300      	bcc.n	627a <__aeabi_ddiv+0x4aa>
    6278:	e723      	b.n	60c2 <__aeabi_ddiv+0x2f2>
    627a:	9e03      	ldr	r6, [sp, #12]
    627c:	9902      	ldr	r1, [sp, #8]
    627e:	46b4      	mov	ip, r6
    6280:	4461      	add	r1, ip
    6282:	4688      	mov	r8, r1
    6284:	45b0      	cmp	r8, r6
    6286:	41b6      	sbcs	r6, r6
    6288:	465b      	mov	r3, fp
    628a:	4276      	negs	r6, r6
    628c:	19f6      	adds	r6, r6, r7
    628e:	18b2      	adds	r2, r6, r2
    6290:	3b01      	subs	r3, #1
    6292:	9102      	str	r1, [sp, #8]
    6294:	4297      	cmp	r7, r2
    6296:	d213      	bcs.n	62c0 <__aeabi_ddiv+0x4f0>
    6298:	4290      	cmp	r0, r2
    629a:	d84f      	bhi.n	633c <__aeabi_ddiv+0x56c>
    629c:	d100      	bne.n	62a0 <__aeabi_ddiv+0x4d0>
    629e:	e08e      	b.n	63be <__aeabi_ddiv+0x5ee>
    62a0:	1a16      	subs	r6, r2, r0
    62a2:	469b      	mov	fp, r3
    62a4:	e70d      	b.n	60c2 <__aeabi_ddiv+0x2f2>
    62a6:	4589      	cmp	r9, r1
    62a8:	d200      	bcs.n	62ac <__aeabi_ddiv+0x4dc>
    62aa:	e68e      	b.n	5fca <__aeabi_ddiv+0x1fa>
    62ac:	0874      	lsrs	r4, r6, #1
    62ae:	464b      	mov	r3, r9
    62b0:	07f6      	lsls	r6, r6, #31
    62b2:	0035      	movs	r5, r6
    62b4:	085b      	lsrs	r3, r3, #1
    62b6:	431d      	orrs	r5, r3
    62b8:	464b      	mov	r3, r9
    62ba:	07db      	lsls	r3, r3, #31
    62bc:	9302      	str	r3, [sp, #8]
    62be:	e68b      	b.n	5fd8 <__aeabi_ddiv+0x208>
    62c0:	4297      	cmp	r7, r2
    62c2:	d1ed      	bne.n	62a0 <__aeabi_ddiv+0x4d0>
    62c4:	9903      	ldr	r1, [sp, #12]
    62c6:	9c02      	ldr	r4, [sp, #8]
    62c8:	42a1      	cmp	r1, r4
    62ca:	d9e5      	bls.n	6298 <__aeabi_ddiv+0x4c8>
    62cc:	1a3e      	subs	r6, r7, r0
    62ce:	469b      	mov	fp, r3
    62d0:	e6f7      	b.n	60c2 <__aeabi_ddiv+0x2f2>
    62d2:	4698      	mov	r8, r3
    62d4:	e6ca      	b.n	606c <__aeabi_ddiv+0x29c>
    62d6:	001e      	movs	r6, r3
    62d8:	e6a5      	b.n	6026 <__aeabi_ddiv+0x256>
    62da:	42ac      	cmp	r4, r5
    62dc:	d83e      	bhi.n	635c <__aeabi_ddiv+0x58c>
    62de:	d074      	beq.n	63ca <__aeabi_ddiv+0x5fa>
    62e0:	0011      	movs	r1, r2
    62e2:	e753      	b.n	618c <__aeabi_ddiv+0x3bc>
    62e4:	2101      	movs	r1, #1
    62e6:	4249      	negs	r1, r1
    62e8:	e752      	b.n	6190 <__aeabi_ddiv+0x3c0>
    62ea:	001c      	movs	r4, r3
    62ec:	e70e      	b.n	610c <__aeabi_ddiv+0x33c>
    62ee:	001e      	movs	r6, r3
    62f0:	e72b      	b.n	614a <__aeabi_ddiv+0x37a>
    62f2:	2d1f      	cmp	r5, #31
    62f4:	dc3c      	bgt.n	6370 <__aeabi_ddiv+0x5a0>
    62f6:	2320      	movs	r3, #32
    62f8:	000a      	movs	r2, r1
    62fa:	4658      	mov	r0, fp
    62fc:	1b5b      	subs	r3, r3, r5
    62fe:	4098      	lsls	r0, r3
    6300:	40ea      	lsrs	r2, r5
    6302:	4099      	lsls	r1, r3
    6304:	4302      	orrs	r2, r0
    6306:	1e48      	subs	r0, r1, #1
    6308:	4181      	sbcs	r1, r0
    630a:	465e      	mov	r6, fp
    630c:	4311      	orrs	r1, r2
    630e:	40ee      	lsrs	r6, r5
    6310:	074b      	lsls	r3, r1, #29
    6312:	d009      	beq.n	6328 <__aeabi_ddiv+0x558>
    6314:	230f      	movs	r3, #15
    6316:	400b      	ands	r3, r1
    6318:	2b04      	cmp	r3, #4
    631a:	d005      	beq.n	6328 <__aeabi_ddiv+0x558>
    631c:	000b      	movs	r3, r1
    631e:	1d19      	adds	r1, r3, #4
    6320:	4299      	cmp	r1, r3
    6322:	419b      	sbcs	r3, r3
    6324:	425b      	negs	r3, r3
    6326:	18f6      	adds	r6, r6, r3
    6328:	0233      	lsls	r3, r6, #8
    632a:	d53c      	bpl.n	63a6 <__aeabi_ddiv+0x5d6>
    632c:	4653      	mov	r3, sl
    632e:	2201      	movs	r2, #1
    6330:	2100      	movs	r1, #0
    6332:	401a      	ands	r2, r3
    6334:	2600      	movs	r6, #0
    6336:	2301      	movs	r3, #1
    6338:	4689      	mov	r9, r1
    633a:	e5af      	b.n	5e9c <__aeabi_ddiv+0xcc>
    633c:	2302      	movs	r3, #2
    633e:	425b      	negs	r3, r3
    6340:	469c      	mov	ip, r3
    6342:	9c03      	ldr	r4, [sp, #12]
    6344:	44e3      	add	fp, ip
    6346:	46a4      	mov	ip, r4
    6348:	9b02      	ldr	r3, [sp, #8]
    634a:	4463      	add	r3, ip
    634c:	4698      	mov	r8, r3
    634e:	45a0      	cmp	r8, r4
    6350:	41b6      	sbcs	r6, r6
    6352:	4276      	negs	r6, r6
    6354:	19f6      	adds	r6, r6, r7
    6356:	9302      	str	r3, [sp, #8]
    6358:	18b2      	adds	r2, r6, r2
    635a:	e6b1      	b.n	60c0 <__aeabi_ddiv+0x2f0>
    635c:	9803      	ldr	r0, [sp, #12]
    635e:	1e8a      	subs	r2, r1, #2
    6360:	0041      	lsls	r1, r0, #1
    6362:	4281      	cmp	r1, r0
    6364:	41b6      	sbcs	r6, r6
    6366:	4276      	negs	r6, r6
    6368:	19f6      	adds	r6, r6, r7
    636a:	19ad      	adds	r5, r5, r6
    636c:	9103      	str	r1, [sp, #12]
    636e:	e761      	b.n	6234 <__aeabi_ddiv+0x464>
    6370:	221f      	movs	r2, #31
    6372:	4252      	negs	r2, r2
    6374:	1ad3      	subs	r3, r2, r3
    6376:	465a      	mov	r2, fp
    6378:	40da      	lsrs	r2, r3
    637a:	0013      	movs	r3, r2
    637c:	2d20      	cmp	r5, #32
    637e:	d029      	beq.n	63d4 <__aeabi_ddiv+0x604>
    6380:	2240      	movs	r2, #64	; 0x40
    6382:	4658      	mov	r0, fp
    6384:	1b55      	subs	r5, r2, r5
    6386:	40a8      	lsls	r0, r5
    6388:	4301      	orrs	r1, r0
    638a:	1e48      	subs	r0, r1, #1
    638c:	4181      	sbcs	r1, r0
    638e:	2007      	movs	r0, #7
    6390:	430b      	orrs	r3, r1
    6392:	4018      	ands	r0, r3
    6394:	2600      	movs	r6, #0
    6396:	2800      	cmp	r0, #0
    6398:	d009      	beq.n	63ae <__aeabi_ddiv+0x5de>
    639a:	220f      	movs	r2, #15
    639c:	2600      	movs	r6, #0
    639e:	401a      	ands	r2, r3
    63a0:	0019      	movs	r1, r3
    63a2:	2a04      	cmp	r2, #4
    63a4:	d1bb      	bne.n	631e <__aeabi_ddiv+0x54e>
    63a6:	000b      	movs	r3, r1
    63a8:	0770      	lsls	r0, r6, #29
    63aa:	0276      	lsls	r6, r6, #9
    63ac:	0b36      	lsrs	r6, r6, #12
    63ae:	08db      	lsrs	r3, r3, #3
    63b0:	4303      	orrs	r3, r0
    63b2:	4699      	mov	r9, r3
    63b4:	2201      	movs	r2, #1
    63b6:	4653      	mov	r3, sl
    63b8:	401a      	ands	r2, r3
    63ba:	2300      	movs	r3, #0
    63bc:	e56e      	b.n	5e9c <__aeabi_ddiv+0xcc>
    63be:	9902      	ldr	r1, [sp, #8]
    63c0:	428d      	cmp	r5, r1
    63c2:	d8bb      	bhi.n	633c <__aeabi_ddiv+0x56c>
    63c4:	469b      	mov	fp, r3
    63c6:	2600      	movs	r6, #0
    63c8:	e67b      	b.n	60c2 <__aeabi_ddiv+0x2f2>
    63ca:	9803      	ldr	r0, [sp, #12]
    63cc:	4298      	cmp	r0, r3
    63ce:	d3c5      	bcc.n	635c <__aeabi_ddiv+0x58c>
    63d0:	0011      	movs	r1, r2
    63d2:	e732      	b.n	623a <__aeabi_ddiv+0x46a>
    63d4:	2000      	movs	r0, #0
    63d6:	e7d7      	b.n	6388 <__aeabi_ddiv+0x5b8>
    63d8:	2680      	movs	r6, #128	; 0x80
    63da:	465b      	mov	r3, fp
    63dc:	0336      	lsls	r6, r6, #12
    63de:	431e      	orrs	r6, r3
    63e0:	0336      	lsls	r6, r6, #12
    63e2:	0b36      	lsrs	r6, r6, #12
    63e4:	9a00      	ldr	r2, [sp, #0]
    63e6:	4689      	mov	r9, r1
    63e8:	4b03      	ldr	r3, [pc, #12]	; (63f8 <__aeabi_ddiv+0x628>)
    63ea:	e557      	b.n	5e9c <__aeabi_ddiv+0xcc>
    63ec:	000003ff 	.word	0x000003ff
    63f0:	feffffff 	.word	0xfeffffff
    63f4:	000007fe 	.word	0x000007fe
    63f8:	000007ff 	.word	0x000007ff

000063fc <__aeabi_dmul>:
    63fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    63fe:	465f      	mov	r7, fp
    6400:	4656      	mov	r6, sl
    6402:	464d      	mov	r5, r9
    6404:	4644      	mov	r4, r8
    6406:	b4f0      	push	{r4, r5, r6, r7}
    6408:	030d      	lsls	r5, r1, #12
    640a:	4699      	mov	r9, r3
    640c:	004e      	lsls	r6, r1, #1
    640e:	0b2b      	lsrs	r3, r5, #12
    6410:	b087      	sub	sp, #28
    6412:	0007      	movs	r7, r0
    6414:	4692      	mov	sl, r2
    6416:	4680      	mov	r8, r0
    6418:	469b      	mov	fp, r3
    641a:	0d76      	lsrs	r6, r6, #21
    641c:	0fcc      	lsrs	r4, r1, #31
    641e:	2e00      	cmp	r6, #0
    6420:	d069      	beq.n	64f6 <__aeabi_dmul+0xfa>
    6422:	4b6d      	ldr	r3, [pc, #436]	; (65d8 <__aeabi_dmul+0x1dc>)
    6424:	429e      	cmp	r6, r3
    6426:	d035      	beq.n	6494 <__aeabi_dmul+0x98>
    6428:	465b      	mov	r3, fp
    642a:	2280      	movs	r2, #128	; 0x80
    642c:	00dd      	lsls	r5, r3, #3
    642e:	0412      	lsls	r2, r2, #16
    6430:	0f43      	lsrs	r3, r0, #29
    6432:	4313      	orrs	r3, r2
    6434:	432b      	orrs	r3, r5
    6436:	469b      	mov	fp, r3
    6438:	00c3      	lsls	r3, r0, #3
    643a:	4698      	mov	r8, r3
    643c:	4b67      	ldr	r3, [pc, #412]	; (65dc <__aeabi_dmul+0x1e0>)
    643e:	2700      	movs	r7, #0
    6440:	469c      	mov	ip, r3
    6442:	2300      	movs	r3, #0
    6444:	4466      	add	r6, ip
    6446:	9301      	str	r3, [sp, #4]
    6448:	464a      	mov	r2, r9
    644a:	0315      	lsls	r5, r2, #12
    644c:	0050      	lsls	r0, r2, #1
    644e:	0fd2      	lsrs	r2, r2, #31
    6450:	4653      	mov	r3, sl
    6452:	0b2d      	lsrs	r5, r5, #12
    6454:	0d40      	lsrs	r0, r0, #21
    6456:	4691      	mov	r9, r2
    6458:	d100      	bne.n	645c <__aeabi_dmul+0x60>
    645a:	e076      	b.n	654a <__aeabi_dmul+0x14e>
    645c:	4a5e      	ldr	r2, [pc, #376]	; (65d8 <__aeabi_dmul+0x1dc>)
    645e:	4290      	cmp	r0, r2
    6460:	d06c      	beq.n	653c <__aeabi_dmul+0x140>
    6462:	2280      	movs	r2, #128	; 0x80
    6464:	0f5b      	lsrs	r3, r3, #29
    6466:	0412      	lsls	r2, r2, #16
    6468:	4313      	orrs	r3, r2
    646a:	4a5c      	ldr	r2, [pc, #368]	; (65dc <__aeabi_dmul+0x1e0>)
    646c:	00ed      	lsls	r5, r5, #3
    646e:	4694      	mov	ip, r2
    6470:	431d      	orrs	r5, r3
    6472:	4653      	mov	r3, sl
    6474:	2200      	movs	r2, #0
    6476:	00db      	lsls	r3, r3, #3
    6478:	4460      	add	r0, ip
    647a:	4649      	mov	r1, r9
    647c:	1836      	adds	r6, r6, r0
    647e:	1c70      	adds	r0, r6, #1
    6480:	4061      	eors	r1, r4
    6482:	9002      	str	r0, [sp, #8]
    6484:	4317      	orrs	r7, r2
    6486:	2f0f      	cmp	r7, #15
    6488:	d900      	bls.n	648c <__aeabi_dmul+0x90>
    648a:	e0af      	b.n	65ec <__aeabi_dmul+0x1f0>
    648c:	4854      	ldr	r0, [pc, #336]	; (65e0 <__aeabi_dmul+0x1e4>)
    648e:	00bf      	lsls	r7, r7, #2
    6490:	59c7      	ldr	r7, [r0, r7]
    6492:	46bf      	mov	pc, r7
    6494:	465b      	mov	r3, fp
    6496:	431f      	orrs	r7, r3
    6498:	d000      	beq.n	649c <__aeabi_dmul+0xa0>
    649a:	e088      	b.n	65ae <__aeabi_dmul+0x1b2>
    649c:	2300      	movs	r3, #0
    649e:	469b      	mov	fp, r3
    64a0:	4698      	mov	r8, r3
    64a2:	3302      	adds	r3, #2
    64a4:	2708      	movs	r7, #8
    64a6:	9301      	str	r3, [sp, #4]
    64a8:	e7ce      	b.n	6448 <__aeabi_dmul+0x4c>
    64aa:	4649      	mov	r1, r9
    64ac:	2a02      	cmp	r2, #2
    64ae:	d06a      	beq.n	6586 <__aeabi_dmul+0x18a>
    64b0:	2a03      	cmp	r2, #3
    64b2:	d100      	bne.n	64b6 <__aeabi_dmul+0xba>
    64b4:	e209      	b.n	68ca <__aeabi_dmul+0x4ce>
    64b6:	2a01      	cmp	r2, #1
    64b8:	d000      	beq.n	64bc <__aeabi_dmul+0xc0>
    64ba:	e1bb      	b.n	6834 <__aeabi_dmul+0x438>
    64bc:	4011      	ands	r1, r2
    64be:	2200      	movs	r2, #0
    64c0:	2300      	movs	r3, #0
    64c2:	2500      	movs	r5, #0
    64c4:	4690      	mov	r8, r2
    64c6:	b2cc      	uxtb	r4, r1
    64c8:	2100      	movs	r1, #0
    64ca:	032d      	lsls	r5, r5, #12
    64cc:	0d0a      	lsrs	r2, r1, #20
    64ce:	0512      	lsls	r2, r2, #20
    64d0:	0b2d      	lsrs	r5, r5, #12
    64d2:	4315      	orrs	r5, r2
    64d4:	4a43      	ldr	r2, [pc, #268]	; (65e4 <__aeabi_dmul+0x1e8>)
    64d6:	051b      	lsls	r3, r3, #20
    64d8:	4015      	ands	r5, r2
    64da:	431d      	orrs	r5, r3
    64dc:	006d      	lsls	r5, r5, #1
    64de:	07e4      	lsls	r4, r4, #31
    64e0:	086d      	lsrs	r5, r5, #1
    64e2:	4325      	orrs	r5, r4
    64e4:	4640      	mov	r0, r8
    64e6:	0029      	movs	r1, r5
    64e8:	b007      	add	sp, #28
    64ea:	bc3c      	pop	{r2, r3, r4, r5}
    64ec:	4690      	mov	r8, r2
    64ee:	4699      	mov	r9, r3
    64f0:	46a2      	mov	sl, r4
    64f2:	46ab      	mov	fp, r5
    64f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64f6:	4303      	orrs	r3, r0
    64f8:	d052      	beq.n	65a0 <__aeabi_dmul+0x1a4>
    64fa:	465b      	mov	r3, fp
    64fc:	2b00      	cmp	r3, #0
    64fe:	d100      	bne.n	6502 <__aeabi_dmul+0x106>
    6500:	e18a      	b.n	6818 <__aeabi_dmul+0x41c>
    6502:	4658      	mov	r0, fp
    6504:	f000 fdb6 	bl	7074 <__clzsi2>
    6508:	0003      	movs	r3, r0
    650a:	3b0b      	subs	r3, #11
    650c:	2b1c      	cmp	r3, #28
    650e:	dd00      	ble.n	6512 <__aeabi_dmul+0x116>
    6510:	e17b      	b.n	680a <__aeabi_dmul+0x40e>
    6512:	221d      	movs	r2, #29
    6514:	1ad3      	subs	r3, r2, r3
    6516:	003a      	movs	r2, r7
    6518:	0001      	movs	r1, r0
    651a:	465d      	mov	r5, fp
    651c:	40da      	lsrs	r2, r3
    651e:	3908      	subs	r1, #8
    6520:	408d      	lsls	r5, r1
    6522:	0013      	movs	r3, r2
    6524:	408f      	lsls	r7, r1
    6526:	432b      	orrs	r3, r5
    6528:	469b      	mov	fp, r3
    652a:	46b8      	mov	r8, r7
    652c:	4b2e      	ldr	r3, [pc, #184]	; (65e8 <__aeabi_dmul+0x1ec>)
    652e:	2700      	movs	r7, #0
    6530:	469c      	mov	ip, r3
    6532:	2300      	movs	r3, #0
    6534:	4460      	add	r0, ip
    6536:	4246      	negs	r6, r0
    6538:	9301      	str	r3, [sp, #4]
    653a:	e785      	b.n	6448 <__aeabi_dmul+0x4c>
    653c:	4652      	mov	r2, sl
    653e:	432a      	orrs	r2, r5
    6540:	d12c      	bne.n	659c <__aeabi_dmul+0x1a0>
    6542:	2500      	movs	r5, #0
    6544:	2300      	movs	r3, #0
    6546:	2202      	movs	r2, #2
    6548:	e797      	b.n	647a <__aeabi_dmul+0x7e>
    654a:	4652      	mov	r2, sl
    654c:	432a      	orrs	r2, r5
    654e:	d021      	beq.n	6594 <__aeabi_dmul+0x198>
    6550:	2d00      	cmp	r5, #0
    6552:	d100      	bne.n	6556 <__aeabi_dmul+0x15a>
    6554:	e154      	b.n	6800 <__aeabi_dmul+0x404>
    6556:	0028      	movs	r0, r5
    6558:	f000 fd8c 	bl	7074 <__clzsi2>
    655c:	0003      	movs	r3, r0
    655e:	3b0b      	subs	r3, #11
    6560:	2b1c      	cmp	r3, #28
    6562:	dd00      	ble.n	6566 <__aeabi_dmul+0x16a>
    6564:	e146      	b.n	67f4 <__aeabi_dmul+0x3f8>
    6566:	211d      	movs	r1, #29
    6568:	1acb      	subs	r3, r1, r3
    656a:	4651      	mov	r1, sl
    656c:	0002      	movs	r2, r0
    656e:	40d9      	lsrs	r1, r3
    6570:	4653      	mov	r3, sl
    6572:	3a08      	subs	r2, #8
    6574:	4095      	lsls	r5, r2
    6576:	4093      	lsls	r3, r2
    6578:	430d      	orrs	r5, r1
    657a:	4a1b      	ldr	r2, [pc, #108]	; (65e8 <__aeabi_dmul+0x1ec>)
    657c:	4694      	mov	ip, r2
    657e:	4460      	add	r0, ip
    6580:	4240      	negs	r0, r0
    6582:	2200      	movs	r2, #0
    6584:	e779      	b.n	647a <__aeabi_dmul+0x7e>
    6586:	2401      	movs	r4, #1
    6588:	2200      	movs	r2, #0
    658a:	400c      	ands	r4, r1
    658c:	4b12      	ldr	r3, [pc, #72]	; (65d8 <__aeabi_dmul+0x1dc>)
    658e:	2500      	movs	r5, #0
    6590:	4690      	mov	r8, r2
    6592:	e799      	b.n	64c8 <__aeabi_dmul+0xcc>
    6594:	2500      	movs	r5, #0
    6596:	2300      	movs	r3, #0
    6598:	2201      	movs	r2, #1
    659a:	e76e      	b.n	647a <__aeabi_dmul+0x7e>
    659c:	2203      	movs	r2, #3
    659e:	e76c      	b.n	647a <__aeabi_dmul+0x7e>
    65a0:	2300      	movs	r3, #0
    65a2:	469b      	mov	fp, r3
    65a4:	4698      	mov	r8, r3
    65a6:	3301      	adds	r3, #1
    65a8:	2704      	movs	r7, #4
    65aa:	9301      	str	r3, [sp, #4]
    65ac:	e74c      	b.n	6448 <__aeabi_dmul+0x4c>
    65ae:	2303      	movs	r3, #3
    65b0:	270c      	movs	r7, #12
    65b2:	9301      	str	r3, [sp, #4]
    65b4:	e748      	b.n	6448 <__aeabi_dmul+0x4c>
    65b6:	2300      	movs	r3, #0
    65b8:	2580      	movs	r5, #128	; 0x80
    65ba:	4698      	mov	r8, r3
    65bc:	2400      	movs	r4, #0
    65be:	032d      	lsls	r5, r5, #12
    65c0:	4b05      	ldr	r3, [pc, #20]	; (65d8 <__aeabi_dmul+0x1dc>)
    65c2:	e781      	b.n	64c8 <__aeabi_dmul+0xcc>
    65c4:	465d      	mov	r5, fp
    65c6:	4643      	mov	r3, r8
    65c8:	9a01      	ldr	r2, [sp, #4]
    65ca:	e76f      	b.n	64ac <__aeabi_dmul+0xb0>
    65cc:	465d      	mov	r5, fp
    65ce:	4643      	mov	r3, r8
    65d0:	0021      	movs	r1, r4
    65d2:	9a01      	ldr	r2, [sp, #4]
    65d4:	e76a      	b.n	64ac <__aeabi_dmul+0xb0>
    65d6:	46c0      	nop			; (mov r8, r8)
    65d8:	000007ff 	.word	0x000007ff
    65dc:	fffffc01 	.word	0xfffffc01
    65e0:	000087bc 	.word	0x000087bc
    65e4:	800fffff 	.word	0x800fffff
    65e8:	000003f3 	.word	0x000003f3
    65ec:	4642      	mov	r2, r8
    65ee:	0c12      	lsrs	r2, r2, #16
    65f0:	4691      	mov	r9, r2
    65f2:	0c1a      	lsrs	r2, r3, #16
    65f4:	4694      	mov	ip, r2
    65f6:	4642      	mov	r2, r8
    65f8:	0417      	lsls	r7, r2, #16
    65fa:	464a      	mov	r2, r9
    65fc:	041b      	lsls	r3, r3, #16
    65fe:	0c1b      	lsrs	r3, r3, #16
    6600:	435a      	muls	r2, r3
    6602:	4660      	mov	r0, ip
    6604:	4690      	mov	r8, r2
    6606:	464a      	mov	r2, r9
    6608:	4342      	muls	r2, r0
    660a:	0010      	movs	r0, r2
    660c:	9203      	str	r2, [sp, #12]
    660e:	4662      	mov	r2, ip
    6610:	001c      	movs	r4, r3
    6612:	0c3f      	lsrs	r7, r7, #16
    6614:	437a      	muls	r2, r7
    6616:	437c      	muls	r4, r7
    6618:	4442      	add	r2, r8
    661a:	9201      	str	r2, [sp, #4]
    661c:	0c22      	lsrs	r2, r4, #16
    661e:	4692      	mov	sl, r2
    6620:	9a01      	ldr	r2, [sp, #4]
    6622:	4452      	add	r2, sl
    6624:	4590      	cmp	r8, r2
    6626:	d906      	bls.n	6636 <__aeabi_dmul+0x23a>
    6628:	4682      	mov	sl, r0
    662a:	2080      	movs	r0, #128	; 0x80
    662c:	0240      	lsls	r0, r0, #9
    662e:	4680      	mov	r8, r0
    6630:	44c2      	add	sl, r8
    6632:	4650      	mov	r0, sl
    6634:	9003      	str	r0, [sp, #12]
    6636:	0c10      	lsrs	r0, r2, #16
    6638:	9004      	str	r0, [sp, #16]
    663a:	4648      	mov	r0, r9
    663c:	0424      	lsls	r4, r4, #16
    663e:	0c24      	lsrs	r4, r4, #16
    6640:	0412      	lsls	r2, r2, #16
    6642:	1912      	adds	r2, r2, r4
    6644:	9205      	str	r2, [sp, #20]
    6646:	0c2a      	lsrs	r2, r5, #16
    6648:	042d      	lsls	r5, r5, #16
    664a:	0c2d      	lsrs	r5, r5, #16
    664c:	4368      	muls	r0, r5
    664e:	002c      	movs	r4, r5
    6650:	4682      	mov	sl, r0
    6652:	4648      	mov	r0, r9
    6654:	437c      	muls	r4, r7
    6656:	4350      	muls	r0, r2
    6658:	4681      	mov	r9, r0
    665a:	0c20      	lsrs	r0, r4, #16
    665c:	4680      	mov	r8, r0
    665e:	4357      	muls	r7, r2
    6660:	4457      	add	r7, sl
    6662:	4447      	add	r7, r8
    6664:	45ba      	cmp	sl, r7
    6666:	d903      	bls.n	6670 <__aeabi_dmul+0x274>
    6668:	2080      	movs	r0, #128	; 0x80
    666a:	0240      	lsls	r0, r0, #9
    666c:	4680      	mov	r8, r0
    666e:	44c1      	add	r9, r8
    6670:	0c38      	lsrs	r0, r7, #16
    6672:	043f      	lsls	r7, r7, #16
    6674:	46b8      	mov	r8, r7
    6676:	4448      	add	r0, r9
    6678:	0424      	lsls	r4, r4, #16
    667a:	0c24      	lsrs	r4, r4, #16
    667c:	9001      	str	r0, [sp, #4]
    667e:	9804      	ldr	r0, [sp, #16]
    6680:	44a0      	add	r8, r4
    6682:	4440      	add	r0, r8
    6684:	9004      	str	r0, [sp, #16]
    6686:	4658      	mov	r0, fp
    6688:	0c00      	lsrs	r0, r0, #16
    668a:	4681      	mov	r9, r0
    668c:	4658      	mov	r0, fp
    668e:	0404      	lsls	r4, r0, #16
    6690:	0c20      	lsrs	r0, r4, #16
    6692:	4682      	mov	sl, r0
    6694:	0007      	movs	r7, r0
    6696:	4648      	mov	r0, r9
    6698:	435f      	muls	r7, r3
    669a:	464c      	mov	r4, r9
    669c:	4343      	muls	r3, r0
    669e:	4660      	mov	r0, ip
    66a0:	4360      	muls	r0, r4
    66a2:	4664      	mov	r4, ip
    66a4:	4683      	mov	fp, r0
    66a6:	4650      	mov	r0, sl
    66a8:	4344      	muls	r4, r0
    66aa:	0c38      	lsrs	r0, r7, #16
    66ac:	4684      	mov	ip, r0
    66ae:	18e4      	adds	r4, r4, r3
    66b0:	4464      	add	r4, ip
    66b2:	42a3      	cmp	r3, r4
    66b4:	d903      	bls.n	66be <__aeabi_dmul+0x2c2>
    66b6:	2380      	movs	r3, #128	; 0x80
    66b8:	025b      	lsls	r3, r3, #9
    66ba:	469c      	mov	ip, r3
    66bc:	44e3      	add	fp, ip
    66be:	4648      	mov	r0, r9
    66c0:	043f      	lsls	r7, r7, #16
    66c2:	0c23      	lsrs	r3, r4, #16
    66c4:	0c3f      	lsrs	r7, r7, #16
    66c6:	0424      	lsls	r4, r4, #16
    66c8:	19e4      	adds	r4, r4, r7
    66ca:	4657      	mov	r7, sl
    66cc:	4368      	muls	r0, r5
    66ce:	436f      	muls	r7, r5
    66d0:	4684      	mov	ip, r0
    66d2:	464d      	mov	r5, r9
    66d4:	4650      	mov	r0, sl
    66d6:	4355      	muls	r5, r2
    66d8:	4342      	muls	r2, r0
    66da:	0c38      	lsrs	r0, r7, #16
    66dc:	4681      	mov	r9, r0
    66de:	4462      	add	r2, ip
    66e0:	444a      	add	r2, r9
    66e2:	445b      	add	r3, fp
    66e4:	4594      	cmp	ip, r2
    66e6:	d903      	bls.n	66f0 <__aeabi_dmul+0x2f4>
    66e8:	2080      	movs	r0, #128	; 0x80
    66ea:	0240      	lsls	r0, r0, #9
    66ec:	4684      	mov	ip, r0
    66ee:	4465      	add	r5, ip
    66f0:	9803      	ldr	r0, [sp, #12]
    66f2:	043f      	lsls	r7, r7, #16
    66f4:	4683      	mov	fp, r0
    66f6:	9804      	ldr	r0, [sp, #16]
    66f8:	0c3f      	lsrs	r7, r7, #16
    66fa:	4684      	mov	ip, r0
    66fc:	44e3      	add	fp, ip
    66fe:	45c3      	cmp	fp, r8
    6700:	4180      	sbcs	r0, r0
    6702:	4240      	negs	r0, r0
    6704:	4682      	mov	sl, r0
    6706:	0410      	lsls	r0, r2, #16
    6708:	4684      	mov	ip, r0
    670a:	9801      	ldr	r0, [sp, #4]
    670c:	4467      	add	r7, ip
    670e:	4684      	mov	ip, r0
    6710:	4467      	add	r7, ip
    6712:	44a3      	add	fp, r4
    6714:	46bc      	mov	ip, r7
    6716:	45a3      	cmp	fp, r4
    6718:	41a4      	sbcs	r4, r4
    671a:	4699      	mov	r9, r3
    671c:	44d4      	add	ip, sl
    671e:	4264      	negs	r4, r4
    6720:	4287      	cmp	r7, r0
    6722:	41bf      	sbcs	r7, r7
    6724:	45d4      	cmp	ip, sl
    6726:	4180      	sbcs	r0, r0
    6728:	44e1      	add	r9, ip
    672a:	46a0      	mov	r8, r4
    672c:	4599      	cmp	r9, r3
    672e:	419b      	sbcs	r3, r3
    6730:	427f      	negs	r7, r7
    6732:	4240      	negs	r0, r0
    6734:	44c8      	add	r8, r9
    6736:	4307      	orrs	r7, r0
    6738:	0c12      	lsrs	r2, r2, #16
    673a:	18ba      	adds	r2, r7, r2
    673c:	45a0      	cmp	r8, r4
    673e:	41a4      	sbcs	r4, r4
    6740:	425f      	negs	r7, r3
    6742:	003b      	movs	r3, r7
    6744:	4264      	negs	r4, r4
    6746:	4323      	orrs	r3, r4
    6748:	18d7      	adds	r7, r2, r3
    674a:	4643      	mov	r3, r8
    674c:	197d      	adds	r5, r7, r5
    674e:	0ddb      	lsrs	r3, r3, #23
    6750:	026d      	lsls	r5, r5, #9
    6752:	431d      	orrs	r5, r3
    6754:	465b      	mov	r3, fp
    6756:	025a      	lsls	r2, r3, #9
    6758:	9b05      	ldr	r3, [sp, #20]
    675a:	431a      	orrs	r2, r3
    675c:	1e53      	subs	r3, r2, #1
    675e:	419a      	sbcs	r2, r3
    6760:	465b      	mov	r3, fp
    6762:	0ddb      	lsrs	r3, r3, #23
    6764:	431a      	orrs	r2, r3
    6766:	4643      	mov	r3, r8
    6768:	025b      	lsls	r3, r3, #9
    676a:	4313      	orrs	r3, r2
    676c:	01ea      	lsls	r2, r5, #7
    676e:	d507      	bpl.n	6780 <__aeabi_dmul+0x384>
    6770:	2201      	movs	r2, #1
    6772:	085c      	lsrs	r4, r3, #1
    6774:	4013      	ands	r3, r2
    6776:	4323      	orrs	r3, r4
    6778:	07ea      	lsls	r2, r5, #31
    677a:	9e02      	ldr	r6, [sp, #8]
    677c:	4313      	orrs	r3, r2
    677e:	086d      	lsrs	r5, r5, #1
    6780:	4a57      	ldr	r2, [pc, #348]	; (68e0 <__aeabi_dmul+0x4e4>)
    6782:	18b2      	adds	r2, r6, r2
    6784:	2a00      	cmp	r2, #0
    6786:	dd4b      	ble.n	6820 <__aeabi_dmul+0x424>
    6788:	0758      	lsls	r0, r3, #29
    678a:	d009      	beq.n	67a0 <__aeabi_dmul+0x3a4>
    678c:	200f      	movs	r0, #15
    678e:	4018      	ands	r0, r3
    6790:	2804      	cmp	r0, #4
    6792:	d005      	beq.n	67a0 <__aeabi_dmul+0x3a4>
    6794:	1d18      	adds	r0, r3, #4
    6796:	4298      	cmp	r0, r3
    6798:	419b      	sbcs	r3, r3
    679a:	425b      	negs	r3, r3
    679c:	18ed      	adds	r5, r5, r3
    679e:	0003      	movs	r3, r0
    67a0:	01e8      	lsls	r0, r5, #7
    67a2:	d504      	bpl.n	67ae <__aeabi_dmul+0x3b2>
    67a4:	4a4f      	ldr	r2, [pc, #316]	; (68e4 <__aeabi_dmul+0x4e8>)
    67a6:	4015      	ands	r5, r2
    67a8:	2280      	movs	r2, #128	; 0x80
    67aa:	00d2      	lsls	r2, r2, #3
    67ac:	18b2      	adds	r2, r6, r2
    67ae:	484e      	ldr	r0, [pc, #312]	; (68e8 <__aeabi_dmul+0x4ec>)
    67b0:	4282      	cmp	r2, r0
    67b2:	dd00      	ble.n	67b6 <__aeabi_dmul+0x3ba>
    67b4:	e6e7      	b.n	6586 <__aeabi_dmul+0x18a>
    67b6:	2401      	movs	r4, #1
    67b8:	08db      	lsrs	r3, r3, #3
    67ba:	0768      	lsls	r0, r5, #29
    67bc:	4318      	orrs	r0, r3
    67be:	026d      	lsls	r5, r5, #9
    67c0:	0553      	lsls	r3, r2, #21
    67c2:	4680      	mov	r8, r0
    67c4:	0b2d      	lsrs	r5, r5, #12
    67c6:	0d5b      	lsrs	r3, r3, #21
    67c8:	400c      	ands	r4, r1
    67ca:	e67d      	b.n	64c8 <__aeabi_dmul+0xcc>
    67cc:	2280      	movs	r2, #128	; 0x80
    67ce:	4659      	mov	r1, fp
    67d0:	0312      	lsls	r2, r2, #12
    67d2:	4211      	tst	r1, r2
    67d4:	d008      	beq.n	67e8 <__aeabi_dmul+0x3ec>
    67d6:	4215      	tst	r5, r2
    67d8:	d106      	bne.n	67e8 <__aeabi_dmul+0x3ec>
    67da:	4315      	orrs	r5, r2
    67dc:	032d      	lsls	r5, r5, #12
    67de:	4698      	mov	r8, r3
    67e0:	0b2d      	lsrs	r5, r5, #12
    67e2:	464c      	mov	r4, r9
    67e4:	4b41      	ldr	r3, [pc, #260]	; (68ec <__aeabi_dmul+0x4f0>)
    67e6:	e66f      	b.n	64c8 <__aeabi_dmul+0xcc>
    67e8:	465d      	mov	r5, fp
    67ea:	4315      	orrs	r5, r2
    67ec:	032d      	lsls	r5, r5, #12
    67ee:	0b2d      	lsrs	r5, r5, #12
    67f0:	4b3e      	ldr	r3, [pc, #248]	; (68ec <__aeabi_dmul+0x4f0>)
    67f2:	e669      	b.n	64c8 <__aeabi_dmul+0xcc>
    67f4:	0003      	movs	r3, r0
    67f6:	4655      	mov	r5, sl
    67f8:	3b28      	subs	r3, #40	; 0x28
    67fa:	409d      	lsls	r5, r3
    67fc:	2300      	movs	r3, #0
    67fe:	e6bc      	b.n	657a <__aeabi_dmul+0x17e>
    6800:	4650      	mov	r0, sl
    6802:	f000 fc37 	bl	7074 <__clzsi2>
    6806:	3020      	adds	r0, #32
    6808:	e6a8      	b.n	655c <__aeabi_dmul+0x160>
    680a:	0003      	movs	r3, r0
    680c:	3b28      	subs	r3, #40	; 0x28
    680e:	409f      	lsls	r7, r3
    6810:	2300      	movs	r3, #0
    6812:	46bb      	mov	fp, r7
    6814:	4698      	mov	r8, r3
    6816:	e689      	b.n	652c <__aeabi_dmul+0x130>
    6818:	f000 fc2c 	bl	7074 <__clzsi2>
    681c:	3020      	adds	r0, #32
    681e:	e673      	b.n	6508 <__aeabi_dmul+0x10c>
    6820:	2401      	movs	r4, #1
    6822:	1aa6      	subs	r6, r4, r2
    6824:	2e38      	cmp	r6, #56	; 0x38
    6826:	dd07      	ble.n	6838 <__aeabi_dmul+0x43c>
    6828:	2200      	movs	r2, #0
    682a:	400c      	ands	r4, r1
    682c:	2300      	movs	r3, #0
    682e:	2500      	movs	r5, #0
    6830:	4690      	mov	r8, r2
    6832:	e649      	b.n	64c8 <__aeabi_dmul+0xcc>
    6834:	9e02      	ldr	r6, [sp, #8]
    6836:	e7a3      	b.n	6780 <__aeabi_dmul+0x384>
    6838:	2e1f      	cmp	r6, #31
    683a:	dc20      	bgt.n	687e <__aeabi_dmul+0x482>
    683c:	2220      	movs	r2, #32
    683e:	002c      	movs	r4, r5
    6840:	0018      	movs	r0, r3
    6842:	1b92      	subs	r2, r2, r6
    6844:	40f0      	lsrs	r0, r6
    6846:	4094      	lsls	r4, r2
    6848:	4093      	lsls	r3, r2
    684a:	4304      	orrs	r4, r0
    684c:	1e58      	subs	r0, r3, #1
    684e:	4183      	sbcs	r3, r0
    6850:	431c      	orrs	r4, r3
    6852:	40f5      	lsrs	r5, r6
    6854:	0763      	lsls	r3, r4, #29
    6856:	d009      	beq.n	686c <__aeabi_dmul+0x470>
    6858:	230f      	movs	r3, #15
    685a:	4023      	ands	r3, r4
    685c:	2b04      	cmp	r3, #4
    685e:	d005      	beq.n	686c <__aeabi_dmul+0x470>
    6860:	0023      	movs	r3, r4
    6862:	1d1c      	adds	r4, r3, #4
    6864:	429c      	cmp	r4, r3
    6866:	4192      	sbcs	r2, r2
    6868:	4252      	negs	r2, r2
    686a:	18ad      	adds	r5, r5, r2
    686c:	022b      	lsls	r3, r5, #8
    686e:	d51f      	bpl.n	68b0 <__aeabi_dmul+0x4b4>
    6870:	2401      	movs	r4, #1
    6872:	2200      	movs	r2, #0
    6874:	400c      	ands	r4, r1
    6876:	2301      	movs	r3, #1
    6878:	2500      	movs	r5, #0
    687a:	4690      	mov	r8, r2
    687c:	e624      	b.n	64c8 <__aeabi_dmul+0xcc>
    687e:	201f      	movs	r0, #31
    6880:	002c      	movs	r4, r5
    6882:	4240      	negs	r0, r0
    6884:	1a82      	subs	r2, r0, r2
    6886:	40d4      	lsrs	r4, r2
    6888:	2e20      	cmp	r6, #32
    688a:	d01c      	beq.n	68c6 <__aeabi_dmul+0x4ca>
    688c:	2240      	movs	r2, #64	; 0x40
    688e:	1b96      	subs	r6, r2, r6
    6890:	40b5      	lsls	r5, r6
    6892:	432b      	orrs	r3, r5
    6894:	1e58      	subs	r0, r3, #1
    6896:	4183      	sbcs	r3, r0
    6898:	2007      	movs	r0, #7
    689a:	4323      	orrs	r3, r4
    689c:	4018      	ands	r0, r3
    689e:	2500      	movs	r5, #0
    68a0:	2800      	cmp	r0, #0
    68a2:	d009      	beq.n	68b8 <__aeabi_dmul+0x4bc>
    68a4:	220f      	movs	r2, #15
    68a6:	2500      	movs	r5, #0
    68a8:	401a      	ands	r2, r3
    68aa:	001c      	movs	r4, r3
    68ac:	2a04      	cmp	r2, #4
    68ae:	d1d8      	bne.n	6862 <__aeabi_dmul+0x466>
    68b0:	0023      	movs	r3, r4
    68b2:	0768      	lsls	r0, r5, #29
    68b4:	026d      	lsls	r5, r5, #9
    68b6:	0b2d      	lsrs	r5, r5, #12
    68b8:	2401      	movs	r4, #1
    68ba:	08db      	lsrs	r3, r3, #3
    68bc:	4303      	orrs	r3, r0
    68be:	4698      	mov	r8, r3
    68c0:	400c      	ands	r4, r1
    68c2:	2300      	movs	r3, #0
    68c4:	e600      	b.n	64c8 <__aeabi_dmul+0xcc>
    68c6:	2500      	movs	r5, #0
    68c8:	e7e3      	b.n	6892 <__aeabi_dmul+0x496>
    68ca:	2280      	movs	r2, #128	; 0x80
    68cc:	2401      	movs	r4, #1
    68ce:	0312      	lsls	r2, r2, #12
    68d0:	4315      	orrs	r5, r2
    68d2:	032d      	lsls	r5, r5, #12
    68d4:	4698      	mov	r8, r3
    68d6:	0b2d      	lsrs	r5, r5, #12
    68d8:	400c      	ands	r4, r1
    68da:	4b04      	ldr	r3, [pc, #16]	; (68ec <__aeabi_dmul+0x4f0>)
    68dc:	e5f4      	b.n	64c8 <__aeabi_dmul+0xcc>
    68de:	46c0      	nop			; (mov r8, r8)
    68e0:	000003ff 	.word	0x000003ff
    68e4:	feffffff 	.word	0xfeffffff
    68e8:	000007fe 	.word	0x000007fe
    68ec:	000007ff 	.word	0x000007ff

000068f0 <__aeabi_dsub>:
    68f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    68f2:	4657      	mov	r7, sl
    68f4:	464e      	mov	r6, r9
    68f6:	4645      	mov	r5, r8
    68f8:	b4e0      	push	{r5, r6, r7}
    68fa:	000e      	movs	r6, r1
    68fc:	0011      	movs	r1, r2
    68fe:	0ff2      	lsrs	r2, r6, #31
    6900:	4692      	mov	sl, r2
    6902:	00c5      	lsls	r5, r0, #3
    6904:	0f42      	lsrs	r2, r0, #29
    6906:	0318      	lsls	r0, r3, #12
    6908:	0337      	lsls	r7, r6, #12
    690a:	0074      	lsls	r4, r6, #1
    690c:	0a40      	lsrs	r0, r0, #9
    690e:	0f4e      	lsrs	r6, r1, #29
    6910:	0a7f      	lsrs	r7, r7, #9
    6912:	4330      	orrs	r0, r6
    6914:	4ecf      	ldr	r6, [pc, #828]	; (6c54 <__aeabi_dsub+0x364>)
    6916:	4317      	orrs	r7, r2
    6918:	005a      	lsls	r2, r3, #1
    691a:	0d64      	lsrs	r4, r4, #21
    691c:	0d52      	lsrs	r2, r2, #21
    691e:	0fdb      	lsrs	r3, r3, #31
    6920:	00c9      	lsls	r1, r1, #3
    6922:	42b2      	cmp	r2, r6
    6924:	d100      	bne.n	6928 <__aeabi_dsub+0x38>
    6926:	e0e5      	b.n	6af4 <__aeabi_dsub+0x204>
    6928:	2601      	movs	r6, #1
    692a:	4073      	eors	r3, r6
    692c:	1aa6      	subs	r6, r4, r2
    692e:	46b4      	mov	ip, r6
    6930:	4553      	cmp	r3, sl
    6932:	d100      	bne.n	6936 <__aeabi_dsub+0x46>
    6934:	e0af      	b.n	6a96 <__aeabi_dsub+0x1a6>
    6936:	2e00      	cmp	r6, #0
    6938:	dc00      	bgt.n	693c <__aeabi_dsub+0x4c>
    693a:	e10d      	b.n	6b58 <__aeabi_dsub+0x268>
    693c:	2a00      	cmp	r2, #0
    693e:	d13a      	bne.n	69b6 <__aeabi_dsub+0xc6>
    6940:	0003      	movs	r3, r0
    6942:	430b      	orrs	r3, r1
    6944:	d000      	beq.n	6948 <__aeabi_dsub+0x58>
    6946:	e0e4      	b.n	6b12 <__aeabi_dsub+0x222>
    6948:	076b      	lsls	r3, r5, #29
    694a:	d009      	beq.n	6960 <__aeabi_dsub+0x70>
    694c:	230f      	movs	r3, #15
    694e:	402b      	ands	r3, r5
    6950:	2b04      	cmp	r3, #4
    6952:	d005      	beq.n	6960 <__aeabi_dsub+0x70>
    6954:	1d2b      	adds	r3, r5, #4
    6956:	42ab      	cmp	r3, r5
    6958:	41ad      	sbcs	r5, r5
    695a:	426d      	negs	r5, r5
    695c:	197f      	adds	r7, r7, r5
    695e:	001d      	movs	r5, r3
    6960:	023b      	lsls	r3, r7, #8
    6962:	d400      	bmi.n	6966 <__aeabi_dsub+0x76>
    6964:	e088      	b.n	6a78 <__aeabi_dsub+0x188>
    6966:	4bbb      	ldr	r3, [pc, #748]	; (6c54 <__aeabi_dsub+0x364>)
    6968:	3401      	adds	r4, #1
    696a:	429c      	cmp	r4, r3
    696c:	d100      	bne.n	6970 <__aeabi_dsub+0x80>
    696e:	e110      	b.n	6b92 <__aeabi_dsub+0x2a2>
    6970:	003a      	movs	r2, r7
    6972:	4bb9      	ldr	r3, [pc, #740]	; (6c58 <__aeabi_dsub+0x368>)
    6974:	4651      	mov	r1, sl
    6976:	401a      	ands	r2, r3
    6978:	2301      	movs	r3, #1
    697a:	0750      	lsls	r0, r2, #29
    697c:	08ed      	lsrs	r5, r5, #3
    697e:	0252      	lsls	r2, r2, #9
    6980:	0564      	lsls	r4, r4, #21
    6982:	4305      	orrs	r5, r0
    6984:	0b12      	lsrs	r2, r2, #12
    6986:	0d64      	lsrs	r4, r4, #21
    6988:	400b      	ands	r3, r1
    698a:	2100      	movs	r1, #0
    698c:	0028      	movs	r0, r5
    698e:	0312      	lsls	r2, r2, #12
    6990:	0d0d      	lsrs	r5, r1, #20
    6992:	0b12      	lsrs	r2, r2, #12
    6994:	0564      	lsls	r4, r4, #21
    6996:	052d      	lsls	r5, r5, #20
    6998:	4315      	orrs	r5, r2
    699a:	0862      	lsrs	r2, r4, #1
    699c:	4caf      	ldr	r4, [pc, #700]	; (6c5c <__aeabi_dsub+0x36c>)
    699e:	07db      	lsls	r3, r3, #31
    69a0:	402c      	ands	r4, r5
    69a2:	4314      	orrs	r4, r2
    69a4:	0064      	lsls	r4, r4, #1
    69a6:	0864      	lsrs	r4, r4, #1
    69a8:	431c      	orrs	r4, r3
    69aa:	0021      	movs	r1, r4
    69ac:	bc1c      	pop	{r2, r3, r4}
    69ae:	4690      	mov	r8, r2
    69b0:	4699      	mov	r9, r3
    69b2:	46a2      	mov	sl, r4
    69b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69b6:	4ba7      	ldr	r3, [pc, #668]	; (6c54 <__aeabi_dsub+0x364>)
    69b8:	429c      	cmp	r4, r3
    69ba:	d0c5      	beq.n	6948 <__aeabi_dsub+0x58>
    69bc:	2380      	movs	r3, #128	; 0x80
    69be:	041b      	lsls	r3, r3, #16
    69c0:	4318      	orrs	r0, r3
    69c2:	4663      	mov	r3, ip
    69c4:	2b38      	cmp	r3, #56	; 0x38
    69c6:	dd00      	ble.n	69ca <__aeabi_dsub+0xda>
    69c8:	e0fd      	b.n	6bc6 <__aeabi_dsub+0x2d6>
    69ca:	2b1f      	cmp	r3, #31
    69cc:	dd00      	ble.n	69d0 <__aeabi_dsub+0xe0>
    69ce:	e130      	b.n	6c32 <__aeabi_dsub+0x342>
    69d0:	4662      	mov	r2, ip
    69d2:	2320      	movs	r3, #32
    69d4:	1a9b      	subs	r3, r3, r2
    69d6:	0002      	movs	r2, r0
    69d8:	409a      	lsls	r2, r3
    69da:	4666      	mov	r6, ip
    69dc:	4690      	mov	r8, r2
    69de:	000a      	movs	r2, r1
    69e0:	4099      	lsls	r1, r3
    69e2:	40f2      	lsrs	r2, r6
    69e4:	4646      	mov	r6, r8
    69e6:	1e4b      	subs	r3, r1, #1
    69e8:	4199      	sbcs	r1, r3
    69ea:	4332      	orrs	r2, r6
    69ec:	4311      	orrs	r1, r2
    69ee:	4663      	mov	r3, ip
    69f0:	0002      	movs	r2, r0
    69f2:	40da      	lsrs	r2, r3
    69f4:	1a69      	subs	r1, r5, r1
    69f6:	428d      	cmp	r5, r1
    69f8:	419b      	sbcs	r3, r3
    69fa:	000d      	movs	r5, r1
    69fc:	1aba      	subs	r2, r7, r2
    69fe:	425b      	negs	r3, r3
    6a00:	1ad7      	subs	r7, r2, r3
    6a02:	023b      	lsls	r3, r7, #8
    6a04:	d535      	bpl.n	6a72 <__aeabi_dsub+0x182>
    6a06:	027a      	lsls	r2, r7, #9
    6a08:	0a53      	lsrs	r3, r2, #9
    6a0a:	4698      	mov	r8, r3
    6a0c:	4643      	mov	r3, r8
    6a0e:	2b00      	cmp	r3, #0
    6a10:	d100      	bne.n	6a14 <__aeabi_dsub+0x124>
    6a12:	e0c4      	b.n	6b9e <__aeabi_dsub+0x2ae>
    6a14:	4640      	mov	r0, r8
    6a16:	f000 fb2d 	bl	7074 <__clzsi2>
    6a1a:	0003      	movs	r3, r0
    6a1c:	3b08      	subs	r3, #8
    6a1e:	2b1f      	cmp	r3, #31
    6a20:	dd00      	ble.n	6a24 <__aeabi_dsub+0x134>
    6a22:	e0c5      	b.n	6bb0 <__aeabi_dsub+0x2c0>
    6a24:	2220      	movs	r2, #32
    6a26:	0029      	movs	r1, r5
    6a28:	1ad2      	subs	r2, r2, r3
    6a2a:	4647      	mov	r7, r8
    6a2c:	40d1      	lsrs	r1, r2
    6a2e:	409f      	lsls	r7, r3
    6a30:	000a      	movs	r2, r1
    6a32:	409d      	lsls	r5, r3
    6a34:	433a      	orrs	r2, r7
    6a36:	429c      	cmp	r4, r3
    6a38:	dd00      	ble.n	6a3c <__aeabi_dsub+0x14c>
    6a3a:	e0c0      	b.n	6bbe <__aeabi_dsub+0x2ce>
    6a3c:	1b1c      	subs	r4, r3, r4
    6a3e:	1c63      	adds	r3, r4, #1
    6a40:	2b1f      	cmp	r3, #31
    6a42:	dd00      	ble.n	6a46 <__aeabi_dsub+0x156>
    6a44:	e0e4      	b.n	6c10 <__aeabi_dsub+0x320>
    6a46:	2120      	movs	r1, #32
    6a48:	0014      	movs	r4, r2
    6a4a:	0028      	movs	r0, r5
    6a4c:	1ac9      	subs	r1, r1, r3
    6a4e:	40d8      	lsrs	r0, r3
    6a50:	408c      	lsls	r4, r1
    6a52:	408d      	lsls	r5, r1
    6a54:	4304      	orrs	r4, r0
    6a56:	40da      	lsrs	r2, r3
    6a58:	1e68      	subs	r0, r5, #1
    6a5a:	4185      	sbcs	r5, r0
    6a5c:	0017      	movs	r7, r2
    6a5e:	4325      	orrs	r5, r4
    6a60:	2400      	movs	r4, #0
    6a62:	e771      	b.n	6948 <__aeabi_dsub+0x58>
    6a64:	4642      	mov	r2, r8
    6a66:	4663      	mov	r3, ip
    6a68:	431a      	orrs	r2, r3
    6a6a:	d100      	bne.n	6a6e <__aeabi_dsub+0x17e>
    6a6c:	e24c      	b.n	6f08 <__aeabi_dsub+0x618>
    6a6e:	4667      	mov	r7, ip
    6a70:	4645      	mov	r5, r8
    6a72:	076b      	lsls	r3, r5, #29
    6a74:	d000      	beq.n	6a78 <__aeabi_dsub+0x188>
    6a76:	e769      	b.n	694c <__aeabi_dsub+0x5c>
    6a78:	2301      	movs	r3, #1
    6a7a:	4651      	mov	r1, sl
    6a7c:	0778      	lsls	r0, r7, #29
    6a7e:	08ed      	lsrs	r5, r5, #3
    6a80:	08fa      	lsrs	r2, r7, #3
    6a82:	400b      	ands	r3, r1
    6a84:	4305      	orrs	r5, r0
    6a86:	4973      	ldr	r1, [pc, #460]	; (6c54 <__aeabi_dsub+0x364>)
    6a88:	428c      	cmp	r4, r1
    6a8a:	d038      	beq.n	6afe <__aeabi_dsub+0x20e>
    6a8c:	0312      	lsls	r2, r2, #12
    6a8e:	0564      	lsls	r4, r4, #21
    6a90:	0b12      	lsrs	r2, r2, #12
    6a92:	0d64      	lsrs	r4, r4, #21
    6a94:	e779      	b.n	698a <__aeabi_dsub+0x9a>
    6a96:	2e00      	cmp	r6, #0
    6a98:	dc00      	bgt.n	6a9c <__aeabi_dsub+0x1ac>
    6a9a:	e09a      	b.n	6bd2 <__aeabi_dsub+0x2e2>
    6a9c:	2a00      	cmp	r2, #0
    6a9e:	d047      	beq.n	6b30 <__aeabi_dsub+0x240>
    6aa0:	4a6c      	ldr	r2, [pc, #432]	; (6c54 <__aeabi_dsub+0x364>)
    6aa2:	4294      	cmp	r4, r2
    6aa4:	d100      	bne.n	6aa8 <__aeabi_dsub+0x1b8>
    6aa6:	e74f      	b.n	6948 <__aeabi_dsub+0x58>
    6aa8:	2280      	movs	r2, #128	; 0x80
    6aaa:	0412      	lsls	r2, r2, #16
    6aac:	4310      	orrs	r0, r2
    6aae:	4662      	mov	r2, ip
    6ab0:	2a38      	cmp	r2, #56	; 0x38
    6ab2:	dc00      	bgt.n	6ab6 <__aeabi_dsub+0x1c6>
    6ab4:	e108      	b.n	6cc8 <__aeabi_dsub+0x3d8>
    6ab6:	4301      	orrs	r1, r0
    6ab8:	1e48      	subs	r0, r1, #1
    6aba:	4181      	sbcs	r1, r0
    6abc:	2200      	movs	r2, #0
    6abe:	b2c9      	uxtb	r1, r1
    6ac0:	1949      	adds	r1, r1, r5
    6ac2:	19d2      	adds	r2, r2, r7
    6ac4:	42a9      	cmp	r1, r5
    6ac6:	41bf      	sbcs	r7, r7
    6ac8:	000d      	movs	r5, r1
    6aca:	427f      	negs	r7, r7
    6acc:	18bf      	adds	r7, r7, r2
    6ace:	023a      	lsls	r2, r7, #8
    6ad0:	d400      	bmi.n	6ad4 <__aeabi_dsub+0x1e4>
    6ad2:	e142      	b.n	6d5a <__aeabi_dsub+0x46a>
    6ad4:	4a5f      	ldr	r2, [pc, #380]	; (6c54 <__aeabi_dsub+0x364>)
    6ad6:	3401      	adds	r4, #1
    6ad8:	4294      	cmp	r4, r2
    6ada:	d100      	bne.n	6ade <__aeabi_dsub+0x1ee>
    6adc:	e14e      	b.n	6d7c <__aeabi_dsub+0x48c>
    6ade:	2001      	movs	r0, #1
    6ae0:	4a5d      	ldr	r2, [pc, #372]	; (6c58 <__aeabi_dsub+0x368>)
    6ae2:	0869      	lsrs	r1, r5, #1
    6ae4:	403a      	ands	r2, r7
    6ae6:	4028      	ands	r0, r5
    6ae8:	4308      	orrs	r0, r1
    6aea:	07d5      	lsls	r5, r2, #31
    6aec:	4305      	orrs	r5, r0
    6aee:	0857      	lsrs	r7, r2, #1
    6af0:	469a      	mov	sl, r3
    6af2:	e729      	b.n	6948 <__aeabi_dsub+0x58>
    6af4:	0006      	movs	r6, r0
    6af6:	430e      	orrs	r6, r1
    6af8:	d000      	beq.n	6afc <__aeabi_dsub+0x20c>
    6afa:	e717      	b.n	692c <__aeabi_dsub+0x3c>
    6afc:	e714      	b.n	6928 <__aeabi_dsub+0x38>
    6afe:	0029      	movs	r1, r5
    6b00:	4311      	orrs	r1, r2
    6b02:	d100      	bne.n	6b06 <__aeabi_dsub+0x216>
    6b04:	e1f9      	b.n	6efa <__aeabi_dsub+0x60a>
    6b06:	2180      	movs	r1, #128	; 0x80
    6b08:	0309      	lsls	r1, r1, #12
    6b0a:	430a      	orrs	r2, r1
    6b0c:	0312      	lsls	r2, r2, #12
    6b0e:	0b12      	lsrs	r2, r2, #12
    6b10:	e73b      	b.n	698a <__aeabi_dsub+0x9a>
    6b12:	2301      	movs	r3, #1
    6b14:	425b      	negs	r3, r3
    6b16:	4698      	mov	r8, r3
    6b18:	44c4      	add	ip, r8
    6b1a:	4663      	mov	r3, ip
    6b1c:	2b00      	cmp	r3, #0
    6b1e:	d172      	bne.n	6c06 <__aeabi_dsub+0x316>
    6b20:	1a69      	subs	r1, r5, r1
    6b22:	428d      	cmp	r5, r1
    6b24:	419b      	sbcs	r3, r3
    6b26:	1a3f      	subs	r7, r7, r0
    6b28:	425b      	negs	r3, r3
    6b2a:	1aff      	subs	r7, r7, r3
    6b2c:	000d      	movs	r5, r1
    6b2e:	e768      	b.n	6a02 <__aeabi_dsub+0x112>
    6b30:	0002      	movs	r2, r0
    6b32:	430a      	orrs	r2, r1
    6b34:	d100      	bne.n	6b38 <__aeabi_dsub+0x248>
    6b36:	e707      	b.n	6948 <__aeabi_dsub+0x58>
    6b38:	2201      	movs	r2, #1
    6b3a:	4252      	negs	r2, r2
    6b3c:	4690      	mov	r8, r2
    6b3e:	44c4      	add	ip, r8
    6b40:	4662      	mov	r2, ip
    6b42:	2a00      	cmp	r2, #0
    6b44:	d000      	beq.n	6b48 <__aeabi_dsub+0x258>
    6b46:	e0e6      	b.n	6d16 <__aeabi_dsub+0x426>
    6b48:	1869      	adds	r1, r5, r1
    6b4a:	42a9      	cmp	r1, r5
    6b4c:	41b6      	sbcs	r6, r6
    6b4e:	183f      	adds	r7, r7, r0
    6b50:	4276      	negs	r6, r6
    6b52:	19f7      	adds	r7, r6, r7
    6b54:	000d      	movs	r5, r1
    6b56:	e7ba      	b.n	6ace <__aeabi_dsub+0x1de>
    6b58:	2e00      	cmp	r6, #0
    6b5a:	d000      	beq.n	6b5e <__aeabi_dsub+0x26e>
    6b5c:	e080      	b.n	6c60 <__aeabi_dsub+0x370>
    6b5e:	1c62      	adds	r2, r4, #1
    6b60:	0552      	lsls	r2, r2, #21
    6b62:	0d52      	lsrs	r2, r2, #21
    6b64:	2a01      	cmp	r2, #1
    6b66:	dc00      	bgt.n	6b6a <__aeabi_dsub+0x27a>
    6b68:	e0f9      	b.n	6d5e <__aeabi_dsub+0x46e>
    6b6a:	1a6a      	subs	r2, r5, r1
    6b6c:	4691      	mov	r9, r2
    6b6e:	454d      	cmp	r5, r9
    6b70:	41b6      	sbcs	r6, r6
    6b72:	1a3a      	subs	r2, r7, r0
    6b74:	4276      	negs	r6, r6
    6b76:	1b92      	subs	r2, r2, r6
    6b78:	4690      	mov	r8, r2
    6b7a:	0212      	lsls	r2, r2, #8
    6b7c:	d400      	bmi.n	6b80 <__aeabi_dsub+0x290>
    6b7e:	e099      	b.n	6cb4 <__aeabi_dsub+0x3c4>
    6b80:	1b4d      	subs	r5, r1, r5
    6b82:	42a9      	cmp	r1, r5
    6b84:	4189      	sbcs	r1, r1
    6b86:	1bc7      	subs	r7, r0, r7
    6b88:	4249      	negs	r1, r1
    6b8a:	1a7a      	subs	r2, r7, r1
    6b8c:	4690      	mov	r8, r2
    6b8e:	469a      	mov	sl, r3
    6b90:	e73c      	b.n	6a0c <__aeabi_dsub+0x11c>
    6b92:	4652      	mov	r2, sl
    6b94:	2301      	movs	r3, #1
    6b96:	2500      	movs	r5, #0
    6b98:	4013      	ands	r3, r2
    6b9a:	2200      	movs	r2, #0
    6b9c:	e6f5      	b.n	698a <__aeabi_dsub+0x9a>
    6b9e:	0028      	movs	r0, r5
    6ba0:	f000 fa68 	bl	7074 <__clzsi2>
    6ba4:	3020      	adds	r0, #32
    6ba6:	0003      	movs	r3, r0
    6ba8:	3b08      	subs	r3, #8
    6baa:	2b1f      	cmp	r3, #31
    6bac:	dc00      	bgt.n	6bb0 <__aeabi_dsub+0x2c0>
    6bae:	e739      	b.n	6a24 <__aeabi_dsub+0x134>
    6bb0:	002a      	movs	r2, r5
    6bb2:	3828      	subs	r0, #40	; 0x28
    6bb4:	4082      	lsls	r2, r0
    6bb6:	2500      	movs	r5, #0
    6bb8:	429c      	cmp	r4, r3
    6bba:	dc00      	bgt.n	6bbe <__aeabi_dsub+0x2ce>
    6bbc:	e73e      	b.n	6a3c <__aeabi_dsub+0x14c>
    6bbe:	4f26      	ldr	r7, [pc, #152]	; (6c58 <__aeabi_dsub+0x368>)
    6bc0:	1ae4      	subs	r4, r4, r3
    6bc2:	4017      	ands	r7, r2
    6bc4:	e6c0      	b.n	6948 <__aeabi_dsub+0x58>
    6bc6:	4301      	orrs	r1, r0
    6bc8:	1e48      	subs	r0, r1, #1
    6bca:	4181      	sbcs	r1, r0
    6bcc:	2200      	movs	r2, #0
    6bce:	b2c9      	uxtb	r1, r1
    6bd0:	e710      	b.n	69f4 <__aeabi_dsub+0x104>
    6bd2:	2e00      	cmp	r6, #0
    6bd4:	d000      	beq.n	6bd8 <__aeabi_dsub+0x2e8>
    6bd6:	e0f1      	b.n	6dbc <__aeabi_dsub+0x4cc>
    6bd8:	1c62      	adds	r2, r4, #1
    6bda:	4694      	mov	ip, r2
    6bdc:	0552      	lsls	r2, r2, #21
    6bde:	0d52      	lsrs	r2, r2, #21
    6be0:	2a01      	cmp	r2, #1
    6be2:	dc00      	bgt.n	6be6 <__aeabi_dsub+0x2f6>
    6be4:	e0a0      	b.n	6d28 <__aeabi_dsub+0x438>
    6be6:	4a1b      	ldr	r2, [pc, #108]	; (6c54 <__aeabi_dsub+0x364>)
    6be8:	4594      	cmp	ip, r2
    6bea:	d100      	bne.n	6bee <__aeabi_dsub+0x2fe>
    6bec:	e0c5      	b.n	6d7a <__aeabi_dsub+0x48a>
    6bee:	1869      	adds	r1, r5, r1
    6bf0:	42a9      	cmp	r1, r5
    6bf2:	4192      	sbcs	r2, r2
    6bf4:	183f      	adds	r7, r7, r0
    6bf6:	4252      	negs	r2, r2
    6bf8:	19d2      	adds	r2, r2, r7
    6bfa:	0849      	lsrs	r1, r1, #1
    6bfc:	07d5      	lsls	r5, r2, #31
    6bfe:	430d      	orrs	r5, r1
    6c00:	0857      	lsrs	r7, r2, #1
    6c02:	4664      	mov	r4, ip
    6c04:	e6a0      	b.n	6948 <__aeabi_dsub+0x58>
    6c06:	4b13      	ldr	r3, [pc, #76]	; (6c54 <__aeabi_dsub+0x364>)
    6c08:	429c      	cmp	r4, r3
    6c0a:	d000      	beq.n	6c0e <__aeabi_dsub+0x31e>
    6c0c:	e6d9      	b.n	69c2 <__aeabi_dsub+0xd2>
    6c0e:	e69b      	b.n	6948 <__aeabi_dsub+0x58>
    6c10:	0011      	movs	r1, r2
    6c12:	3c1f      	subs	r4, #31
    6c14:	40e1      	lsrs	r1, r4
    6c16:	000c      	movs	r4, r1
    6c18:	2b20      	cmp	r3, #32
    6c1a:	d100      	bne.n	6c1e <__aeabi_dsub+0x32e>
    6c1c:	e080      	b.n	6d20 <__aeabi_dsub+0x430>
    6c1e:	2140      	movs	r1, #64	; 0x40
    6c20:	1acb      	subs	r3, r1, r3
    6c22:	409a      	lsls	r2, r3
    6c24:	4315      	orrs	r5, r2
    6c26:	1e6a      	subs	r2, r5, #1
    6c28:	4195      	sbcs	r5, r2
    6c2a:	2700      	movs	r7, #0
    6c2c:	4325      	orrs	r5, r4
    6c2e:	2400      	movs	r4, #0
    6c30:	e71f      	b.n	6a72 <__aeabi_dsub+0x182>
    6c32:	4663      	mov	r3, ip
    6c34:	0002      	movs	r2, r0
    6c36:	3b20      	subs	r3, #32
    6c38:	40da      	lsrs	r2, r3
    6c3a:	4663      	mov	r3, ip
    6c3c:	2b20      	cmp	r3, #32
    6c3e:	d071      	beq.n	6d24 <__aeabi_dsub+0x434>
    6c40:	2340      	movs	r3, #64	; 0x40
    6c42:	4666      	mov	r6, ip
    6c44:	1b9b      	subs	r3, r3, r6
    6c46:	4098      	lsls	r0, r3
    6c48:	4301      	orrs	r1, r0
    6c4a:	1e48      	subs	r0, r1, #1
    6c4c:	4181      	sbcs	r1, r0
    6c4e:	4311      	orrs	r1, r2
    6c50:	2200      	movs	r2, #0
    6c52:	e6cf      	b.n	69f4 <__aeabi_dsub+0x104>
    6c54:	000007ff 	.word	0x000007ff
    6c58:	ff7fffff 	.word	0xff7fffff
    6c5c:	800fffff 	.word	0x800fffff
    6c60:	2c00      	cmp	r4, #0
    6c62:	d048      	beq.n	6cf6 <__aeabi_dsub+0x406>
    6c64:	4cca      	ldr	r4, [pc, #808]	; (6f90 <__aeabi_dsub+0x6a0>)
    6c66:	42a2      	cmp	r2, r4
    6c68:	d100      	bne.n	6c6c <__aeabi_dsub+0x37c>
    6c6a:	e0a2      	b.n	6db2 <__aeabi_dsub+0x4c2>
    6c6c:	4274      	negs	r4, r6
    6c6e:	46a1      	mov	r9, r4
    6c70:	2480      	movs	r4, #128	; 0x80
    6c72:	0424      	lsls	r4, r4, #16
    6c74:	4327      	orrs	r7, r4
    6c76:	464c      	mov	r4, r9
    6c78:	2c38      	cmp	r4, #56	; 0x38
    6c7a:	dd00      	ble.n	6c7e <__aeabi_dsub+0x38e>
    6c7c:	e0db      	b.n	6e36 <__aeabi_dsub+0x546>
    6c7e:	2c1f      	cmp	r4, #31
    6c80:	dd00      	ble.n	6c84 <__aeabi_dsub+0x394>
    6c82:	e144      	b.n	6f0e <__aeabi_dsub+0x61e>
    6c84:	464e      	mov	r6, r9
    6c86:	2420      	movs	r4, #32
    6c88:	1ba4      	subs	r4, r4, r6
    6c8a:	003e      	movs	r6, r7
    6c8c:	40a6      	lsls	r6, r4
    6c8e:	46a2      	mov	sl, r4
    6c90:	46b0      	mov	r8, r6
    6c92:	464c      	mov	r4, r9
    6c94:	002e      	movs	r6, r5
    6c96:	40e6      	lsrs	r6, r4
    6c98:	46b4      	mov	ip, r6
    6c9a:	4646      	mov	r6, r8
    6c9c:	4664      	mov	r4, ip
    6c9e:	4326      	orrs	r6, r4
    6ca0:	4654      	mov	r4, sl
    6ca2:	40a5      	lsls	r5, r4
    6ca4:	1e6c      	subs	r4, r5, #1
    6ca6:	41a5      	sbcs	r5, r4
    6ca8:	0034      	movs	r4, r6
    6caa:	432c      	orrs	r4, r5
    6cac:	464d      	mov	r5, r9
    6cae:	40ef      	lsrs	r7, r5
    6cb0:	1b0d      	subs	r5, r1, r4
    6cb2:	e028      	b.n	6d06 <__aeabi_dsub+0x416>
    6cb4:	464a      	mov	r2, r9
    6cb6:	4643      	mov	r3, r8
    6cb8:	464d      	mov	r5, r9
    6cba:	431a      	orrs	r2, r3
    6cbc:	d000      	beq.n	6cc0 <__aeabi_dsub+0x3d0>
    6cbe:	e6a5      	b.n	6a0c <__aeabi_dsub+0x11c>
    6cc0:	2300      	movs	r3, #0
    6cc2:	2400      	movs	r4, #0
    6cc4:	2500      	movs	r5, #0
    6cc6:	e6de      	b.n	6a86 <__aeabi_dsub+0x196>
    6cc8:	2a1f      	cmp	r2, #31
    6cca:	dc5a      	bgt.n	6d82 <__aeabi_dsub+0x492>
    6ccc:	4666      	mov	r6, ip
    6cce:	2220      	movs	r2, #32
    6cd0:	1b92      	subs	r2, r2, r6
    6cd2:	0006      	movs	r6, r0
    6cd4:	4096      	lsls	r6, r2
    6cd6:	4691      	mov	r9, r2
    6cd8:	46b0      	mov	r8, r6
    6cda:	4662      	mov	r2, ip
    6cdc:	000e      	movs	r6, r1
    6cde:	40d6      	lsrs	r6, r2
    6ce0:	4642      	mov	r2, r8
    6ce2:	4316      	orrs	r6, r2
    6ce4:	464a      	mov	r2, r9
    6ce6:	4091      	lsls	r1, r2
    6ce8:	1e4a      	subs	r2, r1, #1
    6cea:	4191      	sbcs	r1, r2
    6cec:	0002      	movs	r2, r0
    6cee:	4660      	mov	r0, ip
    6cf0:	4331      	orrs	r1, r6
    6cf2:	40c2      	lsrs	r2, r0
    6cf4:	e6e4      	b.n	6ac0 <__aeabi_dsub+0x1d0>
    6cf6:	003c      	movs	r4, r7
    6cf8:	432c      	orrs	r4, r5
    6cfa:	d05a      	beq.n	6db2 <__aeabi_dsub+0x4c2>
    6cfc:	43f4      	mvns	r4, r6
    6cfe:	46a1      	mov	r9, r4
    6d00:	2c00      	cmp	r4, #0
    6d02:	d152      	bne.n	6daa <__aeabi_dsub+0x4ba>
    6d04:	1b4d      	subs	r5, r1, r5
    6d06:	42a9      	cmp	r1, r5
    6d08:	4189      	sbcs	r1, r1
    6d0a:	1bc7      	subs	r7, r0, r7
    6d0c:	4249      	negs	r1, r1
    6d0e:	1a7f      	subs	r7, r7, r1
    6d10:	0014      	movs	r4, r2
    6d12:	469a      	mov	sl, r3
    6d14:	e675      	b.n	6a02 <__aeabi_dsub+0x112>
    6d16:	4a9e      	ldr	r2, [pc, #632]	; (6f90 <__aeabi_dsub+0x6a0>)
    6d18:	4294      	cmp	r4, r2
    6d1a:	d000      	beq.n	6d1e <__aeabi_dsub+0x42e>
    6d1c:	e6c7      	b.n	6aae <__aeabi_dsub+0x1be>
    6d1e:	e613      	b.n	6948 <__aeabi_dsub+0x58>
    6d20:	2200      	movs	r2, #0
    6d22:	e77f      	b.n	6c24 <__aeabi_dsub+0x334>
    6d24:	2000      	movs	r0, #0
    6d26:	e78f      	b.n	6c48 <__aeabi_dsub+0x358>
    6d28:	2c00      	cmp	r4, #0
    6d2a:	d000      	beq.n	6d2e <__aeabi_dsub+0x43e>
    6d2c:	e0c8      	b.n	6ec0 <__aeabi_dsub+0x5d0>
    6d2e:	003b      	movs	r3, r7
    6d30:	432b      	orrs	r3, r5
    6d32:	d100      	bne.n	6d36 <__aeabi_dsub+0x446>
    6d34:	e10f      	b.n	6f56 <__aeabi_dsub+0x666>
    6d36:	0003      	movs	r3, r0
    6d38:	430b      	orrs	r3, r1
    6d3a:	d100      	bne.n	6d3e <__aeabi_dsub+0x44e>
    6d3c:	e604      	b.n	6948 <__aeabi_dsub+0x58>
    6d3e:	1869      	adds	r1, r5, r1
    6d40:	42a9      	cmp	r1, r5
    6d42:	419b      	sbcs	r3, r3
    6d44:	183f      	adds	r7, r7, r0
    6d46:	425b      	negs	r3, r3
    6d48:	19df      	adds	r7, r3, r7
    6d4a:	023b      	lsls	r3, r7, #8
    6d4c:	d400      	bmi.n	6d50 <__aeabi_dsub+0x460>
    6d4e:	e11a      	b.n	6f86 <__aeabi_dsub+0x696>
    6d50:	4b90      	ldr	r3, [pc, #576]	; (6f94 <__aeabi_dsub+0x6a4>)
    6d52:	000d      	movs	r5, r1
    6d54:	401f      	ands	r7, r3
    6d56:	4664      	mov	r4, ip
    6d58:	e5f6      	b.n	6948 <__aeabi_dsub+0x58>
    6d5a:	469a      	mov	sl, r3
    6d5c:	e689      	b.n	6a72 <__aeabi_dsub+0x182>
    6d5e:	003a      	movs	r2, r7
    6d60:	432a      	orrs	r2, r5
    6d62:	2c00      	cmp	r4, #0
    6d64:	d15c      	bne.n	6e20 <__aeabi_dsub+0x530>
    6d66:	2a00      	cmp	r2, #0
    6d68:	d175      	bne.n	6e56 <__aeabi_dsub+0x566>
    6d6a:	0002      	movs	r2, r0
    6d6c:	430a      	orrs	r2, r1
    6d6e:	d100      	bne.n	6d72 <__aeabi_dsub+0x482>
    6d70:	e0ca      	b.n	6f08 <__aeabi_dsub+0x618>
    6d72:	0007      	movs	r7, r0
    6d74:	000d      	movs	r5, r1
    6d76:	469a      	mov	sl, r3
    6d78:	e5e6      	b.n	6948 <__aeabi_dsub+0x58>
    6d7a:	4664      	mov	r4, ip
    6d7c:	2200      	movs	r2, #0
    6d7e:	2500      	movs	r5, #0
    6d80:	e681      	b.n	6a86 <__aeabi_dsub+0x196>
    6d82:	4662      	mov	r2, ip
    6d84:	0006      	movs	r6, r0
    6d86:	3a20      	subs	r2, #32
    6d88:	40d6      	lsrs	r6, r2
    6d8a:	4662      	mov	r2, ip
    6d8c:	46b0      	mov	r8, r6
    6d8e:	2a20      	cmp	r2, #32
    6d90:	d100      	bne.n	6d94 <__aeabi_dsub+0x4a4>
    6d92:	e0b7      	b.n	6f04 <__aeabi_dsub+0x614>
    6d94:	2240      	movs	r2, #64	; 0x40
    6d96:	4666      	mov	r6, ip
    6d98:	1b92      	subs	r2, r2, r6
    6d9a:	4090      	lsls	r0, r2
    6d9c:	4301      	orrs	r1, r0
    6d9e:	4642      	mov	r2, r8
    6da0:	1e48      	subs	r0, r1, #1
    6da2:	4181      	sbcs	r1, r0
    6da4:	4311      	orrs	r1, r2
    6da6:	2200      	movs	r2, #0
    6da8:	e68a      	b.n	6ac0 <__aeabi_dsub+0x1d0>
    6daa:	4c79      	ldr	r4, [pc, #484]	; (6f90 <__aeabi_dsub+0x6a0>)
    6dac:	42a2      	cmp	r2, r4
    6dae:	d000      	beq.n	6db2 <__aeabi_dsub+0x4c2>
    6db0:	e761      	b.n	6c76 <__aeabi_dsub+0x386>
    6db2:	0007      	movs	r7, r0
    6db4:	000d      	movs	r5, r1
    6db6:	0014      	movs	r4, r2
    6db8:	469a      	mov	sl, r3
    6dba:	e5c5      	b.n	6948 <__aeabi_dsub+0x58>
    6dbc:	2c00      	cmp	r4, #0
    6dbe:	d141      	bne.n	6e44 <__aeabi_dsub+0x554>
    6dc0:	003c      	movs	r4, r7
    6dc2:	432c      	orrs	r4, r5
    6dc4:	d078      	beq.n	6eb8 <__aeabi_dsub+0x5c8>
    6dc6:	43f4      	mvns	r4, r6
    6dc8:	46a1      	mov	r9, r4
    6dca:	2c00      	cmp	r4, #0
    6dcc:	d020      	beq.n	6e10 <__aeabi_dsub+0x520>
    6dce:	4c70      	ldr	r4, [pc, #448]	; (6f90 <__aeabi_dsub+0x6a0>)
    6dd0:	42a2      	cmp	r2, r4
    6dd2:	d071      	beq.n	6eb8 <__aeabi_dsub+0x5c8>
    6dd4:	464c      	mov	r4, r9
    6dd6:	2c38      	cmp	r4, #56	; 0x38
    6dd8:	dd00      	ble.n	6ddc <__aeabi_dsub+0x4ec>
    6dda:	e0b2      	b.n	6f42 <__aeabi_dsub+0x652>
    6ddc:	2c1f      	cmp	r4, #31
    6dde:	dd00      	ble.n	6de2 <__aeabi_dsub+0x4f2>
    6de0:	e0bc      	b.n	6f5c <__aeabi_dsub+0x66c>
    6de2:	2620      	movs	r6, #32
    6de4:	1b34      	subs	r4, r6, r4
    6de6:	46a2      	mov	sl, r4
    6de8:	003c      	movs	r4, r7
    6dea:	4656      	mov	r6, sl
    6dec:	40b4      	lsls	r4, r6
    6dee:	464e      	mov	r6, r9
    6df0:	46a0      	mov	r8, r4
    6df2:	002c      	movs	r4, r5
    6df4:	40f4      	lsrs	r4, r6
    6df6:	46a4      	mov	ip, r4
    6df8:	4644      	mov	r4, r8
    6dfa:	4666      	mov	r6, ip
    6dfc:	4334      	orrs	r4, r6
    6dfe:	46a4      	mov	ip, r4
    6e00:	4654      	mov	r4, sl
    6e02:	40a5      	lsls	r5, r4
    6e04:	4664      	mov	r4, ip
    6e06:	1e6e      	subs	r6, r5, #1
    6e08:	41b5      	sbcs	r5, r6
    6e0a:	4325      	orrs	r5, r4
    6e0c:	464c      	mov	r4, r9
    6e0e:	40e7      	lsrs	r7, r4
    6e10:	186d      	adds	r5, r5, r1
    6e12:	428d      	cmp	r5, r1
    6e14:	4189      	sbcs	r1, r1
    6e16:	183f      	adds	r7, r7, r0
    6e18:	4249      	negs	r1, r1
    6e1a:	19cf      	adds	r7, r1, r7
    6e1c:	0014      	movs	r4, r2
    6e1e:	e656      	b.n	6ace <__aeabi_dsub+0x1de>
    6e20:	2a00      	cmp	r2, #0
    6e22:	d12f      	bne.n	6e84 <__aeabi_dsub+0x594>
    6e24:	0002      	movs	r2, r0
    6e26:	430a      	orrs	r2, r1
    6e28:	d100      	bne.n	6e2c <__aeabi_dsub+0x53c>
    6e2a:	e084      	b.n	6f36 <__aeabi_dsub+0x646>
    6e2c:	0007      	movs	r7, r0
    6e2e:	000d      	movs	r5, r1
    6e30:	469a      	mov	sl, r3
    6e32:	4c57      	ldr	r4, [pc, #348]	; (6f90 <__aeabi_dsub+0x6a0>)
    6e34:	e588      	b.n	6948 <__aeabi_dsub+0x58>
    6e36:	433d      	orrs	r5, r7
    6e38:	1e6f      	subs	r7, r5, #1
    6e3a:	41bd      	sbcs	r5, r7
    6e3c:	b2ec      	uxtb	r4, r5
    6e3e:	2700      	movs	r7, #0
    6e40:	1b0d      	subs	r5, r1, r4
    6e42:	e760      	b.n	6d06 <__aeabi_dsub+0x416>
    6e44:	4c52      	ldr	r4, [pc, #328]	; (6f90 <__aeabi_dsub+0x6a0>)
    6e46:	42a2      	cmp	r2, r4
    6e48:	d036      	beq.n	6eb8 <__aeabi_dsub+0x5c8>
    6e4a:	4274      	negs	r4, r6
    6e4c:	2680      	movs	r6, #128	; 0x80
    6e4e:	0436      	lsls	r6, r6, #16
    6e50:	46a1      	mov	r9, r4
    6e52:	4337      	orrs	r7, r6
    6e54:	e7be      	b.n	6dd4 <__aeabi_dsub+0x4e4>
    6e56:	0002      	movs	r2, r0
    6e58:	430a      	orrs	r2, r1
    6e5a:	d100      	bne.n	6e5e <__aeabi_dsub+0x56e>
    6e5c:	e574      	b.n	6948 <__aeabi_dsub+0x58>
    6e5e:	1a6a      	subs	r2, r5, r1
    6e60:	4690      	mov	r8, r2
    6e62:	4545      	cmp	r5, r8
    6e64:	41b6      	sbcs	r6, r6
    6e66:	1a3a      	subs	r2, r7, r0
    6e68:	4276      	negs	r6, r6
    6e6a:	1b92      	subs	r2, r2, r6
    6e6c:	4694      	mov	ip, r2
    6e6e:	0212      	lsls	r2, r2, #8
    6e70:	d400      	bmi.n	6e74 <__aeabi_dsub+0x584>
    6e72:	e5f7      	b.n	6a64 <__aeabi_dsub+0x174>
    6e74:	1b4d      	subs	r5, r1, r5
    6e76:	42a9      	cmp	r1, r5
    6e78:	4189      	sbcs	r1, r1
    6e7a:	1bc7      	subs	r7, r0, r7
    6e7c:	4249      	negs	r1, r1
    6e7e:	1a7f      	subs	r7, r7, r1
    6e80:	469a      	mov	sl, r3
    6e82:	e561      	b.n	6948 <__aeabi_dsub+0x58>
    6e84:	0002      	movs	r2, r0
    6e86:	430a      	orrs	r2, r1
    6e88:	d03a      	beq.n	6f00 <__aeabi_dsub+0x610>
    6e8a:	08ed      	lsrs	r5, r5, #3
    6e8c:	077c      	lsls	r4, r7, #29
    6e8e:	432c      	orrs	r4, r5
    6e90:	2580      	movs	r5, #128	; 0x80
    6e92:	08fa      	lsrs	r2, r7, #3
    6e94:	032d      	lsls	r5, r5, #12
    6e96:	422a      	tst	r2, r5
    6e98:	d008      	beq.n	6eac <__aeabi_dsub+0x5bc>
    6e9a:	08c7      	lsrs	r7, r0, #3
    6e9c:	422f      	tst	r7, r5
    6e9e:	d105      	bne.n	6eac <__aeabi_dsub+0x5bc>
    6ea0:	0745      	lsls	r5, r0, #29
    6ea2:	002c      	movs	r4, r5
    6ea4:	003a      	movs	r2, r7
    6ea6:	469a      	mov	sl, r3
    6ea8:	08c9      	lsrs	r1, r1, #3
    6eaa:	430c      	orrs	r4, r1
    6eac:	0f67      	lsrs	r7, r4, #29
    6eae:	00d2      	lsls	r2, r2, #3
    6eb0:	00e5      	lsls	r5, r4, #3
    6eb2:	4317      	orrs	r7, r2
    6eb4:	4c36      	ldr	r4, [pc, #216]	; (6f90 <__aeabi_dsub+0x6a0>)
    6eb6:	e547      	b.n	6948 <__aeabi_dsub+0x58>
    6eb8:	0007      	movs	r7, r0
    6eba:	000d      	movs	r5, r1
    6ebc:	0014      	movs	r4, r2
    6ebe:	e543      	b.n	6948 <__aeabi_dsub+0x58>
    6ec0:	003a      	movs	r2, r7
    6ec2:	432a      	orrs	r2, r5
    6ec4:	d043      	beq.n	6f4e <__aeabi_dsub+0x65e>
    6ec6:	0002      	movs	r2, r0
    6ec8:	430a      	orrs	r2, r1
    6eca:	d019      	beq.n	6f00 <__aeabi_dsub+0x610>
    6ecc:	08ed      	lsrs	r5, r5, #3
    6ece:	077c      	lsls	r4, r7, #29
    6ed0:	432c      	orrs	r4, r5
    6ed2:	2580      	movs	r5, #128	; 0x80
    6ed4:	08fa      	lsrs	r2, r7, #3
    6ed6:	032d      	lsls	r5, r5, #12
    6ed8:	422a      	tst	r2, r5
    6eda:	d007      	beq.n	6eec <__aeabi_dsub+0x5fc>
    6edc:	08c6      	lsrs	r6, r0, #3
    6ede:	422e      	tst	r6, r5
    6ee0:	d104      	bne.n	6eec <__aeabi_dsub+0x5fc>
    6ee2:	0747      	lsls	r7, r0, #29
    6ee4:	003c      	movs	r4, r7
    6ee6:	0032      	movs	r2, r6
    6ee8:	08c9      	lsrs	r1, r1, #3
    6eea:	430c      	orrs	r4, r1
    6eec:	00d7      	lsls	r7, r2, #3
    6eee:	0f62      	lsrs	r2, r4, #29
    6ef0:	00e5      	lsls	r5, r4, #3
    6ef2:	4317      	orrs	r7, r2
    6ef4:	469a      	mov	sl, r3
    6ef6:	4c26      	ldr	r4, [pc, #152]	; (6f90 <__aeabi_dsub+0x6a0>)
    6ef8:	e526      	b.n	6948 <__aeabi_dsub+0x58>
    6efa:	2200      	movs	r2, #0
    6efc:	2500      	movs	r5, #0
    6efe:	e544      	b.n	698a <__aeabi_dsub+0x9a>
    6f00:	4c23      	ldr	r4, [pc, #140]	; (6f90 <__aeabi_dsub+0x6a0>)
    6f02:	e521      	b.n	6948 <__aeabi_dsub+0x58>
    6f04:	2000      	movs	r0, #0
    6f06:	e749      	b.n	6d9c <__aeabi_dsub+0x4ac>
    6f08:	2300      	movs	r3, #0
    6f0a:	2500      	movs	r5, #0
    6f0c:	e5bb      	b.n	6a86 <__aeabi_dsub+0x196>
    6f0e:	464c      	mov	r4, r9
    6f10:	003e      	movs	r6, r7
    6f12:	3c20      	subs	r4, #32
    6f14:	40e6      	lsrs	r6, r4
    6f16:	464c      	mov	r4, r9
    6f18:	46b4      	mov	ip, r6
    6f1a:	2c20      	cmp	r4, #32
    6f1c:	d031      	beq.n	6f82 <__aeabi_dsub+0x692>
    6f1e:	2440      	movs	r4, #64	; 0x40
    6f20:	464e      	mov	r6, r9
    6f22:	1ba6      	subs	r6, r4, r6
    6f24:	40b7      	lsls	r7, r6
    6f26:	433d      	orrs	r5, r7
    6f28:	1e6c      	subs	r4, r5, #1
    6f2a:	41a5      	sbcs	r5, r4
    6f2c:	4664      	mov	r4, ip
    6f2e:	432c      	orrs	r4, r5
    6f30:	2700      	movs	r7, #0
    6f32:	1b0d      	subs	r5, r1, r4
    6f34:	e6e7      	b.n	6d06 <__aeabi_dsub+0x416>
    6f36:	2280      	movs	r2, #128	; 0x80
    6f38:	2300      	movs	r3, #0
    6f3a:	0312      	lsls	r2, r2, #12
    6f3c:	4c14      	ldr	r4, [pc, #80]	; (6f90 <__aeabi_dsub+0x6a0>)
    6f3e:	2500      	movs	r5, #0
    6f40:	e5a1      	b.n	6a86 <__aeabi_dsub+0x196>
    6f42:	433d      	orrs	r5, r7
    6f44:	1e6f      	subs	r7, r5, #1
    6f46:	41bd      	sbcs	r5, r7
    6f48:	2700      	movs	r7, #0
    6f4a:	b2ed      	uxtb	r5, r5
    6f4c:	e760      	b.n	6e10 <__aeabi_dsub+0x520>
    6f4e:	0007      	movs	r7, r0
    6f50:	000d      	movs	r5, r1
    6f52:	4c0f      	ldr	r4, [pc, #60]	; (6f90 <__aeabi_dsub+0x6a0>)
    6f54:	e4f8      	b.n	6948 <__aeabi_dsub+0x58>
    6f56:	0007      	movs	r7, r0
    6f58:	000d      	movs	r5, r1
    6f5a:	e4f5      	b.n	6948 <__aeabi_dsub+0x58>
    6f5c:	464e      	mov	r6, r9
    6f5e:	003c      	movs	r4, r7
    6f60:	3e20      	subs	r6, #32
    6f62:	40f4      	lsrs	r4, r6
    6f64:	46a0      	mov	r8, r4
    6f66:	464c      	mov	r4, r9
    6f68:	2c20      	cmp	r4, #32
    6f6a:	d00e      	beq.n	6f8a <__aeabi_dsub+0x69a>
    6f6c:	2440      	movs	r4, #64	; 0x40
    6f6e:	464e      	mov	r6, r9
    6f70:	1ba4      	subs	r4, r4, r6
    6f72:	40a7      	lsls	r7, r4
    6f74:	433d      	orrs	r5, r7
    6f76:	1e6f      	subs	r7, r5, #1
    6f78:	41bd      	sbcs	r5, r7
    6f7a:	4644      	mov	r4, r8
    6f7c:	2700      	movs	r7, #0
    6f7e:	4325      	orrs	r5, r4
    6f80:	e746      	b.n	6e10 <__aeabi_dsub+0x520>
    6f82:	2700      	movs	r7, #0
    6f84:	e7cf      	b.n	6f26 <__aeabi_dsub+0x636>
    6f86:	000d      	movs	r5, r1
    6f88:	e573      	b.n	6a72 <__aeabi_dsub+0x182>
    6f8a:	2700      	movs	r7, #0
    6f8c:	e7f2      	b.n	6f74 <__aeabi_dsub+0x684>
    6f8e:	46c0      	nop			; (mov r8, r8)
    6f90:	000007ff 	.word	0x000007ff
    6f94:	ff7fffff 	.word	0xff7fffff

00006f98 <__aeabi_d2iz>:
    6f98:	030b      	lsls	r3, r1, #12
    6f9a:	b530      	push	{r4, r5, lr}
    6f9c:	4d13      	ldr	r5, [pc, #76]	; (6fec <__aeabi_d2iz+0x54>)
    6f9e:	0b1a      	lsrs	r2, r3, #12
    6fa0:	004b      	lsls	r3, r1, #1
    6fa2:	0d5b      	lsrs	r3, r3, #21
    6fa4:	0fc9      	lsrs	r1, r1, #31
    6fa6:	2400      	movs	r4, #0
    6fa8:	42ab      	cmp	r3, r5
    6faa:	dd11      	ble.n	6fd0 <__aeabi_d2iz+0x38>
    6fac:	4c10      	ldr	r4, [pc, #64]	; (6ff0 <__aeabi_d2iz+0x58>)
    6fae:	42a3      	cmp	r3, r4
    6fb0:	dc10      	bgt.n	6fd4 <__aeabi_d2iz+0x3c>
    6fb2:	2480      	movs	r4, #128	; 0x80
    6fb4:	0364      	lsls	r4, r4, #13
    6fb6:	4322      	orrs	r2, r4
    6fb8:	4c0e      	ldr	r4, [pc, #56]	; (6ff4 <__aeabi_d2iz+0x5c>)
    6fba:	1ae4      	subs	r4, r4, r3
    6fbc:	2c1f      	cmp	r4, #31
    6fbe:	dd0c      	ble.n	6fda <__aeabi_d2iz+0x42>
    6fc0:	480d      	ldr	r0, [pc, #52]	; (6ff8 <__aeabi_d2iz+0x60>)
    6fc2:	1ac3      	subs	r3, r0, r3
    6fc4:	40da      	lsrs	r2, r3
    6fc6:	0013      	movs	r3, r2
    6fc8:	425c      	negs	r4, r3
    6fca:	2900      	cmp	r1, #0
    6fcc:	d100      	bne.n	6fd0 <__aeabi_d2iz+0x38>
    6fce:	001c      	movs	r4, r3
    6fd0:	0020      	movs	r0, r4
    6fd2:	bd30      	pop	{r4, r5, pc}
    6fd4:	4b09      	ldr	r3, [pc, #36]	; (6ffc <__aeabi_d2iz+0x64>)
    6fd6:	18cc      	adds	r4, r1, r3
    6fd8:	e7fa      	b.n	6fd0 <__aeabi_d2iz+0x38>
    6fda:	40e0      	lsrs	r0, r4
    6fdc:	4c08      	ldr	r4, [pc, #32]	; (7000 <__aeabi_d2iz+0x68>)
    6fde:	46a4      	mov	ip, r4
    6fe0:	4463      	add	r3, ip
    6fe2:	409a      	lsls	r2, r3
    6fe4:	0013      	movs	r3, r2
    6fe6:	4303      	orrs	r3, r0
    6fe8:	e7ee      	b.n	6fc8 <__aeabi_d2iz+0x30>
    6fea:	46c0      	nop			; (mov r8, r8)
    6fec:	000003fe 	.word	0x000003fe
    6ff0:	0000041d 	.word	0x0000041d
    6ff4:	00000433 	.word	0x00000433
    6ff8:	00000413 	.word	0x00000413
    6ffc:	7fffffff 	.word	0x7fffffff
    7000:	fffffbed 	.word	0xfffffbed

00007004 <__aeabi_ui2d>:
    7004:	b570      	push	{r4, r5, r6, lr}
    7006:	1e05      	subs	r5, r0, #0
    7008:	d028      	beq.n	705c <__aeabi_ui2d+0x58>
    700a:	f000 f833 	bl	7074 <__clzsi2>
    700e:	4b15      	ldr	r3, [pc, #84]	; (7064 <__aeabi_ui2d+0x60>)
    7010:	4a15      	ldr	r2, [pc, #84]	; (7068 <__aeabi_ui2d+0x64>)
    7012:	1a1b      	subs	r3, r3, r0
    7014:	1ad2      	subs	r2, r2, r3
    7016:	2a1f      	cmp	r2, #31
    7018:	dd16      	ble.n	7048 <__aeabi_ui2d+0x44>
    701a:	002c      	movs	r4, r5
    701c:	4a13      	ldr	r2, [pc, #76]	; (706c <__aeabi_ui2d+0x68>)
    701e:	2500      	movs	r5, #0
    7020:	1ad2      	subs	r2, r2, r3
    7022:	4094      	lsls	r4, r2
    7024:	055a      	lsls	r2, r3, #21
    7026:	0324      	lsls	r4, r4, #12
    7028:	0b24      	lsrs	r4, r4, #12
    702a:	0d52      	lsrs	r2, r2, #21
    702c:	2100      	movs	r1, #0
    702e:	0324      	lsls	r4, r4, #12
    7030:	0d0b      	lsrs	r3, r1, #20
    7032:	0b24      	lsrs	r4, r4, #12
    7034:	051b      	lsls	r3, r3, #20
    7036:	4323      	orrs	r3, r4
    7038:	4c0d      	ldr	r4, [pc, #52]	; (7070 <__aeabi_ui2d+0x6c>)
    703a:	0512      	lsls	r2, r2, #20
    703c:	4023      	ands	r3, r4
    703e:	4313      	orrs	r3, r2
    7040:	005b      	lsls	r3, r3, #1
    7042:	0028      	movs	r0, r5
    7044:	0859      	lsrs	r1, r3, #1
    7046:	bd70      	pop	{r4, r5, r6, pc}
    7048:	210b      	movs	r1, #11
    704a:	002c      	movs	r4, r5
    704c:	1a08      	subs	r0, r1, r0
    704e:	40c4      	lsrs	r4, r0
    7050:	4095      	lsls	r5, r2
    7052:	0324      	lsls	r4, r4, #12
    7054:	055a      	lsls	r2, r3, #21
    7056:	0b24      	lsrs	r4, r4, #12
    7058:	0d52      	lsrs	r2, r2, #21
    705a:	e7e7      	b.n	702c <__aeabi_ui2d+0x28>
    705c:	2200      	movs	r2, #0
    705e:	2400      	movs	r4, #0
    7060:	e7e4      	b.n	702c <__aeabi_ui2d+0x28>
    7062:	46c0      	nop			; (mov r8, r8)
    7064:	0000041e 	.word	0x0000041e
    7068:	00000433 	.word	0x00000433
    706c:	00000413 	.word	0x00000413
    7070:	800fffff 	.word	0x800fffff

00007074 <__clzsi2>:
    7074:	211c      	movs	r1, #28
    7076:	2301      	movs	r3, #1
    7078:	041b      	lsls	r3, r3, #16
    707a:	4298      	cmp	r0, r3
    707c:	d301      	bcc.n	7082 <__clzsi2+0xe>
    707e:	0c00      	lsrs	r0, r0, #16
    7080:	3910      	subs	r1, #16
    7082:	0a1b      	lsrs	r3, r3, #8
    7084:	4298      	cmp	r0, r3
    7086:	d301      	bcc.n	708c <__clzsi2+0x18>
    7088:	0a00      	lsrs	r0, r0, #8
    708a:	3908      	subs	r1, #8
    708c:	091b      	lsrs	r3, r3, #4
    708e:	4298      	cmp	r0, r3
    7090:	d301      	bcc.n	7096 <__clzsi2+0x22>
    7092:	0900      	lsrs	r0, r0, #4
    7094:	3904      	subs	r1, #4
    7096:	a202      	add	r2, pc, #8	; (adr r2, 70a0 <__clzsi2+0x2c>)
    7098:	5c10      	ldrb	r0, [r2, r0]
    709a:	1840      	adds	r0, r0, r1
    709c:	4770      	bx	lr
    709e:	46c0      	nop			; (mov r8, r8)
    70a0:	02020304 	.word	0x02020304
    70a4:	01010101 	.word	0x01010101
	...

000070b0 <__clzdi2>:
    70b0:	b510      	push	{r4, lr}
    70b2:	2900      	cmp	r1, #0
    70b4:	d103      	bne.n	70be <__clzdi2+0xe>
    70b6:	f7ff ffdd 	bl	7074 <__clzsi2>
    70ba:	3020      	adds	r0, #32
    70bc:	e002      	b.n	70c4 <__clzdi2+0x14>
    70be:	1c08      	adds	r0, r1, #0
    70c0:	f7ff ffd8 	bl	7074 <__clzsi2>
    70c4:	bd10      	pop	{r4, pc}
    70c6:	46c0      	nop			; (mov r8, r8)

000070c8 <__libc_init_array>:
    70c8:	4b0e      	ldr	r3, [pc, #56]	; (7104 <__libc_init_array+0x3c>)
    70ca:	b570      	push	{r4, r5, r6, lr}
    70cc:	2500      	movs	r5, #0
    70ce:	001e      	movs	r6, r3
    70d0:	4c0d      	ldr	r4, [pc, #52]	; (7108 <__libc_init_array+0x40>)
    70d2:	1ae4      	subs	r4, r4, r3
    70d4:	10a4      	asrs	r4, r4, #2
    70d6:	42a5      	cmp	r5, r4
    70d8:	d004      	beq.n	70e4 <__libc_init_array+0x1c>
    70da:	00ab      	lsls	r3, r5, #2
    70dc:	58f3      	ldr	r3, [r6, r3]
    70de:	4798      	blx	r3
    70e0:	3501      	adds	r5, #1
    70e2:	e7f8      	b.n	70d6 <__libc_init_array+0xe>
    70e4:	f001 fc6a 	bl	89bc <_init>
    70e8:	4b08      	ldr	r3, [pc, #32]	; (710c <__libc_init_array+0x44>)
    70ea:	2500      	movs	r5, #0
    70ec:	001e      	movs	r6, r3
    70ee:	4c08      	ldr	r4, [pc, #32]	; (7110 <__libc_init_array+0x48>)
    70f0:	1ae4      	subs	r4, r4, r3
    70f2:	10a4      	asrs	r4, r4, #2
    70f4:	42a5      	cmp	r5, r4
    70f6:	d004      	beq.n	7102 <__libc_init_array+0x3a>
    70f8:	00ab      	lsls	r3, r5, #2
    70fa:	58f3      	ldr	r3, [r6, r3]
    70fc:	4798      	blx	r3
    70fe:	3501      	adds	r5, #1
    7100:	e7f8      	b.n	70f4 <__libc_init_array+0x2c>
    7102:	bd70      	pop	{r4, r5, r6, pc}
    7104:	000089c8 	.word	0x000089c8
    7108:	000089c8 	.word	0x000089c8
    710c:	000089c8 	.word	0x000089c8
    7110:	000089cc 	.word	0x000089cc

00007114 <memcpy>:
    7114:	2300      	movs	r3, #0
    7116:	b510      	push	{r4, lr}
    7118:	429a      	cmp	r2, r3
    711a:	d003      	beq.n	7124 <memcpy+0x10>
    711c:	5ccc      	ldrb	r4, [r1, r3]
    711e:	54c4      	strb	r4, [r0, r3]
    7120:	3301      	adds	r3, #1
    7122:	e7f9      	b.n	7118 <memcpy+0x4>
    7124:	bd10      	pop	{r4, pc}
	...

00007128 <siprintf>:
    7128:	b40e      	push	{r1, r2, r3}
    712a:	b510      	push	{r4, lr}
    712c:	b09d      	sub	sp, #116	; 0x74
    712e:	a902      	add	r1, sp, #8
    7130:	9002      	str	r0, [sp, #8]
    7132:	6108      	str	r0, [r1, #16]
    7134:	480b      	ldr	r0, [pc, #44]	; (7164 <siprintf+0x3c>)
    7136:	2482      	movs	r4, #130	; 0x82
    7138:	6088      	str	r0, [r1, #8]
    713a:	6148      	str	r0, [r1, #20]
    713c:	2001      	movs	r0, #1
    713e:	4240      	negs	r0, r0
    7140:	ab1f      	add	r3, sp, #124	; 0x7c
    7142:	81c8      	strh	r0, [r1, #14]
    7144:	4808      	ldr	r0, [pc, #32]	; (7168 <siprintf+0x40>)
    7146:	cb04      	ldmia	r3!, {r2}
    7148:	00a4      	lsls	r4, r4, #2
    714a:	6800      	ldr	r0, [r0, #0]
    714c:	9301      	str	r3, [sp, #4]
    714e:	818c      	strh	r4, [r1, #12]
    7150:	f000 f8b2 	bl	72b8 <_svfiprintf_r>
    7154:	2300      	movs	r3, #0
    7156:	9a02      	ldr	r2, [sp, #8]
    7158:	7013      	strb	r3, [r2, #0]
    715a:	b01d      	add	sp, #116	; 0x74
    715c:	bc10      	pop	{r4}
    715e:	bc08      	pop	{r3}
    7160:	b003      	add	sp, #12
    7162:	4718      	bx	r3
    7164:	7fffffff 	.word	0x7fffffff
    7168:	200000b4 	.word	0x200000b4

0000716c <siscanf>:
    716c:	b40e      	push	{r1, r2, r3}
    716e:	2381      	movs	r3, #129	; 0x81
    7170:	b570      	push	{r4, r5, r6, lr}
    7172:	b09d      	sub	sp, #116	; 0x74
    7174:	ac02      	add	r4, sp, #8
    7176:	ad21      	add	r5, sp, #132	; 0x84
    7178:	009b      	lsls	r3, r3, #2
    717a:	cd40      	ldmia	r5!, {r6}
    717c:	81a3      	strh	r3, [r4, #12]
    717e:	9002      	str	r0, [sp, #8]
    7180:	9006      	str	r0, [sp, #24]
    7182:	f000 f81d 	bl	71c0 <strlen>
    7186:	4b0b      	ldr	r3, [pc, #44]	; (71b4 <siscanf+0x48>)
    7188:	6060      	str	r0, [r4, #4]
    718a:	6263      	str	r3, [r4, #36]	; 0x24
    718c:	2300      	movs	r3, #0
    718e:	6160      	str	r0, [r4, #20]
    7190:	4809      	ldr	r0, [pc, #36]	; (71b8 <siscanf+0x4c>)
    7192:	6363      	str	r3, [r4, #52]	; 0x34
    7194:	64a3      	str	r3, [r4, #72]	; 0x48
    7196:	3b01      	subs	r3, #1
    7198:	81e3      	strh	r3, [r4, #14]
    719a:	0032      	movs	r2, r6
    719c:	002b      	movs	r3, r5
    719e:	0021      	movs	r1, r4
    71a0:	6800      	ldr	r0, [r0, #0]
    71a2:	9501      	str	r5, [sp, #4]
    71a4:	f000 f9e2 	bl	756c <__ssvfiscanf_r>
    71a8:	b01d      	add	sp, #116	; 0x74
    71aa:	bc70      	pop	{r4, r5, r6}
    71ac:	bc08      	pop	{r3}
    71ae:	b003      	add	sp, #12
    71b0:	4718      	bx	r3
    71b2:	46c0      	nop			; (mov r8, r8)
    71b4:	000071bd 	.word	0x000071bd
    71b8:	200000b4 	.word	0x200000b4

000071bc <__seofread>:
    71bc:	2000      	movs	r0, #0
    71be:	4770      	bx	lr

000071c0 <strlen>:
    71c0:	2300      	movs	r3, #0
    71c2:	5cc2      	ldrb	r2, [r0, r3]
    71c4:	3301      	adds	r3, #1
    71c6:	2a00      	cmp	r2, #0
    71c8:	d1fb      	bne.n	71c2 <strlen+0x2>
    71ca:	1e58      	subs	r0, r3, #1
    71cc:	4770      	bx	lr

000071ce <strncmp>:
    71ce:	2300      	movs	r3, #0
    71d0:	b530      	push	{r4, r5, lr}
    71d2:	429a      	cmp	r2, r3
    71d4:	d00b      	beq.n	71ee <strncmp+0x20>
    71d6:	3a01      	subs	r2, #1
    71d8:	5cc4      	ldrb	r4, [r0, r3]
    71da:	5ccd      	ldrb	r5, [r1, r3]
    71dc:	42ac      	cmp	r4, r5
    71de:	d105      	bne.n	71ec <strncmp+0x1e>
    71e0:	429a      	cmp	r2, r3
    71e2:	d002      	beq.n	71ea <strncmp+0x1c>
    71e4:	3301      	adds	r3, #1
    71e6:	2c00      	cmp	r4, #0
    71e8:	d1f6      	bne.n	71d8 <strncmp+0xa>
    71ea:	0025      	movs	r5, r4
    71ec:	1b63      	subs	r3, r4, r5
    71ee:	0018      	movs	r0, r3
    71f0:	bd30      	pop	{r4, r5, pc}
	...

000071f4 <__ssputs_r>:
    71f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    71f6:	688e      	ldr	r6, [r1, #8]
    71f8:	b085      	sub	sp, #20
    71fa:	0007      	movs	r7, r0
    71fc:	000c      	movs	r4, r1
    71fe:	9203      	str	r2, [sp, #12]
    7200:	9301      	str	r3, [sp, #4]
    7202:	429e      	cmp	r6, r3
    7204:	d843      	bhi.n	728e <__ssputs_r+0x9a>
    7206:	2390      	movs	r3, #144	; 0x90
    7208:	898a      	ldrh	r2, [r1, #12]
    720a:	00db      	lsls	r3, r3, #3
    720c:	421a      	tst	r2, r3
    720e:	d03e      	beq.n	728e <__ssputs_r+0x9a>
    7210:	2503      	movs	r5, #3
    7212:	6909      	ldr	r1, [r1, #16]
    7214:	6823      	ldr	r3, [r4, #0]
    7216:	9801      	ldr	r0, [sp, #4]
    7218:	1a5b      	subs	r3, r3, r1
    721a:	9302      	str	r3, [sp, #8]
    721c:	6963      	ldr	r3, [r4, #20]
    721e:	435d      	muls	r5, r3
    7220:	0feb      	lsrs	r3, r5, #31
    7222:	195d      	adds	r5, r3, r5
    7224:	9b02      	ldr	r3, [sp, #8]
    7226:	106d      	asrs	r5, r5, #1
    7228:	3301      	adds	r3, #1
    722a:	181b      	adds	r3, r3, r0
    722c:	42ab      	cmp	r3, r5
    722e:	d900      	bls.n	7232 <__ssputs_r+0x3e>
    7230:	001d      	movs	r5, r3
    7232:	0553      	lsls	r3, r2, #21
    7234:	d510      	bpl.n	7258 <__ssputs_r+0x64>
    7236:	0029      	movs	r1, r5
    7238:	0038      	movs	r0, r7
    723a:	f000 fff3 	bl	8224 <_malloc_r>
    723e:	1e06      	subs	r6, r0, #0
    7240:	d014      	beq.n	726c <__ssputs_r+0x78>
    7242:	9a02      	ldr	r2, [sp, #8]
    7244:	6921      	ldr	r1, [r4, #16]
    7246:	f7ff ff65 	bl	7114 <memcpy>
    724a:	89a2      	ldrh	r2, [r4, #12]
    724c:	4b19      	ldr	r3, [pc, #100]	; (72b4 <__ssputs_r+0xc0>)
    724e:	4013      	ands	r3, r2
    7250:	2280      	movs	r2, #128	; 0x80
    7252:	4313      	orrs	r3, r2
    7254:	81a3      	strh	r3, [r4, #12]
    7256:	e012      	b.n	727e <__ssputs_r+0x8a>
    7258:	002a      	movs	r2, r5
    725a:	0038      	movs	r0, r7
    725c:	f001 f838 	bl	82d0 <_realloc_r>
    7260:	1e06      	subs	r6, r0, #0
    7262:	d10c      	bne.n	727e <__ssputs_r+0x8a>
    7264:	6921      	ldr	r1, [r4, #16]
    7266:	0038      	movs	r0, r7
    7268:	f000 ff96 	bl	8198 <_free_r>
    726c:	230c      	movs	r3, #12
    726e:	2240      	movs	r2, #64	; 0x40
    7270:	2001      	movs	r0, #1
    7272:	603b      	str	r3, [r7, #0]
    7274:	89a3      	ldrh	r3, [r4, #12]
    7276:	4240      	negs	r0, r0
    7278:	4313      	orrs	r3, r2
    727a:	81a3      	strh	r3, [r4, #12]
    727c:	e017      	b.n	72ae <__ssputs_r+0xba>
    727e:	9b02      	ldr	r3, [sp, #8]
    7280:	6126      	str	r6, [r4, #16]
    7282:	18f6      	adds	r6, r6, r3
    7284:	6026      	str	r6, [r4, #0]
    7286:	6165      	str	r5, [r4, #20]
    7288:	9e01      	ldr	r6, [sp, #4]
    728a:	1aed      	subs	r5, r5, r3
    728c:	60a5      	str	r5, [r4, #8]
    728e:	9b01      	ldr	r3, [sp, #4]
    7290:	42b3      	cmp	r3, r6
    7292:	d200      	bcs.n	7296 <__ssputs_r+0xa2>
    7294:	001e      	movs	r6, r3
    7296:	0032      	movs	r2, r6
    7298:	9903      	ldr	r1, [sp, #12]
    729a:	6820      	ldr	r0, [r4, #0]
    729c:	f000 ff67 	bl	816e <memmove>
    72a0:	2000      	movs	r0, #0
    72a2:	68a3      	ldr	r3, [r4, #8]
    72a4:	1b9b      	subs	r3, r3, r6
    72a6:	60a3      	str	r3, [r4, #8]
    72a8:	6823      	ldr	r3, [r4, #0]
    72aa:	199e      	adds	r6, r3, r6
    72ac:	6026      	str	r6, [r4, #0]
    72ae:	b005      	add	sp, #20
    72b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72b2:	46c0      	nop			; (mov r8, r8)
    72b4:	fffffb7f 	.word	0xfffffb7f

000072b8 <_svfiprintf_r>:
    72b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    72ba:	b09f      	sub	sp, #124	; 0x7c
    72bc:	9002      	str	r0, [sp, #8]
    72be:	9305      	str	r3, [sp, #20]
    72c0:	898b      	ldrh	r3, [r1, #12]
    72c2:	000f      	movs	r7, r1
    72c4:	0016      	movs	r6, r2
    72c6:	061b      	lsls	r3, r3, #24
    72c8:	d510      	bpl.n	72ec <_svfiprintf_r+0x34>
    72ca:	690b      	ldr	r3, [r1, #16]
    72cc:	2b00      	cmp	r3, #0
    72ce:	d10d      	bne.n	72ec <_svfiprintf_r+0x34>
    72d0:	2140      	movs	r1, #64	; 0x40
    72d2:	f000 ffa7 	bl	8224 <_malloc_r>
    72d6:	6038      	str	r0, [r7, #0]
    72d8:	6138      	str	r0, [r7, #16]
    72da:	2800      	cmp	r0, #0
    72dc:	d104      	bne.n	72e8 <_svfiprintf_r+0x30>
    72de:	230c      	movs	r3, #12
    72e0:	9a02      	ldr	r2, [sp, #8]
    72e2:	3801      	subs	r0, #1
    72e4:	6013      	str	r3, [r2, #0]
    72e6:	e0d8      	b.n	749a <_svfiprintf_r+0x1e2>
    72e8:	2340      	movs	r3, #64	; 0x40
    72ea:	617b      	str	r3, [r7, #20]
    72ec:	2300      	movs	r3, #0
    72ee:	ad06      	add	r5, sp, #24
    72f0:	616b      	str	r3, [r5, #20]
    72f2:	3320      	adds	r3, #32
    72f4:	766b      	strb	r3, [r5, #25]
    72f6:	3310      	adds	r3, #16
    72f8:	76ab      	strb	r3, [r5, #26]
    72fa:	0034      	movs	r4, r6
    72fc:	7823      	ldrb	r3, [r4, #0]
    72fe:	2b00      	cmp	r3, #0
    7300:	d103      	bne.n	730a <_svfiprintf_r+0x52>
    7302:	1ba3      	subs	r3, r4, r6
    7304:	9304      	str	r3, [sp, #16]
    7306:	d012      	beq.n	732e <_svfiprintf_r+0x76>
    7308:	e003      	b.n	7312 <_svfiprintf_r+0x5a>
    730a:	2b25      	cmp	r3, #37	; 0x25
    730c:	d0f9      	beq.n	7302 <_svfiprintf_r+0x4a>
    730e:	3401      	adds	r4, #1
    7310:	e7f4      	b.n	72fc <_svfiprintf_r+0x44>
    7312:	1ba3      	subs	r3, r4, r6
    7314:	0032      	movs	r2, r6
    7316:	0039      	movs	r1, r7
    7318:	9802      	ldr	r0, [sp, #8]
    731a:	f7ff ff6b 	bl	71f4 <__ssputs_r>
    731e:	1c43      	adds	r3, r0, #1
    7320:	d100      	bne.n	7324 <_svfiprintf_r+0x6c>
    7322:	e0b4      	b.n	748e <_svfiprintf_r+0x1d6>
    7324:	696a      	ldr	r2, [r5, #20]
    7326:	9b04      	ldr	r3, [sp, #16]
    7328:	4694      	mov	ip, r2
    732a:	4463      	add	r3, ip
    732c:	616b      	str	r3, [r5, #20]
    732e:	7823      	ldrb	r3, [r4, #0]
    7330:	2b00      	cmp	r3, #0
    7332:	d100      	bne.n	7336 <_svfiprintf_r+0x7e>
    7334:	e0ab      	b.n	748e <_svfiprintf_r+0x1d6>
    7336:	2201      	movs	r2, #1
    7338:	2300      	movs	r3, #0
    733a:	4252      	negs	r2, r2
    733c:	606a      	str	r2, [r5, #4]
    733e:	a902      	add	r1, sp, #8
    7340:	3254      	adds	r2, #84	; 0x54
    7342:	1852      	adds	r2, r2, r1
    7344:	3401      	adds	r4, #1
    7346:	602b      	str	r3, [r5, #0]
    7348:	60eb      	str	r3, [r5, #12]
    734a:	60ab      	str	r3, [r5, #8]
    734c:	7013      	strb	r3, [r2, #0]
    734e:	65ab      	str	r3, [r5, #88]	; 0x58
    7350:	4e53      	ldr	r6, [pc, #332]	; (74a0 <_svfiprintf_r+0x1e8>)
    7352:	7821      	ldrb	r1, [r4, #0]
    7354:	2205      	movs	r2, #5
    7356:	0030      	movs	r0, r6
    7358:	f000 fefe 	bl	8158 <memchr>
    735c:	2800      	cmp	r0, #0
    735e:	d007      	beq.n	7370 <_svfiprintf_r+0xb8>
    7360:	2301      	movs	r3, #1
    7362:	1b80      	subs	r0, r0, r6
    7364:	4083      	lsls	r3, r0
    7366:	682a      	ldr	r2, [r5, #0]
    7368:	3401      	adds	r4, #1
    736a:	4313      	orrs	r3, r2
    736c:	602b      	str	r3, [r5, #0]
    736e:	e7ef      	b.n	7350 <_svfiprintf_r+0x98>
    7370:	682b      	ldr	r3, [r5, #0]
    7372:	06da      	lsls	r2, r3, #27
    7374:	d504      	bpl.n	7380 <_svfiprintf_r+0xc8>
    7376:	2253      	movs	r2, #83	; 0x53
    7378:	2120      	movs	r1, #32
    737a:	a802      	add	r0, sp, #8
    737c:	1812      	adds	r2, r2, r0
    737e:	7011      	strb	r1, [r2, #0]
    7380:	071a      	lsls	r2, r3, #28
    7382:	d504      	bpl.n	738e <_svfiprintf_r+0xd6>
    7384:	2253      	movs	r2, #83	; 0x53
    7386:	212b      	movs	r1, #43	; 0x2b
    7388:	a802      	add	r0, sp, #8
    738a:	1812      	adds	r2, r2, r0
    738c:	7011      	strb	r1, [r2, #0]
    738e:	7822      	ldrb	r2, [r4, #0]
    7390:	2a2a      	cmp	r2, #42	; 0x2a
    7392:	d003      	beq.n	739c <_svfiprintf_r+0xe4>
    7394:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7396:	2000      	movs	r0, #0
    7398:	210a      	movs	r1, #10
    739a:	e00e      	b.n	73ba <_svfiprintf_r+0x102>
    739c:	9a05      	ldr	r2, [sp, #20]
    739e:	1d11      	adds	r1, r2, #4
    73a0:	6812      	ldr	r2, [r2, #0]
    73a2:	9105      	str	r1, [sp, #20]
    73a4:	2a00      	cmp	r2, #0
    73a6:	db01      	blt.n	73ac <_svfiprintf_r+0xf4>
    73a8:	9209      	str	r2, [sp, #36]	; 0x24
    73aa:	e004      	b.n	73b6 <_svfiprintf_r+0xfe>
    73ac:	4252      	negs	r2, r2
    73ae:	60ea      	str	r2, [r5, #12]
    73b0:	2202      	movs	r2, #2
    73b2:	4313      	orrs	r3, r2
    73b4:	602b      	str	r3, [r5, #0]
    73b6:	3401      	adds	r4, #1
    73b8:	e00b      	b.n	73d2 <_svfiprintf_r+0x11a>
    73ba:	7822      	ldrb	r2, [r4, #0]
    73bc:	3a30      	subs	r2, #48	; 0x30
    73be:	2a09      	cmp	r2, #9
    73c0:	d804      	bhi.n	73cc <_svfiprintf_r+0x114>
    73c2:	434b      	muls	r3, r1
    73c4:	3401      	adds	r4, #1
    73c6:	189b      	adds	r3, r3, r2
    73c8:	2001      	movs	r0, #1
    73ca:	e7f6      	b.n	73ba <_svfiprintf_r+0x102>
    73cc:	2800      	cmp	r0, #0
    73ce:	d000      	beq.n	73d2 <_svfiprintf_r+0x11a>
    73d0:	9309      	str	r3, [sp, #36]	; 0x24
    73d2:	7823      	ldrb	r3, [r4, #0]
    73d4:	2b2e      	cmp	r3, #46	; 0x2e
    73d6:	d11e      	bne.n	7416 <_svfiprintf_r+0x15e>
    73d8:	7863      	ldrb	r3, [r4, #1]
    73da:	2b2a      	cmp	r3, #42	; 0x2a
    73dc:	d10a      	bne.n	73f4 <_svfiprintf_r+0x13c>
    73de:	9b05      	ldr	r3, [sp, #20]
    73e0:	3402      	adds	r4, #2
    73e2:	1d1a      	adds	r2, r3, #4
    73e4:	681b      	ldr	r3, [r3, #0]
    73e6:	9205      	str	r2, [sp, #20]
    73e8:	2b00      	cmp	r3, #0
    73ea:	da01      	bge.n	73f0 <_svfiprintf_r+0x138>
    73ec:	2301      	movs	r3, #1
    73ee:	425b      	negs	r3, r3
    73f0:	9307      	str	r3, [sp, #28]
    73f2:	e010      	b.n	7416 <_svfiprintf_r+0x15e>
    73f4:	2300      	movs	r3, #0
    73f6:	200a      	movs	r0, #10
    73f8:	001a      	movs	r2, r3
    73fa:	3401      	adds	r4, #1
    73fc:	606b      	str	r3, [r5, #4]
    73fe:	7821      	ldrb	r1, [r4, #0]
    7400:	3930      	subs	r1, #48	; 0x30
    7402:	2909      	cmp	r1, #9
    7404:	d804      	bhi.n	7410 <_svfiprintf_r+0x158>
    7406:	4342      	muls	r2, r0
    7408:	3401      	adds	r4, #1
    740a:	1852      	adds	r2, r2, r1
    740c:	2301      	movs	r3, #1
    740e:	e7f6      	b.n	73fe <_svfiprintf_r+0x146>
    7410:	2b00      	cmp	r3, #0
    7412:	d000      	beq.n	7416 <_svfiprintf_r+0x15e>
    7414:	9207      	str	r2, [sp, #28]
    7416:	4e23      	ldr	r6, [pc, #140]	; (74a4 <_svfiprintf_r+0x1ec>)
    7418:	7821      	ldrb	r1, [r4, #0]
    741a:	2203      	movs	r2, #3
    741c:	0030      	movs	r0, r6
    741e:	f000 fe9b 	bl	8158 <memchr>
    7422:	2800      	cmp	r0, #0
    7424:	d006      	beq.n	7434 <_svfiprintf_r+0x17c>
    7426:	2340      	movs	r3, #64	; 0x40
    7428:	1b80      	subs	r0, r0, r6
    742a:	4083      	lsls	r3, r0
    742c:	682a      	ldr	r2, [r5, #0]
    742e:	3401      	adds	r4, #1
    7430:	4313      	orrs	r3, r2
    7432:	602b      	str	r3, [r5, #0]
    7434:	7821      	ldrb	r1, [r4, #0]
    7436:	2206      	movs	r2, #6
    7438:	481b      	ldr	r0, [pc, #108]	; (74a8 <_svfiprintf_r+0x1f0>)
    743a:	1c66      	adds	r6, r4, #1
    743c:	7629      	strb	r1, [r5, #24]
    743e:	f000 fe8b 	bl	8158 <memchr>
    7442:	2800      	cmp	r0, #0
    7444:	d012      	beq.n	746c <_svfiprintf_r+0x1b4>
    7446:	4b19      	ldr	r3, [pc, #100]	; (74ac <_svfiprintf_r+0x1f4>)
    7448:	2b00      	cmp	r3, #0
    744a:	d106      	bne.n	745a <_svfiprintf_r+0x1a2>
    744c:	2207      	movs	r2, #7
    744e:	9b05      	ldr	r3, [sp, #20]
    7450:	3307      	adds	r3, #7
    7452:	4393      	bics	r3, r2
    7454:	3308      	adds	r3, #8
    7456:	9305      	str	r3, [sp, #20]
    7458:	e014      	b.n	7484 <_svfiprintf_r+0x1cc>
    745a:	ab05      	add	r3, sp, #20
    745c:	9300      	str	r3, [sp, #0]
    745e:	003a      	movs	r2, r7
    7460:	4b13      	ldr	r3, [pc, #76]	; (74b0 <_svfiprintf_r+0x1f8>)
    7462:	0029      	movs	r1, r5
    7464:	9802      	ldr	r0, [sp, #8]
    7466:	e000      	b.n	746a <_svfiprintf_r+0x1b2>
    7468:	bf00      	nop
    746a:	e007      	b.n	747c <_svfiprintf_r+0x1c4>
    746c:	ab05      	add	r3, sp, #20
    746e:	9300      	str	r3, [sp, #0]
    7470:	003a      	movs	r2, r7
    7472:	4b0f      	ldr	r3, [pc, #60]	; (74b0 <_svfiprintf_r+0x1f8>)
    7474:	0029      	movs	r1, r5
    7476:	9802      	ldr	r0, [sp, #8]
    7478:	f000 fa64 	bl	7944 <_printf_i>
    747c:	9003      	str	r0, [sp, #12]
    747e:	9b03      	ldr	r3, [sp, #12]
    7480:	3301      	adds	r3, #1
    7482:	d004      	beq.n	748e <_svfiprintf_r+0x1d6>
    7484:	696b      	ldr	r3, [r5, #20]
    7486:	9a03      	ldr	r2, [sp, #12]
    7488:	189b      	adds	r3, r3, r2
    748a:	616b      	str	r3, [r5, #20]
    748c:	e735      	b.n	72fa <_svfiprintf_r+0x42>
    748e:	89bb      	ldrh	r3, [r7, #12]
    7490:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7492:	065b      	lsls	r3, r3, #25
    7494:	d501      	bpl.n	749a <_svfiprintf_r+0x1e2>
    7496:	2001      	movs	r0, #1
    7498:	4240      	negs	r0, r0
    749a:	b01f      	add	sp, #124	; 0x7c
    749c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    749e:	46c0      	nop			; (mov r8, r8)
    74a0:	000087fe 	.word	0x000087fe
    74a4:	00008804 	.word	0x00008804
    74a8:	00008808 	.word	0x00008808
    74ac:	00000000 	.word	0x00000000
    74b0:	000071f5 	.word	0x000071f5

000074b4 <_sungetc_r>:
    74b4:	b570      	push	{r4, r5, r6, lr}
    74b6:	000e      	movs	r6, r1
    74b8:	0014      	movs	r4, r2
    74ba:	1c4b      	adds	r3, r1, #1
    74bc:	d102      	bne.n	74c4 <_sungetc_r+0x10>
    74be:	2001      	movs	r0, #1
    74c0:	4240      	negs	r0, r0
    74c2:	e032      	b.n	752a <_sungetc_r+0x76>
    74c4:	8993      	ldrh	r3, [r2, #12]
    74c6:	2220      	movs	r2, #32
    74c8:	4393      	bics	r3, r2
    74ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
    74cc:	81a3      	strh	r3, [r4, #12]
    74ce:	b2cd      	uxtb	r5, r1
    74d0:	6863      	ldr	r3, [r4, #4]
    74d2:	2a00      	cmp	r2, #0
    74d4:	d00e      	beq.n	74f4 <_sungetc_r+0x40>
    74d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    74d8:	4293      	cmp	r3, r2
    74da:	da05      	bge.n	74e8 <_sungetc_r+0x34>
    74dc:	6823      	ldr	r3, [r4, #0]
    74de:	3b01      	subs	r3, #1
    74e0:	6023      	str	r3, [r4, #0]
    74e2:	701e      	strb	r6, [r3, #0]
    74e4:	6863      	ldr	r3, [r4, #4]
    74e6:	e010      	b.n	750a <_sungetc_r+0x56>
    74e8:	0021      	movs	r1, r4
    74ea:	f000 fdf7 	bl	80dc <__submore>
    74ee:	2800      	cmp	r0, #0
    74f0:	d0f4      	beq.n	74dc <_sungetc_r+0x28>
    74f2:	e7e4      	b.n	74be <_sungetc_r+0xa>
    74f4:	6921      	ldr	r1, [r4, #16]
    74f6:	6822      	ldr	r2, [r4, #0]
    74f8:	2900      	cmp	r1, #0
    74fa:	d008      	beq.n	750e <_sungetc_r+0x5a>
    74fc:	4291      	cmp	r1, r2
    74fe:	d206      	bcs.n	750e <_sungetc_r+0x5a>
    7500:	1e51      	subs	r1, r2, #1
    7502:	7808      	ldrb	r0, [r1, #0]
    7504:	4285      	cmp	r5, r0
    7506:	d102      	bne.n	750e <_sungetc_r+0x5a>
    7508:	6021      	str	r1, [r4, #0]
    750a:	3301      	adds	r3, #1
    750c:	e00b      	b.n	7526 <_sungetc_r+0x72>
    750e:	6423      	str	r3, [r4, #64]	; 0x40
    7510:	0023      	movs	r3, r4
    7512:	3344      	adds	r3, #68	; 0x44
    7514:	6363      	str	r3, [r4, #52]	; 0x34
    7516:	2303      	movs	r3, #3
    7518:	63a3      	str	r3, [r4, #56]	; 0x38
    751a:	0023      	movs	r3, r4
    751c:	3346      	adds	r3, #70	; 0x46
    751e:	63e2      	str	r2, [r4, #60]	; 0x3c
    7520:	701e      	strb	r6, [r3, #0]
    7522:	6023      	str	r3, [r4, #0]
    7524:	2301      	movs	r3, #1
    7526:	0028      	movs	r0, r5
    7528:	6063      	str	r3, [r4, #4]
    752a:	bd70      	pop	{r4, r5, r6, pc}

0000752c <__ssrefill_r>:
    752c:	b510      	push	{r4, lr}
    752e:	000c      	movs	r4, r1
    7530:	6b49      	ldr	r1, [r1, #52]	; 0x34
    7532:	2900      	cmp	r1, #0
    7534:	d00e      	beq.n	7554 <__ssrefill_r+0x28>
    7536:	0023      	movs	r3, r4
    7538:	3344      	adds	r3, #68	; 0x44
    753a:	4299      	cmp	r1, r3
    753c:	d001      	beq.n	7542 <__ssrefill_r+0x16>
    753e:	f000 fe2b 	bl	8198 <_free_r>
    7542:	2000      	movs	r0, #0
    7544:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7546:	6360      	str	r0, [r4, #52]	; 0x34
    7548:	6063      	str	r3, [r4, #4]
    754a:	4283      	cmp	r3, r0
    754c:	d002      	beq.n	7554 <__ssrefill_r+0x28>
    754e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7550:	6023      	str	r3, [r4, #0]
    7552:	e009      	b.n	7568 <__ssrefill_r+0x3c>
    7554:	6923      	ldr	r3, [r4, #16]
    7556:	2220      	movs	r2, #32
    7558:	6023      	str	r3, [r4, #0]
    755a:	2300      	movs	r3, #0
    755c:	2001      	movs	r0, #1
    755e:	6063      	str	r3, [r4, #4]
    7560:	89a3      	ldrh	r3, [r4, #12]
    7562:	4240      	negs	r0, r0
    7564:	4313      	orrs	r3, r2
    7566:	81a3      	strh	r3, [r4, #12]
    7568:	bd10      	pop	{r4, pc}
	...

0000756c <__ssvfiscanf_r>:
    756c:	b5f0      	push	{r4, r5, r6, r7, lr}
    756e:	4cb8      	ldr	r4, [pc, #736]	; (7850 <__ssvfiscanf_r+0x2e4>)
    7570:	000d      	movs	r5, r1
    7572:	44a5      	add	sp, r4
    7574:	9303      	str	r3, [sp, #12]
    7576:	2300      	movs	r3, #0
    7578:	9000      	str	r0, [sp, #0]
    757a:	9348      	str	r3, [sp, #288]	; 0x120
    757c:	9349      	str	r3, [sp, #292]	; 0x124
    757e:	2086      	movs	r0, #134	; 0x86
    7580:	ab05      	add	r3, sp, #20
    7582:	934a      	str	r3, [sp, #296]	; 0x128
    7584:	23be      	movs	r3, #190	; 0xbe
    7586:	0040      	lsls	r0, r0, #1
    7588:	9201      	str	r2, [sp, #4]
    758a:	a902      	add	r1, sp, #8
    758c:	4ab1      	ldr	r2, [pc, #708]	; (7854 <__ssvfiscanf_r+0x2e8>)
    758e:	005b      	lsls	r3, r3, #1
    7590:	1809      	adds	r1, r1, r0
    7592:	50ca      	str	r2, [r1, r3]
    7594:	3304      	adds	r3, #4
    7596:	001e      	movs	r6, r3
    7598:	4aaf      	ldr	r2, [pc, #700]	; (7858 <__ssvfiscanf_r+0x2ec>)
    759a:	a902      	add	r1, sp, #8
    759c:	1809      	adds	r1, r1, r0
    759e:	50ca      	str	r2, [r1, r3]
    75a0:	9b01      	ldr	r3, [sp, #4]
    75a2:	781a      	ldrb	r2, [r3, #0]
    75a4:	2a00      	cmp	r2, #0
    75a6:	d100      	bne.n	75aa <__ssvfiscanf_r+0x3e>
    75a8:	e149      	b.n	783e <__ssvfiscanf_r+0x2d2>
    75aa:	2108      	movs	r1, #8
    75ac:	4cab      	ldr	r4, [pc, #684]	; (785c <__ssvfiscanf_r+0x2f0>)
    75ae:	6823      	ldr	r3, [r4, #0]
    75b0:	189b      	adds	r3, r3, r2
    75b2:	785b      	ldrb	r3, [r3, #1]
    75b4:	400b      	ands	r3, r1
    75b6:	d023      	beq.n	7600 <__ssvfiscanf_r+0x94>
    75b8:	686b      	ldr	r3, [r5, #4]
    75ba:	2b00      	cmp	r3, #0
    75bc:	dd11      	ble.n	75e2 <__ssvfiscanf_r+0x76>
    75be:	682b      	ldr	r3, [r5, #0]
    75c0:	6821      	ldr	r1, [r4, #0]
    75c2:	781a      	ldrb	r2, [r3, #0]
    75c4:	188a      	adds	r2, r1, r2
    75c6:	2108      	movs	r1, #8
    75c8:	7852      	ldrb	r2, [r2, #1]
    75ca:	420a      	tst	r2, r1
    75cc:	d014      	beq.n	75f8 <__ssvfiscanf_r+0x8c>
    75ce:	9a49      	ldr	r2, [sp, #292]	; 0x124
    75d0:	3301      	adds	r3, #1
    75d2:	9202      	str	r2, [sp, #8]
    75d4:	3201      	adds	r2, #1
    75d6:	9249      	str	r2, [sp, #292]	; 0x124
    75d8:	686a      	ldr	r2, [r5, #4]
    75da:	602b      	str	r3, [r5, #0]
    75dc:	3a01      	subs	r2, #1
    75de:	606a      	str	r2, [r5, #4]
    75e0:	e7ea      	b.n	75b8 <__ssvfiscanf_r+0x4c>
    75e2:	2286      	movs	r2, #134	; 0x86
    75e4:	ab02      	add	r3, sp, #8
    75e6:	0052      	lsls	r2, r2, #1
    75e8:	189b      	adds	r3, r3, r2
    75ea:	599b      	ldr	r3, [r3, r6]
    75ec:	0029      	movs	r1, r5
    75ee:	9800      	ldr	r0, [sp, #0]
    75f0:	9302      	str	r3, [sp, #8]
    75f2:	4798      	blx	r3
    75f4:	2800      	cmp	r0, #0
    75f6:	d0e2      	beq.n	75be <__ssvfiscanf_r+0x52>
    75f8:	9f01      	ldr	r7, [sp, #4]
    75fa:	3701      	adds	r7, #1
    75fc:	9701      	str	r7, [sp, #4]
    75fe:	e7cf      	b.n	75a0 <__ssvfiscanf_r+0x34>
    7600:	9901      	ldr	r1, [sp, #4]
    7602:	0014      	movs	r4, r2
    7604:	1c4f      	adds	r7, r1, #1
    7606:	2a25      	cmp	r2, #37	; 0x25
    7608:	d155      	bne.n	76b6 <__ssvfiscanf_r+0x14a>
    760a:	9347      	str	r3, [sp, #284]	; 0x11c
    760c:	9345      	str	r3, [sp, #276]	; 0x114
    760e:	784b      	ldrb	r3, [r1, #1]
    7610:	2b2a      	cmp	r3, #42	; 0x2a
    7612:	d102      	bne.n	761a <__ssvfiscanf_r+0xae>
    7614:	3b1a      	subs	r3, #26
    7616:	9345      	str	r3, [sp, #276]	; 0x114
    7618:	3701      	adds	r7, #1
    761a:	003c      	movs	r4, r7
    761c:	220a      	movs	r2, #10
    761e:	7821      	ldrb	r1, [r4, #0]
    7620:	000b      	movs	r3, r1
    7622:	3b30      	subs	r3, #48	; 0x30
    7624:	2b09      	cmp	r3, #9
    7626:	d807      	bhi.n	7638 <__ssvfiscanf_r+0xcc>
    7628:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    762a:	3401      	adds	r4, #1
    762c:	9301      	str	r3, [sp, #4]
    762e:	4353      	muls	r3, r2
    7630:	3b30      	subs	r3, #48	; 0x30
    7632:	1859      	adds	r1, r3, r1
    7634:	9147      	str	r1, [sp, #284]	; 0x11c
    7636:	e7f2      	b.n	761e <__ssvfiscanf_r+0xb2>
    7638:	4f89      	ldr	r7, [pc, #548]	; (7860 <__ssvfiscanf_r+0x2f4>)
    763a:	2203      	movs	r2, #3
    763c:	0038      	movs	r0, r7
    763e:	f000 fd8b 	bl	8158 <memchr>
    7642:	2800      	cmp	r0, #0
    7644:	d007      	beq.n	7656 <__ssvfiscanf_r+0xea>
    7646:	2301      	movs	r3, #1
    7648:	1bc0      	subs	r0, r0, r7
    764a:	4083      	lsls	r3, r0
    764c:	9a45      	ldr	r2, [sp, #276]	; 0x114
    764e:	3401      	adds	r4, #1
    7650:	4313      	orrs	r3, r2
    7652:	9201      	str	r2, [sp, #4]
    7654:	9345      	str	r3, [sp, #276]	; 0x114
    7656:	1c67      	adds	r7, r4, #1
    7658:	7824      	ldrb	r4, [r4, #0]
    765a:	2c67      	cmp	r4, #103	; 0x67
    765c:	d818      	bhi.n	7690 <__ssvfiscanf_r+0x124>
    765e:	2c65      	cmp	r4, #101	; 0x65
    7660:	d300      	bcc.n	7664 <__ssvfiscanf_r+0xf8>
    7662:	e08b      	b.n	777c <__ssvfiscanf_r+0x210>
    7664:	2c47      	cmp	r4, #71	; 0x47
    7666:	d808      	bhi.n	767a <__ssvfiscanf_r+0x10e>
    7668:	2c45      	cmp	r4, #69	; 0x45
    766a:	d300      	bcc.n	766e <__ssvfiscanf_r+0x102>
    766c:	e086      	b.n	777c <__ssvfiscanf_r+0x210>
    766e:	2c00      	cmp	r4, #0
    7670:	d100      	bne.n	7674 <__ssvfiscanf_r+0x108>
    7672:	e0e6      	b.n	7842 <__ssvfiscanf_r+0x2d6>
    7674:	2c25      	cmp	r4, #37	; 0x25
    7676:	d01e      	beq.n	76b6 <__ssvfiscanf_r+0x14a>
    7678:	e082      	b.n	7780 <__ssvfiscanf_r+0x214>
    767a:	2c5b      	cmp	r4, #91	; 0x5b
    767c:	d056      	beq.n	772c <__ssvfiscanf_r+0x1c0>
    767e:	d802      	bhi.n	7686 <__ssvfiscanf_r+0x11a>
    7680:	2c58      	cmp	r4, #88	; 0x58
    7682:	d041      	beq.n	7708 <__ssvfiscanf_r+0x19c>
    7684:	e07c      	b.n	7780 <__ssvfiscanf_r+0x214>
    7686:	2c63      	cmp	r4, #99	; 0x63
    7688:	d05e      	beq.n	7748 <__ssvfiscanf_r+0x1dc>
    768a:	2c64      	cmp	r4, #100	; 0x64
    768c:	d045      	beq.n	771a <__ssvfiscanf_r+0x1ae>
    768e:	e077      	b.n	7780 <__ssvfiscanf_r+0x214>
    7690:	2c70      	cmp	r4, #112	; 0x70
    7692:	d033      	beq.n	76fc <__ssvfiscanf_r+0x190>
    7694:	d807      	bhi.n	76a6 <__ssvfiscanf_r+0x13a>
    7696:	2c6e      	cmp	r4, #110	; 0x6e
    7698:	d05e      	beq.n	7758 <__ssvfiscanf_r+0x1ec>
    769a:	d840      	bhi.n	771e <__ssvfiscanf_r+0x1b2>
    769c:	2c69      	cmp	r4, #105	; 0x69
    769e:	d16f      	bne.n	7780 <__ssvfiscanf_r+0x214>
    76a0:	2300      	movs	r3, #0
    76a2:	9346      	str	r3, [sp, #280]	; 0x118
    76a4:	e040      	b.n	7728 <__ssvfiscanf_r+0x1bc>
    76a6:	2c75      	cmp	r4, #117	; 0x75
    76a8:	d037      	beq.n	771a <__ssvfiscanf_r+0x1ae>
    76aa:	2c78      	cmp	r4, #120	; 0x78
    76ac:	d02c      	beq.n	7708 <__ssvfiscanf_r+0x19c>
    76ae:	2302      	movs	r3, #2
    76b0:	2c73      	cmp	r4, #115	; 0x73
    76b2:	d047      	beq.n	7744 <__ssvfiscanf_r+0x1d8>
    76b4:	e064      	b.n	7780 <__ssvfiscanf_r+0x214>
    76b6:	686b      	ldr	r3, [r5, #4]
    76b8:	2b00      	cmp	r3, #0
    76ba:	dd0e      	ble.n	76da <__ssvfiscanf_r+0x16e>
    76bc:	682b      	ldr	r3, [r5, #0]
    76be:	781a      	ldrb	r2, [r3, #0]
    76c0:	4294      	cmp	r4, r2
    76c2:	d000      	beq.n	76c6 <__ssvfiscanf_r+0x15a>
    76c4:	e0bb      	b.n	783e <__ssvfiscanf_r+0x2d2>
    76c6:	3301      	adds	r3, #1
    76c8:	686a      	ldr	r2, [r5, #4]
    76ca:	602b      	str	r3, [r5, #0]
    76cc:	9b49      	ldr	r3, [sp, #292]	; 0x124
    76ce:	3a01      	subs	r2, #1
    76d0:	9301      	str	r3, [sp, #4]
    76d2:	3301      	adds	r3, #1
    76d4:	606a      	str	r2, [r5, #4]
    76d6:	9349      	str	r3, [sp, #292]	; 0x124
    76d8:	e790      	b.n	75fc <__ssvfiscanf_r+0x90>
    76da:	2286      	movs	r2, #134	; 0x86
    76dc:	ab02      	add	r3, sp, #8
    76de:	0052      	lsls	r2, r2, #1
    76e0:	189b      	adds	r3, r3, r2
    76e2:	599b      	ldr	r3, [r3, r6]
    76e4:	0029      	movs	r1, r5
    76e6:	9800      	ldr	r0, [sp, #0]
    76e8:	9301      	str	r3, [sp, #4]
    76ea:	4798      	blx	r3
    76ec:	2800      	cmp	r0, #0
    76ee:	d0e5      	beq.n	76bc <__ssvfiscanf_r+0x150>
    76f0:	9848      	ldr	r0, [sp, #288]	; 0x120
    76f2:	2800      	cmp	r0, #0
    76f4:	d000      	beq.n	76f8 <__ssvfiscanf_r+0x18c>
    76f6:	e09e      	b.n	7836 <__ssvfiscanf_r+0x2ca>
    76f8:	3801      	subs	r0, #1
    76fa:	e0a4      	b.n	7846 <__ssvfiscanf_r+0x2da>
    76fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
    76fe:	9301      	str	r3, [sp, #4]
    7700:	2320      	movs	r3, #32
    7702:	9a01      	ldr	r2, [sp, #4]
    7704:	4313      	orrs	r3, r2
    7706:	9345      	str	r3, [sp, #276]	; 0x114
    7708:	9b45      	ldr	r3, [sp, #276]	; 0x114
    770a:	9301      	str	r3, [sp, #4]
    770c:	2380      	movs	r3, #128	; 0x80
    770e:	9a01      	ldr	r2, [sp, #4]
    7710:	009b      	lsls	r3, r3, #2
    7712:	4313      	orrs	r3, r2
    7714:	9345      	str	r3, [sp, #276]	; 0x114
    7716:	2310      	movs	r3, #16
    7718:	e002      	b.n	7720 <__ssvfiscanf_r+0x1b4>
    771a:	230a      	movs	r3, #10
    771c:	e000      	b.n	7720 <__ssvfiscanf_r+0x1b4>
    771e:	2308      	movs	r3, #8
    7720:	9346      	str	r3, [sp, #280]	; 0x118
    7722:	2304      	movs	r3, #4
    7724:	2c6e      	cmp	r4, #110	; 0x6e
    7726:	dc0d      	bgt.n	7744 <__ssvfiscanf_r+0x1d8>
    7728:	2303      	movs	r3, #3
    772a:	e00b      	b.n	7744 <__ssvfiscanf_r+0x1d8>
    772c:	0039      	movs	r1, r7
    772e:	a805      	add	r0, sp, #20
    7730:	f000 fb8c 	bl	7e4c <__sccl>
    7734:	9b45      	ldr	r3, [sp, #276]	; 0x114
    7736:	0007      	movs	r7, r0
    7738:	9301      	str	r3, [sp, #4]
    773a:	2340      	movs	r3, #64	; 0x40
    773c:	9a01      	ldr	r2, [sp, #4]
    773e:	4313      	orrs	r3, r2
    7740:	9345      	str	r3, [sp, #276]	; 0x114
    7742:	2301      	movs	r3, #1
    7744:	934b      	str	r3, [sp, #300]	; 0x12c
    7746:	e01f      	b.n	7788 <__ssvfiscanf_r+0x21c>
    7748:	9b45      	ldr	r3, [sp, #276]	; 0x114
    774a:	9301      	str	r3, [sp, #4]
    774c:	2340      	movs	r3, #64	; 0x40
    774e:	9a01      	ldr	r2, [sp, #4]
    7750:	4313      	orrs	r3, r2
    7752:	9345      	str	r3, [sp, #276]	; 0x114
    7754:	2300      	movs	r3, #0
    7756:	e7f5      	b.n	7744 <__ssvfiscanf_r+0x1d8>
    7758:	9945      	ldr	r1, [sp, #276]	; 0x114
    775a:	06cb      	lsls	r3, r1, #27
    775c:	d500      	bpl.n	7760 <__ssvfiscanf_r+0x1f4>
    775e:	e74d      	b.n	75fc <__ssvfiscanf_r+0x90>
    7760:	9b03      	ldr	r3, [sp, #12]
    7762:	9a49      	ldr	r2, [sp, #292]	; 0x124
    7764:	07c8      	lsls	r0, r1, #31
    7766:	d504      	bpl.n	7772 <__ssvfiscanf_r+0x206>
    7768:	1d19      	adds	r1, r3, #4
    776a:	9103      	str	r1, [sp, #12]
    776c:	681b      	ldr	r3, [r3, #0]
    776e:	801a      	strh	r2, [r3, #0]
    7770:	e744      	b.n	75fc <__ssvfiscanf_r+0x90>
    7772:	1d19      	adds	r1, r3, #4
    7774:	9103      	str	r1, [sp, #12]
    7776:	681b      	ldr	r3, [r3, #0]
    7778:	601a      	str	r2, [r3, #0]
    777a:	e73f      	b.n	75fc <__ssvfiscanf_r+0x90>
    777c:	2305      	movs	r3, #5
    777e:	e7e1      	b.n	7744 <__ssvfiscanf_r+0x1d8>
    7780:	2303      	movs	r3, #3
    7782:	934b      	str	r3, [sp, #300]	; 0x12c
    7784:	3307      	adds	r3, #7
    7786:	9346      	str	r3, [sp, #280]	; 0x118
    7788:	686b      	ldr	r3, [r5, #4]
    778a:	2b00      	cmp	r3, #0
    778c:	dd04      	ble.n	7798 <__ssvfiscanf_r+0x22c>
    778e:	9b45      	ldr	r3, [sp, #276]	; 0x114
    7790:	9301      	str	r3, [sp, #4]
    7792:	065b      	lsls	r3, r3, #25
    7794:	d517      	bpl.n	77c6 <__ssvfiscanf_r+0x25a>
    7796:	e01f      	b.n	77d8 <__ssvfiscanf_r+0x26c>
    7798:	2286      	movs	r2, #134	; 0x86
    779a:	ab02      	add	r3, sp, #8
    779c:	0052      	lsls	r2, r2, #1
    779e:	189b      	adds	r3, r3, r2
    77a0:	599b      	ldr	r3, [r3, r6]
    77a2:	0029      	movs	r1, r5
    77a4:	9800      	ldr	r0, [sp, #0]
    77a6:	9301      	str	r3, [sp, #4]
    77a8:	4798      	blx	r3
    77aa:	2800      	cmp	r0, #0
    77ac:	d0ef      	beq.n	778e <__ssvfiscanf_r+0x222>
    77ae:	e79f      	b.n	76f0 <__ssvfiscanf_r+0x184>
    77b0:	9a49      	ldr	r2, [sp, #292]	; 0x124
    77b2:	9201      	str	r2, [sp, #4]
    77b4:	3201      	adds	r2, #1
    77b6:	9249      	str	r2, [sp, #292]	; 0x124
    77b8:	686a      	ldr	r2, [r5, #4]
    77ba:	3a01      	subs	r2, #1
    77bc:	606a      	str	r2, [r5, #4]
    77be:	2a00      	cmp	r2, #0
    77c0:	dd14      	ble.n	77ec <__ssvfiscanf_r+0x280>
    77c2:	3301      	adds	r3, #1
    77c4:	602b      	str	r3, [r5, #0]
    77c6:	682b      	ldr	r3, [r5, #0]
    77c8:	4924      	ldr	r1, [pc, #144]	; (785c <__ssvfiscanf_r+0x2f0>)
    77ca:	781a      	ldrb	r2, [r3, #0]
    77cc:	6809      	ldr	r1, [r1, #0]
    77ce:	188a      	adds	r2, r1, r2
    77d0:	2108      	movs	r1, #8
    77d2:	7852      	ldrb	r2, [r2, #1]
    77d4:	420a      	tst	r2, r1
    77d6:	d1eb      	bne.n	77b0 <__ssvfiscanf_r+0x244>
    77d8:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    77da:	2b02      	cmp	r3, #2
    77dc:	dc12      	bgt.n	7804 <__ssvfiscanf_r+0x298>
    77de:	ab03      	add	r3, sp, #12
    77e0:	002a      	movs	r2, r5
    77e2:	a945      	add	r1, sp, #276	; 0x114
    77e4:	9800      	ldr	r0, [sp, #0]
    77e6:	f000 f9cf 	bl	7b88 <_scanf_chars>
    77ea:	e01e      	b.n	782a <__ssvfiscanf_r+0x2be>
    77ec:	2286      	movs	r2, #134	; 0x86
    77ee:	ab02      	add	r3, sp, #8
    77f0:	0052      	lsls	r2, r2, #1
    77f2:	189b      	adds	r3, r3, r2
    77f4:	599b      	ldr	r3, [r3, r6]
    77f6:	0029      	movs	r1, r5
    77f8:	9800      	ldr	r0, [sp, #0]
    77fa:	9301      	str	r3, [sp, #4]
    77fc:	4798      	blx	r3
    77fe:	2800      	cmp	r0, #0
    7800:	d0e1      	beq.n	77c6 <__ssvfiscanf_r+0x25a>
    7802:	e775      	b.n	76f0 <__ssvfiscanf_r+0x184>
    7804:	2b04      	cmp	r3, #4
    7806:	dc06      	bgt.n	7816 <__ssvfiscanf_r+0x2aa>
    7808:	ab03      	add	r3, sp, #12
    780a:	002a      	movs	r2, r5
    780c:	a945      	add	r1, sp, #276	; 0x114
    780e:	9800      	ldr	r0, [sp, #0]
    7810:	f000 fa1c 	bl	7c4c <_scanf_i>
    7814:	e009      	b.n	782a <__ssvfiscanf_r+0x2be>
    7816:	4b13      	ldr	r3, [pc, #76]	; (7864 <__ssvfiscanf_r+0x2f8>)
    7818:	2b00      	cmp	r3, #0
    781a:	d100      	bne.n	781e <__ssvfiscanf_r+0x2b2>
    781c:	e6ee      	b.n	75fc <__ssvfiscanf_r+0x90>
    781e:	ab03      	add	r3, sp, #12
    7820:	002a      	movs	r2, r5
    7822:	a945      	add	r1, sp, #276	; 0x114
    7824:	9800      	ldr	r0, [sp, #0]
    7826:	e000      	b.n	782a <__ssvfiscanf_r+0x2be>
    7828:	bf00      	nop
    782a:	2801      	cmp	r0, #1
    782c:	d007      	beq.n	783e <__ssvfiscanf_r+0x2d2>
    782e:	2802      	cmp	r0, #2
    7830:	d000      	beq.n	7834 <__ssvfiscanf_r+0x2c8>
    7832:	e6e3      	b.n	75fc <__ssvfiscanf_r+0x90>
    7834:	e75c      	b.n	76f0 <__ssvfiscanf_r+0x184>
    7836:	89ab      	ldrh	r3, [r5, #12]
    7838:	065b      	lsls	r3, r3, #25
    783a:	d504      	bpl.n	7846 <__ssvfiscanf_r+0x2da>
    783c:	e001      	b.n	7842 <__ssvfiscanf_r+0x2d6>
    783e:	9848      	ldr	r0, [sp, #288]	; 0x120
    7840:	e001      	b.n	7846 <__ssvfiscanf_r+0x2da>
    7842:	2001      	movs	r0, #1
    7844:	4240      	negs	r0, r0
    7846:	23a7      	movs	r3, #167	; 0xa7
    7848:	009b      	lsls	r3, r3, #2
    784a:	449d      	add	sp, r3
    784c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    784e:	46c0      	nop			; (mov r8, r8)
    7850:	fffffd64 	.word	0xfffffd64
    7854:	000074b5 	.word	0x000074b5
    7858:	0000752d 	.word	0x0000752d
    785c:	200000b8 	.word	0x200000b8
    7860:	00008804 	.word	0x00008804
    7864:	00000000 	.word	0x00000000

00007868 <_printf_common>:
    7868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    786a:	0017      	movs	r7, r2
    786c:	9301      	str	r3, [sp, #4]
    786e:	688a      	ldr	r2, [r1, #8]
    7870:	690b      	ldr	r3, [r1, #16]
    7872:	9000      	str	r0, [sp, #0]
    7874:	000c      	movs	r4, r1
    7876:	4293      	cmp	r3, r2
    7878:	da00      	bge.n	787c <_printf_common+0x14>
    787a:	0013      	movs	r3, r2
    787c:	0022      	movs	r2, r4
    787e:	603b      	str	r3, [r7, #0]
    7880:	3243      	adds	r2, #67	; 0x43
    7882:	7812      	ldrb	r2, [r2, #0]
    7884:	2a00      	cmp	r2, #0
    7886:	d001      	beq.n	788c <_printf_common+0x24>
    7888:	3301      	adds	r3, #1
    788a:	603b      	str	r3, [r7, #0]
    788c:	6823      	ldr	r3, [r4, #0]
    788e:	069b      	lsls	r3, r3, #26
    7890:	d502      	bpl.n	7898 <_printf_common+0x30>
    7892:	683b      	ldr	r3, [r7, #0]
    7894:	3302      	adds	r3, #2
    7896:	603b      	str	r3, [r7, #0]
    7898:	2506      	movs	r5, #6
    789a:	6823      	ldr	r3, [r4, #0]
    789c:	401d      	ands	r5, r3
    789e:	d01e      	beq.n	78de <_printf_common+0x76>
    78a0:	0023      	movs	r3, r4
    78a2:	3343      	adds	r3, #67	; 0x43
    78a4:	781b      	ldrb	r3, [r3, #0]
    78a6:	1e5a      	subs	r2, r3, #1
    78a8:	4193      	sbcs	r3, r2
    78aa:	6822      	ldr	r2, [r4, #0]
    78ac:	0692      	lsls	r2, r2, #26
    78ae:	d51c      	bpl.n	78ea <_printf_common+0x82>
    78b0:	2030      	movs	r0, #48	; 0x30
    78b2:	18e1      	adds	r1, r4, r3
    78b4:	3143      	adds	r1, #67	; 0x43
    78b6:	7008      	strb	r0, [r1, #0]
    78b8:	0021      	movs	r1, r4
    78ba:	1c5a      	adds	r2, r3, #1
    78bc:	3145      	adds	r1, #69	; 0x45
    78be:	7809      	ldrb	r1, [r1, #0]
    78c0:	18a2      	adds	r2, r4, r2
    78c2:	3243      	adds	r2, #67	; 0x43
    78c4:	3302      	adds	r3, #2
    78c6:	7011      	strb	r1, [r2, #0]
    78c8:	e00f      	b.n	78ea <_printf_common+0x82>
    78ca:	0022      	movs	r2, r4
    78cc:	2301      	movs	r3, #1
    78ce:	3219      	adds	r2, #25
    78d0:	9901      	ldr	r1, [sp, #4]
    78d2:	9800      	ldr	r0, [sp, #0]
    78d4:	9e08      	ldr	r6, [sp, #32]
    78d6:	47b0      	blx	r6
    78d8:	1c43      	adds	r3, r0, #1
    78da:	d00e      	beq.n	78fa <_printf_common+0x92>
    78dc:	3501      	adds	r5, #1
    78de:	68e3      	ldr	r3, [r4, #12]
    78e0:	683a      	ldr	r2, [r7, #0]
    78e2:	1a9b      	subs	r3, r3, r2
    78e4:	429d      	cmp	r5, r3
    78e6:	dbf0      	blt.n	78ca <_printf_common+0x62>
    78e8:	e7da      	b.n	78a0 <_printf_common+0x38>
    78ea:	0022      	movs	r2, r4
    78ec:	9901      	ldr	r1, [sp, #4]
    78ee:	3243      	adds	r2, #67	; 0x43
    78f0:	9800      	ldr	r0, [sp, #0]
    78f2:	9d08      	ldr	r5, [sp, #32]
    78f4:	47a8      	blx	r5
    78f6:	1c43      	adds	r3, r0, #1
    78f8:	d102      	bne.n	7900 <_printf_common+0x98>
    78fa:	2001      	movs	r0, #1
    78fc:	4240      	negs	r0, r0
    78fe:	e020      	b.n	7942 <_printf_common+0xda>
    7900:	2306      	movs	r3, #6
    7902:	6820      	ldr	r0, [r4, #0]
    7904:	68e1      	ldr	r1, [r4, #12]
    7906:	683a      	ldr	r2, [r7, #0]
    7908:	4003      	ands	r3, r0
    790a:	2500      	movs	r5, #0
    790c:	2b04      	cmp	r3, #4
    790e:	d103      	bne.n	7918 <_printf_common+0xb0>
    7910:	1a8d      	subs	r5, r1, r2
    7912:	43eb      	mvns	r3, r5
    7914:	17db      	asrs	r3, r3, #31
    7916:	401d      	ands	r5, r3
    7918:	68a3      	ldr	r3, [r4, #8]
    791a:	6922      	ldr	r2, [r4, #16]
    791c:	4293      	cmp	r3, r2
    791e:	dd01      	ble.n	7924 <_printf_common+0xbc>
    7920:	1a9b      	subs	r3, r3, r2
    7922:	18ed      	adds	r5, r5, r3
    7924:	2700      	movs	r7, #0
    7926:	42bd      	cmp	r5, r7
    7928:	d00a      	beq.n	7940 <_printf_common+0xd8>
    792a:	0022      	movs	r2, r4
    792c:	2301      	movs	r3, #1
    792e:	321a      	adds	r2, #26
    7930:	9901      	ldr	r1, [sp, #4]
    7932:	9800      	ldr	r0, [sp, #0]
    7934:	9e08      	ldr	r6, [sp, #32]
    7936:	47b0      	blx	r6
    7938:	1c43      	adds	r3, r0, #1
    793a:	d0de      	beq.n	78fa <_printf_common+0x92>
    793c:	3701      	adds	r7, #1
    793e:	e7f2      	b.n	7926 <_printf_common+0xbe>
    7940:	2000      	movs	r0, #0
    7942:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00007944 <_printf_i>:
    7944:	b5f0      	push	{r4, r5, r6, r7, lr}
    7946:	b08b      	sub	sp, #44	; 0x2c
    7948:	9206      	str	r2, [sp, #24]
    794a:	000a      	movs	r2, r1
    794c:	3243      	adds	r2, #67	; 0x43
    794e:	9307      	str	r3, [sp, #28]
    7950:	9005      	str	r0, [sp, #20]
    7952:	9204      	str	r2, [sp, #16]
    7954:	7e0a      	ldrb	r2, [r1, #24]
    7956:	000c      	movs	r4, r1
    7958:	9b10      	ldr	r3, [sp, #64]	; 0x40
    795a:	2a6e      	cmp	r2, #110	; 0x6e
    795c:	d100      	bne.n	7960 <_printf_i+0x1c>
    795e:	e0ab      	b.n	7ab8 <_printf_i+0x174>
    7960:	d811      	bhi.n	7986 <_printf_i+0x42>
    7962:	2a63      	cmp	r2, #99	; 0x63
    7964:	d022      	beq.n	79ac <_printf_i+0x68>
    7966:	d809      	bhi.n	797c <_printf_i+0x38>
    7968:	2a00      	cmp	r2, #0
    796a:	d100      	bne.n	796e <_printf_i+0x2a>
    796c:	e0b5      	b.n	7ada <_printf_i+0x196>
    796e:	2a58      	cmp	r2, #88	; 0x58
    7970:	d000      	beq.n	7974 <_printf_i+0x30>
    7972:	e0c5      	b.n	7b00 <_printf_i+0x1bc>
    7974:	3145      	adds	r1, #69	; 0x45
    7976:	700a      	strb	r2, [r1, #0]
    7978:	4a81      	ldr	r2, [pc, #516]	; (7b80 <_printf_i+0x23c>)
    797a:	e04f      	b.n	7a1c <_printf_i+0xd8>
    797c:	2a64      	cmp	r2, #100	; 0x64
    797e:	d01d      	beq.n	79bc <_printf_i+0x78>
    7980:	2a69      	cmp	r2, #105	; 0x69
    7982:	d01b      	beq.n	79bc <_printf_i+0x78>
    7984:	e0bc      	b.n	7b00 <_printf_i+0x1bc>
    7986:	2a73      	cmp	r2, #115	; 0x73
    7988:	d100      	bne.n	798c <_printf_i+0x48>
    798a:	e0aa      	b.n	7ae2 <_printf_i+0x19e>
    798c:	d809      	bhi.n	79a2 <_printf_i+0x5e>
    798e:	2a6f      	cmp	r2, #111	; 0x6f
    7990:	d029      	beq.n	79e6 <_printf_i+0xa2>
    7992:	2a70      	cmp	r2, #112	; 0x70
    7994:	d000      	beq.n	7998 <_printf_i+0x54>
    7996:	e0b3      	b.n	7b00 <_printf_i+0x1bc>
    7998:	2220      	movs	r2, #32
    799a:	6809      	ldr	r1, [r1, #0]
    799c:	430a      	orrs	r2, r1
    799e:	6022      	str	r2, [r4, #0]
    79a0:	e037      	b.n	7a12 <_printf_i+0xce>
    79a2:	2a75      	cmp	r2, #117	; 0x75
    79a4:	d01f      	beq.n	79e6 <_printf_i+0xa2>
    79a6:	2a78      	cmp	r2, #120	; 0x78
    79a8:	d033      	beq.n	7a12 <_printf_i+0xce>
    79aa:	e0a9      	b.n	7b00 <_printf_i+0x1bc>
    79ac:	000e      	movs	r6, r1
    79ae:	681a      	ldr	r2, [r3, #0]
    79b0:	3642      	adds	r6, #66	; 0x42
    79b2:	1d11      	adds	r1, r2, #4
    79b4:	6019      	str	r1, [r3, #0]
    79b6:	6813      	ldr	r3, [r2, #0]
    79b8:	7033      	strb	r3, [r6, #0]
    79ba:	e0a4      	b.n	7b06 <_printf_i+0x1c2>
    79bc:	6821      	ldr	r1, [r4, #0]
    79be:	681a      	ldr	r2, [r3, #0]
    79c0:	0608      	lsls	r0, r1, #24
    79c2:	d406      	bmi.n	79d2 <_printf_i+0x8e>
    79c4:	0649      	lsls	r1, r1, #25
    79c6:	d504      	bpl.n	79d2 <_printf_i+0x8e>
    79c8:	1d11      	adds	r1, r2, #4
    79ca:	6019      	str	r1, [r3, #0]
    79cc:	2300      	movs	r3, #0
    79ce:	5ed5      	ldrsh	r5, [r2, r3]
    79d0:	e002      	b.n	79d8 <_printf_i+0x94>
    79d2:	1d11      	adds	r1, r2, #4
    79d4:	6019      	str	r1, [r3, #0]
    79d6:	6815      	ldr	r5, [r2, #0]
    79d8:	2d00      	cmp	r5, #0
    79da:	da3b      	bge.n	7a54 <_printf_i+0x110>
    79dc:	232d      	movs	r3, #45	; 0x2d
    79de:	9a04      	ldr	r2, [sp, #16]
    79e0:	426d      	negs	r5, r5
    79e2:	7013      	strb	r3, [r2, #0]
    79e4:	e036      	b.n	7a54 <_printf_i+0x110>
    79e6:	6821      	ldr	r1, [r4, #0]
    79e8:	681a      	ldr	r2, [r3, #0]
    79ea:	0608      	lsls	r0, r1, #24
    79ec:	d406      	bmi.n	79fc <_printf_i+0xb8>
    79ee:	0649      	lsls	r1, r1, #25
    79f0:	d504      	bpl.n	79fc <_printf_i+0xb8>
    79f2:	6815      	ldr	r5, [r2, #0]
    79f4:	1d11      	adds	r1, r2, #4
    79f6:	6019      	str	r1, [r3, #0]
    79f8:	b2ad      	uxth	r5, r5
    79fa:	e002      	b.n	7a02 <_printf_i+0xbe>
    79fc:	1d11      	adds	r1, r2, #4
    79fe:	6019      	str	r1, [r3, #0]
    7a00:	6815      	ldr	r5, [r2, #0]
    7a02:	4b5f      	ldr	r3, [pc, #380]	; (7b80 <_printf_i+0x23c>)
    7a04:	7e22      	ldrb	r2, [r4, #24]
    7a06:	9303      	str	r3, [sp, #12]
    7a08:	2708      	movs	r7, #8
    7a0a:	2a6f      	cmp	r2, #111	; 0x6f
    7a0c:	d01d      	beq.n	7a4a <_printf_i+0x106>
    7a0e:	270a      	movs	r7, #10
    7a10:	e01b      	b.n	7a4a <_printf_i+0x106>
    7a12:	0022      	movs	r2, r4
    7a14:	2178      	movs	r1, #120	; 0x78
    7a16:	3245      	adds	r2, #69	; 0x45
    7a18:	7011      	strb	r1, [r2, #0]
    7a1a:	4a5a      	ldr	r2, [pc, #360]	; (7b84 <_printf_i+0x240>)
    7a1c:	6819      	ldr	r1, [r3, #0]
    7a1e:	9203      	str	r2, [sp, #12]
    7a20:	1d08      	adds	r0, r1, #4
    7a22:	6822      	ldr	r2, [r4, #0]
    7a24:	6018      	str	r0, [r3, #0]
    7a26:	680d      	ldr	r5, [r1, #0]
    7a28:	0610      	lsls	r0, r2, #24
    7a2a:	d402      	bmi.n	7a32 <_printf_i+0xee>
    7a2c:	0650      	lsls	r0, r2, #25
    7a2e:	d500      	bpl.n	7a32 <_printf_i+0xee>
    7a30:	b2ad      	uxth	r5, r5
    7a32:	07d3      	lsls	r3, r2, #31
    7a34:	d502      	bpl.n	7a3c <_printf_i+0xf8>
    7a36:	2320      	movs	r3, #32
    7a38:	431a      	orrs	r2, r3
    7a3a:	6022      	str	r2, [r4, #0]
    7a3c:	2710      	movs	r7, #16
    7a3e:	2d00      	cmp	r5, #0
    7a40:	d103      	bne.n	7a4a <_printf_i+0x106>
    7a42:	2320      	movs	r3, #32
    7a44:	6822      	ldr	r2, [r4, #0]
    7a46:	439a      	bics	r2, r3
    7a48:	6022      	str	r2, [r4, #0]
    7a4a:	0023      	movs	r3, r4
    7a4c:	2200      	movs	r2, #0
    7a4e:	3343      	adds	r3, #67	; 0x43
    7a50:	701a      	strb	r2, [r3, #0]
    7a52:	e002      	b.n	7a5a <_printf_i+0x116>
    7a54:	270a      	movs	r7, #10
    7a56:	4b4a      	ldr	r3, [pc, #296]	; (7b80 <_printf_i+0x23c>)
    7a58:	9303      	str	r3, [sp, #12]
    7a5a:	6863      	ldr	r3, [r4, #4]
    7a5c:	60a3      	str	r3, [r4, #8]
    7a5e:	2b00      	cmp	r3, #0
    7a60:	db09      	blt.n	7a76 <_printf_i+0x132>
    7a62:	2204      	movs	r2, #4
    7a64:	6821      	ldr	r1, [r4, #0]
    7a66:	4391      	bics	r1, r2
    7a68:	6021      	str	r1, [r4, #0]
    7a6a:	2d00      	cmp	r5, #0
    7a6c:	d105      	bne.n	7a7a <_printf_i+0x136>
    7a6e:	9e04      	ldr	r6, [sp, #16]
    7a70:	2b00      	cmp	r3, #0
    7a72:	d011      	beq.n	7a98 <_printf_i+0x154>
    7a74:	e07b      	b.n	7b6e <_printf_i+0x22a>
    7a76:	2d00      	cmp	r5, #0
    7a78:	d079      	beq.n	7b6e <_printf_i+0x22a>
    7a7a:	9e04      	ldr	r6, [sp, #16]
    7a7c:	0028      	movs	r0, r5
    7a7e:	0039      	movs	r1, r7
    7a80:	f7fd fc7e 	bl	5380 <__aeabi_uidivmod>
    7a84:	9b03      	ldr	r3, [sp, #12]
    7a86:	3e01      	subs	r6, #1
    7a88:	5c5b      	ldrb	r3, [r3, r1]
    7a8a:	0028      	movs	r0, r5
    7a8c:	7033      	strb	r3, [r6, #0]
    7a8e:	0039      	movs	r1, r7
    7a90:	f7fd fbf0 	bl	5274 <__aeabi_uidiv>
    7a94:	1e05      	subs	r5, r0, #0
    7a96:	d1f1      	bne.n	7a7c <_printf_i+0x138>
    7a98:	2f08      	cmp	r7, #8
    7a9a:	d109      	bne.n	7ab0 <_printf_i+0x16c>
    7a9c:	6823      	ldr	r3, [r4, #0]
    7a9e:	07db      	lsls	r3, r3, #31
    7aa0:	d506      	bpl.n	7ab0 <_printf_i+0x16c>
    7aa2:	6863      	ldr	r3, [r4, #4]
    7aa4:	6922      	ldr	r2, [r4, #16]
    7aa6:	4293      	cmp	r3, r2
    7aa8:	dc02      	bgt.n	7ab0 <_printf_i+0x16c>
    7aaa:	2330      	movs	r3, #48	; 0x30
    7aac:	3e01      	subs	r6, #1
    7aae:	7033      	strb	r3, [r6, #0]
    7ab0:	9b04      	ldr	r3, [sp, #16]
    7ab2:	1b9b      	subs	r3, r3, r6
    7ab4:	6123      	str	r3, [r4, #16]
    7ab6:	e02b      	b.n	7b10 <_printf_i+0x1cc>
    7ab8:	6809      	ldr	r1, [r1, #0]
    7aba:	681a      	ldr	r2, [r3, #0]
    7abc:	0608      	lsls	r0, r1, #24
    7abe:	d407      	bmi.n	7ad0 <_printf_i+0x18c>
    7ac0:	0649      	lsls	r1, r1, #25
    7ac2:	d505      	bpl.n	7ad0 <_printf_i+0x18c>
    7ac4:	1d11      	adds	r1, r2, #4
    7ac6:	6019      	str	r1, [r3, #0]
    7ac8:	6813      	ldr	r3, [r2, #0]
    7aca:	8aa2      	ldrh	r2, [r4, #20]
    7acc:	801a      	strh	r2, [r3, #0]
    7ace:	e004      	b.n	7ada <_printf_i+0x196>
    7ad0:	1d11      	adds	r1, r2, #4
    7ad2:	6019      	str	r1, [r3, #0]
    7ad4:	6813      	ldr	r3, [r2, #0]
    7ad6:	6962      	ldr	r2, [r4, #20]
    7ad8:	601a      	str	r2, [r3, #0]
    7ada:	2300      	movs	r3, #0
    7adc:	9e04      	ldr	r6, [sp, #16]
    7ade:	6123      	str	r3, [r4, #16]
    7ae0:	e016      	b.n	7b10 <_printf_i+0x1cc>
    7ae2:	681a      	ldr	r2, [r3, #0]
    7ae4:	1d11      	adds	r1, r2, #4
    7ae6:	6019      	str	r1, [r3, #0]
    7ae8:	6816      	ldr	r6, [r2, #0]
    7aea:	2100      	movs	r1, #0
    7aec:	6862      	ldr	r2, [r4, #4]
    7aee:	0030      	movs	r0, r6
    7af0:	f000 fb32 	bl	8158 <memchr>
    7af4:	2800      	cmp	r0, #0
    7af6:	d001      	beq.n	7afc <_printf_i+0x1b8>
    7af8:	1b80      	subs	r0, r0, r6
    7afa:	6060      	str	r0, [r4, #4]
    7afc:	6863      	ldr	r3, [r4, #4]
    7afe:	e003      	b.n	7b08 <_printf_i+0x1c4>
    7b00:	0026      	movs	r6, r4
    7b02:	3642      	adds	r6, #66	; 0x42
    7b04:	7032      	strb	r2, [r6, #0]
    7b06:	2301      	movs	r3, #1
    7b08:	6123      	str	r3, [r4, #16]
    7b0a:	2300      	movs	r3, #0
    7b0c:	9a04      	ldr	r2, [sp, #16]
    7b0e:	7013      	strb	r3, [r2, #0]
    7b10:	9b07      	ldr	r3, [sp, #28]
    7b12:	aa09      	add	r2, sp, #36	; 0x24
    7b14:	9300      	str	r3, [sp, #0]
    7b16:	0021      	movs	r1, r4
    7b18:	9b06      	ldr	r3, [sp, #24]
    7b1a:	9805      	ldr	r0, [sp, #20]
    7b1c:	f7ff fea4 	bl	7868 <_printf_common>
    7b20:	1c43      	adds	r3, r0, #1
    7b22:	d102      	bne.n	7b2a <_printf_i+0x1e6>
    7b24:	2001      	movs	r0, #1
    7b26:	4240      	negs	r0, r0
    7b28:	e027      	b.n	7b7a <_printf_i+0x236>
    7b2a:	6923      	ldr	r3, [r4, #16]
    7b2c:	0032      	movs	r2, r6
    7b2e:	9906      	ldr	r1, [sp, #24]
    7b30:	9805      	ldr	r0, [sp, #20]
    7b32:	9d07      	ldr	r5, [sp, #28]
    7b34:	47a8      	blx	r5
    7b36:	1c43      	adds	r3, r0, #1
    7b38:	d0f4      	beq.n	7b24 <_printf_i+0x1e0>
    7b3a:	6823      	ldr	r3, [r4, #0]
    7b3c:	2500      	movs	r5, #0
    7b3e:	079b      	lsls	r3, r3, #30
    7b40:	d40f      	bmi.n	7b62 <_printf_i+0x21e>
    7b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7b44:	68e0      	ldr	r0, [r4, #12]
    7b46:	4298      	cmp	r0, r3
    7b48:	da17      	bge.n	7b7a <_printf_i+0x236>
    7b4a:	0018      	movs	r0, r3
    7b4c:	e015      	b.n	7b7a <_printf_i+0x236>
    7b4e:	0022      	movs	r2, r4
    7b50:	2301      	movs	r3, #1
    7b52:	3219      	adds	r2, #25
    7b54:	9906      	ldr	r1, [sp, #24]
    7b56:	9805      	ldr	r0, [sp, #20]
    7b58:	9e07      	ldr	r6, [sp, #28]
    7b5a:	47b0      	blx	r6
    7b5c:	1c43      	adds	r3, r0, #1
    7b5e:	d0e1      	beq.n	7b24 <_printf_i+0x1e0>
    7b60:	3501      	adds	r5, #1
    7b62:	68e3      	ldr	r3, [r4, #12]
    7b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7b66:	1a9b      	subs	r3, r3, r2
    7b68:	429d      	cmp	r5, r3
    7b6a:	dbf0      	blt.n	7b4e <_printf_i+0x20a>
    7b6c:	e7e9      	b.n	7b42 <_printf_i+0x1fe>
    7b6e:	0026      	movs	r6, r4
    7b70:	9b03      	ldr	r3, [sp, #12]
    7b72:	3642      	adds	r6, #66	; 0x42
    7b74:	781b      	ldrb	r3, [r3, #0]
    7b76:	7033      	strb	r3, [r6, #0]
    7b78:	e78e      	b.n	7a98 <_printf_i+0x154>
    7b7a:	b00b      	add	sp, #44	; 0x2c
    7b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b7e:	46c0      	nop			; (mov r8, r8)
    7b80:	0000880f 	.word	0x0000880f
    7b84:	00008820 	.word	0x00008820

00007b88 <_scanf_chars>:
    7b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7b8a:	0015      	movs	r5, r2
    7b8c:	688a      	ldr	r2, [r1, #8]
    7b8e:	9001      	str	r0, [sp, #4]
    7b90:	000c      	movs	r4, r1
    7b92:	2a00      	cmp	r2, #0
    7b94:	d106      	bne.n	7ba4 <_scanf_chars+0x1c>
    7b96:	698a      	ldr	r2, [r1, #24]
    7b98:	1e51      	subs	r1, r2, #1
    7b9a:	418a      	sbcs	r2, r1
    7b9c:	2101      	movs	r1, #1
    7b9e:	4252      	negs	r2, r2
    7ba0:	430a      	orrs	r2, r1
    7ba2:	60a2      	str	r2, [r4, #8]
    7ba4:	6822      	ldr	r2, [r4, #0]
    7ba6:	06d2      	lsls	r2, r2, #27
    7ba8:	d403      	bmi.n	7bb2 <_scanf_chars+0x2a>
    7baa:	681a      	ldr	r2, [r3, #0]
    7bac:	1d11      	adds	r1, r2, #4
    7bae:	6019      	str	r1, [r3, #0]
    7bb0:	6817      	ldr	r7, [r2, #0]
    7bb2:	2600      	movs	r6, #0
    7bb4:	69a0      	ldr	r0, [r4, #24]
    7bb6:	2800      	cmp	r0, #0
    7bb8:	d11e      	bne.n	7bf8 <_scanf_chars+0x70>
    7bba:	2210      	movs	r2, #16
    7bbc:	6823      	ldr	r3, [r4, #0]
    7bbe:	3601      	adds	r6, #1
    7bc0:	4213      	tst	r3, r2
    7bc2:	d103      	bne.n	7bcc <_scanf_chars+0x44>
    7bc4:	682b      	ldr	r3, [r5, #0]
    7bc6:	781b      	ldrb	r3, [r3, #0]
    7bc8:	703b      	strb	r3, [r7, #0]
    7bca:	3701      	adds	r7, #1
    7bcc:	682a      	ldr	r2, [r5, #0]
    7bce:	686b      	ldr	r3, [r5, #4]
    7bd0:	3201      	adds	r2, #1
    7bd2:	602a      	str	r2, [r5, #0]
    7bd4:	68a2      	ldr	r2, [r4, #8]
    7bd6:	3b01      	subs	r3, #1
    7bd8:	3a01      	subs	r2, #1
    7bda:	606b      	str	r3, [r5, #4]
    7bdc:	60a2      	str	r2, [r4, #8]
    7bde:	2a00      	cmp	r2, #0
    7be0:	d01e      	beq.n	7c20 <_scanf_chars+0x98>
    7be2:	2b00      	cmp	r3, #0
    7be4:	dce6      	bgt.n	7bb4 <_scanf_chars+0x2c>
    7be6:	23c0      	movs	r3, #192	; 0xc0
    7be8:	005b      	lsls	r3, r3, #1
    7bea:	58e3      	ldr	r3, [r4, r3]
    7bec:	0029      	movs	r1, r5
    7bee:	9801      	ldr	r0, [sp, #4]
    7bf0:	4798      	blx	r3
    7bf2:	2800      	cmp	r0, #0
    7bf4:	d0de      	beq.n	7bb4 <_scanf_chars+0x2c>
    7bf6:	e013      	b.n	7c20 <_scanf_chars+0x98>
    7bf8:	2801      	cmp	r0, #1
    7bfa:	d106      	bne.n	7c0a <_scanf_chars+0x82>
    7bfc:	682b      	ldr	r3, [r5, #0]
    7bfe:	6962      	ldr	r2, [r4, #20]
    7c00:	781b      	ldrb	r3, [r3, #0]
    7c02:	5cd3      	ldrb	r3, [r2, r3]
    7c04:	2b00      	cmp	r3, #0
    7c06:	d1d8      	bne.n	7bba <_scanf_chars+0x32>
    7c08:	e01a      	b.n	7c40 <_scanf_chars+0xb8>
    7c0a:	2802      	cmp	r0, #2
    7c0c:	d108      	bne.n	7c20 <_scanf_chars+0x98>
    7c0e:	682b      	ldr	r3, [r5, #0]
    7c10:	4a0d      	ldr	r2, [pc, #52]	; (7c48 <_scanf_chars+0xc0>)
    7c12:	781b      	ldrb	r3, [r3, #0]
    7c14:	6812      	ldr	r2, [r2, #0]
    7c16:	18d3      	adds	r3, r2, r3
    7c18:	2208      	movs	r2, #8
    7c1a:	785b      	ldrb	r3, [r3, #1]
    7c1c:	4213      	tst	r3, r2
    7c1e:	d0cc      	beq.n	7bba <_scanf_chars+0x32>
    7c20:	2310      	movs	r3, #16
    7c22:	6822      	ldr	r2, [r4, #0]
    7c24:	4013      	ands	r3, r2
    7c26:	d106      	bne.n	7c36 <_scanf_chars+0xae>
    7c28:	68e2      	ldr	r2, [r4, #12]
    7c2a:	3201      	adds	r2, #1
    7c2c:	60e2      	str	r2, [r4, #12]
    7c2e:	69a2      	ldr	r2, [r4, #24]
    7c30:	2a00      	cmp	r2, #0
    7c32:	d000      	beq.n	7c36 <_scanf_chars+0xae>
    7c34:	703b      	strb	r3, [r7, #0]
    7c36:	6923      	ldr	r3, [r4, #16]
    7c38:	2000      	movs	r0, #0
    7c3a:	199e      	adds	r6, r3, r6
    7c3c:	6126      	str	r6, [r4, #16]
    7c3e:	e001      	b.n	7c44 <_scanf_chars+0xbc>
    7c40:	2e00      	cmp	r6, #0
    7c42:	d1ed      	bne.n	7c20 <_scanf_chars+0x98>
    7c44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7c46:	46c0      	nop			; (mov r8, r8)
    7c48:	200000b8 	.word	0x200000b8

00007c4c <_scanf_i>:
    7c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c4e:	000c      	movs	r4, r1
    7c50:	b08d      	sub	sp, #52	; 0x34
    7c52:	9302      	str	r3, [sp, #8]
    7c54:	4b77      	ldr	r3, [pc, #476]	; (7e34 <_scanf_i+0x1e8>)
    7c56:	9005      	str	r0, [sp, #20]
    7c58:	0016      	movs	r6, r2
    7c5a:	aa09      	add	r2, sp, #36	; 0x24
    7c5c:	cb23      	ldmia	r3!, {r0, r1, r5}
    7c5e:	c223      	stmia	r2!, {r0, r1, r5}
    7c60:	4b75      	ldr	r3, [pc, #468]	; (7e38 <_scanf_i+0x1ec>)
    7c62:	9306      	str	r3, [sp, #24]
    7c64:	69a3      	ldr	r3, [r4, #24]
    7c66:	2b03      	cmp	r3, #3
    7c68:	d001      	beq.n	7c6e <_scanf_i+0x22>
    7c6a:	4b74      	ldr	r3, [pc, #464]	; (7e3c <_scanf_i+0x1f0>)
    7c6c:	9306      	str	r3, [sp, #24]
    7c6e:	2200      	movs	r2, #0
    7c70:	68a3      	ldr	r3, [r4, #8]
    7c72:	9204      	str	r2, [sp, #16]
    7c74:	325d      	adds	r2, #93	; 0x5d
    7c76:	1e59      	subs	r1, r3, #1
    7c78:	32ff      	adds	r2, #255	; 0xff
    7c7a:	4291      	cmp	r1, r2
    7c7c:	d905      	bls.n	7c8a <_scanf_i+0x3e>
    7c7e:	3b5e      	subs	r3, #94	; 0x5e
    7c80:	3bff      	subs	r3, #255	; 0xff
    7c82:	9304      	str	r3, [sp, #16]
    7c84:	235e      	movs	r3, #94	; 0x5e
    7c86:	33ff      	adds	r3, #255	; 0xff
    7c88:	60a3      	str	r3, [r4, #8]
    7c8a:	0023      	movs	r3, r4
    7c8c:	331c      	adds	r3, #28
    7c8e:	9301      	str	r3, [sp, #4]
    7c90:	23d0      	movs	r3, #208	; 0xd0
    7c92:	2700      	movs	r7, #0
    7c94:	6822      	ldr	r2, [r4, #0]
    7c96:	011b      	lsls	r3, r3, #4
    7c98:	4313      	orrs	r3, r2
    7c9a:	6023      	str	r3, [r4, #0]
    7c9c:	9b01      	ldr	r3, [sp, #4]
    7c9e:	9303      	str	r3, [sp, #12]
    7ca0:	6833      	ldr	r3, [r6, #0]
    7ca2:	a809      	add	r0, sp, #36	; 0x24
    7ca4:	7819      	ldrb	r1, [r3, #0]
    7ca6:	00bb      	lsls	r3, r7, #2
    7ca8:	2202      	movs	r2, #2
    7caa:	5818      	ldr	r0, [r3, r0]
    7cac:	f000 fa54 	bl	8158 <memchr>
    7cb0:	2800      	cmp	r0, #0
    7cb2:	d03b      	beq.n	7d2c <_scanf_i+0xe0>
    7cb4:	2f01      	cmp	r7, #1
    7cb6:	d10d      	bne.n	7cd4 <_scanf_i+0x88>
    7cb8:	6863      	ldr	r3, [r4, #4]
    7cba:	2b00      	cmp	r3, #0
    7cbc:	d106      	bne.n	7ccc <_scanf_i+0x80>
    7cbe:	3308      	adds	r3, #8
    7cc0:	6822      	ldr	r2, [r4, #0]
    7cc2:	6063      	str	r3, [r4, #4]
    7cc4:	33f9      	adds	r3, #249	; 0xf9
    7cc6:	33ff      	adds	r3, #255	; 0xff
    7cc8:	4313      	orrs	r3, r2
    7cca:	6023      	str	r3, [r4, #0]
    7ccc:	4b5c      	ldr	r3, [pc, #368]	; (7e40 <_scanf_i+0x1f4>)
    7cce:	6822      	ldr	r2, [r4, #0]
    7cd0:	4013      	ands	r3, r2
    7cd2:	e00e      	b.n	7cf2 <_scanf_i+0xa6>
    7cd4:	2f02      	cmp	r7, #2
    7cd6:	d10d      	bne.n	7cf4 <_scanf_i+0xa8>
    7cd8:	21c0      	movs	r1, #192	; 0xc0
    7cda:	2280      	movs	r2, #128	; 0x80
    7cdc:	6823      	ldr	r3, [r4, #0]
    7cde:	00c9      	lsls	r1, r1, #3
    7ce0:	4019      	ands	r1, r3
    7ce2:	0092      	lsls	r2, r2, #2
    7ce4:	4291      	cmp	r1, r2
    7ce6:	d124      	bne.n	7d32 <_scanf_i+0xe6>
    7ce8:	3af1      	subs	r2, #241	; 0xf1
    7cea:	3aff      	subs	r2, #255	; 0xff
    7cec:	6062      	str	r2, [r4, #4]
    7cee:	32f0      	adds	r2, #240	; 0xf0
    7cf0:	4313      	orrs	r3, r2
    7cf2:	6023      	str	r3, [r4, #0]
    7cf4:	68a3      	ldr	r3, [r4, #8]
    7cf6:	1e5a      	subs	r2, r3, #1
    7cf8:	60a2      	str	r2, [r4, #8]
    7cfa:	2b00      	cmp	r3, #0
    7cfc:	d016      	beq.n	7d2c <_scanf_i+0xe0>
    7cfe:	9b03      	ldr	r3, [sp, #12]
    7d00:	1c5d      	adds	r5, r3, #1
    7d02:	6833      	ldr	r3, [r6, #0]
    7d04:	1c5a      	adds	r2, r3, #1
    7d06:	6032      	str	r2, [r6, #0]
    7d08:	781b      	ldrb	r3, [r3, #0]
    7d0a:	9a03      	ldr	r2, [sp, #12]
    7d0c:	9503      	str	r5, [sp, #12]
    7d0e:	7013      	strb	r3, [r2, #0]
    7d10:	6873      	ldr	r3, [r6, #4]
    7d12:	3b01      	subs	r3, #1
    7d14:	6073      	str	r3, [r6, #4]
    7d16:	2b00      	cmp	r3, #0
    7d18:	dc08      	bgt.n	7d2c <_scanf_i+0xe0>
    7d1a:	23c0      	movs	r3, #192	; 0xc0
    7d1c:	005b      	lsls	r3, r3, #1
    7d1e:	58e3      	ldr	r3, [r4, r3]
    7d20:	0031      	movs	r1, r6
    7d22:	9805      	ldr	r0, [sp, #20]
    7d24:	9307      	str	r3, [sp, #28]
    7d26:	4798      	blx	r3
    7d28:	2800      	cmp	r0, #0
    7d2a:	d147      	bne.n	7dbc <_scanf_i+0x170>
    7d2c:	3701      	adds	r7, #1
    7d2e:	2f03      	cmp	r7, #3
    7d30:	d1b6      	bne.n	7ca0 <_scanf_i+0x54>
    7d32:	6863      	ldr	r3, [r4, #4]
    7d34:	2b00      	cmp	r3, #0
    7d36:	d101      	bne.n	7d3c <_scanf_i+0xf0>
    7d38:	330a      	adds	r3, #10
    7d3a:	6063      	str	r3, [r4, #4]
    7d3c:	2110      	movs	r1, #16
    7d3e:	2700      	movs	r7, #0
    7d40:	6863      	ldr	r3, [r4, #4]
    7d42:	6960      	ldr	r0, [r4, #20]
    7d44:	1ac9      	subs	r1, r1, r3
    7d46:	4b3f      	ldr	r3, [pc, #252]	; (7e44 <_scanf_i+0x1f8>)
    7d48:	18c9      	adds	r1, r1, r3
    7d4a:	f000 f87f 	bl	7e4c <__sccl>
    7d4e:	9d03      	ldr	r5, [sp, #12]
    7d50:	68a3      	ldr	r3, [r4, #8]
    7d52:	2b00      	cmp	r3, #0
    7d54:	d033      	beq.n	7dbe <_scanf_i+0x172>
    7d56:	6832      	ldr	r2, [r6, #0]
    7d58:	6960      	ldr	r0, [r4, #20]
    7d5a:	7811      	ldrb	r1, [r2, #0]
    7d5c:	5c40      	ldrb	r0, [r0, r1]
    7d5e:	2800      	cmp	r0, #0
    7d60:	d02d      	beq.n	7dbe <_scanf_i+0x172>
    7d62:	2930      	cmp	r1, #48	; 0x30
    7d64:	d10d      	bne.n	7d82 <_scanf_i+0x136>
    7d66:	2080      	movs	r0, #128	; 0x80
    7d68:	6821      	ldr	r1, [r4, #0]
    7d6a:	0100      	lsls	r0, r0, #4
    7d6c:	4201      	tst	r1, r0
    7d6e:	d008      	beq.n	7d82 <_scanf_i+0x136>
    7d70:	9a04      	ldr	r2, [sp, #16]
    7d72:	3701      	adds	r7, #1
    7d74:	2a00      	cmp	r2, #0
    7d76:	d00b      	beq.n	7d90 <_scanf_i+0x144>
    7d78:	3a01      	subs	r2, #1
    7d7a:	3301      	adds	r3, #1
    7d7c:	9204      	str	r2, [sp, #16]
    7d7e:	60a3      	str	r3, [r4, #8]
    7d80:	e006      	b.n	7d90 <_scanf_i+0x144>
    7d82:	6821      	ldr	r1, [r4, #0]
    7d84:	4b30      	ldr	r3, [pc, #192]	; (7e48 <_scanf_i+0x1fc>)
    7d86:	400b      	ands	r3, r1
    7d88:	6023      	str	r3, [r4, #0]
    7d8a:	7813      	ldrb	r3, [r2, #0]
    7d8c:	702b      	strb	r3, [r5, #0]
    7d8e:	3501      	adds	r5, #1
    7d90:	6873      	ldr	r3, [r6, #4]
    7d92:	3b01      	subs	r3, #1
    7d94:	6073      	str	r3, [r6, #4]
    7d96:	2b00      	cmp	r3, #0
    7d98:	dd03      	ble.n	7da2 <_scanf_i+0x156>
    7d9a:	6833      	ldr	r3, [r6, #0]
    7d9c:	3301      	adds	r3, #1
    7d9e:	6033      	str	r3, [r6, #0]
    7da0:	e008      	b.n	7db4 <_scanf_i+0x168>
    7da2:	23c0      	movs	r3, #192	; 0xc0
    7da4:	005b      	lsls	r3, r3, #1
    7da6:	58e3      	ldr	r3, [r4, r3]
    7da8:	0031      	movs	r1, r6
    7daa:	9805      	ldr	r0, [sp, #20]
    7dac:	9303      	str	r3, [sp, #12]
    7dae:	4798      	blx	r3
    7db0:	2800      	cmp	r0, #0
    7db2:	d104      	bne.n	7dbe <_scanf_i+0x172>
    7db4:	68a3      	ldr	r3, [r4, #8]
    7db6:	3b01      	subs	r3, #1
    7db8:	60a3      	str	r3, [r4, #8]
    7dba:	e7c9      	b.n	7d50 <_scanf_i+0x104>
    7dbc:	2700      	movs	r7, #0
    7dbe:	6823      	ldr	r3, [r4, #0]
    7dc0:	05db      	lsls	r3, r3, #23
    7dc2:	d50e      	bpl.n	7de2 <_scanf_i+0x196>
    7dc4:	9b01      	ldr	r3, [sp, #4]
    7dc6:	429d      	cmp	r5, r3
    7dc8:	d907      	bls.n	7dda <_scanf_i+0x18e>
    7dca:	23be      	movs	r3, #190	; 0xbe
    7dcc:	3d01      	subs	r5, #1
    7dce:	005b      	lsls	r3, r3, #1
    7dd0:	7829      	ldrb	r1, [r5, #0]
    7dd2:	58e3      	ldr	r3, [r4, r3]
    7dd4:	0032      	movs	r2, r6
    7dd6:	9805      	ldr	r0, [sp, #20]
    7dd8:	4798      	blx	r3
    7dda:	9b01      	ldr	r3, [sp, #4]
    7ddc:	2001      	movs	r0, #1
    7dde:	429d      	cmp	r5, r3
    7de0:	d025      	beq.n	7e2e <_scanf_i+0x1e2>
    7de2:	2210      	movs	r2, #16
    7de4:	6823      	ldr	r3, [r4, #0]
    7de6:	401a      	ands	r2, r3
    7de8:	d11a      	bne.n	7e20 <_scanf_i+0x1d4>
    7dea:	702a      	strb	r2, [r5, #0]
    7dec:	6863      	ldr	r3, [r4, #4]
    7dee:	9901      	ldr	r1, [sp, #4]
    7df0:	9805      	ldr	r0, [sp, #20]
    7df2:	9e06      	ldr	r6, [sp, #24]
    7df4:	47b0      	blx	r6
    7df6:	9b02      	ldr	r3, [sp, #8]
    7df8:	6822      	ldr	r2, [r4, #0]
    7dfa:	681b      	ldr	r3, [r3, #0]
    7dfc:	0691      	lsls	r1, r2, #26
    7dfe:	d407      	bmi.n	7e10 <_scanf_i+0x1c4>
    7e00:	07d1      	lsls	r1, r2, #31
    7e02:	d505      	bpl.n	7e10 <_scanf_i+0x1c4>
    7e04:	9902      	ldr	r1, [sp, #8]
    7e06:	1d1a      	adds	r2, r3, #4
    7e08:	600a      	str	r2, [r1, #0]
    7e0a:	681b      	ldr	r3, [r3, #0]
    7e0c:	8018      	strh	r0, [r3, #0]
    7e0e:	e004      	b.n	7e1a <_scanf_i+0x1ce>
    7e10:	9902      	ldr	r1, [sp, #8]
    7e12:	1d1a      	adds	r2, r3, #4
    7e14:	600a      	str	r2, [r1, #0]
    7e16:	681b      	ldr	r3, [r3, #0]
    7e18:	6018      	str	r0, [r3, #0]
    7e1a:	68e3      	ldr	r3, [r4, #12]
    7e1c:	3301      	adds	r3, #1
    7e1e:	60e3      	str	r3, [r4, #12]
    7e20:	2000      	movs	r0, #0
    7e22:	9b01      	ldr	r3, [sp, #4]
    7e24:	1aed      	subs	r5, r5, r3
    7e26:	6923      	ldr	r3, [r4, #16]
    7e28:	19ed      	adds	r5, r5, r7
    7e2a:	195d      	adds	r5, r3, r5
    7e2c:	6125      	str	r5, [r4, #16]
    7e2e:	b00d      	add	sp, #52	; 0x34
    7e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e32:	46c0      	nop			; (mov r8, r8)
    7e34:	00008834 	.word	0x00008834
    7e38:	00007eb1 	.word	0x00007eb1
    7e3c:	00007fd5 	.word	0x00007fd5
    7e40:	fffffaff 	.word	0xfffffaff
    7e44:	00008840 	.word	0x00008840
    7e48:	fffff6ff 	.word	0xfffff6ff

00007e4c <__sccl>:
    7e4c:	b570      	push	{r4, r5, r6, lr}
    7e4e:	780b      	ldrb	r3, [r1, #0]
    7e50:	2b5e      	cmp	r3, #94	; 0x5e
    7e52:	d002      	beq.n	7e5a <__sccl+0xe>
    7e54:	1c4a      	adds	r2, r1, #1
    7e56:	2500      	movs	r5, #0
    7e58:	e002      	b.n	7e60 <__sccl+0x14>
    7e5a:	2501      	movs	r5, #1
    7e5c:	784b      	ldrb	r3, [r1, #1]
    7e5e:	1c8a      	adds	r2, r1, #2
    7e60:	0001      	movs	r1, r0
    7e62:	1c44      	adds	r4, r0, #1
    7e64:	34ff      	adds	r4, #255	; 0xff
    7e66:	700d      	strb	r5, [r1, #0]
    7e68:	3101      	adds	r1, #1
    7e6a:	42a1      	cmp	r1, r4
    7e6c:	d1fb      	bne.n	7e66 <__sccl+0x1a>
    7e6e:	2b00      	cmp	r3, #0
    7e70:	d101      	bne.n	7e76 <__sccl+0x2a>
    7e72:	1e50      	subs	r0, r2, #1
    7e74:	e01b      	b.n	7eae <__sccl+0x62>
    7e76:	2101      	movs	r1, #1
    7e78:	404d      	eors	r5, r1
    7e7a:	0011      	movs	r1, r2
    7e7c:	54c5      	strb	r5, [r0, r3]
    7e7e:	780c      	ldrb	r4, [r1, #0]
    7e80:	1c4a      	adds	r2, r1, #1
    7e82:	2c2d      	cmp	r4, #45	; 0x2d
    7e84:	d007      	beq.n	7e96 <__sccl+0x4a>
    7e86:	2c5d      	cmp	r4, #93	; 0x5d
    7e88:	d010      	beq.n	7eac <__sccl+0x60>
    7e8a:	2c00      	cmp	r4, #0
    7e8c:	d001      	beq.n	7e92 <__sccl+0x46>
    7e8e:	0023      	movs	r3, r4
    7e90:	e7f3      	b.n	7e7a <__sccl+0x2e>
    7e92:	0008      	movs	r0, r1
    7e94:	e00b      	b.n	7eae <__sccl+0x62>
    7e96:	784e      	ldrb	r6, [r1, #1]
    7e98:	2e5d      	cmp	r6, #93	; 0x5d
    7e9a:	d0f8      	beq.n	7e8e <__sccl+0x42>
    7e9c:	42b3      	cmp	r3, r6
    7e9e:	dcf6      	bgt.n	7e8e <__sccl+0x42>
    7ea0:	3102      	adds	r1, #2
    7ea2:	3301      	adds	r3, #1
    7ea4:	54c5      	strb	r5, [r0, r3]
    7ea6:	429e      	cmp	r6, r3
    7ea8:	dcfb      	bgt.n	7ea2 <__sccl+0x56>
    7eaa:	e7e8      	b.n	7e7e <__sccl+0x32>
    7eac:	0010      	movs	r0, r2
    7eae:	bd70      	pop	{r4, r5, r6, pc}

00007eb0 <_strtol_r>:
    7eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7eb2:	001e      	movs	r6, r3
    7eb4:	4b45      	ldr	r3, [pc, #276]	; (7fcc <_strtol_r+0x11c>)
    7eb6:	b087      	sub	sp, #28
    7eb8:	681b      	ldr	r3, [r3, #0]
    7eba:	9201      	str	r2, [sp, #4]
    7ebc:	9302      	str	r3, [sp, #8]
    7ebe:	2208      	movs	r2, #8
    7ec0:	000b      	movs	r3, r1
    7ec2:	9005      	str	r0, [sp, #20]
    7ec4:	9103      	str	r1, [sp, #12]
    7ec6:	781c      	ldrb	r4, [r3, #0]
    7ec8:	9902      	ldr	r1, [sp, #8]
    7eca:	1c5d      	adds	r5, r3, #1
    7ecc:	1909      	adds	r1, r1, r4
    7ece:	7848      	ldrb	r0, [r1, #1]
    7ed0:	4010      	ands	r0, r2
    7ed2:	d001      	beq.n	7ed8 <_strtol_r+0x28>
    7ed4:	002b      	movs	r3, r5
    7ed6:	e7f6      	b.n	7ec6 <_strtol_r+0x16>
    7ed8:	2c2d      	cmp	r4, #45	; 0x2d
    7eda:	d104      	bne.n	7ee6 <_strtol_r+0x36>
    7edc:	1c9d      	adds	r5, r3, #2
    7ede:	785c      	ldrb	r4, [r3, #1]
    7ee0:	2301      	movs	r3, #1
    7ee2:	9300      	str	r3, [sp, #0]
    7ee4:	e004      	b.n	7ef0 <_strtol_r+0x40>
    7ee6:	9000      	str	r0, [sp, #0]
    7ee8:	2c2b      	cmp	r4, #43	; 0x2b
    7eea:	d101      	bne.n	7ef0 <_strtol_r+0x40>
    7eec:	785c      	ldrb	r4, [r3, #1]
    7eee:	1c9d      	adds	r5, r3, #2
    7ef0:	2e00      	cmp	r6, #0
    7ef2:	d002      	beq.n	7efa <_strtol_r+0x4a>
    7ef4:	2e10      	cmp	r6, #16
    7ef6:	d10a      	bne.n	7f0e <_strtol_r+0x5e>
    7ef8:	e062      	b.n	7fc0 <_strtol_r+0x110>
    7efa:	2c30      	cmp	r4, #48	; 0x30
    7efc:	d15e      	bne.n	7fbc <_strtol_r+0x10c>
    7efe:	2220      	movs	r2, #32
    7f00:	782b      	ldrb	r3, [r5, #0]
    7f02:	4393      	bics	r3, r2
    7f04:	2b58      	cmp	r3, #88	; 0x58
    7f06:	d154      	bne.n	7fb2 <_strtol_r+0x102>
    7f08:	2610      	movs	r6, #16
    7f0a:	786c      	ldrb	r4, [r5, #1]
    7f0c:	3502      	adds	r5, #2
    7f0e:	9f00      	ldr	r7, [sp, #0]
    7f10:	0031      	movs	r1, r6
    7f12:	1e7b      	subs	r3, r7, #1
    7f14:	419f      	sbcs	r7, r3
    7f16:	4b2e      	ldr	r3, [pc, #184]	; (7fd0 <_strtol_r+0x120>)
    7f18:	18ff      	adds	r7, r7, r3
    7f1a:	0038      	movs	r0, r7
    7f1c:	f7fd fa30 	bl	5380 <__aeabi_uidivmod>
    7f20:	0038      	movs	r0, r7
    7f22:	9104      	str	r1, [sp, #16]
    7f24:	0031      	movs	r1, r6
    7f26:	f7fd f9a5 	bl	5274 <__aeabi_uidiv>
    7f2a:	2300      	movs	r3, #0
    7f2c:	2203      	movs	r2, #3
    7f2e:	0007      	movs	r7, r0
    7f30:	4694      	mov	ip, r2
    7f32:	0018      	movs	r0, r3
    7f34:	9a02      	ldr	r2, [sp, #8]
    7f36:	1912      	adds	r2, r2, r4
    7f38:	7851      	ldrb	r1, [r2, #1]
    7f3a:	2204      	movs	r2, #4
    7f3c:	4211      	tst	r1, r2
    7f3e:	d001      	beq.n	7f44 <_strtol_r+0x94>
    7f40:	3c30      	subs	r4, #48	; 0x30
    7f42:	e007      	b.n	7f54 <_strtol_r+0xa4>
    7f44:	4662      	mov	r2, ip
    7f46:	4011      	ands	r1, r2
    7f48:	d017      	beq.n	7f7a <_strtol_r+0xca>
    7f4a:	2237      	movs	r2, #55	; 0x37
    7f4c:	2901      	cmp	r1, #1
    7f4e:	d000      	beq.n	7f52 <_strtol_r+0xa2>
    7f50:	3220      	adds	r2, #32
    7f52:	1aa4      	subs	r4, r4, r2
    7f54:	42a6      	cmp	r6, r4
    7f56:	dd10      	ble.n	7f7a <_strtol_r+0xca>
    7f58:	1c5a      	adds	r2, r3, #1
    7f5a:	d00b      	beq.n	7f74 <_strtol_r+0xc4>
    7f5c:	42b8      	cmp	r0, r7
    7f5e:	d807      	bhi.n	7f70 <_strtol_r+0xc0>
    7f60:	d102      	bne.n	7f68 <_strtol_r+0xb8>
    7f62:	9b04      	ldr	r3, [sp, #16]
    7f64:	429c      	cmp	r4, r3
    7f66:	dc03      	bgt.n	7f70 <_strtol_r+0xc0>
    7f68:	4370      	muls	r0, r6
    7f6a:	2301      	movs	r3, #1
    7f6c:	1820      	adds	r0, r4, r0
    7f6e:	e001      	b.n	7f74 <_strtol_r+0xc4>
    7f70:	2301      	movs	r3, #1
    7f72:	425b      	negs	r3, r3
    7f74:	782c      	ldrb	r4, [r5, #0]
    7f76:	3501      	adds	r5, #1
    7f78:	e7dc      	b.n	7f34 <_strtol_r+0x84>
    7f7a:	1c5a      	adds	r2, r3, #1
    7f7c:	d10b      	bne.n	7f96 <_strtol_r+0xe6>
    7f7e:	9800      	ldr	r0, [sp, #0]
    7f80:	9a05      	ldr	r2, [sp, #20]
    7f82:	1e43      	subs	r3, r0, #1
    7f84:	4198      	sbcs	r0, r3
    7f86:	4b12      	ldr	r3, [pc, #72]	; (7fd0 <_strtol_r+0x120>)
    7f88:	18c0      	adds	r0, r0, r3
    7f8a:	2322      	movs	r3, #34	; 0x22
    7f8c:	6013      	str	r3, [r2, #0]
    7f8e:	9b01      	ldr	r3, [sp, #4]
    7f90:	2b00      	cmp	r3, #0
    7f92:	d10a      	bne.n	7faa <_strtol_r+0xfa>
    7f94:	e017      	b.n	7fc6 <_strtol_r+0x116>
    7f96:	9a00      	ldr	r2, [sp, #0]
    7f98:	2a00      	cmp	r2, #0
    7f9a:	d000      	beq.n	7f9e <_strtol_r+0xee>
    7f9c:	4240      	negs	r0, r0
    7f9e:	9a01      	ldr	r2, [sp, #4]
    7fa0:	2a00      	cmp	r2, #0
    7fa2:	d010      	beq.n	7fc6 <_strtol_r+0x116>
    7fa4:	9a03      	ldr	r2, [sp, #12]
    7fa6:	2b00      	cmp	r3, #0
    7fa8:	d000      	beq.n	7fac <_strtol_r+0xfc>
    7faa:	1e6a      	subs	r2, r5, #1
    7fac:	9b01      	ldr	r3, [sp, #4]
    7fae:	601a      	str	r2, [r3, #0]
    7fb0:	e009      	b.n	7fc6 <_strtol_r+0x116>
    7fb2:	2430      	movs	r4, #48	; 0x30
    7fb4:	2e00      	cmp	r6, #0
    7fb6:	d1aa      	bne.n	7f0e <_strtol_r+0x5e>
    7fb8:	2608      	movs	r6, #8
    7fba:	e7a8      	b.n	7f0e <_strtol_r+0x5e>
    7fbc:	260a      	movs	r6, #10
    7fbe:	e7a6      	b.n	7f0e <_strtol_r+0x5e>
    7fc0:	2c30      	cmp	r4, #48	; 0x30
    7fc2:	d09c      	beq.n	7efe <_strtol_r+0x4e>
    7fc4:	e7a3      	b.n	7f0e <_strtol_r+0x5e>
    7fc6:	b007      	add	sp, #28
    7fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7fca:	46c0      	nop			; (mov r8, r8)
    7fcc:	200000b8 	.word	0x200000b8
    7fd0:	7fffffff 	.word	0x7fffffff

00007fd4 <_strtoul_r>:
    7fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fd6:	001e      	movs	r6, r3
    7fd8:	4b3f      	ldr	r3, [pc, #252]	; (80d8 <_strtoul_r+0x104>)
    7fda:	b087      	sub	sp, #28
    7fdc:	681b      	ldr	r3, [r3, #0]
    7fde:	9104      	str	r1, [sp, #16]
    7fe0:	9302      	str	r3, [sp, #8]
    7fe2:	0017      	movs	r7, r2
    7fe4:	000b      	movs	r3, r1
    7fe6:	2108      	movs	r1, #8
    7fe8:	9005      	str	r0, [sp, #20]
    7fea:	781c      	ldrb	r4, [r3, #0]
    7fec:	9a02      	ldr	r2, [sp, #8]
    7fee:	1c5d      	adds	r5, r3, #1
    7ff0:	1912      	adds	r2, r2, r4
    7ff2:	7852      	ldrb	r2, [r2, #1]
    7ff4:	400a      	ands	r2, r1
    7ff6:	d001      	beq.n	7ffc <_strtoul_r+0x28>
    7ff8:	002b      	movs	r3, r5
    7ffa:	e7f6      	b.n	7fea <_strtoul_r+0x16>
    7ffc:	2c2d      	cmp	r4, #45	; 0x2d
    7ffe:	d104      	bne.n	800a <_strtoul_r+0x36>
    8000:	1c9d      	adds	r5, r3, #2
    8002:	785c      	ldrb	r4, [r3, #1]
    8004:	2301      	movs	r3, #1
    8006:	9301      	str	r3, [sp, #4]
    8008:	e004      	b.n	8014 <_strtoul_r+0x40>
    800a:	9201      	str	r2, [sp, #4]
    800c:	2c2b      	cmp	r4, #43	; 0x2b
    800e:	d101      	bne.n	8014 <_strtoul_r+0x40>
    8010:	785c      	ldrb	r4, [r3, #1]
    8012:	1c9d      	adds	r5, r3, #2
    8014:	2e00      	cmp	r6, #0
    8016:	d002      	beq.n	801e <_strtoul_r+0x4a>
    8018:	2e10      	cmp	r6, #16
    801a:	d10a      	bne.n	8032 <_strtoul_r+0x5e>
    801c:	e057      	b.n	80ce <_strtoul_r+0xfa>
    801e:	2c30      	cmp	r4, #48	; 0x30
    8020:	d153      	bne.n	80ca <_strtoul_r+0xf6>
    8022:	2220      	movs	r2, #32
    8024:	782b      	ldrb	r3, [r5, #0]
    8026:	4393      	bics	r3, r2
    8028:	2b58      	cmp	r3, #88	; 0x58
    802a:	d149      	bne.n	80c0 <_strtoul_r+0xec>
    802c:	2610      	movs	r6, #16
    802e:	786c      	ldrb	r4, [r5, #1]
    8030:	3502      	adds	r5, #2
    8032:	2001      	movs	r0, #1
    8034:	0031      	movs	r1, r6
    8036:	4240      	negs	r0, r0
    8038:	f7fd f91c 	bl	5274 <__aeabi_uidiv>
    803c:	9003      	str	r0, [sp, #12]
    803e:	2001      	movs	r0, #1
    8040:	0031      	movs	r1, r6
    8042:	4240      	negs	r0, r0
    8044:	f7fd f99c 	bl	5380 <__aeabi_uidivmod>
    8048:	2300      	movs	r3, #0
    804a:	468c      	mov	ip, r1
    804c:	0018      	movs	r0, r3
    804e:	9a02      	ldr	r2, [sp, #8]
    8050:	1912      	adds	r2, r2, r4
    8052:	7851      	ldrb	r1, [r2, #1]
    8054:	2204      	movs	r2, #4
    8056:	4211      	tst	r1, r2
    8058:	d001      	beq.n	805e <_strtoul_r+0x8a>
    805a:	3c30      	subs	r4, #48	; 0x30
    805c:	e007      	b.n	806e <_strtoul_r+0x9a>
    805e:	2203      	movs	r2, #3
    8060:	4011      	ands	r1, r2
    8062:	d017      	beq.n	8094 <_strtoul_r+0xc0>
    8064:	3234      	adds	r2, #52	; 0x34
    8066:	2901      	cmp	r1, #1
    8068:	d000      	beq.n	806c <_strtoul_r+0x98>
    806a:	3220      	adds	r2, #32
    806c:	1aa4      	subs	r4, r4, r2
    806e:	42a6      	cmp	r6, r4
    8070:	dd10      	ble.n	8094 <_strtoul_r+0xc0>
    8072:	2b00      	cmp	r3, #0
    8074:	db09      	blt.n	808a <_strtoul_r+0xb6>
    8076:	9b03      	ldr	r3, [sp, #12]
    8078:	4298      	cmp	r0, r3
    807a:	d806      	bhi.n	808a <_strtoul_r+0xb6>
    807c:	d101      	bne.n	8082 <_strtoul_r+0xae>
    807e:	4564      	cmp	r4, ip
    8080:	dc03      	bgt.n	808a <_strtoul_r+0xb6>
    8082:	4370      	muls	r0, r6
    8084:	2301      	movs	r3, #1
    8086:	1820      	adds	r0, r4, r0
    8088:	e001      	b.n	808e <_strtoul_r+0xba>
    808a:	2301      	movs	r3, #1
    808c:	425b      	negs	r3, r3
    808e:	782c      	ldrb	r4, [r5, #0]
    8090:	3501      	adds	r5, #1
    8092:	e7dc      	b.n	804e <_strtoul_r+0x7a>
    8094:	2b00      	cmp	r3, #0
    8096:	da07      	bge.n	80a8 <_strtoul_r+0xd4>
    8098:	2322      	movs	r3, #34	; 0x22
    809a:	2001      	movs	r0, #1
    809c:	9a05      	ldr	r2, [sp, #20]
    809e:	4240      	negs	r0, r0
    80a0:	6013      	str	r3, [r2, #0]
    80a2:	2f00      	cmp	r7, #0
    80a4:	d109      	bne.n	80ba <_strtoul_r+0xe6>
    80a6:	e015      	b.n	80d4 <_strtoul_r+0x100>
    80a8:	9a01      	ldr	r2, [sp, #4]
    80aa:	2a00      	cmp	r2, #0
    80ac:	d000      	beq.n	80b0 <_strtoul_r+0xdc>
    80ae:	4240      	negs	r0, r0
    80b0:	2f00      	cmp	r7, #0
    80b2:	d00f      	beq.n	80d4 <_strtoul_r+0x100>
    80b4:	9a04      	ldr	r2, [sp, #16]
    80b6:	2b00      	cmp	r3, #0
    80b8:	d000      	beq.n	80bc <_strtoul_r+0xe8>
    80ba:	1e6a      	subs	r2, r5, #1
    80bc:	603a      	str	r2, [r7, #0]
    80be:	e009      	b.n	80d4 <_strtoul_r+0x100>
    80c0:	2430      	movs	r4, #48	; 0x30
    80c2:	2e00      	cmp	r6, #0
    80c4:	d1b5      	bne.n	8032 <_strtoul_r+0x5e>
    80c6:	2608      	movs	r6, #8
    80c8:	e7b3      	b.n	8032 <_strtoul_r+0x5e>
    80ca:	260a      	movs	r6, #10
    80cc:	e7b1      	b.n	8032 <_strtoul_r+0x5e>
    80ce:	2c30      	cmp	r4, #48	; 0x30
    80d0:	d0a7      	beq.n	8022 <_strtoul_r+0x4e>
    80d2:	e7ae      	b.n	8032 <_strtoul_r+0x5e>
    80d4:	b007      	add	sp, #28
    80d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80d8:	200000b8 	.word	0x200000b8

000080dc <__submore>:
    80dc:	000b      	movs	r3, r1
    80de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    80e0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    80e2:	3344      	adds	r3, #68	; 0x44
    80e4:	000c      	movs	r4, r1
    80e6:	429d      	cmp	r5, r3
    80e8:	d11b      	bne.n	8122 <__submore+0x46>
    80ea:	2680      	movs	r6, #128	; 0x80
    80ec:	00f6      	lsls	r6, r6, #3
    80ee:	0031      	movs	r1, r6
    80f0:	f000 f898 	bl	8224 <_malloc_r>
    80f4:	2800      	cmp	r0, #0
    80f6:	d102      	bne.n	80fe <__submore+0x22>
    80f8:	2001      	movs	r0, #1
    80fa:	4240      	negs	r0, r0
    80fc:	e025      	b.n	814a <__submore+0x6e>
    80fe:	0023      	movs	r3, r4
    8100:	6360      	str	r0, [r4, #52]	; 0x34
    8102:	63a6      	str	r6, [r4, #56]	; 0x38
    8104:	3346      	adds	r3, #70	; 0x46
    8106:	781a      	ldrb	r2, [r3, #0]
    8108:	4b10      	ldr	r3, [pc, #64]	; (814c <__submore+0x70>)
    810a:	54c2      	strb	r2, [r0, r3]
    810c:	0023      	movs	r3, r4
    810e:	3345      	adds	r3, #69	; 0x45
    8110:	781a      	ldrb	r2, [r3, #0]
    8112:	4b0f      	ldr	r3, [pc, #60]	; (8150 <__submore+0x74>)
    8114:	54c2      	strb	r2, [r0, r3]
    8116:	782a      	ldrb	r2, [r5, #0]
    8118:	4b0e      	ldr	r3, [pc, #56]	; (8154 <__submore+0x78>)
    811a:	54c2      	strb	r2, [r0, r3]
    811c:	18c0      	adds	r0, r0, r3
    811e:	6020      	str	r0, [r4, #0]
    8120:	e012      	b.n	8148 <__submore+0x6c>
    8122:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    8124:	0029      	movs	r1, r5
    8126:	0073      	lsls	r3, r6, #1
    8128:	001a      	movs	r2, r3
    812a:	9301      	str	r3, [sp, #4]
    812c:	f000 f8d0 	bl	82d0 <_realloc_r>
    8130:	1e05      	subs	r5, r0, #0
    8132:	d0e1      	beq.n	80f8 <__submore+0x1c>
    8134:	1987      	adds	r7, r0, r6
    8136:	0001      	movs	r1, r0
    8138:	0032      	movs	r2, r6
    813a:	0038      	movs	r0, r7
    813c:	f7fe ffea 	bl	7114 <memcpy>
    8140:	9b01      	ldr	r3, [sp, #4]
    8142:	6027      	str	r7, [r4, #0]
    8144:	6365      	str	r5, [r4, #52]	; 0x34
    8146:	63a3      	str	r3, [r4, #56]	; 0x38
    8148:	2000      	movs	r0, #0
    814a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    814c:	000003ff 	.word	0x000003ff
    8150:	000003fe 	.word	0x000003fe
    8154:	000003fd 	.word	0x000003fd

00008158 <memchr>:
    8158:	b2c9      	uxtb	r1, r1
    815a:	1882      	adds	r2, r0, r2
    815c:	4290      	cmp	r0, r2
    815e:	d004      	beq.n	816a <memchr+0x12>
    8160:	7803      	ldrb	r3, [r0, #0]
    8162:	428b      	cmp	r3, r1
    8164:	d002      	beq.n	816c <memchr+0x14>
    8166:	3001      	adds	r0, #1
    8168:	e7f8      	b.n	815c <memchr+0x4>
    816a:	2000      	movs	r0, #0
    816c:	4770      	bx	lr

0000816e <memmove>:
    816e:	b510      	push	{r4, lr}
    8170:	4288      	cmp	r0, r1
    8172:	d902      	bls.n	817a <memmove+0xc>
    8174:	188b      	adds	r3, r1, r2
    8176:	4298      	cmp	r0, r3
    8178:	d301      	bcc.n	817e <memmove+0x10>
    817a:	2300      	movs	r3, #0
    817c:	e005      	b.n	818a <memmove+0x1c>
    817e:	1a9b      	subs	r3, r3, r2
    8180:	3a01      	subs	r2, #1
    8182:	d308      	bcc.n	8196 <memmove+0x28>
    8184:	5c99      	ldrb	r1, [r3, r2]
    8186:	5481      	strb	r1, [r0, r2]
    8188:	e7fa      	b.n	8180 <memmove+0x12>
    818a:	4293      	cmp	r3, r2
    818c:	d003      	beq.n	8196 <memmove+0x28>
    818e:	5ccc      	ldrb	r4, [r1, r3]
    8190:	54c4      	strb	r4, [r0, r3]
    8192:	3301      	adds	r3, #1
    8194:	e7f9      	b.n	818a <memmove+0x1c>
    8196:	bd10      	pop	{r4, pc}

00008198 <_free_r>:
    8198:	b530      	push	{r4, r5, lr}
    819a:	2900      	cmp	r1, #0
    819c:	d03e      	beq.n	821c <_free_r+0x84>
    819e:	3904      	subs	r1, #4
    81a0:	680b      	ldr	r3, [r1, #0]
    81a2:	2b00      	cmp	r3, #0
    81a4:	da00      	bge.n	81a8 <_free_r+0x10>
    81a6:	18c9      	adds	r1, r1, r3
    81a8:	4a1d      	ldr	r2, [pc, #116]	; (8220 <_free_r+0x88>)
    81aa:	6813      	ldr	r3, [r2, #0]
    81ac:	0014      	movs	r4, r2
    81ae:	2b00      	cmp	r3, #0
    81b0:	d102      	bne.n	81b8 <_free_r+0x20>
    81b2:	604b      	str	r3, [r1, #4]
    81b4:	6011      	str	r1, [r2, #0]
    81b6:	e031      	b.n	821c <_free_r+0x84>
    81b8:	428b      	cmp	r3, r1
    81ba:	d90d      	bls.n	81d8 <_free_r+0x40>
    81bc:	680a      	ldr	r2, [r1, #0]
    81be:	1888      	adds	r0, r1, r2
    81c0:	4283      	cmp	r3, r0
    81c2:	d103      	bne.n	81cc <_free_r+0x34>
    81c4:	6818      	ldr	r0, [r3, #0]
    81c6:	685b      	ldr	r3, [r3, #4]
    81c8:	1882      	adds	r2, r0, r2
    81ca:	600a      	str	r2, [r1, #0]
    81cc:	604b      	str	r3, [r1, #4]
    81ce:	6021      	str	r1, [r4, #0]
    81d0:	e024      	b.n	821c <_free_r+0x84>
    81d2:	428a      	cmp	r2, r1
    81d4:	d803      	bhi.n	81de <_free_r+0x46>
    81d6:	0013      	movs	r3, r2
    81d8:	685a      	ldr	r2, [r3, #4]
    81da:	2a00      	cmp	r2, #0
    81dc:	d1f9      	bne.n	81d2 <_free_r+0x3a>
    81de:	681d      	ldr	r5, [r3, #0]
    81e0:	195c      	adds	r4, r3, r5
    81e2:	428c      	cmp	r4, r1
    81e4:	d10b      	bne.n	81fe <_free_r+0x66>
    81e6:	6809      	ldr	r1, [r1, #0]
    81e8:	1869      	adds	r1, r5, r1
    81ea:	1858      	adds	r0, r3, r1
    81ec:	6019      	str	r1, [r3, #0]
    81ee:	4282      	cmp	r2, r0
    81f0:	d114      	bne.n	821c <_free_r+0x84>
    81f2:	6810      	ldr	r0, [r2, #0]
    81f4:	6852      	ldr	r2, [r2, #4]
    81f6:	1841      	adds	r1, r0, r1
    81f8:	6019      	str	r1, [r3, #0]
    81fa:	605a      	str	r2, [r3, #4]
    81fc:	e00e      	b.n	821c <_free_r+0x84>
    81fe:	428c      	cmp	r4, r1
    8200:	d902      	bls.n	8208 <_free_r+0x70>
    8202:	230c      	movs	r3, #12
    8204:	6003      	str	r3, [r0, #0]
    8206:	e009      	b.n	821c <_free_r+0x84>
    8208:	6808      	ldr	r0, [r1, #0]
    820a:	180c      	adds	r4, r1, r0
    820c:	42a2      	cmp	r2, r4
    820e:	d103      	bne.n	8218 <_free_r+0x80>
    8210:	6814      	ldr	r4, [r2, #0]
    8212:	6852      	ldr	r2, [r2, #4]
    8214:	1820      	adds	r0, r4, r0
    8216:	6008      	str	r0, [r1, #0]
    8218:	604a      	str	r2, [r1, #4]
    821a:	6059      	str	r1, [r3, #4]
    821c:	bd30      	pop	{r4, r5, pc}
    821e:	46c0      	nop			; (mov r8, r8)
    8220:	2000010c 	.word	0x2000010c

00008224 <_malloc_r>:
    8224:	2303      	movs	r3, #3
    8226:	b570      	push	{r4, r5, r6, lr}
    8228:	1ccd      	adds	r5, r1, #3
    822a:	439d      	bics	r5, r3
    822c:	3508      	adds	r5, #8
    822e:	0006      	movs	r6, r0
    8230:	2d0c      	cmp	r5, #12
    8232:	d201      	bcs.n	8238 <_malloc_r+0x14>
    8234:	250c      	movs	r5, #12
    8236:	e005      	b.n	8244 <_malloc_r+0x20>
    8238:	2d00      	cmp	r5, #0
    823a:	da03      	bge.n	8244 <_malloc_r+0x20>
    823c:	230c      	movs	r3, #12
    823e:	2000      	movs	r0, #0
    8240:	6033      	str	r3, [r6, #0]
    8242:	e040      	b.n	82c6 <_malloc_r+0xa2>
    8244:	42a9      	cmp	r1, r5
    8246:	d8f9      	bhi.n	823c <_malloc_r+0x18>
    8248:	4b1f      	ldr	r3, [pc, #124]	; (82c8 <_malloc_r+0xa4>)
    824a:	681c      	ldr	r4, [r3, #0]
    824c:	001a      	movs	r2, r3
    824e:	0021      	movs	r1, r4
    8250:	2900      	cmp	r1, #0
    8252:	d013      	beq.n	827c <_malloc_r+0x58>
    8254:	680b      	ldr	r3, [r1, #0]
    8256:	1b5b      	subs	r3, r3, r5
    8258:	d40d      	bmi.n	8276 <_malloc_r+0x52>
    825a:	2b0b      	cmp	r3, #11
    825c:	d902      	bls.n	8264 <_malloc_r+0x40>
    825e:	600b      	str	r3, [r1, #0]
    8260:	18cc      	adds	r4, r1, r3
    8262:	e01e      	b.n	82a2 <_malloc_r+0x7e>
    8264:	428c      	cmp	r4, r1
    8266:	d102      	bne.n	826e <_malloc_r+0x4a>
    8268:	6863      	ldr	r3, [r4, #4]
    826a:	6013      	str	r3, [r2, #0]
    826c:	e01a      	b.n	82a4 <_malloc_r+0x80>
    826e:	684b      	ldr	r3, [r1, #4]
    8270:	6063      	str	r3, [r4, #4]
    8272:	000c      	movs	r4, r1
    8274:	e016      	b.n	82a4 <_malloc_r+0x80>
    8276:	000c      	movs	r4, r1
    8278:	6849      	ldr	r1, [r1, #4]
    827a:	e7e9      	b.n	8250 <_malloc_r+0x2c>
    827c:	4c13      	ldr	r4, [pc, #76]	; (82cc <_malloc_r+0xa8>)
    827e:	6823      	ldr	r3, [r4, #0]
    8280:	2b00      	cmp	r3, #0
    8282:	d103      	bne.n	828c <_malloc_r+0x68>
    8284:	0030      	movs	r0, r6
    8286:	f000 f849 	bl	831c <_sbrk_r>
    828a:	6020      	str	r0, [r4, #0]
    828c:	0029      	movs	r1, r5
    828e:	0030      	movs	r0, r6
    8290:	f000 f844 	bl	831c <_sbrk_r>
    8294:	1c43      	adds	r3, r0, #1
    8296:	d0d1      	beq.n	823c <_malloc_r+0x18>
    8298:	2303      	movs	r3, #3
    829a:	1cc4      	adds	r4, r0, #3
    829c:	439c      	bics	r4, r3
    829e:	42a0      	cmp	r0, r4
    82a0:	d10a      	bne.n	82b8 <_malloc_r+0x94>
    82a2:	6025      	str	r5, [r4, #0]
    82a4:	0020      	movs	r0, r4
    82a6:	2207      	movs	r2, #7
    82a8:	300b      	adds	r0, #11
    82aa:	1d23      	adds	r3, r4, #4
    82ac:	4390      	bics	r0, r2
    82ae:	1ac3      	subs	r3, r0, r3
    82b0:	d009      	beq.n	82c6 <_malloc_r+0xa2>
    82b2:	425a      	negs	r2, r3
    82b4:	50e2      	str	r2, [r4, r3]
    82b6:	e006      	b.n	82c6 <_malloc_r+0xa2>
    82b8:	1a21      	subs	r1, r4, r0
    82ba:	0030      	movs	r0, r6
    82bc:	f000 f82e 	bl	831c <_sbrk_r>
    82c0:	1c43      	adds	r3, r0, #1
    82c2:	d1ee      	bne.n	82a2 <_malloc_r+0x7e>
    82c4:	e7ba      	b.n	823c <_malloc_r+0x18>
    82c6:	bd70      	pop	{r4, r5, r6, pc}
    82c8:	2000010c 	.word	0x2000010c
    82cc:	20000108 	.word	0x20000108

000082d0 <_realloc_r>:
    82d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82d2:	0006      	movs	r6, r0
    82d4:	000c      	movs	r4, r1
    82d6:	0015      	movs	r5, r2
    82d8:	2900      	cmp	r1, #0
    82da:	d104      	bne.n	82e6 <_realloc_r+0x16>
    82dc:	0011      	movs	r1, r2
    82de:	f7ff ffa1 	bl	8224 <_malloc_r>
    82e2:	0004      	movs	r4, r0
    82e4:	e018      	b.n	8318 <_realloc_r+0x48>
    82e6:	2a00      	cmp	r2, #0
    82e8:	d103      	bne.n	82f2 <_realloc_r+0x22>
    82ea:	f7ff ff55 	bl	8198 <_free_r>
    82ee:	002c      	movs	r4, r5
    82f0:	e012      	b.n	8318 <_realloc_r+0x48>
    82f2:	f000 f825 	bl	8340 <_malloc_usable_size_r>
    82f6:	4285      	cmp	r5, r0
    82f8:	d90e      	bls.n	8318 <_realloc_r+0x48>
    82fa:	0029      	movs	r1, r5
    82fc:	0030      	movs	r0, r6
    82fe:	f7ff ff91 	bl	8224 <_malloc_r>
    8302:	1e07      	subs	r7, r0, #0
    8304:	d007      	beq.n	8316 <_realloc_r+0x46>
    8306:	0021      	movs	r1, r4
    8308:	002a      	movs	r2, r5
    830a:	f7fe ff03 	bl	7114 <memcpy>
    830e:	0021      	movs	r1, r4
    8310:	0030      	movs	r0, r6
    8312:	f7ff ff41 	bl	8198 <_free_r>
    8316:	003c      	movs	r4, r7
    8318:	0020      	movs	r0, r4
    831a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000831c <_sbrk_r>:
    831c:	2300      	movs	r3, #0
    831e:	b570      	push	{r4, r5, r6, lr}
    8320:	4c06      	ldr	r4, [pc, #24]	; (833c <_sbrk_r+0x20>)
    8322:	0005      	movs	r5, r0
    8324:	0008      	movs	r0, r1
    8326:	6023      	str	r3, [r4, #0]
    8328:	f7fc fedc 	bl	50e4 <_sbrk>
    832c:	1c43      	adds	r3, r0, #1
    832e:	d103      	bne.n	8338 <_sbrk_r+0x1c>
    8330:	6823      	ldr	r3, [r4, #0]
    8332:	2b00      	cmp	r3, #0
    8334:	d000      	beq.n	8338 <_sbrk_r+0x1c>
    8336:	602b      	str	r3, [r5, #0]
    8338:	bd70      	pop	{r4, r5, r6, pc}
    833a:	46c0      	nop			; (mov r8, r8)
    833c:	2000027c 	.word	0x2000027c

00008340 <_malloc_usable_size_r>:
    8340:	1f0b      	subs	r3, r1, #4
    8342:	681a      	ldr	r2, [r3, #0]
    8344:	1f10      	subs	r0, r2, #4
    8346:	2a00      	cmp	r2, #0
    8348:	da04      	bge.n	8354 <_malloc_usable_size_r+0x14>
    834a:	1889      	adds	r1, r1, r2
    834c:	3904      	subs	r1, #4
    834e:	680b      	ldr	r3, [r1, #0]
    8350:	18d0      	adds	r0, r2, r3
    8352:	3804      	subs	r0, #4
    8354:	4770      	bx	lr
    8356:	0000      	movs	r0, r0
    8358:	00000002 	.word	0x00000002
    835c:	00000003 	.word	0x00000003
    8360:	00000028 	.word	0x00000028
    8364:	00000029 	.word	0x00000029
    8368:	00000004 	.word	0x00000004
    836c:	00000005 	.word	0x00000005
    8370:	00000006 	.word	0x00000006
    8374:	00000007 	.word	0x00000007
    8378:	0000ffff 	.word	0x0000ffff
    837c:	0000ffff 	.word	0x0000ffff
    8380:	00000022 	.word	0x00000022
    8384:	00000023 	.word	0x00000023
    8388:	0000ffff 	.word	0x0000ffff
    838c:	0000ffff 	.word	0x0000ffff
    8390:	0000ffff 	.word	0x0000ffff
    8394:	0000ffff 	.word	0x0000ffff
    8398:	00000008 	.word	0x00000008
    839c:	00000009 	.word	0x00000009
    83a0:	0000000a 	.word	0x0000000a
    83a4:	0000000b 	.word	0x0000000b
    83a8:	000004e6 	.word	0x000004e6
    83ac:	000004ec 	.word	0x000004ec
    83b0:	000004ec 	.word	0x000004ec
    83b4:	000004ec 	.word	0x000004ec
    83b8:	000004ec 	.word	0x000004ec
    83bc:	000004ec 	.word	0x000004ec
    83c0:	000004ec 	.word	0x000004ec
    83c4:	000004ec 	.word	0x000004ec
    83c8:	000004ec 	.word	0x000004ec
    83cc:	000004ec 	.word	0x000004ec
    83d0:	000004ec 	.word	0x000004ec
    83d4:	000004ec 	.word	0x000004ec
    83d8:	000004ec 	.word	0x000004ec
    83dc:	000004ec 	.word	0x000004ec
    83e0:	000004ec 	.word	0x000004ec
    83e4:	000004ec 	.word	0x000004ec
    83e8:	000004c4 	.word	0x000004c4
    83ec:	000004ec 	.word	0x000004ec
    83f0:	000004ec 	.word	0x000004ec
    83f4:	000004ec 	.word	0x000004ec
    83f8:	000004ec 	.word	0x000004ec
    83fc:	000004ec 	.word	0x000004ec
    8400:	000004ec 	.word	0x000004ec
    8404:	000004ec 	.word	0x000004ec
    8408:	000004ec 	.word	0x000004ec
    840c:	000004ec 	.word	0x000004ec
    8410:	000004ec 	.word	0x000004ec
    8414:	000004ec 	.word	0x000004ec
    8418:	000004ec 	.word	0x000004ec
    841c:	000004ec 	.word	0x000004ec
    8420:	000004ec 	.word	0x000004ec
    8424:	000004ec 	.word	0x000004ec
    8428:	000004e0 	.word	0x000004e0
    842c:	000004ec 	.word	0x000004ec
    8430:	000004ec 	.word	0x000004ec
    8434:	000004ec 	.word	0x000004ec
    8438:	000004ec 	.word	0x000004ec
    843c:	000004ec 	.word	0x000004ec
    8440:	000004ec 	.word	0x000004ec
    8444:	000004ec 	.word	0x000004ec
    8448:	000004ec 	.word	0x000004ec
    844c:	000004ec 	.word	0x000004ec
    8450:	000004ec 	.word	0x000004ec
    8454:	000004ec 	.word	0x000004ec
    8458:	000004ec 	.word	0x000004ec
    845c:	000004ec 	.word	0x000004ec
    8460:	000004ec 	.word	0x000004ec
    8464:	000004ec 	.word	0x000004ec
    8468:	000004da 	.word	0x000004da
    846c:	00000482 	.word	0x00000482
    8470:	00000498 	.word	0x00000498
    8474:	000004ae 	.word	0x000004ae
    8478:	00000468 	.word	0x00000468
    847c:	42000800 	.word	0x42000800
    8480:	42000c00 	.word	0x42000c00
    8484:	42001000 	.word	0x42001000
    8488:	42001400 	.word	0x42001400
    848c:	42001800 	.word	0x42001800
    8490:	42001c00 	.word	0x42001c00
    8494:	20626f62 	.word	0x20626f62
    8498:	20736177 	.word	0x20736177
    849c:	6e756f66 	.word	0x6e756f66
    84a0:	00000064 	.word	0x00000064
    84a4:	204d5750 	.word	0x204d5750
    84a8:	00006425 	.word	0x00006425
    84ac:	6425203a 	.word	0x6425203a
    84b0:	00000000 	.word	0x00000000
    84b4:	31414846 	.word	0x31414846
    84b8:	00000000 	.word	0x00000000
    84bc:	30414846 	.word	0x30414846
    84c0:	00000000 	.word	0x00000000
    84c4:	20414b42 	.word	0x20414b42
    84c8:	00000031 	.word	0x00000031
    84cc:	20414b42 	.word	0x20414b42
    84d0:	00000030 	.word	0x00000030
    84d4:	204c4b42 	.word	0x204c4b42
    84d8:	00000031 	.word	0x00000031
    84dc:	204c4b42 	.word	0x204c4b42
    84e0:	00000030 	.word	0x00000030
    84e4:	20524b42 	.word	0x20524b42
    84e8:	00000031 	.word	0x00000031
    84ec:	20524b42 	.word	0x20524b42
    84f0:	00000030 	.word	0x00000030
    84f4:	314e5248 	.word	0x314e5248
    84f8:	00003120 	.word	0x00003120
    84fc:	314e5248 	.word	0x314e5248
    8500:	00003020 	.word	0x00003020
    8504:	324e5248 	.word	0x324e5248
    8508:	00003120 	.word	0x00003120
    850c:	324e5248 	.word	0x324e5248
    8510:	00003020 	.word	0x00003020
    8514:	334e5248 	.word	0x334e5248
    8518:	00003120 	.word	0x00003120
    851c:	334e5248 	.word	0x334e5248
    8520:	00003020 	.word	0x00003020
    8524:	344e5248 	.word	0x344e5248
    8528:	00003120 	.word	0x00003120
    852c:	344e5248 	.word	0x344e5248
    8530:	00003020 	.word	0x00003020
    8534:	30304253 	.word	0x30304253
    8538:	00003120 	.word	0x00003120
    853c:	30304253 	.word	0x30304253
    8540:	00003020 	.word	0x00003020
    8544:	31304253 	.word	0x31304253
    8548:	00003120 	.word	0x00003120
    854c:	31304253 	.word	0x31304253
    8550:	00003020 	.word	0x00003020
    8554:	32304253 	.word	0x32304253
    8558:	00003120 	.word	0x00003120
    855c:	32304253 	.word	0x32304253
    8560:	00003020 	.word	0x00003020
    8564:	33304253 	.word	0x33304253
    8568:	00003120 	.word	0x00003120
    856c:	33304253 	.word	0x33304253
    8570:	00003020 	.word	0x00003020
    8574:	34304253 	.word	0x34304253
    8578:	00003120 	.word	0x00003120
    857c:	34304253 	.word	0x34304253
    8580:	00003020 	.word	0x00003020
    8584:	35304253 	.word	0x35304253
    8588:	00003120 	.word	0x00003120
    858c:	35304253 	.word	0x35304253
    8590:	00003020 	.word	0x00003020
    8594:	36304253 	.word	0x36304253
    8598:	00003120 	.word	0x00003120
    859c:	36304253 	.word	0x36304253
    85a0:	00003020 	.word	0x00003020
    85a4:	37304253 	.word	0x37304253
    85a8:	00003120 	.word	0x00003120
    85ac:	37304253 	.word	0x37304253
    85b0:	00003020 	.word	0x00003020
    85b4:	38304253 	.word	0x38304253
    85b8:	00003120 	.word	0x00003120
    85bc:	38304253 	.word	0x38304253
    85c0:	00003020 	.word	0x00003020
    85c4:	39304253 	.word	0x39304253
    85c8:	00003120 	.word	0x00003120
    85cc:	39304253 	.word	0x39304253
    85d0:	00003020 	.word	0x00003020
    85d4:	30314253 	.word	0x30314253
    85d8:	00003120 	.word	0x00003120
    85dc:	30314253 	.word	0x30314253
    85e0:	00003020 	.word	0x00003020
    85e4:	20545250 	.word	0x20545250
    85e8:	00000031 	.word	0x00000031
    85ec:	20545250 	.word	0x20545250
    85f0:	00000030 	.word	0x00000030
    85f4:	20525457 	.word	0x20525457
    85f8:	00000031 	.word	0x00000031
    85fc:	20415453 	.word	0x20415453
    8600:	00000031 	.word	0x00000031
    8604:	20415453 	.word	0x20415453
    8608:	00000030 	.word	0x00000030
    860c:	2044454c 	.word	0x2044454c
    8610:	00000031 	.word	0x00000031
    8614:	2044454c 	.word	0x2044454c
    8618:	00000030 	.word	0x00000030
    861c:	204c4448 	.word	0x204c4448
    8620:	00000031 	.word	0x00000031
    8624:	204c4448 	.word	0x204c4448
    8628:	00000030 	.word	0x00000030
    862c:	41495242 	.word	0x41495242
    8630:	0031204e 	.word	0x0031204e
    8634:	41495242 	.word	0x41495242
    8638:	0030204e 	.word	0x0030204e
    863c:	48534c46 	.word	0x48534c46
    8640:	00312031 	.word	0x00312031
    8644:	48534c46 	.word	0x48534c46
    8648:	00302031 	.word	0x00302031
    864c:	48534c46 	.word	0x48534c46
    8650:	00312032 	.word	0x00312032
    8654:	48534c46 	.word	0x48534c46
    8658:	00302032 	.word	0x00302032
    865c:	48534c46 	.word	0x48534c46
    8660:	31204446 	.word	0x31204446
    8664:	00000000 	.word	0x00000000
    8668:	48534c46 	.word	0x48534c46
    866c:	30204446 	.word	0x30204446
    8670:	00000000 	.word	0x00000000
    8674:	5254534d 	.word	0x5254534d
    8678:	20545352 	.word	0x20545352
    867c:	00003234 	.word	0x00003234
    8680:	5254534d 	.word	0x5254534d
    8684:	20545354 	.word	0x20545354
    8688:	00003234 	.word	0x00003234
    868c:	00002c90 	.word	0x00002c90
    8690:	00002cb0 	.word	0x00002cb0
    8694:	00002cda 	.word	0x00002cda
    8698:	00002d04 	.word	0x00002d04
    869c:	00002d2e 	.word	0x00002d2e
    86a0:	00002d58 	.word	0x00002d58
    86a4:	00002d82 	.word	0x00002d82
    86a8:	00002dac 	.word	0x00002dac
    86ac:	00002dd6 	.word	0x00002dd6
    86b0:	00002e00 	.word	0x00002e00
    86b4:	00002e2a 	.word	0x00002e2a
    86b8:	00002e54 	.word	0x00002e54
    86bc:	00002e8a 	.word	0x00002e8a
    86c0:	00002e8a 	.word	0x00002e8a
    86c4:	00002e8a 	.word	0x00002e8a
    86c8:	00002e8a 	.word	0x00002e8a
    86cc:	00002e8a 	.word	0x00002e8a
    86d0:	00002e8a 	.word	0x00002e8a
    86d4:	00002e8a 	.word	0x00002e8a
    86d8:	00002e7e 	.word	0x00002e7e
    86dc:	00002ec4 	.word	0x00002ec4
    86e0:	00002ee4 	.word	0x00002ee4
    86e4:	00002f00 	.word	0x00002f00
    86e8:	00002f1c 	.word	0x00002f1c
    86ec:	00002f38 	.word	0x00002f38
    86f0:	00002f54 	.word	0x00002f54
    86f4:	00002f70 	.word	0x00002f70
    86f8:	00002fb6 	.word	0x00002fb6
    86fc:	00003018 	.word	0x00003018
    8700:	0000307a 	.word	0x0000307a
    8704:	000030dc 	.word	0x000030dc
    8708:	25206425 	.word	0x25206425
    870c:	64252064 	.word	0x64252064
    8710:	20642520 	.word	0x20642520
    8714:	25206425 	.word	0x25206425
    8718:	00000064 	.word	0x00000064
    871c:	000045ea 	.word	0x000045ea
    8720:	00004662 	.word	0x00004662
    8724:	00004662 	.word	0x00004662
    8728:	00004608 	.word	0x00004608
    872c:	00004602 	.word	0x00004602
    8730:	0000460e 	.word	0x0000460e
    8734:	000045f0 	.word	0x000045f0
    8738:	00004614 	.word	0x00004614
    873c:	00004648 	.word	0x00004648
    8740:	0000473c 	.word	0x0000473c
    8744:	0000478c 	.word	0x0000478c
    8748:	0000478c 	.word	0x0000478c
    874c:	00004788 	.word	0x00004788
    8750:	0000472e 	.word	0x0000472e
    8754:	0000474e 	.word	0x0000474e
    8758:	0000471e 	.word	0x0000471e
    875c:	00004760 	.word	0x00004760
    8760:	00004772 	.word	0x00004772
    8764:	3a433249 	.word	0x3a433249
    8768:	25642520 	.word	0x25642520
    876c:	25642564 	.word	0x25642564
    8770:	25642564 	.word	0x25642564
    8774:	25642564 	.word	0x25642564
    8778:	00000064 	.word	0x00000064
    877c:	00005fc0 	.word	0x00005fc0
    8780:	00005e8e 	.word	0x00005e8e
    8784:	00005f94 	.word	0x00005f94
    8788:	00005e84 	.word	0x00005e84
    878c:	00005f94 	.word	0x00005f94
    8790:	00005f9e 	.word	0x00005f9e
    8794:	00005f94 	.word	0x00005f94
    8798:	00005e84 	.word	0x00005e84
    879c:	00005e8e 	.word	0x00005e8e
    87a0:	00005e8e 	.word	0x00005e8e
    87a4:	00005f9e 	.word	0x00005f9e
    87a8:	00005e84 	.word	0x00005e84
    87ac:	00005e7a 	.word	0x00005e7a
    87b0:	00005e7a 	.word	0x00005e7a
    87b4:	00005e7a 	.word	0x00005e7a
    87b8:	000061f0 	.word	0x000061f0
    87bc:	000065ec 	.word	0x000065ec
    87c0:	000064ac 	.word	0x000064ac
    87c4:	000064ac 	.word	0x000064ac
    87c8:	000064aa 	.word	0x000064aa
    87cc:	000065c4 	.word	0x000065c4
    87d0:	000065c4 	.word	0x000065c4
    87d4:	000065b6 	.word	0x000065b6
    87d8:	000064aa 	.word	0x000064aa
    87dc:	000065c4 	.word	0x000065c4
    87e0:	000065b6 	.word	0x000065b6
    87e4:	000065c4 	.word	0x000065c4
    87e8:	000064aa 	.word	0x000064aa
    87ec:	000065cc 	.word	0x000065cc
    87f0:	000065cc 	.word	0x000065cc
    87f4:	000065cc 	.word	0x000065cc
    87f8:	000067cc 	.word	0x000067cc
    87fc:	0043      	.short	0x0043
    87fe:	2d23      	.short	0x2d23
    8800:	00202b30 	.word	0x00202b30
    8804:	004c6c68 	.word	0x004c6c68
    8808:	45676665 	.word	0x45676665
    880c:	4746      	.short	0x4746
    880e:	00          	.byte	0x00
    880f:	30          	.byte	0x30
    8810:	34333231 	.word	0x34333231
    8814:	38373635 	.word	0x38373635
    8818:	43424139 	.word	0x43424139
    881c:	00464544 	.word	0x00464544
    8820:	33323130 	.word	0x33323130
    8824:	37363534 	.word	0x37363534
    8828:	62613938 	.word	0x62613938
    882c:	66656463 	.word	0x66656463
    8830:	00000000 	.word	0x00000000
    8834:	00008852 	.word	0x00008852
    8838:	00008855 	.word	0x00008855
    883c:	00008858 	.word	0x00008858
    8840:	61462d41 	.word	0x61462d41
    8844:	3938662d 	.word	0x3938662d
    8848:	33323130 	.word	0x33323130
    884c:	37363534 	.word	0x37363534
    8850:	2d2b005d 	.word	0x2d2b005d
    8854:	00303000 	.word	0x00303000
    8858:	5878      	.short	0x5878
	...

0000885b <_ctype_>:
    885b:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    886b:	2020 2020 2020 2020 2020 2020 2020 2020                     
    887b:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    888b:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    889b:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    88ab:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    88bb:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    88cb:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    88db:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0000895c <__sf_fake_stdin>:
	...

0000897c <__sf_fake_stdout>:
	...

0000899c <__sf_fake_stderr>:
	...

000089bc <_init>:
    89bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89be:	46c0      	nop			; (mov r8, r8)
    89c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    89c2:	bc08      	pop	{r3}
    89c4:	469e      	mov	lr, r3
    89c6:	4770      	bx	lr

000089c8 <__init_array_start>:
    89c8:	000000dd 	.word	0x000000dd

000089cc <_fini>:
    89cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89ce:	46c0      	nop			; (mov r8, r8)
    89d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    89d2:	bc08      	pop	{r3}
    89d4:	469e      	mov	lr, r3
    89d6:	4770      	bx	lr

000089d8 <__fini_array_start>:
    89d8:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <test_bob>:
2000000c:	5750 004d                                   PWM.

20000010 <mcp23017_data>:
20000010:	0000 0020 0000 0000 0001 0021 0000 0000     .. .......!.....
20000020:	0001 0022 0000 0000 0001 0023 0000 0000     ..".......#.....
20000030:	0001 0024 0000 0000 0000 0025 0000 0000     ..$.......%.....
20000040:	0000 0026 0000 0000 0000 0027 0000 0000     ..&.......'.....

20000050 <duty_cycle.13603>:
20000050:	010a                                             .

20000051 <a_okayish>:
20000051:	0101                                             .

20000052 <g_interrupt_enabled>:
20000052:	0001                                        ..

20000054 <impure_data>:
20000054:	0000 0000 895c 0000 897c 0000 899c 0000     ....\...|.......
	...
20000074:	87fc 0000 0000 0000 0000 0000 0000 0000     ................
	...

200000b4 <_impure_ptr>:
200000b4:	0054 2000                                   T.. 

200000b8 <__ctype_ptr__>:
200000b8:	885b 0000                                   [...
