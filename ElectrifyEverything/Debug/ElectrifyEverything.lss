
ElectrifyEverything.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007404  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00007404  00007404  00017404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000053c  20000000  0000740c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001230  2000053c  00007948  0002053c  2**2
                  ALLOC
  4 .stack        00002004  2000176c  00008b78  0002053c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002053c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020564  2**0
                  CONTENTS, READONLY
  7 .debug_info   00049892  00000000  00000000  000205bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004e22  00000000  00000000  00069e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000039ac  00000000  00000000  0006ec71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ae8  00000000  00000000  0007261d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000958  00000000  00000000  00073105  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001eb0c  00000000  00000000  00073a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00014a45  00000000  00000000  00092569  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008dba8  00000000  00000000  000a6fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002da8  00000000  00000000  00134b58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 37 00 20 e9 4d 00 00 e1 4e 00 00 e1 4e 00 00     p7. .M...N...N..
	...
      2c:	e1 4e 00 00 00 00 00 00 00 00 00 00 e1 4e 00 00     .N...........N..
      3c:	e1 4e 00 00 e1 4e 00 00 e1 4e 00 00 89 12 00 00     .N...N...N......
      4c:	e1 4e 00 00 0d 08 00 00 e1 4e 00 00 e1 4e 00 00     .N.......N...N..
      5c:	e1 4e 00 00 e1 4e 00 00 e1 4e 00 00 c5 41 00 00     .N...N...N...A..
      6c:	3d 13 00 00 e1 4e 00 00 e1 4e 00 00 e1 4e 00 00     =....N...N...N..
      7c:	e1 4e 00 00 e1 4e 00 00 e1 4e 00 00 85 3a 00 00     .N...N...N...:..
      8c:	e1 4e 00 00 e1 4e 00 00 e1 4e 00 00 e1 4e 00 00     .N...N...N...N..
      9c:	e1 4e 00 00 e1 4e 00 00 e1 4e 00 00 e1 4e 00 00     .N...N...N...N..
      ac:	e1 4e 00 00 00 00 00 00                             .N......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000053c 	.word	0x2000053c
      d4:	00000000 	.word	0x00000000
      d8:	0000740c 	.word	0x0000740c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000540 	.word	0x20000540
     108:	0000740c 	.word	0x0000740c
     10c:	0000740c 	.word	0x0000740c
     110:	00000000 	.word	0x00000000

00000114 <obd_init>:
	return c1 << 4 | (c2 & 0xf);
}


void obd_init(void)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b085      	sub	sp, #20
     118:	af00      	add	r7, sp, #0
	
	obd_uart_init();
     11a:	4b34      	ldr	r3, [pc, #208]	; (1ec <obd_init+0xd8>)
     11c:	4798      	blx	r3
	obd_uart_write("010D\r");
	
	obd_uart_write("ATRV\r");*/


	obd_uart_write(INIT_CMD1);	//RESET
     11e:	4b34      	ldr	r3, [pc, #208]	; (1f0 <obd_init+0xdc>)
     120:	0018      	movs	r0, r3
     122:	4b34      	ldr	r3, [pc, #208]	; (1f4 <obd_init+0xe0>)
     124:	4798      	blx	r3
	obd_uart_write(INIT_CMD2);	//ECHO OFF
     126:	4b34      	ldr	r3, [pc, #208]	; (1f8 <obd_init+0xe4>)
     128:	0018      	movs	r0, r3
     12a:	4b32      	ldr	r3, [pc, #200]	; (1f4 <obd_init+0xe0>)
     12c:	4798      	blx	r3
	obd_uart_write(INIT_CMD3);	//HEADERS OFF
     12e:	4b33      	ldr	r3, [pc, #204]	; (1fc <obd_init+0xe8>)
     130:	0018      	movs	r0, r3
     132:	4b30      	ldr	r3, [pc, #192]	; (1f4 <obd_init+0xe0>)
     134:	4798      	blx	r3
	
	delay_ms(10);
     136:	2000      	movs	r0, #0
     138:	4b31      	ldr	r3, [pc, #196]	; (200 <obd_init+0xec>)
     13a:	4798      	blx	r3
     13c:	0003      	movs	r3, r0
     13e:	603b      	str	r3, [r7, #0]
     140:	2300      	movs	r3, #0
     142:	607b      	str	r3, [r7, #4]
     144:	6838      	ldr	r0, [r7, #0]
     146:	6879      	ldr	r1, [r7, #4]
     148:	0003      	movs	r3, r0
     14a:	000c      	movs	r4, r1
     14c:	0f9a      	lsrs	r2, r3, #30
     14e:	00a6      	lsls	r6, r4, #2
     150:	4316      	orrs	r6, r2
     152:	009d      	lsls	r5, r3, #2
     154:	0003      	movs	r3, r0
     156:	000c      	movs	r4, r1
     158:	195b      	adds	r3, r3, r5
     15a:	4174      	adcs	r4, r6
     15c:	18db      	adds	r3, r3, r3
     15e:	4164      	adcs	r4, r4
     160:	0019      	movs	r1, r3
     162:	0022      	movs	r2, r4
     164:	4b27      	ldr	r3, [pc, #156]	; (204 <obd_init+0xf0>)
     166:	2400      	movs	r4, #0
     168:	18c9      	adds	r1, r1, r3
     16a:	4162      	adcs	r2, r4
     16c:	0008      	movs	r0, r1
     16e:	0011      	movs	r1, r2
     170:	4c25      	ldr	r4, [pc, #148]	; (208 <obd_init+0xf4>)
     172:	4a26      	ldr	r2, [pc, #152]	; (20c <obd_init+0xf8>)
     174:	2300      	movs	r3, #0
     176:	47a0      	blx	r4
     178:	0003      	movs	r3, r0
     17a:	000c      	movs	r4, r1
     17c:	0018      	movs	r0, r3
     17e:	4b24      	ldr	r3, [pc, #144]	; (210 <obd_init+0xfc>)
     180:	4798      	blx	r3
	obd_uart_write("010D\r");
     182:	4b24      	ldr	r3, [pc, #144]	; (214 <obd_init+0x100>)
     184:	0018      	movs	r0, r3
     186:	4b1b      	ldr	r3, [pc, #108]	; (1f4 <obd_init+0xe0>)
     188:	4798      	blx	r3
	
	
	//obd_uart_write("ATSP %u\r")
	
	memset(pidmap,0,sizeof(pidmap));
     18a:	4b23      	ldr	r3, [pc, #140]	; (218 <obd_init+0x104>)
     18c:	2210      	movs	r2, #16
     18e:	2100      	movs	r1, #0
     190:	0018      	movs	r0, r3
     192:	4b22      	ldr	r3, [pc, #136]	; (21c <obd_init+0x108>)
     194:	4798      	blx	r3
	
	for (uint8_t i = 0;i < 4; i++)
     196:	230f      	movs	r3, #15
     198:	18fb      	adds	r3, r7, r3
     19a:	2200      	movs	r2, #0
     19c:	701a      	strb	r2, [r3, #0]
     19e:	e01b      	b.n	1d8 <obd_init+0xc4>
	{
		uint8_t pid = i * 0x20;
     1a0:	230e      	movs	r3, #14
     1a2:	18fb      	adds	r3, r7, r3
     1a4:	220f      	movs	r2, #15
     1a6:	18ba      	adds	r2, r7, r2
     1a8:	7812      	ldrb	r2, [r2, #0]
     1aa:	0152      	lsls	r2, r2, #5
     1ac:	701a      	strb	r2, [r3, #0]
		obd_send_query_pid(0x01,pid,4,pidmap[i]);
     1ae:	230f      	movs	r3, #15
     1b0:	18fb      	adds	r3, r7, r3
     1b2:	781b      	ldrb	r3, [r3, #0]
     1b4:	4a18      	ldr	r2, [pc, #96]	; (218 <obd_init+0x104>)
     1b6:	5cd3      	ldrb	r3, [r2, r3]
     1b8:	001a      	movs	r2, r3
     1ba:	230e      	movs	r3, #14
     1bc:	18fb      	adds	r3, r7, r3
     1be:	7819      	ldrb	r1, [r3, #0]
     1c0:	0013      	movs	r3, r2
     1c2:	2204      	movs	r2, #4
     1c4:	2001      	movs	r0, #1
     1c6:	4c16      	ldr	r4, [pc, #88]	; (220 <obd_init+0x10c>)
     1c8:	47a0      	blx	r4
	for (uint8_t i = 0;i < 4; i++)
     1ca:	230f      	movs	r3, #15
     1cc:	18fb      	adds	r3, r7, r3
     1ce:	781a      	ldrb	r2, [r3, #0]
     1d0:	230f      	movs	r3, #15
     1d2:	18fb      	adds	r3, r7, r3
     1d4:	3201      	adds	r2, #1
     1d6:	701a      	strb	r2, [r3, #0]
     1d8:	230f      	movs	r3, #15
     1da:	18fb      	adds	r3, r7, r3
     1dc:	781b      	ldrb	r3, [r3, #0]
     1de:	2b03      	cmp	r3, #3
     1e0:	d9de      	bls.n	1a0 <obd_init+0x8c>
	}
}
     1e2:	46c0      	nop			; (mov r8, r8)
     1e4:	46bd      	mov	sp, r7
     1e6:	b005      	add	sp, #20
     1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	00000555 	.word	0x00000555
     1f0:	00006d10 	.word	0x00006d10
     1f4:	000005e9 	.word	0x000005e9
     1f8:	00006d18 	.word	0x00006d18
     1fc:	00006d20 	.word	0x00006d20
     200:	00004b0d 	.word	0x00004b0d
     204:	00001b57 	.word	0x00001b57
     208:	000056b1 	.word	0x000056b1
     20c:	00001b58 	.word	0x00001b58
     210:	20000001 	.word	0x20000001
     214:	00006d28 	.word	0x00006d28
     218:	2000099c 	.word	0x2000099c
     21c:	000059c7 	.word	0x000059c7
     220:	00000225 	.word	0x00000225

00000224 <obd_send_query_pid>:

enum status_code obd_send_query_pid(uint8_t service, uint8_t pid, uint8_t data_length, uint8_t *read_read)
{
     224:	b590      	push	{r4, r7, lr}
     226:	b087      	sub	sp, #28
     228:	af00      	add	r7, sp, #0
     22a:	0004      	movs	r4, r0
     22c:	0008      	movs	r0, r1
     22e:	0011      	movs	r1, r2
     230:	603b      	str	r3, [r7, #0]
     232:	1dfb      	adds	r3, r7, #7
     234:	1c22      	adds	r2, r4, #0
     236:	701a      	strb	r2, [r3, #0]
     238:	1dbb      	adds	r3, r7, #6
     23a:	1c02      	adds	r2, r0, #0
     23c:	701a      	strb	r2, [r3, #0]
     23e:	1d7b      	adds	r3, r7, #5
     240:	1c0a      	adds	r2, r1, #0
     242:	701a      	strb	r2, [r3, #0]
	enum status_code temp = STATUS_OK;
     244:	2317      	movs	r3, #23
     246:	18fb      	adds	r3, r7, r3
     248:	2200      	movs	r2, #0
     24a:	701a      	strb	r2, [r3, #0]
	char cmd[8];
	sprintf(cmd,"%02X%02X\r",service,pid);
     24c:	1dfb      	adds	r3, r7, #7
     24e:	781a      	ldrb	r2, [r3, #0]
     250:	1dbb      	adds	r3, r7, #6
     252:	781b      	ldrb	r3, [r3, #0]
     254:	490f      	ldr	r1, [pc, #60]	; (294 <obd_send_query_pid+0x70>)
     256:	200c      	movs	r0, #12
     258:	1838      	adds	r0, r7, r0
     25a:	4c0f      	ldr	r4, [pc, #60]	; (298 <obd_send_query_pid+0x74>)
     25c:	47a0      	blx	r4
	temp = obd_uart_write(cmd);
     25e:	2317      	movs	r3, #23
     260:	18fc      	adds	r4, r7, r3
     262:	230c      	movs	r3, #12
     264:	18fb      	adds	r3, r7, r3
     266:	0018      	movs	r0, r3
     268:	4b0c      	ldr	r3, [pc, #48]	; (29c <obd_send_query_pid+0x78>)
     26a:	4798      	blx	r3
     26c:	0003      	movs	r3, r0
     26e:	7023      	strb	r3, [r4, #0]
	temp = obd_uart_read(read_read,data_length);
     270:	2317      	movs	r3, #23
     272:	18fc      	adds	r4, r7, r3
     274:	1d7b      	adds	r3, r7, #5
     276:	781a      	ldrb	r2, [r3, #0]
     278:	683b      	ldr	r3, [r7, #0]
     27a:	0011      	movs	r1, r2
     27c:	0018      	movs	r0, r3
     27e:	4b08      	ldr	r3, [pc, #32]	; (2a0 <obd_send_query_pid+0x7c>)
     280:	4798      	blx	r3
     282:	0003      	movs	r3, r0
     284:	7023      	strb	r3, [r4, #0]
	return temp;
     286:	2317      	movs	r3, #23
     288:	18fb      	adds	r3, r7, r3
     28a:	781b      	ldrb	r3, [r3, #0]
}
     28c:	0018      	movs	r0, r3
     28e:	46bd      	mov	sp, r7
     290:	b007      	add	sp, #28
     292:	bd90      	pop	{r4, r7, pc}
     294:	00006d30 	.word	0x00006d30
     298:	00005b4d 	.word	0x00005b4d
     29c:	000005e9 	.word	0x000005e9
     2a0:	00000631 	.word	0x00000631

000002a4 <obd_send_query_string>:

enum status_code obd_send_query_string(uint8_t *string, uint8_t data_length, uint8_t *read_read)
{
     2a4:	b590      	push	{r4, r7, lr}
     2a6:	b087      	sub	sp, #28
     2a8:	af00      	add	r7, sp, #0
     2aa:	60f8      	str	r0, [r7, #12]
     2ac:	607a      	str	r2, [r7, #4]
     2ae:	230b      	movs	r3, #11
     2b0:	18fb      	adds	r3, r7, r3
     2b2:	1c0a      	adds	r2, r1, #0
     2b4:	701a      	strb	r2, [r3, #0]
	enum status_code temp = STATUS_OK;
     2b6:	2317      	movs	r3, #23
     2b8:	18fb      	adds	r3, r7, r3
     2ba:	2200      	movs	r2, #0
     2bc:	701a      	strb	r2, [r3, #0]
	temp = obd_uart_write(string);
     2be:	2317      	movs	r3, #23
     2c0:	18fc      	adds	r4, r7, r3
     2c2:	68fb      	ldr	r3, [r7, #12]
     2c4:	0018      	movs	r0, r3
     2c6:	4b0b      	ldr	r3, [pc, #44]	; (2f4 <obd_send_query_string+0x50>)
     2c8:	4798      	blx	r3
     2ca:	0003      	movs	r3, r0
     2cc:	7023      	strb	r3, [r4, #0]
	temp = obd_uart_read(read_read,data_length);
     2ce:	2317      	movs	r3, #23
     2d0:	18fc      	adds	r4, r7, r3
     2d2:	230b      	movs	r3, #11
     2d4:	18fb      	adds	r3, r7, r3
     2d6:	781a      	ldrb	r2, [r3, #0]
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	0011      	movs	r1, r2
     2dc:	0018      	movs	r0, r3
     2de:	4b06      	ldr	r3, [pc, #24]	; (2f8 <obd_send_query_string+0x54>)
     2e0:	4798      	blx	r3
     2e2:	0003      	movs	r3, r0
     2e4:	7023      	strb	r3, [r4, #0]
	return temp;
     2e6:	2317      	movs	r3, #23
     2e8:	18fb      	adds	r3, r7, r3
     2ea:	781b      	ldrb	r3, [r3, #0]
}
     2ec:	0018      	movs	r0, r3
     2ee:	46bd      	mov	sp, r7
     2f0:	b007      	add	sp, #28
     2f2:	bd90      	pop	{r4, r7, pc}
     2f4:	000005e9 	.word	0x000005e9
     2f8:	00000631 	.word	0x00000631

000002fc <get_engine_rpm>:
	return (int) A-40;
}

//ENGINE RPM [0 16,383.75] rpm
uint16_t get_engine_rpm(void)
{
     2fc:	b590      	push	{r4, r7, lr}
     2fe:	b083      	sub	sp, #12
     300:	af00      	add	r7, sp, #0
	uint8_t data[2];
	obd_send_query_pid(0x01,PID_RPM,2,data);
     302:	1d3b      	adds	r3, r7, #4
     304:	2202      	movs	r2, #2
     306:	210c      	movs	r1, #12
     308:	2001      	movs	r0, #1
     30a:	4c09      	ldr	r4, [pc, #36]	; (330 <get_engine_rpm+0x34>)
     30c:	47a0      	blx	r4
	return (uint16_t) (256*data[0]+data[1])/4;
     30e:	1d3b      	adds	r3, r7, #4
     310:	781b      	ldrb	r3, [r3, #0]
     312:	b29b      	uxth	r3, r3
     314:	021b      	lsls	r3, r3, #8
     316:	b29a      	uxth	r2, r3
     318:	1d3b      	adds	r3, r7, #4
     31a:	785b      	ldrb	r3, [r3, #1]
     31c:	b29b      	uxth	r3, r3
     31e:	18d3      	adds	r3, r2, r3
     320:	b29b      	uxth	r3, r3
     322:	089b      	lsrs	r3, r3, #2
     324:	b29b      	uxth	r3, r3
}
     326:	0018      	movs	r0, r3
     328:	46bd      	mov	sp, r7
     32a:	b003      	add	sp, #12
     32c:	bd90      	pop	{r4, r7, pc}
     32e:	46c0      	nop			; (mov r8, r8)
     330:	00000225 	.word	0x00000225

00000334 <get_battery_voltage>:
	obd_send_query_pid(0x01,PID_MONITOR_STATUS,4,data);
	return (uint8_t) (data[0] & 0x7F);
}

float get_battery_voltage(void)
{
     334:	b580      	push	{r7, lr}
     336:	b084      	sub	sp, #16
     338:	af00      	add	r7, sp, #0
	uint8_t data[6];
	obd_send_query_string("ATRV",6,data);
     33a:	2308      	movs	r3, #8
     33c:	18fa      	adds	r2, r7, r3
     33e:	4b09      	ldr	r3, [pc, #36]	; (364 <get_battery_voltage+0x30>)
     340:	2106      	movs	r1, #6
     342:	0018      	movs	r0, r3
     344:	4b08      	ldr	r3, [pc, #32]	; (368 <get_battery_voltage+0x34>)
     346:	4798      	blx	r3
	float f = 0.0;
     348:	2300      	movs	r3, #0
     34a:	607b      	str	r3, [r7, #4]
	sscanf(data,"%f",&f);
     34c:	1d3a      	adds	r2, r7, #4
     34e:	4907      	ldr	r1, [pc, #28]	; (36c <get_battery_voltage+0x38>)
     350:	2308      	movs	r3, #8
     352:	18fb      	adds	r3, r7, r3
     354:	0018      	movs	r0, r3
     356:	4b06      	ldr	r3, [pc, #24]	; (370 <get_battery_voltage+0x3c>)
     358:	4798      	blx	r3
	return f;
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	1c18      	adds	r0, r3, #0
     35e:	46bd      	mov	sp, r7
     360:	b004      	add	sp, #16
     362:	bd80      	pop	{r7, pc}
     364:	00006d3c 	.word	0x00006d3c
     368:	000002a5 	.word	0x000002a5
     36c:	00006d44 	.word	0x00006d44
     370:	00005b91 	.word	0x00005b91

00000374 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     374:	b580      	push	{r7, lr}
     376:	b082      	sub	sp, #8
     378:	af00      	add	r7, sp, #0
     37a:	0002      	movs	r2, r0
     37c:	1dfb      	adds	r3, r7, #7
     37e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     380:	4b06      	ldr	r3, [pc, #24]	; (39c <NVIC_EnableIRQ+0x28>)
     382:	1dfa      	adds	r2, r7, #7
     384:	7812      	ldrb	r2, [r2, #0]
     386:	0011      	movs	r1, r2
     388:	221f      	movs	r2, #31
     38a:	400a      	ands	r2, r1
     38c:	2101      	movs	r1, #1
     38e:	4091      	lsls	r1, r2
     390:	000a      	movs	r2, r1
     392:	601a      	str	r2, [r3, #0]
}
     394:	46c0      	nop			; (mov r8, r8)
     396:	46bd      	mov	sp, r7
     398:	b002      	add	sp, #8
     39a:	bd80      	pop	{r7, pc}
     39c:	e000e100 	.word	0xe000e100

000003a0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     3a0:	b5b0      	push	{r4, r5, r7, lr}
     3a2:	b082      	sub	sp, #8
     3a4:	af00      	add	r7, sp, #0
     3a6:	0002      	movs	r2, r0
     3a8:	6039      	str	r1, [r7, #0]
     3aa:	1dfb      	adds	r3, r7, #7
     3ac:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
     3ae:	1dfb      	adds	r3, r7, #7
     3b0:	781b      	ldrb	r3, [r3, #0]
     3b2:	2b7f      	cmp	r3, #127	; 0x7f
     3b4:	d932      	bls.n	41c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     3b6:	4c2f      	ldr	r4, [pc, #188]	; (474 <NVIC_SetPriority+0xd4>)
     3b8:	1dfb      	adds	r3, r7, #7
     3ba:	781b      	ldrb	r3, [r3, #0]
     3bc:	001a      	movs	r2, r3
     3be:	230f      	movs	r3, #15
     3c0:	4013      	ands	r3, r2
     3c2:	3b08      	subs	r3, #8
     3c4:	0899      	lsrs	r1, r3, #2
     3c6:	4a2b      	ldr	r2, [pc, #172]	; (474 <NVIC_SetPriority+0xd4>)
     3c8:	1dfb      	adds	r3, r7, #7
     3ca:	781b      	ldrb	r3, [r3, #0]
     3cc:	0018      	movs	r0, r3
     3ce:	230f      	movs	r3, #15
     3d0:	4003      	ands	r3, r0
     3d2:	3b08      	subs	r3, #8
     3d4:	089b      	lsrs	r3, r3, #2
     3d6:	3306      	adds	r3, #6
     3d8:	009b      	lsls	r3, r3, #2
     3da:	18d3      	adds	r3, r2, r3
     3dc:	3304      	adds	r3, #4
     3de:	681b      	ldr	r3, [r3, #0]
     3e0:	1dfa      	adds	r2, r7, #7
     3e2:	7812      	ldrb	r2, [r2, #0]
     3e4:	0010      	movs	r0, r2
     3e6:	2203      	movs	r2, #3
     3e8:	4002      	ands	r2, r0
     3ea:	00d2      	lsls	r2, r2, #3
     3ec:	20ff      	movs	r0, #255	; 0xff
     3ee:	4090      	lsls	r0, r2
     3f0:	0002      	movs	r2, r0
     3f2:	43d2      	mvns	r2, r2
     3f4:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     3f6:	683b      	ldr	r3, [r7, #0]
     3f8:	019b      	lsls	r3, r3, #6
     3fa:	20ff      	movs	r0, #255	; 0xff
     3fc:	4018      	ands	r0, r3
     3fe:	1dfb      	adds	r3, r7, #7
     400:	781b      	ldrb	r3, [r3, #0]
     402:	001d      	movs	r5, r3
     404:	2303      	movs	r3, #3
     406:	402b      	ands	r3, r5
     408:	00db      	lsls	r3, r3, #3
     40a:	4098      	lsls	r0, r3
     40c:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     40e:	431a      	orrs	r2, r3
     410:	1d8b      	adds	r3, r1, #6
     412:	009b      	lsls	r3, r3, #2
     414:	18e3      	adds	r3, r4, r3
     416:	3304      	adds	r3, #4
     418:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
     41a:	e027      	b.n	46c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     41c:	4c16      	ldr	r4, [pc, #88]	; (478 <NVIC_SetPriority+0xd8>)
     41e:	1dfb      	adds	r3, r7, #7
     420:	781b      	ldrb	r3, [r3, #0]
     422:	b25b      	sxtb	r3, r3
     424:	089b      	lsrs	r3, r3, #2
     426:	4914      	ldr	r1, [pc, #80]	; (478 <NVIC_SetPriority+0xd8>)
     428:	1dfa      	adds	r2, r7, #7
     42a:	7812      	ldrb	r2, [r2, #0]
     42c:	b252      	sxtb	r2, r2
     42e:	0892      	lsrs	r2, r2, #2
     430:	32c0      	adds	r2, #192	; 0xc0
     432:	0092      	lsls	r2, r2, #2
     434:	5852      	ldr	r2, [r2, r1]
     436:	1df9      	adds	r1, r7, #7
     438:	7809      	ldrb	r1, [r1, #0]
     43a:	0008      	movs	r0, r1
     43c:	2103      	movs	r1, #3
     43e:	4001      	ands	r1, r0
     440:	00c9      	lsls	r1, r1, #3
     442:	20ff      	movs	r0, #255	; 0xff
     444:	4088      	lsls	r0, r1
     446:	0001      	movs	r1, r0
     448:	43c9      	mvns	r1, r1
     44a:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     44c:	683a      	ldr	r2, [r7, #0]
     44e:	0192      	lsls	r2, r2, #6
     450:	20ff      	movs	r0, #255	; 0xff
     452:	4010      	ands	r0, r2
     454:	1dfa      	adds	r2, r7, #7
     456:	7812      	ldrb	r2, [r2, #0]
     458:	0015      	movs	r5, r2
     45a:	2203      	movs	r2, #3
     45c:	402a      	ands	r2, r5
     45e:	00d2      	lsls	r2, r2, #3
     460:	4090      	lsls	r0, r2
     462:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     464:	430a      	orrs	r2, r1
     466:	33c0      	adds	r3, #192	; 0xc0
     468:	009b      	lsls	r3, r3, #2
     46a:	511a      	str	r2, [r3, r4]
}
     46c:	46c0      	nop			; (mov r8, r8)
     46e:	46bd      	mov	sp, r7
     470:	b002      	add	sp, #8
     472:	bdb0      	pop	{r4, r5, r7, pc}
     474:	e000ed00 	.word	0xe000ed00
     478:	e000e100 	.word	0xe000e100

0000047c <obd_uart_clk_init>:

#include "obd_uart.h"


void obd_uart_clk_init(void)
{
     47c:	b580      	push	{r7, lr}
     47e:	af00      	add	r7, sp, #0
	// Start the Software Reset and wait for it to finish
	OBD_UART_MODULE->USART.CTRLA.bit.SWRST = 1 ;
     480:	4a13      	ldr	r2, [pc, #76]	; (4d0 <obd_uart_clk_init+0x54>)
     482:	6813      	ldr	r3, [r2, #0]
     484:	2101      	movs	r1, #1
     486:	430b      	orrs	r3, r1
     488:	6013      	str	r3, [r2, #0]
	while ( OBD_UART_MODULE->USART.CTRLA.bit.SWRST || OBD_UART_MODULE->USART.SYNCBUSY.bit.SWRST );
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	4b10      	ldr	r3, [pc, #64]	; (4d0 <obd_uart_clk_init+0x54>)
     48e:	681b      	ldr	r3, [r3, #0]
     490:	07db      	lsls	r3, r3, #31
     492:	0fdb      	lsrs	r3, r3, #31
     494:	b2db      	uxtb	r3, r3
     496:	2b00      	cmp	r3, #0
     498:	d1f8      	bne.n	48c <obd_uart_clk_init+0x10>
     49a:	4b0d      	ldr	r3, [pc, #52]	; (4d0 <obd_uart_clk_init+0x54>)
     49c:	69db      	ldr	r3, [r3, #28]
     49e:	07db      	lsls	r3, r3, #31
     4a0:	0fdb      	lsrs	r3, r3, #31
     4a2:	b2db      	uxtb	r3, r3
     4a4:	2b00      	cmp	r3, #0
     4a6:	d1f1      	bne.n	48c <obd_uart_clk_init+0x10>
	
	// Turn on peripheral clock for SERCOM being used
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
     4a8:	4b0a      	ldr	r3, [pc, #40]	; (4d4 <obd_uart_clk_init+0x58>)
     4aa:	4a0a      	ldr	r2, [pc, #40]	; (4d4 <obd_uart_clk_init+0x58>)
     4ac:	6a12      	ldr	r2, [r2, #32]
     4ae:	2104      	movs	r1, #4
     4b0:	430a      	orrs	r2, r1
     4b2:	621a      	str	r2, [r3, #32]

	//Setting clock
	GCLK->CLKCTRL.reg =
     4b4:	4b08      	ldr	r3, [pc, #32]	; (4d8 <obd_uart_clk_init+0x5c>)
     4b6:	4a09      	ldr	r2, [pc, #36]	; (4dc <obd_uart_clk_init+0x60>)
     4b8:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID( 0x14U )	|	// connected  SERCOMx to
	GCLK_CLKCTRL_GEN_GCLK0		|	// generic Clock Generator 0
	GCLK_CLKCTRL_CLKEN;			// and enable it

	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY ); // Wait for synchronization
     4ba:	46c0      	nop			; (mov r8, r8)
     4bc:	4b06      	ldr	r3, [pc, #24]	; (4d8 <obd_uart_clk_init+0x5c>)
     4be:	785b      	ldrb	r3, [r3, #1]
     4c0:	b2db      	uxtb	r3, r3
     4c2:	b25b      	sxtb	r3, r3
     4c4:	2b00      	cmp	r3, #0
     4c6:	dbf9      	blt.n	4bc <obd_uart_clk_init+0x40>
}
     4c8:	46c0      	nop			; (mov r8, r8)
     4ca:	46bd      	mov	sp, r7
     4cc:	bd80      	pop	{r7, pc}
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	42000800 	.word	0x42000800
     4d4:	40000400 	.word	0x40000400
     4d8:	40000c00 	.word	0x40000c00
     4dc:	00004014 	.word	0x00004014

000004e0 <obd_uart_pin_init>:

void obd_uart_pin_init(void)
{
     4e0:	b580      	push	{r7, lr}
     4e2:	b082      	sub	sp, #8
     4e4:	af00      	add	r7, sp, #0
	PORT->Group[PORTGROUP_A].DIRCLR.reg = PORT_PA05;	// RX as input
     4e6:	4b1a      	ldr	r3, [pc, #104]	; (550 <obd_uart_pin_init+0x70>)
     4e8:	2220      	movs	r2, #32
     4ea:	605a      	str	r2, [r3, #4]
	
	PORT->Group[PORTGROUP_A].DIRSET.reg = PORT_PA04;	// TX as output
     4ec:	4b18      	ldr	r3, [pc, #96]	; (550 <obd_uart_pin_init+0x70>)
     4ee:	2210      	movs	r2, #16
     4f0:	609a      	str	r2, [r3, #8]
	PORT->Group[PORTGROUP_A].OUTSET.reg = PORT_PA04;	// TX idle state is high
     4f2:	4b17      	ldr	r3, [pc, #92]	; (550 <obd_uart_pin_init+0x70>)
     4f4:	2210      	movs	r2, #16
     4f6:	619a      	str	r2, [r3, #24]

	// set port multiplexer for peripheral TX
	// =======================================
	uint32_t temp = (PORT->Group[PORTGROUP_A].PMUX[OBD_TX_PIN>>1].reg) & PORT_PMUX_PMUXO( PORT_PMUX_PMUXO_D_Val );
     4f8:	4a15      	ldr	r2, [pc, #84]	; (550 <obd_uart_pin_init+0x70>)
     4fa:	2332      	movs	r3, #50	; 0x32
     4fc:	5cd3      	ldrb	r3, [r2, r3]
     4fe:	b2db      	uxtb	r3, r3
     500:	001a      	movs	r2, r3
     502:	2330      	movs	r3, #48	; 0x30
     504:	4013      	ands	r3, r2
     506:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[OBD_TX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( PORT_PMUX_PMUXE_D_Val );
     508:	4a11      	ldr	r2, [pc, #68]	; (550 <obd_uart_pin_init+0x70>)
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	b2db      	uxtb	r3, r3
     50e:	2103      	movs	r1, #3
     510:	430b      	orrs	r3, r1
     512:	b2d9      	uxtb	r1, r3
     514:	2332      	movs	r3, #50	; 0x32
     516:	54d1      	strb	r1, [r2, r3]
	
	PORT->Group[PORTGROUP_A].PINCFG[OBD_TX_PIN].reg = PORT_PINCFG_PMUXEN ; // Enable port mux
     518:	4a0d      	ldr	r2, [pc, #52]	; (550 <obd_uart_pin_init+0x70>)
     51a:	2344      	movs	r3, #68	; 0x44
     51c:	2101      	movs	r1, #1
     51e:	54d1      	strb	r1, [r2, r3]
	temp = (PORT->Group[PORTGROUP_A].PMUX[OBD_RX_PIN>>1].reg) & PORT_PMUX_PMUXO( PORT_PMUX_PMUXO_D_Val );
     520:	4a0b      	ldr	r2, [pc, #44]	; (550 <obd_uart_pin_init+0x70>)
     522:	2332      	movs	r3, #50	; 0x32
     524:	5cd3      	ldrb	r3, [r2, r3]
     526:	b2db      	uxtb	r3, r3
     528:	001a      	movs	r2, r3
     52a:	2330      	movs	r3, #48	; 0x30
     52c:	4013      	ands	r3, r2
     52e:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[OBD_RX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( PORT_PMUX_PMUXE_D_Val );
     530:	4a07      	ldr	r2, [pc, #28]	; (550 <obd_uart_pin_init+0x70>)
     532:	687b      	ldr	r3, [r7, #4]
     534:	b2db      	uxtb	r3, r3
     536:	2103      	movs	r1, #3
     538:	430b      	orrs	r3, r1
     53a:	b2d9      	uxtb	r1, r3
     53c:	2332      	movs	r3, #50	; 0x32
     53e:	54d1      	strb	r1, [r2, r3]
	PORT->Group[PORTGROUP_A].PINCFG[OBD_RX_PIN].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN; // Enable port mux
     540:	4a03      	ldr	r2, [pc, #12]	; (550 <obd_uart_pin_init+0x70>)
     542:	2345      	movs	r3, #69	; 0x45
     544:	2103      	movs	r1, #3
     546:	54d1      	strb	r1, [r2, r3]
}
     548:	46c0      	nop			; (mov r8, r8)
     54a:	46bd      	mov	sp, r7
     54c:	b002      	add	sp, #8
     54e:	bd80      	pop	{r7, pc}
     550:	41004400 	.word	0x41004400

00000554 <obd_uart_init>:

void obd_uart_init(void)
{
     554:	b580      	push	{r7, lr}
     556:	af00      	add	r7, sp, #0
	obd_uart_clk_init();
     558:	4b1a      	ldr	r3, [pc, #104]	; (5c4 <obd_uart_init+0x70>)
     55a:	4798      	blx	r3
	obd_uart_pin_init();
     55c:	4b1a      	ldr	r3, [pc, #104]	; (5c8 <obd_uart_init+0x74>)
     55e:	4798      	blx	r3
	
	obd_buff_count = 0;
     560:	4b1a      	ldr	r3, [pc, #104]	; (5cc <obd_uart_init+0x78>)
     562:	2200      	movs	r2, #0
     564:	601a      	str	r2, [r3, #0]
	line_count = 0;
     566:	4b1a      	ldr	r3, [pc, #104]	; (5d0 <obd_uart_init+0x7c>)
     568:	2200      	movs	r2, #0
     56a:	601a      	str	r2, [r3, #0]
	
	OBD_UART_MODULE->USART.CTRLA.reg =
     56c:	4b19      	ldr	r3, [pc, #100]	; (5d4 <obd_uart_init+0x80>)
     56e:	4a1a      	ldr	r2, [pc, #104]	; (5d8 <obd_uart_init+0x84>)
     570:	601a      	str	r2, [r3, #0]
	SERCOM_USART_CTRLA_MODE_USART_INT_CLK;			// Use internal clock
	
	// Asynchronous arithmetic mode
	// 65535 * ( 1 - sampleRateValue * baudrate / SystemCoreClock);
	// 65535 - 65535 * (sampleRateValue * baudrate / SystemCoreClock));
	OBD_UART_MODULE->USART.BAUD.reg = 65535.0f * ( 1.0f - (16.0 * (float)(OBD_BAUDRATE)) / (float)(SYSTEM_CLK));
     572:	4b18      	ldr	r3, [pc, #96]	; (5d4 <obd_uart_init+0x80>)
     574:	4a19      	ldr	r2, [pc, #100]	; (5dc <obd_uart_init+0x88>)
     576:	819a      	strh	r2, [r3, #12]
	//BLE_UART_SERCOM->USART.BAUD.bit.BAUD = 9600;
	
	OBD_UART_MODULE->USART.CTRLB.reg =
     578:	4b16      	ldr	r3, [pc, #88]	; (5d4 <obd_uart_init+0x80>)
     57a:	22c0      	movs	r2, #192	; 0xc0
     57c:	0292      	lsls	r2, r2, #10
     57e:	605a      	str	r2, [r3, #4]
	SERCOM_USART_CTRLB_CHSIZE(0)	|	// 8 bit character size
	SERCOM_USART_CTRLB_TXEN			|	// Enable Transmit
	SERCOM_USART_CTRLB_RXEN;			// Enable Receive

	// Get Synced
	while (OBD_UART_MODULE->USART.SYNCBUSY.bit.CTRLB);
     580:	46c0      	nop			; (mov r8, r8)
     582:	4b14      	ldr	r3, [pc, #80]	; (5d4 <obd_uart_init+0x80>)
     584:	69db      	ldr	r3, [r3, #28]
     586:	075b      	lsls	r3, r3, #29
     588:	0fdb      	lsrs	r3, r3, #31
     58a:	b2db      	uxtb	r3, r3
     58c:	2b00      	cmp	r3, #0
     58e:	d1f8      	bne.n	582 <obd_uart_init+0x2e>

	//Set the Interrupt to use
	OBD_UART_MODULE->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;	// Interrupt on received complete
     590:	4b10      	ldr	r3, [pc, #64]	; (5d4 <obd_uart_init+0x80>)
     592:	2204      	movs	r2, #4
     594:	759a      	strb	r2, [r3, #22]
	
	// Enable interrupts
	NVIC_EnableIRQ(SERCOM0_IRQn);
     596:	2009      	movs	r0, #9
     598:	4b11      	ldr	r3, [pc, #68]	; (5e0 <obd_uart_init+0x8c>)
     59a:	4798      	blx	r3
	NVIC_SetPriority(SERCOM0_IRQn,1);
     59c:	2101      	movs	r1, #1
     59e:	2009      	movs	r0, #9
     5a0:	4b10      	ldr	r3, [pc, #64]	; (5e4 <obd_uart_init+0x90>)
     5a2:	4798      	blx	r3
	
	// enable the peripheral block
	OBD_UART_MODULE->USART.CTRLA.bit.ENABLE = 0x1u;
     5a4:	4a0b      	ldr	r2, [pc, #44]	; (5d4 <obd_uart_init+0x80>)
     5a6:	6813      	ldr	r3, [r2, #0]
     5a8:	2102      	movs	r1, #2
     5aa:	430b      	orrs	r3, r1
     5ac:	6013      	str	r3, [r2, #0]
	
	// Wait for sercom to enable
	while(OBD_UART_MODULE->USART.SYNCBUSY.bit.ENABLE);
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	4b08      	ldr	r3, [pc, #32]	; (5d4 <obd_uart_init+0x80>)
     5b2:	69db      	ldr	r3, [r3, #28]
     5b4:	079b      	lsls	r3, r3, #30
     5b6:	0fdb      	lsrs	r3, r3, #31
     5b8:	b2db      	uxtb	r3, r3
     5ba:	2b00      	cmp	r3, #0
     5bc:	d1f8      	bne.n	5b0 <obd_uart_init+0x5c>
}
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	46bd      	mov	sp, r7
     5c2:	bd80      	pop	{r7, pc}
     5c4:	0000047d 	.word	0x0000047d
     5c8:	000004e1 	.word	0x000004e1
     5cc:	20000558 	.word	0x20000558
     5d0:	20000998 	.word	0x20000998
     5d4:	42000800 	.word	0x42000800
     5d8:	40100084 	.word	0x40100084
     5dc:	fffffb14 	.word	0xfffffb14
     5e0:	00000375 	.word	0x00000375
     5e4:	000003a1 	.word	0x000003a1

000005e8 <obd_uart_write>:

enum status_code obd_uart_write(uint8_t *data)
{
     5e8:	b580      	push	{r7, lr}
     5ea:	b084      	sub	sp, #16
     5ec:	af00      	add	r7, sp, #0
     5ee:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
     5f0:	2300      	movs	r3, #0
     5f2:	60fb      	str	r3, [r7, #12]
	while(data[i] != '\0')
     5f4:	e00f      	b.n	616 <obd_uart_write+0x2e>
	{
		if(OBD_UART_MODULE->USART.INTFLAG.bit.DRE == 1)
     5f6:	4b0d      	ldr	r3, [pc, #52]	; (62c <obd_uart_write+0x44>)
     5f8:	7e1b      	ldrb	r3, [r3, #24]
     5fa:	07db      	lsls	r3, r3, #31
     5fc:	0fdb      	lsrs	r3, r3, #31
     5fe:	b2db      	uxtb	r3, r3
     600:	2b01      	cmp	r3, #1
     602:	d108      	bne.n	616 <obd_uart_write+0x2e>
		{
			OBD_UART_MODULE->USART.DATA.reg = (uint16_t)data[i++];
     604:	4909      	ldr	r1, [pc, #36]	; (62c <obd_uart_write+0x44>)
     606:	68fb      	ldr	r3, [r7, #12]
     608:	1c5a      	adds	r2, r3, #1
     60a:	60fa      	str	r2, [r7, #12]
     60c:	687a      	ldr	r2, [r7, #4]
     60e:	18d3      	adds	r3, r2, r3
     610:	781b      	ldrb	r3, [r3, #0]
     612:	b29b      	uxth	r3, r3
     614:	850b      	strh	r3, [r1, #40]	; 0x28
	while(data[i] != '\0')
     616:	687a      	ldr	r2, [r7, #4]
     618:	68fb      	ldr	r3, [r7, #12]
     61a:	18d3      	adds	r3, r2, r3
     61c:	781b      	ldrb	r3, [r3, #0]
     61e:	2b00      	cmp	r3, #0
     620:	d1e9      	bne.n	5f6 <obd_uart_write+0xe>
		}
	}
	return STATUS_OK;
     622:	2300      	movs	r3, #0
}
     624:	0018      	movs	r0, r3
     626:	46bd      	mov	sp, r7
     628:	b004      	add	sp, #16
     62a:	bd80      	pop	{r7, pc}
     62c:	42000800 	.word	0x42000800

00000630 <obd_uart_read>:

enum status_code obd_uart_read(uint8_t *read_data, uint8_t data_length)
{
     630:	b580      	push	{r7, lr}
     632:	b084      	sub	sp, #16
     634:	af00      	add	r7, sp, #0
     636:	6078      	str	r0, [r7, #4]
     638:	000a      	movs	r2, r1
     63a:	1cfb      	adds	r3, r7, #3
     63c:	701a      	strb	r2, [r3, #0]
	uint8_t rx_pos = 0;
     63e:	230f      	movs	r3, #15
     640:	18fb      	adds	r3, r7, r3
     642:	2200      	movs	r2, #0
     644:	701a      	strb	r2, [r3, #0]
	
	enum status_code return_status = STATUS_OK;
     646:	230e      	movs	r3, #14
     648:	18fb      	adds	r3, r7, r3
     64a:	2200      	movs	r2, #0
     64c:	701a      	strb	r2, [r3, #0]
	
	while(data_length--)
     64e:	e029      	b.n	6a4 <obd_uart_read+0x74>
	{
		//Waiting for data...
		for (uint32_t i=0;i<=OBD_UART_TIMEOUT;i++)
     650:	2300      	movs	r3, #0
     652:	60bb      	str	r3, [r7, #8]
     654:	e011      	b.n	67a <obd_uart_read+0x4a>
		{
			if (OBD_UART_MODULE->USART.INTFLAG.bit.RXC)
     656:	4b1a      	ldr	r3, [pc, #104]	; (6c0 <obd_uart_read+0x90>)
     658:	7e1b      	ldrb	r3, [r3, #24]
     65a:	075b      	lsls	r3, r3, #29
     65c:	0fdb      	lsrs	r3, r3, #31
     65e:	b2db      	uxtb	r3, r3
     660:	2b00      	cmp	r3, #0
     662:	d10f      	bne.n	684 <obd_uart_read+0x54>
			{
				break;
			}
			else if (i==OBD_UART_TIMEOUT)
     664:	68bb      	ldr	r3, [r7, #8]
     666:	4a17      	ldr	r2, [pc, #92]	; (6c4 <obd_uart_read+0x94>)
     668:	4293      	cmp	r3, r2
     66a:	d103      	bne.n	674 <obd_uart_read+0x44>
			{
				return_status = STATUS_ERR_TIMEOUT;
     66c:	230e      	movs	r3, #14
     66e:	18fb      	adds	r3, r7, r3
     670:	2212      	movs	r2, #18
     672:	701a      	strb	r2, [r3, #0]
		for (uint32_t i=0;i<=OBD_UART_TIMEOUT;i++)
     674:	68bb      	ldr	r3, [r7, #8]
     676:	3301      	adds	r3, #1
     678:	60bb      	str	r3, [r7, #8]
     67a:	68bb      	ldr	r3, [r7, #8]
     67c:	4a11      	ldr	r2, [pc, #68]	; (6c4 <obd_uart_read+0x94>)
     67e:	4293      	cmp	r3, r2
     680:	d9e9      	bls.n	656 <obd_uart_read+0x26>
     682:	e000      	b.n	686 <obd_uart_read+0x56>
				break;
     684:	46c0      	nop			; (mov r8, r8)
			}
		}
		//Reading data into read_data
		read_data[rx_pos++] = (uint8_t) OBD_UART_MODULE->USART.DATA.reg;
     686:	230f      	movs	r3, #15
     688:	18fb      	adds	r3, r7, r3
     68a:	781b      	ldrb	r3, [r3, #0]
     68c:	220f      	movs	r2, #15
     68e:	18ba      	adds	r2, r7, r2
     690:	1c59      	adds	r1, r3, #1
     692:	7011      	strb	r1, [r2, #0]
     694:	001a      	movs	r2, r3
     696:	687b      	ldr	r3, [r7, #4]
     698:	189b      	adds	r3, r3, r2
     69a:	4a09      	ldr	r2, [pc, #36]	; (6c0 <obd_uart_read+0x90>)
     69c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
     69e:	b292      	uxth	r2, r2
     6a0:	b2d2      	uxtb	r2, r2
     6a2:	701a      	strb	r2, [r3, #0]
	while(data_length--)
     6a4:	1cfb      	adds	r3, r7, #3
     6a6:	781b      	ldrb	r3, [r3, #0]
     6a8:	1cfa      	adds	r2, r7, #3
     6aa:	1e59      	subs	r1, r3, #1
     6ac:	7011      	strb	r1, [r2, #0]
     6ae:	2b00      	cmp	r3, #0
     6b0:	d1ce      	bne.n	650 <obd_uart_read+0x20>
	}
	return return_status;
     6b2:	230e      	movs	r3, #14
     6b4:	18fb      	adds	r3, r7, r3
     6b6:	781b      	ldrb	r3, [r3, #0]
}
     6b8:	0018      	movs	r0, r3
     6ba:	46bd      	mov	sp, r7
     6bc:	b004      	add	sp, #16
     6be:	bd80      	pop	{r7, pc}
     6c0:	42000800 	.word	0x42000800
     6c4:	0000ffff 	.word	0x0000ffff

000006c8 <wdt_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void wdt_get_config_defaults(
		struct wdt_conf *const config)
{
     6c8:	b580      	push	{r7, lr}
     6ca:	b082      	sub	sp, #8
     6cc:	af00      	add	r7, sp, #0
     6ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
     6d0:	687b      	ldr	r3, [r7, #4]
     6d2:	2200      	movs	r2, #0
     6d4:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
     6d6:	687b      	ldr	r3, [r7, #4]
     6d8:	2201      	movs	r2, #1
     6da:	705a      	strb	r2, [r3, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21) && !(SAMR30)
	config->clock_source         = GCLK_GENERATOR_4;
     6dc:	687b      	ldr	r3, [r7, #4]
     6de:	2204      	movs	r2, #4
     6e0:	709a      	strb	r2, [r3, #2]
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
     6e2:	687b      	ldr	r3, [r7, #4]
     6e4:	220c      	movs	r2, #12
     6e6:	70da      	strb	r2, [r3, #3]
	config->window_period        = WDT_PERIOD_NONE;
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	2200      	movs	r2, #0
     6ec:	711a      	strb	r2, [r3, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
     6ee:	687b      	ldr	r3, [r7, #4]
     6f0:	2200      	movs	r2, #0
     6f2:	715a      	strb	r2, [r3, #5]
}
     6f4:	46c0      	nop			; (mov r8, r8)
     6f6:	46bd      	mov	sp, r7
     6f8:	b002      	add	sp, #8
     6fa:	bd80      	pop	{r7, pc}

000006fc <wdt_init>:
 *  Author: Andreas
 */ 
#include "wdt.h"

void wdt_init()
{
     6fc:	b580      	push	{r7, lr}
     6fe:	b082      	sub	sp, #8
     700:	af00      	add	r7, sp, #0
	struct wdt_conf config_wdt;
	wdt_get_config_defaults(&config_wdt);
     702:	003b      	movs	r3, r7
     704:	0018      	movs	r0, r3
     706:	4b09      	ldr	r3, [pc, #36]	; (72c <wdt_init+0x30>)
     708:	4798      	blx	r3
	
	config_wdt.always_on = false;
     70a:	003b      	movs	r3, r7
     70c:	2200      	movs	r2, #0
     70e:	701a      	strb	r2, [r3, #0]
	config_wdt.timeout_period = WDT_PERIOD_4096CLK;
     710:	003b      	movs	r3, r7
     712:	220a      	movs	r2, #10
     714:	70da      	strb	r2, [r3, #3]
	config_wdt.early_warning_period = WDT_PERIOD_2048CLK;
     716:	003b      	movs	r3, r7
     718:	2209      	movs	r2, #9
     71a:	715a      	strb	r2, [r3, #5]
	
	wdt_set_config(&config_wdt);
     71c:	003b      	movs	r3, r7
     71e:	0018      	movs	r0, r3
     720:	4b03      	ldr	r3, [pc, #12]	; (730 <wdt_init+0x34>)
     722:	4798      	blx	r3
	//wdt_init_cb();
}
     724:	46c0      	nop			; (mov r8, r8)
     726:	46bd      	mov	sp, r7
     728:	b002      	add	sp, #8
     72a:	bd80      	pop	{r7, pc}
     72c:	000006c9 	.word	0x000006c9
     730:	000010f5 	.word	0x000010f5

00000734 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
     734:	b580      	push	{r7, lr}
     736:	af00      	add	r7, sp, #0
}
     738:	46c0      	nop			; (mov r8, r8)
     73a:	46bd      	mov	sp, r7
     73c:	bd80      	pop	{r7, pc}
	...

00000740 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     740:	b580      	push	{r7, lr}
     742:	b084      	sub	sp, #16
     744:	af00      	add	r7, sp, #0
     746:	0002      	movs	r2, r0
     748:	1dfb      	adds	r3, r7, #7
     74a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     74c:	230f      	movs	r3, #15
     74e:	18fb      	adds	r3, r7, r3
     750:	1dfa      	adds	r2, r7, #7
     752:	7812      	ldrb	r2, [r2, #0]
     754:	0952      	lsrs	r2, r2, #5
     756:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     758:	230f      	movs	r3, #15
     75a:	18fb      	adds	r3, r7, r3
     75c:	781b      	ldrb	r3, [r3, #0]
     75e:	2b00      	cmp	r3, #0
     760:	d10c      	bne.n	77c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     762:	4b09      	ldr	r3, [pc, #36]	; (788 <_extint_get_eic_from_channel+0x48>)
     764:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     766:	230f      	movs	r3, #15
     768:	18fb      	adds	r3, r7, r3
     76a:	781b      	ldrb	r3, [r3, #0]
     76c:	009b      	lsls	r3, r3, #2
     76e:	2210      	movs	r2, #16
     770:	4694      	mov	ip, r2
     772:	44bc      	add	ip, r7
     774:	4463      	add	r3, ip
     776:	3b08      	subs	r3, #8
     778:	681b      	ldr	r3, [r3, #0]
     77a:	e000      	b.n	77e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     77c:	2300      	movs	r3, #0
	}
}
     77e:	0018      	movs	r0, r3
     780:	46bd      	mov	sp, r7
     782:	b004      	add	sp, #16
     784:	bd80      	pop	{r7, pc}
     786:	46c0      	nop			; (mov r8, r8)
     788:	40001800 	.word	0x40001800

0000078c <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     78c:	b580      	push	{r7, lr}
     78e:	b084      	sub	sp, #16
     790:	af00      	add	r7, sp, #0
     792:	0002      	movs	r2, r0
     794:	1dfb      	adds	r3, r7, #7
     796:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     798:	1dfb      	adds	r3, r7, #7
     79a:	781b      	ldrb	r3, [r3, #0]
     79c:	0018      	movs	r0, r3
     79e:	4b0b      	ldr	r3, [pc, #44]	; (7cc <extint_chan_is_detected+0x40>)
     7a0:	4798      	blx	r3
     7a2:	0003      	movs	r3, r0
     7a4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     7a6:	1dfb      	adds	r3, r7, #7
     7a8:	781b      	ldrb	r3, [r3, #0]
     7aa:	221f      	movs	r2, #31
     7ac:	4013      	ands	r3, r2
     7ae:	2201      	movs	r2, #1
     7b0:	409a      	lsls	r2, r3
     7b2:	0013      	movs	r3, r2
     7b4:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     7b6:	68fb      	ldr	r3, [r7, #12]
     7b8:	691b      	ldr	r3, [r3, #16]
     7ba:	68ba      	ldr	r2, [r7, #8]
     7bc:	4013      	ands	r3, r2
     7be:	1e5a      	subs	r2, r3, #1
     7c0:	4193      	sbcs	r3, r2
     7c2:	b2db      	uxtb	r3, r3
}
     7c4:	0018      	movs	r0, r3
     7c6:	46bd      	mov	sp, r7
     7c8:	b004      	add	sp, #16
     7ca:	bd80      	pop	{r7, pc}
     7cc:	00000741 	.word	0x00000741

000007d0 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     7d0:	b580      	push	{r7, lr}
     7d2:	b084      	sub	sp, #16
     7d4:	af00      	add	r7, sp, #0
     7d6:	0002      	movs	r2, r0
     7d8:	1dfb      	adds	r3, r7, #7
     7da:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     7dc:	1dfb      	adds	r3, r7, #7
     7de:	781b      	ldrb	r3, [r3, #0]
     7e0:	0018      	movs	r0, r3
     7e2:	4b09      	ldr	r3, [pc, #36]	; (808 <extint_chan_clear_detected+0x38>)
     7e4:	4798      	blx	r3
     7e6:	0003      	movs	r3, r0
     7e8:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     7ea:	1dfb      	adds	r3, r7, #7
     7ec:	781b      	ldrb	r3, [r3, #0]
     7ee:	221f      	movs	r2, #31
     7f0:	4013      	ands	r3, r2
     7f2:	2201      	movs	r2, #1
     7f4:	409a      	lsls	r2, r3
     7f6:	0013      	movs	r3, r2
     7f8:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     7fa:	68fb      	ldr	r3, [r7, #12]
     7fc:	68ba      	ldr	r2, [r7, #8]
     7fe:	611a      	str	r2, [r3, #16]
}
     800:	46c0      	nop			; (mov r8, r8)
     802:	46bd      	mov	sp, r7
     804:	b004      	add	sp, #16
     806:	bd80      	pop	{r7, pc}
     808:	00000741 	.word	0x00000741

0000080c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     80c:	b580      	push	{r7, lr}
     80e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     810:	4b15      	ldr	r3, [pc, #84]	; (868 <EIC_Handler+0x5c>)
     812:	2200      	movs	r2, #0
     814:	701a      	strb	r2, [r3, #0]
     816:	e020      	b.n	85a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     818:	4b13      	ldr	r3, [pc, #76]	; (868 <EIC_Handler+0x5c>)
     81a:	781b      	ldrb	r3, [r3, #0]
     81c:	0018      	movs	r0, r3
     81e:	4b13      	ldr	r3, [pc, #76]	; (86c <EIC_Handler+0x60>)
     820:	4798      	blx	r3
     822:	1e03      	subs	r3, r0, #0
     824:	d013      	beq.n	84e <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     826:	4b10      	ldr	r3, [pc, #64]	; (868 <EIC_Handler+0x5c>)
     828:	781b      	ldrb	r3, [r3, #0]
     82a:	0018      	movs	r0, r3
     82c:	4b10      	ldr	r3, [pc, #64]	; (870 <EIC_Handler+0x64>)
     82e:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     830:	4b0d      	ldr	r3, [pc, #52]	; (868 <EIC_Handler+0x5c>)
     832:	781b      	ldrb	r3, [r3, #0]
     834:	001a      	movs	r2, r3
     836:	4b0f      	ldr	r3, [pc, #60]	; (874 <EIC_Handler+0x68>)
     838:	0092      	lsls	r2, r2, #2
     83a:	58d3      	ldr	r3, [r2, r3]
     83c:	2b00      	cmp	r3, #0
     83e:	d006      	beq.n	84e <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     840:	4b09      	ldr	r3, [pc, #36]	; (868 <EIC_Handler+0x5c>)
     842:	781b      	ldrb	r3, [r3, #0]
     844:	001a      	movs	r2, r3
     846:	4b0b      	ldr	r3, [pc, #44]	; (874 <EIC_Handler+0x68>)
     848:	0092      	lsls	r2, r2, #2
     84a:	58d3      	ldr	r3, [r2, r3]
     84c:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     84e:	4b06      	ldr	r3, [pc, #24]	; (868 <EIC_Handler+0x5c>)
     850:	781b      	ldrb	r3, [r3, #0]
     852:	3301      	adds	r3, #1
     854:	b2da      	uxtb	r2, r3
     856:	4b04      	ldr	r3, [pc, #16]	; (868 <EIC_Handler+0x5c>)
     858:	701a      	strb	r2, [r3, #0]
     85a:	4b03      	ldr	r3, [pc, #12]	; (868 <EIC_Handler+0x5c>)
     85c:	781b      	ldrb	r3, [r3, #0]
     85e:	2b0f      	cmp	r3, #15
     860:	d9da      	bls.n	818 <EIC_Handler+0xc>
			}
		}
	}
}
     862:	46c0      	nop			; (mov r8, r8)
     864:	46bd      	mov	sp, r7
     866:	bd80      	pop	{r7, pc}
     868:	200009ad 	.word	0x200009ad
     86c:	0000078d 	.word	0x0000078d
     870:	000007d1 	.word	0x000007d1
     874:	200009b0 	.word	0x200009b0

00000878 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     878:	b580      	push	{r7, lr}
     87a:	b082      	sub	sp, #8
     87c:	af00      	add	r7, sp, #0
     87e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     880:	687b      	ldr	r3, [r7, #4]
     882:	2200      	movs	r2, #0
     884:	701a      	strb	r2, [r3, #0]
}
     886:	46c0      	nop			; (mov r8, r8)
     888:	46bd      	mov	sp, r7
     88a:	b002      	add	sp, #8
     88c:	bd80      	pop	{r7, pc}
	...

00000890 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     890:	b580      	push	{r7, lr}
     892:	b082      	sub	sp, #8
     894:	af00      	add	r7, sp, #0
     896:	0002      	movs	r2, r0
     898:	6039      	str	r1, [r7, #0]
     89a:	1dfb      	adds	r3, r7, #7
     89c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     89e:	1dfb      	adds	r3, r7, #7
     8a0:	781b      	ldrb	r3, [r3, #0]
     8a2:	2b01      	cmp	r3, #1
     8a4:	d00a      	beq.n	8bc <system_apb_clock_set_mask+0x2c>
     8a6:	2b02      	cmp	r3, #2
     8a8:	d00f      	beq.n	8ca <system_apb_clock_set_mask+0x3a>
     8aa:	2b00      	cmp	r3, #0
     8ac:	d114      	bne.n	8d8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     8ae:	4b0e      	ldr	r3, [pc, #56]	; (8e8 <system_apb_clock_set_mask+0x58>)
     8b0:	4a0d      	ldr	r2, [pc, #52]	; (8e8 <system_apb_clock_set_mask+0x58>)
     8b2:	6991      	ldr	r1, [r2, #24]
     8b4:	683a      	ldr	r2, [r7, #0]
     8b6:	430a      	orrs	r2, r1
     8b8:	619a      	str	r2, [r3, #24]
			break;
     8ba:	e00f      	b.n	8dc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     8bc:	4b0a      	ldr	r3, [pc, #40]	; (8e8 <system_apb_clock_set_mask+0x58>)
     8be:	4a0a      	ldr	r2, [pc, #40]	; (8e8 <system_apb_clock_set_mask+0x58>)
     8c0:	69d1      	ldr	r1, [r2, #28]
     8c2:	683a      	ldr	r2, [r7, #0]
     8c4:	430a      	orrs	r2, r1
     8c6:	61da      	str	r2, [r3, #28]
			break;
     8c8:	e008      	b.n	8dc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     8ca:	4b07      	ldr	r3, [pc, #28]	; (8e8 <system_apb_clock_set_mask+0x58>)
     8cc:	4a06      	ldr	r2, [pc, #24]	; (8e8 <system_apb_clock_set_mask+0x58>)
     8ce:	6a11      	ldr	r1, [r2, #32]
     8d0:	683a      	ldr	r2, [r7, #0]
     8d2:	430a      	orrs	r2, r1
     8d4:	621a      	str	r2, [r3, #32]
			break;
     8d6:	e001      	b.n	8dc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     8d8:	2317      	movs	r3, #23
     8da:	e000      	b.n	8de <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     8dc:	2300      	movs	r3, #0
}
     8de:	0018      	movs	r0, r3
     8e0:	46bd      	mov	sp, r7
     8e2:	b002      	add	sp, #8
     8e4:	bd80      	pop	{r7, pc}
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	40000400 	.word	0x40000400

000008ec <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     8ec:	b580      	push	{r7, lr}
     8ee:	b082      	sub	sp, #8
     8f0:	af00      	add	r7, sp, #0
     8f2:	0002      	movs	r2, r0
     8f4:	1dfb      	adds	r3, r7, #7
     8f6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     8f8:	4b06      	ldr	r3, [pc, #24]	; (914 <system_interrupt_enable+0x28>)
     8fa:	1dfa      	adds	r2, r7, #7
     8fc:	7812      	ldrb	r2, [r2, #0]
     8fe:	0011      	movs	r1, r2
     900:	221f      	movs	r2, #31
     902:	400a      	ands	r2, r1
     904:	2101      	movs	r1, #1
     906:	4091      	lsls	r1, r2
     908:	000a      	movs	r2, r1
     90a:	601a      	str	r2, [r3, #0]
}
     90c:	46c0      	nop			; (mov r8, r8)
     90e:	46bd      	mov	sp, r7
     910:	b002      	add	sp, #8
     912:	bd80      	pop	{r7, pc}
     914:	e000e100 	.word	0xe000e100

00000918 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     918:	b580      	push	{r7, lr}
     91a:	b082      	sub	sp, #8
     91c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     91e:	4b0f      	ldr	r3, [pc, #60]	; (95c <extint_is_syncing+0x44>)
     920:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     922:	2300      	movs	r3, #0
     924:	607b      	str	r3, [r7, #4]
     926:	e011      	b.n	94c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     928:	687b      	ldr	r3, [r7, #4]
     92a:	009b      	lsls	r3, r3, #2
     92c:	2208      	movs	r2, #8
     92e:	4694      	mov	ip, r2
     930:	44bc      	add	ip, r7
     932:	4463      	add	r3, ip
     934:	3b08      	subs	r3, #8
     936:	681b      	ldr	r3, [r3, #0]
     938:	785b      	ldrb	r3, [r3, #1]
     93a:	b2db      	uxtb	r3, r3
     93c:	b25b      	sxtb	r3, r3
     93e:	2b00      	cmp	r3, #0
     940:	da01      	bge.n	946 <extint_is_syncing+0x2e>
			return true;
     942:	2301      	movs	r3, #1
     944:	e006      	b.n	954 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     946:	687b      	ldr	r3, [r7, #4]
     948:	3301      	adds	r3, #1
     94a:	607b      	str	r3, [r7, #4]
     94c:	687b      	ldr	r3, [r7, #4]
     94e:	2b00      	cmp	r3, #0
     950:	d0ea      	beq.n	928 <extint_is_syncing+0x10>
		}
	}
	return false;
     952:	2300      	movs	r3, #0
}
     954:	0018      	movs	r0, r3
     956:	46bd      	mov	sp, r7
     958:	b002      	add	sp, #8
     95a:	bd80      	pop	{r7, pc}
     95c:	40001800 	.word	0x40001800

00000960 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     960:	b580      	push	{r7, lr}
     962:	b084      	sub	sp, #16
     964:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     966:	4b2d      	ldr	r3, [pc, #180]	; (a1c <_system_extint_init+0xbc>)
     968:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     96a:	2140      	movs	r1, #64	; 0x40
     96c:	2000      	movs	r0, #0
     96e:	4b2c      	ldr	r3, [pc, #176]	; (a20 <_system_extint_init+0xc0>)
     970:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     972:	003b      	movs	r3, r7
     974:	0018      	movs	r0, r3
     976:	4b2b      	ldr	r3, [pc, #172]	; (a24 <_system_extint_init+0xc4>)
     978:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     97a:	003b      	movs	r3, r7
     97c:	2200      	movs	r2, #0
     97e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     980:	003b      	movs	r3, r7
     982:	0019      	movs	r1, r3
     984:	2005      	movs	r0, #5
     986:	4b28      	ldr	r3, [pc, #160]	; (a28 <_system_extint_init+0xc8>)
     988:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     98a:	2005      	movs	r0, #5
     98c:	4b27      	ldr	r3, [pc, #156]	; (a2c <_system_extint_init+0xcc>)
     98e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     990:	2300      	movs	r3, #0
     992:	60fb      	str	r3, [r7, #12]
     994:	e018      	b.n	9c8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     996:	68fb      	ldr	r3, [r7, #12]
     998:	009b      	lsls	r3, r3, #2
     99a:	2210      	movs	r2, #16
     99c:	4694      	mov	ip, r2
     99e:	44bc      	add	ip, r7
     9a0:	4463      	add	r3, ip
     9a2:	3b0c      	subs	r3, #12
     9a4:	681a      	ldr	r2, [r3, #0]
     9a6:	68fb      	ldr	r3, [r7, #12]
     9a8:	009b      	lsls	r3, r3, #2
     9aa:	2110      	movs	r1, #16
     9ac:	468c      	mov	ip, r1
     9ae:	44bc      	add	ip, r7
     9b0:	4463      	add	r3, ip
     9b2:	3b0c      	subs	r3, #12
     9b4:	681b      	ldr	r3, [r3, #0]
     9b6:	781b      	ldrb	r3, [r3, #0]
     9b8:	b2db      	uxtb	r3, r3
     9ba:	2101      	movs	r1, #1
     9bc:	430b      	orrs	r3, r1
     9be:	b2db      	uxtb	r3, r3
     9c0:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     9c2:	68fb      	ldr	r3, [r7, #12]
     9c4:	3301      	adds	r3, #1
     9c6:	60fb      	str	r3, [r7, #12]
     9c8:	68fb      	ldr	r3, [r7, #12]
     9ca:	2b00      	cmp	r3, #0
     9cc:	d0e3      	beq.n	996 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	4b17      	ldr	r3, [pc, #92]	; (a30 <_system_extint_init+0xd0>)
     9d2:	4798      	blx	r3
     9d4:	1e03      	subs	r3, r0, #0
     9d6:	d1fb      	bne.n	9d0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     9d8:	230b      	movs	r3, #11
     9da:	18fb      	adds	r3, r7, r3
     9dc:	2200      	movs	r2, #0
     9de:	701a      	strb	r2, [r3, #0]
     9e0:	e00d      	b.n	9fe <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     9e2:	230b      	movs	r3, #11
     9e4:	18fb      	adds	r3, r7, r3
     9e6:	781a      	ldrb	r2, [r3, #0]
     9e8:	4b12      	ldr	r3, [pc, #72]	; (a34 <_system_extint_init+0xd4>)
     9ea:	0092      	lsls	r2, r2, #2
     9ec:	2100      	movs	r1, #0
     9ee:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     9f0:	230b      	movs	r3, #11
     9f2:	18fb      	adds	r3, r7, r3
     9f4:	781a      	ldrb	r2, [r3, #0]
     9f6:	230b      	movs	r3, #11
     9f8:	18fb      	adds	r3, r7, r3
     9fa:	3201      	adds	r2, #1
     9fc:	701a      	strb	r2, [r3, #0]
     9fe:	230b      	movs	r3, #11
     a00:	18fb      	adds	r3, r7, r3
     a02:	781b      	ldrb	r3, [r3, #0]
     a04:	2b0f      	cmp	r3, #15
     a06:	d9ec      	bls.n	9e2 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     a08:	2004      	movs	r0, #4
     a0a:	4b0b      	ldr	r3, [pc, #44]	; (a38 <_system_extint_init+0xd8>)
     a0c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     a0e:	4b0b      	ldr	r3, [pc, #44]	; (a3c <_system_extint_init+0xdc>)
     a10:	4798      	blx	r3
}
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	46bd      	mov	sp, r7
     a16:	b004      	add	sp, #16
     a18:	bd80      	pop	{r7, pc}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	40001800 	.word	0x40001800
     a20:	00000891 	.word	0x00000891
     a24:	00000879 	.word	0x00000879
     a28:	00004be5 	.word	0x00004be5
     a2c:	00004c29 	.word	0x00004c29
     a30:	00000919 	.word	0x00000919
     a34:	200009b0 	.word	0x200009b0
     a38:	000008ed 	.word	0x000008ed
     a3c:	00000a41 	.word	0x00000a41

00000a40 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     a40:	b580      	push	{r7, lr}
     a42:	b082      	sub	sp, #8
     a44:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     a46:	4b15      	ldr	r3, [pc, #84]	; (a9c <_extint_enable+0x5c>)
     a48:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     a4a:	2300      	movs	r3, #0
     a4c:	607b      	str	r3, [r7, #4]
     a4e:	e018      	b.n	a82 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     a50:	687b      	ldr	r3, [r7, #4]
     a52:	009b      	lsls	r3, r3, #2
     a54:	2208      	movs	r2, #8
     a56:	4694      	mov	ip, r2
     a58:	44bc      	add	ip, r7
     a5a:	4463      	add	r3, ip
     a5c:	3b08      	subs	r3, #8
     a5e:	681a      	ldr	r2, [r3, #0]
     a60:	687b      	ldr	r3, [r7, #4]
     a62:	009b      	lsls	r3, r3, #2
     a64:	2108      	movs	r1, #8
     a66:	468c      	mov	ip, r1
     a68:	44bc      	add	ip, r7
     a6a:	4463      	add	r3, ip
     a6c:	3b08      	subs	r3, #8
     a6e:	681b      	ldr	r3, [r3, #0]
     a70:	781b      	ldrb	r3, [r3, #0]
     a72:	b2db      	uxtb	r3, r3
     a74:	2102      	movs	r1, #2
     a76:	430b      	orrs	r3, r1
     a78:	b2db      	uxtb	r3, r3
     a7a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     a7c:	687b      	ldr	r3, [r7, #4]
     a7e:	3301      	adds	r3, #1
     a80:	607b      	str	r3, [r7, #4]
     a82:	687b      	ldr	r3, [r7, #4]
     a84:	2b00      	cmp	r3, #0
     a86:	d0e3      	beq.n	a50 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
     a88:	46c0      	nop			; (mov r8, r8)
     a8a:	4b05      	ldr	r3, [pc, #20]	; (aa0 <_extint_enable+0x60>)
     a8c:	4798      	blx	r3
     a8e:	1e03      	subs	r3, r0, #0
     a90:	d1fb      	bne.n	a8a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	46bd      	mov	sp, r7
     a96:	b002      	add	sp, #8
     a98:	bd80      	pop	{r7, pc}
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	40001800 	.word	0x40001800
     aa0:	00000919 	.word	0x00000919

00000aa4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     aa4:	b580      	push	{r7, lr}
     aa6:	b084      	sub	sp, #16
     aa8:	af00      	add	r7, sp, #0
     aaa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     aac:	687b      	ldr	r3, [r7, #4]
     aae:	681b      	ldr	r3, [r3, #0]
     ab0:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     ab2:	68fb      	ldr	r3, [r7, #12]
     ab4:	69db      	ldr	r3, [r3, #28]
     ab6:	2207      	movs	r2, #7
     ab8:	4013      	ands	r3, r2
     aba:	1e5a      	subs	r2, r3, #1
     abc:	4193      	sbcs	r3, r2
     abe:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     ac0:	0018      	movs	r0, r3
     ac2:	46bd      	mov	sp, r7
     ac4:	b004      	add	sp, #16
     ac6:	bd80      	pop	{r7, pc}

00000ac8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     ac8:	b580      	push	{r7, lr}
     aca:	b082      	sub	sp, #8
     acc:	af00      	add	r7, sp, #0
     ace:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     ad0:	46c0      	nop			; (mov r8, r8)
     ad2:	687b      	ldr	r3, [r7, #4]
     ad4:	0018      	movs	r0, r3
     ad6:	4b04      	ldr	r3, [pc, #16]	; (ae8 <_i2c_master_wait_for_sync+0x20>)
     ad8:	4798      	blx	r3
     ada:	1e03      	subs	r3, r0, #0
     adc:	d1f9      	bne.n	ad2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     ade:	46c0      	nop			; (mov r8, r8)
     ae0:	46bd      	mov	sp, r7
     ae2:	b002      	add	sp, #8
     ae4:	bd80      	pop	{r7, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	00000aa5 	.word	0x00000aa5

00000aec <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
     aec:	b580      	push	{r7, lr}
     aee:	b084      	sub	sp, #16
     af0:	af00      	add	r7, sp, #0
     af2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     af4:	687b      	ldr	r3, [r7, #4]
     af6:	681b      	ldr	r3, [r3, #0]
     af8:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     afa:	68fb      	ldr	r3, [r7, #12]
     afc:	7e1b      	ldrb	r3, [r3, #24]
     afe:	b2db      	uxtb	r3, r3
     b00:	001a      	movs	r2, r3
     b02:	2302      	movs	r3, #2
     b04:	4013      	ands	r3, r2
     b06:	d00b      	beq.n	b20 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     b08:	68fb      	ldr	r3, [r7, #12]
     b0a:	2202      	movs	r2, #2
     b0c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     b0e:	68fb      	ldr	r3, [r7, #12]
     b10:	8b5b      	ldrh	r3, [r3, #26]
     b12:	b29b      	uxth	r3, r3
     b14:	001a      	movs	r2, r3
     b16:	2302      	movs	r3, #2
     b18:	4013      	ands	r3, r2
     b1a:	d011      	beq.n	b40 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     b1c:	2341      	movs	r3, #65	; 0x41
     b1e:	e010      	b.n	b42 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     b20:	68fb      	ldr	r3, [r7, #12]
     b22:	8b5b      	ldrh	r3, [r3, #26]
     b24:	b29b      	uxth	r3, r3
     b26:	001a      	movs	r2, r3
     b28:	2304      	movs	r3, #4
     b2a:	4013      	ands	r3, r2
     b2c:	d008      	beq.n	b40 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     b2e:	68fb      	ldr	r3, [r7, #12]
     b30:	685b      	ldr	r3, [r3, #4]
     b32:	22c0      	movs	r2, #192	; 0xc0
     b34:	0292      	lsls	r2, r2, #10
     b36:	431a      	orrs	r2, r3
     b38:	68fb      	ldr	r3, [r7, #12]
     b3a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     b3c:	2318      	movs	r3, #24
     b3e:	e000      	b.n	b42 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
     b40:	2300      	movs	r3, #0
}
     b42:	0018      	movs	r0, r3
     b44:	46bd      	mov	sp, r7
     b46:	b004      	add	sp, #16
     b48:	bd80      	pop	{r7, pc}

00000b4a <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     b4a:	b580      	push	{r7, lr}
     b4c:	b084      	sub	sp, #16
     b4e:	af00      	add	r7, sp, #0
     b50:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b52:	687b      	ldr	r3, [r7, #4]
     b54:	681b      	ldr	r3, [r3, #0]
     b56:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     b58:	230e      	movs	r3, #14
     b5a:	18fb      	adds	r3, r7, r3
     b5c:	2200      	movs	r2, #0
     b5e:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     b60:	e00f      	b.n	b82 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     b62:	230e      	movs	r3, #14
     b64:	18fb      	adds	r3, r7, r3
     b66:	220e      	movs	r2, #14
     b68:	18ba      	adds	r2, r7, r2
     b6a:	8812      	ldrh	r2, [r2, #0]
     b6c:	3201      	adds	r2, #1
     b6e:	801a      	strh	r2, [r3, #0]
     b70:	687b      	ldr	r3, [r7, #4]
     b72:	891b      	ldrh	r3, [r3, #8]
     b74:	220e      	movs	r2, #14
     b76:	18ba      	adds	r2, r7, r2
     b78:	8812      	ldrh	r2, [r2, #0]
     b7a:	429a      	cmp	r2, r3
     b7c:	d301      	bcc.n	b82 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
     b7e:	2312      	movs	r3, #18
     b80:	e00e      	b.n	ba0 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     b82:	68bb      	ldr	r3, [r7, #8]
     b84:	7e1b      	ldrb	r3, [r3, #24]
     b86:	b2db      	uxtb	r3, r3
     b88:	001a      	movs	r2, r3
     b8a:	2301      	movs	r3, #1
     b8c:	4013      	ands	r3, r2
     b8e:	d106      	bne.n	b9e <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     b90:	68bb      	ldr	r3, [r7, #8]
     b92:	7e1b      	ldrb	r3, [r3, #24]
     b94:	b2db      	uxtb	r3, r3
     b96:	001a      	movs	r2, r3
     b98:	2302      	movs	r3, #2
     b9a:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     b9c:	d0e1      	beq.n	b62 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
     b9e:	2300      	movs	r3, #0
}
     ba0:	0018      	movs	r0, r3
     ba2:	46bd      	mov	sp, r7
     ba4:	b004      	add	sp, #16
     ba6:	bd80      	pop	{r7, pc}

00000ba8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     ba8:	b590      	push	{r4, r7, lr}
     baa:	b085      	sub	sp, #20
     bac:	af00      	add	r7, sp, #0
     bae:	6078      	str	r0, [r7, #4]
     bb0:	000a      	movs	r2, r1
     bb2:	1cfb      	adds	r3, r7, #3
     bb4:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     bb6:	687b      	ldr	r3, [r7, #4]
     bb8:	681b      	ldr	r3, [r3, #0]
     bba:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     bbc:	68fb      	ldr	r3, [r7, #12]
     bbe:	685b      	ldr	r3, [r3, #4]
     bc0:	2280      	movs	r2, #128	; 0x80
     bc2:	02d2      	lsls	r2, r2, #11
     bc4:	431a      	orrs	r2, r3
     bc6:	68fb      	ldr	r3, [r7, #12]
     bc8:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     bca:	1cfb      	adds	r3, r7, #3
     bcc:	781a      	ldrb	r2, [r3, #0]
     bce:	68fb      	ldr	r3, [r7, #12]
     bd0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     bd2:	230b      	movs	r3, #11
     bd4:	18fc      	adds	r4, r7, r3
     bd6:	687b      	ldr	r3, [r7, #4]
     bd8:	0018      	movs	r0, r3
     bda:	4b07      	ldr	r3, [pc, #28]	; (bf8 <_i2c_master_send_hs_master_code+0x50>)
     bdc:	4798      	blx	r3
     bde:	0003      	movs	r3, r0
     be0:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     be2:	68fb      	ldr	r3, [r7, #12]
     be4:	2201      	movs	r2, #1
     be6:	761a      	strb	r2, [r3, #24]

	return tmp_status;
     be8:	230b      	movs	r3, #11
     bea:	18fb      	adds	r3, r7, r3
     bec:	781b      	ldrb	r3, [r3, #0]
}
     bee:	0018      	movs	r0, r3
     bf0:	46bd      	mov	sp, r7
     bf2:	b005      	add	sp, #20
     bf4:	bd90      	pop	{r4, r7, pc}
     bf6:	46c0      	nop			; (mov r8, r8)
     bf8:	00000b4b 	.word	0x00000b4b

00000bfc <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     bfc:	b590      	push	{r4, r7, lr}
     bfe:	b087      	sub	sp, #28
     c00:	af00      	add	r7, sp, #0
     c02:	6078      	str	r0, [r7, #4]
     c04:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c06:	687b      	ldr	r3, [r7, #4]
     c08:	681b      	ldr	r3, [r3, #0]
     c0a:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     c0c:	2314      	movs	r3, #20
     c0e:	18fb      	adds	r3, r7, r3
     c10:	683a      	ldr	r2, [r7, #0]
     c12:	8852      	ldrh	r2, [r2, #2]
     c14:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
     c16:	2312      	movs	r3, #18
     c18:	18fb      	adds	r3, r7, r3
     c1a:	2200      	movs	r2, #0
     c1c:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     c1e:	68fb      	ldr	r3, [r7, #12]
     c20:	681b      	ldr	r3, [r3, #0]
     c22:	011b      	lsls	r3, r3, #4
     c24:	0fdb      	lsrs	r3, r3, #31
     c26:	b2db      	uxtb	r3, r3
     c28:	001a      	movs	r2, r3
     c2a:	230b      	movs	r3, #11
     c2c:	18fb      	adds	r3, r7, r3
     c2e:	1e51      	subs	r1, r2, #1
     c30:	418a      	sbcs	r2, r1
     c32:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     c34:	683b      	ldr	r3, [r7, #0]
     c36:	7a5b      	ldrb	r3, [r3, #9]
     c38:	2b00      	cmp	r3, #0
     c3a:	d006      	beq.n	c4a <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     c3c:	683b      	ldr	r3, [r7, #0]
     c3e:	7a9a      	ldrb	r2, [r3, #10]
     c40:	687b      	ldr	r3, [r7, #4]
     c42:	0011      	movs	r1, r2
     c44:	0018      	movs	r0, r3
     c46:	4b85      	ldr	r3, [pc, #532]	; (e5c <_i2c_master_read_packet+0x260>)
     c48:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c4a:	68fb      	ldr	r3, [r7, #12]
     c4c:	685b      	ldr	r3, [r3, #4]
     c4e:	4a84      	ldr	r2, [pc, #528]	; (e60 <_i2c_master_read_packet+0x264>)
     c50:	401a      	ands	r2, r3
     c52:	68fb      	ldr	r3, [r7, #12]
     c54:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     c56:	683b      	ldr	r3, [r7, #0]
     c58:	7a1b      	ldrb	r3, [r3, #8]
     c5a:	2b00      	cmp	r3, #0
     c5c:	d042      	beq.n	ce4 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     c5e:	683b      	ldr	r3, [r7, #0]
     c60:	881b      	ldrh	r3, [r3, #0]
     c62:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c64:	683b      	ldr	r3, [r7, #0]
     c66:	7a5b      	ldrb	r3, [r3, #9]
     c68:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     c6a:	4313      	orrs	r3, r2
     c6c:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c6e:	2380      	movs	r3, #128	; 0x80
     c70:	021b      	lsls	r3, r3, #8
     c72:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
     c74:	68fb      	ldr	r3, [r7, #12]
     c76:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     c78:	2317      	movs	r3, #23
     c7a:	18fc      	adds	r4, r7, r3
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	0018      	movs	r0, r3
     c80:	4b78      	ldr	r3, [pc, #480]	; (e64 <_i2c_master_read_packet+0x268>)
     c82:	4798      	blx	r3
     c84:	0003      	movs	r3, r0
     c86:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c88:	68fb      	ldr	r3, [r7, #12]
     c8a:	685b      	ldr	r3, [r3, #4]
     c8c:	4a74      	ldr	r2, [pc, #464]	; (e60 <_i2c_master_read_packet+0x264>)
     c8e:	401a      	ands	r2, r3
     c90:	68fb      	ldr	r3, [r7, #12]
     c92:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     c94:	2317      	movs	r3, #23
     c96:	18fb      	adds	r3, r7, r3
     c98:	781b      	ldrb	r3, [r3, #0]
     c9a:	2b00      	cmp	r3, #0
     c9c:	d107      	bne.n	cae <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
     c9e:	2317      	movs	r3, #23
     ca0:	18fc      	adds	r4, r7, r3
     ca2:	687b      	ldr	r3, [r7, #4]
     ca4:	0018      	movs	r0, r3
     ca6:	4b70      	ldr	r3, [pc, #448]	; (e68 <_i2c_master_read_packet+0x26c>)
     ca8:	4798      	blx	r3
     caa:	0003      	movs	r3, r0
     cac:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
     cae:	2317      	movs	r3, #23
     cb0:	18fb      	adds	r3, r7, r3
     cb2:	781b      	ldrb	r3, [r3, #0]
     cb4:	2b00      	cmp	r3, #0
     cb6:	d111      	bne.n	cdc <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     cb8:	683b      	ldr	r3, [r7, #0]
     cba:	881b      	ldrh	r3, [r3, #0]
     cbc:	0a1b      	lsrs	r3, r3, #8
     cbe:	b29b      	uxth	r3, r3
     cc0:	2278      	movs	r2, #120	; 0x78
     cc2:	4313      	orrs	r3, r2
     cc4:	b29b      	uxth	r3, r3
     cc6:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     cc8:	683b      	ldr	r3, [r7, #0]
     cca:	7a5b      	ldrb	r3, [r3, #9]
     ccc:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     cce:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     cd0:	2201      	movs	r2, #1
     cd2:	4313      	orrs	r3, r2
     cd4:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     cd6:	68fb      	ldr	r3, [r7, #12]
     cd8:	625a      	str	r2, [r3, #36]	; 0x24
     cda:	e00f      	b.n	cfc <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
     cdc:	2317      	movs	r3, #23
     cde:	18fb      	adds	r3, r7, r3
     ce0:	781b      	ldrb	r3, [r3, #0]
     ce2:	e0b6      	b.n	e52 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     ce4:	683b      	ldr	r3, [r7, #0]
     ce6:	881b      	ldrh	r3, [r3, #0]
     ce8:	005b      	lsls	r3, r3, #1
     cea:	2201      	movs	r2, #1
     cec:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     cee:	683b      	ldr	r3, [r7, #0]
     cf0:	7a5b      	ldrb	r3, [r3, #9]
     cf2:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     cf4:	4313      	orrs	r3, r2
     cf6:	001a      	movs	r2, r3
     cf8:	68fb      	ldr	r3, [r7, #12]
     cfa:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     cfc:	2317      	movs	r3, #23
     cfe:	18fc      	adds	r4, r7, r3
     d00:	687b      	ldr	r3, [r7, #4]
     d02:	0018      	movs	r0, r3
     d04:	4b57      	ldr	r3, [pc, #348]	; (e64 <_i2c_master_read_packet+0x268>)
     d06:	4798      	blx	r3
     d08:	0003      	movs	r3, r0
     d0a:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     d0c:	230b      	movs	r3, #11
     d0e:	18fb      	adds	r3, r7, r3
     d10:	781b      	ldrb	r3, [r3, #0]
     d12:	2b00      	cmp	r3, #0
     d14:	d00b      	beq.n	d2e <_i2c_master_read_packet+0x132>
     d16:	683b      	ldr	r3, [r7, #0]
     d18:	885b      	ldrh	r3, [r3, #2]
     d1a:	2b01      	cmp	r3, #1
     d1c:	d107      	bne.n	d2e <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     d1e:	68fb      	ldr	r3, [r7, #12]
     d20:	685b      	ldr	r3, [r3, #4]
     d22:	2280      	movs	r2, #128	; 0x80
     d24:	02d2      	lsls	r2, r2, #11
     d26:	431a      	orrs	r2, r3
     d28:	68fb      	ldr	r3, [r7, #12]
     d2a:	605a      	str	r2, [r3, #4]
     d2c:	e005      	b.n	d3a <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     d2e:	68fb      	ldr	r3, [r7, #12]
     d30:	685b      	ldr	r3, [r3, #4]
     d32:	4a4b      	ldr	r2, [pc, #300]	; (e60 <_i2c_master_read_packet+0x264>)
     d34:	401a      	ands	r2, r3
     d36:	68fb      	ldr	r3, [r7, #12]
     d38:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     d3a:	2317      	movs	r3, #23
     d3c:	18fb      	adds	r3, r7, r3
     d3e:	781b      	ldrb	r3, [r3, #0]
     d40:	2b00      	cmp	r3, #0
     d42:	d107      	bne.n	d54 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
     d44:	2317      	movs	r3, #23
     d46:	18fc      	adds	r4, r7, r3
     d48:	687b      	ldr	r3, [r7, #4]
     d4a:	0018      	movs	r0, r3
     d4c:	4b46      	ldr	r3, [pc, #280]	; (e68 <_i2c_master_read_packet+0x26c>)
     d4e:	4798      	blx	r3
     d50:	0003      	movs	r3, r0
     d52:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     d54:	2317      	movs	r3, #23
     d56:	18fb      	adds	r3, r7, r3
     d58:	781b      	ldrb	r3, [r3, #0]
     d5a:	2b00      	cmp	r3, #0
     d5c:	d000      	beq.n	d60 <_i2c_master_read_packet+0x164>
     d5e:	e075      	b.n	e4c <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
     d60:	e04b      	b.n	dfa <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     d62:	68fb      	ldr	r3, [r7, #12]
     d64:	8b5b      	ldrh	r3, [r3, #26]
     d66:	b29b      	uxth	r3, r3
     d68:	001a      	movs	r2, r3
     d6a:	2320      	movs	r3, #32
     d6c:	4013      	ands	r3, r2
     d6e:	d101      	bne.n	d74 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
     d70:	2341      	movs	r3, #65	; 0x41
     d72:	e06e      	b.n	e52 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     d74:	687b      	ldr	r3, [r7, #4]
     d76:	7adb      	ldrb	r3, [r3, #11]
     d78:	2b00      	cmp	r3, #0
     d7a:	d01e      	beq.n	dba <_i2c_master_read_packet+0x1be>
     d7c:	230b      	movs	r3, #11
     d7e:	18fb      	adds	r3, r7, r3
     d80:	781b      	ldrb	r3, [r3, #0]
     d82:	2201      	movs	r2, #1
     d84:	4053      	eors	r3, r2
     d86:	b2db      	uxtb	r3, r3
     d88:	2b00      	cmp	r3, #0
     d8a:	d004      	beq.n	d96 <_i2c_master_read_packet+0x19a>
     d8c:	2314      	movs	r3, #20
     d8e:	18fb      	adds	r3, r7, r3
     d90:	881b      	ldrh	r3, [r3, #0]
     d92:	2b00      	cmp	r3, #0
     d94:	d009      	beq.n	daa <_i2c_master_read_packet+0x1ae>
     d96:	230b      	movs	r3, #11
     d98:	18fb      	adds	r3, r7, r3
     d9a:	781b      	ldrb	r3, [r3, #0]
     d9c:	2b00      	cmp	r3, #0
     d9e:	d00c      	beq.n	dba <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     da0:	2314      	movs	r3, #20
     da2:	18fb      	adds	r3, r7, r3
     da4:	881b      	ldrh	r3, [r3, #0]
     da6:	2b01      	cmp	r3, #1
     da8:	d107      	bne.n	dba <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     daa:	68fb      	ldr	r3, [r7, #12]
     dac:	685b      	ldr	r3, [r3, #4]
     dae:	2280      	movs	r2, #128	; 0x80
     db0:	02d2      	lsls	r2, r2, #11
     db2:	431a      	orrs	r2, r3
     db4:	68fb      	ldr	r3, [r7, #12]
     db6:	605a      	str	r2, [r3, #4]
     db8:	e01a      	b.n	df0 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
     dba:	687b      	ldr	r3, [r7, #4]
     dbc:	0018      	movs	r0, r3
     dbe:	4b2b      	ldr	r3, [pc, #172]	; (e6c <_i2c_master_read_packet+0x270>)
     dc0:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     dc2:	683b      	ldr	r3, [r7, #0]
     dc4:	685a      	ldr	r2, [r3, #4]
     dc6:	2312      	movs	r3, #18
     dc8:	18fb      	adds	r3, r7, r3
     dca:	881b      	ldrh	r3, [r3, #0]
     dcc:	2112      	movs	r1, #18
     dce:	1879      	adds	r1, r7, r1
     dd0:	1c58      	adds	r0, r3, #1
     dd2:	8008      	strh	r0, [r1, #0]
     dd4:	18d3      	adds	r3, r2, r3
     dd6:	68fa      	ldr	r2, [r7, #12]
     dd8:	2128      	movs	r1, #40	; 0x28
     dda:	5c52      	ldrb	r2, [r2, r1]
     ddc:	b2d2      	uxtb	r2, r2
     dde:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     de0:	2317      	movs	r3, #23
     de2:	18fc      	adds	r4, r7, r3
     de4:	687b      	ldr	r3, [r7, #4]
     de6:	0018      	movs	r0, r3
     de8:	4b1e      	ldr	r3, [pc, #120]	; (e64 <_i2c_master_read_packet+0x268>)
     dea:	4798      	blx	r3
     dec:	0003      	movs	r3, r0
     dee:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     df0:	2317      	movs	r3, #23
     df2:	18fb      	adds	r3, r7, r3
     df4:	781b      	ldrb	r3, [r3, #0]
     df6:	2b00      	cmp	r3, #0
     df8:	d109      	bne.n	e0e <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
     dfa:	2314      	movs	r3, #20
     dfc:	18fb      	adds	r3, r7, r3
     dfe:	881b      	ldrh	r3, [r3, #0]
     e00:	2214      	movs	r2, #20
     e02:	18ba      	adds	r2, r7, r2
     e04:	1e59      	subs	r1, r3, #1
     e06:	8011      	strh	r1, [r2, #0]
     e08:	2b00      	cmp	r3, #0
     e0a:	d1aa      	bne.n	d62 <_i2c_master_read_packet+0x166>
     e0c:	e000      	b.n	e10 <_i2c_master_read_packet+0x214>
				break;
     e0e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
     e10:	687b      	ldr	r3, [r7, #4]
     e12:	7a9b      	ldrb	r3, [r3, #10]
     e14:	2b00      	cmp	r3, #0
     e16:	d00a      	beq.n	e2e <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
     e18:	687b      	ldr	r3, [r7, #4]
     e1a:	0018      	movs	r0, r3
     e1c:	4b13      	ldr	r3, [pc, #76]	; (e6c <_i2c_master_read_packet+0x270>)
     e1e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e20:	68fb      	ldr	r3, [r7, #12]
     e22:	685b      	ldr	r3, [r3, #4]
     e24:	22c0      	movs	r2, #192	; 0xc0
     e26:	0292      	lsls	r2, r2, #10
     e28:	431a      	orrs	r2, r3
     e2a:	68fb      	ldr	r3, [r7, #12]
     e2c:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	0018      	movs	r0, r3
     e32:	4b0e      	ldr	r3, [pc, #56]	; (e6c <_i2c_master_read_packet+0x270>)
     e34:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     e36:	683b      	ldr	r3, [r7, #0]
     e38:	685a      	ldr	r2, [r3, #4]
     e3a:	2312      	movs	r3, #18
     e3c:	18fb      	adds	r3, r7, r3
     e3e:	881b      	ldrh	r3, [r3, #0]
     e40:	18d3      	adds	r3, r2, r3
     e42:	68fa      	ldr	r2, [r7, #12]
     e44:	2128      	movs	r1, #40	; 0x28
     e46:	5c52      	ldrb	r2, [r2, r1]
     e48:	b2d2      	uxtb	r2, r2
     e4a:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
     e4c:	2317      	movs	r3, #23
     e4e:	18fb      	adds	r3, r7, r3
     e50:	781b      	ldrb	r3, [r3, #0]
}
     e52:	0018      	movs	r0, r3
     e54:	46bd      	mov	sp, r7
     e56:	b007      	add	sp, #28
     e58:	bd90      	pop	{r4, r7, pc}
     e5a:	46c0      	nop			; (mov r8, r8)
     e5c:	00000ba9 	.word	0x00000ba9
     e60:	fffbffff 	.word	0xfffbffff
     e64:	00000b4b 	.word	0x00000b4b
     e68:	00000aed 	.word	0x00000aed
     e6c:	00000ac9 	.word	0x00000ac9

00000e70 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     e70:	b580      	push	{r7, lr}
     e72:	b082      	sub	sp, #8
     e74:	af00      	add	r7, sp, #0
     e76:	6078      	str	r0, [r7, #4]
     e78:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     e7a:	687b      	ldr	r3, [r7, #4]
     e7c:	2201      	movs	r2, #1
     e7e:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     e80:	687b      	ldr	r3, [r7, #4]
     e82:	2201      	movs	r2, #1
     e84:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
     e86:	683a      	ldr	r2, [r7, #0]
     e88:	687b      	ldr	r3, [r7, #4]
     e8a:	0011      	movs	r1, r2
     e8c:	0018      	movs	r0, r3
     e8e:	4b03      	ldr	r3, [pc, #12]	; (e9c <i2c_master_read_packet_wait+0x2c>)
     e90:	4798      	blx	r3
     e92:	0003      	movs	r3, r0
}
     e94:	0018      	movs	r0, r3
     e96:	46bd      	mov	sp, r7
     e98:	b002      	add	sp, #8
     e9a:	bd80      	pop	{r7, pc}
     e9c:	00000bfd 	.word	0x00000bfd

00000ea0 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     ea0:	b590      	push	{r4, r7, lr}
     ea2:	b087      	sub	sp, #28
     ea4:	af00      	add	r7, sp, #0
     ea6:	6078      	str	r0, [r7, #4]
     ea8:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     eaa:	687b      	ldr	r3, [r7, #4]
     eac:	681b      	ldr	r3, [r3, #0]
     eae:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     eb0:	2314      	movs	r3, #20
     eb2:	18fb      	adds	r3, r7, r3
     eb4:	683a      	ldr	r2, [r7, #0]
     eb6:	8852      	ldrh	r2, [r2, #2]
     eb8:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
     eba:	687b      	ldr	r3, [r7, #4]
     ebc:	0018      	movs	r0, r3
     ebe:	4b51      	ldr	r3, [pc, #324]	; (1004 <_i2c_master_write_packet+0x164>)
     ec0:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     ec2:	683b      	ldr	r3, [r7, #0]
     ec4:	7a5b      	ldrb	r3, [r3, #9]
     ec6:	2b00      	cmp	r3, #0
     ec8:	d006      	beq.n	ed8 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     eca:	683b      	ldr	r3, [r7, #0]
     ecc:	7a9a      	ldrb	r2, [r3, #10]
     ece:	687b      	ldr	r3, [r7, #4]
     ed0:	0011      	movs	r1, r2
     ed2:	0018      	movs	r0, r3
     ed4:	4b4c      	ldr	r3, [pc, #304]	; (1008 <_i2c_master_write_packet+0x168>)
     ed6:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     ed8:	68fb      	ldr	r3, [r7, #12]
     eda:	685b      	ldr	r3, [r3, #4]
     edc:	4a4b      	ldr	r2, [pc, #300]	; (100c <_i2c_master_write_packet+0x16c>)
     ede:	401a      	ands	r2, r3
     ee0:	68fb      	ldr	r3, [r7, #12]
     ee2:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     ee4:	683b      	ldr	r3, [r7, #0]
     ee6:	7a1b      	ldrb	r3, [r3, #8]
     ee8:	2b00      	cmp	r3, #0
     eea:	d00d      	beq.n	f08 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     eec:	683b      	ldr	r3, [r7, #0]
     eee:	881b      	ldrh	r3, [r3, #0]
     ef0:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     ef2:	683b      	ldr	r3, [r7, #0]
     ef4:	7a5b      	ldrb	r3, [r3, #9]
     ef6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     ef8:	4313      	orrs	r3, r2
     efa:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     efc:	2380      	movs	r3, #128	; 0x80
     efe:	021b      	lsls	r3, r3, #8
     f00:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     f02:	68fb      	ldr	r3, [r7, #12]
     f04:	625a      	str	r2, [r3, #36]	; 0x24
     f06:	e009      	b.n	f1c <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     f08:	683b      	ldr	r3, [r7, #0]
     f0a:	881b      	ldrh	r3, [r3, #0]
     f0c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     f0e:	683b      	ldr	r3, [r7, #0]
     f10:	7a5b      	ldrb	r3, [r3, #9]
     f12:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     f14:	4313      	orrs	r3, r2
     f16:	001a      	movs	r2, r3
     f18:	68fb      	ldr	r3, [r7, #12]
     f1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     f1c:	2317      	movs	r3, #23
     f1e:	18fc      	adds	r4, r7, r3
     f20:	687b      	ldr	r3, [r7, #4]
     f22:	0018      	movs	r0, r3
     f24:	4b3a      	ldr	r3, [pc, #232]	; (1010 <_i2c_master_write_packet+0x170>)
     f26:	4798      	blx	r3
     f28:	0003      	movs	r3, r0
     f2a:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     f2c:	2317      	movs	r3, #23
     f2e:	18fb      	adds	r3, r7, r3
     f30:	781b      	ldrb	r3, [r3, #0]
     f32:	2b00      	cmp	r3, #0
     f34:	d107      	bne.n	f46 <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
     f36:	2317      	movs	r3, #23
     f38:	18fc      	adds	r4, r7, r3
     f3a:	687b      	ldr	r3, [r7, #4]
     f3c:	0018      	movs	r0, r3
     f3e:	4b35      	ldr	r3, [pc, #212]	; (1014 <_i2c_master_write_packet+0x174>)
     f40:	4798      	blx	r3
     f42:	0003      	movs	r3, r0
     f44:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     f46:	2317      	movs	r3, #23
     f48:	18fb      	adds	r3, r7, r3
     f4a:	781b      	ldrb	r3, [r3, #0]
     f4c:	2b00      	cmp	r3, #0
     f4e:	d152      	bne.n	ff6 <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
     f50:	2312      	movs	r3, #18
     f52:	18fb      	adds	r3, r7, r3
     f54:	2200      	movs	r2, #0
     f56:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
     f58:	e033      	b.n	fc2 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     f5a:	68fb      	ldr	r3, [r7, #12]
     f5c:	8b5b      	ldrh	r3, [r3, #26]
     f5e:	b29b      	uxth	r3, r3
     f60:	001a      	movs	r2, r3
     f62:	2320      	movs	r3, #32
     f64:	4013      	ands	r3, r2
     f66:	d101      	bne.n	f6c <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
     f68:	2341      	movs	r3, #65	; 0x41
     f6a:	e047      	b.n	ffc <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     f6c:	687b      	ldr	r3, [r7, #4]
     f6e:	0018      	movs	r0, r3
     f70:	4b24      	ldr	r3, [pc, #144]	; (1004 <_i2c_master_write_packet+0x164>)
     f72:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     f74:	683b      	ldr	r3, [r7, #0]
     f76:	685a      	ldr	r2, [r3, #4]
     f78:	2312      	movs	r3, #18
     f7a:	18fb      	adds	r3, r7, r3
     f7c:	881b      	ldrh	r3, [r3, #0]
     f7e:	2112      	movs	r1, #18
     f80:	1879      	adds	r1, r7, r1
     f82:	1c58      	adds	r0, r3, #1
     f84:	8008      	strh	r0, [r1, #0]
     f86:	18d3      	adds	r3, r2, r3
     f88:	7819      	ldrb	r1, [r3, #0]
     f8a:	68fb      	ldr	r3, [r7, #12]
     f8c:	2228      	movs	r2, #40	; 0x28
     f8e:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     f90:	2317      	movs	r3, #23
     f92:	18fc      	adds	r4, r7, r3
     f94:	687b      	ldr	r3, [r7, #4]
     f96:	0018      	movs	r0, r3
     f98:	4b1d      	ldr	r3, [pc, #116]	; (1010 <_i2c_master_write_packet+0x170>)
     f9a:	4798      	blx	r3
     f9c:	0003      	movs	r3, r0
     f9e:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     fa0:	2317      	movs	r3, #23
     fa2:	18fb      	adds	r3, r7, r3
     fa4:	781b      	ldrb	r3, [r3, #0]
     fa6:	2b00      	cmp	r3, #0
     fa8:	d115      	bne.n	fd6 <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     faa:	68fb      	ldr	r3, [r7, #12]
     fac:	8b5b      	ldrh	r3, [r3, #26]
     fae:	b29b      	uxth	r3, r3
     fb0:	001a      	movs	r2, r3
     fb2:	2304      	movs	r3, #4
     fb4:	4013      	ands	r3, r2
     fb6:	d004      	beq.n	fc2 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     fb8:	2317      	movs	r3, #23
     fba:	18fb      	adds	r3, r7, r3
     fbc:	221e      	movs	r2, #30
     fbe:	701a      	strb	r2, [r3, #0]
				break;
     fc0:	e00a      	b.n	fd8 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
     fc2:	2314      	movs	r3, #20
     fc4:	18fb      	adds	r3, r7, r3
     fc6:	881b      	ldrh	r3, [r3, #0]
     fc8:	2214      	movs	r2, #20
     fca:	18ba      	adds	r2, r7, r2
     fcc:	1e59      	subs	r1, r3, #1
     fce:	8011      	strh	r1, [r2, #0]
     fd0:	2b00      	cmp	r3, #0
     fd2:	d1c2      	bne.n	f5a <_i2c_master_write_packet+0xba>
     fd4:	e000      	b.n	fd8 <_i2c_master_write_packet+0x138>
				break;
     fd6:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
     fd8:	687b      	ldr	r3, [r7, #4]
     fda:	7a9b      	ldrb	r3, [r3, #10]
     fdc:	2b00      	cmp	r3, #0
     fde:	d00a      	beq.n	ff6 <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     fe0:	687b      	ldr	r3, [r7, #4]
     fe2:	0018      	movs	r0, r3
     fe4:	4b07      	ldr	r3, [pc, #28]	; (1004 <_i2c_master_write_packet+0x164>)
     fe6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     fe8:	68fb      	ldr	r3, [r7, #12]
     fea:	685b      	ldr	r3, [r3, #4]
     fec:	22c0      	movs	r2, #192	; 0xc0
     fee:	0292      	lsls	r2, r2, #10
     ff0:	431a      	orrs	r2, r3
     ff2:	68fb      	ldr	r3, [r7, #12]
     ff4:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
     ff6:	2317      	movs	r3, #23
     ff8:	18fb      	adds	r3, r7, r3
     ffa:	781b      	ldrb	r3, [r3, #0]
}
     ffc:	0018      	movs	r0, r3
     ffe:	46bd      	mov	sp, r7
    1000:	b007      	add	sp, #28
    1002:	bd90      	pop	{r4, r7, pc}
    1004:	00000ac9 	.word	0x00000ac9
    1008:	00000ba9 	.word	0x00000ba9
    100c:	fffbffff 	.word	0xfffbffff
    1010:	00000b4b 	.word	0x00000b4b
    1014:	00000aed 	.word	0x00000aed

00001018 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1018:	b580      	push	{r7, lr}
    101a:	b082      	sub	sp, #8
    101c:	af00      	add	r7, sp, #0
    101e:	6078      	str	r0, [r7, #4]
    1020:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    1022:	687b      	ldr	r3, [r7, #4]
    1024:	2201      	movs	r2, #1
    1026:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1028:	687b      	ldr	r3, [r7, #4]
    102a:	2201      	movs	r2, #1
    102c:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    102e:	683a      	ldr	r2, [r7, #0]
    1030:	687b      	ldr	r3, [r7, #4]
    1032:	0011      	movs	r1, r2
    1034:	0018      	movs	r0, r3
    1036:	4b03      	ldr	r3, [pc, #12]	; (1044 <i2c_master_write_packet_wait+0x2c>)
    1038:	4798      	blx	r3
    103a:	0003      	movs	r3, r0
}
    103c:	0018      	movs	r0, r3
    103e:	46bd      	mov	sp, r7
    1040:	b002      	add	sp, #8
    1042:	bd80      	pop	{r7, pc}
    1044:	00000ea1 	.word	0x00000ea1

00001048 <system_apb_clock_set_mask>:
{
    1048:	b580      	push	{r7, lr}
    104a:	b082      	sub	sp, #8
    104c:	af00      	add	r7, sp, #0
    104e:	0002      	movs	r2, r0
    1050:	6039      	str	r1, [r7, #0]
    1052:	1dfb      	adds	r3, r7, #7
    1054:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1056:	1dfb      	adds	r3, r7, #7
    1058:	781b      	ldrb	r3, [r3, #0]
    105a:	2b01      	cmp	r3, #1
    105c:	d00a      	beq.n	1074 <system_apb_clock_set_mask+0x2c>
    105e:	2b02      	cmp	r3, #2
    1060:	d00f      	beq.n	1082 <system_apb_clock_set_mask+0x3a>
    1062:	2b00      	cmp	r3, #0
    1064:	d114      	bne.n	1090 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1066:	4b0e      	ldr	r3, [pc, #56]	; (10a0 <system_apb_clock_set_mask+0x58>)
    1068:	4a0d      	ldr	r2, [pc, #52]	; (10a0 <system_apb_clock_set_mask+0x58>)
    106a:	6991      	ldr	r1, [r2, #24]
    106c:	683a      	ldr	r2, [r7, #0]
    106e:	430a      	orrs	r2, r1
    1070:	619a      	str	r2, [r3, #24]
			break;
    1072:	e00f      	b.n	1094 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1074:	4b0a      	ldr	r3, [pc, #40]	; (10a0 <system_apb_clock_set_mask+0x58>)
    1076:	4a0a      	ldr	r2, [pc, #40]	; (10a0 <system_apb_clock_set_mask+0x58>)
    1078:	69d1      	ldr	r1, [r2, #28]
    107a:	683a      	ldr	r2, [r7, #0]
    107c:	430a      	orrs	r2, r1
    107e:	61da      	str	r2, [r3, #28]
			break;
    1080:	e008      	b.n	1094 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    1082:	4b07      	ldr	r3, [pc, #28]	; (10a0 <system_apb_clock_set_mask+0x58>)
    1084:	4a06      	ldr	r2, [pc, #24]	; (10a0 <system_apb_clock_set_mask+0x58>)
    1086:	6a11      	ldr	r1, [r2, #32]
    1088:	683a      	ldr	r2, [r7, #0]
    108a:	430a      	orrs	r2, r1
    108c:	621a      	str	r2, [r3, #32]
			break;
    108e:	e001      	b.n	1094 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1090:	2317      	movs	r3, #23
    1092:	e000      	b.n	1096 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1094:	2300      	movs	r3, #0
}
    1096:	0018      	movs	r0, r3
    1098:	46bd      	mov	sp, r7
    109a:	b002      	add	sp, #8
    109c:	bd80      	pop	{r7, pc}
    109e:	46c0      	nop			; (mov r8, r8)
    10a0:	40000400 	.word	0x40000400

000010a4 <wdt_is_syncing>:
{
    10a4:	b580      	push	{r7, lr}
    10a6:	b082      	sub	sp, #8
    10a8:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    10aa:	4b07      	ldr	r3, [pc, #28]	; (10c8 <wdt_is_syncing+0x24>)
    10ac:	607b      	str	r3, [r7, #4]
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    10ae:	687b      	ldr	r3, [r7, #4]
    10b0:	79db      	ldrb	r3, [r3, #7]
    10b2:	b2db      	uxtb	r3, r3
    10b4:	b25b      	sxtb	r3, r3
    10b6:	2b00      	cmp	r3, #0
    10b8:	da01      	bge.n	10be <wdt_is_syncing+0x1a>
		return true;
    10ba:	2301      	movs	r3, #1
    10bc:	e000      	b.n	10c0 <wdt_is_syncing+0x1c>
	return false;
    10be:	2300      	movs	r3, #0
}
    10c0:	0018      	movs	r0, r3
    10c2:	46bd      	mov	sp, r7
    10c4:	b002      	add	sp, #8
    10c6:	bd80      	pop	{r7, pc}
    10c8:	40001000 	.word	0x40001000

000010cc <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
    10cc:	b580      	push	{r7, lr}
    10ce:	b082      	sub	sp, #8
    10d0:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    10d2:	4b07      	ldr	r3, [pc, #28]	; (10f0 <wdt_is_locked+0x24>)
    10d4:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    10d6:	687b      	ldr	r3, [r7, #4]
    10d8:	781b      	ldrb	r3, [r3, #0]
    10da:	b2db      	uxtb	r3, r3
    10dc:	001a      	movs	r2, r3
    10de:	2380      	movs	r3, #128	; 0x80
    10e0:	4013      	ands	r3, r2
    10e2:	1e5a      	subs	r2, r3, #1
    10e4:	4193      	sbcs	r3, r2
    10e6:	b2db      	uxtb	r3, r3
#endif
}
    10e8:	0018      	movs	r0, r3
    10ea:	46bd      	mov	sp, r7
    10ec:	b002      	add	sp, #8
    10ee:	bd80      	pop	{r7, pc}
    10f0:	40001000 	.word	0x40001000

000010f4 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    10f4:	b580      	push	{r7, lr}
    10f6:	b086      	sub	sp, #24
    10f8:	af00      	add	r7, sp, #0
    10fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
    10fc:	4b54      	ldr	r3, [pc, #336]	; (1250 <wdt_set_config+0x15c>)
    10fe:	613b      	str	r3, [r7, #16]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);
    1100:	2110      	movs	r1, #16
    1102:	2000      	movs	r0, #0
    1104:	4b53      	ldr	r3, [pc, #332]	; (1254 <wdt_set_config+0x160>)
    1106:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    1108:	4b53      	ldr	r3, [pc, #332]	; (1258 <wdt_set_config+0x164>)
    110a:	4798      	blx	r3
    110c:	1e03      	subs	r3, r0, #0
    110e:	d001      	beq.n	1114 <wdt_set_config+0x20>
		return STATUS_ERR_IO;
    1110:	2310      	movs	r3, #16
    1112:	e098      	b.n	1246 <wdt_set_config+0x152>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    1114:	687b      	ldr	r3, [r7, #4]
    1116:	78db      	ldrb	r3, [r3, #3]
    1118:	2b00      	cmp	r3, #0
    111a:	d101      	bne.n	1120 <wdt_set_config+0x2c>
		return STATUS_ERR_INVALID_ARG;
    111c:	2317      	movs	r3, #23
    111e:	e092      	b.n	1246 <wdt_set_config+0x152>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    1120:	687b      	ldr	r3, [r7, #4]
    1122:	78da      	ldrb	r2, [r3, #3]
    1124:	687b      	ldr	r3, [r7, #4]
    1126:	791b      	ldrb	r3, [r3, #4]
    1128:	429a      	cmp	r2, r3
    112a:	d305      	bcc.n	1138 <wdt_set_config+0x44>
			(config->timeout_period < config->early_warning_period)) {
    112c:	687b      	ldr	r3, [r7, #4]
    112e:	78da      	ldrb	r2, [r3, #3]
    1130:	687b      	ldr	r3, [r7, #4]
    1132:	795b      	ldrb	r3, [r3, #5]
	if ((config->timeout_period < config->window_period) ||
    1134:	429a      	cmp	r2, r3
    1136:	d201      	bcs.n	113c <wdt_set_config+0x48>
		return STATUS_ERR_INVALID_ARG;
    1138:	2317      	movs	r3, #23
    113a:	e084      	b.n	1246 <wdt_set_config+0x152>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    113c:	693b      	ldr	r3, [r7, #16]
    113e:	781b      	ldrb	r3, [r3, #0]
    1140:	b2db      	uxtb	r3, r3
    1142:	2202      	movs	r2, #2
    1144:	4393      	bics	r3, r2
    1146:	b2da      	uxtb	r2, r3
    1148:	693b      	ldr	r3, [r7, #16]
    114a:	701a      	strb	r2, [r3, #0]

	while (wdt_is_syncing()) {
    114c:	46c0      	nop			; (mov r8, r8)
    114e:	4b43      	ldr	r3, [pc, #268]	; (125c <wdt_set_config+0x168>)
    1150:	4798      	blx	r3
    1152:	1e03      	subs	r3, r0, #0
    1154:	d1fb      	bne.n	114e <wdt_set_config+0x5a>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
    1156:	687b      	ldr	r3, [r7, #4]
    1158:	785b      	ldrb	r3, [r3, #1]
    115a:	2201      	movs	r2, #1
    115c:	4053      	eors	r3, r2
    115e:	b2db      	uxtb	r3, r3
    1160:	2b00      	cmp	r3, #0
    1162:	d001      	beq.n	1168 <wdt_set_config+0x74>
		return STATUS_OK;
    1164:	2300      	movs	r3, #0
    1166:	e06e      	b.n	1246 <wdt_set_config+0x152>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
    1168:	687b      	ldr	r3, [r7, #4]
    116a:	789a      	ldrb	r2, [r3, #2]
    116c:	230c      	movs	r3, #12
    116e:	18fb      	adds	r3, r7, r3
    1170:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    1172:	230c      	movs	r3, #12
    1174:	18fb      	adds	r3, r7, r3
    1176:	0019      	movs	r1, r3
    1178:	2003      	movs	r0, #3
    117a:	4b39      	ldr	r3, [pc, #228]	; (1260 <wdt_set_config+0x16c>)
    117c:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    117e:	2003      	movs	r0, #3
    1180:	4b38      	ldr	r3, [pc, #224]	; (1264 <wdt_set_config+0x170>)
    1182:	4798      	blx	r3
	if (config->always_on) {
    1184:	687b      	ldr	r3, [r7, #4]
    1186:	781b      	ldrb	r3, [r3, #0]
    1188:	2b00      	cmp	r3, #0
    118a:	d002      	beq.n	1192 <wdt_set_config+0x9e>
		system_gclk_chan_lock(WDT_GCLK_ID);
    118c:	2003      	movs	r0, #3
    118e:	4b36      	ldr	r3, [pc, #216]	; (1268 <wdt_set_config+0x174>)
    1190:	4798      	blx	r3
	}

	uint32_t new_config = 0;
    1192:	2300      	movs	r3, #0
    1194:	617b      	str	r3, [r7, #20]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    1196:	687b      	ldr	r3, [r7, #4]
    1198:	78db      	ldrb	r3, [r3, #3]
    119a:	3b01      	subs	r3, #1
    119c:	001a      	movs	r2, r3
    119e:	697b      	ldr	r3, [r7, #20]
    11a0:	4313      	orrs	r3, r2
    11a2:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
    11a4:	687b      	ldr	r3, [r7, #4]
    11a6:	791b      	ldrb	r3, [r3, #4]
    11a8:	2b00      	cmp	r3, #0
    11aa:	d010      	beq.n	11ce <wdt_set_config+0xda>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    11ac:	693b      	ldr	r3, [r7, #16]
    11ae:	781b      	ldrb	r3, [r3, #0]
    11b0:	b2db      	uxtb	r3, r3
    11b2:	2204      	movs	r2, #4
    11b4:	4313      	orrs	r3, r2
    11b6:	b2da      	uxtb	r2, r3
    11b8:	693b      	ldr	r3, [r7, #16]
    11ba:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    11bc:	687b      	ldr	r3, [r7, #4]
    11be:	791b      	ldrb	r3, [r3, #4]
    11c0:	3b01      	subs	r3, #1
    11c2:	011b      	lsls	r3, r3, #4
    11c4:	001a      	movs	r2, r3
    11c6:	697b      	ldr	r3, [r7, #20]
    11c8:	4313      	orrs	r3, r2
    11ca:	617b      	str	r3, [r7, #20]
    11cc:	e007      	b.n	11de <wdt_set_config+0xea>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    11ce:	693b      	ldr	r3, [r7, #16]
    11d0:	781b      	ldrb	r3, [r3, #0]
    11d2:	b2db      	uxtb	r3, r3
    11d4:	2204      	movs	r2, #4
    11d6:	4393      	bics	r3, r2
    11d8:	b2da      	uxtb	r2, r3
    11da:	693b      	ldr	r3, [r7, #16]
    11dc:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	4b1e      	ldr	r3, [pc, #120]	; (125c <wdt_set_config+0x168>)
    11e2:	4798      	blx	r3
    11e4:	1e03      	subs	r3, r0, #0
    11e6:	d1fb      	bne.n	11e0 <wdt_set_config+0xec>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
    11e8:	697b      	ldr	r3, [r7, #20]
    11ea:	b2da      	uxtb	r2, r3
    11ec:	693b      	ldr	r3, [r7, #16]
    11ee:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    11f0:	687b      	ldr	r3, [r7, #4]
    11f2:	795b      	ldrb	r3, [r3, #5]
    11f4:	2b00      	cmp	r3, #0
    11f6:	d00a      	beq.n	120e <wdt_set_config+0x11a>
		while (wdt_is_syncing()) {
    11f8:	46c0      	nop			; (mov r8, r8)
    11fa:	4b18      	ldr	r3, [pc, #96]	; (125c <wdt_set_config+0x168>)
    11fc:	4798      	blx	r3
    11fe:	1e03      	subs	r3, r0, #0
    1200:	d1fb      	bne.n	11fa <wdt_set_config+0x106>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    1202:	687b      	ldr	r3, [r7, #4]
    1204:	795b      	ldrb	r3, [r3, #5]
    1206:	3b01      	subs	r3, #1
    1208:	b2da      	uxtb	r2, r3
    120a:	693b      	ldr	r3, [r7, #16]
    120c:	709a      	strb	r2, [r3, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
    120e:	687b      	ldr	r3, [r7, #4]
    1210:	781b      	ldrb	r3, [r3, #0]
    1212:	2b00      	cmp	r3, #0
    1214:	d009      	beq.n	122a <wdt_set_config+0x136>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    1216:	693b      	ldr	r3, [r7, #16]
    1218:	781b      	ldrb	r3, [r3, #0]
    121a:	b2db      	uxtb	r3, r3
    121c:	2280      	movs	r2, #128	; 0x80
    121e:	4252      	negs	r2, r2
    1220:	4313      	orrs	r3, r2
    1222:	b2da      	uxtb	r2, r3
    1224:	693b      	ldr	r3, [r7, #16]
    1226:	701a      	strb	r2, [r3, #0]
    1228:	e007      	b.n	123a <wdt_set_config+0x146>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    122a:	693b      	ldr	r3, [r7, #16]
    122c:	781b      	ldrb	r3, [r3, #0]
    122e:	b2db      	uxtb	r3, r3
    1230:	2202      	movs	r2, #2
    1232:	4313      	orrs	r3, r2
    1234:	b2da      	uxtb	r2, r3
    1236:	693b      	ldr	r3, [r7, #16]
    1238:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	4b07      	ldr	r3, [pc, #28]	; (125c <wdt_set_config+0x168>)
    123e:	4798      	blx	r3
    1240:	1e03      	subs	r3, r0, #0
    1242:	d1fb      	bne.n	123c <wdt_set_config+0x148>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
    1244:	2300      	movs	r3, #0
}
    1246:	0018      	movs	r0, r3
    1248:	46bd      	mov	sp, r7
    124a:	b006      	add	sp, #24
    124c:	bd80      	pop	{r7, pc}
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	40001000 	.word	0x40001000
    1254:	00001049 	.word	0x00001049
    1258:	000010cd 	.word	0x000010cd
    125c:	000010a5 	.word	0x000010a5
    1260:	00004be5 	.word	0x00004be5
    1264:	00004c29 	.word	0x00004c29
    1268:	00004d09 	.word	0x00004d09

0000126c <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    126c:	b580      	push	{r7, lr}
    126e:	b082      	sub	sp, #8
    1270:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1272:	4b04      	ldr	r3, [pc, #16]	; (1284 <wdt_clear_early_warning+0x18>)
    1274:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    1276:	687b      	ldr	r3, [r7, #4]
    1278:	2201      	movs	r2, #1
    127a:	719a      	strb	r2, [r3, #6]
}
    127c:	46c0      	nop			; (mov r8, r8)
    127e:	46bd      	mov	sp, r7
    1280:	b002      	add	sp, #8
    1282:	bd80      	pop	{r7, pc}
    1284:	40001000 	.word	0x40001000

00001288 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    1288:	b580      	push	{r7, lr}
    128a:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    128c:	4b05      	ldr	r3, [pc, #20]	; (12a4 <WDT_Handler+0x1c>)
    128e:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    1290:	4b05      	ldr	r3, [pc, #20]	; (12a8 <WDT_Handler+0x20>)
    1292:	681b      	ldr	r3, [r3, #0]
    1294:	2b00      	cmp	r3, #0
    1296:	d002      	beq.n	129e <WDT_Handler+0x16>
		wdt_early_warning_callback();
    1298:	4b03      	ldr	r3, [pc, #12]	; (12a8 <WDT_Handler+0x20>)
    129a:	681b      	ldr	r3, [r3, #0]
    129c:	4798      	blx	r3
	}
}
    129e:	46c0      	nop			; (mov r8, r8)
    12a0:	46bd      	mov	sp, r7
    12a2:	bd80      	pop	{r7, pc}
    12a4:	0000126d 	.word	0x0000126d
    12a8:	200009f0 	.word	0x200009f0

000012ac <system_interrupt_enable_global>:
{
    12ac:	b580      	push	{r7, lr}
    12ae:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    12b0:	4b04      	ldr	r3, [pc, #16]	; (12c4 <system_interrupt_enable_global+0x18>)
    12b2:	2201      	movs	r2, #1
    12b4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    12b6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    12ba:	b662      	cpsie	i
}
    12bc:	46c0      	nop			; (mov r8, r8)
    12be:	46bd      	mov	sp, r7
    12c0:	bd80      	pop	{r7, pc}
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	20000368 	.word	0x20000368

000012c8 <system_interrupt_disable_global>:
{
    12c8:	b580      	push	{r7, lr}
    12ca:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    12cc:	b672      	cpsid	i
    12ce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    12d2:	4b03      	ldr	r3, [pc, #12]	; (12e0 <system_interrupt_disable_global+0x18>)
    12d4:	2200      	movs	r2, #0
    12d6:	701a      	strb	r2, [r3, #0]
}
    12d8:	46c0      	nop			; (mov r8, r8)
    12da:	46bd      	mov	sp, r7
    12dc:	bd80      	pop	{r7, pc}
    12de:	46c0      	nop			; (mov r8, r8)
    12e0:	20000368 	.word	0x20000368

000012e4 <ble_uart_write>:
	
	reset_buffers();
}

void ble_uart_write(char buffer[])
{
    12e4:	b580      	push	{r7, lr}
    12e6:	b084      	sub	sp, #16
    12e8:	af00      	add	r7, sp, #0
    12ea:	6078      	str	r0, [r7, #4]
	system_interrupt_disable_global();
    12ec:	4b10      	ldr	r3, [pc, #64]	; (1330 <ble_uart_write+0x4c>)
    12ee:	4798      	blx	r3
	uint32_t i = 0;
    12f0:	2300      	movs	r3, #0
    12f2:	60fb      	str	r3, [r7, #12]
	while(buffer[i] != '\0')
    12f4:	e00f      	b.n	1316 <ble_uart_write+0x32>
	{
		if(BLE_UART_SERCOM->USART.INTFLAG.bit.DRE == 1)
    12f6:	4b0f      	ldr	r3, [pc, #60]	; (1334 <ble_uart_write+0x50>)
    12f8:	7e1b      	ldrb	r3, [r3, #24]
    12fa:	07db      	lsls	r3, r3, #31
    12fc:	0fdb      	lsrs	r3, r3, #31
    12fe:	b2db      	uxtb	r3, r3
    1300:	2b01      	cmp	r3, #1
    1302:	d108      	bne.n	1316 <ble_uart_write+0x32>
		{
			BLE_UART_SERCOM->USART.DATA.reg = (uint16_t)buffer[i++];
    1304:	490b      	ldr	r1, [pc, #44]	; (1334 <ble_uart_write+0x50>)
    1306:	68fb      	ldr	r3, [r7, #12]
    1308:	1c5a      	adds	r2, r3, #1
    130a:	60fa      	str	r2, [r7, #12]
    130c:	687a      	ldr	r2, [r7, #4]
    130e:	18d3      	adds	r3, r2, r3
    1310:	781b      	ldrb	r3, [r3, #0]
    1312:	b29b      	uxth	r3, r3
    1314:	850b      	strh	r3, [r1, #40]	; 0x28
	while(buffer[i] != '\0')
    1316:	687a      	ldr	r2, [r7, #4]
    1318:	68fb      	ldr	r3, [r7, #12]
    131a:	18d3      	adds	r3, r2, r3
    131c:	781b      	ldrb	r3, [r3, #0]
    131e:	2b00      	cmp	r3, #0
    1320:	d1e9      	bne.n	12f6 <ble_uart_write+0x12>
		}
	}
	system_interrupt_enable_global();
    1322:	4b05      	ldr	r3, [pc, #20]	; (1338 <ble_uart_write+0x54>)
    1324:	4798      	blx	r3
}
    1326:	46c0      	nop			; (mov r8, r8)
    1328:	46bd      	mov	sp, r7
    132a:	b004      	add	sp, #16
    132c:	bd80      	pop	{r7, pc}
    132e:	46c0      	nop			; (mov r8, r8)
    1330:	000012c9 	.word	0x000012c9
    1334:	42001000 	.word	0x42001000
    1338:	000012ad 	.word	0x000012ad

0000133c <SERCOM2_Handler>:
	BLE_UART_SERCOM->USART.DATA.reg = data;
}


void SERCOM2_Handler()
{
    133c:	b580      	push	{r7, lr}
    133e:	af00      	add	r7, sp, #0
	if (BLE_UART_SERCOM->USART.INTFLAG.bit.RXC)
    1340:	4b13      	ldr	r3, [pc, #76]	; (1390 <SERCOM2_Handler+0x54>)
    1342:	7e1b      	ldrb	r3, [r3, #24]
    1344:	075b      	lsls	r3, r3, #29
    1346:	0fdb      	lsrs	r3, r3, #31
    1348:	b2db      	uxtb	r3, r3
    134a:	2b00      	cmp	r3, #0
    134c:	d01c      	beq.n	1388 <SERCOM2_Handler+0x4c>
	{
		//while (BLE_UART_SERCOM->USART.INTFLAG.bit.DRE != 0 )
		//{
			// Got a character
			if (buff_count > sizeof(rx_buffer_array)-1)
    134e:	4b11      	ldr	r3, [pc, #68]	; (1394 <SERCOM2_Handler+0x58>)
    1350:	681b      	ldr	r3, [r3, #0]
    1352:	001a      	movs	r2, r3
    1354:	4b10      	ldr	r3, [pc, #64]	; (1398 <SERCOM2_Handler+0x5c>)
    1356:	429a      	cmp	r2, r3
    1358:	d90b      	bls.n	1372 <SERCOM2_Handler+0x36>
			{
				buff_count = 0;
    135a:	4b0e      	ldr	r3, [pc, #56]	; (1394 <SERCOM2_Handler+0x58>)
    135c:	2200      	movs	r2, #0
    135e:	601a      	str	r2, [r3, #0]
				rx_buffer_array[buff_count] = (uint8_t) BLE_UART_SERCOM->USART.DATA.reg;
    1360:	4b0c      	ldr	r3, [pc, #48]	; (1394 <SERCOM2_Handler+0x58>)
    1362:	681b      	ldr	r3, [r3, #0]
    1364:	4a0a      	ldr	r2, [pc, #40]	; (1390 <SERCOM2_Handler+0x54>)
    1366:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    1368:	b292      	uxth	r2, r2
    136a:	b2d1      	uxtb	r1, r2
    136c:	4a0b      	ldr	r2, [pc, #44]	; (139c <SERCOM2_Handler+0x60>)
    136e:	54d1      	strb	r1, [r2, r3]
				rx_buffer_array[buff_count++] = (uint8_t)BLE_UART_SERCOM->USART.DATA.reg;
			}
		//}

	}
}
    1370:	e00a      	b.n	1388 <SERCOM2_Handler+0x4c>
				rx_buffer_array[buff_count++] = (uint8_t)BLE_UART_SERCOM->USART.DATA.reg;
    1372:	4b08      	ldr	r3, [pc, #32]	; (1394 <SERCOM2_Handler+0x58>)
    1374:	681b      	ldr	r3, [r3, #0]
    1376:	1c59      	adds	r1, r3, #1
    1378:	4a06      	ldr	r2, [pc, #24]	; (1394 <SERCOM2_Handler+0x58>)
    137a:	6011      	str	r1, [r2, #0]
    137c:	4a04      	ldr	r2, [pc, #16]	; (1390 <SERCOM2_Handler+0x54>)
    137e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    1380:	b292      	uxth	r2, r2
    1382:	b2d1      	uxtb	r1, r2
    1384:	4a05      	ldr	r2, [pc, #20]	; (139c <SERCOM2_Handler+0x60>)
    1386:	54d1      	strb	r1, [r2, r3]
}
    1388:	46c0      	nop			; (mov r8, r8)
    138a:	46bd      	mov	sp, r7
    138c:	bd80      	pop	{r7, pc}
    138e:	46c0      	nop			; (mov r8, r8)
    1390:	42001000 	.word	0x42001000
    1394:	2000055c 	.word	0x2000055c
    1398:	000003ff 	.word	0x000003ff
    139c:	20000a24 	.word	0x20000a24

000013a0 <reset_buffers>:

void reset_buffers()
{
    13a0:	b580      	push	{r7, lr}
    13a2:	b082      	sub	sp, #8
    13a4:	af00      	add	r7, sp, #0
	for (uint32_t k=0;k<sizeof(rx_buffer_array);k++)
    13a6:	2300      	movs	r3, #0
    13a8:	607b      	str	r3, [r7, #4]
    13aa:	e007      	b.n	13bc <reset_buffers+0x1c>
	{
		rx_buffer_array[k] = 0;
    13ac:	4a09      	ldr	r2, [pc, #36]	; (13d4 <reset_buffers+0x34>)
    13ae:	687b      	ldr	r3, [r7, #4]
    13b0:	18d3      	adds	r3, r2, r3
    13b2:	2200      	movs	r2, #0
    13b4:	701a      	strb	r2, [r3, #0]
	for (uint32_t k=0;k<sizeof(rx_buffer_array);k++)
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	3301      	adds	r3, #1
    13ba:	607b      	str	r3, [r7, #4]
    13bc:	687b      	ldr	r3, [r7, #4]
    13be:	4a06      	ldr	r2, [pc, #24]	; (13d8 <reset_buffers+0x38>)
    13c0:	4293      	cmp	r3, r2
    13c2:	d9f3      	bls.n	13ac <reset_buffers+0xc>
	}
	buff_count = 0;
    13c4:	4b05      	ldr	r3, [pc, #20]	; (13dc <reset_buffers+0x3c>)
    13c6:	2200      	movs	r2, #0
    13c8:	601a      	str	r2, [r3, #0]
}
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	46bd      	mov	sp, r7
    13ce:	b002      	add	sp, #8
    13d0:	bd80      	pop	{r7, pc}
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	20000a24 	.word	0x20000a24
    13d8:	000003ff 	.word	0x000003ff
    13dc:	2000055c 	.word	0x2000055c

000013e0 <system_interrupt_enable_global>:
{
    13e0:	b580      	push	{r7, lr}
    13e2:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    13e4:	4b04      	ldr	r3, [pc, #16]	; (13f8 <system_interrupt_enable_global+0x18>)
    13e6:	2201      	movs	r2, #1
    13e8:	701a      	strb	r2, [r3, #0]
    13ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    13ee:	b662      	cpsie	i
}
    13f0:	46c0      	nop			; (mov r8, r8)
    13f2:	46bd      	mov	sp, r7
    13f4:	bd80      	pop	{r7, pc}
    13f6:	46c0      	nop			; (mov r8, r8)
    13f8:	20000368 	.word	0x20000368

000013fc <system_interrupt_disable_global>:
{
    13fc:	b580      	push	{r7, lr}
    13fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
    1400:	b672      	cpsid	i
    1402:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1406:	4b03      	ldr	r3, [pc, #12]	; (1414 <system_interrupt_disable_global+0x18>)
    1408:	2200      	movs	r2, #0
    140a:	701a      	strb	r2, [r3, #0]
}
    140c:	46c0      	nop			; (mov r8, r8)
    140e:	46bd      	mov	sp, r7
    1410:	bd80      	pop	{r7, pc}
    1412:	46c0      	nop			; (mov r8, r8)
    1414:	20000368 	.word	0x20000368

00001418 <data_handler>:

char bufbuf[1024];
int buf_count = 0; 

void data_handler(char buffer[])
{
    1418:	b5f0      	push	{r4, r5, r6, r7, lr}
    141a:	b09b      	sub	sp, #108	; 0x6c
    141c:	af00      	add	r7, sp, #0
    141e:	60f8      	str	r0, [r7, #12]
	int buf_s = strlen(buffer);
    1420:	68fb      	ldr	r3, [r7, #12]
    1422:	0018      	movs	r0, r3
    1424:	4be8      	ldr	r3, [pc, #928]	; (17c8 <data_handler+0x3b0>)
    1426:	4798      	blx	r3
    1428:	0003      	movs	r3, r0
    142a:	667b      	str	r3, [r7, #100]	; 0x64
	if (strncmp(buffer,"\r\n\rAdafruit",7) == 0)
    142c:	49e7      	ldr	r1, [pc, #924]	; (17cc <data_handler+0x3b4>)
    142e:	68fb      	ldr	r3, [r7, #12]
    1430:	2207      	movs	r2, #7
    1432:	0018      	movs	r0, r3
    1434:	4be6      	ldr	r3, [pc, #920]	; (17d0 <data_handler+0x3b8>)
    1436:	4798      	blx	r3
    1438:	1e03      	subs	r3, r0, #0
    143a:	d103      	bne.n	1444 <data_handler+0x2c>
	{
		ble_uart_write("#01\n");
    143c:	4be5      	ldr	r3, [pc, #916]	; (17d4 <data_handler+0x3bc>)
    143e:	0018      	movs	r0, r3
    1440:	4be5      	ldr	r3, [pc, #916]	; (17d8 <data_handler+0x3c0>)
    1442:	4798      	blx	r3
	}
	if (strncmp(buffer,"T00",3) == 0)
    1444:	49e5      	ldr	r1, [pc, #916]	; (17dc <data_handler+0x3c4>)
    1446:	68fb      	ldr	r3, [r7, #12]
    1448:	2203      	movs	r2, #3
    144a:	0018      	movs	r0, r3
    144c:	4be0      	ldr	r3, [pc, #896]	; (17d0 <data_handler+0x3b8>)
    144e:	4798      	blx	r3
    1450:	1e03      	subs	r3, r0, #0
    1452:	d10c      	bne.n	146e <data_handler+0x56>
	{
		ble_uart_write("L\n");
    1454:	4be2      	ldr	r3, [pc, #904]	; (17e0 <data_handler+0x3c8>)
    1456:	0018      	movs	r0, r3
    1458:	4bdf      	ldr	r3, [pc, #892]	; (17d8 <data_handler+0x3c0>)
    145a:	4798      	blx	r3
		int arg0;
		//ble_uart_write("L\n");
		sscanf(buffer,"T0%d",&arg0);
    145c:	2358      	movs	r3, #88	; 0x58
    145e:	2208      	movs	r2, #8
    1460:	18ba      	adds	r2, r7, r2
    1462:	18d2      	adds	r2, r2, r3
    1464:	49df      	ldr	r1, [pc, #892]	; (17e4 <data_handler+0x3cc>)
    1466:	68fb      	ldr	r3, [r7, #12]
    1468:	0018      	movs	r0, r3
    146a:	4bdf      	ldr	r3, [pc, #892]	; (17e8 <data_handler+0x3d0>)
    146c:	4798      	blx	r3
	}
	
	if (strncmp(buffer,test_bob,3) == 0)
    146e:	49df      	ldr	r1, [pc, #892]	; (17ec <data_handler+0x3d4>)
    1470:	68fb      	ldr	r3, [r7, #12]
    1472:	2203      	movs	r2, #3
    1474:	0018      	movs	r0, r3
    1476:	4bd6      	ldr	r3, [pc, #856]	; (17d0 <data_handler+0x3b8>)
    1478:	4798      	blx	r3
    147a:	1e03      	subs	r3, r0, #0
    147c:	d132      	bne.n	14e4 <data_handler+0xcc>
	{
		ble_uart_write("bob was found");
    147e:	4bdc      	ldr	r3, [pc, #880]	; (17f0 <data_handler+0x3d8>)
    1480:	0018      	movs	r0, r3
    1482:	4bd5      	ldr	r3, [pc, #852]	; (17d8 <data_handler+0x3c0>)
    1484:	4798      	blx	r3
		
		if (strlen(buffer) > strlen(test_bob))
    1486:	68fb      	ldr	r3, [r7, #12]
    1488:	0018      	movs	r0, r3
    148a:	4bcf      	ldr	r3, [pc, #828]	; (17c8 <data_handler+0x3b0>)
    148c:	4798      	blx	r3
    148e:	0004      	movs	r4, r0
    1490:	4bd6      	ldr	r3, [pc, #856]	; (17ec <data_handler+0x3d4>)
    1492:	0018      	movs	r0, r3
    1494:	4bcc      	ldr	r3, [pc, #816]	; (17c8 <data_handler+0x3b0>)
    1496:	4798      	blx	r3
    1498:	0003      	movs	r3, r0
    149a:	429c      	cmp	r4, r3
    149c:	d922      	bls.n	14e4 <data_handler+0xcc>
		{
			int arg1;
			sscanf(buffer,"PWM %d",&arg1);
    149e:	2354      	movs	r3, #84	; 0x54
    14a0:	2208      	movs	r2, #8
    14a2:	18ba      	adds	r2, r7, r2
    14a4:	18d2      	adds	r2, r2, r3
    14a6:	49d3      	ldr	r1, [pc, #844]	; (17f4 <data_handler+0x3dc>)
    14a8:	68fb      	ldr	r3, [r7, #12]
    14aa:	0018      	movs	r0, r3
    14ac:	4bce      	ldr	r3, [pc, #824]	; (17e8 <data_handler+0x3d0>)
    14ae:	4798      	blx	r3
			//arg1 = buffer[4]-'0';
			if (arg1 < 1)
    14b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    14b2:	2b00      	cmp	r3, #0
    14b4:	dc01      	bgt.n	14ba <data_handler+0xa2>
			{
				arg1 = 1;
    14b6:	2301      	movs	r3, #1
    14b8:	65fb      	str	r3, [r7, #92]	; 0x5c
			}
			pwm_bob = arg1;
    14ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    14bc:	4bce      	ldr	r3, [pc, #824]	; (17f8 <data_handler+0x3e0>)
    14be:	601a      	str	r2, [r3, #0]
			char string_buffer[32];
			sprintf(string_buffer,": %d",arg1);
    14c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    14c2:	49ce      	ldr	r1, [pc, #824]	; (17fc <data_handler+0x3e4>)
    14c4:	230c      	movs	r3, #12
    14c6:	2008      	movs	r0, #8
    14c8:	4684      	mov	ip, r0
    14ca:	44bc      	add	ip, r7
    14cc:	4463      	add	r3, ip
    14ce:	0018      	movs	r0, r3
    14d0:	4bcb      	ldr	r3, [pc, #812]	; (1800 <data_handler+0x3e8>)
    14d2:	4798      	blx	r3
			ble_uart_write(string_buffer);
    14d4:	230c      	movs	r3, #12
    14d6:	2208      	movs	r2, #8
    14d8:	4694      	mov	ip, r2
    14da:	44bc      	add	ip, r7
    14dc:	4463      	add	r3, ip
    14de:	0018      	movs	r0, r3
    14e0:	4bbd      	ldr	r3, [pc, #756]	; (17d8 <data_handler+0x3c0>)
    14e2:	4798      	blx	r3
		}
	}


	if(strncmp(buffer,FLASH_ALL_ON,4) == 0)
    14e4:	49c7      	ldr	r1, [pc, #796]	; (1804 <data_handler+0x3ec>)
    14e6:	68fb      	ldr	r3, [r7, #12]
    14e8:	2204      	movs	r2, #4
    14ea:	0018      	movs	r0, r3
    14ec:	4bb8      	ldr	r3, [pc, #736]	; (17d0 <data_handler+0x3b8>)
    14ee:	4798      	blx	r3
    14f0:	1e03      	subs	r3, r0, #0
    14f2:	d000      	beq.n	14f6 <data_handler+0xde>
    14f4:	e088      	b.n	1608 <data_handler+0x1f0>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    14f6:	2301      	movs	r3, #1
    14f8:	2200      	movs	r2, #0
    14fa:	2101      	movs	r1, #1
    14fc:	2000      	movs	r0, #0
    14fe:	4cc2      	ldr	r4, [pc, #776]	; (1808 <data_handler+0x3f0>)
    1500:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    1502:	2301      	movs	r3, #1
    1504:	2200      	movs	r2, #0
    1506:	2102      	movs	r1, #2
    1508:	2000      	movs	r0, #0
    150a:	4cbf      	ldr	r4, [pc, #764]	; (1808 <data_handler+0x3f0>)
    150c:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    150e:	2301      	movs	r3, #1
    1510:	2200      	movs	r2, #0
    1512:	2103      	movs	r1, #3
    1514:	2000      	movs	r0, #0
    1516:	4cbc      	ldr	r4, [pc, #752]	; (1808 <data_handler+0x3f0>)
    1518:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    151a:	2301      	movs	r3, #1
    151c:	2200      	movs	r2, #0
    151e:	2104      	movs	r1, #4
    1520:	2000      	movs	r0, #0
    1522:	4cb9      	ldr	r4, [pc, #740]	; (1808 <data_handler+0x3f0>)
    1524:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,true);
    1526:	2301      	movs	r3, #1
    1528:	2201      	movs	r2, #1
    152a:	2102      	movs	r1, #2
    152c:	2000      	movs	r0, #0
    152e:	4cb6      	ldr	r4, [pc, #728]	; (1808 <data_handler+0x3f0>)
    1530:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,true);
    1532:	2301      	movs	r3, #1
    1534:	2201      	movs	r2, #1
    1536:	2101      	movs	r1, #1
    1538:	2000      	movs	r0, #0
    153a:	4cb3      	ldr	r4, [pc, #716]	; (1808 <data_handler+0x3f0>)
    153c:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,true);
    153e:	2301      	movs	r3, #1
    1540:	2202      	movs	r2, #2
    1542:	2102      	movs	r1, #2
    1544:	2000      	movs	r0, #0
    1546:	4cb0      	ldr	r4, [pc, #704]	; (1808 <data_handler+0x3f0>)
    1548:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,true);
    154a:	2301      	movs	r3, #1
    154c:	2202      	movs	r2, #2
    154e:	2101      	movs	r1, #1
    1550:	2000      	movs	r0, #0
    1552:	4cad      	ldr	r4, [pc, #692]	; (1808 <data_handler+0x3f0>)
    1554:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,true);
    1556:	2301      	movs	r3, #1
    1558:	2202      	movs	r2, #2
    155a:	2104      	movs	r1, #4
    155c:	2000      	movs	r0, #0
    155e:	4caa      	ldr	r4, [pc, #680]	; (1808 <data_handler+0x3f0>)
    1560:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,true);
    1562:	2301      	movs	r3, #1
    1564:	2202      	movs	r2, #2
    1566:	2103      	movs	r1, #3
    1568:	2000      	movs	r0, #0
    156a:	4ca7      	ldr	r4, [pc, #668]	; (1808 <data_handler+0x3f0>)
    156c:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,true);
    156e:	2301      	movs	r3, #1
    1570:	2201      	movs	r2, #1
    1572:	2103      	movs	r1, #3
    1574:	2000      	movs	r0, #0
    1576:	4ca4      	ldr	r4, [pc, #656]	; (1808 <data_handler+0x3f0>)
    1578:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,true);
    157a:	2301      	movs	r3, #1
    157c:	2201      	movs	r2, #1
    157e:	2104      	movs	r1, #4
    1580:	2000      	movs	r0, #0
    1582:	4ca1      	ldr	r4, [pc, #644]	; (1808 <data_handler+0x3f0>)
    1584:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,true);
    1586:	2301      	movs	r3, #1
    1588:	2203      	movs	r2, #3
    158a:	2102      	movs	r1, #2
    158c:	2000      	movs	r0, #0
    158e:	4c9e      	ldr	r4, [pc, #632]	; (1808 <data_handler+0x3f0>)
    1590:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,true);
    1592:	2301      	movs	r3, #1
    1594:	2203      	movs	r2, #3
    1596:	2101      	movs	r1, #1
    1598:	2000      	movs	r0, #0
    159a:	4c9b      	ldr	r4, [pc, #620]	; (1808 <data_handler+0x3f0>)
    159c:	47a0      	blx	r4
		
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR, SUB_LEFT_PIN,true);
    159e:	2301      	movs	r3, #1
    15a0:	2203      	movs	r2, #3
    15a2:	2103      	movs	r1, #3
    15a4:	2000      	movs	r0, #0
    15a6:	4c98      	ldr	r4, [pc, #608]	; (1808 <data_handler+0x3f0>)
    15a8:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR, SUB_RIGHT_PIN,true);
    15aa:	2301      	movs	r3, #1
    15ac:	2204      	movs	r2, #4
    15ae:	2103      	movs	r1, #3
    15b0:	2000      	movs	r0, #0
    15b2:	4c95      	ldr	r4, [pc, #596]	; (1808 <data_handler+0x3f0>)
    15b4:	47a0      	blx	r4
		
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,true);
    15b6:	2301      	movs	r3, #1
    15b8:	2204      	movs	r2, #4
    15ba:	2101      	movs	r1, #1
    15bc:	2000      	movs	r0, #0
    15be:	4c92      	ldr	r4, [pc, #584]	; (1808 <data_handler+0x3f0>)
    15c0:	47a0      	blx	r4
		
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,true);
    15c2:	2301      	movs	r3, #1
    15c4:	2203      	movs	r2, #3
    15c6:	2105      	movs	r1, #5
    15c8:	2000      	movs	r0, #0
    15ca:	4c8f      	ldr	r4, [pc, #572]	; (1808 <data_handler+0x3f0>)
    15cc:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,true);
    15ce:	2301      	movs	r3, #1
    15d0:	2202      	movs	r2, #2
    15d2:	2105      	movs	r1, #5
    15d4:	2000      	movs	r0, #0
    15d6:	4c8c      	ldr	r4, [pc, #560]	; (1808 <data_handler+0x3f0>)
    15d8:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,true);
    15da:	2301      	movs	r3, #1
    15dc:	2204      	movs	r2, #4
    15de:	2105      	movs	r1, #5
    15e0:	2000      	movs	r0, #0
    15e2:	4c89      	ldr	r4, [pc, #548]	; (1808 <data_handler+0x3f0>)
    15e4:	47a0      	blx	r4
		
		flash_all = true;
    15e6:	4b89      	ldr	r3, [pc, #548]	; (180c <data_handler+0x3f4>)
    15e8:	2201      	movs	r2, #1
    15ea:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    15ec:	68fb      	ldr	r3, [r7, #12]
    15ee:	0018      	movs	r0, r3
    15f0:	4b79      	ldr	r3, [pc, #484]	; (17d8 <data_handler+0x3c0>)
    15f2:	4798      	blx	r3
		ble_uart_write(" - ");
    15f4:	4b86      	ldr	r3, [pc, #536]	; (1810 <data_handler+0x3f8>)
    15f6:	0018      	movs	r0, r3
    15f8:	4b77      	ldr	r3, [pc, #476]	; (17d8 <data_handler+0x3c0>)
    15fa:	4798      	blx	r3
		ble_uart_write("ACK");
    15fc:	4b85      	ldr	r3, [pc, #532]	; (1814 <data_handler+0x3fc>)
    15fe:	0018      	movs	r0, r3
    1600:	4b75      	ldr	r3, [pc, #468]	; (17d8 <data_handler+0x3c0>)
    1602:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1604:	f000 fe85 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,FLASH_ALL_OFF,4) == 0)
    1608:	4983      	ldr	r1, [pc, #524]	; (1818 <data_handler+0x400>)
    160a:	68fb      	ldr	r3, [r7, #12]
    160c:	2204      	movs	r2, #4
    160e:	0018      	movs	r0, r3
    1610:	4b6f      	ldr	r3, [pc, #444]	; (17d0 <data_handler+0x3b8>)
    1612:	4798      	blx	r3
    1614:	1e03      	subs	r3, r0, #0
    1616:	d000      	beq.n	161a <data_handler+0x202>
    1618:	e088      	b.n	172c <data_handler+0x314>
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    161a:	2300      	movs	r3, #0
    161c:	2200      	movs	r2, #0
    161e:	2101      	movs	r1, #1
    1620:	2000      	movs	r0, #0
    1622:	4c79      	ldr	r4, [pc, #484]	; (1808 <data_handler+0x3f0>)
    1624:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    1626:	2300      	movs	r3, #0
    1628:	2200      	movs	r2, #0
    162a:	2102      	movs	r1, #2
    162c:	2000      	movs	r0, #0
    162e:	4c76      	ldr	r4, [pc, #472]	; (1808 <data_handler+0x3f0>)
    1630:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    1632:	2300      	movs	r3, #0
    1634:	2200      	movs	r2, #0
    1636:	2103      	movs	r1, #3
    1638:	2000      	movs	r0, #0
    163a:	4c73      	ldr	r4, [pc, #460]	; (1808 <data_handler+0x3f0>)
    163c:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    163e:	2300      	movs	r3, #0
    1640:	2200      	movs	r2, #0
    1642:	2104      	movs	r1, #4
    1644:	2000      	movs	r0, #0
    1646:	4c70      	ldr	r4, [pc, #448]	; (1808 <data_handler+0x3f0>)
    1648:	47a0      	blx	r4
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,false);
    164a:	2300      	movs	r3, #0
    164c:	2201      	movs	r2, #1
    164e:	2102      	movs	r1, #2
    1650:	2000      	movs	r0, #0
    1652:	4c6d      	ldr	r4, [pc, #436]	; (1808 <data_handler+0x3f0>)
    1654:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,false);
    1656:	2300      	movs	r3, #0
    1658:	2201      	movs	r2, #1
    165a:	2101      	movs	r1, #1
    165c:	2000      	movs	r0, #0
    165e:	4c6a      	ldr	r4, [pc, #424]	; (1808 <data_handler+0x3f0>)
    1660:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,false);
    1662:	2300      	movs	r3, #0
    1664:	2202      	movs	r2, #2
    1666:	2102      	movs	r1, #2
    1668:	2000      	movs	r0, #0
    166a:	4c67      	ldr	r4, [pc, #412]	; (1808 <data_handler+0x3f0>)
    166c:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,false);
    166e:	2300      	movs	r3, #0
    1670:	2202      	movs	r2, #2
    1672:	2101      	movs	r1, #1
    1674:	2000      	movs	r0, #0
    1676:	4c64      	ldr	r4, [pc, #400]	; (1808 <data_handler+0x3f0>)
    1678:	47a0      	blx	r4
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,false);
    167a:	2300      	movs	r3, #0
    167c:	2202      	movs	r2, #2
    167e:	2104      	movs	r1, #4
    1680:	2000      	movs	r0, #0
    1682:	4c61      	ldr	r4, [pc, #388]	; (1808 <data_handler+0x3f0>)
    1684:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,false);
    1686:	2300      	movs	r3, #0
    1688:	2202      	movs	r2, #2
    168a:	2103      	movs	r1, #3
    168c:	2000      	movs	r0, #0
    168e:	4c5e      	ldr	r4, [pc, #376]	; (1808 <data_handler+0x3f0>)
    1690:	47a0      	blx	r4
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,false);
    1692:	2300      	movs	r3, #0
    1694:	2201      	movs	r2, #1
    1696:	2103      	movs	r1, #3
    1698:	2000      	movs	r0, #0
    169a:	4c5b      	ldr	r4, [pc, #364]	; (1808 <data_handler+0x3f0>)
    169c:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,false);
    169e:	2300      	movs	r3, #0
    16a0:	2201      	movs	r2, #1
    16a2:	2104      	movs	r1, #4
    16a4:	2000      	movs	r0, #0
    16a6:	4c58      	ldr	r4, [pc, #352]	; (1808 <data_handler+0x3f0>)
    16a8:	47a0      	blx	r4
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,false);
    16aa:	2300      	movs	r3, #0
    16ac:	2203      	movs	r2, #3
    16ae:	2102      	movs	r1, #2
    16b0:	2000      	movs	r0, #0
    16b2:	4c55      	ldr	r4, [pc, #340]	; (1808 <data_handler+0x3f0>)
    16b4:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,false);
    16b6:	2300      	movs	r3, #0
    16b8:	2203      	movs	r2, #3
    16ba:	2101      	movs	r1, #1
    16bc:	2000      	movs	r0, #0
    16be:	4c52      	ldr	r4, [pc, #328]	; (1808 <data_handler+0x3f0>)
    16c0:	47a0      	blx	r4
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR,SUB_LEFT_PIN,false);
    16c2:	2300      	movs	r3, #0
    16c4:	2203      	movs	r2, #3
    16c6:	2103      	movs	r1, #3
    16c8:	2000      	movs	r0, #0
    16ca:	4c4f      	ldr	r4, [pc, #316]	; (1808 <data_handler+0x3f0>)
    16cc:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR,SUB_RIGHT_PIN,false);
    16ce:	2300      	movs	r3, #0
    16d0:	2204      	movs	r2, #4
    16d2:	2103      	movs	r1, #3
    16d4:	2000      	movs	r0, #0
    16d6:	4c4c      	ldr	r4, [pc, #304]	; (1808 <data_handler+0x3f0>)
    16d8:	47a0      	blx	r4
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,false);
    16da:	2300      	movs	r3, #0
    16dc:	2204      	movs	r2, #4
    16de:	2101      	movs	r1, #1
    16e0:	2000      	movs	r0, #0
    16e2:	4c49      	ldr	r4, [pc, #292]	; (1808 <data_handler+0x3f0>)
    16e4:	47a0      	blx	r4
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,false);
    16e6:	2300      	movs	r3, #0
    16e8:	2203      	movs	r2, #3
    16ea:	2105      	movs	r1, #5
    16ec:	2000      	movs	r0, #0
    16ee:	4c46      	ldr	r4, [pc, #280]	; (1808 <data_handler+0x3f0>)
    16f0:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,false);
    16f2:	2300      	movs	r3, #0
    16f4:	2202      	movs	r2, #2
    16f6:	2105      	movs	r1, #5
    16f8:	2000      	movs	r0, #0
    16fa:	4c43      	ldr	r4, [pc, #268]	; (1808 <data_handler+0x3f0>)
    16fc:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,false);
    16fe:	2300      	movs	r3, #0
    1700:	2204      	movs	r2, #4
    1702:	2105      	movs	r1, #5
    1704:	2000      	movs	r0, #0
    1706:	4c40      	ldr	r4, [pc, #256]	; (1808 <data_handler+0x3f0>)
    1708:	47a0      	blx	r4
		flash_all = false;
    170a:	4b40      	ldr	r3, [pc, #256]	; (180c <data_handler+0x3f4>)
    170c:	2200      	movs	r2, #0
    170e:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1710:	68fb      	ldr	r3, [r7, #12]
    1712:	0018      	movs	r0, r3
    1714:	4b30      	ldr	r3, [pc, #192]	; (17d8 <data_handler+0x3c0>)
    1716:	4798      	blx	r3
		ble_uart_write(" - ");
    1718:	4b3d      	ldr	r3, [pc, #244]	; (1810 <data_handler+0x3f8>)
    171a:	0018      	movs	r0, r3
    171c:	4b2e      	ldr	r3, [pc, #184]	; (17d8 <data_handler+0x3c0>)
    171e:	4798      	blx	r3
		ble_uart_write("ACK");
    1720:	4b3c      	ldr	r3, [pc, #240]	; (1814 <data_handler+0x3fc>)
    1722:	0018      	movs	r0, r3
    1724:	4b2c      	ldr	r3, [pc, #176]	; (17d8 <data_handler+0x3c0>)
    1726:	4798      	blx	r3
}
    1728:	f000 fdf3 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,BLINK_ALL_ON,5) == 0)
    172c:	493b      	ldr	r1, [pc, #236]	; (181c <data_handler+0x404>)
    172e:	68fb      	ldr	r3, [r7, #12]
    1730:	2205      	movs	r2, #5
    1732:	0018      	movs	r0, r3
    1734:	4b26      	ldr	r3, [pc, #152]	; (17d0 <data_handler+0x3b8>)
    1736:	4798      	blx	r3
    1738:	1e03      	subs	r3, r0, #0
    173a:	d10a      	bne.n	1752 <data_handler+0x33a>
		blink_left = true;
    173c:	4b38      	ldr	r3, [pc, #224]	; (1820 <data_handler+0x408>)
    173e:	2201      	movs	r2, #1
    1740:	701a      	strb	r2, [r3, #0]
		blink_right = true;
    1742:	4b38      	ldr	r3, [pc, #224]	; (1824 <data_handler+0x40c>)
    1744:	2201      	movs	r2, #1
    1746:	701a      	strb	r2, [r3, #0]
		blink_all = true;
    1748:	4b37      	ldr	r3, [pc, #220]	; (1828 <data_handler+0x410>)
    174a:	2201      	movs	r2, #1
    174c:	701a      	strb	r2, [r3, #0]
}
    174e:	f000 fde0 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,BLINK_ALL_OFF,5) == 0)
    1752:	4936      	ldr	r1, [pc, #216]	; (182c <data_handler+0x414>)
    1754:	68fb      	ldr	r3, [r7, #12]
    1756:	2205      	movs	r2, #5
    1758:	0018      	movs	r0, r3
    175a:	4b1d      	ldr	r3, [pc, #116]	; (17d0 <data_handler+0x3b8>)
    175c:	4798      	blx	r3
    175e:	1e03      	subs	r3, r0, #0
    1760:	d10a      	bne.n	1778 <data_handler+0x360>
		blink_left = false;
    1762:	4b2f      	ldr	r3, [pc, #188]	; (1820 <data_handler+0x408>)
    1764:	2200      	movs	r2, #0
    1766:	701a      	strb	r2, [r3, #0]
		blink_right = false;
    1768:	4b2e      	ldr	r3, [pc, #184]	; (1824 <data_handler+0x40c>)
    176a:	2200      	movs	r2, #0
    176c:	701a      	strb	r2, [r3, #0]
		blink_all = false;
    176e:	4b2e      	ldr	r3, [pc, #184]	; (1828 <data_handler+0x410>)
    1770:	2200      	movs	r2, #0
    1772:	701a      	strb	r2, [r3, #0]
}
    1774:	f000 fdcd 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,BLINK_LEFT_ON,5) == 0)
    1778:	492d      	ldr	r1, [pc, #180]	; (1830 <data_handler+0x418>)
    177a:	68fb      	ldr	r3, [r7, #12]
    177c:	2205      	movs	r2, #5
    177e:	0018      	movs	r0, r3
    1780:	4b13      	ldr	r3, [pc, #76]	; (17d0 <data_handler+0x3b8>)
    1782:	4798      	blx	r3
    1784:	1e03      	subs	r3, r0, #0
    1786:	d104      	bne.n	1792 <data_handler+0x37a>
		blink_left = true;
    1788:	4b25      	ldr	r3, [pc, #148]	; (1820 <data_handler+0x408>)
    178a:	2201      	movs	r2, #1
    178c:	701a      	strb	r2, [r3, #0]
}
    178e:	f000 fdc0 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,BLINK_LEFT_OFF,5) == 0)
    1792:	4928      	ldr	r1, [pc, #160]	; (1834 <data_handler+0x41c>)
    1794:	68fb      	ldr	r3, [r7, #12]
    1796:	2205      	movs	r2, #5
    1798:	0018      	movs	r0, r3
    179a:	4b0d      	ldr	r3, [pc, #52]	; (17d0 <data_handler+0x3b8>)
    179c:	4798      	blx	r3
    179e:	1e03      	subs	r3, r0, #0
    17a0:	d104      	bne.n	17ac <data_handler+0x394>
		blink_left = false;
    17a2:	4b1f      	ldr	r3, [pc, #124]	; (1820 <data_handler+0x408>)
    17a4:	2200      	movs	r2, #0
    17a6:	701a      	strb	r2, [r3, #0]
}
    17a8:	f000 fdb3 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,BLINK_RIGHT_ON,5) == 0)
    17ac:	4922      	ldr	r1, [pc, #136]	; (1838 <data_handler+0x420>)
    17ae:	68fb      	ldr	r3, [r7, #12]
    17b0:	2205      	movs	r2, #5
    17b2:	0018      	movs	r0, r3
    17b4:	4b06      	ldr	r3, [pc, #24]	; (17d0 <data_handler+0x3b8>)
    17b6:	4798      	blx	r3
    17b8:	1e03      	subs	r3, r0, #0
    17ba:	d13f      	bne.n	183c <data_handler+0x424>
		blink_right = true;
    17bc:	4b19      	ldr	r3, [pc, #100]	; (1824 <data_handler+0x40c>)
    17be:	2201      	movs	r2, #1
    17c0:	701a      	strb	r2, [r3, #0]
}
    17c2:	f000 fda6 	bl	2312 <STACK_SIZE+0x312>
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	00005c11 	.word	0x00005c11
    17cc:	00006d48 	.word	0x00006d48
    17d0:	00005c1f 	.word	0x00005c1f
    17d4:	00006d54 	.word	0x00006d54
    17d8:	000012e5 	.word	0x000012e5
    17dc:	00006d5c 	.word	0x00006d5c
    17e0:	00006d60 	.word	0x00006d60
    17e4:	00006d64 	.word	0x00006d64
    17e8:	00005b91 	.word	0x00005b91
    17ec:	2000000c 	.word	0x2000000c
    17f0:	00006d6c 	.word	0x00006d6c
    17f4:	00006d7c 	.word	0x00006d7c
    17f8:	200012dc 	.word	0x200012dc
    17fc:	00006d84 	.word	0x00006d84
    1800:	00005b4d 	.word	0x00005b4d
    1804:	00006d8c 	.word	0x00006d8c
    1808:	00002f81 	.word	0x00002f81
    180c:	20000e3e 	.word	0x20000e3e
    1810:	00006d94 	.word	0x00006d94
    1814:	00006d98 	.word	0x00006d98
    1818:	00006d9c 	.word	0x00006d9c
    181c:	00006da4 	.word	0x00006da4
    1820:	20000a09 	.word	0x20000a09
    1824:	20000e3d 	.word	0x20000e3d
    1828:	20000e3a 	.word	0x20000e3a
    182c:	00006dac 	.word	0x00006dac
    1830:	00006db4 	.word	0x00006db4
    1834:	00006dbc 	.word	0x00006dbc
    1838:	00006dc4 	.word	0x00006dc4
	else if(strncmp(buffer,BLINK_RIGHT_OFF,5) == 0)
    183c:	49c9      	ldr	r1, [pc, #804]	; (1b64 <data_handler+0x74c>)
    183e:	68fb      	ldr	r3, [r7, #12]
    1840:	2205      	movs	r2, #5
    1842:	0018      	movs	r0, r3
    1844:	4bc8      	ldr	r3, [pc, #800]	; (1b68 <data_handler+0x750>)
    1846:	4798      	blx	r3
    1848:	1e03      	subs	r3, r0, #0
    184a:	d104      	bne.n	1856 <data_handler+0x43e>
		blink_right = false;
    184c:	4bc7      	ldr	r3, [pc, #796]	; (1b6c <data_handler+0x754>)
    184e:	2200      	movs	r2, #0
    1850:	701a      	strb	r2, [r3, #0]
}
    1852:	f000 fd5e 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,HORN_0_ON,6) == 0)
    1856:	49c6      	ldr	r1, [pc, #792]	; (1b70 <data_handler+0x758>)
    1858:	68fb      	ldr	r3, [r7, #12]
    185a:	2206      	movs	r2, #6
    185c:	0018      	movs	r0, r3
    185e:	4bc2      	ldr	r3, [pc, #776]	; (1b68 <data_handler+0x750>)
    1860:	4798      	blx	r3
    1862:	1e03      	subs	r3, r0, #0
    1864:	d104      	bne.n	1870 <data_handler+0x458>
		horn0 = true;
    1866:	4bc3      	ldr	r3, [pc, #780]	; (1b74 <data_handler+0x75c>)
    1868:	2201      	movs	r2, #1
    186a:	701a      	strb	r2, [r3, #0]
}
    186c:	f000 fd51 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,HORN_0_OFF,6) == 0)
    1870:	49c1      	ldr	r1, [pc, #772]	; (1b78 <data_handler+0x760>)
    1872:	68fb      	ldr	r3, [r7, #12]
    1874:	2206      	movs	r2, #6
    1876:	0018      	movs	r0, r3
    1878:	4bbb      	ldr	r3, [pc, #748]	; (1b68 <data_handler+0x750>)
    187a:	4798      	blx	r3
    187c:	1e03      	subs	r3, r0, #0
    187e:	d104      	bne.n	188a <data_handler+0x472>
		horn0 = false;
    1880:	4bbc      	ldr	r3, [pc, #752]	; (1b74 <data_handler+0x75c>)
    1882:	2200      	movs	r2, #0
    1884:	701a      	strb	r2, [r3, #0]
}
    1886:	f000 fd44 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,HORN_1_ON,6) == 0)
    188a:	49bc      	ldr	r1, [pc, #752]	; (1b7c <data_handler+0x764>)
    188c:	68fb      	ldr	r3, [r7, #12]
    188e:	2206      	movs	r2, #6
    1890:	0018      	movs	r0, r3
    1892:	4bb5      	ldr	r3, [pc, #724]	; (1b68 <data_handler+0x750>)
    1894:	4798      	blx	r3
    1896:	1e03      	subs	r3, r0, #0
    1898:	d104      	bne.n	18a4 <data_handler+0x48c>
		horn1 = true;
    189a:	4bb9      	ldr	r3, [pc, #740]	; (1b80 <data_handler+0x768>)
    189c:	2201      	movs	r2, #1
    189e:	701a      	strb	r2, [r3, #0]
}
    18a0:	f000 fd37 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,HORN_1_OFF,6) == 0)
    18a4:	49b7      	ldr	r1, [pc, #732]	; (1b84 <data_handler+0x76c>)
    18a6:	68fb      	ldr	r3, [r7, #12]
    18a8:	2206      	movs	r2, #6
    18aa:	0018      	movs	r0, r3
    18ac:	4bae      	ldr	r3, [pc, #696]	; (1b68 <data_handler+0x750>)
    18ae:	4798      	blx	r3
    18b0:	1e03      	subs	r3, r0, #0
    18b2:	d104      	bne.n	18be <data_handler+0x4a6>
		horn1 = false;
    18b4:	4bb2      	ldr	r3, [pc, #712]	; (1b80 <data_handler+0x768>)
    18b6:	2200      	movs	r2, #0
    18b8:	701a      	strb	r2, [r3, #0]
}
    18ba:	f000 fd2a 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,HORN_2_ON,6) == 0)
    18be:	49b2      	ldr	r1, [pc, #712]	; (1b88 <data_handler+0x770>)
    18c0:	68fb      	ldr	r3, [r7, #12]
    18c2:	2206      	movs	r2, #6
    18c4:	0018      	movs	r0, r3
    18c6:	4ba8      	ldr	r3, [pc, #672]	; (1b68 <data_handler+0x750>)
    18c8:	4798      	blx	r3
    18ca:	1e03      	subs	r3, r0, #0
    18cc:	d104      	bne.n	18d8 <data_handler+0x4c0>
		horn2 = true;
    18ce:	4baf      	ldr	r3, [pc, #700]	; (1b8c <data_handler+0x774>)
    18d0:	2201      	movs	r2, #1
    18d2:	701a      	strb	r2, [r3, #0]
}
    18d4:	f000 fd1d 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,HORN_2_OFF,6) == 0)
    18d8:	49ad      	ldr	r1, [pc, #692]	; (1b90 <data_handler+0x778>)
    18da:	68fb      	ldr	r3, [r7, #12]
    18dc:	2206      	movs	r2, #6
    18de:	0018      	movs	r0, r3
    18e0:	4ba1      	ldr	r3, [pc, #644]	; (1b68 <data_handler+0x750>)
    18e2:	4798      	blx	r3
    18e4:	1e03      	subs	r3, r0, #0
    18e6:	d104      	bne.n	18f2 <data_handler+0x4da>
		horn2 = false;
    18e8:	4ba8      	ldr	r3, [pc, #672]	; (1b8c <data_handler+0x774>)
    18ea:	2200      	movs	r2, #0
    18ec:	701a      	strb	r2, [r3, #0]
}
    18ee:	f000 fd10 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,HORN_3_ON,6) == 0)
    18f2:	49a8      	ldr	r1, [pc, #672]	; (1b94 <data_handler+0x77c>)
    18f4:	68fb      	ldr	r3, [r7, #12]
    18f6:	2206      	movs	r2, #6
    18f8:	0018      	movs	r0, r3
    18fa:	4b9b      	ldr	r3, [pc, #620]	; (1b68 <data_handler+0x750>)
    18fc:	4798      	blx	r3
    18fe:	1e03      	subs	r3, r0, #0
    1900:	d104      	bne.n	190c <data_handler+0x4f4>
		horn3 = true;
    1902:	4ba5      	ldr	r3, [pc, #660]	; (1b98 <data_handler+0x780>)
    1904:	2201      	movs	r2, #1
    1906:	701a      	strb	r2, [r3, #0]
}
    1908:	f000 fd03 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,HORN_3_OFF,6) == 0)
    190c:	49a3      	ldr	r1, [pc, #652]	; (1b9c <data_handler+0x784>)
    190e:	68fb      	ldr	r3, [r7, #12]
    1910:	2206      	movs	r2, #6
    1912:	0018      	movs	r0, r3
    1914:	4b94      	ldr	r3, [pc, #592]	; (1b68 <data_handler+0x750>)
    1916:	4798      	blx	r3
    1918:	1e03      	subs	r3, r0, #0
    191a:	d104      	bne.n	1926 <data_handler+0x50e>
		horn3 = false;
    191c:	4b9e      	ldr	r3, [pc, #632]	; (1b98 <data_handler+0x780>)
    191e:	2200      	movs	r2, #0
    1920:	701a      	strb	r2, [r3, #0]
}
    1922:	f000 fcf6 	bl	2312 <STACK_SIZE+0x312>
	else if(strstr(buffer,"SB") != NULL && strlen(buffer) >= 6)
    1926:	4a9e      	ldr	r2, [pc, #632]	; (1ba0 <data_handler+0x788>)
    1928:	68fb      	ldr	r3, [r7, #12]
    192a:	0011      	movs	r1, r2
    192c:	0018      	movs	r0, r3
    192e:	4b9d      	ldr	r3, [pc, #628]	; (1ba4 <data_handler+0x78c>)
    1930:	4798      	blx	r3
    1932:	1e03      	subs	r3, r0, #0
    1934:	d01e      	beq.n	1974 <data_handler+0x55c>
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	0018      	movs	r0, r3
    193a:	4b9b      	ldr	r3, [pc, #620]	; (1ba8 <data_handler+0x790>)
    193c:	4798      	blx	r3
    193e:	0003      	movs	r3, r0
    1940:	2b05      	cmp	r3, #5
    1942:	d917      	bls.n	1974 <data_handler+0x55c>
		if (buffer[5] == '1')
    1944:	68fb      	ldr	r3, [r7, #12]
    1946:	3305      	adds	r3, #5
    1948:	781b      	ldrb	r3, [r3, #0]
    194a:	2b31      	cmp	r3, #49	; 0x31
    194c:	d10e      	bne.n	196c <data_handler+0x554>
			sscanf(buffer,"SB%d\n",&track);
    194e:	2350      	movs	r3, #80	; 0x50
    1950:	2208      	movs	r2, #8
    1952:	18ba      	adds	r2, r7, r2
    1954:	18d2      	adds	r2, r2, r3
    1956:	4995      	ldr	r1, [pc, #596]	; (1bac <data_handler+0x794>)
    1958:	68fb      	ldr	r3, [r7, #12]
    195a:	0018      	movs	r0, r3
    195c:	4b94      	ldr	r3, [pc, #592]	; (1bb0 <data_handler+0x798>)
    195e:	4798      	blx	r3
			sb_play_track_by_number(track);			
    1960:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1962:	0018      	movs	r0, r3
    1964:	4b93      	ldr	r3, [pc, #588]	; (1bb4 <data_handler+0x79c>)
    1966:	4798      	blx	r3
		if (buffer[5] == '1')
    1968:	f000 fcd3 	bl	2312 <STACK_SIZE+0x312>
			sb_quit();
    196c:	4b92      	ldr	r3, [pc, #584]	; (1bb8 <data_handler+0x7a0>)
    196e:	4798      	blx	r3
		if (buffer[5] == '1')
    1970:	f000 fccf 	bl	2312 <STACK_SIZE+0x312>
	else if (strncmp(buffer,SOUND_RESET,sizeof(SOUND_RESET)-1) == 0)
    1974:	4991      	ldr	r1, [pc, #580]	; (1bbc <data_handler+0x7a4>)
    1976:	68fb      	ldr	r3, [r7, #12]
    1978:	2208      	movs	r2, #8
    197a:	0018      	movs	r0, r3
    197c:	4b7a      	ldr	r3, [pc, #488]	; (1b68 <data_handler+0x750>)
    197e:	4798      	blx	r3
    1980:	1e03      	subs	r3, r0, #0
    1982:	d107      	bne.n	1994 <data_handler+0x57c>
		ble_uart_write("SB: RESETTING");
    1984:	4b8e      	ldr	r3, [pc, #568]	; (1bc0 <data_handler+0x7a8>)
    1986:	0018      	movs	r0, r3
    1988:	4b8e      	ldr	r3, [pc, #568]	; (1bc4 <data_handler+0x7ac>)
    198a:	4798      	blx	r3
		sounds_reset();
    198c:	4b8e      	ldr	r3, [pc, #568]	; (1bc8 <data_handler+0x7b0>)
    198e:	4798      	blx	r3
}
    1990:	f000 fcbf 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,PARTY_ON,5) == 0)
    1994:	498d      	ldr	r1, [pc, #564]	; (1bcc <data_handler+0x7b4>)
    1996:	68fb      	ldr	r3, [r7, #12]
    1998:	2205      	movs	r2, #5
    199a:	0018      	movs	r0, r3
    199c:	4b72      	ldr	r3, [pc, #456]	; (1b68 <data_handler+0x750>)
    199e:	4798      	blx	r3
    19a0:	1e03      	subs	r3, r0, #0
    19a2:	d104      	bne.n	19ae <data_handler+0x596>
		party = true;
    19a4:	4b8a      	ldr	r3, [pc, #552]	; (1bd0 <data_handler+0x7b8>)
    19a6:	2201      	movs	r2, #1
    19a8:	701a      	strb	r2, [r3, #0]
}
    19aa:	f000 fcb2 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,PARTY_OFF,5) == 0)
    19ae:	4989      	ldr	r1, [pc, #548]	; (1bd4 <data_handler+0x7bc>)
    19b0:	68fb      	ldr	r3, [r7, #12]
    19b2:	2205      	movs	r2, #5
    19b4:	0018      	movs	r0, r3
    19b6:	4b6c      	ldr	r3, [pc, #432]	; (1b68 <data_handler+0x750>)
    19b8:	4798      	blx	r3
    19ba:	1e03      	subs	r3, r0, #0
    19bc:	d106      	bne.n	19cc <data_handler+0x5b4>
		party = false;
    19be:	4b84      	ldr	r3, [pc, #528]	; (1bd0 <data_handler+0x7b8>)
    19c0:	2200      	movs	r2, #0
    19c2:	701a      	strb	r2, [r3, #0]
		reset_all_lights();
    19c4:	4b84      	ldr	r3, [pc, #528]	; (1bd8 <data_handler+0x7c0>)
    19c6:	4798      	blx	r3
}
    19c8:	f000 fca3 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,WATER_ON,5) == 0)
    19cc:	4983      	ldr	r1, [pc, #524]	; (1bdc <data_handler+0x7c4>)
    19ce:	68fb      	ldr	r3, [r7, #12]
    19d0:	2205      	movs	r2, #5
    19d2:	0018      	movs	r0, r3
    19d4:	4b64      	ldr	r3, [pc, #400]	; (1b68 <data_handler+0x750>)
    19d6:	4798      	blx	r3
    19d8:	1e03      	subs	r3, r0, #0
    19da:	d104      	bne.n	19e6 <data_handler+0x5ce>
		water = true;
    19dc:	4b80      	ldr	r3, [pc, #512]	; (1be0 <data_handler+0x7c8>)
    19de:	2201      	movs	r2, #1
    19e0:	701a      	strb	r2, [r3, #0]
}
    19e2:	f000 fc96 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,WATER_ON,5) == 0)
    19e6:	497d      	ldr	r1, [pc, #500]	; (1bdc <data_handler+0x7c4>)
    19e8:	68fb      	ldr	r3, [r7, #12]
    19ea:	2205      	movs	r2, #5
    19ec:	0018      	movs	r0, r3
    19ee:	4b5e      	ldr	r3, [pc, #376]	; (1b68 <data_handler+0x750>)
    19f0:	4798      	blx	r3
    19f2:	1e03      	subs	r3, r0, #0
    19f4:	d104      	bne.n	1a00 <data_handler+0x5e8>
		water = false;
    19f6:	4b7a      	ldr	r3, [pc, #488]	; (1be0 <data_handler+0x7c8>)
    19f8:	2200      	movs	r2, #0
    19fa:	701a      	strb	r2, [r3, #0]
}
    19fc:	f000 fc89 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,START_ON,5) == 0)
    1a00:	4978      	ldr	r1, [pc, #480]	; (1be4 <data_handler+0x7cc>)
    1a02:	68fb      	ldr	r3, [r7, #12]
    1a04:	2205      	movs	r2, #5
    1a06:	0018      	movs	r0, r3
    1a08:	4b57      	ldr	r3, [pc, #348]	; (1b68 <data_handler+0x750>)
    1a0a:	4798      	blx	r3
    1a0c:	1e03      	subs	r3, r0, #0
    1a0e:	d104      	bne.n	1a1a <data_handler+0x602>
		start = true;
    1a10:	4b75      	ldr	r3, [pc, #468]	; (1be8 <data_handler+0x7d0>)
    1a12:	2201      	movs	r2, #1
    1a14:	701a      	strb	r2, [r3, #0]
}
    1a16:	f000 fc7c 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,START_OFF,5) == 0)
    1a1a:	4974      	ldr	r1, [pc, #464]	; (1bec <data_handler+0x7d4>)
    1a1c:	68fb      	ldr	r3, [r7, #12]
    1a1e:	2205      	movs	r2, #5
    1a20:	0018      	movs	r0, r3
    1a22:	4b51      	ldr	r3, [pc, #324]	; (1b68 <data_handler+0x750>)
    1a24:	4798      	blx	r3
    1a26:	1e03      	subs	r3, r0, #0
    1a28:	d104      	bne.n	1a34 <data_handler+0x61c>
		start = false;
    1a2a:	4b6f      	ldr	r3, [pc, #444]	; (1be8 <data_handler+0x7d0>)
    1a2c:	2200      	movs	r2, #0
    1a2e:	701a      	strb	r2, [r3, #0]
}
    1a30:	f000 fc6f 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,LED_BAR_ON,5) == 0)
    1a34:	496e      	ldr	r1, [pc, #440]	; (1bf0 <data_handler+0x7d8>)
    1a36:	68fb      	ldr	r3, [r7, #12]
    1a38:	2205      	movs	r2, #5
    1a3a:	0018      	movs	r0, r3
    1a3c:	4b4a      	ldr	r3, [pc, #296]	; (1b68 <data_handler+0x750>)
    1a3e:	4798      	blx	r3
    1a40:	1e03      	subs	r3, r0, #0
    1a42:	d122      	bne.n	1a8a <data_handler+0x672>
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,true);
    1a44:	2301      	movs	r3, #1
    1a46:	2202      	movs	r2, #2
    1a48:	2101      	movs	r1, #1
    1a4a:	2000      	movs	r0, #0
    1a4c:	4c69      	ldr	r4, [pc, #420]	; (1bf4 <data_handler+0x7dc>)
    1a4e:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,true);
    1a50:	2301      	movs	r3, #1
    1a52:	2202      	movs	r2, #2
    1a54:	2102      	movs	r1, #2
    1a56:	2000      	movs	r0, #0
    1a58:	4c66      	ldr	r4, [pc, #408]	; (1bf4 <data_handler+0x7dc>)
    1a5a:	47a0      	blx	r4
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,true);
    1a5c:	2301      	movs	r3, #1
    1a5e:	2204      	movs	r2, #4
    1a60:	2101      	movs	r1, #1
    1a62:	2000      	movs	r0, #0
    1a64:	4c63      	ldr	r4, [pc, #396]	; (1bf4 <data_handler+0x7dc>)
    1a66:	47a0      	blx	r4
		led_bar = true;
    1a68:	4b63      	ldr	r3, [pc, #396]	; (1bf8 <data_handler+0x7e0>)
    1a6a:	2201      	movs	r2, #1
    1a6c:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1a6e:	68fb      	ldr	r3, [r7, #12]
    1a70:	0018      	movs	r0, r3
    1a72:	4b54      	ldr	r3, [pc, #336]	; (1bc4 <data_handler+0x7ac>)
    1a74:	4798      	blx	r3
		ble_uart_write(" - ");
    1a76:	4b61      	ldr	r3, [pc, #388]	; (1bfc <data_handler+0x7e4>)
    1a78:	0018      	movs	r0, r3
    1a7a:	4b52      	ldr	r3, [pc, #328]	; (1bc4 <data_handler+0x7ac>)
    1a7c:	4798      	blx	r3
		ble_uart_write("ACK");
    1a7e:	4b60      	ldr	r3, [pc, #384]	; (1c00 <data_handler+0x7e8>)
    1a80:	0018      	movs	r0, r3
    1a82:	4b50      	ldr	r3, [pc, #320]	; (1bc4 <data_handler+0x7ac>)
    1a84:	4798      	blx	r3
}
    1a86:	f000 fc44 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,LED_BAR_OFF,5) == 0)
    1a8a:	495e      	ldr	r1, [pc, #376]	; (1c04 <data_handler+0x7ec>)
    1a8c:	68fb      	ldr	r3, [r7, #12]
    1a8e:	2205      	movs	r2, #5
    1a90:	0018      	movs	r0, r3
    1a92:	4b35      	ldr	r3, [pc, #212]	; (1b68 <data_handler+0x750>)
    1a94:	4798      	blx	r3
    1a96:	1e03      	subs	r3, r0, #0
    1a98:	d122      	bne.n	1ae0 <data_handler+0x6c8>
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,false);
    1a9a:	2300      	movs	r3, #0
    1a9c:	2202      	movs	r2, #2
    1a9e:	2101      	movs	r1, #1
    1aa0:	2000      	movs	r0, #0
    1aa2:	4c54      	ldr	r4, [pc, #336]	; (1bf4 <data_handler+0x7dc>)
    1aa4:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,false);
    1aa6:	2300      	movs	r3, #0
    1aa8:	2202      	movs	r2, #2
    1aaa:	2102      	movs	r1, #2
    1aac:	2000      	movs	r0, #0
    1aae:	4c51      	ldr	r4, [pc, #324]	; (1bf4 <data_handler+0x7dc>)
    1ab0:	47a0      	blx	r4
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,false);
    1ab2:	2300      	movs	r3, #0
    1ab4:	2204      	movs	r2, #4
    1ab6:	2101      	movs	r1, #1
    1ab8:	2000      	movs	r0, #0
    1aba:	4c4e      	ldr	r4, [pc, #312]	; (1bf4 <data_handler+0x7dc>)
    1abc:	47a0      	blx	r4
		led_bar = false;
    1abe:	4b4e      	ldr	r3, [pc, #312]	; (1bf8 <data_handler+0x7e0>)
    1ac0:	2200      	movs	r2, #0
    1ac2:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1ac4:	68fb      	ldr	r3, [r7, #12]
    1ac6:	0018      	movs	r0, r3
    1ac8:	4b3e      	ldr	r3, [pc, #248]	; (1bc4 <data_handler+0x7ac>)
    1aca:	4798      	blx	r3
		ble_uart_write(" - ");
    1acc:	4b4b      	ldr	r3, [pc, #300]	; (1bfc <data_handler+0x7e4>)
    1ace:	0018      	movs	r0, r3
    1ad0:	4b3c      	ldr	r3, [pc, #240]	; (1bc4 <data_handler+0x7ac>)
    1ad2:	4798      	blx	r3
		ble_uart_write("ACK");
    1ad4:	4b4a      	ldr	r3, [pc, #296]	; (1c00 <data_handler+0x7e8>)
    1ad6:	0018      	movs	r0, r3
    1ad8:	4b3a      	ldr	r3, [pc, #232]	; (1bc4 <data_handler+0x7ac>)
    1ada:	4798      	blx	r3
}
    1adc:	f000 fc19 	bl	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,HDL_ON,5) == 0)
    1ae0:	4949      	ldr	r1, [pc, #292]	; (1c08 <data_handler+0x7f0>)
    1ae2:	68fb      	ldr	r3, [r7, #12]
    1ae4:	2205      	movs	r2, #5
    1ae6:	0018      	movs	r0, r3
    1ae8:	4b1f      	ldr	r3, [pc, #124]	; (1b68 <data_handler+0x750>)
    1aea:	4798      	blx	r3
    1aec:	1e03      	subs	r3, r0, #0
    1aee:	d000      	beq.n	1af2 <data_handler+0x6da>
    1af0:	e092      	b.n	1c18 <data_handler+0x800>
		system_interrupt_disable_global();
    1af2:	4b46      	ldr	r3, [pc, #280]	; (1c0c <data_handler+0x7f4>)
    1af4:	4798      	blx	r3
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,true);
    1af6:	2301      	movs	r3, #1
    1af8:	2201      	movs	r2, #1
    1afa:	2102      	movs	r1, #2
    1afc:	2000      	movs	r0, #0
    1afe:	4c3d      	ldr	r4, [pc, #244]	; (1bf4 <data_handler+0x7dc>)
    1b00:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,true);
    1b02:	2301      	movs	r3, #1
    1b04:	2201      	movs	r2, #1
    1b06:	2101      	movs	r1, #1
    1b08:	2000      	movs	r0, #0
    1b0a:	4c3a      	ldr	r4, [pc, #232]	; (1bf4 <data_handler+0x7dc>)
    1b0c:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    1b0e:	2301      	movs	r3, #1
    1b10:	2200      	movs	r2, #0
    1b12:	2101      	movs	r1, #1
    1b14:	2000      	movs	r0, #0
    1b16:	4c37      	ldr	r4, [pc, #220]	; (1bf4 <data_handler+0x7dc>)
    1b18:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    1b1a:	2301      	movs	r3, #1
    1b1c:	2200      	movs	r2, #0
    1b1e:	2102      	movs	r1, #2
    1b20:	2000      	movs	r0, #0
    1b22:	4c34      	ldr	r4, [pc, #208]	; (1bf4 <data_handler+0x7dc>)
    1b24:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    1b26:	2301      	movs	r3, #1
    1b28:	2200      	movs	r2, #0
    1b2a:	2103      	movs	r1, #3
    1b2c:	2000      	movs	r0, #0
    1b2e:	4c31      	ldr	r4, [pc, #196]	; (1bf4 <data_handler+0x7dc>)
    1b30:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    1b32:	2301      	movs	r3, #1
    1b34:	2200      	movs	r2, #0
    1b36:	2104      	movs	r1, #4
    1b38:	2000      	movs	r0, #0
    1b3a:	4c2e      	ldr	r4, [pc, #184]	; (1bf4 <data_handler+0x7dc>)
    1b3c:	47a0      	blx	r4
		mcp23017_reset();
    1b3e:	4b34      	ldr	r3, [pc, #208]	; (1c10 <data_handler+0x7f8>)
    1b40:	4798      	blx	r3
		system_interrupt_enable_global();
    1b42:	4b34      	ldr	r3, [pc, #208]	; (1c14 <data_handler+0x7fc>)
    1b44:	4798      	blx	r3
		ble_uart_write(buffer);
    1b46:	68fb      	ldr	r3, [r7, #12]
    1b48:	0018      	movs	r0, r3
    1b4a:	4b1e      	ldr	r3, [pc, #120]	; (1bc4 <data_handler+0x7ac>)
    1b4c:	4798      	blx	r3
		ble_uart_write(" - ");
    1b4e:	4b2b      	ldr	r3, [pc, #172]	; (1bfc <data_handler+0x7e4>)
    1b50:	0018      	movs	r0, r3
    1b52:	4b1c      	ldr	r3, [pc, #112]	; (1bc4 <data_handler+0x7ac>)
    1b54:	4798      	blx	r3
		ble_uart_write("ACK");
    1b56:	4b2a      	ldr	r3, [pc, #168]	; (1c00 <data_handler+0x7e8>)
    1b58:	0018      	movs	r0, r3
    1b5a:	4b1a      	ldr	r3, [pc, #104]	; (1bc4 <data_handler+0x7ac>)
    1b5c:	4798      	blx	r3
}
    1b5e:	f000 fbd8 	bl	2312 <STACK_SIZE+0x312>
    1b62:	46c0      	nop			; (mov r8, r8)
    1b64:	00006dcc 	.word	0x00006dcc
    1b68:	00005c1f 	.word	0x00005c1f
    1b6c:	20000e3d 	.word	0x20000e3d
    1b70:	00006dd4 	.word	0x00006dd4
    1b74:	20000e40 	.word	0x20000e40
    1b78:	00006ddc 	.word	0x00006ddc
    1b7c:	00006de4 	.word	0x00006de4
    1b80:	20000a0a 	.word	0x20000a0a
    1b84:	00006dec 	.word	0x00006dec
    1b88:	00006df4 	.word	0x00006df4
    1b8c:	20000e25 	.word	0x20000e25
    1b90:	00006dfc 	.word	0x00006dfc
    1b94:	00006e04 	.word	0x00006e04
    1b98:	20000e48 	.word	0x20000e48
    1b9c:	00006e0c 	.word	0x00006e0c
    1ba0:	00006e14 	.word	0x00006e14
    1ba4:	00005c41 	.word	0x00005c41
    1ba8:	00005c11 	.word	0x00005c11
    1bac:	00006e18 	.word	0x00006e18
    1bb0:	00005b91 	.word	0x00005b91
    1bb4:	00004161 	.word	0x00004161
    1bb8:	00004195 	.word	0x00004195
    1bbc:	00006e20 	.word	0x00006e20
    1bc0:	00006e2c 	.word	0x00006e2c
    1bc4:	000012e5 	.word	0x000012e5
    1bc8:	00003d31 	.word	0x00003d31
    1bcc:	00006e3c 	.word	0x00006e3c
    1bd0:	20000e39 	.word	0x20000e39
    1bd4:	00006e44 	.word	0x00006e44
    1bd8:	00002d09 	.word	0x00002d09
    1bdc:	00006e4c 	.word	0x00006e4c
    1be0:	200009f5 	.word	0x200009f5
    1be4:	00006e54 	.word	0x00006e54
    1be8:	20000e46 	.word	0x20000e46
    1bec:	00006e5c 	.word	0x00006e5c
    1bf0:	00006e64 	.word	0x00006e64
    1bf4:	00002f81 	.word	0x00002f81
    1bf8:	20000e24 	.word	0x20000e24
    1bfc:	00006d94 	.word	0x00006d94
    1c00:	00006d98 	.word	0x00006d98
    1c04:	00006e6c 	.word	0x00006e6c
    1c08:	00006e74 	.word	0x00006e74
    1c0c:	000013fd 	.word	0x000013fd
    1c10:	00003571 	.word	0x00003571
    1c14:	000013e1 	.word	0x000013e1
	else if(strncmp(buffer,HDL_OFF,5) == 0)
    1c18:	49d9      	ldr	r1, [pc, #868]	; (1f80 <data_handler+0xb68>)
    1c1a:	68fb      	ldr	r3, [r7, #12]
    1c1c:	2205      	movs	r2, #5
    1c1e:	0018      	movs	r0, r3
    1c20:	4bd8      	ldr	r3, [pc, #864]	; (1f84 <data_handler+0xb6c>)
    1c22:	4798      	blx	r3
    1c24:	1e03      	subs	r3, r0, #0
    1c26:	d136      	bne.n	1c96 <data_handler+0x87e>
		system_interrupt_disable_global();
    1c28:	4bd7      	ldr	r3, [pc, #860]	; (1f88 <data_handler+0xb70>)
    1c2a:	4798      	blx	r3
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,false);
    1c2c:	2300      	movs	r3, #0
    1c2e:	2201      	movs	r2, #1
    1c30:	2102      	movs	r1, #2
    1c32:	2000      	movs	r0, #0
    1c34:	4cd5      	ldr	r4, [pc, #852]	; (1f8c <data_handler+0xb74>)
    1c36:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,false);
    1c38:	2300      	movs	r3, #0
    1c3a:	2201      	movs	r2, #1
    1c3c:	2101      	movs	r1, #1
    1c3e:	2000      	movs	r0, #0
    1c40:	4cd2      	ldr	r4, [pc, #840]	; (1f8c <data_handler+0xb74>)
    1c42:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    1c44:	2300      	movs	r3, #0
    1c46:	2200      	movs	r2, #0
    1c48:	2101      	movs	r1, #1
    1c4a:	2000      	movs	r0, #0
    1c4c:	4ccf      	ldr	r4, [pc, #828]	; (1f8c <data_handler+0xb74>)
    1c4e:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    1c50:	2300      	movs	r3, #0
    1c52:	2200      	movs	r2, #0
    1c54:	2102      	movs	r1, #2
    1c56:	2000      	movs	r0, #0
    1c58:	4ccc      	ldr	r4, [pc, #816]	; (1f8c <data_handler+0xb74>)
    1c5a:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    1c5c:	2300      	movs	r3, #0
    1c5e:	2200      	movs	r2, #0
    1c60:	2103      	movs	r1, #3
    1c62:	2000      	movs	r0, #0
    1c64:	4cc9      	ldr	r4, [pc, #804]	; (1f8c <data_handler+0xb74>)
    1c66:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    1c68:	2300      	movs	r3, #0
    1c6a:	2200      	movs	r2, #0
    1c6c:	2104      	movs	r1, #4
    1c6e:	2000      	movs	r0, #0
    1c70:	4cc6      	ldr	r4, [pc, #792]	; (1f8c <data_handler+0xb74>)
    1c72:	47a0      	blx	r4
		mcp23017_reset();
    1c74:	4bc6      	ldr	r3, [pc, #792]	; (1f90 <data_handler+0xb78>)
    1c76:	4798      	blx	r3
		system_interrupt_enable_global();
    1c78:	4bc6      	ldr	r3, [pc, #792]	; (1f94 <data_handler+0xb7c>)
    1c7a:	4798      	blx	r3
		ble_uart_write(buffer);
    1c7c:	68fb      	ldr	r3, [r7, #12]
    1c7e:	0018      	movs	r0, r3
    1c80:	4bc5      	ldr	r3, [pc, #788]	; (1f98 <data_handler+0xb80>)
    1c82:	4798      	blx	r3
		ble_uart_write(" - ");
    1c84:	4bc5      	ldr	r3, [pc, #788]	; (1f9c <data_handler+0xb84>)
    1c86:	0018      	movs	r0, r3
    1c88:	4bc3      	ldr	r3, [pc, #780]	; (1f98 <data_handler+0xb80>)
    1c8a:	4798      	blx	r3
		ble_uart_write("ACK");
    1c8c:	4bc4      	ldr	r3, [pc, #784]	; (1fa0 <data_handler+0xb88>)
    1c8e:	0018      	movs	r0, r3
    1c90:	4bc1      	ldr	r3, [pc, #772]	; (1f98 <data_handler+0xb80>)
    1c92:	4798      	blx	r3
}
    1c94:	e33d      	b.n	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,BRIAN_ON,7) == 0)
    1c96:	49c3      	ldr	r1, [pc, #780]	; (1fa4 <data_handler+0xb8c>)
    1c98:	68fb      	ldr	r3, [r7, #12]
    1c9a:	2207      	movs	r2, #7
    1c9c:	0018      	movs	r0, r3
    1c9e:	4bb9      	ldr	r3, [pc, #740]	; (1f84 <data_handler+0xb6c>)
    1ca0:	4798      	blx	r3
    1ca2:	1e03      	subs	r3, r0, #0
    1ca4:	d136      	bne.n	1d14 <data_handler+0x8fc>
		system_interrupt_disable_global();
    1ca6:	4bb8      	ldr	r3, [pc, #736]	; (1f88 <data_handler+0xb70>)
    1ca8:	4798      	blx	r3
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,true);
    1caa:	2301      	movs	r3, #1
    1cac:	2203      	movs	r2, #3
    1cae:	2102      	movs	r1, #2
    1cb0:	2000      	movs	r0, #0
    1cb2:	4cb6      	ldr	r4, [pc, #728]	; (1f8c <data_handler+0xb74>)
    1cb4:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,true);
    1cb6:	2301      	movs	r3, #1
    1cb8:	2203      	movs	r2, #3
    1cba:	2101      	movs	r1, #1
    1cbc:	2000      	movs	r0, #0
    1cbe:	4cb3      	ldr	r4, [pc, #716]	; (1f8c <data_handler+0xb74>)
    1cc0:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    1cc2:	2301      	movs	r3, #1
    1cc4:	2200      	movs	r2, #0
    1cc6:	2101      	movs	r1, #1
    1cc8:	2000      	movs	r0, #0
    1cca:	4cb0      	ldr	r4, [pc, #704]	; (1f8c <data_handler+0xb74>)
    1ccc:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    1cce:	2301      	movs	r3, #1
    1cd0:	2200      	movs	r2, #0
    1cd2:	2102      	movs	r1, #2
    1cd4:	2000      	movs	r0, #0
    1cd6:	4cad      	ldr	r4, [pc, #692]	; (1f8c <data_handler+0xb74>)
    1cd8:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    1cda:	2301      	movs	r3, #1
    1cdc:	2200      	movs	r2, #0
    1cde:	2103      	movs	r1, #3
    1ce0:	2000      	movs	r0, #0
    1ce2:	4caa      	ldr	r4, [pc, #680]	; (1f8c <data_handler+0xb74>)
    1ce4:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    1ce6:	2301      	movs	r3, #1
    1ce8:	2200      	movs	r2, #0
    1cea:	2104      	movs	r1, #4
    1cec:	2000      	movs	r0, #0
    1cee:	4ca7      	ldr	r4, [pc, #668]	; (1f8c <data_handler+0xb74>)
    1cf0:	47a0      	blx	r4
		mcp23017_reset();
    1cf2:	4ba7      	ldr	r3, [pc, #668]	; (1f90 <data_handler+0xb78>)
    1cf4:	4798      	blx	r3
		system_interrupt_enable_global();
    1cf6:	4ba7      	ldr	r3, [pc, #668]	; (1f94 <data_handler+0xb7c>)
    1cf8:	4798      	blx	r3
		ble_uart_write(buffer);
    1cfa:	68fb      	ldr	r3, [r7, #12]
    1cfc:	0018      	movs	r0, r3
    1cfe:	4ba6      	ldr	r3, [pc, #664]	; (1f98 <data_handler+0xb80>)
    1d00:	4798      	blx	r3
		ble_uart_write(" - ");
    1d02:	4ba6      	ldr	r3, [pc, #664]	; (1f9c <data_handler+0xb84>)
    1d04:	0018      	movs	r0, r3
    1d06:	4ba4      	ldr	r3, [pc, #656]	; (1f98 <data_handler+0xb80>)
    1d08:	4798      	blx	r3
		ble_uart_write("ACK");
    1d0a:	4ba5      	ldr	r3, [pc, #660]	; (1fa0 <data_handler+0xb88>)
    1d0c:	0018      	movs	r0, r3
    1d0e:	4ba2      	ldr	r3, [pc, #648]	; (1f98 <data_handler+0xb80>)
    1d10:	4798      	blx	r3
}
    1d12:	e2fe      	b.n	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,BRIAN_OFF,7) == 0)
    1d14:	49a4      	ldr	r1, [pc, #656]	; (1fa8 <data_handler+0xb90>)
    1d16:	68fb      	ldr	r3, [r7, #12]
    1d18:	2207      	movs	r2, #7
    1d1a:	0018      	movs	r0, r3
    1d1c:	4b99      	ldr	r3, [pc, #612]	; (1f84 <data_handler+0xb6c>)
    1d1e:	4798      	blx	r3
    1d20:	1e03      	subs	r3, r0, #0
    1d22:	d136      	bne.n	1d92 <data_handler+0x97a>
		system_interrupt_disable_global();
    1d24:	4b98      	ldr	r3, [pc, #608]	; (1f88 <data_handler+0xb70>)
    1d26:	4798      	blx	r3
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,false);
    1d28:	2300      	movs	r3, #0
    1d2a:	2203      	movs	r2, #3
    1d2c:	2102      	movs	r1, #2
    1d2e:	2000      	movs	r0, #0
    1d30:	4c96      	ldr	r4, [pc, #600]	; (1f8c <data_handler+0xb74>)
    1d32:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,false);
    1d34:	2300      	movs	r3, #0
    1d36:	2203      	movs	r2, #3
    1d38:	2101      	movs	r1, #1
    1d3a:	2000      	movs	r0, #0
    1d3c:	4c93      	ldr	r4, [pc, #588]	; (1f8c <data_handler+0xb74>)
    1d3e:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    1d40:	2300      	movs	r3, #0
    1d42:	2200      	movs	r2, #0
    1d44:	2101      	movs	r1, #1
    1d46:	2000      	movs	r0, #0
    1d48:	4c90      	ldr	r4, [pc, #576]	; (1f8c <data_handler+0xb74>)
    1d4a:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    1d4c:	2300      	movs	r3, #0
    1d4e:	2200      	movs	r2, #0
    1d50:	2102      	movs	r1, #2
    1d52:	2000      	movs	r0, #0
    1d54:	4c8d      	ldr	r4, [pc, #564]	; (1f8c <data_handler+0xb74>)
    1d56:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    1d58:	2300      	movs	r3, #0
    1d5a:	2200      	movs	r2, #0
    1d5c:	2103      	movs	r1, #3
    1d5e:	2000      	movs	r0, #0
    1d60:	4c8a      	ldr	r4, [pc, #552]	; (1f8c <data_handler+0xb74>)
    1d62:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    1d64:	2300      	movs	r3, #0
    1d66:	2200      	movs	r2, #0
    1d68:	2104      	movs	r1, #4
    1d6a:	2000      	movs	r0, #0
    1d6c:	4c87      	ldr	r4, [pc, #540]	; (1f8c <data_handler+0xb74>)
    1d6e:	47a0      	blx	r4
		mcp23017_reset();
    1d70:	4b87      	ldr	r3, [pc, #540]	; (1f90 <data_handler+0xb78>)
    1d72:	4798      	blx	r3
		system_interrupt_enable_global();
    1d74:	4b87      	ldr	r3, [pc, #540]	; (1f94 <data_handler+0xb7c>)
    1d76:	4798      	blx	r3
		ble_uart_write(buffer);
    1d78:	68fb      	ldr	r3, [r7, #12]
    1d7a:	0018      	movs	r0, r3
    1d7c:	4b86      	ldr	r3, [pc, #536]	; (1f98 <data_handler+0xb80>)
    1d7e:	4798      	blx	r3
		ble_uart_write(" - ");
    1d80:	4b86      	ldr	r3, [pc, #536]	; (1f9c <data_handler+0xb84>)
    1d82:	0018      	movs	r0, r3
    1d84:	4b84      	ldr	r3, [pc, #528]	; (1f98 <data_handler+0xb80>)
    1d86:	4798      	blx	r3
		ble_uart_write("ACK");
    1d88:	4b85      	ldr	r3, [pc, #532]	; (1fa0 <data_handler+0xb88>)
    1d8a:	0018      	movs	r0, r3
    1d8c:	4b82      	ldr	r3, [pc, #520]	; (1f98 <data_handler+0xb80>)
    1d8e:	4798      	blx	r3
}
    1d90:	e2bf      	b.n	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,FLASHY1_ON,7) == 0)
    1d92:	4986      	ldr	r1, [pc, #536]	; (1fac <data_handler+0xb94>)
    1d94:	68fb      	ldr	r3, [r7, #12]
    1d96:	2207      	movs	r2, #7
    1d98:	0018      	movs	r0, r3
    1d9a:	4b7a      	ldr	r3, [pc, #488]	; (1f84 <data_handler+0xb6c>)
    1d9c:	4798      	blx	r3
    1d9e:	1e03      	subs	r3, r0, #0
    1da0:	d10f      	bne.n	1dc2 <data_handler+0x9aa>
		flashy1 = true;
    1da2:	4b83      	ldr	r3, [pc, #524]	; (1fb0 <data_handler+0xb98>)
    1da4:	2201      	movs	r2, #1
    1da6:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1da8:	68fb      	ldr	r3, [r7, #12]
    1daa:	0018      	movs	r0, r3
    1dac:	4b7a      	ldr	r3, [pc, #488]	; (1f98 <data_handler+0xb80>)
    1dae:	4798      	blx	r3
		ble_uart_write(" - ");
    1db0:	4b7a      	ldr	r3, [pc, #488]	; (1f9c <data_handler+0xb84>)
    1db2:	0018      	movs	r0, r3
    1db4:	4b78      	ldr	r3, [pc, #480]	; (1f98 <data_handler+0xb80>)
    1db6:	4798      	blx	r3
		ble_uart_write("ACK");
    1db8:	4b79      	ldr	r3, [pc, #484]	; (1fa0 <data_handler+0xb88>)
    1dba:	0018      	movs	r0, r3
    1dbc:	4b76      	ldr	r3, [pc, #472]	; (1f98 <data_handler+0xb80>)
    1dbe:	4798      	blx	r3
}
    1dc0:	e2a7      	b.n	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,FLASHY1_OFF,7) == 0)
    1dc2:	497c      	ldr	r1, [pc, #496]	; (1fb4 <data_handler+0xb9c>)
    1dc4:	68fb      	ldr	r3, [r7, #12]
    1dc6:	2207      	movs	r2, #7
    1dc8:	0018      	movs	r0, r3
    1dca:	4b6e      	ldr	r3, [pc, #440]	; (1f84 <data_handler+0xb6c>)
    1dcc:	4798      	blx	r3
    1dce:	1e03      	subs	r3, r0, #0
    1dd0:	d111      	bne.n	1df6 <data_handler+0x9de>
		flashy1 = false;
    1dd2:	4b77      	ldr	r3, [pc, #476]	; (1fb0 <data_handler+0xb98>)
    1dd4:	2200      	movs	r2, #0
    1dd6:	701a      	strb	r2, [r3, #0]
		reset_all_lights();
    1dd8:	4b77      	ldr	r3, [pc, #476]	; (1fb8 <data_handler+0xba0>)
    1dda:	4798      	blx	r3
		ble_uart_write(buffer);
    1ddc:	68fb      	ldr	r3, [r7, #12]
    1dde:	0018      	movs	r0, r3
    1de0:	4b6d      	ldr	r3, [pc, #436]	; (1f98 <data_handler+0xb80>)
    1de2:	4798      	blx	r3
		ble_uart_write(" - ");
    1de4:	4b6d      	ldr	r3, [pc, #436]	; (1f9c <data_handler+0xb84>)
    1de6:	0018      	movs	r0, r3
    1de8:	4b6b      	ldr	r3, [pc, #428]	; (1f98 <data_handler+0xb80>)
    1dea:	4798      	blx	r3
		ble_uart_write("ACK");
    1dec:	4b6c      	ldr	r3, [pc, #432]	; (1fa0 <data_handler+0xb88>)
    1dee:	0018      	movs	r0, r3
    1df0:	4b69      	ldr	r3, [pc, #420]	; (1f98 <data_handler+0xb80>)
    1df2:	4798      	blx	r3
}
    1df4:	e28d      	b.n	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,FLASHY2_ON,7) == 0)
    1df6:	4971      	ldr	r1, [pc, #452]	; (1fbc <data_handler+0xba4>)
    1df8:	68fb      	ldr	r3, [r7, #12]
    1dfa:	2207      	movs	r2, #7
    1dfc:	0018      	movs	r0, r3
    1dfe:	4b61      	ldr	r3, [pc, #388]	; (1f84 <data_handler+0xb6c>)
    1e00:	4798      	blx	r3
    1e02:	1e03      	subs	r3, r0, #0
    1e04:	d10f      	bne.n	1e26 <data_handler+0xa0e>
		flashy2 = true;
    1e06:	4b6e      	ldr	r3, [pc, #440]	; (1fc0 <data_handler+0xba8>)
    1e08:	2201      	movs	r2, #1
    1e0a:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1e0c:	68fb      	ldr	r3, [r7, #12]
    1e0e:	0018      	movs	r0, r3
    1e10:	4b61      	ldr	r3, [pc, #388]	; (1f98 <data_handler+0xb80>)
    1e12:	4798      	blx	r3
		ble_uart_write(" - ");
    1e14:	4b61      	ldr	r3, [pc, #388]	; (1f9c <data_handler+0xb84>)
    1e16:	0018      	movs	r0, r3
    1e18:	4b5f      	ldr	r3, [pc, #380]	; (1f98 <data_handler+0xb80>)
    1e1a:	4798      	blx	r3
		ble_uart_write("ACK");
    1e1c:	4b60      	ldr	r3, [pc, #384]	; (1fa0 <data_handler+0xb88>)
    1e1e:	0018      	movs	r0, r3
    1e20:	4b5d      	ldr	r3, [pc, #372]	; (1f98 <data_handler+0xb80>)
    1e22:	4798      	blx	r3
}
    1e24:	e275      	b.n	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,FLASHY2_OFF,7) == 0)
    1e26:	4967      	ldr	r1, [pc, #412]	; (1fc4 <data_handler+0xbac>)
    1e28:	68fb      	ldr	r3, [r7, #12]
    1e2a:	2207      	movs	r2, #7
    1e2c:	0018      	movs	r0, r3
    1e2e:	4b55      	ldr	r3, [pc, #340]	; (1f84 <data_handler+0xb6c>)
    1e30:	4798      	blx	r3
    1e32:	1e03      	subs	r3, r0, #0
    1e34:	d111      	bne.n	1e5a <data_handler+0xa42>
		reset_all_lights();
    1e36:	4b60      	ldr	r3, [pc, #384]	; (1fb8 <data_handler+0xba0>)
    1e38:	4798      	blx	r3
		flashy2 = false;
    1e3a:	4b61      	ldr	r3, [pc, #388]	; (1fc0 <data_handler+0xba8>)
    1e3c:	2200      	movs	r2, #0
    1e3e:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1e40:	68fb      	ldr	r3, [r7, #12]
    1e42:	0018      	movs	r0, r3
    1e44:	4b54      	ldr	r3, [pc, #336]	; (1f98 <data_handler+0xb80>)
    1e46:	4798      	blx	r3
		ble_uart_write(" - ");
    1e48:	4b54      	ldr	r3, [pc, #336]	; (1f9c <data_handler+0xb84>)
    1e4a:	0018      	movs	r0, r3
    1e4c:	4b52      	ldr	r3, [pc, #328]	; (1f98 <data_handler+0xb80>)
    1e4e:	4798      	blx	r3
		ble_uart_write("ACK");
    1e50:	4b53      	ldr	r3, [pc, #332]	; (1fa0 <data_handler+0xb88>)
    1e52:	0018      	movs	r0, r3
    1e54:	4b50      	ldr	r3, [pc, #320]	; (1f98 <data_handler+0xb80>)
    1e56:	4798      	blx	r3
}
    1e58:	e25b      	b.n	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,FLASHY3_ON,7) == 0)
    1e5a:	495b      	ldr	r1, [pc, #364]	; (1fc8 <data_handler+0xbb0>)
    1e5c:	68fb      	ldr	r3, [r7, #12]
    1e5e:	2207      	movs	r2, #7
    1e60:	0018      	movs	r0, r3
    1e62:	4b48      	ldr	r3, [pc, #288]	; (1f84 <data_handler+0xb6c>)
    1e64:	4798      	blx	r3
    1e66:	1e03      	subs	r3, r0, #0
    1e68:	d10f      	bne.n	1e8a <data_handler+0xa72>
		flashy3 = true;
    1e6a:	4b58      	ldr	r3, [pc, #352]	; (1fcc <data_handler+0xbb4>)
    1e6c:	2201      	movs	r2, #1
    1e6e:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1e70:	68fb      	ldr	r3, [r7, #12]
    1e72:	0018      	movs	r0, r3
    1e74:	4b48      	ldr	r3, [pc, #288]	; (1f98 <data_handler+0xb80>)
    1e76:	4798      	blx	r3
		ble_uart_write(" - ");
    1e78:	4b48      	ldr	r3, [pc, #288]	; (1f9c <data_handler+0xb84>)
    1e7a:	0018      	movs	r0, r3
    1e7c:	4b46      	ldr	r3, [pc, #280]	; (1f98 <data_handler+0xb80>)
    1e7e:	4798      	blx	r3
		ble_uart_write("ACK");
    1e80:	4b47      	ldr	r3, [pc, #284]	; (1fa0 <data_handler+0xb88>)
    1e82:	0018      	movs	r0, r3
    1e84:	4b44      	ldr	r3, [pc, #272]	; (1f98 <data_handler+0xb80>)
    1e86:	4798      	blx	r3
}
    1e88:	e243      	b.n	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,FLASHY3_OFF,7) == 0)
    1e8a:	4951      	ldr	r1, [pc, #324]	; (1fd0 <data_handler+0xbb8>)
    1e8c:	68fb      	ldr	r3, [r7, #12]
    1e8e:	2207      	movs	r2, #7
    1e90:	0018      	movs	r0, r3
    1e92:	4b3c      	ldr	r3, [pc, #240]	; (1f84 <data_handler+0xb6c>)
    1e94:	4798      	blx	r3
    1e96:	1e03      	subs	r3, r0, #0
    1e98:	d111      	bne.n	1ebe <data_handler+0xaa6>
		reset_all_lights();
    1e9a:	4b47      	ldr	r3, [pc, #284]	; (1fb8 <data_handler+0xba0>)
    1e9c:	4798      	blx	r3
		flashy3 = false;
    1e9e:	4b4b      	ldr	r3, [pc, #300]	; (1fcc <data_handler+0xbb4>)
    1ea0:	2200      	movs	r2, #0
    1ea2:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1ea4:	68fb      	ldr	r3, [r7, #12]
    1ea6:	0018      	movs	r0, r3
    1ea8:	4b3b      	ldr	r3, [pc, #236]	; (1f98 <data_handler+0xb80>)
    1eaa:	4798      	blx	r3
		ble_uart_write(" - ");
    1eac:	4b3b      	ldr	r3, [pc, #236]	; (1f9c <data_handler+0xb84>)
    1eae:	0018      	movs	r0, r3
    1eb0:	4b39      	ldr	r3, [pc, #228]	; (1f98 <data_handler+0xb80>)
    1eb2:	4798      	blx	r3
		ble_uart_write("ACK");
    1eb4:	4b3a      	ldr	r3, [pc, #232]	; (1fa0 <data_handler+0xb88>)
    1eb6:	0018      	movs	r0, r3
    1eb8:	4b37      	ldr	r3, [pc, #220]	; (1f98 <data_handler+0xb80>)
    1eba:	4798      	blx	r3
}
    1ebc:	e229      	b.n	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,FLASHYFADE_ON,8) == 0)
    1ebe:	4945      	ldr	r1, [pc, #276]	; (1fd4 <data_handler+0xbbc>)
    1ec0:	68fb      	ldr	r3, [r7, #12]
    1ec2:	2208      	movs	r2, #8
    1ec4:	0018      	movs	r0, r3
    1ec6:	4b2f      	ldr	r3, [pc, #188]	; (1f84 <data_handler+0xb6c>)
    1ec8:	4798      	blx	r3
    1eca:	1e03      	subs	r3, r0, #0
    1ecc:	d10f      	bne.n	1eee <data_handler+0xad6>
		flashyfade = true;
    1ece:	4b42      	ldr	r3, [pc, #264]	; (1fd8 <data_handler+0xbc0>)
    1ed0:	2201      	movs	r2, #1
    1ed2:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1ed4:	68fb      	ldr	r3, [r7, #12]
    1ed6:	0018      	movs	r0, r3
    1ed8:	4b2f      	ldr	r3, [pc, #188]	; (1f98 <data_handler+0xb80>)
    1eda:	4798      	blx	r3
		ble_uart_write(" - ");
    1edc:	4b2f      	ldr	r3, [pc, #188]	; (1f9c <data_handler+0xb84>)
    1ede:	0018      	movs	r0, r3
    1ee0:	4b2d      	ldr	r3, [pc, #180]	; (1f98 <data_handler+0xb80>)
    1ee2:	4798      	blx	r3
		ble_uart_write("ACK");
    1ee4:	4b2e      	ldr	r3, [pc, #184]	; (1fa0 <data_handler+0xb88>)
    1ee6:	0018      	movs	r0, r3
    1ee8:	4b2b      	ldr	r3, [pc, #172]	; (1f98 <data_handler+0xb80>)
    1eea:	4798      	blx	r3
}
    1eec:	e211      	b.n	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,FLASHYFADE_OFF,8) == 0)
    1eee:	493b      	ldr	r1, [pc, #236]	; (1fdc <data_handler+0xbc4>)
    1ef0:	68fb      	ldr	r3, [r7, #12]
    1ef2:	2208      	movs	r2, #8
    1ef4:	0018      	movs	r0, r3
    1ef6:	4b23      	ldr	r3, [pc, #140]	; (1f84 <data_handler+0xb6c>)
    1ef8:	4798      	blx	r3
    1efa:	1e03      	subs	r3, r0, #0
    1efc:	d111      	bne.n	1f22 <data_handler+0xb0a>
		reset_all_lights();
    1efe:	4b2e      	ldr	r3, [pc, #184]	; (1fb8 <data_handler+0xba0>)
    1f00:	4798      	blx	r3
		flashyfade = false;
    1f02:	4b35      	ldr	r3, [pc, #212]	; (1fd8 <data_handler+0xbc0>)
    1f04:	2200      	movs	r2, #0
    1f06:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1f08:	68fb      	ldr	r3, [r7, #12]
    1f0a:	0018      	movs	r0, r3
    1f0c:	4b22      	ldr	r3, [pc, #136]	; (1f98 <data_handler+0xb80>)
    1f0e:	4798      	blx	r3
		ble_uart_write(" - ");
    1f10:	4b22      	ldr	r3, [pc, #136]	; (1f9c <data_handler+0xb84>)
    1f12:	0018      	movs	r0, r3
    1f14:	4b20      	ldr	r3, [pc, #128]	; (1f98 <data_handler+0xb80>)
    1f16:	4798      	blx	r3
		ble_uart_write("ACK");
    1f18:	4b21      	ldr	r3, [pc, #132]	; (1fa0 <data_handler+0xb88>)
    1f1a:	0018      	movs	r0, r3
    1f1c:	4b1e      	ldr	r3, [pc, #120]	; (1f98 <data_handler+0xb80>)
    1f1e:	4798      	blx	r3
}
    1f20:	e1f7      	b.n	2312 <STACK_SIZE+0x312>
	else if (strncmp(buffer,MASTER_RESET,10) == 0)
    1f22:	492f      	ldr	r1, [pc, #188]	; (1fe0 <data_handler+0xbc8>)
    1f24:	68fb      	ldr	r3, [r7, #12]
    1f26:	220a      	movs	r2, #10
    1f28:	0018      	movs	r0, r3
    1f2a:	4b16      	ldr	r3, [pc, #88]	; (1f84 <data_handler+0xb6c>)
    1f2c:	4798      	blx	r3
    1f2e:	1e03      	subs	r3, r0, #0
    1f30:	d168      	bne.n	2004 <STACK_SIZE+0x4>
		ble_uart_write("RESET ACK\n");
    1f32:	4b2c      	ldr	r3, [pc, #176]	; (1fe4 <data_handler+0xbcc>)
    1f34:	0018      	movs	r0, r3
    1f36:	4b18      	ldr	r3, [pc, #96]	; (1f98 <data_handler+0xb80>)
    1f38:	4798      	blx	r3
		delay_ms(250);
    1f3a:	2000      	movs	r0, #0
    1f3c:	4b2a      	ldr	r3, [pc, #168]	; (1fe8 <data_handler+0xbd0>)
    1f3e:	4798      	blx	r3
    1f40:	0003      	movs	r3, r0
    1f42:	603b      	str	r3, [r7, #0]
    1f44:	2300      	movs	r3, #0
    1f46:	607b      	str	r3, [r7, #4]
    1f48:	4c28      	ldr	r4, [pc, #160]	; (1fec <data_handler+0xbd4>)
    1f4a:	22fa      	movs	r2, #250	; 0xfa
    1f4c:	2300      	movs	r3, #0
    1f4e:	6838      	ldr	r0, [r7, #0]
    1f50:	6879      	ldr	r1, [r7, #4]
    1f52:	47a0      	blx	r4
    1f54:	0003      	movs	r3, r0
    1f56:	000c      	movs	r4, r1
    1f58:	0019      	movs	r1, r3
    1f5a:	0022      	movs	r2, r4
    1f5c:	4b24      	ldr	r3, [pc, #144]	; (1ff0 <data_handler+0xbd8>)
    1f5e:	2400      	movs	r4, #0
    1f60:	18c9      	adds	r1, r1, r3
    1f62:	4162      	adcs	r2, r4
    1f64:	0008      	movs	r0, r1
    1f66:	0011      	movs	r1, r2
    1f68:	4c22      	ldr	r4, [pc, #136]	; (1ff4 <data_handler+0xbdc>)
    1f6a:	4a23      	ldr	r2, [pc, #140]	; (1ff8 <data_handler+0xbe0>)
    1f6c:	2300      	movs	r3, #0
    1f6e:	47a0      	blx	r4
    1f70:	0003      	movs	r3, r0
    1f72:	000c      	movs	r4, r1
    1f74:	0018      	movs	r0, r3
    1f76:	4b21      	ldr	r3, [pc, #132]	; (1ffc <data_handler+0xbe4>)
    1f78:	4798      	blx	r3
		wdt_init();
    1f7a:	4b21      	ldr	r3, [pc, #132]	; (2000 <STACK_SIZE>)
    1f7c:	4798      	blx	r3
		while (1)
    1f7e:	e7fe      	b.n	1f7e <data_handler+0xb66>
    1f80:	00006e7c 	.word	0x00006e7c
    1f84:	00005c1f 	.word	0x00005c1f
    1f88:	000013fd 	.word	0x000013fd
    1f8c:	00002f81 	.word	0x00002f81
    1f90:	00003571 	.word	0x00003571
    1f94:	000013e1 	.word	0x000013e1
    1f98:	000012e5 	.word	0x000012e5
    1f9c:	00006d94 	.word	0x00006d94
    1fa0:	00006d98 	.word	0x00006d98
    1fa4:	00006e84 	.word	0x00006e84
    1fa8:	00006e8c 	.word	0x00006e8c
    1fac:	00006e94 	.word	0x00006e94
    1fb0:	20000a10 	.word	0x20000a10
    1fb4:	00006e9c 	.word	0x00006e9c
    1fb8:	00002d09 	.word	0x00002d09
    1fbc:	00006ea4 	.word	0x00006ea4
    1fc0:	20000e27 	.word	0x20000e27
    1fc4:	00006eac 	.word	0x00006eac
    1fc8:	00006eb4 	.word	0x00006eb4
    1fcc:	20000e45 	.word	0x20000e45
    1fd0:	00006ebc 	.word	0x00006ebc
    1fd4:	00006ec4 	.word	0x00006ec4
    1fd8:	20000e43 	.word	0x20000e43
    1fdc:	00006ed0 	.word	0x00006ed0
    1fe0:	00006edc 	.word	0x00006edc
    1fe4:	00006ee8 	.word	0x00006ee8
    1fe8:	00004b0d 	.word	0x00004b0d
    1fec:	000056f1 	.word	0x000056f1
    1ff0:	00001b57 	.word	0x00001b57
    1ff4:	000056b1 	.word	0x000056b1
    1ff8:	00001b58 	.word	0x00001b58
    1ffc:	20000001 	.word	0x20000001
    2000:	000006fd 	.word	0x000006fd
	else if (strncmp(buffer,MINOR_RESET,sizeof(MINOR_RESET)-1) == 0)
    2004:	49c5      	ldr	r1, [pc, #788]	; (231c <STACK_SIZE+0x31c>)
    2006:	68fb      	ldr	r3, [r7, #12]
    2008:	2209      	movs	r2, #9
    200a:	0018      	movs	r0, r3
    200c:	4bc4      	ldr	r3, [pc, #784]	; (2320 <STACK_SIZE+0x320>)
    200e:	4798      	blx	r3
    2010:	1e03      	subs	r3, r0, #0
    2012:	d12f      	bne.n	2074 <STACK_SIZE+0x74>
		ble_uart_write("MINOR RESET ACK\n");
    2014:	4bc3      	ldr	r3, [pc, #780]	; (2324 <STACK_SIZE+0x324>)
    2016:	0018      	movs	r0, r3
    2018:	4bc3      	ldr	r3, [pc, #780]	; (2328 <STACK_SIZE+0x328>)
    201a:	4798      	blx	r3
		delay_ms(250);
    201c:	2000      	movs	r0, #0
    201e:	4bc3      	ldr	r3, [pc, #780]	; (232c <STACK_SIZE+0x32c>)
    2020:	4798      	blx	r3
    2022:	0003      	movs	r3, r0
    2024:	001d      	movs	r5, r3
    2026:	2300      	movs	r3, #0
    2028:	001e      	movs	r6, r3
    202a:	4cc1      	ldr	r4, [pc, #772]	; (2330 <STACK_SIZE+0x330>)
    202c:	22fa      	movs	r2, #250	; 0xfa
    202e:	2300      	movs	r3, #0
    2030:	0028      	movs	r0, r5
    2032:	0031      	movs	r1, r6
    2034:	47a0      	blx	r4
    2036:	0003      	movs	r3, r0
    2038:	000c      	movs	r4, r1
    203a:	0019      	movs	r1, r3
    203c:	0022      	movs	r2, r4
    203e:	4bbd      	ldr	r3, [pc, #756]	; (2334 <STACK_SIZE+0x334>)
    2040:	2400      	movs	r4, #0
    2042:	18c9      	adds	r1, r1, r3
    2044:	4162      	adcs	r2, r4
    2046:	0008      	movs	r0, r1
    2048:	0011      	movs	r1, r2
    204a:	4cbb      	ldr	r4, [pc, #748]	; (2338 <STACK_SIZE+0x338>)
    204c:	4abb      	ldr	r2, [pc, #748]	; (233c <STACK_SIZE+0x33c>)
    204e:	2300      	movs	r3, #0
    2050:	47a0      	blx	r4
    2052:	0003      	movs	r3, r0
    2054:	000c      	movs	r4, r1
    2056:	0018      	movs	r0, r3
    2058:	4bb9      	ldr	r3, [pc, #740]	; (2340 <STACK_SIZE+0x340>)
    205a:	4798      	blx	r3
		sounds_reset();
    205c:	4bb9      	ldr	r3, [pc, #740]	; (2344 <STACK_SIZE+0x344>)
    205e:	4798      	blx	r3
		init_all_ports();
    2060:	4bb9      	ldr	r3, [pc, #740]	; (2348 <STACK_SIZE+0x348>)
    2062:	4798      	blx	r3
		party = false;
    2064:	4bb9      	ldr	r3, [pc, #740]	; (234c <STACK_SIZE+0x34c>)
    2066:	2200      	movs	r2, #0
    2068:	701a      	strb	r2, [r3, #0]
		ble_uart_write("MINOR RESET DONE\n");
    206a:	4bb9      	ldr	r3, [pc, #740]	; (2350 <STACK_SIZE+0x350>)
    206c:	0018      	movs	r0, r3
    206e:	4bae      	ldr	r3, [pc, #696]	; (2328 <STACK_SIZE+0x328>)
    2070:	4798      	blx	r3
}
    2072:	e14e      	b.n	2312 <STACK_SIZE+0x312>
	else if (strncmp(buffer,PARTY_TRESH_0,sizeof(PARTY_TRESH_0)-1)  == 0)
    2074:	49b7      	ldr	r1, [pc, #732]	; (2354 <STACK_SIZE+0x354>)
    2076:	68fb      	ldr	r3, [r7, #12]
    2078:	2208      	movs	r2, #8
    207a:	0018      	movs	r0, r3
    207c:	4ba8      	ldr	r3, [pc, #672]	; (2320 <STACK_SIZE+0x320>)
    207e:	4798      	blx	r3
    2080:	1e03      	subs	r3, r0, #0
    2082:	d10f      	bne.n	20a4 <STACK_SIZE+0xa4>
		int temp = sizeof(PARTY_TRESH_0);//party_treshold;
    2084:	2309      	movs	r3, #9
    2086:	657b      	str	r3, [r7, #84]	; 0x54
		sscanf(buffer,"PRTTRSH0 %d",&temp);
    2088:	234c      	movs	r3, #76	; 0x4c
    208a:	2208      	movs	r2, #8
    208c:	18ba      	adds	r2, r7, r2
    208e:	18d2      	adds	r2, r2, r3
    2090:	49b1      	ldr	r1, [pc, #708]	; (2358 <STACK_SIZE+0x358>)
    2092:	68fb      	ldr	r3, [r7, #12]
    2094:	0018      	movs	r0, r3
    2096:	4bb1      	ldr	r3, [pc, #708]	; (235c <STACK_SIZE+0x35c>)
    2098:	4798      	blx	r3
		party_thresholds[0] = (uint16_t)temp;
    209a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    209c:	b29a      	uxth	r2, r3
    209e:	4bb0      	ldr	r3, [pc, #704]	; (2360 <STACK_SIZE+0x360>)
    20a0:	801a      	strh	r2, [r3, #0]
}
    20a2:	e136      	b.n	2312 <STACK_SIZE+0x312>
	else if (strncmp(buffer,PARTY_TRESH_1,sizeof(PARTY_TRESH_1)-1) == 0)
    20a4:	49af      	ldr	r1, [pc, #700]	; (2364 <STACK_SIZE+0x364>)
    20a6:	68fb      	ldr	r3, [r7, #12]
    20a8:	2208      	movs	r2, #8
    20aa:	0018      	movs	r0, r3
    20ac:	4b9c      	ldr	r3, [pc, #624]	; (2320 <STACK_SIZE+0x320>)
    20ae:	4798      	blx	r3
    20b0:	1e03      	subs	r3, r0, #0
    20b2:	d10f      	bne.n	20d4 <STACK_SIZE+0xd4>
		int temp = party_treshold;
    20b4:	4bac      	ldr	r3, [pc, #688]	; (2368 <STACK_SIZE+0x368>)
    20b6:	653b      	str	r3, [r7, #80]	; 0x50
		sscanf(buffer,"PRTTRSH1 %d",&temp);
    20b8:	2348      	movs	r3, #72	; 0x48
    20ba:	2208      	movs	r2, #8
    20bc:	18ba      	adds	r2, r7, r2
    20be:	18d2      	adds	r2, r2, r3
    20c0:	49aa      	ldr	r1, [pc, #680]	; (236c <STACK_SIZE+0x36c>)
    20c2:	68fb      	ldr	r3, [r7, #12]
    20c4:	0018      	movs	r0, r3
    20c6:	4ba5      	ldr	r3, [pc, #660]	; (235c <STACK_SIZE+0x35c>)
    20c8:	4798      	blx	r3
		party_thresholds[1] = (uint16_t)temp;
    20ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    20cc:	b29a      	uxth	r2, r3
    20ce:	4ba4      	ldr	r3, [pc, #656]	; (2360 <STACK_SIZE+0x360>)
    20d0:	805a      	strh	r2, [r3, #2]
}
    20d2:	e11e      	b.n	2312 <STACK_SIZE+0x312>
	else if (strncmp(buffer,PARTY_TRESH_2,sizeof(PARTY_TRESH_2)-1) == 0)
    20d4:	49a6      	ldr	r1, [pc, #664]	; (2370 <STACK_SIZE+0x370>)
    20d6:	68fb      	ldr	r3, [r7, #12]
    20d8:	2208      	movs	r2, #8
    20da:	0018      	movs	r0, r3
    20dc:	4b90      	ldr	r3, [pc, #576]	; (2320 <STACK_SIZE+0x320>)
    20de:	4798      	blx	r3
    20e0:	1e03      	subs	r3, r0, #0
    20e2:	d10f      	bne.n	2104 <STACK_SIZE+0x104>
		int temp = party_treshold;
    20e4:	4ba0      	ldr	r3, [pc, #640]	; (2368 <STACK_SIZE+0x368>)
    20e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		sscanf(buffer,"PRTTRSH2 %d",&temp);
    20e8:	2344      	movs	r3, #68	; 0x44
    20ea:	2208      	movs	r2, #8
    20ec:	18ba      	adds	r2, r7, r2
    20ee:	18d2      	adds	r2, r2, r3
    20f0:	49a0      	ldr	r1, [pc, #640]	; (2374 <STACK_SIZE+0x374>)
    20f2:	68fb      	ldr	r3, [r7, #12]
    20f4:	0018      	movs	r0, r3
    20f6:	4b99      	ldr	r3, [pc, #612]	; (235c <STACK_SIZE+0x35c>)
    20f8:	4798      	blx	r3
		party_thresholds[2] = (uint16_t)temp;
    20fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    20fc:	b29a      	uxth	r2, r3
    20fe:	4b98      	ldr	r3, [pc, #608]	; (2360 <STACK_SIZE+0x360>)
    2100:	809a      	strh	r2, [r3, #4]
}
    2102:	e106      	b.n	2312 <STACK_SIZE+0x312>
	else if (strncmp(buffer,PARTY_TRESH_3,sizeof(PARTY_TRESH_3)-1) == 0)
    2104:	499c      	ldr	r1, [pc, #624]	; (2378 <STACK_SIZE+0x378>)
    2106:	68fb      	ldr	r3, [r7, #12]
    2108:	2208      	movs	r2, #8
    210a:	0018      	movs	r0, r3
    210c:	4b84      	ldr	r3, [pc, #528]	; (2320 <STACK_SIZE+0x320>)
    210e:	4798      	blx	r3
    2110:	1e03      	subs	r3, r0, #0
    2112:	d10f      	bne.n	2134 <STACK_SIZE+0x134>
		int temp = party_treshold;
    2114:	4b94      	ldr	r3, [pc, #592]	; (2368 <STACK_SIZE+0x368>)
    2116:	64bb      	str	r3, [r7, #72]	; 0x48
		sscanf(buffer,"PRTTRSH3 %d",&temp);
    2118:	2340      	movs	r3, #64	; 0x40
    211a:	2208      	movs	r2, #8
    211c:	18ba      	adds	r2, r7, r2
    211e:	18d2      	adds	r2, r2, r3
    2120:	4996      	ldr	r1, [pc, #600]	; (237c <STACK_SIZE+0x37c>)
    2122:	68fb      	ldr	r3, [r7, #12]
    2124:	0018      	movs	r0, r3
    2126:	4b8d      	ldr	r3, [pc, #564]	; (235c <STACK_SIZE+0x35c>)
    2128:	4798      	blx	r3
		party_thresholds[3] = (uint16_t)temp;
    212a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    212c:	b29a      	uxth	r2, r3
    212e:	4b8c      	ldr	r3, [pc, #560]	; (2360 <STACK_SIZE+0x360>)
    2130:	80da      	strh	r2, [r3, #6]
}
    2132:	e0ee      	b.n	2312 <STACK_SIZE+0x312>
	else if (strncmp(buffer,PARTY_TRESH_4,sizeof(PARTY_TRESH_4)-1) == 0)
    2134:	4992      	ldr	r1, [pc, #584]	; (2380 <STACK_SIZE+0x380>)
    2136:	68fb      	ldr	r3, [r7, #12]
    2138:	2208      	movs	r2, #8
    213a:	0018      	movs	r0, r3
    213c:	4b78      	ldr	r3, [pc, #480]	; (2320 <STACK_SIZE+0x320>)
    213e:	4798      	blx	r3
    2140:	1e03      	subs	r3, r0, #0
    2142:	d10f      	bne.n	2164 <STACK_SIZE+0x164>
		int temp = party_treshold;
    2144:	4b88      	ldr	r3, [pc, #544]	; (2368 <STACK_SIZE+0x368>)
    2146:	647b      	str	r3, [r7, #68]	; 0x44
		sscanf(buffer,"PRTTRSH4 %d",&temp);
    2148:	233c      	movs	r3, #60	; 0x3c
    214a:	2208      	movs	r2, #8
    214c:	18ba      	adds	r2, r7, r2
    214e:	18d2      	adds	r2, r2, r3
    2150:	498c      	ldr	r1, [pc, #560]	; (2384 <STACK_SIZE+0x384>)
    2152:	68fb      	ldr	r3, [r7, #12]
    2154:	0018      	movs	r0, r3
    2156:	4b81      	ldr	r3, [pc, #516]	; (235c <STACK_SIZE+0x35c>)
    2158:	4798      	blx	r3
		party_thresholds[4] = (uint16_t)temp;
    215a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    215c:	b29a      	uxth	r2, r3
    215e:	4b80      	ldr	r3, [pc, #512]	; (2360 <STACK_SIZE+0x360>)
    2160:	811a      	strh	r2, [r3, #8]
}
    2162:	e0d6      	b.n	2312 <STACK_SIZE+0x312>
	else if (strncmp(buffer,PARTY_TRESH_5,sizeof(PARTY_TRESH_5)-1) == 0)
    2164:	4988      	ldr	r1, [pc, #544]	; (2388 <STACK_SIZE+0x388>)
    2166:	68fb      	ldr	r3, [r7, #12]
    2168:	2208      	movs	r2, #8
    216a:	0018      	movs	r0, r3
    216c:	4b6c      	ldr	r3, [pc, #432]	; (2320 <STACK_SIZE+0x320>)
    216e:	4798      	blx	r3
    2170:	1e03      	subs	r3, r0, #0
    2172:	d10f      	bne.n	2194 <STACK_SIZE+0x194>
		int temp = party_treshold;
    2174:	4b7c      	ldr	r3, [pc, #496]	; (2368 <STACK_SIZE+0x368>)
    2176:	643b      	str	r3, [r7, #64]	; 0x40
		sscanf(buffer,"PRTTRSH5 %d",&temp);
    2178:	2338      	movs	r3, #56	; 0x38
    217a:	2208      	movs	r2, #8
    217c:	18ba      	adds	r2, r7, r2
    217e:	18d2      	adds	r2, r2, r3
    2180:	4982      	ldr	r1, [pc, #520]	; (238c <STACK_SIZE+0x38c>)
    2182:	68fb      	ldr	r3, [r7, #12]
    2184:	0018      	movs	r0, r3
    2186:	4b75      	ldr	r3, [pc, #468]	; (235c <STACK_SIZE+0x35c>)
    2188:	4798      	blx	r3
		party_thresholds[5] = (uint16_t)temp;
    218a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    218c:	b29a      	uxth	r2, r3
    218e:	4b74      	ldr	r3, [pc, #464]	; (2360 <STACK_SIZE+0x360>)
    2190:	815a      	strh	r2, [r3, #10]
}
    2192:	e0be      	b.n	2312 <STACK_SIZE+0x312>
	else if (strncmp(buffer,PARTY_TRESH_6,sizeof(PARTY_TRESH_6)-1) == 0)
    2194:	497e      	ldr	r1, [pc, #504]	; (2390 <STACK_SIZE+0x390>)
    2196:	68fb      	ldr	r3, [r7, #12]
    2198:	2208      	movs	r2, #8
    219a:	0018      	movs	r0, r3
    219c:	4b60      	ldr	r3, [pc, #384]	; (2320 <STACK_SIZE+0x320>)
    219e:	4798      	blx	r3
    21a0:	1e03      	subs	r3, r0, #0
    21a2:	d10f      	bne.n	21c4 <STACK_SIZE+0x1c4>
		int temp = party_treshold;
    21a4:	4b70      	ldr	r3, [pc, #448]	; (2368 <STACK_SIZE+0x368>)
    21a6:	63fb      	str	r3, [r7, #60]	; 0x3c
		sscanf(buffer,"PRTTRSH6 %d",&temp);
    21a8:	2334      	movs	r3, #52	; 0x34
    21aa:	2208      	movs	r2, #8
    21ac:	18ba      	adds	r2, r7, r2
    21ae:	18d2      	adds	r2, r2, r3
    21b0:	4978      	ldr	r1, [pc, #480]	; (2394 <STACK_SIZE+0x394>)
    21b2:	68fb      	ldr	r3, [r7, #12]
    21b4:	0018      	movs	r0, r3
    21b6:	4b69      	ldr	r3, [pc, #420]	; (235c <STACK_SIZE+0x35c>)
    21b8:	4798      	blx	r3
		party_thresholds[6] = (uint16_t)temp;
    21ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    21bc:	b29a      	uxth	r2, r3
    21be:	4b68      	ldr	r3, [pc, #416]	; (2360 <STACK_SIZE+0x360>)
    21c0:	819a      	strh	r2, [r3, #12]
}
    21c2:	e0a6      	b.n	2312 <STACK_SIZE+0x312>
	else if (strncmp(buffer,PARTY_TRESH_7,sizeof(PARTY_TRESH_7)-1) == 0)
    21c4:	4974      	ldr	r1, [pc, #464]	; (2398 <STACK_SIZE+0x398>)
    21c6:	68fb      	ldr	r3, [r7, #12]
    21c8:	2208      	movs	r2, #8
    21ca:	0018      	movs	r0, r3
    21cc:	4b54      	ldr	r3, [pc, #336]	; (2320 <STACK_SIZE+0x320>)
    21ce:	4798      	blx	r3
    21d0:	1e03      	subs	r3, r0, #0
    21d2:	d10f      	bne.n	21f4 <STACK_SIZE+0x1f4>
		int temp = party_treshold;
    21d4:	4b64      	ldr	r3, [pc, #400]	; (2368 <STACK_SIZE+0x368>)
    21d6:	63bb      	str	r3, [r7, #56]	; 0x38
		sscanf(buffer,"PRTTRSH7 %d",&temp);
    21d8:	2330      	movs	r3, #48	; 0x30
    21da:	2208      	movs	r2, #8
    21dc:	18ba      	adds	r2, r7, r2
    21de:	18d2      	adds	r2, r2, r3
    21e0:	496e      	ldr	r1, [pc, #440]	; (239c <STACK_SIZE+0x39c>)
    21e2:	68fb      	ldr	r3, [r7, #12]
    21e4:	0018      	movs	r0, r3
    21e6:	4b5d      	ldr	r3, [pc, #372]	; (235c <STACK_SIZE+0x35c>)
    21e8:	4798      	blx	r3
		party_thresholds[7] = (uint16_t)temp;
    21ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    21ec:	b29a      	uxth	r2, r3
    21ee:	4b5c      	ldr	r3, [pc, #368]	; (2360 <STACK_SIZE+0x360>)
    21f0:	81da      	strh	r2, [r3, #14]
}
    21f2:	e08e      	b.n	2312 <STACK_SIZE+0x312>
	else if (strncmp(buffer,CUT_OUT_VALVE_ON,sizeof(CUT_OUT_VALVE_ON)-1) == 0)
    21f4:	496a      	ldr	r1, [pc, #424]	; (23a0 <STACK_SIZE+0x3a0>)
    21f6:	68fb      	ldr	r3, [r7, #12]
    21f8:	2205      	movs	r2, #5
    21fa:	0018      	movs	r0, r3
    21fc:	4b48      	ldr	r3, [pc, #288]	; (2320 <STACK_SIZE+0x320>)
    21fe:	4798      	blx	r3
    2200:	1e03      	subs	r3, r0, #0
    2202:	d112      	bne.n	222a <STACK_SIZE+0x22a>
		valve_open = true;
    2204:	4b67      	ldr	r3, [pc, #412]	; (23a4 <STACK_SIZE+0x3a4>)
    2206:	2201      	movs	r2, #1
    2208:	701a      	strb	r2, [r3, #0]
		valve_close = false;
    220a:	4b67      	ldr	r3, [pc, #412]	; (23a8 <STACK_SIZE+0x3a8>)
    220c:	2200      	movs	r2, #0
    220e:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    2210:	68fb      	ldr	r3, [r7, #12]
    2212:	0018      	movs	r0, r3
    2214:	4b44      	ldr	r3, [pc, #272]	; (2328 <STACK_SIZE+0x328>)
    2216:	4798      	blx	r3
		ble_uart_write(" - ");
    2218:	4b64      	ldr	r3, [pc, #400]	; (23ac <STACK_SIZE+0x3ac>)
    221a:	0018      	movs	r0, r3
    221c:	4b42      	ldr	r3, [pc, #264]	; (2328 <STACK_SIZE+0x328>)
    221e:	4798      	blx	r3
		ble_uart_write("ACK");
    2220:	4b63      	ldr	r3, [pc, #396]	; (23b0 <STACK_SIZE+0x3b0>)
    2222:	0018      	movs	r0, r3
    2224:	4b40      	ldr	r3, [pc, #256]	; (2328 <STACK_SIZE+0x328>)
    2226:	4798      	blx	r3
}
    2228:	e073      	b.n	2312 <STACK_SIZE+0x312>
	else if (strncmp(buffer,CUT_OUT_VALVE_OFF,sizeof(CUT_OUT_VALVE_OFF)-1) == 0)
    222a:	4962      	ldr	r1, [pc, #392]	; (23b4 <STACK_SIZE+0x3b4>)
    222c:	68fb      	ldr	r3, [r7, #12]
    222e:	2205      	movs	r2, #5
    2230:	0018      	movs	r0, r3
    2232:	4b3b      	ldr	r3, [pc, #236]	; (2320 <STACK_SIZE+0x320>)
    2234:	4798      	blx	r3
    2236:	1e03      	subs	r3, r0, #0
    2238:	d112      	bne.n	2260 <STACK_SIZE+0x260>
		valve_open = false;
    223a:	4b5a      	ldr	r3, [pc, #360]	; (23a4 <STACK_SIZE+0x3a4>)
    223c:	2200      	movs	r2, #0
    223e:	701a      	strb	r2, [r3, #0]
		valve_close = true;
    2240:	4b59      	ldr	r3, [pc, #356]	; (23a8 <STACK_SIZE+0x3a8>)
    2242:	2201      	movs	r2, #1
    2244:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    2246:	68fb      	ldr	r3, [r7, #12]
    2248:	0018      	movs	r0, r3
    224a:	4b37      	ldr	r3, [pc, #220]	; (2328 <STACK_SIZE+0x328>)
    224c:	4798      	blx	r3
		ble_uart_write(" - ");
    224e:	4b57      	ldr	r3, [pc, #348]	; (23ac <STACK_SIZE+0x3ac>)
    2250:	0018      	movs	r0, r3
    2252:	4b35      	ldr	r3, [pc, #212]	; (2328 <STACK_SIZE+0x328>)
    2254:	4798      	blx	r3
		ble_uart_write("ACK");
    2256:	4b56      	ldr	r3, [pc, #344]	; (23b0 <STACK_SIZE+0x3b0>)
    2258:	0018      	movs	r0, r3
    225a:	4b33      	ldr	r3, [pc, #204]	; (2328 <STACK_SIZE+0x328>)
    225c:	4798      	blx	r3
}
    225e:	e058      	b.n	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,PARTY_REV2_ON,sizeof(PARTY_REV2_ON)-1) == 0)
    2260:	4955      	ldr	r1, [pc, #340]	; (23b8 <STACK_SIZE+0x3b8>)
    2262:	68fb      	ldr	r3, [r7, #12]
    2264:	2207      	movs	r2, #7
    2266:	0018      	movs	r0, r3
    2268:	4b2d      	ldr	r3, [pc, #180]	; (2320 <STACK_SIZE+0x320>)
    226a:	4798      	blx	r3
    226c:	1e03      	subs	r3, r0, #0
    226e:	d120      	bne.n	22b2 <STACK_SIZE+0x2b2>
		sscanf(buffer,"PRTRV21 %d",&temp);
    2270:	232f      	movs	r3, #47	; 0x2f
    2272:	2208      	movs	r2, #8
    2274:	18ba      	adds	r2, r7, r2
    2276:	18d2      	adds	r2, r2, r3
    2278:	4950      	ldr	r1, [pc, #320]	; (23bc <STACK_SIZE+0x3bc>)
    227a:	68fb      	ldr	r3, [r7, #12]
    227c:	0018      	movs	r0, r3
    227e:	4b37      	ldr	r3, [pc, #220]	; (235c <STACK_SIZE+0x35c>)
    2280:	4798      	blx	r3
		party_band_chosen = temp;
    2282:	232f      	movs	r3, #47	; 0x2f
    2284:	2208      	movs	r2, #8
    2286:	4694      	mov	ip, r2
    2288:	44bc      	add	ip, r7
    228a:	4463      	add	r3, ip
    228c:	781a      	ldrb	r2, [r3, #0]
    228e:	4b4c      	ldr	r3, [pc, #304]	; (23c0 <STACK_SIZE+0x3c0>)
    2290:	701a      	strb	r2, [r3, #0]
		partyrev2 = true;
    2292:	4b4c      	ldr	r3, [pc, #304]	; (23c4 <STACK_SIZE+0x3c4>)
    2294:	2201      	movs	r2, #1
    2296:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    2298:	68fb      	ldr	r3, [r7, #12]
    229a:	0018      	movs	r0, r3
    229c:	4b22      	ldr	r3, [pc, #136]	; (2328 <STACK_SIZE+0x328>)
    229e:	4798      	blx	r3
		ble_uart_write(" - ");
    22a0:	4b42      	ldr	r3, [pc, #264]	; (23ac <STACK_SIZE+0x3ac>)
    22a2:	0018      	movs	r0, r3
    22a4:	4b20      	ldr	r3, [pc, #128]	; (2328 <STACK_SIZE+0x328>)
    22a6:	4798      	blx	r3
		ble_uart_write("ACK");
    22a8:	4b41      	ldr	r3, [pc, #260]	; (23b0 <STACK_SIZE+0x3b0>)
    22aa:	0018      	movs	r0, r3
    22ac:	4b1e      	ldr	r3, [pc, #120]	; (2328 <STACK_SIZE+0x328>)
    22ae:	4798      	blx	r3
}
    22b0:	e02f      	b.n	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,PARTY_REV2_OFF,sizeof(PARTY_REV2_OFF)-1) == 0)
    22b2:	4945      	ldr	r1, [pc, #276]	; (23c8 <STACK_SIZE+0x3c8>)
    22b4:	68fb      	ldr	r3, [r7, #12]
    22b6:	2207      	movs	r2, #7
    22b8:	0018      	movs	r0, r3
    22ba:	4b19      	ldr	r3, [pc, #100]	; (2320 <STACK_SIZE+0x320>)
    22bc:	4798      	blx	r3
    22be:	1e03      	subs	r3, r0, #0
    22c0:	d10f      	bne.n	22e2 <STACK_SIZE+0x2e2>
		partyrev2 = false;
    22c2:	4b40      	ldr	r3, [pc, #256]	; (23c4 <STACK_SIZE+0x3c4>)
    22c4:	2200      	movs	r2, #0
    22c6:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    22c8:	68fb      	ldr	r3, [r7, #12]
    22ca:	0018      	movs	r0, r3
    22cc:	4b16      	ldr	r3, [pc, #88]	; (2328 <STACK_SIZE+0x328>)
    22ce:	4798      	blx	r3
		ble_uart_write(" - ");
    22d0:	4b36      	ldr	r3, [pc, #216]	; (23ac <STACK_SIZE+0x3ac>)
    22d2:	0018      	movs	r0, r3
    22d4:	4b14      	ldr	r3, [pc, #80]	; (2328 <STACK_SIZE+0x328>)
    22d6:	4798      	blx	r3
		ble_uart_write("ACK");
    22d8:	4b35      	ldr	r3, [pc, #212]	; (23b0 <STACK_SIZE+0x3b0>)
    22da:	0018      	movs	r0, r3
    22dc:	4b12      	ldr	r3, [pc, #72]	; (2328 <STACK_SIZE+0x328>)
    22de:	4798      	blx	r3
}
    22e0:	e017      	b.n	2312 <STACK_SIZE+0x312>
	else if(strncmp(buffer,MASTER_TEST,sizeof(MASTER_TEST)-1) == 0)
    22e2:	493a      	ldr	r1, [pc, #232]	; (23cc <STACK_SIZE+0x3cc>)
    22e4:	68fb      	ldr	r3, [r7, #12]
    22e6:	220a      	movs	r2, #10
    22e8:	0018      	movs	r0, r3
    22ea:	4b0d      	ldr	r3, [pc, #52]	; (2320 <STACK_SIZE+0x320>)
    22ec:	4798      	blx	r3
    22ee:	1e03      	subs	r3, r0, #0
    22f0:	d10f      	bne.n	2312 <STACK_SIZE+0x312>
		ble_uart_write(buffer);
    22f2:	68fb      	ldr	r3, [r7, #12]
    22f4:	0018      	movs	r0, r3
    22f6:	4b0c      	ldr	r3, [pc, #48]	; (2328 <STACK_SIZE+0x328>)
    22f8:	4798      	blx	r3
		ble_uart_write(" - ");
    22fa:	4b2c      	ldr	r3, [pc, #176]	; (23ac <STACK_SIZE+0x3ac>)
    22fc:	0018      	movs	r0, r3
    22fe:	4b0a      	ldr	r3, [pc, #40]	; (2328 <STACK_SIZE+0x328>)
    2300:	4798      	blx	r3
		ble_uart_write("ACK");
    2302:	4b2b      	ldr	r3, [pc, #172]	; (23b0 <STACK_SIZE+0x3b0>)
    2304:	0018      	movs	r0, r3
    2306:	4b08      	ldr	r3, [pc, #32]	; (2328 <STACK_SIZE+0x328>)
    2308:	4798      	blx	r3
		execute_order_66 = true;
    230a:	4b31      	ldr	r3, [pc, #196]	; (23d0 <STACK_SIZE+0x3d0>)
    230c:	2201      	movs	r2, #1
    230e:	701a      	strb	r2, [r3, #0]
}
    2310:	e7ff      	b.n	2312 <STACK_SIZE+0x312>
    2312:	46c0      	nop			; (mov r8, r8)
    2314:	46bd      	mov	sp, r7
    2316:	b01b      	add	sp, #108	; 0x6c
    2318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    231a:	46c0      	nop			; (mov r8, r8)
    231c:	00006ef4 	.word	0x00006ef4
    2320:	00005c1f 	.word	0x00005c1f
    2324:	00006f00 	.word	0x00006f00
    2328:	000012e5 	.word	0x000012e5
    232c:	00004b0d 	.word	0x00004b0d
    2330:	000056f1 	.word	0x000056f1
    2334:	00001b57 	.word	0x00001b57
    2338:	000056b1 	.word	0x000056b1
    233c:	00001b58 	.word	0x00001b58
    2340:	20000001 	.word	0x20000001
    2344:	00003d31 	.word	0x00003d31
    2348:	00003351 	.word	0x00003351
    234c:	20000e39 	.word	0x20000e39
    2350:	00006f14 	.word	0x00006f14
    2354:	00006f28 	.word	0x00006f28
    2358:	00006f34 	.word	0x00006f34
    235c:	00005b91 	.word	0x00005b91
    2360:	20000a14 	.word	0x20000a14
    2364:	00006f40 	.word	0x00006f40
    2368:	000009c4 	.word	0x000009c4
    236c:	00006f4c 	.word	0x00006f4c
    2370:	00006f58 	.word	0x00006f58
    2374:	00006f64 	.word	0x00006f64
    2378:	00006f70 	.word	0x00006f70
    237c:	00006f7c 	.word	0x00006f7c
    2380:	00006f88 	.word	0x00006f88
    2384:	00006f94 	.word	0x00006f94
    2388:	00006fa0 	.word	0x00006fa0
    238c:	00006fac 	.word	0x00006fac
    2390:	00006fb8 	.word	0x00006fb8
    2394:	00006fc4 	.word	0x00006fc4
    2398:	00006fd0 	.word	0x00006fd0
    239c:	00006fdc 	.word	0x00006fdc
    23a0:	00006fe8 	.word	0x00006fe8
    23a4:	20000a0f 	.word	0x20000a0f
    23a8:	20000a0c 	.word	0x20000a0c
    23ac:	00006d94 	.word	0x00006d94
    23b0:	00006d98 	.word	0x00006d98
    23b4:	00006ff0 	.word	0x00006ff0
    23b8:	00006ff8 	.word	0x00006ff8
    23bc:	00007000 	.word	0x00007000
    23c0:	20000e47 	.word	0x20000e47
    23c4:	20000a0d 	.word	0x20000a0d
    23c8:	0000700c 	.word	0x0000700c
    23cc:	00007014 	.word	0x00007014
    23d0:	20000ecc 	.word	0x20000ecc

000023d4 <update_all_ports>:

void update_all_ports()
{
    23d4:	b580      	push	{r7, lr}
    23d6:	b082      	sub	sp, #8
    23d8:	af00      	add	r7, sp, #0
	if (!port_update_ongoing)
    23da:	4b27      	ldr	r3, [pc, #156]	; (2478 <update_all_ports+0xa4>)
    23dc:	781b      	ldrb	r3, [r3, #0]
    23de:	2201      	movs	r2, #1
    23e0:	4053      	eors	r3, r2
    23e2:	b2db      	uxtb	r3, r3
    23e4:	2b00      	cmp	r3, #0
    23e6:	d042      	beq.n	246e <update_all_ports+0x9a>
	{
		port_update_ongoing = true;
    23e8:	4b23      	ldr	r3, [pc, #140]	; (2478 <update_all_ports+0xa4>)
    23ea:	2201      	movs	r2, #1
    23ec:	701a      	strb	r2, [r3, #0]
		init_all_ports();
    23ee:	4b23      	ldr	r3, [pc, #140]	; (247c <update_all_ports+0xa8>)
    23f0:	4798      	blx	r3
		for (int i=0;i<8;i++)
    23f2:	2300      	movs	r3, #0
    23f4:	607b      	str	r3, [r7, #4]
    23f6:	e034      	b.n	2462 <update_all_ports+0x8e>
		{
			mcp23017_data.devices[i].outputs.pa7 = 1;
    23f8:	4a21      	ldr	r2, [pc, #132]	; (2480 <update_all_ports+0xac>)
    23fa:	687b      	ldr	r3, [r7, #4]
    23fc:	2108      	movs	r1, #8
    23fe:	011b      	lsls	r3, r3, #4
    2400:	18d3      	adds	r3, r2, r3
    2402:	185b      	adds	r3, r3, r1
    2404:	781a      	ldrb	r2, [r3, #0]
    2406:	2180      	movs	r1, #128	; 0x80
    2408:	4249      	negs	r1, r1
    240a:	430a      	orrs	r2, r1
    240c:	701a      	strb	r2, [r3, #0]
			mcp23017_data.devices[i].outputs.pb7 = 1;
    240e:	4a1c      	ldr	r2, [pc, #112]	; (2480 <update_all_ports+0xac>)
    2410:	687b      	ldr	r3, [r7, #4]
    2412:	2108      	movs	r1, #8
    2414:	011b      	lsls	r3, r3, #4
    2416:	18d3      	adds	r3, r2, r3
    2418:	185b      	adds	r3, r3, r1
    241a:	785a      	ldrb	r2, [r3, #1]
    241c:	2180      	movs	r1, #128	; 0x80
    241e:	4249      	negs	r1, r1
    2420:	430a      	orrs	r2, r1
    2422:	705a      	strb	r2, [r3, #1]
			mcp23017_data.devices[i].status = mcp23017_set_pins(MCP23017_I2C_ADDR_000+i,mcp23017_data.devices[i].outputs.ports[0],mcp23017_data.devices[i].outputs.ports[1]);
    2424:	687b      	ldr	r3, [r7, #4]
    2426:	b2db      	uxtb	r3, r3
    2428:	3320      	adds	r3, #32
    242a:	b2d8      	uxtb	r0, r3
    242c:	4a14      	ldr	r2, [pc, #80]	; (2480 <update_all_ports+0xac>)
    242e:	687b      	ldr	r3, [r7, #4]
    2430:	011b      	lsls	r3, r3, #4
    2432:	18d3      	adds	r3, r2, r3
    2434:	3308      	adds	r3, #8
    2436:	7819      	ldrb	r1, [r3, #0]
    2438:	4a11      	ldr	r2, [pc, #68]	; (2480 <update_all_ports+0xac>)
    243a:	687b      	ldr	r3, [r7, #4]
    243c:	011b      	lsls	r3, r3, #4
    243e:	18d3      	adds	r3, r2, r3
    2440:	3309      	adds	r3, #9
    2442:	781b      	ldrb	r3, [r3, #0]
    2444:	001a      	movs	r2, r3
    2446:	4b0f      	ldr	r3, [pc, #60]	; (2484 <update_all_ports+0xb0>)
    2448:	4798      	blx	r3
    244a:	0003      	movs	r3, r0
    244c:	0019      	movs	r1, r3
    244e:	4a0c      	ldr	r2, [pc, #48]	; (2480 <update_all_ports+0xac>)
    2450:	687b      	ldr	r3, [r7, #4]
    2452:	011b      	lsls	r3, r3, #4
    2454:	18d3      	adds	r3, r2, r3
    2456:	3303      	adds	r3, #3
    2458:	1c0a      	adds	r2, r1, #0
    245a:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<8;i++)
    245c:	687b      	ldr	r3, [r7, #4]
    245e:	3301      	adds	r3, #1
    2460:	607b      	str	r3, [r7, #4]
    2462:	687b      	ldr	r3, [r7, #4]
    2464:	2b07      	cmp	r3, #7
    2466:	ddc7      	ble.n	23f8 <update_all_ports+0x24>
		}
		port_update_ongoing = false;
    2468:	4b03      	ldr	r3, [pc, #12]	; (2478 <update_all_ports+0xa4>)
    246a:	2200      	movs	r2, #0
    246c:	701a      	strb	r2, [r3, #0]
	}
}
    246e:	46c0      	nop			; (mov r8, r8)
    2470:	46bd      	mov	sp, r7
    2472:	b002      	add	sp, #8
    2474:	bd80      	pop	{r7, pc}
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	20000e3f 	.word	0x20000e3f
    247c:	00003351 	.word	0x00003351
    2480:	200000e0 	.word	0x200000e0
    2484:	00003429 	.word	0x00003429

00002488 <party_lights>:
	}
}


void party_lights(uint16_t party_vals[])
{
    2488:	b590      	push	{r4, r7, lr}
    248a:	b083      	sub	sp, #12
    248c:	af00      	add	r7, sp, #0
    248e:	6078      	str	r0, [r7, #4]
	if (party_vals[0] > party_thresholds[0])
    2490:	687b      	ldr	r3, [r7, #4]
    2492:	881a      	ldrh	r2, [r3, #0]
    2494:	4b94      	ldr	r3, [pc, #592]	; (26e8 <party_lights+0x260>)
    2496:	881b      	ldrh	r3, [r3, #0]
    2498:	429a      	cmp	r2, r3
    249a:	d91e      	bls.n	24da <party_lights+0x52>
	{
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR,SUB_LEFT_PIN,true);
    249c:	2301      	movs	r3, #1
    249e:	2203      	movs	r2, #3
    24a0:	2103      	movs	r1, #3
    24a2:	2000      	movs	r0, #0
    24a4:	4c91      	ldr	r4, [pc, #580]	; (26ec <party_lights+0x264>)
    24a6:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR,SUB_RIGHT_PIN,true);
    24a8:	2301      	movs	r3, #1
    24aa:	2204      	movs	r2, #4
    24ac:	2103      	movs	r1, #3
    24ae:	2000      	movs	r0, #0
    24b0:	4c8e      	ldr	r4, [pc, #568]	; (26ec <party_lights+0x264>)
    24b2:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    24b4:	2301      	movs	r3, #1
    24b6:	2201      	movs	r2, #1
    24b8:	2104      	movs	r1, #4
    24ba:	2000      	movs	r0, #0
    24bc:	4c8b      	ldr	r4, [pc, #556]	; (26ec <party_lights+0x264>)
    24be:	47a0      	blx	r4
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    24c0:	2301      	movs	r3, #1
    24c2:	2201      	movs	r2, #1
    24c4:	2103      	movs	r1, #3
    24c6:	2000      	movs	r0, #0
    24c8:	4c88      	ldr	r4, [pc, #544]	; (26ec <party_lights+0x264>)
    24ca:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,true);
    24cc:	2301      	movs	r3, #1
    24ce:	2204      	movs	r2, #4
    24d0:	2105      	movs	r1, #5
    24d2:	2000      	movs	r0, #0
    24d4:	4c85      	ldr	r4, [pc, #532]	; (26ec <party_lights+0x264>)
    24d6:	47a0      	blx	r4
    24d8:	e01d      	b.n	2516 <party_lights+0x8e>
	}
	else
	{
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR, SUB_LEFT_PIN,false);
    24da:	2300      	movs	r3, #0
    24dc:	2203      	movs	r2, #3
    24de:	2103      	movs	r1, #3
    24e0:	2000      	movs	r0, #0
    24e2:	4c82      	ldr	r4, [pc, #520]	; (26ec <party_lights+0x264>)
    24e4:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR, SUB_RIGHT_PIN,false);
    24e6:	2300      	movs	r3, #0
    24e8:	2204      	movs	r2, #4
    24ea:	2103      	movs	r1, #3
    24ec:	2000      	movs	r0, #0
    24ee:	4c7f      	ldr	r4, [pc, #508]	; (26ec <party_lights+0x264>)
    24f0:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    24f2:	2300      	movs	r3, #0
    24f4:	2201      	movs	r2, #1
    24f6:	2104      	movs	r1, #4
    24f8:	2000      	movs	r0, #0
    24fa:	4c7c      	ldr	r4, [pc, #496]	; (26ec <party_lights+0x264>)
    24fc:	47a0      	blx	r4
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    24fe:	2300      	movs	r3, #0
    2500:	2201      	movs	r2, #1
    2502:	2103      	movs	r1, #3
    2504:	2000      	movs	r0, #0
    2506:	4c79      	ldr	r4, [pc, #484]	; (26ec <party_lights+0x264>)
    2508:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,false);
    250a:	2300      	movs	r3, #0
    250c:	2204      	movs	r2, #4
    250e:	2105      	movs	r1, #5
    2510:	2000      	movs	r0, #0
    2512:	4c76      	ldr	r4, [pc, #472]	; (26ec <party_lights+0x264>)
    2514:	47a0      	blx	r4
	}
	if (party_vals[1] > party_thresholds[1])
    2516:	687b      	ldr	r3, [r7, #4]
    2518:	3302      	adds	r3, #2
    251a:	881a      	ldrh	r2, [r3, #0]
    251c:	4b72      	ldr	r3, [pc, #456]	; (26e8 <party_lights+0x260>)
    251e:	885b      	ldrh	r3, [r3, #2]
    2520:	429a      	cmp	r2, r3
    2522:	d918      	bls.n	2556 <party_lights+0xce>
	{
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    2524:	2301      	movs	r3, #1
    2526:	2200      	movs	r2, #0
    2528:	2102      	movs	r1, #2
    252a:	2000      	movs	r0, #0
    252c:	4c6f      	ldr	r4, [pc, #444]	; (26ec <party_lights+0x264>)
    252e:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    2530:	2301      	movs	r3, #1
    2532:	2200      	movs	r2, #0
    2534:	2101      	movs	r1, #1
    2536:	2000      	movs	r0, #0
    2538:	4c6c      	ldr	r4, [pc, #432]	; (26ec <party_lights+0x264>)
    253a:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    253c:	2301      	movs	r3, #1
    253e:	2200      	movs	r2, #0
    2540:	2104      	movs	r1, #4
    2542:	2000      	movs	r0, #0
    2544:	4c69      	ldr	r4, [pc, #420]	; (26ec <party_lights+0x264>)
    2546:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    2548:	2301      	movs	r3, #1
    254a:	2200      	movs	r2, #0
    254c:	2103      	movs	r1, #3
    254e:	2000      	movs	r0, #0
    2550:	4c66      	ldr	r4, [pc, #408]	; (26ec <party_lights+0x264>)
    2552:	47a0      	blx	r4
    2554:	e017      	b.n	2586 <party_lights+0xfe>
	}
	else
	{
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,false);
    2556:	2300      	movs	r3, #0
    2558:	2200      	movs	r2, #0
    255a:	2102      	movs	r1, #2
    255c:	2000      	movs	r0, #0
    255e:	4c63      	ldr	r4, [pc, #396]	; (26ec <party_lights+0x264>)
    2560:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,false);
    2562:	2300      	movs	r3, #0
    2564:	2200      	movs	r2, #0
    2566:	2101      	movs	r1, #1
    2568:	2000      	movs	r0, #0
    256a:	4c60      	ldr	r4, [pc, #384]	; (26ec <party_lights+0x264>)
    256c:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    256e:	2300      	movs	r3, #0
    2570:	2200      	movs	r2, #0
    2572:	2104      	movs	r1, #4
    2574:	2000      	movs	r0, #0
    2576:	4c5d      	ldr	r4, [pc, #372]	; (26ec <party_lights+0x264>)
    2578:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    257a:	2300      	movs	r3, #0
    257c:	2200      	movs	r2, #0
    257e:	2103      	movs	r1, #3
    2580:	2000      	movs	r0, #0
    2582:	4c5a      	ldr	r4, [pc, #360]	; (26ec <party_lights+0x264>)
    2584:	47a0      	blx	r4
	}
	if (party_vals[2] > party_thresholds[2])
    2586:	687b      	ldr	r3, [r7, #4]
    2588:	3304      	adds	r3, #4
    258a:	881a      	ldrh	r2, [r3, #0]
    258c:	4b56      	ldr	r3, [pc, #344]	; (26e8 <party_lights+0x260>)
    258e:	889b      	ldrh	r3, [r3, #4]
    2590:	429a      	cmp	r2, r3
    2592:	d90c      	bls.n	25ae <party_lights+0x126>
	{
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    2594:	2301      	movs	r3, #1
    2596:	2201      	movs	r2, #1
    2598:	2102      	movs	r1, #2
    259a:	2000      	movs	r0, #0
    259c:	4c53      	ldr	r4, [pc, #332]	; (26ec <party_lights+0x264>)
    259e:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    25a0:	2301      	movs	r3, #1
    25a2:	2201      	movs	r2, #1
    25a4:	2101      	movs	r1, #1
    25a6:	2000      	movs	r0, #0
    25a8:	4c50      	ldr	r4, [pc, #320]	; (26ec <party_lights+0x264>)
    25aa:	47a0      	blx	r4
    25ac:	e00b      	b.n	25c6 <party_lights+0x13e>
	}
	else
	{
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    25ae:	2300      	movs	r3, #0
    25b0:	2201      	movs	r2, #1
    25b2:	2102      	movs	r1, #2
    25b4:	2000      	movs	r0, #0
    25b6:	4c4d      	ldr	r4, [pc, #308]	; (26ec <party_lights+0x264>)
    25b8:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    25ba:	2300      	movs	r3, #0
    25bc:	2201      	movs	r2, #1
    25be:	2101      	movs	r1, #1
    25c0:	2000      	movs	r0, #0
    25c2:	4c4a      	ldr	r4, [pc, #296]	; (26ec <party_lights+0x264>)
    25c4:	47a0      	blx	r4
	}
	if (party_vals[3] > party_thresholds[3])
    25c6:	687b      	ldr	r3, [r7, #4]
    25c8:	3306      	adds	r3, #6
    25ca:	881a      	ldrh	r2, [r3, #0]
    25cc:	4b46      	ldr	r3, [pc, #280]	; (26e8 <party_lights+0x260>)
    25ce:	88db      	ldrh	r3, [r3, #6]
    25d0:	429a      	cmp	r2, r3
    25d2:	d912      	bls.n	25fa <party_lights+0x172>
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    25d4:	2301      	movs	r3, #1
    25d6:	2202      	movs	r2, #2
    25d8:	2102      	movs	r1, #2
    25da:	2000      	movs	r0, #0
    25dc:	4c43      	ldr	r4, [pc, #268]	; (26ec <party_lights+0x264>)
    25de:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    25e0:	2301      	movs	r3, #1
    25e2:	2202      	movs	r2, #2
    25e4:	2101      	movs	r1, #1
    25e6:	2000      	movs	r0, #0
    25e8:	4c40      	ldr	r4, [pc, #256]	; (26ec <party_lights+0x264>)
    25ea:	47a0      	blx	r4
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,true);
    25ec:	2301      	movs	r3, #1
    25ee:	2203      	movs	r2, #3
    25f0:	2105      	movs	r1, #5
    25f2:	2000      	movs	r0, #0
    25f4:	4c3d      	ldr	r4, [pc, #244]	; (26ec <party_lights+0x264>)
    25f6:	47a0      	blx	r4
    25f8:	e011      	b.n	261e <party_lights+0x196>
	}
	else
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    25fa:	2300      	movs	r3, #0
    25fc:	2202      	movs	r2, #2
    25fe:	2102      	movs	r1, #2
    2600:	2000      	movs	r0, #0
    2602:	4c3a      	ldr	r4, [pc, #232]	; (26ec <party_lights+0x264>)
    2604:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    2606:	2300      	movs	r3, #0
    2608:	2202      	movs	r2, #2
    260a:	2101      	movs	r1, #1
    260c:	2000      	movs	r0, #0
    260e:	4c37      	ldr	r4, [pc, #220]	; (26ec <party_lights+0x264>)
    2610:	47a0      	blx	r4
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,false);
    2612:	2300      	movs	r3, #0
    2614:	2203      	movs	r2, #3
    2616:	2105      	movs	r1, #5
    2618:	2000      	movs	r0, #0
    261a:	4c34      	ldr	r4, [pc, #208]	; (26ec <party_lights+0x264>)
    261c:	47a0      	blx	r4

	}
	if (party_vals[4] > party_thresholds[4])
    261e:	687b      	ldr	r3, [r7, #4]
    2620:	3308      	adds	r3, #8
    2622:	881a      	ldrh	r2, [r3, #0]
    2624:	4b30      	ldr	r3, [pc, #192]	; (26e8 <party_lights+0x260>)
    2626:	891b      	ldrh	r3, [r3, #8]
    2628:	429a      	cmp	r2, r3
    262a:	d912      	bls.n	2652 <party_lights+0x1ca>
	{
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    262c:	2301      	movs	r3, #1
    262e:	2202      	movs	r2, #2
    2630:	2104      	movs	r1, #4
    2632:	2000      	movs	r0, #0
    2634:	4c2d      	ldr	r4, [pc, #180]	; (26ec <party_lights+0x264>)
    2636:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    2638:	2301      	movs	r3, #1
    263a:	2202      	movs	r2, #2
    263c:	2103      	movs	r1, #3
    263e:	2000      	movs	r0, #0
    2640:	4c2a      	ldr	r4, [pc, #168]	; (26ec <party_lights+0x264>)
    2642:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,true);
    2644:	2301      	movs	r3, #1
    2646:	2202      	movs	r2, #2
    2648:	2105      	movs	r1, #5
    264a:	2000      	movs	r0, #0
    264c:	4c27      	ldr	r4, [pc, #156]	; (26ec <party_lights+0x264>)
    264e:	47a0      	blx	r4
    2650:	e011      	b.n	2676 <party_lights+0x1ee>
	}
	else
	{
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,false);
    2652:	2300      	movs	r3, #0
    2654:	2202      	movs	r2, #2
    2656:	2104      	movs	r1, #4
    2658:	2000      	movs	r0, #0
    265a:	4c24      	ldr	r4, [pc, #144]	; (26ec <party_lights+0x264>)
    265c:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,false);
    265e:	2300      	movs	r3, #0
    2660:	2202      	movs	r2, #2
    2662:	2103      	movs	r1, #3
    2664:	2000      	movs	r0, #0
    2666:	4c21      	ldr	r4, [pc, #132]	; (26ec <party_lights+0x264>)
    2668:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,false);
    266a:	2300      	movs	r3, #0
    266c:	2202      	movs	r2, #2
    266e:	2105      	movs	r1, #5
    2670:	2000      	movs	r0, #0
    2672:	4c1e      	ldr	r4, [pc, #120]	; (26ec <party_lights+0x264>)
    2674:	47a0      	blx	r4
	}
	if (party_vals[5] > party_thresholds[5])
    2676:	687b      	ldr	r3, [r7, #4]
    2678:	330a      	adds	r3, #10
    267a:	881a      	ldrh	r2, [r3, #0]
    267c:	4b1a      	ldr	r3, [pc, #104]	; (26e8 <party_lights+0x260>)
    267e:	895b      	ldrh	r3, [r3, #10]
    2680:	429a      	cmp	r2, r3
    2682:	d90c      	bls.n	269e <party_lights+0x216>
	{
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    2684:	2301      	movs	r3, #1
    2686:	2203      	movs	r2, #3
    2688:	2101      	movs	r1, #1
    268a:	2000      	movs	r0, #0
    268c:	4c17      	ldr	r4, [pc, #92]	; (26ec <party_lights+0x264>)
    268e:	47a0      	blx	r4
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    2690:	2301      	movs	r3, #1
    2692:	2203      	movs	r2, #3
    2694:	2102      	movs	r1, #2
    2696:	2000      	movs	r0, #0
    2698:	4c14      	ldr	r4, [pc, #80]	; (26ec <party_lights+0x264>)
    269a:	47a0      	blx	r4
    269c:	e00b      	b.n	26b6 <party_lights+0x22e>
	}
	else
	{
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    269e:	2300      	movs	r3, #0
    26a0:	2203      	movs	r2, #3
    26a2:	2101      	movs	r1, #1
    26a4:	2000      	movs	r0, #0
    26a6:	4c11      	ldr	r4, [pc, #68]	; (26ec <party_lights+0x264>)
    26a8:	47a0      	blx	r4
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    26aa:	2300      	movs	r3, #0
    26ac:	2203      	movs	r2, #3
    26ae:	2102      	movs	r1, #2
    26b0:	2000      	movs	r0, #0
    26b2:	4c0e      	ldr	r4, [pc, #56]	; (26ec <party_lights+0x264>)
    26b4:	47a0      	blx	r4
	}
	if (party_vals[6] > party_thresholds[6])
    26b6:	687b      	ldr	r3, [r7, #4]
    26b8:	330c      	adds	r3, #12
    26ba:	881a      	ldrh	r2, [r3, #0]
    26bc:	4b0a      	ldr	r3, [pc, #40]	; (26e8 <party_lights+0x260>)
    26be:	899b      	ldrh	r3, [r3, #12]
    26c0:	429a      	cmp	r2, r3
    26c2:	d906      	bls.n	26d2 <party_lights+0x24a>
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    26c4:	2301      	movs	r3, #1
    26c6:	2204      	movs	r2, #4
    26c8:	2101      	movs	r1, #1
    26ca:	2000      	movs	r0, #0
    26cc:	4c07      	ldr	r4, [pc, #28]	; (26ec <party_lights+0x264>)
    26ce:	47a0      	blx	r4
	}
	else
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
	}
}
    26d0:	e005      	b.n	26de <party_lights+0x256>
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    26d2:	2300      	movs	r3, #0
    26d4:	2204      	movs	r2, #4
    26d6:	2101      	movs	r1, #1
    26d8:	2000      	movs	r0, #0
    26da:	4c04      	ldr	r4, [pc, #16]	; (26ec <party_lights+0x264>)
    26dc:	47a0      	blx	r4
}
    26de:	46c0      	nop			; (mov r8, r8)
    26e0:	46bd      	mov	sp, r7
    26e2:	b003      	add	sp, #12
    26e4:	bd90      	pop	{r4, r7, pc}
    26e6:	46c0      	nop			; (mov r8, r8)
    26e8:	20000a14 	.word	0x20000a14
    26ec:	00002f81 	.word	0x00002f81

000026f0 <flashy_flash1>:
	configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,party_vals[band]>party_thresholds[band]+300);
	configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,party_vals[band]>party_thresholds[band]+300);
}

void flashy_flash1()
{
    26f0:	b5b0      	push	{r4, r5, r7, lr}
    26f2:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
    26f4:	4b48      	ldr	r3, [pc, #288]	; (2818 <flashy_flash1+0x128>)
    26f6:	781b      	ldrb	r3, [r3, #0]
    26f8:	2b0c      	cmp	r3, #12
    26fa:	d900      	bls.n	26fe <flashy_flash1+0xe>
    26fc:	e07c      	b.n	27f8 <flashy_flash1+0x108>
    26fe:	009a      	lsls	r2, r3, #2
    2700:	4b46      	ldr	r3, [pc, #280]	; (281c <flashy_flash1+0x12c>)
    2702:	18d3      	adds	r3, r2, r3
    2704:	681b      	ldr	r3, [r3, #0]
    2706:	469f      	mov	pc, r3
	{
		case 0:
			reset_all_lights();
    2708:	4b45      	ldr	r3, [pc, #276]	; (2820 <flashy_flash1+0x130>)
    270a:	4798      	blx	r3
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    270c:	2301      	movs	r3, #1
    270e:	2201      	movs	r2, #1
    2710:	2102      	movs	r1, #2
    2712:	2000      	movs	r0, #0
    2714:	4c43      	ldr	r4, [pc, #268]	; (2824 <flashy_flash1+0x134>)
    2716:	47a0      	blx	r4
			break;
    2718:	e074      	b.n	2804 <flashy_flash1+0x114>
		case 1:
			reset_all_lights();
    271a:	4b41      	ldr	r3, [pc, #260]	; (2820 <flashy_flash1+0x130>)
    271c:	4798      	blx	r3
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    271e:	2301      	movs	r3, #1
    2720:	2202      	movs	r2, #2
    2722:	2102      	movs	r1, #2
    2724:	2000      	movs	r0, #0
    2726:	4c3f      	ldr	r4, [pc, #252]	; (2824 <flashy_flash1+0x134>)
    2728:	47a0      	blx	r4
			break;
    272a:	e06b      	b.n	2804 <flashy_flash1+0x114>
		case 2:
			reset_all_lights();
    272c:	4b3c      	ldr	r3, [pc, #240]	; (2820 <flashy_flash1+0x130>)
    272e:	4798      	blx	r3
			configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    2730:	2301      	movs	r3, #1
    2732:	2200      	movs	r2, #0
    2734:	2102      	movs	r1, #2
    2736:	2000      	movs	r0, #0
    2738:	4c3a      	ldr	r4, [pc, #232]	; (2824 <flashy_flash1+0x134>)
    273a:	47a0      	blx	r4
			break;
    273c:	e062      	b.n	2804 <flashy_flash1+0x114>
		case 3:
			reset_all_lights();
    273e:	4b38      	ldr	r3, [pc, #224]	; (2820 <flashy_flash1+0x130>)
    2740:	4798      	blx	r3
			configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    2742:	2301      	movs	r3, #1
    2744:	2200      	movs	r2, #0
    2746:	2101      	movs	r1, #1
    2748:	2000      	movs	r0, #0
    274a:	4c36      	ldr	r4, [pc, #216]	; (2824 <flashy_flash1+0x134>)
    274c:	47a0      	blx	r4
			state++;
    274e:	4b32      	ldr	r3, [pc, #200]	; (2818 <flashy_flash1+0x128>)
    2750:	781b      	ldrb	r3, [r3, #0]
    2752:	3301      	adds	r3, #1
    2754:	b2da      	uxtb	r2, r3
    2756:	4b30      	ldr	r3, [pc, #192]	; (2818 <flashy_flash1+0x128>)
    2758:	701a      	strb	r2, [r3, #0]
			break;
    275a:	e053      	b.n	2804 <flashy_flash1+0x114>
		case 4:
			reset_all_lights();
    275c:	4b30      	ldr	r3, [pc, #192]	; (2820 <flashy_flash1+0x130>)
    275e:	4798      	blx	r3
			configure_pin(HIGH_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    2760:	2301      	movs	r3, #1
    2762:	2201      	movs	r2, #1
    2764:	2101      	movs	r1, #1
    2766:	2000      	movs	r0, #0
    2768:	4c2e      	ldr	r4, [pc, #184]	; (2824 <flashy_flash1+0x134>)
    276a:	47a0      	blx	r4
			break;
    276c:	e04a      	b.n	2804 <flashy_flash1+0x114>
		case 5:
			reset_all_lights();
    276e:	4b2c      	ldr	r3, [pc, #176]	; (2820 <flashy_flash1+0x130>)
    2770:	4798      	blx	r3
			configure_pin(LOW_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    2772:	2301      	movs	r3, #1
    2774:	2202      	movs	r2, #2
    2776:	2101      	movs	r1, #1
    2778:	2000      	movs	r0, #0
    277a:	4c2a      	ldr	r4, [pc, #168]	; (2824 <flashy_flash1+0x134>)
    277c:	47a0      	blx	r4
			break;
    277e:	e041      	b.n	2804 <flashy_flash1+0x114>
		case 6:
			reset_all_lights();
    2780:	4b27      	ldr	r3, [pc, #156]	; (2820 <flashy_flash1+0x130>)
    2782:	4798      	blx	r3
			configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    2784:	2301      	movs	r3, #1
    2786:	2202      	movs	r2, #2
    2788:	2103      	movs	r1, #3
    278a:	2000      	movs	r0, #0
    278c:	4c25      	ldr	r4, [pc, #148]	; (2824 <flashy_flash1+0x134>)
    278e:	47a0      	blx	r4
			break;
    2790:	e038      	b.n	2804 <flashy_flash1+0x114>
		case 7:
			reset_all_lights();
    2792:	4b23      	ldr	r3, [pc, #140]	; (2820 <flashy_flash1+0x130>)
    2794:	4798      	blx	r3
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    2796:	2301      	movs	r3, #1
    2798:	2201      	movs	r2, #1
    279a:	2103      	movs	r1, #3
    279c:	2000      	movs	r0, #0
    279e:	4c21      	ldr	r4, [pc, #132]	; (2824 <flashy_flash1+0x134>)
    27a0:	47a0      	blx	r4
			break;
    27a2:	e02f      	b.n	2804 <flashy_flash1+0x114>
		case 8:
			reset_all_lights();
    27a4:	4b1e      	ldr	r3, [pc, #120]	; (2820 <flashy_flash1+0x130>)
    27a6:	4798      	blx	r3
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    27a8:	2301      	movs	r3, #1
    27aa:	2200      	movs	r2, #0
    27ac:	2103      	movs	r1, #3
    27ae:	2000      	movs	r0, #0
    27b0:	4c1c      	ldr	r4, [pc, #112]	; (2824 <flashy_flash1+0x134>)
    27b2:	47a0      	blx	r4
			break;
    27b4:	e026      	b.n	2804 <flashy_flash1+0x114>
		case 9:
			reset_all_lights();
    27b6:	4b1a      	ldr	r3, [pc, #104]	; (2820 <flashy_flash1+0x130>)
    27b8:	4798      	blx	r3
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    27ba:	2301      	movs	r3, #1
    27bc:	2200      	movs	r2, #0
    27be:	2104      	movs	r1, #4
    27c0:	2000      	movs	r0, #0
    27c2:	4c18      	ldr	r4, [pc, #96]	; (2824 <flashy_flash1+0x134>)
    27c4:	47a0      	blx	r4
			break;
    27c6:	e01d      	b.n	2804 <flashy_flash1+0x114>
		case 10:
			reset_all_lights();
    27c8:	4b15      	ldr	r3, [pc, #84]	; (2820 <flashy_flash1+0x130>)
    27ca:	4798      	blx	r3
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    27cc:	2301      	movs	r3, #1
    27ce:	2201      	movs	r2, #1
    27d0:	2104      	movs	r1, #4
    27d2:	2000      	movs	r0, #0
    27d4:	4c13      	ldr	r4, [pc, #76]	; (2824 <flashy_flash1+0x134>)
    27d6:	47a0      	blx	r4
			break;
    27d8:	e014      	b.n	2804 <flashy_flash1+0x114>
		case 11:
			reset_all_lights();
    27da:	4b11      	ldr	r3, [pc, #68]	; (2820 <flashy_flash1+0x130>)
    27dc:	4798      	blx	r3
			configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    27de:	2301      	movs	r3, #1
    27e0:	2202      	movs	r2, #2
    27e2:	2104      	movs	r1, #4
    27e4:	2000      	movs	r0, #0
    27e6:	4c0f      	ldr	r4, [pc, #60]	; (2824 <flashy_flash1+0x134>)
    27e8:	47a0      	blx	r4
			break;
    27ea:	e00b      	b.n	2804 <flashy_flash1+0x114>
		case 12:
			reset_all_lights();
    27ec:	4b0c      	ldr	r3, [pc, #48]	; (2820 <flashy_flash1+0x130>)
    27ee:	4798      	blx	r3
			state = 0;
    27f0:	4b09      	ldr	r3, [pc, #36]	; (2818 <flashy_flash1+0x128>)
    27f2:	2200      	movs	r2, #0
    27f4:	701a      	strb	r2, [r3, #0]
			break;
    27f6:	e005      	b.n	2804 <flashy_flash1+0x114>
		default:
			reset_all_lights();
    27f8:	4b09      	ldr	r3, [pc, #36]	; (2820 <flashy_flash1+0x130>)
    27fa:	4798      	blx	r3
			state = 0;
    27fc:	4b06      	ldr	r3, [pc, #24]	; (2818 <flashy_flash1+0x128>)
    27fe:	2200      	movs	r2, #0
    2800:	701a      	strb	r2, [r3, #0]
			break;
    2802:	46c0      	nop			; (mov r8, r8)
	}
	state++;
    2804:	4b04      	ldr	r3, [pc, #16]	; (2818 <flashy_flash1+0x128>)
    2806:	781b      	ldrb	r3, [r3, #0]
    2808:	3301      	adds	r3, #1
    280a:	b2da      	uxtb	r2, r3
    280c:	4b02      	ldr	r3, [pc, #8]	; (2818 <flashy_flash1+0x128>)
    280e:	701a      	strb	r2, [r3, #0]
}
    2810:	46c0      	nop			; (mov r8, r8)
    2812:	46bd      	mov	sp, r7
    2814:	bdb0      	pop	{r4, r5, r7, pc}
    2816:	46c0      	nop			; (mov r8, r8)
    2818:	20000560 	.word	0x20000560
    281c:	0000705c 	.word	0x0000705c
    2820:	00002d09 	.word	0x00002d09
    2824:	00002f81 	.word	0x00002f81

00002828 <flashy_flash2>:

void flashy_flash2()
{
    2828:	b5b0      	push	{r4, r5, r7, lr}
    282a:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
    282c:	4b8e      	ldr	r3, [pc, #568]	; (2a68 <flashy_flash2+0x240>)
    282e:	781b      	ldrb	r3, [r3, #0]
    2830:	2b0a      	cmp	r3, #10
    2832:	d900      	bls.n	2836 <flashy_flash2+0xe>
    2834:	e110      	b.n	2a58 <flashy_flash2+0x230>
    2836:	009a      	lsls	r2, r3, #2
    2838:	4b8c      	ldr	r3, [pc, #560]	; (2a6c <flashy_flash2+0x244>)
    283a:	18d3      	adds	r3, r2, r3
    283c:	681b      	ldr	r3, [r3, #0]
    283e:	469f      	mov	pc, r3
	{
		case 0:
			reset_all_lights();
    2840:	4b8b      	ldr	r3, [pc, #556]	; (2a70 <flashy_flash2+0x248>)
    2842:	4798      	blx	r3
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    2844:	2301      	movs	r3, #1
    2846:	2204      	movs	r2, #4
    2848:	2101      	movs	r1, #1
    284a:	2000      	movs	r0, #0
    284c:	4c89      	ldr	r4, [pc, #548]	; (2a74 <flashy_flash2+0x24c>)
    284e:	47a0      	blx	r4
			state++;
    2850:	4b85      	ldr	r3, [pc, #532]	; (2a68 <flashy_flash2+0x240>)
    2852:	781b      	ldrb	r3, [r3, #0]
    2854:	3301      	adds	r3, #1
    2856:	b2da      	uxtb	r2, r3
    2858:	4b83      	ldr	r3, [pc, #524]	; (2a68 <flashy_flash2+0x240>)
    285a:	701a      	strb	r2, [r3, #0]
			break;
    285c:	e101      	b.n	2a62 <flashy_flash2+0x23a>
		case 1:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    285e:	2300      	movs	r3, #0
    2860:	2204      	movs	r2, #4
    2862:	2101      	movs	r1, #1
    2864:	2000      	movs	r0, #0
    2866:	4c83      	ldr	r4, [pc, #524]	; (2a74 <flashy_flash2+0x24c>)
    2868:	47a0      	blx	r4
			state++;
    286a:	4b7f      	ldr	r3, [pc, #508]	; (2a68 <flashy_flash2+0x240>)
    286c:	781b      	ldrb	r3, [r3, #0]
    286e:	3301      	adds	r3, #1
    2870:	b2da      	uxtb	r2, r3
    2872:	4b7d      	ldr	r3, [pc, #500]	; (2a68 <flashy_flash2+0x240>)
    2874:	701a      	strb	r2, [r3, #0]
			break;
    2876:	e0f4      	b.n	2a62 <flashy_flash2+0x23a>
		case 2:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    2878:	2301      	movs	r3, #1
    287a:	2204      	movs	r2, #4
    287c:	2101      	movs	r1, #1
    287e:	2000      	movs	r0, #0
    2880:	4c7c      	ldr	r4, [pc, #496]	; (2a74 <flashy_flash2+0x24c>)
    2882:	47a0      	blx	r4
			state++;
    2884:	4b78      	ldr	r3, [pc, #480]	; (2a68 <flashy_flash2+0x240>)
    2886:	781b      	ldrb	r3, [r3, #0]
    2888:	3301      	adds	r3, #1
    288a:	b2da      	uxtb	r2, r3
    288c:	4b76      	ldr	r3, [pc, #472]	; (2a68 <flashy_flash2+0x240>)
    288e:	701a      	strb	r2, [r3, #0]
			break;
    2890:	e0e7      	b.n	2a62 <flashy_flash2+0x23a>
		case 3:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    2892:	2300      	movs	r3, #0
    2894:	2204      	movs	r2, #4
    2896:	2101      	movs	r1, #1
    2898:	2000      	movs	r0, #0
    289a:	4c76      	ldr	r4, [pc, #472]	; (2a74 <flashy_flash2+0x24c>)
    289c:	47a0      	blx	r4
			state++;
    289e:	4b72      	ldr	r3, [pc, #456]	; (2a68 <flashy_flash2+0x240>)
    28a0:	781b      	ldrb	r3, [r3, #0]
    28a2:	3301      	adds	r3, #1
    28a4:	b2da      	uxtb	r2, r3
    28a6:	4b70      	ldr	r3, [pc, #448]	; (2a68 <flashy_flash2+0x240>)
    28a8:	701a      	strb	r2, [r3, #0]
			break;
    28aa:	e0da      	b.n	2a62 <flashy_flash2+0x23a>
		case 4:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    28ac:	2301      	movs	r3, #1
    28ae:	2204      	movs	r2, #4
    28b0:	2101      	movs	r1, #1
    28b2:	2000      	movs	r0, #0
    28b4:	4c6f      	ldr	r4, [pc, #444]	; (2a74 <flashy_flash2+0x24c>)
    28b6:	47a0      	blx	r4
			state++;
    28b8:	4b6b      	ldr	r3, [pc, #428]	; (2a68 <flashy_flash2+0x240>)
    28ba:	781b      	ldrb	r3, [r3, #0]
    28bc:	3301      	adds	r3, #1
    28be:	b2da      	uxtb	r2, r3
    28c0:	4b69      	ldr	r3, [pc, #420]	; (2a68 <flashy_flash2+0x240>)
    28c2:	701a      	strb	r2, [r3, #0]
			break;
    28c4:	e0cd      	b.n	2a62 <flashy_flash2+0x23a>
		case 5:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    28c6:	2300      	movs	r3, #0
    28c8:	2204      	movs	r2, #4
    28ca:	2101      	movs	r1, #1
    28cc:	2000      	movs	r0, #0
    28ce:	4c69      	ldr	r4, [pc, #420]	; (2a74 <flashy_flash2+0x24c>)
    28d0:	47a0      	blx	r4
			state++;
    28d2:	4b65      	ldr	r3, [pc, #404]	; (2a68 <flashy_flash2+0x240>)
    28d4:	781b      	ldrb	r3, [r3, #0]
    28d6:	3301      	adds	r3, #1
    28d8:	b2da      	uxtb	r2, r3
    28da:	4b63      	ldr	r3, [pc, #396]	; (2a68 <flashy_flash2+0x240>)
    28dc:	701a      	strb	r2, [r3, #0]
			break;
    28de:	e0c0      	b.n	2a62 <flashy_flash2+0x23a>
		case 6:
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    28e0:	2301      	movs	r3, #1
    28e2:	2202      	movs	r2, #2
    28e4:	2101      	movs	r1, #1
    28e6:	2000      	movs	r0, #0
    28e8:	4c62      	ldr	r4, [pc, #392]	; (2a74 <flashy_flash2+0x24c>)
    28ea:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    28ec:	2301      	movs	r3, #1
    28ee:	2202      	movs	r2, #2
    28f0:	2102      	movs	r1, #2
    28f2:	2000      	movs	r0, #0
    28f4:	4c5f      	ldr	r4, [pc, #380]	; (2a74 <flashy_flash2+0x24c>)
    28f6:	47a0      	blx	r4
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    28f8:	2301      	movs	r3, #1
    28fa:	2201      	movs	r2, #1
    28fc:	2103      	movs	r1, #3
    28fe:	2000      	movs	r0, #0
    2900:	4c5c      	ldr	r4, [pc, #368]	; (2a74 <flashy_flash2+0x24c>)
    2902:	47a0      	blx	r4
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    2904:	2301      	movs	r3, #1
    2906:	2201      	movs	r2, #1
    2908:	2104      	movs	r1, #4
    290a:	2000      	movs	r0, #0
    290c:	4c59      	ldr	r4, [pc, #356]	; (2a74 <flashy_flash2+0x24c>)
    290e:	47a0      	blx	r4
			state++;
    2910:	4b55      	ldr	r3, [pc, #340]	; (2a68 <flashy_flash2+0x240>)
    2912:	781b      	ldrb	r3, [r3, #0]
    2914:	3301      	adds	r3, #1
    2916:	b2da      	uxtb	r2, r3
    2918:	4b53      	ldr	r3, [pc, #332]	; (2a68 <flashy_flash2+0x240>)
    291a:	701a      	strb	r2, [r3, #0]
			break;
    291c:	e0a1      	b.n	2a62 <flashy_flash2+0x23a>
		case 7:
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    291e:	2300      	movs	r3, #0
    2920:	2202      	movs	r2, #2
    2922:	2101      	movs	r1, #1
    2924:	2000      	movs	r0, #0
    2926:	4c53      	ldr	r4, [pc, #332]	; (2a74 <flashy_flash2+0x24c>)
    2928:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    292a:	2300      	movs	r3, #0
    292c:	2202      	movs	r2, #2
    292e:	2102      	movs	r1, #2
    2930:	2000      	movs	r0, #0
    2932:	4c50      	ldr	r4, [pc, #320]	; (2a74 <flashy_flash2+0x24c>)
    2934:	47a0      	blx	r4
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    2936:	2301      	movs	r3, #1
    2938:	2201      	movs	r2, #1
    293a:	2101      	movs	r1, #1
    293c:	2000      	movs	r0, #0
    293e:	4c4d      	ldr	r4, [pc, #308]	; (2a74 <flashy_flash2+0x24c>)
    2940:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    2942:	2301      	movs	r3, #1
    2944:	2201      	movs	r2, #1
    2946:	2102      	movs	r1, #2
    2948:	2000      	movs	r0, #0
    294a:	4c4a      	ldr	r4, [pc, #296]	; (2a74 <flashy_flash2+0x24c>)
    294c:	47a0      	blx	r4
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    294e:	2300      	movs	r3, #0
    2950:	2201      	movs	r2, #1
    2952:	2103      	movs	r1, #3
    2954:	2000      	movs	r0, #0
    2956:	4c47      	ldr	r4, [pc, #284]	; (2a74 <flashy_flash2+0x24c>)
    2958:	47a0      	blx	r4
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    295a:	2300      	movs	r3, #0
    295c:	2201      	movs	r2, #1
    295e:	2104      	movs	r1, #4
    2960:	2000      	movs	r0, #0
    2962:	4c44      	ldr	r4, [pc, #272]	; (2a74 <flashy_flash2+0x24c>)
    2964:	47a0      	blx	r4
			state++;
    2966:	4b40      	ldr	r3, [pc, #256]	; (2a68 <flashy_flash2+0x240>)
    2968:	781b      	ldrb	r3, [r3, #0]
    296a:	3301      	adds	r3, #1
    296c:	b2da      	uxtb	r2, r3
    296e:	4b3e      	ldr	r3, [pc, #248]	; (2a68 <flashy_flash2+0x240>)
    2970:	701a      	strb	r2, [r3, #0]
			break;
    2972:	e076      	b.n	2a62 <flashy_flash2+0x23a>
		case 8:
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    2974:	2300      	movs	r3, #0
    2976:	2201      	movs	r2, #1
    2978:	2101      	movs	r1, #1
    297a:	2000      	movs	r0, #0
    297c:	4c3d      	ldr	r4, [pc, #244]	; (2a74 <flashy_flash2+0x24c>)
    297e:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    2980:	2300      	movs	r3, #0
    2982:	2201      	movs	r2, #1
    2984:	2102      	movs	r1, #2
    2986:	2000      	movs	r0, #0
    2988:	4c3a      	ldr	r4, [pc, #232]	; (2a74 <flashy_flash2+0x24c>)
    298a:	47a0      	blx	r4
			configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    298c:	2301      	movs	r3, #1
    298e:	2203      	movs	r2, #3
    2990:	2101      	movs	r1, #1
    2992:	2000      	movs	r0, #0
    2994:	4c37      	ldr	r4, [pc, #220]	; (2a74 <flashy_flash2+0x24c>)
    2996:	47a0      	blx	r4
			configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    2998:	2301      	movs	r3, #1
    299a:	2203      	movs	r2, #3
    299c:	2102      	movs	r1, #2
    299e:	2000      	movs	r0, #0
    29a0:	4c34      	ldr	r4, [pc, #208]	; (2a74 <flashy_flash2+0x24c>)
    29a2:	47a0      	blx	r4
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    29a4:	2301      	movs	r3, #1
    29a6:	2200      	movs	r2, #0
    29a8:	2103      	movs	r1, #3
    29aa:	2000      	movs	r0, #0
    29ac:	4c31      	ldr	r4, [pc, #196]	; (2a74 <flashy_flash2+0x24c>)
    29ae:	47a0      	blx	r4
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    29b0:	2301      	movs	r3, #1
    29b2:	2200      	movs	r2, #0
    29b4:	2104      	movs	r1, #4
    29b6:	2000      	movs	r0, #0
    29b8:	4c2e      	ldr	r4, [pc, #184]	; (2a74 <flashy_flash2+0x24c>)
    29ba:	47a0      	blx	r4
			state++;
    29bc:	4b2a      	ldr	r3, [pc, #168]	; (2a68 <flashy_flash2+0x240>)
    29be:	781b      	ldrb	r3, [r3, #0]
    29c0:	3301      	adds	r3, #1
    29c2:	b2da      	uxtb	r2, r3
    29c4:	4b28      	ldr	r3, [pc, #160]	; (2a68 <flashy_flash2+0x240>)
    29c6:	701a      	strb	r2, [r3, #0]
			break;
    29c8:	e04b      	b.n	2a62 <flashy_flash2+0x23a>
		case 9:
			configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    29ca:	2300      	movs	r3, #0
    29cc:	2203      	movs	r2, #3
    29ce:	2101      	movs	r1, #1
    29d0:	2000      	movs	r0, #0
    29d2:	4c28      	ldr	r4, [pc, #160]	; (2a74 <flashy_flash2+0x24c>)
    29d4:	47a0      	blx	r4
			configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    29d6:	2300      	movs	r3, #0
    29d8:	2203      	movs	r2, #3
    29da:	2102      	movs	r1, #2
    29dc:	2000      	movs	r0, #0
    29de:	4c25      	ldr	r4, [pc, #148]	; (2a74 <flashy_flash2+0x24c>)
    29e0:	47a0      	blx	r4
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    29e2:	2301      	movs	r3, #1
    29e4:	2201      	movs	r2, #1
    29e6:	2101      	movs	r1, #1
    29e8:	2000      	movs	r0, #0
    29ea:	4c22      	ldr	r4, [pc, #136]	; (2a74 <flashy_flash2+0x24c>)
    29ec:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    29ee:	2301      	movs	r3, #1
    29f0:	2201      	movs	r2, #1
    29f2:	2102      	movs	r1, #2
    29f4:	2000      	movs	r0, #0
    29f6:	4c1f      	ldr	r4, [pc, #124]	; (2a74 <flashy_flash2+0x24c>)
    29f8:	47a0      	blx	r4
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    29fa:	2300      	movs	r3, #0
    29fc:	2200      	movs	r2, #0
    29fe:	2103      	movs	r1, #3
    2a00:	2000      	movs	r0, #0
    2a02:	4c1c      	ldr	r4, [pc, #112]	; (2a74 <flashy_flash2+0x24c>)
    2a04:	47a0      	blx	r4
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    2a06:	2300      	movs	r3, #0
    2a08:	2200      	movs	r2, #0
    2a0a:	2104      	movs	r1, #4
    2a0c:	2000      	movs	r0, #0
    2a0e:	4c19      	ldr	r4, [pc, #100]	; (2a74 <flashy_flash2+0x24c>)
    2a10:	47a0      	blx	r4
			state++;
    2a12:	4b15      	ldr	r3, [pc, #84]	; (2a68 <flashy_flash2+0x240>)
    2a14:	781b      	ldrb	r3, [r3, #0]
    2a16:	3301      	adds	r3, #1
    2a18:	b2da      	uxtb	r2, r3
    2a1a:	4b13      	ldr	r3, [pc, #76]	; (2a68 <flashy_flash2+0x240>)
    2a1c:	701a      	strb	r2, [r3, #0]
			break;
    2a1e:	e020      	b.n	2a62 <flashy_flash2+0x23a>
		case 10:
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    2a20:	2300      	movs	r3, #0
    2a22:	2201      	movs	r2, #1
    2a24:	2101      	movs	r1, #1
    2a26:	2000      	movs	r0, #0
    2a28:	4c12      	ldr	r4, [pc, #72]	; (2a74 <flashy_flash2+0x24c>)
    2a2a:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    2a2c:	2300      	movs	r3, #0
    2a2e:	2201      	movs	r2, #1
    2a30:	2102      	movs	r1, #2
    2a32:	2000      	movs	r0, #0
    2a34:	4c0f      	ldr	r4, [pc, #60]	; (2a74 <flashy_flash2+0x24c>)
    2a36:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    2a38:	2301      	movs	r3, #1
    2a3a:	2202      	movs	r2, #2
    2a3c:	2101      	movs	r1, #1
    2a3e:	2000      	movs	r0, #0
    2a40:	4c0c      	ldr	r4, [pc, #48]	; (2a74 <flashy_flash2+0x24c>)
    2a42:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    2a44:	2301      	movs	r3, #1
    2a46:	2202      	movs	r2, #2
    2a48:	2102      	movs	r1, #2
    2a4a:	2000      	movs	r0, #0
    2a4c:	4c09      	ldr	r4, [pc, #36]	; (2a74 <flashy_flash2+0x24c>)
    2a4e:	47a0      	blx	r4
			state = 0;
    2a50:	4b05      	ldr	r3, [pc, #20]	; (2a68 <flashy_flash2+0x240>)
    2a52:	2200      	movs	r2, #0
    2a54:	701a      	strb	r2, [r3, #0]
			break;
    2a56:	e004      	b.n	2a62 <flashy_flash2+0x23a>
		default:
			reset_all_lights();
    2a58:	4b05      	ldr	r3, [pc, #20]	; (2a70 <flashy_flash2+0x248>)
    2a5a:	4798      	blx	r3
			state = 0;
    2a5c:	4b02      	ldr	r3, [pc, #8]	; (2a68 <flashy_flash2+0x240>)
    2a5e:	2200      	movs	r2, #0
    2a60:	701a      	strb	r2, [r3, #0]
	}
}
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	46bd      	mov	sp, r7
    2a66:	bdb0      	pop	{r4, r5, r7, pc}
    2a68:	20000561 	.word	0x20000561
    2a6c:	00007090 	.word	0x00007090
    2a70:	00002d09 	.word	0x00002d09
    2a74:	00002f81 	.word	0x00002f81

00002a78 <flashy_fades>:

void flashy_fades()
{
    2a78:	b5b0      	push	{r4, r5, r7, lr}
    2a7a:	af00      	add	r7, sp, #0
	//static uint8_t pwm_val = 0;
	static uint8_t duty_cycle = PWM_FREQ/4;
	
	if (pwm_count > duty_cycle)
    2a7c:	4b61      	ldr	r3, [pc, #388]	; (2c04 <flashy_fades+0x18c>)
    2a7e:	781b      	ldrb	r3, [r3, #0]
    2a80:	001a      	movs	r2, r3
    2a82:	4b61      	ldr	r3, [pc, #388]	; (2c08 <flashy_fades+0x190>)
    2a84:	681b      	ldr	r3, [r3, #0]
    2a86:	429a      	cmp	r2, r3
    2a88:	da54      	bge.n	2b34 <flashy_fades+0xbc>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    2a8a:	2301      	movs	r3, #1
    2a8c:	2200      	movs	r2, #0
    2a8e:	2101      	movs	r1, #1
    2a90:	2000      	movs	r0, #0
    2a92:	4c5e      	ldr	r4, [pc, #376]	; (2c0c <flashy_fades+0x194>)
    2a94:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    2a96:	2301      	movs	r3, #1
    2a98:	2200      	movs	r2, #0
    2a9a:	2102      	movs	r1, #2
    2a9c:	2000      	movs	r0, #0
    2a9e:	4c5b      	ldr	r4, [pc, #364]	; (2c0c <flashy_fades+0x194>)
    2aa0:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    2aa2:	2301      	movs	r3, #1
    2aa4:	2200      	movs	r2, #0
    2aa6:	2103      	movs	r1, #3
    2aa8:	2000      	movs	r0, #0
    2aaa:	4c58      	ldr	r4, [pc, #352]	; (2c0c <flashy_fades+0x194>)
    2aac:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    2aae:	2301      	movs	r3, #1
    2ab0:	2200      	movs	r2, #0
    2ab2:	2104      	movs	r1, #4
    2ab4:	2000      	movs	r0, #0
    2ab6:	4c55      	ldr	r4, [pc, #340]	; (2c0c <flashy_fades+0x194>)
    2ab8:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    2aba:	2301      	movs	r3, #1
    2abc:	2201      	movs	r2, #1
    2abe:	2102      	movs	r1, #2
    2ac0:	2000      	movs	r0, #0
    2ac2:	4c52      	ldr	r4, [pc, #328]	; (2c0c <flashy_fades+0x194>)
    2ac4:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    2ac6:	2301      	movs	r3, #1
    2ac8:	2201      	movs	r2, #1
    2aca:	2101      	movs	r1, #1
    2acc:	2000      	movs	r0, #0
    2ace:	4c4f      	ldr	r4, [pc, #316]	; (2c0c <flashy_fades+0x194>)
    2ad0:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    2ad2:	2301      	movs	r3, #1
    2ad4:	2202      	movs	r2, #2
    2ad6:	2102      	movs	r1, #2
    2ad8:	2000      	movs	r0, #0
    2ada:	4c4c      	ldr	r4, [pc, #304]	; (2c0c <flashy_fades+0x194>)
    2adc:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    2ade:	2301      	movs	r3, #1
    2ae0:	2202      	movs	r2, #2
    2ae2:	2101      	movs	r1, #1
    2ae4:	2000      	movs	r0, #0
    2ae6:	4c49      	ldr	r4, [pc, #292]	; (2c0c <flashy_fades+0x194>)
    2ae8:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    2aea:	2301      	movs	r3, #1
    2aec:	2202      	movs	r2, #2
    2aee:	2104      	movs	r1, #4
    2af0:	2000      	movs	r0, #0
    2af2:	4c46      	ldr	r4, [pc, #280]	; (2c0c <flashy_fades+0x194>)
    2af4:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    2af6:	2301      	movs	r3, #1
    2af8:	2202      	movs	r2, #2
    2afa:	2103      	movs	r1, #3
    2afc:	2000      	movs	r0, #0
    2afe:	4c43      	ldr	r4, [pc, #268]	; (2c0c <flashy_fades+0x194>)
    2b00:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    2b02:	2301      	movs	r3, #1
    2b04:	2201      	movs	r2, #1
    2b06:	2103      	movs	r1, #3
    2b08:	2000      	movs	r0, #0
    2b0a:	4c40      	ldr	r4, [pc, #256]	; (2c0c <flashy_fades+0x194>)
    2b0c:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    2b0e:	2301      	movs	r3, #1
    2b10:	2201      	movs	r2, #1
    2b12:	2104      	movs	r1, #4
    2b14:	2000      	movs	r0, #0
    2b16:	4c3d      	ldr	r4, [pc, #244]	; (2c0c <flashy_fades+0x194>)
    2b18:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    2b1a:	2301      	movs	r3, #1
    2b1c:	2203      	movs	r2, #3
    2b1e:	2102      	movs	r1, #2
    2b20:	2000      	movs	r0, #0
    2b22:	4c3a      	ldr	r4, [pc, #232]	; (2c0c <flashy_fades+0x194>)
    2b24:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    2b26:	2301      	movs	r3, #1
    2b28:	2203      	movs	r2, #3
    2b2a:	2101      	movs	r1, #1
    2b2c:	2000      	movs	r0, #0
    2b2e:	4c37      	ldr	r4, [pc, #220]	; (2c0c <flashy_fades+0x194>)
    2b30:	47a0      	blx	r4
    2b32:	e053      	b.n	2bdc <flashy_fades+0x164>
	}
	else
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,false);
    2b34:	2300      	movs	r3, #0
    2b36:	2200      	movs	r2, #0
    2b38:	2101      	movs	r1, #1
    2b3a:	2000      	movs	r0, #0
    2b3c:	4c33      	ldr	r4, [pc, #204]	; (2c0c <flashy_fades+0x194>)
    2b3e:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,false);
    2b40:	2300      	movs	r3, #0
    2b42:	2200      	movs	r2, #0
    2b44:	2102      	movs	r1, #2
    2b46:	2000      	movs	r0, #0
    2b48:	4c30      	ldr	r4, [pc, #192]	; (2c0c <flashy_fades+0x194>)
    2b4a:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    2b4c:	2300      	movs	r3, #0
    2b4e:	2200      	movs	r2, #0
    2b50:	2103      	movs	r1, #3
    2b52:	2000      	movs	r0, #0
    2b54:	4c2d      	ldr	r4, [pc, #180]	; (2c0c <flashy_fades+0x194>)
    2b56:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    2b58:	2300      	movs	r3, #0
    2b5a:	2200      	movs	r2, #0
    2b5c:	2104      	movs	r1, #4
    2b5e:	2000      	movs	r0, #0
    2b60:	4c2a      	ldr	r4, [pc, #168]	; (2c0c <flashy_fades+0x194>)
    2b62:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    2b64:	2300      	movs	r3, #0
    2b66:	2201      	movs	r2, #1
    2b68:	2102      	movs	r1, #2
    2b6a:	2000      	movs	r0, #0
    2b6c:	4c27      	ldr	r4, [pc, #156]	; (2c0c <flashy_fades+0x194>)
    2b6e:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    2b70:	2300      	movs	r3, #0
    2b72:	2201      	movs	r2, #1
    2b74:	2101      	movs	r1, #1
    2b76:	2000      	movs	r0, #0
    2b78:	4c24      	ldr	r4, [pc, #144]	; (2c0c <flashy_fades+0x194>)
    2b7a:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    2b7c:	2300      	movs	r3, #0
    2b7e:	2202      	movs	r2, #2
    2b80:	2102      	movs	r1, #2
    2b82:	2000      	movs	r0, #0
    2b84:	4c21      	ldr	r4, [pc, #132]	; (2c0c <flashy_fades+0x194>)
    2b86:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    2b88:	2300      	movs	r3, #0
    2b8a:	2202      	movs	r2, #2
    2b8c:	2101      	movs	r1, #1
    2b8e:	2000      	movs	r0, #0
    2b90:	4c1e      	ldr	r4, [pc, #120]	; (2c0c <flashy_fades+0x194>)
    2b92:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,false);
    2b94:	2300      	movs	r3, #0
    2b96:	2202      	movs	r2, #2
    2b98:	2104      	movs	r1, #4
    2b9a:	2000      	movs	r0, #0
    2b9c:	4c1b      	ldr	r4, [pc, #108]	; (2c0c <flashy_fades+0x194>)
    2b9e:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,false);
    2ba0:	2300      	movs	r3, #0
    2ba2:	2202      	movs	r2, #2
    2ba4:	2103      	movs	r1, #3
    2ba6:	2000      	movs	r0, #0
    2ba8:	4c18      	ldr	r4, [pc, #96]	; (2c0c <flashy_fades+0x194>)
    2baa:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    2bac:	2300      	movs	r3, #0
    2bae:	2201      	movs	r2, #1
    2bb0:	2103      	movs	r1, #3
    2bb2:	2000      	movs	r0, #0
    2bb4:	4c15      	ldr	r4, [pc, #84]	; (2c0c <flashy_fades+0x194>)
    2bb6:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    2bb8:	2300      	movs	r3, #0
    2bba:	2201      	movs	r2, #1
    2bbc:	2104      	movs	r1, #4
    2bbe:	2000      	movs	r0, #0
    2bc0:	4c12      	ldr	r4, [pc, #72]	; (2c0c <flashy_fades+0x194>)
    2bc2:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    2bc4:	2300      	movs	r3, #0
    2bc6:	2203      	movs	r2, #3
    2bc8:	2102      	movs	r1, #2
    2bca:	2000      	movs	r0, #0
    2bcc:	4c0f      	ldr	r4, [pc, #60]	; (2c0c <flashy_fades+0x194>)
    2bce:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    2bd0:	2300      	movs	r3, #0
    2bd2:	2203      	movs	r2, #3
    2bd4:	2101      	movs	r1, #1
    2bd6:	2000      	movs	r0, #0
    2bd8:	4c0c      	ldr	r4, [pc, #48]	; (2c0c <flashy_fades+0x194>)
    2bda:	47a0      	blx	r4
	}
	
	//pwm_val++;
	if (pwm_count >= PWM_FREQ)
    2bdc:	4b0a      	ldr	r3, [pc, #40]	; (2c08 <flashy_fades+0x190>)
    2bde:	681b      	ldr	r3, [r3, #0]
    2be0:	2bf9      	cmp	r3, #249	; 0xf9
    2be2:	dd0c      	ble.n	2bfe <flashy_fades+0x186>
	{
		//pwm_val = 0;
		duty_cycle += PWM_FREQ/10;
    2be4:	4b07      	ldr	r3, [pc, #28]	; (2c04 <flashy_fades+0x18c>)
    2be6:	781b      	ldrb	r3, [r3, #0]
    2be8:	3319      	adds	r3, #25
    2bea:	b2da      	uxtb	r2, r3
    2bec:	4b05      	ldr	r3, [pc, #20]	; (2c04 <flashy_fades+0x18c>)
    2bee:	701a      	strb	r2, [r3, #0]
		if (duty_cycle >= PWM_FREQ)
    2bf0:	4b04      	ldr	r3, [pc, #16]	; (2c04 <flashy_fades+0x18c>)
    2bf2:	781b      	ldrb	r3, [r3, #0]
    2bf4:	2bf9      	cmp	r3, #249	; 0xf9
    2bf6:	d902      	bls.n	2bfe <flashy_fades+0x186>
		{
			duty_cycle = PWM_FREQ/4;
    2bf8:	4b02      	ldr	r3, [pc, #8]	; (2c04 <flashy_fades+0x18c>)
    2bfa:	223e      	movs	r2, #62	; 0x3e
    2bfc:	701a      	strb	r2, [r3, #0]
		}
	}
}
    2bfe:	46c0      	nop			; (mov r8, r8)
    2c00:	46bd      	mov	sp, r7
    2c02:	bdb0      	pop	{r4, r5, r7, pc}
    2c04:	20000160 	.word	0x20000160
    2c08:	20001704 	.word	0x20001704
    2c0c:	00002f81 	.word	0x00002f81

00002c10 <flashy_flash3>:

void flashy_flash3(void)
{
    2c10:	b5b0      	push	{r4, r5, r7, lr}
    2c12:	af00      	add	r7, sp, #0
	static uint8_t count = 0;
	
	reset_all_lights();
    2c14:	4b38      	ldr	r3, [pc, #224]	; (2cf8 <flashy_flash3+0xe8>)
    2c16:	4798      	blx	r3

	configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,bool_map_1[count][0]);
    2c18:	4b38      	ldr	r3, [pc, #224]	; (2cfc <flashy_flash3+0xec>)
    2c1a:	781b      	ldrb	r3, [r3, #0]
    2c1c:	001a      	movs	r2, r3
    2c1e:	4b38      	ldr	r3, [pc, #224]	; (2d00 <flashy_flash3+0xf0>)
    2c20:	00d2      	lsls	r2, r2, #3
    2c22:	5cd3      	ldrb	r3, [r2, r3]
    2c24:	2202      	movs	r2, #2
    2c26:	2103      	movs	r1, #3
    2c28:	2000      	movs	r0, #0
    2c2a:	4c36      	ldr	r4, [pc, #216]	; (2d04 <flashy_flash3+0xf4>)
    2c2c:	47a0      	blx	r4
	configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,bool_map_1[count][1]);
    2c2e:	4b33      	ldr	r3, [pc, #204]	; (2cfc <flashy_flash3+0xec>)
    2c30:	781b      	ldrb	r3, [r3, #0]
    2c32:	4a33      	ldr	r2, [pc, #204]	; (2d00 <flashy_flash3+0xf0>)
    2c34:	00db      	lsls	r3, r3, #3
    2c36:	18d3      	adds	r3, r2, r3
    2c38:	3301      	adds	r3, #1
    2c3a:	781b      	ldrb	r3, [r3, #0]
    2c3c:	2201      	movs	r2, #1
    2c3e:	2101      	movs	r1, #1
    2c40:	2000      	movs	r0, #0
    2c42:	4c30      	ldr	r4, [pc, #192]	; (2d04 <flashy_flash3+0xf4>)
    2c44:	47a0      	blx	r4
	configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,bool_map_1[count][2]);
    2c46:	4b2d      	ldr	r3, [pc, #180]	; (2cfc <flashy_flash3+0xec>)
    2c48:	781b      	ldrb	r3, [r3, #0]
    2c4a:	4a2d      	ldr	r2, [pc, #180]	; (2d00 <flashy_flash3+0xf0>)
    2c4c:	00db      	lsls	r3, r3, #3
    2c4e:	18d3      	adds	r3, r2, r3
    2c50:	3302      	adds	r3, #2
    2c52:	781b      	ldrb	r3, [r3, #0]
    2c54:	2202      	movs	r2, #2
    2c56:	2101      	movs	r1, #1
    2c58:	2000      	movs	r0, #0
    2c5a:	4c2a      	ldr	r4, [pc, #168]	; (2d04 <flashy_flash3+0xf4>)
    2c5c:	47a0      	blx	r4
	configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,bool_map_1[count][3]);
    2c5e:	4b27      	ldr	r3, [pc, #156]	; (2cfc <flashy_flash3+0xec>)
    2c60:	781b      	ldrb	r3, [r3, #0]
    2c62:	4a27      	ldr	r2, [pc, #156]	; (2d00 <flashy_flash3+0xf0>)
    2c64:	00db      	lsls	r3, r3, #3
    2c66:	18d3      	adds	r3, r2, r3
    2c68:	3303      	adds	r3, #3
    2c6a:	781b      	ldrb	r3, [r3, #0]
    2c6c:	2200      	movs	r2, #0
    2c6e:	2101      	movs	r1, #1
    2c70:	2000      	movs	r0, #0
    2c72:	4c24      	ldr	r4, [pc, #144]	; (2d04 <flashy_flash3+0xf4>)
    2c74:	47a0      	blx	r4
	configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,bool_map_1[count][4]);
    2c76:	4b21      	ldr	r3, [pc, #132]	; (2cfc <flashy_flash3+0xec>)
    2c78:	781b      	ldrb	r3, [r3, #0]
    2c7a:	4a21      	ldr	r2, [pc, #132]	; (2d00 <flashy_flash3+0xf0>)
    2c7c:	00db      	lsls	r3, r3, #3
    2c7e:	18d3      	adds	r3, r2, r3
    2c80:	3304      	adds	r3, #4
    2c82:	781b      	ldrb	r3, [r3, #0]
    2c84:	2200      	movs	r2, #0
    2c86:	2102      	movs	r1, #2
    2c88:	2000      	movs	r0, #0
    2c8a:	4c1e      	ldr	r4, [pc, #120]	; (2d04 <flashy_flash3+0xf4>)
    2c8c:	47a0      	blx	r4
	configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,bool_map_1[count][5]);
    2c8e:	4b1b      	ldr	r3, [pc, #108]	; (2cfc <flashy_flash3+0xec>)
    2c90:	781b      	ldrb	r3, [r3, #0]
    2c92:	4a1b      	ldr	r2, [pc, #108]	; (2d00 <flashy_flash3+0xf0>)
    2c94:	00db      	lsls	r3, r3, #3
    2c96:	18d3      	adds	r3, r2, r3
    2c98:	3305      	adds	r3, #5
    2c9a:	781b      	ldrb	r3, [r3, #0]
    2c9c:	2202      	movs	r2, #2
    2c9e:	2102      	movs	r1, #2
    2ca0:	2000      	movs	r0, #0
    2ca2:	4c18      	ldr	r4, [pc, #96]	; (2d04 <flashy_flash3+0xf4>)
    2ca4:	47a0      	blx	r4
	configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,bool_map_1[count][6]);
    2ca6:	4b15      	ldr	r3, [pc, #84]	; (2cfc <flashy_flash3+0xec>)
    2ca8:	781b      	ldrb	r3, [r3, #0]
    2caa:	4a15      	ldr	r2, [pc, #84]	; (2d00 <flashy_flash3+0xf0>)
    2cac:	00db      	lsls	r3, r3, #3
    2cae:	18d3      	adds	r3, r2, r3
    2cb0:	3306      	adds	r3, #6
    2cb2:	781b      	ldrb	r3, [r3, #0]
    2cb4:	2201      	movs	r2, #1
    2cb6:	2102      	movs	r1, #2
    2cb8:	2000      	movs	r0, #0
    2cba:	4c12      	ldr	r4, [pc, #72]	; (2d04 <flashy_flash3+0xf4>)
    2cbc:	47a0      	blx	r4
	configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,bool_map_1[count][7]);
    2cbe:	4b0f      	ldr	r3, [pc, #60]	; (2cfc <flashy_flash3+0xec>)
    2cc0:	781b      	ldrb	r3, [r3, #0]
    2cc2:	4a0f      	ldr	r2, [pc, #60]	; (2d00 <flashy_flash3+0xf0>)
    2cc4:	00db      	lsls	r3, r3, #3
    2cc6:	18d3      	adds	r3, r2, r3
    2cc8:	3307      	adds	r3, #7
    2cca:	781b      	ldrb	r3, [r3, #0]
    2ccc:	2202      	movs	r2, #2
    2cce:	2104      	movs	r1, #4
    2cd0:	2000      	movs	r0, #0
    2cd2:	4c0c      	ldr	r4, [pc, #48]	; (2d04 <flashy_flash3+0xf4>)
    2cd4:	47a0      	blx	r4
	count++;
    2cd6:	4b09      	ldr	r3, [pc, #36]	; (2cfc <flashy_flash3+0xec>)
    2cd8:	781b      	ldrb	r3, [r3, #0]
    2cda:	3301      	adds	r3, #1
    2cdc:	b2da      	uxtb	r2, r3
    2cde:	4b07      	ldr	r3, [pc, #28]	; (2cfc <flashy_flash3+0xec>)
    2ce0:	701a      	strb	r2, [r3, #0]
	if(count > 25)
    2ce2:	4b06      	ldr	r3, [pc, #24]	; (2cfc <flashy_flash3+0xec>)
    2ce4:	781b      	ldrb	r3, [r3, #0]
    2ce6:	2b19      	cmp	r3, #25
    2ce8:	d902      	bls.n	2cf0 <flashy_flash3+0xe0>
	{
		count = 0;
    2cea:	4b04      	ldr	r3, [pc, #16]	; (2cfc <flashy_flash3+0xec>)
    2cec:	2200      	movs	r2, #0
    2cee:	701a      	strb	r2, [r3, #0]
	}
}
    2cf0:	46c0      	nop			; (mov r8, r8)
    2cf2:	46bd      	mov	sp, r7
    2cf4:	bdb0      	pop	{r4, r5, r7, pc}
    2cf6:	46c0      	nop			; (mov r8, r8)
    2cf8:	00002d09 	.word	0x00002d09
    2cfc:	20000562 	.word	0x20000562
    2d00:	20000010 	.word	0x20000010
    2d04:	00002f81 	.word	0x00002f81

00002d08 <reset_all_lights>:

void reset_all_lights()
{
    2d08:	b580      	push	{r7, lr}
    2d0a:	b082      	sub	sp, #8
    2d0c:	af00      	add	r7, sp, #0
	for (int i=0;i<8;i++)
    2d0e:	2300      	movs	r3, #0
    2d10:	607b      	str	r3, [r7, #4]
    2d12:	e010      	b.n	2d36 <reset_all_lights+0x2e>
	{
		mcp23017_data.devices[i].outputs.ports[0] = 0x80;
    2d14:	4a0b      	ldr	r2, [pc, #44]	; (2d44 <reset_all_lights+0x3c>)
    2d16:	687b      	ldr	r3, [r7, #4]
    2d18:	011b      	lsls	r3, r3, #4
    2d1a:	18d3      	adds	r3, r2, r3
    2d1c:	3308      	adds	r3, #8
    2d1e:	2280      	movs	r2, #128	; 0x80
    2d20:	701a      	strb	r2, [r3, #0]
		mcp23017_data.devices[i].outputs.ports[1] = 0x80;
    2d22:	4a08      	ldr	r2, [pc, #32]	; (2d44 <reset_all_lights+0x3c>)
    2d24:	687b      	ldr	r3, [r7, #4]
    2d26:	011b      	lsls	r3, r3, #4
    2d28:	18d3      	adds	r3, r2, r3
    2d2a:	3309      	adds	r3, #9
    2d2c:	2280      	movs	r2, #128	; 0x80
    2d2e:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	3301      	adds	r3, #1
    2d34:	607b      	str	r3, [r7, #4]
    2d36:	687b      	ldr	r3, [r7, #4]
    2d38:	2b07      	cmp	r3, #7
    2d3a:	ddeb      	ble.n	2d14 <reset_all_lights+0xc>
	}
}
    2d3c:	46c0      	nop			; (mov r8, r8)
    2d3e:	46bd      	mov	sp, r7
    2d40:	b002      	add	sp, #8
    2d42:	bd80      	pop	{r7, pc}
    2d44:	200000e0 	.word	0x200000e0

00002d48 <a_okay>:

bool a_okay()
{
    2d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d4a:	46ce      	mov	lr, r9
    2d4c:	4647      	mov	r7, r8
    2d4e:	b580      	push	{r7, lr}
    2d50:	b095      	sub	sp, #84	; 0x54
    2d52:	af06      	add	r7, sp, #24
	char buffer[32];
	uint8_t states[8];
	mcp23017_read_all_ports(read_data,states);
    2d54:	2308      	movs	r3, #8
    2d56:	18fa      	adds	r2, r7, r3
    2d58:	4b81      	ldr	r3, [pc, #516]	; (2f60 <a_okay+0x218>)
    2d5a:	0011      	movs	r1, r2
    2d5c:	0018      	movs	r0, r3
    2d5e:	4b81      	ldr	r3, [pc, #516]	; (2f64 <a_okay+0x21c>)
    2d60:	4798      	blx	r3
	
	bool return_val = true;
    2d62:	232f      	movs	r3, #47	; 0x2f
    2d64:	2208      	movs	r2, #8
    2d66:	4694      	mov	ip, r2
    2d68:	44bc      	add	ip, r7
    2d6a:	4463      	add	r3, ip
    2d6c:	2201      	movs	r2, #1
    2d6e:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
    2d70:	2300      	movs	r3, #0
    2d72:	633b      	str	r3, [r7, #48]	; 0x30
    2d74:	e0a2      	b.n	2ebc <a_okay+0x174>
	{
		if (mcp23017_data.devices[i].should_be_enabled)
    2d76:	4b7c      	ldr	r3, [pc, #496]	; (2f68 <a_okay+0x220>)
    2d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2d7a:	0112      	lsls	r2, r2, #4
    2d7c:	5cd3      	ldrb	r3, [r2, r3]
    2d7e:	2b00      	cmp	r3, #0
    2d80:	d06e      	beq.n	2e60 <a_okay+0x118>
		{
			mcp23017_data.devices[i].output_errors.ports[0] = mcp23017_data.devices[i].outputs.ports[0] - read_data[0][i];
    2d82:	4a79      	ldr	r2, [pc, #484]	; (2f68 <a_okay+0x220>)
    2d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d86:	011b      	lsls	r3, r3, #4
    2d88:	18d3      	adds	r3, r2, r3
    2d8a:	3308      	adds	r3, #8
    2d8c:	781a      	ldrb	r2, [r3, #0]
    2d8e:	4974      	ldr	r1, [pc, #464]	; (2f60 <a_okay+0x218>)
    2d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d92:	18cb      	adds	r3, r1, r3
    2d94:	781b      	ldrb	r3, [r3, #0]
    2d96:	1ad3      	subs	r3, r2, r3
    2d98:	b2d9      	uxtb	r1, r3
    2d9a:	4a73      	ldr	r2, [pc, #460]	; (2f68 <a_okay+0x220>)
    2d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d9e:	011b      	lsls	r3, r3, #4
    2da0:	18d3      	adds	r3, r2, r3
    2da2:	330c      	adds	r3, #12
    2da4:	1c0a      	adds	r2, r1, #0
    2da6:	701a      	strb	r2, [r3, #0]
			mcp23017_data.devices[i].output_errors.ports[1] = mcp23017_data.devices[i].outputs.ports[1] - read_data[1][i];
    2da8:	4a6f      	ldr	r2, [pc, #444]	; (2f68 <a_okay+0x220>)
    2daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2dac:	011b      	lsls	r3, r3, #4
    2dae:	18d3      	adds	r3, r2, r3
    2db0:	3309      	adds	r3, #9
    2db2:	781a      	ldrb	r2, [r3, #0]
    2db4:	496a      	ldr	r1, [pc, #424]	; (2f60 <a_okay+0x218>)
    2db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2db8:	18cb      	adds	r3, r1, r3
    2dba:	3308      	adds	r3, #8
    2dbc:	781b      	ldrb	r3, [r3, #0]
    2dbe:	1ad3      	subs	r3, r2, r3
    2dc0:	b2d9      	uxtb	r1, r3
    2dc2:	4a69      	ldr	r2, [pc, #420]	; (2f68 <a_okay+0x220>)
    2dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2dc6:	011b      	lsls	r3, r3, #4
    2dc8:	18d3      	adds	r3, r2, r3
    2dca:	330d      	adds	r3, #13
    2dcc:	1c0a      	adds	r2, r1, #0
    2dce:	701a      	strb	r2, [r3, #0]
			
			if ((mcp23017_data.devices[i].output_errors.ports[0] + mcp23017_data.devices[i].output_errors.ports[1]) > 0)
    2dd0:	4a65      	ldr	r2, [pc, #404]	; (2f68 <a_okay+0x220>)
    2dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2dd4:	011b      	lsls	r3, r3, #4
    2dd6:	18d3      	adds	r3, r2, r3
    2dd8:	330c      	adds	r3, #12
    2dda:	781b      	ldrb	r3, [r3, #0]
    2ddc:	0019      	movs	r1, r3
    2dde:	4a62      	ldr	r2, [pc, #392]	; (2f68 <a_okay+0x220>)
    2de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2de2:	011b      	lsls	r3, r3, #4
    2de4:	18d3      	adds	r3, r2, r3
    2de6:	330d      	adds	r3, #13
    2de8:	781b      	ldrb	r3, [r3, #0]
    2dea:	18cb      	adds	r3, r1, r3
    2dec:	2b00      	cmp	r3, #0
    2dee:	dd06      	ble.n	2dfe <a_okay+0xb6>
			{
				mcp23017_data.devices[i].error_detected = true;
    2df0:	4a5d      	ldr	r2, [pc, #372]	; (2f68 <a_okay+0x220>)
    2df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2df4:	011b      	lsls	r3, r3, #4
    2df6:	18d3      	adds	r3, r2, r3
    2df8:	3302      	adds	r3, #2
    2dfa:	2201      	movs	r2, #1
    2dfc:	701a      	strb	r2, [r3, #0]
			}
			
			if ((read_data[0][i] & ~0x80) != (mcp23017_data.devices[i].outputs.ports[0] & ~0x80))
    2dfe:	4a58      	ldr	r2, [pc, #352]	; (2f60 <a_okay+0x218>)
    2e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e02:	18d3      	adds	r3, r2, r3
    2e04:	781a      	ldrb	r2, [r3, #0]
    2e06:	4958      	ldr	r1, [pc, #352]	; (2f68 <a_okay+0x220>)
    2e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e0a:	011b      	lsls	r3, r3, #4
    2e0c:	18cb      	adds	r3, r1, r3
    2e0e:	3308      	adds	r3, #8
    2e10:	781b      	ldrb	r3, [r3, #0]
    2e12:	4053      	eors	r3, r2
    2e14:	b2db      	uxtb	r3, r3
    2e16:	001a      	movs	r2, r3
    2e18:	2380      	movs	r3, #128	; 0x80
    2e1a:	439a      	bics	r2, r3
    2e1c:	1e13      	subs	r3, r2, #0
    2e1e:	d006      	beq.n	2e2e <a_okay+0xe6>
			{
				return_val = false;
    2e20:	232f      	movs	r3, #47	; 0x2f
    2e22:	2208      	movs	r2, #8
    2e24:	4694      	mov	ip, r2
    2e26:	44bc      	add	ip, r7
    2e28:	4463      	add	r3, ip
    2e2a:	2200      	movs	r2, #0
    2e2c:	701a      	strb	r2, [r3, #0]
			}
			if ((read_data[1][i] & ~0x80) != (mcp23017_data.devices[i].outputs.ports[1] & ~0x80))
    2e2e:	4a4c      	ldr	r2, [pc, #304]	; (2f60 <a_okay+0x218>)
    2e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e32:	18d3      	adds	r3, r2, r3
    2e34:	3308      	adds	r3, #8
    2e36:	781a      	ldrb	r2, [r3, #0]
    2e38:	494b      	ldr	r1, [pc, #300]	; (2f68 <a_okay+0x220>)
    2e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e3c:	011b      	lsls	r3, r3, #4
    2e3e:	18cb      	adds	r3, r1, r3
    2e40:	3309      	adds	r3, #9
    2e42:	781b      	ldrb	r3, [r3, #0]
    2e44:	4053      	eors	r3, r2
    2e46:	b2db      	uxtb	r3, r3
    2e48:	001a      	movs	r2, r3
    2e4a:	2380      	movs	r3, #128	; 0x80
    2e4c:	439a      	bics	r2, r3
    2e4e:	1e13      	subs	r3, r2, #0
    2e50:	d006      	beq.n	2e60 <a_okay+0x118>
			{
				return_val = false;
    2e52:	232f      	movs	r3, #47	; 0x2f
    2e54:	2208      	movs	r2, #8
    2e56:	4694      	mov	ip, r2
    2e58:	44bc      	add	ip, r7
    2e5a:	4463      	add	r3, ip
    2e5c:	2200      	movs	r2, #0
    2e5e:	701a      	strb	r2, [r3, #0]
			}
		}
		mcp23017_data.devices[i].status = states[i];
    2e60:	2308      	movs	r3, #8
    2e62:	18fa      	adds	r2, r7, r3
    2e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e66:	18d3      	adds	r3, r2, r3
    2e68:	7819      	ldrb	r1, [r3, #0]
    2e6a:	4a3f      	ldr	r2, [pc, #252]	; (2f68 <a_okay+0x220>)
    2e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e6e:	011b      	lsls	r3, r3, #4
    2e70:	18d3      	adds	r3, r2, r3
    2e72:	3303      	adds	r3, #3
    2e74:	1c0a      	adds	r2, r1, #0
    2e76:	701a      	strb	r2, [r3, #0]
		sprintf(buffer,"ADDR: %d -> %d\n",i,mcp23017_data.devices[i].status);
    2e78:	4a3b      	ldr	r2, [pc, #236]	; (2f68 <a_okay+0x220>)
    2e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e7c:	011b      	lsls	r3, r3, #4
    2e7e:	18d3      	adds	r3, r2, r3
    2e80:	3303      	adds	r3, #3
    2e82:	781b      	ldrb	r3, [r3, #0]
    2e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2e86:	4939      	ldr	r1, [pc, #228]	; (2f6c <a_okay+0x224>)
    2e88:	2008      	movs	r0, #8
    2e8a:	2408      	movs	r4, #8
    2e8c:	46a4      	mov	ip, r4
    2e8e:	44bc      	add	ip, r7
    2e90:	4460      	add	r0, ip
    2e92:	4c37      	ldr	r4, [pc, #220]	; (2f70 <a_okay+0x228>)
    2e94:	47a0      	blx	r4
		ble_uart_write(buffer);
    2e96:	2308      	movs	r3, #8
    2e98:	2208      	movs	r2, #8
    2e9a:	4694      	mov	ip, r2
    2e9c:	44bc      	add	ip, r7
    2e9e:	4463      	add	r3, ip
    2ea0:	0018      	movs	r0, r3
    2ea2:	4b34      	ldr	r3, [pc, #208]	; (2f74 <a_okay+0x22c>)
    2ea4:	4798      	blx	r3
		sb_uart_write(buffer);
    2ea6:	2308      	movs	r3, #8
    2ea8:	2208      	movs	r2, #8
    2eaa:	4694      	mov	ip, r2
    2eac:	44bc      	add	ip, r7
    2eae:	4463      	add	r3, ip
    2eb0:	0018      	movs	r0, r3
    2eb2:	4b31      	ldr	r3, [pc, #196]	; (2f78 <a_okay+0x230>)
    2eb4:	4798      	blx	r3
	for (int i=0;i<8;i++)
    2eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2eb8:	3301      	adds	r3, #1
    2eba:	633b      	str	r3, [r7, #48]	; 0x30
    2ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2ebe:	2b07      	cmp	r3, #7
    2ec0:	dc00      	bgt.n	2ec4 <a_okay+0x17c>
    2ec2:	e758      	b.n	2d76 <a_okay+0x2e>
	}
	sprintf(buffer,"ERR: %d%d%d%d%d%d%d%d\r\n",mcp23017_data.devices[7].error_detected,mcp23017_data.devices[6].error_detected,mcp23017_data.devices[5].error_detected,mcp23017_data.devices[4].error_detected,mcp23017_data.devices[3].error_detected,mcp23017_data.devices[2].error_detected,mcp23017_data.devices[1].error_detected,mcp23017_data.devices[0].error_detected);
    2ec4:	4b28      	ldr	r3, [pc, #160]	; (2f68 <a_okay+0x220>)
    2ec6:	2272      	movs	r2, #114	; 0x72
    2ec8:	5c9b      	ldrb	r3, [r3, r2]
    2eca:	607b      	str	r3, [r7, #4]
    2ecc:	4b26      	ldr	r3, [pc, #152]	; (2f68 <a_okay+0x220>)
    2ece:	2262      	movs	r2, #98	; 0x62
    2ed0:	5c9b      	ldrb	r3, [r3, r2]
    2ed2:	603b      	str	r3, [r7, #0]
    2ed4:	4b24      	ldr	r3, [pc, #144]	; (2f68 <a_okay+0x220>)
    2ed6:	2252      	movs	r2, #82	; 0x52
    2ed8:	5c9b      	ldrb	r3, [r3, r2]
    2eda:	001c      	movs	r4, r3
    2edc:	4b22      	ldr	r3, [pc, #136]	; (2f68 <a_okay+0x220>)
    2ede:	2242      	movs	r2, #66	; 0x42
    2ee0:	5c9b      	ldrb	r3, [r3, r2]
    2ee2:	001d      	movs	r5, r3
    2ee4:	4b20      	ldr	r3, [pc, #128]	; (2f68 <a_okay+0x220>)
    2ee6:	2232      	movs	r2, #50	; 0x32
    2ee8:	5c9b      	ldrb	r3, [r3, r2]
    2eea:	001e      	movs	r6, r3
    2eec:	4b1e      	ldr	r3, [pc, #120]	; (2f68 <a_okay+0x220>)
    2eee:	2222      	movs	r2, #34	; 0x22
    2ef0:	5c9b      	ldrb	r3, [r3, r2]
    2ef2:	001a      	movs	r2, r3
    2ef4:	4b1c      	ldr	r3, [pc, #112]	; (2f68 <a_okay+0x220>)
    2ef6:	7c9b      	ldrb	r3, [r3, #18]
    2ef8:	469c      	mov	ip, r3
    2efa:	4b1b      	ldr	r3, [pc, #108]	; (2f68 <a_okay+0x220>)
    2efc:	789b      	ldrb	r3, [r3, #2]
    2efe:	4699      	mov	r9, r3
    2f00:	491e      	ldr	r1, [pc, #120]	; (2f7c <a_okay+0x234>)
    2f02:	2008      	movs	r0, #8
    2f04:	2308      	movs	r3, #8
    2f06:	4698      	mov	r8, r3
    2f08:	44b8      	add	r8, r7
    2f0a:	4440      	add	r0, r8
    2f0c:	464b      	mov	r3, r9
    2f0e:	9305      	str	r3, [sp, #20]
    2f10:	4663      	mov	r3, ip
    2f12:	9304      	str	r3, [sp, #16]
    2f14:	9203      	str	r2, [sp, #12]
    2f16:	9602      	str	r6, [sp, #8]
    2f18:	9501      	str	r5, [sp, #4]
    2f1a:	9400      	str	r4, [sp, #0]
    2f1c:	683b      	ldr	r3, [r7, #0]
    2f1e:	687a      	ldr	r2, [r7, #4]
    2f20:	4c13      	ldr	r4, [pc, #76]	; (2f70 <a_okay+0x228>)
    2f22:	47a0      	blx	r4
	ble_uart_write(buffer);
    2f24:	2308      	movs	r3, #8
    2f26:	2208      	movs	r2, #8
    2f28:	4694      	mov	ip, r2
    2f2a:	44bc      	add	ip, r7
    2f2c:	4463      	add	r3, ip
    2f2e:	0018      	movs	r0, r3
    2f30:	4b10      	ldr	r3, [pc, #64]	; (2f74 <a_okay+0x22c>)
    2f32:	4798      	blx	r3
	sb_uart_write(buffer);
    2f34:	2308      	movs	r3, #8
    2f36:	2208      	movs	r2, #8
    2f38:	4694      	mov	ip, r2
    2f3a:	44bc      	add	ip, r7
    2f3c:	4463      	add	r3, ip
    2f3e:	0018      	movs	r0, r3
    2f40:	4b0d      	ldr	r3, [pc, #52]	; (2f78 <a_okay+0x230>)
    2f42:	4798      	blx	r3
	
	return return_val;
    2f44:	232f      	movs	r3, #47	; 0x2f
    2f46:	2208      	movs	r2, #8
    2f48:	4694      	mov	ip, r2
    2f4a:	44bc      	add	ip, r7
    2f4c:	4463      	add	r3, ip
    2f4e:	781b      	ldrb	r3, [r3, #0]
}
    2f50:	0018      	movs	r0, r3
    2f52:	46bd      	mov	sp, r7
    2f54:	b00f      	add	sp, #60	; 0x3c
    2f56:	bc0c      	pop	{r2, r3}
    2f58:	4690      	mov	r8, r2
    2f5a:	4699      	mov	r9, r3
    2f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f5e:	46c0      	nop			; (mov r8, r8)
    2f60:	20000e28 	.word	0x20000e28
    2f64:	000034c1 	.word	0x000034c1
    2f68:	200000e0 	.word	0x200000e0
    2f6c:	00007020 	.word	0x00007020
    2f70:	00005b4d 	.word	0x00005b4d
    2f74:	000012e5 	.word	0x000012e5
    2f78:	0000425d 	.word	0x0000425d
    2f7c:	00007030 	.word	0x00007030

00002f80 <configure_pin>:

void configure_pin(uint8_t port, uint8_t addr, uint8_t pin, bool value)
{
    2f80:	b5b0      	push	{r4, r5, r7, lr}
    2f82:	b082      	sub	sp, #8
    2f84:	af00      	add	r7, sp, #0
    2f86:	0005      	movs	r5, r0
    2f88:	000c      	movs	r4, r1
    2f8a:	0010      	movs	r0, r2
    2f8c:	0019      	movs	r1, r3
    2f8e:	1dfb      	adds	r3, r7, #7
    2f90:	1c2a      	adds	r2, r5, #0
    2f92:	701a      	strb	r2, [r3, #0]
    2f94:	1dbb      	adds	r3, r7, #6
    2f96:	1c22      	adds	r2, r4, #0
    2f98:	701a      	strb	r2, [r3, #0]
    2f9a:	1d7b      	adds	r3, r7, #5
    2f9c:	1c02      	adds	r2, r0, #0
    2f9e:	701a      	strb	r2, [r3, #0]
    2fa0:	1d3b      	adds	r3, r7, #4
    2fa2:	1c0a      	adds	r2, r1, #0
    2fa4:	701a      	strb	r2, [r3, #0]
	if(value)
    2fa6:	1d3b      	adds	r3, r7, #4
    2fa8:	781b      	ldrb	r3, [r3, #0]
    2faa:	2b00      	cmp	r3, #0
    2fac:	d01f      	beq.n	2fee <configure_pin+0x6e>
	{
		mcp23017_data.devices[addr].outputs.ports[port] |= (1 << pin);
    2fae:	1dbb      	adds	r3, r7, #6
    2fb0:	781a      	ldrb	r2, [r3, #0]
    2fb2:	1dfb      	adds	r3, r7, #7
    2fb4:	781b      	ldrb	r3, [r3, #0]
    2fb6:	1db9      	adds	r1, r7, #6
    2fb8:	7808      	ldrb	r0, [r1, #0]
    2fba:	1df9      	adds	r1, r7, #7
    2fbc:	7809      	ldrb	r1, [r1, #0]
    2fbe:	4c1e      	ldr	r4, [pc, #120]	; (3038 <configure_pin+0xb8>)
    2fc0:	0100      	lsls	r0, r0, #4
    2fc2:	1820      	adds	r0, r4, r0
    2fc4:	1841      	adds	r1, r0, r1
    2fc6:	3108      	adds	r1, #8
    2fc8:	7809      	ldrb	r1, [r1, #0]
    2fca:	b248      	sxtb	r0, r1
    2fcc:	1d79      	adds	r1, r7, #5
    2fce:	7809      	ldrb	r1, [r1, #0]
    2fd0:	2401      	movs	r4, #1
    2fd2:	408c      	lsls	r4, r1
    2fd4:	0021      	movs	r1, r4
    2fd6:	b249      	sxtb	r1, r1
    2fd8:	4301      	orrs	r1, r0
    2fda:	b249      	sxtb	r1, r1
    2fdc:	b2c8      	uxtb	r0, r1
    2fde:	4916      	ldr	r1, [pc, #88]	; (3038 <configure_pin+0xb8>)
    2fe0:	0112      	lsls	r2, r2, #4
    2fe2:	188a      	adds	r2, r1, r2
    2fe4:	18d3      	adds	r3, r2, r3
    2fe6:	3308      	adds	r3, #8
    2fe8:	1c02      	adds	r2, r0, #0
    2fea:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		mcp23017_data.devices[addr].outputs.ports[port] &= ~(1 << pin);
	}
}
    2fec:	e020      	b.n	3030 <configure_pin+0xb0>
		mcp23017_data.devices[addr].outputs.ports[port] &= ~(1 << pin);
    2fee:	1dbb      	adds	r3, r7, #6
    2ff0:	781a      	ldrb	r2, [r3, #0]
    2ff2:	1dfb      	adds	r3, r7, #7
    2ff4:	781b      	ldrb	r3, [r3, #0]
    2ff6:	1db9      	adds	r1, r7, #6
    2ff8:	7808      	ldrb	r0, [r1, #0]
    2ffa:	1df9      	adds	r1, r7, #7
    2ffc:	7809      	ldrb	r1, [r1, #0]
    2ffe:	4c0e      	ldr	r4, [pc, #56]	; (3038 <configure_pin+0xb8>)
    3000:	0100      	lsls	r0, r0, #4
    3002:	1820      	adds	r0, r4, r0
    3004:	1841      	adds	r1, r0, r1
    3006:	3108      	adds	r1, #8
    3008:	7809      	ldrb	r1, [r1, #0]
    300a:	b249      	sxtb	r1, r1
    300c:	1d78      	adds	r0, r7, #5
    300e:	7800      	ldrb	r0, [r0, #0]
    3010:	2401      	movs	r4, #1
    3012:	4084      	lsls	r4, r0
    3014:	0020      	movs	r0, r4
    3016:	b240      	sxtb	r0, r0
    3018:	43c0      	mvns	r0, r0
    301a:	b240      	sxtb	r0, r0
    301c:	4001      	ands	r1, r0
    301e:	b249      	sxtb	r1, r1
    3020:	b2c8      	uxtb	r0, r1
    3022:	4905      	ldr	r1, [pc, #20]	; (3038 <configure_pin+0xb8>)
    3024:	0112      	lsls	r2, r2, #4
    3026:	188a      	adds	r2, r1, r2
    3028:	18d3      	adds	r3, r2, r3
    302a:	3308      	adds	r3, #8
    302c:	1c02      	adds	r2, r0, #0
    302e:	701a      	strb	r2, [r3, #0]
}
    3030:	46c0      	nop			; (mov r8, r8)
    3032:	46bd      	mov	sp, r7
    3034:	b002      	add	sp, #8
    3036:	bdb0      	pop	{r4, r5, r7, pc}
    3038:	200000e0 	.word	0x200000e0

0000303c <mcp23017_check_all>:
		mcp23017_data.devices[i].status = STATUS_OK;
	}
}

void mcp23017_check_all()
{
    303c:	b590      	push	{r4, r7, lr}
    303e:	b08b      	sub	sp, #44	; 0x2c
    3040:	af00      	add	r7, sp, #0
	bool returnVal = false;
    3042:	2327      	movs	r3, #39	; 0x27
    3044:	18fb      	adds	r3, r7, r3
    3046:	2200      	movs	r2, #0
    3048:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[32];
	for (int i=0;i<8;i++)
    304a:	2300      	movs	r3, #0
    304c:	623b      	str	r3, [r7, #32]
    304e:	e025      	b.n	309c <mcp23017_check_all+0x60>
	{
		if (mcp23017_data.devices[i].should_be_enabled & mcp23017_data.devices[i].status != STATUS_OK)
    3050:	4b1c      	ldr	r3, [pc, #112]	; (30c4 <mcp23017_check_all+0x88>)
    3052:	6a3a      	ldr	r2, [r7, #32]
    3054:	0112      	lsls	r2, r2, #4
    3056:	5cd3      	ldrb	r3, [r2, r3]
    3058:	0019      	movs	r1, r3
    305a:	4a1a      	ldr	r2, [pc, #104]	; (30c4 <mcp23017_check_all+0x88>)
    305c:	6a3b      	ldr	r3, [r7, #32]
    305e:	011b      	lsls	r3, r3, #4
    3060:	18d3      	adds	r3, r2, r3
    3062:	3303      	adds	r3, #3
    3064:	781b      	ldrb	r3, [r3, #0]
    3066:	1e5a      	subs	r2, r3, #1
    3068:	4193      	sbcs	r3, r2
    306a:	b2db      	uxtb	r3, r3
    306c:	400b      	ands	r3, r1
    306e:	d012      	beq.n	3096 <mcp23017_check_all+0x5a>
		{
			sprintf(buffer,"E: %d - %d\n",i,mcp23017_data.devices[i].status);
    3070:	4a14      	ldr	r2, [pc, #80]	; (30c4 <mcp23017_check_all+0x88>)
    3072:	6a3b      	ldr	r3, [r7, #32]
    3074:	011b      	lsls	r3, r3, #4
    3076:	18d3      	adds	r3, r2, r3
    3078:	3303      	adds	r3, #3
    307a:	781b      	ldrb	r3, [r3, #0]
    307c:	6a3a      	ldr	r2, [r7, #32]
    307e:	4912      	ldr	r1, [pc, #72]	; (30c8 <mcp23017_check_all+0x8c>)
    3080:	0038      	movs	r0, r7
    3082:	4c12      	ldr	r4, [pc, #72]	; (30cc <mcp23017_check_all+0x90>)
    3084:	47a0      	blx	r4
			ble_uart_write(buffer);
    3086:	003b      	movs	r3, r7
    3088:	0018      	movs	r0, r3
    308a:	4b11      	ldr	r3, [pc, #68]	; (30d0 <mcp23017_check_all+0x94>)
    308c:	4798      	blx	r3
			returnVal = true;
    308e:	2327      	movs	r3, #39	; 0x27
    3090:	18fb      	adds	r3, r7, r3
    3092:	2201      	movs	r2, #1
    3094:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
    3096:	6a3b      	ldr	r3, [r7, #32]
    3098:	3301      	adds	r3, #1
    309a:	623b      	str	r3, [r7, #32]
    309c:	6a3b      	ldr	r3, [r7, #32]
    309e:	2b07      	cmp	r3, #7
    30a0:	ddd6      	ble.n	3050 <mcp23017_check_all+0x14>
		}
	}
	if (!returnVal)
    30a2:	2327      	movs	r3, #39	; 0x27
    30a4:	18fb      	adds	r3, r7, r3
    30a6:	781b      	ldrb	r3, [r3, #0]
    30a8:	2201      	movs	r2, #1
    30aa:	4053      	eors	r3, r2
    30ac:	b2db      	uxtb	r3, r3
    30ae:	2b00      	cmp	r3, #0
    30b0:	d003      	beq.n	30ba <mcp23017_check_all+0x7e>
	{
		ble_uart_write("ALL OK");
    30b2:	4b08      	ldr	r3, [pc, #32]	; (30d4 <mcp23017_check_all+0x98>)
    30b4:	0018      	movs	r0, r3
    30b6:	4b06      	ldr	r3, [pc, #24]	; (30d0 <mcp23017_check_all+0x94>)
    30b8:	4798      	blx	r3
	}
    30ba:	46c0      	nop			; (mov r8, r8)
    30bc:	46bd      	mov	sp, r7
    30be:	b00b      	add	sp, #44	; 0x2c
    30c0:	bd90      	pop	{r4, r7, pc}
    30c2:	46c0      	nop			; (mov r8, r8)
    30c4:	200000e0 	.word	0x200000e0
    30c8:	00007048 	.word	0x00007048
    30cc:	00005b4d 	.word	0x00005b4d
    30d0:	000012e5 	.word	0x000012e5
    30d4:	00007054 	.word	0x00007054

000030d8 <i2c_write>:
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
	i2c_master_enable(&i2c_master_instance);
}

uint8_t i2c_write(uint8_t address,uint8_t* data, uint8_t data_size)
{
    30d8:	b580      	push	{r7, lr}
    30da:	b086      	sub	sp, #24
    30dc:	af00      	add	r7, sp, #0
    30de:	6039      	str	r1, [r7, #0]
    30e0:	0011      	movs	r1, r2
    30e2:	1dfb      	adds	r3, r7, #7
    30e4:	1c02      	adds	r2, r0, #0
    30e6:	701a      	strb	r2, [r3, #0]
    30e8:	1dbb      	adds	r3, r7, #6
    30ea:	1c0a      	adds	r2, r1, #0
    30ec:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
    30ee:	1dfb      	adds	r3, r7, #7
    30f0:	781b      	ldrb	r3, [r3, #0]
    30f2:	b29a      	uxth	r2, r3
    30f4:	2308      	movs	r3, #8
    30f6:	18fb      	adds	r3, r7, r3
    30f8:	801a      	strh	r2, [r3, #0]
    30fa:	1dbb      	adds	r3, r7, #6
    30fc:	781b      	ldrb	r3, [r3, #0]
    30fe:	b29a      	uxth	r2, r3
    3100:	2308      	movs	r3, #8
    3102:	18fb      	adds	r3, r7, r3
    3104:	805a      	strh	r2, [r3, #2]
    3106:	2308      	movs	r3, #8
    3108:	18fb      	adds	r3, r7, r3
    310a:	683a      	ldr	r2, [r7, #0]
    310c:	605a      	str	r2, [r3, #4]
    310e:	2308      	movs	r3, #8
    3110:	18fb      	adds	r3, r7, r3
    3112:	2200      	movs	r2, #0
    3114:	721a      	strb	r2, [r3, #8]
    3116:	2308      	movs	r3, #8
    3118:	18fb      	adds	r3, r7, r3
    311a:	2200      	movs	r2, #0
    311c:	725a      	strb	r2, [r3, #9]
    311e:	2308      	movs	r3, #8
    3120:	18fb      	adds	r3, r7, r3
    3122:	2200      	movs	r2, #0
    3124:	729a      	strb	r2, [r3, #10]
		.data        = data,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	uint16_t timeout = 0;
    3126:	2316      	movs	r3, #22
    3128:	18fb      	adds	r3, r7, r3
    312a:	2200      	movs	r2, #0
    312c:	801a      	strh	r2, [r3, #0]

	return i2c_master_write_packet_wait(&i2c_master_instance,&packet);
    312e:	2308      	movs	r3, #8
    3130:	18fa      	adds	r2, r7, r3
    3132:	4b05      	ldr	r3, [pc, #20]	; (3148 <i2c_write+0x70>)
    3134:	0011      	movs	r1, r2
    3136:	0018      	movs	r0, r3
    3138:	4b04      	ldr	r3, [pc, #16]	; (314c <i2c_write+0x74>)
    313a:	4798      	blx	r3
    313c:	0003      	movs	r3, r0
	{
		if (timeout++ == I2C_TIMEOUT) {
			break;
		}
	}*/
}
    313e:	0018      	movs	r0, r3
    3140:	46bd      	mov	sp, r7
    3142:	b006      	add	sp, #24
    3144:	bd80      	pop	{r7, pc}
    3146:	46c0      	nop			; (mov r8, r8)
    3148:	20001708 	.word	0x20001708
    314c:	00001019 	.word	0x00001019

00003150 <i2c_read>:
	}	
	return found_array;
}

uint8_t i2c_read(uint8_t addr,uint8_t reg, uint8_t data_length,uint8_t* data_ptr)
{
    3150:	b590      	push	{r4, r7, lr}
    3152:	b08b      	sub	sp, #44	; 0x2c
    3154:	af00      	add	r7, sp, #0
    3156:	0004      	movs	r4, r0
    3158:	0008      	movs	r0, r1
    315a:	0011      	movs	r1, r2
    315c:	603b      	str	r3, [r7, #0]
    315e:	1dfb      	adds	r3, r7, #7
    3160:	1c22      	adds	r2, r4, #0
    3162:	701a      	strb	r2, [r3, #0]
    3164:	1dbb      	adds	r3, r7, #6
    3166:	1c02      	adds	r2, r0, #0
    3168:	701a      	strb	r2, [r3, #0]
    316a:	1d7b      	adds	r3, r7, #5
    316c:	1c0a      	adds	r2, r1, #0
    316e:	701a      	strb	r2, [r3, #0]
	//uint8_t read_datab[data_length];
	uint8_t state = 0;
    3170:	2325      	movs	r3, #37	; 0x25
    3172:	18fb      	adds	r3, r7, r3
    3174:	2200      	movs	r2, #0
    3176:	701a      	strb	r2, [r3, #0]
	//uint8_t address = (addr << 1) + 1;
	
	uint8_t data[2];
	data[0] = reg;
    3178:	2320      	movs	r3, #32
    317a:	18fb      	adds	r3, r7, r3
    317c:	1dba      	adds	r2, r7, #6
    317e:	7812      	ldrb	r2, [r2, #0]
    3180:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
    3182:	2320      	movs	r3, #32
    3184:	18fb      	adds	r3, r7, r3
    3186:	22ff      	movs	r2, #255	; 0xff
    3188:	705a      	strb	r2, [r3, #1]
	
	struct i2c_master_packet packet = {
		.address     = addr | (1 << 8),
    318a:	1dfb      	adds	r3, r7, #7
    318c:	781b      	ldrb	r3, [r3, #0]
    318e:	b29b      	uxth	r3, r3
    3190:	2280      	movs	r2, #128	; 0x80
    3192:	0052      	lsls	r2, r2, #1
    3194:	4313      	orrs	r3, r2
    3196:	b29a      	uxth	r2, r3
	struct i2c_master_packet packet = {
    3198:	2314      	movs	r3, #20
    319a:	18fb      	adds	r3, r7, r3
    319c:	801a      	strh	r2, [r3, #0]
    319e:	1d7b      	adds	r3, r7, #5
    31a0:	781b      	ldrb	r3, [r3, #0]
    31a2:	b29a      	uxth	r2, r3
    31a4:	2314      	movs	r3, #20
    31a6:	18fb      	adds	r3, r7, r3
    31a8:	805a      	strh	r2, [r3, #2]
    31aa:	2314      	movs	r3, #20
    31ac:	18fb      	adds	r3, r7, r3
    31ae:	2220      	movs	r2, #32
    31b0:	18ba      	adds	r2, r7, r2
    31b2:	605a      	str	r2, [r3, #4]
    31b4:	2314      	movs	r3, #20
    31b6:	18fb      	adds	r3, r7, r3
    31b8:	2200      	movs	r2, #0
    31ba:	721a      	strb	r2, [r3, #8]
    31bc:	2314      	movs	r3, #20
    31be:	18fb      	adds	r3, r7, r3
    31c0:	2200      	movs	r2, #0
    31c2:	725a      	strb	r2, [r3, #9]
    31c4:	2314      	movs	r3, #20
    31c6:	18fb      	adds	r3, r7, r3
    31c8:	2200      	movs	r2, #0
    31ca:	729a      	strb	r2, [r3, #10]
		.data        = data,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	uint16_t timeout = 0;
    31cc:	2326      	movs	r3, #38	; 0x26
    31ce:	18fb      	adds	r3, r7, r3
    31d0:	2200      	movs	r2, #0
    31d2:	801a      	strh	r2, [r3, #0]

	do
	{
		state = i2c_master_write_packet_wait(&i2c_master_instance,&packet);
    31d4:	2325      	movs	r3, #37	; 0x25
    31d6:	18fc      	adds	r4, r7, r3
    31d8:	2314      	movs	r3, #20
    31da:	18fa      	adds	r2, r7, r3
    31dc:	4b23      	ldr	r3, [pc, #140]	; (326c <i2c_read+0x11c>)
    31de:	0011      	movs	r1, r2
    31e0:	0018      	movs	r0, r3
    31e2:	4b23      	ldr	r3, [pc, #140]	; (3270 <i2c_read+0x120>)
    31e4:	4798      	blx	r3
    31e6:	0003      	movs	r3, r0
    31e8:	7023      	strb	r3, [r4, #0]
		if (timeout++ == I2C_TIMEOUT) {
    31ea:	2326      	movs	r3, #38	; 0x26
    31ec:	18fb      	adds	r3, r7, r3
    31ee:	881b      	ldrh	r3, [r3, #0]
    31f0:	2226      	movs	r2, #38	; 0x26
    31f2:	18ba      	adds	r2, r7, r2
    31f4:	1c59      	adds	r1, r3, #1
    31f6:	8011      	strh	r1, [r2, #0]
    31f8:	2b0a      	cmp	r3, #10
    31fa:	d103      	bne.n	3204 <i2c_read+0xb4>
			return state;
    31fc:	2325      	movs	r3, #37	; 0x25
    31fe:	18fb      	adds	r3, r7, r3
    3200:	781b      	ldrb	r3, [r3, #0]
    3202:	e02e      	b.n	3262 <i2c_read+0x112>
			break;
		}
	}
	while (state != STATUS_OK);
    3204:	2325      	movs	r3, #37	; 0x25
    3206:	18fb      	adds	r3, r7, r3
    3208:	781b      	ldrb	r3, [r3, #0]
    320a:	2b00      	cmp	r3, #0
    320c:	d1e2      	bne.n	31d4 <i2c_read+0x84>
	
	struct i2c_master_packet read_packet = {
    320e:	1dfb      	adds	r3, r7, #7
    3210:	781b      	ldrb	r3, [r3, #0]
    3212:	b29a      	uxth	r2, r3
    3214:	2308      	movs	r3, #8
    3216:	18fb      	adds	r3, r7, r3
    3218:	801a      	strh	r2, [r3, #0]
    321a:	1d7b      	adds	r3, r7, #5
    321c:	781b      	ldrb	r3, [r3, #0]
    321e:	b29a      	uxth	r2, r3
    3220:	2308      	movs	r3, #8
    3222:	18fb      	adds	r3, r7, r3
    3224:	805a      	strh	r2, [r3, #2]
    3226:	2308      	movs	r3, #8
    3228:	18fb      	adds	r3, r7, r3
    322a:	683a      	ldr	r2, [r7, #0]
    322c:	605a      	str	r2, [r3, #4]
    322e:	2308      	movs	r3, #8
    3230:	18fb      	adds	r3, r7, r3
    3232:	2200      	movs	r2, #0
    3234:	721a      	strb	r2, [r3, #8]
    3236:	2308      	movs	r3, #8
    3238:	18fb      	adds	r3, r7, r3
    323a:	2200      	movs	r2, #0
    323c:	725a      	strb	r2, [r3, #9]
    323e:	2308      	movs	r3, #8
    3240:	18fb      	adds	r3, r7, r3
    3242:	2200      	movs	r2, #0
    3244:	729a      	strb	r2, [r3, #10]
		.data        = data_ptr,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	state = i2c_master_read_packet_wait(&i2c_master_instance,&read_packet);
    3246:	2325      	movs	r3, #37	; 0x25
    3248:	18fc      	adds	r4, r7, r3
    324a:	2308      	movs	r3, #8
    324c:	18fa      	adds	r2, r7, r3
    324e:	4b07      	ldr	r3, [pc, #28]	; (326c <i2c_read+0x11c>)
    3250:	0011      	movs	r1, r2
    3252:	0018      	movs	r0, r3
    3254:	4b07      	ldr	r3, [pc, #28]	; (3274 <i2c_read+0x124>)
    3256:	4798      	blx	r3
    3258:	0003      	movs	r3, r0
    325a:	7023      	strb	r3, [r4, #0]
	return state;
    325c:	2325      	movs	r3, #37	; 0x25
    325e:	18fb      	adds	r3, r7, r3
    3260:	781b      	ldrb	r3, [r3, #0]
}
    3262:	0018      	movs	r0, r3
    3264:	46bd      	mov	sp, r7
    3266:	b00b      	add	sp, #44	; 0x2c
    3268:	bd90      	pop	{r4, r7, pc}
    326a:	46c0      	nop			; (mov r8, r8)
    326c:	20001708 	.word	0x20001708
    3270:	00001019 	.word	0x00001019
    3274:	00000e71 	.word	0x00000e71

00003278 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3278:	b580      	push	{r7, lr}
    327a:	b084      	sub	sp, #16
    327c:	af00      	add	r7, sp, #0
    327e:	0002      	movs	r2, r0
    3280:	1dfb      	adds	r3, r7, #7
    3282:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3284:	230f      	movs	r3, #15
    3286:	18fb      	adds	r3, r7, r3
    3288:	1dfa      	adds	r2, r7, #7
    328a:	7812      	ldrb	r2, [r2, #0]
    328c:	09d2      	lsrs	r2, r2, #7
    328e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3290:	230e      	movs	r3, #14
    3292:	18fb      	adds	r3, r7, r3
    3294:	1dfa      	adds	r2, r7, #7
    3296:	7812      	ldrb	r2, [r2, #0]
    3298:	0952      	lsrs	r2, r2, #5
    329a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    329c:	4b0d      	ldr	r3, [pc, #52]	; (32d4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    329e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    32a0:	230f      	movs	r3, #15
    32a2:	18fb      	adds	r3, r7, r3
    32a4:	781b      	ldrb	r3, [r3, #0]
    32a6:	2b00      	cmp	r3, #0
    32a8:	d10f      	bne.n	32ca <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    32aa:	230f      	movs	r3, #15
    32ac:	18fb      	adds	r3, r7, r3
    32ae:	781b      	ldrb	r3, [r3, #0]
    32b0:	009b      	lsls	r3, r3, #2
    32b2:	2210      	movs	r2, #16
    32b4:	4694      	mov	ip, r2
    32b6:	44bc      	add	ip, r7
    32b8:	4463      	add	r3, ip
    32ba:	3b08      	subs	r3, #8
    32bc:	681a      	ldr	r2, [r3, #0]
    32be:	230e      	movs	r3, #14
    32c0:	18fb      	adds	r3, r7, r3
    32c2:	781b      	ldrb	r3, [r3, #0]
    32c4:	01db      	lsls	r3, r3, #7
    32c6:	18d3      	adds	r3, r2, r3
    32c8:	e000      	b.n	32cc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    32ca:	2300      	movs	r3, #0
	}
}
    32cc:	0018      	movs	r0, r3
    32ce:	46bd      	mov	sp, r7
    32d0:	b004      	add	sp, #16
    32d2:	bd80      	pop	{r7, pc}
    32d4:	41004400 	.word	0x41004400

000032d8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    32d8:	b580      	push	{r7, lr}
    32da:	b082      	sub	sp, #8
    32dc:	af00      	add	r7, sp, #0
    32de:	0002      	movs	r2, r0
    32e0:	1dfb      	adds	r3, r7, #7
    32e2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    32e4:	1dfb      	adds	r3, r7, #7
    32e6:	781b      	ldrb	r3, [r3, #0]
    32e8:	0018      	movs	r0, r3
    32ea:	4b03      	ldr	r3, [pc, #12]	; (32f8 <port_get_group_from_gpio_pin+0x20>)
    32ec:	4798      	blx	r3
    32ee:	0003      	movs	r3, r0
}
    32f0:	0018      	movs	r0, r3
    32f2:	46bd      	mov	sp, r7
    32f4:	b002      	add	sp, #8
    32f6:	bd80      	pop	{r7, pc}
    32f8:	00003279 	.word	0x00003279

000032fc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    32fc:	b580      	push	{r7, lr}
    32fe:	b084      	sub	sp, #16
    3300:	af00      	add	r7, sp, #0
    3302:	0002      	movs	r2, r0
    3304:	1dfb      	adds	r3, r7, #7
    3306:	701a      	strb	r2, [r3, #0]
    3308:	1dbb      	adds	r3, r7, #6
    330a:	1c0a      	adds	r2, r1, #0
    330c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    330e:	1dfb      	adds	r3, r7, #7
    3310:	781b      	ldrb	r3, [r3, #0]
    3312:	0018      	movs	r0, r3
    3314:	4b0d      	ldr	r3, [pc, #52]	; (334c <port_pin_set_output_level+0x50>)
    3316:	4798      	blx	r3
    3318:	0003      	movs	r3, r0
    331a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    331c:	1dfb      	adds	r3, r7, #7
    331e:	781b      	ldrb	r3, [r3, #0]
    3320:	221f      	movs	r2, #31
    3322:	4013      	ands	r3, r2
    3324:	2201      	movs	r2, #1
    3326:	409a      	lsls	r2, r3
    3328:	0013      	movs	r3, r2
    332a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    332c:	1dbb      	adds	r3, r7, #6
    332e:	781b      	ldrb	r3, [r3, #0]
    3330:	2b00      	cmp	r3, #0
    3332:	d003      	beq.n	333c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3334:	68fb      	ldr	r3, [r7, #12]
    3336:	68ba      	ldr	r2, [r7, #8]
    3338:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    333a:	e002      	b.n	3342 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    333c:	68fb      	ldr	r3, [r7, #12]
    333e:	68ba      	ldr	r2, [r7, #8]
    3340:	615a      	str	r2, [r3, #20]
}
    3342:	46c0      	nop			; (mov r8, r8)
    3344:	46bd      	mov	sp, r7
    3346:	b004      	add	sp, #16
    3348:	bd80      	pop	{r7, pc}
    334a:	46c0      	nop			; (mov r8, r8)
    334c:	000032d9 	.word	0x000032d9

00003350 <init_all_ports>:
	data[1] = 0xFF;
	state = i2c_write(MCP23017_I2C_ADDR_000,(uint8_t *)data,2);
}

uint8_t init_all_ports(void)
{
    3350:	b590      	push	{r4, r7, lr}
    3352:	b085      	sub	sp, #20
    3354:	af00      	add	r7, sp, #0
	uint8_t states = 0;
    3356:	230f      	movs	r3, #15
    3358:	18fb      	adds	r3, r7, r3
    335a:	2200      	movs	r2, #0
    335c:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[1] = 0x00;
    335e:	1d3b      	adds	r3, r7, #4
    3360:	2200      	movs	r2, #0
    3362:	705a      	strb	r2, [r3, #1]
	
	for (int i=0;i<8;i++)
    3364:	2300      	movs	r3, #0
    3366:	60bb      	str	r3, [r7, #8]
    3368:	e036      	b.n	33d8 <init_all_ports+0x88>
	{
		data[0] = MCP23017_IODIRA;
    336a:	1d3b      	adds	r3, r7, #4
    336c:	2200      	movs	r2, #0
    336e:	701a      	strb	r2, [r3, #0]
		uint8_t state = i2c_write(MCP23017_I2C_ADDR_000+i,(uint8_t *)data,2);
    3370:	68bb      	ldr	r3, [r7, #8]
    3372:	b2db      	uxtb	r3, r3
    3374:	3320      	adds	r3, #32
    3376:	b2db      	uxtb	r3, r3
    3378:	1dfc      	adds	r4, r7, #7
    337a:	1d39      	adds	r1, r7, #4
    337c:	2202      	movs	r2, #2
    337e:	0018      	movs	r0, r3
    3380:	4b28      	ldr	r3, [pc, #160]	; (3424 <init_all_ports+0xd4>)
    3382:	4798      	blx	r3
    3384:	0003      	movs	r3, r0
    3386:	7023      	strb	r3, [r4, #0]
		if (state == STATUS_OK)
    3388:	1dfb      	adds	r3, r7, #7
    338a:	781b      	ldrb	r3, [r3, #0]
    338c:	2b00      	cmp	r3, #0
    338e:	d120      	bne.n	33d2 <init_all_ports+0x82>
		{
			data[0] = MCP23017_IODIRB;
    3390:	1d3b      	adds	r3, r7, #4
    3392:	2201      	movs	r2, #1
    3394:	701a      	strb	r2, [r3, #0]
			state = i2c_write(MCP23017_I2C_ADDR_000+i,(uint8_t *)data,2);
    3396:	68bb      	ldr	r3, [r7, #8]
    3398:	b2db      	uxtb	r3, r3
    339a:	3320      	adds	r3, #32
    339c:	b2db      	uxtb	r3, r3
    339e:	1dfc      	adds	r4, r7, #7
    33a0:	1d39      	adds	r1, r7, #4
    33a2:	2202      	movs	r2, #2
    33a4:	0018      	movs	r0, r3
    33a6:	4b1f      	ldr	r3, [pc, #124]	; (3424 <init_all_ports+0xd4>)
    33a8:	4798      	blx	r3
    33aa:	0003      	movs	r3, r0
    33ac:	7023      	strb	r3, [r4, #0]
			if (state == STATUS_OK)
    33ae:	1dfb      	adds	r3, r7, #7
    33b0:	781b      	ldrb	r3, [r3, #0]
    33b2:	2b00      	cmp	r3, #0
    33b4:	d10d      	bne.n	33d2 <init_all_ports+0x82>
			{
				states |= (1 << i);
    33b6:	2201      	movs	r2, #1
    33b8:	68bb      	ldr	r3, [r7, #8]
    33ba:	409a      	lsls	r2, r3
    33bc:	0013      	movs	r3, r2
    33be:	b25a      	sxtb	r2, r3
    33c0:	230f      	movs	r3, #15
    33c2:	18fb      	adds	r3, r7, r3
    33c4:	781b      	ldrb	r3, [r3, #0]
    33c6:	b25b      	sxtb	r3, r3
    33c8:	4313      	orrs	r3, r2
    33ca:	b25a      	sxtb	r2, r3
    33cc:	230f      	movs	r3, #15
    33ce:	18fb      	adds	r3, r7, r3
    33d0:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
    33d2:	68bb      	ldr	r3, [r7, #8]
    33d4:	3301      	adds	r3, #1
    33d6:	60bb      	str	r3, [r7, #8]
    33d8:	68bb      	ldr	r3, [r7, #8]
    33da:	2b07      	cmp	r3, #7
    33dc:	ddc5      	ble.n	336a <init_all_ports+0x1a>
			}
		}
	}
	
	data[1] = 0x80;
    33de:	1d3b      	adds	r3, r7, #4
    33e0:	2280      	movs	r2, #128	; 0x80
    33e2:	705a      	strb	r2, [r3, #1]
	data[0] = MCP23017_GPIOA;
    33e4:	1d3b      	adds	r3, r7, #4
    33e6:	2212      	movs	r2, #18
    33e8:	701a      	strb	r2, [r3, #0]
	uint8_t state = i2c_write(MCP23017_I2C_ADDR_001,(uint8_t *)data,2);
    33ea:	1dbc      	adds	r4, r7, #6
    33ec:	1d3b      	adds	r3, r7, #4
    33ee:	2202      	movs	r2, #2
    33f0:	0019      	movs	r1, r3
    33f2:	2021      	movs	r0, #33	; 0x21
    33f4:	4b0b      	ldr	r3, [pc, #44]	; (3424 <init_all_ports+0xd4>)
    33f6:	4798      	blx	r3
    33f8:	0003      	movs	r3, r0
    33fa:	7023      	strb	r3, [r4, #0]
	data[0] = MCP23017_GPIOB;
    33fc:	1d3b      	adds	r3, r7, #4
    33fe:	2213      	movs	r2, #19
    3400:	701a      	strb	r2, [r3, #0]
	state = i2c_write(MCP23017_I2C_ADDR_001,(uint8_t *)data,2);
    3402:	1dbc      	adds	r4, r7, #6
    3404:	1d3b      	adds	r3, r7, #4
    3406:	2202      	movs	r2, #2
    3408:	0019      	movs	r1, r3
    340a:	2021      	movs	r0, #33	; 0x21
    340c:	4b05      	ldr	r3, [pc, #20]	; (3424 <init_all_ports+0xd4>)
    340e:	4798      	blx	r3
    3410:	0003      	movs	r3, r0
    3412:	7023      	strb	r3, [r4, #0]
	
	return states;
    3414:	230f      	movs	r3, #15
    3416:	18fb      	adds	r3, r7, r3
    3418:	781b      	ldrb	r3, [r3, #0]
}
    341a:	0018      	movs	r0, r3
    341c:	46bd      	mov	sp, r7
    341e:	b005      	add	sp, #20
    3420:	bd90      	pop	{r4, r7, pc}
    3422:	46c0      	nop			; (mov r8, r8)
    3424:	000030d9 	.word	0x000030d9

00003428 <mcp23017_set_pins>:
	data[0] = MCP23017_GPIOB;
	state = i2c_write(MCP23017_I2C_ADDR_000,(uint8_t *)data,2);	
}

uint8_t mcp23017_set_pins(uint8_t addr, uint8_t porta, uint8_t portb)
{
    3428:	b590      	push	{r4, r7, lr}
    342a:	b085      	sub	sp, #20
    342c:	af00      	add	r7, sp, #0
    342e:	0004      	movs	r4, r0
    3430:	0008      	movs	r0, r1
    3432:	0011      	movs	r1, r2
    3434:	1dfb      	adds	r3, r7, #7
    3436:	1c22      	adds	r2, r4, #0
    3438:	701a      	strb	r2, [r3, #0]
    343a:	1dbb      	adds	r3, r7, #6
    343c:	1c02      	adds	r2, r0, #0
    343e:	701a      	strb	r2, [r3, #0]
    3440:	1d7b      	adds	r3, r7, #5
    3442:	1c0a      	adds	r2, r1, #0
    3444:	701a      	strb	r2, [r3, #0]
	uint8_t state = 0x00;
    3446:	230f      	movs	r3, #15
    3448:	18fb      	adds	r3, r7, r3
    344a:	2200      	movs	r2, #0
    344c:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = MCP23017_GPIOA;
    344e:	230c      	movs	r3, #12
    3450:	18fb      	adds	r3, r7, r3
    3452:	2212      	movs	r2, #18
    3454:	701a      	strb	r2, [r3, #0]
	data[1] = porta;
    3456:	230c      	movs	r3, #12
    3458:	18fb      	adds	r3, r7, r3
    345a:	1dba      	adds	r2, r7, #6
    345c:	7812      	ldrb	r2, [r2, #0]
    345e:	705a      	strb	r2, [r3, #1]
	state = i2c_write(addr,(uint8_t *)data,2);
    3460:	230f      	movs	r3, #15
    3462:	18fc      	adds	r4, r7, r3
    3464:	230c      	movs	r3, #12
    3466:	18f9      	adds	r1, r7, r3
    3468:	1dfb      	adds	r3, r7, #7
    346a:	781b      	ldrb	r3, [r3, #0]
    346c:	2202      	movs	r2, #2
    346e:	0018      	movs	r0, r3
    3470:	4b12      	ldr	r3, [pc, #72]	; (34bc <mcp23017_set_pins+0x94>)
    3472:	4798      	blx	r3
    3474:	0003      	movs	r3, r0
    3476:	7023      	strb	r3, [r4, #0]
	data[0] = MCP23017_GPIOB;
    3478:	230c      	movs	r3, #12
    347a:	18fb      	adds	r3, r7, r3
    347c:	2213      	movs	r2, #19
    347e:	701a      	strb	r2, [r3, #0]
	data[1] = portb;
    3480:	230c      	movs	r3, #12
    3482:	18fb      	adds	r3, r7, r3
    3484:	1d7a      	adds	r2, r7, #5
    3486:	7812      	ldrb	r2, [r2, #0]
    3488:	705a      	strb	r2, [r3, #1]
	state |= i2c_write(addr,(uint8_t *)data,2);
    348a:	230c      	movs	r3, #12
    348c:	18f9      	adds	r1, r7, r3
    348e:	1dfb      	adds	r3, r7, #7
    3490:	781b      	ldrb	r3, [r3, #0]
    3492:	2202      	movs	r2, #2
    3494:	0018      	movs	r0, r3
    3496:	4b09      	ldr	r3, [pc, #36]	; (34bc <mcp23017_set_pins+0x94>)
    3498:	4798      	blx	r3
    349a:	0003      	movs	r3, r0
    349c:	0019      	movs	r1, r3
    349e:	230f      	movs	r3, #15
    34a0:	18fb      	adds	r3, r7, r3
    34a2:	220f      	movs	r2, #15
    34a4:	18ba      	adds	r2, r7, r2
    34a6:	7812      	ldrb	r2, [r2, #0]
    34a8:	430a      	orrs	r2, r1
    34aa:	701a      	strb	r2, [r3, #0]
	
	return state;
    34ac:	230f      	movs	r3, #15
    34ae:	18fb      	adds	r3, r7, r3
    34b0:	781b      	ldrb	r3, [r3, #0]
}
    34b2:	0018      	movs	r0, r3
    34b4:	46bd      	mov	sp, r7
    34b6:	b005      	add	sp, #20
    34b8:	bd90      	pop	{r4, r7, pc}
    34ba:	46c0      	nop			; (mov r8, r8)
    34bc:	000030d9 	.word	0x000030d9

000034c0 <mcp23017_read_all_ports>:

uint8_t data_being_read[8][2];

void mcp23017_read_all_ports(uint8_t read_data_ptr[2][8], uint8_t states[8])
{
    34c0:	b5b0      	push	{r4, r5, r7, lr}
    34c2:	b084      	sub	sp, #16
    34c4:	af00      	add	r7, sp, #0
    34c6:	6078      	str	r0, [r7, #4]
    34c8:	6039      	str	r1, [r7, #0]
	uint8_t state = 0x00;
    34ca:	230e      	movs	r3, #14
    34cc:	18fb      	adds	r3, r7, r3
    34ce:	2200      	movs	r2, #0
    34d0:	701a      	strb	r2, [r3, #0]
	//uint8_t data = 0x00;
	for (uint8_t i=0;i<8;i++)
    34d2:	230f      	movs	r3, #15
    34d4:	18fb      	adds	r3, r7, r3
    34d6:	2200      	movs	r2, #0
    34d8:	701a      	strb	r2, [r3, #0]
    34da:	e03e      	b.n	355a <mcp23017_read_all_ports+0x9a>
	{
		//data = 0x00;
		//data_being_read[i][0] = 0;
		//read_data_ptr[i][0] = 0;
		state = i2c_read(MCP23017_I2C_ADDR_000+i,MCP23017_GPIOA, 1,(uint8_t *)&read_data_ptr[0][i]);
    34dc:	230f      	movs	r3, #15
    34de:	18fb      	adds	r3, r7, r3
    34e0:	781b      	ldrb	r3, [r3, #0]
    34e2:	3320      	adds	r3, #32
    34e4:	b2d8      	uxtb	r0, r3
    34e6:	230f      	movs	r3, #15
    34e8:	18fb      	adds	r3, r7, r3
    34ea:	781b      	ldrb	r3, [r3, #0]
    34ec:	687a      	ldr	r2, [r7, #4]
    34ee:	18d3      	adds	r3, r2, r3
    34f0:	220e      	movs	r2, #14
    34f2:	18bc      	adds	r4, r7, r2
    34f4:	2201      	movs	r2, #1
    34f6:	2112      	movs	r1, #18
    34f8:	4d1c      	ldr	r5, [pc, #112]	; (356c <mcp23017_read_all_ports+0xac>)
    34fa:	47a8      	blx	r5
    34fc:	0003      	movs	r3, r0
    34fe:	7023      	strb	r3, [r4, #0]
		//read_data[i][0] = data;
		//data_being_read[i][0] = data;
		//read_data_ptr[i][1] = 0;
		state |= i2c_read(MCP23017_I2C_ADDR_000+i,MCP23017_GPIOB, 1,(uint8_t *)&read_data_ptr[1][i]);
    3500:	230f      	movs	r3, #15
    3502:	18fb      	adds	r3, r7, r3
    3504:	781b      	ldrb	r3, [r3, #0]
    3506:	3320      	adds	r3, #32
    3508:	b2d8      	uxtb	r0, r3
    350a:	687b      	ldr	r3, [r7, #4]
    350c:	3308      	adds	r3, #8
    350e:	001a      	movs	r2, r3
    3510:	230f      	movs	r3, #15
    3512:	18fb      	adds	r3, r7, r3
    3514:	781b      	ldrb	r3, [r3, #0]
    3516:	18d3      	adds	r3, r2, r3
    3518:	2201      	movs	r2, #1
    351a:	2113      	movs	r1, #19
    351c:	4c13      	ldr	r4, [pc, #76]	; (356c <mcp23017_read_all_ports+0xac>)
    351e:	47a0      	blx	r4
    3520:	0003      	movs	r3, r0
    3522:	0019      	movs	r1, r3
    3524:	230e      	movs	r3, #14
    3526:	18fb      	adds	r3, r7, r3
    3528:	220e      	movs	r2, #14
    352a:	18ba      	adds	r2, r7, r2
    352c:	7812      	ldrb	r2, [r2, #0]
    352e:	430a      	orrs	r2, r1
    3530:	701a      	strb	r2, [r3, #0]
		//data_being_read[i][1] = data;
		//read_data[i][1] = data;
		states[i] = state;
    3532:	230f      	movs	r3, #15
    3534:	18fb      	adds	r3, r7, r3
    3536:	781b      	ldrb	r3, [r3, #0]
    3538:	683a      	ldr	r2, [r7, #0]
    353a:	18d3      	adds	r3, r2, r3
    353c:	220e      	movs	r2, #14
    353e:	18ba      	adds	r2, r7, r2
    3540:	7812      	ldrb	r2, [r2, #0]
    3542:	701a      	strb	r2, [r3, #0]
		state = 0x00;
    3544:	230e      	movs	r3, #14
    3546:	18fb      	adds	r3, r7, r3
    3548:	2200      	movs	r2, #0
    354a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0;i<8;i++)
    354c:	230f      	movs	r3, #15
    354e:	18fb      	adds	r3, r7, r3
    3550:	781a      	ldrb	r2, [r3, #0]
    3552:	230f      	movs	r3, #15
    3554:	18fb      	adds	r3, r7, r3
    3556:	3201      	adds	r2, #1
    3558:	701a      	strb	r2, [r3, #0]
    355a:	230f      	movs	r3, #15
    355c:	18fb      	adds	r3, r7, r3
    355e:	781b      	ldrb	r3, [r3, #0]
    3560:	2b07      	cmp	r3, #7
    3562:	d9bb      	bls.n	34dc <mcp23017_read_all_ports+0x1c>
	}
	//read_data = data_being_read;
	//return state;
}
    3564:	46c0      	nop			; (mov r8, r8)
    3566:	46bd      	mov	sp, r7
    3568:	b004      	add	sp, #16
    356a:	bdb0      	pop	{r4, r5, r7, pc}
    356c:	00003151 	.word	0x00003151

00003570 <mcp23017_reset>:
	port_pin_set_config(MCP23017_PWR_PIN,&config_port_pin);
	port_pin_set_output_level(MCP23017_PWR_PIN,true);
}

void mcp23017_reset(void)
{
    3570:	b5f0      	push	{r4, r5, r6, r7, lr}
    3572:	b087      	sub	sp, #28
    3574:	af00      	add	r7, sp, #0
	port_pin_set_output_level(MCP23017_PWR_PIN, false);
    3576:	2100      	movs	r1, #0
    3578:	2007      	movs	r0, #7
    357a:	4b32      	ldr	r3, [pc, #200]	; (3644 <mcp23017_reset+0xd4>)
    357c:	4798      	blx	r3
	delay_ms(250);
    357e:	2000      	movs	r0, #0
    3580:	4b31      	ldr	r3, [pc, #196]	; (3648 <mcp23017_reset+0xd8>)
    3582:	4798      	blx	r3
    3584:	0003      	movs	r3, r0
    3586:	001d      	movs	r5, r3
    3588:	2300      	movs	r3, #0
    358a:	001e      	movs	r6, r3
    358c:	4c2f      	ldr	r4, [pc, #188]	; (364c <mcp23017_reset+0xdc>)
    358e:	22fa      	movs	r2, #250	; 0xfa
    3590:	2300      	movs	r3, #0
    3592:	0028      	movs	r0, r5
    3594:	0031      	movs	r1, r6
    3596:	47a0      	blx	r4
    3598:	0003      	movs	r3, r0
    359a:	000c      	movs	r4, r1
    359c:	0019      	movs	r1, r3
    359e:	0022      	movs	r2, r4
    35a0:	4b2b      	ldr	r3, [pc, #172]	; (3650 <mcp23017_reset+0xe0>)
    35a2:	2400      	movs	r4, #0
    35a4:	18c9      	adds	r1, r1, r3
    35a6:	4162      	adcs	r2, r4
    35a8:	0008      	movs	r0, r1
    35aa:	0011      	movs	r1, r2
    35ac:	4c29      	ldr	r4, [pc, #164]	; (3654 <mcp23017_reset+0xe4>)
    35ae:	4a2a      	ldr	r2, [pc, #168]	; (3658 <mcp23017_reset+0xe8>)
    35b0:	2300      	movs	r3, #0
    35b2:	47a0      	blx	r4
    35b4:	0003      	movs	r3, r0
    35b6:	000c      	movs	r4, r1
    35b8:	0018      	movs	r0, r3
    35ba:	4b28      	ldr	r3, [pc, #160]	; (365c <mcp23017_reset+0xec>)
    35bc:	4798      	blx	r3
	port_pin_set_output_level(MCP23017_PWR_PIN, true);
    35be:	2101      	movs	r1, #1
    35c0:	2007      	movs	r0, #7
    35c2:	4b20      	ldr	r3, [pc, #128]	; (3644 <mcp23017_reset+0xd4>)
    35c4:	4798      	blx	r3
	delay_ms(125);
    35c6:	2000      	movs	r0, #0
    35c8:	4b1f      	ldr	r3, [pc, #124]	; (3648 <mcp23017_reset+0xd8>)
    35ca:	4798      	blx	r3
    35cc:	0003      	movs	r3, r0
    35ce:	603b      	str	r3, [r7, #0]
    35d0:	2300      	movs	r3, #0
    35d2:	607b      	str	r3, [r7, #4]
    35d4:	6838      	ldr	r0, [r7, #0]
    35d6:	6879      	ldr	r1, [r7, #4]
    35d8:	0003      	movs	r3, r0
    35da:	000c      	movs	r4, r1
    35dc:	0eda      	lsrs	r2, r3, #27
    35de:	0165      	lsls	r5, r4, #5
    35e0:	617d      	str	r5, [r7, #20]
    35e2:	697d      	ldr	r5, [r7, #20]
    35e4:	4315      	orrs	r5, r2
    35e6:	617d      	str	r5, [r7, #20]
    35e8:	015b      	lsls	r3, r3, #5
    35ea:	613b      	str	r3, [r7, #16]
    35ec:	693c      	ldr	r4, [r7, #16]
    35ee:	697d      	ldr	r5, [r7, #20]
    35f0:	0002      	movs	r2, r0
    35f2:	000b      	movs	r3, r1
    35f4:	1aa4      	subs	r4, r4, r2
    35f6:	419d      	sbcs	r5, r3
    35f8:	0023      	movs	r3, r4
    35fa:	002c      	movs	r4, r5
    35fc:	0f9a      	lsrs	r2, r3, #30
    35fe:	00a5      	lsls	r5, r4, #2
    3600:	60fd      	str	r5, [r7, #12]
    3602:	68fd      	ldr	r5, [r7, #12]
    3604:	4315      	orrs	r5, r2
    3606:	60fd      	str	r5, [r7, #12]
    3608:	009b      	lsls	r3, r3, #2
    360a:	60bb      	str	r3, [r7, #8]
    360c:	0003      	movs	r3, r0
    360e:	000c      	movs	r4, r1
    3610:	68b9      	ldr	r1, [r7, #8]
    3612:	68fa      	ldr	r2, [r7, #12]
    3614:	185b      	adds	r3, r3, r1
    3616:	4154      	adcs	r4, r2
    3618:	490d      	ldr	r1, [pc, #52]	; (3650 <mcp23017_reset+0xe0>)
    361a:	2200      	movs	r2, #0
    361c:	185b      	adds	r3, r3, r1
    361e:	4154      	adcs	r4, r2
    3620:	0018      	movs	r0, r3
    3622:	0021      	movs	r1, r4
    3624:	4c0b      	ldr	r4, [pc, #44]	; (3654 <mcp23017_reset+0xe4>)
    3626:	4a0c      	ldr	r2, [pc, #48]	; (3658 <mcp23017_reset+0xe8>)
    3628:	2300      	movs	r3, #0
    362a:	47a0      	blx	r4
    362c:	0003      	movs	r3, r0
    362e:	000c      	movs	r4, r1
    3630:	0018      	movs	r0, r3
    3632:	4b0a      	ldr	r3, [pc, #40]	; (365c <mcp23017_reset+0xec>)
    3634:	4798      	blx	r3
	init_all_ports();
    3636:	4b0a      	ldr	r3, [pc, #40]	; (3660 <mcp23017_reset+0xf0>)
    3638:	4798      	blx	r3
	//TODO pull PWR or RESET to MCP23017 ICs.
}
    363a:	46c0      	nop			; (mov r8, r8)
    363c:	46bd      	mov	sp, r7
    363e:	b007      	add	sp, #28
    3640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3642:	46c0      	nop			; (mov r8, r8)
    3644:	000032fd 	.word	0x000032fd
    3648:	00004b0d 	.word	0x00004b0d
    364c:	000056f1 	.word	0x000056f1
    3650:	00001b57 	.word	0x00001b57
    3654:	000056b1 	.word	0x000056b1
    3658:	00001b58 	.word	0x00001b58
    365c:	20000001 	.word	0x20000001
    3660:	00003351 	.word	0x00003351

00003664 <system_pinmux_get_group_from_gpio_pin>:
{
    3664:	b580      	push	{r7, lr}
    3666:	b084      	sub	sp, #16
    3668:	af00      	add	r7, sp, #0
    366a:	0002      	movs	r2, r0
    366c:	1dfb      	adds	r3, r7, #7
    366e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3670:	230f      	movs	r3, #15
    3672:	18fb      	adds	r3, r7, r3
    3674:	1dfa      	adds	r2, r7, #7
    3676:	7812      	ldrb	r2, [r2, #0]
    3678:	09d2      	lsrs	r2, r2, #7
    367a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    367c:	230e      	movs	r3, #14
    367e:	18fb      	adds	r3, r7, r3
    3680:	1dfa      	adds	r2, r7, #7
    3682:	7812      	ldrb	r2, [r2, #0]
    3684:	0952      	lsrs	r2, r2, #5
    3686:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3688:	4b0d      	ldr	r3, [pc, #52]	; (36c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    368a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    368c:	230f      	movs	r3, #15
    368e:	18fb      	adds	r3, r7, r3
    3690:	781b      	ldrb	r3, [r3, #0]
    3692:	2b00      	cmp	r3, #0
    3694:	d10f      	bne.n	36b6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3696:	230f      	movs	r3, #15
    3698:	18fb      	adds	r3, r7, r3
    369a:	781b      	ldrb	r3, [r3, #0]
    369c:	009b      	lsls	r3, r3, #2
    369e:	2210      	movs	r2, #16
    36a0:	4694      	mov	ip, r2
    36a2:	44bc      	add	ip, r7
    36a4:	4463      	add	r3, ip
    36a6:	3b08      	subs	r3, #8
    36a8:	681a      	ldr	r2, [r3, #0]
    36aa:	230e      	movs	r3, #14
    36ac:	18fb      	adds	r3, r7, r3
    36ae:	781b      	ldrb	r3, [r3, #0]
    36b0:	01db      	lsls	r3, r3, #7
    36b2:	18d3      	adds	r3, r2, r3
    36b4:	e000      	b.n	36b8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    36b6:	2300      	movs	r3, #0
}
    36b8:	0018      	movs	r0, r3
    36ba:	46bd      	mov	sp, r7
    36bc:	b004      	add	sp, #16
    36be:	bd80      	pop	{r7, pc}
    36c0:	41004400 	.word	0x41004400

000036c4 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    36c4:	b580      	push	{r7, lr}
    36c6:	b084      	sub	sp, #16
    36c8:	af00      	add	r7, sp, #0
    36ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    36cc:	687b      	ldr	r3, [r7, #4]
    36ce:	681b      	ldr	r3, [r3, #0]
    36d0:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    36d2:	68fb      	ldr	r3, [r7, #12]
    36d4:	7e5b      	ldrb	r3, [r3, #25]
    36d6:	b2db      	uxtb	r3, r3
    36d8:	b25b      	sxtb	r3, r3
    36da:	2b00      	cmp	r3, #0
    36dc:	da01      	bge.n	36e2 <adc_is_syncing+0x1e>
		return true;
    36de:	2301      	movs	r3, #1
    36e0:	e000      	b.n	36e4 <adc_is_syncing+0x20>
	}

	return false;
    36e2:	2300      	movs	r3, #0
}
    36e4:	0018      	movs	r0, r3
    36e6:	46bd      	mov	sp, r7
    36e8:	b004      	add	sp, #16
    36ea:	bd80      	pop	{r7, pc}

000036ec <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    36ec:	b580      	push	{r7, lr}
    36ee:	b086      	sub	sp, #24
    36f0:	af00      	add	r7, sp, #0
    36f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    36f4:	687b      	ldr	r3, [r7, #4]
    36f6:	681b      	ldr	r3, [r3, #0]
    36f8:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    36fa:	693b      	ldr	r3, [r7, #16]
    36fc:	7e1b      	ldrb	r3, [r3, #24]
    36fe:	b2db      	uxtb	r3, r3
    3700:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    3702:	2300      	movs	r3, #0
    3704:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3706:	68fb      	ldr	r3, [r7, #12]
    3708:	2201      	movs	r2, #1
    370a:	4013      	ands	r3, r2
    370c:	d003      	beq.n	3716 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    370e:	697b      	ldr	r3, [r7, #20]
    3710:	2201      	movs	r2, #1
    3712:	4313      	orrs	r3, r2
    3714:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    3716:	68fb      	ldr	r3, [r7, #12]
    3718:	2204      	movs	r2, #4
    371a:	4013      	ands	r3, r2
    371c:	d003      	beq.n	3726 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    371e:	697b      	ldr	r3, [r7, #20]
    3720:	2202      	movs	r2, #2
    3722:	4313      	orrs	r3, r2
    3724:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3726:	68fb      	ldr	r3, [r7, #12]
    3728:	2202      	movs	r2, #2
    372a:	4013      	ands	r3, r2
    372c:	d003      	beq.n	3736 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    372e:	697b      	ldr	r3, [r7, #20]
    3730:	2204      	movs	r2, #4
    3732:	4313      	orrs	r3, r2
    3734:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    3736:	697b      	ldr	r3, [r7, #20]
}
    3738:	0018      	movs	r0, r3
    373a:	46bd      	mov	sp, r7
    373c:	b006      	add	sp, #24
    373e:	bd80      	pop	{r7, pc}

00003740 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    3740:	b580      	push	{r7, lr}
    3742:	b084      	sub	sp, #16
    3744:	af00      	add	r7, sp, #0
    3746:	6078      	str	r0, [r7, #4]
    3748:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    374a:	687b      	ldr	r3, [r7, #4]
    374c:	681b      	ldr	r3, [r3, #0]
    374e:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    3750:	2300      	movs	r3, #0
    3752:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    3754:	683b      	ldr	r3, [r7, #0]
    3756:	2201      	movs	r2, #1
    3758:	4013      	ands	r3, r2
    375a:	d003      	beq.n	3764 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    375c:	68fb      	ldr	r3, [r7, #12]
    375e:	2201      	movs	r2, #1
    3760:	4313      	orrs	r3, r2
    3762:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    3764:	683b      	ldr	r3, [r7, #0]
    3766:	2202      	movs	r2, #2
    3768:	4013      	ands	r3, r2
    376a:	d003      	beq.n	3774 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    376c:	68fb      	ldr	r3, [r7, #12]
    376e:	2204      	movs	r2, #4
    3770:	4313      	orrs	r3, r2
    3772:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    3774:	683b      	ldr	r3, [r7, #0]
    3776:	2204      	movs	r2, #4
    3778:	4013      	ands	r3, r2
    377a:	d003      	beq.n	3784 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    377c:	68fb      	ldr	r3, [r7, #12]
    377e:	2202      	movs	r2, #2
    3780:	4313      	orrs	r3, r2
    3782:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    3784:	68fb      	ldr	r3, [r7, #12]
    3786:	b2da      	uxtb	r2, r3
    3788:	68bb      	ldr	r3, [r7, #8]
    378a:	761a      	strb	r2, [r3, #24]
}
    378c:	46c0      	nop			; (mov r8, r8)
    378e:	46bd      	mov	sp, r7
    3790:	b004      	add	sp, #16
    3792:	bd80      	pop	{r7, pc}

00003794 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    3794:	b580      	push	{r7, lr}
    3796:	b084      	sub	sp, #16
    3798:	af00      	add	r7, sp, #0
    379a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    379c:	687b      	ldr	r3, [r7, #4]
    379e:	681b      	ldr	r3, [r3, #0]
    37a0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    37a2:	46c0      	nop			; (mov r8, r8)
    37a4:	687b      	ldr	r3, [r7, #4]
    37a6:	0018      	movs	r0, r3
    37a8:	4b0b      	ldr	r3, [pc, #44]	; (37d8 <adc_start_conversion+0x44>)
    37aa:	4798      	blx	r3
    37ac:	1e03      	subs	r3, r0, #0
    37ae:	d1f9      	bne.n	37a4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    37b0:	68fb      	ldr	r3, [r7, #12]
    37b2:	7b1b      	ldrb	r3, [r3, #12]
    37b4:	b2db      	uxtb	r3, r3
    37b6:	2202      	movs	r2, #2
    37b8:	4313      	orrs	r3, r2
    37ba:	b2da      	uxtb	r2, r3
    37bc:	68fb      	ldr	r3, [r7, #12]
    37be:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    37c0:	46c0      	nop			; (mov r8, r8)
    37c2:	687b      	ldr	r3, [r7, #4]
    37c4:	0018      	movs	r0, r3
    37c6:	4b04      	ldr	r3, [pc, #16]	; (37d8 <adc_start_conversion+0x44>)
    37c8:	4798      	blx	r3
    37ca:	1e03      	subs	r3, r0, #0
    37cc:	d1f9      	bne.n	37c2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    37ce:	46c0      	nop			; (mov r8, r8)
    37d0:	46bd      	mov	sp, r7
    37d2:	b004      	add	sp, #16
    37d4:	bd80      	pop	{r7, pc}
    37d6:	46c0      	nop			; (mov r8, r8)
    37d8:	000036c5 	.word	0x000036c5

000037dc <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    37dc:	b580      	push	{r7, lr}
    37de:	b084      	sub	sp, #16
    37e0:	af00      	add	r7, sp, #0
    37e2:	6078      	str	r0, [r7, #4]
    37e4:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    37e6:	687b      	ldr	r3, [r7, #4]
    37e8:	0018      	movs	r0, r3
    37ea:	4b18      	ldr	r3, [pc, #96]	; (384c <adc_read+0x70>)
    37ec:	4798      	blx	r3
    37ee:	0002      	movs	r2, r0
    37f0:	2301      	movs	r3, #1
    37f2:	4013      	ands	r3, r2
    37f4:	d101      	bne.n	37fa <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    37f6:	2305      	movs	r3, #5
    37f8:	e023      	b.n	3842 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    37fa:	687b      	ldr	r3, [r7, #4]
    37fc:	681b      	ldr	r3, [r3, #0]
    37fe:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    3800:	46c0      	nop			; (mov r8, r8)
    3802:	687b      	ldr	r3, [r7, #4]
    3804:	0018      	movs	r0, r3
    3806:	4b12      	ldr	r3, [pc, #72]	; (3850 <adc_read+0x74>)
    3808:	4798      	blx	r3
    380a:	1e03      	subs	r3, r0, #0
    380c:	d1f9      	bne.n	3802 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    380e:	68fb      	ldr	r3, [r7, #12]
    3810:	8b5b      	ldrh	r3, [r3, #26]
    3812:	b29a      	uxth	r2, r3
    3814:	683b      	ldr	r3, [r7, #0]
    3816:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    3818:	687b      	ldr	r3, [r7, #4]
    381a:	2101      	movs	r1, #1
    381c:	0018      	movs	r0, r3
    381e:	4b0d      	ldr	r3, [pc, #52]	; (3854 <adc_read+0x78>)
    3820:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    3822:	687b      	ldr	r3, [r7, #4]
    3824:	0018      	movs	r0, r3
    3826:	4b09      	ldr	r3, [pc, #36]	; (384c <adc_read+0x70>)
    3828:	4798      	blx	r3
    382a:	0002      	movs	r2, r0
    382c:	2304      	movs	r3, #4
    382e:	4013      	ands	r3, r2
    3830:	d006      	beq.n	3840 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    3832:	687b      	ldr	r3, [r7, #4]
    3834:	2104      	movs	r1, #4
    3836:	0018      	movs	r0, r3
    3838:	4b06      	ldr	r3, [pc, #24]	; (3854 <adc_read+0x78>)
    383a:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    383c:	231e      	movs	r3, #30
    383e:	e000      	b.n	3842 <adc_read+0x66>
	}

	return STATUS_OK;
    3840:	2300      	movs	r3, #0
}
    3842:	0018      	movs	r0, r3
    3844:	46bd      	mov	sp, r7
    3846:	b004      	add	sp, #16
    3848:	bd80      	pop	{r7, pc}
    384a:	46c0      	nop			; (mov r8, r8)
    384c:	000036ed 	.word	0x000036ed
    3850:	000036c5 	.word	0x000036c5
    3854:	00003741 	.word	0x00003741

00003858 <port_get_group_from_gpio_pin>:
{
    3858:	b580      	push	{r7, lr}
    385a:	b082      	sub	sp, #8
    385c:	af00      	add	r7, sp, #0
    385e:	0002      	movs	r2, r0
    3860:	1dfb      	adds	r3, r7, #7
    3862:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3864:	1dfb      	adds	r3, r7, #7
    3866:	781b      	ldrb	r3, [r3, #0]
    3868:	0018      	movs	r0, r3
    386a:	4b03      	ldr	r3, [pc, #12]	; (3878 <port_get_group_from_gpio_pin+0x20>)
    386c:	4798      	blx	r3
    386e:	0003      	movs	r3, r0
}
    3870:	0018      	movs	r0, r3
    3872:	46bd      	mov	sp, r7
    3874:	b002      	add	sp, #8
    3876:	bd80      	pop	{r7, pc}
    3878:	00003665 	.word	0x00003665

0000387c <port_pin_set_output_level>:
{
    387c:	b580      	push	{r7, lr}
    387e:	b084      	sub	sp, #16
    3880:	af00      	add	r7, sp, #0
    3882:	0002      	movs	r2, r0
    3884:	1dfb      	adds	r3, r7, #7
    3886:	701a      	strb	r2, [r3, #0]
    3888:	1dbb      	adds	r3, r7, #6
    388a:	1c0a      	adds	r2, r1, #0
    388c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    388e:	1dfb      	adds	r3, r7, #7
    3890:	781b      	ldrb	r3, [r3, #0]
    3892:	0018      	movs	r0, r3
    3894:	4b0d      	ldr	r3, [pc, #52]	; (38cc <port_pin_set_output_level+0x50>)
    3896:	4798      	blx	r3
    3898:	0003      	movs	r3, r0
    389a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    389c:	1dfb      	adds	r3, r7, #7
    389e:	781b      	ldrb	r3, [r3, #0]
    38a0:	221f      	movs	r2, #31
    38a2:	4013      	ands	r3, r2
    38a4:	2201      	movs	r2, #1
    38a6:	409a      	lsls	r2, r3
    38a8:	0013      	movs	r3, r2
    38aa:	60bb      	str	r3, [r7, #8]
	if (level) {
    38ac:	1dbb      	adds	r3, r7, #6
    38ae:	781b      	ldrb	r3, [r3, #0]
    38b0:	2b00      	cmp	r3, #0
    38b2:	d003      	beq.n	38bc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    38b4:	68fb      	ldr	r3, [r7, #12]
    38b6:	68ba      	ldr	r2, [r7, #8]
    38b8:	619a      	str	r2, [r3, #24]
}
    38ba:	e002      	b.n	38c2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    38bc:	68fb      	ldr	r3, [r7, #12]
    38be:	68ba      	ldr	r2, [r7, #8]
    38c0:	615a      	str	r2, [r3, #20]
}
    38c2:	46c0      	nop			; (mov r8, r8)
    38c4:	46bd      	mov	sp, r7
    38c6:	b004      	add	sp, #16
    38c8:	bd80      	pop	{r7, pc}
    38ca:	46c0      	nop			; (mov r8, r8)
    38cc:	00003859 	.word	0x00003859

000038d0 <single_conversion>:
	adc_enable(&adc_instance);
}


uint16_t single_conversion()
{
    38d0:	b580      	push	{r7, lr}
    38d2:	b082      	sub	sp, #8
    38d4:	af00      	add	r7, sp, #0
	adc_start_conversion(&adc_instance);
    38d6:	4b09      	ldr	r3, [pc, #36]	; (38fc <single_conversion+0x2c>)
    38d8:	0018      	movs	r0, r3
    38da:	4b09      	ldr	r3, [pc, #36]	; (3900 <single_conversion+0x30>)
    38dc:	4798      	blx	r3
	uint16_t result;

	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
    38de:	1dba      	adds	r2, r7, #6
    38e0:	4b06      	ldr	r3, [pc, #24]	; (38fc <single_conversion+0x2c>)
    38e2:	0011      	movs	r1, r2
    38e4:	0018      	movs	r0, r3
    38e6:	4b07      	ldr	r3, [pc, #28]	; (3904 <single_conversion+0x34>)
    38e8:	4798      	blx	r3
    38ea:	0003      	movs	r3, r0
    38ec:	2b05      	cmp	r3, #5
    38ee:	d0f6      	beq.n	38de <single_conversion+0xe>
	return result;
    38f0:	1dbb      	adds	r3, r7, #6
    38f2:	881b      	ldrh	r3, [r3, #0]
}
    38f4:	0018      	movs	r0, r3
    38f6:	46bd      	mov	sp, r7
    38f8:	b002      	add	sp, #8
    38fa:	bd80      	pop	{r7, pc}
    38fc:	20001714 	.word	0x20001714
    3900:	00003795 	.word	0x00003795
    3904:	000037dd 	.word	0x000037dd

00003908 <msgeq7_all_bands>:

void msgeq7_all_bands(uint16_t bands[])
{
    3908:	b5f0      	push	{r4, r5, r6, r7, lr}
    390a:	b08f      	sub	sp, #60	; 0x3c
    390c:	af00      	add	r7, sp, #0
    390e:	62f8      	str	r0, [r7, #44]	; 0x2c
	port_pin_set_output_level(MSGEQ7_PIN_RESET,true);
    3910:	2101      	movs	r1, #1
    3912:	2019      	movs	r0, #25
    3914:	4b53      	ldr	r3, [pc, #332]	; (3a64 <msgeq7_all_bands+0x15c>)
    3916:	4798      	blx	r3
	delay_us(1);
    3918:	2000      	movs	r0, #0
    391a:	4b53      	ldr	r3, [pc, #332]	; (3a68 <msgeq7_all_bands+0x160>)
    391c:	4798      	blx	r3
    391e:	0003      	movs	r3, r0
    3920:	613b      	str	r3, [r7, #16]
    3922:	2300      	movs	r3, #0
    3924:	617b      	str	r3, [r7, #20]
    3926:	4b51      	ldr	r3, [pc, #324]	; (3a6c <msgeq7_all_bands+0x164>)
    3928:	2400      	movs	r4, #0
    392a:	6938      	ldr	r0, [r7, #16]
    392c:	6979      	ldr	r1, [r7, #20]
    392e:	18c0      	adds	r0, r0, r3
    3930:	4161      	adcs	r1, r4
    3932:	4c4f      	ldr	r4, [pc, #316]	; (3a70 <msgeq7_all_bands+0x168>)
    3934:	4a4f      	ldr	r2, [pc, #316]	; (3a74 <msgeq7_all_bands+0x16c>)
    3936:	2300      	movs	r3, #0
    3938:	47a0      	blx	r4
    393a:	0003      	movs	r3, r0
    393c:	000c      	movs	r4, r1
    393e:	0018      	movs	r0, r3
    3940:	4b4d      	ldr	r3, [pc, #308]	; (3a78 <msgeq7_all_bands+0x170>)
    3942:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_RESET,false);
    3944:	2100      	movs	r1, #0
    3946:	2019      	movs	r0, #25
    3948:	4b46      	ldr	r3, [pc, #280]	; (3a64 <msgeq7_all_bands+0x15c>)
    394a:	4798      	blx	r3
	delay_us(75);
    394c:	2000      	movs	r0, #0
    394e:	4b46      	ldr	r3, [pc, #280]	; (3a68 <msgeq7_all_bands+0x160>)
    3950:	4798      	blx	r3
    3952:	0003      	movs	r3, r0
    3954:	61bb      	str	r3, [r7, #24]
    3956:	2300      	movs	r3, #0
    3958:	61fb      	str	r3, [r7, #28]
    395a:	69bb      	ldr	r3, [r7, #24]
    395c:	69fc      	ldr	r4, [r7, #28]
    395e:	0f9a      	lsrs	r2, r3, #30
    3960:	00a0      	lsls	r0, r4, #2
    3962:	6278      	str	r0, [r7, #36]	; 0x24
    3964:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3966:	4310      	orrs	r0, r2
    3968:	6278      	str	r0, [r7, #36]	; 0x24
    396a:	009b      	lsls	r3, r3, #2
    396c:	623b      	str	r3, [r7, #32]
    396e:	6a3b      	ldr	r3, [r7, #32]
    3970:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    3972:	69b9      	ldr	r1, [r7, #24]
    3974:	69fa      	ldr	r2, [r7, #28]
    3976:	185b      	adds	r3, r3, r1
    3978:	4154      	adcs	r4, r2
    397a:	0f1a      	lsrs	r2, r3, #28
    397c:	0126      	lsls	r6, r4, #4
    397e:	4316      	orrs	r6, r2
    3980:	011d      	lsls	r5, r3, #4
    3982:	1aed      	subs	r5, r5, r3
    3984:	41a6      	sbcs	r6, r4
    3986:	002b      	movs	r3, r5
    3988:	0034      	movs	r4, r6
    398a:	4938      	ldr	r1, [pc, #224]	; (3a6c <msgeq7_all_bands+0x164>)
    398c:	2200      	movs	r2, #0
    398e:	185b      	adds	r3, r3, r1
    3990:	4154      	adcs	r4, r2
    3992:	0018      	movs	r0, r3
    3994:	0021      	movs	r1, r4
    3996:	4c36      	ldr	r4, [pc, #216]	; (3a70 <msgeq7_all_bands+0x168>)
    3998:	4a36      	ldr	r2, [pc, #216]	; (3a74 <msgeq7_all_bands+0x16c>)
    399a:	2300      	movs	r3, #0
    399c:	47a0      	blx	r4
    399e:	0003      	movs	r3, r0
    39a0:	000c      	movs	r4, r1
    39a2:	0018      	movs	r0, r3
    39a4:	4b34      	ldr	r3, [pc, #208]	; (3a78 <msgeq7_all_bands+0x170>)
    39a6:	4798      	blx	r3
	
	for (int i=0;i<7;i++)
    39a8:	2300      	movs	r3, #0
    39aa:	637b      	str	r3, [r7, #52]	; 0x34
    39ac:	e052      	b.n	3a54 <msgeq7_all_bands+0x14c>
	{
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,false);
    39ae:	2100      	movs	r1, #0
    39b0:	2018      	movs	r0, #24
    39b2:	4b2c      	ldr	r3, [pc, #176]	; (3a64 <msgeq7_all_bands+0x15c>)
    39b4:	4798      	blx	r3
		delay_us(40);
    39b6:	2000      	movs	r0, #0
    39b8:	4b2b      	ldr	r3, [pc, #172]	; (3a68 <msgeq7_all_bands+0x160>)
    39ba:	4798      	blx	r3
    39bc:	0003      	movs	r3, r0
    39be:	60bb      	str	r3, [r7, #8]
    39c0:	2300      	movs	r3, #0
    39c2:	60fb      	str	r3, [r7, #12]
    39c4:	4c2d      	ldr	r4, [pc, #180]	; (3a7c <msgeq7_all_bands+0x174>)
    39c6:	2228      	movs	r2, #40	; 0x28
    39c8:	2300      	movs	r3, #0
    39ca:	68b8      	ldr	r0, [r7, #8]
    39cc:	68f9      	ldr	r1, [r7, #12]
    39ce:	47a0      	blx	r4
    39d0:	0003      	movs	r3, r0
    39d2:	000c      	movs	r4, r1
    39d4:	0019      	movs	r1, r3
    39d6:	0022      	movs	r2, r4
    39d8:	4b24      	ldr	r3, [pc, #144]	; (3a6c <msgeq7_all_bands+0x164>)
    39da:	2400      	movs	r4, #0
    39dc:	18c9      	adds	r1, r1, r3
    39de:	4162      	adcs	r2, r4
    39e0:	0008      	movs	r0, r1
    39e2:	0011      	movs	r1, r2
    39e4:	4c22      	ldr	r4, [pc, #136]	; (3a70 <msgeq7_all_bands+0x168>)
    39e6:	4a23      	ldr	r2, [pc, #140]	; (3a74 <msgeq7_all_bands+0x16c>)
    39e8:	2300      	movs	r3, #0
    39ea:	47a0      	blx	r4
    39ec:	0003      	movs	r3, r0
    39ee:	000c      	movs	r4, r1
    39f0:	0018      	movs	r0, r3
    39f2:	4b21      	ldr	r3, [pc, #132]	; (3a78 <msgeq7_all_bands+0x170>)
    39f4:	4798      	blx	r3
		bands[i] = single_conversion();
    39f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    39f8:	005b      	lsls	r3, r3, #1
    39fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    39fc:	18d4      	adds	r4, r2, r3
    39fe:	4b20      	ldr	r3, [pc, #128]	; (3a80 <msgeq7_all_bands+0x178>)
    3a00:	4798      	blx	r3
    3a02:	0003      	movs	r3, r0
    3a04:	8023      	strh	r3, [r4, #0]
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,true);
    3a06:	2101      	movs	r1, #1
    3a08:	2018      	movs	r0, #24
    3a0a:	4b16      	ldr	r3, [pc, #88]	; (3a64 <msgeq7_all_bands+0x15c>)
    3a0c:	4798      	blx	r3
		delay_us(40);
    3a0e:	2000      	movs	r0, #0
    3a10:	4b15      	ldr	r3, [pc, #84]	; (3a68 <msgeq7_all_bands+0x160>)
    3a12:	4798      	blx	r3
    3a14:	0003      	movs	r3, r0
    3a16:	603b      	str	r3, [r7, #0]
    3a18:	2300      	movs	r3, #0
    3a1a:	607b      	str	r3, [r7, #4]
    3a1c:	4c17      	ldr	r4, [pc, #92]	; (3a7c <msgeq7_all_bands+0x174>)
    3a1e:	2228      	movs	r2, #40	; 0x28
    3a20:	2300      	movs	r3, #0
    3a22:	6838      	ldr	r0, [r7, #0]
    3a24:	6879      	ldr	r1, [r7, #4]
    3a26:	47a0      	blx	r4
    3a28:	0003      	movs	r3, r0
    3a2a:	000c      	movs	r4, r1
    3a2c:	0019      	movs	r1, r3
    3a2e:	0022      	movs	r2, r4
    3a30:	4b0e      	ldr	r3, [pc, #56]	; (3a6c <msgeq7_all_bands+0x164>)
    3a32:	2400      	movs	r4, #0
    3a34:	18c9      	adds	r1, r1, r3
    3a36:	4162      	adcs	r2, r4
    3a38:	0008      	movs	r0, r1
    3a3a:	0011      	movs	r1, r2
    3a3c:	4c0c      	ldr	r4, [pc, #48]	; (3a70 <msgeq7_all_bands+0x168>)
    3a3e:	4a0d      	ldr	r2, [pc, #52]	; (3a74 <msgeq7_all_bands+0x16c>)
    3a40:	2300      	movs	r3, #0
    3a42:	47a0      	blx	r4
    3a44:	0003      	movs	r3, r0
    3a46:	000c      	movs	r4, r1
    3a48:	0018      	movs	r0, r3
    3a4a:	4b0b      	ldr	r3, [pc, #44]	; (3a78 <msgeq7_all_bands+0x170>)
    3a4c:	4798      	blx	r3
	for (int i=0;i<7;i++)
    3a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a50:	3301      	adds	r3, #1
    3a52:	637b      	str	r3, [r7, #52]	; 0x34
    3a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a56:	2b06      	cmp	r3, #6
    3a58:	dda9      	ble.n	39ae <msgeq7_all_bands+0xa6>
	}
    3a5a:	46c0      	nop			; (mov r8, r8)
    3a5c:	46bd      	mov	sp, r7
    3a5e:	b00f      	add	sp, #60	; 0x3c
    3a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a62:	46c0      	nop			; (mov r8, r8)
    3a64:	0000387d 	.word	0x0000387d
    3a68:	00004b0d 	.word	0x00004b0d
    3a6c:	006acfbf 	.word	0x006acfbf
    3a70:	000056b1 	.word	0x000056b1
    3a74:	006acfc0 	.word	0x006acfc0
    3a78:	20000001 	.word	0x20000001
    3a7c:	000056f1 	.word	0x000056f1
    3a80:	000038d1 	.word	0x000038d1

00003a84 <TC3_Handler>:
uint16_t values_bands[6];

bool a_okayish = true;
char buffer[64];
void TC3_Handler()
{
    3a84:	b580      	push	{r7, lr}
    3a86:	af00      	add	r7, sp, #0
	static bool blink_state = false;
	// Overflow interrupt triggered
	if ( TC3->COUNT16.INTFLAG.bit.OVF == 1 )
    3a88:	4b23      	ldr	r3, [pc, #140]	; (3b18 <TC3_Handler+0x94>)
    3a8a:	7b9b      	ldrb	r3, [r3, #14]
    3a8c:	07db      	lsls	r3, r3, #31
    3a8e:	0fdb      	lsrs	r3, r3, #31
    3a90:	b2db      	uxtb	r3, r3
    3a92:	2b01      	cmp	r3, #1
    3a94:	d13c      	bne.n	3b10 <TC3_Handler+0x8c>
	{
		if ((pwm_count % 5) == 0)
    3a96:	4b21      	ldr	r3, [pc, #132]	; (3b1c <TC3_Handler+0x98>)
    3a98:	681a      	ldr	r2, [r3, #0]
    3a9a:	4b21      	ldr	r3, [pc, #132]	; (3b20 <TC3_Handler+0x9c>)
    3a9c:	2105      	movs	r1, #5
    3a9e:	0010      	movs	r0, r2
    3aa0:	4798      	blx	r3
    3aa2:	1e0b      	subs	r3, r1, #0
    3aa4:	d107      	bne.n	3ab6 <TC3_Handler+0x32>
		{
			should_update = true;
    3aa6:	4b1f      	ldr	r3, [pc, #124]	; (3b24 <TC3_Handler+0xa0>)
    3aa8:	2201      	movs	r2, #1
    3aaa:	701a      	strb	r2, [r3, #0]
			should_updates++;
    3aac:	4b1e      	ldr	r3, [pc, #120]	; (3b28 <TC3_Handler+0xa4>)
    3aae:	681b      	ldr	r3, [r3, #0]
    3ab0:	1c5a      	adds	r2, r3, #1
    3ab2:	4b1d      	ldr	r3, [pc, #116]	; (3b28 <TC3_Handler+0xa4>)
    3ab4:	601a      	str	r2, [r3, #0]
		}
		
		if((pwm_count % 25) == 0)
    3ab6:	4b19      	ldr	r3, [pc, #100]	; (3b1c <TC3_Handler+0x98>)
    3ab8:	681a      	ldr	r2, [r3, #0]
    3aba:	4b19      	ldr	r3, [pc, #100]	; (3b20 <TC3_Handler+0x9c>)
    3abc:	2119      	movs	r1, #25
    3abe:	0010      	movs	r0, r2
    3ac0:	4798      	blx	r3
    3ac2:	1e0b      	subs	r3, r1, #0
    3ac4:	d102      	bne.n	3acc <TC3_Handler+0x48>
		{
			obd_should_update = true;
    3ac6:	4b19      	ldr	r3, [pc, #100]	; (3b2c <TC3_Handler+0xa8>)
    3ac8:	2201      	movs	r2, #1
    3aca:	701a      	strb	r2, [r3, #0]
		}
		
		pwm_count++;
    3acc:	4b13      	ldr	r3, [pc, #76]	; (3b1c <TC3_Handler+0x98>)
    3ace:	681b      	ldr	r3, [r3, #0]
    3ad0:	1c5a      	adds	r2, r3, #1
    3ad2:	4b12      	ldr	r3, [pc, #72]	; (3b1c <TC3_Handler+0x98>)
    3ad4:	601a      	str	r2, [r3, #0]

		if (pwm_count > PWM_FREQ)
    3ad6:	4b11      	ldr	r3, [pc, #68]	; (3b1c <TC3_Handler+0x98>)
    3ad8:	681b      	ldr	r3, [r3, #0]
    3ada:	2bfa      	cmp	r3, #250	; 0xfa
    3adc:	dd15      	ble.n	3b0a <TC3_Handler+0x86>
		{
			should_updates = 0;
    3ade:	4b12      	ldr	r3, [pc, #72]	; (3b28 <TC3_Handler+0xa4>)
    3ae0:	2200      	movs	r2, #0
    3ae2:	601a      	str	r2, [r3, #0]
			/*if ((seconds % 300) == 0)
			{
				execute_order_66 = true;
			}*/
			seconds++;
    3ae4:	4b12      	ldr	r3, [pc, #72]	; (3b30 <TC3_Handler+0xac>)
    3ae6:	681b      	ldr	r3, [r3, #0]
    3ae8:	1c5a      	adds	r2, r3, #1
    3aea:	4b11      	ldr	r3, [pc, #68]	; (3b30 <TC3_Handler+0xac>)
    3aec:	601a      	str	r2, [r3, #0]
			if ((seconds % 5) == 0)
    3aee:	4b10      	ldr	r3, [pc, #64]	; (3b30 <TC3_Handler+0xac>)
    3af0:	681a      	ldr	r2, [r3, #0]
    3af2:	4b0b      	ldr	r3, [pc, #44]	; (3b20 <TC3_Handler+0x9c>)
    3af4:	2105      	movs	r1, #5
    3af6:	0010      	movs	r0, r2
    3af8:	4798      	blx	r3
    3afa:	1e0b      	subs	r3, r1, #0
    3afc:	d102      	bne.n	3b04 <TC3_Handler+0x80>
			{
				should_check = true;
    3afe:	4b0d      	ldr	r3, [pc, #52]	; (3b34 <TC3_Handler+0xb0>)
    3b00:	2201      	movs	r2, #1
    3b02:	701a      	strb	r2, [r3, #0]
			if (party)
			{
				sprintf(buffer,"%d %d %d %d %d %d",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
				ble_uart_write(buffer);
			}*/
			pwm_count = 0;
    3b04:	4b05      	ldr	r3, [pc, #20]	; (3b1c <TC3_Handler+0x98>)
    3b06:	2200      	movs	r2, #0
    3b08:	601a      	str	r2, [r3, #0]
		}
		TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0;
    3b0a:	4b03      	ldr	r3, [pc, #12]	; (3b18 <TC3_Handler+0x94>)
    3b0c:	2210      	movs	r2, #16
    3b0e:	739a      	strb	r2, [r3, #14]
	}
}
    3b10:	46c0      	nop			; (mov r8, r8)
    3b12:	46bd      	mov	sp, r7
    3b14:	bd80      	pop	{r7, pc}
    3b16:	46c0      	nop			; (mov r8, r8)
    3b18:	42002c00 	.word	0x42002c00
    3b1c:	20001704 	.word	0x20001704
    3b20:	000056a5 	.word	0x000056a5
    3b24:	200012d0 	.word	0x200012d0
    3b28:	200012d4 	.word	0x200012d4
    3b2c:	200012d8 	.word	0x200012d8
    3b30:	200012e0 	.word	0x200012e0
    3b34:	200012e4 	.word	0x200012e4

00003b38 <things_to_do>:

void things_to_do(void)
{
    3b38:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b3a:	b087      	sub	sp, #28
    3b3c:	af04      	add	r7, sp, #16
	if (party)
    3b3e:	4b2b      	ldr	r3, [pc, #172]	; (3bec <things_to_do+0xb4>)
    3b40:	781b      	ldrb	r3, [r3, #0]
    3b42:	b2db      	uxtb	r3, r3
    3b44:	2b00      	cmp	r3, #0
    3b46:	d026      	beq.n	3b96 <things_to_do+0x5e>
	{
		msgeq7_all_bands(values_bands);
    3b48:	4b29      	ldr	r3, [pc, #164]	; (3bf0 <things_to_do+0xb8>)
    3b4a:	0018      	movs	r0, r3
    3b4c:	4b29      	ldr	r3, [pc, #164]	; (3bf4 <things_to_do+0xbc>)
    3b4e:	4798      	blx	r3
		party_lights(values_bands);
    3b50:	4b27      	ldr	r3, [pc, #156]	; (3bf0 <things_to_do+0xb8>)
    3b52:	0018      	movs	r0, r3
    3b54:	4b28      	ldr	r3, [pc, #160]	; (3bf8 <things_to_do+0xc0>)
    3b56:	4798      	blx	r3
		sprintf(buffer,"%04d %04d %04d %04d %04d %04d\r\n",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
    3b58:	4b25      	ldr	r3, [pc, #148]	; (3bf0 <things_to_do+0xb8>)
    3b5a:	881b      	ldrh	r3, [r3, #0]
    3b5c:	001e      	movs	r6, r3
    3b5e:	4b24      	ldr	r3, [pc, #144]	; (3bf0 <things_to_do+0xb8>)
    3b60:	885b      	ldrh	r3, [r3, #2]
    3b62:	607b      	str	r3, [r7, #4]
    3b64:	4b22      	ldr	r3, [pc, #136]	; (3bf0 <things_to_do+0xb8>)
    3b66:	889b      	ldrh	r3, [r3, #4]
    3b68:	001a      	movs	r2, r3
    3b6a:	4b21      	ldr	r3, [pc, #132]	; (3bf0 <things_to_do+0xb8>)
    3b6c:	88db      	ldrh	r3, [r3, #6]
    3b6e:	001c      	movs	r4, r3
    3b70:	4b1f      	ldr	r3, [pc, #124]	; (3bf0 <things_to_do+0xb8>)
    3b72:	891b      	ldrh	r3, [r3, #8]
    3b74:	001d      	movs	r5, r3
    3b76:	4b1e      	ldr	r3, [pc, #120]	; (3bf0 <things_to_do+0xb8>)
    3b78:	895b      	ldrh	r3, [r3, #10]
    3b7a:	4920      	ldr	r1, [pc, #128]	; (3bfc <things_to_do+0xc4>)
    3b7c:	4820      	ldr	r0, [pc, #128]	; (3c00 <things_to_do+0xc8>)
    3b7e:	9303      	str	r3, [sp, #12]
    3b80:	9502      	str	r5, [sp, #8]
    3b82:	9401      	str	r4, [sp, #4]
    3b84:	9200      	str	r2, [sp, #0]
    3b86:	687b      	ldr	r3, [r7, #4]
    3b88:	0032      	movs	r2, r6
    3b8a:	4c1e      	ldr	r4, [pc, #120]	; (3c04 <things_to_do+0xcc>)
    3b8c:	47a0      	blx	r4
		sb_uart_write(&buffer);
    3b8e:	4b1c      	ldr	r3, [pc, #112]	; (3c00 <things_to_do+0xc8>)
    3b90:	0018      	movs	r0, r3
    3b92:	4b1d      	ldr	r3, [pc, #116]	; (3c08 <things_to_do+0xd0>)
    3b94:	4798      	blx	r3
	}
	if ((should_updates % 25) == 0)
    3b96:	4b1d      	ldr	r3, [pc, #116]	; (3c0c <things_to_do+0xd4>)
    3b98:	681a      	ldr	r2, [r3, #0]
    3b9a:	4b1d      	ldr	r3, [pc, #116]	; (3c10 <things_to_do+0xd8>)
    3b9c:	2119      	movs	r1, #25
    3b9e:	0010      	movs	r0, r2
    3ba0:	4798      	blx	r3
    3ba2:	1e0b      	subs	r3, r1, #0
    3ba4:	d116      	bne.n	3bd4 <things_to_do+0x9c>
	{
		if (flashy1)
    3ba6:	4b1b      	ldr	r3, [pc, #108]	; (3c14 <things_to_do+0xdc>)
    3ba8:	781b      	ldrb	r3, [r3, #0]
    3baa:	b2db      	uxtb	r3, r3
    3bac:	2b00      	cmp	r3, #0
    3bae:	d002      	beq.n	3bb6 <things_to_do+0x7e>
		{
			flashy_flash1();
    3bb0:	4b19      	ldr	r3, [pc, #100]	; (3c18 <things_to_do+0xe0>)
    3bb2:	4798      	blx	r3
    3bb4:	e00e      	b.n	3bd4 <things_to_do+0x9c>
		}
		else if (flashy2)
    3bb6:	4b19      	ldr	r3, [pc, #100]	; (3c1c <things_to_do+0xe4>)
    3bb8:	781b      	ldrb	r3, [r3, #0]
    3bba:	b2db      	uxtb	r3, r3
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	d002      	beq.n	3bc6 <things_to_do+0x8e>
		{
			flashy_flash2();
    3bc0:	4b17      	ldr	r3, [pc, #92]	; (3c20 <things_to_do+0xe8>)
    3bc2:	4798      	blx	r3
    3bc4:	e006      	b.n	3bd4 <things_to_do+0x9c>
		}
		else if (flashy3)
    3bc6:	4b17      	ldr	r3, [pc, #92]	; (3c24 <things_to_do+0xec>)
    3bc8:	781b      	ldrb	r3, [r3, #0]
    3bca:	b2db      	uxtb	r3, r3
    3bcc:	2b00      	cmp	r3, #0
    3bce:	d001      	beq.n	3bd4 <things_to_do+0x9c>
		{
			flashy_flash3();
    3bd0:	4b15      	ldr	r3, [pc, #84]	; (3c28 <things_to_do+0xf0>)
    3bd2:	4798      	blx	r3
		}
	}
	if (flashyfade)
    3bd4:	4b15      	ldr	r3, [pc, #84]	; (3c2c <things_to_do+0xf4>)
    3bd6:	781b      	ldrb	r3, [r3, #0]
    3bd8:	b2db      	uxtb	r3, r3
    3bda:	2b00      	cmp	r3, #0
    3bdc:	d001      	beq.n	3be2 <things_to_do+0xaa>
	{
		flashy_fades();
    3bde:	4b14      	ldr	r3, [pc, #80]	; (3c30 <things_to_do+0xf8>)
    3be0:	4798      	blx	r3
	/*if (party)
	{
		sprintf(buffer,"%d %d %d %d %d %d\r\n",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
		ble_uart_write(buffer);
	}*/
}
    3be2:	46c0      	nop			; (mov r8, r8)
    3be4:	46bd      	mov	sp, r7
    3be6:	b003      	add	sp, #12
    3be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bea:	46c0      	nop			; (mov r8, r8)
    3bec:	20000e39 	.word	0x20000e39
    3bf0:	2000175c 	.word	0x2000175c
    3bf4:	00003909 	.word	0x00003909
    3bf8:	00002489 	.word	0x00002489
    3bfc:	000070bc 	.word	0x000070bc
    3c00:	2000171c 	.word	0x2000171c
    3c04:	00005b4d 	.word	0x00005b4d
    3c08:	0000425d 	.word	0x0000425d
    3c0c:	200012d4 	.word	0x200012d4
    3c10:	000056a5 	.word	0x000056a5
    3c14:	20000a10 	.word	0x20000a10
    3c18:	000026f1 	.word	0x000026f1
    3c1c:	20000e27 	.word	0x20000e27
    3c20:	00002829 	.word	0x00002829
    3c24:	20000e45 	.word	0x20000e45
    3c28:	00002c11 	.word	0x00002c11
    3c2c:	20000e43 	.word	0x20000e43
    3c30:	00002a79 	.word	0x00002a79

00003c34 <system_pinmux_get_group_from_gpio_pin>:
{
    3c34:	b580      	push	{r7, lr}
    3c36:	b084      	sub	sp, #16
    3c38:	af00      	add	r7, sp, #0
    3c3a:	0002      	movs	r2, r0
    3c3c:	1dfb      	adds	r3, r7, #7
    3c3e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3c40:	230f      	movs	r3, #15
    3c42:	18fb      	adds	r3, r7, r3
    3c44:	1dfa      	adds	r2, r7, #7
    3c46:	7812      	ldrb	r2, [r2, #0]
    3c48:	09d2      	lsrs	r2, r2, #7
    3c4a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3c4c:	230e      	movs	r3, #14
    3c4e:	18fb      	adds	r3, r7, r3
    3c50:	1dfa      	adds	r2, r7, #7
    3c52:	7812      	ldrb	r2, [r2, #0]
    3c54:	0952      	lsrs	r2, r2, #5
    3c56:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3c58:	4b0d      	ldr	r3, [pc, #52]	; (3c90 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3c5a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3c5c:	230f      	movs	r3, #15
    3c5e:	18fb      	adds	r3, r7, r3
    3c60:	781b      	ldrb	r3, [r3, #0]
    3c62:	2b00      	cmp	r3, #0
    3c64:	d10f      	bne.n	3c86 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3c66:	230f      	movs	r3, #15
    3c68:	18fb      	adds	r3, r7, r3
    3c6a:	781b      	ldrb	r3, [r3, #0]
    3c6c:	009b      	lsls	r3, r3, #2
    3c6e:	2210      	movs	r2, #16
    3c70:	4694      	mov	ip, r2
    3c72:	44bc      	add	ip, r7
    3c74:	4463      	add	r3, ip
    3c76:	3b08      	subs	r3, #8
    3c78:	681a      	ldr	r2, [r3, #0]
    3c7a:	230e      	movs	r3, #14
    3c7c:	18fb      	adds	r3, r7, r3
    3c7e:	781b      	ldrb	r3, [r3, #0]
    3c80:	01db      	lsls	r3, r3, #7
    3c82:	18d3      	adds	r3, r2, r3
    3c84:	e000      	b.n	3c88 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3c86:	2300      	movs	r3, #0
}
    3c88:	0018      	movs	r0, r3
    3c8a:	46bd      	mov	sp, r7
    3c8c:	b004      	add	sp, #16
    3c8e:	bd80      	pop	{r7, pc}
    3c90:	41004400 	.word	0x41004400

00003c94 <port_get_group_from_gpio_pin>:
{
    3c94:	b580      	push	{r7, lr}
    3c96:	b082      	sub	sp, #8
    3c98:	af00      	add	r7, sp, #0
    3c9a:	0002      	movs	r2, r0
    3c9c:	1dfb      	adds	r3, r7, #7
    3c9e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3ca0:	1dfb      	adds	r3, r7, #7
    3ca2:	781b      	ldrb	r3, [r3, #0]
    3ca4:	0018      	movs	r0, r3
    3ca6:	4b03      	ldr	r3, [pc, #12]	; (3cb4 <port_get_group_from_gpio_pin+0x20>)
    3ca8:	4798      	blx	r3
    3caa:	0003      	movs	r3, r0
}
    3cac:	0018      	movs	r0, r3
    3cae:	46bd      	mov	sp, r7
    3cb0:	b002      	add	sp, #8
    3cb2:	bd80      	pop	{r7, pc}
    3cb4:	00003c35 	.word	0x00003c35

00003cb8 <port_pin_set_output_level>:
{
    3cb8:	b580      	push	{r7, lr}
    3cba:	b084      	sub	sp, #16
    3cbc:	af00      	add	r7, sp, #0
    3cbe:	0002      	movs	r2, r0
    3cc0:	1dfb      	adds	r3, r7, #7
    3cc2:	701a      	strb	r2, [r3, #0]
    3cc4:	1dbb      	adds	r3, r7, #6
    3cc6:	1c0a      	adds	r2, r1, #0
    3cc8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3cca:	1dfb      	adds	r3, r7, #7
    3ccc:	781b      	ldrb	r3, [r3, #0]
    3cce:	0018      	movs	r0, r3
    3cd0:	4b0d      	ldr	r3, [pc, #52]	; (3d08 <port_pin_set_output_level+0x50>)
    3cd2:	4798      	blx	r3
    3cd4:	0003      	movs	r3, r0
    3cd6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3cd8:	1dfb      	adds	r3, r7, #7
    3cda:	781b      	ldrb	r3, [r3, #0]
    3cdc:	221f      	movs	r2, #31
    3cde:	4013      	ands	r3, r2
    3ce0:	2201      	movs	r2, #1
    3ce2:	409a      	lsls	r2, r3
    3ce4:	0013      	movs	r3, r2
    3ce6:	60bb      	str	r3, [r7, #8]
	if (level) {
    3ce8:	1dbb      	adds	r3, r7, #6
    3cea:	781b      	ldrb	r3, [r3, #0]
    3cec:	2b00      	cmp	r3, #0
    3cee:	d003      	beq.n	3cf8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3cf0:	68fb      	ldr	r3, [r7, #12]
    3cf2:	68ba      	ldr	r2, [r7, #8]
    3cf4:	619a      	str	r2, [r3, #24]
}
    3cf6:	e002      	b.n	3cfe <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3cf8:	68fb      	ldr	r3, [r7, #12]
    3cfa:	68ba      	ldr	r2, [r7, #8]
    3cfc:	615a      	str	r2, [r3, #20]
}
    3cfe:	46c0      	nop			; (mov r8, r8)
    3d00:	46bd      	mov	sp, r7
    3d02:	b004      	add	sp, #16
    3d04:	bd80      	pop	{r7, pc}
    3d06:	46c0      	nop			; (mov r8, r8)
    3d08:	00003c95 	.word	0x00003c95

00003d0c <release_sb_btn>:
{
	port_pin_set_output_level(btn,false);
}

void release_sb_btn(uint8_t btn)
{
    3d0c:	b580      	push	{r7, lr}
    3d0e:	b082      	sub	sp, #8
    3d10:	af00      	add	r7, sp, #0
    3d12:	0002      	movs	r2, r0
    3d14:	1dfb      	adds	r3, r7, #7
    3d16:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(btn,true);
    3d18:	1dfb      	adds	r3, r7, #7
    3d1a:	781b      	ldrb	r3, [r3, #0]
    3d1c:	2101      	movs	r1, #1
    3d1e:	0018      	movs	r0, r3
    3d20:	4b02      	ldr	r3, [pc, #8]	; (3d2c <release_sb_btn+0x20>)
    3d22:	4798      	blx	r3
}
    3d24:	46c0      	nop			; (mov r8, r8)
    3d26:	46bd      	mov	sp, r7
    3d28:	b002      	add	sp, #8
    3d2a:	bd80      	pop	{r7, pc}
    3d2c:	00003cb9 	.word	0x00003cb9

00003d30 <sounds_reset>:
{
	mcp23017_set_pins(MTH_ADDR,0x00,0x00);
}

void sounds_reset(void)
{
    3d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d32:	af00      	add	r7, sp, #0
	port_pin_set_output_level(SB_PIN_RESET,false);
    3d34:	2100      	movs	r1, #0
    3d36:	2007      	movs	r0, #7
    3d38:	4b24      	ldr	r3, [pc, #144]	; (3dcc <sounds_reset+0x9c>)
    3d3a:	4798      	blx	r3
	delay_ms(50);
    3d3c:	2000      	movs	r0, #0
    3d3e:	4b24      	ldr	r3, [pc, #144]	; (3dd0 <sounds_reset+0xa0>)
    3d40:	4798      	blx	r3
    3d42:	0003      	movs	r3, r0
    3d44:	001d      	movs	r5, r3
    3d46:	2300      	movs	r3, #0
    3d48:	001e      	movs	r6, r3
    3d4a:	4c22      	ldr	r4, [pc, #136]	; (3dd4 <sounds_reset+0xa4>)
    3d4c:	2232      	movs	r2, #50	; 0x32
    3d4e:	2300      	movs	r3, #0
    3d50:	0028      	movs	r0, r5
    3d52:	0031      	movs	r1, r6
    3d54:	47a0      	blx	r4
    3d56:	0003      	movs	r3, r0
    3d58:	000c      	movs	r4, r1
    3d5a:	0019      	movs	r1, r3
    3d5c:	0022      	movs	r2, r4
    3d5e:	4b1e      	ldr	r3, [pc, #120]	; (3dd8 <sounds_reset+0xa8>)
    3d60:	2400      	movs	r4, #0
    3d62:	18c9      	adds	r1, r1, r3
    3d64:	4162      	adcs	r2, r4
    3d66:	0008      	movs	r0, r1
    3d68:	0011      	movs	r1, r2
    3d6a:	4c1c      	ldr	r4, [pc, #112]	; (3ddc <sounds_reset+0xac>)
    3d6c:	4a1c      	ldr	r2, [pc, #112]	; (3de0 <sounds_reset+0xb0>)
    3d6e:	2300      	movs	r3, #0
    3d70:	47a0      	blx	r4
    3d72:	0003      	movs	r3, r0
    3d74:	000c      	movs	r4, r1
    3d76:	0018      	movs	r0, r3
    3d78:	4b1a      	ldr	r3, [pc, #104]	; (3de4 <sounds_reset+0xb4>)
    3d7a:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_RESET,true);
    3d7c:	2101      	movs	r1, #1
    3d7e:	2007      	movs	r0, #7
    3d80:	4b12      	ldr	r3, [pc, #72]	; (3dcc <sounds_reset+0x9c>)
    3d82:	4798      	blx	r3
	//delay_ms(1000);
	release_sb_btn(SB_PIN_BTN00);
    3d84:	200b      	movs	r0, #11
    3d86:	4b18      	ldr	r3, [pc, #96]	; (3de8 <sounds_reset+0xb8>)
    3d88:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN01);
    3d8a:	200c      	movs	r0, #12
    3d8c:	4b16      	ldr	r3, [pc, #88]	; (3de8 <sounds_reset+0xb8>)
    3d8e:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN02);
    3d90:	200d      	movs	r0, #13
    3d92:	4b15      	ldr	r3, [pc, #84]	; (3de8 <sounds_reset+0xb8>)
    3d94:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN03);
    3d96:	200e      	movs	r0, #14
    3d98:	4b13      	ldr	r3, [pc, #76]	; (3de8 <sounds_reset+0xb8>)
    3d9a:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN04);
    3d9c:	200f      	movs	r0, #15
    3d9e:	4b12      	ldr	r3, [pc, #72]	; (3de8 <sounds_reset+0xb8>)
    3da0:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN05);
    3da2:	2010      	movs	r0, #16
    3da4:	4b10      	ldr	r3, [pc, #64]	; (3de8 <sounds_reset+0xb8>)
    3da6:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN06);
    3da8:	2011      	movs	r0, #17
    3daa:	4b0f      	ldr	r3, [pc, #60]	; (3de8 <sounds_reset+0xb8>)
    3dac:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN07);
    3dae:	2012      	movs	r0, #18
    3db0:	4b0d      	ldr	r3, [pc, #52]	; (3de8 <sounds_reset+0xb8>)
    3db2:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN08);
    3db4:	2013      	movs	r0, #19
    3db6:	4b0c      	ldr	r3, [pc, #48]	; (3de8 <sounds_reset+0xb8>)
    3db8:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN09);
    3dba:	2014      	movs	r0, #20
    3dbc:	4b0a      	ldr	r3, [pc, #40]	; (3de8 <sounds_reset+0xb8>)
    3dbe:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN10);
    3dc0:	2015      	movs	r0, #21
    3dc2:	4b09      	ldr	r3, [pc, #36]	; (3de8 <sounds_reset+0xb8>)
    3dc4:	4798      	blx	r3
	//delay_ms(150);

}
    3dc6:	46c0      	nop			; (mov r8, r8)
    3dc8:	46bd      	mov	sp, r7
    3dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3dcc:	00003cb9 	.word	0x00003cb9
    3dd0:	00004b0d 	.word	0x00004b0d
    3dd4:	000056f1 	.word	0x000056f1
    3dd8:	00001b57 	.word	0x00001b57
    3ddc:	000056b1 	.word	0x000056b1
    3de0:	00001b58 	.word	0x00001b58
    3de4:	20000001 	.word	0x20000001
    3de8:	00003d0d 	.word	0x00003d0d

00003dec <sb_event_handler>:
int temp_track = 0;
char * stringy_pointy;
void sb_event_handler(char buffer[])
{
    3dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dee:	b095      	sub	sp, #84	; 0x54
    3df0:	af02      	add	r7, sp, #8
    3df2:	6078      	str	r0, [r7, #4]
	if (strstr(buffer,"Adafruit FX Sound Board") != NULL && line_count > 3)
    3df4:	4abc      	ldr	r2, [pc, #752]	; (40e8 <sb_event_handler+0x2fc>)
    3df6:	687b      	ldr	r3, [r7, #4]
    3df8:	0011      	movs	r1, r2
    3dfa:	0018      	movs	r0, r3
    3dfc:	4bbb      	ldr	r3, [pc, #748]	; (40ec <sb_event_handler+0x300>)
    3dfe:	4798      	blx	r3
    3e00:	1e03      	subs	r3, r0, #0
    3e02:	d056      	beq.n	3eb2 <sb_event_handler+0xc6>
    3e04:	4bba      	ldr	r3, [pc, #744]	; (40f0 <sb_event_handler+0x304>)
    3e06:	681b      	ldr	r3, [r3, #0]
    3e08:	2b03      	cmp	r3, #3
    3e0a:	dd52      	ble.n	3eb2 <sb_event_handler+0xc6>
	{
		line_count = 0;
    3e0c:	4bb8      	ldr	r3, [pc, #736]	; (40f0 <sb_event_handler+0x304>)
    3e0e:	2200      	movs	r2, #0
    3e10:	601a      	str	r2, [r3, #0]
		int files = 0;
    3e12:	2300      	movs	r3, #0
    3e14:	63bb      	str	r3, [r7, #56]	; 0x38
		char * string_pointer = strstr(buffer,"Files ");
    3e16:	4ab7      	ldr	r2, [pc, #732]	; (40f4 <sb_event_handler+0x308>)
    3e18:	687b      	ldr	r3, [r7, #4]
    3e1a:	0011      	movs	r1, r2
    3e1c:	0018      	movs	r0, r3
    3e1e:	4bb3      	ldr	r3, [pc, #716]	; (40ec <sb_event_handler+0x300>)
    3e20:	4798      	blx	r3
    3e22:	0003      	movs	r3, r0
    3e24:	643b      	str	r3, [r7, #64]	; 0x40
		sscanf(string_pointer,"Files %d\r\n",&files);
    3e26:	2338      	movs	r3, #56	; 0x38
    3e28:	18fa      	adds	r2, r7, r3
    3e2a:	49b3      	ldr	r1, [pc, #716]	; (40f8 <sb_event_handler+0x30c>)
    3e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3e2e:	0018      	movs	r0, r3
    3e30:	4bb2      	ldr	r3, [pc, #712]	; (40fc <sb_event_handler+0x310>)
    3e32:	4798      	blx	r3
		soundboard_instance.number_of_tracks = files;
    3e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3e36:	4bb2      	ldr	r3, [pc, #712]	; (4100 <sb_event_handler+0x314>)
    3e38:	605a      	str	r2, [r3, #4]
		
		string_pointer = strstr(buffer,"FAT ");
    3e3a:	4ab2      	ldr	r2, [pc, #712]	; (4104 <sb_event_handler+0x318>)
    3e3c:	687b      	ldr	r3, [r7, #4]
    3e3e:	0011      	movs	r1, r2
    3e40:	0018      	movs	r0, r3
    3e42:	4baa      	ldr	r3, [pc, #680]	; (40ec <sb_event_handler+0x300>)
    3e44:	4798      	blx	r3
    3e46:	0003      	movs	r3, r0
    3e48:	643b      	str	r3, [r7, #64]	; 0x40
		if (string_pointer != NULL)
    3e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3e4c:	2b00      	cmp	r3, #0
    3e4e:	d009      	beq.n	3e64 <sb_event_handler+0x78>
		{
			int size;
			sscanf(string_pointer,"FAT %x\r\n",&size);
    3e50:	2334      	movs	r3, #52	; 0x34
    3e52:	18fa      	adds	r2, r7, r3
    3e54:	49ac      	ldr	r1, [pc, #688]	; (4108 <sb_event_handler+0x31c>)
    3e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3e58:	0018      	movs	r0, r3
    3e5a:	4ba8      	ldr	r3, [pc, #672]	; (40fc <sb_event_handler+0x310>)
    3e5c:	4798      	blx	r3
			soundboard_instance.partition_size = size;
    3e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3e60:	4ba7      	ldr	r3, [pc, #668]	; (4100 <sb_event_handler+0x314>)
    3e62:	609a      	str	r2, [r3, #8]
		}
		
		sb_reset_buffers();
    3e64:	4ba9      	ldr	r3, [pc, #676]	; (410c <sb_event_handler+0x320>)
    3e66:	4798      	blx	r3
		delay_ms(500);
    3e68:	2000      	movs	r0, #0
    3e6a:	4ba9      	ldr	r3, [pc, #676]	; (4110 <sb_event_handler+0x324>)
    3e6c:	4798      	blx	r3
    3e6e:	0003      	movs	r3, r0
    3e70:	001d      	movs	r5, r3
    3e72:	2300      	movs	r3, #0
    3e74:	001e      	movs	r6, r3
    3e76:	4ca7      	ldr	r4, [pc, #668]	; (4114 <sb_event_handler+0x328>)
    3e78:	22fa      	movs	r2, #250	; 0xfa
    3e7a:	0052      	lsls	r2, r2, #1
    3e7c:	2300      	movs	r3, #0
    3e7e:	0028      	movs	r0, r5
    3e80:	0031      	movs	r1, r6
    3e82:	47a0      	blx	r4
    3e84:	0003      	movs	r3, r0
    3e86:	000c      	movs	r4, r1
    3e88:	0019      	movs	r1, r3
    3e8a:	0022      	movs	r2, r4
    3e8c:	4ba2      	ldr	r3, [pc, #648]	; (4118 <sb_event_handler+0x32c>)
    3e8e:	2400      	movs	r4, #0
    3e90:	18c9      	adds	r1, r1, r3
    3e92:	4162      	adcs	r2, r4
    3e94:	0008      	movs	r0, r1
    3e96:	0011      	movs	r1, r2
    3e98:	4ca0      	ldr	r4, [pc, #640]	; (411c <sb_event_handler+0x330>)
    3e9a:	4aa1      	ldr	r2, [pc, #644]	; (4120 <sb_event_handler+0x334>)
    3e9c:	2300      	movs	r3, #0
    3e9e:	47a0      	blx	r4
    3ea0:	0003      	movs	r3, r0
    3ea2:	000c      	movs	r4, r1
    3ea4:	0018      	movs	r0, r3
    3ea6:	4b9f      	ldr	r3, [pc, #636]	; (4124 <sb_event_handler+0x338>)
    3ea8:	4798      	blx	r3
		sb_uart_write("L\n");
    3eaa:	4b9f      	ldr	r3, [pc, #636]	; (4128 <sb_event_handler+0x33c>)
    3eac:	0018      	movs	r0, r3
    3eae:	4b9f      	ldr	r3, [pc, #636]	; (412c <sb_event_handler+0x340>)
    3eb0:	4798      	blx	r3
		//Adafruit Soundboard started.
	}
	if (strstr(buffer,"NoFile") != NULL)
    3eb2:	4a9f      	ldr	r2, [pc, #636]	; (4130 <sb_event_handler+0x344>)
    3eb4:	687b      	ldr	r3, [r7, #4]
    3eb6:	0011      	movs	r1, r2
    3eb8:	0018      	movs	r0, r3
    3eba:	4b8c      	ldr	r3, [pc, #560]	; (40ec <sb_event_handler+0x300>)
    3ebc:	4798      	blx	r3
    3ebe:	1e03      	subs	r3, r0, #0
    3ec0:	d002      	beq.n	3ec8 <sb_event_handler+0xdc>
	{
		line_count = 0;
    3ec2:	4b8b      	ldr	r3, [pc, #556]	; (40f0 <sb_event_handler+0x304>)
    3ec4:	2200      	movs	r2, #0
    3ec6:	601a      	str	r2, [r3, #0]
		//The file wasn't found.
	}
	if (strstr(buffer,"done") != NULL)
    3ec8:	4a9a      	ldr	r2, [pc, #616]	; (4134 <sb_event_handler+0x348>)
    3eca:	687b      	ldr	r3, [r7, #4]
    3ecc:	0011      	movs	r1, r2
    3ece:	0018      	movs	r0, r3
    3ed0:	4b86      	ldr	r3, [pc, #536]	; (40ec <sb_event_handler+0x300>)
    3ed2:	4798      	blx	r3
    3ed4:	1e03      	subs	r3, r0, #0
    3ed6:	d012      	beq.n	3efe <sb_event_handler+0x112>
	{
		line_count = 0;
    3ed8:	4b85      	ldr	r3, [pc, #532]	; (40f0 <sb_event_handler+0x304>)
    3eda:	2200      	movs	r2, #0
    3edc:	601a      	str	r2, [r3, #0]
		soundboard_instance.is_playing = false;
    3ede:	4b88      	ldr	r3, [pc, #544]	; (4100 <sb_event_handler+0x314>)
    3ee0:	2200      	movs	r2, #0
    3ee2:	705a      	strb	r2, [r3, #1]
		soundboard_instance.tracks[soundboard_instance.currently_playing].is_playing = false;
    3ee4:	4b86      	ldr	r3, [pc, #536]	; (4100 <sb_event_handler+0x314>)
    3ee6:	68da      	ldr	r2, [r3, #12]
    3ee8:	4985      	ldr	r1, [pc, #532]	; (4100 <sb_event_handler+0x314>)
    3eea:	0013      	movs	r3, r2
    3eec:	009b      	lsls	r3, r3, #2
    3eee:	189b      	adds	r3, r3, r2
    3ef0:	009b      	lsls	r3, r3, #2
    3ef2:	18cb      	adds	r3, r1, r3
    3ef4:	3310      	adds	r3, #16
    3ef6:	2200      	movs	r2, #0
    3ef8:	701a      	strb	r2, [r3, #0]
		sb_reset_buffers();
    3efa:	4b84      	ldr	r3, [pc, #528]	; (410c <sb_event_handler+0x320>)
    3efc:	4798      	blx	r3
	}
	if(strstr(buffer,"play") != NULL && (strstr(buffer,"WAV") != NULL || strstr(buffer,"OGG") != NULL))
    3efe:	4a8e      	ldr	r2, [pc, #568]	; (4138 <sb_event_handler+0x34c>)
    3f00:	687b      	ldr	r3, [r7, #4]
    3f02:	0011      	movs	r1, r2
    3f04:	0018      	movs	r0, r3
    3f06:	4b79      	ldr	r3, [pc, #484]	; (40ec <sb_event_handler+0x300>)
    3f08:	4798      	blx	r3
    3f0a:	1e03      	subs	r3, r0, #0
    3f0c:	d03c      	beq.n	3f88 <sb_event_handler+0x19c>
    3f0e:	4a8b      	ldr	r2, [pc, #556]	; (413c <sb_event_handler+0x350>)
    3f10:	687b      	ldr	r3, [r7, #4]
    3f12:	0011      	movs	r1, r2
    3f14:	0018      	movs	r0, r3
    3f16:	4b75      	ldr	r3, [pc, #468]	; (40ec <sb_event_handler+0x300>)
    3f18:	4798      	blx	r3
    3f1a:	1e03      	subs	r3, r0, #0
    3f1c:	d107      	bne.n	3f2e <sb_event_handler+0x142>
    3f1e:	4a88      	ldr	r2, [pc, #544]	; (4140 <sb_event_handler+0x354>)
    3f20:	687b      	ldr	r3, [r7, #4]
    3f22:	0011      	movs	r1, r2
    3f24:	0018      	movs	r0, r3
    3f26:	4b71      	ldr	r3, [pc, #452]	; (40ec <sb_event_handler+0x300>)
    3f28:	4798      	blx	r3
    3f2a:	1e03      	subs	r3, r0, #0
    3f2c:	d02c      	beq.n	3f88 <sb_event_handler+0x19c>
	{
		line_count = 0;
    3f2e:	4b70      	ldr	r3, [pc, #448]	; (40f0 <sb_event_handler+0x304>)
    3f30:	2200      	movs	r2, #0
    3f32:	601a      	str	r2, [r3, #0]
		int track;
		int no;
		char filetype[3];
		char filename[8];
		sscanf(buffer,"\r\n\rplay\t%d\tT%d     %3[^\n]",&track,&no,filetype);
    3f34:	232c      	movs	r3, #44	; 0x2c
    3f36:	18fc      	adds	r4, r7, r3
    3f38:	2330      	movs	r3, #48	; 0x30
    3f3a:	18fa      	adds	r2, r7, r3
    3f3c:	4981      	ldr	r1, [pc, #516]	; (4144 <sb_event_handler+0x358>)
    3f3e:	6878      	ldr	r0, [r7, #4]
    3f40:	2328      	movs	r3, #40	; 0x28
    3f42:	18fb      	adds	r3, r7, r3
    3f44:	9300      	str	r3, [sp, #0]
    3f46:	0023      	movs	r3, r4
    3f48:	4c6c      	ldr	r4, [pc, #432]	; (40fc <sb_event_handler+0x310>)
    3f4a:	47a0      	blx	r4
		sscanf(buffer,"\r\n\rplay\t%d\t%s     %3[^\n]",&track,filename,filetype);
    3f4c:	2320      	movs	r3, #32
    3f4e:	18fc      	adds	r4, r7, r3
    3f50:	2330      	movs	r3, #48	; 0x30
    3f52:	18fa      	adds	r2, r7, r3
    3f54:	497c      	ldr	r1, [pc, #496]	; (4148 <sb_event_handler+0x35c>)
    3f56:	6878      	ldr	r0, [r7, #4]
    3f58:	2328      	movs	r3, #40	; 0x28
    3f5a:	18fb      	adds	r3, r7, r3
    3f5c:	9300      	str	r3, [sp, #0]
    3f5e:	0023      	movs	r3, r4
    3f60:	4c66      	ldr	r4, [pc, #408]	; (40fc <sb_event_handler+0x310>)
    3f62:	47a0      	blx	r4
		soundboard_instance.is_playing = true;
    3f64:	4b66      	ldr	r3, [pc, #408]	; (4100 <sb_event_handler+0x314>)
    3f66:	2201      	movs	r2, #1
    3f68:	705a      	strb	r2, [r3, #1]
		soundboard_instance.tracks[no].is_playing = true;
    3f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3f6c:	4964      	ldr	r1, [pc, #400]	; (4100 <sb_event_handler+0x314>)
    3f6e:	0013      	movs	r3, r2
    3f70:	009b      	lsls	r3, r3, #2
    3f72:	189b      	adds	r3, r3, r2
    3f74:	009b      	lsls	r3, r3, #2
    3f76:	18cb      	adds	r3, r1, r3
    3f78:	3310      	adds	r3, #16
    3f7a:	2201      	movs	r2, #1
    3f7c:	701a      	strb	r2, [r3, #0]
		soundboard_instance.currently_playing = no;
    3f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3f80:	4b5f      	ldr	r3, [pc, #380]	; (4100 <sb_event_handler+0x314>)
    3f82:	60da      	str	r2, [r3, #12]
		sb_reset_buffers();
    3f84:	4b61      	ldr	r3, [pc, #388]	; (410c <sb_event_handler+0x320>)
    3f86:	4798      	blx	r3
	}
	if(strstr(buffer,"play") == NULL && (strstr(buffer,"WAV") != NULL || strstr(buffer,"OGG") != NULL) && (strstr(buffer,"\t\r\n") != NULL))
    3f88:	4a6b      	ldr	r2, [pc, #428]	; (4138 <sb_event_handler+0x34c>)
    3f8a:	687b      	ldr	r3, [r7, #4]
    3f8c:	0011      	movs	r1, r2
    3f8e:	0018      	movs	r0, r3
    3f90:	4b56      	ldr	r3, [pc, #344]	; (40ec <sb_event_handler+0x300>)
    3f92:	4798      	blx	r3
    3f94:	1e03      	subs	r3, r0, #0
    3f96:	d000      	beq.n	3f9a <sb_event_handler+0x1ae>
    3f98:	e0a1      	b.n	40de <sb_event_handler+0x2f2>
    3f9a:	4a68      	ldr	r2, [pc, #416]	; (413c <sb_event_handler+0x350>)
    3f9c:	687b      	ldr	r3, [r7, #4]
    3f9e:	0011      	movs	r1, r2
    3fa0:	0018      	movs	r0, r3
    3fa2:	4b52      	ldr	r3, [pc, #328]	; (40ec <sb_event_handler+0x300>)
    3fa4:	4798      	blx	r3
    3fa6:	1e03      	subs	r3, r0, #0
    3fa8:	d108      	bne.n	3fbc <sb_event_handler+0x1d0>
    3faa:	4a65      	ldr	r2, [pc, #404]	; (4140 <sb_event_handler+0x354>)
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	0011      	movs	r1, r2
    3fb0:	0018      	movs	r0, r3
    3fb2:	4b4e      	ldr	r3, [pc, #312]	; (40ec <sb_event_handler+0x300>)
    3fb4:	4798      	blx	r3
    3fb6:	1e03      	subs	r3, r0, #0
    3fb8:	d100      	bne.n	3fbc <sb_event_handler+0x1d0>
    3fba:	e090      	b.n	40de <sb_event_handler+0x2f2>
    3fbc:	4a63      	ldr	r2, [pc, #396]	; (414c <sb_event_handler+0x360>)
    3fbe:	687b      	ldr	r3, [r7, #4]
    3fc0:	0011      	movs	r1, r2
    3fc2:	0018      	movs	r0, r3
    3fc4:	4b49      	ldr	r3, [pc, #292]	; (40ec <sb_event_handler+0x300>)
    3fc6:	4798      	blx	r3
    3fc8:	1e03      	subs	r3, r0, #0
    3fca:	d100      	bne.n	3fce <sb_event_handler+0x1e2>
    3fcc:	e087      	b.n	40de <sb_event_handler+0x2f2>
	{
		if (line_count==soundboard_instance.number_of_tracks+2 && line_count > 0 && soundboard_instance.number_of_tracks > 0)
    3fce:	4b4c      	ldr	r3, [pc, #304]	; (4100 <sb_event_handler+0x314>)
    3fd0:	685b      	ldr	r3, [r3, #4]
    3fd2:	1c9a      	adds	r2, r3, #2
    3fd4:	4b46      	ldr	r3, [pc, #280]	; (40f0 <sb_event_handler+0x304>)
    3fd6:	681b      	ldr	r3, [r3, #0]
    3fd8:	429a      	cmp	r2, r3
    3fda:	d000      	beq.n	3fde <sb_event_handler+0x1f2>
    3fdc:	e07f      	b.n	40de <sb_event_handler+0x2f2>
    3fde:	4b44      	ldr	r3, [pc, #272]	; (40f0 <sb_event_handler+0x304>)
    3fe0:	681b      	ldr	r3, [r3, #0]
    3fe2:	2b00      	cmp	r3, #0
    3fe4:	dc00      	bgt.n	3fe8 <sb_event_handler+0x1fc>
    3fe6:	e07a      	b.n	40de <sb_event_handler+0x2f2>
    3fe8:	4b45      	ldr	r3, [pc, #276]	; (4100 <sb_event_handler+0x314>)
    3fea:	685b      	ldr	r3, [r3, #4]
    3fec:	2b00      	cmp	r3, #0
    3fee:	dd76      	ble.n	40de <sb_event_handler+0x2f2>
		{
			line_count = 0;
    3ff0:	4b3f      	ldr	r3, [pc, #252]	; (40f0 <sb_event_handler+0x304>)
    3ff2:	2200      	movs	r2, #0
    3ff4:	601a      	str	r2, [r3, #0]
			char *pointy;
			char tempName[9];
			char tempType[4];
			int tempSize;
			for (int k=0;k<soundboard_instance.number_of_tracks;k++)
    3ff6:	2300      	movs	r3, #0
    3ff8:	647b      	str	r3, [r7, #68]	; 0x44
    3ffa:	e066      	b.n	40ca <sb_event_handler+0x2de>
			{
				
				pointy = strstr(buffer,"\n");
    3ffc:	687b      	ldr	r3, [r7, #4]
    3ffe:	210a      	movs	r1, #10
    4000:	0018      	movs	r0, r3
    4002:	4b53      	ldr	r3, [pc, #332]	; (4150 <sb_event_handler+0x364>)
    4004:	4798      	blx	r3
    4006:	0003      	movs	r3, r0
    4008:	63fb      	str	r3, [r7, #60]	; 0x3c
				pointy += k*25;
    400a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    400c:	0013      	movs	r3, r2
    400e:	009b      	lsls	r3, r3, #2
    4010:	189b      	adds	r3, r3, r2
    4012:	009a      	lsls	r2, r3, #2
    4014:	189b      	adds	r3, r3, r2
    4016:	001a      	movs	r2, r3
    4018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    401a:	189b      	adds	r3, r3, r2
    401c:	63fb      	str	r3, [r7, #60]	; 0x3c
				if (pointy != NULL)
    401e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4020:	2b00      	cmp	r3, #0
    4022:	d04f      	beq.n	40c4 <sb_event_handler+0x2d8>
				{
					sscanf(pointy,"%8s%3s%d\t",tempName,tempType,&tempSize);
    4024:	2310      	movs	r3, #16
    4026:	18fc      	adds	r4, r7, r3
    4028:	2314      	movs	r3, #20
    402a:	18fa      	adds	r2, r7, r3
    402c:	4949      	ldr	r1, [pc, #292]	; (4154 <sb_event_handler+0x368>)
    402e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    4030:	230c      	movs	r3, #12
    4032:	18fb      	adds	r3, r7, r3
    4034:	9300      	str	r3, [sp, #0]
    4036:	0023      	movs	r3, r4
    4038:	4c30      	ldr	r4, [pc, #192]	; (40fc <sb_event_handler+0x310>)
    403a:	47a0      	blx	r4
					soundboard_instance.tracks[k].filetype = malloc(4);
    403c:	2004      	movs	r0, #4
    403e:	4b46      	ldr	r3, [pc, #280]	; (4158 <sb_event_handler+0x36c>)
    4040:	4798      	blx	r3
    4042:	0003      	movs	r3, r0
    4044:	0018      	movs	r0, r3
    4046:	492e      	ldr	r1, [pc, #184]	; (4100 <sb_event_handler+0x314>)
    4048:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    404a:	0013      	movs	r3, r2
    404c:	009b      	lsls	r3, r3, #2
    404e:	189b      	adds	r3, r3, r2
    4050:	009b      	lsls	r3, r3, #2
    4052:	18cb      	adds	r3, r1, r3
    4054:	331c      	adds	r3, #28
    4056:	6018      	str	r0, [r3, #0]
					strcpy(soundboard_instance.tracks[k].filetype,tempType);
    4058:	4929      	ldr	r1, [pc, #164]	; (4100 <sb_event_handler+0x314>)
    405a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    405c:	0013      	movs	r3, r2
    405e:	009b      	lsls	r3, r3, #2
    4060:	189b      	adds	r3, r3, r2
    4062:	009b      	lsls	r3, r3, #2
    4064:	18cb      	adds	r3, r1, r3
    4066:	331c      	adds	r3, #28
    4068:	681b      	ldr	r3, [r3, #0]
    406a:	2210      	movs	r2, #16
    406c:	18ba      	adds	r2, r7, r2
    406e:	0011      	movs	r1, r2
    4070:	0018      	movs	r0, r3
    4072:	4b3a      	ldr	r3, [pc, #232]	; (415c <sb_event_handler+0x370>)
    4074:	4798      	blx	r3
					soundboard_instance.tracks[k].filename = malloc(9);
    4076:	2009      	movs	r0, #9
    4078:	4b37      	ldr	r3, [pc, #220]	; (4158 <sb_event_handler+0x36c>)
    407a:	4798      	blx	r3
    407c:	0003      	movs	r3, r0
    407e:	0018      	movs	r0, r3
    4080:	491f      	ldr	r1, [pc, #124]	; (4100 <sb_event_handler+0x314>)
    4082:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4084:	0013      	movs	r3, r2
    4086:	009b      	lsls	r3, r3, #2
    4088:	189b      	adds	r3, r3, r2
    408a:	009b      	lsls	r3, r3, #2
    408c:	18cb      	adds	r3, r1, r3
    408e:	3318      	adds	r3, #24
    4090:	6018      	str	r0, [r3, #0]
					strcpy(soundboard_instance.tracks[k].filename,tempName);
    4092:	491b      	ldr	r1, [pc, #108]	; (4100 <sb_event_handler+0x314>)
    4094:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4096:	0013      	movs	r3, r2
    4098:	009b      	lsls	r3, r3, #2
    409a:	189b      	adds	r3, r3, r2
    409c:	009b      	lsls	r3, r3, #2
    409e:	18cb      	adds	r3, r1, r3
    40a0:	3318      	adds	r3, #24
    40a2:	681b      	ldr	r3, [r3, #0]
    40a4:	2214      	movs	r2, #20
    40a6:	18ba      	adds	r2, r7, r2
    40a8:	0011      	movs	r1, r2
    40aa:	0018      	movs	r0, r3
    40ac:	4b2b      	ldr	r3, [pc, #172]	; (415c <sb_event_handler+0x370>)
    40ae:	4798      	blx	r3
					soundboard_instance.tracks[k].filesize = tempSize;
    40b0:	68f9      	ldr	r1, [r7, #12]
    40b2:	4813      	ldr	r0, [pc, #76]	; (4100 <sb_event_handler+0x314>)
    40b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    40b6:	0013      	movs	r3, r2
    40b8:	009b      	lsls	r3, r3, #2
    40ba:	189b      	adds	r3, r3, r2
    40bc:	009b      	lsls	r3, r3, #2
    40be:	18c3      	adds	r3, r0, r3
    40c0:	3320      	adds	r3, #32
    40c2:	6019      	str	r1, [r3, #0]
			for (int k=0;k<soundboard_instance.number_of_tracks;k++)
    40c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    40c6:	3301      	adds	r3, #1
    40c8:	647b      	str	r3, [r7, #68]	; 0x44
    40ca:	4b0d      	ldr	r3, [pc, #52]	; (4100 <sb_event_handler+0x314>)
    40cc:	685a      	ldr	r2, [r3, #4]
    40ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    40d0:	429a      	cmp	r2, r3
    40d2:	dc93      	bgt.n	3ffc <sb_event_handler+0x210>
				}
			}
			soundboard_instance.started = true;
    40d4:	4b0a      	ldr	r3, [pc, #40]	; (4100 <sb_event_handler+0x314>)
    40d6:	2201      	movs	r2, #1
    40d8:	701a      	strb	r2, [r3, #0]
			sb_reset_buffers();
    40da:	4b0c      	ldr	r3, [pc, #48]	; (410c <sb_event_handler+0x320>)
    40dc:	4798      	blx	r3
		}
	}
}
    40de:	46c0      	nop			; (mov r8, r8)
    40e0:	46bd      	mov	sp, r7
    40e2:	b013      	add	sp, #76	; 0x4c
    40e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40e6:	46c0      	nop			; (mov r8, r8)
    40e8:	000070f0 	.word	0x000070f0
    40ec:	00005c41 	.word	0x00005c41
    40f0:	20000998 	.word	0x20000998
    40f4:	00007108 	.word	0x00007108
    40f8:	00007110 	.word	0x00007110
    40fc:	00005b91 	.word	0x00005b91
    4100:	20000164 	.word	0x20000164
    4104:	0000711c 	.word	0x0000711c
    4108:	00007124 	.word	0x00007124
    410c:	000042a5 	.word	0x000042a5
    4110:	00004b0d 	.word	0x00004b0d
    4114:	000056f1 	.word	0x000056f1
    4118:	00001b57 	.word	0x00001b57
    411c:	000056b1 	.word	0x000056b1
    4120:	00001b58 	.word	0x00001b58
    4124:	20000001 	.word	0x20000001
    4128:	00007130 	.word	0x00007130
    412c:	0000425d 	.word	0x0000425d
    4130:	00007134 	.word	0x00007134
    4134:	0000713c 	.word	0x0000713c
    4138:	00007144 	.word	0x00007144
    413c:	0000714c 	.word	0x0000714c
    4140:	00007150 	.word	0x00007150
    4144:	00007154 	.word	0x00007154
    4148:	00007170 	.word	0x00007170
    414c:	0000718c 	.word	0x0000718c
    4150:	00005be5 	.word	0x00005be5
    4154:	00007190 	.word	0x00007190
    4158:	000059a1 	.word	0x000059a1
    415c:	00005c01 	.word	0x00005c01

00004160 <sb_play_track_by_number>:

void sb_play_track_by_number(int number)
{
    4160:	b580      	push	{r7, lr}
    4162:	b084      	sub	sp, #16
    4164:	af00      	add	r7, sp, #0
    4166:	6078      	str	r0, [r7, #4]
	char buffer[8];
	sprintf(buffer,"#%d\n",number);
    4168:	687a      	ldr	r2, [r7, #4]
    416a:	4907      	ldr	r1, [pc, #28]	; (4188 <sb_play_track_by_number+0x28>)
    416c:	2308      	movs	r3, #8
    416e:	18fb      	adds	r3, r7, r3
    4170:	0018      	movs	r0, r3
    4172:	4b06      	ldr	r3, [pc, #24]	; (418c <sb_play_track_by_number+0x2c>)
    4174:	4798      	blx	r3
	sb_uart_write(buffer);
    4176:	2308      	movs	r3, #8
    4178:	18fb      	adds	r3, r7, r3
    417a:	0018      	movs	r0, r3
    417c:	4b04      	ldr	r3, [pc, #16]	; (4190 <sb_play_track_by_number+0x30>)
    417e:	4798      	blx	r3
}
    4180:	46c0      	nop			; (mov r8, r8)
    4182:	46bd      	mov	sp, r7
    4184:	b004      	add	sp, #16
    4186:	bd80      	pop	{r7, pc}
    4188:	0000719c 	.word	0x0000719c
    418c:	00005b4d 	.word	0x00005b4d
    4190:	0000425d 	.word	0x0000425d

00004194 <sb_quit>:

void sb_quit(void)
{
    4194:	b580      	push	{r7, lr}
    4196:	af00      	add	r7, sp, #0
	sb_uart_write("q\n");
    4198:	4b03      	ldr	r3, [pc, #12]	; (41a8 <sb_quit+0x14>)
    419a:	0018      	movs	r0, r3
    419c:	4b03      	ldr	r3, [pc, #12]	; (41ac <sb_quit+0x18>)
    419e:	4798      	blx	r3
}
    41a0:	46c0      	nop			; (mov r8, r8)
    41a2:	46bd      	mov	sp, r7
    41a4:	bd80      	pop	{r7, pc}
    41a6:	46c0      	nop			; (mov r8, r8)
    41a8:	000071a4 	.word	0x000071a4
    41ac:	0000425d 	.word	0x0000425d

000041b0 <is_started>:

bool is_started(void)
{
    41b0:	b580      	push	{r7, lr}
    41b2:	af00      	add	r7, sp, #0
	return soundboard_instance.started;
    41b4:	4b02      	ldr	r3, [pc, #8]	; (41c0 <is_started+0x10>)
    41b6:	781b      	ldrb	r3, [r3, #0]
}
    41b8:	0018      	movs	r0, r3
    41ba:	46bd      	mov	sp, r7
    41bc:	bd80      	pop	{r7, pc}
    41be:	46c0      	nop			; (mov r8, r8)
    41c0:	20000164 	.word	0x20000164

000041c4 <SERCOM1_Handler>:
	while(CONF_STDIO_USART_MODULE->USART.SYNCBUSY.bit.ENABLE);
}


void SERCOM1_Handler()
{
    41c4:	b580      	push	{r7, lr}
    41c6:	af00      	add	r7, sp, #0
	if (CONF_STDIO_USART_MODULE->USART.INTFLAG.bit.RXC)
    41c8:	4b1f      	ldr	r3, [pc, #124]	; (4248 <SERCOM1_Handler+0x84>)
    41ca:	7e1b      	ldrb	r3, [r3, #24]
    41cc:	075b      	lsls	r3, r3, #29
    41ce:	0fdb      	lsrs	r3, r3, #31
    41d0:	b2db      	uxtb	r3, r3
    41d2:	2b00      	cmp	r3, #0
    41d4:	d035      	beq.n	4242 <SERCOM1_Handler+0x7e>
	{
		// Got a character
		if (sb_buff_count > sizeof(sb_rx_buffer_array)-1)
    41d6:	4b1d      	ldr	r3, [pc, #116]	; (424c <SERCOM1_Handler+0x88>)
    41d8:	681b      	ldr	r3, [r3, #0]
    41da:	001a      	movs	r2, r3
    41dc:	4b1c      	ldr	r3, [pc, #112]	; (4250 <SERCOM1_Handler+0x8c>)
    41de:	429a      	cmp	r2, r3
    41e0:	d917      	bls.n	4212 <SERCOM1_Handler+0x4e>
		{
			sb_buff_count = 0;
    41e2:	4b1a      	ldr	r3, [pc, #104]	; (424c <SERCOM1_Handler+0x88>)
    41e4:	2200      	movs	r2, #0
    41e6:	601a      	str	r2, [r3, #0]
			sb_rx_buffer_array[sb_buff_count] = (uint8_t) CONF_STDIO_USART_MODULE->USART.DATA.reg;
    41e8:	4b18      	ldr	r3, [pc, #96]	; (424c <SERCOM1_Handler+0x88>)
    41ea:	681b      	ldr	r3, [r3, #0]
    41ec:	4a16      	ldr	r2, [pc, #88]	; (4248 <SERCOM1_Handler+0x84>)
    41ee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    41f0:	b292      	uxth	r2, r2
    41f2:	b2d1      	uxtb	r1, r2
    41f4:	4a17      	ldr	r2, [pc, #92]	; (4254 <SERCOM1_Handler+0x90>)
    41f6:	54d1      	strb	r1, [r2, r3]
			if (sb_rx_buffer_array[sb_buff_count] == 13)
    41f8:	4b14      	ldr	r3, [pc, #80]	; (424c <SERCOM1_Handler+0x88>)
    41fa:	681b      	ldr	r3, [r3, #0]
    41fc:	4a15      	ldr	r2, [pc, #84]	; (4254 <SERCOM1_Handler+0x90>)
    41fe:	5cd3      	ldrb	r3, [r2, r3]
    4200:	b2db      	uxtb	r3, r3
    4202:	2b0d      	cmp	r3, #13
    4204:	d11d      	bne.n	4242 <SERCOM1_Handler+0x7e>
			{
				line_count++;
    4206:	4b14      	ldr	r3, [pc, #80]	; (4258 <SERCOM1_Handler+0x94>)
    4208:	681b      	ldr	r3, [r3, #0]
    420a:	1c5a      	adds	r2, r3, #1
    420c:	4b12      	ldr	r3, [pc, #72]	; (4258 <SERCOM1_Handler+0x94>)
    420e:	601a      	str	r2, [r3, #0]
			{
				line_count++;
			}
		}
	}
}
    4210:	e017      	b.n	4242 <SERCOM1_Handler+0x7e>
			sb_rx_buffer_array[sb_buff_count++] = (uint8_t)CONF_STDIO_USART_MODULE->USART.DATA.reg;
    4212:	4b0e      	ldr	r3, [pc, #56]	; (424c <SERCOM1_Handler+0x88>)
    4214:	681b      	ldr	r3, [r3, #0]
    4216:	1c59      	adds	r1, r3, #1
    4218:	4a0c      	ldr	r2, [pc, #48]	; (424c <SERCOM1_Handler+0x88>)
    421a:	6011      	str	r1, [r2, #0]
    421c:	4a0a      	ldr	r2, [pc, #40]	; (4248 <SERCOM1_Handler+0x84>)
    421e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    4220:	b292      	uxth	r2, r2
    4222:	b2d1      	uxtb	r1, r2
    4224:	4a0b      	ldr	r2, [pc, #44]	; (4254 <SERCOM1_Handler+0x90>)
    4226:	54d1      	strb	r1, [r2, r3]
			if (sb_rx_buffer_array[sb_buff_count-1] == 13)
    4228:	4b08      	ldr	r3, [pc, #32]	; (424c <SERCOM1_Handler+0x88>)
    422a:	681b      	ldr	r3, [r3, #0]
    422c:	3b01      	subs	r3, #1
    422e:	4a09      	ldr	r2, [pc, #36]	; (4254 <SERCOM1_Handler+0x90>)
    4230:	5cd3      	ldrb	r3, [r2, r3]
    4232:	b2db      	uxtb	r3, r3
    4234:	2b0d      	cmp	r3, #13
    4236:	d104      	bne.n	4242 <SERCOM1_Handler+0x7e>
				line_count++;
    4238:	4b07      	ldr	r3, [pc, #28]	; (4258 <SERCOM1_Handler+0x94>)
    423a:	681b      	ldr	r3, [r3, #0]
    423c:	1c5a      	adds	r2, r3, #1
    423e:	4b06      	ldr	r3, [pc, #24]	; (4258 <SERCOM1_Handler+0x94>)
    4240:	601a      	str	r2, [r3, #0]
}
    4242:	46c0      	nop			; (mov r8, r8)
    4244:	46bd      	mov	sp, r7
    4246:	bd80      	pop	{r7, pc}
    4248:	42000c00 	.word	0x42000c00
    424c:	20000564 	.word	0x20000564
    4250:	000003ff 	.word	0x000003ff
    4254:	20000ed0 	.word	0x20000ed0
    4258:	20000998 	.word	0x20000998

0000425c <sb_uart_write>:

void sb_uart_write(char buffer[])
{
    425c:	b580      	push	{r7, lr}
    425e:	b084      	sub	sp, #16
    4260:	af00      	add	r7, sp, #0
    4262:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
    4264:	2300      	movs	r3, #0
    4266:	60fb      	str	r3, [r7, #12]
	while(buffer[i] != '\0')
    4268:	e00f      	b.n	428a <sb_uart_write+0x2e>
	{
		if(CONF_STDIO_USART_MODULE->USART.INTFLAG.bit.DRE == 1)
    426a:	4b0d      	ldr	r3, [pc, #52]	; (42a0 <sb_uart_write+0x44>)
    426c:	7e1b      	ldrb	r3, [r3, #24]
    426e:	07db      	lsls	r3, r3, #31
    4270:	0fdb      	lsrs	r3, r3, #31
    4272:	b2db      	uxtb	r3, r3
    4274:	2b01      	cmp	r3, #1
    4276:	d108      	bne.n	428a <sb_uart_write+0x2e>
		{
			CONF_STDIO_USART_MODULE->USART.DATA.reg = (uint16_t)buffer[i++];
    4278:	4909      	ldr	r1, [pc, #36]	; (42a0 <sb_uart_write+0x44>)
    427a:	68fb      	ldr	r3, [r7, #12]
    427c:	1c5a      	adds	r2, r3, #1
    427e:	60fa      	str	r2, [r7, #12]
    4280:	687a      	ldr	r2, [r7, #4]
    4282:	18d3      	adds	r3, r2, r3
    4284:	781b      	ldrb	r3, [r3, #0]
    4286:	b29b      	uxth	r3, r3
    4288:	850b      	strh	r3, [r1, #40]	; 0x28
	while(buffer[i] != '\0')
    428a:	687a      	ldr	r2, [r7, #4]
    428c:	68fb      	ldr	r3, [r7, #12]
    428e:	18d3      	adds	r3, r2, r3
    4290:	781b      	ldrb	r3, [r3, #0]
    4292:	2b00      	cmp	r3, #0
    4294:	d1e9      	bne.n	426a <sb_uart_write+0xe>
		}
	}
}
    4296:	46c0      	nop			; (mov r8, r8)
    4298:	46bd      	mov	sp, r7
    429a:	b004      	add	sp, #16
    429c:	bd80      	pop	{r7, pc}
    429e:	46c0      	nop			; (mov r8, r8)
    42a0:	42000c00 	.word	0x42000c00

000042a4 <sb_reset_buffers>:

void sb_reset_buffers(void)
{
    42a4:	b580      	push	{r7, lr}
    42a6:	b082      	sub	sp, #8
    42a8:	af00      	add	r7, sp, #0
	for (uint32_t k=0;k<sizeof(sb_rx_buffer_array);k++)
    42aa:	2300      	movs	r3, #0
    42ac:	607b      	str	r3, [r7, #4]
    42ae:	e007      	b.n	42c0 <sb_reset_buffers+0x1c>
	{
		sb_rx_buffer_array[k] = 0;
    42b0:	4a09      	ldr	r2, [pc, #36]	; (42d8 <sb_reset_buffers+0x34>)
    42b2:	687b      	ldr	r3, [r7, #4]
    42b4:	18d3      	adds	r3, r2, r3
    42b6:	2200      	movs	r2, #0
    42b8:	701a      	strb	r2, [r3, #0]
	for (uint32_t k=0;k<sizeof(sb_rx_buffer_array);k++)
    42ba:	687b      	ldr	r3, [r7, #4]
    42bc:	3301      	adds	r3, #1
    42be:	607b      	str	r3, [r7, #4]
    42c0:	687b      	ldr	r3, [r7, #4]
    42c2:	4a06      	ldr	r2, [pc, #24]	; (42dc <sb_reset_buffers+0x38>)
    42c4:	4293      	cmp	r3, r2
    42c6:	d9f3      	bls.n	42b0 <sb_reset_buffers+0xc>
	}
	sb_buff_count = 0;
    42c8:	4b05      	ldr	r3, [pc, #20]	; (42e0 <sb_reset_buffers+0x3c>)
    42ca:	2200      	movs	r2, #0
    42cc:	601a      	str	r2, [r3, #0]
}
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	46bd      	mov	sp, r7
    42d2:	b002      	add	sp, #8
    42d4:	bd80      	pop	{r7, pc}
    42d6:	46c0      	nop			; (mov r8, r8)
    42d8:	20000ed0 	.word	0x20000ed0
    42dc:	000003ff 	.word	0x000003ff
    42e0:	20000564 	.word	0x20000564

000042e4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    42e4:	b580      	push	{r7, lr}
    42e6:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    42e8:	46c0      	nop			; (mov r8, r8)
    42ea:	46bd      	mov	sp, r7
    42ec:	bd80      	pop	{r7, pc}
	...

000042f0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    42f0:	b580      	push	{r7, lr}
    42f2:	b082      	sub	sp, #8
    42f4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    42f6:	4b10      	ldr	r3, [pc, #64]	; (4338 <cpu_irq_enter_critical+0x48>)
    42f8:	681b      	ldr	r3, [r3, #0]
    42fa:	2b00      	cmp	r3, #0
    42fc:	d112      	bne.n	4324 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    42fe:	f3ef 8310 	mrs	r3, PRIMASK
    4302:	607b      	str	r3, [r7, #4]
  return(result);
    4304:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    4306:	2b00      	cmp	r3, #0
    4308:	d109      	bne.n	431e <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    430a:	b672      	cpsid	i
    430c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4310:	4b0a      	ldr	r3, [pc, #40]	; (433c <cpu_irq_enter_critical+0x4c>)
    4312:	2200      	movs	r2, #0
    4314:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4316:	4b0a      	ldr	r3, [pc, #40]	; (4340 <cpu_irq_enter_critical+0x50>)
    4318:	2201      	movs	r2, #1
    431a:	701a      	strb	r2, [r3, #0]
    431c:	e002      	b.n	4324 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    431e:	4b08      	ldr	r3, [pc, #32]	; (4340 <cpu_irq_enter_critical+0x50>)
    4320:	2200      	movs	r2, #0
    4322:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4324:	4b04      	ldr	r3, [pc, #16]	; (4338 <cpu_irq_enter_critical+0x48>)
    4326:	681b      	ldr	r3, [r3, #0]
    4328:	1c5a      	adds	r2, r3, #1
    432a:	4b03      	ldr	r3, [pc, #12]	; (4338 <cpu_irq_enter_critical+0x48>)
    432c:	601a      	str	r2, [r3, #0]
}
    432e:	46c0      	nop			; (mov r8, r8)
    4330:	46bd      	mov	sp, r7
    4332:	b002      	add	sp, #8
    4334:	bd80      	pop	{r7, pc}
    4336:	46c0      	nop			; (mov r8, r8)
    4338:	20000568 	.word	0x20000568
    433c:	20000368 	.word	0x20000368
    4340:	2000056c 	.word	0x2000056c

00004344 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    4344:	b580      	push	{r7, lr}
    4346:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4348:	4b0b      	ldr	r3, [pc, #44]	; (4378 <cpu_irq_leave_critical+0x34>)
    434a:	681b      	ldr	r3, [r3, #0]
    434c:	1e5a      	subs	r2, r3, #1
    434e:	4b0a      	ldr	r3, [pc, #40]	; (4378 <cpu_irq_leave_critical+0x34>)
    4350:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4352:	4b09      	ldr	r3, [pc, #36]	; (4378 <cpu_irq_leave_critical+0x34>)
    4354:	681b      	ldr	r3, [r3, #0]
    4356:	2b00      	cmp	r3, #0
    4358:	d10a      	bne.n	4370 <cpu_irq_leave_critical+0x2c>
    435a:	4b08      	ldr	r3, [pc, #32]	; (437c <cpu_irq_leave_critical+0x38>)
    435c:	781b      	ldrb	r3, [r3, #0]
    435e:	b2db      	uxtb	r3, r3
    4360:	2b00      	cmp	r3, #0
    4362:	d005      	beq.n	4370 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    4364:	4b06      	ldr	r3, [pc, #24]	; (4380 <cpu_irq_leave_critical+0x3c>)
    4366:	2201      	movs	r2, #1
    4368:	701a      	strb	r2, [r3, #0]
    436a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    436e:	b662      	cpsie	i
	}
}
    4370:	46c0      	nop			; (mov r8, r8)
    4372:	46bd      	mov	sp, r7
    4374:	bd80      	pop	{r7, pc}
    4376:	46c0      	nop			; (mov r8, r8)
    4378:	20000568 	.word	0x20000568
    437c:	2000056c 	.word	0x2000056c
    4380:	20000368 	.word	0x20000368

00004384 <system_gclk_gen_get_config_defaults>:
{
    4384:	b580      	push	{r7, lr}
    4386:	b082      	sub	sp, #8
    4388:	af00      	add	r7, sp, #0
    438a:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    438c:	687b      	ldr	r3, [r7, #4]
    438e:	2201      	movs	r2, #1
    4390:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    4392:	687b      	ldr	r3, [r7, #4]
    4394:	2200      	movs	r2, #0
    4396:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4398:	687b      	ldr	r3, [r7, #4]
    439a:	2206      	movs	r2, #6
    439c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    439e:	687b      	ldr	r3, [r7, #4]
    43a0:	2200      	movs	r2, #0
    43a2:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    43a4:	687b      	ldr	r3, [r7, #4]
    43a6:	2200      	movs	r2, #0
    43a8:	725a      	strb	r2, [r3, #9]
}
    43aa:	46c0      	nop			; (mov r8, r8)
    43ac:	46bd      	mov	sp, r7
    43ae:	b002      	add	sp, #8
    43b0:	bd80      	pop	{r7, pc}

000043b2 <system_clock_source_osc8m_get_config_defaults>:
{
    43b2:	b580      	push	{r7, lr}
    43b4:	b082      	sub	sp, #8
    43b6:	af00      	add	r7, sp, #0
    43b8:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    43ba:	687b      	ldr	r3, [r7, #4]
    43bc:	2203      	movs	r2, #3
    43be:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    43c0:	687b      	ldr	r3, [r7, #4]
    43c2:	2200      	movs	r2, #0
    43c4:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    43c6:	687b      	ldr	r3, [r7, #4]
    43c8:	2201      	movs	r2, #1
    43ca:	709a      	strb	r2, [r3, #2]
}
    43cc:	46c0      	nop			; (mov r8, r8)
    43ce:	46bd      	mov	sp, r7
    43d0:	b002      	add	sp, #8
    43d2:	bd80      	pop	{r7, pc}

000043d4 <system_cpu_clock_set_divider>:
{
    43d4:	b580      	push	{r7, lr}
    43d6:	b082      	sub	sp, #8
    43d8:	af00      	add	r7, sp, #0
    43da:	0002      	movs	r2, r0
    43dc:	1dfb      	adds	r3, r7, #7
    43de:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    43e0:	4a03      	ldr	r2, [pc, #12]	; (43f0 <system_cpu_clock_set_divider+0x1c>)
    43e2:	1dfb      	adds	r3, r7, #7
    43e4:	781b      	ldrb	r3, [r3, #0]
    43e6:	7213      	strb	r3, [r2, #8]
}
    43e8:	46c0      	nop			; (mov r8, r8)
    43ea:	46bd      	mov	sp, r7
    43ec:	b002      	add	sp, #8
    43ee:	bd80      	pop	{r7, pc}
    43f0:	40000400 	.word	0x40000400

000043f4 <system_apb_clock_set_divider>:
{
    43f4:	b580      	push	{r7, lr}
    43f6:	b082      	sub	sp, #8
    43f8:	af00      	add	r7, sp, #0
    43fa:	0002      	movs	r2, r0
    43fc:	1dfb      	adds	r3, r7, #7
    43fe:	701a      	strb	r2, [r3, #0]
    4400:	1dbb      	adds	r3, r7, #6
    4402:	1c0a      	adds	r2, r1, #0
    4404:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4406:	1dfb      	adds	r3, r7, #7
    4408:	781b      	ldrb	r3, [r3, #0]
    440a:	2b01      	cmp	r3, #1
    440c:	d008      	beq.n	4420 <system_apb_clock_set_divider+0x2c>
    440e:	2b02      	cmp	r3, #2
    4410:	d00b      	beq.n	442a <system_apb_clock_set_divider+0x36>
    4412:	2b00      	cmp	r3, #0
    4414:	d10e      	bne.n	4434 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    4416:	4a0b      	ldr	r2, [pc, #44]	; (4444 <system_apb_clock_set_divider+0x50>)
    4418:	1dbb      	adds	r3, r7, #6
    441a:	781b      	ldrb	r3, [r3, #0]
    441c:	7253      	strb	r3, [r2, #9]
			break;
    441e:	e00b      	b.n	4438 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    4420:	4a08      	ldr	r2, [pc, #32]	; (4444 <system_apb_clock_set_divider+0x50>)
    4422:	1dbb      	adds	r3, r7, #6
    4424:	781b      	ldrb	r3, [r3, #0]
    4426:	7293      	strb	r3, [r2, #10]
			break;
    4428:	e006      	b.n	4438 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    442a:	4a06      	ldr	r2, [pc, #24]	; (4444 <system_apb_clock_set_divider+0x50>)
    442c:	1dbb      	adds	r3, r7, #6
    442e:	781b      	ldrb	r3, [r3, #0]
    4430:	72d3      	strb	r3, [r2, #11]
			break;
    4432:	e001      	b.n	4438 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    4434:	2317      	movs	r3, #23
    4436:	e000      	b.n	443a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    4438:	2300      	movs	r3, #0
}
    443a:	0018      	movs	r0, r3
    443c:	46bd      	mov	sp, r7
    443e:	b002      	add	sp, #8
    4440:	bd80      	pop	{r7, pc}
    4442:	46c0      	nop			; (mov r8, r8)
    4444:	40000400 	.word	0x40000400

00004448 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    4448:	b580      	push	{r7, lr}
    444a:	b082      	sub	sp, #8
    444c:	af00      	add	r7, sp, #0
    444e:	0002      	movs	r2, r0
    4450:	1dfb      	adds	r3, r7, #7
    4452:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4454:	4a08      	ldr	r2, [pc, #32]	; (4478 <system_flash_set_waitstates+0x30>)
    4456:	1dfb      	adds	r3, r7, #7
    4458:	781b      	ldrb	r3, [r3, #0]
    445a:	210f      	movs	r1, #15
    445c:	400b      	ands	r3, r1
    445e:	b2d9      	uxtb	r1, r3
    4460:	6853      	ldr	r3, [r2, #4]
    4462:	200f      	movs	r0, #15
    4464:	4001      	ands	r1, r0
    4466:	0049      	lsls	r1, r1, #1
    4468:	201e      	movs	r0, #30
    446a:	4383      	bics	r3, r0
    446c:	430b      	orrs	r3, r1
    446e:	6053      	str	r3, [r2, #4]
}
    4470:	46c0      	nop			; (mov r8, r8)
    4472:	46bd      	mov	sp, r7
    4474:	b002      	add	sp, #8
    4476:	bd80      	pop	{r7, pc}
    4478:	41004000 	.word	0x41004000

0000447c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    447c:	b580      	push	{r7, lr}
    447e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4480:	46c0      	nop			; (mov r8, r8)
    4482:	4b04      	ldr	r3, [pc, #16]	; (4494 <_system_dfll_wait_for_sync+0x18>)
    4484:	68db      	ldr	r3, [r3, #12]
    4486:	2210      	movs	r2, #16
    4488:	4013      	ands	r3, r2
    448a:	d0fa      	beq.n	4482 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    448c:	46c0      	nop			; (mov r8, r8)
    448e:	46bd      	mov	sp, r7
    4490:	bd80      	pop	{r7, pc}
    4492:	46c0      	nop			; (mov r8, r8)
    4494:	40000800 	.word	0x40000800

00004498 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    4498:	b580      	push	{r7, lr}
    449a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    449c:	4b0c      	ldr	r3, [pc, #48]	; (44d0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    449e:	2202      	movs	r2, #2
    44a0:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    44a2:	4b0c      	ldr	r3, [pc, #48]	; (44d4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    44a4:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    44a6:	4a0a      	ldr	r2, [pc, #40]	; (44d0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    44a8:	4b0b      	ldr	r3, [pc, #44]	; (44d8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    44aa:	689b      	ldr	r3, [r3, #8]
    44ac:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    44ae:	4a08      	ldr	r2, [pc, #32]	; (44d0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    44b0:	4b09      	ldr	r3, [pc, #36]	; (44d8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    44b2:	685b      	ldr	r3, [r3, #4]
    44b4:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    44b6:	4b06      	ldr	r3, [pc, #24]	; (44d0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    44b8:	2200      	movs	r2, #0
    44ba:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    44bc:	4b05      	ldr	r3, [pc, #20]	; (44d4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    44be:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    44c0:	4a03      	ldr	r2, [pc, #12]	; (44d0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    44c2:	4b05      	ldr	r3, [pc, #20]	; (44d8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    44c4:	681b      	ldr	r3, [r3, #0]
    44c6:	b29b      	uxth	r3, r3
    44c8:	8493      	strh	r3, [r2, #36]	; 0x24
}
    44ca:	46c0      	nop			; (mov r8, r8)
    44cc:	46bd      	mov	sp, r7
    44ce:	bd80      	pop	{r7, pc}
    44d0:	40000800 	.word	0x40000800
    44d4:	0000447d 	.word	0x0000447d
    44d8:	20000570 	.word	0x20000570

000044dc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    44dc:	b580      	push	{r7, lr}
    44de:	b082      	sub	sp, #8
    44e0:	af00      	add	r7, sp, #0
    44e2:	0002      	movs	r2, r0
    44e4:	1dfb      	adds	r3, r7, #7
    44e6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    44e8:	1dfb      	adds	r3, r7, #7
    44ea:	781b      	ldrb	r3, [r3, #0]
    44ec:	2b08      	cmp	r3, #8
    44ee:	d840      	bhi.n	4572 <system_clock_source_get_hz+0x96>
    44f0:	009a      	lsls	r2, r3, #2
    44f2:	4b22      	ldr	r3, [pc, #136]	; (457c <system_clock_source_get_hz+0xa0>)
    44f4:	18d3      	adds	r3, r2, r3
    44f6:	681b      	ldr	r3, [r3, #0]
    44f8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    44fa:	4b21      	ldr	r3, [pc, #132]	; (4580 <system_clock_source_get_hz+0xa4>)
    44fc:	691b      	ldr	r3, [r3, #16]
    44fe:	e039      	b.n	4574 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4500:	4b20      	ldr	r3, [pc, #128]	; (4584 <system_clock_source_get_hz+0xa8>)
    4502:	6a1b      	ldr	r3, [r3, #32]
    4504:	059b      	lsls	r3, r3, #22
    4506:	0f9b      	lsrs	r3, r3, #30
    4508:	b2db      	uxtb	r3, r3
    450a:	001a      	movs	r2, r3
    450c:	4b1e      	ldr	r3, [pc, #120]	; (4588 <system_clock_source_get_hz+0xac>)
    450e:	40d3      	lsrs	r3, r2
    4510:	e030      	b.n	4574 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    4512:	2380      	movs	r3, #128	; 0x80
    4514:	021b      	lsls	r3, r3, #8
    4516:	e02d      	b.n	4574 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    4518:	2380      	movs	r3, #128	; 0x80
    451a:	021b      	lsls	r3, r3, #8
    451c:	e02a      	b.n	4574 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    451e:	4b18      	ldr	r3, [pc, #96]	; (4580 <system_clock_source_get_hz+0xa4>)
    4520:	695b      	ldr	r3, [r3, #20]
    4522:	e027      	b.n	4574 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4524:	4b16      	ldr	r3, [pc, #88]	; (4580 <system_clock_source_get_hz+0xa4>)
    4526:	681b      	ldr	r3, [r3, #0]
    4528:	2202      	movs	r2, #2
    452a:	4013      	ands	r3, r2
    452c:	d101      	bne.n	4532 <system_clock_source_get_hz+0x56>
			return 0;
    452e:	2300      	movs	r3, #0
    4530:	e020      	b.n	4574 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    4532:	4b16      	ldr	r3, [pc, #88]	; (458c <system_clock_source_get_hz+0xb0>)
    4534:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4536:	4b12      	ldr	r3, [pc, #72]	; (4580 <system_clock_source_get_hz+0xa4>)
    4538:	681b      	ldr	r3, [r3, #0]
    453a:	2204      	movs	r2, #4
    453c:	4013      	ands	r3, r2
    453e:	d009      	beq.n	4554 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4540:	2000      	movs	r0, #0
    4542:	4b13      	ldr	r3, [pc, #76]	; (4590 <system_clock_source_get_hz+0xb4>)
    4544:	4798      	blx	r3
    4546:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    4548:	4b0d      	ldr	r3, [pc, #52]	; (4580 <system_clock_source_get_hz+0xa4>)
    454a:	689b      	ldr	r3, [r3, #8]
    454c:	041b      	lsls	r3, r3, #16
    454e:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4550:	4353      	muls	r3, r2
    4552:	e00f      	b.n	4574 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    4554:	4b0f      	ldr	r3, [pc, #60]	; (4594 <system_clock_source_get_hz+0xb8>)
    4556:	e00d      	b.n	4574 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4558:	4a0a      	ldr	r2, [pc, #40]	; (4584 <system_clock_source_get_hz+0xa8>)
    455a:	2350      	movs	r3, #80	; 0x50
    455c:	5cd3      	ldrb	r3, [r2, r3]
    455e:	b2db      	uxtb	r3, r3
    4560:	001a      	movs	r2, r3
    4562:	2304      	movs	r3, #4
    4564:	4013      	ands	r3, r2
    4566:	d101      	bne.n	456c <system_clock_source_get_hz+0x90>
			return 0;
    4568:	2300      	movs	r3, #0
    456a:	e003      	b.n	4574 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    456c:	4b04      	ldr	r3, [pc, #16]	; (4580 <system_clock_source_get_hz+0xa4>)
    456e:	68db      	ldr	r3, [r3, #12]
    4570:	e000      	b.n	4574 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    4572:	2300      	movs	r3, #0
	}
}
    4574:	0018      	movs	r0, r3
    4576:	46bd      	mov	sp, r7
    4578:	b002      	add	sp, #8
    457a:	bd80      	pop	{r7, pc}
    457c:	000071a8 	.word	0x000071a8
    4580:	20000570 	.word	0x20000570
    4584:	40000800 	.word	0x40000800
    4588:	007a1200 	.word	0x007a1200
    458c:	0000447d 	.word	0x0000447d
    4590:	00004d51 	.word	0x00004d51
    4594:	02dc6c00 	.word	0x02dc6c00

00004598 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4598:	b580      	push	{r7, lr}
    459a:	b084      	sub	sp, #16
    459c:	af00      	add	r7, sp, #0
    459e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    45a0:	4b1a      	ldr	r3, [pc, #104]	; (460c <system_clock_source_osc8m_set_config+0x74>)
    45a2:	6a1b      	ldr	r3, [r3, #32]
    45a4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    45a6:	687b      	ldr	r3, [r7, #4]
    45a8:	781b      	ldrb	r3, [r3, #0]
    45aa:	1c1a      	adds	r2, r3, #0
    45ac:	2303      	movs	r3, #3
    45ae:	4013      	ands	r3, r2
    45b0:	b2da      	uxtb	r2, r3
    45b2:	230d      	movs	r3, #13
    45b4:	18fb      	adds	r3, r7, r3
    45b6:	2103      	movs	r1, #3
    45b8:	400a      	ands	r2, r1
    45ba:	0010      	movs	r0, r2
    45bc:	781a      	ldrb	r2, [r3, #0]
    45be:	2103      	movs	r1, #3
    45c0:	438a      	bics	r2, r1
    45c2:	1c11      	adds	r1, r2, #0
    45c4:	1c02      	adds	r2, r0, #0
    45c6:	430a      	orrs	r2, r1
    45c8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    45ca:	687b      	ldr	r3, [r7, #4]
    45cc:	789a      	ldrb	r2, [r3, #2]
    45ce:	230c      	movs	r3, #12
    45d0:	18fb      	adds	r3, r7, r3
    45d2:	01d0      	lsls	r0, r2, #7
    45d4:	781a      	ldrb	r2, [r3, #0]
    45d6:	217f      	movs	r1, #127	; 0x7f
    45d8:	400a      	ands	r2, r1
    45da:	1c11      	adds	r1, r2, #0
    45dc:	1c02      	adds	r2, r0, #0
    45de:	430a      	orrs	r2, r1
    45e0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	785a      	ldrb	r2, [r3, #1]
    45e6:	230c      	movs	r3, #12
    45e8:	18fb      	adds	r3, r7, r3
    45ea:	2101      	movs	r1, #1
    45ec:	400a      	ands	r2, r1
    45ee:	0190      	lsls	r0, r2, #6
    45f0:	781a      	ldrb	r2, [r3, #0]
    45f2:	2140      	movs	r1, #64	; 0x40
    45f4:	438a      	bics	r2, r1
    45f6:	1c11      	adds	r1, r2, #0
    45f8:	1c02      	adds	r2, r0, #0
    45fa:	430a      	orrs	r2, r1
    45fc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    45fe:	4b03      	ldr	r3, [pc, #12]	; (460c <system_clock_source_osc8m_set_config+0x74>)
    4600:	68fa      	ldr	r2, [r7, #12]
    4602:	621a      	str	r2, [r3, #32]
}
    4604:	46c0      	nop			; (mov r8, r8)
    4606:	46bd      	mov	sp, r7
    4608:	b004      	add	sp, #16
    460a:	bd80      	pop	{r7, pc}
    460c:	40000800 	.word	0x40000800

00004610 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    4610:	b580      	push	{r7, lr}
    4612:	b082      	sub	sp, #8
    4614:	af00      	add	r7, sp, #0
    4616:	0002      	movs	r2, r0
    4618:	1dfb      	adds	r3, r7, #7
    461a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    461c:	1dfb      	adds	r3, r7, #7
    461e:	781b      	ldrb	r3, [r3, #0]
    4620:	2b08      	cmp	r3, #8
    4622:	d83b      	bhi.n	469c <system_clock_source_enable+0x8c>
    4624:	009a      	lsls	r2, r3, #2
    4626:	4b21      	ldr	r3, [pc, #132]	; (46ac <system_clock_source_enable+0x9c>)
    4628:	18d3      	adds	r3, r2, r3
    462a:	681b      	ldr	r3, [r3, #0]
    462c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    462e:	4b20      	ldr	r3, [pc, #128]	; (46b0 <system_clock_source_enable+0xa0>)
    4630:	4a1f      	ldr	r2, [pc, #124]	; (46b0 <system_clock_source_enable+0xa0>)
    4632:	6a12      	ldr	r2, [r2, #32]
    4634:	2102      	movs	r1, #2
    4636:	430a      	orrs	r2, r1
    4638:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    463a:	2300      	movs	r3, #0
    463c:	e031      	b.n	46a2 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    463e:	4b1c      	ldr	r3, [pc, #112]	; (46b0 <system_clock_source_enable+0xa0>)
    4640:	4a1b      	ldr	r2, [pc, #108]	; (46b0 <system_clock_source_enable+0xa0>)
    4642:	6992      	ldr	r2, [r2, #24]
    4644:	2102      	movs	r1, #2
    4646:	430a      	orrs	r2, r1
    4648:	619a      	str	r2, [r3, #24]
		break;
    464a:	e029      	b.n	46a0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    464c:	4a18      	ldr	r2, [pc, #96]	; (46b0 <system_clock_source_enable+0xa0>)
    464e:	4b18      	ldr	r3, [pc, #96]	; (46b0 <system_clock_source_enable+0xa0>)
    4650:	8a1b      	ldrh	r3, [r3, #16]
    4652:	b29b      	uxth	r3, r3
    4654:	2102      	movs	r1, #2
    4656:	430b      	orrs	r3, r1
    4658:	b29b      	uxth	r3, r3
    465a:	8213      	strh	r3, [r2, #16]
		break;
    465c:	e020      	b.n	46a0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    465e:	4a14      	ldr	r2, [pc, #80]	; (46b0 <system_clock_source_enable+0xa0>)
    4660:	4b13      	ldr	r3, [pc, #76]	; (46b0 <system_clock_source_enable+0xa0>)
    4662:	8a9b      	ldrh	r3, [r3, #20]
    4664:	b29b      	uxth	r3, r3
    4666:	2102      	movs	r1, #2
    4668:	430b      	orrs	r3, r1
    466a:	b29b      	uxth	r3, r3
    466c:	8293      	strh	r3, [r2, #20]
		break;
    466e:	e017      	b.n	46a0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4670:	4b10      	ldr	r3, [pc, #64]	; (46b4 <system_clock_source_enable+0xa4>)
    4672:	681b      	ldr	r3, [r3, #0]
    4674:	2202      	movs	r2, #2
    4676:	431a      	orrs	r2, r3
    4678:	4b0e      	ldr	r3, [pc, #56]	; (46b4 <system_clock_source_enable+0xa4>)
    467a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    467c:	4b0e      	ldr	r3, [pc, #56]	; (46b8 <system_clock_source_enable+0xa8>)
    467e:	4798      	blx	r3
		break;
    4680:	e00e      	b.n	46a0 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4682:	4a0b      	ldr	r2, [pc, #44]	; (46b0 <system_clock_source_enable+0xa0>)
    4684:	490a      	ldr	r1, [pc, #40]	; (46b0 <system_clock_source_enable+0xa0>)
    4686:	2344      	movs	r3, #68	; 0x44
    4688:	5ccb      	ldrb	r3, [r1, r3]
    468a:	b2db      	uxtb	r3, r3
    468c:	2102      	movs	r1, #2
    468e:	430b      	orrs	r3, r1
    4690:	b2d9      	uxtb	r1, r3
    4692:	2344      	movs	r3, #68	; 0x44
    4694:	54d1      	strb	r1, [r2, r3]
		break;
    4696:	e003      	b.n	46a0 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4698:	2300      	movs	r3, #0
    469a:	e002      	b.n	46a2 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    469c:	2317      	movs	r3, #23
    469e:	e000      	b.n	46a2 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    46a0:	2300      	movs	r3, #0
}
    46a2:	0018      	movs	r0, r3
    46a4:	46bd      	mov	sp, r7
    46a6:	b002      	add	sp, #8
    46a8:	bd80      	pop	{r7, pc}
    46aa:	46c0      	nop			; (mov r8, r8)
    46ac:	000071cc 	.word	0x000071cc
    46b0:	40000800 	.word	0x40000800
    46b4:	20000570 	.word	0x20000570
    46b8:	00004499 	.word	0x00004499

000046bc <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    46bc:	b580      	push	{r7, lr}
    46be:	b082      	sub	sp, #8
    46c0:	af00      	add	r7, sp, #0
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
#elif CONF_CLOCK_GCLK_5_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    46c2:	003b      	movs	r3, r7
    46c4:	2205      	movs	r2, #5
    46c6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    46c8:	2300      	movs	r3, #0
    46ca:	607b      	str	r3, [r7, #4]
    46cc:	e009      	b.n	46e2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    46ce:	687b      	ldr	r3, [r7, #4]
    46d0:	b2db      	uxtb	r3, r3
    46d2:	003a      	movs	r2, r7
    46d4:	0011      	movs	r1, r2
    46d6:	0018      	movs	r0, r3
    46d8:	4b05      	ldr	r3, [pc, #20]	; (46f0 <_switch_peripheral_gclk+0x34>)
    46da:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    46dc:	687b      	ldr	r3, [r7, #4]
    46de:	3301      	adds	r3, #1
    46e0:	607b      	str	r3, [r7, #4]
    46e2:	687b      	ldr	r3, [r7, #4]
    46e4:	2b24      	cmp	r3, #36	; 0x24
    46e6:	d9f2      	bls.n	46ce <_switch_peripheral_gclk+0x12>
	}
}
    46e8:	46c0      	nop			; (mov r8, r8)
    46ea:	46bd      	mov	sp, r7
    46ec:	b002      	add	sp, #8
    46ee:	bd80      	pop	{r7, pc}
    46f0:	00004be5 	.word	0x00004be5

000046f4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    46f4:	b580      	push	{r7, lr}
    46f6:	b0a0      	sub	sp, #128	; 0x80
    46f8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    46fa:	4b63      	ldr	r3, [pc, #396]	; (4888 <system_clock_init+0x194>)
    46fc:	22c2      	movs	r2, #194	; 0xc2
    46fe:	00d2      	lsls	r2, r2, #3
    4700:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    4702:	2000      	movs	r0, #0
    4704:	4b61      	ldr	r3, [pc, #388]	; (488c <system_clock_init+0x198>)
    4706:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    4708:	4b61      	ldr	r3, [pc, #388]	; (4890 <system_clock_init+0x19c>)
    470a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    470c:	237c      	movs	r3, #124	; 0x7c
    470e:	18fb      	adds	r3, r7, r3
    4710:	0018      	movs	r0, r3
    4712:	4b60      	ldr	r3, [pc, #384]	; (4894 <system_clock_init+0x1a0>)
    4714:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4716:	237c      	movs	r3, #124	; 0x7c
    4718:	18fb      	adds	r3, r7, r3
    471a:	2200      	movs	r2, #0
    471c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    471e:	237c      	movs	r3, #124	; 0x7c
    4720:	18fb      	adds	r3, r7, r3
    4722:	2201      	movs	r2, #1
    4724:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    4726:	237c      	movs	r3, #124	; 0x7c
    4728:	18fb      	adds	r3, r7, r3
    472a:	2200      	movs	r2, #0
    472c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    472e:	237c      	movs	r3, #124	; 0x7c
    4730:	18fb      	adds	r3, r7, r3
    4732:	0018      	movs	r0, r3
    4734:	4b58      	ldr	r3, [pc, #352]	; (4898 <system_clock_init+0x1a4>)
    4736:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4738:	2006      	movs	r0, #6
    473a:	4b58      	ldr	r3, [pc, #352]	; (489c <system_clock_init+0x1a8>)
    473c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    473e:	4b58      	ldr	r3, [pc, #352]	; (48a0 <system_clock_init+0x1ac>)
    4740:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4742:	2364      	movs	r3, #100	; 0x64
    4744:	18fb      	adds	r3, r7, r3
    4746:	0018      	movs	r0, r3
    4748:	4b56      	ldr	r3, [pc, #344]	; (48a4 <system_clock_init+0x1b0>)
    474a:	4798      	blx	r3
    474c:	2364      	movs	r3, #100	; 0x64
    474e:	18fb      	adds	r3, r7, r3
    4750:	2206      	movs	r2, #6
    4752:	701a      	strb	r2, [r3, #0]
    4754:	2364      	movs	r3, #100	; 0x64
    4756:	18fb      	adds	r3, r7, r3
    4758:	2201      	movs	r2, #1
    475a:	605a      	str	r2, [r3, #4]
    475c:	2364      	movs	r3, #100	; 0x64
    475e:	18fb      	adds	r3, r7, r3
    4760:	2201      	movs	r2, #1
    4762:	721a      	strb	r2, [r3, #8]
    4764:	2364      	movs	r3, #100	; 0x64
    4766:	18fb      	adds	r3, r7, r3
    4768:	2200      	movs	r2, #0
    476a:	725a      	strb	r2, [r3, #9]
    476c:	2364      	movs	r3, #100	; 0x64
    476e:	18fb      	adds	r3, r7, r3
    4770:	0019      	movs	r1, r3
    4772:	2001      	movs	r0, #1
    4774:	4b4c      	ldr	r3, [pc, #304]	; (48a8 <system_clock_init+0x1b4>)
    4776:	4798      	blx	r3
    4778:	2001      	movs	r0, #1
    477a:	4b4c      	ldr	r3, [pc, #304]	; (48ac <system_clock_init+0x1b8>)
    477c:	4798      	blx	r3
    477e:	2358      	movs	r3, #88	; 0x58
    4780:	18fb      	adds	r3, r7, r3
    4782:	0018      	movs	r0, r3
    4784:	4b47      	ldr	r3, [pc, #284]	; (48a4 <system_clock_init+0x1b0>)
    4786:	4798      	blx	r3
    4788:	2358      	movs	r3, #88	; 0x58
    478a:	18fb      	adds	r3, r7, r3
    478c:	2206      	movs	r2, #6
    478e:	701a      	strb	r2, [r3, #0]
    4790:	2358      	movs	r3, #88	; 0x58
    4792:	18fb      	adds	r3, r7, r3
    4794:	2201      	movs	r2, #1
    4796:	605a      	str	r2, [r3, #4]
    4798:	2358      	movs	r3, #88	; 0x58
    479a:	18fb      	adds	r3, r7, r3
    479c:	2201      	movs	r2, #1
    479e:	721a      	strb	r2, [r3, #8]
    47a0:	2358      	movs	r3, #88	; 0x58
    47a2:	18fb      	adds	r3, r7, r3
    47a4:	2200      	movs	r2, #0
    47a6:	725a      	strb	r2, [r3, #9]
    47a8:	2358      	movs	r3, #88	; 0x58
    47aa:	18fb      	adds	r3, r7, r3
    47ac:	0019      	movs	r1, r3
    47ae:	2002      	movs	r0, #2
    47b0:	4b3d      	ldr	r3, [pc, #244]	; (48a8 <system_clock_init+0x1b4>)
    47b2:	4798      	blx	r3
    47b4:	2002      	movs	r0, #2
    47b6:	4b3d      	ldr	r3, [pc, #244]	; (48ac <system_clock_init+0x1b8>)
    47b8:	4798      	blx	r3
    47ba:	234c      	movs	r3, #76	; 0x4c
    47bc:	18fb      	adds	r3, r7, r3
    47be:	0018      	movs	r0, r3
    47c0:	4b38      	ldr	r3, [pc, #224]	; (48a4 <system_clock_init+0x1b0>)
    47c2:	4798      	blx	r3
    47c4:	234c      	movs	r3, #76	; 0x4c
    47c6:	18fb      	adds	r3, r7, r3
    47c8:	2206      	movs	r2, #6
    47ca:	701a      	strb	r2, [r3, #0]
    47cc:	234c      	movs	r3, #76	; 0x4c
    47ce:	18fb      	adds	r3, r7, r3
    47d0:	2201      	movs	r2, #1
    47d2:	605a      	str	r2, [r3, #4]
    47d4:	234c      	movs	r3, #76	; 0x4c
    47d6:	18fb      	adds	r3, r7, r3
    47d8:	2201      	movs	r2, #1
    47da:	721a      	strb	r2, [r3, #8]
    47dc:	234c      	movs	r3, #76	; 0x4c
    47de:	18fb      	adds	r3, r7, r3
    47e0:	2200      	movs	r2, #0
    47e2:	725a      	strb	r2, [r3, #9]
    47e4:	234c      	movs	r3, #76	; 0x4c
    47e6:	18fb      	adds	r3, r7, r3
    47e8:	0019      	movs	r1, r3
    47ea:	2003      	movs	r0, #3
    47ec:	4b2e      	ldr	r3, [pc, #184]	; (48a8 <system_clock_init+0x1b4>)
    47ee:	4798      	blx	r3
    47f0:	2003      	movs	r0, #3
    47f2:	4b2e      	ldr	r3, [pc, #184]	; (48ac <system_clock_init+0x1b8>)
    47f4:	4798      	blx	r3
    47f6:	2340      	movs	r3, #64	; 0x40
    47f8:	18fb      	adds	r3, r7, r3
    47fa:	0018      	movs	r0, r3
    47fc:	4b29      	ldr	r3, [pc, #164]	; (48a4 <system_clock_init+0x1b0>)
    47fe:	4798      	blx	r3
    4800:	2340      	movs	r3, #64	; 0x40
    4802:	18fb      	adds	r3, r7, r3
    4804:	2206      	movs	r2, #6
    4806:	701a      	strb	r2, [r3, #0]
    4808:	2340      	movs	r3, #64	; 0x40
    480a:	18fb      	adds	r3, r7, r3
    480c:	2201      	movs	r2, #1
    480e:	605a      	str	r2, [r3, #4]
    4810:	2340      	movs	r3, #64	; 0x40
    4812:	18fb      	adds	r3, r7, r3
    4814:	2200      	movs	r2, #0
    4816:	721a      	strb	r2, [r3, #8]
    4818:	2340      	movs	r3, #64	; 0x40
    481a:	18fb      	adds	r3, r7, r3
    481c:	2200      	movs	r2, #0
    481e:	725a      	strb	r2, [r3, #9]
    4820:	2340      	movs	r3, #64	; 0x40
    4822:	18fb      	adds	r3, r7, r3
    4824:	0019      	movs	r1, r3
    4826:	2004      	movs	r0, #4
    4828:	4b1f      	ldr	r3, [pc, #124]	; (48a8 <system_clock_init+0x1b4>)
    482a:	4798      	blx	r3
    482c:	2004      	movs	r0, #4
    482e:	4b1f      	ldr	r3, [pc, #124]	; (48ac <system_clock_init+0x1b8>)
    4830:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    4832:	2000      	movs	r0, #0
    4834:	4b1e      	ldr	r3, [pc, #120]	; (48b0 <system_clock_init+0x1bc>)
    4836:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    4838:	2100      	movs	r1, #0
    483a:	2000      	movs	r0, #0
    483c:	4b1d      	ldr	r3, [pc, #116]	; (48b4 <system_clock_init+0x1c0>)
    483e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    4840:	2100      	movs	r1, #0
    4842:	2001      	movs	r0, #1
    4844:	4b1b      	ldr	r3, [pc, #108]	; (48b4 <system_clock_init+0x1c0>)
    4846:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    4848:	2100      	movs	r1, #0
    484a:	2002      	movs	r0, #2
    484c:	4b19      	ldr	r3, [pc, #100]	; (48b4 <system_clock_init+0x1c0>)
    484e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4850:	1d3b      	adds	r3, r7, #4
    4852:	0018      	movs	r0, r3
    4854:	4b13      	ldr	r3, [pc, #76]	; (48a4 <system_clock_init+0x1b0>)
    4856:	4798      	blx	r3
    4858:	1d3b      	adds	r3, r7, #4
    485a:	2206      	movs	r2, #6
    485c:	701a      	strb	r2, [r3, #0]
    485e:	1d3b      	adds	r3, r7, #4
    4860:	2201      	movs	r2, #1
    4862:	605a      	str	r2, [r3, #4]
    4864:	1d3b      	adds	r3, r7, #4
    4866:	2201      	movs	r2, #1
    4868:	721a      	strb	r2, [r3, #8]
    486a:	1d3b      	adds	r3, r7, #4
    486c:	2200      	movs	r2, #0
    486e:	725a      	strb	r2, [r3, #9]
    4870:	1d3b      	adds	r3, r7, #4
    4872:	0019      	movs	r1, r3
    4874:	2000      	movs	r0, #0
    4876:	4b0c      	ldr	r3, [pc, #48]	; (48a8 <system_clock_init+0x1b4>)
    4878:	4798      	blx	r3
    487a:	2000      	movs	r0, #0
    487c:	4b0b      	ldr	r3, [pc, #44]	; (48ac <system_clock_init+0x1b8>)
    487e:	4798      	blx	r3
#endif
}
    4880:	46c0      	nop			; (mov r8, r8)
    4882:	46bd      	mov	sp, r7
    4884:	b020      	add	sp, #128	; 0x80
    4886:	bd80      	pop	{r7, pc}
    4888:	40000800 	.word	0x40000800
    488c:	00004449 	.word	0x00004449
    4890:	000046bd 	.word	0x000046bd
    4894:	000043b3 	.word	0x000043b3
    4898:	00004599 	.word	0x00004599
    489c:	00004611 	.word	0x00004611
    48a0:	0000495d 	.word	0x0000495d
    48a4:	00004385 	.word	0x00004385
    48a8:	0000498d 	.word	0x0000498d
    48ac:	00004ab1 	.word	0x00004ab1
    48b0:	000043d5 	.word	0x000043d5
    48b4:	000043f5 	.word	0x000043f5

000048b8 <system_apb_clock_set_mask>:
{
    48b8:	b580      	push	{r7, lr}
    48ba:	b082      	sub	sp, #8
    48bc:	af00      	add	r7, sp, #0
    48be:	0002      	movs	r2, r0
    48c0:	6039      	str	r1, [r7, #0]
    48c2:	1dfb      	adds	r3, r7, #7
    48c4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    48c6:	1dfb      	adds	r3, r7, #7
    48c8:	781b      	ldrb	r3, [r3, #0]
    48ca:	2b01      	cmp	r3, #1
    48cc:	d00a      	beq.n	48e4 <system_apb_clock_set_mask+0x2c>
    48ce:	2b02      	cmp	r3, #2
    48d0:	d00f      	beq.n	48f2 <system_apb_clock_set_mask+0x3a>
    48d2:	2b00      	cmp	r3, #0
    48d4:	d114      	bne.n	4900 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    48d6:	4b0e      	ldr	r3, [pc, #56]	; (4910 <system_apb_clock_set_mask+0x58>)
    48d8:	4a0d      	ldr	r2, [pc, #52]	; (4910 <system_apb_clock_set_mask+0x58>)
    48da:	6991      	ldr	r1, [r2, #24]
    48dc:	683a      	ldr	r2, [r7, #0]
    48de:	430a      	orrs	r2, r1
    48e0:	619a      	str	r2, [r3, #24]
			break;
    48e2:	e00f      	b.n	4904 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    48e4:	4b0a      	ldr	r3, [pc, #40]	; (4910 <system_apb_clock_set_mask+0x58>)
    48e6:	4a0a      	ldr	r2, [pc, #40]	; (4910 <system_apb_clock_set_mask+0x58>)
    48e8:	69d1      	ldr	r1, [r2, #28]
    48ea:	683a      	ldr	r2, [r7, #0]
    48ec:	430a      	orrs	r2, r1
    48ee:	61da      	str	r2, [r3, #28]
			break;
    48f0:	e008      	b.n	4904 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    48f2:	4b07      	ldr	r3, [pc, #28]	; (4910 <system_apb_clock_set_mask+0x58>)
    48f4:	4a06      	ldr	r2, [pc, #24]	; (4910 <system_apb_clock_set_mask+0x58>)
    48f6:	6a11      	ldr	r1, [r2, #32]
    48f8:	683a      	ldr	r2, [r7, #0]
    48fa:	430a      	orrs	r2, r1
    48fc:	621a      	str	r2, [r3, #32]
			break;
    48fe:	e001      	b.n	4904 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4900:	2317      	movs	r3, #23
    4902:	e000      	b.n	4906 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4904:	2300      	movs	r3, #0
}
    4906:	0018      	movs	r0, r3
    4908:	46bd      	mov	sp, r7
    490a:	b002      	add	sp, #8
    490c:	bd80      	pop	{r7, pc}
    490e:	46c0      	nop			; (mov r8, r8)
    4910:	40000400 	.word	0x40000400

00004914 <system_interrupt_enter_critical_section>:
{
    4914:	b580      	push	{r7, lr}
    4916:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    4918:	4b02      	ldr	r3, [pc, #8]	; (4924 <system_interrupt_enter_critical_section+0x10>)
    491a:	4798      	blx	r3
}
    491c:	46c0      	nop			; (mov r8, r8)
    491e:	46bd      	mov	sp, r7
    4920:	bd80      	pop	{r7, pc}
    4922:	46c0      	nop			; (mov r8, r8)
    4924:	000042f1 	.word	0x000042f1

00004928 <system_interrupt_leave_critical_section>:
{
    4928:	b580      	push	{r7, lr}
    492a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    492c:	4b02      	ldr	r3, [pc, #8]	; (4938 <system_interrupt_leave_critical_section+0x10>)
    492e:	4798      	blx	r3
}
    4930:	46c0      	nop			; (mov r8, r8)
    4932:	46bd      	mov	sp, r7
    4934:	bd80      	pop	{r7, pc}
    4936:	46c0      	nop			; (mov r8, r8)
    4938:	00004345 	.word	0x00004345

0000493c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    493c:	b580      	push	{r7, lr}
    493e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4940:	4b05      	ldr	r3, [pc, #20]	; (4958 <system_gclk_is_syncing+0x1c>)
    4942:	785b      	ldrb	r3, [r3, #1]
    4944:	b2db      	uxtb	r3, r3
    4946:	b25b      	sxtb	r3, r3
    4948:	2b00      	cmp	r3, #0
    494a:	da01      	bge.n	4950 <system_gclk_is_syncing+0x14>
		return true;
    494c:	2301      	movs	r3, #1
    494e:	e000      	b.n	4952 <system_gclk_is_syncing+0x16>
	}

	return false;
    4950:	2300      	movs	r3, #0
}
    4952:	0018      	movs	r0, r3
    4954:	46bd      	mov	sp, r7
    4956:	bd80      	pop	{r7, pc}
    4958:	40000c00 	.word	0x40000c00

0000495c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    495c:	b580      	push	{r7, lr}
    495e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    4960:	2108      	movs	r1, #8
    4962:	2000      	movs	r0, #0
    4964:	4b07      	ldr	r3, [pc, #28]	; (4984 <system_gclk_init+0x28>)
    4966:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4968:	4b07      	ldr	r3, [pc, #28]	; (4988 <system_gclk_init+0x2c>)
    496a:	2201      	movs	r2, #1
    496c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    496e:	46c0      	nop			; (mov r8, r8)
    4970:	4b05      	ldr	r3, [pc, #20]	; (4988 <system_gclk_init+0x2c>)
    4972:	781b      	ldrb	r3, [r3, #0]
    4974:	b2db      	uxtb	r3, r3
    4976:	001a      	movs	r2, r3
    4978:	2301      	movs	r3, #1
    497a:	4013      	ands	r3, r2
    497c:	d1f8      	bne.n	4970 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    497e:	46c0      	nop			; (mov r8, r8)
    4980:	46bd      	mov	sp, r7
    4982:	bd80      	pop	{r7, pc}
    4984:	000048b9 	.word	0x000048b9
    4988:	40000c00 	.word	0x40000c00

0000498c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    498c:	b580      	push	{r7, lr}
    498e:	b086      	sub	sp, #24
    4990:	af00      	add	r7, sp, #0
    4992:	0002      	movs	r2, r0
    4994:	6039      	str	r1, [r7, #0]
    4996:	1dfb      	adds	r3, r7, #7
    4998:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    499a:	1dfb      	adds	r3, r7, #7
    499c:	781b      	ldrb	r3, [r3, #0]
    499e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    49a0:	1dfb      	adds	r3, r7, #7
    49a2:	781b      	ldrb	r3, [r3, #0]
    49a4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    49a6:	683b      	ldr	r3, [r7, #0]
    49a8:	781b      	ldrb	r3, [r3, #0]
    49aa:	021b      	lsls	r3, r3, #8
    49ac:	001a      	movs	r2, r3
    49ae:	697b      	ldr	r3, [r7, #20]
    49b0:	4313      	orrs	r3, r2
    49b2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    49b4:	683b      	ldr	r3, [r7, #0]
    49b6:	785b      	ldrb	r3, [r3, #1]
    49b8:	2b00      	cmp	r3, #0
    49ba:	d004      	beq.n	49c6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    49bc:	697b      	ldr	r3, [r7, #20]
    49be:	2280      	movs	r2, #128	; 0x80
    49c0:	02d2      	lsls	r2, r2, #11
    49c2:	4313      	orrs	r3, r2
    49c4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    49c6:	683b      	ldr	r3, [r7, #0]
    49c8:	7a5b      	ldrb	r3, [r3, #9]
    49ca:	2b00      	cmp	r3, #0
    49cc:	d004      	beq.n	49d8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    49ce:	697b      	ldr	r3, [r7, #20]
    49d0:	2280      	movs	r2, #128	; 0x80
    49d2:	0312      	lsls	r2, r2, #12
    49d4:	4313      	orrs	r3, r2
    49d6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    49d8:	683b      	ldr	r3, [r7, #0]
    49da:	685b      	ldr	r3, [r3, #4]
    49dc:	2b01      	cmp	r3, #1
    49de:	d92c      	bls.n	4a3a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    49e0:	683b      	ldr	r3, [r7, #0]
    49e2:	685a      	ldr	r2, [r3, #4]
    49e4:	683b      	ldr	r3, [r7, #0]
    49e6:	685b      	ldr	r3, [r3, #4]
    49e8:	3b01      	subs	r3, #1
    49ea:	4013      	ands	r3, r2
    49ec:	d11a      	bne.n	4a24 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    49ee:	2300      	movs	r3, #0
    49f0:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    49f2:	2302      	movs	r3, #2
    49f4:	60bb      	str	r3, [r7, #8]
    49f6:	e005      	b.n	4a04 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    49f8:	68fb      	ldr	r3, [r7, #12]
    49fa:	3301      	adds	r3, #1
    49fc:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    49fe:	68bb      	ldr	r3, [r7, #8]
    4a00:	005b      	lsls	r3, r3, #1
    4a02:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    4a04:	683b      	ldr	r3, [r7, #0]
    4a06:	685a      	ldr	r2, [r3, #4]
    4a08:	68bb      	ldr	r3, [r7, #8]
    4a0a:	429a      	cmp	r2, r3
    4a0c:	d8f4      	bhi.n	49f8 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4a0e:	68fb      	ldr	r3, [r7, #12]
    4a10:	021b      	lsls	r3, r3, #8
    4a12:	693a      	ldr	r2, [r7, #16]
    4a14:	4313      	orrs	r3, r2
    4a16:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4a18:	697b      	ldr	r3, [r7, #20]
    4a1a:	2280      	movs	r2, #128	; 0x80
    4a1c:	0352      	lsls	r2, r2, #13
    4a1e:	4313      	orrs	r3, r2
    4a20:	617b      	str	r3, [r7, #20]
    4a22:	e00a      	b.n	4a3a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4a24:	683b      	ldr	r3, [r7, #0]
    4a26:	685b      	ldr	r3, [r3, #4]
    4a28:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    4a2a:	693a      	ldr	r2, [r7, #16]
    4a2c:	4313      	orrs	r3, r2
    4a2e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4a30:	697b      	ldr	r3, [r7, #20]
    4a32:	2280      	movs	r2, #128	; 0x80
    4a34:	0292      	lsls	r2, r2, #10
    4a36:	4313      	orrs	r3, r2
    4a38:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4a3a:	683b      	ldr	r3, [r7, #0]
    4a3c:	7a1b      	ldrb	r3, [r3, #8]
    4a3e:	2b00      	cmp	r3, #0
    4a40:	d004      	beq.n	4a4c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4a42:	697b      	ldr	r3, [r7, #20]
    4a44:	2280      	movs	r2, #128	; 0x80
    4a46:	0392      	lsls	r2, r2, #14
    4a48:	4313      	orrs	r3, r2
    4a4a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    4a4c:	46c0      	nop			; (mov r8, r8)
    4a4e:	4b13      	ldr	r3, [pc, #76]	; (4a9c <system_gclk_gen_set_config+0x110>)
    4a50:	4798      	blx	r3
    4a52:	1e03      	subs	r3, r0, #0
    4a54:	d1fb      	bne.n	4a4e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4a56:	4b12      	ldr	r3, [pc, #72]	; (4aa0 <system_gclk_gen_set_config+0x114>)
    4a58:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4a5a:	4a12      	ldr	r2, [pc, #72]	; (4aa4 <system_gclk_gen_set_config+0x118>)
    4a5c:	1dfb      	adds	r3, r7, #7
    4a5e:	781b      	ldrb	r3, [r3, #0]
    4a60:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4a62:	46c0      	nop			; (mov r8, r8)
    4a64:	4b0d      	ldr	r3, [pc, #52]	; (4a9c <system_gclk_gen_set_config+0x110>)
    4a66:	4798      	blx	r3
    4a68:	1e03      	subs	r3, r0, #0
    4a6a:	d1fb      	bne.n	4a64 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4a6c:	4b0e      	ldr	r3, [pc, #56]	; (4aa8 <system_gclk_gen_set_config+0x11c>)
    4a6e:	693a      	ldr	r2, [r7, #16]
    4a70:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    4a72:	46c0      	nop			; (mov r8, r8)
    4a74:	4b09      	ldr	r3, [pc, #36]	; (4a9c <system_gclk_gen_set_config+0x110>)
    4a76:	4798      	blx	r3
    4a78:	1e03      	subs	r3, r0, #0
    4a7a:	d1fb      	bne.n	4a74 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4a7c:	4b0a      	ldr	r3, [pc, #40]	; (4aa8 <system_gclk_gen_set_config+0x11c>)
    4a7e:	4a0a      	ldr	r2, [pc, #40]	; (4aa8 <system_gclk_gen_set_config+0x11c>)
    4a80:	6851      	ldr	r1, [r2, #4]
    4a82:	2280      	movs	r2, #128	; 0x80
    4a84:	0252      	lsls	r2, r2, #9
    4a86:	4011      	ands	r1, r2
    4a88:	697a      	ldr	r2, [r7, #20]
    4a8a:	430a      	orrs	r2, r1
    4a8c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4a8e:	4b07      	ldr	r3, [pc, #28]	; (4aac <system_gclk_gen_set_config+0x120>)
    4a90:	4798      	blx	r3
}
    4a92:	46c0      	nop			; (mov r8, r8)
    4a94:	46bd      	mov	sp, r7
    4a96:	b006      	add	sp, #24
    4a98:	bd80      	pop	{r7, pc}
    4a9a:	46c0      	nop			; (mov r8, r8)
    4a9c:	0000493d 	.word	0x0000493d
    4aa0:	00004915 	.word	0x00004915
    4aa4:	40000c08 	.word	0x40000c08
    4aa8:	40000c00 	.word	0x40000c00
    4aac:	00004929 	.word	0x00004929

00004ab0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4ab0:	b580      	push	{r7, lr}
    4ab2:	b082      	sub	sp, #8
    4ab4:	af00      	add	r7, sp, #0
    4ab6:	0002      	movs	r2, r0
    4ab8:	1dfb      	adds	r3, r7, #7
    4aba:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4abc:	46c0      	nop			; (mov r8, r8)
    4abe:	4b0e      	ldr	r3, [pc, #56]	; (4af8 <system_gclk_gen_enable+0x48>)
    4ac0:	4798      	blx	r3
    4ac2:	1e03      	subs	r3, r0, #0
    4ac4:	d1fb      	bne.n	4abe <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4ac6:	4b0d      	ldr	r3, [pc, #52]	; (4afc <system_gclk_gen_enable+0x4c>)
    4ac8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4aca:	4a0d      	ldr	r2, [pc, #52]	; (4b00 <system_gclk_gen_enable+0x50>)
    4acc:	1dfb      	adds	r3, r7, #7
    4ace:	781b      	ldrb	r3, [r3, #0]
    4ad0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4ad2:	46c0      	nop			; (mov r8, r8)
    4ad4:	4b08      	ldr	r3, [pc, #32]	; (4af8 <system_gclk_gen_enable+0x48>)
    4ad6:	4798      	blx	r3
    4ad8:	1e03      	subs	r3, r0, #0
    4ada:	d1fb      	bne.n	4ad4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4adc:	4b09      	ldr	r3, [pc, #36]	; (4b04 <system_gclk_gen_enable+0x54>)
    4ade:	4a09      	ldr	r2, [pc, #36]	; (4b04 <system_gclk_gen_enable+0x54>)
    4ae0:	6852      	ldr	r2, [r2, #4]
    4ae2:	2180      	movs	r1, #128	; 0x80
    4ae4:	0249      	lsls	r1, r1, #9
    4ae6:	430a      	orrs	r2, r1
    4ae8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4aea:	4b07      	ldr	r3, [pc, #28]	; (4b08 <system_gclk_gen_enable+0x58>)
    4aec:	4798      	blx	r3
}
    4aee:	46c0      	nop			; (mov r8, r8)
    4af0:	46bd      	mov	sp, r7
    4af2:	b002      	add	sp, #8
    4af4:	bd80      	pop	{r7, pc}
    4af6:	46c0      	nop			; (mov r8, r8)
    4af8:	0000493d 	.word	0x0000493d
    4afc:	00004915 	.word	0x00004915
    4b00:	40000c04 	.word	0x40000c04
    4b04:	40000c00 	.word	0x40000c00
    4b08:	00004929 	.word	0x00004929

00004b0c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4b0c:	b580      	push	{r7, lr}
    4b0e:	b086      	sub	sp, #24
    4b10:	af00      	add	r7, sp, #0
    4b12:	0002      	movs	r2, r0
    4b14:	1dfb      	adds	r3, r7, #7
    4b16:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4b18:	46c0      	nop			; (mov r8, r8)
    4b1a:	4b2a      	ldr	r3, [pc, #168]	; (4bc4 <system_gclk_gen_get_hz+0xb8>)
    4b1c:	4798      	blx	r3
    4b1e:	1e03      	subs	r3, r0, #0
    4b20:	d1fb      	bne.n	4b1a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4b22:	4b29      	ldr	r3, [pc, #164]	; (4bc8 <system_gclk_gen_get_hz+0xbc>)
    4b24:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4b26:	4a29      	ldr	r2, [pc, #164]	; (4bcc <system_gclk_gen_get_hz+0xc0>)
    4b28:	1dfb      	adds	r3, r7, #7
    4b2a:	781b      	ldrb	r3, [r3, #0]
    4b2c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4b2e:	46c0      	nop			; (mov r8, r8)
    4b30:	4b24      	ldr	r3, [pc, #144]	; (4bc4 <system_gclk_gen_get_hz+0xb8>)
    4b32:	4798      	blx	r3
    4b34:	1e03      	subs	r3, r0, #0
    4b36:	d1fb      	bne.n	4b30 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4b38:	4b25      	ldr	r3, [pc, #148]	; (4bd0 <system_gclk_gen_get_hz+0xc4>)
    4b3a:	685b      	ldr	r3, [r3, #4]
    4b3c:	04db      	lsls	r3, r3, #19
    4b3e:	0edb      	lsrs	r3, r3, #27
    4b40:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4b42:	0018      	movs	r0, r3
    4b44:	4b23      	ldr	r3, [pc, #140]	; (4bd4 <system_gclk_gen_get_hz+0xc8>)
    4b46:	4798      	blx	r3
    4b48:	0003      	movs	r3, r0
    4b4a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4b4c:	4a1f      	ldr	r2, [pc, #124]	; (4bcc <system_gclk_gen_get_hz+0xc0>)
    4b4e:	1dfb      	adds	r3, r7, #7
    4b50:	781b      	ldrb	r3, [r3, #0]
    4b52:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4b54:	4b1e      	ldr	r3, [pc, #120]	; (4bd0 <system_gclk_gen_get_hz+0xc4>)
    4b56:	685b      	ldr	r3, [r3, #4]
    4b58:	02db      	lsls	r3, r3, #11
    4b5a:	0fdb      	lsrs	r3, r3, #31
    4b5c:	b2da      	uxtb	r2, r3
    4b5e:	2313      	movs	r3, #19
    4b60:	18fb      	adds	r3, r7, r3
    4b62:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4b64:	4a1c      	ldr	r2, [pc, #112]	; (4bd8 <system_gclk_gen_get_hz+0xcc>)
    4b66:	1dfb      	adds	r3, r7, #7
    4b68:	781b      	ldrb	r3, [r3, #0]
    4b6a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4b6c:	46c0      	nop			; (mov r8, r8)
    4b6e:	4b15      	ldr	r3, [pc, #84]	; (4bc4 <system_gclk_gen_get_hz+0xb8>)
    4b70:	4798      	blx	r3
    4b72:	1e03      	subs	r3, r0, #0
    4b74:	d1fb      	bne.n	4b6e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4b76:	4b16      	ldr	r3, [pc, #88]	; (4bd0 <system_gclk_gen_get_hz+0xc4>)
    4b78:	689b      	ldr	r3, [r3, #8]
    4b7a:	021b      	lsls	r3, r3, #8
    4b7c:	0c1b      	lsrs	r3, r3, #16
    4b7e:	b29b      	uxth	r3, r3
    4b80:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    4b82:	4b16      	ldr	r3, [pc, #88]	; (4bdc <system_gclk_gen_get_hz+0xd0>)
    4b84:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4b86:	2313      	movs	r3, #19
    4b88:	18fb      	adds	r3, r7, r3
    4b8a:	781b      	ldrb	r3, [r3, #0]
    4b8c:	2b00      	cmp	r3, #0
    4b8e:	d109      	bne.n	4ba4 <system_gclk_gen_get_hz+0x98>
    4b90:	68fb      	ldr	r3, [r7, #12]
    4b92:	2b01      	cmp	r3, #1
    4b94:	d906      	bls.n	4ba4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    4b96:	4b12      	ldr	r3, [pc, #72]	; (4be0 <system_gclk_gen_get_hz+0xd4>)
    4b98:	68f9      	ldr	r1, [r7, #12]
    4b9a:	6978      	ldr	r0, [r7, #20]
    4b9c:	4798      	blx	r3
    4b9e:	0003      	movs	r3, r0
    4ba0:	617b      	str	r3, [r7, #20]
    4ba2:	e00a      	b.n	4bba <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    4ba4:	2313      	movs	r3, #19
    4ba6:	18fb      	adds	r3, r7, r3
    4ba8:	781b      	ldrb	r3, [r3, #0]
    4baa:	2b00      	cmp	r3, #0
    4bac:	d005      	beq.n	4bba <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    4bae:	68fb      	ldr	r3, [r7, #12]
    4bb0:	3301      	adds	r3, #1
    4bb2:	697a      	ldr	r2, [r7, #20]
    4bb4:	40da      	lsrs	r2, r3
    4bb6:	0013      	movs	r3, r2
    4bb8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    4bba:	697b      	ldr	r3, [r7, #20]
}
    4bbc:	0018      	movs	r0, r3
    4bbe:	46bd      	mov	sp, r7
    4bc0:	b006      	add	sp, #24
    4bc2:	bd80      	pop	{r7, pc}
    4bc4:	0000493d 	.word	0x0000493d
    4bc8:	00004915 	.word	0x00004915
    4bcc:	40000c04 	.word	0x40000c04
    4bd0:	40000c00 	.word	0x40000c00
    4bd4:	000044dd 	.word	0x000044dd
    4bd8:	40000c08 	.word	0x40000c08
    4bdc:	00004929 	.word	0x00004929
    4be0:	000053c5 	.word	0x000053c5

00004be4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4be4:	b580      	push	{r7, lr}
    4be6:	b084      	sub	sp, #16
    4be8:	af00      	add	r7, sp, #0
    4bea:	0002      	movs	r2, r0
    4bec:	6039      	str	r1, [r7, #0]
    4bee:	1dfb      	adds	r3, r7, #7
    4bf0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    4bf2:	1dfb      	adds	r3, r7, #7
    4bf4:	781b      	ldrb	r3, [r3, #0]
    4bf6:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4bf8:	683b      	ldr	r3, [r7, #0]
    4bfa:	781b      	ldrb	r3, [r3, #0]
    4bfc:	021b      	lsls	r3, r3, #8
    4bfe:	001a      	movs	r2, r3
    4c00:	68fb      	ldr	r3, [r7, #12]
    4c02:	4313      	orrs	r3, r2
    4c04:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4c06:	1dfb      	adds	r3, r7, #7
    4c08:	781b      	ldrb	r3, [r3, #0]
    4c0a:	0018      	movs	r0, r3
    4c0c:	4b04      	ldr	r3, [pc, #16]	; (4c20 <system_gclk_chan_set_config+0x3c>)
    4c0e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4c10:	4b04      	ldr	r3, [pc, #16]	; (4c24 <system_gclk_chan_set_config+0x40>)
    4c12:	68fa      	ldr	r2, [r7, #12]
    4c14:	b292      	uxth	r2, r2
    4c16:	805a      	strh	r2, [r3, #2]
}
    4c18:	46c0      	nop			; (mov r8, r8)
    4c1a:	46bd      	mov	sp, r7
    4c1c:	b004      	add	sp, #16
    4c1e:	bd80      	pop	{r7, pc}
    4c20:	00004c71 	.word	0x00004c71
    4c24:	40000c00 	.word	0x40000c00

00004c28 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4c28:	b580      	push	{r7, lr}
    4c2a:	b082      	sub	sp, #8
    4c2c:	af00      	add	r7, sp, #0
    4c2e:	0002      	movs	r2, r0
    4c30:	1dfb      	adds	r3, r7, #7
    4c32:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4c34:	4b0a      	ldr	r3, [pc, #40]	; (4c60 <system_gclk_chan_enable+0x38>)
    4c36:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4c38:	4a0a      	ldr	r2, [pc, #40]	; (4c64 <system_gclk_chan_enable+0x3c>)
    4c3a:	1dfb      	adds	r3, r7, #7
    4c3c:	781b      	ldrb	r3, [r3, #0]
    4c3e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4c40:	4909      	ldr	r1, [pc, #36]	; (4c68 <system_gclk_chan_enable+0x40>)
    4c42:	4b09      	ldr	r3, [pc, #36]	; (4c68 <system_gclk_chan_enable+0x40>)
    4c44:	885b      	ldrh	r3, [r3, #2]
    4c46:	b29b      	uxth	r3, r3
    4c48:	2280      	movs	r2, #128	; 0x80
    4c4a:	01d2      	lsls	r2, r2, #7
    4c4c:	4313      	orrs	r3, r2
    4c4e:	b29b      	uxth	r3, r3
    4c50:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    4c52:	4b06      	ldr	r3, [pc, #24]	; (4c6c <system_gclk_chan_enable+0x44>)
    4c54:	4798      	blx	r3
}
    4c56:	46c0      	nop			; (mov r8, r8)
    4c58:	46bd      	mov	sp, r7
    4c5a:	b002      	add	sp, #8
    4c5c:	bd80      	pop	{r7, pc}
    4c5e:	46c0      	nop			; (mov r8, r8)
    4c60:	00004915 	.word	0x00004915
    4c64:	40000c02 	.word	0x40000c02
    4c68:	40000c00 	.word	0x40000c00
    4c6c:	00004929 	.word	0x00004929

00004c70 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4c70:	b580      	push	{r7, lr}
    4c72:	b084      	sub	sp, #16
    4c74:	af00      	add	r7, sp, #0
    4c76:	0002      	movs	r2, r0
    4c78:	1dfb      	adds	r3, r7, #7
    4c7a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4c7c:	4b1c      	ldr	r3, [pc, #112]	; (4cf0 <system_gclk_chan_disable+0x80>)
    4c7e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4c80:	4a1c      	ldr	r2, [pc, #112]	; (4cf4 <system_gclk_chan_disable+0x84>)
    4c82:	1dfb      	adds	r3, r7, #7
    4c84:	781b      	ldrb	r3, [r3, #0]
    4c86:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4c88:	4b1b      	ldr	r3, [pc, #108]	; (4cf8 <system_gclk_chan_disable+0x88>)
    4c8a:	885b      	ldrh	r3, [r3, #2]
    4c8c:	051b      	lsls	r3, r3, #20
    4c8e:	0f1b      	lsrs	r3, r3, #28
    4c90:	b2db      	uxtb	r3, r3
    4c92:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    4c94:	4a18      	ldr	r2, [pc, #96]	; (4cf8 <system_gclk_chan_disable+0x88>)
    4c96:	8853      	ldrh	r3, [r2, #2]
    4c98:	4918      	ldr	r1, [pc, #96]	; (4cfc <system_gclk_chan_disable+0x8c>)
    4c9a:	400b      	ands	r3, r1
    4c9c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4c9e:	4a16      	ldr	r2, [pc, #88]	; (4cf8 <system_gclk_chan_disable+0x88>)
    4ca0:	4b15      	ldr	r3, [pc, #84]	; (4cf8 <system_gclk_chan_disable+0x88>)
    4ca2:	885b      	ldrh	r3, [r3, #2]
    4ca4:	b29b      	uxth	r3, r3
    4ca6:	4916      	ldr	r1, [pc, #88]	; (4d00 <system_gclk_chan_disable+0x90>)
    4ca8:	400b      	ands	r3, r1
    4caa:	b29b      	uxth	r3, r3
    4cac:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4cae:	46c0      	nop			; (mov r8, r8)
    4cb0:	4b11      	ldr	r3, [pc, #68]	; (4cf8 <system_gclk_chan_disable+0x88>)
    4cb2:	885b      	ldrh	r3, [r3, #2]
    4cb4:	b29b      	uxth	r3, r3
    4cb6:	001a      	movs	r2, r3
    4cb8:	2380      	movs	r3, #128	; 0x80
    4cba:	01db      	lsls	r3, r3, #7
    4cbc:	4013      	ands	r3, r2
    4cbe:	d1f7      	bne.n	4cb0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4cc0:	4a0d      	ldr	r2, [pc, #52]	; (4cf8 <system_gclk_chan_disable+0x88>)
    4cc2:	68fb      	ldr	r3, [r7, #12]
    4cc4:	b2db      	uxtb	r3, r3
    4cc6:	1c19      	adds	r1, r3, #0
    4cc8:	230f      	movs	r3, #15
    4cca:	400b      	ands	r3, r1
    4ccc:	b2d9      	uxtb	r1, r3
    4cce:	8853      	ldrh	r3, [r2, #2]
    4cd0:	1c08      	adds	r0, r1, #0
    4cd2:	210f      	movs	r1, #15
    4cd4:	4001      	ands	r1, r0
    4cd6:	0208      	lsls	r0, r1, #8
    4cd8:	4908      	ldr	r1, [pc, #32]	; (4cfc <system_gclk_chan_disable+0x8c>)
    4cda:	400b      	ands	r3, r1
    4cdc:	1c19      	adds	r1, r3, #0
    4cde:	1c03      	adds	r3, r0, #0
    4ce0:	430b      	orrs	r3, r1
    4ce2:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    4ce4:	4b07      	ldr	r3, [pc, #28]	; (4d04 <system_gclk_chan_disable+0x94>)
    4ce6:	4798      	blx	r3
}
    4ce8:	46c0      	nop			; (mov r8, r8)
    4cea:	46bd      	mov	sp, r7
    4cec:	b004      	add	sp, #16
    4cee:	bd80      	pop	{r7, pc}
    4cf0:	00004915 	.word	0x00004915
    4cf4:	40000c02 	.word	0x40000c02
    4cf8:	40000c00 	.word	0x40000c00
    4cfc:	fffff0ff 	.word	0xfffff0ff
    4d00:	ffffbfff 	.word	0xffffbfff
    4d04:	00004929 	.word	0x00004929

00004d08 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    4d08:	b580      	push	{r7, lr}
    4d0a:	b082      	sub	sp, #8
    4d0c:	af00      	add	r7, sp, #0
    4d0e:	0002      	movs	r2, r0
    4d10:	1dfb      	adds	r3, r7, #7
    4d12:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4d14:	4b09      	ldr	r3, [pc, #36]	; (4d3c <system_gclk_chan_lock+0x34>)
    4d16:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4d18:	4a09      	ldr	r2, [pc, #36]	; (4d40 <system_gclk_chan_lock+0x38>)
    4d1a:	1dfb      	adds	r3, r7, #7
    4d1c:	781b      	ldrb	r3, [r3, #0]
    4d1e:	7013      	strb	r3, [r2, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    4d20:	4a08      	ldr	r2, [pc, #32]	; (4d44 <system_gclk_chan_lock+0x3c>)
    4d22:	4b08      	ldr	r3, [pc, #32]	; (4d44 <system_gclk_chan_lock+0x3c>)
    4d24:	885b      	ldrh	r3, [r3, #2]
    4d26:	b29b      	uxth	r3, r3
    4d28:	4907      	ldr	r1, [pc, #28]	; (4d48 <system_gclk_chan_lock+0x40>)
    4d2a:	430b      	orrs	r3, r1
    4d2c:	b29b      	uxth	r3, r3
    4d2e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    4d30:	4b06      	ldr	r3, [pc, #24]	; (4d4c <system_gclk_chan_lock+0x44>)
    4d32:	4798      	blx	r3
}
    4d34:	46c0      	nop			; (mov r8, r8)
    4d36:	46bd      	mov	sp, r7
    4d38:	b002      	add	sp, #8
    4d3a:	bd80      	pop	{r7, pc}
    4d3c:	00004915 	.word	0x00004915
    4d40:	40000c02 	.word	0x40000c02
    4d44:	40000c00 	.word	0x40000c00
    4d48:	ffffc000 	.word	0xffffc000
    4d4c:	00004929 	.word	0x00004929

00004d50 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4d50:	b580      	push	{r7, lr}
    4d52:	b084      	sub	sp, #16
    4d54:	af00      	add	r7, sp, #0
    4d56:	0002      	movs	r2, r0
    4d58:	1dfb      	adds	r3, r7, #7
    4d5a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4d5c:	4b0d      	ldr	r3, [pc, #52]	; (4d94 <system_gclk_chan_get_hz+0x44>)
    4d5e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4d60:	4a0d      	ldr	r2, [pc, #52]	; (4d98 <system_gclk_chan_get_hz+0x48>)
    4d62:	1dfb      	adds	r3, r7, #7
    4d64:	781b      	ldrb	r3, [r3, #0]
    4d66:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4d68:	4b0c      	ldr	r3, [pc, #48]	; (4d9c <system_gclk_chan_get_hz+0x4c>)
    4d6a:	885b      	ldrh	r3, [r3, #2]
    4d6c:	051b      	lsls	r3, r3, #20
    4d6e:	0f1b      	lsrs	r3, r3, #28
    4d70:	b2da      	uxtb	r2, r3
    4d72:	230f      	movs	r3, #15
    4d74:	18fb      	adds	r3, r7, r3
    4d76:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    4d78:	4b09      	ldr	r3, [pc, #36]	; (4da0 <system_gclk_chan_get_hz+0x50>)
    4d7a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4d7c:	230f      	movs	r3, #15
    4d7e:	18fb      	adds	r3, r7, r3
    4d80:	781b      	ldrb	r3, [r3, #0]
    4d82:	0018      	movs	r0, r3
    4d84:	4b07      	ldr	r3, [pc, #28]	; (4da4 <system_gclk_chan_get_hz+0x54>)
    4d86:	4798      	blx	r3
    4d88:	0003      	movs	r3, r0
}
    4d8a:	0018      	movs	r0, r3
    4d8c:	46bd      	mov	sp, r7
    4d8e:	b004      	add	sp, #16
    4d90:	bd80      	pop	{r7, pc}
    4d92:	46c0      	nop			; (mov r8, r8)
    4d94:	00004915 	.word	0x00004915
    4d98:	40000c02 	.word	0x40000c02
    4d9c:	40000c00 	.word	0x40000c00
    4da0:	00004929 	.word	0x00004929
    4da4:	00004b0d 	.word	0x00004b0d

00004da8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    4da8:	b580      	push	{r7, lr}
    4daa:	af00      	add	r7, sp, #0
	return;
    4dac:	46c0      	nop			; (mov r8, r8)
}
    4dae:	46bd      	mov	sp, r7
    4db0:	bd80      	pop	{r7, pc}
	...

00004db4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4db4:	b580      	push	{r7, lr}
    4db6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4db8:	4b06      	ldr	r3, [pc, #24]	; (4dd4 <system_init+0x20>)
    4dba:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4dbc:	4b06      	ldr	r3, [pc, #24]	; (4dd8 <system_init+0x24>)
    4dbe:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4dc0:	4b06      	ldr	r3, [pc, #24]	; (4ddc <system_init+0x28>)
    4dc2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4dc4:	4b06      	ldr	r3, [pc, #24]	; (4de0 <system_init+0x2c>)
    4dc6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4dc8:	4b06      	ldr	r3, [pc, #24]	; (4de4 <system_init+0x30>)
    4dca:	4798      	blx	r3
}
    4dcc:	46c0      	nop			; (mov r8, r8)
    4dce:	46bd      	mov	sp, r7
    4dd0:	bd80      	pop	{r7, pc}
    4dd2:	46c0      	nop			; (mov r8, r8)
    4dd4:	000046f5 	.word	0x000046f5
    4dd8:	000042e5 	.word	0x000042e5
    4ddc:	00004da9 	.word	0x00004da9
    4de0:	00000961 	.word	0x00000961
    4de4:	00004da9 	.word	0x00004da9

00004de8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4de8:	b580      	push	{r7, lr}
    4dea:	b082      	sub	sp, #8
    4dec:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    4dee:	4b2f      	ldr	r3, [pc, #188]	; (4eac <Reset_Handler+0xc4>)
    4df0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    4df2:	4b2f      	ldr	r3, [pc, #188]	; (4eb0 <Reset_Handler+0xc8>)
    4df4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    4df6:	687a      	ldr	r2, [r7, #4]
    4df8:	683b      	ldr	r3, [r7, #0]
    4dfa:	429a      	cmp	r2, r3
    4dfc:	d00c      	beq.n	4e18 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    4dfe:	e007      	b.n	4e10 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    4e00:	683b      	ldr	r3, [r7, #0]
    4e02:	1d1a      	adds	r2, r3, #4
    4e04:	603a      	str	r2, [r7, #0]
    4e06:	687a      	ldr	r2, [r7, #4]
    4e08:	1d11      	adds	r1, r2, #4
    4e0a:	6079      	str	r1, [r7, #4]
    4e0c:	6812      	ldr	r2, [r2, #0]
    4e0e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    4e10:	683a      	ldr	r2, [r7, #0]
    4e12:	4b28      	ldr	r3, [pc, #160]	; (4eb4 <Reset_Handler+0xcc>)
    4e14:	429a      	cmp	r2, r3
    4e16:	d3f3      	bcc.n	4e00 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4e18:	4b27      	ldr	r3, [pc, #156]	; (4eb8 <Reset_Handler+0xd0>)
    4e1a:	603b      	str	r3, [r7, #0]
    4e1c:	e004      	b.n	4e28 <Reset_Handler+0x40>
                *pDest++ = 0;
    4e1e:	683b      	ldr	r3, [r7, #0]
    4e20:	1d1a      	adds	r2, r3, #4
    4e22:	603a      	str	r2, [r7, #0]
    4e24:	2200      	movs	r2, #0
    4e26:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    4e28:	683a      	ldr	r2, [r7, #0]
    4e2a:	4b24      	ldr	r3, [pc, #144]	; (4ebc <Reset_Handler+0xd4>)
    4e2c:	429a      	cmp	r2, r3
    4e2e:	d3f6      	bcc.n	4e1e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    4e30:	4b23      	ldr	r3, [pc, #140]	; (4ec0 <Reset_Handler+0xd8>)
    4e32:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4e34:	4b23      	ldr	r3, [pc, #140]	; (4ec4 <Reset_Handler+0xdc>)
    4e36:	687a      	ldr	r2, [r7, #4]
    4e38:	21ff      	movs	r1, #255	; 0xff
    4e3a:	438a      	bics	r2, r1
    4e3c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4e3e:	4a22      	ldr	r2, [pc, #136]	; (4ec8 <Reset_Handler+0xe0>)
    4e40:	2390      	movs	r3, #144	; 0x90
    4e42:	005b      	lsls	r3, r3, #1
    4e44:	2102      	movs	r1, #2
    4e46:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4e48:	4a20      	ldr	r2, [pc, #128]	; (4ecc <Reset_Handler+0xe4>)
    4e4a:	78d3      	ldrb	r3, [r2, #3]
    4e4c:	2103      	movs	r1, #3
    4e4e:	438b      	bics	r3, r1
    4e50:	1c19      	adds	r1, r3, #0
    4e52:	2302      	movs	r3, #2
    4e54:	430b      	orrs	r3, r1
    4e56:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4e58:	4a1c      	ldr	r2, [pc, #112]	; (4ecc <Reset_Handler+0xe4>)
    4e5a:	78d3      	ldrb	r3, [r2, #3]
    4e5c:	210c      	movs	r1, #12
    4e5e:	438b      	bics	r3, r1
    4e60:	1c19      	adds	r1, r3, #0
    4e62:	2308      	movs	r3, #8
    4e64:	430b      	orrs	r3, r1
    4e66:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    4e68:	4a19      	ldr	r2, [pc, #100]	; (4ed0 <Reset_Handler+0xe8>)
    4e6a:	7b93      	ldrb	r3, [r2, #14]
    4e6c:	2130      	movs	r1, #48	; 0x30
    4e6e:	438b      	bics	r3, r1
    4e70:	1c19      	adds	r1, r3, #0
    4e72:	2320      	movs	r3, #32
    4e74:	430b      	orrs	r3, r1
    4e76:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4e78:	4a15      	ldr	r2, [pc, #84]	; (4ed0 <Reset_Handler+0xe8>)
    4e7a:	7b93      	ldrb	r3, [r2, #14]
    4e7c:	210c      	movs	r1, #12
    4e7e:	438b      	bics	r3, r1
    4e80:	1c19      	adds	r1, r3, #0
    4e82:	2308      	movs	r3, #8
    4e84:	430b      	orrs	r3, r1
    4e86:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4e88:	4a11      	ldr	r2, [pc, #68]	; (4ed0 <Reset_Handler+0xe8>)
    4e8a:	7b93      	ldrb	r3, [r2, #14]
    4e8c:	2103      	movs	r1, #3
    4e8e:	438b      	bics	r3, r1
    4e90:	1c19      	adds	r1, r3, #0
    4e92:	2302      	movs	r3, #2
    4e94:	430b      	orrs	r3, r1
    4e96:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    4e98:	4a0e      	ldr	r2, [pc, #56]	; (4ed4 <Reset_Handler+0xec>)
    4e9a:	6853      	ldr	r3, [r2, #4]
    4e9c:	2180      	movs	r1, #128	; 0x80
    4e9e:	430b      	orrs	r3, r1
    4ea0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    4ea2:	4b0d      	ldr	r3, [pc, #52]	; (4ed8 <Reset_Handler+0xf0>)
    4ea4:	4798      	blx	r3

        /* Branch to main function */
        main();
    4ea6:	4b0d      	ldr	r3, [pc, #52]	; (4edc <Reset_Handler+0xf4>)
    4ea8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    4eaa:	e7fe      	b.n	4eaa <Reset_Handler+0xc2>
    4eac:	0000740c 	.word	0x0000740c
    4eb0:	20000000 	.word	0x20000000
    4eb4:	2000053c 	.word	0x2000053c
    4eb8:	2000053c 	.word	0x2000053c
    4ebc:	2000176c 	.word	0x2000176c
    4ec0:	00000000 	.word	0x00000000
    4ec4:	e000ed00 	.word	0xe000ed00
    4ec8:	41007000 	.word	0x41007000
    4ecc:	41005000 	.word	0x41005000
    4ed0:	41004800 	.word	0x41004800
    4ed4:	41004000 	.word	0x41004000
    4ed8:	00005959 	.word	0x00005959
    4edc:	00004f71 	.word	0x00004f71

00004ee0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4ee0:	b580      	push	{r7, lr}
    4ee2:	b082      	sub	sp, #8
    4ee4:	af00      	add	r7, sp, #0
	int32_t phantomISR = 9999;
    4ee6:	4b04      	ldr	r3, [pc, #16]	; (4ef8 <Dummy_Handler+0x18>)
    4ee8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4eea:	f3ef 8305 	mrs	r3, IPSR
    4eee:	603b      	str	r3, [r7, #0]
  return(result);
    4ef0:	683b      	ldr	r3, [r7, #0]
        while (1) {
			phantomISR = __get_IPSR();
    4ef2:	607b      	str	r3, [r7, #4]
    4ef4:	e7f9      	b.n	4eea <Dummy_Handler+0xa>
    4ef6:	46c0      	nop			; (mov r8, r8)
    4ef8:	0000270f 	.word	0x0000270f

00004efc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4efc:	b580      	push	{r7, lr}
    4efe:	b084      	sub	sp, #16
    4f00:	af00      	add	r7, sp, #0
    4f02:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4f04:	4b0a      	ldr	r3, [pc, #40]	; (4f30 <_sbrk+0x34>)
    4f06:	681b      	ldr	r3, [r3, #0]
    4f08:	2b00      	cmp	r3, #0
    4f0a:	d102      	bne.n	4f12 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    4f0c:	4b08      	ldr	r3, [pc, #32]	; (4f30 <_sbrk+0x34>)
    4f0e:	4a09      	ldr	r2, [pc, #36]	; (4f34 <_sbrk+0x38>)
    4f10:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    4f12:	4b07      	ldr	r3, [pc, #28]	; (4f30 <_sbrk+0x34>)
    4f14:	681b      	ldr	r3, [r3, #0]
    4f16:	60fb      	str	r3, [r7, #12]

	heap += incr;
    4f18:	4b05      	ldr	r3, [pc, #20]	; (4f30 <_sbrk+0x34>)
    4f1a:	681a      	ldr	r2, [r3, #0]
    4f1c:	687b      	ldr	r3, [r7, #4]
    4f1e:	18d2      	adds	r2, r2, r3
    4f20:	4b03      	ldr	r3, [pc, #12]	; (4f30 <_sbrk+0x34>)
    4f22:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    4f24:	68fb      	ldr	r3, [r7, #12]
}
    4f26:	0018      	movs	r0, r3
    4f28:	46bd      	mov	sp, r7
    4f2a:	b004      	add	sp, #16
    4f2c:	bd80      	pop	{r7, pc}
    4f2e:	46c0      	nop			; (mov r8, r8)
    4f30:	20000588 	.word	0x20000588
    4f34:	20003770 	.word	0x20003770

00004f38 <system_interrupt_enable_global>:
{
    4f38:	b580      	push	{r7, lr}
    4f3a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    4f3c:	4b04      	ldr	r3, [pc, #16]	; (4f50 <system_interrupt_enable_global+0x18>)
    4f3e:	2201      	movs	r2, #1
    4f40:	701a      	strb	r2, [r3, #0]
    4f42:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4f46:	b662      	cpsie	i
}
    4f48:	46c0      	nop			; (mov r8, r8)
    4f4a:	46bd      	mov	sp, r7
    4f4c:	bd80      	pop	{r7, pc}
    4f4e:	46c0      	nop			; (mov r8, r8)
    4f50:	20000368 	.word	0x20000368

00004f54 <system_interrupt_disable_global>:
{
    4f54:	b580      	push	{r7, lr}
    4f56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
    4f58:	b672      	cpsid	i
    4f5a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4f5e:	4b03      	ldr	r3, [pc, #12]	; (4f6c <system_interrupt_disable_global+0x18>)
    4f60:	2200      	movs	r2, #0
    4f62:	701a      	strb	r2, [r3, #0]
}
    4f64:	46c0      	nop			; (mov r8, r8)
    4f66:	46bd      	mov	sp, r7
    4f68:	bd80      	pop	{r7, pc}
    4f6a:	46c0      	nop			; (mov r8, r8)
    4f6c:	20000368 	.word	0x20000368

00004f70 <main>:
char buffer[32];



int main (void)
{
    4f70:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f72:	b097      	sub	sp, #92	; 0x5c
    4f74:	af00      	add	r7, sp, #0
	
	system_init();
    4f76:	4bec      	ldr	r3, [pc, #944]	; (5328 <main+0x3b8>)
    4f78:	4798      	blx	r3
	delay_init();
    4f7a:	4bec      	ldr	r3, [pc, #944]	; (532c <main+0x3bc>)
    4f7c:	4798      	blx	r3
	
	
	
	//sounds_init_pins();
	//sb_uart_init();
	delay_ms(1500);
    4f7e:	2000      	movs	r0, #0
    4f80:	4beb      	ldr	r3, [pc, #940]	; (5330 <main+0x3c0>)
    4f82:	4798      	blx	r3
    4f84:	0003      	movs	r3, r0
    4f86:	001d      	movs	r5, r3
    4f88:	2300      	movs	r3, #0
    4f8a:	001e      	movs	r6, r3
    4f8c:	4ce9      	ldr	r4, [pc, #932]	; (5334 <main+0x3c4>)
    4f8e:	4aea      	ldr	r2, [pc, #936]	; (5338 <main+0x3c8>)
    4f90:	2300      	movs	r3, #0
    4f92:	0028      	movs	r0, r5
    4f94:	0031      	movs	r1, r6
    4f96:	47a0      	blx	r4
    4f98:	0003      	movs	r3, r0
    4f9a:	000c      	movs	r4, r1
    4f9c:	0019      	movs	r1, r3
    4f9e:	0022      	movs	r2, r4
    4fa0:	4be6      	ldr	r3, [pc, #920]	; (533c <main+0x3cc>)
    4fa2:	2400      	movs	r4, #0
    4fa4:	18c9      	adds	r1, r1, r3
    4fa6:	4162      	adcs	r2, r4
    4fa8:	0008      	movs	r0, r1
    4faa:	0011      	movs	r1, r2
    4fac:	4ce4      	ldr	r4, [pc, #912]	; (5340 <main+0x3d0>)
    4fae:	4ae5      	ldr	r2, [pc, #916]	; (5344 <main+0x3d4>)
    4fb0:	2300      	movs	r3, #0
    4fb2:	47a0      	blx	r4
    4fb4:	0003      	movs	r3, r0
    4fb6:	000c      	movs	r4, r1
    4fb8:	0018      	movs	r0, r3
    4fba:	4be3      	ldr	r3, [pc, #908]	; (5348 <main+0x3d8>)
    4fbc:	4798      	blx	r3
	//sounds_reset();

	obd_init();
    4fbe:	4be3      	ldr	r3, [pc, #908]	; (534c <main+0x3dc>)
    4fc0:	4798      	blx	r3
	//int sound_no = 0;
	
	while (1)
	{
		
		if (obd_should_update)
    4fc2:	4be3      	ldr	r3, [pc, #908]	; (5350 <main+0x3e0>)
    4fc4:	781b      	ldrb	r3, [r3, #0]
    4fc6:	2b00      	cmp	r3, #0
    4fc8:	d023      	beq.n	5012 <main+0xa2>
		{
			char buffer[32];
			sprintf(buffer,"Battery: %dV\r\n",(int)get_battery_voltage());
    4fca:	4be2      	ldr	r3, [pc, #904]	; (5354 <main+0x3e4>)
    4fcc:	4798      	blx	r3
    4fce:	1c02      	adds	r2, r0, #0
    4fd0:	4be1      	ldr	r3, [pc, #900]	; (5358 <main+0x3e8>)
    4fd2:	1c10      	adds	r0, r2, #0
    4fd4:	4798      	blx	r3
    4fd6:	0002      	movs	r2, r0
    4fd8:	49e0      	ldr	r1, [pc, #896]	; (535c <main+0x3ec>)
    4fda:	2334      	movs	r3, #52	; 0x34
    4fdc:	18fb      	adds	r3, r7, r3
    4fde:	0018      	movs	r0, r3
    4fe0:	4bdf      	ldr	r3, [pc, #892]	; (5360 <main+0x3f0>)
    4fe2:	4798      	blx	r3
			ble_uart_write(buffer);
    4fe4:	2334      	movs	r3, #52	; 0x34
    4fe6:	18fb      	adds	r3, r7, r3
    4fe8:	0018      	movs	r0, r3
    4fea:	4bde      	ldr	r3, [pc, #888]	; (5364 <main+0x3f4>)
    4fec:	4798      	blx	r3
			sprintf(buffer,"RPM: %d\r\n",get_engine_rpm());
    4fee:	4bde      	ldr	r3, [pc, #888]	; (5368 <main+0x3f8>)
    4ff0:	4798      	blx	r3
    4ff2:	0003      	movs	r3, r0
    4ff4:	001a      	movs	r2, r3
    4ff6:	49dd      	ldr	r1, [pc, #884]	; (536c <main+0x3fc>)
    4ff8:	2334      	movs	r3, #52	; 0x34
    4ffa:	18fb      	adds	r3, r7, r3
    4ffc:	0018      	movs	r0, r3
    4ffe:	4bd8      	ldr	r3, [pc, #864]	; (5360 <main+0x3f0>)
    5000:	4798      	blx	r3
			ble_uart_write(buffer);
    5002:	2334      	movs	r3, #52	; 0x34
    5004:	18fb      	adds	r3, r7, r3
    5006:	0018      	movs	r0, r3
    5008:	4bd6      	ldr	r3, [pc, #856]	; (5364 <main+0x3f4>)
    500a:	4798      	blx	r3
			obd_should_update = false;
    500c:	4ad0      	ldr	r2, [pc, #832]	; (5350 <main+0x3e0>)
    500e:	2300      	movs	r3, #0
    5010:	7013      	strb	r3, [r2, #0]
		}
		
		if (is_started())
    5012:	4bd7      	ldr	r3, [pc, #860]	; (5370 <main+0x400>)
    5014:	4798      	blx	r3
			delay_ms(1000);
			sb_play_track_by_number(4);*/
		}
		
		
		for (uint32_t i=0;i<sizeof(rx_buffer_array)-1;i++)
    5016:	2300      	movs	r3, #0
    5018:	657b      	str	r3, [r7, #84]	; 0x54
    501a:	e025      	b.n	5068 <main+0xf8>
		{
			if (rx_buffer_array[i] == '\n' & rx_buffer_array[i+1] == 0)//'\n')
    501c:	4ad5      	ldr	r2, [pc, #852]	; (5374 <main+0x404>)
    501e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5020:	18d3      	adds	r3, r2, r3
    5022:	781b      	ldrb	r3, [r3, #0]
    5024:	b2db      	uxtb	r3, r3
    5026:	3b0a      	subs	r3, #10
    5028:	425a      	negs	r2, r3
    502a:	4153      	adcs	r3, r2
    502c:	b2d9      	uxtb	r1, r3
    502e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5030:	1c5a      	adds	r2, r3, #1
    5032:	4bd0      	ldr	r3, [pc, #832]	; (5374 <main+0x404>)
    5034:	5c9b      	ldrb	r3, [r3, r2]
    5036:	b2db      	uxtb	r3, r3
    5038:	425a      	negs	r2, r3
    503a:	4153      	adcs	r3, r2
    503c:	b2db      	uxtb	r3, r3
    503e:	400b      	ands	r3, r1
    5040:	b2db      	uxtb	r3, r3
    5042:	2b00      	cmp	r3, #0
    5044:	d006      	beq.n	5054 <main+0xe4>
			{
				data_handler(rx_buffer_array);
    5046:	4bcb      	ldr	r3, [pc, #812]	; (5374 <main+0x404>)
    5048:	0018      	movs	r0, r3
    504a:	4bcb      	ldr	r3, [pc, #812]	; (5378 <main+0x408>)
    504c:	4798      	blx	r3
				reset_buffers();
    504e:	4bcb      	ldr	r3, [pc, #812]	; (537c <main+0x40c>)
    5050:	4798      	blx	r3
    5052:	e006      	b.n	5062 <main+0xf2>
			}
			else if (rx_buffer_array[i] == 0)
    5054:	4ac7      	ldr	r2, [pc, #796]	; (5374 <main+0x404>)
    5056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5058:	18d3      	adds	r3, r2, r3
    505a:	781b      	ldrb	r3, [r3, #0]
    505c:	b2db      	uxtb	r3, r3
    505e:	2b00      	cmp	r3, #0
    5060:	d007      	beq.n	5072 <main+0x102>
		for (uint32_t i=0;i<sizeof(rx_buffer_array)-1;i++)
    5062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5064:	3301      	adds	r3, #1
    5066:	657b      	str	r3, [r7, #84]	; 0x54
    5068:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    506a:	4bc5      	ldr	r3, [pc, #788]	; (5380 <main+0x410>)
    506c:	429a      	cmp	r2, r3
    506e:	d9d5      	bls.n	501c <main+0xac>
    5070:	e000      	b.n	5074 <main+0x104>
			{
				break;
    5072:	46c0      	nop			; (mov r8, r8)
			}
		}
		
		sb_event_handler(sb_rx_buffer_array);
    5074:	4bc3      	ldr	r3, [pc, #780]	; (5384 <main+0x414>)
    5076:	0018      	movs	r0, r3
    5078:	4bc3      	ldr	r3, [pc, #780]	; (5388 <main+0x418>)
    507a:	4798      	blx	r3
				delay_ms(250);
				sb_play_track_by_number(2);
			}
			//sb_uart_write(buffer);
		}*/
		if (should_update)
    507c:	4bc3      	ldr	r3, [pc, #780]	; (538c <main+0x41c>)
    507e:	781b      	ldrb	r3, [r3, #0]
    5080:	2b00      	cmp	r3, #0
    5082:	d006      	beq.n	5092 <main+0x122>
		{
			should_update = false;
    5084:	4ac1      	ldr	r2, [pc, #772]	; (538c <main+0x41c>)
    5086:	2300      	movs	r3, #0
    5088:	7013      	strb	r3, [r2, #0]
			things_to_do();
    508a:	4bc1      	ldr	r3, [pc, #772]	; (5390 <main+0x420>)
    508c:	4798      	blx	r3
			update_all_ports();
    508e:	4bc1      	ldr	r3, [pc, #772]	; (5394 <main+0x424>)
    5090:	4798      	blx	r3
		}
		if (execute_order_66)
    5092:	4bc1      	ldr	r3, [pc, #772]	; (5398 <main+0x428>)
    5094:	781b      	ldrb	r3, [r3, #0]
    5096:	2b00      	cmp	r3, #0
    5098:	d00e      	beq.n	50b8 <main+0x148>
		{
			system_interrupt_disable_global();
    509a:	4bc0      	ldr	r3, [pc, #768]	; (539c <main+0x42c>)
    509c:	4798      	blx	r3
			ble_uart_write("EXEC ORDER 66\n");
    509e:	4bc0      	ldr	r3, [pc, #768]	; (53a0 <main+0x430>)
    50a0:	0018      	movs	r0, r3
    50a2:	4bb0      	ldr	r3, [pc, #704]	; (5364 <main+0x3f4>)
    50a4:	4798      	blx	r3
			execute_order_66 = false;
    50a6:	4abc      	ldr	r2, [pc, #752]	; (5398 <main+0x428>)
    50a8:	2300      	movs	r3, #0
    50aa:	7013      	strb	r3, [r2, #0]
			//init_all_ports();
			mcp23017_reset();
    50ac:	4bbd      	ldr	r3, [pc, #756]	; (53a4 <main+0x434>)
    50ae:	4798      	blx	r3
			a_okay();
    50b0:	4bbd      	ldr	r3, [pc, #756]	; (53a8 <main+0x438>)
    50b2:	4798      	blx	r3
			system_interrupt_enable_global();
    50b4:	4bbd      	ldr	r3, [pc, #756]	; (53ac <main+0x43c>)
    50b6:	4798      	blx	r3
		}
		
		if (valve_open)
    50b8:	4bbd      	ldr	r3, [pc, #756]	; (53b0 <main+0x440>)
    50ba:	781b      	ldrb	r3, [r3, #0]
    50bc:	b2db      	uxtb	r3, r3
    50be:	2b00      	cmp	r3, #0
    50c0:	d100      	bne.n	50c4 <main+0x154>
    50c2:	e08f      	b.n	51e4 <main+0x274>
		{
			system_interrupt_disable_global();
    50c4:	4bb5      	ldr	r3, [pc, #724]	; (539c <main+0x42c>)
    50c6:	4798      	blx	r3
			valve_open = false;
    50c8:	4ab9      	ldr	r2, [pc, #740]	; (53b0 <main+0x440>)
    50ca:	2300      	movs	r3, #0
    50cc:	7013      	strb	r3, [r2, #0]
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,true);
    50ce:	2301      	movs	r3, #1
    50d0:	2200      	movs	r2, #0
    50d2:	2105      	movs	r1, #5
    50d4:	2000      	movs	r0, #0
    50d6:	4cb7      	ldr	r4, [pc, #732]	; (53b4 <main+0x444>)
    50d8:	47a0      	blx	r4
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    50da:	2300      	movs	r3, #0
    50dc:	2201      	movs	r2, #1
    50de:	2105      	movs	r1, #5
    50e0:	2000      	movs	r0, #0
    50e2:	4cb4      	ldr	r4, [pc, #720]	; (53b4 <main+0x444>)
    50e4:	47a0      	blx	r4
			update_all_ports();
    50e6:	4bab      	ldr	r3, [pc, #684]	; (5394 <main+0x424>)
    50e8:	4798      	blx	r3
			delay_ms(300);
    50ea:	2000      	movs	r0, #0
    50ec:	4b90      	ldr	r3, [pc, #576]	; (5330 <main+0x3c0>)
    50ee:	4798      	blx	r3
    50f0:	0003      	movs	r3, r0
    50f2:	62bb      	str	r3, [r7, #40]	; 0x28
    50f4:	2300      	movs	r3, #0
    50f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    50f8:	4c8e      	ldr	r4, [pc, #568]	; (5334 <main+0x3c4>)
    50fa:	2296      	movs	r2, #150	; 0x96
    50fc:	0052      	lsls	r2, r2, #1
    50fe:	2300      	movs	r3, #0
    5100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5102:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    5104:	47a0      	blx	r4
    5106:	0003      	movs	r3, r0
    5108:	000c      	movs	r4, r1
    510a:	0019      	movs	r1, r3
    510c:	0022      	movs	r2, r4
    510e:	4b8b      	ldr	r3, [pc, #556]	; (533c <main+0x3cc>)
    5110:	2400      	movs	r4, #0
    5112:	18c9      	adds	r1, r1, r3
    5114:	4162      	adcs	r2, r4
    5116:	0008      	movs	r0, r1
    5118:	0011      	movs	r1, r2
    511a:	4c89      	ldr	r4, [pc, #548]	; (5340 <main+0x3d0>)
    511c:	4a89      	ldr	r2, [pc, #548]	; (5344 <main+0x3d4>)
    511e:	2300      	movs	r3, #0
    5120:	47a0      	blx	r4
    5122:	0003      	movs	r3, r0
    5124:	000c      	movs	r4, r1
    5126:	0018      	movs	r0, r3
    5128:	4b87      	ldr	r3, [pc, #540]	; (5348 <main+0x3d8>)
    512a:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    512c:	2300      	movs	r3, #0
    512e:	2200      	movs	r2, #0
    5130:	2105      	movs	r1, #5
    5132:	2000      	movs	r0, #0
    5134:	4c9f      	ldr	r4, [pc, #636]	; (53b4 <main+0x444>)
    5136:	47a0      	blx	r4
			update_all_ports();
    5138:	4b96      	ldr	r3, [pc, #600]	; (5394 <main+0x424>)
    513a:	4798      	blx	r3
			delay_ms(4000);
    513c:	2000      	movs	r0, #0
    513e:	4b7c      	ldr	r3, [pc, #496]	; (5330 <main+0x3c0>)
    5140:	4798      	blx	r3
    5142:	0003      	movs	r3, r0
    5144:	623b      	str	r3, [r7, #32]
    5146:	2300      	movs	r3, #0
    5148:	627b      	str	r3, [r7, #36]	; 0x24
    514a:	4c7a      	ldr	r4, [pc, #488]	; (5334 <main+0x3c4>)
    514c:	22fa      	movs	r2, #250	; 0xfa
    514e:	0112      	lsls	r2, r2, #4
    5150:	2300      	movs	r3, #0
    5152:	6a38      	ldr	r0, [r7, #32]
    5154:	6a79      	ldr	r1, [r7, #36]	; 0x24
    5156:	47a0      	blx	r4
    5158:	0003      	movs	r3, r0
    515a:	000c      	movs	r4, r1
    515c:	0019      	movs	r1, r3
    515e:	0022      	movs	r2, r4
    5160:	4b76      	ldr	r3, [pc, #472]	; (533c <main+0x3cc>)
    5162:	2400      	movs	r4, #0
    5164:	18c9      	adds	r1, r1, r3
    5166:	4162      	adcs	r2, r4
    5168:	0008      	movs	r0, r1
    516a:	0011      	movs	r1, r2
    516c:	4c74      	ldr	r4, [pc, #464]	; (5340 <main+0x3d0>)
    516e:	4a75      	ldr	r2, [pc, #468]	; (5344 <main+0x3d4>)
    5170:	2300      	movs	r3, #0
    5172:	47a0      	blx	r4
    5174:	0003      	movs	r3, r0
    5176:	000c      	movs	r4, r1
    5178:	0018      	movs	r0, r3
    517a:	4b73      	ldr	r3, [pc, #460]	; (5348 <main+0x3d8>)
    517c:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,true);
    517e:	2301      	movs	r3, #1
    5180:	2200      	movs	r2, #0
    5182:	2105      	movs	r1, #5
    5184:	2000      	movs	r0, #0
    5186:	4c8b      	ldr	r4, [pc, #556]	; (53b4 <main+0x444>)
    5188:	47a0      	blx	r4
			update_all_ports();
    518a:	4b82      	ldr	r3, [pc, #520]	; (5394 <main+0x424>)
    518c:	4798      	blx	r3
			delay_ms(300);
    518e:	2000      	movs	r0, #0
    5190:	4b67      	ldr	r3, [pc, #412]	; (5330 <main+0x3c0>)
    5192:	4798      	blx	r3
    5194:	0003      	movs	r3, r0
    5196:	61bb      	str	r3, [r7, #24]
    5198:	2300      	movs	r3, #0
    519a:	61fb      	str	r3, [r7, #28]
    519c:	4c65      	ldr	r4, [pc, #404]	; (5334 <main+0x3c4>)
    519e:	2296      	movs	r2, #150	; 0x96
    51a0:	0052      	lsls	r2, r2, #1
    51a2:	2300      	movs	r3, #0
    51a4:	69b8      	ldr	r0, [r7, #24]
    51a6:	69f9      	ldr	r1, [r7, #28]
    51a8:	47a0      	blx	r4
    51aa:	0003      	movs	r3, r0
    51ac:	000c      	movs	r4, r1
    51ae:	0019      	movs	r1, r3
    51b0:	0022      	movs	r2, r4
    51b2:	4b62      	ldr	r3, [pc, #392]	; (533c <main+0x3cc>)
    51b4:	2400      	movs	r4, #0
    51b6:	18c9      	adds	r1, r1, r3
    51b8:	4162      	adcs	r2, r4
    51ba:	0008      	movs	r0, r1
    51bc:	0011      	movs	r1, r2
    51be:	4c60      	ldr	r4, [pc, #384]	; (5340 <main+0x3d0>)
    51c0:	4a60      	ldr	r2, [pc, #384]	; (5344 <main+0x3d4>)
    51c2:	2300      	movs	r3, #0
    51c4:	47a0      	blx	r4
    51c6:	0003      	movs	r3, r0
    51c8:	000c      	movs	r4, r1
    51ca:	0018      	movs	r0, r3
    51cc:	4b5e      	ldr	r3, [pc, #376]	; (5348 <main+0x3d8>)
    51ce:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    51d0:	2300      	movs	r3, #0
    51d2:	2200      	movs	r2, #0
    51d4:	2105      	movs	r1, #5
    51d6:	2000      	movs	r0, #0
    51d8:	4c76      	ldr	r4, [pc, #472]	; (53b4 <main+0x444>)
    51da:	47a0      	blx	r4
			update_all_ports();
    51dc:	4b6d      	ldr	r3, [pc, #436]	; (5394 <main+0x424>)
    51de:	4798      	blx	r3
			system_interrupt_enable_global();
    51e0:	4b72      	ldr	r3, [pc, #456]	; (53ac <main+0x43c>)
    51e2:	4798      	blx	r3
		}
		if (valve_close)
    51e4:	4b74      	ldr	r3, [pc, #464]	; (53b8 <main+0x448>)
    51e6:	781b      	ldrb	r3, [r3, #0]
    51e8:	b2db      	uxtb	r3, r3
    51ea:	2b00      	cmp	r3, #0
    51ec:	d100      	bne.n	51f0 <main+0x280>
    51ee:	e08f      	b.n	5310 <main+0x3a0>
		{
			system_interrupt_disable_global();
    51f0:	4b6a      	ldr	r3, [pc, #424]	; (539c <main+0x42c>)
    51f2:	4798      	blx	r3
			valve_close = false;
    51f4:	4a70      	ldr	r2, [pc, #448]	; (53b8 <main+0x448>)
    51f6:	2300      	movs	r3, #0
    51f8:	7013      	strb	r3, [r2, #0]
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    51fa:	2300      	movs	r3, #0
    51fc:	2200      	movs	r2, #0
    51fe:	2105      	movs	r1, #5
    5200:	2000      	movs	r0, #0
    5202:	4c6c      	ldr	r4, [pc, #432]	; (53b4 <main+0x444>)
    5204:	47a0      	blx	r4
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,true);
    5206:	2301      	movs	r3, #1
    5208:	2201      	movs	r2, #1
    520a:	2105      	movs	r1, #5
    520c:	2000      	movs	r0, #0
    520e:	4c69      	ldr	r4, [pc, #420]	; (53b4 <main+0x444>)
    5210:	47a0      	blx	r4
			update_all_ports();
    5212:	4b60      	ldr	r3, [pc, #384]	; (5394 <main+0x424>)
    5214:	4798      	blx	r3
			delay_ms(300);
    5216:	2000      	movs	r0, #0
    5218:	4b45      	ldr	r3, [pc, #276]	; (5330 <main+0x3c0>)
    521a:	4798      	blx	r3
    521c:	0003      	movs	r3, r0
    521e:	613b      	str	r3, [r7, #16]
    5220:	2300      	movs	r3, #0
    5222:	617b      	str	r3, [r7, #20]
    5224:	4c43      	ldr	r4, [pc, #268]	; (5334 <main+0x3c4>)
    5226:	2296      	movs	r2, #150	; 0x96
    5228:	0052      	lsls	r2, r2, #1
    522a:	2300      	movs	r3, #0
    522c:	6938      	ldr	r0, [r7, #16]
    522e:	6979      	ldr	r1, [r7, #20]
    5230:	47a0      	blx	r4
    5232:	0003      	movs	r3, r0
    5234:	000c      	movs	r4, r1
    5236:	0019      	movs	r1, r3
    5238:	0022      	movs	r2, r4
    523a:	4b40      	ldr	r3, [pc, #256]	; (533c <main+0x3cc>)
    523c:	2400      	movs	r4, #0
    523e:	18c9      	adds	r1, r1, r3
    5240:	4162      	adcs	r2, r4
    5242:	0008      	movs	r0, r1
    5244:	0011      	movs	r1, r2
    5246:	4c3e      	ldr	r4, [pc, #248]	; (5340 <main+0x3d0>)
    5248:	4a3e      	ldr	r2, [pc, #248]	; (5344 <main+0x3d4>)
    524a:	2300      	movs	r3, #0
    524c:	47a0      	blx	r4
    524e:	0003      	movs	r3, r0
    5250:	000c      	movs	r4, r1
    5252:	0018      	movs	r0, r3
    5254:	4b3c      	ldr	r3, [pc, #240]	; (5348 <main+0x3d8>)
    5256:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    5258:	2300      	movs	r3, #0
    525a:	2201      	movs	r2, #1
    525c:	2105      	movs	r1, #5
    525e:	2000      	movs	r0, #0
    5260:	4c54      	ldr	r4, [pc, #336]	; (53b4 <main+0x444>)
    5262:	47a0      	blx	r4
			update_all_ports();
    5264:	4b4b      	ldr	r3, [pc, #300]	; (5394 <main+0x424>)
    5266:	4798      	blx	r3
			delay_ms(4000);
    5268:	2000      	movs	r0, #0
    526a:	4b31      	ldr	r3, [pc, #196]	; (5330 <main+0x3c0>)
    526c:	4798      	blx	r3
    526e:	0003      	movs	r3, r0
    5270:	60bb      	str	r3, [r7, #8]
    5272:	2300      	movs	r3, #0
    5274:	60fb      	str	r3, [r7, #12]
    5276:	4c2f      	ldr	r4, [pc, #188]	; (5334 <main+0x3c4>)
    5278:	22fa      	movs	r2, #250	; 0xfa
    527a:	0112      	lsls	r2, r2, #4
    527c:	2300      	movs	r3, #0
    527e:	68b8      	ldr	r0, [r7, #8]
    5280:	68f9      	ldr	r1, [r7, #12]
    5282:	47a0      	blx	r4
    5284:	0003      	movs	r3, r0
    5286:	000c      	movs	r4, r1
    5288:	0019      	movs	r1, r3
    528a:	0022      	movs	r2, r4
    528c:	4b2b      	ldr	r3, [pc, #172]	; (533c <main+0x3cc>)
    528e:	2400      	movs	r4, #0
    5290:	18c9      	adds	r1, r1, r3
    5292:	4162      	adcs	r2, r4
    5294:	0008      	movs	r0, r1
    5296:	0011      	movs	r1, r2
    5298:	4c29      	ldr	r4, [pc, #164]	; (5340 <main+0x3d0>)
    529a:	4a2a      	ldr	r2, [pc, #168]	; (5344 <main+0x3d4>)
    529c:	2300      	movs	r3, #0
    529e:	47a0      	blx	r4
    52a0:	0003      	movs	r3, r0
    52a2:	000c      	movs	r4, r1
    52a4:	0018      	movs	r0, r3
    52a6:	4b28      	ldr	r3, [pc, #160]	; (5348 <main+0x3d8>)
    52a8:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,true);
    52aa:	2301      	movs	r3, #1
    52ac:	2201      	movs	r2, #1
    52ae:	2105      	movs	r1, #5
    52b0:	2000      	movs	r0, #0
    52b2:	4c40      	ldr	r4, [pc, #256]	; (53b4 <main+0x444>)
    52b4:	47a0      	blx	r4
			update_all_ports();
    52b6:	4b37      	ldr	r3, [pc, #220]	; (5394 <main+0x424>)
    52b8:	4798      	blx	r3
			delay_ms(300);
    52ba:	2000      	movs	r0, #0
    52bc:	4b1c      	ldr	r3, [pc, #112]	; (5330 <main+0x3c0>)
    52be:	4798      	blx	r3
    52c0:	0003      	movs	r3, r0
    52c2:	603b      	str	r3, [r7, #0]
    52c4:	2300      	movs	r3, #0
    52c6:	607b      	str	r3, [r7, #4]
    52c8:	4c1a      	ldr	r4, [pc, #104]	; (5334 <main+0x3c4>)
    52ca:	2296      	movs	r2, #150	; 0x96
    52cc:	0052      	lsls	r2, r2, #1
    52ce:	2300      	movs	r3, #0
    52d0:	6838      	ldr	r0, [r7, #0]
    52d2:	6879      	ldr	r1, [r7, #4]
    52d4:	47a0      	blx	r4
    52d6:	0003      	movs	r3, r0
    52d8:	000c      	movs	r4, r1
    52da:	0019      	movs	r1, r3
    52dc:	0022      	movs	r2, r4
    52de:	4b17      	ldr	r3, [pc, #92]	; (533c <main+0x3cc>)
    52e0:	2400      	movs	r4, #0
    52e2:	18c9      	adds	r1, r1, r3
    52e4:	4162      	adcs	r2, r4
    52e6:	0008      	movs	r0, r1
    52e8:	0011      	movs	r1, r2
    52ea:	4c15      	ldr	r4, [pc, #84]	; (5340 <main+0x3d0>)
    52ec:	4a15      	ldr	r2, [pc, #84]	; (5344 <main+0x3d4>)
    52ee:	2300      	movs	r3, #0
    52f0:	47a0      	blx	r4
    52f2:	0003      	movs	r3, r0
    52f4:	000c      	movs	r4, r1
    52f6:	0018      	movs	r0, r3
    52f8:	4b13      	ldr	r3, [pc, #76]	; (5348 <main+0x3d8>)
    52fa:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    52fc:	2300      	movs	r3, #0
    52fe:	2201      	movs	r2, #1
    5300:	2105      	movs	r1, #5
    5302:	2000      	movs	r0, #0
    5304:	4c2b      	ldr	r4, [pc, #172]	; (53b4 <main+0x444>)
    5306:	47a0      	blx	r4
			update_all_ports();
    5308:	4b22      	ldr	r3, [pc, #136]	; (5394 <main+0x424>)
    530a:	4798      	blx	r3
			system_interrupt_enable_global();
    530c:	4b27      	ldr	r3, [pc, #156]	; (53ac <main+0x43c>)
    530e:	4798      	blx	r3
		}
		
		if (should_check)
    5310:	4b2a      	ldr	r3, [pc, #168]	; (53bc <main+0x44c>)
    5312:	781b      	ldrb	r3, [r3, #0]
    5314:	2b00      	cmp	r3, #0
    5316:	d100      	bne.n	531a <main+0x3aa>
    5318:	e653      	b.n	4fc2 <main+0x52>
		{
			should_check = false;
    531a:	4a28      	ldr	r2, [pc, #160]	; (53bc <main+0x44c>)
    531c:	2300      	movs	r3, #0
    531e:	7013      	strb	r3, [r2, #0]
			mcp23017_check_all();
    5320:	4b27      	ldr	r3, [pc, #156]	; (53c0 <main+0x450>)
    5322:	4798      	blx	r3
		if (obd_should_update)
    5324:	e64d      	b.n	4fc2 <main+0x52>
    5326:	46c0      	nop			; (mov r8, r8)
    5328:	00004db5 	.word	0x00004db5
    532c:	00000735 	.word	0x00000735
    5330:	00004b0d 	.word	0x00004b0d
    5334:	000056f1 	.word	0x000056f1
    5338:	000005dc 	.word	0x000005dc
    533c:	00001b57 	.word	0x00001b57
    5340:	000056b1 	.word	0x000056b1
    5344:	00001b58 	.word	0x00001b58
    5348:	20000001 	.word	0x20000001
    534c:	00000115 	.word	0x00000115
    5350:	200012d8 	.word	0x200012d8
    5354:	00000335 	.word	0x00000335
    5358:	000058c5 	.word	0x000058c5
    535c:	000071f0 	.word	0x000071f0
    5360:	00005b4d 	.word	0x00005b4d
    5364:	000012e5 	.word	0x000012e5
    5368:	000002fd 	.word	0x000002fd
    536c:	00007200 	.word	0x00007200
    5370:	000041b1 	.word	0x000041b1
    5374:	20000a24 	.word	0x20000a24
    5378:	00001419 	.word	0x00001419
    537c:	000013a1 	.word	0x000013a1
    5380:	000003fe 	.word	0x000003fe
    5384:	20000ed0 	.word	0x20000ed0
    5388:	00003ded 	.word	0x00003ded
    538c:	200012d0 	.word	0x200012d0
    5390:	00003b39 	.word	0x00003b39
    5394:	000023d5 	.word	0x000023d5
    5398:	20000ecc 	.word	0x20000ecc
    539c:	00004f55 	.word	0x00004f55
    53a0:	0000720c 	.word	0x0000720c
    53a4:	00003571 	.word	0x00003571
    53a8:	00002d49 	.word	0x00002d49
    53ac:	00004f39 	.word	0x00004f39
    53b0:	20000a0f 	.word	0x20000a0f
    53b4:	00002f81 	.word	0x00002f81
    53b8:	20000a0c 	.word	0x20000a0c
    53bc:	200012e4 	.word	0x200012e4
    53c0:	0000303d 	.word	0x0000303d

000053c4 <__udivsi3>:
    53c4:	2200      	movs	r2, #0
    53c6:	0843      	lsrs	r3, r0, #1
    53c8:	428b      	cmp	r3, r1
    53ca:	d374      	bcc.n	54b6 <__udivsi3+0xf2>
    53cc:	0903      	lsrs	r3, r0, #4
    53ce:	428b      	cmp	r3, r1
    53d0:	d35f      	bcc.n	5492 <__udivsi3+0xce>
    53d2:	0a03      	lsrs	r3, r0, #8
    53d4:	428b      	cmp	r3, r1
    53d6:	d344      	bcc.n	5462 <__udivsi3+0x9e>
    53d8:	0b03      	lsrs	r3, r0, #12
    53da:	428b      	cmp	r3, r1
    53dc:	d328      	bcc.n	5430 <__udivsi3+0x6c>
    53de:	0c03      	lsrs	r3, r0, #16
    53e0:	428b      	cmp	r3, r1
    53e2:	d30d      	bcc.n	5400 <__udivsi3+0x3c>
    53e4:	22ff      	movs	r2, #255	; 0xff
    53e6:	0209      	lsls	r1, r1, #8
    53e8:	ba12      	rev	r2, r2
    53ea:	0c03      	lsrs	r3, r0, #16
    53ec:	428b      	cmp	r3, r1
    53ee:	d302      	bcc.n	53f6 <__udivsi3+0x32>
    53f0:	1212      	asrs	r2, r2, #8
    53f2:	0209      	lsls	r1, r1, #8
    53f4:	d065      	beq.n	54c2 <__udivsi3+0xfe>
    53f6:	0b03      	lsrs	r3, r0, #12
    53f8:	428b      	cmp	r3, r1
    53fa:	d319      	bcc.n	5430 <__udivsi3+0x6c>
    53fc:	e000      	b.n	5400 <__udivsi3+0x3c>
    53fe:	0a09      	lsrs	r1, r1, #8
    5400:	0bc3      	lsrs	r3, r0, #15
    5402:	428b      	cmp	r3, r1
    5404:	d301      	bcc.n	540a <__udivsi3+0x46>
    5406:	03cb      	lsls	r3, r1, #15
    5408:	1ac0      	subs	r0, r0, r3
    540a:	4152      	adcs	r2, r2
    540c:	0b83      	lsrs	r3, r0, #14
    540e:	428b      	cmp	r3, r1
    5410:	d301      	bcc.n	5416 <__udivsi3+0x52>
    5412:	038b      	lsls	r3, r1, #14
    5414:	1ac0      	subs	r0, r0, r3
    5416:	4152      	adcs	r2, r2
    5418:	0b43      	lsrs	r3, r0, #13
    541a:	428b      	cmp	r3, r1
    541c:	d301      	bcc.n	5422 <__udivsi3+0x5e>
    541e:	034b      	lsls	r3, r1, #13
    5420:	1ac0      	subs	r0, r0, r3
    5422:	4152      	adcs	r2, r2
    5424:	0b03      	lsrs	r3, r0, #12
    5426:	428b      	cmp	r3, r1
    5428:	d301      	bcc.n	542e <__udivsi3+0x6a>
    542a:	030b      	lsls	r3, r1, #12
    542c:	1ac0      	subs	r0, r0, r3
    542e:	4152      	adcs	r2, r2
    5430:	0ac3      	lsrs	r3, r0, #11
    5432:	428b      	cmp	r3, r1
    5434:	d301      	bcc.n	543a <__udivsi3+0x76>
    5436:	02cb      	lsls	r3, r1, #11
    5438:	1ac0      	subs	r0, r0, r3
    543a:	4152      	adcs	r2, r2
    543c:	0a83      	lsrs	r3, r0, #10
    543e:	428b      	cmp	r3, r1
    5440:	d301      	bcc.n	5446 <__udivsi3+0x82>
    5442:	028b      	lsls	r3, r1, #10
    5444:	1ac0      	subs	r0, r0, r3
    5446:	4152      	adcs	r2, r2
    5448:	0a43      	lsrs	r3, r0, #9
    544a:	428b      	cmp	r3, r1
    544c:	d301      	bcc.n	5452 <__udivsi3+0x8e>
    544e:	024b      	lsls	r3, r1, #9
    5450:	1ac0      	subs	r0, r0, r3
    5452:	4152      	adcs	r2, r2
    5454:	0a03      	lsrs	r3, r0, #8
    5456:	428b      	cmp	r3, r1
    5458:	d301      	bcc.n	545e <__udivsi3+0x9a>
    545a:	020b      	lsls	r3, r1, #8
    545c:	1ac0      	subs	r0, r0, r3
    545e:	4152      	adcs	r2, r2
    5460:	d2cd      	bcs.n	53fe <__udivsi3+0x3a>
    5462:	09c3      	lsrs	r3, r0, #7
    5464:	428b      	cmp	r3, r1
    5466:	d301      	bcc.n	546c <__udivsi3+0xa8>
    5468:	01cb      	lsls	r3, r1, #7
    546a:	1ac0      	subs	r0, r0, r3
    546c:	4152      	adcs	r2, r2
    546e:	0983      	lsrs	r3, r0, #6
    5470:	428b      	cmp	r3, r1
    5472:	d301      	bcc.n	5478 <__udivsi3+0xb4>
    5474:	018b      	lsls	r3, r1, #6
    5476:	1ac0      	subs	r0, r0, r3
    5478:	4152      	adcs	r2, r2
    547a:	0943      	lsrs	r3, r0, #5
    547c:	428b      	cmp	r3, r1
    547e:	d301      	bcc.n	5484 <__udivsi3+0xc0>
    5480:	014b      	lsls	r3, r1, #5
    5482:	1ac0      	subs	r0, r0, r3
    5484:	4152      	adcs	r2, r2
    5486:	0903      	lsrs	r3, r0, #4
    5488:	428b      	cmp	r3, r1
    548a:	d301      	bcc.n	5490 <__udivsi3+0xcc>
    548c:	010b      	lsls	r3, r1, #4
    548e:	1ac0      	subs	r0, r0, r3
    5490:	4152      	adcs	r2, r2
    5492:	08c3      	lsrs	r3, r0, #3
    5494:	428b      	cmp	r3, r1
    5496:	d301      	bcc.n	549c <__udivsi3+0xd8>
    5498:	00cb      	lsls	r3, r1, #3
    549a:	1ac0      	subs	r0, r0, r3
    549c:	4152      	adcs	r2, r2
    549e:	0883      	lsrs	r3, r0, #2
    54a0:	428b      	cmp	r3, r1
    54a2:	d301      	bcc.n	54a8 <__udivsi3+0xe4>
    54a4:	008b      	lsls	r3, r1, #2
    54a6:	1ac0      	subs	r0, r0, r3
    54a8:	4152      	adcs	r2, r2
    54aa:	0843      	lsrs	r3, r0, #1
    54ac:	428b      	cmp	r3, r1
    54ae:	d301      	bcc.n	54b4 <__udivsi3+0xf0>
    54b0:	004b      	lsls	r3, r1, #1
    54b2:	1ac0      	subs	r0, r0, r3
    54b4:	4152      	adcs	r2, r2
    54b6:	1a41      	subs	r1, r0, r1
    54b8:	d200      	bcs.n	54bc <__udivsi3+0xf8>
    54ba:	4601      	mov	r1, r0
    54bc:	4152      	adcs	r2, r2
    54be:	4610      	mov	r0, r2
    54c0:	4770      	bx	lr
    54c2:	e7ff      	b.n	54c4 <__udivsi3+0x100>
    54c4:	b501      	push	{r0, lr}
    54c6:	2000      	movs	r0, #0
    54c8:	f000 f8f0 	bl	56ac <__aeabi_idiv0>
    54cc:	bd02      	pop	{r1, pc}
    54ce:	46c0      	nop			; (mov r8, r8)

000054d0 <__aeabi_uidivmod>:
    54d0:	2900      	cmp	r1, #0
    54d2:	d0f7      	beq.n	54c4 <__udivsi3+0x100>
    54d4:	e776      	b.n	53c4 <__udivsi3>
    54d6:	4770      	bx	lr

000054d8 <__divsi3>:
    54d8:	4603      	mov	r3, r0
    54da:	430b      	orrs	r3, r1
    54dc:	d47f      	bmi.n	55de <__divsi3+0x106>
    54de:	2200      	movs	r2, #0
    54e0:	0843      	lsrs	r3, r0, #1
    54e2:	428b      	cmp	r3, r1
    54e4:	d374      	bcc.n	55d0 <__divsi3+0xf8>
    54e6:	0903      	lsrs	r3, r0, #4
    54e8:	428b      	cmp	r3, r1
    54ea:	d35f      	bcc.n	55ac <__divsi3+0xd4>
    54ec:	0a03      	lsrs	r3, r0, #8
    54ee:	428b      	cmp	r3, r1
    54f0:	d344      	bcc.n	557c <__divsi3+0xa4>
    54f2:	0b03      	lsrs	r3, r0, #12
    54f4:	428b      	cmp	r3, r1
    54f6:	d328      	bcc.n	554a <__divsi3+0x72>
    54f8:	0c03      	lsrs	r3, r0, #16
    54fa:	428b      	cmp	r3, r1
    54fc:	d30d      	bcc.n	551a <__divsi3+0x42>
    54fe:	22ff      	movs	r2, #255	; 0xff
    5500:	0209      	lsls	r1, r1, #8
    5502:	ba12      	rev	r2, r2
    5504:	0c03      	lsrs	r3, r0, #16
    5506:	428b      	cmp	r3, r1
    5508:	d302      	bcc.n	5510 <__divsi3+0x38>
    550a:	1212      	asrs	r2, r2, #8
    550c:	0209      	lsls	r1, r1, #8
    550e:	d065      	beq.n	55dc <__divsi3+0x104>
    5510:	0b03      	lsrs	r3, r0, #12
    5512:	428b      	cmp	r3, r1
    5514:	d319      	bcc.n	554a <__divsi3+0x72>
    5516:	e000      	b.n	551a <__divsi3+0x42>
    5518:	0a09      	lsrs	r1, r1, #8
    551a:	0bc3      	lsrs	r3, r0, #15
    551c:	428b      	cmp	r3, r1
    551e:	d301      	bcc.n	5524 <__divsi3+0x4c>
    5520:	03cb      	lsls	r3, r1, #15
    5522:	1ac0      	subs	r0, r0, r3
    5524:	4152      	adcs	r2, r2
    5526:	0b83      	lsrs	r3, r0, #14
    5528:	428b      	cmp	r3, r1
    552a:	d301      	bcc.n	5530 <__divsi3+0x58>
    552c:	038b      	lsls	r3, r1, #14
    552e:	1ac0      	subs	r0, r0, r3
    5530:	4152      	adcs	r2, r2
    5532:	0b43      	lsrs	r3, r0, #13
    5534:	428b      	cmp	r3, r1
    5536:	d301      	bcc.n	553c <__divsi3+0x64>
    5538:	034b      	lsls	r3, r1, #13
    553a:	1ac0      	subs	r0, r0, r3
    553c:	4152      	adcs	r2, r2
    553e:	0b03      	lsrs	r3, r0, #12
    5540:	428b      	cmp	r3, r1
    5542:	d301      	bcc.n	5548 <__divsi3+0x70>
    5544:	030b      	lsls	r3, r1, #12
    5546:	1ac0      	subs	r0, r0, r3
    5548:	4152      	adcs	r2, r2
    554a:	0ac3      	lsrs	r3, r0, #11
    554c:	428b      	cmp	r3, r1
    554e:	d301      	bcc.n	5554 <__divsi3+0x7c>
    5550:	02cb      	lsls	r3, r1, #11
    5552:	1ac0      	subs	r0, r0, r3
    5554:	4152      	adcs	r2, r2
    5556:	0a83      	lsrs	r3, r0, #10
    5558:	428b      	cmp	r3, r1
    555a:	d301      	bcc.n	5560 <__divsi3+0x88>
    555c:	028b      	lsls	r3, r1, #10
    555e:	1ac0      	subs	r0, r0, r3
    5560:	4152      	adcs	r2, r2
    5562:	0a43      	lsrs	r3, r0, #9
    5564:	428b      	cmp	r3, r1
    5566:	d301      	bcc.n	556c <__divsi3+0x94>
    5568:	024b      	lsls	r3, r1, #9
    556a:	1ac0      	subs	r0, r0, r3
    556c:	4152      	adcs	r2, r2
    556e:	0a03      	lsrs	r3, r0, #8
    5570:	428b      	cmp	r3, r1
    5572:	d301      	bcc.n	5578 <__divsi3+0xa0>
    5574:	020b      	lsls	r3, r1, #8
    5576:	1ac0      	subs	r0, r0, r3
    5578:	4152      	adcs	r2, r2
    557a:	d2cd      	bcs.n	5518 <__divsi3+0x40>
    557c:	09c3      	lsrs	r3, r0, #7
    557e:	428b      	cmp	r3, r1
    5580:	d301      	bcc.n	5586 <__divsi3+0xae>
    5582:	01cb      	lsls	r3, r1, #7
    5584:	1ac0      	subs	r0, r0, r3
    5586:	4152      	adcs	r2, r2
    5588:	0983      	lsrs	r3, r0, #6
    558a:	428b      	cmp	r3, r1
    558c:	d301      	bcc.n	5592 <__divsi3+0xba>
    558e:	018b      	lsls	r3, r1, #6
    5590:	1ac0      	subs	r0, r0, r3
    5592:	4152      	adcs	r2, r2
    5594:	0943      	lsrs	r3, r0, #5
    5596:	428b      	cmp	r3, r1
    5598:	d301      	bcc.n	559e <__divsi3+0xc6>
    559a:	014b      	lsls	r3, r1, #5
    559c:	1ac0      	subs	r0, r0, r3
    559e:	4152      	adcs	r2, r2
    55a0:	0903      	lsrs	r3, r0, #4
    55a2:	428b      	cmp	r3, r1
    55a4:	d301      	bcc.n	55aa <__divsi3+0xd2>
    55a6:	010b      	lsls	r3, r1, #4
    55a8:	1ac0      	subs	r0, r0, r3
    55aa:	4152      	adcs	r2, r2
    55ac:	08c3      	lsrs	r3, r0, #3
    55ae:	428b      	cmp	r3, r1
    55b0:	d301      	bcc.n	55b6 <__divsi3+0xde>
    55b2:	00cb      	lsls	r3, r1, #3
    55b4:	1ac0      	subs	r0, r0, r3
    55b6:	4152      	adcs	r2, r2
    55b8:	0883      	lsrs	r3, r0, #2
    55ba:	428b      	cmp	r3, r1
    55bc:	d301      	bcc.n	55c2 <__divsi3+0xea>
    55be:	008b      	lsls	r3, r1, #2
    55c0:	1ac0      	subs	r0, r0, r3
    55c2:	4152      	adcs	r2, r2
    55c4:	0843      	lsrs	r3, r0, #1
    55c6:	428b      	cmp	r3, r1
    55c8:	d301      	bcc.n	55ce <__divsi3+0xf6>
    55ca:	004b      	lsls	r3, r1, #1
    55cc:	1ac0      	subs	r0, r0, r3
    55ce:	4152      	adcs	r2, r2
    55d0:	1a41      	subs	r1, r0, r1
    55d2:	d200      	bcs.n	55d6 <__divsi3+0xfe>
    55d4:	4601      	mov	r1, r0
    55d6:	4152      	adcs	r2, r2
    55d8:	4610      	mov	r0, r2
    55da:	4770      	bx	lr
    55dc:	e05d      	b.n	569a <__divsi3+0x1c2>
    55de:	0fca      	lsrs	r2, r1, #31
    55e0:	d000      	beq.n	55e4 <__divsi3+0x10c>
    55e2:	4249      	negs	r1, r1
    55e4:	1003      	asrs	r3, r0, #32
    55e6:	d300      	bcc.n	55ea <__divsi3+0x112>
    55e8:	4240      	negs	r0, r0
    55ea:	4053      	eors	r3, r2
    55ec:	2200      	movs	r2, #0
    55ee:	469c      	mov	ip, r3
    55f0:	0903      	lsrs	r3, r0, #4
    55f2:	428b      	cmp	r3, r1
    55f4:	d32d      	bcc.n	5652 <__divsi3+0x17a>
    55f6:	0a03      	lsrs	r3, r0, #8
    55f8:	428b      	cmp	r3, r1
    55fa:	d312      	bcc.n	5622 <__divsi3+0x14a>
    55fc:	22fc      	movs	r2, #252	; 0xfc
    55fe:	0189      	lsls	r1, r1, #6
    5600:	ba12      	rev	r2, r2
    5602:	0a03      	lsrs	r3, r0, #8
    5604:	428b      	cmp	r3, r1
    5606:	d30c      	bcc.n	5622 <__divsi3+0x14a>
    5608:	0189      	lsls	r1, r1, #6
    560a:	1192      	asrs	r2, r2, #6
    560c:	428b      	cmp	r3, r1
    560e:	d308      	bcc.n	5622 <__divsi3+0x14a>
    5610:	0189      	lsls	r1, r1, #6
    5612:	1192      	asrs	r2, r2, #6
    5614:	428b      	cmp	r3, r1
    5616:	d304      	bcc.n	5622 <__divsi3+0x14a>
    5618:	0189      	lsls	r1, r1, #6
    561a:	d03a      	beq.n	5692 <__divsi3+0x1ba>
    561c:	1192      	asrs	r2, r2, #6
    561e:	e000      	b.n	5622 <__divsi3+0x14a>
    5620:	0989      	lsrs	r1, r1, #6
    5622:	09c3      	lsrs	r3, r0, #7
    5624:	428b      	cmp	r3, r1
    5626:	d301      	bcc.n	562c <__divsi3+0x154>
    5628:	01cb      	lsls	r3, r1, #7
    562a:	1ac0      	subs	r0, r0, r3
    562c:	4152      	adcs	r2, r2
    562e:	0983      	lsrs	r3, r0, #6
    5630:	428b      	cmp	r3, r1
    5632:	d301      	bcc.n	5638 <__divsi3+0x160>
    5634:	018b      	lsls	r3, r1, #6
    5636:	1ac0      	subs	r0, r0, r3
    5638:	4152      	adcs	r2, r2
    563a:	0943      	lsrs	r3, r0, #5
    563c:	428b      	cmp	r3, r1
    563e:	d301      	bcc.n	5644 <__divsi3+0x16c>
    5640:	014b      	lsls	r3, r1, #5
    5642:	1ac0      	subs	r0, r0, r3
    5644:	4152      	adcs	r2, r2
    5646:	0903      	lsrs	r3, r0, #4
    5648:	428b      	cmp	r3, r1
    564a:	d301      	bcc.n	5650 <__divsi3+0x178>
    564c:	010b      	lsls	r3, r1, #4
    564e:	1ac0      	subs	r0, r0, r3
    5650:	4152      	adcs	r2, r2
    5652:	08c3      	lsrs	r3, r0, #3
    5654:	428b      	cmp	r3, r1
    5656:	d301      	bcc.n	565c <__divsi3+0x184>
    5658:	00cb      	lsls	r3, r1, #3
    565a:	1ac0      	subs	r0, r0, r3
    565c:	4152      	adcs	r2, r2
    565e:	0883      	lsrs	r3, r0, #2
    5660:	428b      	cmp	r3, r1
    5662:	d301      	bcc.n	5668 <__divsi3+0x190>
    5664:	008b      	lsls	r3, r1, #2
    5666:	1ac0      	subs	r0, r0, r3
    5668:	4152      	adcs	r2, r2
    566a:	d2d9      	bcs.n	5620 <__divsi3+0x148>
    566c:	0843      	lsrs	r3, r0, #1
    566e:	428b      	cmp	r3, r1
    5670:	d301      	bcc.n	5676 <__divsi3+0x19e>
    5672:	004b      	lsls	r3, r1, #1
    5674:	1ac0      	subs	r0, r0, r3
    5676:	4152      	adcs	r2, r2
    5678:	1a41      	subs	r1, r0, r1
    567a:	d200      	bcs.n	567e <__divsi3+0x1a6>
    567c:	4601      	mov	r1, r0
    567e:	4663      	mov	r3, ip
    5680:	4152      	adcs	r2, r2
    5682:	105b      	asrs	r3, r3, #1
    5684:	4610      	mov	r0, r2
    5686:	d301      	bcc.n	568c <__divsi3+0x1b4>
    5688:	4240      	negs	r0, r0
    568a:	2b00      	cmp	r3, #0
    568c:	d500      	bpl.n	5690 <__divsi3+0x1b8>
    568e:	4249      	negs	r1, r1
    5690:	4770      	bx	lr
    5692:	4663      	mov	r3, ip
    5694:	105b      	asrs	r3, r3, #1
    5696:	d300      	bcc.n	569a <__divsi3+0x1c2>
    5698:	4240      	negs	r0, r0
    569a:	b501      	push	{r0, lr}
    569c:	2000      	movs	r0, #0
    569e:	f000 f805 	bl	56ac <__aeabi_idiv0>
    56a2:	bd02      	pop	{r1, pc}

000056a4 <__aeabi_idivmod>:
    56a4:	2900      	cmp	r1, #0
    56a6:	d0f8      	beq.n	569a <__divsi3+0x1c2>
    56a8:	e716      	b.n	54d8 <__divsi3>
    56aa:	4770      	bx	lr

000056ac <__aeabi_idiv0>:
    56ac:	4770      	bx	lr
    56ae:	46c0      	nop			; (mov r8, r8)

000056b0 <__aeabi_uldivmod>:
    56b0:	2b00      	cmp	r3, #0
    56b2:	d111      	bne.n	56d8 <__aeabi_uldivmod+0x28>
    56b4:	2a00      	cmp	r2, #0
    56b6:	d10f      	bne.n	56d8 <__aeabi_uldivmod+0x28>
    56b8:	2900      	cmp	r1, #0
    56ba:	d100      	bne.n	56be <__aeabi_uldivmod+0xe>
    56bc:	2800      	cmp	r0, #0
    56be:	d002      	beq.n	56c6 <__aeabi_uldivmod+0x16>
    56c0:	2100      	movs	r1, #0
    56c2:	43c9      	mvns	r1, r1
    56c4:	1c08      	adds	r0, r1, #0
    56c6:	b407      	push	{r0, r1, r2}
    56c8:	4802      	ldr	r0, [pc, #8]	; (56d4 <__aeabi_uldivmod+0x24>)
    56ca:	a102      	add	r1, pc, #8	; (adr r1, 56d4 <__aeabi_uldivmod+0x24>)
    56cc:	1840      	adds	r0, r0, r1
    56ce:	9002      	str	r0, [sp, #8]
    56d0:	bd03      	pop	{r0, r1, pc}
    56d2:	46c0      	nop			; (mov r8, r8)
    56d4:	ffffffd9 	.word	0xffffffd9
    56d8:	b403      	push	{r0, r1}
    56da:	4668      	mov	r0, sp
    56dc:	b501      	push	{r0, lr}
    56de:	9802      	ldr	r0, [sp, #8]
    56e0:	f000 f830 	bl	5744 <__udivmoddi4>
    56e4:	9b01      	ldr	r3, [sp, #4]
    56e6:	469e      	mov	lr, r3
    56e8:	b002      	add	sp, #8
    56ea:	bc0c      	pop	{r2, r3}
    56ec:	4770      	bx	lr
    56ee:	46c0      	nop			; (mov r8, r8)

000056f0 <__aeabi_lmul>:
    56f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    56f2:	46ce      	mov	lr, r9
    56f4:	4647      	mov	r7, r8
    56f6:	0415      	lsls	r5, r2, #16
    56f8:	0c2d      	lsrs	r5, r5, #16
    56fa:	002e      	movs	r6, r5
    56fc:	b580      	push	{r7, lr}
    56fe:	0407      	lsls	r7, r0, #16
    5700:	0c14      	lsrs	r4, r2, #16
    5702:	0c3f      	lsrs	r7, r7, #16
    5704:	4699      	mov	r9, r3
    5706:	0c03      	lsrs	r3, r0, #16
    5708:	437e      	muls	r6, r7
    570a:	435d      	muls	r5, r3
    570c:	4367      	muls	r7, r4
    570e:	4363      	muls	r3, r4
    5710:	197f      	adds	r7, r7, r5
    5712:	0c34      	lsrs	r4, r6, #16
    5714:	19e4      	adds	r4, r4, r7
    5716:	469c      	mov	ip, r3
    5718:	42a5      	cmp	r5, r4
    571a:	d903      	bls.n	5724 <__aeabi_lmul+0x34>
    571c:	2380      	movs	r3, #128	; 0x80
    571e:	025b      	lsls	r3, r3, #9
    5720:	4698      	mov	r8, r3
    5722:	44c4      	add	ip, r8
    5724:	464b      	mov	r3, r9
    5726:	4351      	muls	r1, r2
    5728:	4343      	muls	r3, r0
    572a:	0436      	lsls	r6, r6, #16
    572c:	0c36      	lsrs	r6, r6, #16
    572e:	0c25      	lsrs	r5, r4, #16
    5730:	0424      	lsls	r4, r4, #16
    5732:	4465      	add	r5, ip
    5734:	19a4      	adds	r4, r4, r6
    5736:	1859      	adds	r1, r3, r1
    5738:	1949      	adds	r1, r1, r5
    573a:	0020      	movs	r0, r4
    573c:	bc0c      	pop	{r2, r3}
    573e:	4690      	mov	r8, r2
    5740:	4699      	mov	r9, r3
    5742:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005744 <__udivmoddi4>:
    5744:	b5f0      	push	{r4, r5, r6, r7, lr}
    5746:	4657      	mov	r7, sl
    5748:	464e      	mov	r6, r9
    574a:	4645      	mov	r5, r8
    574c:	46de      	mov	lr, fp
    574e:	b5e0      	push	{r5, r6, r7, lr}
    5750:	0004      	movs	r4, r0
    5752:	b083      	sub	sp, #12
    5754:	000d      	movs	r5, r1
    5756:	4692      	mov	sl, r2
    5758:	4699      	mov	r9, r3
    575a:	428b      	cmp	r3, r1
    575c:	d82f      	bhi.n	57be <__udivmoddi4+0x7a>
    575e:	d02c      	beq.n	57ba <__udivmoddi4+0x76>
    5760:	4649      	mov	r1, r9
    5762:	4650      	mov	r0, sl
    5764:	f000 f8ec 	bl	5940 <__clzdi2>
    5768:	0029      	movs	r1, r5
    576a:	0006      	movs	r6, r0
    576c:	0020      	movs	r0, r4
    576e:	f000 f8e7 	bl	5940 <__clzdi2>
    5772:	1a33      	subs	r3, r6, r0
    5774:	4698      	mov	r8, r3
    5776:	3b20      	subs	r3, #32
    5778:	469b      	mov	fp, r3
    577a:	d500      	bpl.n	577e <__udivmoddi4+0x3a>
    577c:	e074      	b.n	5868 <__udivmoddi4+0x124>
    577e:	4653      	mov	r3, sl
    5780:	465a      	mov	r2, fp
    5782:	4093      	lsls	r3, r2
    5784:	001f      	movs	r7, r3
    5786:	4653      	mov	r3, sl
    5788:	4642      	mov	r2, r8
    578a:	4093      	lsls	r3, r2
    578c:	001e      	movs	r6, r3
    578e:	42af      	cmp	r7, r5
    5790:	d829      	bhi.n	57e6 <__udivmoddi4+0xa2>
    5792:	d026      	beq.n	57e2 <__udivmoddi4+0x9e>
    5794:	465b      	mov	r3, fp
    5796:	1ba4      	subs	r4, r4, r6
    5798:	41bd      	sbcs	r5, r7
    579a:	2b00      	cmp	r3, #0
    579c:	da00      	bge.n	57a0 <__udivmoddi4+0x5c>
    579e:	e079      	b.n	5894 <__udivmoddi4+0x150>
    57a0:	2200      	movs	r2, #0
    57a2:	2300      	movs	r3, #0
    57a4:	9200      	str	r2, [sp, #0]
    57a6:	9301      	str	r3, [sp, #4]
    57a8:	2301      	movs	r3, #1
    57aa:	465a      	mov	r2, fp
    57ac:	4093      	lsls	r3, r2
    57ae:	9301      	str	r3, [sp, #4]
    57b0:	2301      	movs	r3, #1
    57b2:	4642      	mov	r2, r8
    57b4:	4093      	lsls	r3, r2
    57b6:	9300      	str	r3, [sp, #0]
    57b8:	e019      	b.n	57ee <__udivmoddi4+0xaa>
    57ba:	4282      	cmp	r2, r0
    57bc:	d9d0      	bls.n	5760 <__udivmoddi4+0x1c>
    57be:	2200      	movs	r2, #0
    57c0:	2300      	movs	r3, #0
    57c2:	9200      	str	r2, [sp, #0]
    57c4:	9301      	str	r3, [sp, #4]
    57c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    57c8:	2b00      	cmp	r3, #0
    57ca:	d001      	beq.n	57d0 <__udivmoddi4+0x8c>
    57cc:	601c      	str	r4, [r3, #0]
    57ce:	605d      	str	r5, [r3, #4]
    57d0:	9800      	ldr	r0, [sp, #0]
    57d2:	9901      	ldr	r1, [sp, #4]
    57d4:	b003      	add	sp, #12
    57d6:	bc3c      	pop	{r2, r3, r4, r5}
    57d8:	4690      	mov	r8, r2
    57da:	4699      	mov	r9, r3
    57dc:	46a2      	mov	sl, r4
    57de:	46ab      	mov	fp, r5
    57e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57e2:	42a3      	cmp	r3, r4
    57e4:	d9d6      	bls.n	5794 <__udivmoddi4+0x50>
    57e6:	2200      	movs	r2, #0
    57e8:	2300      	movs	r3, #0
    57ea:	9200      	str	r2, [sp, #0]
    57ec:	9301      	str	r3, [sp, #4]
    57ee:	4643      	mov	r3, r8
    57f0:	2b00      	cmp	r3, #0
    57f2:	d0e8      	beq.n	57c6 <__udivmoddi4+0x82>
    57f4:	07fb      	lsls	r3, r7, #31
    57f6:	0872      	lsrs	r2, r6, #1
    57f8:	431a      	orrs	r2, r3
    57fa:	4646      	mov	r6, r8
    57fc:	087b      	lsrs	r3, r7, #1
    57fe:	e00e      	b.n	581e <__udivmoddi4+0xda>
    5800:	42ab      	cmp	r3, r5
    5802:	d101      	bne.n	5808 <__udivmoddi4+0xc4>
    5804:	42a2      	cmp	r2, r4
    5806:	d80c      	bhi.n	5822 <__udivmoddi4+0xde>
    5808:	1aa4      	subs	r4, r4, r2
    580a:	419d      	sbcs	r5, r3
    580c:	2001      	movs	r0, #1
    580e:	1924      	adds	r4, r4, r4
    5810:	416d      	adcs	r5, r5
    5812:	2100      	movs	r1, #0
    5814:	3e01      	subs	r6, #1
    5816:	1824      	adds	r4, r4, r0
    5818:	414d      	adcs	r5, r1
    581a:	2e00      	cmp	r6, #0
    581c:	d006      	beq.n	582c <__udivmoddi4+0xe8>
    581e:	42ab      	cmp	r3, r5
    5820:	d9ee      	bls.n	5800 <__udivmoddi4+0xbc>
    5822:	3e01      	subs	r6, #1
    5824:	1924      	adds	r4, r4, r4
    5826:	416d      	adcs	r5, r5
    5828:	2e00      	cmp	r6, #0
    582a:	d1f8      	bne.n	581e <__udivmoddi4+0xda>
    582c:	465b      	mov	r3, fp
    582e:	9800      	ldr	r0, [sp, #0]
    5830:	9901      	ldr	r1, [sp, #4]
    5832:	1900      	adds	r0, r0, r4
    5834:	4169      	adcs	r1, r5
    5836:	2b00      	cmp	r3, #0
    5838:	db22      	blt.n	5880 <__udivmoddi4+0x13c>
    583a:	002b      	movs	r3, r5
    583c:	465a      	mov	r2, fp
    583e:	40d3      	lsrs	r3, r2
    5840:	002a      	movs	r2, r5
    5842:	4644      	mov	r4, r8
    5844:	40e2      	lsrs	r2, r4
    5846:	001c      	movs	r4, r3
    5848:	465b      	mov	r3, fp
    584a:	0015      	movs	r5, r2
    584c:	2b00      	cmp	r3, #0
    584e:	db2c      	blt.n	58aa <__udivmoddi4+0x166>
    5850:	0026      	movs	r6, r4
    5852:	409e      	lsls	r6, r3
    5854:	0033      	movs	r3, r6
    5856:	0026      	movs	r6, r4
    5858:	4647      	mov	r7, r8
    585a:	40be      	lsls	r6, r7
    585c:	0032      	movs	r2, r6
    585e:	1a80      	subs	r0, r0, r2
    5860:	4199      	sbcs	r1, r3
    5862:	9000      	str	r0, [sp, #0]
    5864:	9101      	str	r1, [sp, #4]
    5866:	e7ae      	b.n	57c6 <__udivmoddi4+0x82>
    5868:	4642      	mov	r2, r8
    586a:	2320      	movs	r3, #32
    586c:	1a9b      	subs	r3, r3, r2
    586e:	4652      	mov	r2, sl
    5870:	40da      	lsrs	r2, r3
    5872:	4641      	mov	r1, r8
    5874:	0013      	movs	r3, r2
    5876:	464a      	mov	r2, r9
    5878:	408a      	lsls	r2, r1
    587a:	0017      	movs	r7, r2
    587c:	431f      	orrs	r7, r3
    587e:	e782      	b.n	5786 <__udivmoddi4+0x42>
    5880:	4642      	mov	r2, r8
    5882:	2320      	movs	r3, #32
    5884:	1a9b      	subs	r3, r3, r2
    5886:	002a      	movs	r2, r5
    5888:	4646      	mov	r6, r8
    588a:	409a      	lsls	r2, r3
    588c:	0023      	movs	r3, r4
    588e:	40f3      	lsrs	r3, r6
    5890:	4313      	orrs	r3, r2
    5892:	e7d5      	b.n	5840 <__udivmoddi4+0xfc>
    5894:	4642      	mov	r2, r8
    5896:	2320      	movs	r3, #32
    5898:	2100      	movs	r1, #0
    589a:	1a9b      	subs	r3, r3, r2
    589c:	2200      	movs	r2, #0
    589e:	9100      	str	r1, [sp, #0]
    58a0:	9201      	str	r2, [sp, #4]
    58a2:	2201      	movs	r2, #1
    58a4:	40da      	lsrs	r2, r3
    58a6:	9201      	str	r2, [sp, #4]
    58a8:	e782      	b.n	57b0 <__udivmoddi4+0x6c>
    58aa:	4642      	mov	r2, r8
    58ac:	2320      	movs	r3, #32
    58ae:	0026      	movs	r6, r4
    58b0:	1a9b      	subs	r3, r3, r2
    58b2:	40de      	lsrs	r6, r3
    58b4:	002f      	movs	r7, r5
    58b6:	46b4      	mov	ip, r6
    58b8:	4097      	lsls	r7, r2
    58ba:	4666      	mov	r6, ip
    58bc:	003b      	movs	r3, r7
    58be:	4333      	orrs	r3, r6
    58c0:	e7c9      	b.n	5856 <__udivmoddi4+0x112>
    58c2:	46c0      	nop			; (mov r8, r8)

000058c4 <__aeabi_f2iz>:
    58c4:	0241      	lsls	r1, r0, #9
    58c6:	0043      	lsls	r3, r0, #1
    58c8:	0fc2      	lsrs	r2, r0, #31
    58ca:	0a49      	lsrs	r1, r1, #9
    58cc:	0e1b      	lsrs	r3, r3, #24
    58ce:	2000      	movs	r0, #0
    58d0:	2b7e      	cmp	r3, #126	; 0x7e
    58d2:	dd0d      	ble.n	58f0 <__aeabi_f2iz+0x2c>
    58d4:	2b9d      	cmp	r3, #157	; 0x9d
    58d6:	dc0c      	bgt.n	58f2 <__aeabi_f2iz+0x2e>
    58d8:	2080      	movs	r0, #128	; 0x80
    58da:	0400      	lsls	r0, r0, #16
    58dc:	4301      	orrs	r1, r0
    58de:	2b95      	cmp	r3, #149	; 0x95
    58e0:	dc0a      	bgt.n	58f8 <__aeabi_f2iz+0x34>
    58e2:	2096      	movs	r0, #150	; 0x96
    58e4:	1ac3      	subs	r3, r0, r3
    58e6:	40d9      	lsrs	r1, r3
    58e8:	4248      	negs	r0, r1
    58ea:	2a00      	cmp	r2, #0
    58ec:	d100      	bne.n	58f0 <__aeabi_f2iz+0x2c>
    58ee:	0008      	movs	r0, r1
    58f0:	4770      	bx	lr
    58f2:	4b03      	ldr	r3, [pc, #12]	; (5900 <__aeabi_f2iz+0x3c>)
    58f4:	18d0      	adds	r0, r2, r3
    58f6:	e7fb      	b.n	58f0 <__aeabi_f2iz+0x2c>
    58f8:	3b96      	subs	r3, #150	; 0x96
    58fa:	4099      	lsls	r1, r3
    58fc:	e7f4      	b.n	58e8 <__aeabi_f2iz+0x24>
    58fe:	46c0      	nop			; (mov r8, r8)
    5900:	7fffffff 	.word	0x7fffffff

00005904 <__clzsi2>:
    5904:	211c      	movs	r1, #28
    5906:	2301      	movs	r3, #1
    5908:	041b      	lsls	r3, r3, #16
    590a:	4298      	cmp	r0, r3
    590c:	d301      	bcc.n	5912 <__clzsi2+0xe>
    590e:	0c00      	lsrs	r0, r0, #16
    5910:	3910      	subs	r1, #16
    5912:	0a1b      	lsrs	r3, r3, #8
    5914:	4298      	cmp	r0, r3
    5916:	d301      	bcc.n	591c <__clzsi2+0x18>
    5918:	0a00      	lsrs	r0, r0, #8
    591a:	3908      	subs	r1, #8
    591c:	091b      	lsrs	r3, r3, #4
    591e:	4298      	cmp	r0, r3
    5920:	d301      	bcc.n	5926 <__clzsi2+0x22>
    5922:	0900      	lsrs	r0, r0, #4
    5924:	3904      	subs	r1, #4
    5926:	a202      	add	r2, pc, #8	; (adr r2, 5930 <__clzsi2+0x2c>)
    5928:	5c10      	ldrb	r0, [r2, r0]
    592a:	1840      	adds	r0, r0, r1
    592c:	4770      	bx	lr
    592e:	46c0      	nop			; (mov r8, r8)
    5930:	02020304 	.word	0x02020304
    5934:	01010101 	.word	0x01010101
	...

00005940 <__clzdi2>:
    5940:	b510      	push	{r4, lr}
    5942:	2900      	cmp	r1, #0
    5944:	d103      	bne.n	594e <__clzdi2+0xe>
    5946:	f7ff ffdd 	bl	5904 <__clzsi2>
    594a:	3020      	adds	r0, #32
    594c:	e002      	b.n	5954 <__clzdi2+0x14>
    594e:	1c08      	adds	r0, r1, #0
    5950:	f7ff ffd8 	bl	5904 <__clzsi2>
    5954:	bd10      	pop	{r4, pc}
    5956:	46c0      	nop			; (mov r8, r8)

00005958 <__libc_init_array>:
    5958:	b570      	push	{r4, r5, r6, lr}
    595a:	2600      	movs	r6, #0
    595c:	4d0c      	ldr	r5, [pc, #48]	; (5990 <__libc_init_array+0x38>)
    595e:	4c0d      	ldr	r4, [pc, #52]	; (5994 <__libc_init_array+0x3c>)
    5960:	1b64      	subs	r4, r4, r5
    5962:	10a4      	asrs	r4, r4, #2
    5964:	42a6      	cmp	r6, r4
    5966:	d109      	bne.n	597c <__libc_init_array+0x24>
    5968:	2600      	movs	r6, #0
    596a:	f001 fd3b 	bl	73e4 <_init>
    596e:	4d0a      	ldr	r5, [pc, #40]	; (5998 <__libc_init_array+0x40>)
    5970:	4c0a      	ldr	r4, [pc, #40]	; (599c <__libc_init_array+0x44>)
    5972:	1b64      	subs	r4, r4, r5
    5974:	10a4      	asrs	r4, r4, #2
    5976:	42a6      	cmp	r6, r4
    5978:	d105      	bne.n	5986 <__libc_init_array+0x2e>
    597a:	bd70      	pop	{r4, r5, r6, pc}
    597c:	00b3      	lsls	r3, r6, #2
    597e:	58eb      	ldr	r3, [r5, r3]
    5980:	4798      	blx	r3
    5982:	3601      	adds	r6, #1
    5984:	e7ee      	b.n	5964 <__libc_init_array+0xc>
    5986:	00b3      	lsls	r3, r6, #2
    5988:	58eb      	ldr	r3, [r5, r3]
    598a:	4798      	blx	r3
    598c:	3601      	adds	r6, #1
    598e:	e7f2      	b.n	5976 <__libc_init_array+0x1e>
    5990:	000073f0 	.word	0x000073f0
    5994:	000073f0 	.word	0x000073f0
    5998:	000073f0 	.word	0x000073f0
    599c:	000073f4 	.word	0x000073f4

000059a0 <malloc>:
    59a0:	b510      	push	{r4, lr}
    59a2:	4b03      	ldr	r3, [pc, #12]	; (59b0 <malloc+0x10>)
    59a4:	0001      	movs	r1, r0
    59a6:	6818      	ldr	r0, [r3, #0]
    59a8:	f000 f860 	bl	5a6c <_malloc_r>
    59ac:	bd10      	pop	{r4, pc}
    59ae:	46c0      	nop			; (mov r8, r8)
    59b0:	2000036c 	.word	0x2000036c

000059b4 <memcpy>:
    59b4:	2300      	movs	r3, #0
    59b6:	b510      	push	{r4, lr}
    59b8:	429a      	cmp	r2, r3
    59ba:	d100      	bne.n	59be <memcpy+0xa>
    59bc:	bd10      	pop	{r4, pc}
    59be:	5ccc      	ldrb	r4, [r1, r3]
    59c0:	54c4      	strb	r4, [r0, r3]
    59c2:	3301      	adds	r3, #1
    59c4:	e7f8      	b.n	59b8 <memcpy+0x4>

000059c6 <memset>:
    59c6:	0003      	movs	r3, r0
    59c8:	1882      	adds	r2, r0, r2
    59ca:	4293      	cmp	r3, r2
    59cc:	d100      	bne.n	59d0 <memset+0xa>
    59ce:	4770      	bx	lr
    59d0:	7019      	strb	r1, [r3, #0]
    59d2:	3301      	adds	r3, #1
    59d4:	e7f9      	b.n	59ca <memset+0x4>
	...

000059d8 <_free_r>:
    59d8:	b570      	push	{r4, r5, r6, lr}
    59da:	0005      	movs	r5, r0
    59dc:	2900      	cmp	r1, #0
    59de:	d010      	beq.n	5a02 <_free_r+0x2a>
    59e0:	1f0c      	subs	r4, r1, #4
    59e2:	6823      	ldr	r3, [r4, #0]
    59e4:	2b00      	cmp	r3, #0
    59e6:	da00      	bge.n	59ea <_free_r+0x12>
    59e8:	18e4      	adds	r4, r4, r3
    59ea:	0028      	movs	r0, r5
    59ec:	f000 f940 	bl	5c70 <__malloc_lock>
    59f0:	4a1d      	ldr	r2, [pc, #116]	; (5a68 <_free_r+0x90>)
    59f2:	6813      	ldr	r3, [r2, #0]
    59f4:	2b00      	cmp	r3, #0
    59f6:	d105      	bne.n	5a04 <_free_r+0x2c>
    59f8:	6063      	str	r3, [r4, #4]
    59fa:	6014      	str	r4, [r2, #0]
    59fc:	0028      	movs	r0, r5
    59fe:	f000 f938 	bl	5c72 <__malloc_unlock>
    5a02:	bd70      	pop	{r4, r5, r6, pc}
    5a04:	42a3      	cmp	r3, r4
    5a06:	d909      	bls.n	5a1c <_free_r+0x44>
    5a08:	6821      	ldr	r1, [r4, #0]
    5a0a:	1860      	adds	r0, r4, r1
    5a0c:	4283      	cmp	r3, r0
    5a0e:	d1f3      	bne.n	59f8 <_free_r+0x20>
    5a10:	6818      	ldr	r0, [r3, #0]
    5a12:	685b      	ldr	r3, [r3, #4]
    5a14:	1841      	adds	r1, r0, r1
    5a16:	6021      	str	r1, [r4, #0]
    5a18:	e7ee      	b.n	59f8 <_free_r+0x20>
    5a1a:	0013      	movs	r3, r2
    5a1c:	685a      	ldr	r2, [r3, #4]
    5a1e:	2a00      	cmp	r2, #0
    5a20:	d001      	beq.n	5a26 <_free_r+0x4e>
    5a22:	42a2      	cmp	r2, r4
    5a24:	d9f9      	bls.n	5a1a <_free_r+0x42>
    5a26:	6819      	ldr	r1, [r3, #0]
    5a28:	1858      	adds	r0, r3, r1
    5a2a:	42a0      	cmp	r0, r4
    5a2c:	d10b      	bne.n	5a46 <_free_r+0x6e>
    5a2e:	6820      	ldr	r0, [r4, #0]
    5a30:	1809      	adds	r1, r1, r0
    5a32:	1858      	adds	r0, r3, r1
    5a34:	6019      	str	r1, [r3, #0]
    5a36:	4282      	cmp	r2, r0
    5a38:	d1e0      	bne.n	59fc <_free_r+0x24>
    5a3a:	6810      	ldr	r0, [r2, #0]
    5a3c:	6852      	ldr	r2, [r2, #4]
    5a3e:	1841      	adds	r1, r0, r1
    5a40:	6019      	str	r1, [r3, #0]
    5a42:	605a      	str	r2, [r3, #4]
    5a44:	e7da      	b.n	59fc <_free_r+0x24>
    5a46:	42a0      	cmp	r0, r4
    5a48:	d902      	bls.n	5a50 <_free_r+0x78>
    5a4a:	230c      	movs	r3, #12
    5a4c:	602b      	str	r3, [r5, #0]
    5a4e:	e7d5      	b.n	59fc <_free_r+0x24>
    5a50:	6821      	ldr	r1, [r4, #0]
    5a52:	1860      	adds	r0, r4, r1
    5a54:	4282      	cmp	r2, r0
    5a56:	d103      	bne.n	5a60 <_free_r+0x88>
    5a58:	6810      	ldr	r0, [r2, #0]
    5a5a:	6852      	ldr	r2, [r2, #4]
    5a5c:	1841      	adds	r1, r0, r1
    5a5e:	6021      	str	r1, [r4, #0]
    5a60:	6062      	str	r2, [r4, #4]
    5a62:	605c      	str	r4, [r3, #4]
    5a64:	e7ca      	b.n	59fc <_free_r+0x24>
    5a66:	46c0      	nop			; (mov r8, r8)
    5a68:	2000058c 	.word	0x2000058c

00005a6c <_malloc_r>:
    5a6c:	2303      	movs	r3, #3
    5a6e:	b570      	push	{r4, r5, r6, lr}
    5a70:	1ccd      	adds	r5, r1, #3
    5a72:	439d      	bics	r5, r3
    5a74:	3508      	adds	r5, #8
    5a76:	0006      	movs	r6, r0
    5a78:	2d0c      	cmp	r5, #12
    5a7a:	d21e      	bcs.n	5aba <_malloc_r+0x4e>
    5a7c:	250c      	movs	r5, #12
    5a7e:	42a9      	cmp	r1, r5
    5a80:	d81d      	bhi.n	5abe <_malloc_r+0x52>
    5a82:	0030      	movs	r0, r6
    5a84:	f000 f8f4 	bl	5c70 <__malloc_lock>
    5a88:	4a25      	ldr	r2, [pc, #148]	; (5b20 <_malloc_r+0xb4>)
    5a8a:	6814      	ldr	r4, [r2, #0]
    5a8c:	0021      	movs	r1, r4
    5a8e:	2900      	cmp	r1, #0
    5a90:	d119      	bne.n	5ac6 <_malloc_r+0x5a>
    5a92:	4c24      	ldr	r4, [pc, #144]	; (5b24 <_malloc_r+0xb8>)
    5a94:	6823      	ldr	r3, [r4, #0]
    5a96:	2b00      	cmp	r3, #0
    5a98:	d103      	bne.n	5aa2 <_malloc_r+0x36>
    5a9a:	0030      	movs	r0, r6
    5a9c:	f000 f844 	bl	5b28 <_sbrk_r>
    5aa0:	6020      	str	r0, [r4, #0]
    5aa2:	0029      	movs	r1, r5
    5aa4:	0030      	movs	r0, r6
    5aa6:	f000 f83f 	bl	5b28 <_sbrk_r>
    5aaa:	1c43      	adds	r3, r0, #1
    5aac:	d12c      	bne.n	5b08 <_malloc_r+0x9c>
    5aae:	230c      	movs	r3, #12
    5ab0:	0030      	movs	r0, r6
    5ab2:	6033      	str	r3, [r6, #0]
    5ab4:	f000 f8dd 	bl	5c72 <__malloc_unlock>
    5ab8:	e003      	b.n	5ac2 <_malloc_r+0x56>
    5aba:	2d00      	cmp	r5, #0
    5abc:	dadf      	bge.n	5a7e <_malloc_r+0x12>
    5abe:	230c      	movs	r3, #12
    5ac0:	6033      	str	r3, [r6, #0]
    5ac2:	2000      	movs	r0, #0
    5ac4:	bd70      	pop	{r4, r5, r6, pc}
    5ac6:	680b      	ldr	r3, [r1, #0]
    5ac8:	1b5b      	subs	r3, r3, r5
    5aca:	d41a      	bmi.n	5b02 <_malloc_r+0x96>
    5acc:	2b0b      	cmp	r3, #11
    5ace:	d903      	bls.n	5ad8 <_malloc_r+0x6c>
    5ad0:	600b      	str	r3, [r1, #0]
    5ad2:	18cc      	adds	r4, r1, r3
    5ad4:	6025      	str	r5, [r4, #0]
    5ad6:	e003      	b.n	5ae0 <_malloc_r+0x74>
    5ad8:	428c      	cmp	r4, r1
    5ada:	d10e      	bne.n	5afa <_malloc_r+0x8e>
    5adc:	6863      	ldr	r3, [r4, #4]
    5ade:	6013      	str	r3, [r2, #0]
    5ae0:	0030      	movs	r0, r6
    5ae2:	f000 f8c6 	bl	5c72 <__malloc_unlock>
    5ae6:	0020      	movs	r0, r4
    5ae8:	2207      	movs	r2, #7
    5aea:	300b      	adds	r0, #11
    5aec:	1d23      	adds	r3, r4, #4
    5aee:	4390      	bics	r0, r2
    5af0:	1ac3      	subs	r3, r0, r3
    5af2:	d0e7      	beq.n	5ac4 <_malloc_r+0x58>
    5af4:	425a      	negs	r2, r3
    5af6:	50e2      	str	r2, [r4, r3]
    5af8:	e7e4      	b.n	5ac4 <_malloc_r+0x58>
    5afa:	684b      	ldr	r3, [r1, #4]
    5afc:	6063      	str	r3, [r4, #4]
    5afe:	000c      	movs	r4, r1
    5b00:	e7ee      	b.n	5ae0 <_malloc_r+0x74>
    5b02:	000c      	movs	r4, r1
    5b04:	6849      	ldr	r1, [r1, #4]
    5b06:	e7c2      	b.n	5a8e <_malloc_r+0x22>
    5b08:	2303      	movs	r3, #3
    5b0a:	1cc4      	adds	r4, r0, #3
    5b0c:	439c      	bics	r4, r3
    5b0e:	42a0      	cmp	r0, r4
    5b10:	d0e0      	beq.n	5ad4 <_malloc_r+0x68>
    5b12:	1a21      	subs	r1, r4, r0
    5b14:	0030      	movs	r0, r6
    5b16:	f000 f807 	bl	5b28 <_sbrk_r>
    5b1a:	1c43      	adds	r3, r0, #1
    5b1c:	d1da      	bne.n	5ad4 <_malloc_r+0x68>
    5b1e:	e7c6      	b.n	5aae <_malloc_r+0x42>
    5b20:	2000058c 	.word	0x2000058c
    5b24:	20000590 	.word	0x20000590

00005b28 <_sbrk_r>:
    5b28:	2300      	movs	r3, #0
    5b2a:	b570      	push	{r4, r5, r6, lr}
    5b2c:	4c06      	ldr	r4, [pc, #24]	; (5b48 <_sbrk_r+0x20>)
    5b2e:	0005      	movs	r5, r0
    5b30:	0008      	movs	r0, r1
    5b32:	6023      	str	r3, [r4, #0]
    5b34:	f7ff f9e2 	bl	4efc <_sbrk>
    5b38:	1c43      	adds	r3, r0, #1
    5b3a:	d103      	bne.n	5b44 <_sbrk_r+0x1c>
    5b3c:	6823      	ldr	r3, [r4, #0]
    5b3e:	2b00      	cmp	r3, #0
    5b40:	d000      	beq.n	5b44 <_sbrk_r+0x1c>
    5b42:	602b      	str	r3, [r5, #0]
    5b44:	bd70      	pop	{r4, r5, r6, pc}
    5b46:	46c0      	nop			; (mov r8, r8)
    5b48:	20001768 	.word	0x20001768

00005b4c <siprintf>:
    5b4c:	b40e      	push	{r1, r2, r3}
    5b4e:	b510      	push	{r4, lr}
    5b50:	b09d      	sub	sp, #116	; 0x74
    5b52:	a902      	add	r1, sp, #8
    5b54:	9002      	str	r0, [sp, #8]
    5b56:	6108      	str	r0, [r1, #16]
    5b58:	480b      	ldr	r0, [pc, #44]	; (5b88 <siprintf+0x3c>)
    5b5a:	2482      	movs	r4, #130	; 0x82
    5b5c:	6088      	str	r0, [r1, #8]
    5b5e:	6148      	str	r0, [r1, #20]
    5b60:	2001      	movs	r0, #1
    5b62:	4240      	negs	r0, r0
    5b64:	ab1f      	add	r3, sp, #124	; 0x7c
    5b66:	81c8      	strh	r0, [r1, #14]
    5b68:	4808      	ldr	r0, [pc, #32]	; (5b8c <siprintf+0x40>)
    5b6a:	cb04      	ldmia	r3!, {r2}
    5b6c:	00a4      	lsls	r4, r4, #2
    5b6e:	6800      	ldr	r0, [r0, #0]
    5b70:	9301      	str	r3, [sp, #4]
    5b72:	818c      	strh	r4, [r1, #12]
    5b74:	f000 f8e0 	bl	5d38 <_svfiprintf_r>
    5b78:	2300      	movs	r3, #0
    5b7a:	9a02      	ldr	r2, [sp, #8]
    5b7c:	7013      	strb	r3, [r2, #0]
    5b7e:	b01d      	add	sp, #116	; 0x74
    5b80:	bc10      	pop	{r4}
    5b82:	bc08      	pop	{r3}
    5b84:	b003      	add	sp, #12
    5b86:	4718      	bx	r3
    5b88:	7fffffff 	.word	0x7fffffff
    5b8c:	2000036c 	.word	0x2000036c

00005b90 <siscanf>:
    5b90:	b40e      	push	{r1, r2, r3}
    5b92:	2381      	movs	r3, #129	; 0x81
    5b94:	b570      	push	{r4, r5, r6, lr}
    5b96:	b09d      	sub	sp, #116	; 0x74
    5b98:	ac02      	add	r4, sp, #8
    5b9a:	ad21      	add	r5, sp, #132	; 0x84
    5b9c:	009b      	lsls	r3, r3, #2
    5b9e:	cd40      	ldmia	r5!, {r6}
    5ba0:	81a3      	strh	r3, [r4, #12]
    5ba2:	9002      	str	r0, [sp, #8]
    5ba4:	9006      	str	r0, [sp, #24]
    5ba6:	f000 f833 	bl	5c10 <strlen>
    5baa:	4b0b      	ldr	r3, [pc, #44]	; (5bd8 <siscanf+0x48>)
    5bac:	6060      	str	r0, [r4, #4]
    5bae:	6263      	str	r3, [r4, #36]	; 0x24
    5bb0:	2300      	movs	r3, #0
    5bb2:	6160      	str	r0, [r4, #20]
    5bb4:	4809      	ldr	r0, [pc, #36]	; (5bdc <siscanf+0x4c>)
    5bb6:	6363      	str	r3, [r4, #52]	; 0x34
    5bb8:	64a3      	str	r3, [r4, #72]	; 0x48
    5bba:	3b01      	subs	r3, #1
    5bbc:	81e3      	strh	r3, [r4, #14]
    5bbe:	0032      	movs	r2, r6
    5bc0:	002b      	movs	r3, r5
    5bc2:	0021      	movs	r1, r4
    5bc4:	6800      	ldr	r0, [r0, #0]
    5bc6:	9501      	str	r5, [sp, #4]
    5bc8:	f000 fa16 	bl	5ff8 <__ssvfiscanf_r>
    5bcc:	b01d      	add	sp, #116	; 0x74
    5bce:	bc70      	pop	{r4, r5, r6}
    5bd0:	bc08      	pop	{r3}
    5bd2:	b003      	add	sp, #12
    5bd4:	4718      	bx	r3
    5bd6:	46c0      	nop			; (mov r8, r8)
    5bd8:	00005be1 	.word	0x00005be1
    5bdc:	2000036c 	.word	0x2000036c

00005be0 <__seofread>:
    5be0:	2000      	movs	r0, #0
    5be2:	4770      	bx	lr

00005be4 <strchr>:
    5be4:	b2c9      	uxtb	r1, r1
    5be6:	7803      	ldrb	r3, [r0, #0]
    5be8:	2b00      	cmp	r3, #0
    5bea:	d004      	beq.n	5bf6 <strchr+0x12>
    5bec:	4299      	cmp	r1, r3
    5bee:	d100      	bne.n	5bf2 <strchr+0xe>
    5bf0:	4770      	bx	lr
    5bf2:	3001      	adds	r0, #1
    5bf4:	e7f7      	b.n	5be6 <strchr+0x2>
    5bf6:	424b      	negs	r3, r1
    5bf8:	4159      	adcs	r1, r3
    5bfa:	4249      	negs	r1, r1
    5bfc:	4008      	ands	r0, r1
    5bfe:	e7f7      	b.n	5bf0 <strchr+0xc>

00005c00 <strcpy>:
    5c00:	1c03      	adds	r3, r0, #0
    5c02:	780a      	ldrb	r2, [r1, #0]
    5c04:	3101      	adds	r1, #1
    5c06:	701a      	strb	r2, [r3, #0]
    5c08:	3301      	adds	r3, #1
    5c0a:	2a00      	cmp	r2, #0
    5c0c:	d1f9      	bne.n	5c02 <strcpy+0x2>
    5c0e:	4770      	bx	lr

00005c10 <strlen>:
    5c10:	2300      	movs	r3, #0
    5c12:	5cc2      	ldrb	r2, [r0, r3]
    5c14:	3301      	adds	r3, #1
    5c16:	2a00      	cmp	r2, #0
    5c18:	d1fb      	bne.n	5c12 <strlen+0x2>
    5c1a:	1e58      	subs	r0, r3, #1
    5c1c:	4770      	bx	lr

00005c1e <strncmp>:
    5c1e:	2300      	movs	r3, #0
    5c20:	b530      	push	{r4, r5, lr}
    5c22:	429a      	cmp	r2, r3
    5c24:	d00a      	beq.n	5c3c <strncmp+0x1e>
    5c26:	3a01      	subs	r2, #1
    5c28:	5cc4      	ldrb	r4, [r0, r3]
    5c2a:	5ccd      	ldrb	r5, [r1, r3]
    5c2c:	42ac      	cmp	r4, r5
    5c2e:	d104      	bne.n	5c3a <strncmp+0x1c>
    5c30:	429a      	cmp	r2, r3
    5c32:	d002      	beq.n	5c3a <strncmp+0x1c>
    5c34:	3301      	adds	r3, #1
    5c36:	2c00      	cmp	r4, #0
    5c38:	d1f6      	bne.n	5c28 <strncmp+0xa>
    5c3a:	1b63      	subs	r3, r4, r5
    5c3c:	0018      	movs	r0, r3
    5c3e:	bd30      	pop	{r4, r5, pc}

00005c40 <strstr>:
    5c40:	b510      	push	{r4, lr}
    5c42:	0002      	movs	r2, r0
    5c44:	7800      	ldrb	r0, [r0, #0]
    5c46:	2800      	cmp	r0, #0
    5c48:	d104      	bne.n	5c54 <strstr+0x14>
    5c4a:	7809      	ldrb	r1, [r1, #0]
    5c4c:	2900      	cmp	r1, #0
    5c4e:	d00d      	beq.n	5c6c <strstr+0x2c>
    5c50:	bd10      	pop	{r4, pc}
    5c52:	3201      	adds	r2, #1
    5c54:	7810      	ldrb	r0, [r2, #0]
    5c56:	2800      	cmp	r0, #0
    5c58:	d0fa      	beq.n	5c50 <strstr+0x10>
    5c5a:	2300      	movs	r3, #0
    5c5c:	5cc8      	ldrb	r0, [r1, r3]
    5c5e:	2800      	cmp	r0, #0
    5c60:	d004      	beq.n	5c6c <strstr+0x2c>
    5c62:	5cd4      	ldrb	r4, [r2, r3]
    5c64:	4284      	cmp	r4, r0
    5c66:	d1f4      	bne.n	5c52 <strstr+0x12>
    5c68:	3301      	adds	r3, #1
    5c6a:	e7f7      	b.n	5c5c <strstr+0x1c>
    5c6c:	0010      	movs	r0, r2
    5c6e:	e7ef      	b.n	5c50 <strstr+0x10>

00005c70 <__malloc_lock>:
    5c70:	4770      	bx	lr

00005c72 <__malloc_unlock>:
    5c72:	4770      	bx	lr

00005c74 <__ssputs_r>:
    5c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c76:	688e      	ldr	r6, [r1, #8]
    5c78:	b085      	sub	sp, #20
    5c7a:	0007      	movs	r7, r0
    5c7c:	000c      	movs	r4, r1
    5c7e:	9203      	str	r2, [sp, #12]
    5c80:	9301      	str	r3, [sp, #4]
    5c82:	429e      	cmp	r6, r3
    5c84:	d839      	bhi.n	5cfa <__ssputs_r+0x86>
    5c86:	2390      	movs	r3, #144	; 0x90
    5c88:	898a      	ldrh	r2, [r1, #12]
    5c8a:	00db      	lsls	r3, r3, #3
    5c8c:	421a      	tst	r2, r3
    5c8e:	d034      	beq.n	5cfa <__ssputs_r+0x86>
    5c90:	2503      	movs	r5, #3
    5c92:	6909      	ldr	r1, [r1, #16]
    5c94:	6823      	ldr	r3, [r4, #0]
    5c96:	1a5b      	subs	r3, r3, r1
    5c98:	9302      	str	r3, [sp, #8]
    5c9a:	6963      	ldr	r3, [r4, #20]
    5c9c:	9802      	ldr	r0, [sp, #8]
    5c9e:	435d      	muls	r5, r3
    5ca0:	0feb      	lsrs	r3, r5, #31
    5ca2:	195d      	adds	r5, r3, r5
    5ca4:	9b01      	ldr	r3, [sp, #4]
    5ca6:	106d      	asrs	r5, r5, #1
    5ca8:	3301      	adds	r3, #1
    5caa:	181b      	adds	r3, r3, r0
    5cac:	42ab      	cmp	r3, r5
    5cae:	d900      	bls.n	5cb2 <__ssputs_r+0x3e>
    5cb0:	001d      	movs	r5, r3
    5cb2:	0553      	lsls	r3, r2, #21
    5cb4:	d532      	bpl.n	5d1c <__ssputs_r+0xa8>
    5cb6:	0029      	movs	r1, r5
    5cb8:	0038      	movs	r0, r7
    5cba:	f7ff fed7 	bl	5a6c <_malloc_r>
    5cbe:	1e06      	subs	r6, r0, #0
    5cc0:	d109      	bne.n	5cd6 <__ssputs_r+0x62>
    5cc2:	230c      	movs	r3, #12
    5cc4:	603b      	str	r3, [r7, #0]
    5cc6:	2340      	movs	r3, #64	; 0x40
    5cc8:	2001      	movs	r0, #1
    5cca:	89a2      	ldrh	r2, [r4, #12]
    5ccc:	4240      	negs	r0, r0
    5cce:	4313      	orrs	r3, r2
    5cd0:	81a3      	strh	r3, [r4, #12]
    5cd2:	b005      	add	sp, #20
    5cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cd6:	9a02      	ldr	r2, [sp, #8]
    5cd8:	6921      	ldr	r1, [r4, #16]
    5cda:	f7ff fe6b 	bl	59b4 <memcpy>
    5cde:	89a3      	ldrh	r3, [r4, #12]
    5ce0:	4a14      	ldr	r2, [pc, #80]	; (5d34 <__ssputs_r+0xc0>)
    5ce2:	401a      	ands	r2, r3
    5ce4:	2380      	movs	r3, #128	; 0x80
    5ce6:	4313      	orrs	r3, r2
    5ce8:	81a3      	strh	r3, [r4, #12]
    5cea:	9b02      	ldr	r3, [sp, #8]
    5cec:	6126      	str	r6, [r4, #16]
    5cee:	18f6      	adds	r6, r6, r3
    5cf0:	6026      	str	r6, [r4, #0]
    5cf2:	6165      	str	r5, [r4, #20]
    5cf4:	9e01      	ldr	r6, [sp, #4]
    5cf6:	1aed      	subs	r5, r5, r3
    5cf8:	60a5      	str	r5, [r4, #8]
    5cfa:	9b01      	ldr	r3, [sp, #4]
    5cfc:	42b3      	cmp	r3, r6
    5cfe:	d200      	bcs.n	5d02 <__ssputs_r+0x8e>
    5d00:	001e      	movs	r6, r3
    5d02:	0032      	movs	r2, r6
    5d04:	9903      	ldr	r1, [sp, #12]
    5d06:	6820      	ldr	r0, [r4, #0]
    5d08:	f000 ffb5 	bl	6c76 <memmove>
    5d0c:	68a3      	ldr	r3, [r4, #8]
    5d0e:	2000      	movs	r0, #0
    5d10:	1b9b      	subs	r3, r3, r6
    5d12:	60a3      	str	r3, [r4, #8]
    5d14:	6823      	ldr	r3, [r4, #0]
    5d16:	199e      	adds	r6, r3, r6
    5d18:	6026      	str	r6, [r4, #0]
    5d1a:	e7da      	b.n	5cd2 <__ssputs_r+0x5e>
    5d1c:	002a      	movs	r2, r5
    5d1e:	0038      	movs	r0, r7
    5d20:	f000 ffbb 	bl	6c9a <_realloc_r>
    5d24:	1e06      	subs	r6, r0, #0
    5d26:	d1e0      	bne.n	5cea <__ssputs_r+0x76>
    5d28:	6921      	ldr	r1, [r4, #16]
    5d2a:	0038      	movs	r0, r7
    5d2c:	f7ff fe54 	bl	59d8 <_free_r>
    5d30:	e7c7      	b.n	5cc2 <__ssputs_r+0x4e>
    5d32:	46c0      	nop			; (mov r8, r8)
    5d34:	fffffb7f 	.word	0xfffffb7f

00005d38 <_svfiprintf_r>:
    5d38:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d3a:	b09f      	sub	sp, #124	; 0x7c
    5d3c:	9002      	str	r0, [sp, #8]
    5d3e:	9305      	str	r3, [sp, #20]
    5d40:	898b      	ldrh	r3, [r1, #12]
    5d42:	000f      	movs	r7, r1
    5d44:	0016      	movs	r6, r2
    5d46:	061b      	lsls	r3, r3, #24
    5d48:	d511      	bpl.n	5d6e <_svfiprintf_r+0x36>
    5d4a:	690b      	ldr	r3, [r1, #16]
    5d4c:	2b00      	cmp	r3, #0
    5d4e:	d10e      	bne.n	5d6e <_svfiprintf_r+0x36>
    5d50:	2140      	movs	r1, #64	; 0x40
    5d52:	f7ff fe8b 	bl	5a6c <_malloc_r>
    5d56:	6038      	str	r0, [r7, #0]
    5d58:	6138      	str	r0, [r7, #16]
    5d5a:	2800      	cmp	r0, #0
    5d5c:	d105      	bne.n	5d6a <_svfiprintf_r+0x32>
    5d5e:	230c      	movs	r3, #12
    5d60:	9a02      	ldr	r2, [sp, #8]
    5d62:	3801      	subs	r0, #1
    5d64:	6013      	str	r3, [r2, #0]
    5d66:	b01f      	add	sp, #124	; 0x7c
    5d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d6a:	2340      	movs	r3, #64	; 0x40
    5d6c:	617b      	str	r3, [r7, #20]
    5d6e:	2300      	movs	r3, #0
    5d70:	ad06      	add	r5, sp, #24
    5d72:	616b      	str	r3, [r5, #20]
    5d74:	3320      	adds	r3, #32
    5d76:	766b      	strb	r3, [r5, #25]
    5d78:	3310      	adds	r3, #16
    5d7a:	76ab      	strb	r3, [r5, #26]
    5d7c:	0034      	movs	r4, r6
    5d7e:	7823      	ldrb	r3, [r4, #0]
    5d80:	2b00      	cmp	r3, #0
    5d82:	d147      	bne.n	5e14 <_svfiprintf_r+0xdc>
    5d84:	1ba3      	subs	r3, r4, r6
    5d86:	9304      	str	r3, [sp, #16]
    5d88:	d00d      	beq.n	5da6 <_svfiprintf_r+0x6e>
    5d8a:	1ba3      	subs	r3, r4, r6
    5d8c:	0032      	movs	r2, r6
    5d8e:	0039      	movs	r1, r7
    5d90:	9802      	ldr	r0, [sp, #8]
    5d92:	f7ff ff6f 	bl	5c74 <__ssputs_r>
    5d96:	1c43      	adds	r3, r0, #1
    5d98:	d100      	bne.n	5d9c <_svfiprintf_r+0x64>
    5d9a:	e0b5      	b.n	5f08 <_svfiprintf_r+0x1d0>
    5d9c:	696a      	ldr	r2, [r5, #20]
    5d9e:	9b04      	ldr	r3, [sp, #16]
    5da0:	4694      	mov	ip, r2
    5da2:	4463      	add	r3, ip
    5da4:	616b      	str	r3, [r5, #20]
    5da6:	7823      	ldrb	r3, [r4, #0]
    5da8:	2b00      	cmp	r3, #0
    5daa:	d100      	bne.n	5dae <_svfiprintf_r+0x76>
    5dac:	e0ac      	b.n	5f08 <_svfiprintf_r+0x1d0>
    5dae:	2201      	movs	r2, #1
    5db0:	2300      	movs	r3, #0
    5db2:	4252      	negs	r2, r2
    5db4:	606a      	str	r2, [r5, #4]
    5db6:	a902      	add	r1, sp, #8
    5db8:	3254      	adds	r2, #84	; 0x54
    5dba:	1852      	adds	r2, r2, r1
    5dbc:	3401      	adds	r4, #1
    5dbe:	602b      	str	r3, [r5, #0]
    5dc0:	60eb      	str	r3, [r5, #12]
    5dc2:	60ab      	str	r3, [r5, #8]
    5dc4:	7013      	strb	r3, [r2, #0]
    5dc6:	65ab      	str	r3, [r5, #88]	; 0x58
    5dc8:	4e58      	ldr	r6, [pc, #352]	; (5f2c <_svfiprintf_r+0x1f4>)
    5dca:	2205      	movs	r2, #5
    5dcc:	7821      	ldrb	r1, [r4, #0]
    5dce:	0030      	movs	r0, r6
    5dd0:	f000 ff46 	bl	6c60 <memchr>
    5dd4:	1c62      	adds	r2, r4, #1
    5dd6:	2800      	cmp	r0, #0
    5dd8:	d120      	bne.n	5e1c <_svfiprintf_r+0xe4>
    5dda:	6829      	ldr	r1, [r5, #0]
    5ddc:	06cb      	lsls	r3, r1, #27
    5dde:	d504      	bpl.n	5dea <_svfiprintf_r+0xb2>
    5de0:	2353      	movs	r3, #83	; 0x53
    5de2:	ae02      	add	r6, sp, #8
    5de4:	3020      	adds	r0, #32
    5de6:	199b      	adds	r3, r3, r6
    5de8:	7018      	strb	r0, [r3, #0]
    5dea:	070b      	lsls	r3, r1, #28
    5dec:	d504      	bpl.n	5df8 <_svfiprintf_r+0xc0>
    5dee:	2353      	movs	r3, #83	; 0x53
    5df0:	202b      	movs	r0, #43	; 0x2b
    5df2:	ae02      	add	r6, sp, #8
    5df4:	199b      	adds	r3, r3, r6
    5df6:	7018      	strb	r0, [r3, #0]
    5df8:	7823      	ldrb	r3, [r4, #0]
    5dfa:	2b2a      	cmp	r3, #42	; 0x2a
    5dfc:	d016      	beq.n	5e2c <_svfiprintf_r+0xf4>
    5dfe:	2000      	movs	r0, #0
    5e00:	210a      	movs	r1, #10
    5e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5e04:	7822      	ldrb	r2, [r4, #0]
    5e06:	3a30      	subs	r2, #48	; 0x30
    5e08:	2a09      	cmp	r2, #9
    5e0a:	d955      	bls.n	5eb8 <_svfiprintf_r+0x180>
    5e0c:	2800      	cmp	r0, #0
    5e0e:	d015      	beq.n	5e3c <_svfiprintf_r+0x104>
    5e10:	9309      	str	r3, [sp, #36]	; 0x24
    5e12:	e013      	b.n	5e3c <_svfiprintf_r+0x104>
    5e14:	2b25      	cmp	r3, #37	; 0x25
    5e16:	d0b5      	beq.n	5d84 <_svfiprintf_r+0x4c>
    5e18:	3401      	adds	r4, #1
    5e1a:	e7b0      	b.n	5d7e <_svfiprintf_r+0x46>
    5e1c:	2301      	movs	r3, #1
    5e1e:	1b80      	subs	r0, r0, r6
    5e20:	4083      	lsls	r3, r0
    5e22:	6829      	ldr	r1, [r5, #0]
    5e24:	0014      	movs	r4, r2
    5e26:	430b      	orrs	r3, r1
    5e28:	602b      	str	r3, [r5, #0]
    5e2a:	e7cd      	b.n	5dc8 <_svfiprintf_r+0x90>
    5e2c:	9b05      	ldr	r3, [sp, #20]
    5e2e:	1d18      	adds	r0, r3, #4
    5e30:	681b      	ldr	r3, [r3, #0]
    5e32:	9005      	str	r0, [sp, #20]
    5e34:	2b00      	cmp	r3, #0
    5e36:	db39      	blt.n	5eac <_svfiprintf_r+0x174>
    5e38:	9309      	str	r3, [sp, #36]	; 0x24
    5e3a:	0014      	movs	r4, r2
    5e3c:	7823      	ldrb	r3, [r4, #0]
    5e3e:	2b2e      	cmp	r3, #46	; 0x2e
    5e40:	d10b      	bne.n	5e5a <_svfiprintf_r+0x122>
    5e42:	7863      	ldrb	r3, [r4, #1]
    5e44:	1c62      	adds	r2, r4, #1
    5e46:	2b2a      	cmp	r3, #42	; 0x2a
    5e48:	d13e      	bne.n	5ec8 <_svfiprintf_r+0x190>
    5e4a:	9b05      	ldr	r3, [sp, #20]
    5e4c:	3402      	adds	r4, #2
    5e4e:	1d1a      	adds	r2, r3, #4
    5e50:	681b      	ldr	r3, [r3, #0]
    5e52:	9205      	str	r2, [sp, #20]
    5e54:	2b00      	cmp	r3, #0
    5e56:	db34      	blt.n	5ec2 <_svfiprintf_r+0x18a>
    5e58:	9307      	str	r3, [sp, #28]
    5e5a:	4e35      	ldr	r6, [pc, #212]	; (5f30 <_svfiprintf_r+0x1f8>)
    5e5c:	7821      	ldrb	r1, [r4, #0]
    5e5e:	2203      	movs	r2, #3
    5e60:	0030      	movs	r0, r6
    5e62:	f000 fefd 	bl	6c60 <memchr>
    5e66:	2800      	cmp	r0, #0
    5e68:	d006      	beq.n	5e78 <_svfiprintf_r+0x140>
    5e6a:	2340      	movs	r3, #64	; 0x40
    5e6c:	1b80      	subs	r0, r0, r6
    5e6e:	4083      	lsls	r3, r0
    5e70:	682a      	ldr	r2, [r5, #0]
    5e72:	3401      	adds	r4, #1
    5e74:	4313      	orrs	r3, r2
    5e76:	602b      	str	r3, [r5, #0]
    5e78:	7821      	ldrb	r1, [r4, #0]
    5e7a:	2206      	movs	r2, #6
    5e7c:	482d      	ldr	r0, [pc, #180]	; (5f34 <_svfiprintf_r+0x1fc>)
    5e7e:	1c66      	adds	r6, r4, #1
    5e80:	7629      	strb	r1, [r5, #24]
    5e82:	f000 feed 	bl	6c60 <memchr>
    5e86:	2800      	cmp	r0, #0
    5e88:	d046      	beq.n	5f18 <_svfiprintf_r+0x1e0>
    5e8a:	4b2b      	ldr	r3, [pc, #172]	; (5f38 <_svfiprintf_r+0x200>)
    5e8c:	2b00      	cmp	r3, #0
    5e8e:	d12f      	bne.n	5ef0 <_svfiprintf_r+0x1b8>
    5e90:	6829      	ldr	r1, [r5, #0]
    5e92:	9b05      	ldr	r3, [sp, #20]
    5e94:	2207      	movs	r2, #7
    5e96:	05c9      	lsls	r1, r1, #23
    5e98:	d528      	bpl.n	5eec <_svfiprintf_r+0x1b4>
    5e9a:	189b      	adds	r3, r3, r2
    5e9c:	4393      	bics	r3, r2
    5e9e:	3308      	adds	r3, #8
    5ea0:	9305      	str	r3, [sp, #20]
    5ea2:	696b      	ldr	r3, [r5, #20]
    5ea4:	9a03      	ldr	r2, [sp, #12]
    5ea6:	189b      	adds	r3, r3, r2
    5ea8:	616b      	str	r3, [r5, #20]
    5eaa:	e767      	b.n	5d7c <_svfiprintf_r+0x44>
    5eac:	425b      	negs	r3, r3
    5eae:	60eb      	str	r3, [r5, #12]
    5eb0:	2302      	movs	r3, #2
    5eb2:	430b      	orrs	r3, r1
    5eb4:	602b      	str	r3, [r5, #0]
    5eb6:	e7c0      	b.n	5e3a <_svfiprintf_r+0x102>
    5eb8:	434b      	muls	r3, r1
    5eba:	3401      	adds	r4, #1
    5ebc:	189b      	adds	r3, r3, r2
    5ebe:	2001      	movs	r0, #1
    5ec0:	e7a0      	b.n	5e04 <_svfiprintf_r+0xcc>
    5ec2:	2301      	movs	r3, #1
    5ec4:	425b      	negs	r3, r3
    5ec6:	e7c7      	b.n	5e58 <_svfiprintf_r+0x120>
    5ec8:	2300      	movs	r3, #0
    5eca:	0014      	movs	r4, r2
    5ecc:	200a      	movs	r0, #10
    5ece:	001a      	movs	r2, r3
    5ed0:	606b      	str	r3, [r5, #4]
    5ed2:	7821      	ldrb	r1, [r4, #0]
    5ed4:	3930      	subs	r1, #48	; 0x30
    5ed6:	2909      	cmp	r1, #9
    5ed8:	d903      	bls.n	5ee2 <_svfiprintf_r+0x1aa>
    5eda:	2b00      	cmp	r3, #0
    5edc:	d0bd      	beq.n	5e5a <_svfiprintf_r+0x122>
    5ede:	9207      	str	r2, [sp, #28]
    5ee0:	e7bb      	b.n	5e5a <_svfiprintf_r+0x122>
    5ee2:	4342      	muls	r2, r0
    5ee4:	3401      	adds	r4, #1
    5ee6:	1852      	adds	r2, r2, r1
    5ee8:	2301      	movs	r3, #1
    5eea:	e7f2      	b.n	5ed2 <_svfiprintf_r+0x19a>
    5eec:	3307      	adds	r3, #7
    5eee:	e7d5      	b.n	5e9c <_svfiprintf_r+0x164>
    5ef0:	ab05      	add	r3, sp, #20
    5ef2:	9300      	str	r3, [sp, #0]
    5ef4:	003a      	movs	r2, r7
    5ef6:	4b11      	ldr	r3, [pc, #68]	; (5f3c <_svfiprintf_r+0x204>)
    5ef8:	0029      	movs	r1, r5
    5efa:	9802      	ldr	r0, [sp, #8]
    5efc:	e000      	b.n	5f00 <_svfiprintf_r+0x1c8>
    5efe:	bf00      	nop
    5f00:	9003      	str	r0, [sp, #12]
    5f02:	9b03      	ldr	r3, [sp, #12]
    5f04:	3301      	adds	r3, #1
    5f06:	d1cc      	bne.n	5ea2 <_svfiprintf_r+0x16a>
    5f08:	89bb      	ldrh	r3, [r7, #12]
    5f0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5f0c:	065b      	lsls	r3, r3, #25
    5f0e:	d400      	bmi.n	5f12 <_svfiprintf_r+0x1da>
    5f10:	e729      	b.n	5d66 <_svfiprintf_r+0x2e>
    5f12:	2001      	movs	r0, #1
    5f14:	4240      	negs	r0, r0
    5f16:	e726      	b.n	5d66 <_svfiprintf_r+0x2e>
    5f18:	ab05      	add	r3, sp, #20
    5f1a:	9300      	str	r3, [sp, #0]
    5f1c:	003a      	movs	r2, r7
    5f1e:	4b07      	ldr	r3, [pc, #28]	; (5f3c <_svfiprintf_r+0x204>)
    5f20:	0029      	movs	r1, r5
    5f22:	9802      	ldr	r0, [sp, #8]
    5f24:	f000 fa5c 	bl	63e0 <_printf_i>
    5f28:	e7ea      	b.n	5f00 <_svfiprintf_r+0x1c8>
    5f2a:	46c0      	nop			; (mov r8, r8)
    5f2c:	0000721b 	.word	0x0000721b
    5f30:	00007221 	.word	0x00007221
    5f34:	00007225 	.word	0x00007225
    5f38:	00000000 	.word	0x00000000
    5f3c:	00005c75 	.word	0x00005c75

00005f40 <_sungetc_r>:
    5f40:	b570      	push	{r4, r5, r6, lr}
    5f42:	0014      	movs	r4, r2
    5f44:	1c4b      	adds	r3, r1, #1
    5f46:	d103      	bne.n	5f50 <_sungetc_r+0x10>
    5f48:	2501      	movs	r5, #1
    5f4a:	426d      	negs	r5, r5
    5f4c:	0028      	movs	r0, r5
    5f4e:	bd70      	pop	{r4, r5, r6, pc}
    5f50:	8993      	ldrh	r3, [r2, #12]
    5f52:	2220      	movs	r2, #32
    5f54:	4393      	bics	r3, r2
    5f56:	6b62      	ldr	r2, [r4, #52]	; 0x34
    5f58:	81a3      	strh	r3, [r4, #12]
    5f5a:	b2ce      	uxtb	r6, r1
    5f5c:	b2cd      	uxtb	r5, r1
    5f5e:	6863      	ldr	r3, [r4, #4]
    5f60:	2a00      	cmp	r2, #0
    5f62:	d010      	beq.n	5f86 <_sungetc_r+0x46>
    5f64:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    5f66:	4293      	cmp	r3, r2
    5f68:	da07      	bge.n	5f7a <_sungetc_r+0x3a>
    5f6a:	6823      	ldr	r3, [r4, #0]
    5f6c:	3b01      	subs	r3, #1
    5f6e:	6023      	str	r3, [r4, #0]
    5f70:	701e      	strb	r6, [r3, #0]
    5f72:	6863      	ldr	r3, [r4, #4]
    5f74:	3301      	adds	r3, #1
    5f76:	6063      	str	r3, [r4, #4]
    5f78:	e7e8      	b.n	5f4c <_sungetc_r+0xc>
    5f7a:	0021      	movs	r1, r4
    5f7c:	f000 fe0e 	bl	6b9c <__submore>
    5f80:	2800      	cmp	r0, #0
    5f82:	d0f2      	beq.n	5f6a <_sungetc_r+0x2a>
    5f84:	e7e0      	b.n	5f48 <_sungetc_r+0x8>
    5f86:	6921      	ldr	r1, [r4, #16]
    5f88:	6822      	ldr	r2, [r4, #0]
    5f8a:	2900      	cmp	r1, #0
    5f8c:	d007      	beq.n	5f9e <_sungetc_r+0x5e>
    5f8e:	4291      	cmp	r1, r2
    5f90:	d205      	bcs.n	5f9e <_sungetc_r+0x5e>
    5f92:	1e51      	subs	r1, r2, #1
    5f94:	7808      	ldrb	r0, [r1, #0]
    5f96:	4285      	cmp	r5, r0
    5f98:	d101      	bne.n	5f9e <_sungetc_r+0x5e>
    5f9a:	6021      	str	r1, [r4, #0]
    5f9c:	e7ea      	b.n	5f74 <_sungetc_r+0x34>
    5f9e:	6423      	str	r3, [r4, #64]	; 0x40
    5fa0:	0023      	movs	r3, r4
    5fa2:	3344      	adds	r3, #68	; 0x44
    5fa4:	6363      	str	r3, [r4, #52]	; 0x34
    5fa6:	2303      	movs	r3, #3
    5fa8:	63a3      	str	r3, [r4, #56]	; 0x38
    5faa:	0023      	movs	r3, r4
    5fac:	3346      	adds	r3, #70	; 0x46
    5fae:	63e2      	str	r2, [r4, #60]	; 0x3c
    5fb0:	701e      	strb	r6, [r3, #0]
    5fb2:	6023      	str	r3, [r4, #0]
    5fb4:	2301      	movs	r3, #1
    5fb6:	e7de      	b.n	5f76 <_sungetc_r+0x36>

00005fb8 <__ssrefill_r>:
    5fb8:	b510      	push	{r4, lr}
    5fba:	000c      	movs	r4, r1
    5fbc:	6b49      	ldr	r1, [r1, #52]	; 0x34
    5fbe:	2900      	cmp	r1, #0
    5fc0:	d00e      	beq.n	5fe0 <__ssrefill_r+0x28>
    5fc2:	0023      	movs	r3, r4
    5fc4:	3344      	adds	r3, #68	; 0x44
    5fc6:	4299      	cmp	r1, r3
    5fc8:	d001      	beq.n	5fce <__ssrefill_r+0x16>
    5fca:	f7ff fd05 	bl	59d8 <_free_r>
    5fce:	2000      	movs	r0, #0
    5fd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5fd2:	6360      	str	r0, [r4, #52]	; 0x34
    5fd4:	6063      	str	r3, [r4, #4]
    5fd6:	4283      	cmp	r3, r0
    5fd8:	d002      	beq.n	5fe0 <__ssrefill_r+0x28>
    5fda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5fdc:	6023      	str	r3, [r4, #0]
    5fde:	bd10      	pop	{r4, pc}
    5fe0:	6923      	ldr	r3, [r4, #16]
    5fe2:	2001      	movs	r0, #1
    5fe4:	6023      	str	r3, [r4, #0]
    5fe6:	2300      	movs	r3, #0
    5fe8:	89a2      	ldrh	r2, [r4, #12]
    5fea:	6063      	str	r3, [r4, #4]
    5fec:	3320      	adds	r3, #32
    5fee:	4313      	orrs	r3, r2
    5ff0:	81a3      	strh	r3, [r4, #12]
    5ff2:	4240      	negs	r0, r0
    5ff4:	e7f3      	b.n	5fde <__ssrefill_r+0x26>
	...

00005ff8 <__ssvfiscanf_r>:
    5ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ffa:	4cbd      	ldr	r4, [pc, #756]	; (62f0 <__ssvfiscanf_r+0x2f8>)
    5ffc:	2586      	movs	r5, #134	; 0x86
    5ffe:	44a5      	add	sp, r4
    6000:	9303      	str	r3, [sp, #12]
    6002:	2300      	movs	r3, #0
    6004:	9348      	str	r3, [sp, #288]	; 0x120
    6006:	9349      	str	r3, [sp, #292]	; 0x124
    6008:	ab05      	add	r3, sp, #20
    600a:	934a      	str	r3, [sp, #296]	; 0x128
    600c:	23be      	movs	r3, #190	; 0xbe
    600e:	006d      	lsls	r5, r5, #1
    6010:	9000      	str	r0, [sp, #0]
    6012:	000c      	movs	r4, r1
    6014:	a802      	add	r0, sp, #8
    6016:	49b7      	ldr	r1, [pc, #732]	; (62f4 <__ssvfiscanf_r+0x2fc>)
    6018:	005b      	lsls	r3, r3, #1
    601a:	1940      	adds	r0, r0, r5
    601c:	27c0      	movs	r7, #192	; 0xc0
    601e:	50c1      	str	r1, [r0, r3]
    6020:	ab02      	add	r3, sp, #8
    6022:	195b      	adds	r3, r3, r5
    6024:	0015      	movs	r5, r2
    6026:	49b4      	ldr	r1, [pc, #720]	; (62f8 <__ssvfiscanf_r+0x300>)
    6028:	007f      	lsls	r7, r7, #1
    602a:	51d9      	str	r1, [r3, r7]
    602c:	782b      	ldrb	r3, [r5, #0]
    602e:	2b00      	cmp	r3, #0
    6030:	d100      	bne.n	6034 <__ssvfiscanf_r+0x3c>
    6032:	e15b      	b.n	62ec <__ssvfiscanf_r+0x2f4>
    6034:	f000 fdf4 	bl	6c20 <__locale_ctype_ptr>
    6038:	2208      	movs	r2, #8
    603a:	782b      	ldrb	r3, [r5, #0]
    603c:	18c0      	adds	r0, r0, r3
    603e:	9301      	str	r3, [sp, #4]
    6040:	7843      	ldrb	r3, [r0, #1]
    6042:	4013      	ands	r3, r2
    6044:	d141      	bne.n	60ca <__ssvfiscanf_r+0xd2>
    6046:	9a01      	ldr	r2, [sp, #4]
    6048:	1c6e      	adds	r6, r5, #1
    604a:	2a25      	cmp	r2, #37	; 0x25
    604c:	d000      	beq.n	6050 <__ssvfiscanf_r+0x58>
    604e:	e0a8      	b.n	61a2 <__ssvfiscanf_r+0x1aa>
    6050:	9347      	str	r3, [sp, #284]	; 0x11c
    6052:	9345      	str	r3, [sp, #276]	; 0x114
    6054:	786b      	ldrb	r3, [r5, #1]
    6056:	2b2a      	cmp	r3, #42	; 0x2a
    6058:	d102      	bne.n	6060 <__ssvfiscanf_r+0x68>
    605a:	3b1a      	subs	r3, #26
    605c:	9345      	str	r3, [sp, #276]	; 0x114
    605e:	1cae      	adds	r6, r5, #2
    6060:	0035      	movs	r5, r6
    6062:	220a      	movs	r2, #10
    6064:	7829      	ldrb	r1, [r5, #0]
    6066:	000b      	movs	r3, r1
    6068:	3b30      	subs	r3, #48	; 0x30
    606a:	2b09      	cmp	r3, #9
    606c:	d948      	bls.n	6100 <__ssvfiscanf_r+0x108>
    606e:	4ea3      	ldr	r6, [pc, #652]	; (62fc <__ssvfiscanf_r+0x304>)
    6070:	2203      	movs	r2, #3
    6072:	0030      	movs	r0, r6
    6074:	f000 fdf4 	bl	6c60 <memchr>
    6078:	2800      	cmp	r0, #0
    607a:	d007      	beq.n	608c <__ssvfiscanf_r+0x94>
    607c:	2301      	movs	r3, #1
    607e:	1b80      	subs	r0, r0, r6
    6080:	4083      	lsls	r3, r0
    6082:	9a45      	ldr	r2, [sp, #276]	; 0x114
    6084:	3501      	adds	r5, #1
    6086:	4313      	orrs	r3, r2
    6088:	9202      	str	r2, [sp, #8]
    608a:	9345      	str	r3, [sp, #276]	; 0x114
    608c:	782b      	ldrb	r3, [r5, #0]
    608e:	1c6e      	adds	r6, r5, #1
    6090:	2b67      	cmp	r3, #103	; 0x67
    6092:	d858      	bhi.n	6146 <__ssvfiscanf_r+0x14e>
    6094:	2b65      	cmp	r3, #101	; 0x65
    6096:	d300      	bcc.n	609a <__ssvfiscanf_r+0xa2>
    6098:	e0dd      	b.n	6256 <__ssvfiscanf_r+0x25e>
    609a:	2b47      	cmp	r3, #71	; 0x47
    609c:	d838      	bhi.n	6110 <__ssvfiscanf_r+0x118>
    609e:	2b45      	cmp	r3, #69	; 0x45
    60a0:	d300      	bcc.n	60a4 <__ssvfiscanf_r+0xac>
    60a2:	e0d8      	b.n	6256 <__ssvfiscanf_r+0x25e>
    60a4:	2b00      	cmp	r3, #0
    60a6:	d100      	bne.n	60aa <__ssvfiscanf_r+0xb2>
    60a8:	e11d      	b.n	62e6 <__ssvfiscanf_r+0x2ee>
    60aa:	2b25      	cmp	r3, #37	; 0x25
    60ac:	d079      	beq.n	61a2 <__ssvfiscanf_r+0x1aa>
    60ae:	2303      	movs	r3, #3
    60b0:	934b      	str	r3, [sp, #300]	; 0x12c
    60b2:	3307      	adds	r3, #7
    60b4:	9346      	str	r3, [sp, #280]	; 0x118
    60b6:	e053      	b.n	6160 <__ssvfiscanf_r+0x168>
    60b8:	9a49      	ldr	r2, [sp, #292]	; 0x124
    60ba:	3301      	adds	r3, #1
    60bc:	9201      	str	r2, [sp, #4]
    60be:	3201      	adds	r2, #1
    60c0:	9249      	str	r2, [sp, #292]	; 0x124
    60c2:	6862      	ldr	r2, [r4, #4]
    60c4:	6023      	str	r3, [r4, #0]
    60c6:	3a01      	subs	r2, #1
    60c8:	6062      	str	r2, [r4, #4]
    60ca:	6863      	ldr	r3, [r4, #4]
    60cc:	2b00      	cmp	r3, #0
    60ce:	dd0b      	ble.n	60e8 <__ssvfiscanf_r+0xf0>
    60d0:	f000 fda6 	bl	6c20 <__locale_ctype_ptr>
    60d4:	2108      	movs	r1, #8
    60d6:	6823      	ldr	r3, [r4, #0]
    60d8:	781a      	ldrb	r2, [r3, #0]
    60da:	1880      	adds	r0, r0, r2
    60dc:	7842      	ldrb	r2, [r0, #1]
    60de:	420a      	tst	r2, r1
    60e0:	d1ea      	bne.n	60b8 <__ssvfiscanf_r+0xc0>
    60e2:	1c6e      	adds	r6, r5, #1
    60e4:	0035      	movs	r5, r6
    60e6:	e7a1      	b.n	602c <__ssvfiscanf_r+0x34>
    60e8:	2286      	movs	r2, #134	; 0x86
    60ea:	ab02      	add	r3, sp, #8
    60ec:	0052      	lsls	r2, r2, #1
    60ee:	189b      	adds	r3, r3, r2
    60f0:	59db      	ldr	r3, [r3, r7]
    60f2:	0021      	movs	r1, r4
    60f4:	9800      	ldr	r0, [sp, #0]
    60f6:	9301      	str	r3, [sp, #4]
    60f8:	4798      	blx	r3
    60fa:	2800      	cmp	r0, #0
    60fc:	d0e8      	beq.n	60d0 <__ssvfiscanf_r+0xd8>
    60fe:	e7f0      	b.n	60e2 <__ssvfiscanf_r+0xea>
    6100:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    6102:	3501      	adds	r5, #1
    6104:	9302      	str	r3, [sp, #8]
    6106:	4353      	muls	r3, r2
    6108:	3b30      	subs	r3, #48	; 0x30
    610a:	1859      	adds	r1, r3, r1
    610c:	9147      	str	r1, [sp, #284]	; 0x11c
    610e:	e7a9      	b.n	6064 <__ssvfiscanf_r+0x6c>
    6110:	2b5b      	cmp	r3, #91	; 0x5b
    6112:	d100      	bne.n	6116 <__ssvfiscanf_r+0x11e>
    6114:	e077      	b.n	6206 <__ssvfiscanf_r+0x20e>
    6116:	d80f      	bhi.n	6138 <__ssvfiscanf_r+0x140>
    6118:	2b58      	cmp	r3, #88	; 0x58
    611a:	d1c8      	bne.n	60ae <__ssvfiscanf_r+0xb6>
    611c:	9a45      	ldr	r2, [sp, #276]	; 0x114
    611e:	9201      	str	r2, [sp, #4]
    6120:	2280      	movs	r2, #128	; 0x80
    6122:	9901      	ldr	r1, [sp, #4]
    6124:	0092      	lsls	r2, r2, #2
    6126:	430a      	orrs	r2, r1
    6128:	9245      	str	r2, [sp, #276]	; 0x114
    612a:	2210      	movs	r2, #16
    612c:	9246      	str	r2, [sp, #280]	; 0x118
    612e:	2203      	movs	r2, #3
    6130:	2b6e      	cmp	r3, #110	; 0x6e
    6132:	dd14      	ble.n	615e <__ssvfiscanf_r+0x166>
    6134:	3201      	adds	r2, #1
    6136:	e012      	b.n	615e <__ssvfiscanf_r+0x166>
    6138:	2b63      	cmp	r3, #99	; 0x63
    613a:	d100      	bne.n	613e <__ssvfiscanf_r+0x146>
    613c:	e071      	b.n	6222 <__ssvfiscanf_r+0x22a>
    613e:	2b64      	cmp	r3, #100	; 0x64
    6140:	d1b5      	bne.n	60ae <__ssvfiscanf_r+0xb6>
    6142:	220a      	movs	r2, #10
    6144:	e7f2      	b.n	612c <__ssvfiscanf_r+0x134>
    6146:	2b70      	cmp	r3, #112	; 0x70
    6148:	d052      	beq.n	61f0 <__ssvfiscanf_r+0x1f8>
    614a:	d822      	bhi.n	6192 <__ssvfiscanf_r+0x19a>
    614c:	2b6e      	cmp	r3, #110	; 0x6e
    614e:	d100      	bne.n	6152 <__ssvfiscanf_r+0x15a>
    6150:	e06f      	b.n	6232 <__ssvfiscanf_r+0x23a>
    6152:	d854      	bhi.n	61fe <__ssvfiscanf_r+0x206>
    6154:	2b69      	cmp	r3, #105	; 0x69
    6156:	d1aa      	bne.n	60ae <__ssvfiscanf_r+0xb6>
    6158:	2300      	movs	r3, #0
    615a:	2203      	movs	r2, #3
    615c:	9346      	str	r3, [sp, #280]	; 0x118
    615e:	924b      	str	r2, [sp, #300]	; 0x12c
    6160:	6863      	ldr	r3, [r4, #4]
    6162:	2b00      	cmp	r3, #0
    6164:	dc00      	bgt.n	6168 <__ssvfiscanf_r+0x170>
    6166:	e078      	b.n	625a <__ssvfiscanf_r+0x262>
    6168:	9b45      	ldr	r3, [sp, #276]	; 0x114
    616a:	9301      	str	r3, [sp, #4]
    616c:	065b      	lsls	r3, r3, #25
    616e:	d400      	bmi.n	6172 <__ssvfiscanf_r+0x17a>
    6170:	e08b      	b.n	628a <__ssvfiscanf_r+0x292>
    6172:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    6174:	2b02      	cmp	r3, #2
    6176:	dd00      	ble.n	617a <__ssvfiscanf_r+0x182>
    6178:	e09d      	b.n	62b6 <__ssvfiscanf_r+0x2be>
    617a:	ab03      	add	r3, sp, #12
    617c:	0022      	movs	r2, r4
    617e:	a945      	add	r1, sp, #276	; 0x114
    6180:	9800      	ldr	r0, [sp, #0]
    6182:	f000 fa47 	bl	6614 <_scanf_chars>
    6186:	2801      	cmp	r0, #1
    6188:	d100      	bne.n	618c <__ssvfiscanf_r+0x194>
    618a:	e0af      	b.n	62ec <__ssvfiscanf_r+0x2f4>
    618c:	2802      	cmp	r0, #2
    618e:	d1a9      	bne.n	60e4 <__ssvfiscanf_r+0xec>
    6190:	e025      	b.n	61de <__ssvfiscanf_r+0x1e6>
    6192:	2b75      	cmp	r3, #117	; 0x75
    6194:	d0d5      	beq.n	6142 <__ssvfiscanf_r+0x14a>
    6196:	2b78      	cmp	r3, #120	; 0x78
    6198:	d0c0      	beq.n	611c <__ssvfiscanf_r+0x124>
    619a:	2b73      	cmp	r3, #115	; 0x73
    619c:	d187      	bne.n	60ae <__ssvfiscanf_r+0xb6>
    619e:	2302      	movs	r3, #2
    61a0:	e03d      	b.n	621e <__ssvfiscanf_r+0x226>
    61a2:	6863      	ldr	r3, [r4, #4]
    61a4:	2b00      	cmp	r3, #0
    61a6:	dd0f      	ble.n	61c8 <__ssvfiscanf_r+0x1d0>
    61a8:	6823      	ldr	r3, [r4, #0]
    61aa:	9901      	ldr	r1, [sp, #4]
    61ac:	781a      	ldrb	r2, [r3, #0]
    61ae:	4291      	cmp	r1, r2
    61b0:	d000      	beq.n	61b4 <__ssvfiscanf_r+0x1bc>
    61b2:	e09b      	b.n	62ec <__ssvfiscanf_r+0x2f4>
    61b4:	3301      	adds	r3, #1
    61b6:	6862      	ldr	r2, [r4, #4]
    61b8:	6023      	str	r3, [r4, #0]
    61ba:	9b49      	ldr	r3, [sp, #292]	; 0x124
    61bc:	3a01      	subs	r2, #1
    61be:	9301      	str	r3, [sp, #4]
    61c0:	3301      	adds	r3, #1
    61c2:	6062      	str	r2, [r4, #4]
    61c4:	9349      	str	r3, [sp, #292]	; 0x124
    61c6:	e78d      	b.n	60e4 <__ssvfiscanf_r+0xec>
    61c8:	2286      	movs	r2, #134	; 0x86
    61ca:	ab02      	add	r3, sp, #8
    61cc:	0052      	lsls	r2, r2, #1
    61ce:	189b      	adds	r3, r3, r2
    61d0:	59db      	ldr	r3, [r3, r7]
    61d2:	0021      	movs	r1, r4
    61d4:	9800      	ldr	r0, [sp, #0]
    61d6:	9302      	str	r3, [sp, #8]
    61d8:	4798      	blx	r3
    61da:	2800      	cmp	r0, #0
    61dc:	d0e4      	beq.n	61a8 <__ssvfiscanf_r+0x1b0>
    61de:	9848      	ldr	r0, [sp, #288]	; 0x120
    61e0:	2800      	cmp	r0, #0
    61e2:	d000      	beq.n	61e6 <__ssvfiscanf_r+0x1ee>
    61e4:	e07b      	b.n	62de <__ssvfiscanf_r+0x2e6>
    61e6:	3801      	subs	r0, #1
    61e8:	23a7      	movs	r3, #167	; 0xa7
    61ea:	009b      	lsls	r3, r3, #2
    61ec:	449d      	add	sp, r3
    61ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61f0:	9a45      	ldr	r2, [sp, #276]	; 0x114
    61f2:	9201      	str	r2, [sp, #4]
    61f4:	2220      	movs	r2, #32
    61f6:	9901      	ldr	r1, [sp, #4]
    61f8:	430a      	orrs	r2, r1
    61fa:	9245      	str	r2, [sp, #276]	; 0x114
    61fc:	e78e      	b.n	611c <__ssvfiscanf_r+0x124>
    61fe:	2308      	movs	r3, #8
    6200:	2204      	movs	r2, #4
    6202:	9346      	str	r3, [sp, #280]	; 0x118
    6204:	e7ab      	b.n	615e <__ssvfiscanf_r+0x166>
    6206:	0031      	movs	r1, r6
    6208:	a805      	add	r0, sp, #20
    620a:	f000 fb67 	bl	68dc <__sccl>
    620e:	9b45      	ldr	r3, [sp, #276]	; 0x114
    6210:	0006      	movs	r6, r0
    6212:	9301      	str	r3, [sp, #4]
    6214:	2340      	movs	r3, #64	; 0x40
    6216:	9a01      	ldr	r2, [sp, #4]
    6218:	4313      	orrs	r3, r2
    621a:	9345      	str	r3, [sp, #276]	; 0x114
    621c:	2301      	movs	r3, #1
    621e:	934b      	str	r3, [sp, #300]	; 0x12c
    6220:	e79e      	b.n	6160 <__ssvfiscanf_r+0x168>
    6222:	9b45      	ldr	r3, [sp, #276]	; 0x114
    6224:	9301      	str	r3, [sp, #4]
    6226:	2340      	movs	r3, #64	; 0x40
    6228:	9a01      	ldr	r2, [sp, #4]
    622a:	4313      	orrs	r3, r2
    622c:	9345      	str	r3, [sp, #276]	; 0x114
    622e:	2300      	movs	r3, #0
    6230:	e7f5      	b.n	621e <__ssvfiscanf_r+0x226>
    6232:	9945      	ldr	r1, [sp, #276]	; 0x114
    6234:	06cb      	lsls	r3, r1, #27
    6236:	d500      	bpl.n	623a <__ssvfiscanf_r+0x242>
    6238:	e754      	b.n	60e4 <__ssvfiscanf_r+0xec>
    623a:	9b03      	ldr	r3, [sp, #12]
    623c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    623e:	07c8      	lsls	r0, r1, #31
    6240:	d504      	bpl.n	624c <__ssvfiscanf_r+0x254>
    6242:	1d19      	adds	r1, r3, #4
    6244:	9103      	str	r1, [sp, #12]
    6246:	681b      	ldr	r3, [r3, #0]
    6248:	801a      	strh	r2, [r3, #0]
    624a:	e74b      	b.n	60e4 <__ssvfiscanf_r+0xec>
    624c:	1d19      	adds	r1, r3, #4
    624e:	9103      	str	r1, [sp, #12]
    6250:	681b      	ldr	r3, [r3, #0]
    6252:	601a      	str	r2, [r3, #0]
    6254:	e746      	b.n	60e4 <__ssvfiscanf_r+0xec>
    6256:	2305      	movs	r3, #5
    6258:	e7e1      	b.n	621e <__ssvfiscanf_r+0x226>
    625a:	2286      	movs	r2, #134	; 0x86
    625c:	ab02      	add	r3, sp, #8
    625e:	0052      	lsls	r2, r2, #1
    6260:	189b      	adds	r3, r3, r2
    6262:	59db      	ldr	r3, [r3, r7]
    6264:	0021      	movs	r1, r4
    6266:	9800      	ldr	r0, [sp, #0]
    6268:	9301      	str	r3, [sp, #4]
    626a:	4798      	blx	r3
    626c:	2800      	cmp	r0, #0
    626e:	d100      	bne.n	6272 <__ssvfiscanf_r+0x27a>
    6270:	e77a      	b.n	6168 <__ssvfiscanf_r+0x170>
    6272:	e7b4      	b.n	61de <__ssvfiscanf_r+0x1e6>
    6274:	9a49      	ldr	r2, [sp, #292]	; 0x124
    6276:	9201      	str	r2, [sp, #4]
    6278:	3201      	adds	r2, #1
    627a:	9249      	str	r2, [sp, #292]	; 0x124
    627c:	6862      	ldr	r2, [r4, #4]
    627e:	3a01      	subs	r2, #1
    6280:	6062      	str	r2, [r4, #4]
    6282:	2a00      	cmp	r2, #0
    6284:	dd0b      	ble.n	629e <__ssvfiscanf_r+0x2a6>
    6286:	3301      	adds	r3, #1
    6288:	6023      	str	r3, [r4, #0]
    628a:	f000 fcc9 	bl	6c20 <__locale_ctype_ptr>
    628e:	2108      	movs	r1, #8
    6290:	6823      	ldr	r3, [r4, #0]
    6292:	781a      	ldrb	r2, [r3, #0]
    6294:	1880      	adds	r0, r0, r2
    6296:	7842      	ldrb	r2, [r0, #1]
    6298:	420a      	tst	r2, r1
    629a:	d1eb      	bne.n	6274 <__ssvfiscanf_r+0x27c>
    629c:	e769      	b.n	6172 <__ssvfiscanf_r+0x17a>
    629e:	2286      	movs	r2, #134	; 0x86
    62a0:	ab02      	add	r3, sp, #8
    62a2:	0052      	lsls	r2, r2, #1
    62a4:	189b      	adds	r3, r3, r2
    62a6:	59db      	ldr	r3, [r3, r7]
    62a8:	0021      	movs	r1, r4
    62aa:	9800      	ldr	r0, [sp, #0]
    62ac:	9301      	str	r3, [sp, #4]
    62ae:	4798      	blx	r3
    62b0:	2800      	cmp	r0, #0
    62b2:	d0ea      	beq.n	628a <__ssvfiscanf_r+0x292>
    62b4:	e793      	b.n	61de <__ssvfiscanf_r+0x1e6>
    62b6:	2b04      	cmp	r3, #4
    62b8:	dc06      	bgt.n	62c8 <__ssvfiscanf_r+0x2d0>
    62ba:	ab03      	add	r3, sp, #12
    62bc:	0022      	movs	r2, r4
    62be:	a945      	add	r1, sp, #276	; 0x114
    62c0:	9800      	ldr	r0, [sp, #0]
    62c2:	f000 fa0b 	bl	66dc <_scanf_i>
    62c6:	e75e      	b.n	6186 <__ssvfiscanf_r+0x18e>
    62c8:	4b0d      	ldr	r3, [pc, #52]	; (6300 <__ssvfiscanf_r+0x308>)
    62ca:	2b00      	cmp	r3, #0
    62cc:	d100      	bne.n	62d0 <__ssvfiscanf_r+0x2d8>
    62ce:	e709      	b.n	60e4 <__ssvfiscanf_r+0xec>
    62d0:	ab03      	add	r3, sp, #12
    62d2:	0022      	movs	r2, r4
    62d4:	a945      	add	r1, sp, #276	; 0x114
    62d6:	9800      	ldr	r0, [sp, #0]
    62d8:	e000      	b.n	62dc <__ssvfiscanf_r+0x2e4>
    62da:	bf00      	nop
    62dc:	e753      	b.n	6186 <__ssvfiscanf_r+0x18e>
    62de:	89a3      	ldrh	r3, [r4, #12]
    62e0:	065b      	lsls	r3, r3, #25
    62e2:	d400      	bmi.n	62e6 <__ssvfiscanf_r+0x2ee>
    62e4:	e780      	b.n	61e8 <__ssvfiscanf_r+0x1f0>
    62e6:	2001      	movs	r0, #1
    62e8:	4240      	negs	r0, r0
    62ea:	e77d      	b.n	61e8 <__ssvfiscanf_r+0x1f0>
    62ec:	9848      	ldr	r0, [sp, #288]	; 0x120
    62ee:	e77b      	b.n	61e8 <__ssvfiscanf_r+0x1f0>
    62f0:	fffffd64 	.word	0xfffffd64
    62f4:	00005f41 	.word	0x00005f41
    62f8:	00005fb9 	.word	0x00005fb9
    62fc:	00007221 	.word	0x00007221
    6300:	00000000 	.word	0x00000000

00006304 <_printf_common>:
    6304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6306:	0015      	movs	r5, r2
    6308:	9301      	str	r3, [sp, #4]
    630a:	688a      	ldr	r2, [r1, #8]
    630c:	690b      	ldr	r3, [r1, #16]
    630e:	9000      	str	r0, [sp, #0]
    6310:	000c      	movs	r4, r1
    6312:	4293      	cmp	r3, r2
    6314:	da00      	bge.n	6318 <_printf_common+0x14>
    6316:	0013      	movs	r3, r2
    6318:	0022      	movs	r2, r4
    631a:	602b      	str	r3, [r5, #0]
    631c:	3243      	adds	r2, #67	; 0x43
    631e:	7812      	ldrb	r2, [r2, #0]
    6320:	2a00      	cmp	r2, #0
    6322:	d001      	beq.n	6328 <_printf_common+0x24>
    6324:	3301      	adds	r3, #1
    6326:	602b      	str	r3, [r5, #0]
    6328:	6823      	ldr	r3, [r4, #0]
    632a:	069b      	lsls	r3, r3, #26
    632c:	d502      	bpl.n	6334 <_printf_common+0x30>
    632e:	682b      	ldr	r3, [r5, #0]
    6330:	3302      	adds	r3, #2
    6332:	602b      	str	r3, [r5, #0]
    6334:	2706      	movs	r7, #6
    6336:	6823      	ldr	r3, [r4, #0]
    6338:	401f      	ands	r7, r3
    633a:	d027      	beq.n	638c <_printf_common+0x88>
    633c:	0023      	movs	r3, r4
    633e:	3343      	adds	r3, #67	; 0x43
    6340:	781b      	ldrb	r3, [r3, #0]
    6342:	1e5a      	subs	r2, r3, #1
    6344:	4193      	sbcs	r3, r2
    6346:	6822      	ldr	r2, [r4, #0]
    6348:	0692      	lsls	r2, r2, #26
    634a:	d430      	bmi.n	63ae <_printf_common+0xaa>
    634c:	0022      	movs	r2, r4
    634e:	9901      	ldr	r1, [sp, #4]
    6350:	3243      	adds	r2, #67	; 0x43
    6352:	9800      	ldr	r0, [sp, #0]
    6354:	9e08      	ldr	r6, [sp, #32]
    6356:	47b0      	blx	r6
    6358:	1c43      	adds	r3, r0, #1
    635a:	d025      	beq.n	63a8 <_printf_common+0xa4>
    635c:	2306      	movs	r3, #6
    635e:	6820      	ldr	r0, [r4, #0]
    6360:	682a      	ldr	r2, [r5, #0]
    6362:	68e1      	ldr	r1, [r4, #12]
    6364:	4003      	ands	r3, r0
    6366:	2500      	movs	r5, #0
    6368:	2b04      	cmp	r3, #4
    636a:	d103      	bne.n	6374 <_printf_common+0x70>
    636c:	1a8d      	subs	r5, r1, r2
    636e:	43eb      	mvns	r3, r5
    6370:	17db      	asrs	r3, r3, #31
    6372:	401d      	ands	r5, r3
    6374:	68a3      	ldr	r3, [r4, #8]
    6376:	6922      	ldr	r2, [r4, #16]
    6378:	4293      	cmp	r3, r2
    637a:	dd01      	ble.n	6380 <_printf_common+0x7c>
    637c:	1a9b      	subs	r3, r3, r2
    637e:	18ed      	adds	r5, r5, r3
    6380:	2700      	movs	r7, #0
    6382:	42bd      	cmp	r5, r7
    6384:	d120      	bne.n	63c8 <_printf_common+0xc4>
    6386:	2000      	movs	r0, #0
    6388:	e010      	b.n	63ac <_printf_common+0xa8>
    638a:	3701      	adds	r7, #1
    638c:	68e3      	ldr	r3, [r4, #12]
    638e:	682a      	ldr	r2, [r5, #0]
    6390:	1a9b      	subs	r3, r3, r2
    6392:	429f      	cmp	r7, r3
    6394:	dad2      	bge.n	633c <_printf_common+0x38>
    6396:	0022      	movs	r2, r4
    6398:	2301      	movs	r3, #1
    639a:	3219      	adds	r2, #25
    639c:	9901      	ldr	r1, [sp, #4]
    639e:	9800      	ldr	r0, [sp, #0]
    63a0:	9e08      	ldr	r6, [sp, #32]
    63a2:	47b0      	blx	r6
    63a4:	1c43      	adds	r3, r0, #1
    63a6:	d1f0      	bne.n	638a <_printf_common+0x86>
    63a8:	2001      	movs	r0, #1
    63aa:	4240      	negs	r0, r0
    63ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    63ae:	2030      	movs	r0, #48	; 0x30
    63b0:	18e1      	adds	r1, r4, r3
    63b2:	3143      	adds	r1, #67	; 0x43
    63b4:	7008      	strb	r0, [r1, #0]
    63b6:	0021      	movs	r1, r4
    63b8:	1c5a      	adds	r2, r3, #1
    63ba:	3145      	adds	r1, #69	; 0x45
    63bc:	7809      	ldrb	r1, [r1, #0]
    63be:	18a2      	adds	r2, r4, r2
    63c0:	3243      	adds	r2, #67	; 0x43
    63c2:	3302      	adds	r3, #2
    63c4:	7011      	strb	r1, [r2, #0]
    63c6:	e7c1      	b.n	634c <_printf_common+0x48>
    63c8:	0022      	movs	r2, r4
    63ca:	2301      	movs	r3, #1
    63cc:	321a      	adds	r2, #26
    63ce:	9901      	ldr	r1, [sp, #4]
    63d0:	9800      	ldr	r0, [sp, #0]
    63d2:	9e08      	ldr	r6, [sp, #32]
    63d4:	47b0      	blx	r6
    63d6:	1c43      	adds	r3, r0, #1
    63d8:	d0e6      	beq.n	63a8 <_printf_common+0xa4>
    63da:	3701      	adds	r7, #1
    63dc:	e7d1      	b.n	6382 <_printf_common+0x7e>
	...

000063e0 <_printf_i>:
    63e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    63e2:	b08b      	sub	sp, #44	; 0x2c
    63e4:	9206      	str	r2, [sp, #24]
    63e6:	000a      	movs	r2, r1
    63e8:	3243      	adds	r2, #67	; 0x43
    63ea:	9307      	str	r3, [sp, #28]
    63ec:	9005      	str	r0, [sp, #20]
    63ee:	9204      	str	r2, [sp, #16]
    63f0:	7e0a      	ldrb	r2, [r1, #24]
    63f2:	000c      	movs	r4, r1
    63f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    63f6:	2a6e      	cmp	r2, #110	; 0x6e
    63f8:	d100      	bne.n	63fc <_printf_i+0x1c>
    63fa:	e08f      	b.n	651c <_printf_i+0x13c>
    63fc:	d817      	bhi.n	642e <_printf_i+0x4e>
    63fe:	2a63      	cmp	r2, #99	; 0x63
    6400:	d02c      	beq.n	645c <_printf_i+0x7c>
    6402:	d808      	bhi.n	6416 <_printf_i+0x36>
    6404:	2a00      	cmp	r2, #0
    6406:	d100      	bne.n	640a <_printf_i+0x2a>
    6408:	e099      	b.n	653e <_printf_i+0x15e>
    640a:	2a58      	cmp	r2, #88	; 0x58
    640c:	d054      	beq.n	64b8 <_printf_i+0xd8>
    640e:	0026      	movs	r6, r4
    6410:	3642      	adds	r6, #66	; 0x42
    6412:	7032      	strb	r2, [r6, #0]
    6414:	e029      	b.n	646a <_printf_i+0x8a>
    6416:	2a64      	cmp	r2, #100	; 0x64
    6418:	d001      	beq.n	641e <_printf_i+0x3e>
    641a:	2a69      	cmp	r2, #105	; 0x69
    641c:	d1f7      	bne.n	640e <_printf_i+0x2e>
    641e:	6821      	ldr	r1, [r4, #0]
    6420:	681a      	ldr	r2, [r3, #0]
    6422:	0608      	lsls	r0, r1, #24
    6424:	d523      	bpl.n	646e <_printf_i+0x8e>
    6426:	1d11      	adds	r1, r2, #4
    6428:	6019      	str	r1, [r3, #0]
    642a:	6815      	ldr	r5, [r2, #0]
    642c:	e025      	b.n	647a <_printf_i+0x9a>
    642e:	2a73      	cmp	r2, #115	; 0x73
    6430:	d100      	bne.n	6434 <_printf_i+0x54>
    6432:	e088      	b.n	6546 <_printf_i+0x166>
    6434:	d808      	bhi.n	6448 <_printf_i+0x68>
    6436:	2a6f      	cmp	r2, #111	; 0x6f
    6438:	d029      	beq.n	648e <_printf_i+0xae>
    643a:	2a70      	cmp	r2, #112	; 0x70
    643c:	d1e7      	bne.n	640e <_printf_i+0x2e>
    643e:	2220      	movs	r2, #32
    6440:	6809      	ldr	r1, [r1, #0]
    6442:	430a      	orrs	r2, r1
    6444:	6022      	str	r2, [r4, #0]
    6446:	e003      	b.n	6450 <_printf_i+0x70>
    6448:	2a75      	cmp	r2, #117	; 0x75
    644a:	d020      	beq.n	648e <_printf_i+0xae>
    644c:	2a78      	cmp	r2, #120	; 0x78
    644e:	d1de      	bne.n	640e <_printf_i+0x2e>
    6450:	0022      	movs	r2, r4
    6452:	2178      	movs	r1, #120	; 0x78
    6454:	3245      	adds	r2, #69	; 0x45
    6456:	7011      	strb	r1, [r2, #0]
    6458:	4a6c      	ldr	r2, [pc, #432]	; (660c <_printf_i+0x22c>)
    645a:	e030      	b.n	64be <_printf_i+0xde>
    645c:	000e      	movs	r6, r1
    645e:	681a      	ldr	r2, [r3, #0]
    6460:	3642      	adds	r6, #66	; 0x42
    6462:	1d11      	adds	r1, r2, #4
    6464:	6019      	str	r1, [r3, #0]
    6466:	6813      	ldr	r3, [r2, #0]
    6468:	7033      	strb	r3, [r6, #0]
    646a:	2301      	movs	r3, #1
    646c:	e079      	b.n	6562 <_printf_i+0x182>
    646e:	0649      	lsls	r1, r1, #25
    6470:	d5d9      	bpl.n	6426 <_printf_i+0x46>
    6472:	1d11      	adds	r1, r2, #4
    6474:	6019      	str	r1, [r3, #0]
    6476:	2300      	movs	r3, #0
    6478:	5ed5      	ldrsh	r5, [r2, r3]
    647a:	2d00      	cmp	r5, #0
    647c:	da03      	bge.n	6486 <_printf_i+0xa6>
    647e:	232d      	movs	r3, #45	; 0x2d
    6480:	9a04      	ldr	r2, [sp, #16]
    6482:	426d      	negs	r5, r5
    6484:	7013      	strb	r3, [r2, #0]
    6486:	4b62      	ldr	r3, [pc, #392]	; (6610 <_printf_i+0x230>)
    6488:	270a      	movs	r7, #10
    648a:	9303      	str	r3, [sp, #12]
    648c:	e02f      	b.n	64ee <_printf_i+0x10e>
    648e:	6820      	ldr	r0, [r4, #0]
    6490:	6819      	ldr	r1, [r3, #0]
    6492:	0605      	lsls	r5, r0, #24
    6494:	d503      	bpl.n	649e <_printf_i+0xbe>
    6496:	1d08      	adds	r0, r1, #4
    6498:	6018      	str	r0, [r3, #0]
    649a:	680d      	ldr	r5, [r1, #0]
    649c:	e005      	b.n	64aa <_printf_i+0xca>
    649e:	0640      	lsls	r0, r0, #25
    64a0:	d5f9      	bpl.n	6496 <_printf_i+0xb6>
    64a2:	680d      	ldr	r5, [r1, #0]
    64a4:	1d08      	adds	r0, r1, #4
    64a6:	6018      	str	r0, [r3, #0]
    64a8:	b2ad      	uxth	r5, r5
    64aa:	4b59      	ldr	r3, [pc, #356]	; (6610 <_printf_i+0x230>)
    64ac:	2708      	movs	r7, #8
    64ae:	9303      	str	r3, [sp, #12]
    64b0:	2a6f      	cmp	r2, #111	; 0x6f
    64b2:	d018      	beq.n	64e6 <_printf_i+0x106>
    64b4:	270a      	movs	r7, #10
    64b6:	e016      	b.n	64e6 <_printf_i+0x106>
    64b8:	3145      	adds	r1, #69	; 0x45
    64ba:	700a      	strb	r2, [r1, #0]
    64bc:	4a54      	ldr	r2, [pc, #336]	; (6610 <_printf_i+0x230>)
    64be:	9203      	str	r2, [sp, #12]
    64c0:	681a      	ldr	r2, [r3, #0]
    64c2:	6821      	ldr	r1, [r4, #0]
    64c4:	1d10      	adds	r0, r2, #4
    64c6:	6018      	str	r0, [r3, #0]
    64c8:	6815      	ldr	r5, [r2, #0]
    64ca:	0608      	lsls	r0, r1, #24
    64cc:	d522      	bpl.n	6514 <_printf_i+0x134>
    64ce:	07cb      	lsls	r3, r1, #31
    64d0:	d502      	bpl.n	64d8 <_printf_i+0xf8>
    64d2:	2320      	movs	r3, #32
    64d4:	4319      	orrs	r1, r3
    64d6:	6021      	str	r1, [r4, #0]
    64d8:	2710      	movs	r7, #16
    64da:	2d00      	cmp	r5, #0
    64dc:	d103      	bne.n	64e6 <_printf_i+0x106>
    64de:	2320      	movs	r3, #32
    64e0:	6822      	ldr	r2, [r4, #0]
    64e2:	439a      	bics	r2, r3
    64e4:	6022      	str	r2, [r4, #0]
    64e6:	0023      	movs	r3, r4
    64e8:	2200      	movs	r2, #0
    64ea:	3343      	adds	r3, #67	; 0x43
    64ec:	701a      	strb	r2, [r3, #0]
    64ee:	6863      	ldr	r3, [r4, #4]
    64f0:	60a3      	str	r3, [r4, #8]
    64f2:	2b00      	cmp	r3, #0
    64f4:	db5c      	blt.n	65b0 <_printf_i+0x1d0>
    64f6:	2204      	movs	r2, #4
    64f8:	6821      	ldr	r1, [r4, #0]
    64fa:	4391      	bics	r1, r2
    64fc:	6021      	str	r1, [r4, #0]
    64fe:	2d00      	cmp	r5, #0
    6500:	d158      	bne.n	65b4 <_printf_i+0x1d4>
    6502:	9e04      	ldr	r6, [sp, #16]
    6504:	2b00      	cmp	r3, #0
    6506:	d064      	beq.n	65d2 <_printf_i+0x1f2>
    6508:	0026      	movs	r6, r4
    650a:	9b03      	ldr	r3, [sp, #12]
    650c:	3642      	adds	r6, #66	; 0x42
    650e:	781b      	ldrb	r3, [r3, #0]
    6510:	7033      	strb	r3, [r6, #0]
    6512:	e05e      	b.n	65d2 <_printf_i+0x1f2>
    6514:	0648      	lsls	r0, r1, #25
    6516:	d5da      	bpl.n	64ce <_printf_i+0xee>
    6518:	b2ad      	uxth	r5, r5
    651a:	e7d8      	b.n	64ce <_printf_i+0xee>
    651c:	6809      	ldr	r1, [r1, #0]
    651e:	681a      	ldr	r2, [r3, #0]
    6520:	0608      	lsls	r0, r1, #24
    6522:	d505      	bpl.n	6530 <_printf_i+0x150>
    6524:	1d11      	adds	r1, r2, #4
    6526:	6019      	str	r1, [r3, #0]
    6528:	6813      	ldr	r3, [r2, #0]
    652a:	6962      	ldr	r2, [r4, #20]
    652c:	601a      	str	r2, [r3, #0]
    652e:	e006      	b.n	653e <_printf_i+0x15e>
    6530:	0649      	lsls	r1, r1, #25
    6532:	d5f7      	bpl.n	6524 <_printf_i+0x144>
    6534:	1d11      	adds	r1, r2, #4
    6536:	6019      	str	r1, [r3, #0]
    6538:	6813      	ldr	r3, [r2, #0]
    653a:	8aa2      	ldrh	r2, [r4, #20]
    653c:	801a      	strh	r2, [r3, #0]
    653e:	2300      	movs	r3, #0
    6540:	9e04      	ldr	r6, [sp, #16]
    6542:	6123      	str	r3, [r4, #16]
    6544:	e054      	b.n	65f0 <_printf_i+0x210>
    6546:	681a      	ldr	r2, [r3, #0]
    6548:	1d11      	adds	r1, r2, #4
    654a:	6019      	str	r1, [r3, #0]
    654c:	6816      	ldr	r6, [r2, #0]
    654e:	2100      	movs	r1, #0
    6550:	6862      	ldr	r2, [r4, #4]
    6552:	0030      	movs	r0, r6
    6554:	f000 fb84 	bl	6c60 <memchr>
    6558:	2800      	cmp	r0, #0
    655a:	d001      	beq.n	6560 <_printf_i+0x180>
    655c:	1b80      	subs	r0, r0, r6
    655e:	6060      	str	r0, [r4, #4]
    6560:	6863      	ldr	r3, [r4, #4]
    6562:	6123      	str	r3, [r4, #16]
    6564:	2300      	movs	r3, #0
    6566:	9a04      	ldr	r2, [sp, #16]
    6568:	7013      	strb	r3, [r2, #0]
    656a:	e041      	b.n	65f0 <_printf_i+0x210>
    656c:	6923      	ldr	r3, [r4, #16]
    656e:	0032      	movs	r2, r6
    6570:	9906      	ldr	r1, [sp, #24]
    6572:	9805      	ldr	r0, [sp, #20]
    6574:	9d07      	ldr	r5, [sp, #28]
    6576:	47a8      	blx	r5
    6578:	1c43      	adds	r3, r0, #1
    657a:	d043      	beq.n	6604 <_printf_i+0x224>
    657c:	6823      	ldr	r3, [r4, #0]
    657e:	2500      	movs	r5, #0
    6580:	079b      	lsls	r3, r3, #30
    6582:	d40f      	bmi.n	65a4 <_printf_i+0x1c4>
    6584:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6586:	68e0      	ldr	r0, [r4, #12]
    6588:	4298      	cmp	r0, r3
    658a:	da3d      	bge.n	6608 <_printf_i+0x228>
    658c:	0018      	movs	r0, r3
    658e:	e03b      	b.n	6608 <_printf_i+0x228>
    6590:	0022      	movs	r2, r4
    6592:	2301      	movs	r3, #1
    6594:	3219      	adds	r2, #25
    6596:	9906      	ldr	r1, [sp, #24]
    6598:	9805      	ldr	r0, [sp, #20]
    659a:	9e07      	ldr	r6, [sp, #28]
    659c:	47b0      	blx	r6
    659e:	1c43      	adds	r3, r0, #1
    65a0:	d030      	beq.n	6604 <_printf_i+0x224>
    65a2:	3501      	adds	r5, #1
    65a4:	68e3      	ldr	r3, [r4, #12]
    65a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    65a8:	1a9b      	subs	r3, r3, r2
    65aa:	429d      	cmp	r5, r3
    65ac:	dbf0      	blt.n	6590 <_printf_i+0x1b0>
    65ae:	e7e9      	b.n	6584 <_printf_i+0x1a4>
    65b0:	2d00      	cmp	r5, #0
    65b2:	d0a9      	beq.n	6508 <_printf_i+0x128>
    65b4:	9e04      	ldr	r6, [sp, #16]
    65b6:	0028      	movs	r0, r5
    65b8:	0039      	movs	r1, r7
    65ba:	f7fe ff89 	bl	54d0 <__aeabi_uidivmod>
    65be:	9b03      	ldr	r3, [sp, #12]
    65c0:	3e01      	subs	r6, #1
    65c2:	5c5b      	ldrb	r3, [r3, r1]
    65c4:	0028      	movs	r0, r5
    65c6:	7033      	strb	r3, [r6, #0]
    65c8:	0039      	movs	r1, r7
    65ca:	f7fe fefb 	bl	53c4 <__udivsi3>
    65ce:	1e05      	subs	r5, r0, #0
    65d0:	d1f1      	bne.n	65b6 <_printf_i+0x1d6>
    65d2:	2f08      	cmp	r7, #8
    65d4:	d109      	bne.n	65ea <_printf_i+0x20a>
    65d6:	6823      	ldr	r3, [r4, #0]
    65d8:	07db      	lsls	r3, r3, #31
    65da:	d506      	bpl.n	65ea <_printf_i+0x20a>
    65dc:	6863      	ldr	r3, [r4, #4]
    65de:	6922      	ldr	r2, [r4, #16]
    65e0:	4293      	cmp	r3, r2
    65e2:	dc02      	bgt.n	65ea <_printf_i+0x20a>
    65e4:	2330      	movs	r3, #48	; 0x30
    65e6:	3e01      	subs	r6, #1
    65e8:	7033      	strb	r3, [r6, #0]
    65ea:	9b04      	ldr	r3, [sp, #16]
    65ec:	1b9b      	subs	r3, r3, r6
    65ee:	6123      	str	r3, [r4, #16]
    65f0:	9b07      	ldr	r3, [sp, #28]
    65f2:	aa09      	add	r2, sp, #36	; 0x24
    65f4:	9300      	str	r3, [sp, #0]
    65f6:	0021      	movs	r1, r4
    65f8:	9b06      	ldr	r3, [sp, #24]
    65fa:	9805      	ldr	r0, [sp, #20]
    65fc:	f7ff fe82 	bl	6304 <_printf_common>
    6600:	1c43      	adds	r3, r0, #1
    6602:	d1b3      	bne.n	656c <_printf_i+0x18c>
    6604:	2001      	movs	r0, #1
    6606:	4240      	negs	r0, r0
    6608:	b00b      	add	sp, #44	; 0x2c
    660a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    660c:	0000723d 	.word	0x0000723d
    6610:	0000722c 	.word	0x0000722c

00006614 <_scanf_chars>:
    6614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6616:	0015      	movs	r5, r2
    6618:	688a      	ldr	r2, [r1, #8]
    661a:	9001      	str	r0, [sp, #4]
    661c:	000c      	movs	r4, r1
    661e:	2a00      	cmp	r2, #0
    6620:	d106      	bne.n	6630 <_scanf_chars+0x1c>
    6622:	698a      	ldr	r2, [r1, #24]
    6624:	1e51      	subs	r1, r2, #1
    6626:	418a      	sbcs	r2, r1
    6628:	2101      	movs	r1, #1
    662a:	4252      	negs	r2, r2
    662c:	430a      	orrs	r2, r1
    662e:	60a2      	str	r2, [r4, #8]
    6630:	6822      	ldr	r2, [r4, #0]
    6632:	06d2      	lsls	r2, r2, #27
    6634:	d403      	bmi.n	663e <_scanf_chars+0x2a>
    6636:	681a      	ldr	r2, [r3, #0]
    6638:	1d11      	adds	r1, r2, #4
    663a:	6019      	str	r1, [r3, #0]
    663c:	6817      	ldr	r7, [r2, #0]
    663e:	2600      	movs	r6, #0
    6640:	69a3      	ldr	r3, [r4, #24]
    6642:	2b00      	cmp	r3, #0
    6644:	d01c      	beq.n	6680 <_scanf_chars+0x6c>
    6646:	2b01      	cmp	r3, #1
    6648:	d108      	bne.n	665c <_scanf_chars+0x48>
    664a:	682b      	ldr	r3, [r5, #0]
    664c:	6962      	ldr	r2, [r4, #20]
    664e:	781b      	ldrb	r3, [r3, #0]
    6650:	5cd3      	ldrb	r3, [r2, r3]
    6652:	2b00      	cmp	r3, #0
    6654:	d114      	bne.n	6680 <_scanf_chars+0x6c>
    6656:	2e00      	cmp	r6, #0
    6658:	d130      	bne.n	66bc <_scanf_chars+0xa8>
    665a:	e006      	b.n	666a <_scanf_chars+0x56>
    665c:	2b02      	cmp	r3, #2
    665e:	d006      	beq.n	666e <_scanf_chars+0x5a>
    6660:	2e00      	cmp	r6, #0
    6662:	d12b      	bne.n	66bc <_scanf_chars+0xa8>
    6664:	69a3      	ldr	r3, [r4, #24]
    6666:	2b01      	cmp	r3, #1
    6668:	d128      	bne.n	66bc <_scanf_chars+0xa8>
    666a:	2001      	movs	r0, #1
    666c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    666e:	f000 fad7 	bl	6c20 <__locale_ctype_ptr>
    6672:	2208      	movs	r2, #8
    6674:	682b      	ldr	r3, [r5, #0]
    6676:	781b      	ldrb	r3, [r3, #0]
    6678:	18c0      	adds	r0, r0, r3
    667a:	7843      	ldrb	r3, [r0, #1]
    667c:	4213      	tst	r3, r2
    667e:	d1ef      	bne.n	6660 <_scanf_chars+0x4c>
    6680:	2210      	movs	r2, #16
    6682:	6823      	ldr	r3, [r4, #0]
    6684:	3601      	adds	r6, #1
    6686:	4213      	tst	r3, r2
    6688:	d103      	bne.n	6692 <_scanf_chars+0x7e>
    668a:	682b      	ldr	r3, [r5, #0]
    668c:	781b      	ldrb	r3, [r3, #0]
    668e:	703b      	strb	r3, [r7, #0]
    6690:	3701      	adds	r7, #1
    6692:	682a      	ldr	r2, [r5, #0]
    6694:	686b      	ldr	r3, [r5, #4]
    6696:	3201      	adds	r2, #1
    6698:	602a      	str	r2, [r5, #0]
    669a:	68a2      	ldr	r2, [r4, #8]
    669c:	3b01      	subs	r3, #1
    669e:	3a01      	subs	r2, #1
    66a0:	606b      	str	r3, [r5, #4]
    66a2:	60a2      	str	r2, [r4, #8]
    66a4:	2a00      	cmp	r2, #0
    66a6:	d009      	beq.n	66bc <_scanf_chars+0xa8>
    66a8:	2b00      	cmp	r3, #0
    66aa:	dcc9      	bgt.n	6640 <_scanf_chars+0x2c>
    66ac:	23c0      	movs	r3, #192	; 0xc0
    66ae:	005b      	lsls	r3, r3, #1
    66b0:	58e3      	ldr	r3, [r4, r3]
    66b2:	0029      	movs	r1, r5
    66b4:	9801      	ldr	r0, [sp, #4]
    66b6:	4798      	blx	r3
    66b8:	2800      	cmp	r0, #0
    66ba:	d0c1      	beq.n	6640 <_scanf_chars+0x2c>
    66bc:	2310      	movs	r3, #16
    66be:	6822      	ldr	r2, [r4, #0]
    66c0:	4013      	ands	r3, r2
    66c2:	d106      	bne.n	66d2 <_scanf_chars+0xbe>
    66c4:	68e2      	ldr	r2, [r4, #12]
    66c6:	3201      	adds	r2, #1
    66c8:	60e2      	str	r2, [r4, #12]
    66ca:	69a2      	ldr	r2, [r4, #24]
    66cc:	2a00      	cmp	r2, #0
    66ce:	d000      	beq.n	66d2 <_scanf_chars+0xbe>
    66d0:	703b      	strb	r3, [r7, #0]
    66d2:	6923      	ldr	r3, [r4, #16]
    66d4:	2000      	movs	r0, #0
    66d6:	199e      	adds	r6, r3, r6
    66d8:	6126      	str	r6, [r4, #16]
    66da:	e7c7      	b.n	666c <_scanf_chars+0x58>

000066dc <_scanf_i>:
    66dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    66de:	000c      	movs	r4, r1
    66e0:	b08d      	sub	sp, #52	; 0x34
    66e2:	9302      	str	r3, [sp, #8]
    66e4:	4b77      	ldr	r3, [pc, #476]	; (68c4 <_scanf_i+0x1e8>)
    66e6:	9005      	str	r0, [sp, #20]
    66e8:	0016      	movs	r6, r2
    66ea:	aa09      	add	r2, sp, #36	; 0x24
    66ec:	cb23      	ldmia	r3!, {r0, r1, r5}
    66ee:	c223      	stmia	r2!, {r0, r1, r5}
    66f0:	4b75      	ldr	r3, [pc, #468]	; (68c8 <_scanf_i+0x1ec>)
    66f2:	9306      	str	r3, [sp, #24]
    66f4:	69a3      	ldr	r3, [r4, #24]
    66f6:	2b03      	cmp	r3, #3
    66f8:	d001      	beq.n	66fe <_scanf_i+0x22>
    66fa:	4b74      	ldr	r3, [pc, #464]	; (68cc <_scanf_i+0x1f0>)
    66fc:	9306      	str	r3, [sp, #24]
    66fe:	22ae      	movs	r2, #174	; 0xae
    6700:	2000      	movs	r0, #0
    6702:	68a3      	ldr	r3, [r4, #8]
    6704:	0052      	lsls	r2, r2, #1
    6706:	1e59      	subs	r1, r3, #1
    6708:	9004      	str	r0, [sp, #16]
    670a:	4291      	cmp	r1, r2
    670c:	d905      	bls.n	671a <_scanf_i+0x3e>
    670e:	3b5e      	subs	r3, #94	; 0x5e
    6710:	3bff      	subs	r3, #255	; 0xff
    6712:	9304      	str	r3, [sp, #16]
    6714:	235e      	movs	r3, #94	; 0x5e
    6716:	33ff      	adds	r3, #255	; 0xff
    6718:	60a3      	str	r3, [r4, #8]
    671a:	0023      	movs	r3, r4
    671c:	331c      	adds	r3, #28
    671e:	9301      	str	r3, [sp, #4]
    6720:	23d0      	movs	r3, #208	; 0xd0
    6722:	2700      	movs	r7, #0
    6724:	6822      	ldr	r2, [r4, #0]
    6726:	011b      	lsls	r3, r3, #4
    6728:	4313      	orrs	r3, r2
    672a:	6023      	str	r3, [r4, #0]
    672c:	9b01      	ldr	r3, [sp, #4]
    672e:	9303      	str	r3, [sp, #12]
    6730:	6833      	ldr	r3, [r6, #0]
    6732:	a809      	add	r0, sp, #36	; 0x24
    6734:	7819      	ldrb	r1, [r3, #0]
    6736:	00bb      	lsls	r3, r7, #2
    6738:	2202      	movs	r2, #2
    673a:	5818      	ldr	r0, [r3, r0]
    673c:	f000 fa90 	bl	6c60 <memchr>
    6740:	2800      	cmp	r0, #0
    6742:	d02b      	beq.n	679c <_scanf_i+0xc0>
    6744:	2f01      	cmp	r7, #1
    6746:	d15f      	bne.n	6808 <_scanf_i+0x12c>
    6748:	6863      	ldr	r3, [r4, #4]
    674a:	2b00      	cmp	r3, #0
    674c:	d106      	bne.n	675c <_scanf_i+0x80>
    674e:	3308      	adds	r3, #8
    6750:	6822      	ldr	r2, [r4, #0]
    6752:	6063      	str	r3, [r4, #4]
    6754:	33f9      	adds	r3, #249	; 0xf9
    6756:	33ff      	adds	r3, #255	; 0xff
    6758:	4313      	orrs	r3, r2
    675a:	6023      	str	r3, [r4, #0]
    675c:	4b5c      	ldr	r3, [pc, #368]	; (68d0 <_scanf_i+0x1f4>)
    675e:	6822      	ldr	r2, [r4, #0]
    6760:	4013      	ands	r3, r2
    6762:	6023      	str	r3, [r4, #0]
    6764:	68a3      	ldr	r3, [r4, #8]
    6766:	1e5a      	subs	r2, r3, #1
    6768:	60a2      	str	r2, [r4, #8]
    676a:	2b00      	cmp	r3, #0
    676c:	d016      	beq.n	679c <_scanf_i+0xc0>
    676e:	9b03      	ldr	r3, [sp, #12]
    6770:	1c5d      	adds	r5, r3, #1
    6772:	6833      	ldr	r3, [r6, #0]
    6774:	1c5a      	adds	r2, r3, #1
    6776:	6032      	str	r2, [r6, #0]
    6778:	781b      	ldrb	r3, [r3, #0]
    677a:	9a03      	ldr	r2, [sp, #12]
    677c:	9503      	str	r5, [sp, #12]
    677e:	7013      	strb	r3, [r2, #0]
    6780:	6873      	ldr	r3, [r6, #4]
    6782:	3b01      	subs	r3, #1
    6784:	6073      	str	r3, [r6, #4]
    6786:	2b00      	cmp	r3, #0
    6788:	dc08      	bgt.n	679c <_scanf_i+0xc0>
    678a:	23c0      	movs	r3, #192	; 0xc0
    678c:	005b      	lsls	r3, r3, #1
    678e:	58e3      	ldr	r3, [r4, r3]
    6790:	0031      	movs	r1, r6
    6792:	9805      	ldr	r0, [sp, #20]
    6794:	9307      	str	r3, [sp, #28]
    6796:	4798      	blx	r3
    6798:	2800      	cmp	r0, #0
    679a:	d17d      	bne.n	6898 <_scanf_i+0x1bc>
    679c:	3701      	adds	r7, #1
    679e:	2f03      	cmp	r7, #3
    67a0:	d1c6      	bne.n	6730 <_scanf_i+0x54>
    67a2:	6863      	ldr	r3, [r4, #4]
    67a4:	2b00      	cmp	r3, #0
    67a6:	d101      	bne.n	67ac <_scanf_i+0xd0>
    67a8:	330a      	adds	r3, #10
    67aa:	6063      	str	r3, [r4, #4]
    67ac:	2110      	movs	r1, #16
    67ae:	2700      	movs	r7, #0
    67b0:	6863      	ldr	r3, [r4, #4]
    67b2:	6960      	ldr	r0, [r4, #20]
    67b4:	1ac9      	subs	r1, r1, r3
    67b6:	4b47      	ldr	r3, [pc, #284]	; (68d4 <_scanf_i+0x1f8>)
    67b8:	18c9      	adds	r1, r1, r3
    67ba:	f000 f88f 	bl	68dc <__sccl>
    67be:	9d03      	ldr	r5, [sp, #12]
    67c0:	68a3      	ldr	r3, [r4, #8]
    67c2:	2b00      	cmp	r3, #0
    67c4:	d041      	beq.n	684a <_scanf_i+0x16e>
    67c6:	6832      	ldr	r2, [r6, #0]
    67c8:	6960      	ldr	r0, [r4, #20]
    67ca:	7811      	ldrb	r1, [r2, #0]
    67cc:	5c40      	ldrb	r0, [r0, r1]
    67ce:	2800      	cmp	r0, #0
    67d0:	d03b      	beq.n	684a <_scanf_i+0x16e>
    67d2:	2930      	cmp	r1, #48	; 0x30
    67d4:	d128      	bne.n	6828 <_scanf_i+0x14c>
    67d6:	2080      	movs	r0, #128	; 0x80
    67d8:	6821      	ldr	r1, [r4, #0]
    67da:	0100      	lsls	r0, r0, #4
    67dc:	4201      	tst	r1, r0
    67de:	d023      	beq.n	6828 <_scanf_i+0x14c>
    67e0:	9a04      	ldr	r2, [sp, #16]
    67e2:	3701      	adds	r7, #1
    67e4:	2a00      	cmp	r2, #0
    67e6:	d003      	beq.n	67f0 <_scanf_i+0x114>
    67e8:	3a01      	subs	r2, #1
    67ea:	3301      	adds	r3, #1
    67ec:	9204      	str	r2, [sp, #16]
    67ee:	60a3      	str	r3, [r4, #8]
    67f0:	6873      	ldr	r3, [r6, #4]
    67f2:	3b01      	subs	r3, #1
    67f4:	6073      	str	r3, [r6, #4]
    67f6:	2b00      	cmp	r3, #0
    67f8:	dd1e      	ble.n	6838 <_scanf_i+0x15c>
    67fa:	6833      	ldr	r3, [r6, #0]
    67fc:	3301      	adds	r3, #1
    67fe:	6033      	str	r3, [r6, #0]
    6800:	68a3      	ldr	r3, [r4, #8]
    6802:	3b01      	subs	r3, #1
    6804:	60a3      	str	r3, [r4, #8]
    6806:	e7db      	b.n	67c0 <_scanf_i+0xe4>
    6808:	2f02      	cmp	r7, #2
    680a:	d1ab      	bne.n	6764 <_scanf_i+0x88>
    680c:	21c0      	movs	r1, #192	; 0xc0
    680e:	2380      	movs	r3, #128	; 0x80
    6810:	6822      	ldr	r2, [r4, #0]
    6812:	00c9      	lsls	r1, r1, #3
    6814:	4011      	ands	r1, r2
    6816:	009b      	lsls	r3, r3, #2
    6818:	4299      	cmp	r1, r3
    681a:	d1c2      	bne.n	67a2 <_scanf_i+0xc6>
    681c:	3bf1      	subs	r3, #241	; 0xf1
    681e:	3bff      	subs	r3, #255	; 0xff
    6820:	6063      	str	r3, [r4, #4]
    6822:	33f0      	adds	r3, #240	; 0xf0
    6824:	4313      	orrs	r3, r2
    6826:	e79c      	b.n	6762 <_scanf_i+0x86>
    6828:	6821      	ldr	r1, [r4, #0]
    682a:	4b2b      	ldr	r3, [pc, #172]	; (68d8 <_scanf_i+0x1fc>)
    682c:	400b      	ands	r3, r1
    682e:	6023      	str	r3, [r4, #0]
    6830:	7813      	ldrb	r3, [r2, #0]
    6832:	702b      	strb	r3, [r5, #0]
    6834:	3501      	adds	r5, #1
    6836:	e7db      	b.n	67f0 <_scanf_i+0x114>
    6838:	23c0      	movs	r3, #192	; 0xc0
    683a:	005b      	lsls	r3, r3, #1
    683c:	58e3      	ldr	r3, [r4, r3]
    683e:	0031      	movs	r1, r6
    6840:	9805      	ldr	r0, [sp, #20]
    6842:	9303      	str	r3, [sp, #12]
    6844:	4798      	blx	r3
    6846:	2800      	cmp	r0, #0
    6848:	d0da      	beq.n	6800 <_scanf_i+0x124>
    684a:	6823      	ldr	r3, [r4, #0]
    684c:	05db      	lsls	r3, r3, #23
    684e:	d50e      	bpl.n	686e <_scanf_i+0x192>
    6850:	9b01      	ldr	r3, [sp, #4]
    6852:	429d      	cmp	r5, r3
    6854:	d907      	bls.n	6866 <_scanf_i+0x18a>
    6856:	23be      	movs	r3, #190	; 0xbe
    6858:	3d01      	subs	r5, #1
    685a:	005b      	lsls	r3, r3, #1
    685c:	7829      	ldrb	r1, [r5, #0]
    685e:	58e3      	ldr	r3, [r4, r3]
    6860:	0032      	movs	r2, r6
    6862:	9805      	ldr	r0, [sp, #20]
    6864:	4798      	blx	r3
    6866:	9b01      	ldr	r3, [sp, #4]
    6868:	2001      	movs	r0, #1
    686a:	429d      	cmp	r5, r3
    686c:	d027      	beq.n	68be <_scanf_i+0x1e2>
    686e:	2210      	movs	r2, #16
    6870:	6823      	ldr	r3, [r4, #0]
    6872:	401a      	ands	r2, r3
    6874:	d11c      	bne.n	68b0 <_scanf_i+0x1d4>
    6876:	702a      	strb	r2, [r5, #0]
    6878:	6863      	ldr	r3, [r4, #4]
    687a:	9901      	ldr	r1, [sp, #4]
    687c:	9805      	ldr	r0, [sp, #20]
    687e:	9e06      	ldr	r6, [sp, #24]
    6880:	47b0      	blx	r6
    6882:	9b02      	ldr	r3, [sp, #8]
    6884:	6822      	ldr	r2, [r4, #0]
    6886:	681b      	ldr	r3, [r3, #0]
    6888:	0691      	lsls	r1, r2, #26
    688a:	d507      	bpl.n	689c <_scanf_i+0x1c0>
    688c:	9902      	ldr	r1, [sp, #8]
    688e:	1d1a      	adds	r2, r3, #4
    6890:	600a      	str	r2, [r1, #0]
    6892:	681b      	ldr	r3, [r3, #0]
    6894:	6018      	str	r0, [r3, #0]
    6896:	e008      	b.n	68aa <_scanf_i+0x1ce>
    6898:	2700      	movs	r7, #0
    689a:	e7d6      	b.n	684a <_scanf_i+0x16e>
    689c:	07d1      	lsls	r1, r2, #31
    689e:	d5f5      	bpl.n	688c <_scanf_i+0x1b0>
    68a0:	9902      	ldr	r1, [sp, #8]
    68a2:	1d1a      	adds	r2, r3, #4
    68a4:	600a      	str	r2, [r1, #0]
    68a6:	681b      	ldr	r3, [r3, #0]
    68a8:	8018      	strh	r0, [r3, #0]
    68aa:	68e3      	ldr	r3, [r4, #12]
    68ac:	3301      	adds	r3, #1
    68ae:	60e3      	str	r3, [r4, #12]
    68b0:	2000      	movs	r0, #0
    68b2:	9b01      	ldr	r3, [sp, #4]
    68b4:	1aed      	subs	r5, r5, r3
    68b6:	6923      	ldr	r3, [r4, #16]
    68b8:	19ef      	adds	r7, r5, r7
    68ba:	19df      	adds	r7, r3, r7
    68bc:	6127      	str	r7, [r4, #16]
    68be:	b00d      	add	sp, #52	; 0x34
    68c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68c2:	46c0      	nop			; (mov r8, r8)
    68c4:	00007250 	.word	0x00007250
    68c8:	00006a4d 	.word	0x00006a4d
    68cc:	00006b7d 	.word	0x00006b7d
    68d0:	fffffaff 	.word	0xfffffaff
    68d4:	0000725c 	.word	0x0000725c
    68d8:	fffff6ff 	.word	0xfffff6ff

000068dc <__sccl>:
    68dc:	b570      	push	{r4, r5, r6, lr}
    68de:	780b      	ldrb	r3, [r1, #0]
    68e0:	2b5e      	cmp	r3, #94	; 0x5e
    68e2:	d00d      	beq.n	6900 <__sccl+0x24>
    68e4:	1c4a      	adds	r2, r1, #1
    68e6:	2100      	movs	r1, #0
    68e8:	0004      	movs	r4, r0
    68ea:	1c45      	adds	r5, r0, #1
    68ec:	35ff      	adds	r5, #255	; 0xff
    68ee:	7021      	strb	r1, [r4, #0]
    68f0:	3401      	adds	r4, #1
    68f2:	42a5      	cmp	r5, r4
    68f4:	d1fb      	bne.n	68ee <__sccl+0x12>
    68f6:	2b00      	cmp	r3, #0
    68f8:	d106      	bne.n	6908 <__sccl+0x2c>
    68fa:	3a01      	subs	r2, #1
    68fc:	0010      	movs	r0, r2
    68fe:	bd70      	pop	{r4, r5, r6, pc}
    6900:	1c8a      	adds	r2, r1, #2
    6902:	784b      	ldrb	r3, [r1, #1]
    6904:	2101      	movs	r1, #1
    6906:	e7ef      	b.n	68e8 <__sccl+0xc>
    6908:	2401      	movs	r4, #1
    690a:	404c      	eors	r4, r1
    690c:	0011      	movs	r1, r2
    690e:	54c4      	strb	r4, [r0, r3]
    6910:	780d      	ldrb	r5, [r1, #0]
    6912:	1c4a      	adds	r2, r1, #1
    6914:	2d2d      	cmp	r5, #45	; 0x2d
    6916:	d007      	beq.n	6928 <__sccl+0x4c>
    6918:	2d5d      	cmp	r5, #93	; 0x5d
    691a:	d0ef      	beq.n	68fc <__sccl+0x20>
    691c:	2d00      	cmp	r5, #0
    691e:	d101      	bne.n	6924 <__sccl+0x48>
    6920:	000a      	movs	r2, r1
    6922:	e7eb      	b.n	68fc <__sccl+0x20>
    6924:	002b      	movs	r3, r5
    6926:	e7f1      	b.n	690c <__sccl+0x30>
    6928:	784e      	ldrb	r6, [r1, #1]
    692a:	2e5d      	cmp	r6, #93	; 0x5d
    692c:	d0fa      	beq.n	6924 <__sccl+0x48>
    692e:	42b3      	cmp	r3, r6
    6930:	dcf8      	bgt.n	6924 <__sccl+0x48>
    6932:	3102      	adds	r1, #2
    6934:	3301      	adds	r3, #1
    6936:	54c4      	strb	r4, [r0, r3]
    6938:	429e      	cmp	r6, r3
    693a:	dcfb      	bgt.n	6934 <__sccl+0x58>
    693c:	e7e8      	b.n	6910 <__sccl+0x34>
	...

00006940 <_strtol_l.isra.0>:
    6940:	b5f0      	push	{r4, r5, r6, r7, lr}
    6942:	001f      	movs	r7, r3
    6944:	000e      	movs	r6, r1
    6946:	b087      	sub	sp, #28
    6948:	9005      	str	r0, [sp, #20]
    694a:	9103      	str	r1, [sp, #12]
    694c:	9202      	str	r2, [sp, #8]
    694e:	980c      	ldr	r0, [sp, #48]	; 0x30
    6950:	7834      	ldrb	r4, [r6, #0]
    6952:	f000 f961 	bl	6c18 <__locale_ctype_ptr_l>
    6956:	2208      	movs	r2, #8
    6958:	1900      	adds	r0, r0, r4
    695a:	7843      	ldrb	r3, [r0, #1]
    695c:	1c75      	adds	r5, r6, #1
    695e:	4013      	ands	r3, r2
    6960:	d10c      	bne.n	697c <_strtol_l.isra.0+0x3c>
    6962:	2c2d      	cmp	r4, #45	; 0x2d
    6964:	d10c      	bne.n	6980 <_strtol_l.isra.0+0x40>
    6966:	3301      	adds	r3, #1
    6968:	782c      	ldrb	r4, [r5, #0]
    696a:	9301      	str	r3, [sp, #4]
    696c:	1cb5      	adds	r5, r6, #2
    696e:	2f00      	cmp	r7, #0
    6970:	d00c      	beq.n	698c <_strtol_l.isra.0+0x4c>
    6972:	2f10      	cmp	r7, #16
    6974:	d114      	bne.n	69a0 <_strtol_l.isra.0+0x60>
    6976:	2c30      	cmp	r4, #48	; 0x30
    6978:	d00a      	beq.n	6990 <_strtol_l.isra.0+0x50>
    697a:	e011      	b.n	69a0 <_strtol_l.isra.0+0x60>
    697c:	002e      	movs	r6, r5
    697e:	e7e6      	b.n	694e <_strtol_l.isra.0+0xe>
    6980:	9301      	str	r3, [sp, #4]
    6982:	2c2b      	cmp	r4, #43	; 0x2b
    6984:	d1f3      	bne.n	696e <_strtol_l.isra.0+0x2e>
    6986:	782c      	ldrb	r4, [r5, #0]
    6988:	1cb5      	adds	r5, r6, #2
    698a:	e7f0      	b.n	696e <_strtol_l.isra.0+0x2e>
    698c:	2c30      	cmp	r4, #48	; 0x30
    698e:	d12f      	bne.n	69f0 <_strtol_l.isra.0+0xb0>
    6990:	2220      	movs	r2, #32
    6992:	782b      	ldrb	r3, [r5, #0]
    6994:	4393      	bics	r3, r2
    6996:	2b58      	cmp	r3, #88	; 0x58
    6998:	d151      	bne.n	6a3e <_strtol_l.isra.0+0xfe>
    699a:	2710      	movs	r7, #16
    699c:	786c      	ldrb	r4, [r5, #1]
    699e:	3502      	adds	r5, #2
    69a0:	9b01      	ldr	r3, [sp, #4]
    69a2:	4a29      	ldr	r2, [pc, #164]	; (6a48 <_strtol_l.isra.0+0x108>)
    69a4:	0039      	movs	r1, r7
    69a6:	189e      	adds	r6, r3, r2
    69a8:	0030      	movs	r0, r6
    69aa:	f7fe fd91 	bl	54d0 <__aeabi_uidivmod>
    69ae:	0030      	movs	r0, r6
    69b0:	9104      	str	r1, [sp, #16]
    69b2:	0039      	movs	r1, r7
    69b4:	f7fe fd06 	bl	53c4 <__udivsi3>
    69b8:	2101      	movs	r1, #1
    69ba:	2300      	movs	r3, #0
    69bc:	4249      	negs	r1, r1
    69be:	0002      	movs	r2, r0
    69c0:	468c      	mov	ip, r1
    69c2:	0018      	movs	r0, r3
    69c4:	0021      	movs	r1, r4
    69c6:	3930      	subs	r1, #48	; 0x30
    69c8:	2909      	cmp	r1, #9
    69ca:	d813      	bhi.n	69f4 <_strtol_l.isra.0+0xb4>
    69cc:	000c      	movs	r4, r1
    69ce:	42a7      	cmp	r7, r4
    69d0:	dd1c      	ble.n	6a0c <_strtol_l.isra.0+0xcc>
    69d2:	1c59      	adds	r1, r3, #1
    69d4:	d009      	beq.n	69ea <_strtol_l.isra.0+0xaa>
    69d6:	4663      	mov	r3, ip
    69d8:	4282      	cmp	r2, r0
    69da:	d306      	bcc.n	69ea <_strtol_l.isra.0+0xaa>
    69dc:	d102      	bne.n	69e4 <_strtol_l.isra.0+0xa4>
    69de:	9904      	ldr	r1, [sp, #16]
    69e0:	42a1      	cmp	r1, r4
    69e2:	db02      	blt.n	69ea <_strtol_l.isra.0+0xaa>
    69e4:	2301      	movs	r3, #1
    69e6:	4378      	muls	r0, r7
    69e8:	1820      	adds	r0, r4, r0
    69ea:	782c      	ldrb	r4, [r5, #0]
    69ec:	3501      	adds	r5, #1
    69ee:	e7e9      	b.n	69c4 <_strtol_l.isra.0+0x84>
    69f0:	270a      	movs	r7, #10
    69f2:	e7d5      	b.n	69a0 <_strtol_l.isra.0+0x60>
    69f4:	0021      	movs	r1, r4
    69f6:	3941      	subs	r1, #65	; 0x41
    69f8:	2919      	cmp	r1, #25
    69fa:	d801      	bhi.n	6a00 <_strtol_l.isra.0+0xc0>
    69fc:	3c37      	subs	r4, #55	; 0x37
    69fe:	e7e6      	b.n	69ce <_strtol_l.isra.0+0x8e>
    6a00:	0021      	movs	r1, r4
    6a02:	3961      	subs	r1, #97	; 0x61
    6a04:	2919      	cmp	r1, #25
    6a06:	d801      	bhi.n	6a0c <_strtol_l.isra.0+0xcc>
    6a08:	3c57      	subs	r4, #87	; 0x57
    6a0a:	e7e0      	b.n	69ce <_strtol_l.isra.0+0x8e>
    6a0c:	1c5a      	adds	r2, r3, #1
    6a0e:	d108      	bne.n	6a22 <_strtol_l.isra.0+0xe2>
    6a10:	9a05      	ldr	r2, [sp, #20]
    6a12:	3323      	adds	r3, #35	; 0x23
    6a14:	6013      	str	r3, [r2, #0]
    6a16:	9b02      	ldr	r3, [sp, #8]
    6a18:	0030      	movs	r0, r6
    6a1a:	2b00      	cmp	r3, #0
    6a1c:	d10b      	bne.n	6a36 <_strtol_l.isra.0+0xf6>
    6a1e:	b007      	add	sp, #28
    6a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a22:	9a01      	ldr	r2, [sp, #4]
    6a24:	2a00      	cmp	r2, #0
    6a26:	d000      	beq.n	6a2a <_strtol_l.isra.0+0xea>
    6a28:	4240      	negs	r0, r0
    6a2a:	9a02      	ldr	r2, [sp, #8]
    6a2c:	2a00      	cmp	r2, #0
    6a2e:	d0f6      	beq.n	6a1e <_strtol_l.isra.0+0xde>
    6a30:	9a03      	ldr	r2, [sp, #12]
    6a32:	2b00      	cmp	r3, #0
    6a34:	d000      	beq.n	6a38 <_strtol_l.isra.0+0xf8>
    6a36:	1e6a      	subs	r2, r5, #1
    6a38:	9b02      	ldr	r3, [sp, #8]
    6a3a:	601a      	str	r2, [r3, #0]
    6a3c:	e7ef      	b.n	6a1e <_strtol_l.isra.0+0xde>
    6a3e:	2430      	movs	r4, #48	; 0x30
    6a40:	2f00      	cmp	r7, #0
    6a42:	d1ad      	bne.n	69a0 <_strtol_l.isra.0+0x60>
    6a44:	3708      	adds	r7, #8
    6a46:	e7ab      	b.n	69a0 <_strtol_l.isra.0+0x60>
    6a48:	7fffffff 	.word	0x7fffffff

00006a4c <_strtol_r>:
    6a4c:	b513      	push	{r0, r1, r4, lr}
    6a4e:	4c05      	ldr	r4, [pc, #20]	; (6a64 <_strtol_r+0x18>)
    6a50:	6824      	ldr	r4, [r4, #0]
    6a52:	6a24      	ldr	r4, [r4, #32]
    6a54:	2c00      	cmp	r4, #0
    6a56:	d100      	bne.n	6a5a <_strtol_r+0xe>
    6a58:	4c03      	ldr	r4, [pc, #12]	; (6a68 <_strtol_r+0x1c>)
    6a5a:	9400      	str	r4, [sp, #0]
    6a5c:	f7ff ff70 	bl	6940 <_strtol_l.isra.0>
    6a60:	bd16      	pop	{r1, r2, r4, pc}
    6a62:	46c0      	nop			; (mov r8, r8)
    6a64:	2000036c 	.word	0x2000036c
    6a68:	200003d0 	.word	0x200003d0

00006a6c <_strtoul_l.isra.0>:
    6a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a6e:	001f      	movs	r7, r3
    6a70:	000e      	movs	r6, r1
    6a72:	b087      	sub	sp, #28
    6a74:	9005      	str	r0, [sp, #20]
    6a76:	9103      	str	r1, [sp, #12]
    6a78:	9201      	str	r2, [sp, #4]
    6a7a:	980c      	ldr	r0, [sp, #48]	; 0x30
    6a7c:	7834      	ldrb	r4, [r6, #0]
    6a7e:	f000 f8cb 	bl	6c18 <__locale_ctype_ptr_l>
    6a82:	2208      	movs	r2, #8
    6a84:	1900      	adds	r0, r0, r4
    6a86:	7843      	ldrb	r3, [r0, #1]
    6a88:	1c75      	adds	r5, r6, #1
    6a8a:	4013      	ands	r3, r2
    6a8c:	d10c      	bne.n	6aa8 <_strtoul_l.isra.0+0x3c>
    6a8e:	2c2d      	cmp	r4, #45	; 0x2d
    6a90:	d10c      	bne.n	6aac <_strtoul_l.isra.0+0x40>
    6a92:	3301      	adds	r3, #1
    6a94:	782c      	ldrb	r4, [r5, #0]
    6a96:	9302      	str	r3, [sp, #8]
    6a98:	1cb5      	adds	r5, r6, #2
    6a9a:	2f00      	cmp	r7, #0
    6a9c:	d00c      	beq.n	6ab8 <_strtoul_l.isra.0+0x4c>
    6a9e:	2f10      	cmp	r7, #16
    6aa0:	d114      	bne.n	6acc <_strtoul_l.isra.0+0x60>
    6aa2:	2c30      	cmp	r4, #48	; 0x30
    6aa4:	d00a      	beq.n	6abc <_strtoul_l.isra.0+0x50>
    6aa6:	e011      	b.n	6acc <_strtoul_l.isra.0+0x60>
    6aa8:	002e      	movs	r6, r5
    6aaa:	e7e6      	b.n	6a7a <_strtoul_l.isra.0+0xe>
    6aac:	9302      	str	r3, [sp, #8]
    6aae:	2c2b      	cmp	r4, #43	; 0x2b
    6ab0:	d1f3      	bne.n	6a9a <_strtoul_l.isra.0+0x2e>
    6ab2:	782c      	ldrb	r4, [r5, #0]
    6ab4:	1cb5      	adds	r5, r6, #2
    6ab6:	e7f0      	b.n	6a9a <_strtoul_l.isra.0+0x2e>
    6ab8:	2c30      	cmp	r4, #48	; 0x30
    6aba:	d12f      	bne.n	6b1c <_strtoul_l.isra.0+0xb0>
    6abc:	2220      	movs	r2, #32
    6abe:	782b      	ldrb	r3, [r5, #0]
    6ac0:	4393      	bics	r3, r2
    6ac2:	2b58      	cmp	r3, #88	; 0x58
    6ac4:	d154      	bne.n	6b70 <_strtoul_l.isra.0+0x104>
    6ac6:	2710      	movs	r7, #16
    6ac8:	786c      	ldrb	r4, [r5, #1]
    6aca:	3502      	adds	r5, #2
    6acc:	2001      	movs	r0, #1
    6ace:	0039      	movs	r1, r7
    6ad0:	4240      	negs	r0, r0
    6ad2:	f7fe fc77 	bl	53c4 <__udivsi3>
    6ad6:	0006      	movs	r6, r0
    6ad8:	2001      	movs	r0, #1
    6ada:	0039      	movs	r1, r7
    6adc:	4240      	negs	r0, r0
    6ade:	f7fe fcf7 	bl	54d0 <__aeabi_uidivmod>
    6ae2:	2300      	movs	r3, #0
    6ae4:	9104      	str	r1, [sp, #16]
    6ae6:	2101      	movs	r1, #1
    6ae8:	2201      	movs	r2, #1
    6aea:	0018      	movs	r0, r3
    6aec:	468c      	mov	ip, r1
    6aee:	4252      	negs	r2, r2
    6af0:	0021      	movs	r1, r4
    6af2:	3930      	subs	r1, #48	; 0x30
    6af4:	2909      	cmp	r1, #9
    6af6:	d813      	bhi.n	6b20 <_strtoul_l.isra.0+0xb4>
    6af8:	000c      	movs	r4, r1
    6afa:	42a7      	cmp	r7, r4
    6afc:	dd1e      	ble.n	6b3c <_strtoul_l.isra.0+0xd0>
    6afe:	2b00      	cmp	r3, #0
    6b00:	db1a      	blt.n	6b38 <_strtoul_l.isra.0+0xcc>
    6b02:	0013      	movs	r3, r2
    6b04:	4286      	cmp	r6, r0
    6b06:	d306      	bcc.n	6b16 <_strtoul_l.isra.0+0xaa>
    6b08:	d102      	bne.n	6b10 <_strtoul_l.isra.0+0xa4>
    6b0a:	9904      	ldr	r1, [sp, #16]
    6b0c:	42a1      	cmp	r1, r4
    6b0e:	db02      	blt.n	6b16 <_strtoul_l.isra.0+0xaa>
    6b10:	4663      	mov	r3, ip
    6b12:	4378      	muls	r0, r7
    6b14:	1820      	adds	r0, r4, r0
    6b16:	782c      	ldrb	r4, [r5, #0]
    6b18:	3501      	adds	r5, #1
    6b1a:	e7e9      	b.n	6af0 <_strtoul_l.isra.0+0x84>
    6b1c:	270a      	movs	r7, #10
    6b1e:	e7d5      	b.n	6acc <_strtoul_l.isra.0+0x60>
    6b20:	0021      	movs	r1, r4
    6b22:	3941      	subs	r1, #65	; 0x41
    6b24:	2919      	cmp	r1, #25
    6b26:	d801      	bhi.n	6b2c <_strtoul_l.isra.0+0xc0>
    6b28:	3c37      	subs	r4, #55	; 0x37
    6b2a:	e7e6      	b.n	6afa <_strtoul_l.isra.0+0x8e>
    6b2c:	0021      	movs	r1, r4
    6b2e:	3961      	subs	r1, #97	; 0x61
    6b30:	2919      	cmp	r1, #25
    6b32:	d803      	bhi.n	6b3c <_strtoul_l.isra.0+0xd0>
    6b34:	3c57      	subs	r4, #87	; 0x57
    6b36:	e7e0      	b.n	6afa <_strtoul_l.isra.0+0x8e>
    6b38:	0013      	movs	r3, r2
    6b3a:	e7ec      	b.n	6b16 <_strtoul_l.isra.0+0xaa>
    6b3c:	2b00      	cmp	r3, #0
    6b3e:	da09      	bge.n	6b54 <_strtoul_l.isra.0+0xe8>
    6b40:	2322      	movs	r3, #34	; 0x22
    6b42:	2001      	movs	r0, #1
    6b44:	9a05      	ldr	r2, [sp, #20]
    6b46:	4240      	negs	r0, r0
    6b48:	6013      	str	r3, [r2, #0]
    6b4a:	9b01      	ldr	r3, [sp, #4]
    6b4c:	2b00      	cmp	r3, #0
    6b4e:	d10b      	bne.n	6b68 <_strtoul_l.isra.0+0xfc>
    6b50:	b007      	add	sp, #28
    6b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b54:	9a02      	ldr	r2, [sp, #8]
    6b56:	2a00      	cmp	r2, #0
    6b58:	d000      	beq.n	6b5c <_strtoul_l.isra.0+0xf0>
    6b5a:	4240      	negs	r0, r0
    6b5c:	9a01      	ldr	r2, [sp, #4]
    6b5e:	2a00      	cmp	r2, #0
    6b60:	d0f6      	beq.n	6b50 <_strtoul_l.isra.0+0xe4>
    6b62:	9a03      	ldr	r2, [sp, #12]
    6b64:	2b00      	cmp	r3, #0
    6b66:	d000      	beq.n	6b6a <_strtoul_l.isra.0+0xfe>
    6b68:	1e6a      	subs	r2, r5, #1
    6b6a:	9b01      	ldr	r3, [sp, #4]
    6b6c:	601a      	str	r2, [r3, #0]
    6b6e:	e7ef      	b.n	6b50 <_strtoul_l.isra.0+0xe4>
    6b70:	2430      	movs	r4, #48	; 0x30
    6b72:	2f00      	cmp	r7, #0
    6b74:	d1aa      	bne.n	6acc <_strtoul_l.isra.0+0x60>
    6b76:	3708      	adds	r7, #8
    6b78:	e7a8      	b.n	6acc <_strtoul_l.isra.0+0x60>
	...

00006b7c <_strtoul_r>:
    6b7c:	b513      	push	{r0, r1, r4, lr}
    6b7e:	4c05      	ldr	r4, [pc, #20]	; (6b94 <_strtoul_r+0x18>)
    6b80:	6824      	ldr	r4, [r4, #0]
    6b82:	6a24      	ldr	r4, [r4, #32]
    6b84:	2c00      	cmp	r4, #0
    6b86:	d100      	bne.n	6b8a <_strtoul_r+0xe>
    6b88:	4c03      	ldr	r4, [pc, #12]	; (6b98 <_strtoul_r+0x1c>)
    6b8a:	9400      	str	r4, [sp, #0]
    6b8c:	f7ff ff6e 	bl	6a6c <_strtoul_l.isra.0>
    6b90:	bd16      	pop	{r1, r2, r4, pc}
    6b92:	46c0      	nop			; (mov r8, r8)
    6b94:	2000036c 	.word	0x2000036c
    6b98:	200003d0 	.word	0x200003d0

00006b9c <__submore>:
    6b9c:	000b      	movs	r3, r1
    6b9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6ba0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    6ba2:	3344      	adds	r3, #68	; 0x44
    6ba4:	000c      	movs	r4, r1
    6ba6:	429d      	cmp	r5, r3
    6ba8:	d11c      	bne.n	6be4 <__submore+0x48>
    6baa:	2680      	movs	r6, #128	; 0x80
    6bac:	00f6      	lsls	r6, r6, #3
    6bae:	0031      	movs	r1, r6
    6bb0:	f7fe ff5c 	bl	5a6c <_malloc_r>
    6bb4:	2800      	cmp	r0, #0
    6bb6:	d102      	bne.n	6bbe <__submore+0x22>
    6bb8:	2001      	movs	r0, #1
    6bba:	4240      	negs	r0, r0
    6bbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6bbe:	0023      	movs	r3, r4
    6bc0:	6360      	str	r0, [r4, #52]	; 0x34
    6bc2:	63a6      	str	r6, [r4, #56]	; 0x38
    6bc4:	3346      	adds	r3, #70	; 0x46
    6bc6:	781a      	ldrb	r2, [r3, #0]
    6bc8:	4b10      	ldr	r3, [pc, #64]	; (6c0c <__submore+0x70>)
    6bca:	54c2      	strb	r2, [r0, r3]
    6bcc:	0023      	movs	r3, r4
    6bce:	3345      	adds	r3, #69	; 0x45
    6bd0:	781a      	ldrb	r2, [r3, #0]
    6bd2:	4b0f      	ldr	r3, [pc, #60]	; (6c10 <__submore+0x74>)
    6bd4:	54c2      	strb	r2, [r0, r3]
    6bd6:	782a      	ldrb	r2, [r5, #0]
    6bd8:	4b0e      	ldr	r3, [pc, #56]	; (6c14 <__submore+0x78>)
    6bda:	54c2      	strb	r2, [r0, r3]
    6bdc:	18c0      	adds	r0, r0, r3
    6bde:	6020      	str	r0, [r4, #0]
    6be0:	2000      	movs	r0, #0
    6be2:	e7eb      	b.n	6bbc <__submore+0x20>
    6be4:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    6be6:	0029      	movs	r1, r5
    6be8:	0073      	lsls	r3, r6, #1
    6bea:	001a      	movs	r2, r3
    6bec:	9301      	str	r3, [sp, #4]
    6bee:	f000 f854 	bl	6c9a <_realloc_r>
    6bf2:	1e05      	subs	r5, r0, #0
    6bf4:	d0e0      	beq.n	6bb8 <__submore+0x1c>
    6bf6:	1987      	adds	r7, r0, r6
    6bf8:	0001      	movs	r1, r0
    6bfa:	0032      	movs	r2, r6
    6bfc:	0038      	movs	r0, r7
    6bfe:	f7fe fed9 	bl	59b4 <memcpy>
    6c02:	9b01      	ldr	r3, [sp, #4]
    6c04:	6027      	str	r7, [r4, #0]
    6c06:	6365      	str	r5, [r4, #52]	; 0x34
    6c08:	63a3      	str	r3, [r4, #56]	; 0x38
    6c0a:	e7e9      	b.n	6be0 <__submore+0x44>
    6c0c:	000003ff 	.word	0x000003ff
    6c10:	000003fe 	.word	0x000003fe
    6c14:	000003fd 	.word	0x000003fd

00006c18 <__locale_ctype_ptr_l>:
    6c18:	30ec      	adds	r0, #236	; 0xec
    6c1a:	6800      	ldr	r0, [r0, #0]
    6c1c:	4770      	bx	lr
	...

00006c20 <__locale_ctype_ptr>:
    6c20:	4b04      	ldr	r3, [pc, #16]	; (6c34 <__locale_ctype_ptr+0x14>)
    6c22:	681b      	ldr	r3, [r3, #0]
    6c24:	6a1b      	ldr	r3, [r3, #32]
    6c26:	2b00      	cmp	r3, #0
    6c28:	d100      	bne.n	6c2c <__locale_ctype_ptr+0xc>
    6c2a:	4b03      	ldr	r3, [pc, #12]	; (6c38 <__locale_ctype_ptr+0x18>)
    6c2c:	33ec      	adds	r3, #236	; 0xec
    6c2e:	6818      	ldr	r0, [r3, #0]
    6c30:	4770      	bx	lr
    6c32:	46c0      	nop			; (mov r8, r8)
    6c34:	2000036c 	.word	0x2000036c
    6c38:	200003d0 	.word	0x200003d0

00006c3c <__ascii_mbtowc>:
    6c3c:	b082      	sub	sp, #8
    6c3e:	2900      	cmp	r1, #0
    6c40:	d100      	bne.n	6c44 <__ascii_mbtowc+0x8>
    6c42:	a901      	add	r1, sp, #4
    6c44:	1e10      	subs	r0, r2, #0
    6c46:	d006      	beq.n	6c56 <__ascii_mbtowc+0x1a>
    6c48:	2b00      	cmp	r3, #0
    6c4a:	d006      	beq.n	6c5a <__ascii_mbtowc+0x1e>
    6c4c:	7813      	ldrb	r3, [r2, #0]
    6c4e:	600b      	str	r3, [r1, #0]
    6c50:	7810      	ldrb	r0, [r2, #0]
    6c52:	1e43      	subs	r3, r0, #1
    6c54:	4198      	sbcs	r0, r3
    6c56:	b002      	add	sp, #8
    6c58:	4770      	bx	lr
    6c5a:	2002      	movs	r0, #2
    6c5c:	4240      	negs	r0, r0
    6c5e:	e7fa      	b.n	6c56 <__ascii_mbtowc+0x1a>

00006c60 <memchr>:
    6c60:	b2c9      	uxtb	r1, r1
    6c62:	1882      	adds	r2, r0, r2
    6c64:	4290      	cmp	r0, r2
    6c66:	d101      	bne.n	6c6c <memchr+0xc>
    6c68:	2000      	movs	r0, #0
    6c6a:	4770      	bx	lr
    6c6c:	7803      	ldrb	r3, [r0, #0]
    6c6e:	428b      	cmp	r3, r1
    6c70:	d0fb      	beq.n	6c6a <memchr+0xa>
    6c72:	3001      	adds	r0, #1
    6c74:	e7f6      	b.n	6c64 <memchr+0x4>

00006c76 <memmove>:
    6c76:	b510      	push	{r4, lr}
    6c78:	4288      	cmp	r0, r1
    6c7a:	d902      	bls.n	6c82 <memmove+0xc>
    6c7c:	188b      	adds	r3, r1, r2
    6c7e:	4298      	cmp	r0, r3
    6c80:	d308      	bcc.n	6c94 <memmove+0x1e>
    6c82:	2300      	movs	r3, #0
    6c84:	429a      	cmp	r2, r3
    6c86:	d007      	beq.n	6c98 <memmove+0x22>
    6c88:	5ccc      	ldrb	r4, [r1, r3]
    6c8a:	54c4      	strb	r4, [r0, r3]
    6c8c:	3301      	adds	r3, #1
    6c8e:	e7f9      	b.n	6c84 <memmove+0xe>
    6c90:	5c8b      	ldrb	r3, [r1, r2]
    6c92:	5483      	strb	r3, [r0, r2]
    6c94:	3a01      	subs	r2, #1
    6c96:	d2fb      	bcs.n	6c90 <memmove+0x1a>
    6c98:	bd10      	pop	{r4, pc}

00006c9a <_realloc_r>:
    6c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c9c:	0007      	movs	r7, r0
    6c9e:	000d      	movs	r5, r1
    6ca0:	0016      	movs	r6, r2
    6ca2:	2900      	cmp	r1, #0
    6ca4:	d105      	bne.n	6cb2 <_realloc_r+0x18>
    6ca6:	0011      	movs	r1, r2
    6ca8:	f7fe fee0 	bl	5a6c <_malloc_r>
    6cac:	0004      	movs	r4, r0
    6cae:	0020      	movs	r0, r4
    6cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6cb2:	2a00      	cmp	r2, #0
    6cb4:	d103      	bne.n	6cbe <_realloc_r+0x24>
    6cb6:	f7fe fe8f 	bl	59d8 <_free_r>
    6cba:	0034      	movs	r4, r6
    6cbc:	e7f7      	b.n	6cae <_realloc_r+0x14>
    6cbe:	f000 f81e 	bl	6cfe <_malloc_usable_size_r>
    6cc2:	002c      	movs	r4, r5
    6cc4:	4286      	cmp	r6, r0
    6cc6:	d9f2      	bls.n	6cae <_realloc_r+0x14>
    6cc8:	0031      	movs	r1, r6
    6cca:	0038      	movs	r0, r7
    6ccc:	f7fe fece 	bl	5a6c <_malloc_r>
    6cd0:	1e04      	subs	r4, r0, #0
    6cd2:	d0ec      	beq.n	6cae <_realloc_r+0x14>
    6cd4:	0029      	movs	r1, r5
    6cd6:	0032      	movs	r2, r6
    6cd8:	f7fe fe6c 	bl	59b4 <memcpy>
    6cdc:	0029      	movs	r1, r5
    6cde:	0038      	movs	r0, r7
    6ce0:	f7fe fe7a 	bl	59d8 <_free_r>
    6ce4:	e7e3      	b.n	6cae <_realloc_r+0x14>

00006ce6 <__ascii_wctomb>:
    6ce6:	1e0b      	subs	r3, r1, #0
    6ce8:	d004      	beq.n	6cf4 <__ascii_wctomb+0xe>
    6cea:	2aff      	cmp	r2, #255	; 0xff
    6cec:	d904      	bls.n	6cf8 <__ascii_wctomb+0x12>
    6cee:	238a      	movs	r3, #138	; 0x8a
    6cf0:	6003      	str	r3, [r0, #0]
    6cf2:	3b8b      	subs	r3, #139	; 0x8b
    6cf4:	0018      	movs	r0, r3
    6cf6:	4770      	bx	lr
    6cf8:	700a      	strb	r2, [r1, #0]
    6cfa:	2301      	movs	r3, #1
    6cfc:	e7fa      	b.n	6cf4 <__ascii_wctomb+0xe>

00006cfe <_malloc_usable_size_r>:
    6cfe:	1f0b      	subs	r3, r1, #4
    6d00:	681b      	ldr	r3, [r3, #0]
    6d02:	1f18      	subs	r0, r3, #4
    6d04:	2b00      	cmp	r3, #0
    6d06:	da01      	bge.n	6d0c <_malloc_usable_size_r+0xe>
    6d08:	580b      	ldr	r3, [r1, r0]
    6d0a:	18c0      	adds	r0, r0, r3
    6d0c:	4770      	bx	lr
    6d0e:	0000      	movs	r0, r0
    6d10:	0d5a5441 	.word	0x0d5a5441
    6d14:	00000000 	.word	0x00000000
    6d18:	30455441 	.word	0x30455441
    6d1c:	0000000d 	.word	0x0000000d
    6d20:	30485441 	.word	0x30485441
    6d24:	0000000d 	.word	0x0000000d
    6d28:	44303130 	.word	0x44303130
    6d2c:	0000000d 	.word	0x0000000d
    6d30:	58323025 	.word	0x58323025
    6d34:	58323025 	.word	0x58323025
    6d38:	0000000d 	.word	0x0000000d
    6d3c:	56525441 	.word	0x56525441
    6d40:	00000000 	.word	0x00000000
    6d44:	00006625 	.word	0x00006625
    6d48:	410d0a0d 	.word	0x410d0a0d
    6d4c:	72666164 	.word	0x72666164
    6d50:	00746975 	.word	0x00746975
    6d54:	0a313023 	.word	0x0a313023
    6d58:	00000000 	.word	0x00000000
    6d5c:	00303054 	.word	0x00303054
    6d60:	00000a4c 	.word	0x00000a4c
    6d64:	64253054 	.word	0x64253054
    6d68:	00000000 	.word	0x00000000
    6d6c:	20626f62 	.word	0x20626f62
    6d70:	20736177 	.word	0x20736177
    6d74:	6e756f66 	.word	0x6e756f66
    6d78:	00000064 	.word	0x00000064
    6d7c:	204d5750 	.word	0x204d5750
    6d80:	00006425 	.word	0x00006425
    6d84:	6425203a 	.word	0x6425203a
    6d88:	00000000 	.word	0x00000000
    6d8c:	31414846 	.word	0x31414846
    6d90:	00000000 	.word	0x00000000
    6d94:	00202d20 	.word	0x00202d20
    6d98:	004b4341 	.word	0x004b4341
    6d9c:	30414846 	.word	0x30414846
    6da0:	00000000 	.word	0x00000000
    6da4:	20414b42 	.word	0x20414b42
    6da8:	00000031 	.word	0x00000031
    6dac:	20414b42 	.word	0x20414b42
    6db0:	00000030 	.word	0x00000030
    6db4:	204c4b42 	.word	0x204c4b42
    6db8:	00000031 	.word	0x00000031
    6dbc:	204c4b42 	.word	0x204c4b42
    6dc0:	00000030 	.word	0x00000030
    6dc4:	20524b42 	.word	0x20524b42
    6dc8:	00000031 	.word	0x00000031
    6dcc:	20524b42 	.word	0x20524b42
    6dd0:	00000030 	.word	0x00000030
    6dd4:	314e5248 	.word	0x314e5248
    6dd8:	00003120 	.word	0x00003120
    6ddc:	314e5248 	.word	0x314e5248
    6de0:	00003020 	.word	0x00003020
    6de4:	324e5248 	.word	0x324e5248
    6de8:	00003120 	.word	0x00003120
    6dec:	324e5248 	.word	0x324e5248
    6df0:	00003020 	.word	0x00003020
    6df4:	334e5248 	.word	0x334e5248
    6df8:	00003120 	.word	0x00003120
    6dfc:	334e5248 	.word	0x334e5248
    6e00:	00003020 	.word	0x00003020
    6e04:	344e5248 	.word	0x344e5248
    6e08:	00003120 	.word	0x00003120
    6e0c:	344e5248 	.word	0x344e5248
    6e10:	00003020 	.word	0x00003020
    6e14:	00004253 	.word	0x00004253
    6e18:	64254253 	.word	0x64254253
    6e1c:	0000000a 	.word	0x0000000a
    6e20:	53524253 	.word	0x53524253
    6e24:	32342054 	.word	0x32342054
    6e28:	00000000 	.word	0x00000000
    6e2c:	203a4253 	.word	0x203a4253
    6e30:	45534552 	.word	0x45534552
    6e34:	4e495454 	.word	0x4e495454
    6e38:	00000047 	.word	0x00000047
    6e3c:	20545250 	.word	0x20545250
    6e40:	00000031 	.word	0x00000031
    6e44:	20545250 	.word	0x20545250
    6e48:	00000030 	.word	0x00000030
    6e4c:	20525457 	.word	0x20525457
    6e50:	00000031 	.word	0x00000031
    6e54:	20415453 	.word	0x20415453
    6e58:	00000031 	.word	0x00000031
    6e5c:	20415453 	.word	0x20415453
    6e60:	00000030 	.word	0x00000030
    6e64:	2044454c 	.word	0x2044454c
    6e68:	00000031 	.word	0x00000031
    6e6c:	2044454c 	.word	0x2044454c
    6e70:	00000030 	.word	0x00000030
    6e74:	204c4448 	.word	0x204c4448
    6e78:	00000031 	.word	0x00000031
    6e7c:	204c4448 	.word	0x204c4448
    6e80:	00000030 	.word	0x00000030
    6e84:	41495242 	.word	0x41495242
    6e88:	0031204e 	.word	0x0031204e
    6e8c:	41495242 	.word	0x41495242
    6e90:	0030204e 	.word	0x0030204e
    6e94:	48534c46 	.word	0x48534c46
    6e98:	00312031 	.word	0x00312031
    6e9c:	48534c46 	.word	0x48534c46
    6ea0:	00302031 	.word	0x00302031
    6ea4:	48534c46 	.word	0x48534c46
    6ea8:	00312032 	.word	0x00312032
    6eac:	48534c46 	.word	0x48534c46
    6eb0:	00302032 	.word	0x00302032
    6eb4:	48534c46 	.word	0x48534c46
    6eb8:	00312033 	.word	0x00312033
    6ebc:	48534c46 	.word	0x48534c46
    6ec0:	00302033 	.word	0x00302033
    6ec4:	48534c46 	.word	0x48534c46
    6ec8:	31204446 	.word	0x31204446
    6ecc:	00000000 	.word	0x00000000
    6ed0:	48534c46 	.word	0x48534c46
    6ed4:	30204446 	.word	0x30204446
    6ed8:	00000000 	.word	0x00000000
    6edc:	5254534d 	.word	0x5254534d
    6ee0:	20545352 	.word	0x20545352
    6ee4:	00003234 	.word	0x00003234
    6ee8:	45534552 	.word	0x45534552
    6eec:	43412054 	.word	0x43412054
    6ef0:	00000a4b 	.word	0x00000a4b
    6ef4:	52524e4d 	.word	0x52524e4d
    6ef8:	34205453 	.word	0x34205453
    6efc:	00000032 	.word	0x00000032
    6f00:	4f4e494d 	.word	0x4f4e494d
    6f04:	45522052 	.word	0x45522052
    6f08:	20544553 	.word	0x20544553
    6f0c:	0a4b4341 	.word	0x0a4b4341
    6f10:	00000000 	.word	0x00000000
    6f14:	4f4e494d 	.word	0x4f4e494d
    6f18:	45522052 	.word	0x45522052
    6f1c:	20544553 	.word	0x20544553
    6f20:	454e4f44 	.word	0x454e4f44
    6f24:	0000000a 	.word	0x0000000a
    6f28:	54545250 	.word	0x54545250
    6f2c:	30485352 	.word	0x30485352
    6f30:	00000000 	.word	0x00000000
    6f34:	54545250 	.word	0x54545250
    6f38:	30485352 	.word	0x30485352
    6f3c:	00642520 	.word	0x00642520
    6f40:	54545250 	.word	0x54545250
    6f44:	31485352 	.word	0x31485352
    6f48:	00000000 	.word	0x00000000
    6f4c:	54545250 	.word	0x54545250
    6f50:	31485352 	.word	0x31485352
    6f54:	00642520 	.word	0x00642520
    6f58:	54545250 	.word	0x54545250
    6f5c:	32485352 	.word	0x32485352
    6f60:	00000000 	.word	0x00000000
    6f64:	54545250 	.word	0x54545250
    6f68:	32485352 	.word	0x32485352
    6f6c:	00642520 	.word	0x00642520
    6f70:	54545250 	.word	0x54545250
    6f74:	33485352 	.word	0x33485352
    6f78:	00000000 	.word	0x00000000
    6f7c:	54545250 	.word	0x54545250
    6f80:	33485352 	.word	0x33485352
    6f84:	00642520 	.word	0x00642520
    6f88:	54545250 	.word	0x54545250
    6f8c:	34485352 	.word	0x34485352
    6f90:	00000000 	.word	0x00000000
    6f94:	54545250 	.word	0x54545250
    6f98:	34485352 	.word	0x34485352
    6f9c:	00642520 	.word	0x00642520
    6fa0:	54545250 	.word	0x54545250
    6fa4:	35485352 	.word	0x35485352
    6fa8:	00000000 	.word	0x00000000
    6fac:	54545250 	.word	0x54545250
    6fb0:	35485352 	.word	0x35485352
    6fb4:	00642520 	.word	0x00642520
    6fb8:	54545250 	.word	0x54545250
    6fbc:	36485352 	.word	0x36485352
    6fc0:	00000000 	.word	0x00000000
    6fc4:	54545250 	.word	0x54545250
    6fc8:	36485352 	.word	0x36485352
    6fcc:	00642520 	.word	0x00642520
    6fd0:	54545250 	.word	0x54545250
    6fd4:	37485352 	.word	0x37485352
    6fd8:	00000000 	.word	0x00000000
    6fdc:	54545250 	.word	0x54545250
    6fe0:	37485352 	.word	0x37485352
    6fe4:	00642520 	.word	0x00642520
    6fe8:	20564f43 	.word	0x20564f43
    6fec:	00000031 	.word	0x00000031
    6ff0:	20564f43 	.word	0x20564f43
    6ff4:	00000030 	.word	0x00000030
    6ff8:	52545250 	.word	0x52545250
    6ffc:	00313256 	.word	0x00313256
    7000:	52545250 	.word	0x52545250
    7004:	20313256 	.word	0x20313256
    7008:	00006425 	.word	0x00006425
    700c:	52545250 	.word	0x52545250
    7010:	00303256 	.word	0x00303256
    7014:	5254534d 	.word	0x5254534d
    7018:	20545354 	.word	0x20545354
    701c:	00003234 	.word	0x00003234
    7020:	52444441 	.word	0x52444441
    7024:	6425203a 	.word	0x6425203a
    7028:	203e2d20 	.word	0x203e2d20
    702c:	000a6425 	.word	0x000a6425
    7030:	3a525245 	.word	0x3a525245
    7034:	25642520 	.word	0x25642520
    7038:	25642564 	.word	0x25642564
    703c:	25642564 	.word	0x25642564
    7040:	25642564 	.word	0x25642564
    7044:	000a0d64 	.word	0x000a0d64
    7048:	25203a45 	.word	0x25203a45
    704c:	202d2064 	.word	0x202d2064
    7050:	000a6425 	.word	0x000a6425
    7054:	204c4c41 	.word	0x204c4c41
    7058:	00004b4f 	.word	0x00004b4f
    705c:	00002708 	.word	0x00002708
    7060:	0000271a 	.word	0x0000271a
    7064:	0000272c 	.word	0x0000272c
    7068:	0000273e 	.word	0x0000273e
    706c:	0000275c 	.word	0x0000275c
    7070:	0000276e 	.word	0x0000276e
    7074:	00002780 	.word	0x00002780
    7078:	00002792 	.word	0x00002792
    707c:	000027a4 	.word	0x000027a4
    7080:	000027b6 	.word	0x000027b6
    7084:	000027c8 	.word	0x000027c8
    7088:	000027da 	.word	0x000027da
    708c:	000027ec 	.word	0x000027ec
    7090:	00002840 	.word	0x00002840
    7094:	0000285e 	.word	0x0000285e
    7098:	00002878 	.word	0x00002878
    709c:	00002892 	.word	0x00002892
    70a0:	000028ac 	.word	0x000028ac
    70a4:	000028c6 	.word	0x000028c6
    70a8:	000028e0 	.word	0x000028e0
    70ac:	0000291e 	.word	0x0000291e
    70b0:	00002974 	.word	0x00002974
    70b4:	000029ca 	.word	0x000029ca
    70b8:	00002a20 	.word	0x00002a20
    70bc:	64343025 	.word	0x64343025
    70c0:	34302520 	.word	0x34302520
    70c4:	30252064 	.word	0x30252064
    70c8:	25206434 	.word	0x25206434
    70cc:	20643430 	.word	0x20643430
    70d0:	64343025 	.word	0x64343025
    70d4:	34302520 	.word	0x34302520
    70d8:	000a0d64 	.word	0x000a0d64
    70dc:	45444e55 	.word	0x45444e55
    70e0:	454e4946 	.word	0x454e4946
    70e4:	49462044 	.word	0x49462044
    70e8:	0000454c 	.word	0x0000454c
    70ec:	00412f4e 	.word	0x00412f4e
    70f0:	66616441 	.word	0x66616441
    70f4:	74697572 	.word	0x74697572
    70f8:	20584620 	.word	0x20584620
    70fc:	6e756f53 	.word	0x6e756f53
    7100:	6f422064 	.word	0x6f422064
    7104:	00647261 	.word	0x00647261
    7108:	656c6946 	.word	0x656c6946
    710c:	00002073 	.word	0x00002073
    7110:	656c6946 	.word	0x656c6946
    7114:	64252073 	.word	0x64252073
    7118:	00000a0d 	.word	0x00000a0d
    711c:	20544146 	.word	0x20544146
    7120:	00000000 	.word	0x00000000
    7124:	20544146 	.word	0x20544146
    7128:	0a0d7825 	.word	0x0a0d7825
    712c:	00000000 	.word	0x00000000
    7130:	00000a4c 	.word	0x00000a4c
    7134:	69466f4e 	.word	0x69466f4e
    7138:	0000656c 	.word	0x0000656c
    713c:	656e6f64 	.word	0x656e6f64
    7140:	00000000 	.word	0x00000000
    7144:	79616c70 	.word	0x79616c70
    7148:	00000000 	.word	0x00000000
    714c:	00564157 	.word	0x00564157
    7150:	0047474f 	.word	0x0047474f
    7154:	700d0a0d 	.word	0x700d0a0d
    7158:	0979616c 	.word	0x0979616c
    715c:	54096425 	.word	0x54096425
    7160:	20206425 	.word	0x20206425
    7164:	25202020 	.word	0x25202020
    7168:	0a5e5b33 	.word	0x0a5e5b33
    716c:	0000005d 	.word	0x0000005d
    7170:	700d0a0d 	.word	0x700d0a0d
    7174:	0979616c 	.word	0x0979616c
    7178:	25096425 	.word	0x25096425
    717c:	20202073 	.word	0x20202073
    7180:	33252020 	.word	0x33252020
    7184:	5d0a5e5b 	.word	0x5d0a5e5b
    7188:	00000000 	.word	0x00000000
    718c:	000a0d09 	.word	0x000a0d09
    7190:	25733825 	.word	0x25733825
    7194:	64257333 	.word	0x64257333
    7198:	00000009 	.word	0x00000009
    719c:	0a642523 	.word	0x0a642523
    71a0:	00000000 	.word	0x00000000
    71a4:	00000a71 	.word	0x00000a71
    71a8:	000044fa 	.word	0x000044fa
    71ac:	00004572 	.word	0x00004572
    71b0:	00004572 	.word	0x00004572
    71b4:	00004518 	.word	0x00004518
    71b8:	00004512 	.word	0x00004512
    71bc:	0000451e 	.word	0x0000451e
    71c0:	00004500 	.word	0x00004500
    71c4:	00004524 	.word	0x00004524
    71c8:	00004558 	.word	0x00004558
    71cc:	0000464c 	.word	0x0000464c
    71d0:	0000469c 	.word	0x0000469c
    71d4:	0000469c 	.word	0x0000469c
    71d8:	00004698 	.word	0x00004698
    71dc:	0000463e 	.word	0x0000463e
    71e0:	0000465e 	.word	0x0000465e
    71e4:	0000462e 	.word	0x0000462e
    71e8:	00004670 	.word	0x00004670
    71ec:	00004682 	.word	0x00004682
    71f0:	74746142 	.word	0x74746142
    71f4:	3a797265 	.word	0x3a797265
    71f8:	56642520 	.word	0x56642520
    71fc:	00000a0d 	.word	0x00000a0d
    7200:	3a4d5052 	.word	0x3a4d5052
    7204:	0d642520 	.word	0x0d642520
    7208:	0000000a 	.word	0x0000000a
    720c:	43455845 	.word	0x43455845
    7210:	44524f20 	.word	0x44524f20
    7214:	36205245 	.word	0x36205245
    7218:	0a36      	.short	0x0a36
    721a:	00          	.byte	0x00
    721b:	23          	.byte	0x23
    721c:	202b302d 	.word	0x202b302d
    7220:	4c6c6800 	.word	0x4c6c6800
    7224:	67666500 	.word	0x67666500
    7228:	00474645 	.word	0x00474645
    722c:	33323130 	.word	0x33323130
    7230:	37363534 	.word	0x37363534
    7234:	42413938 	.word	0x42413938
    7238:	46454443 	.word	0x46454443
    723c:	32313000 	.word	0x32313000
    7240:	36353433 	.word	0x36353433
    7244:	61393837 	.word	0x61393837
    7248:	65646362 	.word	0x65646362
    724c:	00000066 	.word	0x00000066
    7250:	0000726e 	.word	0x0000726e
    7254:	00007271 	.word	0x00007271
    7258:	00007274 	.word	0x00007274
    725c:	61462d41 	.word	0x61462d41
    7260:	3938662d 	.word	0x3938662d
    7264:	33323130 	.word	0x33323130
    7268:	37363534 	.word	0x37363534
    726c:	005d      	.short	0x005d
    726e:	2d2b      	.short	0x2d2b
    7270:	00303000 	.word	0x00303000
    7274:	00005878 	.word	0x00005878

00007278 <__sf_fake_stderr>:
	...

00007298 <__sf_fake_stdin>:
	...

000072b8 <__sf_fake_stdout>:
	...
    72d8:	4f500043 00584953 2000002e                       C.POSIX...

000072e2 <_ctype_>:
    72e2:	20202000 20202020 28282020 20282828     .         ((((( 
    72f2:	20202020 20202020 20202020 20202020                     
    7302:	10108820 10101010 10101010 10101010      ...............
    7312:	04040410 04040404 10040404 10101010     ................
    7322:	41411010 41414141 01010101 01010101     ..AAAAAA........
    7332:	01010101 01010101 01010101 10101010     ................
    7342:	42421010 42424242 02020202 02020202     ..BBBBBB........
    7352:	02020202 02020202 02020202 10101010     ................
    7362:	00000020 00000000 00000000 00000000      ...............
	...

000073e4 <_init>:
    73e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73e6:	46c0      	nop			; (mov r8, r8)
    73e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    73ea:	bc08      	pop	{r3}
    73ec:	469e      	mov	lr, r3
    73ee:	4770      	bx	lr

000073f0 <__init_array_start>:
    73f0:	000000dd 	.word	0x000000dd

000073f4 <_fini>:
    73f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73f6:	46c0      	nop			; (mov r8, r8)
    73f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    73fa:	bc08      	pop	{r3}
    73fc:	469e      	mov	lr, r3
    73fe:	4770      	bx	lr

00007400 <__fini_array_start>:
    7400:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <test_bob>:
2000000c:	5750 004d                                   PWM.

20000010 <bool_map_1>:
	...
20000018:	0100 0000 0000 0000 0000 0001 0000 0000     ................
20000028:	0000 0100 0000 0000 0000 0000 0001 0000     ................
20000038:	0000 0000 0100 0000 0000 0000 0000 0001     ................
20000048:	0000 0000 0000 0100 0000 0000 0000 0001     ................
20000058:	0000 0000 0100 0000 0000 0000 0001 0000     ................
20000068:	0000 0100 0000 0000 0000 0001 0000 0000     ................
20000078:	0100 0000 0000 0000 0001 0000 0000 0000     ................
20000088:	0000 0100 0001 0000 0000 0001 0100 0000     ................
20000098:	0100 0000 0000 0001 0001 0000 0000 0100     ................
200000a8:	0100 0000 0000 0001 0000 0001 0100 0000     ................
200000b8:	0000 0100 0001 0000 0000 0000 0000 0000     ................
200000c8:	0000 0100 0001 0000 0000 0000 0000 0000     ................
200000d8:	0101 0101 0101 0101                         ........

200000e0 <mcp23017_data>:
200000e0:	0000 0000 0020 0000 0000 0000 0000 0000     .... ...........
200000f0:	0001 0000 0021 0000 0000 0000 0000 0000     ....!...........
20000100:	0001 0000 0022 0000 0000 0000 0000 0000     ...."...........
20000110:	0001 0000 0023 0000 0000 0000 0000 0000     ....#...........
20000120:	0001 0000 0024 0000 0000 0000 0000 0000     ....$...........
20000130:	0001 0000 0025 0000 0000 0000 0000 0000     ....%...........
20000140:	0000 0000 0026 0000 0000 0000 0000 0000     ....&...........
20000150:	0000 0000 0027 0000 0000 0000 0000 0000     ....'...........

20000160 <duty_cycle.13751>:
20000160:	003e 0000                                   >...

20000164 <soundboard_instance>:
	...
2000017c:	70dc 0000 70ec 0000 0000 0000 0000 0000     .p...p..........
2000018c:	0001 0000 70dc 0000 70ec 0000 0000 0000     .....p...p......
2000019c:	0000 0000 0002 0000 70dc 0000 70ec 0000     .........p...p..
	...
200001b4:	0003 0000 70dc 0000 70ec 0000 0000 0000     .....p...p......
200001c4:	0000 0000 0004 0000 70dc 0000 70ec 0000     .........p...p..
	...
200001dc:	0005 0000 70dc 0000 70ec 0000 0000 0000     .....p...p......
200001ec:	0000 0000 0006 0000 70dc 0000 70ec 0000     .........p...p..
	...
20000204:	0007 0000 70dc 0000 70ec 0000 0000 0000     .....p...p......
20000214:	0000 0000 0008 0000 70dc 0000 70ec 0000     .........p...p..
	...
2000022c:	0009 0000 70dc 0000 70ec 0000 0000 0000     .....p...p......
2000023c:	0000 0000 000a 0000 70dc 0000 70ec 0000     .........p...p..
	...
20000254:	000b 0000 70dc 0000 70ec 0000 0000 0000     .....p...p......
20000264:	0000 0000 000c 0000 70dc 0000 70ec 0000     .........p...p..
	...
2000027c:	000d 0000 70dc 0000 70ec 0000 0000 0000     .....p...p......
2000028c:	0000 0000 000e 0000 70dc 0000 70ec 0000     .........p...p..
	...
200002a4:	000f 0000 70dc 0000 70ec 0000 0000 0000     .....p...p......
200002b4:	0000 0000 0010 0000 70dc 0000 70ec 0000     .........p...p..
	...
200002cc:	0011 0000 70dc 0000 70ec 0000 0000 0000     .....p...p......
200002dc:	0000 0000 0012 0000 70dc 0000 70ec 0000     .........p...p..
	...
200002f4:	0013 0000 70dc 0000 70ec 0000 0000 0000     .....p...p......
20000304:	0000 0000 0014 0000 70dc 0000 70ec 0000     .........p...p..
	...
2000031c:	0015 0000 70dc 0000 70ec 0000 0000 0000     .....p...p......
2000032c:	0000 0000 0016 0000 70dc 0000 70ec 0000     .........p...p..
	...
20000344:	0017 0000 70dc 0000 70ec 0000 0000 0000     .....p...p......
20000354:	0000 0000 0018 0000 70dc 0000 70ec 0000     .........p...p..
20000364:	0000 0000                                   ....

20000368 <g_interrupt_enabled>:
20000368:	0001 0000                                   ....

2000036c <_impure_ptr>:
2000036c:	0370 2000                                   p.. 

20000370 <impure_data>:
20000370:	0000 0000 7298 0000 72b8 0000 7278 0000     .....r...r..xr..
	...

200003d0 <__global_locale>:
200003d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200003f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000410:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000430:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000450:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000470:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000490:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004b0:	6ce7 0000 6c3d 0000 0000 0000 72e2 0000     .l..=l.......r..
200004c0:	72e0 0000 7220 0000 7220 0000 7220 0000     .r.. r.. r.. r..
200004d0:	7220 0000 7220 0000 7220 0000 7220 0000      r.. r.. r.. r..
200004e0:	7220 0000 7220 0000 ffff ffff ffff ffff      r.. r..........
200004f0:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000518:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
