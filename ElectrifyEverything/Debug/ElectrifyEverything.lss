
ElectrifyEverything.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000071d0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000071d0  000071d0  000171d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000284  20000000  000071d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000e10  20000284  0000745c  00020284  2**2
                  ALLOC
  4 .stack        00002004  20001094  0000826c  00020284  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003af91  00000000  00000000  00020305  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004169  00000000  00000000  0005b296  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000035f6  00000000  00000000  0005f3ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a58  00000000  00000000  000629f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008e0  00000000  00000000  0006344d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d3db  00000000  00000000  00063d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012a18  00000000  00000000  00081108  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00089a40  00000000  00000000  00093b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000290c  00000000  00000000  0011d560  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20003098 	.word	0x20003098
       4:	00004d5d 	.word	0x00004d5d
       8:	00004e55 	.word	0x00004e55
       c:	00004e55 	.word	0x00004e55
	...
      2c:	00004e55 	.word	0x00004e55
	...
      38:	00004e55 	.word	0x00004e55
      3c:	00004e55 	.word	0x00004e55
      40:	00004e55 	.word	0x00004e55
      44:	00004e55 	.word	0x00004e55
      48:	00000d61 	.word	0x00000d61
      4c:	00004e55 	.word	0x00004e55
      50:	00000259 	.word	0x00000259
      54:	00004e55 	.word	0x00004e55
      58:	00004e55 	.word	0x00004e55
      5c:	00004e55 	.word	0x00004e55
      60:	00004e55 	.word	0x00004e55
      64:	00004e55 	.word	0x00004e55
      68:	00003f9d 	.word	0x00003f9d
      6c:	00000e15 	.word	0x00000e15
      70:	00004e55 	.word	0x00004e55
      74:	00004e55 	.word	0x00004e55
      78:	00004e55 	.word	0x00004e55
      7c:	00004e55 	.word	0x00004e55
      80:	00004e55 	.word	0x00004e55
      84:	00004e55 	.word	0x00004e55
      88:	00003779 	.word	0x00003779
      8c:	00004e55 	.word	0x00004e55
      90:	00004e55 	.word	0x00004e55
	...
      9c:	00004e55 	.word	0x00004e55
      a0:	00004e55 	.word	0x00004e55
      a4:	00004e55 	.word	0x00004e55
      a8:	00004e55 	.word	0x00004e55
      ac:	00004e55 	.word	0x00004e55
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000284 	.word	0x20000284
      d4:	00000000 	.word	0x00000000
      d8:	000071d8 	.word	0x000071d8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000288 	.word	0x20000288
     108:	000071d8 	.word	0x000071d8
     10c:	000071d8 	.word	0x000071d8
     110:	00000000 	.word	0x00000000

00000114 <wdt_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void wdt_get_config_defaults(
		struct wdt_conf *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
     122:	687b      	ldr	r3, [r7, #4]
     124:	2201      	movs	r2, #1
     126:	705a      	strb	r2, [r3, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21) && !(SAMR30)
	config->clock_source         = GCLK_GENERATOR_4;
     128:	687b      	ldr	r3, [r7, #4]
     12a:	2204      	movs	r2, #4
     12c:	709a      	strb	r2, [r3, #2]
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
     12e:	687b      	ldr	r3, [r7, #4]
     130:	220c      	movs	r2, #12
     132:	70da      	strb	r2, [r3, #3]
	config->window_period        = WDT_PERIOD_NONE;
     134:	687b      	ldr	r3, [r7, #4]
     136:	2200      	movs	r2, #0
     138:	711a      	strb	r2, [r3, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
     13a:	687b      	ldr	r3, [r7, #4]
     13c:	2200      	movs	r2, #0
     13e:	715a      	strb	r2, [r3, #5]
}
     140:	46c0      	nop			; (mov r8, r8)
     142:	46bd      	mov	sp, r7
     144:	b002      	add	sp, #8
     146:	bd80      	pop	{r7, pc}

00000148 <wdt_init>:
 *  Author: Andreas
 */ 
#include "wdt.h"

void wdt_init()
{
     148:	b580      	push	{r7, lr}
     14a:	b082      	sub	sp, #8
     14c:	af00      	add	r7, sp, #0
	struct wdt_conf config_wdt;
	wdt_get_config_defaults(&config_wdt);
     14e:	003b      	movs	r3, r7
     150:	0018      	movs	r0, r3
     152:	4b09      	ldr	r3, [pc, #36]	; (178 <wdt_init+0x30>)
     154:	4798      	blx	r3
	
	config_wdt.always_on = false;
     156:	003b      	movs	r3, r7
     158:	2200      	movs	r2, #0
     15a:	701a      	strb	r2, [r3, #0]
	config_wdt.timeout_period = WDT_PERIOD_4096CLK;
     15c:	003b      	movs	r3, r7
     15e:	220a      	movs	r2, #10
     160:	70da      	strb	r2, [r3, #3]
	config_wdt.early_warning_period = WDT_PERIOD_2048CLK;
     162:	003b      	movs	r3, r7
     164:	2209      	movs	r2, #9
     166:	715a      	strb	r2, [r3, #5]
	
	wdt_set_config(&config_wdt);
     168:	003b      	movs	r3, r7
     16a:	0018      	movs	r0, r3
     16c:	4b03      	ldr	r3, [pc, #12]	; (17c <wdt_init+0x34>)
     16e:	4798      	blx	r3
	//wdt_init_cb();
}
     170:	46c0      	nop			; (mov r8, r8)
     172:	46bd      	mov	sp, r7
     174:	b002      	add	sp, #8
     176:	bd80      	pop	{r7, pc}
     178:	00000115 	.word	0x00000115
     17c:	00000bcd 	.word	0x00000bcd

00000180 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
     180:	b580      	push	{r7, lr}
     182:	af00      	add	r7, sp, #0
}
     184:	46c0      	nop			; (mov r8, r8)
     186:	46bd      	mov	sp, r7
     188:	bd80      	pop	{r7, pc}
     18a:	46c0      	nop			; (mov r8, r8)

0000018c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     18c:	b580      	push	{r7, lr}
     18e:	b084      	sub	sp, #16
     190:	af00      	add	r7, sp, #0
     192:	0002      	movs	r2, r0
     194:	1dfb      	adds	r3, r7, #7
     196:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     198:	230f      	movs	r3, #15
     19a:	18fb      	adds	r3, r7, r3
     19c:	1dfa      	adds	r2, r7, #7
     19e:	7812      	ldrb	r2, [r2, #0]
     1a0:	0952      	lsrs	r2, r2, #5
     1a2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     1a4:	230f      	movs	r3, #15
     1a6:	18fb      	adds	r3, r7, r3
     1a8:	781b      	ldrb	r3, [r3, #0]
     1aa:	2b00      	cmp	r3, #0
     1ac:	d10c      	bne.n	1c8 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     1ae:	4b09      	ldr	r3, [pc, #36]	; (1d4 <_extint_get_eic_from_channel+0x48>)
     1b0:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     1b2:	230f      	movs	r3, #15
     1b4:	18fb      	adds	r3, r7, r3
     1b6:	781b      	ldrb	r3, [r3, #0]
     1b8:	009b      	lsls	r3, r3, #2
     1ba:	2210      	movs	r2, #16
     1bc:	4694      	mov	ip, r2
     1be:	44bc      	add	ip, r7
     1c0:	4463      	add	r3, ip
     1c2:	3b08      	subs	r3, #8
     1c4:	681b      	ldr	r3, [r3, #0]
     1c6:	e000      	b.n	1ca <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     1c8:	2300      	movs	r3, #0
	}
}
     1ca:	0018      	movs	r0, r3
     1cc:	46bd      	mov	sp, r7
     1ce:	b004      	add	sp, #16
     1d0:	bd80      	pop	{r7, pc}
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	40001800 	.word	0x40001800

000001d8 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     1d8:	b580      	push	{r7, lr}
     1da:	b084      	sub	sp, #16
     1dc:	af00      	add	r7, sp, #0
     1de:	0002      	movs	r2, r0
     1e0:	1dfb      	adds	r3, r7, #7
     1e2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     1e4:	1dfb      	adds	r3, r7, #7
     1e6:	781b      	ldrb	r3, [r3, #0]
     1e8:	0018      	movs	r0, r3
     1ea:	4b0b      	ldr	r3, [pc, #44]	; (218 <extint_chan_is_detected+0x40>)
     1ec:	4798      	blx	r3
     1ee:	0003      	movs	r3, r0
     1f0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     1f2:	1dfb      	adds	r3, r7, #7
     1f4:	781b      	ldrb	r3, [r3, #0]
     1f6:	221f      	movs	r2, #31
     1f8:	4013      	ands	r3, r2
     1fa:	2201      	movs	r2, #1
     1fc:	409a      	lsls	r2, r3
     1fe:	0013      	movs	r3, r2
     200:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     202:	68fb      	ldr	r3, [r7, #12]
     204:	691b      	ldr	r3, [r3, #16]
     206:	68ba      	ldr	r2, [r7, #8]
     208:	4013      	ands	r3, r2
     20a:	1e5a      	subs	r2, r3, #1
     20c:	4193      	sbcs	r3, r2
     20e:	b2db      	uxtb	r3, r3
}
     210:	0018      	movs	r0, r3
     212:	46bd      	mov	sp, r7
     214:	b004      	add	sp, #16
     216:	bd80      	pop	{r7, pc}
     218:	0000018d 	.word	0x0000018d

0000021c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     21c:	b580      	push	{r7, lr}
     21e:	b084      	sub	sp, #16
     220:	af00      	add	r7, sp, #0
     222:	0002      	movs	r2, r0
     224:	1dfb      	adds	r3, r7, #7
     226:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     228:	1dfb      	adds	r3, r7, #7
     22a:	781b      	ldrb	r3, [r3, #0]
     22c:	0018      	movs	r0, r3
     22e:	4b09      	ldr	r3, [pc, #36]	; (254 <extint_chan_clear_detected+0x38>)
     230:	4798      	blx	r3
     232:	0003      	movs	r3, r0
     234:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     236:	1dfb      	adds	r3, r7, #7
     238:	781b      	ldrb	r3, [r3, #0]
     23a:	221f      	movs	r2, #31
     23c:	4013      	ands	r3, r2
     23e:	2201      	movs	r2, #1
     240:	409a      	lsls	r2, r3
     242:	0013      	movs	r3, r2
     244:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     246:	68fb      	ldr	r3, [r7, #12]
     248:	68ba      	ldr	r2, [r7, #8]
     24a:	611a      	str	r2, [r3, #16]
}
     24c:	46c0      	nop			; (mov r8, r8)
     24e:	46bd      	mov	sp, r7
     250:	b004      	add	sp, #16
     252:	bd80      	pop	{r7, pc}
     254:	0000018d 	.word	0x0000018d

00000258 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     258:	b580      	push	{r7, lr}
     25a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     25c:	4b15      	ldr	r3, [pc, #84]	; (2b4 <EIC_Handler+0x5c>)
     25e:	2200      	movs	r2, #0
     260:	701a      	strb	r2, [r3, #0]
     262:	e020      	b.n	2a6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     264:	4b13      	ldr	r3, [pc, #76]	; (2b4 <EIC_Handler+0x5c>)
     266:	781b      	ldrb	r3, [r3, #0]
     268:	0018      	movs	r0, r3
     26a:	4b13      	ldr	r3, [pc, #76]	; (2b8 <EIC_Handler+0x60>)
     26c:	4798      	blx	r3
     26e:	1e03      	subs	r3, r0, #0
     270:	d013      	beq.n	29a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     272:	4b10      	ldr	r3, [pc, #64]	; (2b4 <EIC_Handler+0x5c>)
     274:	781b      	ldrb	r3, [r3, #0]
     276:	0018      	movs	r0, r3
     278:	4b10      	ldr	r3, [pc, #64]	; (2bc <EIC_Handler+0x64>)
     27a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     27c:	4b0d      	ldr	r3, [pc, #52]	; (2b4 <EIC_Handler+0x5c>)
     27e:	781b      	ldrb	r3, [r3, #0]
     280:	001a      	movs	r2, r3
     282:	4b0f      	ldr	r3, [pc, #60]	; (2c0 <EIC_Handler+0x68>)
     284:	0092      	lsls	r2, r2, #2
     286:	58d3      	ldr	r3, [r2, r3]
     288:	2b00      	cmp	r3, #0
     28a:	d006      	beq.n	29a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     28c:	4b09      	ldr	r3, [pc, #36]	; (2b4 <EIC_Handler+0x5c>)
     28e:	781b      	ldrb	r3, [r3, #0]
     290:	001a      	movs	r2, r3
     292:	4b0b      	ldr	r3, [pc, #44]	; (2c0 <EIC_Handler+0x68>)
     294:	0092      	lsls	r2, r2, #2
     296:	58d3      	ldr	r3, [r2, r3]
     298:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     29a:	4b06      	ldr	r3, [pc, #24]	; (2b4 <EIC_Handler+0x5c>)
     29c:	781b      	ldrb	r3, [r3, #0]
     29e:	3301      	adds	r3, #1
     2a0:	b2da      	uxtb	r2, r3
     2a2:	4b04      	ldr	r3, [pc, #16]	; (2b4 <EIC_Handler+0x5c>)
     2a4:	701a      	strb	r2, [r3, #0]
     2a6:	4b03      	ldr	r3, [pc, #12]	; (2b4 <EIC_Handler+0x5c>)
     2a8:	781b      	ldrb	r3, [r3, #0]
     2aa:	2b0f      	cmp	r3, #15
     2ac:	d9da      	bls.n	264 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     2ae:	46c0      	nop			; (mov r8, r8)
     2b0:	46bd      	mov	sp, r7
     2b2:	bd80      	pop	{r7, pc}
     2b4:	200002d8 	.word	0x200002d8
     2b8:	000001d9 	.word	0x000001d9
     2bc:	0000021d 	.word	0x0000021d
     2c0:	200002dc 	.word	0x200002dc

000002c4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     2c4:	b580      	push	{r7, lr}
     2c6:	b082      	sub	sp, #8
     2c8:	af00      	add	r7, sp, #0
     2ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     2cc:	687b      	ldr	r3, [r7, #4]
     2ce:	2200      	movs	r2, #0
     2d0:	701a      	strb	r2, [r3, #0]
}
     2d2:	46c0      	nop			; (mov r8, r8)
     2d4:	46bd      	mov	sp, r7
     2d6:	b002      	add	sp, #8
     2d8:	bd80      	pop	{r7, pc}
     2da:	46c0      	nop			; (mov r8, r8)

000002dc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     2dc:	b580      	push	{r7, lr}
     2de:	b082      	sub	sp, #8
     2e0:	af00      	add	r7, sp, #0
     2e2:	0002      	movs	r2, r0
     2e4:	6039      	str	r1, [r7, #0]
     2e6:	1dfb      	adds	r3, r7, #7
     2e8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     2ea:	1dfb      	adds	r3, r7, #7
     2ec:	781b      	ldrb	r3, [r3, #0]
     2ee:	2b01      	cmp	r3, #1
     2f0:	d00a      	beq.n	308 <system_apb_clock_set_mask+0x2c>
     2f2:	2b02      	cmp	r3, #2
     2f4:	d00f      	beq.n	316 <system_apb_clock_set_mask+0x3a>
     2f6:	2b00      	cmp	r3, #0
     2f8:	d114      	bne.n	324 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     2fa:	4b0e      	ldr	r3, [pc, #56]	; (334 <system_apb_clock_set_mask+0x58>)
     2fc:	4a0d      	ldr	r2, [pc, #52]	; (334 <system_apb_clock_set_mask+0x58>)
     2fe:	6991      	ldr	r1, [r2, #24]
     300:	683a      	ldr	r2, [r7, #0]
     302:	430a      	orrs	r2, r1
     304:	619a      	str	r2, [r3, #24]
			break;
     306:	e00f      	b.n	328 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     308:	4b0a      	ldr	r3, [pc, #40]	; (334 <system_apb_clock_set_mask+0x58>)
     30a:	4a0a      	ldr	r2, [pc, #40]	; (334 <system_apb_clock_set_mask+0x58>)
     30c:	69d1      	ldr	r1, [r2, #28]
     30e:	683a      	ldr	r2, [r7, #0]
     310:	430a      	orrs	r2, r1
     312:	61da      	str	r2, [r3, #28]
			break;
     314:	e008      	b.n	328 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     316:	4b07      	ldr	r3, [pc, #28]	; (334 <system_apb_clock_set_mask+0x58>)
     318:	4a06      	ldr	r2, [pc, #24]	; (334 <system_apb_clock_set_mask+0x58>)
     31a:	6a11      	ldr	r1, [r2, #32]
     31c:	683a      	ldr	r2, [r7, #0]
     31e:	430a      	orrs	r2, r1
     320:	621a      	str	r2, [r3, #32]
			break;
     322:	e001      	b.n	328 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     324:	2317      	movs	r3, #23
     326:	e000      	b.n	32a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     328:	2300      	movs	r3, #0
}
     32a:	0018      	movs	r0, r3
     32c:	46bd      	mov	sp, r7
     32e:	b002      	add	sp, #8
     330:	bd80      	pop	{r7, pc}
     332:	46c0      	nop			; (mov r8, r8)
     334:	40000400 	.word	0x40000400

00000338 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     338:	b580      	push	{r7, lr}
     33a:	b082      	sub	sp, #8
     33c:	af00      	add	r7, sp, #0
     33e:	0002      	movs	r2, r0
     340:	1dfb      	adds	r3, r7, #7
     342:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     344:	4b06      	ldr	r3, [pc, #24]	; (360 <system_interrupt_enable+0x28>)
     346:	1dfa      	adds	r2, r7, #7
     348:	7812      	ldrb	r2, [r2, #0]
     34a:	0011      	movs	r1, r2
     34c:	221f      	movs	r2, #31
     34e:	400a      	ands	r2, r1
     350:	2101      	movs	r1, #1
     352:	4091      	lsls	r1, r2
     354:	000a      	movs	r2, r1
     356:	601a      	str	r2, [r3, #0]
}
     358:	46c0      	nop			; (mov r8, r8)
     35a:	46bd      	mov	sp, r7
     35c:	b002      	add	sp, #8
     35e:	bd80      	pop	{r7, pc}
     360:	e000e100 	.word	0xe000e100

00000364 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     364:	b580      	push	{r7, lr}
     366:	b082      	sub	sp, #8
     368:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     36a:	4b0f      	ldr	r3, [pc, #60]	; (3a8 <extint_is_syncing+0x44>)
     36c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     36e:	2300      	movs	r3, #0
     370:	607b      	str	r3, [r7, #4]
     372:	e011      	b.n	398 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     374:	687b      	ldr	r3, [r7, #4]
     376:	009b      	lsls	r3, r3, #2
     378:	2208      	movs	r2, #8
     37a:	4694      	mov	ip, r2
     37c:	44bc      	add	ip, r7
     37e:	4463      	add	r3, ip
     380:	3b08      	subs	r3, #8
     382:	681b      	ldr	r3, [r3, #0]
     384:	785b      	ldrb	r3, [r3, #1]
     386:	b2db      	uxtb	r3, r3
     388:	b25b      	sxtb	r3, r3
     38a:	2b00      	cmp	r3, #0
     38c:	da01      	bge.n	392 <extint_is_syncing+0x2e>
			return true;
     38e:	2301      	movs	r3, #1
     390:	e006      	b.n	3a0 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     392:	687b      	ldr	r3, [r7, #4]
     394:	3301      	adds	r3, #1
     396:	607b      	str	r3, [r7, #4]
     398:	687b      	ldr	r3, [r7, #4]
     39a:	2b00      	cmp	r3, #0
     39c:	d0ea      	beq.n	374 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
     39e:	2300      	movs	r3, #0
}
     3a0:	0018      	movs	r0, r3
     3a2:	46bd      	mov	sp, r7
     3a4:	b002      	add	sp, #8
     3a6:	bd80      	pop	{r7, pc}
     3a8:	40001800 	.word	0x40001800

000003ac <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     3ac:	b580      	push	{r7, lr}
     3ae:	b084      	sub	sp, #16
     3b0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     3b2:	4b2d      	ldr	r3, [pc, #180]	; (468 <_system_extint_init+0xbc>)
     3b4:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     3b6:	2140      	movs	r1, #64	; 0x40
     3b8:	2000      	movs	r0, #0
     3ba:	4b2c      	ldr	r3, [pc, #176]	; (46c <_system_extint_init+0xc0>)
     3bc:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     3be:	003b      	movs	r3, r7
     3c0:	0018      	movs	r0, r3
     3c2:	4b2b      	ldr	r3, [pc, #172]	; (470 <_system_extint_init+0xc4>)
     3c4:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     3c6:	003b      	movs	r3, r7
     3c8:	2200      	movs	r2, #0
     3ca:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     3cc:	003b      	movs	r3, r7
     3ce:	0019      	movs	r1, r3
     3d0:	2005      	movs	r0, #5
     3d2:	4b28      	ldr	r3, [pc, #160]	; (474 <_system_extint_init+0xc8>)
     3d4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     3d6:	2005      	movs	r0, #5
     3d8:	4b27      	ldr	r3, [pc, #156]	; (478 <_system_extint_init+0xcc>)
     3da:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     3dc:	2300      	movs	r3, #0
     3de:	60fb      	str	r3, [r7, #12]
     3e0:	e018      	b.n	414 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     3e2:	68fb      	ldr	r3, [r7, #12]
     3e4:	009b      	lsls	r3, r3, #2
     3e6:	2210      	movs	r2, #16
     3e8:	4694      	mov	ip, r2
     3ea:	44bc      	add	ip, r7
     3ec:	4463      	add	r3, ip
     3ee:	3b0c      	subs	r3, #12
     3f0:	681a      	ldr	r2, [r3, #0]
     3f2:	68fb      	ldr	r3, [r7, #12]
     3f4:	009b      	lsls	r3, r3, #2
     3f6:	2110      	movs	r1, #16
     3f8:	468c      	mov	ip, r1
     3fa:	44bc      	add	ip, r7
     3fc:	4463      	add	r3, ip
     3fe:	3b0c      	subs	r3, #12
     400:	681b      	ldr	r3, [r3, #0]
     402:	781b      	ldrb	r3, [r3, #0]
     404:	b2db      	uxtb	r3, r3
     406:	2101      	movs	r1, #1
     408:	430b      	orrs	r3, r1
     40a:	b2db      	uxtb	r3, r3
     40c:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     40e:	68fb      	ldr	r3, [r7, #12]
     410:	3301      	adds	r3, #1
     412:	60fb      	str	r3, [r7, #12]
     414:	68fb      	ldr	r3, [r7, #12]
     416:	2b00      	cmp	r3, #0
     418:	d0e3      	beq.n	3e2 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
     41a:	46c0      	nop			; (mov r8, r8)
     41c:	4b17      	ldr	r3, [pc, #92]	; (47c <_system_extint_init+0xd0>)
     41e:	4798      	blx	r3
     420:	1e03      	subs	r3, r0, #0
     422:	d1fb      	bne.n	41c <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     424:	230b      	movs	r3, #11
     426:	18fb      	adds	r3, r7, r3
     428:	2200      	movs	r2, #0
     42a:	701a      	strb	r2, [r3, #0]
     42c:	e00d      	b.n	44a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     42e:	230b      	movs	r3, #11
     430:	18fb      	adds	r3, r7, r3
     432:	781a      	ldrb	r2, [r3, #0]
     434:	4b12      	ldr	r3, [pc, #72]	; (480 <_system_extint_init+0xd4>)
     436:	0092      	lsls	r2, r2, #2
     438:	2100      	movs	r1, #0
     43a:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     43c:	230b      	movs	r3, #11
     43e:	18fb      	adds	r3, r7, r3
     440:	781a      	ldrb	r2, [r3, #0]
     442:	230b      	movs	r3, #11
     444:	18fb      	adds	r3, r7, r3
     446:	3201      	adds	r2, #1
     448:	701a      	strb	r2, [r3, #0]
     44a:	230b      	movs	r3, #11
     44c:	18fb      	adds	r3, r7, r3
     44e:	781b      	ldrb	r3, [r3, #0]
     450:	2b0f      	cmp	r3, #15
     452:	d9ec      	bls.n	42e <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     454:	2004      	movs	r0, #4
     456:	4b0b      	ldr	r3, [pc, #44]	; (484 <_system_extint_init+0xd8>)
     458:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     45a:	4b0b      	ldr	r3, [pc, #44]	; (488 <_system_extint_init+0xdc>)
     45c:	4798      	blx	r3
}
     45e:	46c0      	nop			; (mov r8, r8)
     460:	46bd      	mov	sp, r7
     462:	b004      	add	sp, #16
     464:	bd80      	pop	{r7, pc}
     466:	46c0      	nop			; (mov r8, r8)
     468:	40001800 	.word	0x40001800
     46c:	000002dd 	.word	0x000002dd
     470:	000002c5 	.word	0x000002c5
     474:	000049a1 	.word	0x000049a1
     478:	000049e5 	.word	0x000049e5
     47c:	00000365 	.word	0x00000365
     480:	200002dc 	.word	0x200002dc
     484:	00000339 	.word	0x00000339
     488:	0000048d 	.word	0x0000048d

0000048c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     48c:	b580      	push	{r7, lr}
     48e:	b082      	sub	sp, #8
     490:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     492:	4b15      	ldr	r3, [pc, #84]	; (4e8 <_extint_enable+0x5c>)
     494:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     496:	2300      	movs	r3, #0
     498:	607b      	str	r3, [r7, #4]
     49a:	e018      	b.n	4ce <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     49c:	687b      	ldr	r3, [r7, #4]
     49e:	009b      	lsls	r3, r3, #2
     4a0:	2208      	movs	r2, #8
     4a2:	4694      	mov	ip, r2
     4a4:	44bc      	add	ip, r7
     4a6:	4463      	add	r3, ip
     4a8:	3b08      	subs	r3, #8
     4aa:	681a      	ldr	r2, [r3, #0]
     4ac:	687b      	ldr	r3, [r7, #4]
     4ae:	009b      	lsls	r3, r3, #2
     4b0:	2108      	movs	r1, #8
     4b2:	468c      	mov	ip, r1
     4b4:	44bc      	add	ip, r7
     4b6:	4463      	add	r3, ip
     4b8:	3b08      	subs	r3, #8
     4ba:	681b      	ldr	r3, [r3, #0]
     4bc:	781b      	ldrb	r3, [r3, #0]
     4be:	b2db      	uxtb	r3, r3
     4c0:	2102      	movs	r1, #2
     4c2:	430b      	orrs	r3, r1
     4c4:	b2db      	uxtb	r3, r3
     4c6:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     4c8:	687b      	ldr	r3, [r7, #4]
     4ca:	3301      	adds	r3, #1
     4cc:	607b      	str	r3, [r7, #4]
     4ce:	687b      	ldr	r3, [r7, #4]
     4d0:	2b00      	cmp	r3, #0
     4d2:	d0e3      	beq.n	49c <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     4d4:	46c0      	nop			; (mov r8, r8)
     4d6:	4b05      	ldr	r3, [pc, #20]	; (4ec <_extint_enable+0x60>)
     4d8:	4798      	blx	r3
     4da:	1e03      	subs	r3, r0, #0
     4dc:	d1fb      	bne.n	4d6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	46bd      	mov	sp, r7
     4e2:	b002      	add	sp, #8
     4e4:	bd80      	pop	{r7, pc}
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	40001800 	.word	0x40001800
     4ec:	00000365 	.word	0x00000365

000004f0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     4f0:	b580      	push	{r7, lr}
     4f2:	b082      	sub	sp, #8
     4f4:	af00      	add	r7, sp, #0
     4f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4f8:	687b      	ldr	r3, [r7, #4]
     4fa:	2280      	movs	r2, #128	; 0x80
     4fc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     4fe:	687b      	ldr	r3, [r7, #4]
     500:	2200      	movs	r2, #0
     502:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     504:	687b      	ldr	r3, [r7, #4]
     506:	2201      	movs	r2, #1
     508:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	2200      	movs	r2, #0
     50e:	70da      	strb	r2, [r3, #3]
}
     510:	46c0      	nop			; (mov r8, r8)
     512:	46bd      	mov	sp, r7
     514:	b002      	add	sp, #8
     516:	bd80      	pop	{r7, pc}

00000518 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     518:	b580      	push	{r7, lr}
     51a:	b084      	sub	sp, #16
     51c:	af00      	add	r7, sp, #0
     51e:	0002      	movs	r2, r0
     520:	6039      	str	r1, [r7, #0]
     522:	1dfb      	adds	r3, r7, #7
     524:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     526:	230c      	movs	r3, #12
     528:	18fb      	adds	r3, r7, r3
     52a:	0018      	movs	r0, r3
     52c:	4b10      	ldr	r3, [pc, #64]	; (570 <port_pin_set_config+0x58>)
     52e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     530:	230c      	movs	r3, #12
     532:	18fb      	adds	r3, r7, r3
     534:	2280      	movs	r2, #128	; 0x80
     536:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     538:	683b      	ldr	r3, [r7, #0]
     53a:	781a      	ldrb	r2, [r3, #0]
     53c:	230c      	movs	r3, #12
     53e:	18fb      	adds	r3, r7, r3
     540:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     542:	683b      	ldr	r3, [r7, #0]
     544:	785a      	ldrb	r2, [r3, #1]
     546:	230c      	movs	r3, #12
     548:	18fb      	adds	r3, r7, r3
     54a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     54c:	683b      	ldr	r3, [r7, #0]
     54e:	789a      	ldrb	r2, [r3, #2]
     550:	230c      	movs	r3, #12
     552:	18fb      	adds	r3, r7, r3
     554:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     556:	230c      	movs	r3, #12
     558:	18fa      	adds	r2, r7, r3
     55a:	1dfb      	adds	r3, r7, #7
     55c:	781b      	ldrb	r3, [r3, #0]
     55e:	0011      	movs	r1, r2
     560:	0018      	movs	r0, r3
     562:	4b04      	ldr	r3, [pc, #16]	; (574 <port_pin_set_config+0x5c>)
     564:	4798      	blx	r3
}
     566:	46c0      	nop			; (mov r8, r8)
     568:	46bd      	mov	sp, r7
     56a:	b004      	add	sp, #16
     56c:	bd80      	pop	{r7, pc}
     56e:	46c0      	nop			; (mov r8, r8)
     570:	000004f1 	.word	0x000004f1
     574:	00004cd5 	.word	0x00004cd5

00000578 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     578:	b580      	push	{r7, lr}
     57a:	b084      	sub	sp, #16
     57c:	af00      	add	r7, sp, #0
     57e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     580:	687b      	ldr	r3, [r7, #4]
     582:	681b      	ldr	r3, [r3, #0]
     584:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     586:	68fb      	ldr	r3, [r7, #12]
     588:	69db      	ldr	r3, [r3, #28]
     58a:	2207      	movs	r2, #7
     58c:	4013      	ands	r3, r2
     58e:	1e5a      	subs	r2, r3, #1
     590:	4193      	sbcs	r3, r2
     592:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     594:	0018      	movs	r0, r3
     596:	46bd      	mov	sp, r7
     598:	b004      	add	sp, #16
     59a:	bd80      	pop	{r7, pc}

0000059c <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     59c:	b580      	push	{r7, lr}
     59e:	b082      	sub	sp, #8
     5a0:	af00      	add	r7, sp, #0
     5a2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     5a4:	46c0      	nop			; (mov r8, r8)
     5a6:	687b      	ldr	r3, [r7, #4]
     5a8:	0018      	movs	r0, r3
     5aa:	4b04      	ldr	r3, [pc, #16]	; (5bc <_i2c_master_wait_for_sync+0x20>)
     5ac:	4798      	blx	r3
     5ae:	1e03      	subs	r3, r0, #0
     5b0:	d1f9      	bne.n	5a6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     5b2:	46c0      	nop			; (mov r8, r8)
     5b4:	46bd      	mov	sp, r7
     5b6:	b002      	add	sp, #8
     5b8:	bd80      	pop	{r7, pc}
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	00000579 	.word	0x00000579

000005c0 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
     5c0:	b580      	push	{r7, lr}
     5c2:	b084      	sub	sp, #16
     5c4:	af00      	add	r7, sp, #0
     5c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5c8:	687b      	ldr	r3, [r7, #4]
     5ca:	681b      	ldr	r3, [r3, #0]
     5cc:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     5ce:	68fb      	ldr	r3, [r7, #12]
     5d0:	7e1b      	ldrb	r3, [r3, #24]
     5d2:	b2db      	uxtb	r3, r3
     5d4:	001a      	movs	r2, r3
     5d6:	2302      	movs	r3, #2
     5d8:	4013      	ands	r3, r2
     5da:	d00b      	beq.n	5f4 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     5dc:	68fb      	ldr	r3, [r7, #12]
     5de:	2202      	movs	r2, #2
     5e0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     5e2:	68fb      	ldr	r3, [r7, #12]
     5e4:	8b5b      	ldrh	r3, [r3, #26]
     5e6:	b29b      	uxth	r3, r3
     5e8:	001a      	movs	r2, r3
     5ea:	2302      	movs	r3, #2
     5ec:	4013      	ands	r3, r2
     5ee:	d011      	beq.n	614 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     5f0:	2341      	movs	r3, #65	; 0x41
     5f2:	e010      	b.n	616 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     5f4:	68fb      	ldr	r3, [r7, #12]
     5f6:	8b5b      	ldrh	r3, [r3, #26]
     5f8:	b29b      	uxth	r3, r3
     5fa:	001a      	movs	r2, r3
     5fc:	2304      	movs	r3, #4
     5fe:	4013      	ands	r3, r2
     600:	d008      	beq.n	614 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     602:	68fb      	ldr	r3, [r7, #12]
     604:	685b      	ldr	r3, [r3, #4]
     606:	22c0      	movs	r2, #192	; 0xc0
     608:	0292      	lsls	r2, r2, #10
     60a:	431a      	orrs	r2, r3
     60c:	68fb      	ldr	r3, [r7, #12]
     60e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     610:	2318      	movs	r3, #24
     612:	e000      	b.n	616 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
     614:	2300      	movs	r3, #0
}
     616:	0018      	movs	r0, r3
     618:	46bd      	mov	sp, r7
     61a:	b004      	add	sp, #16
     61c:	bd80      	pop	{r7, pc}
     61e:	46c0      	nop			; (mov r8, r8)

00000620 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     620:	b580      	push	{r7, lr}
     622:	b084      	sub	sp, #16
     624:	af00      	add	r7, sp, #0
     626:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     628:	687b      	ldr	r3, [r7, #4]
     62a:	681b      	ldr	r3, [r3, #0]
     62c:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     62e:	230e      	movs	r3, #14
     630:	18fb      	adds	r3, r7, r3
     632:	2200      	movs	r2, #0
     634:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     636:	e00f      	b.n	658 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     638:	230e      	movs	r3, #14
     63a:	18fb      	adds	r3, r7, r3
     63c:	220e      	movs	r2, #14
     63e:	18ba      	adds	r2, r7, r2
     640:	8812      	ldrh	r2, [r2, #0]
     642:	3201      	adds	r2, #1
     644:	801a      	strh	r2, [r3, #0]
     646:	687b      	ldr	r3, [r7, #4]
     648:	891b      	ldrh	r3, [r3, #8]
     64a:	220e      	movs	r2, #14
     64c:	18ba      	adds	r2, r7, r2
     64e:	8812      	ldrh	r2, [r2, #0]
     650:	429a      	cmp	r2, r3
     652:	d301      	bcc.n	658 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
     654:	2312      	movs	r3, #18
     656:	e00e      	b.n	676 <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     658:	68bb      	ldr	r3, [r7, #8]
     65a:	7e1b      	ldrb	r3, [r3, #24]
     65c:	b2db      	uxtb	r3, r3
     65e:	001a      	movs	r2, r3
     660:	2301      	movs	r3, #1
     662:	4013      	ands	r3, r2
     664:	d106      	bne.n	674 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     666:	68bb      	ldr	r3, [r7, #8]
     668:	7e1b      	ldrb	r3, [r3, #24]
     66a:	b2db      	uxtb	r3, r3
     66c:	001a      	movs	r2, r3
     66e:	2302      	movs	r3, #2
     670:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     672:	d0e1      	beq.n	638 <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     674:	2300      	movs	r3, #0
}
     676:	0018      	movs	r0, r3
     678:	46bd      	mov	sp, r7
     67a:	b004      	add	sp, #16
     67c:	bd80      	pop	{r7, pc}
     67e:	46c0      	nop			; (mov r8, r8)

00000680 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     680:	b590      	push	{r4, r7, lr}
     682:	b085      	sub	sp, #20
     684:	af00      	add	r7, sp, #0
     686:	6078      	str	r0, [r7, #4]
     688:	000a      	movs	r2, r1
     68a:	1cfb      	adds	r3, r7, #3
     68c:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     68e:	687b      	ldr	r3, [r7, #4]
     690:	681b      	ldr	r3, [r3, #0]
     692:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     694:	68fb      	ldr	r3, [r7, #12]
     696:	685b      	ldr	r3, [r3, #4]
     698:	2280      	movs	r2, #128	; 0x80
     69a:	02d2      	lsls	r2, r2, #11
     69c:	431a      	orrs	r2, r3
     69e:	68fb      	ldr	r3, [r7, #12]
     6a0:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     6a2:	1cfb      	adds	r3, r7, #3
     6a4:	781a      	ldrb	r2, [r3, #0]
     6a6:	68fb      	ldr	r3, [r7, #12]
     6a8:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     6aa:	230b      	movs	r3, #11
     6ac:	18fc      	adds	r4, r7, r3
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	0018      	movs	r0, r3
     6b2:	4b07      	ldr	r3, [pc, #28]	; (6d0 <_i2c_master_send_hs_master_code+0x50>)
     6b4:	4798      	blx	r3
     6b6:	0003      	movs	r3, r0
     6b8:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     6ba:	68fb      	ldr	r3, [r7, #12]
     6bc:	2201      	movs	r2, #1
     6be:	761a      	strb	r2, [r3, #24]

	return tmp_status;
     6c0:	230b      	movs	r3, #11
     6c2:	18fb      	adds	r3, r7, r3
     6c4:	781b      	ldrb	r3, [r3, #0]
}
     6c6:	0018      	movs	r0, r3
     6c8:	46bd      	mov	sp, r7
     6ca:	b005      	add	sp, #20
     6cc:	bd90      	pop	{r4, r7, pc}
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	00000621 	.word	0x00000621

000006d4 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     6d4:	b590      	push	{r4, r7, lr}
     6d6:	b087      	sub	sp, #28
     6d8:	af00      	add	r7, sp, #0
     6da:	6078      	str	r0, [r7, #4]
     6dc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	681b      	ldr	r3, [r3, #0]
     6e2:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     6e4:	2314      	movs	r3, #20
     6e6:	18fb      	adds	r3, r7, r3
     6e8:	683a      	ldr	r2, [r7, #0]
     6ea:	8852      	ldrh	r2, [r2, #2]
     6ec:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
     6ee:	2312      	movs	r3, #18
     6f0:	18fb      	adds	r3, r7, r3
     6f2:	2200      	movs	r2, #0
     6f4:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6f6:	68fb      	ldr	r3, [r7, #12]
     6f8:	681b      	ldr	r3, [r3, #0]
     6fa:	011b      	lsls	r3, r3, #4
     6fc:	0fdb      	lsrs	r3, r3, #31
     6fe:	b2db      	uxtb	r3, r3
     700:	001a      	movs	r2, r3
     702:	230b      	movs	r3, #11
     704:	18fb      	adds	r3, r7, r3
     706:	1e51      	subs	r1, r2, #1
     708:	418a      	sbcs	r2, r1
     70a:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     70c:	683b      	ldr	r3, [r7, #0]
     70e:	7a5b      	ldrb	r3, [r3, #9]
     710:	2b00      	cmp	r3, #0
     712:	d006      	beq.n	722 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     714:	683b      	ldr	r3, [r7, #0]
     716:	7a9a      	ldrb	r2, [r3, #10]
     718:	687b      	ldr	r3, [r7, #4]
     71a:	0011      	movs	r1, r2
     71c:	0018      	movs	r0, r3
     71e:	4b85      	ldr	r3, [pc, #532]	; (934 <_i2c_master_read_packet+0x260>)
     720:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     722:	68fb      	ldr	r3, [r7, #12]
     724:	685b      	ldr	r3, [r3, #4]
     726:	4a84      	ldr	r2, [pc, #528]	; (938 <_i2c_master_read_packet+0x264>)
     728:	401a      	ands	r2, r3
     72a:	68fb      	ldr	r3, [r7, #12]
     72c:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     72e:	683b      	ldr	r3, [r7, #0]
     730:	7a1b      	ldrb	r3, [r3, #8]
     732:	2b00      	cmp	r3, #0
     734:	d042      	beq.n	7bc <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     736:	683b      	ldr	r3, [r7, #0]
     738:	881b      	ldrh	r3, [r3, #0]
     73a:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     73c:	683b      	ldr	r3, [r7, #0]
     73e:	7a5b      	ldrb	r3, [r3, #9]
     740:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     742:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     744:	001a      	movs	r2, r3
     746:	2380      	movs	r3, #128	; 0x80
     748:	021b      	lsls	r3, r3, #8
     74a:	431a      	orrs	r2, r3
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     74c:	68fb      	ldr	r3, [r7, #12]
     74e:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     750:	2317      	movs	r3, #23
     752:	18fc      	adds	r4, r7, r3
     754:	687b      	ldr	r3, [r7, #4]
     756:	0018      	movs	r0, r3
     758:	4b78      	ldr	r3, [pc, #480]	; (93c <_i2c_master_read_packet+0x268>)
     75a:	4798      	blx	r3
     75c:	0003      	movs	r3, r0
     75e:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     760:	68fb      	ldr	r3, [r7, #12]
     762:	685b      	ldr	r3, [r3, #4]
     764:	4a74      	ldr	r2, [pc, #464]	; (938 <_i2c_master_read_packet+0x264>)
     766:	401a      	ands	r2, r3
     768:	68fb      	ldr	r3, [r7, #12]
     76a:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     76c:	2317      	movs	r3, #23
     76e:	18fb      	adds	r3, r7, r3
     770:	781b      	ldrb	r3, [r3, #0]
     772:	2b00      	cmp	r3, #0
     774:	d107      	bne.n	786 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
     776:	2317      	movs	r3, #23
     778:	18fc      	adds	r4, r7, r3
     77a:	687b      	ldr	r3, [r7, #4]
     77c:	0018      	movs	r0, r3
     77e:	4b70      	ldr	r3, [pc, #448]	; (940 <_i2c_master_read_packet+0x26c>)
     780:	4798      	blx	r3
     782:	0003      	movs	r3, r0
     784:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
     786:	2317      	movs	r3, #23
     788:	18fb      	adds	r3, r7, r3
     78a:	781b      	ldrb	r3, [r3, #0]
     78c:	2b00      	cmp	r3, #0
     78e:	d111      	bne.n	7b4 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     790:	683b      	ldr	r3, [r7, #0]
     792:	881b      	ldrh	r3, [r3, #0]
     794:	0a1b      	lsrs	r3, r3, #8
     796:	b29b      	uxth	r3, r3
     798:	2278      	movs	r2, #120	; 0x78
     79a:	4313      	orrs	r3, r2
     79c:	b29b      	uxth	r3, r3
     79e:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     7a0:	683b      	ldr	r3, [r7, #0]
     7a2:	7a5b      	ldrb	r3, [r3, #9]
     7a4:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     7a6:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     7a8:	2201      	movs	r2, #1
     7aa:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     7ac:	001a      	movs	r2, r3
     7ae:	68fb      	ldr	r3, [r7, #12]
     7b0:	625a      	str	r2, [r3, #36]	; 0x24
     7b2:	e00f      	b.n	7d4 <_i2c_master_read_packet+0x100>
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
     7b4:	2317      	movs	r3, #23
     7b6:	18fb      	adds	r3, r7, r3
     7b8:	781b      	ldrb	r3, [r3, #0]
     7ba:	e0b6      	b.n	92a <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     7bc:	683b      	ldr	r3, [r7, #0]
     7be:	881b      	ldrh	r3, [r3, #0]
     7c0:	005b      	lsls	r3, r3, #1
     7c2:	2201      	movs	r2, #1
     7c4:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     7c6:	683b      	ldr	r3, [r7, #0]
     7c8:	7a5b      	ldrb	r3, [r3, #9]
     7ca:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     7cc:	4313      	orrs	r3, r2
     7ce:	001a      	movs	r2, r3
     7d0:	68fb      	ldr	r3, [r7, #12]
     7d2:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     7d4:	2317      	movs	r3, #23
     7d6:	18fc      	adds	r4, r7, r3
     7d8:	687b      	ldr	r3, [r7, #4]
     7da:	0018      	movs	r0, r3
     7dc:	4b57      	ldr	r3, [pc, #348]	; (93c <_i2c_master_read_packet+0x268>)
     7de:	4798      	blx	r3
     7e0:	0003      	movs	r3, r0
     7e2:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     7e4:	230b      	movs	r3, #11
     7e6:	18fb      	adds	r3, r7, r3
     7e8:	781b      	ldrb	r3, [r3, #0]
     7ea:	2b00      	cmp	r3, #0
     7ec:	d00b      	beq.n	806 <_i2c_master_read_packet+0x132>
     7ee:	683b      	ldr	r3, [r7, #0]
     7f0:	885b      	ldrh	r3, [r3, #2]
     7f2:	2b01      	cmp	r3, #1
     7f4:	d107      	bne.n	806 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     7f6:	68fb      	ldr	r3, [r7, #12]
     7f8:	685b      	ldr	r3, [r3, #4]
     7fa:	2280      	movs	r2, #128	; 0x80
     7fc:	02d2      	lsls	r2, r2, #11
     7fe:	431a      	orrs	r2, r3
     800:	68fb      	ldr	r3, [r7, #12]
     802:	605a      	str	r2, [r3, #4]
     804:	e005      	b.n	812 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     806:	68fb      	ldr	r3, [r7, #12]
     808:	685b      	ldr	r3, [r3, #4]
     80a:	4a4b      	ldr	r2, [pc, #300]	; (938 <_i2c_master_read_packet+0x264>)
     80c:	401a      	ands	r2, r3
     80e:	68fb      	ldr	r3, [r7, #12]
     810:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     812:	2317      	movs	r3, #23
     814:	18fb      	adds	r3, r7, r3
     816:	781b      	ldrb	r3, [r3, #0]
     818:	2b00      	cmp	r3, #0
     81a:	d107      	bne.n	82c <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
     81c:	2317      	movs	r3, #23
     81e:	18fc      	adds	r4, r7, r3
     820:	687b      	ldr	r3, [r7, #4]
     822:	0018      	movs	r0, r3
     824:	4b46      	ldr	r3, [pc, #280]	; (940 <_i2c_master_read_packet+0x26c>)
     826:	4798      	blx	r3
     828:	0003      	movs	r3, r0
     82a:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     82c:	2317      	movs	r3, #23
     82e:	18fb      	adds	r3, r7, r3
     830:	781b      	ldrb	r3, [r3, #0]
     832:	2b00      	cmp	r3, #0
     834:	d000      	beq.n	838 <_i2c_master_read_packet+0x164>
     836:	e075      	b.n	924 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
     838:	e04b      	b.n	8d2 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     83a:	68fb      	ldr	r3, [r7, #12]
     83c:	8b5b      	ldrh	r3, [r3, #26]
     83e:	b29b      	uxth	r3, r3
     840:	001a      	movs	r2, r3
     842:	2320      	movs	r3, #32
     844:	4013      	ands	r3, r2
     846:	d101      	bne.n	84c <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
     848:	2341      	movs	r3, #65	; 0x41
     84a:	e06e      	b.n	92a <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     84c:	687b      	ldr	r3, [r7, #4]
     84e:	7adb      	ldrb	r3, [r3, #11]
     850:	2b00      	cmp	r3, #0
     852:	d01e      	beq.n	892 <_i2c_master_read_packet+0x1be>
     854:	230b      	movs	r3, #11
     856:	18fb      	adds	r3, r7, r3
     858:	781b      	ldrb	r3, [r3, #0]
     85a:	2201      	movs	r2, #1
     85c:	4053      	eors	r3, r2
     85e:	b2db      	uxtb	r3, r3
     860:	2b00      	cmp	r3, #0
     862:	d004      	beq.n	86e <_i2c_master_read_packet+0x19a>
     864:	2314      	movs	r3, #20
     866:	18fb      	adds	r3, r7, r3
     868:	881b      	ldrh	r3, [r3, #0]
     86a:	2b00      	cmp	r3, #0
     86c:	d009      	beq.n	882 <_i2c_master_read_packet+0x1ae>
     86e:	230b      	movs	r3, #11
     870:	18fb      	adds	r3, r7, r3
     872:	781b      	ldrb	r3, [r3, #0]
     874:	2b00      	cmp	r3, #0
     876:	d00c      	beq.n	892 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     878:	2314      	movs	r3, #20
     87a:	18fb      	adds	r3, r7, r3
     87c:	881b      	ldrh	r3, [r3, #0]
     87e:	2b01      	cmp	r3, #1
     880:	d107      	bne.n	892 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     882:	68fb      	ldr	r3, [r7, #12]
     884:	685b      	ldr	r3, [r3, #4]
     886:	2280      	movs	r2, #128	; 0x80
     888:	02d2      	lsls	r2, r2, #11
     88a:	431a      	orrs	r2, r3
     88c:	68fb      	ldr	r3, [r7, #12]
     88e:	605a      	str	r2, [r3, #4]
     890:	e01a      	b.n	8c8 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
     892:	687b      	ldr	r3, [r7, #4]
     894:	0018      	movs	r0, r3
     896:	4b2b      	ldr	r3, [pc, #172]	; (944 <_i2c_master_read_packet+0x270>)
     898:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     89a:	683b      	ldr	r3, [r7, #0]
     89c:	685a      	ldr	r2, [r3, #4]
     89e:	2312      	movs	r3, #18
     8a0:	18fb      	adds	r3, r7, r3
     8a2:	881b      	ldrh	r3, [r3, #0]
     8a4:	2112      	movs	r1, #18
     8a6:	1879      	adds	r1, r7, r1
     8a8:	1c58      	adds	r0, r3, #1
     8aa:	8008      	strh	r0, [r1, #0]
     8ac:	18d3      	adds	r3, r2, r3
     8ae:	68fa      	ldr	r2, [r7, #12]
     8b0:	2128      	movs	r1, #40	; 0x28
     8b2:	5c52      	ldrb	r2, [r2, r1]
     8b4:	b2d2      	uxtb	r2, r2
     8b6:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     8b8:	2317      	movs	r3, #23
     8ba:	18fc      	adds	r4, r7, r3
     8bc:	687b      	ldr	r3, [r7, #4]
     8be:	0018      	movs	r0, r3
     8c0:	4b1e      	ldr	r3, [pc, #120]	; (93c <_i2c_master_read_packet+0x268>)
     8c2:	4798      	blx	r3
     8c4:	0003      	movs	r3, r0
     8c6:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     8c8:	2317      	movs	r3, #23
     8ca:	18fb      	adds	r3, r7, r3
     8cc:	781b      	ldrb	r3, [r3, #0]
     8ce:	2b00      	cmp	r3, #0
     8d0:	d109      	bne.n	8e6 <_i2c_master_read_packet+0x212>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     8d2:	2314      	movs	r3, #20
     8d4:	18fb      	adds	r3, r7, r3
     8d6:	881b      	ldrh	r3, [r3, #0]
     8d8:	2214      	movs	r2, #20
     8da:	18ba      	adds	r2, r7, r2
     8dc:	1e59      	subs	r1, r3, #1
     8de:	8011      	strh	r1, [r2, #0]
     8e0:	2b00      	cmp	r3, #0
     8e2:	d1aa      	bne.n	83a <_i2c_master_read_packet+0x166>
     8e4:	e000      	b.n	8e8 <_i2c_master_read_packet+0x214>
				tmp_status = _i2c_master_wait_for_bus(module);
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
     8e6:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
     8e8:	687b      	ldr	r3, [r7, #4]
     8ea:	7a9b      	ldrb	r3, [r3, #10]
     8ec:	2b00      	cmp	r3, #0
     8ee:	d00a      	beq.n	906 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	0018      	movs	r0, r3
     8f4:	4b13      	ldr	r3, [pc, #76]	; (944 <_i2c_master_read_packet+0x270>)
     8f6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8f8:	68fb      	ldr	r3, [r7, #12]
     8fa:	685b      	ldr	r3, [r3, #4]
     8fc:	22c0      	movs	r2, #192	; 0xc0
     8fe:	0292      	lsls	r2, r2, #10
     900:	431a      	orrs	r2, r3
     902:	68fb      	ldr	r3, [r7, #12]
     904:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     906:	687b      	ldr	r3, [r7, #4]
     908:	0018      	movs	r0, r3
     90a:	4b0e      	ldr	r3, [pc, #56]	; (944 <_i2c_master_read_packet+0x270>)
     90c:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     90e:	683b      	ldr	r3, [r7, #0]
     910:	685a      	ldr	r2, [r3, #4]
     912:	2312      	movs	r3, #18
     914:	18fb      	adds	r3, r7, r3
     916:	881b      	ldrh	r3, [r3, #0]
     918:	18d3      	adds	r3, r2, r3
     91a:	68fa      	ldr	r2, [r7, #12]
     91c:	2128      	movs	r1, #40	; 0x28
     91e:	5c52      	ldrb	r2, [r2, r1]
     920:	b2d2      	uxtb	r2, r2
     922:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
     924:	2317      	movs	r3, #23
     926:	18fb      	adds	r3, r7, r3
     928:	781b      	ldrb	r3, [r3, #0]
}
     92a:	0018      	movs	r0, r3
     92c:	46bd      	mov	sp, r7
     92e:	b007      	add	sp, #28
     930:	bd90      	pop	{r4, r7, pc}
     932:	46c0      	nop			; (mov r8, r8)
     934:	00000681 	.word	0x00000681
     938:	fffbffff 	.word	0xfffbffff
     93c:	00000621 	.word	0x00000621
     940:	000005c1 	.word	0x000005c1
     944:	0000059d 	.word	0x0000059d

00000948 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     948:	b580      	push	{r7, lr}
     94a:	b082      	sub	sp, #8
     94c:	af00      	add	r7, sp, #0
     94e:	6078      	str	r0, [r7, #4]
     950:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     952:	687b      	ldr	r3, [r7, #4]
     954:	2201      	movs	r2, #1
     956:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     958:	687b      	ldr	r3, [r7, #4]
     95a:	2201      	movs	r2, #1
     95c:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
     95e:	683a      	ldr	r2, [r7, #0]
     960:	687b      	ldr	r3, [r7, #4]
     962:	0011      	movs	r1, r2
     964:	0018      	movs	r0, r3
     966:	4b03      	ldr	r3, [pc, #12]	; (974 <i2c_master_read_packet_wait+0x2c>)
     968:	4798      	blx	r3
     96a:	0003      	movs	r3, r0
}
     96c:	0018      	movs	r0, r3
     96e:	46bd      	mov	sp, r7
     970:	b002      	add	sp, #8
     972:	bd80      	pop	{r7, pc}
     974:	000006d5 	.word	0x000006d5

00000978 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     978:	b590      	push	{r4, r7, lr}
     97a:	b087      	sub	sp, #28
     97c:	af00      	add	r7, sp, #0
     97e:	6078      	str	r0, [r7, #4]
     980:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     982:	687b      	ldr	r3, [r7, #4]
     984:	681b      	ldr	r3, [r3, #0]
     986:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     988:	2314      	movs	r3, #20
     98a:	18fb      	adds	r3, r7, r3
     98c:	683a      	ldr	r2, [r7, #0]
     98e:	8852      	ldrh	r2, [r2, #2]
     990:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
     992:	687b      	ldr	r3, [r7, #4]
     994:	0018      	movs	r0, r3
     996:	4b51      	ldr	r3, [pc, #324]	; (adc <_i2c_master_write_packet+0x164>)
     998:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     99a:	683b      	ldr	r3, [r7, #0]
     99c:	7a5b      	ldrb	r3, [r3, #9]
     99e:	2b00      	cmp	r3, #0
     9a0:	d006      	beq.n	9b0 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     9a2:	683b      	ldr	r3, [r7, #0]
     9a4:	7a9a      	ldrb	r2, [r3, #10]
     9a6:	687b      	ldr	r3, [r7, #4]
     9a8:	0011      	movs	r1, r2
     9aa:	0018      	movs	r0, r3
     9ac:	4b4c      	ldr	r3, [pc, #304]	; (ae0 <_i2c_master_write_packet+0x168>)
     9ae:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     9b0:	68fb      	ldr	r3, [r7, #12]
     9b2:	685b      	ldr	r3, [r3, #4]
     9b4:	4a4b      	ldr	r2, [pc, #300]	; (ae4 <_i2c_master_write_packet+0x16c>)
     9b6:	401a      	ands	r2, r3
     9b8:	68fb      	ldr	r3, [r7, #12]
     9ba:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     9bc:	683b      	ldr	r3, [r7, #0]
     9be:	7a1b      	ldrb	r3, [r3, #8]
     9c0:	2b00      	cmp	r3, #0
     9c2:	d00d      	beq.n	9e0 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9c4:	683b      	ldr	r3, [r7, #0]
     9c6:	881b      	ldrh	r3, [r3, #0]
     9c8:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9ca:	683b      	ldr	r3, [r7, #0]
     9cc:	7a5b      	ldrb	r3, [r3, #9]
     9ce:	039b      	lsls	r3, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9d0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9d2:	001a      	movs	r2, r3
     9d4:	2380      	movs	r3, #128	; 0x80
     9d6:	021b      	lsls	r3, r3, #8
     9d8:	431a      	orrs	r2, r3
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9da:	68fb      	ldr	r3, [r7, #12]
     9dc:	625a      	str	r2, [r3, #36]	; 0x24
     9de:	e009      	b.n	9f4 <_i2c_master_write_packet+0x7c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9e0:	683b      	ldr	r3, [r7, #0]
     9e2:	881b      	ldrh	r3, [r3, #0]
     9e4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     9e6:	683b      	ldr	r3, [r7, #0]
     9e8:	7a5b      	ldrb	r3, [r3, #9]
     9ea:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9ec:	4313      	orrs	r3, r2
     9ee:	001a      	movs	r2, r3
     9f0:	68fb      	ldr	r3, [r7, #12]
     9f2:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     9f4:	2317      	movs	r3, #23
     9f6:	18fc      	adds	r4, r7, r3
     9f8:	687b      	ldr	r3, [r7, #4]
     9fa:	0018      	movs	r0, r3
     9fc:	4b3a      	ldr	r3, [pc, #232]	; (ae8 <_i2c_master_write_packet+0x170>)
     9fe:	4798      	blx	r3
     a00:	0003      	movs	r3, r0
     a02:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     a04:	2317      	movs	r3, #23
     a06:	18fb      	adds	r3, r7, r3
     a08:	781b      	ldrb	r3, [r3, #0]
     a0a:	2b00      	cmp	r3, #0
     a0c:	d107      	bne.n	a1e <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
     a0e:	2317      	movs	r3, #23
     a10:	18fc      	adds	r4, r7, r3
     a12:	687b      	ldr	r3, [r7, #4]
     a14:	0018      	movs	r0, r3
     a16:	4b35      	ldr	r3, [pc, #212]	; (aec <_i2c_master_write_packet+0x174>)
     a18:	4798      	blx	r3
     a1a:	0003      	movs	r3, r0
     a1c:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     a1e:	2317      	movs	r3, #23
     a20:	18fb      	adds	r3, r7, r3
     a22:	781b      	ldrb	r3, [r3, #0]
     a24:	2b00      	cmp	r3, #0
     a26:	d152      	bne.n	ace <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
     a28:	2312      	movs	r3, #18
     a2a:	18fb      	adds	r3, r7, r3
     a2c:	2200      	movs	r2, #0
     a2e:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
     a30:	e033      	b.n	a9a <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     a32:	68fb      	ldr	r3, [r7, #12]
     a34:	8b5b      	ldrh	r3, [r3, #26]
     a36:	b29b      	uxth	r3, r3
     a38:	001a      	movs	r2, r3
     a3a:	2320      	movs	r3, #32
     a3c:	4013      	ands	r3, r2
     a3e:	d101      	bne.n	a44 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
     a40:	2341      	movs	r3, #65	; 0x41
     a42:	e047      	b.n	ad4 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     a44:	687b      	ldr	r3, [r7, #4]
     a46:	0018      	movs	r0, r3
     a48:	4b24      	ldr	r3, [pc, #144]	; (adc <_i2c_master_write_packet+0x164>)
     a4a:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     a4c:	683b      	ldr	r3, [r7, #0]
     a4e:	685a      	ldr	r2, [r3, #4]
     a50:	2312      	movs	r3, #18
     a52:	18fb      	adds	r3, r7, r3
     a54:	881b      	ldrh	r3, [r3, #0]
     a56:	2112      	movs	r1, #18
     a58:	1879      	adds	r1, r7, r1
     a5a:	1c58      	adds	r0, r3, #1
     a5c:	8008      	strh	r0, [r1, #0]
     a5e:	18d3      	adds	r3, r2, r3
     a60:	7819      	ldrb	r1, [r3, #0]
     a62:	68fb      	ldr	r3, [r7, #12]
     a64:	2228      	movs	r2, #40	; 0x28
     a66:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     a68:	2317      	movs	r3, #23
     a6a:	18fc      	adds	r4, r7, r3
     a6c:	687b      	ldr	r3, [r7, #4]
     a6e:	0018      	movs	r0, r3
     a70:	4b1d      	ldr	r3, [pc, #116]	; (ae8 <_i2c_master_write_packet+0x170>)
     a72:	4798      	blx	r3
     a74:	0003      	movs	r3, r0
     a76:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     a78:	2317      	movs	r3, #23
     a7a:	18fb      	adds	r3, r7, r3
     a7c:	781b      	ldrb	r3, [r3, #0]
     a7e:	2b00      	cmp	r3, #0
     a80:	d115      	bne.n	aae <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     a82:	68fb      	ldr	r3, [r7, #12]
     a84:	8b5b      	ldrh	r3, [r3, #26]
     a86:	b29b      	uxth	r3, r3
     a88:	001a      	movs	r2, r3
     a8a:	2304      	movs	r3, #4
     a8c:	4013      	ands	r3, r2
     a8e:	d004      	beq.n	a9a <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     a90:	2317      	movs	r3, #23
     a92:	18fb      	adds	r3, r7, r3
     a94:	221e      	movs	r2, #30
     a96:	701a      	strb	r2, [r3, #0]
				break;
     a98:	e00a      	b.n	ab0 <_i2c_master_write_packet+0x138>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     a9a:	2314      	movs	r3, #20
     a9c:	18fb      	adds	r3, r7, r3
     a9e:	881b      	ldrh	r3, [r3, #0]
     aa0:	2214      	movs	r2, #20
     aa2:	18ba      	adds	r2, r7, r2
     aa4:	1e59      	subs	r1, r3, #1
     aa6:	8011      	strh	r1, [r2, #0]
     aa8:	2b00      	cmp	r3, #0
     aaa:	d1c2      	bne.n	a32 <_i2c_master_write_packet+0xba>
     aac:	e000      	b.n	ab0 <_i2c_master_write_packet+0x138>
			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
     aae:	46c0      	nop			; (mov r8, r8)
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
     ab0:	687b      	ldr	r3, [r7, #4]
     ab2:	7a9b      	ldrb	r3, [r3, #10]
     ab4:	2b00      	cmp	r3, #0
     ab6:	d00a      	beq.n	ace <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     ab8:	687b      	ldr	r3, [r7, #4]
     aba:	0018      	movs	r0, r3
     abc:	4b07      	ldr	r3, [pc, #28]	; (adc <_i2c_master_write_packet+0x164>)
     abe:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ac0:	68fb      	ldr	r3, [r7, #12]
     ac2:	685b      	ldr	r3, [r3, #4]
     ac4:	22c0      	movs	r2, #192	; 0xc0
     ac6:	0292      	lsls	r2, r2, #10
     ac8:	431a      	orrs	r2, r3
     aca:	68fb      	ldr	r3, [r7, #12]
     acc:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
     ace:	2317      	movs	r3, #23
     ad0:	18fb      	adds	r3, r7, r3
     ad2:	781b      	ldrb	r3, [r3, #0]
}
     ad4:	0018      	movs	r0, r3
     ad6:	46bd      	mov	sp, r7
     ad8:	b007      	add	sp, #28
     ada:	bd90      	pop	{r4, r7, pc}
     adc:	0000059d 	.word	0x0000059d
     ae0:	00000681 	.word	0x00000681
     ae4:	fffbffff 	.word	0xfffbffff
     ae8:	00000621 	.word	0x00000621
     aec:	000005c1 	.word	0x000005c1

00000af0 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     af0:	b580      	push	{r7, lr}
     af2:	b082      	sub	sp, #8
     af4:	af00      	add	r7, sp, #0
     af6:	6078      	str	r0, [r7, #4]
     af8:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     afa:	687b      	ldr	r3, [r7, #4]
     afc:	2201      	movs	r2, #1
     afe:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     b00:	687b      	ldr	r3, [r7, #4]
     b02:	2201      	movs	r2, #1
     b04:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
     b06:	683a      	ldr	r2, [r7, #0]
     b08:	687b      	ldr	r3, [r7, #4]
     b0a:	0011      	movs	r1, r2
     b0c:	0018      	movs	r0, r3
     b0e:	4b03      	ldr	r3, [pc, #12]	; (b1c <i2c_master_write_packet_wait+0x2c>)
     b10:	4798      	blx	r3
     b12:	0003      	movs	r3, r0
}
     b14:	0018      	movs	r0, r3
     b16:	46bd      	mov	sp, r7
     b18:	b002      	add	sp, #8
     b1a:	bd80      	pop	{r7, pc}
     b1c:	00000979 	.word	0x00000979

00000b20 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     b20:	b580      	push	{r7, lr}
     b22:	b082      	sub	sp, #8
     b24:	af00      	add	r7, sp, #0
     b26:	0002      	movs	r2, r0
     b28:	6039      	str	r1, [r7, #0]
     b2a:	1dfb      	adds	r3, r7, #7
     b2c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     b2e:	1dfb      	adds	r3, r7, #7
     b30:	781b      	ldrb	r3, [r3, #0]
     b32:	2b01      	cmp	r3, #1
     b34:	d00a      	beq.n	b4c <system_apb_clock_set_mask+0x2c>
     b36:	2b02      	cmp	r3, #2
     b38:	d00f      	beq.n	b5a <system_apb_clock_set_mask+0x3a>
     b3a:	2b00      	cmp	r3, #0
     b3c:	d114      	bne.n	b68 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     b3e:	4b0e      	ldr	r3, [pc, #56]	; (b78 <system_apb_clock_set_mask+0x58>)
     b40:	4a0d      	ldr	r2, [pc, #52]	; (b78 <system_apb_clock_set_mask+0x58>)
     b42:	6991      	ldr	r1, [r2, #24]
     b44:	683a      	ldr	r2, [r7, #0]
     b46:	430a      	orrs	r2, r1
     b48:	619a      	str	r2, [r3, #24]
			break;
     b4a:	e00f      	b.n	b6c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     b4c:	4b0a      	ldr	r3, [pc, #40]	; (b78 <system_apb_clock_set_mask+0x58>)
     b4e:	4a0a      	ldr	r2, [pc, #40]	; (b78 <system_apb_clock_set_mask+0x58>)
     b50:	69d1      	ldr	r1, [r2, #28]
     b52:	683a      	ldr	r2, [r7, #0]
     b54:	430a      	orrs	r2, r1
     b56:	61da      	str	r2, [r3, #28]
			break;
     b58:	e008      	b.n	b6c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     b5a:	4b07      	ldr	r3, [pc, #28]	; (b78 <system_apb_clock_set_mask+0x58>)
     b5c:	4a06      	ldr	r2, [pc, #24]	; (b78 <system_apb_clock_set_mask+0x58>)
     b5e:	6a11      	ldr	r1, [r2, #32]
     b60:	683a      	ldr	r2, [r7, #0]
     b62:	430a      	orrs	r2, r1
     b64:	621a      	str	r2, [r3, #32]
			break;
     b66:	e001      	b.n	b6c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     b68:	2317      	movs	r3, #23
     b6a:	e000      	b.n	b6e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     b6c:	2300      	movs	r3, #0
}
     b6e:	0018      	movs	r0, r3
     b70:	46bd      	mov	sp, r7
     b72:	b002      	add	sp, #8
     b74:	bd80      	pop	{r7, pc}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	40000400 	.word	0x40000400

00000b7c <wdt_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool wdt_is_syncing(void)
{
     b7c:	b580      	push	{r7, lr}
     b7e:	b082      	sub	sp, #8
     b80:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
     b82:	4b07      	ldr	r3, [pc, #28]	; (ba0 <wdt_is_syncing+0x24>)
     b84:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
     b86:	687b      	ldr	r3, [r7, #4]
     b88:	79db      	ldrb	r3, [r3, #7]
     b8a:	b2db      	uxtb	r3, r3
     b8c:	b25b      	sxtb	r3, r3
     b8e:	2b00      	cmp	r3, #0
     b90:	da01      	bge.n	b96 <wdt_is_syncing+0x1a>
#endif
		return true;
     b92:	2301      	movs	r3, #1
     b94:	e000      	b.n	b98 <wdt_is_syncing+0x1c>
	}

	return false;
     b96:	2300      	movs	r3, #0
}
     b98:	0018      	movs	r0, r3
     b9a:	46bd      	mov	sp, r7
     b9c:	b002      	add	sp, #8
     b9e:	bd80      	pop	{r7, pc}
     ba0:	40001000 	.word	0x40001000

00000ba4 <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
     ba4:	b580      	push	{r7, lr}
     ba6:	b082      	sub	sp, #8
     ba8:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
     baa:	4b07      	ldr	r3, [pc, #28]	; (bc8 <wdt_is_locked+0x24>)
     bac:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
     bae:	687b      	ldr	r3, [r7, #4]
     bb0:	781b      	ldrb	r3, [r3, #0]
     bb2:	b2db      	uxtb	r3, r3
     bb4:	001a      	movs	r2, r3
     bb6:	2380      	movs	r3, #128	; 0x80
     bb8:	4013      	ands	r3, r2
     bba:	1e5a      	subs	r2, r3, #1
     bbc:	4193      	sbcs	r3, r2
     bbe:	b2db      	uxtb	r3, r3
#endif
}
     bc0:	0018      	movs	r0, r3
     bc2:	46bd      	mov	sp, r7
     bc4:	b002      	add	sp, #8
     bc6:	bd80      	pop	{r7, pc}
     bc8:	40001000 	.word	0x40001000

00000bcc <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
     bcc:	b580      	push	{r7, lr}
     bce:	b086      	sub	sp, #24
     bd0:	af00      	add	r7, sp, #0
     bd2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
     bd4:	4b54      	ldr	r3, [pc, #336]	; (d28 <wdt_set_config+0x15c>)
     bd6:	613b      	str	r3, [r7, #16]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);
     bd8:	2110      	movs	r1, #16
     bda:	2000      	movs	r0, #0
     bdc:	4b53      	ldr	r3, [pc, #332]	; (d2c <wdt_set_config+0x160>)
     bde:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
     be0:	4b53      	ldr	r3, [pc, #332]	; (d30 <wdt_set_config+0x164>)
     be2:	4798      	blx	r3
     be4:	1e03      	subs	r3, r0, #0
     be6:	d001      	beq.n	bec <wdt_set_config+0x20>
		return STATUS_ERR_IO;
     be8:	2310      	movs	r3, #16
     bea:	e098      	b.n	d1e <wdt_set_config+0x152>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
     bec:	687b      	ldr	r3, [r7, #4]
     bee:	78db      	ldrb	r3, [r3, #3]
     bf0:	2b00      	cmp	r3, #0
     bf2:	d101      	bne.n	bf8 <wdt_set_config+0x2c>
		return STATUS_ERR_INVALID_ARG;
     bf4:	2317      	movs	r3, #23
     bf6:	e092      	b.n	d1e <wdt_set_config+0x152>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
     bf8:	687b      	ldr	r3, [r7, #4]
     bfa:	78da      	ldrb	r2, [r3, #3]
     bfc:	687b      	ldr	r3, [r7, #4]
     bfe:	791b      	ldrb	r3, [r3, #4]
     c00:	429a      	cmp	r2, r3
     c02:	d305      	bcc.n	c10 <wdt_set_config+0x44>
			(config->timeout_period < config->early_warning_period)) {
     c04:	687b      	ldr	r3, [r7, #4]
     c06:	78da      	ldrb	r2, [r3, #3]
     c08:	687b      	ldr	r3, [r7, #4]
     c0a:	795b      	ldrb	r3, [r3, #5]
		return STATUS_ERR_INVALID_ARG;
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
     c0c:	429a      	cmp	r2, r3
     c0e:	d201      	bcs.n	c14 <wdt_set_config+0x48>
			(config->timeout_period < config->early_warning_period)) {
		return STATUS_ERR_INVALID_ARG;
     c10:	2317      	movs	r3, #23
     c12:	e084      	b.n	d1e <wdt_set_config+0x152>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
     c14:	693b      	ldr	r3, [r7, #16]
     c16:	781b      	ldrb	r3, [r3, #0]
     c18:	b2db      	uxtb	r3, r3
     c1a:	2202      	movs	r2, #2
     c1c:	4393      	bics	r3, r2
     c1e:	b2da      	uxtb	r2, r3
     c20:	693b      	ldr	r3, [r7, #16]
     c22:	701a      	strb	r2, [r3, #0]

	while (wdt_is_syncing()) {
     c24:	46c0      	nop			; (mov r8, r8)
     c26:	4b43      	ldr	r3, [pc, #268]	; (d34 <wdt_set_config+0x168>)
     c28:	4798      	blx	r3
     c2a:	1e03      	subs	r3, r0, #0
     c2c:	d1fb      	bne.n	c26 <wdt_set_config+0x5a>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
     c2e:	687b      	ldr	r3, [r7, #4]
     c30:	785b      	ldrb	r3, [r3, #1]
     c32:	2201      	movs	r2, #1
     c34:	4053      	eors	r3, r2
     c36:	b2db      	uxtb	r3, r3
     c38:	2b00      	cmp	r3, #0
     c3a:	d001      	beq.n	c40 <wdt_set_config+0x74>
		return STATUS_OK;
     c3c:	2300      	movs	r3, #0
     c3e:	e06e      	b.n	d1e <wdt_set_config+0x152>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
     c40:	687b      	ldr	r3, [r7, #4]
     c42:	789a      	ldrb	r2, [r3, #2]
     c44:	230c      	movs	r3, #12
     c46:	18fb      	adds	r3, r7, r3
     c48:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
     c4a:	230c      	movs	r3, #12
     c4c:	18fb      	adds	r3, r7, r3
     c4e:	0019      	movs	r1, r3
     c50:	2003      	movs	r0, #3
     c52:	4b39      	ldr	r3, [pc, #228]	; (d38 <wdt_set_config+0x16c>)
     c54:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
     c56:	2003      	movs	r0, #3
     c58:	4b38      	ldr	r3, [pc, #224]	; (d3c <wdt_set_config+0x170>)
     c5a:	4798      	blx	r3
	if (config->always_on) {
     c5c:	687b      	ldr	r3, [r7, #4]
     c5e:	781b      	ldrb	r3, [r3, #0]
     c60:	2b00      	cmp	r3, #0
     c62:	d002      	beq.n	c6a <wdt_set_config+0x9e>
		system_gclk_chan_lock(WDT_GCLK_ID);
     c64:	2003      	movs	r0, #3
     c66:	4b36      	ldr	r3, [pc, #216]	; (d40 <wdt_set_config+0x174>)
     c68:	4798      	blx	r3
	}

	uint32_t new_config = 0;
     c6a:	2300      	movs	r3, #0
     c6c:	617b      	str	r3, [r7, #20]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
     c6e:	687b      	ldr	r3, [r7, #4]
     c70:	78db      	ldrb	r3, [r3, #3]
     c72:	3b01      	subs	r3, #1
     c74:	001a      	movs	r2, r3
     c76:	697b      	ldr	r3, [r7, #20]
     c78:	4313      	orrs	r3, r2
     c7a:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	791b      	ldrb	r3, [r3, #4]
     c80:	2b00      	cmp	r3, #0
     c82:	d010      	beq.n	ca6 <wdt_set_config+0xda>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
     c84:	693b      	ldr	r3, [r7, #16]
     c86:	781b      	ldrb	r3, [r3, #0]
     c88:	b2db      	uxtb	r3, r3
     c8a:	2204      	movs	r2, #4
     c8c:	4313      	orrs	r3, r2
     c8e:	b2da      	uxtb	r2, r3
     c90:	693b      	ldr	r3, [r7, #16]
     c92:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
     c94:	687b      	ldr	r3, [r7, #4]
     c96:	791b      	ldrb	r3, [r3, #4]
     c98:	3b01      	subs	r3, #1
     c9a:	011b      	lsls	r3, r3, #4
     c9c:	001a      	movs	r2, r3
     c9e:	697b      	ldr	r3, [r7, #20]
     ca0:	4313      	orrs	r3, r2
     ca2:	617b      	str	r3, [r7, #20]
     ca4:	e007      	b.n	cb6 <wdt_set_config+0xea>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
     ca6:	693b      	ldr	r3, [r7, #16]
     ca8:	781b      	ldrb	r3, [r3, #0]
     caa:	b2db      	uxtb	r3, r3
     cac:	2204      	movs	r2, #4
     cae:	4393      	bics	r3, r2
     cb0:	b2da      	uxtb	r2, r3
     cb2:	693b      	ldr	r3, [r7, #16]
     cb4:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	4b1e      	ldr	r3, [pc, #120]	; (d34 <wdt_set_config+0x168>)
     cba:	4798      	blx	r3
     cbc:	1e03      	subs	r3, r0, #0
     cbe:	d1fb      	bne.n	cb8 <wdt_set_config+0xec>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
     cc0:	697b      	ldr	r3, [r7, #20]
     cc2:	b2da      	uxtb	r2, r3
     cc4:	693b      	ldr	r3, [r7, #16]
     cc6:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
     cc8:	687b      	ldr	r3, [r7, #4]
     cca:	795b      	ldrb	r3, [r3, #5]
     ccc:	2b00      	cmp	r3, #0
     cce:	d00a      	beq.n	ce6 <wdt_set_config+0x11a>
		while (wdt_is_syncing()) {
     cd0:	46c0      	nop			; (mov r8, r8)
     cd2:	4b18      	ldr	r3, [pc, #96]	; (d34 <wdt_set_config+0x168>)
     cd4:	4798      	blx	r3
     cd6:	1e03      	subs	r3, r0, #0
     cd8:	d1fb      	bne.n	cd2 <wdt_set_config+0x106>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
     cda:	687b      	ldr	r3, [r7, #4]
     cdc:	795b      	ldrb	r3, [r3, #5]
     cde:	3b01      	subs	r3, #1
     ce0:	b2da      	uxtb	r2, r3
     ce2:	693b      	ldr	r3, [r7, #16]
     ce4:	709a      	strb	r2, [r3, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
     ce6:	687b      	ldr	r3, [r7, #4]
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	2b00      	cmp	r3, #0
     cec:	d009      	beq.n	d02 <wdt_set_config+0x136>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
     cee:	693b      	ldr	r3, [r7, #16]
     cf0:	781b      	ldrb	r3, [r3, #0]
     cf2:	b2db      	uxtb	r3, r3
     cf4:	2280      	movs	r2, #128	; 0x80
     cf6:	4252      	negs	r2, r2
     cf8:	4313      	orrs	r3, r2
     cfa:	b2da      	uxtb	r2, r3
     cfc:	693b      	ldr	r3, [r7, #16]
     cfe:	701a      	strb	r2, [r3, #0]
     d00:	e007      	b.n	d12 <wdt_set_config+0x146>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
     d02:	693b      	ldr	r3, [r7, #16]
     d04:	781b      	ldrb	r3, [r3, #0]
     d06:	b2db      	uxtb	r3, r3
     d08:	2202      	movs	r2, #2
     d0a:	4313      	orrs	r3, r2
     d0c:	b2da      	uxtb	r2, r3
     d0e:	693b      	ldr	r3, [r7, #16]
     d10:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
     d12:	46c0      	nop			; (mov r8, r8)
     d14:	4b07      	ldr	r3, [pc, #28]	; (d34 <wdt_set_config+0x168>)
     d16:	4798      	blx	r3
     d18:	1e03      	subs	r3, r0, #0
     d1a:	d1fb      	bne.n	d14 <wdt_set_config+0x148>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
     d1c:	2300      	movs	r3, #0
}
     d1e:	0018      	movs	r0, r3
     d20:	46bd      	mov	sp, r7
     d22:	b006      	add	sp, #24
     d24:	bd80      	pop	{r7, pc}
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	40001000 	.word	0x40001000
     d2c:	00000b21 	.word	0x00000b21
     d30:	00000ba5 	.word	0x00000ba5
     d34:	00000b7d 	.word	0x00000b7d
     d38:	000049a1 	.word	0x000049a1
     d3c:	000049e5 	.word	0x000049e5
     d40:	00004ac5 	.word	0x00004ac5

00000d44 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
     d44:	b580      	push	{r7, lr}
     d46:	b082      	sub	sp, #8
     d48:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
     d4a:	4b04      	ldr	r3, [pc, #16]	; (d5c <wdt_clear_early_warning+0x18>)
     d4c:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
     d4e:	687b      	ldr	r3, [r7, #4]
     d50:	2201      	movs	r2, #1
     d52:	719a      	strb	r2, [r3, #6]
}
     d54:	46c0      	nop			; (mov r8, r8)
     d56:	46bd      	mov	sp, r7
     d58:	b002      	add	sp, #8
     d5a:	bd80      	pop	{r7, pc}
     d5c:	40001000 	.word	0x40001000

00000d60 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
     d60:	b580      	push	{r7, lr}
     d62:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
     d64:	4b05      	ldr	r3, [pc, #20]	; (d7c <WDT_Handler+0x1c>)
     d66:	4798      	blx	r3

	if (wdt_early_warning_callback) {
     d68:	4b05      	ldr	r3, [pc, #20]	; (d80 <WDT_Handler+0x20>)
     d6a:	681b      	ldr	r3, [r3, #0]
     d6c:	2b00      	cmp	r3, #0
     d6e:	d002      	beq.n	d76 <WDT_Handler+0x16>
		wdt_early_warning_callback();
     d70:	4b03      	ldr	r3, [pc, #12]	; (d80 <WDT_Handler+0x20>)
     d72:	681b      	ldr	r3, [r3, #0]
     d74:	4798      	blx	r3
	}
}
     d76:	46c0      	nop			; (mov r8, r8)
     d78:	46bd      	mov	sp, r7
     d7a:	bd80      	pop	{r7, pc}
     d7c:	00000d45 	.word	0x00000d45
     d80:	2000031c 	.word	0x2000031c

00000d84 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     d84:	b580      	push	{r7, lr}
     d86:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     d88:	4b04      	ldr	r3, [pc, #16]	; (d9c <system_interrupt_enable_global+0x18>)
     d8a:	2201      	movs	r2, #1
     d8c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     d8e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     d92:	b662      	cpsie	i
}
     d94:	46c0      	nop			; (mov r8, r8)
     d96:	46bd      	mov	sp, r7
     d98:	bd80      	pop	{r7, pc}
     d9a:	46c0      	nop			; (mov r8, r8)
     d9c:	20000218 	.word	0x20000218

00000da0 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
     da0:	b580      	push	{r7, lr}
     da2:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     da4:	b672      	cpsid	i
     da6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     daa:	4b03      	ldr	r3, [pc, #12]	; (db8 <system_interrupt_disable_global+0x18>)
     dac:	2200      	movs	r2, #0
     dae:	701a      	strb	r2, [r3, #0]
}
     db0:	46c0      	nop			; (mov r8, r8)
     db2:	46bd      	mov	sp, r7
     db4:	bd80      	pop	{r7, pc}
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	20000218 	.word	0x20000218

00000dbc <ble_uart_write>:
	
	reset_buffers();
}

void ble_uart_write(char buffer[])
{
     dbc:	b580      	push	{r7, lr}
     dbe:	b084      	sub	sp, #16
     dc0:	af00      	add	r7, sp, #0
     dc2:	6078      	str	r0, [r7, #4]
	system_interrupt_disable_global();
     dc4:	4b10      	ldr	r3, [pc, #64]	; (e08 <ble_uart_write+0x4c>)
     dc6:	4798      	blx	r3
	uint32_t i = 0;
     dc8:	2300      	movs	r3, #0
     dca:	60fb      	str	r3, [r7, #12]
	while(buffer[i] != '\0')
     dcc:	e00f      	b.n	dee <ble_uart_write+0x32>
	{
		if(BLE_UART_SERCOM->USART.INTFLAG.bit.DRE == 1)
     dce:	4b0f      	ldr	r3, [pc, #60]	; (e0c <ble_uart_write+0x50>)
     dd0:	7e1b      	ldrb	r3, [r3, #24]
     dd2:	07db      	lsls	r3, r3, #31
     dd4:	0fdb      	lsrs	r3, r3, #31
     dd6:	b2db      	uxtb	r3, r3
     dd8:	2b01      	cmp	r3, #1
     dda:	d108      	bne.n	dee <ble_uart_write+0x32>
		{
			BLE_UART_SERCOM->USART.DATA.reg = (uint16_t)buffer[i++];
     ddc:	490b      	ldr	r1, [pc, #44]	; (e0c <ble_uart_write+0x50>)
     dde:	68fb      	ldr	r3, [r7, #12]
     de0:	1c5a      	adds	r2, r3, #1
     de2:	60fa      	str	r2, [r7, #12]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	18d3      	adds	r3, r2, r3
     de8:	781b      	ldrb	r3, [r3, #0]
     dea:	b29b      	uxth	r3, r3
     dec:	850b      	strh	r3, [r1, #40]	; 0x28

void ble_uart_write(char buffer[])
{
	system_interrupt_disable_global();
	uint32_t i = 0;
	while(buffer[i] != '\0')
     dee:	687a      	ldr	r2, [r7, #4]
     df0:	68fb      	ldr	r3, [r7, #12]
     df2:	18d3      	adds	r3, r2, r3
     df4:	781b      	ldrb	r3, [r3, #0]
     df6:	2b00      	cmp	r3, #0
     df8:	d1e9      	bne.n	dce <ble_uart_write+0x12>
		if(BLE_UART_SERCOM->USART.INTFLAG.bit.DRE == 1)
		{
			BLE_UART_SERCOM->USART.DATA.reg = (uint16_t)buffer[i++];
		}
	}
	system_interrupt_enable_global();
     dfa:	4b05      	ldr	r3, [pc, #20]	; (e10 <ble_uart_write+0x54>)
     dfc:	4798      	blx	r3
}
     dfe:	46c0      	nop			; (mov r8, r8)
     e00:	46bd      	mov	sp, r7
     e02:	b004      	add	sp, #16
     e04:	bd80      	pop	{r7, pc}
     e06:	46c0      	nop			; (mov r8, r8)
     e08:	00000da1 	.word	0x00000da1
     e0c:	42001000 	.word	0x42001000
     e10:	00000d85 	.word	0x00000d85

00000e14 <SERCOM2_Handler>:
	BLE_UART_SERCOM->USART.DATA.reg = data;
}


void SERCOM2_Handler()
{
     e14:	b580      	push	{r7, lr}
     e16:	af00      	add	r7, sp, #0
	if (BLE_UART_SERCOM->USART.INTFLAG.bit.RXC)
     e18:	4b13      	ldr	r3, [pc, #76]	; (e68 <SERCOM2_Handler+0x54>)
     e1a:	7e1b      	ldrb	r3, [r3, #24]
     e1c:	075b      	lsls	r3, r3, #29
     e1e:	0fdb      	lsrs	r3, r3, #31
     e20:	b2db      	uxtb	r3, r3
     e22:	2b00      	cmp	r3, #0
     e24:	d01c      	beq.n	e60 <SERCOM2_Handler+0x4c>
	{
		//while (BLE_UART_SERCOM->USART.INTFLAG.bit.DRE != 0 )
		//{
			// Got a character
			if (buff_count > sizeof(rx_buffer_array)-1)
     e26:	4b11      	ldr	r3, [pc, #68]	; (e6c <SERCOM2_Handler+0x58>)
     e28:	681b      	ldr	r3, [r3, #0]
     e2a:	1e1a      	subs	r2, r3, #0
     e2c:	4b10      	ldr	r3, [pc, #64]	; (e70 <SERCOM2_Handler+0x5c>)
     e2e:	429a      	cmp	r2, r3
     e30:	d90b      	bls.n	e4a <SERCOM2_Handler+0x36>
			{
				buff_count = 0;
     e32:	4b0e      	ldr	r3, [pc, #56]	; (e6c <SERCOM2_Handler+0x58>)
     e34:	2200      	movs	r2, #0
     e36:	601a      	str	r2, [r3, #0]
				rx_buffer_array[buff_count] = (uint8_t) BLE_UART_SERCOM->USART.DATA.reg;
     e38:	4b0c      	ldr	r3, [pc, #48]	; (e6c <SERCOM2_Handler+0x58>)
     e3a:	681b      	ldr	r3, [r3, #0]
     e3c:	4a0a      	ldr	r2, [pc, #40]	; (e68 <SERCOM2_Handler+0x54>)
     e3e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
     e40:	b292      	uxth	r2, r2
     e42:	b2d1      	uxtb	r1, r2
     e44:	4a0b      	ldr	r2, [pc, #44]	; (e74 <SERCOM2_Handler+0x60>)
     e46:	54d1      	strb	r1, [r2, r3]
				rx_buffer_array[buff_count++] = (uint8_t)BLE_UART_SERCOM->USART.DATA.reg;
			}
		//}

	}
}
     e48:	e00a      	b.n	e60 <SERCOM2_Handler+0x4c>
				buff_count = 0;
				rx_buffer_array[buff_count] = (uint8_t) BLE_UART_SERCOM->USART.DATA.reg;
			}
			else
			{
				rx_buffer_array[buff_count++] = (uint8_t)BLE_UART_SERCOM->USART.DATA.reg;
     e4a:	4b08      	ldr	r3, [pc, #32]	; (e6c <SERCOM2_Handler+0x58>)
     e4c:	681b      	ldr	r3, [r3, #0]
     e4e:	1c59      	adds	r1, r3, #1
     e50:	4a06      	ldr	r2, [pc, #24]	; (e6c <SERCOM2_Handler+0x58>)
     e52:	6011      	str	r1, [r2, #0]
     e54:	4a04      	ldr	r2, [pc, #16]	; (e68 <SERCOM2_Handler+0x54>)
     e56:	8d12      	ldrh	r2, [r2, #40]	; 0x28
     e58:	b292      	uxth	r2, r2
     e5a:	b2d1      	uxtb	r1, r2
     e5c:	4a05      	ldr	r2, [pc, #20]	; (e74 <SERCOM2_Handler+0x60>)
     e5e:	54d1      	strb	r1, [r2, r3]
			}
		//}

	}
}
     e60:	46c0      	nop			; (mov r8, r8)
     e62:	46bd      	mov	sp, r7
     e64:	bd80      	pop	{r7, pc}
     e66:	46c0      	nop			; (mov r8, r8)
     e68:	42001000 	.word	0x42001000
     e6c:	200002a0 	.word	0x200002a0
     e70:	000003ff 	.word	0x000003ff
     e74:	20000350 	.word	0x20000350

00000e78 <reset_buffers>:

void reset_buffers()
{
     e78:	b580      	push	{r7, lr}
     e7a:	b082      	sub	sp, #8
     e7c:	af00      	add	r7, sp, #0
	for (uint32_t k=0;k<sizeof(rx_buffer_array);k++)
     e7e:	2300      	movs	r3, #0
     e80:	607b      	str	r3, [r7, #4]
     e82:	e007      	b.n	e94 <reset_buffers+0x1c>
	{
		rx_buffer_array[k] = 0;
     e84:	4a09      	ldr	r2, [pc, #36]	; (eac <reset_buffers+0x34>)
     e86:	687b      	ldr	r3, [r7, #4]
     e88:	18d3      	adds	r3, r2, r3
     e8a:	2200      	movs	r2, #0
     e8c:	701a      	strb	r2, [r3, #0]
	}
}

void reset_buffers()
{
	for (uint32_t k=0;k<sizeof(rx_buffer_array);k++)
     e8e:	687b      	ldr	r3, [r7, #4]
     e90:	3301      	adds	r3, #1
     e92:	607b      	str	r3, [r7, #4]
     e94:	687b      	ldr	r3, [r7, #4]
     e96:	4a06      	ldr	r2, [pc, #24]	; (eb0 <reset_buffers+0x38>)
     e98:	4293      	cmp	r3, r2
     e9a:	d9f3      	bls.n	e84 <reset_buffers+0xc>
	{
		rx_buffer_array[k] = 0;
	}
	buff_count = 0;
     e9c:	4b05      	ldr	r3, [pc, #20]	; (eb4 <reset_buffers+0x3c>)
     e9e:	2200      	movs	r2, #0
     ea0:	601a      	str	r2, [r3, #0]
}
     ea2:	46c0      	nop			; (mov r8, r8)
     ea4:	46bd      	mov	sp, r7
     ea6:	b002      	add	sp, #8
     ea8:	bd80      	pop	{r7, pc}
     eaa:	46c0      	nop			; (mov r8, r8)
     eac:	20000350 	.word	0x20000350
     eb0:	000003ff 	.word	0x000003ff
     eb4:	200002a0 	.word	0x200002a0

00000eb8 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     eb8:	b580      	push	{r7, lr}
     eba:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     ebc:	4b04      	ldr	r3, [pc, #16]	; (ed0 <system_interrupt_enable_global+0x18>)
     ebe:	2201      	movs	r2, #1
     ec0:	701a      	strb	r2, [r3, #0]
     ec2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     ec6:	b662      	cpsie	i
}
     ec8:	46c0      	nop			; (mov r8, r8)
     eca:	46bd      	mov	sp, r7
     ecc:	bd80      	pop	{r7, pc}
     ece:	46c0      	nop			; (mov r8, r8)
     ed0:	20000218 	.word	0x20000218

00000ed4 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
     ed4:	b580      	push	{r7, lr}
     ed6:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     ed8:	b672      	cpsid	i
     eda:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     ede:	4b03      	ldr	r3, [pc, #12]	; (eec <system_interrupt_disable_global+0x18>)
     ee0:	2200      	movs	r2, #0
     ee2:	701a      	strb	r2, [r3, #0]
}
     ee4:	46c0      	nop			; (mov r8, r8)
     ee6:	46bd      	mov	sp, r7
     ee8:	bd80      	pop	{r7, pc}
     eea:	46c0      	nop			; (mov r8, r8)
     eec:	20000218 	.word	0x20000218

00000ef0 <data_handler>:

char bufbuf[1024];
int buf_count = 0; 

void data_handler(char buffer[])
{
     ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ef2:	b099      	sub	sp, #100	; 0x64
     ef4:	af00      	add	r7, sp, #0
     ef6:	60f8      	str	r0, [r7, #12]
	int buf_s = strlen(buffer);
     ef8:	68fb      	ldr	r3, [r7, #12]
     efa:	0018      	movs	r0, r3
     efc:	4be8      	ldr	r3, [pc, #928]	; (12a0 <data_handler+0x3b0>)
     efe:	4798      	blx	r3
     f00:	0003      	movs	r3, r0
     f02:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (strncmp(buffer,"\r\n\rAdafruit",7) == 0)
     f04:	49e7      	ldr	r1, [pc, #924]	; (12a4 <data_handler+0x3b4>)
     f06:	68fb      	ldr	r3, [r7, #12]
     f08:	2207      	movs	r2, #7
     f0a:	0018      	movs	r0, r3
     f0c:	4be6      	ldr	r3, [pc, #920]	; (12a8 <data_handler+0x3b8>)
     f0e:	4798      	blx	r3
     f10:	1e03      	subs	r3, r0, #0
     f12:	d103      	bne.n	f1c <data_handler+0x2c>
	{
		ble_uart_write("#01\n");
     f14:	4be5      	ldr	r3, [pc, #916]	; (12ac <data_handler+0x3bc>)
     f16:	0018      	movs	r0, r3
     f18:	4be5      	ldr	r3, [pc, #916]	; (12b0 <data_handler+0x3c0>)
     f1a:	4798      	blx	r3
	}
	if (strncmp(buffer,"T00",3) == 0)
     f1c:	49e5      	ldr	r1, [pc, #916]	; (12b4 <data_handler+0x3c4>)
     f1e:	68fb      	ldr	r3, [r7, #12]
     f20:	2203      	movs	r2, #3
     f22:	0018      	movs	r0, r3
     f24:	4be0      	ldr	r3, [pc, #896]	; (12a8 <data_handler+0x3b8>)
     f26:	4798      	blx	r3
     f28:	1e03      	subs	r3, r0, #0
     f2a:	d10c      	bne.n	f46 <data_handler+0x56>
	{
		ble_uart_write("L\n");
     f2c:	4be2      	ldr	r3, [pc, #904]	; (12b8 <data_handler+0x3c8>)
     f2e:	0018      	movs	r0, r3
     f30:	4bdf      	ldr	r3, [pc, #892]	; (12b0 <data_handler+0x3c0>)
     f32:	4798      	blx	r3
		int arg0;
		//ble_uart_write("L\n");
		sscanf(buffer,"T0%d",&arg0);
     f34:	2350      	movs	r3, #80	; 0x50
     f36:	2208      	movs	r2, #8
     f38:	18ba      	adds	r2, r7, r2
     f3a:	18d2      	adds	r2, r2, r3
     f3c:	49df      	ldr	r1, [pc, #892]	; (12bc <data_handler+0x3cc>)
     f3e:	68fb      	ldr	r3, [r7, #12]
     f40:	0018      	movs	r0, r3
     f42:	4bdf      	ldr	r3, [pc, #892]	; (12c0 <data_handler+0x3d0>)
     f44:	4798      	blx	r3
	}
	
	if (strncmp(buffer,test_bob,3) == 0)
     f46:	49df      	ldr	r1, [pc, #892]	; (12c4 <data_handler+0x3d4>)
     f48:	68fb      	ldr	r3, [r7, #12]
     f4a:	2203      	movs	r2, #3
     f4c:	0018      	movs	r0, r3
     f4e:	4bd6      	ldr	r3, [pc, #856]	; (12a8 <data_handler+0x3b8>)
     f50:	4798      	blx	r3
     f52:	1e03      	subs	r3, r0, #0
     f54:	d132      	bne.n	fbc <data_handler+0xcc>
	{
		ble_uart_write("bob was found");
     f56:	4bdc      	ldr	r3, [pc, #880]	; (12c8 <data_handler+0x3d8>)
     f58:	0018      	movs	r0, r3
     f5a:	4bd5      	ldr	r3, [pc, #852]	; (12b0 <data_handler+0x3c0>)
     f5c:	4798      	blx	r3
		
		if (strlen(buffer) > strlen(test_bob))
     f5e:	68fb      	ldr	r3, [r7, #12]
     f60:	0018      	movs	r0, r3
     f62:	4bcf      	ldr	r3, [pc, #828]	; (12a0 <data_handler+0x3b0>)
     f64:	4798      	blx	r3
     f66:	0004      	movs	r4, r0
     f68:	4bd6      	ldr	r3, [pc, #856]	; (12c4 <data_handler+0x3d4>)
     f6a:	0018      	movs	r0, r3
     f6c:	4bcc      	ldr	r3, [pc, #816]	; (12a0 <data_handler+0x3b0>)
     f6e:	4798      	blx	r3
     f70:	0003      	movs	r3, r0
     f72:	429c      	cmp	r4, r3
     f74:	d922      	bls.n	fbc <data_handler+0xcc>
		{
			int arg1;
			sscanf(buffer,"PWM %d",&arg1);
     f76:	234c      	movs	r3, #76	; 0x4c
     f78:	2208      	movs	r2, #8
     f7a:	18ba      	adds	r2, r7, r2
     f7c:	18d2      	adds	r2, r2, r3
     f7e:	49d3      	ldr	r1, [pc, #844]	; (12cc <data_handler+0x3dc>)
     f80:	68fb      	ldr	r3, [r7, #12]
     f82:	0018      	movs	r0, r3
     f84:	4bce      	ldr	r3, [pc, #824]	; (12c0 <data_handler+0x3d0>)
     f86:	4798      	blx	r3
			//arg1 = buffer[4]-'0';
			if (arg1 < 1)
     f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     f8a:	2b00      	cmp	r3, #0
     f8c:	dc01      	bgt.n	f92 <data_handler+0xa2>
			{
				arg1 = 1;
     f8e:	2301      	movs	r3, #1
     f90:	657b      	str	r3, [r7, #84]	; 0x54
			}
			pwm_bob = arg1;
     f92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     f94:	4bce      	ldr	r3, [pc, #824]	; (12d0 <data_handler+0x3e0>)
     f96:	601a      	str	r2, [r3, #0]
			char string_buffer[32];
			sprintf(string_buffer,": %d",arg1);
     f98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     f9a:	49ce      	ldr	r1, [pc, #824]	; (12d4 <data_handler+0x3e4>)
     f9c:	2308      	movs	r3, #8
     f9e:	2008      	movs	r0, #8
     fa0:	4684      	mov	ip, r0
     fa2:	44bc      	add	ip, r7
     fa4:	4463      	add	r3, ip
     fa6:	0018      	movs	r0, r3
     fa8:	4bcb      	ldr	r3, [pc, #812]	; (12d8 <data_handler+0x3e8>)
     faa:	4798      	blx	r3
			ble_uart_write(string_buffer);
     fac:	2308      	movs	r3, #8
     fae:	2208      	movs	r2, #8
     fb0:	4694      	mov	ip, r2
     fb2:	44bc      	add	ip, r7
     fb4:	4463      	add	r3, ip
     fb6:	0018      	movs	r0, r3
     fb8:	4bbd      	ldr	r3, [pc, #756]	; (12b0 <data_handler+0x3c0>)
     fba:	4798      	blx	r3
		}
	}


	if(strncmp(buffer,FLASH_ALL_ON,4) == 0)
     fbc:	49c7      	ldr	r1, [pc, #796]	; (12dc <data_handler+0x3ec>)
     fbe:	68fb      	ldr	r3, [r7, #12]
     fc0:	2204      	movs	r2, #4
     fc2:	0018      	movs	r0, r3
     fc4:	4bb8      	ldr	r3, [pc, #736]	; (12a8 <data_handler+0x3b8>)
     fc6:	4798      	blx	r3
     fc8:	1e03      	subs	r3, r0, #0
     fca:	d000      	beq.n	fce <data_handler+0xde>
     fcc:	e088      	b.n	10e0 <data_handler+0x1f0>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
     fce:	2301      	movs	r3, #1
     fd0:	2200      	movs	r2, #0
     fd2:	2101      	movs	r1, #1
     fd4:	2000      	movs	r0, #0
     fd6:	4cc2      	ldr	r4, [pc, #776]	; (12e0 <data_handler+0x3f0>)
     fd8:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
     fda:	2301      	movs	r3, #1
     fdc:	2200      	movs	r2, #0
     fde:	2102      	movs	r1, #2
     fe0:	2000      	movs	r0, #0
     fe2:	4cbf      	ldr	r4, [pc, #764]	; (12e0 <data_handler+0x3f0>)
     fe4:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
     fe6:	2301      	movs	r3, #1
     fe8:	2200      	movs	r2, #0
     fea:	2103      	movs	r1, #3
     fec:	2000      	movs	r0, #0
     fee:	4cbc      	ldr	r4, [pc, #752]	; (12e0 <data_handler+0x3f0>)
     ff0:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
     ff2:	2301      	movs	r3, #1
     ff4:	2200      	movs	r2, #0
     ff6:	2104      	movs	r1, #4
     ff8:	2000      	movs	r0, #0
     ffa:	4cb9      	ldr	r4, [pc, #740]	; (12e0 <data_handler+0x3f0>)
     ffc:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,true);
     ffe:	2301      	movs	r3, #1
    1000:	2201      	movs	r2, #1
    1002:	2102      	movs	r1, #2
    1004:	2000      	movs	r0, #0
    1006:	4cb6      	ldr	r4, [pc, #728]	; (12e0 <data_handler+0x3f0>)
    1008:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,true);
    100a:	2301      	movs	r3, #1
    100c:	2201      	movs	r2, #1
    100e:	2101      	movs	r1, #1
    1010:	2000      	movs	r0, #0
    1012:	4cb3      	ldr	r4, [pc, #716]	; (12e0 <data_handler+0x3f0>)
    1014:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,true);
    1016:	2301      	movs	r3, #1
    1018:	2202      	movs	r2, #2
    101a:	2102      	movs	r1, #2
    101c:	2000      	movs	r0, #0
    101e:	4cb0      	ldr	r4, [pc, #704]	; (12e0 <data_handler+0x3f0>)
    1020:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,true);
    1022:	2301      	movs	r3, #1
    1024:	2202      	movs	r2, #2
    1026:	2101      	movs	r1, #1
    1028:	2000      	movs	r0, #0
    102a:	4cad      	ldr	r4, [pc, #692]	; (12e0 <data_handler+0x3f0>)
    102c:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,true);
    102e:	2301      	movs	r3, #1
    1030:	2202      	movs	r2, #2
    1032:	2104      	movs	r1, #4
    1034:	2000      	movs	r0, #0
    1036:	4caa      	ldr	r4, [pc, #680]	; (12e0 <data_handler+0x3f0>)
    1038:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,true);
    103a:	2301      	movs	r3, #1
    103c:	2202      	movs	r2, #2
    103e:	2103      	movs	r1, #3
    1040:	2000      	movs	r0, #0
    1042:	4ca7      	ldr	r4, [pc, #668]	; (12e0 <data_handler+0x3f0>)
    1044:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,true);
    1046:	2301      	movs	r3, #1
    1048:	2201      	movs	r2, #1
    104a:	2103      	movs	r1, #3
    104c:	2000      	movs	r0, #0
    104e:	4ca4      	ldr	r4, [pc, #656]	; (12e0 <data_handler+0x3f0>)
    1050:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,true);
    1052:	2301      	movs	r3, #1
    1054:	2201      	movs	r2, #1
    1056:	2104      	movs	r1, #4
    1058:	2000      	movs	r0, #0
    105a:	4ca1      	ldr	r4, [pc, #644]	; (12e0 <data_handler+0x3f0>)
    105c:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,true);
    105e:	2301      	movs	r3, #1
    1060:	2203      	movs	r2, #3
    1062:	2102      	movs	r1, #2
    1064:	2000      	movs	r0, #0
    1066:	4c9e      	ldr	r4, [pc, #632]	; (12e0 <data_handler+0x3f0>)
    1068:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,true);
    106a:	2301      	movs	r3, #1
    106c:	2203      	movs	r2, #3
    106e:	2101      	movs	r1, #1
    1070:	2000      	movs	r0, #0
    1072:	4c9b      	ldr	r4, [pc, #620]	; (12e0 <data_handler+0x3f0>)
    1074:	47a0      	blx	r4
		
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR, SUB_LEFT_PIN,true);
    1076:	2301      	movs	r3, #1
    1078:	2203      	movs	r2, #3
    107a:	2103      	movs	r1, #3
    107c:	2000      	movs	r0, #0
    107e:	4c98      	ldr	r4, [pc, #608]	; (12e0 <data_handler+0x3f0>)
    1080:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR, SUB_RIGHT_PIN,true);
    1082:	2301      	movs	r3, #1
    1084:	2204      	movs	r2, #4
    1086:	2103      	movs	r1, #3
    1088:	2000      	movs	r0, #0
    108a:	4c95      	ldr	r4, [pc, #596]	; (12e0 <data_handler+0x3f0>)
    108c:	47a0      	blx	r4
		
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,true);
    108e:	2301      	movs	r3, #1
    1090:	2204      	movs	r2, #4
    1092:	2101      	movs	r1, #1
    1094:	2000      	movs	r0, #0
    1096:	4c92      	ldr	r4, [pc, #584]	; (12e0 <data_handler+0x3f0>)
    1098:	47a0      	blx	r4
		
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,true);
    109a:	2301      	movs	r3, #1
    109c:	2203      	movs	r2, #3
    109e:	2105      	movs	r1, #5
    10a0:	2000      	movs	r0, #0
    10a2:	4c8f      	ldr	r4, [pc, #572]	; (12e0 <data_handler+0x3f0>)
    10a4:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,true);
    10a6:	2301      	movs	r3, #1
    10a8:	2202      	movs	r2, #2
    10aa:	2105      	movs	r1, #5
    10ac:	2000      	movs	r0, #0
    10ae:	4c8c      	ldr	r4, [pc, #560]	; (12e0 <data_handler+0x3f0>)
    10b0:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,true);
    10b2:	2301      	movs	r3, #1
    10b4:	2204      	movs	r2, #4
    10b6:	2105      	movs	r1, #5
    10b8:	2000      	movs	r0, #0
    10ba:	4c89      	ldr	r4, [pc, #548]	; (12e0 <data_handler+0x3f0>)
    10bc:	47a0      	blx	r4
		
		flash_all = true;
    10be:	4b89      	ldr	r3, [pc, #548]	; (12e4 <data_handler+0x3f4>)
    10c0:	2201      	movs	r2, #1
    10c2:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    10c4:	68fb      	ldr	r3, [r7, #12]
    10c6:	0018      	movs	r0, r3
    10c8:	4b79      	ldr	r3, [pc, #484]	; (12b0 <data_handler+0x3c0>)
    10ca:	4798      	blx	r3
		ble_uart_write(" - ");
    10cc:	4b86      	ldr	r3, [pc, #536]	; (12e8 <data_handler+0x3f8>)
    10ce:	0018      	movs	r0, r3
    10d0:	4b77      	ldr	r3, [pc, #476]	; (12b0 <data_handler+0x3c0>)
    10d2:	4798      	blx	r3
		ble_uart_write("ACK");
    10d4:	4b85      	ldr	r3, [pc, #532]	; (12ec <data_handler+0x3fc>)
    10d6:	0018      	movs	r0, r3
    10d8:	4b75      	ldr	r3, [pc, #468]	; (12b0 <data_handler+0x3c0>)
    10da:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    10dc:	f000 ffc4 	bl	2068 <STACK_SIZE+0x68>
		flash_all = true;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASH_ALL_OFF,4) == 0)
    10e0:	4983      	ldr	r1, [pc, #524]	; (12f0 <data_handler+0x400>)
    10e2:	68fb      	ldr	r3, [r7, #12]
    10e4:	2204      	movs	r2, #4
    10e6:	0018      	movs	r0, r3
    10e8:	4b6f      	ldr	r3, [pc, #444]	; (12a8 <data_handler+0x3b8>)
    10ea:	4798      	blx	r3
    10ec:	1e03      	subs	r3, r0, #0
    10ee:	d000      	beq.n	10f2 <data_handler+0x202>
    10f0:	e088      	b.n	1204 <data_handler+0x314>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    10f2:	2300      	movs	r3, #0
    10f4:	2200      	movs	r2, #0
    10f6:	2101      	movs	r1, #1
    10f8:	2000      	movs	r0, #0
    10fa:	4c79      	ldr	r4, [pc, #484]	; (12e0 <data_handler+0x3f0>)
    10fc:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    10fe:	2300      	movs	r3, #0
    1100:	2200      	movs	r2, #0
    1102:	2102      	movs	r1, #2
    1104:	2000      	movs	r0, #0
    1106:	4c76      	ldr	r4, [pc, #472]	; (12e0 <data_handler+0x3f0>)
    1108:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    110a:	2300      	movs	r3, #0
    110c:	2200      	movs	r2, #0
    110e:	2103      	movs	r1, #3
    1110:	2000      	movs	r0, #0
    1112:	4c73      	ldr	r4, [pc, #460]	; (12e0 <data_handler+0x3f0>)
    1114:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    1116:	2300      	movs	r3, #0
    1118:	2200      	movs	r2, #0
    111a:	2104      	movs	r1, #4
    111c:	2000      	movs	r0, #0
    111e:	4c70      	ldr	r4, [pc, #448]	; (12e0 <data_handler+0x3f0>)
    1120:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,false);
    1122:	2300      	movs	r3, #0
    1124:	2201      	movs	r2, #1
    1126:	2102      	movs	r1, #2
    1128:	2000      	movs	r0, #0
    112a:	4c6d      	ldr	r4, [pc, #436]	; (12e0 <data_handler+0x3f0>)
    112c:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,false);
    112e:	2300      	movs	r3, #0
    1130:	2201      	movs	r2, #1
    1132:	2101      	movs	r1, #1
    1134:	2000      	movs	r0, #0
    1136:	4c6a      	ldr	r4, [pc, #424]	; (12e0 <data_handler+0x3f0>)
    1138:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,false);
    113a:	2300      	movs	r3, #0
    113c:	2202      	movs	r2, #2
    113e:	2102      	movs	r1, #2
    1140:	2000      	movs	r0, #0
    1142:	4c67      	ldr	r4, [pc, #412]	; (12e0 <data_handler+0x3f0>)
    1144:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,false);
    1146:	2300      	movs	r3, #0
    1148:	2202      	movs	r2, #2
    114a:	2101      	movs	r1, #1
    114c:	2000      	movs	r0, #0
    114e:	4c64      	ldr	r4, [pc, #400]	; (12e0 <data_handler+0x3f0>)
    1150:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,false);
    1152:	2300      	movs	r3, #0
    1154:	2202      	movs	r2, #2
    1156:	2104      	movs	r1, #4
    1158:	2000      	movs	r0, #0
    115a:	4c61      	ldr	r4, [pc, #388]	; (12e0 <data_handler+0x3f0>)
    115c:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,false);
    115e:	2300      	movs	r3, #0
    1160:	2202      	movs	r2, #2
    1162:	2103      	movs	r1, #3
    1164:	2000      	movs	r0, #0
    1166:	4c5e      	ldr	r4, [pc, #376]	; (12e0 <data_handler+0x3f0>)
    1168:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,false);
    116a:	2300      	movs	r3, #0
    116c:	2201      	movs	r2, #1
    116e:	2103      	movs	r1, #3
    1170:	2000      	movs	r0, #0
    1172:	4c5b      	ldr	r4, [pc, #364]	; (12e0 <data_handler+0x3f0>)
    1174:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,false);
    1176:	2300      	movs	r3, #0
    1178:	2201      	movs	r2, #1
    117a:	2104      	movs	r1, #4
    117c:	2000      	movs	r0, #0
    117e:	4c58      	ldr	r4, [pc, #352]	; (12e0 <data_handler+0x3f0>)
    1180:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,false);
    1182:	2300      	movs	r3, #0
    1184:	2203      	movs	r2, #3
    1186:	2102      	movs	r1, #2
    1188:	2000      	movs	r0, #0
    118a:	4c55      	ldr	r4, [pc, #340]	; (12e0 <data_handler+0x3f0>)
    118c:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,false);
    118e:	2300      	movs	r3, #0
    1190:	2203      	movs	r2, #3
    1192:	2101      	movs	r1, #1
    1194:	2000      	movs	r0, #0
    1196:	4c52      	ldr	r4, [pc, #328]	; (12e0 <data_handler+0x3f0>)
    1198:	47a0      	blx	r4
		
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR,SUB_LEFT_PIN,false);
    119a:	2300      	movs	r3, #0
    119c:	2203      	movs	r2, #3
    119e:	2103      	movs	r1, #3
    11a0:	2000      	movs	r0, #0
    11a2:	4c4f      	ldr	r4, [pc, #316]	; (12e0 <data_handler+0x3f0>)
    11a4:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR,SUB_RIGHT_PIN,false);
    11a6:	2300      	movs	r3, #0
    11a8:	2204      	movs	r2, #4
    11aa:	2103      	movs	r1, #3
    11ac:	2000      	movs	r0, #0
    11ae:	4c4c      	ldr	r4, [pc, #304]	; (12e0 <data_handler+0x3f0>)
    11b0:	47a0      	blx	r4
		
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,false);
    11b2:	2300      	movs	r3, #0
    11b4:	2204      	movs	r2, #4
    11b6:	2101      	movs	r1, #1
    11b8:	2000      	movs	r0, #0
    11ba:	4c49      	ldr	r4, [pc, #292]	; (12e0 <data_handler+0x3f0>)
    11bc:	47a0      	blx	r4
		
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,false);
    11be:	2300      	movs	r3, #0
    11c0:	2203      	movs	r2, #3
    11c2:	2105      	movs	r1, #5
    11c4:	2000      	movs	r0, #0
    11c6:	4c46      	ldr	r4, [pc, #280]	; (12e0 <data_handler+0x3f0>)
    11c8:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,false);
    11ca:	2300      	movs	r3, #0
    11cc:	2202      	movs	r2, #2
    11ce:	2105      	movs	r1, #5
    11d0:	2000      	movs	r0, #0
    11d2:	4c43      	ldr	r4, [pc, #268]	; (12e0 <data_handler+0x3f0>)
    11d4:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,false);
    11d6:	2300      	movs	r3, #0
    11d8:	2204      	movs	r2, #4
    11da:	2105      	movs	r1, #5
    11dc:	2000      	movs	r0, #0
    11de:	4c40      	ldr	r4, [pc, #256]	; (12e0 <data_handler+0x3f0>)
    11e0:	47a0      	blx	r4
		
		flash_all = false;
    11e2:	4b40      	ldr	r3, [pc, #256]	; (12e4 <data_handler+0x3f4>)
    11e4:	2200      	movs	r2, #0
    11e6:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    11e8:	68fb      	ldr	r3, [r7, #12]
    11ea:	0018      	movs	r0, r3
    11ec:	4b30      	ldr	r3, [pc, #192]	; (12b0 <data_handler+0x3c0>)
    11ee:	4798      	blx	r3
		ble_uart_write(" - ");
    11f0:	4b3d      	ldr	r3, [pc, #244]	; (12e8 <data_handler+0x3f8>)
    11f2:	0018      	movs	r0, r3
    11f4:	4b2e      	ldr	r3, [pc, #184]	; (12b0 <data_handler+0x3c0>)
    11f6:	4798      	blx	r3
		ble_uart_write("ACK");
    11f8:	4b3c      	ldr	r3, [pc, #240]	; (12ec <data_handler+0x3fc>)
    11fa:	0018      	movs	r0, r3
    11fc:	4b2c      	ldr	r3, [pc, #176]	; (12b0 <data_handler+0x3c0>)
    11fe:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1200:	f000 ff32 	bl	2068 <STACK_SIZE+0x68>
		flash_all = false;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,BLINK_ALL_ON,5) == 0)
    1204:	493b      	ldr	r1, [pc, #236]	; (12f4 <data_handler+0x404>)
    1206:	68fb      	ldr	r3, [r7, #12]
    1208:	2205      	movs	r2, #5
    120a:	0018      	movs	r0, r3
    120c:	4b26      	ldr	r3, [pc, #152]	; (12a8 <data_handler+0x3b8>)
    120e:	4798      	blx	r3
    1210:	1e03      	subs	r3, r0, #0
    1212:	d10a      	bne.n	122a <data_handler+0x33a>
	{
		blink_left = true;
    1214:	4b38      	ldr	r3, [pc, #224]	; (12f8 <data_handler+0x408>)
    1216:	2201      	movs	r2, #1
    1218:	701a      	strb	r2, [r3, #0]
		blink_right = true;
    121a:	4b38      	ldr	r3, [pc, #224]	; (12fc <data_handler+0x40c>)
    121c:	2201      	movs	r2, #1
    121e:	701a      	strb	r2, [r3, #0]
		blink_all = true;
    1220:	4b37      	ldr	r3, [pc, #220]	; (1300 <data_handler+0x410>)
    1222:	2201      	movs	r2, #1
    1224:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1226:	f000 ff1f 	bl	2068 <STACK_SIZE+0x68>
	{
		blink_left = true;
		blink_right = true;
		blink_all = true;
	}
	else if(strncmp(buffer,BLINK_ALL_OFF,5) == 0)
    122a:	4936      	ldr	r1, [pc, #216]	; (1304 <data_handler+0x414>)
    122c:	68fb      	ldr	r3, [r7, #12]
    122e:	2205      	movs	r2, #5
    1230:	0018      	movs	r0, r3
    1232:	4b1d      	ldr	r3, [pc, #116]	; (12a8 <data_handler+0x3b8>)
    1234:	4798      	blx	r3
    1236:	1e03      	subs	r3, r0, #0
    1238:	d10a      	bne.n	1250 <data_handler+0x360>
	{
		blink_left = false;
    123a:	4b2f      	ldr	r3, [pc, #188]	; (12f8 <data_handler+0x408>)
    123c:	2200      	movs	r2, #0
    123e:	701a      	strb	r2, [r3, #0]
		blink_right = false;
    1240:	4b2e      	ldr	r3, [pc, #184]	; (12fc <data_handler+0x40c>)
    1242:	2200      	movs	r2, #0
    1244:	701a      	strb	r2, [r3, #0]
		blink_all = false;
    1246:	4b2e      	ldr	r3, [pc, #184]	; (1300 <data_handler+0x410>)
    1248:	2200      	movs	r2, #0
    124a:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    124c:	f000 ff0c 	bl	2068 <STACK_SIZE+0x68>
	{
		blink_left = false;
		blink_right = false;
		blink_all = false;
	}
	else if(strncmp(buffer,BLINK_LEFT_ON,5) == 0)
    1250:	492d      	ldr	r1, [pc, #180]	; (1308 <data_handler+0x418>)
    1252:	68fb      	ldr	r3, [r7, #12]
    1254:	2205      	movs	r2, #5
    1256:	0018      	movs	r0, r3
    1258:	4b13      	ldr	r3, [pc, #76]	; (12a8 <data_handler+0x3b8>)
    125a:	4798      	blx	r3
    125c:	1e03      	subs	r3, r0, #0
    125e:	d104      	bne.n	126a <data_handler+0x37a>
	{
		blink_left = true;
    1260:	4b25      	ldr	r3, [pc, #148]	; (12f8 <data_handler+0x408>)
    1262:	2201      	movs	r2, #1
    1264:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1266:	f000 feff 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,BLINK_LEFT_ON,5) == 0)
	{
		blink_left = true;
	}
	else if(strncmp(buffer,BLINK_LEFT_OFF,5) == 0)
    126a:	4928      	ldr	r1, [pc, #160]	; (130c <data_handler+0x41c>)
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	2205      	movs	r2, #5
    1270:	0018      	movs	r0, r3
    1272:	4b0d      	ldr	r3, [pc, #52]	; (12a8 <data_handler+0x3b8>)
    1274:	4798      	blx	r3
    1276:	1e03      	subs	r3, r0, #0
    1278:	d104      	bne.n	1284 <data_handler+0x394>
	{
		blink_left = false;
    127a:	4b1f      	ldr	r3, [pc, #124]	; (12f8 <data_handler+0x408>)
    127c:	2200      	movs	r2, #0
    127e:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1280:	f000 fef2 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,BLINK_LEFT_OFF,5) == 0)
	{
		blink_left = false;
	}
	else if(strncmp(buffer,BLINK_RIGHT_ON,5) == 0)
    1284:	4922      	ldr	r1, [pc, #136]	; (1310 <data_handler+0x420>)
    1286:	68fb      	ldr	r3, [r7, #12]
    1288:	2205      	movs	r2, #5
    128a:	0018      	movs	r0, r3
    128c:	4b06      	ldr	r3, [pc, #24]	; (12a8 <data_handler+0x3b8>)
    128e:	4798      	blx	r3
    1290:	1e03      	subs	r3, r0, #0
    1292:	d13f      	bne.n	1314 <data_handler+0x424>
	{
		blink_right = true;
    1294:	4b19      	ldr	r3, [pc, #100]	; (12fc <data_handler+0x40c>)
    1296:	2201      	movs	r2, #1
    1298:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    129a:	f000 fee5 	bl	2068 <STACK_SIZE+0x68>
    129e:	46c0      	nop			; (mov r8, r8)
    12a0:	0000592d 	.word	0x0000592d
    12a4:	00006af8 	.word	0x00006af8
    12a8:	0000593b 	.word	0x0000593b
    12ac:	00006b04 	.word	0x00006b04
    12b0:	00000dbd 	.word	0x00000dbd
    12b4:	00006b0c 	.word	0x00006b0c
    12b8:	00006b10 	.word	0x00006b10
    12bc:	00006b14 	.word	0x00006b14
    12c0:	000058d9 	.word	0x000058d9
    12c4:	2000000c 	.word	0x2000000c
    12c8:	00006b1c 	.word	0x00006b1c
    12cc:	00006b2c 	.word	0x00006b2c
    12d0:	20000c04 	.word	0x20000c04
    12d4:	00006b34 	.word	0x00006b34
    12d8:	00005895 	.word	0x00005895
    12dc:	00006b3c 	.word	0x00006b3c
    12e0:	00002c75 	.word	0x00002c75
    12e4:	2000076a 	.word	0x2000076a
    12e8:	00006b44 	.word	0x00006b44
    12ec:	00006b48 	.word	0x00006b48
    12f0:	00006b4c 	.word	0x00006b4c
    12f4:	00006b54 	.word	0x00006b54
    12f8:	20000335 	.word	0x20000335
    12fc:	20000769 	.word	0x20000769
    1300:	20000766 	.word	0x20000766
    1304:	00006b5c 	.word	0x00006b5c
    1308:	00006b64 	.word	0x00006b64
    130c:	00006b6c 	.word	0x00006b6c
    1310:	00006b74 	.word	0x00006b74
	}
	else if(strncmp(buffer,BLINK_RIGHT_ON,5) == 0)
	{
		blink_right = true;
	}
	else if(strncmp(buffer,BLINK_RIGHT_OFF,5) == 0)
    1314:	49c9      	ldr	r1, [pc, #804]	; (163c <data_handler+0x74c>)
    1316:	68fb      	ldr	r3, [r7, #12]
    1318:	2205      	movs	r2, #5
    131a:	0018      	movs	r0, r3
    131c:	4bc8      	ldr	r3, [pc, #800]	; (1640 <data_handler+0x750>)
    131e:	4798      	blx	r3
    1320:	1e03      	subs	r3, r0, #0
    1322:	d104      	bne.n	132e <data_handler+0x43e>
	{
		blink_right = false;
    1324:	4bc7      	ldr	r3, [pc, #796]	; (1644 <data_handler+0x754>)
    1326:	2200      	movs	r2, #0
    1328:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    132a:	f000 fe9d 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,BLINK_RIGHT_OFF,5) == 0)
	{
		blink_right = false;
	}
	else if(strncmp(buffer,HORN_0_ON,6) == 0)
    132e:	49c6      	ldr	r1, [pc, #792]	; (1648 <data_handler+0x758>)
    1330:	68fb      	ldr	r3, [r7, #12]
    1332:	2206      	movs	r2, #6
    1334:	0018      	movs	r0, r3
    1336:	4bc2      	ldr	r3, [pc, #776]	; (1640 <data_handler+0x750>)
    1338:	4798      	blx	r3
    133a:	1e03      	subs	r3, r0, #0
    133c:	d104      	bne.n	1348 <data_handler+0x458>
	{
		horn0 = true;
    133e:	4bc3      	ldr	r3, [pc, #780]	; (164c <data_handler+0x75c>)
    1340:	2201      	movs	r2, #1
    1342:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1344:	f000 fe90 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,HORN_0_ON,6) == 0)
	{
		horn0 = true;
	}
	else if(strncmp(buffer,HORN_0_OFF,6) == 0)
    1348:	49c1      	ldr	r1, [pc, #772]	; (1650 <data_handler+0x760>)
    134a:	68fb      	ldr	r3, [r7, #12]
    134c:	2206      	movs	r2, #6
    134e:	0018      	movs	r0, r3
    1350:	4bbb      	ldr	r3, [pc, #748]	; (1640 <data_handler+0x750>)
    1352:	4798      	blx	r3
    1354:	1e03      	subs	r3, r0, #0
    1356:	d104      	bne.n	1362 <data_handler+0x472>
	{
		horn0 = false;
    1358:	4bbc      	ldr	r3, [pc, #752]	; (164c <data_handler+0x75c>)
    135a:	2200      	movs	r2, #0
    135c:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    135e:	f000 fe83 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,HORN_0_OFF,6) == 0)
	{
		horn0 = false;
	}
	else if(strncmp(buffer,HORN_1_ON,6) == 0)
    1362:	49bc      	ldr	r1, [pc, #752]	; (1654 <data_handler+0x764>)
    1364:	68fb      	ldr	r3, [r7, #12]
    1366:	2206      	movs	r2, #6
    1368:	0018      	movs	r0, r3
    136a:	4bb5      	ldr	r3, [pc, #724]	; (1640 <data_handler+0x750>)
    136c:	4798      	blx	r3
    136e:	1e03      	subs	r3, r0, #0
    1370:	d104      	bne.n	137c <data_handler+0x48c>
	{
		horn1 = true;
    1372:	4bb9      	ldr	r3, [pc, #740]	; (1658 <data_handler+0x768>)
    1374:	2201      	movs	r2, #1
    1376:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1378:	f000 fe76 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,HORN_1_ON,6) == 0)
	{
		horn1 = true;
	}
	else if(strncmp(buffer,HORN_1_OFF,6) == 0)
    137c:	49b7      	ldr	r1, [pc, #732]	; (165c <data_handler+0x76c>)
    137e:	68fb      	ldr	r3, [r7, #12]
    1380:	2206      	movs	r2, #6
    1382:	0018      	movs	r0, r3
    1384:	4bae      	ldr	r3, [pc, #696]	; (1640 <data_handler+0x750>)
    1386:	4798      	blx	r3
    1388:	1e03      	subs	r3, r0, #0
    138a:	d104      	bne.n	1396 <data_handler+0x4a6>
	{
		horn1 = false;
    138c:	4bb2      	ldr	r3, [pc, #712]	; (1658 <data_handler+0x768>)
    138e:	2200      	movs	r2, #0
    1390:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1392:	f000 fe69 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,HORN_1_OFF,6) == 0)
	{
		horn1 = false;
	}
	else if(strncmp(buffer,HORN_2_ON,6) == 0)
    1396:	49b2      	ldr	r1, [pc, #712]	; (1660 <data_handler+0x770>)
    1398:	68fb      	ldr	r3, [r7, #12]
    139a:	2206      	movs	r2, #6
    139c:	0018      	movs	r0, r3
    139e:	4ba8      	ldr	r3, [pc, #672]	; (1640 <data_handler+0x750>)
    13a0:	4798      	blx	r3
    13a2:	1e03      	subs	r3, r0, #0
    13a4:	d104      	bne.n	13b0 <data_handler+0x4c0>
	{
		horn2 = true;
    13a6:	4baf      	ldr	r3, [pc, #700]	; (1664 <data_handler+0x774>)
    13a8:	2201      	movs	r2, #1
    13aa:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    13ac:	f000 fe5c 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,HORN_2_ON,6) == 0)
	{
		horn2 = true;
	}
	else if(strncmp(buffer,HORN_2_OFF,6) == 0)
    13b0:	49ad      	ldr	r1, [pc, #692]	; (1668 <data_handler+0x778>)
    13b2:	68fb      	ldr	r3, [r7, #12]
    13b4:	2206      	movs	r2, #6
    13b6:	0018      	movs	r0, r3
    13b8:	4ba1      	ldr	r3, [pc, #644]	; (1640 <data_handler+0x750>)
    13ba:	4798      	blx	r3
    13bc:	1e03      	subs	r3, r0, #0
    13be:	d104      	bne.n	13ca <data_handler+0x4da>
	{
		horn2 = false;
    13c0:	4ba8      	ldr	r3, [pc, #672]	; (1664 <data_handler+0x774>)
    13c2:	2200      	movs	r2, #0
    13c4:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    13c6:	f000 fe4f 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,HORN_2_OFF,6) == 0)
	{
		horn2 = false;
	}
	else if(strncmp(buffer,HORN_3_ON,6) == 0)
    13ca:	49a8      	ldr	r1, [pc, #672]	; (166c <data_handler+0x77c>)
    13cc:	68fb      	ldr	r3, [r7, #12]
    13ce:	2206      	movs	r2, #6
    13d0:	0018      	movs	r0, r3
    13d2:	4b9b      	ldr	r3, [pc, #620]	; (1640 <data_handler+0x750>)
    13d4:	4798      	blx	r3
    13d6:	1e03      	subs	r3, r0, #0
    13d8:	d104      	bne.n	13e4 <data_handler+0x4f4>
	{
		horn3 = true;
    13da:	4ba5      	ldr	r3, [pc, #660]	; (1670 <data_handler+0x780>)
    13dc:	2201      	movs	r2, #1
    13de:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    13e0:	f000 fe42 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,HORN_3_ON,6) == 0)
	{
		horn3 = true;
	}
	else if(strncmp(buffer,HORN_3_OFF,6) == 0)
    13e4:	49a3      	ldr	r1, [pc, #652]	; (1674 <data_handler+0x784>)
    13e6:	68fb      	ldr	r3, [r7, #12]
    13e8:	2206      	movs	r2, #6
    13ea:	0018      	movs	r0, r3
    13ec:	4b94      	ldr	r3, [pc, #592]	; (1640 <data_handler+0x750>)
    13ee:	4798      	blx	r3
    13f0:	1e03      	subs	r3, r0, #0
    13f2:	d104      	bne.n	13fe <data_handler+0x50e>
	{
		horn3 = false;
    13f4:	4b9e      	ldr	r3, [pc, #632]	; (1670 <data_handler+0x780>)
    13f6:	2200      	movs	r2, #0
    13f8:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    13fa:	f000 fe35 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,HORN_3_OFF,6) == 0)
	{
		horn3 = false;
	}
	else if(strncmp(buffer,SOUND_0_ON,6) == 0)
    13fe:	499e      	ldr	r1, [pc, #632]	; (1678 <data_handler+0x788>)
    1400:	68fb      	ldr	r3, [r7, #12]
    1402:	2206      	movs	r2, #6
    1404:	0018      	movs	r0, r3
    1406:	4b8e      	ldr	r3, [pc, #568]	; (1640 <data_handler+0x750>)
    1408:	4798      	blx	r3
    140a:	1e03      	subs	r3, r0, #0
    140c:	d104      	bne.n	1418 <data_handler+0x528>
	{
		press_sb_btn_once(SB_PIN_BTN00);
    140e:	200b      	movs	r0, #11
    1410:	4b9a      	ldr	r3, [pc, #616]	; (167c <data_handler+0x78c>)
    1412:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1414:	f000 fe28 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_0_ON,6) == 0)
	{
		press_sb_btn_once(SB_PIN_BTN00);
	}
	else if(strncmp(buffer,SOUND_0_OFF,6) == 0)
    1418:	4999      	ldr	r1, [pc, #612]	; (1680 <data_handler+0x790>)
    141a:	68fb      	ldr	r3, [r7, #12]
    141c:	2206      	movs	r2, #6
    141e:	0018      	movs	r0, r3
    1420:	4b87      	ldr	r3, [pc, #540]	; (1640 <data_handler+0x750>)
    1422:	4798      	blx	r3
    1424:	1e03      	subs	r3, r0, #0
    1426:	d104      	bne.n	1432 <data_handler+0x542>
	{
		release_sb_btn(SB_PIN_BTN00);
    1428:	200b      	movs	r0, #11
    142a:	4b96      	ldr	r3, [pc, #600]	; (1684 <data_handler+0x794>)
    142c:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    142e:	f000 fe1b 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_0_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN00);
	}
	else if(strncmp(buffer,SOUND_1_ON,6) == 0)
    1432:	4995      	ldr	r1, [pc, #596]	; (1688 <data_handler+0x798>)
    1434:	68fb      	ldr	r3, [r7, #12]
    1436:	2206      	movs	r2, #6
    1438:	0018      	movs	r0, r3
    143a:	4b81      	ldr	r3, [pc, #516]	; (1640 <data_handler+0x750>)
    143c:	4798      	blx	r3
    143e:	1e03      	subs	r3, r0, #0
    1440:	d104      	bne.n	144c <data_handler+0x55c>
	{
		press_sb_btn_once(SB_PIN_BTN01);
    1442:	200c      	movs	r0, #12
    1444:	4b8d      	ldr	r3, [pc, #564]	; (167c <data_handler+0x78c>)
    1446:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1448:	f000 fe0e 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_1_ON,6) == 0)
	{
		press_sb_btn_once(SB_PIN_BTN01);
	}
	else if(strncmp(buffer,SOUND_1_OFF,6) == 0)
    144c:	498f      	ldr	r1, [pc, #572]	; (168c <data_handler+0x79c>)
    144e:	68fb      	ldr	r3, [r7, #12]
    1450:	2206      	movs	r2, #6
    1452:	0018      	movs	r0, r3
    1454:	4b7a      	ldr	r3, [pc, #488]	; (1640 <data_handler+0x750>)
    1456:	4798      	blx	r3
    1458:	1e03      	subs	r3, r0, #0
    145a:	d104      	bne.n	1466 <data_handler+0x576>
	{
		release_sb_btn(SB_PIN_BTN01);
    145c:	200c      	movs	r0, #12
    145e:	4b89      	ldr	r3, [pc, #548]	; (1684 <data_handler+0x794>)
    1460:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1462:	f000 fe01 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_1_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN01);
	}
	else if(strncmp(buffer,SOUND_2_ON,6) == 0)
    1466:	498a      	ldr	r1, [pc, #552]	; (1690 <data_handler+0x7a0>)
    1468:	68fb      	ldr	r3, [r7, #12]
    146a:	2206      	movs	r2, #6
    146c:	0018      	movs	r0, r3
    146e:	4b74      	ldr	r3, [pc, #464]	; (1640 <data_handler+0x750>)
    1470:	4798      	blx	r3
    1472:	1e03      	subs	r3, r0, #0
    1474:	d104      	bne.n	1480 <data_handler+0x590>
	{
		press_sb_btn_once(SB_PIN_BTN02);
    1476:	200d      	movs	r0, #13
    1478:	4b80      	ldr	r3, [pc, #512]	; (167c <data_handler+0x78c>)
    147a:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    147c:	f000 fdf4 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_2_ON,6) == 0)
	{
		press_sb_btn_once(SB_PIN_BTN02);
	}
	else if(strncmp(buffer,SOUND_2_OFF,6) == 0)
    1480:	4984      	ldr	r1, [pc, #528]	; (1694 <data_handler+0x7a4>)
    1482:	68fb      	ldr	r3, [r7, #12]
    1484:	2206      	movs	r2, #6
    1486:	0018      	movs	r0, r3
    1488:	4b6d      	ldr	r3, [pc, #436]	; (1640 <data_handler+0x750>)
    148a:	4798      	blx	r3
    148c:	1e03      	subs	r3, r0, #0
    148e:	d104      	bne.n	149a <data_handler+0x5aa>
	{
		release_sb_btn(SB_PIN_BTN02);
    1490:	200d      	movs	r0, #13
    1492:	4b7c      	ldr	r3, [pc, #496]	; (1684 <data_handler+0x794>)
    1494:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1496:	f000 fde7 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_2_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN02);
	}
	else if(strncmp(buffer,SOUND_3_ON,6) == 0)
    149a:	497f      	ldr	r1, [pc, #508]	; (1698 <data_handler+0x7a8>)
    149c:	68fb      	ldr	r3, [r7, #12]
    149e:	2206      	movs	r2, #6
    14a0:	0018      	movs	r0, r3
    14a2:	4b67      	ldr	r3, [pc, #412]	; (1640 <data_handler+0x750>)
    14a4:	4798      	blx	r3
    14a6:	1e03      	subs	r3, r0, #0
    14a8:	d104      	bne.n	14b4 <data_handler+0x5c4>
	{
		press_sb_btn_once(SB_PIN_BTN03);
    14aa:	200e      	movs	r0, #14
    14ac:	4b73      	ldr	r3, [pc, #460]	; (167c <data_handler+0x78c>)
    14ae:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    14b0:	f000 fdda 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_3_ON,6) == 0)
	{
		press_sb_btn_once(SB_PIN_BTN03);
	}
	else if(strncmp(buffer,SOUND_3_OFF,6) == 0)
    14b4:	4979      	ldr	r1, [pc, #484]	; (169c <data_handler+0x7ac>)
    14b6:	68fb      	ldr	r3, [r7, #12]
    14b8:	2206      	movs	r2, #6
    14ba:	0018      	movs	r0, r3
    14bc:	4b60      	ldr	r3, [pc, #384]	; (1640 <data_handler+0x750>)
    14be:	4798      	blx	r3
    14c0:	1e03      	subs	r3, r0, #0
    14c2:	d104      	bne.n	14ce <data_handler+0x5de>
	{
		release_sb_btn(SB_PIN_BTN03);
    14c4:	200e      	movs	r0, #14
    14c6:	4b6f      	ldr	r3, [pc, #444]	; (1684 <data_handler+0x794>)
    14c8:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    14ca:	f000 fdcd 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_3_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN03);
	}
	else if(strncmp(buffer,SOUND_4_ON,6) == 0)
    14ce:	4974      	ldr	r1, [pc, #464]	; (16a0 <data_handler+0x7b0>)
    14d0:	68fb      	ldr	r3, [r7, #12]
    14d2:	2206      	movs	r2, #6
    14d4:	0018      	movs	r0, r3
    14d6:	4b5a      	ldr	r3, [pc, #360]	; (1640 <data_handler+0x750>)
    14d8:	4798      	blx	r3
    14da:	1e03      	subs	r3, r0, #0
    14dc:	d104      	bne.n	14e8 <data_handler+0x5f8>
	{
		press_sb_btn_once(SB_PIN_BTN04);
    14de:	200f      	movs	r0, #15
    14e0:	4b66      	ldr	r3, [pc, #408]	; (167c <data_handler+0x78c>)
    14e2:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    14e4:	f000 fdc0 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_4_ON,6) == 0)
	{
		press_sb_btn_once(SB_PIN_BTN04);
	}
	else if(strncmp(buffer,SOUND_4_OFF,6) == 0)
    14e8:	496e      	ldr	r1, [pc, #440]	; (16a4 <data_handler+0x7b4>)
    14ea:	68fb      	ldr	r3, [r7, #12]
    14ec:	2206      	movs	r2, #6
    14ee:	0018      	movs	r0, r3
    14f0:	4b53      	ldr	r3, [pc, #332]	; (1640 <data_handler+0x750>)
    14f2:	4798      	blx	r3
    14f4:	1e03      	subs	r3, r0, #0
    14f6:	d104      	bne.n	1502 <data_handler+0x612>
	{
		release_sb_btn(SB_PIN_BTN04);
    14f8:	200f      	movs	r0, #15
    14fa:	4b62      	ldr	r3, [pc, #392]	; (1684 <data_handler+0x794>)
    14fc:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    14fe:	f000 fdb3 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_4_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN04);
	}
	else if(strncmp(buffer,SOUND_5_ON,6) == 0)
    1502:	4969      	ldr	r1, [pc, #420]	; (16a8 <data_handler+0x7b8>)
    1504:	68fb      	ldr	r3, [r7, #12]
    1506:	2206      	movs	r2, #6
    1508:	0018      	movs	r0, r3
    150a:	4b4d      	ldr	r3, [pc, #308]	; (1640 <data_handler+0x750>)
    150c:	4798      	blx	r3
    150e:	1e03      	subs	r3, r0, #0
    1510:	d104      	bne.n	151c <data_handler+0x62c>
	{
		press_sb_btn_once(SB_PIN_BTN05);
    1512:	2010      	movs	r0, #16
    1514:	4b59      	ldr	r3, [pc, #356]	; (167c <data_handler+0x78c>)
    1516:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1518:	f000 fda6 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_5_ON,6) == 0)
	{
		press_sb_btn_once(SB_PIN_BTN05);
	}
	else if(strncmp(buffer,SOUND_5_OFF,6) == 0)
    151c:	4963      	ldr	r1, [pc, #396]	; (16ac <data_handler+0x7bc>)
    151e:	68fb      	ldr	r3, [r7, #12]
    1520:	2206      	movs	r2, #6
    1522:	0018      	movs	r0, r3
    1524:	4b46      	ldr	r3, [pc, #280]	; (1640 <data_handler+0x750>)
    1526:	4798      	blx	r3
    1528:	1e03      	subs	r3, r0, #0
    152a:	d104      	bne.n	1536 <data_handler+0x646>
	{
		release_sb_btn(SB_PIN_BTN05);
    152c:	2010      	movs	r0, #16
    152e:	4b55      	ldr	r3, [pc, #340]	; (1684 <data_handler+0x794>)
    1530:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1532:	f000 fd99 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_5_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN05);
	}
	else if(strncmp(buffer,SOUND_6_ON,6) == 0)
    1536:	495e      	ldr	r1, [pc, #376]	; (16b0 <data_handler+0x7c0>)
    1538:	68fb      	ldr	r3, [r7, #12]
    153a:	2206      	movs	r2, #6
    153c:	0018      	movs	r0, r3
    153e:	4b40      	ldr	r3, [pc, #256]	; (1640 <data_handler+0x750>)
    1540:	4798      	blx	r3
    1542:	1e03      	subs	r3, r0, #0
    1544:	d104      	bne.n	1550 <data_handler+0x660>
	{
		press_sb_btn_once(SB_PIN_BTN06);
    1546:	2011      	movs	r0, #17
    1548:	4b4c      	ldr	r3, [pc, #304]	; (167c <data_handler+0x78c>)
    154a:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    154c:	f000 fd8c 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_6_ON,6) == 0)
	{
		press_sb_btn_once(SB_PIN_BTN06);
	}
	else if(strncmp(buffer,SOUND_6_OFF,6) == 0)
    1550:	4958      	ldr	r1, [pc, #352]	; (16b4 <data_handler+0x7c4>)
    1552:	68fb      	ldr	r3, [r7, #12]
    1554:	2206      	movs	r2, #6
    1556:	0018      	movs	r0, r3
    1558:	4b39      	ldr	r3, [pc, #228]	; (1640 <data_handler+0x750>)
    155a:	4798      	blx	r3
    155c:	1e03      	subs	r3, r0, #0
    155e:	d104      	bne.n	156a <data_handler+0x67a>
	{
		release_sb_btn(SB_PIN_BTN06);
    1560:	2011      	movs	r0, #17
    1562:	4b48      	ldr	r3, [pc, #288]	; (1684 <data_handler+0x794>)
    1564:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1566:	f000 fd7f 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_6_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN06);
	}
	else if(strncmp(buffer,SOUND_7_ON,6) == 0)
    156a:	4953      	ldr	r1, [pc, #332]	; (16b8 <data_handler+0x7c8>)
    156c:	68fb      	ldr	r3, [r7, #12]
    156e:	2206      	movs	r2, #6
    1570:	0018      	movs	r0, r3
    1572:	4b33      	ldr	r3, [pc, #204]	; (1640 <data_handler+0x750>)
    1574:	4798      	blx	r3
    1576:	1e03      	subs	r3, r0, #0
    1578:	d104      	bne.n	1584 <data_handler+0x694>
	{
		press_sb_btn_once(SB_PIN_BTN07);
    157a:	2012      	movs	r0, #18
    157c:	4b3f      	ldr	r3, [pc, #252]	; (167c <data_handler+0x78c>)
    157e:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1580:	f000 fd72 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_7_ON,6) == 0)
	{
		press_sb_btn_once(SB_PIN_BTN07);
	}
	else if(strncmp(buffer,SOUND_7_OFF,6) == 0)
    1584:	494d      	ldr	r1, [pc, #308]	; (16bc <data_handler+0x7cc>)
    1586:	68fb      	ldr	r3, [r7, #12]
    1588:	2206      	movs	r2, #6
    158a:	0018      	movs	r0, r3
    158c:	4b2c      	ldr	r3, [pc, #176]	; (1640 <data_handler+0x750>)
    158e:	4798      	blx	r3
    1590:	1e03      	subs	r3, r0, #0
    1592:	d104      	bne.n	159e <data_handler+0x6ae>
	{
		release_sb_btn(SB_PIN_BTN07);
    1594:	2012      	movs	r0, #18
    1596:	4b3b      	ldr	r3, [pc, #236]	; (1684 <data_handler+0x794>)
    1598:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    159a:	f000 fd65 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_7_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN07);
	}
	else if(strncmp(buffer,SOUND_8_ON,6) == 0)
    159e:	4948      	ldr	r1, [pc, #288]	; (16c0 <data_handler+0x7d0>)
    15a0:	68fb      	ldr	r3, [r7, #12]
    15a2:	2206      	movs	r2, #6
    15a4:	0018      	movs	r0, r3
    15a6:	4b26      	ldr	r3, [pc, #152]	; (1640 <data_handler+0x750>)
    15a8:	4798      	blx	r3
    15aa:	1e03      	subs	r3, r0, #0
    15ac:	d104      	bne.n	15b8 <data_handler+0x6c8>
	{
		press_sb_btn_once(SB_PIN_BTN08);
    15ae:	2013      	movs	r0, #19
    15b0:	4b32      	ldr	r3, [pc, #200]	; (167c <data_handler+0x78c>)
    15b2:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    15b4:	f000 fd58 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_8_ON,6) == 0)
	{
		press_sb_btn_once(SB_PIN_BTN08);
	}
	else if(strncmp(buffer,SOUND_8_OFF,6) == 0)
    15b8:	4942      	ldr	r1, [pc, #264]	; (16c4 <data_handler+0x7d4>)
    15ba:	68fb      	ldr	r3, [r7, #12]
    15bc:	2206      	movs	r2, #6
    15be:	0018      	movs	r0, r3
    15c0:	4b1f      	ldr	r3, [pc, #124]	; (1640 <data_handler+0x750>)
    15c2:	4798      	blx	r3
    15c4:	1e03      	subs	r3, r0, #0
    15c6:	d104      	bne.n	15d2 <data_handler+0x6e2>
	{
		release_sb_btn(SB_PIN_BTN08);
    15c8:	2013      	movs	r0, #19
    15ca:	4b2e      	ldr	r3, [pc, #184]	; (1684 <data_handler+0x794>)
    15cc:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    15ce:	f000 fd4b 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_8_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN08);
	}
	else if(strncmp(buffer,SOUND_9_ON,6) == 0)
    15d2:	493d      	ldr	r1, [pc, #244]	; (16c8 <data_handler+0x7d8>)
    15d4:	68fb      	ldr	r3, [r7, #12]
    15d6:	2206      	movs	r2, #6
    15d8:	0018      	movs	r0, r3
    15da:	4b19      	ldr	r3, [pc, #100]	; (1640 <data_handler+0x750>)
    15dc:	4798      	blx	r3
    15de:	1e03      	subs	r3, r0, #0
    15e0:	d104      	bne.n	15ec <data_handler+0x6fc>
	{
		press_sb_btn_once(SB_PIN_BTN09);
    15e2:	2014      	movs	r0, #20
    15e4:	4b25      	ldr	r3, [pc, #148]	; (167c <data_handler+0x78c>)
    15e6:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    15e8:	f000 fd3e 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_9_ON,6) == 0)
	{
		press_sb_btn_once(SB_PIN_BTN09);
	}
	else if(strncmp(buffer,SOUND_9_OFF,6) == 0)
    15ec:	4937      	ldr	r1, [pc, #220]	; (16cc <data_handler+0x7dc>)
    15ee:	68fb      	ldr	r3, [r7, #12]
    15f0:	2206      	movs	r2, #6
    15f2:	0018      	movs	r0, r3
    15f4:	4b12      	ldr	r3, [pc, #72]	; (1640 <data_handler+0x750>)
    15f6:	4798      	blx	r3
    15f8:	1e03      	subs	r3, r0, #0
    15fa:	d104      	bne.n	1606 <data_handler+0x716>
	{
		release_sb_btn(SB_PIN_BTN09);
    15fc:	2014      	movs	r0, #20
    15fe:	4b21      	ldr	r3, [pc, #132]	; (1684 <data_handler+0x794>)
    1600:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1602:	f000 fd31 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_9_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN09);
	}
	else if(strncmp(buffer,SOUND_10_ON,6) == 0)
    1606:	4932      	ldr	r1, [pc, #200]	; (16d0 <data_handler+0x7e0>)
    1608:	68fb      	ldr	r3, [r7, #12]
    160a:	2206      	movs	r2, #6
    160c:	0018      	movs	r0, r3
    160e:	4b0c      	ldr	r3, [pc, #48]	; (1640 <data_handler+0x750>)
    1610:	4798      	blx	r3
    1612:	1e03      	subs	r3, r0, #0
    1614:	d104      	bne.n	1620 <data_handler+0x730>
	{
		press_sb_btn_once(SB_PIN_BTN10);
    1616:	2015      	movs	r0, #21
    1618:	4b18      	ldr	r3, [pc, #96]	; (167c <data_handler+0x78c>)
    161a:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    161c:	f000 fd24 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,SOUND_10_ON,6) == 0)
	{
		press_sb_btn_once(SB_PIN_BTN10);
	}
	else if(strncmp(buffer,SOUND_10_OFF,6) == 0)
    1620:	492c      	ldr	r1, [pc, #176]	; (16d4 <data_handler+0x7e4>)
    1622:	68fb      	ldr	r3, [r7, #12]
    1624:	2206      	movs	r2, #6
    1626:	0018      	movs	r0, r3
    1628:	4b05      	ldr	r3, [pc, #20]	; (1640 <data_handler+0x750>)
    162a:	4798      	blx	r3
    162c:	1e03      	subs	r3, r0, #0
    162e:	d153      	bne.n	16d8 <data_handler+0x7e8>
	{
		release_sb_btn(SB_PIN_BTN10);
    1630:	2015      	movs	r0, #21
    1632:	4b14      	ldr	r3, [pc, #80]	; (1684 <data_handler+0x794>)
    1634:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1636:	f000 fd17 	bl	2068 <STACK_SIZE+0x68>
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	00006b7c 	.word	0x00006b7c
    1640:	0000593b 	.word	0x0000593b
    1644:	20000769 	.word	0x20000769
    1648:	00006b84 	.word	0x00006b84
    164c:	2000076c 	.word	0x2000076c
    1650:	00006b8c 	.word	0x00006b8c
    1654:	00006b94 	.word	0x00006b94
    1658:	20000336 	.word	0x20000336
    165c:	00006b9c 	.word	0x00006b9c
    1660:	00006ba4 	.word	0x00006ba4
    1664:	20000751 	.word	0x20000751
    1668:	00006bac 	.word	0x00006bac
    166c:	00006bb4 	.word	0x00006bb4
    1670:	20000774 	.word	0x20000774
    1674:	00006bbc 	.word	0x00006bbc
    1678:	00006bc4 	.word	0x00006bc4
    167c:	00003a6d 	.word	0x00003a6d
    1680:	00006bcc 	.word	0x00006bcc
    1684:	00003af5 	.word	0x00003af5
    1688:	00006bd4 	.word	0x00006bd4
    168c:	00006bdc 	.word	0x00006bdc
    1690:	00006be4 	.word	0x00006be4
    1694:	00006bec 	.word	0x00006bec
    1698:	00006bf4 	.word	0x00006bf4
    169c:	00006bfc 	.word	0x00006bfc
    16a0:	00006c04 	.word	0x00006c04
    16a4:	00006c0c 	.word	0x00006c0c
    16a8:	00006c14 	.word	0x00006c14
    16ac:	00006c1c 	.word	0x00006c1c
    16b0:	00006c24 	.word	0x00006c24
    16b4:	00006c2c 	.word	0x00006c2c
    16b8:	00006c34 	.word	0x00006c34
    16bc:	00006c3c 	.word	0x00006c3c
    16c0:	00006c44 	.word	0x00006c44
    16c4:	00006c4c 	.word	0x00006c4c
    16c8:	00006c54 	.word	0x00006c54
    16cc:	00006c5c 	.word	0x00006c5c
    16d0:	00006c64 	.word	0x00006c64
    16d4:	00006c6c 	.word	0x00006c6c
	}
	else if(strncmp(buffer,SOUND_10_OFF,6) == 0)
	{
		release_sb_btn(SB_PIN_BTN10);
	}
	else if (strncmp(buffer,SOUND_RESET,sizeof(SOUND_RESET)-1) == 0)
    16d8:	49e5      	ldr	r1, [pc, #916]	; (1a70 <data_handler+0xb80>)
    16da:	68fb      	ldr	r3, [r7, #12]
    16dc:	2208      	movs	r2, #8
    16de:	0018      	movs	r0, r3
    16e0:	4be4      	ldr	r3, [pc, #912]	; (1a74 <data_handler+0xb84>)
    16e2:	4798      	blx	r3
    16e4:	1e03      	subs	r3, r0, #0
    16e6:	d107      	bne.n	16f8 <data_handler+0x808>
	{
		ble_uart_write("SB: RESETTING");
    16e8:	4be3      	ldr	r3, [pc, #908]	; (1a78 <data_handler+0xb88>)
    16ea:	0018      	movs	r0, r3
    16ec:	4be3      	ldr	r3, [pc, #908]	; (1a7c <data_handler+0xb8c>)
    16ee:	4798      	blx	r3
		sounds_reset();
    16f0:	4be3      	ldr	r3, [pc, #908]	; (1a80 <data_handler+0xb90>)
    16f2:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    16f4:	f000 fcb8 	bl	2068 <STACK_SIZE+0x68>
	else if (strncmp(buffer,SOUND_RESET,sizeof(SOUND_RESET)-1) == 0)
	{
		ble_uart_write("SB: RESETTING");
		sounds_reset();
	}
	else if(strncmp(buffer,PARTY_ON,5) == 0)
    16f8:	49e2      	ldr	r1, [pc, #904]	; (1a84 <data_handler+0xb94>)
    16fa:	68fb      	ldr	r3, [r7, #12]
    16fc:	2205      	movs	r2, #5
    16fe:	0018      	movs	r0, r3
    1700:	4bdc      	ldr	r3, [pc, #880]	; (1a74 <data_handler+0xb84>)
    1702:	4798      	blx	r3
    1704:	1e03      	subs	r3, r0, #0
    1706:	d104      	bne.n	1712 <data_handler+0x822>
	{
		party = true;
    1708:	4bdf      	ldr	r3, [pc, #892]	; (1a88 <data_handler+0xb98>)
    170a:	2201      	movs	r2, #1
    170c:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    170e:	f000 fcab 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,PARTY_ON,5) == 0)
	{
		party = true;
	}
	else if(strncmp(buffer,PARTY_OFF,5) == 0)
    1712:	49de      	ldr	r1, [pc, #888]	; (1a8c <data_handler+0xb9c>)
    1714:	68fb      	ldr	r3, [r7, #12]
    1716:	2205      	movs	r2, #5
    1718:	0018      	movs	r0, r3
    171a:	4bd6      	ldr	r3, [pc, #856]	; (1a74 <data_handler+0xb84>)
    171c:	4798      	blx	r3
    171e:	1e03      	subs	r3, r0, #0
    1720:	d106      	bne.n	1730 <data_handler+0x840>
	{
		party = false;
    1722:	4bd9      	ldr	r3, [pc, #868]	; (1a88 <data_handler+0xb98>)
    1724:	2200      	movs	r2, #0
    1726:	701a      	strb	r2, [r3, #0]
		reset_all_lights();
    1728:	4bd9      	ldr	r3, [pc, #868]	; (1a90 <data_handler+0xba0>)
    172a:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    172c:	f000 fc9c 	bl	2068 <STACK_SIZE+0x68>
	else if(strncmp(buffer,PARTY_OFF,5) == 0)
	{
		party = false;
		reset_all_lights();
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
    1730:	49d8      	ldr	r1, [pc, #864]	; (1a94 <data_handler+0xba4>)
    1732:	68fb      	ldr	r3, [r7, #12]
    1734:	2205      	movs	r2, #5
    1736:	0018      	movs	r0, r3
    1738:	4bce      	ldr	r3, [pc, #824]	; (1a74 <data_handler+0xb84>)
    173a:	4798      	blx	r3
    173c:	1e03      	subs	r3, r0, #0
    173e:	d104      	bne.n	174a <data_handler+0x85a>
	{
		water = true;
    1740:	4bd5      	ldr	r3, [pc, #852]	; (1a98 <data_handler+0xba8>)
    1742:	2201      	movs	r2, #1
    1744:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1746:	f000 fc8f 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
	{
		water = true;
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
    174a:	49d2      	ldr	r1, [pc, #840]	; (1a94 <data_handler+0xba4>)
    174c:	68fb      	ldr	r3, [r7, #12]
    174e:	2205      	movs	r2, #5
    1750:	0018      	movs	r0, r3
    1752:	4bc8      	ldr	r3, [pc, #800]	; (1a74 <data_handler+0xb84>)
    1754:	4798      	blx	r3
    1756:	1e03      	subs	r3, r0, #0
    1758:	d104      	bne.n	1764 <data_handler+0x874>
	{
		water = false;
    175a:	4bcf      	ldr	r3, [pc, #828]	; (1a98 <data_handler+0xba8>)
    175c:	2200      	movs	r2, #0
    175e:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1760:	f000 fc82 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,WATER_ON,5) == 0)
	{
		water = false;
	}
	else if(strncmp(buffer,START_ON,5) == 0)
    1764:	49cd      	ldr	r1, [pc, #820]	; (1a9c <data_handler+0xbac>)
    1766:	68fb      	ldr	r3, [r7, #12]
    1768:	2205      	movs	r2, #5
    176a:	0018      	movs	r0, r3
    176c:	4bc1      	ldr	r3, [pc, #772]	; (1a74 <data_handler+0xb84>)
    176e:	4798      	blx	r3
    1770:	1e03      	subs	r3, r0, #0
    1772:	d104      	bne.n	177e <data_handler+0x88e>
	{
		start = true;
    1774:	4bca      	ldr	r3, [pc, #808]	; (1aa0 <data_handler+0xbb0>)
    1776:	2201      	movs	r2, #1
    1778:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    177a:	f000 fc75 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,START_ON,5) == 0)
	{
		start = true;
	}
	else if(strncmp(buffer,START_OFF,5) == 0)
    177e:	49c9      	ldr	r1, [pc, #804]	; (1aa4 <data_handler+0xbb4>)
    1780:	68fb      	ldr	r3, [r7, #12]
    1782:	2205      	movs	r2, #5
    1784:	0018      	movs	r0, r3
    1786:	4bbb      	ldr	r3, [pc, #748]	; (1a74 <data_handler+0xb84>)
    1788:	4798      	blx	r3
    178a:	1e03      	subs	r3, r0, #0
    178c:	d104      	bne.n	1798 <data_handler+0x8a8>
	{
		start = false;
    178e:	4bc4      	ldr	r3, [pc, #784]	; (1aa0 <data_handler+0xbb0>)
    1790:	2200      	movs	r2, #0
    1792:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1794:	f000 fc68 	bl	2068 <STACK_SIZE+0x68>
	}
	else if(strncmp(buffer,START_OFF,5) == 0)
	{
		start = false;
	}
	else if(strncmp(buffer,LED_BAR_ON,5) == 0)
    1798:	49c3      	ldr	r1, [pc, #780]	; (1aa8 <data_handler+0xbb8>)
    179a:	68fb      	ldr	r3, [r7, #12]
    179c:	2205      	movs	r2, #5
    179e:	0018      	movs	r0, r3
    17a0:	4bb4      	ldr	r3, [pc, #720]	; (1a74 <data_handler+0xb84>)
    17a2:	4798      	blx	r3
    17a4:	1e03      	subs	r3, r0, #0
    17a6:	d122      	bne.n	17ee <data_handler+0x8fe>
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,true);
    17a8:	2301      	movs	r3, #1
    17aa:	2202      	movs	r2, #2
    17ac:	2101      	movs	r1, #1
    17ae:	2000      	movs	r0, #0
    17b0:	4cbe      	ldr	r4, [pc, #760]	; (1aac <data_handler+0xbbc>)
    17b2:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,true);
    17b4:	2301      	movs	r3, #1
    17b6:	2202      	movs	r2, #2
    17b8:	2102      	movs	r1, #2
    17ba:	2000      	movs	r0, #0
    17bc:	4cbb      	ldr	r4, [pc, #748]	; (1aac <data_handler+0xbbc>)
    17be:	47a0      	blx	r4
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,true);
    17c0:	2301      	movs	r3, #1
    17c2:	2204      	movs	r2, #4
    17c4:	2101      	movs	r1, #1
    17c6:	2000      	movs	r0, #0
    17c8:	4cb8      	ldr	r4, [pc, #736]	; (1aac <data_handler+0xbbc>)
    17ca:	47a0      	blx	r4
		led_bar = true;
    17cc:	4bb8      	ldr	r3, [pc, #736]	; (1ab0 <data_handler+0xbc0>)
    17ce:	2201      	movs	r2, #1
    17d0:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    17d2:	68fb      	ldr	r3, [r7, #12]
    17d4:	0018      	movs	r0, r3
    17d6:	4ba9      	ldr	r3, [pc, #676]	; (1a7c <data_handler+0xb8c>)
    17d8:	4798      	blx	r3
		ble_uart_write(" - ");
    17da:	4bb6      	ldr	r3, [pc, #728]	; (1ab4 <data_handler+0xbc4>)
    17dc:	0018      	movs	r0, r3
    17de:	4ba7      	ldr	r3, [pc, #668]	; (1a7c <data_handler+0xb8c>)
    17e0:	4798      	blx	r3
		ble_uart_write("ACK");
    17e2:	4bb5      	ldr	r3, [pc, #724]	; (1ab8 <data_handler+0xbc8>)
    17e4:	0018      	movs	r0, r3
    17e6:	4ba5      	ldr	r3, [pc, #660]	; (1a7c <data_handler+0xb8c>)
    17e8:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    17ea:	f000 fc3d 	bl	2068 <STACK_SIZE+0x68>
		led_bar = true;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,LED_BAR_OFF,5) == 0)
    17ee:	49b3      	ldr	r1, [pc, #716]	; (1abc <data_handler+0xbcc>)
    17f0:	68fb      	ldr	r3, [r7, #12]
    17f2:	2205      	movs	r2, #5
    17f4:	0018      	movs	r0, r3
    17f6:	4b9f      	ldr	r3, [pc, #636]	; (1a74 <data_handler+0xb84>)
    17f8:	4798      	blx	r3
    17fa:	1e03      	subs	r3, r0, #0
    17fc:	d122      	bne.n	1844 <data_handler+0x954>
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,false);
    17fe:	2300      	movs	r3, #0
    1800:	2202      	movs	r2, #2
    1802:	2101      	movs	r1, #1
    1804:	2000      	movs	r0, #0
    1806:	4ca9      	ldr	r4, [pc, #676]	; (1aac <data_handler+0xbbc>)
    1808:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,false);
    180a:	2300      	movs	r3, #0
    180c:	2202      	movs	r2, #2
    180e:	2102      	movs	r1, #2
    1810:	2000      	movs	r0, #0
    1812:	4ca6      	ldr	r4, [pc, #664]	; (1aac <data_handler+0xbbc>)
    1814:	47a0      	blx	r4
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,false);
    1816:	2300      	movs	r3, #0
    1818:	2204      	movs	r2, #4
    181a:	2101      	movs	r1, #1
    181c:	2000      	movs	r0, #0
    181e:	4ca3      	ldr	r4, [pc, #652]	; (1aac <data_handler+0xbbc>)
    1820:	47a0      	blx	r4
		led_bar = false;
    1822:	4ba3      	ldr	r3, [pc, #652]	; (1ab0 <data_handler+0xbc0>)
    1824:	2200      	movs	r2, #0
    1826:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1828:	68fb      	ldr	r3, [r7, #12]
    182a:	0018      	movs	r0, r3
    182c:	4b93      	ldr	r3, [pc, #588]	; (1a7c <data_handler+0xb8c>)
    182e:	4798      	blx	r3
		ble_uart_write(" - ");
    1830:	4ba0      	ldr	r3, [pc, #640]	; (1ab4 <data_handler+0xbc4>)
    1832:	0018      	movs	r0, r3
    1834:	4b91      	ldr	r3, [pc, #580]	; (1a7c <data_handler+0xb8c>)
    1836:	4798      	blx	r3
		ble_uart_write("ACK");
    1838:	4b9f      	ldr	r3, [pc, #636]	; (1ab8 <data_handler+0xbc8>)
    183a:	0018      	movs	r0, r3
    183c:	4b8f      	ldr	r3, [pc, #572]	; (1a7c <data_handler+0xb8c>)
    183e:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1840:	f000 fc12 	bl	2068 <STACK_SIZE+0x68>
		led_bar = false;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,HDL_ON,5) == 0)
    1844:	499e      	ldr	r1, [pc, #632]	; (1ac0 <data_handler+0xbd0>)
    1846:	68fb      	ldr	r3, [r7, #12]
    1848:	2205      	movs	r2, #5
    184a:	0018      	movs	r0, r3
    184c:	4b89      	ldr	r3, [pc, #548]	; (1a74 <data_handler+0xb84>)
    184e:	4798      	blx	r3
    1850:	1e03      	subs	r3, r0, #0
    1852:	d137      	bne.n	18c4 <data_handler+0x9d4>
	{
		system_interrupt_disable_global();
    1854:	4b9b      	ldr	r3, [pc, #620]	; (1ac4 <data_handler+0xbd4>)
    1856:	4798      	blx	r3
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,true);
    1858:	2301      	movs	r3, #1
    185a:	2201      	movs	r2, #1
    185c:	2102      	movs	r1, #2
    185e:	2000      	movs	r0, #0
    1860:	4c92      	ldr	r4, [pc, #584]	; (1aac <data_handler+0xbbc>)
    1862:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,true);
    1864:	2301      	movs	r3, #1
    1866:	2201      	movs	r2, #1
    1868:	2101      	movs	r1, #1
    186a:	2000      	movs	r0, #0
    186c:	4c8f      	ldr	r4, [pc, #572]	; (1aac <data_handler+0xbbc>)
    186e:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    1870:	2301      	movs	r3, #1
    1872:	2200      	movs	r2, #0
    1874:	2101      	movs	r1, #1
    1876:	2000      	movs	r0, #0
    1878:	4c8c      	ldr	r4, [pc, #560]	; (1aac <data_handler+0xbbc>)
    187a:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    187c:	2301      	movs	r3, #1
    187e:	2200      	movs	r2, #0
    1880:	2102      	movs	r1, #2
    1882:	2000      	movs	r0, #0
    1884:	4c89      	ldr	r4, [pc, #548]	; (1aac <data_handler+0xbbc>)
    1886:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    1888:	2301      	movs	r3, #1
    188a:	2200      	movs	r2, #0
    188c:	2103      	movs	r1, #3
    188e:	2000      	movs	r0, #0
    1890:	4c86      	ldr	r4, [pc, #536]	; (1aac <data_handler+0xbbc>)
    1892:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    1894:	2301      	movs	r3, #1
    1896:	2200      	movs	r2, #0
    1898:	2104      	movs	r1, #4
    189a:	2000      	movs	r0, #0
    189c:	4c83      	ldr	r4, [pc, #524]	; (1aac <data_handler+0xbbc>)
    189e:	47a0      	blx	r4
		mcp23017_reset();
    18a0:	4b89      	ldr	r3, [pc, #548]	; (1ac8 <data_handler+0xbd8>)
    18a2:	4798      	blx	r3
		system_interrupt_enable_global();
    18a4:	4b89      	ldr	r3, [pc, #548]	; (1acc <data_handler+0xbdc>)
    18a6:	4798      	blx	r3
		ble_uart_write(buffer);
    18a8:	68fb      	ldr	r3, [r7, #12]
    18aa:	0018      	movs	r0, r3
    18ac:	4b73      	ldr	r3, [pc, #460]	; (1a7c <data_handler+0xb8c>)
    18ae:	4798      	blx	r3
		ble_uart_write(" - ");
    18b0:	4b80      	ldr	r3, [pc, #512]	; (1ab4 <data_handler+0xbc4>)
    18b2:	0018      	movs	r0, r3
    18b4:	4b71      	ldr	r3, [pc, #452]	; (1a7c <data_handler+0xb8c>)
    18b6:	4798      	blx	r3
		ble_uart_write("ACK");
    18b8:	4b7f      	ldr	r3, [pc, #508]	; (1ab8 <data_handler+0xbc8>)
    18ba:	0018      	movs	r0, r3
    18bc:	4b6f      	ldr	r3, [pc, #444]	; (1a7c <data_handler+0xb8c>)
    18be:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    18c0:	f000 fbd2 	bl	2068 <STACK_SIZE+0x68>
		system_interrupt_enable_global();
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,HDL_OFF,5) == 0)
    18c4:	4982      	ldr	r1, [pc, #520]	; (1ad0 <data_handler+0xbe0>)
    18c6:	68fb      	ldr	r3, [r7, #12]
    18c8:	2205      	movs	r2, #5
    18ca:	0018      	movs	r0, r3
    18cc:	4b69      	ldr	r3, [pc, #420]	; (1a74 <data_handler+0xb84>)
    18ce:	4798      	blx	r3
    18d0:	1e03      	subs	r3, r0, #0
    18d2:	d136      	bne.n	1942 <data_handler+0xa52>
	{
		system_interrupt_disable_global();
    18d4:	4b7b      	ldr	r3, [pc, #492]	; (1ac4 <data_handler+0xbd4>)
    18d6:	4798      	blx	r3
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,false);
    18d8:	2300      	movs	r3, #0
    18da:	2201      	movs	r2, #1
    18dc:	2102      	movs	r1, #2
    18de:	2000      	movs	r0, #0
    18e0:	4c72      	ldr	r4, [pc, #456]	; (1aac <data_handler+0xbbc>)
    18e2:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,false);
    18e4:	2300      	movs	r3, #0
    18e6:	2201      	movs	r2, #1
    18e8:	2101      	movs	r1, #1
    18ea:	2000      	movs	r0, #0
    18ec:	4c6f      	ldr	r4, [pc, #444]	; (1aac <data_handler+0xbbc>)
    18ee:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    18f0:	2300      	movs	r3, #0
    18f2:	2200      	movs	r2, #0
    18f4:	2101      	movs	r1, #1
    18f6:	2000      	movs	r0, #0
    18f8:	4c6c      	ldr	r4, [pc, #432]	; (1aac <data_handler+0xbbc>)
    18fa:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    18fc:	2300      	movs	r3, #0
    18fe:	2200      	movs	r2, #0
    1900:	2102      	movs	r1, #2
    1902:	2000      	movs	r0, #0
    1904:	4c69      	ldr	r4, [pc, #420]	; (1aac <data_handler+0xbbc>)
    1906:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    1908:	2300      	movs	r3, #0
    190a:	2200      	movs	r2, #0
    190c:	2103      	movs	r1, #3
    190e:	2000      	movs	r0, #0
    1910:	4c66      	ldr	r4, [pc, #408]	; (1aac <data_handler+0xbbc>)
    1912:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    1914:	2300      	movs	r3, #0
    1916:	2200      	movs	r2, #0
    1918:	2104      	movs	r1, #4
    191a:	2000      	movs	r0, #0
    191c:	4c63      	ldr	r4, [pc, #396]	; (1aac <data_handler+0xbbc>)
    191e:	47a0      	blx	r4
		mcp23017_reset();
    1920:	4b69      	ldr	r3, [pc, #420]	; (1ac8 <data_handler+0xbd8>)
    1922:	4798      	blx	r3
		system_interrupt_enable_global();
    1924:	4b69      	ldr	r3, [pc, #420]	; (1acc <data_handler+0xbdc>)
    1926:	4798      	blx	r3
		ble_uart_write(buffer);
    1928:	68fb      	ldr	r3, [r7, #12]
    192a:	0018      	movs	r0, r3
    192c:	4b53      	ldr	r3, [pc, #332]	; (1a7c <data_handler+0xb8c>)
    192e:	4798      	blx	r3
		ble_uart_write(" - ");
    1930:	4b60      	ldr	r3, [pc, #384]	; (1ab4 <data_handler+0xbc4>)
    1932:	0018      	movs	r0, r3
    1934:	4b51      	ldr	r3, [pc, #324]	; (1a7c <data_handler+0xb8c>)
    1936:	4798      	blx	r3
		ble_uart_write("ACK");
    1938:	4b5f      	ldr	r3, [pc, #380]	; (1ab8 <data_handler+0xbc8>)
    193a:	0018      	movs	r0, r3
    193c:	4b4f      	ldr	r3, [pc, #316]	; (1a7c <data_handler+0xb8c>)
    193e:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1940:	e392      	b.n	2068 <STACK_SIZE+0x68>
		system_interrupt_enable_global();
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,BRIAN_ON,7) == 0)
    1942:	4964      	ldr	r1, [pc, #400]	; (1ad4 <data_handler+0xbe4>)
    1944:	68fb      	ldr	r3, [r7, #12]
    1946:	2207      	movs	r2, #7
    1948:	0018      	movs	r0, r3
    194a:	4b4a      	ldr	r3, [pc, #296]	; (1a74 <data_handler+0xb84>)
    194c:	4798      	blx	r3
    194e:	1e03      	subs	r3, r0, #0
    1950:	d136      	bne.n	19c0 <data_handler+0xad0>
	{
		system_interrupt_disable_global();
    1952:	4b5c      	ldr	r3, [pc, #368]	; (1ac4 <data_handler+0xbd4>)
    1954:	4798      	blx	r3
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,true);
    1956:	2301      	movs	r3, #1
    1958:	2203      	movs	r2, #3
    195a:	2102      	movs	r1, #2
    195c:	2000      	movs	r0, #0
    195e:	4c53      	ldr	r4, [pc, #332]	; (1aac <data_handler+0xbbc>)
    1960:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,true);
    1962:	2301      	movs	r3, #1
    1964:	2203      	movs	r2, #3
    1966:	2101      	movs	r1, #1
    1968:	2000      	movs	r0, #0
    196a:	4c50      	ldr	r4, [pc, #320]	; (1aac <data_handler+0xbbc>)
    196c:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,true);
    196e:	2301      	movs	r3, #1
    1970:	2200      	movs	r2, #0
    1972:	2101      	movs	r1, #1
    1974:	2000      	movs	r0, #0
    1976:	4c4d      	ldr	r4, [pc, #308]	; (1aac <data_handler+0xbbc>)
    1978:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,true);
    197a:	2301      	movs	r3, #1
    197c:	2200      	movs	r2, #0
    197e:	2102      	movs	r1, #2
    1980:	2000      	movs	r0, #0
    1982:	4c4a      	ldr	r4, [pc, #296]	; (1aac <data_handler+0xbbc>)
    1984:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,true);
    1986:	2301      	movs	r3, #1
    1988:	2200      	movs	r2, #0
    198a:	2103      	movs	r1, #3
    198c:	2000      	movs	r0, #0
    198e:	4c47      	ldr	r4, [pc, #284]	; (1aac <data_handler+0xbbc>)
    1990:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,true);
    1992:	2301      	movs	r3, #1
    1994:	2200      	movs	r2, #0
    1996:	2104      	movs	r1, #4
    1998:	2000      	movs	r0, #0
    199a:	4c44      	ldr	r4, [pc, #272]	; (1aac <data_handler+0xbbc>)
    199c:	47a0      	blx	r4
		mcp23017_reset();
    199e:	4b4a      	ldr	r3, [pc, #296]	; (1ac8 <data_handler+0xbd8>)
    19a0:	4798      	blx	r3
		system_interrupt_enable_global();
    19a2:	4b4a      	ldr	r3, [pc, #296]	; (1acc <data_handler+0xbdc>)
    19a4:	4798      	blx	r3
		ble_uart_write(buffer);
    19a6:	68fb      	ldr	r3, [r7, #12]
    19a8:	0018      	movs	r0, r3
    19aa:	4b34      	ldr	r3, [pc, #208]	; (1a7c <data_handler+0xb8c>)
    19ac:	4798      	blx	r3
		ble_uart_write(" - ");
    19ae:	4b41      	ldr	r3, [pc, #260]	; (1ab4 <data_handler+0xbc4>)
    19b0:	0018      	movs	r0, r3
    19b2:	4b32      	ldr	r3, [pc, #200]	; (1a7c <data_handler+0xb8c>)
    19b4:	4798      	blx	r3
		ble_uart_write("ACK");
    19b6:	4b40      	ldr	r3, [pc, #256]	; (1ab8 <data_handler+0xbc8>)
    19b8:	0018      	movs	r0, r3
    19ba:	4b30      	ldr	r3, [pc, #192]	; (1a7c <data_handler+0xb8c>)
    19bc:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    19be:	e353      	b.n	2068 <STACK_SIZE+0x68>
		system_interrupt_enable_global();
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,BRIAN_OFF,7) == 0)
    19c0:	4945      	ldr	r1, [pc, #276]	; (1ad8 <data_handler+0xbe8>)
    19c2:	68fb      	ldr	r3, [r7, #12]
    19c4:	2207      	movs	r2, #7
    19c6:	0018      	movs	r0, r3
    19c8:	4b2a      	ldr	r3, [pc, #168]	; (1a74 <data_handler+0xb84>)
    19ca:	4798      	blx	r3
    19cc:	1e03      	subs	r3, r0, #0
    19ce:	d136      	bne.n	1a3e <data_handler+0xb4e>
	{
		system_interrupt_disable_global();
    19d0:	4b3c      	ldr	r3, [pc, #240]	; (1ac4 <data_handler+0xbd4>)
    19d2:	4798      	blx	r3
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,false);
    19d4:	2300      	movs	r3, #0
    19d6:	2203      	movs	r2, #3
    19d8:	2102      	movs	r1, #2
    19da:	2000      	movs	r0, #0
    19dc:	4c33      	ldr	r4, [pc, #204]	; (1aac <data_handler+0xbbc>)
    19de:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,false);
    19e0:	2300      	movs	r3, #0
    19e2:	2203      	movs	r2, #3
    19e4:	2101      	movs	r1, #1
    19e6:	2000      	movs	r0, #0
    19e8:	4c30      	ldr	r4, [pc, #192]	; (1aac <data_handler+0xbbc>)
    19ea:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,false);
    19ec:	2300      	movs	r3, #0
    19ee:	2200      	movs	r2, #0
    19f0:	2101      	movs	r1, #1
    19f2:	2000      	movs	r0, #0
    19f4:	4c2d      	ldr	r4, [pc, #180]	; (1aac <data_handler+0xbbc>)
    19f6:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,false);
    19f8:	2300      	movs	r3, #0
    19fa:	2200      	movs	r2, #0
    19fc:	2102      	movs	r1, #2
    19fe:	2000      	movs	r0, #0
    1a00:	4c2a      	ldr	r4, [pc, #168]	; (1aac <data_handler+0xbbc>)
    1a02:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,false);
    1a04:	2300      	movs	r3, #0
    1a06:	2200      	movs	r2, #0
    1a08:	2103      	movs	r1, #3
    1a0a:	2000      	movs	r0, #0
    1a0c:	4c27      	ldr	r4, [pc, #156]	; (1aac <data_handler+0xbbc>)
    1a0e:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,false);
    1a10:	2300      	movs	r3, #0
    1a12:	2200      	movs	r2, #0
    1a14:	2104      	movs	r1, #4
    1a16:	2000      	movs	r0, #0
    1a18:	4c24      	ldr	r4, [pc, #144]	; (1aac <data_handler+0xbbc>)
    1a1a:	47a0      	blx	r4
		mcp23017_reset();
    1a1c:	4b2a      	ldr	r3, [pc, #168]	; (1ac8 <data_handler+0xbd8>)
    1a1e:	4798      	blx	r3
		system_interrupt_enable_global();
    1a20:	4b2a      	ldr	r3, [pc, #168]	; (1acc <data_handler+0xbdc>)
    1a22:	4798      	blx	r3
		ble_uart_write(buffer);
    1a24:	68fb      	ldr	r3, [r7, #12]
    1a26:	0018      	movs	r0, r3
    1a28:	4b14      	ldr	r3, [pc, #80]	; (1a7c <data_handler+0xb8c>)
    1a2a:	4798      	blx	r3
		ble_uart_write(" - ");
    1a2c:	4b21      	ldr	r3, [pc, #132]	; (1ab4 <data_handler+0xbc4>)
    1a2e:	0018      	movs	r0, r3
    1a30:	4b12      	ldr	r3, [pc, #72]	; (1a7c <data_handler+0xb8c>)
    1a32:	4798      	blx	r3
		ble_uart_write("ACK");
    1a34:	4b20      	ldr	r3, [pc, #128]	; (1ab8 <data_handler+0xbc8>)
    1a36:	0018      	movs	r0, r3
    1a38:	4b10      	ldr	r3, [pc, #64]	; (1a7c <data_handler+0xb8c>)
    1a3a:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1a3c:	e314      	b.n	2068 <STACK_SIZE+0x68>
		system_interrupt_enable_global();
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASHY1_ON,7) == 0)
    1a3e:	4927      	ldr	r1, [pc, #156]	; (1adc <data_handler+0xbec>)
    1a40:	68fb      	ldr	r3, [r7, #12]
    1a42:	2207      	movs	r2, #7
    1a44:	0018      	movs	r0, r3
    1a46:	4b0b      	ldr	r3, [pc, #44]	; (1a74 <data_handler+0xb84>)
    1a48:	4798      	blx	r3
    1a4a:	1e03      	subs	r3, r0, #0
    1a4c:	d14a      	bne.n	1ae4 <data_handler+0xbf4>
	{
		flashy1 = true;
    1a4e:	4b24      	ldr	r3, [pc, #144]	; (1ae0 <data_handler+0xbf0>)
    1a50:	2201      	movs	r2, #1
    1a52:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1a54:	68fb      	ldr	r3, [r7, #12]
    1a56:	0018      	movs	r0, r3
    1a58:	4b08      	ldr	r3, [pc, #32]	; (1a7c <data_handler+0xb8c>)
    1a5a:	4798      	blx	r3
		ble_uart_write(" - ");
    1a5c:	4b15      	ldr	r3, [pc, #84]	; (1ab4 <data_handler+0xbc4>)
    1a5e:	0018      	movs	r0, r3
    1a60:	4b06      	ldr	r3, [pc, #24]	; (1a7c <data_handler+0xb8c>)
    1a62:	4798      	blx	r3
		ble_uart_write("ACK");
    1a64:	4b14      	ldr	r3, [pc, #80]	; (1ab8 <data_handler+0xbc8>)
    1a66:	0018      	movs	r0, r3
    1a68:	4b04      	ldr	r3, [pc, #16]	; (1a7c <data_handler+0xb8c>)
    1a6a:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1a6c:	e2fc      	b.n	2068 <STACK_SIZE+0x68>
    1a6e:	46c0      	nop			; (mov r8, r8)
    1a70:	00006c74 	.word	0x00006c74
    1a74:	0000593b 	.word	0x0000593b
    1a78:	00006c80 	.word	0x00006c80
    1a7c:	00000dbd 	.word	0x00000dbd
    1a80:	00003b19 	.word	0x00003b19
    1a84:	00006c90 	.word	0x00006c90
    1a88:	20000765 	.word	0x20000765
    1a8c:	00006c98 	.word	0x00006c98
    1a90:	000029fd 	.word	0x000029fd
    1a94:	00006ca0 	.word	0x00006ca0
    1a98:	20000321 	.word	0x20000321
    1a9c:	00006ca8 	.word	0x00006ca8
    1aa0:	20000772 	.word	0x20000772
    1aa4:	00006cb0 	.word	0x00006cb0
    1aa8:	00006cb8 	.word	0x00006cb8
    1aac:	00002c75 	.word	0x00002c75
    1ab0:	20000750 	.word	0x20000750
    1ab4:	00006b44 	.word	0x00006b44
    1ab8:	00006b48 	.word	0x00006b48
    1abc:	00006cc0 	.word	0x00006cc0
    1ac0:	00006cc8 	.word	0x00006cc8
    1ac4:	00000ed5 	.word	0x00000ed5
    1ac8:	00003265 	.word	0x00003265
    1acc:	00000eb9 	.word	0x00000eb9
    1ad0:	00006cd0 	.word	0x00006cd0
    1ad4:	00006cd8 	.word	0x00006cd8
    1ad8:	00006ce0 	.word	0x00006ce0
    1adc:	00006ce8 	.word	0x00006ce8
    1ae0:	2000033c 	.word	0x2000033c
		flashy1 = true;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASHY1_OFF,7) == 0)
    1ae4:	49d3      	ldr	r1, [pc, #844]	; (1e34 <data_handler+0xf44>)
    1ae6:	68fb      	ldr	r3, [r7, #12]
    1ae8:	2207      	movs	r2, #7
    1aea:	0018      	movs	r0, r3
    1aec:	4bd2      	ldr	r3, [pc, #840]	; (1e38 <data_handler+0xf48>)
    1aee:	4798      	blx	r3
    1af0:	1e03      	subs	r3, r0, #0
    1af2:	d111      	bne.n	1b18 <data_handler+0xc28>
	{
		flashy1 = false;
    1af4:	4bd1      	ldr	r3, [pc, #836]	; (1e3c <data_handler+0xf4c>)
    1af6:	2200      	movs	r2, #0
    1af8:	701a      	strb	r2, [r3, #0]
		reset_all_lights();
    1afa:	4bd1      	ldr	r3, [pc, #836]	; (1e40 <data_handler+0xf50>)
    1afc:	4798      	blx	r3
		ble_uart_write(buffer);
    1afe:	68fb      	ldr	r3, [r7, #12]
    1b00:	0018      	movs	r0, r3
    1b02:	4bd0      	ldr	r3, [pc, #832]	; (1e44 <data_handler+0xf54>)
    1b04:	4798      	blx	r3
		ble_uart_write(" - ");
    1b06:	4bd0      	ldr	r3, [pc, #832]	; (1e48 <data_handler+0xf58>)
    1b08:	0018      	movs	r0, r3
    1b0a:	4bce      	ldr	r3, [pc, #824]	; (1e44 <data_handler+0xf54>)
    1b0c:	4798      	blx	r3
		ble_uart_write("ACK");
    1b0e:	4bcf      	ldr	r3, [pc, #828]	; (1e4c <data_handler+0xf5c>)
    1b10:	0018      	movs	r0, r3
    1b12:	4bcc      	ldr	r3, [pc, #816]	; (1e44 <data_handler+0xf54>)
    1b14:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1b16:	e2a7      	b.n	2068 <STACK_SIZE+0x68>
		reset_all_lights();
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASHY2_ON,7) == 0)
    1b18:	49cd      	ldr	r1, [pc, #820]	; (1e50 <data_handler+0xf60>)
    1b1a:	68fb      	ldr	r3, [r7, #12]
    1b1c:	2207      	movs	r2, #7
    1b1e:	0018      	movs	r0, r3
    1b20:	4bc5      	ldr	r3, [pc, #788]	; (1e38 <data_handler+0xf48>)
    1b22:	4798      	blx	r3
    1b24:	1e03      	subs	r3, r0, #0
    1b26:	d10f      	bne.n	1b48 <data_handler+0xc58>
	{
		flashy2 = true;
    1b28:	4bca      	ldr	r3, [pc, #808]	; (1e54 <data_handler+0xf64>)
    1b2a:	2201      	movs	r2, #1
    1b2c:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1b2e:	68fb      	ldr	r3, [r7, #12]
    1b30:	0018      	movs	r0, r3
    1b32:	4bc4      	ldr	r3, [pc, #784]	; (1e44 <data_handler+0xf54>)
    1b34:	4798      	blx	r3
		ble_uart_write(" - ");
    1b36:	4bc4      	ldr	r3, [pc, #784]	; (1e48 <data_handler+0xf58>)
    1b38:	0018      	movs	r0, r3
    1b3a:	4bc2      	ldr	r3, [pc, #776]	; (1e44 <data_handler+0xf54>)
    1b3c:	4798      	blx	r3
		ble_uart_write("ACK");
    1b3e:	4bc3      	ldr	r3, [pc, #780]	; (1e4c <data_handler+0xf5c>)
    1b40:	0018      	movs	r0, r3
    1b42:	4bc0      	ldr	r3, [pc, #768]	; (1e44 <data_handler+0xf54>)
    1b44:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1b46:	e28f      	b.n	2068 <STACK_SIZE+0x68>
		flashy2 = true;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASHY2_OFF,7) == 0)
    1b48:	49c3      	ldr	r1, [pc, #780]	; (1e58 <data_handler+0xf68>)
    1b4a:	68fb      	ldr	r3, [r7, #12]
    1b4c:	2207      	movs	r2, #7
    1b4e:	0018      	movs	r0, r3
    1b50:	4bb9      	ldr	r3, [pc, #740]	; (1e38 <data_handler+0xf48>)
    1b52:	4798      	blx	r3
    1b54:	1e03      	subs	r3, r0, #0
    1b56:	d111      	bne.n	1b7c <data_handler+0xc8c>
	{
		reset_all_lights();
    1b58:	4bb9      	ldr	r3, [pc, #740]	; (1e40 <data_handler+0xf50>)
    1b5a:	4798      	blx	r3
		flashy2 = false;
    1b5c:	4bbd      	ldr	r3, [pc, #756]	; (1e54 <data_handler+0xf64>)
    1b5e:	2200      	movs	r2, #0
    1b60:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1b62:	68fb      	ldr	r3, [r7, #12]
    1b64:	0018      	movs	r0, r3
    1b66:	4bb7      	ldr	r3, [pc, #732]	; (1e44 <data_handler+0xf54>)
    1b68:	4798      	blx	r3
		ble_uart_write(" - ");
    1b6a:	4bb7      	ldr	r3, [pc, #732]	; (1e48 <data_handler+0xf58>)
    1b6c:	0018      	movs	r0, r3
    1b6e:	4bb5      	ldr	r3, [pc, #724]	; (1e44 <data_handler+0xf54>)
    1b70:	4798      	blx	r3
		ble_uart_write("ACK");
    1b72:	4bb6      	ldr	r3, [pc, #728]	; (1e4c <data_handler+0xf5c>)
    1b74:	0018      	movs	r0, r3
    1b76:	4bb3      	ldr	r3, [pc, #716]	; (1e44 <data_handler+0xf54>)
    1b78:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1b7a:	e275      	b.n	2068 <STACK_SIZE+0x68>
		flashy2 = false;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASHY3_ON,7) == 0)
    1b7c:	49b7      	ldr	r1, [pc, #732]	; (1e5c <data_handler+0xf6c>)
    1b7e:	68fb      	ldr	r3, [r7, #12]
    1b80:	2207      	movs	r2, #7
    1b82:	0018      	movs	r0, r3
    1b84:	4bac      	ldr	r3, [pc, #688]	; (1e38 <data_handler+0xf48>)
    1b86:	4798      	blx	r3
    1b88:	1e03      	subs	r3, r0, #0
    1b8a:	d10f      	bne.n	1bac <data_handler+0xcbc>
	{
		flashy3 = true;
    1b8c:	4bb4      	ldr	r3, [pc, #720]	; (1e60 <data_handler+0xf70>)
    1b8e:	2201      	movs	r2, #1
    1b90:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1b92:	68fb      	ldr	r3, [r7, #12]
    1b94:	0018      	movs	r0, r3
    1b96:	4bab      	ldr	r3, [pc, #684]	; (1e44 <data_handler+0xf54>)
    1b98:	4798      	blx	r3
		ble_uart_write(" - ");
    1b9a:	4bab      	ldr	r3, [pc, #684]	; (1e48 <data_handler+0xf58>)
    1b9c:	0018      	movs	r0, r3
    1b9e:	4ba9      	ldr	r3, [pc, #676]	; (1e44 <data_handler+0xf54>)
    1ba0:	4798      	blx	r3
		ble_uart_write("ACK");
    1ba2:	4baa      	ldr	r3, [pc, #680]	; (1e4c <data_handler+0xf5c>)
    1ba4:	0018      	movs	r0, r3
    1ba6:	4ba7      	ldr	r3, [pc, #668]	; (1e44 <data_handler+0xf54>)
    1ba8:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1baa:	e25d      	b.n	2068 <STACK_SIZE+0x68>
		flashy3 = true;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASHY3_OFF,7) == 0)
    1bac:	49ad      	ldr	r1, [pc, #692]	; (1e64 <data_handler+0xf74>)
    1bae:	68fb      	ldr	r3, [r7, #12]
    1bb0:	2207      	movs	r2, #7
    1bb2:	0018      	movs	r0, r3
    1bb4:	4ba0      	ldr	r3, [pc, #640]	; (1e38 <data_handler+0xf48>)
    1bb6:	4798      	blx	r3
    1bb8:	1e03      	subs	r3, r0, #0
    1bba:	d111      	bne.n	1be0 <data_handler+0xcf0>
	{
		reset_all_lights();
    1bbc:	4ba0      	ldr	r3, [pc, #640]	; (1e40 <data_handler+0xf50>)
    1bbe:	4798      	blx	r3
		flashy3 = false;
    1bc0:	4ba7      	ldr	r3, [pc, #668]	; (1e60 <data_handler+0xf70>)
    1bc2:	2200      	movs	r2, #0
    1bc4:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1bc6:	68fb      	ldr	r3, [r7, #12]
    1bc8:	0018      	movs	r0, r3
    1bca:	4b9e      	ldr	r3, [pc, #632]	; (1e44 <data_handler+0xf54>)
    1bcc:	4798      	blx	r3
		ble_uart_write(" - ");
    1bce:	4b9e      	ldr	r3, [pc, #632]	; (1e48 <data_handler+0xf58>)
    1bd0:	0018      	movs	r0, r3
    1bd2:	4b9c      	ldr	r3, [pc, #624]	; (1e44 <data_handler+0xf54>)
    1bd4:	4798      	blx	r3
		ble_uart_write("ACK");
    1bd6:	4b9d      	ldr	r3, [pc, #628]	; (1e4c <data_handler+0xf5c>)
    1bd8:	0018      	movs	r0, r3
    1bda:	4b9a      	ldr	r3, [pc, #616]	; (1e44 <data_handler+0xf54>)
    1bdc:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1bde:	e243      	b.n	2068 <STACK_SIZE+0x68>
		flashy3 = false;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASHYFADE_ON,8) == 0)
    1be0:	49a1      	ldr	r1, [pc, #644]	; (1e68 <data_handler+0xf78>)
    1be2:	68fb      	ldr	r3, [r7, #12]
    1be4:	2208      	movs	r2, #8
    1be6:	0018      	movs	r0, r3
    1be8:	4b93      	ldr	r3, [pc, #588]	; (1e38 <data_handler+0xf48>)
    1bea:	4798      	blx	r3
    1bec:	1e03      	subs	r3, r0, #0
    1bee:	d10f      	bne.n	1c10 <data_handler+0xd20>
	{
		flashyfade = true;
    1bf0:	4b9e      	ldr	r3, [pc, #632]	; (1e6c <data_handler+0xf7c>)
    1bf2:	2201      	movs	r2, #1
    1bf4:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1bf6:	68fb      	ldr	r3, [r7, #12]
    1bf8:	0018      	movs	r0, r3
    1bfa:	4b92      	ldr	r3, [pc, #584]	; (1e44 <data_handler+0xf54>)
    1bfc:	4798      	blx	r3
		ble_uart_write(" - ");
    1bfe:	4b92      	ldr	r3, [pc, #584]	; (1e48 <data_handler+0xf58>)
    1c00:	0018      	movs	r0, r3
    1c02:	4b90      	ldr	r3, [pc, #576]	; (1e44 <data_handler+0xf54>)
    1c04:	4798      	blx	r3
		ble_uart_write("ACK");
    1c06:	4b91      	ldr	r3, [pc, #580]	; (1e4c <data_handler+0xf5c>)
    1c08:	0018      	movs	r0, r3
    1c0a:	4b8e      	ldr	r3, [pc, #568]	; (1e44 <data_handler+0xf54>)
    1c0c:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1c0e:	e22b      	b.n	2068 <STACK_SIZE+0x68>
		flashyfade = true;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,FLASHYFADE_OFF,8) == 0)
    1c10:	4997      	ldr	r1, [pc, #604]	; (1e70 <data_handler+0xf80>)
    1c12:	68fb      	ldr	r3, [r7, #12]
    1c14:	2208      	movs	r2, #8
    1c16:	0018      	movs	r0, r3
    1c18:	4b87      	ldr	r3, [pc, #540]	; (1e38 <data_handler+0xf48>)
    1c1a:	4798      	blx	r3
    1c1c:	1e03      	subs	r3, r0, #0
    1c1e:	d111      	bne.n	1c44 <data_handler+0xd54>
	{
		reset_all_lights();
    1c20:	4b87      	ldr	r3, [pc, #540]	; (1e40 <data_handler+0xf50>)
    1c22:	4798      	blx	r3
		flashyfade = false;
    1c24:	4b91      	ldr	r3, [pc, #580]	; (1e6c <data_handler+0xf7c>)
    1c26:	2200      	movs	r2, #0
    1c28:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1c2a:	68fb      	ldr	r3, [r7, #12]
    1c2c:	0018      	movs	r0, r3
    1c2e:	4b85      	ldr	r3, [pc, #532]	; (1e44 <data_handler+0xf54>)
    1c30:	4798      	blx	r3
		ble_uart_write(" - ");
    1c32:	4b85      	ldr	r3, [pc, #532]	; (1e48 <data_handler+0xf58>)
    1c34:	0018      	movs	r0, r3
    1c36:	4b83      	ldr	r3, [pc, #524]	; (1e44 <data_handler+0xf54>)
    1c38:	4798      	blx	r3
		ble_uart_write("ACK");
    1c3a:	4b84      	ldr	r3, [pc, #528]	; (1e4c <data_handler+0xf5c>)
    1c3c:	0018      	movs	r0, r3
    1c3e:	4b81      	ldr	r3, [pc, #516]	; (1e44 <data_handler+0xf54>)
    1c40:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1c42:	e211      	b.n	2068 <STACK_SIZE+0x68>
		flashyfade = false;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if (strncmp(buffer,MASTER_RESET,10) == 0)
    1c44:	498b      	ldr	r1, [pc, #556]	; (1e74 <data_handler+0xf84>)
    1c46:	68fb      	ldr	r3, [r7, #12]
    1c48:	220a      	movs	r2, #10
    1c4a:	0018      	movs	r0, r3
    1c4c:	4b7a      	ldr	r3, [pc, #488]	; (1e38 <data_handler+0xf48>)
    1c4e:	4798      	blx	r3
    1c50:	1e03      	subs	r3, r0, #0
    1c52:	d126      	bne.n	1ca2 <data_handler+0xdb2>
	{
		ble_uart_write("RESET ACK\n");
    1c54:	4b88      	ldr	r3, [pc, #544]	; (1e78 <data_handler+0xf88>)
    1c56:	0018      	movs	r0, r3
    1c58:	4b7a      	ldr	r3, [pc, #488]	; (1e44 <data_handler+0xf54>)
    1c5a:	4798      	blx	r3
		delay_ms(250);
    1c5c:	2000      	movs	r0, #0
    1c5e:	4b87      	ldr	r3, [pc, #540]	; (1e7c <data_handler+0xf8c>)
    1c60:	4798      	blx	r3
    1c62:	0003      	movs	r3, r0
    1c64:	603b      	str	r3, [r7, #0]
    1c66:	2300      	movs	r3, #0
    1c68:	607b      	str	r3, [r7, #4]
    1c6a:	4c85      	ldr	r4, [pc, #532]	; (1e80 <data_handler+0xf90>)
    1c6c:	22fa      	movs	r2, #250	; 0xfa
    1c6e:	2300      	movs	r3, #0
    1c70:	6838      	ldr	r0, [r7, #0]
    1c72:	6879      	ldr	r1, [r7, #4]
    1c74:	47a0      	blx	r4
    1c76:	0003      	movs	r3, r0
    1c78:	000c      	movs	r4, r1
    1c7a:	0019      	movs	r1, r3
    1c7c:	0022      	movs	r2, r4
    1c7e:	4b81      	ldr	r3, [pc, #516]	; (1e84 <data_handler+0xf94>)
    1c80:	2400      	movs	r4, #0
    1c82:	18c9      	adds	r1, r1, r3
    1c84:	4162      	adcs	r2, r4
    1c86:	0008      	movs	r0, r1
    1c88:	0011      	movs	r1, r2
    1c8a:	4c7f      	ldr	r4, [pc, #508]	; (1e88 <data_handler+0xf98>)
    1c8c:	4a7f      	ldr	r2, [pc, #508]	; (1e8c <data_handler+0xf9c>)
    1c8e:	2300      	movs	r3, #0
    1c90:	47a0      	blx	r4
    1c92:	0003      	movs	r3, r0
    1c94:	000c      	movs	r4, r1
    1c96:	0018      	movs	r0, r3
    1c98:	4b7d      	ldr	r3, [pc, #500]	; (1e90 <data_handler+0xfa0>)
    1c9a:	4798      	blx	r3
		wdt_init();
    1c9c:	4b7d      	ldr	r3, [pc, #500]	; (1e94 <data_handler+0xfa4>)
    1c9e:	4798      	blx	r3
		while (1)
		{
			//
		}
    1ca0:	e7fe      	b.n	1ca0 <data_handler+0xdb0>
	}
	else if (strncmp(buffer,MINOR_RESET,sizeof(MINOR_RESET)-1) == 0)
    1ca2:	497d      	ldr	r1, [pc, #500]	; (1e98 <data_handler+0xfa8>)
    1ca4:	68fb      	ldr	r3, [r7, #12]
    1ca6:	2209      	movs	r2, #9
    1ca8:	0018      	movs	r0, r3
    1caa:	4b63      	ldr	r3, [pc, #396]	; (1e38 <data_handler+0xf48>)
    1cac:	4798      	blx	r3
    1cae:	1e03      	subs	r3, r0, #0
    1cb0:	d12f      	bne.n	1d12 <data_handler+0xe22>
	{
		ble_uart_write("MINOR RESET ACK\n");
    1cb2:	4b7a      	ldr	r3, [pc, #488]	; (1e9c <data_handler+0xfac>)
    1cb4:	0018      	movs	r0, r3
    1cb6:	4b63      	ldr	r3, [pc, #396]	; (1e44 <data_handler+0xf54>)
    1cb8:	4798      	blx	r3
		delay_ms(250);
    1cba:	2000      	movs	r0, #0
    1cbc:	4b6f      	ldr	r3, [pc, #444]	; (1e7c <data_handler+0xf8c>)
    1cbe:	4798      	blx	r3
    1cc0:	0003      	movs	r3, r0
    1cc2:	001d      	movs	r5, r3
    1cc4:	2300      	movs	r3, #0
    1cc6:	001e      	movs	r6, r3
    1cc8:	4c6d      	ldr	r4, [pc, #436]	; (1e80 <data_handler+0xf90>)
    1cca:	22fa      	movs	r2, #250	; 0xfa
    1ccc:	2300      	movs	r3, #0
    1cce:	0028      	movs	r0, r5
    1cd0:	0031      	movs	r1, r6
    1cd2:	47a0      	blx	r4
    1cd4:	0003      	movs	r3, r0
    1cd6:	000c      	movs	r4, r1
    1cd8:	0019      	movs	r1, r3
    1cda:	0022      	movs	r2, r4
    1cdc:	4b69      	ldr	r3, [pc, #420]	; (1e84 <data_handler+0xf94>)
    1cde:	2400      	movs	r4, #0
    1ce0:	18c9      	adds	r1, r1, r3
    1ce2:	4162      	adcs	r2, r4
    1ce4:	0008      	movs	r0, r1
    1ce6:	0011      	movs	r1, r2
    1ce8:	4c67      	ldr	r4, [pc, #412]	; (1e88 <data_handler+0xf98>)
    1cea:	4a68      	ldr	r2, [pc, #416]	; (1e8c <data_handler+0xf9c>)
    1cec:	2300      	movs	r3, #0
    1cee:	47a0      	blx	r4
    1cf0:	0003      	movs	r3, r0
    1cf2:	000c      	movs	r4, r1
    1cf4:	0018      	movs	r0, r3
    1cf6:	4b66      	ldr	r3, [pc, #408]	; (1e90 <data_handler+0xfa0>)
    1cf8:	4798      	blx	r3
		sounds_reset();
    1cfa:	4b69      	ldr	r3, [pc, #420]	; (1ea0 <data_handler+0xfb0>)
    1cfc:	4798      	blx	r3
		init_all_ports();
    1cfe:	4b69      	ldr	r3, [pc, #420]	; (1ea4 <data_handler+0xfb4>)
    1d00:	4798      	blx	r3
		party = false;
    1d02:	4b69      	ldr	r3, [pc, #420]	; (1ea8 <data_handler+0xfb8>)
    1d04:	2200      	movs	r2, #0
    1d06:	701a      	strb	r2, [r3, #0]
		ble_uart_write("MINOR RESET DONE\n");
    1d08:	4b68      	ldr	r3, [pc, #416]	; (1eac <data_handler+0xfbc>)
    1d0a:	0018      	movs	r0, r3
    1d0c:	4b4d      	ldr	r3, [pc, #308]	; (1e44 <data_handler+0xf54>)
    1d0e:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1d10:	e1aa      	b.n	2068 <STACK_SIZE+0x68>
		sounds_reset();
		init_all_ports();
		party = false;
		ble_uart_write("MINOR RESET DONE\n");
	}
	else if (strncmp(buffer,PARTY_TRESH_0,sizeof(PARTY_TRESH_0)-1)  == 0)
    1d12:	4967      	ldr	r1, [pc, #412]	; (1eb0 <data_handler+0xfc0>)
    1d14:	68fb      	ldr	r3, [r7, #12]
    1d16:	2208      	movs	r2, #8
    1d18:	0018      	movs	r0, r3
    1d1a:	4b47      	ldr	r3, [pc, #284]	; (1e38 <data_handler+0xf48>)
    1d1c:	4798      	blx	r3
    1d1e:	1e03      	subs	r3, r0, #0
    1d20:	d10f      	bne.n	1d42 <data_handler+0xe52>
	{
		int temp = sizeof(PARTY_TRESH_0);//party_treshold;
    1d22:	2309      	movs	r3, #9
    1d24:	653b      	str	r3, [r7, #80]	; 0x50
		sscanf(buffer,"PRTTRSH0 %d",&temp);
    1d26:	2348      	movs	r3, #72	; 0x48
    1d28:	2208      	movs	r2, #8
    1d2a:	18ba      	adds	r2, r7, r2
    1d2c:	18d2      	adds	r2, r2, r3
    1d2e:	4961      	ldr	r1, [pc, #388]	; (1eb4 <data_handler+0xfc4>)
    1d30:	68fb      	ldr	r3, [r7, #12]
    1d32:	0018      	movs	r0, r3
    1d34:	4b60      	ldr	r3, [pc, #384]	; (1eb8 <data_handler+0xfc8>)
    1d36:	4798      	blx	r3
		party_thresholds[0] = (uint16_t)temp;
    1d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1d3a:	b29a      	uxth	r2, r3
    1d3c:	4b5f      	ldr	r3, [pc, #380]	; (1ebc <data_handler+0xfcc>)
    1d3e:	801a      	strh	r2, [r3, #0]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1d40:	e192      	b.n	2068 <STACK_SIZE+0x68>
	{
		int temp = sizeof(PARTY_TRESH_0);//party_treshold;
		sscanf(buffer,"PRTTRSH0 %d",&temp);
		party_thresholds[0] = (uint16_t)temp;
	}
	else if (strncmp(buffer,PARTY_TRESH_1,sizeof(PARTY_TRESH_1)-1) == 0)
    1d42:	495f      	ldr	r1, [pc, #380]	; (1ec0 <data_handler+0xfd0>)
    1d44:	68fb      	ldr	r3, [r7, #12]
    1d46:	2208      	movs	r2, #8
    1d48:	0018      	movs	r0, r3
    1d4a:	4b3b      	ldr	r3, [pc, #236]	; (1e38 <data_handler+0xf48>)
    1d4c:	4798      	blx	r3
    1d4e:	1e03      	subs	r3, r0, #0
    1d50:	d10f      	bne.n	1d72 <data_handler+0xe82>
	{
		int temp = party_treshold;
    1d52:	4b5c      	ldr	r3, [pc, #368]	; (1ec4 <data_handler+0xfd4>)
    1d54:	64fb      	str	r3, [r7, #76]	; 0x4c
		sscanf(buffer,"PRTTRSH1 %d",&temp);
    1d56:	2344      	movs	r3, #68	; 0x44
    1d58:	2208      	movs	r2, #8
    1d5a:	18ba      	adds	r2, r7, r2
    1d5c:	18d2      	adds	r2, r2, r3
    1d5e:	495a      	ldr	r1, [pc, #360]	; (1ec8 <data_handler+0xfd8>)
    1d60:	68fb      	ldr	r3, [r7, #12]
    1d62:	0018      	movs	r0, r3
    1d64:	4b54      	ldr	r3, [pc, #336]	; (1eb8 <data_handler+0xfc8>)
    1d66:	4798      	blx	r3
		party_thresholds[1] = (uint16_t)temp;
    1d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1d6a:	b29a      	uxth	r2, r3
    1d6c:	4b53      	ldr	r3, [pc, #332]	; (1ebc <data_handler+0xfcc>)
    1d6e:	805a      	strh	r2, [r3, #2]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1d70:	e17a      	b.n	2068 <STACK_SIZE+0x68>
	{
		int temp = party_treshold;
		sscanf(buffer,"PRTTRSH1 %d",&temp);
		party_thresholds[1] = (uint16_t)temp;
	}
	else if (strncmp(buffer,PARTY_TRESH_2,sizeof(PARTY_TRESH_2)-1) == 0)
    1d72:	4956      	ldr	r1, [pc, #344]	; (1ecc <data_handler+0xfdc>)
    1d74:	68fb      	ldr	r3, [r7, #12]
    1d76:	2208      	movs	r2, #8
    1d78:	0018      	movs	r0, r3
    1d7a:	4b2f      	ldr	r3, [pc, #188]	; (1e38 <data_handler+0xf48>)
    1d7c:	4798      	blx	r3
    1d7e:	1e03      	subs	r3, r0, #0
    1d80:	d10f      	bne.n	1da2 <data_handler+0xeb2>
	{
		int temp = party_treshold;
    1d82:	4b50      	ldr	r3, [pc, #320]	; (1ec4 <data_handler+0xfd4>)
    1d84:	64bb      	str	r3, [r7, #72]	; 0x48
		sscanf(buffer,"PRTTRSH2 %d",&temp);
    1d86:	2340      	movs	r3, #64	; 0x40
    1d88:	2208      	movs	r2, #8
    1d8a:	18ba      	adds	r2, r7, r2
    1d8c:	18d2      	adds	r2, r2, r3
    1d8e:	4950      	ldr	r1, [pc, #320]	; (1ed0 <data_handler+0xfe0>)
    1d90:	68fb      	ldr	r3, [r7, #12]
    1d92:	0018      	movs	r0, r3
    1d94:	4b48      	ldr	r3, [pc, #288]	; (1eb8 <data_handler+0xfc8>)
    1d96:	4798      	blx	r3
		party_thresholds[2] = (uint16_t)temp;
    1d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1d9a:	b29a      	uxth	r2, r3
    1d9c:	4b47      	ldr	r3, [pc, #284]	; (1ebc <data_handler+0xfcc>)
    1d9e:	809a      	strh	r2, [r3, #4]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1da0:	e162      	b.n	2068 <STACK_SIZE+0x68>
	{
		int temp = party_treshold;
		sscanf(buffer,"PRTTRSH2 %d",&temp);
		party_thresholds[2] = (uint16_t)temp;
	}
	else if (strncmp(buffer,PARTY_TRESH_3,sizeof(PARTY_TRESH_3)-1) == 0)
    1da2:	494c      	ldr	r1, [pc, #304]	; (1ed4 <data_handler+0xfe4>)
    1da4:	68fb      	ldr	r3, [r7, #12]
    1da6:	2208      	movs	r2, #8
    1da8:	0018      	movs	r0, r3
    1daa:	4b23      	ldr	r3, [pc, #140]	; (1e38 <data_handler+0xf48>)
    1dac:	4798      	blx	r3
    1dae:	1e03      	subs	r3, r0, #0
    1db0:	d10f      	bne.n	1dd2 <data_handler+0xee2>
	{
		int temp = party_treshold;
    1db2:	4b44      	ldr	r3, [pc, #272]	; (1ec4 <data_handler+0xfd4>)
    1db4:	647b      	str	r3, [r7, #68]	; 0x44
		sscanf(buffer,"PRTTRSH3 %d",&temp);
    1db6:	233c      	movs	r3, #60	; 0x3c
    1db8:	2208      	movs	r2, #8
    1dba:	18ba      	adds	r2, r7, r2
    1dbc:	18d2      	adds	r2, r2, r3
    1dbe:	4946      	ldr	r1, [pc, #280]	; (1ed8 <data_handler+0xfe8>)
    1dc0:	68fb      	ldr	r3, [r7, #12]
    1dc2:	0018      	movs	r0, r3
    1dc4:	4b3c      	ldr	r3, [pc, #240]	; (1eb8 <data_handler+0xfc8>)
    1dc6:	4798      	blx	r3
		party_thresholds[3] = (uint16_t)temp;
    1dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1dca:	b29a      	uxth	r2, r3
    1dcc:	4b3b      	ldr	r3, [pc, #236]	; (1ebc <data_handler+0xfcc>)
    1dce:	80da      	strh	r2, [r3, #6]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1dd0:	e14a      	b.n	2068 <STACK_SIZE+0x68>
	{
		int temp = party_treshold;
		sscanf(buffer,"PRTTRSH3 %d",&temp);
		party_thresholds[3] = (uint16_t)temp;
	}
	else if (strncmp(buffer,PARTY_TRESH_4,sizeof(PARTY_TRESH_4)-1) == 0)
    1dd2:	4942      	ldr	r1, [pc, #264]	; (1edc <data_handler+0xfec>)
    1dd4:	68fb      	ldr	r3, [r7, #12]
    1dd6:	2208      	movs	r2, #8
    1dd8:	0018      	movs	r0, r3
    1dda:	4b17      	ldr	r3, [pc, #92]	; (1e38 <data_handler+0xf48>)
    1ddc:	4798      	blx	r3
    1dde:	1e03      	subs	r3, r0, #0
    1de0:	d10f      	bne.n	1e02 <data_handler+0xf12>
	{
		int temp = party_treshold;
    1de2:	4b38      	ldr	r3, [pc, #224]	; (1ec4 <data_handler+0xfd4>)
    1de4:	643b      	str	r3, [r7, #64]	; 0x40
		sscanf(buffer,"PRTTRSH4 %d",&temp);
    1de6:	2338      	movs	r3, #56	; 0x38
    1de8:	2208      	movs	r2, #8
    1dea:	18ba      	adds	r2, r7, r2
    1dec:	18d2      	adds	r2, r2, r3
    1dee:	493c      	ldr	r1, [pc, #240]	; (1ee0 <data_handler+0xff0>)
    1df0:	68fb      	ldr	r3, [r7, #12]
    1df2:	0018      	movs	r0, r3
    1df4:	4b30      	ldr	r3, [pc, #192]	; (1eb8 <data_handler+0xfc8>)
    1df6:	4798      	blx	r3
		party_thresholds[4] = (uint16_t)temp;
    1df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	4b2f      	ldr	r3, [pc, #188]	; (1ebc <data_handler+0xfcc>)
    1dfe:	811a      	strh	r2, [r3, #8]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1e00:	e132      	b.n	2068 <STACK_SIZE+0x68>
	{
		int temp = party_treshold;
		sscanf(buffer,"PRTTRSH4 %d",&temp);
		party_thresholds[4] = (uint16_t)temp;
	}
	else if (strncmp(buffer,PARTY_TRESH_5,sizeof(PARTY_TRESH_5)-1) == 0)
    1e02:	4938      	ldr	r1, [pc, #224]	; (1ee4 <data_handler+0xff4>)
    1e04:	68fb      	ldr	r3, [r7, #12]
    1e06:	2208      	movs	r2, #8
    1e08:	0018      	movs	r0, r3
    1e0a:	4b0b      	ldr	r3, [pc, #44]	; (1e38 <data_handler+0xf48>)
    1e0c:	4798      	blx	r3
    1e0e:	1e03      	subs	r3, r0, #0
    1e10:	d16c      	bne.n	1eec <data_handler+0xffc>
	{
		int temp = party_treshold;
    1e12:	4b2c      	ldr	r3, [pc, #176]	; (1ec4 <data_handler+0xfd4>)
    1e14:	63fb      	str	r3, [r7, #60]	; 0x3c
		sscanf(buffer,"PRTTRSH5 %d",&temp);
    1e16:	2334      	movs	r3, #52	; 0x34
    1e18:	2208      	movs	r2, #8
    1e1a:	18ba      	adds	r2, r7, r2
    1e1c:	18d2      	adds	r2, r2, r3
    1e1e:	4932      	ldr	r1, [pc, #200]	; (1ee8 <data_handler+0xff8>)
    1e20:	68fb      	ldr	r3, [r7, #12]
    1e22:	0018      	movs	r0, r3
    1e24:	4b24      	ldr	r3, [pc, #144]	; (1eb8 <data_handler+0xfc8>)
    1e26:	4798      	blx	r3
		party_thresholds[5] = (uint16_t)temp;
    1e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e2a:	b29a      	uxth	r2, r3
    1e2c:	4b23      	ldr	r3, [pc, #140]	; (1ebc <data_handler+0xfcc>)
    1e2e:	815a      	strh	r2, [r3, #10]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1e30:	e11a      	b.n	2068 <STACK_SIZE+0x68>
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	00006cf0 	.word	0x00006cf0
    1e38:	0000593b 	.word	0x0000593b
    1e3c:	2000033c 	.word	0x2000033c
    1e40:	000029fd 	.word	0x000029fd
    1e44:	00000dbd 	.word	0x00000dbd
    1e48:	00006b44 	.word	0x00006b44
    1e4c:	00006b48 	.word	0x00006b48
    1e50:	00006cf8 	.word	0x00006cf8
    1e54:	20000753 	.word	0x20000753
    1e58:	00006d00 	.word	0x00006d00
    1e5c:	00006d08 	.word	0x00006d08
    1e60:	20000771 	.word	0x20000771
    1e64:	00006d10 	.word	0x00006d10
    1e68:	00006d18 	.word	0x00006d18
    1e6c:	2000076f 	.word	0x2000076f
    1e70:	00006d24 	.word	0x00006d24
    1e74:	00006d30 	.word	0x00006d30
    1e78:	00006d3c 	.word	0x00006d3c
    1e7c:	000048c9 	.word	0x000048c9
    1e80:	00005609 	.word	0x00005609
    1e84:	00001b57 	.word	0x00001b57
    1e88:	000055c9 	.word	0x000055c9
    1e8c:	00001b58 	.word	0x00001b58
    1e90:	20000001 	.word	0x20000001
    1e94:	00000149 	.word	0x00000149
    1e98:	00006d48 	.word	0x00006d48
    1e9c:	00006d54 	.word	0x00006d54
    1ea0:	00003b19 	.word	0x00003b19
    1ea4:	00003045 	.word	0x00003045
    1ea8:	20000765 	.word	0x20000765
    1eac:	00006d68 	.word	0x00006d68
    1eb0:	00006d7c 	.word	0x00006d7c
    1eb4:	00006d88 	.word	0x00006d88
    1eb8:	000058d9 	.word	0x000058d9
    1ebc:	20000340 	.word	0x20000340
    1ec0:	00006d94 	.word	0x00006d94
    1ec4:	000009c4 	.word	0x000009c4
    1ec8:	00006da0 	.word	0x00006da0
    1ecc:	00006dac 	.word	0x00006dac
    1ed0:	00006db8 	.word	0x00006db8
    1ed4:	00006dc4 	.word	0x00006dc4
    1ed8:	00006dd0 	.word	0x00006dd0
    1edc:	00006ddc 	.word	0x00006ddc
    1ee0:	00006de8 	.word	0x00006de8
    1ee4:	00006df4 	.word	0x00006df4
    1ee8:	00006e00 	.word	0x00006e00
	{
		int temp = party_treshold;
		sscanf(buffer,"PRTTRSH5 %d",&temp);
		party_thresholds[5] = (uint16_t)temp;
	}
	else if (strncmp(buffer,PARTY_TRESH_6,sizeof(PARTY_TRESH_6)-1) == 0)
    1eec:	4960      	ldr	r1, [pc, #384]	; (2070 <STACK_SIZE+0x70>)
    1eee:	68fb      	ldr	r3, [r7, #12]
    1ef0:	2208      	movs	r2, #8
    1ef2:	0018      	movs	r0, r3
    1ef4:	4b5f      	ldr	r3, [pc, #380]	; (2074 <STACK_SIZE+0x74>)
    1ef6:	4798      	blx	r3
    1ef8:	1e03      	subs	r3, r0, #0
    1efa:	d10f      	bne.n	1f1c <data_handler+0x102c>
	{
		int temp = party_treshold;
    1efc:	4b5e      	ldr	r3, [pc, #376]	; (2078 <STACK_SIZE+0x78>)
    1efe:	63bb      	str	r3, [r7, #56]	; 0x38
		sscanf(buffer,"PRTTRSH6 %d",&temp);
    1f00:	2330      	movs	r3, #48	; 0x30
    1f02:	2208      	movs	r2, #8
    1f04:	18ba      	adds	r2, r7, r2
    1f06:	18d2      	adds	r2, r2, r3
    1f08:	495c      	ldr	r1, [pc, #368]	; (207c <STACK_SIZE+0x7c>)
    1f0a:	68fb      	ldr	r3, [r7, #12]
    1f0c:	0018      	movs	r0, r3
    1f0e:	4b5c      	ldr	r3, [pc, #368]	; (2080 <STACK_SIZE+0x80>)
    1f10:	4798      	blx	r3
		party_thresholds[6] = (uint16_t)temp;
    1f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1f14:	b29a      	uxth	r2, r3
    1f16:	4b5b      	ldr	r3, [pc, #364]	; (2084 <STACK_SIZE+0x84>)
    1f18:	819a      	strh	r2, [r3, #12]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1f1a:	e0a5      	b.n	2068 <STACK_SIZE+0x68>
	{
		int temp = party_treshold;
		sscanf(buffer,"PRTTRSH6 %d",&temp);
		party_thresholds[6] = (uint16_t)temp;
	}
	else if (strncmp(buffer,PARTY_TRESH_7,sizeof(PARTY_TRESH_7)-1) == 0)
    1f1c:	495a      	ldr	r1, [pc, #360]	; (2088 <STACK_SIZE+0x88>)
    1f1e:	68fb      	ldr	r3, [r7, #12]
    1f20:	2208      	movs	r2, #8
    1f22:	0018      	movs	r0, r3
    1f24:	4b53      	ldr	r3, [pc, #332]	; (2074 <STACK_SIZE+0x74>)
    1f26:	4798      	blx	r3
    1f28:	1e03      	subs	r3, r0, #0
    1f2a:	d10f      	bne.n	1f4c <data_handler+0x105c>
	{
		int temp = party_treshold;
    1f2c:	4b52      	ldr	r3, [pc, #328]	; (2078 <STACK_SIZE+0x78>)
    1f2e:	637b      	str	r3, [r7, #52]	; 0x34
		sscanf(buffer,"PRTTRSH7 %d",&temp);
    1f30:	232c      	movs	r3, #44	; 0x2c
    1f32:	2208      	movs	r2, #8
    1f34:	18ba      	adds	r2, r7, r2
    1f36:	18d2      	adds	r2, r2, r3
    1f38:	4954      	ldr	r1, [pc, #336]	; (208c <STACK_SIZE+0x8c>)
    1f3a:	68fb      	ldr	r3, [r7, #12]
    1f3c:	0018      	movs	r0, r3
    1f3e:	4b50      	ldr	r3, [pc, #320]	; (2080 <STACK_SIZE+0x80>)
    1f40:	4798      	blx	r3
		party_thresholds[7] = (uint16_t)temp;
    1f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1f44:	b29a      	uxth	r2, r3
    1f46:	4b4f      	ldr	r3, [pc, #316]	; (2084 <STACK_SIZE+0x84>)
    1f48:	81da      	strh	r2, [r3, #14]
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1f4a:	e08d      	b.n	2068 <STACK_SIZE+0x68>
	{
		int temp = party_treshold;
		sscanf(buffer,"PRTTRSH7 %d",&temp);
		party_thresholds[7] = (uint16_t)temp;
	}
	else if (strncmp(buffer,CUT_OUT_VALVE_ON,sizeof(CUT_OUT_VALVE_ON)-1) == 0)
    1f4c:	4950      	ldr	r1, [pc, #320]	; (2090 <STACK_SIZE+0x90>)
    1f4e:	68fb      	ldr	r3, [r7, #12]
    1f50:	2205      	movs	r2, #5
    1f52:	0018      	movs	r0, r3
    1f54:	4b47      	ldr	r3, [pc, #284]	; (2074 <STACK_SIZE+0x74>)
    1f56:	4798      	blx	r3
    1f58:	1e03      	subs	r3, r0, #0
    1f5a:	d112      	bne.n	1f82 <data_handler+0x1092>
	{
		valve_open = true;
    1f5c:	4b4d      	ldr	r3, [pc, #308]	; (2094 <STACK_SIZE+0x94>)
    1f5e:	2201      	movs	r2, #1
    1f60:	701a      	strb	r2, [r3, #0]
		valve_close = false;
    1f62:	4b4d      	ldr	r3, [pc, #308]	; (2098 <STACK_SIZE+0x98>)
    1f64:	2200      	movs	r2, #0
    1f66:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1f68:	68fb      	ldr	r3, [r7, #12]
    1f6a:	0018      	movs	r0, r3
    1f6c:	4b4b      	ldr	r3, [pc, #300]	; (209c <STACK_SIZE+0x9c>)
    1f6e:	4798      	blx	r3
		ble_uart_write(" - ");
    1f70:	4b4b      	ldr	r3, [pc, #300]	; (20a0 <STACK_SIZE+0xa0>)
    1f72:	0018      	movs	r0, r3
    1f74:	4b49      	ldr	r3, [pc, #292]	; (209c <STACK_SIZE+0x9c>)
    1f76:	4798      	blx	r3
		ble_uart_write("ACK");
    1f78:	4b4a      	ldr	r3, [pc, #296]	; (20a4 <STACK_SIZE+0xa4>)
    1f7a:	0018      	movs	r0, r3
    1f7c:	4b47      	ldr	r3, [pc, #284]	; (209c <STACK_SIZE+0x9c>)
    1f7e:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1f80:	e072      	b.n	2068 <STACK_SIZE+0x68>
		valve_close = false;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if (strncmp(buffer,CUT_OUT_VALVE_OFF,sizeof(CUT_OUT_VALVE_OFF)-1) == 0)
    1f82:	4949      	ldr	r1, [pc, #292]	; (20a8 <STACK_SIZE+0xa8>)
    1f84:	68fb      	ldr	r3, [r7, #12]
    1f86:	2205      	movs	r2, #5
    1f88:	0018      	movs	r0, r3
    1f8a:	4b3a      	ldr	r3, [pc, #232]	; (2074 <STACK_SIZE+0x74>)
    1f8c:	4798      	blx	r3
    1f8e:	1e03      	subs	r3, r0, #0
    1f90:	d112      	bne.n	1fb8 <data_handler+0x10c8>
	{
		valve_open = false;
    1f92:	4b40      	ldr	r3, [pc, #256]	; (2094 <STACK_SIZE+0x94>)
    1f94:	2200      	movs	r2, #0
    1f96:	701a      	strb	r2, [r3, #0]
		valve_close = true;
    1f98:	4b3f      	ldr	r3, [pc, #252]	; (2098 <STACK_SIZE+0x98>)
    1f9a:	2201      	movs	r2, #1
    1f9c:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1f9e:	68fb      	ldr	r3, [r7, #12]
    1fa0:	0018      	movs	r0, r3
    1fa2:	4b3e      	ldr	r3, [pc, #248]	; (209c <STACK_SIZE+0x9c>)
    1fa4:	4798      	blx	r3
		ble_uart_write(" - ");
    1fa6:	4b3e      	ldr	r3, [pc, #248]	; (20a0 <STACK_SIZE+0xa0>)
    1fa8:	0018      	movs	r0, r3
    1faa:	4b3c      	ldr	r3, [pc, #240]	; (209c <STACK_SIZE+0x9c>)
    1fac:	4798      	blx	r3
		ble_uart_write("ACK");
    1fae:	4b3d      	ldr	r3, [pc, #244]	; (20a4 <STACK_SIZE+0xa4>)
    1fb0:	0018      	movs	r0, r3
    1fb2:	4b3a      	ldr	r3, [pc, #232]	; (209c <STACK_SIZE+0x9c>)
    1fb4:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    1fb6:	e057      	b.n	2068 <STACK_SIZE+0x68>
		valve_close = true;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,PARTY_REV2_ON,sizeof(PARTY_REV2_ON)-1) == 0)
    1fb8:	493c      	ldr	r1, [pc, #240]	; (20ac <STACK_SIZE+0xac>)
    1fba:	68fb      	ldr	r3, [r7, #12]
    1fbc:	2207      	movs	r2, #7
    1fbe:	0018      	movs	r0, r3
    1fc0:	4b2c      	ldr	r3, [pc, #176]	; (2074 <STACK_SIZE+0x74>)
    1fc2:	4798      	blx	r3
    1fc4:	1e03      	subs	r3, r0, #0
    1fc6:	d120      	bne.n	200a <STACK_SIZE+0xa>
	{
		uint8_t temp;
		sscanf(buffer,"PRTRV21 %d",&temp);
    1fc8:	232b      	movs	r3, #43	; 0x2b
    1fca:	2208      	movs	r2, #8
    1fcc:	18ba      	adds	r2, r7, r2
    1fce:	18d2      	adds	r2, r2, r3
    1fd0:	4937      	ldr	r1, [pc, #220]	; (20b0 <STACK_SIZE+0xb0>)
    1fd2:	68fb      	ldr	r3, [r7, #12]
    1fd4:	0018      	movs	r0, r3
    1fd6:	4b2a      	ldr	r3, [pc, #168]	; (2080 <STACK_SIZE+0x80>)
    1fd8:	4798      	blx	r3
		party_band_chosen = temp;
    1fda:	232b      	movs	r3, #43	; 0x2b
    1fdc:	2208      	movs	r2, #8
    1fde:	4694      	mov	ip, r2
    1fe0:	44bc      	add	ip, r7
    1fe2:	4463      	add	r3, ip
    1fe4:	781a      	ldrb	r2, [r3, #0]
    1fe6:	4b33      	ldr	r3, [pc, #204]	; (20b4 <STACK_SIZE+0xb4>)
    1fe8:	701a      	strb	r2, [r3, #0]
		partyrev2 = true;
    1fea:	4b33      	ldr	r3, [pc, #204]	; (20b8 <STACK_SIZE+0xb8>)
    1fec:	2201      	movs	r2, #1
    1fee:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    1ff0:	68fb      	ldr	r3, [r7, #12]
    1ff2:	0018      	movs	r0, r3
    1ff4:	4b29      	ldr	r3, [pc, #164]	; (209c <STACK_SIZE+0x9c>)
    1ff6:	4798      	blx	r3
		ble_uart_write(" - ");
    1ff8:	4b29      	ldr	r3, [pc, #164]	; (20a0 <STACK_SIZE+0xa0>)
    1ffa:	0018      	movs	r0, r3
    1ffc:	4b27      	ldr	r3, [pc, #156]	; (209c <STACK_SIZE+0x9c>)
    1ffe:	4798      	blx	r3
		ble_uart_write("ACK");
    2000:	4b28      	ldr	r3, [pc, #160]	; (20a4 <STACK_SIZE+0xa4>)
    2002:	0018      	movs	r0, r3
    2004:	4b25      	ldr	r3, [pc, #148]	; (209c <STACK_SIZE+0x9c>)
    2006:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    2008:	e02e      	b.n	2068 <STACK_SIZE+0x68>
		partyrev2 = true;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,PARTY_REV2_OFF,sizeof(PARTY_REV2_OFF)-1) == 0)
    200a:	492c      	ldr	r1, [pc, #176]	; (20bc <STACK_SIZE+0xbc>)
    200c:	68fb      	ldr	r3, [r7, #12]
    200e:	2207      	movs	r2, #7
    2010:	0018      	movs	r0, r3
    2012:	4b18      	ldr	r3, [pc, #96]	; (2074 <STACK_SIZE+0x74>)
    2014:	4798      	blx	r3
    2016:	1e03      	subs	r3, r0, #0
    2018:	d10f      	bne.n	203a <STACK_SIZE+0x3a>
	{
		partyrev2 = false;
    201a:	4b27      	ldr	r3, [pc, #156]	; (20b8 <STACK_SIZE+0xb8>)
    201c:	2200      	movs	r2, #0
    201e:	701a      	strb	r2, [r3, #0]
		ble_uart_write(buffer);
    2020:	68fb      	ldr	r3, [r7, #12]
    2022:	0018      	movs	r0, r3
    2024:	4b1d      	ldr	r3, [pc, #116]	; (209c <STACK_SIZE+0x9c>)
    2026:	4798      	blx	r3
		ble_uart_write(" - ");
    2028:	4b1d      	ldr	r3, [pc, #116]	; (20a0 <STACK_SIZE+0xa0>)
    202a:	0018      	movs	r0, r3
    202c:	4b1b      	ldr	r3, [pc, #108]	; (209c <STACK_SIZE+0x9c>)
    202e:	4798      	blx	r3
		ble_uart_write("ACK");
    2030:	4b1c      	ldr	r3, [pc, #112]	; (20a4 <STACK_SIZE+0xa4>)
    2032:	0018      	movs	r0, r3
    2034:	4b19      	ldr	r3, [pc, #100]	; (209c <STACK_SIZE+0x9c>)
    2036:	4798      	blx	r3
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
		execute_order_66 = true;
	}
}
    2038:	e016      	b.n	2068 <STACK_SIZE+0x68>
		partyrev2 = false;
		ble_uart_write(buffer);
		ble_uart_write(" - ");
		ble_uart_write("ACK");
	}
	else if(strncmp(buffer,MASTER_TEST,sizeof(MASTER_TEST)-1) == 0)
    203a:	4921      	ldr	r1, [pc, #132]	; (20c0 <STACK_SIZE+0xc0>)
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	220a      	movs	r2, #10
    2040:	0018      	movs	r0, r3
    2042:	4b0c      	ldr	r3, [pc, #48]	; (2074 <STACK_SIZE+0x74>)
    2044:	4798      	blx	r3
    2046:	1e03      	subs	r3, r0, #0
    2048:	d10e      	bne.n	2068 <STACK_SIZE+0x68>
	{
		ble_uart_write(buffer);
    204a:	68fb      	ldr	r3, [r7, #12]
    204c:	0018      	movs	r0, r3
    204e:	4b13      	ldr	r3, [pc, #76]	; (209c <STACK_SIZE+0x9c>)
    2050:	4798      	blx	r3
		ble_uart_write(" - ");
    2052:	4b13      	ldr	r3, [pc, #76]	; (20a0 <STACK_SIZE+0xa0>)
    2054:	0018      	movs	r0, r3
    2056:	4b11      	ldr	r3, [pc, #68]	; (209c <STACK_SIZE+0x9c>)
    2058:	4798      	blx	r3
		ble_uart_write("ACK");
    205a:	4b12      	ldr	r3, [pc, #72]	; (20a4 <STACK_SIZE+0xa4>)
    205c:	0018      	movs	r0, r3
    205e:	4b0f      	ldr	r3, [pc, #60]	; (209c <STACK_SIZE+0x9c>)
    2060:	4798      	blx	r3
		execute_order_66 = true;
    2062:	4b18      	ldr	r3, [pc, #96]	; (20c4 <STACK_SIZE+0xc4>)
    2064:	2201      	movs	r2, #1
    2066:	701a      	strb	r2, [r3, #0]
	}
}
    2068:	46c0      	nop			; (mov r8, r8)
    206a:	46bd      	mov	sp, r7
    206c:	b019      	add	sp, #100	; 0x64
    206e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2070:	00006e0c 	.word	0x00006e0c
    2074:	0000593b 	.word	0x0000593b
    2078:	000009c4 	.word	0x000009c4
    207c:	00006e18 	.word	0x00006e18
    2080:	000058d9 	.word	0x000058d9
    2084:	20000340 	.word	0x20000340
    2088:	00006e24 	.word	0x00006e24
    208c:	00006e30 	.word	0x00006e30
    2090:	00006e3c 	.word	0x00006e3c
    2094:	2000033b 	.word	0x2000033b
    2098:	20000338 	.word	0x20000338
    209c:	00000dbd 	.word	0x00000dbd
    20a0:	00006b44 	.word	0x00006b44
    20a4:	00006b48 	.word	0x00006b48
    20a8:	00006e44 	.word	0x00006e44
    20ac:	00006e4c 	.word	0x00006e4c
    20b0:	00006e54 	.word	0x00006e54
    20b4:	20000773 	.word	0x20000773
    20b8:	20000339 	.word	0x20000339
    20bc:	00006e60 	.word	0x00006e60
    20c0:	00006e68 	.word	0x00006e68
    20c4:	200007f8 	.word	0x200007f8

000020c8 <update_all_ports>:

void update_all_ports()
{
    20c8:	b580      	push	{r7, lr}
    20ca:	b082      	sub	sp, #8
    20cc:	af00      	add	r7, sp, #0
	if (!port_update_ongoing)
    20ce:	4b27      	ldr	r3, [pc, #156]	; (216c <update_all_ports+0xa4>)
    20d0:	781b      	ldrb	r3, [r3, #0]
    20d2:	2201      	movs	r2, #1
    20d4:	4053      	eors	r3, r2
    20d6:	b2db      	uxtb	r3, r3
    20d8:	2b00      	cmp	r3, #0
    20da:	d042      	beq.n	2162 <update_all_ports+0x9a>
	{
		port_update_ongoing = true;
    20dc:	4b23      	ldr	r3, [pc, #140]	; (216c <update_all_ports+0xa4>)
    20de:	2201      	movs	r2, #1
    20e0:	701a      	strb	r2, [r3, #0]
		init_all_ports();
    20e2:	4b23      	ldr	r3, [pc, #140]	; (2170 <update_all_ports+0xa8>)
    20e4:	4798      	blx	r3
		for (int i=0;i<8;i++)
    20e6:	2300      	movs	r3, #0
    20e8:	607b      	str	r3, [r7, #4]
    20ea:	e034      	b.n	2156 <update_all_ports+0x8e>
		{
			mcp23017_data.devices[i].outputs.pa7 = 1;
    20ec:	4a21      	ldr	r2, [pc, #132]	; (2174 <update_all_ports+0xac>)
    20ee:	687b      	ldr	r3, [r7, #4]
    20f0:	2108      	movs	r1, #8
    20f2:	011b      	lsls	r3, r3, #4
    20f4:	18d3      	adds	r3, r2, r3
    20f6:	185b      	adds	r3, r3, r1
    20f8:	781a      	ldrb	r2, [r3, #0]
    20fa:	2180      	movs	r1, #128	; 0x80
    20fc:	4249      	negs	r1, r1
    20fe:	430a      	orrs	r2, r1
    2100:	701a      	strb	r2, [r3, #0]
			mcp23017_data.devices[i].outputs.pb7 = 1;
    2102:	4a1c      	ldr	r2, [pc, #112]	; (2174 <update_all_ports+0xac>)
    2104:	687b      	ldr	r3, [r7, #4]
    2106:	2108      	movs	r1, #8
    2108:	011b      	lsls	r3, r3, #4
    210a:	18d3      	adds	r3, r2, r3
    210c:	185b      	adds	r3, r3, r1
    210e:	785a      	ldrb	r2, [r3, #1]
    2110:	2180      	movs	r1, #128	; 0x80
    2112:	4249      	negs	r1, r1
    2114:	430a      	orrs	r2, r1
    2116:	705a      	strb	r2, [r3, #1]
			mcp23017_data.devices[i].status = mcp23017_set_pins(MCP23017_I2C_ADDR_000+i,mcp23017_data.devices[i].outputs.ports[0],mcp23017_data.devices[i].outputs.ports[1]);
    2118:	687b      	ldr	r3, [r7, #4]
    211a:	b2db      	uxtb	r3, r3
    211c:	3320      	adds	r3, #32
    211e:	b2d8      	uxtb	r0, r3
    2120:	4a14      	ldr	r2, [pc, #80]	; (2174 <update_all_ports+0xac>)
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	011b      	lsls	r3, r3, #4
    2126:	18d3      	adds	r3, r2, r3
    2128:	3308      	adds	r3, #8
    212a:	7819      	ldrb	r1, [r3, #0]
    212c:	4a11      	ldr	r2, [pc, #68]	; (2174 <update_all_ports+0xac>)
    212e:	687b      	ldr	r3, [r7, #4]
    2130:	011b      	lsls	r3, r3, #4
    2132:	18d3      	adds	r3, r2, r3
    2134:	3309      	adds	r3, #9
    2136:	781b      	ldrb	r3, [r3, #0]
    2138:	001a      	movs	r2, r3
    213a:	4b0f      	ldr	r3, [pc, #60]	; (2178 <update_all_ports+0xb0>)
    213c:	4798      	blx	r3
    213e:	0003      	movs	r3, r0
    2140:	0019      	movs	r1, r3
    2142:	4a0c      	ldr	r2, [pc, #48]	; (2174 <update_all_ports+0xac>)
    2144:	687b      	ldr	r3, [r7, #4]
    2146:	011b      	lsls	r3, r3, #4
    2148:	18d3      	adds	r3, r2, r3
    214a:	3303      	adds	r3, #3
    214c:	1c0a      	adds	r2, r1, #0
    214e:	701a      	strb	r2, [r3, #0]
{
	if (!port_update_ongoing)
	{
		port_update_ongoing = true;
		init_all_ports();
		for (int i=0;i<8;i++)
    2150:	687b      	ldr	r3, [r7, #4]
    2152:	3301      	adds	r3, #1
    2154:	607b      	str	r3, [r7, #4]
    2156:	687b      	ldr	r3, [r7, #4]
    2158:	2b07      	cmp	r3, #7
    215a:	ddc7      	ble.n	20ec <update_all_ports+0x24>
		{
			mcp23017_data.devices[i].outputs.pa7 = 1;
			mcp23017_data.devices[i].outputs.pb7 = 1;
			mcp23017_data.devices[i].status = mcp23017_set_pins(MCP23017_I2C_ADDR_000+i,mcp23017_data.devices[i].outputs.ports[0],mcp23017_data.devices[i].outputs.ports[1]);
		}
		port_update_ongoing = false;
    215c:	4b03      	ldr	r3, [pc, #12]	; (216c <update_all_ports+0xa4>)
    215e:	2200      	movs	r2, #0
    2160:	701a      	strb	r2, [r3, #0]
	}
}
    2162:	46c0      	nop			; (mov r8, r8)
    2164:	46bd      	mov	sp, r7
    2166:	b002      	add	sp, #8
    2168:	bd80      	pop	{r7, pc}
    216a:	46c0      	nop			; (mov r8, r8)
    216c:	2000076b 	.word	0x2000076b
    2170:	00003045 	.word	0x00003045
    2174:	200000e0 	.word	0x200000e0
    2178:	0000311d 	.word	0x0000311d

0000217c <party_lights>:
	}
}


void party_lights(uint16_t party_vals[])
{
    217c:	b590      	push	{r4, r7, lr}
    217e:	b083      	sub	sp, #12
    2180:	af00      	add	r7, sp, #0
    2182:	6078      	str	r0, [r7, #4]
	if (party_vals[0] > party_thresholds[0])
    2184:	687b      	ldr	r3, [r7, #4]
    2186:	881a      	ldrh	r2, [r3, #0]
    2188:	4b94      	ldr	r3, [pc, #592]	; (23dc <party_lights+0x260>)
    218a:	881b      	ldrh	r3, [r3, #0]
    218c:	429a      	cmp	r2, r3
    218e:	d91e      	bls.n	21ce <party_lights+0x52>
	{
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR,SUB_LEFT_PIN,true);
    2190:	2301      	movs	r3, #1
    2192:	2203      	movs	r2, #3
    2194:	2103      	movs	r1, #3
    2196:	2000      	movs	r0, #0
    2198:	4c91      	ldr	r4, [pc, #580]	; (23e0 <party_lights+0x264>)
    219a:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR,SUB_RIGHT_PIN,true);
    219c:	2301      	movs	r3, #1
    219e:	2204      	movs	r2, #4
    21a0:	2103      	movs	r1, #3
    21a2:	2000      	movs	r0, #0
    21a4:	4c8e      	ldr	r4, [pc, #568]	; (23e0 <party_lights+0x264>)
    21a6:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    21a8:	2301      	movs	r3, #1
    21aa:	2201      	movs	r2, #1
    21ac:	2104      	movs	r1, #4
    21ae:	2000      	movs	r0, #0
    21b0:	4c8b      	ldr	r4, [pc, #556]	; (23e0 <party_lights+0x264>)
    21b2:	47a0      	blx	r4
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    21b4:	2301      	movs	r3, #1
    21b6:	2201      	movs	r2, #1
    21b8:	2103      	movs	r1, #3
    21ba:	2000      	movs	r0, #0
    21bc:	4c88      	ldr	r4, [pc, #544]	; (23e0 <party_lights+0x264>)
    21be:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,true);
    21c0:	2301      	movs	r3, #1
    21c2:	2204      	movs	r2, #4
    21c4:	2105      	movs	r1, #5
    21c6:	2000      	movs	r0, #0
    21c8:	4c85      	ldr	r4, [pc, #532]	; (23e0 <party_lights+0x264>)
    21ca:	47a0      	blx	r4
    21cc:	e01d      	b.n	220a <party_lights+0x8e>
	}
	else
	{
		configure_pin(SUB_LEFT_PORT,SUB_LEFT_ADR, SUB_LEFT_PIN,false);
    21ce:	2300      	movs	r3, #0
    21d0:	2203      	movs	r2, #3
    21d2:	2103      	movs	r1, #3
    21d4:	2000      	movs	r0, #0
    21d6:	4c82      	ldr	r4, [pc, #520]	; (23e0 <party_lights+0x264>)
    21d8:	47a0      	blx	r4
		configure_pin(SUB_RIGHT_PORT,SUB_RIGHT_ADR, SUB_RIGHT_PIN,false);
    21da:	2300      	movs	r3, #0
    21dc:	2204      	movs	r2, #4
    21de:	2103      	movs	r1, #3
    21e0:	2000      	movs	r0, #0
    21e2:	4c7f      	ldr	r4, [pc, #508]	; (23e0 <party_lights+0x264>)
    21e4:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    21e6:	2300      	movs	r3, #0
    21e8:	2201      	movs	r2, #1
    21ea:	2104      	movs	r1, #4
    21ec:	2000      	movs	r0, #0
    21ee:	4c7c      	ldr	r4, [pc, #496]	; (23e0 <party_lights+0x264>)
    21f0:	47a0      	blx	r4
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    21f2:	2300      	movs	r3, #0
    21f4:	2201      	movs	r2, #1
    21f6:	2103      	movs	r1, #3
    21f8:	2000      	movs	r0, #0
    21fa:	4c79      	ldr	r4, [pc, #484]	; (23e0 <party_lights+0x264>)
    21fc:	47a0      	blx	r4
		configure_pin(CABIN_BACK_PORT,CABIN_BACK_ADR,CABIN_BACK_PIN,false);
    21fe:	2300      	movs	r3, #0
    2200:	2204      	movs	r2, #4
    2202:	2105      	movs	r1, #5
    2204:	2000      	movs	r0, #0
    2206:	4c76      	ldr	r4, [pc, #472]	; (23e0 <party_lights+0x264>)
    2208:	47a0      	blx	r4
	}
	if (party_vals[1] > party_thresholds[1])
    220a:	687b      	ldr	r3, [r7, #4]
    220c:	3302      	adds	r3, #2
    220e:	881a      	ldrh	r2, [r3, #0]
    2210:	4b72      	ldr	r3, [pc, #456]	; (23dc <party_lights+0x260>)
    2212:	885b      	ldrh	r3, [r3, #2]
    2214:	429a      	cmp	r2, r3
    2216:	d918      	bls.n	224a <party_lights+0xce>
	{
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    2218:	2301      	movs	r3, #1
    221a:	2200      	movs	r2, #0
    221c:	2102      	movs	r1, #2
    221e:	2000      	movs	r0, #0
    2220:	4c6f      	ldr	r4, [pc, #444]	; (23e0 <party_lights+0x264>)
    2222:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    2224:	2301      	movs	r3, #1
    2226:	2200      	movs	r2, #0
    2228:	2101      	movs	r1, #1
    222a:	2000      	movs	r0, #0
    222c:	4c6c      	ldr	r4, [pc, #432]	; (23e0 <party_lights+0x264>)
    222e:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    2230:	2301      	movs	r3, #1
    2232:	2200      	movs	r2, #0
    2234:	2104      	movs	r1, #4
    2236:	2000      	movs	r0, #0
    2238:	4c69      	ldr	r4, [pc, #420]	; (23e0 <party_lights+0x264>)
    223a:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    223c:	2301      	movs	r3, #1
    223e:	2200      	movs	r2, #0
    2240:	2103      	movs	r1, #3
    2242:	2000      	movs	r0, #0
    2244:	4c66      	ldr	r4, [pc, #408]	; (23e0 <party_lights+0x264>)
    2246:	47a0      	blx	r4
    2248:	e017      	b.n	227a <party_lights+0xfe>
	}
	else
	{
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,false);
    224a:	2300      	movs	r3, #0
    224c:	2200      	movs	r2, #0
    224e:	2102      	movs	r1, #2
    2250:	2000      	movs	r0, #0
    2252:	4c63      	ldr	r4, [pc, #396]	; (23e0 <party_lights+0x264>)
    2254:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,false);
    2256:	2300      	movs	r3, #0
    2258:	2200      	movs	r2, #0
    225a:	2101      	movs	r1, #1
    225c:	2000      	movs	r0, #0
    225e:	4c60      	ldr	r4, [pc, #384]	; (23e0 <party_lights+0x264>)
    2260:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    2262:	2300      	movs	r3, #0
    2264:	2200      	movs	r2, #0
    2266:	2104      	movs	r1, #4
    2268:	2000      	movs	r0, #0
    226a:	4c5d      	ldr	r4, [pc, #372]	; (23e0 <party_lights+0x264>)
    226c:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    226e:	2300      	movs	r3, #0
    2270:	2200      	movs	r2, #0
    2272:	2103      	movs	r1, #3
    2274:	2000      	movs	r0, #0
    2276:	4c5a      	ldr	r4, [pc, #360]	; (23e0 <party_lights+0x264>)
    2278:	47a0      	blx	r4
	}
	if (party_vals[2] > party_thresholds[2])
    227a:	687b      	ldr	r3, [r7, #4]
    227c:	3304      	adds	r3, #4
    227e:	881a      	ldrh	r2, [r3, #0]
    2280:	4b56      	ldr	r3, [pc, #344]	; (23dc <party_lights+0x260>)
    2282:	889b      	ldrh	r3, [r3, #4]
    2284:	429a      	cmp	r2, r3
    2286:	d90c      	bls.n	22a2 <party_lights+0x126>
	{
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    2288:	2301      	movs	r3, #1
    228a:	2201      	movs	r2, #1
    228c:	2102      	movs	r1, #2
    228e:	2000      	movs	r0, #0
    2290:	4c53      	ldr	r4, [pc, #332]	; (23e0 <party_lights+0x264>)
    2292:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    2294:	2301      	movs	r3, #1
    2296:	2201      	movs	r2, #1
    2298:	2101      	movs	r1, #1
    229a:	2000      	movs	r0, #0
    229c:	4c50      	ldr	r4, [pc, #320]	; (23e0 <party_lights+0x264>)
    229e:	47a0      	blx	r4
    22a0:	e00b      	b.n	22ba <party_lights+0x13e>
	}
	else
	{
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    22a2:	2300      	movs	r3, #0
    22a4:	2201      	movs	r2, #1
    22a6:	2102      	movs	r1, #2
    22a8:	2000      	movs	r0, #0
    22aa:	4c4d      	ldr	r4, [pc, #308]	; (23e0 <party_lights+0x264>)
    22ac:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    22ae:	2300      	movs	r3, #0
    22b0:	2201      	movs	r2, #1
    22b2:	2101      	movs	r1, #1
    22b4:	2000      	movs	r0, #0
    22b6:	4c4a      	ldr	r4, [pc, #296]	; (23e0 <party_lights+0x264>)
    22b8:	47a0      	blx	r4
	}
	if (party_vals[3] > party_thresholds[3])
    22ba:	687b      	ldr	r3, [r7, #4]
    22bc:	3306      	adds	r3, #6
    22be:	881a      	ldrh	r2, [r3, #0]
    22c0:	4b46      	ldr	r3, [pc, #280]	; (23dc <party_lights+0x260>)
    22c2:	88db      	ldrh	r3, [r3, #6]
    22c4:	429a      	cmp	r2, r3
    22c6:	d912      	bls.n	22ee <party_lights+0x172>
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    22c8:	2301      	movs	r3, #1
    22ca:	2202      	movs	r2, #2
    22cc:	2102      	movs	r1, #2
    22ce:	2000      	movs	r0, #0
    22d0:	4c43      	ldr	r4, [pc, #268]	; (23e0 <party_lights+0x264>)
    22d2:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    22d4:	2301      	movs	r3, #1
    22d6:	2202      	movs	r2, #2
    22d8:	2101      	movs	r1, #1
    22da:	2000      	movs	r0, #0
    22dc:	4c40      	ldr	r4, [pc, #256]	; (23e0 <party_lights+0x264>)
    22de:	47a0      	blx	r4
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,true);
    22e0:	2301      	movs	r3, #1
    22e2:	2203      	movs	r2, #3
    22e4:	2105      	movs	r1, #5
    22e6:	2000      	movs	r0, #0
    22e8:	4c3d      	ldr	r4, [pc, #244]	; (23e0 <party_lights+0x264>)
    22ea:	47a0      	blx	r4
    22ec:	e011      	b.n	2312 <party_lights+0x196>
	}
	else
	{
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    22ee:	2300      	movs	r3, #0
    22f0:	2202      	movs	r2, #2
    22f2:	2102      	movs	r1, #2
    22f4:	2000      	movs	r0, #0
    22f6:	4c3a      	ldr	r4, [pc, #232]	; (23e0 <party_lights+0x264>)
    22f8:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    22fa:	2300      	movs	r3, #0
    22fc:	2202      	movs	r2, #2
    22fe:	2101      	movs	r1, #1
    2300:	2000      	movs	r0, #0
    2302:	4c37      	ldr	r4, [pc, #220]	; (23e0 <party_lights+0x264>)
    2304:	47a0      	blx	r4
		configure_pin(CABIN_MIDDLE_PORT,CABIN_MIDDLE_ADR,CABIN_MIDDLE_PIN,false);
    2306:	2300      	movs	r3, #0
    2308:	2203      	movs	r2, #3
    230a:	2105      	movs	r1, #5
    230c:	2000      	movs	r0, #0
    230e:	4c34      	ldr	r4, [pc, #208]	; (23e0 <party_lights+0x264>)
    2310:	47a0      	blx	r4

	}
	if (party_vals[4] > party_thresholds[4])
    2312:	687b      	ldr	r3, [r7, #4]
    2314:	3308      	adds	r3, #8
    2316:	881a      	ldrh	r2, [r3, #0]
    2318:	4b30      	ldr	r3, [pc, #192]	; (23dc <party_lights+0x260>)
    231a:	891b      	ldrh	r3, [r3, #8]
    231c:	429a      	cmp	r2, r3
    231e:	d912      	bls.n	2346 <party_lights+0x1ca>
	{
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    2320:	2301      	movs	r3, #1
    2322:	2202      	movs	r2, #2
    2324:	2104      	movs	r1, #4
    2326:	2000      	movs	r0, #0
    2328:	4c2d      	ldr	r4, [pc, #180]	; (23e0 <party_lights+0x264>)
    232a:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    232c:	2301      	movs	r3, #1
    232e:	2202      	movs	r2, #2
    2330:	2103      	movs	r1, #3
    2332:	2000      	movs	r0, #0
    2334:	4c2a      	ldr	r4, [pc, #168]	; (23e0 <party_lights+0x264>)
    2336:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,true);
    2338:	2301      	movs	r3, #1
    233a:	2202      	movs	r2, #2
    233c:	2105      	movs	r1, #5
    233e:	2000      	movs	r0, #0
    2340:	4c27      	ldr	r4, [pc, #156]	; (23e0 <party_lights+0x264>)
    2342:	47a0      	blx	r4
    2344:	e011      	b.n	236a <party_lights+0x1ee>
	}
	else
	{
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,false);
    2346:	2300      	movs	r3, #0
    2348:	2202      	movs	r2, #2
    234a:	2104      	movs	r1, #4
    234c:	2000      	movs	r0, #0
    234e:	4c24      	ldr	r4, [pc, #144]	; (23e0 <party_lights+0x264>)
    2350:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,false);
    2352:	2300      	movs	r3, #0
    2354:	2202      	movs	r2, #2
    2356:	2103      	movs	r1, #3
    2358:	2000      	movs	r0, #0
    235a:	4c21      	ldr	r4, [pc, #132]	; (23e0 <party_lights+0x264>)
    235c:	47a0      	blx	r4
		configure_pin(CABIN_FRONT_PORT,CABIN_FRONT_ADR,CABIN_FRONT_PIN,false);
    235e:	2300      	movs	r3, #0
    2360:	2202      	movs	r2, #2
    2362:	2105      	movs	r1, #5
    2364:	2000      	movs	r0, #0
    2366:	4c1e      	ldr	r4, [pc, #120]	; (23e0 <party_lights+0x264>)
    2368:	47a0      	blx	r4
	}
	if (party_vals[5] > party_thresholds[5])
    236a:	687b      	ldr	r3, [r7, #4]
    236c:	330a      	adds	r3, #10
    236e:	881a      	ldrh	r2, [r3, #0]
    2370:	4b1a      	ldr	r3, [pc, #104]	; (23dc <party_lights+0x260>)
    2372:	895b      	ldrh	r3, [r3, #10]
    2374:	429a      	cmp	r2, r3
    2376:	d90c      	bls.n	2392 <party_lights+0x216>
	{
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    2378:	2301      	movs	r3, #1
    237a:	2203      	movs	r2, #3
    237c:	2101      	movs	r1, #1
    237e:	2000      	movs	r0, #0
    2380:	4c17      	ldr	r4, [pc, #92]	; (23e0 <party_lights+0x264>)
    2382:	47a0      	blx	r4
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    2384:	2301      	movs	r3, #1
    2386:	2203      	movs	r2, #3
    2388:	2102      	movs	r1, #2
    238a:	2000      	movs	r0, #0
    238c:	4c14      	ldr	r4, [pc, #80]	; (23e0 <party_lights+0x264>)
    238e:	47a0      	blx	r4
    2390:	e00b      	b.n	23aa <party_lights+0x22e>
	}
	else
	{
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    2392:	2300      	movs	r3, #0
    2394:	2203      	movs	r2, #3
    2396:	2101      	movs	r1, #1
    2398:	2000      	movs	r0, #0
    239a:	4c11      	ldr	r4, [pc, #68]	; (23e0 <party_lights+0x264>)
    239c:	47a0      	blx	r4
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    239e:	2300      	movs	r3, #0
    23a0:	2203      	movs	r2, #3
    23a2:	2102      	movs	r1, #2
    23a4:	2000      	movs	r0, #0
    23a6:	4c0e      	ldr	r4, [pc, #56]	; (23e0 <party_lights+0x264>)
    23a8:	47a0      	blx	r4
	}
	if (party_vals[6] > party_thresholds[6])
    23aa:	687b      	ldr	r3, [r7, #4]
    23ac:	330c      	adds	r3, #12
    23ae:	881a      	ldrh	r2, [r3, #0]
    23b0:	4b0a      	ldr	r3, [pc, #40]	; (23dc <party_lights+0x260>)
    23b2:	899b      	ldrh	r3, [r3, #12]
    23b4:	429a      	cmp	r2, r3
    23b6:	d906      	bls.n	23c6 <party_lights+0x24a>
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    23b8:	2301      	movs	r3, #1
    23ba:	2204      	movs	r2, #4
    23bc:	2101      	movs	r1, #1
    23be:	2000      	movs	r0, #0
    23c0:	4c07      	ldr	r4, [pc, #28]	; (23e0 <party_lights+0x264>)
    23c2:	47a0      	blx	r4
	}
	else
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
	}
}
    23c4:	e005      	b.n	23d2 <party_lights+0x256>
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
	}
	else
	{
		configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    23c6:	2300      	movs	r3, #0
    23c8:	2204      	movs	r2, #4
    23ca:	2101      	movs	r1, #1
    23cc:	2000      	movs	r0, #0
    23ce:	4c04      	ldr	r4, [pc, #16]	; (23e0 <party_lights+0x264>)
    23d0:	47a0      	blx	r4
	}
}
    23d2:	46c0      	nop			; (mov r8, r8)
    23d4:	46bd      	mov	sp, r7
    23d6:	b003      	add	sp, #12
    23d8:	bd90      	pop	{r4, r7, pc}
    23da:	46c0      	nop			; (mov r8, r8)
    23dc:	20000340 	.word	0x20000340
    23e0:	00002c75 	.word	0x00002c75

000023e4 <flashy_flash1>:
	configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,party_vals[band]>party_thresholds[band]+300);
	configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,party_vals[band]>party_thresholds[band]+300);
}

void flashy_flash1()
{
    23e4:	b5b0      	push	{r4, r5, r7, lr}
    23e6:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
    23e8:	4b48      	ldr	r3, [pc, #288]	; (250c <flashy_flash1+0x128>)
    23ea:	781b      	ldrb	r3, [r3, #0]
    23ec:	2b0c      	cmp	r3, #12
    23ee:	d900      	bls.n	23f2 <flashy_flash1+0xe>
    23f0:	e07c      	b.n	24ec <flashy_flash1+0x108>
    23f2:	009a      	lsls	r2, r3, #2
    23f4:	4b46      	ldr	r3, [pc, #280]	; (2510 <flashy_flash1+0x12c>)
    23f6:	18d3      	adds	r3, r2, r3
    23f8:	681b      	ldr	r3, [r3, #0]
    23fa:	469f      	mov	pc, r3
	{
		case 0:
			reset_all_lights();
    23fc:	4b45      	ldr	r3, [pc, #276]	; (2514 <flashy_flash1+0x130>)
    23fe:	4798      	blx	r3
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    2400:	2301      	movs	r3, #1
    2402:	2201      	movs	r2, #1
    2404:	2102      	movs	r1, #2
    2406:	2000      	movs	r0, #0
    2408:	4c43      	ldr	r4, [pc, #268]	; (2518 <flashy_flash1+0x134>)
    240a:	47a0      	blx	r4
			break;
    240c:	e074      	b.n	24f8 <flashy_flash1+0x114>
		case 1:
			reset_all_lights();
    240e:	4b41      	ldr	r3, [pc, #260]	; (2514 <flashy_flash1+0x130>)
    2410:	4798      	blx	r3
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    2412:	2301      	movs	r3, #1
    2414:	2202      	movs	r2, #2
    2416:	2102      	movs	r1, #2
    2418:	2000      	movs	r0, #0
    241a:	4c3f      	ldr	r4, [pc, #252]	; (2518 <flashy_flash1+0x134>)
    241c:	47a0      	blx	r4
			break;
    241e:	e06b      	b.n	24f8 <flashy_flash1+0x114>
		case 2:
			reset_all_lights();
    2420:	4b3c      	ldr	r3, [pc, #240]	; (2514 <flashy_flash1+0x130>)
    2422:	4798      	blx	r3
			configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    2424:	2301      	movs	r3, #1
    2426:	2200      	movs	r2, #0
    2428:	2102      	movs	r1, #2
    242a:	2000      	movs	r0, #0
    242c:	4c3a      	ldr	r4, [pc, #232]	; (2518 <flashy_flash1+0x134>)
    242e:	47a0      	blx	r4
			break;
    2430:	e062      	b.n	24f8 <flashy_flash1+0x114>
		case 3:
			reset_all_lights();
    2432:	4b38      	ldr	r3, [pc, #224]	; (2514 <flashy_flash1+0x130>)
    2434:	4798      	blx	r3
			configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    2436:	2301      	movs	r3, #1
    2438:	2200      	movs	r2, #0
    243a:	2101      	movs	r1, #1
    243c:	2000      	movs	r0, #0
    243e:	4c36      	ldr	r4, [pc, #216]	; (2518 <flashy_flash1+0x134>)
    2440:	47a0      	blx	r4
			state++;
    2442:	4b32      	ldr	r3, [pc, #200]	; (250c <flashy_flash1+0x128>)
    2444:	781b      	ldrb	r3, [r3, #0]
    2446:	3301      	adds	r3, #1
    2448:	b2da      	uxtb	r2, r3
    244a:	4b30      	ldr	r3, [pc, #192]	; (250c <flashy_flash1+0x128>)
    244c:	701a      	strb	r2, [r3, #0]
			break;
    244e:	e053      	b.n	24f8 <flashy_flash1+0x114>
		case 4:
			reset_all_lights();
    2450:	4b30      	ldr	r3, [pc, #192]	; (2514 <flashy_flash1+0x130>)
    2452:	4798      	blx	r3
			configure_pin(HIGH_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    2454:	2301      	movs	r3, #1
    2456:	2201      	movs	r2, #1
    2458:	2101      	movs	r1, #1
    245a:	2000      	movs	r0, #0
    245c:	4c2e      	ldr	r4, [pc, #184]	; (2518 <flashy_flash1+0x134>)
    245e:	47a0      	blx	r4
			break;
    2460:	e04a      	b.n	24f8 <flashy_flash1+0x114>
		case 5:
			reset_all_lights();
    2462:	4b2c      	ldr	r3, [pc, #176]	; (2514 <flashy_flash1+0x130>)
    2464:	4798      	blx	r3
			configure_pin(LOW_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    2466:	2301      	movs	r3, #1
    2468:	2202      	movs	r2, #2
    246a:	2101      	movs	r1, #1
    246c:	2000      	movs	r0, #0
    246e:	4c2a      	ldr	r4, [pc, #168]	; (2518 <flashy_flash1+0x134>)
    2470:	47a0      	blx	r4
			break;
    2472:	e041      	b.n	24f8 <flashy_flash1+0x114>
		case 6:
			reset_all_lights();
    2474:	4b27      	ldr	r3, [pc, #156]	; (2514 <flashy_flash1+0x130>)
    2476:	4798      	blx	r3
			configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    2478:	2301      	movs	r3, #1
    247a:	2202      	movs	r2, #2
    247c:	2103      	movs	r1, #3
    247e:	2000      	movs	r0, #0
    2480:	4c25      	ldr	r4, [pc, #148]	; (2518 <flashy_flash1+0x134>)
    2482:	47a0      	blx	r4
			break;
    2484:	e038      	b.n	24f8 <flashy_flash1+0x114>
		case 7:
			reset_all_lights();
    2486:	4b23      	ldr	r3, [pc, #140]	; (2514 <flashy_flash1+0x130>)
    2488:	4798      	blx	r3
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    248a:	2301      	movs	r3, #1
    248c:	2201      	movs	r2, #1
    248e:	2103      	movs	r1, #3
    2490:	2000      	movs	r0, #0
    2492:	4c21      	ldr	r4, [pc, #132]	; (2518 <flashy_flash1+0x134>)
    2494:	47a0      	blx	r4
			break;
    2496:	e02f      	b.n	24f8 <flashy_flash1+0x114>
		case 8:
			reset_all_lights();
    2498:	4b1e      	ldr	r3, [pc, #120]	; (2514 <flashy_flash1+0x130>)
    249a:	4798      	blx	r3
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    249c:	2301      	movs	r3, #1
    249e:	2200      	movs	r2, #0
    24a0:	2103      	movs	r1, #3
    24a2:	2000      	movs	r0, #0
    24a4:	4c1c      	ldr	r4, [pc, #112]	; (2518 <flashy_flash1+0x134>)
    24a6:	47a0      	blx	r4
			break;
    24a8:	e026      	b.n	24f8 <flashy_flash1+0x114>
		case 9:
			reset_all_lights();
    24aa:	4b1a      	ldr	r3, [pc, #104]	; (2514 <flashy_flash1+0x130>)
    24ac:	4798      	blx	r3
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    24ae:	2301      	movs	r3, #1
    24b0:	2200      	movs	r2, #0
    24b2:	2104      	movs	r1, #4
    24b4:	2000      	movs	r0, #0
    24b6:	4c18      	ldr	r4, [pc, #96]	; (2518 <flashy_flash1+0x134>)
    24b8:	47a0      	blx	r4
			break;
    24ba:	e01d      	b.n	24f8 <flashy_flash1+0x114>
		case 10:
			reset_all_lights();
    24bc:	4b15      	ldr	r3, [pc, #84]	; (2514 <flashy_flash1+0x130>)
    24be:	4798      	blx	r3
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    24c0:	2301      	movs	r3, #1
    24c2:	2201      	movs	r2, #1
    24c4:	2104      	movs	r1, #4
    24c6:	2000      	movs	r0, #0
    24c8:	4c13      	ldr	r4, [pc, #76]	; (2518 <flashy_flash1+0x134>)
    24ca:	47a0      	blx	r4
			break;
    24cc:	e014      	b.n	24f8 <flashy_flash1+0x114>
		case 11:
			reset_all_lights();
    24ce:	4b11      	ldr	r3, [pc, #68]	; (2514 <flashy_flash1+0x130>)
    24d0:	4798      	blx	r3
			configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    24d2:	2301      	movs	r3, #1
    24d4:	2202      	movs	r2, #2
    24d6:	2104      	movs	r1, #4
    24d8:	2000      	movs	r0, #0
    24da:	4c0f      	ldr	r4, [pc, #60]	; (2518 <flashy_flash1+0x134>)
    24dc:	47a0      	blx	r4
			break;
    24de:	e00b      	b.n	24f8 <flashy_flash1+0x114>
		case 12:
			reset_all_lights();
    24e0:	4b0c      	ldr	r3, [pc, #48]	; (2514 <flashy_flash1+0x130>)
    24e2:	4798      	blx	r3
			state = 0;
    24e4:	4b09      	ldr	r3, [pc, #36]	; (250c <flashy_flash1+0x128>)
    24e6:	2200      	movs	r2, #0
    24e8:	701a      	strb	r2, [r3, #0]
			break;
    24ea:	e005      	b.n	24f8 <flashy_flash1+0x114>
		default:
			reset_all_lights();
    24ec:	4b09      	ldr	r3, [pc, #36]	; (2514 <flashy_flash1+0x130>)
    24ee:	4798      	blx	r3
			state = 0;
    24f0:	4b06      	ldr	r3, [pc, #24]	; (250c <flashy_flash1+0x128>)
    24f2:	2200      	movs	r2, #0
    24f4:	701a      	strb	r2, [r3, #0]
			break;
    24f6:	46c0      	nop			; (mov r8, r8)
	}
	state++;
    24f8:	4b04      	ldr	r3, [pc, #16]	; (250c <flashy_flash1+0x128>)
    24fa:	781b      	ldrb	r3, [r3, #0]
    24fc:	3301      	adds	r3, #1
    24fe:	b2da      	uxtb	r2, r3
    2500:	4b02      	ldr	r3, [pc, #8]	; (250c <flashy_flash1+0x128>)
    2502:	701a      	strb	r2, [r3, #0]
}
    2504:	46c0      	nop			; (mov r8, r8)
    2506:	46bd      	mov	sp, r7
    2508:	bdb0      	pop	{r4, r5, r7, pc}
    250a:	46c0      	nop			; (mov r8, r8)
    250c:	200002a4 	.word	0x200002a4
    2510:	00006eb0 	.word	0x00006eb0
    2514:	000029fd 	.word	0x000029fd
    2518:	00002c75 	.word	0x00002c75

0000251c <flashy_flash2>:

void flashy_flash2()
{
    251c:	b5b0      	push	{r4, r5, r7, lr}
    251e:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
    2520:	4b8e      	ldr	r3, [pc, #568]	; (275c <flashy_flash2+0x240>)
    2522:	781b      	ldrb	r3, [r3, #0]
    2524:	2b0a      	cmp	r3, #10
    2526:	d900      	bls.n	252a <flashy_flash2+0xe>
    2528:	e110      	b.n	274c <flashy_flash2+0x230>
    252a:	009a      	lsls	r2, r3, #2
    252c:	4b8c      	ldr	r3, [pc, #560]	; (2760 <flashy_flash2+0x244>)
    252e:	18d3      	adds	r3, r2, r3
    2530:	681b      	ldr	r3, [r3, #0]
    2532:	469f      	mov	pc, r3
	{
		case 0:
			reset_all_lights();
    2534:	4b8b      	ldr	r3, [pc, #556]	; (2764 <flashy_flash2+0x248>)
    2536:	4798      	blx	r3
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    2538:	2301      	movs	r3, #1
    253a:	2204      	movs	r2, #4
    253c:	2101      	movs	r1, #1
    253e:	2000      	movs	r0, #0
    2540:	4c89      	ldr	r4, [pc, #548]	; (2768 <flashy_flash2+0x24c>)
    2542:	47a0      	blx	r4
			state++;
    2544:	4b85      	ldr	r3, [pc, #532]	; (275c <flashy_flash2+0x240>)
    2546:	781b      	ldrb	r3, [r3, #0]
    2548:	3301      	adds	r3, #1
    254a:	b2da      	uxtb	r2, r3
    254c:	4b83      	ldr	r3, [pc, #524]	; (275c <flashy_flash2+0x240>)
    254e:	701a      	strb	r2, [r3, #0]
			break;
    2550:	e101      	b.n	2756 <flashy_flash2+0x23a>
		case 1:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    2552:	2300      	movs	r3, #0
    2554:	2204      	movs	r2, #4
    2556:	2101      	movs	r1, #1
    2558:	2000      	movs	r0, #0
    255a:	4c83      	ldr	r4, [pc, #524]	; (2768 <flashy_flash2+0x24c>)
    255c:	47a0      	blx	r4
			state++;
    255e:	4b7f      	ldr	r3, [pc, #508]	; (275c <flashy_flash2+0x240>)
    2560:	781b      	ldrb	r3, [r3, #0]
    2562:	3301      	adds	r3, #1
    2564:	b2da      	uxtb	r2, r3
    2566:	4b7d      	ldr	r3, [pc, #500]	; (275c <flashy_flash2+0x240>)
    2568:	701a      	strb	r2, [r3, #0]
			break;
    256a:	e0f4      	b.n	2756 <flashy_flash2+0x23a>
		case 2:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    256c:	2301      	movs	r3, #1
    256e:	2204      	movs	r2, #4
    2570:	2101      	movs	r1, #1
    2572:	2000      	movs	r0, #0
    2574:	4c7c      	ldr	r4, [pc, #496]	; (2768 <flashy_flash2+0x24c>)
    2576:	47a0      	blx	r4
			state++;
    2578:	4b78      	ldr	r3, [pc, #480]	; (275c <flashy_flash2+0x240>)
    257a:	781b      	ldrb	r3, [r3, #0]
    257c:	3301      	adds	r3, #1
    257e:	b2da      	uxtb	r2, r3
    2580:	4b76      	ldr	r3, [pc, #472]	; (275c <flashy_flash2+0x240>)
    2582:	701a      	strb	r2, [r3, #0]
			break;
    2584:	e0e7      	b.n	2756 <flashy_flash2+0x23a>
		case 3:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    2586:	2300      	movs	r3, #0
    2588:	2204      	movs	r2, #4
    258a:	2101      	movs	r1, #1
    258c:	2000      	movs	r0, #0
    258e:	4c76      	ldr	r4, [pc, #472]	; (2768 <flashy_flash2+0x24c>)
    2590:	47a0      	blx	r4
			state++;
    2592:	4b72      	ldr	r3, [pc, #456]	; (275c <flashy_flash2+0x240>)
    2594:	781b      	ldrb	r3, [r3, #0]
    2596:	3301      	adds	r3, #1
    2598:	b2da      	uxtb	r2, r3
    259a:	4b70      	ldr	r3, [pc, #448]	; (275c <flashy_flash2+0x240>)
    259c:	701a      	strb	r2, [r3, #0]
			break;
    259e:	e0da      	b.n	2756 <flashy_flash2+0x23a>
		case 4:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR,LEDBAR_PIN,true);
    25a0:	2301      	movs	r3, #1
    25a2:	2204      	movs	r2, #4
    25a4:	2101      	movs	r1, #1
    25a6:	2000      	movs	r0, #0
    25a8:	4c6f      	ldr	r4, [pc, #444]	; (2768 <flashy_flash2+0x24c>)
    25aa:	47a0      	blx	r4
			state++;
    25ac:	4b6b      	ldr	r3, [pc, #428]	; (275c <flashy_flash2+0x240>)
    25ae:	781b      	ldrb	r3, [r3, #0]
    25b0:	3301      	adds	r3, #1
    25b2:	b2da      	uxtb	r2, r3
    25b4:	4b69      	ldr	r3, [pc, #420]	; (275c <flashy_flash2+0x240>)
    25b6:	701a      	strb	r2, [r3, #0]
			break;
    25b8:	e0cd      	b.n	2756 <flashy_flash2+0x23a>
		case 5:
			configure_pin(LEDBAR_PORT,LEDBAR_ADR, LEDBAR_PIN,false);
    25ba:	2300      	movs	r3, #0
    25bc:	2204      	movs	r2, #4
    25be:	2101      	movs	r1, #1
    25c0:	2000      	movs	r0, #0
    25c2:	4c69      	ldr	r4, [pc, #420]	; (2768 <flashy_flash2+0x24c>)
    25c4:	47a0      	blx	r4
			state++;
    25c6:	4b65      	ldr	r3, [pc, #404]	; (275c <flashy_flash2+0x240>)
    25c8:	781b      	ldrb	r3, [r3, #0]
    25ca:	3301      	adds	r3, #1
    25cc:	b2da      	uxtb	r2, r3
    25ce:	4b63      	ldr	r3, [pc, #396]	; (275c <flashy_flash2+0x240>)
    25d0:	701a      	strb	r2, [r3, #0]
			break;
    25d2:	e0c0      	b.n	2756 <flashy_flash2+0x23a>
		case 6:
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    25d4:	2301      	movs	r3, #1
    25d6:	2202      	movs	r2, #2
    25d8:	2101      	movs	r1, #1
    25da:	2000      	movs	r0, #0
    25dc:	4c62      	ldr	r4, [pc, #392]	; (2768 <flashy_flash2+0x24c>)
    25de:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    25e0:	2301      	movs	r3, #1
    25e2:	2202      	movs	r2, #2
    25e4:	2102      	movs	r1, #2
    25e6:	2000      	movs	r0, #0
    25e8:	4c5f      	ldr	r4, [pc, #380]	; (2768 <flashy_flash2+0x24c>)
    25ea:	47a0      	blx	r4
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    25ec:	2301      	movs	r3, #1
    25ee:	2201      	movs	r2, #1
    25f0:	2103      	movs	r1, #3
    25f2:	2000      	movs	r0, #0
    25f4:	4c5c      	ldr	r4, [pc, #368]	; (2768 <flashy_flash2+0x24c>)
    25f6:	47a0      	blx	r4
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    25f8:	2301      	movs	r3, #1
    25fa:	2201      	movs	r2, #1
    25fc:	2104      	movs	r1, #4
    25fe:	2000      	movs	r0, #0
    2600:	4c59      	ldr	r4, [pc, #356]	; (2768 <flashy_flash2+0x24c>)
    2602:	47a0      	blx	r4
			state++;
    2604:	4b55      	ldr	r3, [pc, #340]	; (275c <flashy_flash2+0x240>)
    2606:	781b      	ldrb	r3, [r3, #0]
    2608:	3301      	adds	r3, #1
    260a:	b2da      	uxtb	r2, r3
    260c:	4b53      	ldr	r3, [pc, #332]	; (275c <flashy_flash2+0x240>)
    260e:	701a      	strb	r2, [r3, #0]
			break;
    2610:	e0a1      	b.n	2756 <flashy_flash2+0x23a>
		case 7:
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    2612:	2300      	movs	r3, #0
    2614:	2202      	movs	r2, #2
    2616:	2101      	movs	r1, #1
    2618:	2000      	movs	r0, #0
    261a:	4c53      	ldr	r4, [pc, #332]	; (2768 <flashy_flash2+0x24c>)
    261c:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    261e:	2300      	movs	r3, #0
    2620:	2202      	movs	r2, #2
    2622:	2102      	movs	r1, #2
    2624:	2000      	movs	r0, #0
    2626:	4c50      	ldr	r4, [pc, #320]	; (2768 <flashy_flash2+0x24c>)
    2628:	47a0      	blx	r4
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    262a:	2301      	movs	r3, #1
    262c:	2201      	movs	r2, #1
    262e:	2101      	movs	r1, #1
    2630:	2000      	movs	r0, #0
    2632:	4c4d      	ldr	r4, [pc, #308]	; (2768 <flashy_flash2+0x24c>)
    2634:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    2636:	2301      	movs	r3, #1
    2638:	2201      	movs	r2, #1
    263a:	2102      	movs	r1, #2
    263c:	2000      	movs	r0, #0
    263e:	4c4a      	ldr	r4, [pc, #296]	; (2768 <flashy_flash2+0x24c>)
    2640:	47a0      	blx	r4
			configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    2642:	2300      	movs	r3, #0
    2644:	2201      	movs	r2, #1
    2646:	2103      	movs	r1, #3
    2648:	2000      	movs	r0, #0
    264a:	4c47      	ldr	r4, [pc, #284]	; (2768 <flashy_flash2+0x24c>)
    264c:	47a0      	blx	r4
			configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    264e:	2300      	movs	r3, #0
    2650:	2201      	movs	r2, #1
    2652:	2104      	movs	r1, #4
    2654:	2000      	movs	r0, #0
    2656:	4c44      	ldr	r4, [pc, #272]	; (2768 <flashy_flash2+0x24c>)
    2658:	47a0      	blx	r4
			state++;
    265a:	4b40      	ldr	r3, [pc, #256]	; (275c <flashy_flash2+0x240>)
    265c:	781b      	ldrb	r3, [r3, #0]
    265e:	3301      	adds	r3, #1
    2660:	b2da      	uxtb	r2, r3
    2662:	4b3e      	ldr	r3, [pc, #248]	; (275c <flashy_flash2+0x240>)
    2664:	701a      	strb	r2, [r3, #0]
			break;
    2666:	e076      	b.n	2756 <flashy_flash2+0x23a>
		case 8:
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    2668:	2300      	movs	r3, #0
    266a:	2201      	movs	r2, #1
    266c:	2101      	movs	r1, #1
    266e:	2000      	movs	r0, #0
    2670:	4c3d      	ldr	r4, [pc, #244]	; (2768 <flashy_flash2+0x24c>)
    2672:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    2674:	2300      	movs	r3, #0
    2676:	2201      	movs	r2, #1
    2678:	2102      	movs	r1, #2
    267a:	2000      	movs	r0, #0
    267c:	4c3a      	ldr	r4, [pc, #232]	; (2768 <flashy_flash2+0x24c>)
    267e:	47a0      	blx	r4
			configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    2680:	2301      	movs	r3, #1
    2682:	2203      	movs	r2, #3
    2684:	2101      	movs	r1, #1
    2686:	2000      	movs	r0, #0
    2688:	4c37      	ldr	r4, [pc, #220]	; (2768 <flashy_flash2+0x24c>)
    268a:	47a0      	blx	r4
			configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    268c:	2301      	movs	r3, #1
    268e:	2203      	movs	r2, #3
    2690:	2102      	movs	r1, #2
    2692:	2000      	movs	r0, #0
    2694:	4c34      	ldr	r4, [pc, #208]	; (2768 <flashy_flash2+0x24c>)
    2696:	47a0      	blx	r4
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    2698:	2301      	movs	r3, #1
    269a:	2200      	movs	r2, #0
    269c:	2103      	movs	r1, #3
    269e:	2000      	movs	r0, #0
    26a0:	4c31      	ldr	r4, [pc, #196]	; (2768 <flashy_flash2+0x24c>)
    26a2:	47a0      	blx	r4
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    26a4:	2301      	movs	r3, #1
    26a6:	2200      	movs	r2, #0
    26a8:	2104      	movs	r1, #4
    26aa:	2000      	movs	r0, #0
    26ac:	4c2e      	ldr	r4, [pc, #184]	; (2768 <flashy_flash2+0x24c>)
    26ae:	47a0      	blx	r4
			state++;
    26b0:	4b2a      	ldr	r3, [pc, #168]	; (275c <flashy_flash2+0x240>)
    26b2:	781b      	ldrb	r3, [r3, #0]
    26b4:	3301      	adds	r3, #1
    26b6:	b2da      	uxtb	r2, r3
    26b8:	4b28      	ldr	r3, [pc, #160]	; (275c <flashy_flash2+0x240>)
    26ba:	701a      	strb	r2, [r3, #0]
			break;
    26bc:	e04b      	b.n	2756 <flashy_flash2+0x23a>
		case 9:
			configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    26be:	2300      	movs	r3, #0
    26c0:	2203      	movs	r2, #3
    26c2:	2101      	movs	r1, #1
    26c4:	2000      	movs	r0, #0
    26c6:	4c28      	ldr	r4, [pc, #160]	; (2768 <flashy_flash2+0x24c>)
    26c8:	47a0      	blx	r4
			configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    26ca:	2300      	movs	r3, #0
    26cc:	2203      	movs	r2, #3
    26ce:	2102      	movs	r1, #2
    26d0:	2000      	movs	r0, #0
    26d2:	4c25      	ldr	r4, [pc, #148]	; (2768 <flashy_flash2+0x24c>)
    26d4:	47a0      	blx	r4
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    26d6:	2301      	movs	r3, #1
    26d8:	2201      	movs	r2, #1
    26da:	2101      	movs	r1, #1
    26dc:	2000      	movs	r0, #0
    26de:	4c22      	ldr	r4, [pc, #136]	; (2768 <flashy_flash2+0x24c>)
    26e0:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    26e2:	2301      	movs	r3, #1
    26e4:	2201      	movs	r2, #1
    26e6:	2102      	movs	r1, #2
    26e8:	2000      	movs	r0, #0
    26ea:	4c1f      	ldr	r4, [pc, #124]	; (2768 <flashy_flash2+0x24c>)
    26ec:	47a0      	blx	r4
			configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    26ee:	2300      	movs	r3, #0
    26f0:	2200      	movs	r2, #0
    26f2:	2103      	movs	r1, #3
    26f4:	2000      	movs	r0, #0
    26f6:	4c1c      	ldr	r4, [pc, #112]	; (2768 <flashy_flash2+0x24c>)
    26f8:	47a0      	blx	r4
			configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    26fa:	2300      	movs	r3, #0
    26fc:	2200      	movs	r2, #0
    26fe:	2104      	movs	r1, #4
    2700:	2000      	movs	r0, #0
    2702:	4c19      	ldr	r4, [pc, #100]	; (2768 <flashy_flash2+0x24c>)
    2704:	47a0      	blx	r4
			state++;
    2706:	4b15      	ldr	r3, [pc, #84]	; (275c <flashy_flash2+0x240>)
    2708:	781b      	ldrb	r3, [r3, #0]
    270a:	3301      	adds	r3, #1
    270c:	b2da      	uxtb	r2, r3
    270e:	4b13      	ldr	r3, [pc, #76]	; (275c <flashy_flash2+0x240>)
    2710:	701a      	strb	r2, [r3, #0]
			break;
    2712:	e020      	b.n	2756 <flashy_flash2+0x23a>
		case 10:
			configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    2714:	2300      	movs	r3, #0
    2716:	2201      	movs	r2, #1
    2718:	2101      	movs	r1, #1
    271a:	2000      	movs	r0, #0
    271c:	4c12      	ldr	r4, [pc, #72]	; (2768 <flashy_flash2+0x24c>)
    271e:	47a0      	blx	r4
			configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    2720:	2300      	movs	r3, #0
    2722:	2201      	movs	r2, #1
    2724:	2102      	movs	r1, #2
    2726:	2000      	movs	r0, #0
    2728:	4c0f      	ldr	r4, [pc, #60]	; (2768 <flashy_flash2+0x24c>)
    272a:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    272c:	2301      	movs	r3, #1
    272e:	2202      	movs	r2, #2
    2730:	2101      	movs	r1, #1
    2732:	2000      	movs	r0, #0
    2734:	4c0c      	ldr	r4, [pc, #48]	; (2768 <flashy_flash2+0x24c>)
    2736:	47a0      	blx	r4
			configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    2738:	2301      	movs	r3, #1
    273a:	2202      	movs	r2, #2
    273c:	2102      	movs	r1, #2
    273e:	2000      	movs	r0, #0
    2740:	4c09      	ldr	r4, [pc, #36]	; (2768 <flashy_flash2+0x24c>)
    2742:	47a0      	blx	r4
			state = 0;
    2744:	4b05      	ldr	r3, [pc, #20]	; (275c <flashy_flash2+0x240>)
    2746:	2200      	movs	r2, #0
    2748:	701a      	strb	r2, [r3, #0]
			break;
    274a:	e004      	b.n	2756 <flashy_flash2+0x23a>
		default:
			reset_all_lights();
    274c:	4b05      	ldr	r3, [pc, #20]	; (2764 <flashy_flash2+0x248>)
    274e:	4798      	blx	r3
			state = 0;
    2750:	4b02      	ldr	r3, [pc, #8]	; (275c <flashy_flash2+0x240>)
    2752:	2200      	movs	r2, #0
    2754:	701a      	strb	r2, [r3, #0]
	}
}
    2756:	46c0      	nop			; (mov r8, r8)
    2758:	46bd      	mov	sp, r7
    275a:	bdb0      	pop	{r4, r5, r7, pc}
    275c:	200002a5 	.word	0x200002a5
    2760:	00006ee4 	.word	0x00006ee4
    2764:	000029fd 	.word	0x000029fd
    2768:	00002c75 	.word	0x00002c75

0000276c <flashy_fades>:

void flashy_fades()
{
    276c:	b5b0      	push	{r4, r5, r7, lr}
    276e:	af00      	add	r7, sp, #0
	//static uint8_t pwm_val = 0;
	static uint8_t duty_cycle = PWM_FREQ/4;
	
	if (pwm_count > duty_cycle)
    2770:	4b61      	ldr	r3, [pc, #388]	; (28f8 <flashy_fades+0x18c>)
    2772:	781b      	ldrb	r3, [r3, #0]
    2774:	1e1a      	subs	r2, r3, #0
    2776:	4b61      	ldr	r3, [pc, #388]	; (28fc <flashy_fades+0x190>)
    2778:	681b      	ldr	r3, [r3, #0]
    277a:	429a      	cmp	r2, r3
    277c:	da54      	bge.n	2828 <flashy_fades+0xbc>
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,true);
    277e:	2301      	movs	r3, #1
    2780:	2200      	movs	r2, #0
    2782:	2101      	movs	r1, #1
    2784:	2000      	movs	r0, #0
    2786:	4c5e      	ldr	r4, [pc, #376]	; (2900 <flashy_fades+0x194>)
    2788:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,true);
    278a:	2301      	movs	r3, #1
    278c:	2200      	movs	r2, #0
    278e:	2102      	movs	r1, #2
    2790:	2000      	movs	r0, #0
    2792:	4c5b      	ldr	r4, [pc, #364]	; (2900 <flashy_fades+0x194>)
    2794:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR,POSITION_REAR_LEFT_PIN,true);
    2796:	2301      	movs	r3, #1
    2798:	2200      	movs	r2, #0
    279a:	2103      	movs	r1, #3
    279c:	2000      	movs	r0, #0
    279e:	4c58      	ldr	r4, [pc, #352]	; (2900 <flashy_fades+0x194>)
    27a0:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR,POSITION_REAR_RIGHT_PIN,true);
    27a2:	2301      	movs	r3, #1
    27a4:	2200      	movs	r2, #0
    27a6:	2104      	movs	r1, #4
    27a8:	2000      	movs	r0, #0
    27aa:	4c55      	ldr	r4, [pc, #340]	; (2900 <flashy_fades+0x194>)
    27ac:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,true);
    27ae:	2301      	movs	r3, #1
    27b0:	2201      	movs	r2, #1
    27b2:	2102      	movs	r1, #2
    27b4:	2000      	movs	r0, #0
    27b6:	4c52      	ldr	r4, [pc, #328]	; (2900 <flashy_fades+0x194>)
    27b8:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,true);
    27ba:	2301      	movs	r3, #1
    27bc:	2201      	movs	r2, #1
    27be:	2101      	movs	r1, #1
    27c0:	2000      	movs	r0, #0
    27c2:	4c4f      	ldr	r4, [pc, #316]	; (2900 <flashy_fades+0x194>)
    27c4:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,true);
    27c6:	2301      	movs	r3, #1
    27c8:	2202      	movs	r2, #2
    27ca:	2102      	movs	r1, #2
    27cc:	2000      	movs	r0, #0
    27ce:	4c4c      	ldr	r4, [pc, #304]	; (2900 <flashy_fades+0x194>)
    27d0:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,true);
    27d2:	2301      	movs	r3, #1
    27d4:	2202      	movs	r2, #2
    27d6:	2101      	movs	r1, #1
    27d8:	2000      	movs	r0, #0
    27da:	4c49      	ldr	r4, [pc, #292]	; (2900 <flashy_fades+0x194>)
    27dc:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,true);
    27de:	2301      	movs	r3, #1
    27e0:	2202      	movs	r2, #2
    27e2:	2104      	movs	r1, #4
    27e4:	2000      	movs	r0, #0
    27e6:	4c46      	ldr	r4, [pc, #280]	; (2900 <flashy_fades+0x194>)
    27e8:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,true);
    27ea:	2301      	movs	r3, #1
    27ec:	2202      	movs	r2, #2
    27ee:	2103      	movs	r1, #3
    27f0:	2000      	movs	r0, #0
    27f2:	4c43      	ldr	r4, [pc, #268]	; (2900 <flashy_fades+0x194>)
    27f4:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR,REVERSE_LEFT_PIN,true);
    27f6:	2301      	movs	r3, #1
    27f8:	2201      	movs	r2, #1
    27fa:	2103      	movs	r1, #3
    27fc:	2000      	movs	r0, #0
    27fe:	4c40      	ldr	r4, [pc, #256]	; (2900 <flashy_fades+0x194>)
    2800:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR,REVERSE_RIGHT_PIN,true);
    2802:	2301      	movs	r3, #1
    2804:	2201      	movs	r2, #1
    2806:	2104      	movs	r1, #4
    2808:	2000      	movs	r0, #0
    280a:	4c3d      	ldr	r4, [pc, #244]	; (2900 <flashy_fades+0x194>)
    280c:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR,FOG_FRONT_RIGHT_PIN,true);
    280e:	2301      	movs	r3, #1
    2810:	2203      	movs	r2, #3
    2812:	2102      	movs	r1, #2
    2814:	2000      	movs	r0, #0
    2816:	4c3a      	ldr	r4, [pc, #232]	; (2900 <flashy_fades+0x194>)
    2818:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR,FOG_FRONT_LEFT_PIN,true);
    281a:	2301      	movs	r3, #1
    281c:	2203      	movs	r2, #3
    281e:	2101      	movs	r1, #1
    2820:	2000      	movs	r0, #0
    2822:	4c37      	ldr	r4, [pc, #220]	; (2900 <flashy_fades+0x194>)
    2824:	47a0      	blx	r4
    2826:	e053      	b.n	28d0 <flashy_fades+0x164>
	}
	else
	{
		configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR, POSITION_FRONT_LEFT_PIN,false);
    2828:	2300      	movs	r3, #0
    282a:	2200      	movs	r2, #0
    282c:	2101      	movs	r1, #1
    282e:	2000      	movs	r0, #0
    2830:	4c33      	ldr	r4, [pc, #204]	; (2900 <flashy_fades+0x194>)
    2832:	47a0      	blx	r4
		configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR, POSITION_FRONT_RIGHT_PIN,false);
    2834:	2300      	movs	r3, #0
    2836:	2200      	movs	r2, #0
    2838:	2102      	movs	r1, #2
    283a:	2000      	movs	r0, #0
    283c:	4c30      	ldr	r4, [pc, #192]	; (2900 <flashy_fades+0x194>)
    283e:	47a0      	blx	r4
		configure_pin(POSITION_REAR_LEFT_PORT,POSITION_REAR_LEFT_ADR, POSITION_REAR_LEFT_PIN,false);
    2840:	2300      	movs	r3, #0
    2842:	2200      	movs	r2, #0
    2844:	2103      	movs	r1, #3
    2846:	2000      	movs	r0, #0
    2848:	4c2d      	ldr	r4, [pc, #180]	; (2900 <flashy_fades+0x194>)
    284a:	47a0      	blx	r4
		configure_pin(POSITION_REAR_RIGHT_PORT,POSITION_REAR_RIGHT_ADR, POSITION_REAR_RIGHT_PIN,false);
    284c:	2300      	movs	r3, #0
    284e:	2200      	movs	r2, #0
    2850:	2104      	movs	r1, #4
    2852:	2000      	movs	r0, #0
    2854:	4c2a      	ldr	r4, [pc, #168]	; (2900 <flashy_fades+0x194>)
    2856:	47a0      	blx	r4
		
		configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR, LOW_BEAM_RIGHT_PIN,false);
    2858:	2300      	movs	r3, #0
    285a:	2201      	movs	r2, #1
    285c:	2102      	movs	r1, #2
    285e:	2000      	movs	r0, #0
    2860:	4c27      	ldr	r4, [pc, #156]	; (2900 <flashy_fades+0x194>)
    2862:	47a0      	blx	r4
		configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR, LOW_BEAM_LEFT_PIN,false);
    2864:	2300      	movs	r3, #0
    2866:	2201      	movs	r2, #1
    2868:	2101      	movs	r1, #1
    286a:	2000      	movs	r0, #0
    286c:	4c24      	ldr	r4, [pc, #144]	; (2900 <flashy_fades+0x194>)
    286e:	47a0      	blx	r4
		
		configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR, HIGH_BEAM_RIGHT_PIN,false);
    2870:	2300      	movs	r3, #0
    2872:	2202      	movs	r2, #2
    2874:	2102      	movs	r1, #2
    2876:	2000      	movs	r0, #0
    2878:	4c21      	ldr	r4, [pc, #132]	; (2900 <flashy_fades+0x194>)
    287a:	47a0      	blx	r4
		configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR, HIGH_BEAM_LEFT_PIN,false);
    287c:	2300      	movs	r3, #0
    287e:	2202      	movs	r2, #2
    2880:	2101      	movs	r1, #1
    2882:	2000      	movs	r0, #0
    2884:	4c1e      	ldr	r4, [pc, #120]	; (2900 <flashy_fades+0x194>)
    2886:	47a0      	blx	r4
		
		configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR, BLINK_RIGHT_PIN,false);
    2888:	2300      	movs	r3, #0
    288a:	2202      	movs	r2, #2
    288c:	2104      	movs	r1, #4
    288e:	2000      	movs	r0, #0
    2890:	4c1b      	ldr	r4, [pc, #108]	; (2900 <flashy_fades+0x194>)
    2892:	47a0      	blx	r4
		configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR, BLINK_LEFT_PIN,false);
    2894:	2300      	movs	r3, #0
    2896:	2202      	movs	r2, #2
    2898:	2103      	movs	r1, #3
    289a:	2000      	movs	r0, #0
    289c:	4c18      	ldr	r4, [pc, #96]	; (2900 <flashy_fades+0x194>)
    289e:	47a0      	blx	r4
		
		configure_pin(REVERSE_LEFT_PORT,REVERSE_LEFT_ADR, REVERSE_LEFT_PIN,false);
    28a0:	2300      	movs	r3, #0
    28a2:	2201      	movs	r2, #1
    28a4:	2103      	movs	r1, #3
    28a6:	2000      	movs	r0, #0
    28a8:	4c15      	ldr	r4, [pc, #84]	; (2900 <flashy_fades+0x194>)
    28aa:	47a0      	blx	r4
		configure_pin(REVERSE_RIGHT_PORT,REVERSE_RIGHT_ADR, REVERSE_RIGHT_PIN,false);
    28ac:	2300      	movs	r3, #0
    28ae:	2201      	movs	r2, #1
    28b0:	2104      	movs	r1, #4
    28b2:	2000      	movs	r0, #0
    28b4:	4c12      	ldr	r4, [pc, #72]	; (2900 <flashy_fades+0x194>)
    28b6:	47a0      	blx	r4
		
		configure_pin(FOG_FRONT_RIGHT_PORT,FOG_FRONT_RIGHT_ADR, FOG_FRONT_RIGHT_PIN,false);
    28b8:	2300      	movs	r3, #0
    28ba:	2203      	movs	r2, #3
    28bc:	2102      	movs	r1, #2
    28be:	2000      	movs	r0, #0
    28c0:	4c0f      	ldr	r4, [pc, #60]	; (2900 <flashy_fades+0x194>)
    28c2:	47a0      	blx	r4
		configure_pin(FOG_FRONT_LEFT_PORT,FOG_FRONT_LEFT_ADR, FOG_FRONT_LEFT_PIN,false);
    28c4:	2300      	movs	r3, #0
    28c6:	2203      	movs	r2, #3
    28c8:	2101      	movs	r1, #1
    28ca:	2000      	movs	r0, #0
    28cc:	4c0c      	ldr	r4, [pc, #48]	; (2900 <flashy_fades+0x194>)
    28ce:	47a0      	blx	r4
	}
	
	//pwm_val++;
	if (pwm_count >= PWM_FREQ)
    28d0:	4b0a      	ldr	r3, [pc, #40]	; (28fc <flashy_fades+0x190>)
    28d2:	681b      	ldr	r3, [r3, #0]
    28d4:	2bf9      	cmp	r3, #249	; 0xf9
    28d6:	dd0c      	ble.n	28f2 <flashy_fades+0x186>
	{
		//pwm_val = 0;
		duty_cycle += PWM_FREQ/10;
    28d8:	4b07      	ldr	r3, [pc, #28]	; (28f8 <flashy_fades+0x18c>)
    28da:	781b      	ldrb	r3, [r3, #0]
    28dc:	3319      	adds	r3, #25
    28de:	b2da      	uxtb	r2, r3
    28e0:	4b05      	ldr	r3, [pc, #20]	; (28f8 <flashy_fades+0x18c>)
    28e2:	701a      	strb	r2, [r3, #0]
		if (duty_cycle >= PWM_FREQ)
    28e4:	4b04      	ldr	r3, [pc, #16]	; (28f8 <flashy_fades+0x18c>)
    28e6:	781b      	ldrb	r3, [r3, #0]
    28e8:	2bf9      	cmp	r3, #249	; 0xf9
    28ea:	d902      	bls.n	28f2 <flashy_fades+0x186>
		{
			duty_cycle = PWM_FREQ/4;
    28ec:	4b02      	ldr	r3, [pc, #8]	; (28f8 <flashy_fades+0x18c>)
    28ee:	223e      	movs	r2, #62	; 0x3e
    28f0:	701a      	strb	r2, [r3, #0]
		}
	}
}
    28f2:	46c0      	nop			; (mov r8, r8)
    28f4:	46bd      	mov	sp, r7
    28f6:	bdb0      	pop	{r4, r5, r7, pc}
    28f8:	20000160 	.word	0x20000160
    28fc:	2000102c 	.word	0x2000102c
    2900:	00002c75 	.word	0x00002c75

00002904 <flashy_flash3>:

void flashy_flash3(void)
{
    2904:	b5b0      	push	{r4, r5, r7, lr}
    2906:	af00      	add	r7, sp, #0
	static uint8_t count = 0;
	
	reset_all_lights();
    2908:	4b38      	ldr	r3, [pc, #224]	; (29ec <flashy_flash3+0xe8>)
    290a:	4798      	blx	r3

	configure_pin(BLINK_LEFT_PORT,BLINK_LEFT_ADR,BLINK_LEFT_PIN,bool_map_1[count][0]);
    290c:	4b38      	ldr	r3, [pc, #224]	; (29f0 <flashy_flash3+0xec>)
    290e:	781b      	ldrb	r3, [r3, #0]
    2910:	001a      	movs	r2, r3
    2912:	4b38      	ldr	r3, [pc, #224]	; (29f4 <flashy_flash3+0xf0>)
    2914:	00d2      	lsls	r2, r2, #3
    2916:	5cd3      	ldrb	r3, [r2, r3]
    2918:	2202      	movs	r2, #2
    291a:	2103      	movs	r1, #3
    291c:	2000      	movs	r0, #0
    291e:	4c36      	ldr	r4, [pc, #216]	; (29f8 <flashy_flash3+0xf4>)
    2920:	47a0      	blx	r4
	configure_pin(LOW_BEAM_LEFT_PORT,LOW_BEAM_LEFT_ADR,LOW_BEAM_LEFT_PIN,bool_map_1[count][1]);
    2922:	4b33      	ldr	r3, [pc, #204]	; (29f0 <flashy_flash3+0xec>)
    2924:	781b      	ldrb	r3, [r3, #0]
    2926:	4a33      	ldr	r2, [pc, #204]	; (29f4 <flashy_flash3+0xf0>)
    2928:	00db      	lsls	r3, r3, #3
    292a:	18d3      	adds	r3, r2, r3
    292c:	3301      	adds	r3, #1
    292e:	781b      	ldrb	r3, [r3, #0]
    2930:	2201      	movs	r2, #1
    2932:	2101      	movs	r1, #1
    2934:	2000      	movs	r0, #0
    2936:	4c30      	ldr	r4, [pc, #192]	; (29f8 <flashy_flash3+0xf4>)
    2938:	47a0      	blx	r4
	configure_pin(HIGH_BEAM_LEFT_PORT,HIGH_BEAM_LEFT_ADR,HIGH_BEAM_LEFT_PIN,bool_map_1[count][2]);
    293a:	4b2d      	ldr	r3, [pc, #180]	; (29f0 <flashy_flash3+0xec>)
    293c:	781b      	ldrb	r3, [r3, #0]
    293e:	4a2d      	ldr	r2, [pc, #180]	; (29f4 <flashy_flash3+0xf0>)
    2940:	00db      	lsls	r3, r3, #3
    2942:	18d3      	adds	r3, r2, r3
    2944:	3302      	adds	r3, #2
    2946:	781b      	ldrb	r3, [r3, #0]
    2948:	2202      	movs	r2, #2
    294a:	2101      	movs	r1, #1
    294c:	2000      	movs	r0, #0
    294e:	4c2a      	ldr	r4, [pc, #168]	; (29f8 <flashy_flash3+0xf4>)
    2950:	47a0      	blx	r4
	configure_pin(POSITION_FRONT_LEFT_PORT,POSITION_FRONT_LEFT_ADR,POSITION_FRONT_LEFT_PIN,bool_map_1[count][3]);
    2952:	4b27      	ldr	r3, [pc, #156]	; (29f0 <flashy_flash3+0xec>)
    2954:	781b      	ldrb	r3, [r3, #0]
    2956:	4a27      	ldr	r2, [pc, #156]	; (29f4 <flashy_flash3+0xf0>)
    2958:	00db      	lsls	r3, r3, #3
    295a:	18d3      	adds	r3, r2, r3
    295c:	3303      	adds	r3, #3
    295e:	781b      	ldrb	r3, [r3, #0]
    2960:	2200      	movs	r2, #0
    2962:	2101      	movs	r1, #1
    2964:	2000      	movs	r0, #0
    2966:	4c24      	ldr	r4, [pc, #144]	; (29f8 <flashy_flash3+0xf4>)
    2968:	47a0      	blx	r4
	configure_pin(POSITION_FRONT_RIGHT_PORT,POSITION_FRONT_RIGHT_ADR,POSITION_FRONT_RIGHT_PIN,bool_map_1[count][4]);
    296a:	4b21      	ldr	r3, [pc, #132]	; (29f0 <flashy_flash3+0xec>)
    296c:	781b      	ldrb	r3, [r3, #0]
    296e:	4a21      	ldr	r2, [pc, #132]	; (29f4 <flashy_flash3+0xf0>)
    2970:	00db      	lsls	r3, r3, #3
    2972:	18d3      	adds	r3, r2, r3
    2974:	3304      	adds	r3, #4
    2976:	781b      	ldrb	r3, [r3, #0]
    2978:	2200      	movs	r2, #0
    297a:	2102      	movs	r1, #2
    297c:	2000      	movs	r0, #0
    297e:	4c1e      	ldr	r4, [pc, #120]	; (29f8 <flashy_flash3+0xf4>)
    2980:	47a0      	blx	r4
	configure_pin(HIGH_BEAM_RIGHT_PORT,HIGH_BEAM_RIGHT_ADR,HIGH_BEAM_RIGHT_PIN,bool_map_1[count][5]);
    2982:	4b1b      	ldr	r3, [pc, #108]	; (29f0 <flashy_flash3+0xec>)
    2984:	781b      	ldrb	r3, [r3, #0]
    2986:	4a1b      	ldr	r2, [pc, #108]	; (29f4 <flashy_flash3+0xf0>)
    2988:	00db      	lsls	r3, r3, #3
    298a:	18d3      	adds	r3, r2, r3
    298c:	3305      	adds	r3, #5
    298e:	781b      	ldrb	r3, [r3, #0]
    2990:	2202      	movs	r2, #2
    2992:	2102      	movs	r1, #2
    2994:	2000      	movs	r0, #0
    2996:	4c18      	ldr	r4, [pc, #96]	; (29f8 <flashy_flash3+0xf4>)
    2998:	47a0      	blx	r4
	configure_pin(LOW_BEAM_RIGHT_PORT,LOW_BEAM_RIGHT_ADR,LOW_BEAM_RIGHT_PIN,bool_map_1[count][6]);
    299a:	4b15      	ldr	r3, [pc, #84]	; (29f0 <flashy_flash3+0xec>)
    299c:	781b      	ldrb	r3, [r3, #0]
    299e:	4a15      	ldr	r2, [pc, #84]	; (29f4 <flashy_flash3+0xf0>)
    29a0:	00db      	lsls	r3, r3, #3
    29a2:	18d3      	adds	r3, r2, r3
    29a4:	3306      	adds	r3, #6
    29a6:	781b      	ldrb	r3, [r3, #0]
    29a8:	2201      	movs	r2, #1
    29aa:	2102      	movs	r1, #2
    29ac:	2000      	movs	r0, #0
    29ae:	4c12      	ldr	r4, [pc, #72]	; (29f8 <flashy_flash3+0xf4>)
    29b0:	47a0      	blx	r4
	configure_pin(BLINK_RIGHT_PORT,BLINK_RIGHT_ADR,BLINK_RIGHT_PIN,bool_map_1[count][7]);
    29b2:	4b0f      	ldr	r3, [pc, #60]	; (29f0 <flashy_flash3+0xec>)
    29b4:	781b      	ldrb	r3, [r3, #0]
    29b6:	4a0f      	ldr	r2, [pc, #60]	; (29f4 <flashy_flash3+0xf0>)
    29b8:	00db      	lsls	r3, r3, #3
    29ba:	18d3      	adds	r3, r2, r3
    29bc:	3307      	adds	r3, #7
    29be:	781b      	ldrb	r3, [r3, #0]
    29c0:	2202      	movs	r2, #2
    29c2:	2104      	movs	r1, #4
    29c4:	2000      	movs	r0, #0
    29c6:	4c0c      	ldr	r4, [pc, #48]	; (29f8 <flashy_flash3+0xf4>)
    29c8:	47a0      	blx	r4
	count++;
    29ca:	4b09      	ldr	r3, [pc, #36]	; (29f0 <flashy_flash3+0xec>)
    29cc:	781b      	ldrb	r3, [r3, #0]
    29ce:	3301      	adds	r3, #1
    29d0:	b2da      	uxtb	r2, r3
    29d2:	4b07      	ldr	r3, [pc, #28]	; (29f0 <flashy_flash3+0xec>)
    29d4:	701a      	strb	r2, [r3, #0]
	if(count > 25)
    29d6:	4b06      	ldr	r3, [pc, #24]	; (29f0 <flashy_flash3+0xec>)
    29d8:	781b      	ldrb	r3, [r3, #0]
    29da:	2b19      	cmp	r3, #25
    29dc:	d902      	bls.n	29e4 <flashy_flash3+0xe0>
	{
		count = 0;
    29de:	4b04      	ldr	r3, [pc, #16]	; (29f0 <flashy_flash3+0xec>)
    29e0:	2200      	movs	r2, #0
    29e2:	701a      	strb	r2, [r3, #0]
	}
}
    29e4:	46c0      	nop			; (mov r8, r8)
    29e6:	46bd      	mov	sp, r7
    29e8:	bdb0      	pop	{r4, r5, r7, pc}
    29ea:	46c0      	nop			; (mov r8, r8)
    29ec:	000029fd 	.word	0x000029fd
    29f0:	200002a6 	.word	0x200002a6
    29f4:	20000010 	.word	0x20000010
    29f8:	00002c75 	.word	0x00002c75

000029fc <reset_all_lights>:

void reset_all_lights()
{
    29fc:	b580      	push	{r7, lr}
    29fe:	b082      	sub	sp, #8
    2a00:	af00      	add	r7, sp, #0
	for (int i=0;i<8;i++)
    2a02:	2300      	movs	r3, #0
    2a04:	607b      	str	r3, [r7, #4]
    2a06:	e010      	b.n	2a2a <reset_all_lights+0x2e>
	{
		mcp23017_data.devices[i].outputs.ports[0] = 0x80;
    2a08:	4a0b      	ldr	r2, [pc, #44]	; (2a38 <reset_all_lights+0x3c>)
    2a0a:	687b      	ldr	r3, [r7, #4]
    2a0c:	011b      	lsls	r3, r3, #4
    2a0e:	18d3      	adds	r3, r2, r3
    2a10:	3308      	adds	r3, #8
    2a12:	2280      	movs	r2, #128	; 0x80
    2a14:	701a      	strb	r2, [r3, #0]
		mcp23017_data.devices[i].outputs.ports[1] = 0x80;
    2a16:	4a08      	ldr	r2, [pc, #32]	; (2a38 <reset_all_lights+0x3c>)
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	011b      	lsls	r3, r3, #4
    2a1c:	18d3      	adds	r3, r2, r3
    2a1e:	3309      	adds	r3, #9
    2a20:	2280      	movs	r2, #128	; 0x80
    2a22:	701a      	strb	r2, [r3, #0]
	}
}

void reset_all_lights()
{
	for (int i=0;i<8;i++)
    2a24:	687b      	ldr	r3, [r7, #4]
    2a26:	3301      	adds	r3, #1
    2a28:	607b      	str	r3, [r7, #4]
    2a2a:	687b      	ldr	r3, [r7, #4]
    2a2c:	2b07      	cmp	r3, #7
    2a2e:	ddeb      	ble.n	2a08 <reset_all_lights+0xc>
	{
		mcp23017_data.devices[i].outputs.ports[0] = 0x80;
		mcp23017_data.devices[i].outputs.ports[1] = 0x80;
	}
}
    2a30:	46c0      	nop			; (mov r8, r8)
    2a32:	46bd      	mov	sp, r7
    2a34:	b002      	add	sp, #8
    2a36:	bd80      	pop	{r7, pc}
    2a38:	200000e0 	.word	0x200000e0

00002a3c <a_okay>:

bool a_okay()
{
    2a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a3e:	464f      	mov	r7, r9
    2a40:	4646      	mov	r6, r8
    2a42:	b4c0      	push	{r6, r7}
    2a44:	b095      	sub	sp, #84	; 0x54
    2a46:	af06      	add	r7, sp, #24
	char buffer[32];
	uint8_t states[8];
	mcp23017_read_all_ports(read_data,states);
    2a48:	2308      	movs	r3, #8
    2a4a:	18fa      	adds	r2, r7, r3
    2a4c:	4b81      	ldr	r3, [pc, #516]	; (2c54 <a_okay+0x218>)
    2a4e:	0011      	movs	r1, r2
    2a50:	0018      	movs	r0, r3
    2a52:	4b81      	ldr	r3, [pc, #516]	; (2c58 <a_okay+0x21c>)
    2a54:	4798      	blx	r3
	
	bool return_val = true;
    2a56:	232f      	movs	r3, #47	; 0x2f
    2a58:	2208      	movs	r2, #8
    2a5a:	4694      	mov	ip, r2
    2a5c:	44bc      	add	ip, r7
    2a5e:	4463      	add	r3, ip
    2a60:	2201      	movs	r2, #1
    2a62:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
    2a64:	2300      	movs	r3, #0
    2a66:	633b      	str	r3, [r7, #48]	; 0x30
    2a68:	e0a2      	b.n	2bb0 <a_okay+0x174>
	{
		if (mcp23017_data.devices[i].should_be_enabled)
    2a6a:	4b7c      	ldr	r3, [pc, #496]	; (2c5c <a_okay+0x220>)
    2a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2a6e:	0112      	lsls	r2, r2, #4
    2a70:	5cd3      	ldrb	r3, [r2, r3]
    2a72:	2b00      	cmp	r3, #0
    2a74:	d06e      	beq.n	2b54 <a_okay+0x118>
		{
			mcp23017_data.devices[i].output_errors.ports[0] = mcp23017_data.devices[i].outputs.ports[0] - read_data[0][i];
    2a76:	4a79      	ldr	r2, [pc, #484]	; (2c5c <a_okay+0x220>)
    2a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2a7a:	011b      	lsls	r3, r3, #4
    2a7c:	18d3      	adds	r3, r2, r3
    2a7e:	3308      	adds	r3, #8
    2a80:	781a      	ldrb	r2, [r3, #0]
    2a82:	4974      	ldr	r1, [pc, #464]	; (2c54 <a_okay+0x218>)
    2a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2a86:	18cb      	adds	r3, r1, r3
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	1ad3      	subs	r3, r2, r3
    2a8c:	b2d9      	uxtb	r1, r3
    2a8e:	4a73      	ldr	r2, [pc, #460]	; (2c5c <a_okay+0x220>)
    2a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2a92:	011b      	lsls	r3, r3, #4
    2a94:	18d3      	adds	r3, r2, r3
    2a96:	330c      	adds	r3, #12
    2a98:	1c0a      	adds	r2, r1, #0
    2a9a:	701a      	strb	r2, [r3, #0]
			mcp23017_data.devices[i].output_errors.ports[1] = mcp23017_data.devices[i].outputs.ports[1] - read_data[1][i];
    2a9c:	4a6f      	ldr	r2, [pc, #444]	; (2c5c <a_okay+0x220>)
    2a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2aa0:	011b      	lsls	r3, r3, #4
    2aa2:	18d3      	adds	r3, r2, r3
    2aa4:	3309      	adds	r3, #9
    2aa6:	781a      	ldrb	r2, [r3, #0]
    2aa8:	496a      	ldr	r1, [pc, #424]	; (2c54 <a_okay+0x218>)
    2aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2aac:	18cb      	adds	r3, r1, r3
    2aae:	3308      	adds	r3, #8
    2ab0:	781b      	ldrb	r3, [r3, #0]
    2ab2:	1ad3      	subs	r3, r2, r3
    2ab4:	b2d9      	uxtb	r1, r3
    2ab6:	4a69      	ldr	r2, [pc, #420]	; (2c5c <a_okay+0x220>)
    2ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2aba:	011b      	lsls	r3, r3, #4
    2abc:	18d3      	adds	r3, r2, r3
    2abe:	330d      	adds	r3, #13
    2ac0:	1c0a      	adds	r2, r1, #0
    2ac2:	701a      	strb	r2, [r3, #0]
			
			if ((mcp23017_data.devices[i].output_errors.ports[0] + mcp23017_data.devices[i].output_errors.ports[1]) > 0)
    2ac4:	4a65      	ldr	r2, [pc, #404]	; (2c5c <a_okay+0x220>)
    2ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2ac8:	011b      	lsls	r3, r3, #4
    2aca:	18d3      	adds	r3, r2, r3
    2acc:	330c      	adds	r3, #12
    2ace:	781b      	ldrb	r3, [r3, #0]
    2ad0:	0019      	movs	r1, r3
    2ad2:	4a62      	ldr	r2, [pc, #392]	; (2c5c <a_okay+0x220>)
    2ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2ad6:	011b      	lsls	r3, r3, #4
    2ad8:	18d3      	adds	r3, r2, r3
    2ada:	330d      	adds	r3, #13
    2adc:	781b      	ldrb	r3, [r3, #0]
    2ade:	18cb      	adds	r3, r1, r3
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	dd06      	ble.n	2af2 <a_okay+0xb6>
			{
				mcp23017_data.devices[i].error_detected = true;
    2ae4:	4a5d      	ldr	r2, [pc, #372]	; (2c5c <a_okay+0x220>)
    2ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2ae8:	011b      	lsls	r3, r3, #4
    2aea:	18d3      	adds	r3, r2, r3
    2aec:	3302      	adds	r3, #2
    2aee:	2201      	movs	r2, #1
    2af0:	701a      	strb	r2, [r3, #0]
			}
			
			if ((read_data[0][i] & ~0x80) != (mcp23017_data.devices[i].outputs.ports[0] & ~0x80))
    2af2:	4a58      	ldr	r2, [pc, #352]	; (2c54 <a_okay+0x218>)
    2af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2af6:	18d3      	adds	r3, r2, r3
    2af8:	781a      	ldrb	r2, [r3, #0]
    2afa:	4958      	ldr	r1, [pc, #352]	; (2c5c <a_okay+0x220>)
    2afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2afe:	011b      	lsls	r3, r3, #4
    2b00:	18cb      	adds	r3, r1, r3
    2b02:	3308      	adds	r3, #8
    2b04:	781b      	ldrb	r3, [r3, #0]
    2b06:	4053      	eors	r3, r2
    2b08:	b2db      	uxtb	r3, r3
    2b0a:	001a      	movs	r2, r3
    2b0c:	2380      	movs	r3, #128	; 0x80
    2b0e:	439a      	bics	r2, r3
    2b10:	1e13      	subs	r3, r2, #0
    2b12:	d006      	beq.n	2b22 <a_okay+0xe6>
			{
				return_val = false;
    2b14:	232f      	movs	r3, #47	; 0x2f
    2b16:	2208      	movs	r2, #8
    2b18:	4694      	mov	ip, r2
    2b1a:	44bc      	add	ip, r7
    2b1c:	4463      	add	r3, ip
    2b1e:	2200      	movs	r2, #0
    2b20:	701a      	strb	r2, [r3, #0]
			}
			if ((read_data[1][i] & ~0x80) != (mcp23017_data.devices[i].outputs.ports[1] & ~0x80))
    2b22:	4a4c      	ldr	r2, [pc, #304]	; (2c54 <a_okay+0x218>)
    2b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2b26:	18d3      	adds	r3, r2, r3
    2b28:	3308      	adds	r3, #8
    2b2a:	781a      	ldrb	r2, [r3, #0]
    2b2c:	494b      	ldr	r1, [pc, #300]	; (2c5c <a_okay+0x220>)
    2b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2b30:	011b      	lsls	r3, r3, #4
    2b32:	18cb      	adds	r3, r1, r3
    2b34:	3309      	adds	r3, #9
    2b36:	781b      	ldrb	r3, [r3, #0]
    2b38:	4053      	eors	r3, r2
    2b3a:	b2db      	uxtb	r3, r3
    2b3c:	001a      	movs	r2, r3
    2b3e:	2380      	movs	r3, #128	; 0x80
    2b40:	439a      	bics	r2, r3
    2b42:	1e13      	subs	r3, r2, #0
    2b44:	d006      	beq.n	2b54 <a_okay+0x118>
			{
				return_val = false;
    2b46:	232f      	movs	r3, #47	; 0x2f
    2b48:	2208      	movs	r2, #8
    2b4a:	4694      	mov	ip, r2
    2b4c:	44bc      	add	ip, r7
    2b4e:	4463      	add	r3, ip
    2b50:	2200      	movs	r2, #0
    2b52:	701a      	strb	r2, [r3, #0]
			}
		}
		mcp23017_data.devices[i].status = states[i];
    2b54:	2308      	movs	r3, #8
    2b56:	18fa      	adds	r2, r7, r3
    2b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2b5a:	18d3      	adds	r3, r2, r3
    2b5c:	7819      	ldrb	r1, [r3, #0]
    2b5e:	4a3f      	ldr	r2, [pc, #252]	; (2c5c <a_okay+0x220>)
    2b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2b62:	011b      	lsls	r3, r3, #4
    2b64:	18d3      	adds	r3, r2, r3
    2b66:	3303      	adds	r3, #3
    2b68:	1c0a      	adds	r2, r1, #0
    2b6a:	701a      	strb	r2, [r3, #0]
		sprintf(buffer,"ADDR: %d -> %d\n",i,mcp23017_data.devices[i].status);
    2b6c:	4a3b      	ldr	r2, [pc, #236]	; (2c5c <a_okay+0x220>)
    2b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2b70:	011b      	lsls	r3, r3, #4
    2b72:	18d3      	adds	r3, r2, r3
    2b74:	3303      	adds	r3, #3
    2b76:	781b      	ldrb	r3, [r3, #0]
    2b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2b7a:	4939      	ldr	r1, [pc, #228]	; (2c60 <a_okay+0x224>)
    2b7c:	2008      	movs	r0, #8
    2b7e:	2408      	movs	r4, #8
    2b80:	46a4      	mov	ip, r4
    2b82:	44bc      	add	ip, r7
    2b84:	4460      	add	r0, ip
    2b86:	4c37      	ldr	r4, [pc, #220]	; (2c64 <a_okay+0x228>)
    2b88:	47a0      	blx	r4
		ble_uart_write(buffer);
    2b8a:	2308      	movs	r3, #8
    2b8c:	2208      	movs	r2, #8
    2b8e:	4694      	mov	ip, r2
    2b90:	44bc      	add	ip, r7
    2b92:	4463      	add	r3, ip
    2b94:	0018      	movs	r0, r3
    2b96:	4b34      	ldr	r3, [pc, #208]	; (2c68 <a_okay+0x22c>)
    2b98:	4798      	blx	r3
		sb_uart_write(buffer);
    2b9a:	2308      	movs	r3, #8
    2b9c:	2208      	movs	r2, #8
    2b9e:	4694      	mov	ip, r2
    2ba0:	44bc      	add	ip, r7
    2ba2:	4463      	add	r3, ip
    2ba4:	0018      	movs	r0, r3
    2ba6:	4b31      	ldr	r3, [pc, #196]	; (2c6c <a_okay+0x230>)
    2ba8:	4798      	blx	r3
	char buffer[32];
	uint8_t states[8];
	mcp23017_read_all_ports(read_data,states);
	
	bool return_val = true;
	for (int i=0;i<8;i++)
    2baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2bac:	3301      	adds	r3, #1
    2bae:	633b      	str	r3, [r7, #48]	; 0x30
    2bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2bb2:	2b07      	cmp	r3, #7
    2bb4:	dc00      	bgt.n	2bb8 <a_okay+0x17c>
    2bb6:	e758      	b.n	2a6a <a_okay+0x2e>
		mcp23017_data.devices[i].status = states[i];
		sprintf(buffer,"ADDR: %d -> %d\n",i,mcp23017_data.devices[i].status);
		ble_uart_write(buffer);
		sb_uart_write(buffer);
	}
	sprintf(buffer,"ERR: %d%d%d%d%d%d%d%d\r\n",mcp23017_data.devices[7].error_detected,mcp23017_data.devices[6].error_detected,mcp23017_data.devices[5].error_detected,mcp23017_data.devices[4].error_detected,mcp23017_data.devices[3].error_detected,mcp23017_data.devices[2].error_detected,mcp23017_data.devices[1].error_detected,mcp23017_data.devices[0].error_detected);
    2bb8:	4b28      	ldr	r3, [pc, #160]	; (2c5c <a_okay+0x220>)
    2bba:	2272      	movs	r2, #114	; 0x72
    2bbc:	5c9b      	ldrb	r3, [r3, r2]
    2bbe:	607b      	str	r3, [r7, #4]
    2bc0:	4b26      	ldr	r3, [pc, #152]	; (2c5c <a_okay+0x220>)
    2bc2:	2262      	movs	r2, #98	; 0x62
    2bc4:	5c9b      	ldrb	r3, [r3, r2]
    2bc6:	603b      	str	r3, [r7, #0]
    2bc8:	4b24      	ldr	r3, [pc, #144]	; (2c5c <a_okay+0x220>)
    2bca:	2252      	movs	r2, #82	; 0x52
    2bcc:	5c9b      	ldrb	r3, [r3, r2]
    2bce:	001c      	movs	r4, r3
    2bd0:	4b22      	ldr	r3, [pc, #136]	; (2c5c <a_okay+0x220>)
    2bd2:	2242      	movs	r2, #66	; 0x42
    2bd4:	5c9b      	ldrb	r3, [r3, r2]
    2bd6:	001d      	movs	r5, r3
    2bd8:	4b20      	ldr	r3, [pc, #128]	; (2c5c <a_okay+0x220>)
    2bda:	2232      	movs	r2, #50	; 0x32
    2bdc:	5c9b      	ldrb	r3, [r3, r2]
    2bde:	001e      	movs	r6, r3
    2be0:	4b1e      	ldr	r3, [pc, #120]	; (2c5c <a_okay+0x220>)
    2be2:	2222      	movs	r2, #34	; 0x22
    2be4:	5c9b      	ldrb	r3, [r3, r2]
    2be6:	001a      	movs	r2, r3
    2be8:	4b1c      	ldr	r3, [pc, #112]	; (2c5c <a_okay+0x220>)
    2bea:	7c9b      	ldrb	r3, [r3, #18]
    2bec:	469c      	mov	ip, r3
    2bee:	4b1b      	ldr	r3, [pc, #108]	; (2c5c <a_okay+0x220>)
    2bf0:	789b      	ldrb	r3, [r3, #2]
    2bf2:	4699      	mov	r9, r3
    2bf4:	491e      	ldr	r1, [pc, #120]	; (2c70 <a_okay+0x234>)
    2bf6:	2008      	movs	r0, #8
    2bf8:	2308      	movs	r3, #8
    2bfa:	4698      	mov	r8, r3
    2bfc:	44b8      	add	r8, r7
    2bfe:	4440      	add	r0, r8
    2c00:	464b      	mov	r3, r9
    2c02:	9305      	str	r3, [sp, #20]
    2c04:	4663      	mov	r3, ip
    2c06:	9304      	str	r3, [sp, #16]
    2c08:	9203      	str	r2, [sp, #12]
    2c0a:	9602      	str	r6, [sp, #8]
    2c0c:	9501      	str	r5, [sp, #4]
    2c0e:	9400      	str	r4, [sp, #0]
    2c10:	683b      	ldr	r3, [r7, #0]
    2c12:	687a      	ldr	r2, [r7, #4]
    2c14:	4c13      	ldr	r4, [pc, #76]	; (2c64 <a_okay+0x228>)
    2c16:	47a0      	blx	r4
	ble_uart_write(buffer);
    2c18:	2308      	movs	r3, #8
    2c1a:	2208      	movs	r2, #8
    2c1c:	4694      	mov	ip, r2
    2c1e:	44bc      	add	ip, r7
    2c20:	4463      	add	r3, ip
    2c22:	0018      	movs	r0, r3
    2c24:	4b10      	ldr	r3, [pc, #64]	; (2c68 <a_okay+0x22c>)
    2c26:	4798      	blx	r3
	sb_uart_write(buffer);
    2c28:	2308      	movs	r3, #8
    2c2a:	2208      	movs	r2, #8
    2c2c:	4694      	mov	ip, r2
    2c2e:	44bc      	add	ip, r7
    2c30:	4463      	add	r3, ip
    2c32:	0018      	movs	r0, r3
    2c34:	4b0d      	ldr	r3, [pc, #52]	; (2c6c <a_okay+0x230>)
    2c36:	4798      	blx	r3
	
	return return_val;
    2c38:	232f      	movs	r3, #47	; 0x2f
    2c3a:	2208      	movs	r2, #8
    2c3c:	4694      	mov	ip, r2
    2c3e:	44bc      	add	ip, r7
    2c40:	4463      	add	r3, ip
    2c42:	781b      	ldrb	r3, [r3, #0]
}
    2c44:	0018      	movs	r0, r3
    2c46:	46bd      	mov	sp, r7
    2c48:	b00f      	add	sp, #60	; 0x3c
    2c4a:	bc0c      	pop	{r2, r3}
    2c4c:	4690      	mov	r8, r2
    2c4e:	4699      	mov	r9, r3
    2c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c52:	46c0      	nop			; (mov r8, r8)
    2c54:	20000754 	.word	0x20000754
    2c58:	000031b5 	.word	0x000031b5
    2c5c:	200000e0 	.word	0x200000e0
    2c60:	00006e74 	.word	0x00006e74
    2c64:	00005895 	.word	0x00005895
    2c68:	00000dbd 	.word	0x00000dbd
    2c6c:	00004015 	.word	0x00004015
    2c70:	00006e84 	.word	0x00006e84

00002c74 <configure_pin>:

void configure_pin(uint8_t port, uint8_t addr, uint8_t pin, bool value)
{
    2c74:	b5b0      	push	{r4, r5, r7, lr}
    2c76:	b082      	sub	sp, #8
    2c78:	af00      	add	r7, sp, #0
    2c7a:	0005      	movs	r5, r0
    2c7c:	000c      	movs	r4, r1
    2c7e:	0010      	movs	r0, r2
    2c80:	0019      	movs	r1, r3
    2c82:	1dfb      	adds	r3, r7, #7
    2c84:	1c2a      	adds	r2, r5, #0
    2c86:	701a      	strb	r2, [r3, #0]
    2c88:	1dbb      	adds	r3, r7, #6
    2c8a:	1c22      	adds	r2, r4, #0
    2c8c:	701a      	strb	r2, [r3, #0]
    2c8e:	1d7b      	adds	r3, r7, #5
    2c90:	1c02      	adds	r2, r0, #0
    2c92:	701a      	strb	r2, [r3, #0]
    2c94:	1d3b      	adds	r3, r7, #4
    2c96:	1c0a      	adds	r2, r1, #0
    2c98:	701a      	strb	r2, [r3, #0]
	if(value)
    2c9a:	1d3b      	adds	r3, r7, #4
    2c9c:	781b      	ldrb	r3, [r3, #0]
    2c9e:	2b00      	cmp	r3, #0
    2ca0:	d01f      	beq.n	2ce2 <configure_pin+0x6e>
	{
		mcp23017_data.devices[addr].outputs.ports[port] |= (1 << pin);
    2ca2:	1dbb      	adds	r3, r7, #6
    2ca4:	781a      	ldrb	r2, [r3, #0]
    2ca6:	1dfb      	adds	r3, r7, #7
    2ca8:	781b      	ldrb	r3, [r3, #0]
    2caa:	1db9      	adds	r1, r7, #6
    2cac:	7808      	ldrb	r0, [r1, #0]
    2cae:	1df9      	adds	r1, r7, #7
    2cb0:	7809      	ldrb	r1, [r1, #0]
    2cb2:	4c1e      	ldr	r4, [pc, #120]	; (2d2c <configure_pin+0xb8>)
    2cb4:	0100      	lsls	r0, r0, #4
    2cb6:	1820      	adds	r0, r4, r0
    2cb8:	1841      	adds	r1, r0, r1
    2cba:	3108      	adds	r1, #8
    2cbc:	7809      	ldrb	r1, [r1, #0]
    2cbe:	b248      	sxtb	r0, r1
    2cc0:	1d79      	adds	r1, r7, #5
    2cc2:	7809      	ldrb	r1, [r1, #0]
    2cc4:	2401      	movs	r4, #1
    2cc6:	408c      	lsls	r4, r1
    2cc8:	0021      	movs	r1, r4
    2cca:	b249      	sxtb	r1, r1
    2ccc:	4301      	orrs	r1, r0
    2cce:	b249      	sxtb	r1, r1
    2cd0:	b2c8      	uxtb	r0, r1
    2cd2:	4916      	ldr	r1, [pc, #88]	; (2d2c <configure_pin+0xb8>)
    2cd4:	0112      	lsls	r2, r2, #4
    2cd6:	188a      	adds	r2, r1, r2
    2cd8:	18d3      	adds	r3, r2, r3
    2cda:	3308      	adds	r3, #8
    2cdc:	1c02      	adds	r2, r0, #0
    2cde:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		mcp23017_data.devices[addr].outputs.ports[port] &= ~(1 << pin);
	}
}
    2ce0:	e020      	b.n	2d24 <configure_pin+0xb0>
	{
		mcp23017_data.devices[addr].outputs.ports[port] |= (1 << pin);
	}
	else
	{
		mcp23017_data.devices[addr].outputs.ports[port] &= ~(1 << pin);
    2ce2:	1dbb      	adds	r3, r7, #6
    2ce4:	781a      	ldrb	r2, [r3, #0]
    2ce6:	1dfb      	adds	r3, r7, #7
    2ce8:	781b      	ldrb	r3, [r3, #0]
    2cea:	1db9      	adds	r1, r7, #6
    2cec:	7808      	ldrb	r0, [r1, #0]
    2cee:	1df9      	adds	r1, r7, #7
    2cf0:	7809      	ldrb	r1, [r1, #0]
    2cf2:	4c0e      	ldr	r4, [pc, #56]	; (2d2c <configure_pin+0xb8>)
    2cf4:	0100      	lsls	r0, r0, #4
    2cf6:	1820      	adds	r0, r4, r0
    2cf8:	1841      	adds	r1, r0, r1
    2cfa:	3108      	adds	r1, #8
    2cfc:	7809      	ldrb	r1, [r1, #0]
    2cfe:	b249      	sxtb	r1, r1
    2d00:	1d78      	adds	r0, r7, #5
    2d02:	7800      	ldrb	r0, [r0, #0]
    2d04:	2401      	movs	r4, #1
    2d06:	4084      	lsls	r4, r0
    2d08:	0020      	movs	r0, r4
    2d0a:	b240      	sxtb	r0, r0
    2d0c:	43c0      	mvns	r0, r0
    2d0e:	b240      	sxtb	r0, r0
    2d10:	4001      	ands	r1, r0
    2d12:	b249      	sxtb	r1, r1
    2d14:	b2c8      	uxtb	r0, r1
    2d16:	4905      	ldr	r1, [pc, #20]	; (2d2c <configure_pin+0xb8>)
    2d18:	0112      	lsls	r2, r2, #4
    2d1a:	188a      	adds	r2, r1, r2
    2d1c:	18d3      	adds	r3, r2, r3
    2d1e:	3308      	adds	r3, #8
    2d20:	1c02      	adds	r2, r0, #0
    2d22:	701a      	strb	r2, [r3, #0]
	}
}
    2d24:	46c0      	nop			; (mov r8, r8)
    2d26:	46bd      	mov	sp, r7
    2d28:	b002      	add	sp, #8
    2d2a:	bdb0      	pop	{r4, r5, r7, pc}
    2d2c:	200000e0 	.word	0x200000e0

00002d30 <mcp23017_check_all>:
		mcp23017_data.devices[i].status = STATUS_OK;
	}
}

void mcp23017_check_all()
{
    2d30:	b590      	push	{r4, r7, lr}
    2d32:	b08b      	sub	sp, #44	; 0x2c
    2d34:	af00      	add	r7, sp, #0
	bool returnVal = false;
    2d36:	2327      	movs	r3, #39	; 0x27
    2d38:	18fb      	adds	r3, r7, r3
    2d3a:	2200      	movs	r2, #0
    2d3c:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[32];
	for (int i=0;i<8;i++)
    2d3e:	2300      	movs	r3, #0
    2d40:	623b      	str	r3, [r7, #32]
    2d42:	e025      	b.n	2d90 <mcp23017_check_all+0x60>
	{
		if (mcp23017_data.devices[i].should_be_enabled & mcp23017_data.devices[i].status != STATUS_OK)
    2d44:	4b1c      	ldr	r3, [pc, #112]	; (2db8 <mcp23017_check_all+0x88>)
    2d46:	6a3a      	ldr	r2, [r7, #32]
    2d48:	0112      	lsls	r2, r2, #4
    2d4a:	5cd3      	ldrb	r3, [r2, r3]
    2d4c:	0019      	movs	r1, r3
    2d4e:	4a1a      	ldr	r2, [pc, #104]	; (2db8 <mcp23017_check_all+0x88>)
    2d50:	6a3b      	ldr	r3, [r7, #32]
    2d52:	011b      	lsls	r3, r3, #4
    2d54:	18d3      	adds	r3, r2, r3
    2d56:	3303      	adds	r3, #3
    2d58:	781b      	ldrb	r3, [r3, #0]
    2d5a:	1e5a      	subs	r2, r3, #1
    2d5c:	4193      	sbcs	r3, r2
    2d5e:	b2db      	uxtb	r3, r3
    2d60:	400b      	ands	r3, r1
    2d62:	d012      	beq.n	2d8a <mcp23017_check_all+0x5a>
		{
			sprintf(buffer,"E: %d - %d\n",i,mcp23017_data.devices[i].status);
    2d64:	4a14      	ldr	r2, [pc, #80]	; (2db8 <mcp23017_check_all+0x88>)
    2d66:	6a3b      	ldr	r3, [r7, #32]
    2d68:	011b      	lsls	r3, r3, #4
    2d6a:	18d3      	adds	r3, r2, r3
    2d6c:	3303      	adds	r3, #3
    2d6e:	781b      	ldrb	r3, [r3, #0]
    2d70:	6a3a      	ldr	r2, [r7, #32]
    2d72:	4912      	ldr	r1, [pc, #72]	; (2dbc <mcp23017_check_all+0x8c>)
    2d74:	0038      	movs	r0, r7
    2d76:	4c12      	ldr	r4, [pc, #72]	; (2dc0 <mcp23017_check_all+0x90>)
    2d78:	47a0      	blx	r4
			ble_uart_write(buffer);
    2d7a:	003b      	movs	r3, r7
    2d7c:	0018      	movs	r0, r3
    2d7e:	4b11      	ldr	r3, [pc, #68]	; (2dc4 <mcp23017_check_all+0x94>)
    2d80:	4798      	blx	r3
			returnVal = true;
    2d82:	2327      	movs	r3, #39	; 0x27
    2d84:	18fb      	adds	r3, r7, r3
    2d86:	2201      	movs	r2, #1
    2d88:	701a      	strb	r2, [r3, #0]

void mcp23017_check_all()
{
	bool returnVal = false;
	uint8_t buffer[32];
	for (int i=0;i<8;i++)
    2d8a:	6a3b      	ldr	r3, [r7, #32]
    2d8c:	3301      	adds	r3, #1
    2d8e:	623b      	str	r3, [r7, #32]
    2d90:	6a3b      	ldr	r3, [r7, #32]
    2d92:	2b07      	cmp	r3, #7
    2d94:	ddd6      	ble.n	2d44 <mcp23017_check_all+0x14>
			sprintf(buffer,"E: %d - %d\n",i,mcp23017_data.devices[i].status);
			ble_uart_write(buffer);
			returnVal = true;
		}
	}
	if (!returnVal)
    2d96:	2327      	movs	r3, #39	; 0x27
    2d98:	18fb      	adds	r3, r7, r3
    2d9a:	781b      	ldrb	r3, [r3, #0]
    2d9c:	2201      	movs	r2, #1
    2d9e:	4053      	eors	r3, r2
    2da0:	b2db      	uxtb	r3, r3
    2da2:	2b00      	cmp	r3, #0
    2da4:	d003      	beq.n	2dae <mcp23017_check_all+0x7e>
	{
		ble_uart_write("ALL OK");
    2da6:	4b08      	ldr	r3, [pc, #32]	; (2dc8 <mcp23017_check_all+0x98>)
    2da8:	0018      	movs	r0, r3
    2daa:	4b06      	ldr	r3, [pc, #24]	; (2dc4 <mcp23017_check_all+0x94>)
    2dac:	4798      	blx	r3
	}
    2dae:	46c0      	nop			; (mov r8, r8)
    2db0:	46bd      	mov	sp, r7
    2db2:	b00b      	add	sp, #44	; 0x2c
    2db4:	bd90      	pop	{r4, r7, pc}
    2db6:	46c0      	nop			; (mov r8, r8)
    2db8:	200000e0 	.word	0x200000e0
    2dbc:	00006e9c 	.word	0x00006e9c
    2dc0:	00005895 	.word	0x00005895
    2dc4:	00000dbd 	.word	0x00000dbd
    2dc8:	00006ea8 	.word	0x00006ea8

00002dcc <i2c_write>:
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
	i2c_master_enable(&i2c_master_instance);
}

uint8_t i2c_write(uint8_t address,uint8_t* data, uint8_t data_size)
{
    2dcc:	b580      	push	{r7, lr}
    2dce:	b086      	sub	sp, #24
    2dd0:	af00      	add	r7, sp, #0
    2dd2:	6039      	str	r1, [r7, #0]
    2dd4:	0011      	movs	r1, r2
    2dd6:	1dfb      	adds	r3, r7, #7
    2dd8:	1c02      	adds	r2, r0, #0
    2dda:	701a      	strb	r2, [r3, #0]
    2ddc:	1dbb      	adds	r3, r7, #6
    2dde:	1c0a      	adds	r2, r1, #0
    2de0:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
    2de2:	1dfb      	adds	r3, r7, #7
    2de4:	781b      	ldrb	r3, [r3, #0]
    2de6:	b29a      	uxth	r2, r3
    2de8:	2308      	movs	r3, #8
    2dea:	18fb      	adds	r3, r7, r3
    2dec:	801a      	strh	r2, [r3, #0]
    2dee:	1dbb      	adds	r3, r7, #6
    2df0:	781b      	ldrb	r3, [r3, #0]
    2df2:	b29a      	uxth	r2, r3
    2df4:	2308      	movs	r3, #8
    2df6:	18fb      	adds	r3, r7, r3
    2df8:	805a      	strh	r2, [r3, #2]
    2dfa:	2308      	movs	r3, #8
    2dfc:	18fb      	adds	r3, r7, r3
    2dfe:	683a      	ldr	r2, [r7, #0]
    2e00:	605a      	str	r2, [r3, #4]
    2e02:	2308      	movs	r3, #8
    2e04:	18fb      	adds	r3, r7, r3
    2e06:	2200      	movs	r2, #0
    2e08:	721a      	strb	r2, [r3, #8]
    2e0a:	2308      	movs	r3, #8
    2e0c:	18fb      	adds	r3, r7, r3
    2e0e:	2200      	movs	r2, #0
    2e10:	725a      	strb	r2, [r3, #9]
    2e12:	2308      	movs	r3, #8
    2e14:	18fb      	adds	r3, r7, r3
    2e16:	2200      	movs	r2, #0
    2e18:	729a      	strb	r2, [r3, #10]
		.data        = data,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	uint16_t timeout = 0;
    2e1a:	2316      	movs	r3, #22
    2e1c:	18fb      	adds	r3, r7, r3
    2e1e:	2200      	movs	r2, #0
    2e20:	801a      	strh	r2, [r3, #0]

	return i2c_master_write_packet_wait(&i2c_master_instance,&packet);
    2e22:	2308      	movs	r3, #8
    2e24:	18fa      	adds	r2, r7, r3
    2e26:	4b05      	ldr	r3, [pc, #20]	; (2e3c <i2c_write+0x70>)
    2e28:	0011      	movs	r1, r2
    2e2a:	0018      	movs	r0, r3
    2e2c:	4b04      	ldr	r3, [pc, #16]	; (2e40 <i2c_write+0x74>)
    2e2e:	4798      	blx	r3
    2e30:	0003      	movs	r3, r0
	{
		if (timeout++ == I2C_TIMEOUT) {
			break;
		}
	}*/
}
    2e32:	0018      	movs	r0, r3
    2e34:	46bd      	mov	sp, r7
    2e36:	b006      	add	sp, #24
    2e38:	bd80      	pop	{r7, pc}
    2e3a:	46c0      	nop			; (mov r8, r8)
    2e3c:	20001030 	.word	0x20001030
    2e40:	00000af1 	.word	0x00000af1

00002e44 <i2c_read>:
	}	
	return found_array;
}

uint8_t i2c_read(uint8_t addr,uint8_t reg, uint8_t data_length,uint8_t* data_ptr)
{
    2e44:	b590      	push	{r4, r7, lr}
    2e46:	b08b      	sub	sp, #44	; 0x2c
    2e48:	af00      	add	r7, sp, #0
    2e4a:	0004      	movs	r4, r0
    2e4c:	0008      	movs	r0, r1
    2e4e:	0011      	movs	r1, r2
    2e50:	603b      	str	r3, [r7, #0]
    2e52:	1dfb      	adds	r3, r7, #7
    2e54:	1c22      	adds	r2, r4, #0
    2e56:	701a      	strb	r2, [r3, #0]
    2e58:	1dbb      	adds	r3, r7, #6
    2e5a:	1c02      	adds	r2, r0, #0
    2e5c:	701a      	strb	r2, [r3, #0]
    2e5e:	1d7b      	adds	r3, r7, #5
    2e60:	1c0a      	adds	r2, r1, #0
    2e62:	701a      	strb	r2, [r3, #0]
	//uint8_t read_datab[data_length];
	uint8_t state = 0;
    2e64:	2325      	movs	r3, #37	; 0x25
    2e66:	18fb      	adds	r3, r7, r3
    2e68:	2200      	movs	r2, #0
    2e6a:	701a      	strb	r2, [r3, #0]
	//uint8_t address = (addr << 1) + 1;
	
	uint8_t data[2];
	data[0] = reg;
    2e6c:	2320      	movs	r3, #32
    2e6e:	18fb      	adds	r3, r7, r3
    2e70:	1dba      	adds	r2, r7, #6
    2e72:	7812      	ldrb	r2, [r2, #0]
    2e74:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
    2e76:	2320      	movs	r3, #32
    2e78:	18fb      	adds	r3, r7, r3
    2e7a:	22ff      	movs	r2, #255	; 0xff
    2e7c:	705a      	strb	r2, [r3, #1]
	
	struct i2c_master_packet packet = {
    2e7e:	1dfb      	adds	r3, r7, #7
    2e80:	781b      	ldrb	r3, [r3, #0]
    2e82:	b29b      	uxth	r3, r3
    2e84:	2280      	movs	r2, #128	; 0x80
    2e86:	0052      	lsls	r2, r2, #1
    2e88:	4313      	orrs	r3, r2
    2e8a:	b29a      	uxth	r2, r3
    2e8c:	2314      	movs	r3, #20
    2e8e:	18fb      	adds	r3, r7, r3
    2e90:	801a      	strh	r2, [r3, #0]
    2e92:	1d7b      	adds	r3, r7, #5
    2e94:	781b      	ldrb	r3, [r3, #0]
    2e96:	b29a      	uxth	r2, r3
    2e98:	2314      	movs	r3, #20
    2e9a:	18fb      	adds	r3, r7, r3
    2e9c:	805a      	strh	r2, [r3, #2]
    2e9e:	2314      	movs	r3, #20
    2ea0:	18fb      	adds	r3, r7, r3
    2ea2:	2220      	movs	r2, #32
    2ea4:	18ba      	adds	r2, r7, r2
    2ea6:	605a      	str	r2, [r3, #4]
    2ea8:	2314      	movs	r3, #20
    2eaa:	18fb      	adds	r3, r7, r3
    2eac:	2200      	movs	r2, #0
    2eae:	721a      	strb	r2, [r3, #8]
    2eb0:	2314      	movs	r3, #20
    2eb2:	18fb      	adds	r3, r7, r3
    2eb4:	2200      	movs	r2, #0
    2eb6:	725a      	strb	r2, [r3, #9]
    2eb8:	2314      	movs	r3, #20
    2eba:	18fb      	adds	r3, r7, r3
    2ebc:	2200      	movs	r2, #0
    2ebe:	729a      	strb	r2, [r3, #10]
		.data        = data,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	uint16_t timeout = 0;
    2ec0:	2326      	movs	r3, #38	; 0x26
    2ec2:	18fb      	adds	r3, r7, r3
    2ec4:	2200      	movs	r2, #0
    2ec6:	801a      	strh	r2, [r3, #0]

	do
	{
		state = i2c_master_write_packet_wait(&i2c_master_instance,&packet);
    2ec8:	2325      	movs	r3, #37	; 0x25
    2eca:	18fc      	adds	r4, r7, r3
    2ecc:	2314      	movs	r3, #20
    2ece:	18fa      	adds	r2, r7, r3
    2ed0:	4b23      	ldr	r3, [pc, #140]	; (2f60 <i2c_read+0x11c>)
    2ed2:	0011      	movs	r1, r2
    2ed4:	0018      	movs	r0, r3
    2ed6:	4b23      	ldr	r3, [pc, #140]	; (2f64 <i2c_read+0x120>)
    2ed8:	4798      	blx	r3
    2eda:	0003      	movs	r3, r0
    2edc:	7023      	strb	r3, [r4, #0]
		if (timeout++ == I2C_TIMEOUT) {
    2ede:	2326      	movs	r3, #38	; 0x26
    2ee0:	18fb      	adds	r3, r7, r3
    2ee2:	881b      	ldrh	r3, [r3, #0]
    2ee4:	2226      	movs	r2, #38	; 0x26
    2ee6:	18ba      	adds	r2, r7, r2
    2ee8:	1c59      	adds	r1, r3, #1
    2eea:	8011      	strh	r1, [r2, #0]
    2eec:	2b0a      	cmp	r3, #10
    2eee:	d103      	bne.n	2ef8 <i2c_read+0xb4>
			return state;
    2ef0:	2325      	movs	r3, #37	; 0x25
    2ef2:	18fb      	adds	r3, r7, r3
    2ef4:	781b      	ldrb	r3, [r3, #0]
    2ef6:	e02e      	b.n	2f56 <i2c_read+0x112>
			break;
		}
	}
	while (state != STATUS_OK);
    2ef8:	2325      	movs	r3, #37	; 0x25
    2efa:	18fb      	adds	r3, r7, r3
    2efc:	781b      	ldrb	r3, [r3, #0]
    2efe:	2b00      	cmp	r3, #0
    2f00:	d1e2      	bne.n	2ec8 <i2c_read+0x84>
	
	struct i2c_master_packet read_packet = {
    2f02:	1dfb      	adds	r3, r7, #7
    2f04:	781b      	ldrb	r3, [r3, #0]
    2f06:	b29a      	uxth	r2, r3
    2f08:	2308      	movs	r3, #8
    2f0a:	18fb      	adds	r3, r7, r3
    2f0c:	801a      	strh	r2, [r3, #0]
    2f0e:	1d7b      	adds	r3, r7, #5
    2f10:	781b      	ldrb	r3, [r3, #0]
    2f12:	b29a      	uxth	r2, r3
    2f14:	2308      	movs	r3, #8
    2f16:	18fb      	adds	r3, r7, r3
    2f18:	805a      	strh	r2, [r3, #2]
    2f1a:	2308      	movs	r3, #8
    2f1c:	18fb      	adds	r3, r7, r3
    2f1e:	683a      	ldr	r2, [r7, #0]
    2f20:	605a      	str	r2, [r3, #4]
    2f22:	2308      	movs	r3, #8
    2f24:	18fb      	adds	r3, r7, r3
    2f26:	2200      	movs	r2, #0
    2f28:	721a      	strb	r2, [r3, #8]
    2f2a:	2308      	movs	r3, #8
    2f2c:	18fb      	adds	r3, r7, r3
    2f2e:	2200      	movs	r2, #0
    2f30:	725a      	strb	r2, [r3, #9]
    2f32:	2308      	movs	r3, #8
    2f34:	18fb      	adds	r3, r7, r3
    2f36:	2200      	movs	r2, #0
    2f38:	729a      	strb	r2, [r3, #10]
		.data        = data_ptr,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	state = i2c_master_read_packet_wait(&i2c_master_instance,&read_packet);
    2f3a:	2325      	movs	r3, #37	; 0x25
    2f3c:	18fc      	adds	r4, r7, r3
    2f3e:	2308      	movs	r3, #8
    2f40:	18fa      	adds	r2, r7, r3
    2f42:	4b07      	ldr	r3, [pc, #28]	; (2f60 <i2c_read+0x11c>)
    2f44:	0011      	movs	r1, r2
    2f46:	0018      	movs	r0, r3
    2f48:	4b07      	ldr	r3, [pc, #28]	; (2f68 <i2c_read+0x124>)
    2f4a:	4798      	blx	r3
    2f4c:	0003      	movs	r3, r0
    2f4e:	7023      	strb	r3, [r4, #0]
	return state;
    2f50:	2325      	movs	r3, #37	; 0x25
    2f52:	18fb      	adds	r3, r7, r3
    2f54:	781b      	ldrb	r3, [r3, #0]
}
    2f56:	0018      	movs	r0, r3
    2f58:	46bd      	mov	sp, r7
    2f5a:	b00b      	add	sp, #44	; 0x2c
    2f5c:	bd90      	pop	{r4, r7, pc}
    2f5e:	46c0      	nop			; (mov r8, r8)
    2f60:	20001030 	.word	0x20001030
    2f64:	00000af1 	.word	0x00000af1
    2f68:	00000949 	.word	0x00000949

00002f6c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2f6c:	b580      	push	{r7, lr}
    2f6e:	b084      	sub	sp, #16
    2f70:	af00      	add	r7, sp, #0
    2f72:	0002      	movs	r2, r0
    2f74:	1dfb      	adds	r3, r7, #7
    2f76:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2f78:	230f      	movs	r3, #15
    2f7a:	18fb      	adds	r3, r7, r3
    2f7c:	1dfa      	adds	r2, r7, #7
    2f7e:	7812      	ldrb	r2, [r2, #0]
    2f80:	09d2      	lsrs	r2, r2, #7
    2f82:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2f84:	230e      	movs	r3, #14
    2f86:	18fb      	adds	r3, r7, r3
    2f88:	1dfa      	adds	r2, r7, #7
    2f8a:	7812      	ldrb	r2, [r2, #0]
    2f8c:	0952      	lsrs	r2, r2, #5
    2f8e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2f90:	4b0d      	ldr	r3, [pc, #52]	; (2fc8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2f92:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2f94:	230f      	movs	r3, #15
    2f96:	18fb      	adds	r3, r7, r3
    2f98:	781b      	ldrb	r3, [r3, #0]
    2f9a:	2b00      	cmp	r3, #0
    2f9c:	d10f      	bne.n	2fbe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2f9e:	230f      	movs	r3, #15
    2fa0:	18fb      	adds	r3, r7, r3
    2fa2:	781b      	ldrb	r3, [r3, #0]
    2fa4:	009b      	lsls	r3, r3, #2
    2fa6:	2210      	movs	r2, #16
    2fa8:	4694      	mov	ip, r2
    2faa:	44bc      	add	ip, r7
    2fac:	4463      	add	r3, ip
    2fae:	3b08      	subs	r3, #8
    2fb0:	681a      	ldr	r2, [r3, #0]
    2fb2:	230e      	movs	r3, #14
    2fb4:	18fb      	adds	r3, r7, r3
    2fb6:	781b      	ldrb	r3, [r3, #0]
    2fb8:	01db      	lsls	r3, r3, #7
    2fba:	18d3      	adds	r3, r2, r3
    2fbc:	e000      	b.n	2fc0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2fbe:	2300      	movs	r3, #0
	}
}
    2fc0:	0018      	movs	r0, r3
    2fc2:	46bd      	mov	sp, r7
    2fc4:	b004      	add	sp, #16
    2fc6:	bd80      	pop	{r7, pc}
    2fc8:	41004400 	.word	0x41004400

00002fcc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2fcc:	b580      	push	{r7, lr}
    2fce:	b082      	sub	sp, #8
    2fd0:	af00      	add	r7, sp, #0
    2fd2:	0002      	movs	r2, r0
    2fd4:	1dfb      	adds	r3, r7, #7
    2fd6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2fd8:	1dfb      	adds	r3, r7, #7
    2fda:	781b      	ldrb	r3, [r3, #0]
    2fdc:	0018      	movs	r0, r3
    2fde:	4b03      	ldr	r3, [pc, #12]	; (2fec <port_get_group_from_gpio_pin+0x20>)
    2fe0:	4798      	blx	r3
    2fe2:	0003      	movs	r3, r0
}
    2fe4:	0018      	movs	r0, r3
    2fe6:	46bd      	mov	sp, r7
    2fe8:	b002      	add	sp, #8
    2fea:	bd80      	pop	{r7, pc}
    2fec:	00002f6d 	.word	0x00002f6d

00002ff0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2ff0:	b580      	push	{r7, lr}
    2ff2:	b084      	sub	sp, #16
    2ff4:	af00      	add	r7, sp, #0
    2ff6:	0002      	movs	r2, r0
    2ff8:	1dfb      	adds	r3, r7, #7
    2ffa:	701a      	strb	r2, [r3, #0]
    2ffc:	1dbb      	adds	r3, r7, #6
    2ffe:	1c0a      	adds	r2, r1, #0
    3000:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3002:	1dfb      	adds	r3, r7, #7
    3004:	781b      	ldrb	r3, [r3, #0]
    3006:	0018      	movs	r0, r3
    3008:	4b0d      	ldr	r3, [pc, #52]	; (3040 <port_pin_set_output_level+0x50>)
    300a:	4798      	blx	r3
    300c:	0003      	movs	r3, r0
    300e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3010:	1dfb      	adds	r3, r7, #7
    3012:	781b      	ldrb	r3, [r3, #0]
    3014:	221f      	movs	r2, #31
    3016:	4013      	ands	r3, r2
    3018:	2201      	movs	r2, #1
    301a:	409a      	lsls	r2, r3
    301c:	0013      	movs	r3, r2
    301e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3020:	1dbb      	adds	r3, r7, #6
    3022:	781b      	ldrb	r3, [r3, #0]
    3024:	2b00      	cmp	r3, #0
    3026:	d003      	beq.n	3030 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3028:	68fb      	ldr	r3, [r7, #12]
    302a:	68ba      	ldr	r2, [r7, #8]
    302c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    302e:	e002      	b.n	3036 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3030:	68fb      	ldr	r3, [r7, #12]
    3032:	68ba      	ldr	r2, [r7, #8]
    3034:	615a      	str	r2, [r3, #20]
	}
}
    3036:	46c0      	nop			; (mov r8, r8)
    3038:	46bd      	mov	sp, r7
    303a:	b004      	add	sp, #16
    303c:	bd80      	pop	{r7, pc}
    303e:	46c0      	nop			; (mov r8, r8)
    3040:	00002fcd 	.word	0x00002fcd

00003044 <init_all_ports>:
	data[1] = 0xFF;
	state = i2c_write(MCP23017_I2C_ADDR_000,(uint8_t *)data,2);
}

uint8_t init_all_ports(void)
{
    3044:	b590      	push	{r4, r7, lr}
    3046:	b085      	sub	sp, #20
    3048:	af00      	add	r7, sp, #0
	uint8_t states = 0;
    304a:	230f      	movs	r3, #15
    304c:	18fb      	adds	r3, r7, r3
    304e:	2200      	movs	r2, #0
    3050:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[1] = 0x00;
    3052:	1d3b      	adds	r3, r7, #4
    3054:	2200      	movs	r2, #0
    3056:	705a      	strb	r2, [r3, #1]
	
	for (int i=0;i<8;i++)
    3058:	2300      	movs	r3, #0
    305a:	60bb      	str	r3, [r7, #8]
    305c:	e036      	b.n	30cc <init_all_ports+0x88>
	{
		data[0] = MCP23017_IODIRA;
    305e:	1d3b      	adds	r3, r7, #4
    3060:	2200      	movs	r2, #0
    3062:	701a      	strb	r2, [r3, #0]
		uint8_t state = i2c_write(MCP23017_I2C_ADDR_000+i,(uint8_t *)data,2);
    3064:	68bb      	ldr	r3, [r7, #8]
    3066:	b2db      	uxtb	r3, r3
    3068:	3320      	adds	r3, #32
    306a:	b2db      	uxtb	r3, r3
    306c:	1dfc      	adds	r4, r7, #7
    306e:	1d39      	adds	r1, r7, #4
    3070:	2202      	movs	r2, #2
    3072:	0018      	movs	r0, r3
    3074:	4b28      	ldr	r3, [pc, #160]	; (3118 <init_all_ports+0xd4>)
    3076:	4798      	blx	r3
    3078:	0003      	movs	r3, r0
    307a:	7023      	strb	r3, [r4, #0]
		if (state == STATUS_OK)
    307c:	1dfb      	adds	r3, r7, #7
    307e:	781b      	ldrb	r3, [r3, #0]
    3080:	2b00      	cmp	r3, #0
    3082:	d120      	bne.n	30c6 <init_all_ports+0x82>
		{
			data[0] = MCP23017_IODIRB;
    3084:	1d3b      	adds	r3, r7, #4
    3086:	2201      	movs	r2, #1
    3088:	701a      	strb	r2, [r3, #0]
			state = i2c_write(MCP23017_I2C_ADDR_000+i,(uint8_t *)data,2);
    308a:	68bb      	ldr	r3, [r7, #8]
    308c:	b2db      	uxtb	r3, r3
    308e:	3320      	adds	r3, #32
    3090:	b2db      	uxtb	r3, r3
    3092:	1dfc      	adds	r4, r7, #7
    3094:	1d39      	adds	r1, r7, #4
    3096:	2202      	movs	r2, #2
    3098:	0018      	movs	r0, r3
    309a:	4b1f      	ldr	r3, [pc, #124]	; (3118 <init_all_ports+0xd4>)
    309c:	4798      	blx	r3
    309e:	0003      	movs	r3, r0
    30a0:	7023      	strb	r3, [r4, #0]
			if (state == STATUS_OK)
    30a2:	1dfb      	adds	r3, r7, #7
    30a4:	781b      	ldrb	r3, [r3, #0]
    30a6:	2b00      	cmp	r3, #0
    30a8:	d10d      	bne.n	30c6 <init_all_ports+0x82>
			{
				states |= (1 << i);
    30aa:	2201      	movs	r2, #1
    30ac:	68bb      	ldr	r3, [r7, #8]
    30ae:	409a      	lsls	r2, r3
    30b0:	0013      	movs	r3, r2
    30b2:	b25a      	sxtb	r2, r3
    30b4:	230f      	movs	r3, #15
    30b6:	18fb      	adds	r3, r7, r3
    30b8:	781b      	ldrb	r3, [r3, #0]
    30ba:	b25b      	sxtb	r3, r3
    30bc:	4313      	orrs	r3, r2
    30be:	b25a      	sxtb	r2, r3
    30c0:	230f      	movs	r3, #15
    30c2:	18fb      	adds	r3, r7, r3
    30c4:	701a      	strb	r2, [r3, #0]
{
	uint8_t states = 0;
	uint8_t data[2];
	data[1] = 0x00;
	
	for (int i=0;i<8;i++)
    30c6:	68bb      	ldr	r3, [r7, #8]
    30c8:	3301      	adds	r3, #1
    30ca:	60bb      	str	r3, [r7, #8]
    30cc:	68bb      	ldr	r3, [r7, #8]
    30ce:	2b07      	cmp	r3, #7
    30d0:	ddc5      	ble.n	305e <init_all_ports+0x1a>
				states |= (1 << i);
			}
		}
	}
	
	data[1] = 0x80;
    30d2:	1d3b      	adds	r3, r7, #4
    30d4:	2280      	movs	r2, #128	; 0x80
    30d6:	705a      	strb	r2, [r3, #1]
	data[0] = MCP23017_GPIOA;
    30d8:	1d3b      	adds	r3, r7, #4
    30da:	2212      	movs	r2, #18
    30dc:	701a      	strb	r2, [r3, #0]
	uint8_t state = i2c_write(MCP23017_I2C_ADDR_001,(uint8_t *)data,2);
    30de:	1dbc      	adds	r4, r7, #6
    30e0:	1d3b      	adds	r3, r7, #4
    30e2:	2202      	movs	r2, #2
    30e4:	0019      	movs	r1, r3
    30e6:	2021      	movs	r0, #33	; 0x21
    30e8:	4b0b      	ldr	r3, [pc, #44]	; (3118 <init_all_ports+0xd4>)
    30ea:	4798      	blx	r3
    30ec:	0003      	movs	r3, r0
    30ee:	7023      	strb	r3, [r4, #0]
	data[0] = MCP23017_GPIOB;
    30f0:	1d3b      	adds	r3, r7, #4
    30f2:	2213      	movs	r2, #19
    30f4:	701a      	strb	r2, [r3, #0]
	state = i2c_write(MCP23017_I2C_ADDR_001,(uint8_t *)data,2);
    30f6:	1dbc      	adds	r4, r7, #6
    30f8:	1d3b      	adds	r3, r7, #4
    30fa:	2202      	movs	r2, #2
    30fc:	0019      	movs	r1, r3
    30fe:	2021      	movs	r0, #33	; 0x21
    3100:	4b05      	ldr	r3, [pc, #20]	; (3118 <init_all_ports+0xd4>)
    3102:	4798      	blx	r3
    3104:	0003      	movs	r3, r0
    3106:	7023      	strb	r3, [r4, #0]
	
	return states;
    3108:	230f      	movs	r3, #15
    310a:	18fb      	adds	r3, r7, r3
    310c:	781b      	ldrb	r3, [r3, #0]
}
    310e:	0018      	movs	r0, r3
    3110:	46bd      	mov	sp, r7
    3112:	b005      	add	sp, #20
    3114:	bd90      	pop	{r4, r7, pc}
    3116:	46c0      	nop			; (mov r8, r8)
    3118:	00002dcd 	.word	0x00002dcd

0000311c <mcp23017_set_pins>:
	data[0] = MCP23017_GPIOB;
	state = i2c_write(MCP23017_I2C_ADDR_000,(uint8_t *)data,2);	
}

uint8_t mcp23017_set_pins(uint8_t addr, uint8_t porta, uint8_t portb)
{
    311c:	b590      	push	{r4, r7, lr}
    311e:	b085      	sub	sp, #20
    3120:	af00      	add	r7, sp, #0
    3122:	0004      	movs	r4, r0
    3124:	0008      	movs	r0, r1
    3126:	0011      	movs	r1, r2
    3128:	1dfb      	adds	r3, r7, #7
    312a:	1c22      	adds	r2, r4, #0
    312c:	701a      	strb	r2, [r3, #0]
    312e:	1dbb      	adds	r3, r7, #6
    3130:	1c02      	adds	r2, r0, #0
    3132:	701a      	strb	r2, [r3, #0]
    3134:	1d7b      	adds	r3, r7, #5
    3136:	1c0a      	adds	r2, r1, #0
    3138:	701a      	strb	r2, [r3, #0]
	uint8_t state = 0x00;
    313a:	230f      	movs	r3, #15
    313c:	18fb      	adds	r3, r7, r3
    313e:	2200      	movs	r2, #0
    3140:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = MCP23017_GPIOA;
    3142:	230c      	movs	r3, #12
    3144:	18fb      	adds	r3, r7, r3
    3146:	2212      	movs	r2, #18
    3148:	701a      	strb	r2, [r3, #0]
	data[1] = porta;
    314a:	230c      	movs	r3, #12
    314c:	18fb      	adds	r3, r7, r3
    314e:	1dba      	adds	r2, r7, #6
    3150:	7812      	ldrb	r2, [r2, #0]
    3152:	705a      	strb	r2, [r3, #1]
	state = i2c_write(addr,(uint8_t *)data,2);
    3154:	230f      	movs	r3, #15
    3156:	18fc      	adds	r4, r7, r3
    3158:	230c      	movs	r3, #12
    315a:	18f9      	adds	r1, r7, r3
    315c:	1dfb      	adds	r3, r7, #7
    315e:	781b      	ldrb	r3, [r3, #0]
    3160:	2202      	movs	r2, #2
    3162:	0018      	movs	r0, r3
    3164:	4b12      	ldr	r3, [pc, #72]	; (31b0 <mcp23017_set_pins+0x94>)
    3166:	4798      	blx	r3
    3168:	0003      	movs	r3, r0
    316a:	7023      	strb	r3, [r4, #0]
	data[0] = MCP23017_GPIOB;
    316c:	230c      	movs	r3, #12
    316e:	18fb      	adds	r3, r7, r3
    3170:	2213      	movs	r2, #19
    3172:	701a      	strb	r2, [r3, #0]
	data[1] = portb;
    3174:	230c      	movs	r3, #12
    3176:	18fb      	adds	r3, r7, r3
    3178:	1d7a      	adds	r2, r7, #5
    317a:	7812      	ldrb	r2, [r2, #0]
    317c:	705a      	strb	r2, [r3, #1]
	state |= i2c_write(addr,(uint8_t *)data,2);
    317e:	230c      	movs	r3, #12
    3180:	18f9      	adds	r1, r7, r3
    3182:	1dfb      	adds	r3, r7, #7
    3184:	781b      	ldrb	r3, [r3, #0]
    3186:	2202      	movs	r2, #2
    3188:	0018      	movs	r0, r3
    318a:	4b09      	ldr	r3, [pc, #36]	; (31b0 <mcp23017_set_pins+0x94>)
    318c:	4798      	blx	r3
    318e:	0003      	movs	r3, r0
    3190:	0019      	movs	r1, r3
    3192:	230f      	movs	r3, #15
    3194:	18fb      	adds	r3, r7, r3
    3196:	220f      	movs	r2, #15
    3198:	18ba      	adds	r2, r7, r2
    319a:	7812      	ldrb	r2, [r2, #0]
    319c:	430a      	orrs	r2, r1
    319e:	701a      	strb	r2, [r3, #0]
	
	return state;
    31a0:	230f      	movs	r3, #15
    31a2:	18fb      	adds	r3, r7, r3
    31a4:	781b      	ldrb	r3, [r3, #0]
}
    31a6:	0018      	movs	r0, r3
    31a8:	46bd      	mov	sp, r7
    31aa:	b005      	add	sp, #20
    31ac:	bd90      	pop	{r4, r7, pc}
    31ae:	46c0      	nop			; (mov r8, r8)
    31b0:	00002dcd 	.word	0x00002dcd

000031b4 <mcp23017_read_all_ports>:

uint8_t data_being_read[8][2];

void mcp23017_read_all_ports(uint8_t read_data_ptr[2][8], uint8_t states[8])
{
    31b4:	b5b0      	push	{r4, r5, r7, lr}
    31b6:	b084      	sub	sp, #16
    31b8:	af00      	add	r7, sp, #0
    31ba:	6078      	str	r0, [r7, #4]
    31bc:	6039      	str	r1, [r7, #0]
	uint8_t state = 0x00;
    31be:	230e      	movs	r3, #14
    31c0:	18fb      	adds	r3, r7, r3
    31c2:	2200      	movs	r2, #0
    31c4:	701a      	strb	r2, [r3, #0]
	//uint8_t data = 0x00;
	for (uint8_t i=0;i<8;i++)
    31c6:	230f      	movs	r3, #15
    31c8:	18fb      	adds	r3, r7, r3
    31ca:	2200      	movs	r2, #0
    31cc:	701a      	strb	r2, [r3, #0]
    31ce:	e03e      	b.n	324e <mcp23017_read_all_ports+0x9a>
	{
		//data = 0x00;
		//data_being_read[i][0] = 0;
		//read_data_ptr[i][0] = 0;
		state = i2c_read(MCP23017_I2C_ADDR_000+i,MCP23017_GPIOA, 1,(uint8_t *)&read_data_ptr[0][i]);
    31d0:	230f      	movs	r3, #15
    31d2:	18fb      	adds	r3, r7, r3
    31d4:	781b      	ldrb	r3, [r3, #0]
    31d6:	3320      	adds	r3, #32
    31d8:	b2d8      	uxtb	r0, r3
    31da:	230f      	movs	r3, #15
    31dc:	18fb      	adds	r3, r7, r3
    31de:	781b      	ldrb	r3, [r3, #0]
    31e0:	687a      	ldr	r2, [r7, #4]
    31e2:	18d3      	adds	r3, r2, r3
    31e4:	220e      	movs	r2, #14
    31e6:	18bc      	adds	r4, r7, r2
    31e8:	2201      	movs	r2, #1
    31ea:	2112      	movs	r1, #18
    31ec:	4d1c      	ldr	r5, [pc, #112]	; (3260 <mcp23017_read_all_ports+0xac>)
    31ee:	47a8      	blx	r5
    31f0:	0003      	movs	r3, r0
    31f2:	7023      	strb	r3, [r4, #0]
		//read_data[i][0] = data;
		//data_being_read[i][0] = data;
		//read_data_ptr[i][1] = 0;
		state |= i2c_read(MCP23017_I2C_ADDR_000+i,MCP23017_GPIOB, 1,(uint8_t *)&read_data_ptr[1][i]);
    31f4:	230f      	movs	r3, #15
    31f6:	18fb      	adds	r3, r7, r3
    31f8:	781b      	ldrb	r3, [r3, #0]
    31fa:	3320      	adds	r3, #32
    31fc:	b2d8      	uxtb	r0, r3
    31fe:	687b      	ldr	r3, [r7, #4]
    3200:	3308      	adds	r3, #8
    3202:	001a      	movs	r2, r3
    3204:	230f      	movs	r3, #15
    3206:	18fb      	adds	r3, r7, r3
    3208:	781b      	ldrb	r3, [r3, #0]
    320a:	18d3      	adds	r3, r2, r3
    320c:	2201      	movs	r2, #1
    320e:	2113      	movs	r1, #19
    3210:	4c13      	ldr	r4, [pc, #76]	; (3260 <mcp23017_read_all_ports+0xac>)
    3212:	47a0      	blx	r4
    3214:	0003      	movs	r3, r0
    3216:	0019      	movs	r1, r3
    3218:	230e      	movs	r3, #14
    321a:	18fb      	adds	r3, r7, r3
    321c:	220e      	movs	r2, #14
    321e:	18ba      	adds	r2, r7, r2
    3220:	7812      	ldrb	r2, [r2, #0]
    3222:	430a      	orrs	r2, r1
    3224:	701a      	strb	r2, [r3, #0]
		//data_being_read[i][1] = data;
		//read_data[i][1] = data;
		states[i] = state;
    3226:	230f      	movs	r3, #15
    3228:	18fb      	adds	r3, r7, r3
    322a:	781b      	ldrb	r3, [r3, #0]
    322c:	683a      	ldr	r2, [r7, #0]
    322e:	18d3      	adds	r3, r2, r3
    3230:	220e      	movs	r2, #14
    3232:	18ba      	adds	r2, r7, r2
    3234:	7812      	ldrb	r2, [r2, #0]
    3236:	701a      	strb	r2, [r3, #0]
		state = 0x00;
    3238:	230e      	movs	r3, #14
    323a:	18fb      	adds	r3, r7, r3
    323c:	2200      	movs	r2, #0
    323e:	701a      	strb	r2, [r3, #0]

void mcp23017_read_all_ports(uint8_t read_data_ptr[2][8], uint8_t states[8])
{
	uint8_t state = 0x00;
	//uint8_t data = 0x00;
	for (uint8_t i=0;i<8;i++)
    3240:	230f      	movs	r3, #15
    3242:	18fb      	adds	r3, r7, r3
    3244:	781a      	ldrb	r2, [r3, #0]
    3246:	230f      	movs	r3, #15
    3248:	18fb      	adds	r3, r7, r3
    324a:	3201      	adds	r2, #1
    324c:	701a      	strb	r2, [r3, #0]
    324e:	230f      	movs	r3, #15
    3250:	18fb      	adds	r3, r7, r3
    3252:	781b      	ldrb	r3, [r3, #0]
    3254:	2b07      	cmp	r3, #7
    3256:	d9bb      	bls.n	31d0 <mcp23017_read_all_ports+0x1c>
		states[i] = state;
		state = 0x00;
	}
	//read_data = data_being_read;
	//return state;
}
    3258:	46c0      	nop			; (mov r8, r8)
    325a:	46bd      	mov	sp, r7
    325c:	b004      	add	sp, #16
    325e:	bdb0      	pop	{r4, r5, r7, pc}
    3260:	00002e45 	.word	0x00002e45

00003264 <mcp23017_reset>:
	port_pin_set_config(MCP23017_PWR_PIN,&config_port_pin);
	port_pin_set_output_level(MCP23017_PWR_PIN,true);
}

void mcp23017_reset(void)
{
    3264:	b5f0      	push	{r4, r5, r6, r7, lr}
    3266:	b087      	sub	sp, #28
    3268:	af00      	add	r7, sp, #0
	port_pin_set_output_level(MCP23017_PWR_PIN, false);
    326a:	2100      	movs	r1, #0
    326c:	2007      	movs	r0, #7
    326e:	4b32      	ldr	r3, [pc, #200]	; (3338 <mcp23017_reset+0xd4>)
    3270:	4798      	blx	r3
	delay_ms(250);
    3272:	2000      	movs	r0, #0
    3274:	4b31      	ldr	r3, [pc, #196]	; (333c <mcp23017_reset+0xd8>)
    3276:	4798      	blx	r3
    3278:	0003      	movs	r3, r0
    327a:	001d      	movs	r5, r3
    327c:	2300      	movs	r3, #0
    327e:	001e      	movs	r6, r3
    3280:	4c2f      	ldr	r4, [pc, #188]	; (3340 <mcp23017_reset+0xdc>)
    3282:	22fa      	movs	r2, #250	; 0xfa
    3284:	2300      	movs	r3, #0
    3286:	0028      	movs	r0, r5
    3288:	0031      	movs	r1, r6
    328a:	47a0      	blx	r4
    328c:	0003      	movs	r3, r0
    328e:	000c      	movs	r4, r1
    3290:	0019      	movs	r1, r3
    3292:	0022      	movs	r2, r4
    3294:	4b2b      	ldr	r3, [pc, #172]	; (3344 <mcp23017_reset+0xe0>)
    3296:	2400      	movs	r4, #0
    3298:	18c9      	adds	r1, r1, r3
    329a:	4162      	adcs	r2, r4
    329c:	0008      	movs	r0, r1
    329e:	0011      	movs	r1, r2
    32a0:	4c29      	ldr	r4, [pc, #164]	; (3348 <mcp23017_reset+0xe4>)
    32a2:	4a2a      	ldr	r2, [pc, #168]	; (334c <mcp23017_reset+0xe8>)
    32a4:	2300      	movs	r3, #0
    32a6:	47a0      	blx	r4
    32a8:	0003      	movs	r3, r0
    32aa:	000c      	movs	r4, r1
    32ac:	0018      	movs	r0, r3
    32ae:	4b28      	ldr	r3, [pc, #160]	; (3350 <mcp23017_reset+0xec>)
    32b0:	4798      	blx	r3
	port_pin_set_output_level(MCP23017_PWR_PIN, true);
    32b2:	2101      	movs	r1, #1
    32b4:	2007      	movs	r0, #7
    32b6:	4b20      	ldr	r3, [pc, #128]	; (3338 <mcp23017_reset+0xd4>)
    32b8:	4798      	blx	r3
	delay_ms(125);
    32ba:	2000      	movs	r0, #0
    32bc:	4b1f      	ldr	r3, [pc, #124]	; (333c <mcp23017_reset+0xd8>)
    32be:	4798      	blx	r3
    32c0:	0003      	movs	r3, r0
    32c2:	603b      	str	r3, [r7, #0]
    32c4:	2300      	movs	r3, #0
    32c6:	607b      	str	r3, [r7, #4]
    32c8:	6838      	ldr	r0, [r7, #0]
    32ca:	6879      	ldr	r1, [r7, #4]
    32cc:	0003      	movs	r3, r0
    32ce:	000c      	movs	r4, r1
    32d0:	0eda      	lsrs	r2, r3, #27
    32d2:	0165      	lsls	r5, r4, #5
    32d4:	617d      	str	r5, [r7, #20]
    32d6:	697d      	ldr	r5, [r7, #20]
    32d8:	4315      	orrs	r5, r2
    32da:	617d      	str	r5, [r7, #20]
    32dc:	015b      	lsls	r3, r3, #5
    32de:	613b      	str	r3, [r7, #16]
    32e0:	693c      	ldr	r4, [r7, #16]
    32e2:	697d      	ldr	r5, [r7, #20]
    32e4:	0002      	movs	r2, r0
    32e6:	000b      	movs	r3, r1
    32e8:	1aa4      	subs	r4, r4, r2
    32ea:	419d      	sbcs	r5, r3
    32ec:	0023      	movs	r3, r4
    32ee:	002c      	movs	r4, r5
    32f0:	0f9a      	lsrs	r2, r3, #30
    32f2:	00a5      	lsls	r5, r4, #2
    32f4:	60fd      	str	r5, [r7, #12]
    32f6:	68fd      	ldr	r5, [r7, #12]
    32f8:	4315      	orrs	r5, r2
    32fa:	60fd      	str	r5, [r7, #12]
    32fc:	009b      	lsls	r3, r3, #2
    32fe:	60bb      	str	r3, [r7, #8]
    3300:	0003      	movs	r3, r0
    3302:	000c      	movs	r4, r1
    3304:	68b9      	ldr	r1, [r7, #8]
    3306:	68fa      	ldr	r2, [r7, #12]
    3308:	185b      	adds	r3, r3, r1
    330a:	4154      	adcs	r4, r2
    330c:	490d      	ldr	r1, [pc, #52]	; (3344 <mcp23017_reset+0xe0>)
    330e:	2200      	movs	r2, #0
    3310:	185b      	adds	r3, r3, r1
    3312:	4154      	adcs	r4, r2
    3314:	0018      	movs	r0, r3
    3316:	0021      	movs	r1, r4
    3318:	4c0b      	ldr	r4, [pc, #44]	; (3348 <mcp23017_reset+0xe4>)
    331a:	4a0c      	ldr	r2, [pc, #48]	; (334c <mcp23017_reset+0xe8>)
    331c:	2300      	movs	r3, #0
    331e:	47a0      	blx	r4
    3320:	0003      	movs	r3, r0
    3322:	000c      	movs	r4, r1
    3324:	0018      	movs	r0, r3
    3326:	4b0a      	ldr	r3, [pc, #40]	; (3350 <mcp23017_reset+0xec>)
    3328:	4798      	blx	r3
	init_all_ports();
    332a:	4b0a      	ldr	r3, [pc, #40]	; (3354 <mcp23017_reset+0xf0>)
    332c:	4798      	blx	r3
	//TODO pull PWR or RESET to MCP23017 ICs.
}
    332e:	46c0      	nop			; (mov r8, r8)
    3330:	46bd      	mov	sp, r7
    3332:	b007      	add	sp, #28
    3334:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	00002ff1 	.word	0x00002ff1
    333c:	000048c9 	.word	0x000048c9
    3340:	00005609 	.word	0x00005609
    3344:	00001b57 	.word	0x00001b57
    3348:	000055c9 	.word	0x000055c9
    334c:	00001b58 	.word	0x00001b58
    3350:	20000001 	.word	0x20000001
    3354:	00003045 	.word	0x00003045

00003358 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3358:	b580      	push	{r7, lr}
    335a:	b084      	sub	sp, #16
    335c:	af00      	add	r7, sp, #0
    335e:	0002      	movs	r2, r0
    3360:	1dfb      	adds	r3, r7, #7
    3362:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3364:	230f      	movs	r3, #15
    3366:	18fb      	adds	r3, r7, r3
    3368:	1dfa      	adds	r2, r7, #7
    336a:	7812      	ldrb	r2, [r2, #0]
    336c:	09d2      	lsrs	r2, r2, #7
    336e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3370:	230e      	movs	r3, #14
    3372:	18fb      	adds	r3, r7, r3
    3374:	1dfa      	adds	r2, r7, #7
    3376:	7812      	ldrb	r2, [r2, #0]
    3378:	0952      	lsrs	r2, r2, #5
    337a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    337c:	4b0d      	ldr	r3, [pc, #52]	; (33b4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    337e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3380:	230f      	movs	r3, #15
    3382:	18fb      	adds	r3, r7, r3
    3384:	781b      	ldrb	r3, [r3, #0]
    3386:	2b00      	cmp	r3, #0
    3388:	d10f      	bne.n	33aa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    338a:	230f      	movs	r3, #15
    338c:	18fb      	adds	r3, r7, r3
    338e:	781b      	ldrb	r3, [r3, #0]
    3390:	009b      	lsls	r3, r3, #2
    3392:	2210      	movs	r2, #16
    3394:	4694      	mov	ip, r2
    3396:	44bc      	add	ip, r7
    3398:	4463      	add	r3, ip
    339a:	3b08      	subs	r3, #8
    339c:	681a      	ldr	r2, [r3, #0]
    339e:	230e      	movs	r3, #14
    33a0:	18fb      	adds	r3, r7, r3
    33a2:	781b      	ldrb	r3, [r3, #0]
    33a4:	01db      	lsls	r3, r3, #7
    33a6:	18d3      	adds	r3, r2, r3
    33a8:	e000      	b.n	33ac <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    33aa:	2300      	movs	r3, #0
	}
}
    33ac:	0018      	movs	r0, r3
    33ae:	46bd      	mov	sp, r7
    33b0:	b004      	add	sp, #16
    33b2:	bd80      	pop	{r7, pc}
    33b4:	41004400 	.word	0x41004400

000033b8 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    33b8:	b580      	push	{r7, lr}
    33ba:	b084      	sub	sp, #16
    33bc:	af00      	add	r7, sp, #0
    33be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    33c0:	687b      	ldr	r3, [r7, #4]
    33c2:	681b      	ldr	r3, [r3, #0]
    33c4:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    33c6:	68fb      	ldr	r3, [r7, #12]
    33c8:	7e5b      	ldrb	r3, [r3, #25]
    33ca:	b2db      	uxtb	r3, r3
    33cc:	b25b      	sxtb	r3, r3
    33ce:	2b00      	cmp	r3, #0
    33d0:	da01      	bge.n	33d6 <adc_is_syncing+0x1e>
		return true;
    33d2:	2301      	movs	r3, #1
    33d4:	e000      	b.n	33d8 <adc_is_syncing+0x20>
	}

	return false;
    33d6:	2300      	movs	r3, #0
}
    33d8:	0018      	movs	r0, r3
    33da:	46bd      	mov	sp, r7
    33dc:	b004      	add	sp, #16
    33de:	bd80      	pop	{r7, pc}

000033e0 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    33e0:	b580      	push	{r7, lr}
    33e2:	b086      	sub	sp, #24
    33e4:	af00      	add	r7, sp, #0
    33e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    33e8:	687b      	ldr	r3, [r7, #4]
    33ea:	681b      	ldr	r3, [r3, #0]
    33ec:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    33ee:	693b      	ldr	r3, [r7, #16]
    33f0:	7e1b      	ldrb	r3, [r3, #24]
    33f2:	b2db      	uxtb	r3, r3
    33f4:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    33f6:	2300      	movs	r3, #0
    33f8:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    33fa:	68fb      	ldr	r3, [r7, #12]
    33fc:	2201      	movs	r2, #1
    33fe:	4013      	ands	r3, r2
    3400:	d003      	beq.n	340a <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    3402:	697b      	ldr	r3, [r7, #20]
    3404:	2201      	movs	r2, #1
    3406:	4313      	orrs	r3, r2
    3408:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    340a:	68fb      	ldr	r3, [r7, #12]
    340c:	2204      	movs	r2, #4
    340e:	4013      	ands	r3, r2
    3410:	d003      	beq.n	341a <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    3412:	697b      	ldr	r3, [r7, #20]
    3414:	2202      	movs	r2, #2
    3416:	4313      	orrs	r3, r2
    3418:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    341a:	68fb      	ldr	r3, [r7, #12]
    341c:	2202      	movs	r2, #2
    341e:	4013      	ands	r3, r2
    3420:	d003      	beq.n	342a <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    3422:	697b      	ldr	r3, [r7, #20]
    3424:	2204      	movs	r2, #4
    3426:	4313      	orrs	r3, r2
    3428:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    342a:	697b      	ldr	r3, [r7, #20]
}
    342c:	0018      	movs	r0, r3
    342e:	46bd      	mov	sp, r7
    3430:	b006      	add	sp, #24
    3432:	bd80      	pop	{r7, pc}

00003434 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    3434:	b580      	push	{r7, lr}
    3436:	b084      	sub	sp, #16
    3438:	af00      	add	r7, sp, #0
    343a:	6078      	str	r0, [r7, #4]
    343c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    343e:	687b      	ldr	r3, [r7, #4]
    3440:	681b      	ldr	r3, [r3, #0]
    3442:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    3444:	2300      	movs	r3, #0
    3446:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    3448:	683b      	ldr	r3, [r7, #0]
    344a:	2201      	movs	r2, #1
    344c:	4013      	ands	r3, r2
    344e:	d003      	beq.n	3458 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    3450:	68fb      	ldr	r3, [r7, #12]
    3452:	2201      	movs	r2, #1
    3454:	4313      	orrs	r3, r2
    3456:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    3458:	683b      	ldr	r3, [r7, #0]
    345a:	2202      	movs	r2, #2
    345c:	4013      	ands	r3, r2
    345e:	d003      	beq.n	3468 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    3460:	68fb      	ldr	r3, [r7, #12]
    3462:	2204      	movs	r2, #4
    3464:	4313      	orrs	r3, r2
    3466:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    3468:	683b      	ldr	r3, [r7, #0]
    346a:	2204      	movs	r2, #4
    346c:	4013      	ands	r3, r2
    346e:	d003      	beq.n	3478 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    3470:	68fb      	ldr	r3, [r7, #12]
    3472:	2202      	movs	r2, #2
    3474:	4313      	orrs	r3, r2
    3476:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    3478:	68fb      	ldr	r3, [r7, #12]
    347a:	b2da      	uxtb	r2, r3
    347c:	68bb      	ldr	r3, [r7, #8]
    347e:	761a      	strb	r2, [r3, #24]
}
    3480:	46c0      	nop			; (mov r8, r8)
    3482:	46bd      	mov	sp, r7
    3484:	b004      	add	sp, #16
    3486:	bd80      	pop	{r7, pc}

00003488 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    3488:	b580      	push	{r7, lr}
    348a:	b084      	sub	sp, #16
    348c:	af00      	add	r7, sp, #0
    348e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3490:	687b      	ldr	r3, [r7, #4]
    3492:	681b      	ldr	r3, [r3, #0]
    3494:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    3496:	46c0      	nop			; (mov r8, r8)
    3498:	687b      	ldr	r3, [r7, #4]
    349a:	0018      	movs	r0, r3
    349c:	4b0b      	ldr	r3, [pc, #44]	; (34cc <adc_start_conversion+0x44>)
    349e:	4798      	blx	r3
    34a0:	1e03      	subs	r3, r0, #0
    34a2:	d1f9      	bne.n	3498 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    34a4:	68fb      	ldr	r3, [r7, #12]
    34a6:	7b1b      	ldrb	r3, [r3, #12]
    34a8:	b2db      	uxtb	r3, r3
    34aa:	2202      	movs	r2, #2
    34ac:	4313      	orrs	r3, r2
    34ae:	b2da      	uxtb	r2, r3
    34b0:	68fb      	ldr	r3, [r7, #12]
    34b2:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    34b4:	46c0      	nop			; (mov r8, r8)
    34b6:	687b      	ldr	r3, [r7, #4]
    34b8:	0018      	movs	r0, r3
    34ba:	4b04      	ldr	r3, [pc, #16]	; (34cc <adc_start_conversion+0x44>)
    34bc:	4798      	blx	r3
    34be:	1e03      	subs	r3, r0, #0
    34c0:	d1f9      	bne.n	34b6 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    34c2:	46c0      	nop			; (mov r8, r8)
    34c4:	46bd      	mov	sp, r7
    34c6:	b004      	add	sp, #16
    34c8:	bd80      	pop	{r7, pc}
    34ca:	46c0      	nop			; (mov r8, r8)
    34cc:	000033b9 	.word	0x000033b9

000034d0 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    34d0:	b580      	push	{r7, lr}
    34d2:	b084      	sub	sp, #16
    34d4:	af00      	add	r7, sp, #0
    34d6:	6078      	str	r0, [r7, #4]
    34d8:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    34da:	687b      	ldr	r3, [r7, #4]
    34dc:	0018      	movs	r0, r3
    34de:	4b18      	ldr	r3, [pc, #96]	; (3540 <adc_read+0x70>)
    34e0:	4798      	blx	r3
    34e2:	0002      	movs	r2, r0
    34e4:	2301      	movs	r3, #1
    34e6:	4013      	ands	r3, r2
    34e8:	d101      	bne.n	34ee <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    34ea:	2305      	movs	r3, #5
    34ec:	e023      	b.n	3536 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    34ee:	687b      	ldr	r3, [r7, #4]
    34f0:	681b      	ldr	r3, [r3, #0]
    34f2:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    34f4:	46c0      	nop			; (mov r8, r8)
    34f6:	687b      	ldr	r3, [r7, #4]
    34f8:	0018      	movs	r0, r3
    34fa:	4b12      	ldr	r3, [pc, #72]	; (3544 <adc_read+0x74>)
    34fc:	4798      	blx	r3
    34fe:	1e03      	subs	r3, r0, #0
    3500:	d1f9      	bne.n	34f6 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    3502:	68fb      	ldr	r3, [r7, #12]
    3504:	8b5b      	ldrh	r3, [r3, #26]
    3506:	b29a      	uxth	r2, r3
    3508:	683b      	ldr	r3, [r7, #0]
    350a:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	2101      	movs	r1, #1
    3510:	0018      	movs	r0, r3
    3512:	4b0d      	ldr	r3, [pc, #52]	; (3548 <adc_read+0x78>)
    3514:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    3516:	687b      	ldr	r3, [r7, #4]
    3518:	0018      	movs	r0, r3
    351a:	4b09      	ldr	r3, [pc, #36]	; (3540 <adc_read+0x70>)
    351c:	4798      	blx	r3
    351e:	0002      	movs	r2, r0
    3520:	2304      	movs	r3, #4
    3522:	4013      	ands	r3, r2
    3524:	d006      	beq.n	3534 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    3526:	687b      	ldr	r3, [r7, #4]
    3528:	2104      	movs	r1, #4
    352a:	0018      	movs	r0, r3
    352c:	4b06      	ldr	r3, [pc, #24]	; (3548 <adc_read+0x78>)
    352e:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    3530:	231e      	movs	r3, #30
    3532:	e000      	b.n	3536 <adc_read+0x66>
	}

	return STATUS_OK;
    3534:	2300      	movs	r3, #0
}
    3536:	0018      	movs	r0, r3
    3538:	46bd      	mov	sp, r7
    353a:	b004      	add	sp, #16
    353c:	bd80      	pop	{r7, pc}
    353e:	46c0      	nop			; (mov r8, r8)
    3540:	000033e1 	.word	0x000033e1
    3544:	000033b9 	.word	0x000033b9
    3548:	00003435 	.word	0x00003435

0000354c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    354c:	b580      	push	{r7, lr}
    354e:	b082      	sub	sp, #8
    3550:	af00      	add	r7, sp, #0
    3552:	0002      	movs	r2, r0
    3554:	1dfb      	adds	r3, r7, #7
    3556:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3558:	1dfb      	adds	r3, r7, #7
    355a:	781b      	ldrb	r3, [r3, #0]
    355c:	0018      	movs	r0, r3
    355e:	4b03      	ldr	r3, [pc, #12]	; (356c <port_get_group_from_gpio_pin+0x20>)
    3560:	4798      	blx	r3
    3562:	0003      	movs	r3, r0
}
    3564:	0018      	movs	r0, r3
    3566:	46bd      	mov	sp, r7
    3568:	b002      	add	sp, #8
    356a:	bd80      	pop	{r7, pc}
    356c:	00003359 	.word	0x00003359

00003570 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3570:	b580      	push	{r7, lr}
    3572:	b084      	sub	sp, #16
    3574:	af00      	add	r7, sp, #0
    3576:	0002      	movs	r2, r0
    3578:	1dfb      	adds	r3, r7, #7
    357a:	701a      	strb	r2, [r3, #0]
    357c:	1dbb      	adds	r3, r7, #6
    357e:	1c0a      	adds	r2, r1, #0
    3580:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3582:	1dfb      	adds	r3, r7, #7
    3584:	781b      	ldrb	r3, [r3, #0]
    3586:	0018      	movs	r0, r3
    3588:	4b0d      	ldr	r3, [pc, #52]	; (35c0 <port_pin_set_output_level+0x50>)
    358a:	4798      	blx	r3
    358c:	0003      	movs	r3, r0
    358e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3590:	1dfb      	adds	r3, r7, #7
    3592:	781b      	ldrb	r3, [r3, #0]
    3594:	221f      	movs	r2, #31
    3596:	4013      	ands	r3, r2
    3598:	2201      	movs	r2, #1
    359a:	409a      	lsls	r2, r3
    359c:	0013      	movs	r3, r2
    359e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    35a0:	1dbb      	adds	r3, r7, #6
    35a2:	781b      	ldrb	r3, [r3, #0]
    35a4:	2b00      	cmp	r3, #0
    35a6:	d003      	beq.n	35b0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    35a8:	68fb      	ldr	r3, [r7, #12]
    35aa:	68ba      	ldr	r2, [r7, #8]
    35ac:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    35ae:	e002      	b.n	35b6 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    35b0:	68fb      	ldr	r3, [r7, #12]
    35b2:	68ba      	ldr	r2, [r7, #8]
    35b4:	615a      	str	r2, [r3, #20]
	}
}
    35b6:	46c0      	nop			; (mov r8, r8)
    35b8:	46bd      	mov	sp, r7
    35ba:	b004      	add	sp, #16
    35bc:	bd80      	pop	{r7, pc}
    35be:	46c0      	nop			; (mov r8, r8)
    35c0:	0000354d 	.word	0x0000354d

000035c4 <single_conversion>:
	adc_enable(&adc_instance);
}


uint16_t single_conversion()
{
    35c4:	b580      	push	{r7, lr}
    35c6:	b082      	sub	sp, #8
    35c8:	af00      	add	r7, sp, #0
	adc_start_conversion(&adc_instance);
    35ca:	4b09      	ldr	r3, [pc, #36]	; (35f0 <single_conversion+0x2c>)
    35cc:	0018      	movs	r0, r3
    35ce:	4b09      	ldr	r3, [pc, #36]	; (35f4 <single_conversion+0x30>)
    35d0:	4798      	blx	r3
	uint16_t result;

	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
    35d2:	1dba      	adds	r2, r7, #6
    35d4:	4b06      	ldr	r3, [pc, #24]	; (35f0 <single_conversion+0x2c>)
    35d6:	0011      	movs	r1, r2
    35d8:	0018      	movs	r0, r3
    35da:	4b07      	ldr	r3, [pc, #28]	; (35f8 <single_conversion+0x34>)
    35dc:	4798      	blx	r3
    35de:	1e03      	subs	r3, r0, #0
    35e0:	2b05      	cmp	r3, #5
    35e2:	d0f6      	beq.n	35d2 <single_conversion+0xe>
	return result;
    35e4:	1dbb      	adds	r3, r7, #6
    35e6:	881b      	ldrh	r3, [r3, #0]
}
    35e8:	0018      	movs	r0, r3
    35ea:	46bd      	mov	sp, r7
    35ec:	b002      	add	sp, #8
    35ee:	bd80      	pop	{r7, pc}
    35f0:	2000103c 	.word	0x2000103c
    35f4:	00003489 	.word	0x00003489
    35f8:	000034d1 	.word	0x000034d1

000035fc <msgeq7_all_bands>:

void msgeq7_all_bands(uint16_t bands[])
{
    35fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    35fe:	b08f      	sub	sp, #60	; 0x3c
    3600:	af00      	add	r7, sp, #0
    3602:	62f8      	str	r0, [r7, #44]	; 0x2c
	port_pin_set_output_level(MSGEQ7_PIN_RESET,true);
    3604:	2101      	movs	r1, #1
    3606:	2019      	movs	r0, #25
    3608:	4b53      	ldr	r3, [pc, #332]	; (3758 <msgeq7_all_bands+0x15c>)
    360a:	4798      	blx	r3
	delay_us(1);
    360c:	2000      	movs	r0, #0
    360e:	4b53      	ldr	r3, [pc, #332]	; (375c <msgeq7_all_bands+0x160>)
    3610:	4798      	blx	r3
    3612:	0003      	movs	r3, r0
    3614:	613b      	str	r3, [r7, #16]
    3616:	2300      	movs	r3, #0
    3618:	617b      	str	r3, [r7, #20]
    361a:	4b51      	ldr	r3, [pc, #324]	; (3760 <msgeq7_all_bands+0x164>)
    361c:	2400      	movs	r4, #0
    361e:	6938      	ldr	r0, [r7, #16]
    3620:	6979      	ldr	r1, [r7, #20]
    3622:	18c0      	adds	r0, r0, r3
    3624:	4161      	adcs	r1, r4
    3626:	4c4f      	ldr	r4, [pc, #316]	; (3764 <msgeq7_all_bands+0x168>)
    3628:	4a4f      	ldr	r2, [pc, #316]	; (3768 <msgeq7_all_bands+0x16c>)
    362a:	2300      	movs	r3, #0
    362c:	47a0      	blx	r4
    362e:	0003      	movs	r3, r0
    3630:	000c      	movs	r4, r1
    3632:	0018      	movs	r0, r3
    3634:	4b4d      	ldr	r3, [pc, #308]	; (376c <msgeq7_all_bands+0x170>)
    3636:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_RESET,false);
    3638:	2100      	movs	r1, #0
    363a:	2019      	movs	r0, #25
    363c:	4b46      	ldr	r3, [pc, #280]	; (3758 <msgeq7_all_bands+0x15c>)
    363e:	4798      	blx	r3
	delay_us(75);
    3640:	2000      	movs	r0, #0
    3642:	4b46      	ldr	r3, [pc, #280]	; (375c <msgeq7_all_bands+0x160>)
    3644:	4798      	blx	r3
    3646:	0003      	movs	r3, r0
    3648:	61bb      	str	r3, [r7, #24]
    364a:	2300      	movs	r3, #0
    364c:	61fb      	str	r3, [r7, #28]
    364e:	69bb      	ldr	r3, [r7, #24]
    3650:	69fc      	ldr	r4, [r7, #28]
    3652:	0f9a      	lsrs	r2, r3, #30
    3654:	00a0      	lsls	r0, r4, #2
    3656:	6278      	str	r0, [r7, #36]	; 0x24
    3658:	6a78      	ldr	r0, [r7, #36]	; 0x24
    365a:	4310      	orrs	r0, r2
    365c:	6278      	str	r0, [r7, #36]	; 0x24
    365e:	009b      	lsls	r3, r3, #2
    3660:	623b      	str	r3, [r7, #32]
    3662:	6a3b      	ldr	r3, [r7, #32]
    3664:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    3666:	69b9      	ldr	r1, [r7, #24]
    3668:	69fa      	ldr	r2, [r7, #28]
    366a:	185b      	adds	r3, r3, r1
    366c:	4154      	adcs	r4, r2
    366e:	0f1a      	lsrs	r2, r3, #28
    3670:	0126      	lsls	r6, r4, #4
    3672:	4316      	orrs	r6, r2
    3674:	011d      	lsls	r5, r3, #4
    3676:	1aed      	subs	r5, r5, r3
    3678:	41a6      	sbcs	r6, r4
    367a:	002b      	movs	r3, r5
    367c:	0034      	movs	r4, r6
    367e:	4938      	ldr	r1, [pc, #224]	; (3760 <msgeq7_all_bands+0x164>)
    3680:	2200      	movs	r2, #0
    3682:	185b      	adds	r3, r3, r1
    3684:	4154      	adcs	r4, r2
    3686:	0018      	movs	r0, r3
    3688:	0021      	movs	r1, r4
    368a:	4c36      	ldr	r4, [pc, #216]	; (3764 <msgeq7_all_bands+0x168>)
    368c:	4a36      	ldr	r2, [pc, #216]	; (3768 <msgeq7_all_bands+0x16c>)
    368e:	2300      	movs	r3, #0
    3690:	47a0      	blx	r4
    3692:	0003      	movs	r3, r0
    3694:	000c      	movs	r4, r1
    3696:	0018      	movs	r0, r3
    3698:	4b34      	ldr	r3, [pc, #208]	; (376c <msgeq7_all_bands+0x170>)
    369a:	4798      	blx	r3
	
	for (int i=0;i<7;i++)
    369c:	2300      	movs	r3, #0
    369e:	637b      	str	r3, [r7, #52]	; 0x34
    36a0:	e052      	b.n	3748 <msgeq7_all_bands+0x14c>
	{
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,false);
    36a2:	2100      	movs	r1, #0
    36a4:	2018      	movs	r0, #24
    36a6:	4b2c      	ldr	r3, [pc, #176]	; (3758 <msgeq7_all_bands+0x15c>)
    36a8:	4798      	blx	r3
		delay_us(40);
    36aa:	2000      	movs	r0, #0
    36ac:	4b2b      	ldr	r3, [pc, #172]	; (375c <msgeq7_all_bands+0x160>)
    36ae:	4798      	blx	r3
    36b0:	0003      	movs	r3, r0
    36b2:	60bb      	str	r3, [r7, #8]
    36b4:	2300      	movs	r3, #0
    36b6:	60fb      	str	r3, [r7, #12]
    36b8:	4c2d      	ldr	r4, [pc, #180]	; (3770 <msgeq7_all_bands+0x174>)
    36ba:	2228      	movs	r2, #40	; 0x28
    36bc:	2300      	movs	r3, #0
    36be:	68b8      	ldr	r0, [r7, #8]
    36c0:	68f9      	ldr	r1, [r7, #12]
    36c2:	47a0      	blx	r4
    36c4:	0003      	movs	r3, r0
    36c6:	000c      	movs	r4, r1
    36c8:	0019      	movs	r1, r3
    36ca:	0022      	movs	r2, r4
    36cc:	4b24      	ldr	r3, [pc, #144]	; (3760 <msgeq7_all_bands+0x164>)
    36ce:	2400      	movs	r4, #0
    36d0:	18c9      	adds	r1, r1, r3
    36d2:	4162      	adcs	r2, r4
    36d4:	0008      	movs	r0, r1
    36d6:	0011      	movs	r1, r2
    36d8:	4c22      	ldr	r4, [pc, #136]	; (3764 <msgeq7_all_bands+0x168>)
    36da:	4a23      	ldr	r2, [pc, #140]	; (3768 <msgeq7_all_bands+0x16c>)
    36dc:	2300      	movs	r3, #0
    36de:	47a0      	blx	r4
    36e0:	0003      	movs	r3, r0
    36e2:	000c      	movs	r4, r1
    36e4:	0018      	movs	r0, r3
    36e6:	4b21      	ldr	r3, [pc, #132]	; (376c <msgeq7_all_bands+0x170>)
    36e8:	4798      	blx	r3
		bands[i] = single_conversion();
    36ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36ec:	005b      	lsls	r3, r3, #1
    36ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    36f0:	18d4      	adds	r4, r2, r3
    36f2:	4b20      	ldr	r3, [pc, #128]	; (3774 <msgeq7_all_bands+0x178>)
    36f4:	4798      	blx	r3
    36f6:	0003      	movs	r3, r0
    36f8:	8023      	strh	r3, [r4, #0]
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,true);
    36fa:	2101      	movs	r1, #1
    36fc:	2018      	movs	r0, #24
    36fe:	4b16      	ldr	r3, [pc, #88]	; (3758 <msgeq7_all_bands+0x15c>)
    3700:	4798      	blx	r3
		delay_us(40);
    3702:	2000      	movs	r0, #0
    3704:	4b15      	ldr	r3, [pc, #84]	; (375c <msgeq7_all_bands+0x160>)
    3706:	4798      	blx	r3
    3708:	0003      	movs	r3, r0
    370a:	603b      	str	r3, [r7, #0]
    370c:	2300      	movs	r3, #0
    370e:	607b      	str	r3, [r7, #4]
    3710:	4c17      	ldr	r4, [pc, #92]	; (3770 <msgeq7_all_bands+0x174>)
    3712:	2228      	movs	r2, #40	; 0x28
    3714:	2300      	movs	r3, #0
    3716:	6838      	ldr	r0, [r7, #0]
    3718:	6879      	ldr	r1, [r7, #4]
    371a:	47a0      	blx	r4
    371c:	0003      	movs	r3, r0
    371e:	000c      	movs	r4, r1
    3720:	0019      	movs	r1, r3
    3722:	0022      	movs	r2, r4
    3724:	4b0e      	ldr	r3, [pc, #56]	; (3760 <msgeq7_all_bands+0x164>)
    3726:	2400      	movs	r4, #0
    3728:	18c9      	adds	r1, r1, r3
    372a:	4162      	adcs	r2, r4
    372c:	0008      	movs	r0, r1
    372e:	0011      	movs	r1, r2
    3730:	4c0c      	ldr	r4, [pc, #48]	; (3764 <msgeq7_all_bands+0x168>)
    3732:	4a0d      	ldr	r2, [pc, #52]	; (3768 <msgeq7_all_bands+0x16c>)
    3734:	2300      	movs	r3, #0
    3736:	47a0      	blx	r4
    3738:	0003      	movs	r3, r0
    373a:	000c      	movs	r4, r1
    373c:	0018      	movs	r0, r3
    373e:	4b0b      	ldr	r3, [pc, #44]	; (376c <msgeq7_all_bands+0x170>)
    3740:	4798      	blx	r3
	port_pin_set_output_level(MSGEQ7_PIN_RESET,true);
	delay_us(1);
	port_pin_set_output_level(MSGEQ7_PIN_RESET,false);
	delay_us(75);
	
	for (int i=0;i<7;i++)
    3742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3744:	3301      	adds	r3, #1
    3746:	637b      	str	r3, [r7, #52]	; 0x34
    3748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    374a:	2b06      	cmp	r3, #6
    374c:	dda9      	ble.n	36a2 <msgeq7_all_bands+0xa6>
		delay_us(40);
		bands[i] = single_conversion();
		port_pin_set_output_level(MSGEQ7_PIN_STROBE,true);
		delay_us(40);
	}
    374e:	46c0      	nop			; (mov r8, r8)
    3750:	46bd      	mov	sp, r7
    3752:	b00f      	add	sp, #60	; 0x3c
    3754:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3756:	46c0      	nop			; (mov r8, r8)
    3758:	00003571 	.word	0x00003571
    375c:	000048c9 	.word	0x000048c9
    3760:	006acfbf 	.word	0x006acfbf
    3764:	000055c9 	.word	0x000055c9
    3768:	006acfc0 	.word	0x006acfc0
    376c:	20000001 	.word	0x20000001
    3770:	00005609 	.word	0x00005609
    3774:	000035c5 	.word	0x000035c5

00003778 <TC3_Handler>:
uint16_t values_bands[6];

bool a_okayish = true;
char buffer[64];
void TC3_Handler()
{
    3778:	b580      	push	{r7, lr}
    377a:	af00      	add	r7, sp, #0
	static bool blink_state = false;
	// Overflow interrupt triggered
	if ( TC3->COUNT16.INTFLAG.bit.OVF == 1 )
    377c:	4b1d      	ldr	r3, [pc, #116]	; (37f4 <TC3_Handler+0x7c>)
    377e:	7b9b      	ldrb	r3, [r3, #14]
    3780:	07db      	lsls	r3, r3, #31
    3782:	0fdb      	lsrs	r3, r3, #31
    3784:	b2db      	uxtb	r3, r3
    3786:	2b01      	cmp	r3, #1
    3788:	d131      	bne.n	37ee <TC3_Handler+0x76>
	{
		if ((pwm_count % 5) == 0)
    378a:	4b1b      	ldr	r3, [pc, #108]	; (37f8 <TC3_Handler+0x80>)
    378c:	681a      	ldr	r2, [r3, #0]
    378e:	4b1b      	ldr	r3, [pc, #108]	; (37fc <TC3_Handler+0x84>)
    3790:	2105      	movs	r1, #5
    3792:	0010      	movs	r0, r2
    3794:	4798      	blx	r3
    3796:	1e0b      	subs	r3, r1, #0
    3798:	d107      	bne.n	37aa <TC3_Handler+0x32>
		{
			should_update = true;
    379a:	4b19      	ldr	r3, [pc, #100]	; (3800 <TC3_Handler+0x88>)
    379c:	2201      	movs	r2, #1
    379e:	701a      	strb	r2, [r3, #0]
			should_updates++;
    37a0:	4b18      	ldr	r3, [pc, #96]	; (3804 <TC3_Handler+0x8c>)
    37a2:	681b      	ldr	r3, [r3, #0]
    37a4:	1c5a      	adds	r2, r3, #1
    37a6:	4b17      	ldr	r3, [pc, #92]	; (3804 <TC3_Handler+0x8c>)
    37a8:	601a      	str	r2, [r3, #0]
		}
		
		pwm_count++;
    37aa:	4b13      	ldr	r3, [pc, #76]	; (37f8 <TC3_Handler+0x80>)
    37ac:	681b      	ldr	r3, [r3, #0]
    37ae:	1c5a      	adds	r2, r3, #1
    37b0:	4b11      	ldr	r3, [pc, #68]	; (37f8 <TC3_Handler+0x80>)
    37b2:	601a      	str	r2, [r3, #0]

		if (pwm_count > PWM_FREQ)
    37b4:	4b10      	ldr	r3, [pc, #64]	; (37f8 <TC3_Handler+0x80>)
    37b6:	681b      	ldr	r3, [r3, #0]
    37b8:	2bfa      	cmp	r3, #250	; 0xfa
    37ba:	dd15      	ble.n	37e8 <TC3_Handler+0x70>
		{
			should_updates = 0;
    37bc:	4b11      	ldr	r3, [pc, #68]	; (3804 <TC3_Handler+0x8c>)
    37be:	2200      	movs	r2, #0
    37c0:	601a      	str	r2, [r3, #0]
			/*if ((seconds % 300) == 0)
			{
				execute_order_66 = true;
			}*/
			seconds++;
    37c2:	4b11      	ldr	r3, [pc, #68]	; (3808 <TC3_Handler+0x90>)
    37c4:	681b      	ldr	r3, [r3, #0]
    37c6:	1c5a      	adds	r2, r3, #1
    37c8:	4b0f      	ldr	r3, [pc, #60]	; (3808 <TC3_Handler+0x90>)
    37ca:	601a      	str	r2, [r3, #0]
			if ((seconds % 5) == 0)
    37cc:	4b0e      	ldr	r3, [pc, #56]	; (3808 <TC3_Handler+0x90>)
    37ce:	681a      	ldr	r2, [r3, #0]
    37d0:	4b0a      	ldr	r3, [pc, #40]	; (37fc <TC3_Handler+0x84>)
    37d2:	2105      	movs	r1, #5
    37d4:	0010      	movs	r0, r2
    37d6:	4798      	blx	r3
    37d8:	1e0b      	subs	r3, r1, #0
    37da:	d102      	bne.n	37e2 <TC3_Handler+0x6a>
			{
				should_check = true;
    37dc:	4b0b      	ldr	r3, [pc, #44]	; (380c <TC3_Handler+0x94>)
    37de:	2201      	movs	r2, #1
    37e0:	701a      	strb	r2, [r3, #0]
			if (party)
			{
				sprintf(buffer,"%d %d %d %d %d %d",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
				ble_uart_write(buffer);
			}*/
			pwm_count = 0;
    37e2:	4b05      	ldr	r3, [pc, #20]	; (37f8 <TC3_Handler+0x80>)
    37e4:	2200      	movs	r2, #0
    37e6:	601a      	str	r2, [r3, #0]
		}
		TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0;
    37e8:	4b02      	ldr	r3, [pc, #8]	; (37f4 <TC3_Handler+0x7c>)
    37ea:	2210      	movs	r2, #16
    37ec:	739a      	strb	r2, [r3, #14]
	}
}
    37ee:	46c0      	nop			; (mov r8, r8)
    37f0:	46bd      	mov	sp, r7
    37f2:	bd80      	pop	{r7, pc}
    37f4:	42002c00 	.word	0x42002c00
    37f8:	2000102c 	.word	0x2000102c
    37fc:	000055bd 	.word	0x000055bd
    3800:	20000bfc 	.word	0x20000bfc
    3804:	20000c00 	.word	0x20000c00
    3808:	20000c08 	.word	0x20000c08
    380c:	20000c0c 	.word	0x20000c0c

00003810 <things_to_do>:

void things_to_do(void)
{
    3810:	b5f0      	push	{r4, r5, r6, r7, lr}
    3812:	b087      	sub	sp, #28
    3814:	af04      	add	r7, sp, #16
	if (party)
    3816:	4b2b      	ldr	r3, [pc, #172]	; (38c4 <things_to_do+0xb4>)
    3818:	781b      	ldrb	r3, [r3, #0]
    381a:	b2db      	uxtb	r3, r3
    381c:	2b00      	cmp	r3, #0
    381e:	d026      	beq.n	386e <things_to_do+0x5e>
	{
		msgeq7_all_bands(values_bands);
    3820:	4b29      	ldr	r3, [pc, #164]	; (38c8 <things_to_do+0xb8>)
    3822:	0018      	movs	r0, r3
    3824:	4b29      	ldr	r3, [pc, #164]	; (38cc <things_to_do+0xbc>)
    3826:	4798      	blx	r3
		party_lights(values_bands);
    3828:	4b27      	ldr	r3, [pc, #156]	; (38c8 <things_to_do+0xb8>)
    382a:	0018      	movs	r0, r3
    382c:	4b28      	ldr	r3, [pc, #160]	; (38d0 <things_to_do+0xc0>)
    382e:	4798      	blx	r3
		sprintf(buffer,"%04d %04d %04d %04d %04d %04d\r\n",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
    3830:	4b25      	ldr	r3, [pc, #148]	; (38c8 <things_to_do+0xb8>)
    3832:	881b      	ldrh	r3, [r3, #0]
    3834:	001e      	movs	r6, r3
    3836:	4b24      	ldr	r3, [pc, #144]	; (38c8 <things_to_do+0xb8>)
    3838:	885b      	ldrh	r3, [r3, #2]
    383a:	607b      	str	r3, [r7, #4]
    383c:	4b22      	ldr	r3, [pc, #136]	; (38c8 <things_to_do+0xb8>)
    383e:	889b      	ldrh	r3, [r3, #4]
    3840:	001a      	movs	r2, r3
    3842:	4b21      	ldr	r3, [pc, #132]	; (38c8 <things_to_do+0xb8>)
    3844:	88db      	ldrh	r3, [r3, #6]
    3846:	001c      	movs	r4, r3
    3848:	4b1f      	ldr	r3, [pc, #124]	; (38c8 <things_to_do+0xb8>)
    384a:	891b      	ldrh	r3, [r3, #8]
    384c:	001d      	movs	r5, r3
    384e:	4b1e      	ldr	r3, [pc, #120]	; (38c8 <things_to_do+0xb8>)
    3850:	895b      	ldrh	r3, [r3, #10]
    3852:	4920      	ldr	r1, [pc, #128]	; (38d4 <things_to_do+0xc4>)
    3854:	4820      	ldr	r0, [pc, #128]	; (38d8 <things_to_do+0xc8>)
    3856:	9303      	str	r3, [sp, #12]
    3858:	9502      	str	r5, [sp, #8]
    385a:	9401      	str	r4, [sp, #4]
    385c:	9200      	str	r2, [sp, #0]
    385e:	687b      	ldr	r3, [r7, #4]
    3860:	0032      	movs	r2, r6
    3862:	4c1e      	ldr	r4, [pc, #120]	; (38dc <things_to_do+0xcc>)
    3864:	47a0      	blx	r4
		sb_uart_write(&buffer);
    3866:	4b1c      	ldr	r3, [pc, #112]	; (38d8 <things_to_do+0xc8>)
    3868:	0018      	movs	r0, r3
    386a:	4b1d      	ldr	r3, [pc, #116]	; (38e0 <things_to_do+0xd0>)
    386c:	4798      	blx	r3
	}
	if ((should_updates % 25) == 0)
    386e:	4b1d      	ldr	r3, [pc, #116]	; (38e4 <things_to_do+0xd4>)
    3870:	681a      	ldr	r2, [r3, #0]
    3872:	4b1d      	ldr	r3, [pc, #116]	; (38e8 <things_to_do+0xd8>)
    3874:	2119      	movs	r1, #25
    3876:	0010      	movs	r0, r2
    3878:	4798      	blx	r3
    387a:	1e0b      	subs	r3, r1, #0
    387c:	d116      	bne.n	38ac <things_to_do+0x9c>
	{
		if (flashy1)
    387e:	4b1b      	ldr	r3, [pc, #108]	; (38ec <things_to_do+0xdc>)
    3880:	781b      	ldrb	r3, [r3, #0]
    3882:	b2db      	uxtb	r3, r3
    3884:	2b00      	cmp	r3, #0
    3886:	d002      	beq.n	388e <things_to_do+0x7e>
		{
			flashy_flash1();
    3888:	4b19      	ldr	r3, [pc, #100]	; (38f0 <things_to_do+0xe0>)
    388a:	4798      	blx	r3
    388c:	e00e      	b.n	38ac <things_to_do+0x9c>
		}
		else if (flashy2)
    388e:	4b19      	ldr	r3, [pc, #100]	; (38f4 <things_to_do+0xe4>)
    3890:	781b      	ldrb	r3, [r3, #0]
    3892:	b2db      	uxtb	r3, r3
    3894:	2b00      	cmp	r3, #0
    3896:	d002      	beq.n	389e <things_to_do+0x8e>
		{
			flashy_flash2();
    3898:	4b17      	ldr	r3, [pc, #92]	; (38f8 <things_to_do+0xe8>)
    389a:	4798      	blx	r3
    389c:	e006      	b.n	38ac <things_to_do+0x9c>
		}
		else if (flashy3)
    389e:	4b17      	ldr	r3, [pc, #92]	; (38fc <things_to_do+0xec>)
    38a0:	781b      	ldrb	r3, [r3, #0]
    38a2:	b2db      	uxtb	r3, r3
    38a4:	2b00      	cmp	r3, #0
    38a6:	d001      	beq.n	38ac <things_to_do+0x9c>
		{
			flashy_flash3();
    38a8:	4b15      	ldr	r3, [pc, #84]	; (3900 <things_to_do+0xf0>)
    38aa:	4798      	blx	r3
		}
	}
	if (flashyfade)
    38ac:	4b15      	ldr	r3, [pc, #84]	; (3904 <things_to_do+0xf4>)
    38ae:	781b      	ldrb	r3, [r3, #0]
    38b0:	b2db      	uxtb	r3, r3
    38b2:	2b00      	cmp	r3, #0
    38b4:	d001      	beq.n	38ba <things_to_do+0xaa>
	{
		flashy_fades();
    38b6:	4b14      	ldr	r3, [pc, #80]	; (3908 <things_to_do+0xf8>)
    38b8:	4798      	blx	r3
	/*if (party)
	{
		sprintf(buffer,"%d %d %d %d %d %d\r\n",values_bands[0],values_bands[1],values_bands[2],values_bands[3],values_bands[4],values_bands[5]);
		ble_uart_write(buffer);
	}*/
}
    38ba:	46c0      	nop			; (mov r8, r8)
    38bc:	46bd      	mov	sp, r7
    38be:	b003      	add	sp, #12
    38c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38c2:	46c0      	nop			; (mov r8, r8)
    38c4:	20000765 	.word	0x20000765
    38c8:	20001084 	.word	0x20001084
    38cc:	000035fd 	.word	0x000035fd
    38d0:	0000217d 	.word	0x0000217d
    38d4:	00006f10 	.word	0x00006f10
    38d8:	20001044 	.word	0x20001044
    38dc:	00005895 	.word	0x00005895
    38e0:	00004015 	.word	0x00004015
    38e4:	20000c00 	.word	0x20000c00
    38e8:	000055bd 	.word	0x000055bd
    38ec:	2000033c 	.word	0x2000033c
    38f0:	000023e5 	.word	0x000023e5
    38f4:	20000753 	.word	0x20000753
    38f8:	0000251d 	.word	0x0000251d
    38fc:	20000771 	.word	0x20000771
    3900:	00002905 	.word	0x00002905
    3904:	2000076f 	.word	0x2000076f
    3908:	0000276d 	.word	0x0000276d

0000390c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    390c:	b580      	push	{r7, lr}
    390e:	b084      	sub	sp, #16
    3910:	af00      	add	r7, sp, #0
    3912:	0002      	movs	r2, r0
    3914:	1dfb      	adds	r3, r7, #7
    3916:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3918:	230f      	movs	r3, #15
    391a:	18fb      	adds	r3, r7, r3
    391c:	1dfa      	adds	r2, r7, #7
    391e:	7812      	ldrb	r2, [r2, #0]
    3920:	09d2      	lsrs	r2, r2, #7
    3922:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3924:	230e      	movs	r3, #14
    3926:	18fb      	adds	r3, r7, r3
    3928:	1dfa      	adds	r2, r7, #7
    392a:	7812      	ldrb	r2, [r2, #0]
    392c:	0952      	lsrs	r2, r2, #5
    392e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3930:	4b0d      	ldr	r3, [pc, #52]	; (3968 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3932:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3934:	230f      	movs	r3, #15
    3936:	18fb      	adds	r3, r7, r3
    3938:	781b      	ldrb	r3, [r3, #0]
    393a:	2b00      	cmp	r3, #0
    393c:	d10f      	bne.n	395e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    393e:	230f      	movs	r3, #15
    3940:	18fb      	adds	r3, r7, r3
    3942:	781b      	ldrb	r3, [r3, #0]
    3944:	009b      	lsls	r3, r3, #2
    3946:	2210      	movs	r2, #16
    3948:	4694      	mov	ip, r2
    394a:	44bc      	add	ip, r7
    394c:	4463      	add	r3, ip
    394e:	3b08      	subs	r3, #8
    3950:	681a      	ldr	r2, [r3, #0]
    3952:	230e      	movs	r3, #14
    3954:	18fb      	adds	r3, r7, r3
    3956:	781b      	ldrb	r3, [r3, #0]
    3958:	01db      	lsls	r3, r3, #7
    395a:	18d3      	adds	r3, r2, r3
    395c:	e000      	b.n	3960 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    395e:	2300      	movs	r3, #0
	}
}
    3960:	0018      	movs	r0, r3
    3962:	46bd      	mov	sp, r7
    3964:	b004      	add	sp, #16
    3966:	bd80      	pop	{r7, pc}
    3968:	41004400 	.word	0x41004400

0000396c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    396c:	b580      	push	{r7, lr}
    396e:	b082      	sub	sp, #8
    3970:	af00      	add	r7, sp, #0
    3972:	0002      	movs	r2, r0
    3974:	1dfb      	adds	r3, r7, #7
    3976:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3978:	1dfb      	adds	r3, r7, #7
    397a:	781b      	ldrb	r3, [r3, #0]
    397c:	0018      	movs	r0, r3
    397e:	4b03      	ldr	r3, [pc, #12]	; (398c <port_get_group_from_gpio_pin+0x20>)
    3980:	4798      	blx	r3
    3982:	0003      	movs	r3, r0
}
    3984:	0018      	movs	r0, r3
    3986:	46bd      	mov	sp, r7
    3988:	b002      	add	sp, #8
    398a:	bd80      	pop	{r7, pc}
    398c:	0000390d 	.word	0x0000390d

00003990 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3990:	b580      	push	{r7, lr}
    3992:	b082      	sub	sp, #8
    3994:	af00      	add	r7, sp, #0
    3996:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3998:	687b      	ldr	r3, [r7, #4]
    399a:	2200      	movs	r2, #0
    399c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    399e:	687b      	ldr	r3, [r7, #4]
    39a0:	2201      	movs	r2, #1
    39a2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    39a4:	687b      	ldr	r3, [r7, #4]
    39a6:	2200      	movs	r2, #0
    39a8:	709a      	strb	r2, [r3, #2]
}
    39aa:	46c0      	nop			; (mov r8, r8)
    39ac:	46bd      	mov	sp, r7
    39ae:	b002      	add	sp, #8
    39b0:	bd80      	pop	{r7, pc}
    39b2:	46c0      	nop			; (mov r8, r8)

000039b4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    39b4:	b580      	push	{r7, lr}
    39b6:	b084      	sub	sp, #16
    39b8:	af00      	add	r7, sp, #0
    39ba:	0002      	movs	r2, r0
    39bc:	1dfb      	adds	r3, r7, #7
    39be:	701a      	strb	r2, [r3, #0]
    39c0:	1dbb      	adds	r3, r7, #6
    39c2:	1c0a      	adds	r2, r1, #0
    39c4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    39c6:	1dfb      	adds	r3, r7, #7
    39c8:	781b      	ldrb	r3, [r3, #0]
    39ca:	0018      	movs	r0, r3
    39cc:	4b0d      	ldr	r3, [pc, #52]	; (3a04 <port_pin_set_output_level+0x50>)
    39ce:	4798      	blx	r3
    39d0:	0003      	movs	r3, r0
    39d2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    39d4:	1dfb      	adds	r3, r7, #7
    39d6:	781b      	ldrb	r3, [r3, #0]
    39d8:	221f      	movs	r2, #31
    39da:	4013      	ands	r3, r2
    39dc:	2201      	movs	r2, #1
    39de:	409a      	lsls	r2, r3
    39e0:	0013      	movs	r3, r2
    39e2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    39e4:	1dbb      	adds	r3, r7, #6
    39e6:	781b      	ldrb	r3, [r3, #0]
    39e8:	2b00      	cmp	r3, #0
    39ea:	d003      	beq.n	39f4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    39ec:	68fb      	ldr	r3, [r7, #12]
    39ee:	68ba      	ldr	r2, [r7, #8]
    39f0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    39f2:	e002      	b.n	39fa <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    39f4:	68fb      	ldr	r3, [r7, #12]
    39f6:	68ba      	ldr	r2, [r7, #8]
    39f8:	615a      	str	r2, [r3, #20]
	}
}
    39fa:	46c0      	nop			; (mov r8, r8)
    39fc:	46bd      	mov	sp, r7
    39fe:	b004      	add	sp, #16
    3a00:	bd80      	pop	{r7, pc}
    3a02:	46c0      	nop			; (mov r8, r8)
    3a04:	0000396d 	.word	0x0000396d

00003a08 <sounds_init_pins>:
	.tracks[10].is_playing = false,						\
	.tracks[10].track_number = 10,						\
};

void sounds_init_pins(void)
{
    3a08:	b580      	push	{r7, lr}
    3a0a:	b082      	sub	sp, #8
    3a0c:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    3a0e:	1d3b      	adds	r3, r7, #4
    3a10:	0018      	movs	r0, r3
    3a12:	4b13      	ldr	r3, [pc, #76]	; (3a60 <sounds_init_pins+0x58>)
    3a14:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    3a16:	1d3b      	adds	r3, r7, #4
    3a18:	2201      	movs	r2, #1
    3a1a:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    3a1c:	1d3b      	adds	r3, r7, #4
    3a1e:	2201      	movs	r2, #1
    3a20:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SOUNDS_PIN_SS,&config_port_pin);
    3a22:	1d3b      	adds	r3, r7, #4
    3a24:	0019      	movs	r1, r3
    3a26:	2005      	movs	r0, #5
    3a28:	4b0e      	ldr	r3, [pc, #56]	; (3a64 <sounds_init_pins+0x5c>)
    3a2a:	4798      	blx	r3
	//port_pin_set_config(SOUNDS_PIN_SPDT_SEL1,&config_port_pin);
	//port_pin_set_config(SOUNDS_PIN_SPDT_SEL2,&config_port_pin);
	
	port_pin_set_config(SB_PIN_RESET,&config_port_pin);
    3a2c:	1d3b      	adds	r3, r7, #4
    3a2e:	0019      	movs	r1, r3
    3a30:	2007      	movs	r0, #7
    3a32:	4b0c      	ldr	r3, [pc, #48]	; (3a64 <sounds_init_pins+0x5c>)
    3a34:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_RESET,true);
    3a36:	2101      	movs	r1, #1
    3a38:	2007      	movs	r0, #7
    3a3a:	4b0b      	ldr	r3, [pc, #44]	; (3a68 <sounds_init_pins+0x60>)
    3a3c:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_BTN09,true);
	
	port_pin_set_config(SB_PIN_BTN10,&config_port_pin);
	port_pin_set_output_level(SB_PIN_BTN10,true);*/
	
	config_port_pin.direction = PORT_PIN_PULL_DOWN;
    3a3e:	1d3b      	adds	r3, r7, #4
    3a40:	2202      	movs	r2, #2
    3a42:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SB_PIN_UG,&config_port_pin);
    3a44:	1d3b      	adds	r3, r7, #4
    3a46:	0019      	movs	r1, r3
    3a48:	201b      	movs	r0, #27
    3a4a:	4b06      	ldr	r3, [pc, #24]	; (3a64 <sounds_init_pins+0x5c>)
    3a4c:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_UG,false);
    3a4e:	2100      	movs	r1, #0
    3a50:	201b      	movs	r0, #27
    3a52:	4b05      	ldr	r3, [pc, #20]	; (3a68 <sounds_init_pins+0x60>)
    3a54:	4798      	blx	r3
}
    3a56:	46c0      	nop			; (mov r8, r8)
    3a58:	46bd      	mov	sp, r7
    3a5a:	b002      	add	sp, #8
    3a5c:	bd80      	pop	{r7, pc}
    3a5e:	46c0      	nop			; (mov r8, r8)
    3a60:	00003991 	.word	0x00003991
    3a64:	00000519 	.word	0x00000519
    3a68:	000039b5 	.word	0x000039b5

00003a6c <press_sb_btn_once>:
	port_pin_set_output_level(SOUNDS_PIN_SPDT_SEL1,false);
	port_pin_set_output_level(SOUNDS_PIN_SPDT_SEL2,false);
}*/

void press_sb_btn_once(uint8_t btn)
{
    3a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a6e:	b083      	sub	sp, #12
    3a70:	af00      	add	r7, sp, #0
    3a72:	0002      	movs	r2, r0
    3a74:	1dfb      	adds	r3, r7, #7
    3a76:	701a      	strb	r2, [r3, #0]
	//sounds_reset();
	/*for (int i=0;i<11;i++)
	{
		if (i+11 == btn)
		{*/
			port_pin_set_output_level(btn,false);
    3a78:	1dfb      	adds	r3, r7, #7
    3a7a:	781b      	ldrb	r3, [r3, #0]
    3a7c:	2100      	movs	r1, #0
    3a7e:	0018      	movs	r0, r3
    3a80:	4b15      	ldr	r3, [pc, #84]	; (3ad8 <press_sb_btn_once+0x6c>)
    3a82:	4798      	blx	r3
		else
		{
			port_pin_set_output_level(i+11,true);
		}
	}*/
	delay_ms(150);
    3a84:	2000      	movs	r0, #0
    3a86:	4b15      	ldr	r3, [pc, #84]	; (3adc <press_sb_btn_once+0x70>)
    3a88:	4798      	blx	r3
    3a8a:	0003      	movs	r3, r0
    3a8c:	001d      	movs	r5, r3
    3a8e:	2300      	movs	r3, #0
    3a90:	001e      	movs	r6, r3
    3a92:	4c13      	ldr	r4, [pc, #76]	; (3ae0 <press_sb_btn_once+0x74>)
    3a94:	2296      	movs	r2, #150	; 0x96
    3a96:	2300      	movs	r3, #0
    3a98:	0028      	movs	r0, r5
    3a9a:	0031      	movs	r1, r6
    3a9c:	47a0      	blx	r4
    3a9e:	0003      	movs	r3, r0
    3aa0:	000c      	movs	r4, r1
    3aa2:	0019      	movs	r1, r3
    3aa4:	0022      	movs	r2, r4
    3aa6:	4b0f      	ldr	r3, [pc, #60]	; (3ae4 <press_sb_btn_once+0x78>)
    3aa8:	2400      	movs	r4, #0
    3aaa:	18c9      	adds	r1, r1, r3
    3aac:	4162      	adcs	r2, r4
    3aae:	0008      	movs	r0, r1
    3ab0:	0011      	movs	r1, r2
    3ab2:	4c0d      	ldr	r4, [pc, #52]	; (3ae8 <press_sb_btn_once+0x7c>)
    3ab4:	4a0d      	ldr	r2, [pc, #52]	; (3aec <press_sb_btn_once+0x80>)
    3ab6:	2300      	movs	r3, #0
    3ab8:	47a0      	blx	r4
    3aba:	0003      	movs	r3, r0
    3abc:	000c      	movs	r4, r1
    3abe:	0018      	movs	r0, r3
    3ac0:	4b0b      	ldr	r3, [pc, #44]	; (3af0 <press_sb_btn_once+0x84>)
    3ac2:	4798      	blx	r3
	port_pin_set_output_level(btn,true);
    3ac4:	1dfb      	adds	r3, r7, #7
    3ac6:	781b      	ldrb	r3, [r3, #0]
    3ac8:	2101      	movs	r1, #1
    3aca:	0018      	movs	r0, r3
    3acc:	4b02      	ldr	r3, [pc, #8]	; (3ad8 <press_sb_btn_once+0x6c>)
    3ace:	4798      	blx	r3
}
    3ad0:	46c0      	nop			; (mov r8, r8)
    3ad2:	46bd      	mov	sp, r7
    3ad4:	b003      	add	sp, #12
    3ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ad8:	000039b5 	.word	0x000039b5
    3adc:	000048c9 	.word	0x000048c9
    3ae0:	00005609 	.word	0x00005609
    3ae4:	00001b57 	.word	0x00001b57
    3ae8:	000055c9 	.word	0x000055c9
    3aec:	00001b58 	.word	0x00001b58
    3af0:	20000001 	.word	0x20000001

00003af4 <release_sb_btn>:
{
	port_pin_set_output_level(btn,false);
}

void release_sb_btn(uint8_t btn)
{
    3af4:	b580      	push	{r7, lr}
    3af6:	b082      	sub	sp, #8
    3af8:	af00      	add	r7, sp, #0
    3afa:	0002      	movs	r2, r0
    3afc:	1dfb      	adds	r3, r7, #7
    3afe:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(btn,true);
    3b00:	1dfb      	adds	r3, r7, #7
    3b02:	781b      	ldrb	r3, [r3, #0]
    3b04:	2101      	movs	r1, #1
    3b06:	0018      	movs	r0, r3
    3b08:	4b02      	ldr	r3, [pc, #8]	; (3b14 <release_sb_btn+0x20>)
    3b0a:	4798      	blx	r3
}
    3b0c:	46c0      	nop			; (mov r8, r8)
    3b0e:	46bd      	mov	sp, r7
    3b10:	b002      	add	sp, #8
    3b12:	bd80      	pop	{r7, pc}
    3b14:	000039b5 	.word	0x000039b5

00003b18 <sounds_reset>:
{
	mcp23017_set_pins(MTH_ADDR,0x00,0x00);
}

void sounds_reset(void)
{
    3b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b1a:	b085      	sub	sp, #20
    3b1c:	af00      	add	r7, sp, #0
	port_pin_set_output_level(SB_PIN_RESET,false);
    3b1e:	2100      	movs	r1, #0
    3b20:	2007      	movs	r0, #7
    3b22:	4b46      	ldr	r3, [pc, #280]	; (3c3c <sounds_reset+0x124>)
    3b24:	4798      	blx	r3
	delay_ms(50);
    3b26:	2000      	movs	r0, #0
    3b28:	4b45      	ldr	r3, [pc, #276]	; (3c40 <sounds_reset+0x128>)
    3b2a:	4798      	blx	r3
    3b2c:	0003      	movs	r3, r0
    3b2e:	60bb      	str	r3, [r7, #8]
    3b30:	2300      	movs	r3, #0
    3b32:	60fb      	str	r3, [r7, #12]
    3b34:	4c43      	ldr	r4, [pc, #268]	; (3c44 <sounds_reset+0x12c>)
    3b36:	2232      	movs	r2, #50	; 0x32
    3b38:	2300      	movs	r3, #0
    3b3a:	68b8      	ldr	r0, [r7, #8]
    3b3c:	68f9      	ldr	r1, [r7, #12]
    3b3e:	47a0      	blx	r4
    3b40:	0003      	movs	r3, r0
    3b42:	000c      	movs	r4, r1
    3b44:	0019      	movs	r1, r3
    3b46:	0022      	movs	r2, r4
    3b48:	4b3f      	ldr	r3, [pc, #252]	; (3c48 <sounds_reset+0x130>)
    3b4a:	2400      	movs	r4, #0
    3b4c:	18c9      	adds	r1, r1, r3
    3b4e:	4162      	adcs	r2, r4
    3b50:	0008      	movs	r0, r1
    3b52:	0011      	movs	r1, r2
    3b54:	4c3d      	ldr	r4, [pc, #244]	; (3c4c <sounds_reset+0x134>)
    3b56:	4a3e      	ldr	r2, [pc, #248]	; (3c50 <sounds_reset+0x138>)
    3b58:	2300      	movs	r3, #0
    3b5a:	47a0      	blx	r4
    3b5c:	0003      	movs	r3, r0
    3b5e:	000c      	movs	r4, r1
    3b60:	0018      	movs	r0, r3
    3b62:	4b3c      	ldr	r3, [pc, #240]	; (3c54 <sounds_reset+0x13c>)
    3b64:	4798      	blx	r3
	port_pin_set_output_level(SB_PIN_RESET,true);
    3b66:	2101      	movs	r1, #1
    3b68:	2007      	movs	r0, #7
    3b6a:	4b34      	ldr	r3, [pc, #208]	; (3c3c <sounds_reset+0x124>)
    3b6c:	4798      	blx	r3
	delay_ms(1000);
    3b6e:	2000      	movs	r0, #0
    3b70:	4b33      	ldr	r3, [pc, #204]	; (3c40 <sounds_reset+0x128>)
    3b72:	4798      	blx	r3
    3b74:	0003      	movs	r3, r0
    3b76:	603b      	str	r3, [r7, #0]
    3b78:	2300      	movs	r3, #0
    3b7a:	607b      	str	r3, [r7, #4]
    3b7c:	4c31      	ldr	r4, [pc, #196]	; (3c44 <sounds_reset+0x12c>)
    3b7e:	22fa      	movs	r2, #250	; 0xfa
    3b80:	0092      	lsls	r2, r2, #2
    3b82:	2300      	movs	r3, #0
    3b84:	6838      	ldr	r0, [r7, #0]
    3b86:	6879      	ldr	r1, [r7, #4]
    3b88:	47a0      	blx	r4
    3b8a:	0003      	movs	r3, r0
    3b8c:	000c      	movs	r4, r1
    3b8e:	0019      	movs	r1, r3
    3b90:	0022      	movs	r2, r4
    3b92:	4b2d      	ldr	r3, [pc, #180]	; (3c48 <sounds_reset+0x130>)
    3b94:	2400      	movs	r4, #0
    3b96:	18c9      	adds	r1, r1, r3
    3b98:	4162      	adcs	r2, r4
    3b9a:	0008      	movs	r0, r1
    3b9c:	0011      	movs	r1, r2
    3b9e:	4c2b      	ldr	r4, [pc, #172]	; (3c4c <sounds_reset+0x134>)
    3ba0:	4a2b      	ldr	r2, [pc, #172]	; (3c50 <sounds_reset+0x138>)
    3ba2:	2300      	movs	r3, #0
    3ba4:	47a0      	blx	r4
    3ba6:	0003      	movs	r3, r0
    3ba8:	000c      	movs	r4, r1
    3baa:	0018      	movs	r0, r3
    3bac:	4b29      	ldr	r3, [pc, #164]	; (3c54 <sounds_reset+0x13c>)
    3bae:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN00);
    3bb0:	200b      	movs	r0, #11
    3bb2:	4b29      	ldr	r3, [pc, #164]	; (3c58 <sounds_reset+0x140>)
    3bb4:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN01);
    3bb6:	200c      	movs	r0, #12
    3bb8:	4b27      	ldr	r3, [pc, #156]	; (3c58 <sounds_reset+0x140>)
    3bba:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN02);
    3bbc:	200d      	movs	r0, #13
    3bbe:	4b26      	ldr	r3, [pc, #152]	; (3c58 <sounds_reset+0x140>)
    3bc0:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN03);
    3bc2:	200e      	movs	r0, #14
    3bc4:	4b24      	ldr	r3, [pc, #144]	; (3c58 <sounds_reset+0x140>)
    3bc6:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN04);
    3bc8:	200f      	movs	r0, #15
    3bca:	4b23      	ldr	r3, [pc, #140]	; (3c58 <sounds_reset+0x140>)
    3bcc:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN05);
    3bce:	2010      	movs	r0, #16
    3bd0:	4b21      	ldr	r3, [pc, #132]	; (3c58 <sounds_reset+0x140>)
    3bd2:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN06);
    3bd4:	2011      	movs	r0, #17
    3bd6:	4b20      	ldr	r3, [pc, #128]	; (3c58 <sounds_reset+0x140>)
    3bd8:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN07);
    3bda:	2012      	movs	r0, #18
    3bdc:	4b1e      	ldr	r3, [pc, #120]	; (3c58 <sounds_reset+0x140>)
    3bde:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN08);
    3be0:	2013      	movs	r0, #19
    3be2:	4b1d      	ldr	r3, [pc, #116]	; (3c58 <sounds_reset+0x140>)
    3be4:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN09);
    3be6:	2014      	movs	r0, #20
    3be8:	4b1b      	ldr	r3, [pc, #108]	; (3c58 <sounds_reset+0x140>)
    3bea:	4798      	blx	r3
	release_sb_btn(SB_PIN_BTN10);
    3bec:	2015      	movs	r0, #21
    3bee:	4b1a      	ldr	r3, [pc, #104]	; (3c58 <sounds_reset+0x140>)
    3bf0:	4798      	blx	r3
	delay_ms(150);
    3bf2:	2000      	movs	r0, #0
    3bf4:	4b12      	ldr	r3, [pc, #72]	; (3c40 <sounds_reset+0x128>)
    3bf6:	4798      	blx	r3
    3bf8:	0003      	movs	r3, r0
    3bfa:	001d      	movs	r5, r3
    3bfc:	2300      	movs	r3, #0
    3bfe:	001e      	movs	r6, r3
    3c00:	4c10      	ldr	r4, [pc, #64]	; (3c44 <sounds_reset+0x12c>)
    3c02:	2296      	movs	r2, #150	; 0x96
    3c04:	2300      	movs	r3, #0
    3c06:	0028      	movs	r0, r5
    3c08:	0031      	movs	r1, r6
    3c0a:	47a0      	blx	r4
    3c0c:	0003      	movs	r3, r0
    3c0e:	000c      	movs	r4, r1
    3c10:	0019      	movs	r1, r3
    3c12:	0022      	movs	r2, r4
    3c14:	4b0c      	ldr	r3, [pc, #48]	; (3c48 <sounds_reset+0x130>)
    3c16:	2400      	movs	r4, #0
    3c18:	18c9      	adds	r1, r1, r3
    3c1a:	4162      	adcs	r2, r4
    3c1c:	0008      	movs	r0, r1
    3c1e:	0011      	movs	r1, r2
    3c20:	4c0a      	ldr	r4, [pc, #40]	; (3c4c <sounds_reset+0x134>)
    3c22:	4a0b      	ldr	r2, [pc, #44]	; (3c50 <sounds_reset+0x138>)
    3c24:	2300      	movs	r3, #0
    3c26:	47a0      	blx	r4
    3c28:	0003      	movs	r3, r0
    3c2a:	000c      	movs	r4, r1
    3c2c:	0018      	movs	r0, r3
    3c2e:	4b09      	ldr	r3, [pc, #36]	; (3c54 <sounds_reset+0x13c>)
    3c30:	4798      	blx	r3

}
    3c32:	46c0      	nop			; (mov r8, r8)
    3c34:	46bd      	mov	sp, r7
    3c36:	b005      	add	sp, #20
    3c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c3a:	46c0      	nop			; (mov r8, r8)
    3c3c:	000039b5 	.word	0x000039b5
    3c40:	000048c9 	.word	0x000048c9
    3c44:	00005609 	.word	0x00005609
    3c48:	00001b57 	.word	0x00001b57
    3c4c:	000055c9 	.word	0x000055c9
    3c50:	00001b58 	.word	0x00001b58
    3c54:	20000001 	.word	0x20000001
    3c58:	00003af5 	.word	0x00003af5

00003c5c <sb_event_handler>:

void sb_event_handler(char buffer[])
{
    3c5c:	b590      	push	{r4, r7, lr}
    3c5e:	b089      	sub	sp, #36	; 0x24
    3c60:	af02      	add	r7, sp, #8
    3c62:	6078      	str	r0, [r7, #4]
	if (strstr(buffer,"Adafruit FX Sound Board") != NULL)
    3c64:	4a23      	ldr	r2, [pc, #140]	; (3cf4 <sb_event_handler+0x98>)
    3c66:	687b      	ldr	r3, [r7, #4]
    3c68:	0011      	movs	r1, r2
    3c6a:	0018      	movs	r0, r3
    3c6c:	4b22      	ldr	r3, [pc, #136]	; (3cf8 <sb_event_handler+0x9c>)
    3c6e:	4798      	blx	r3
    3c70:	1e03      	subs	r3, r0, #0
    3c72:	d005      	beq.n	3c80 <sb_event_handler+0x24>
	{
		sb_reset_buffers();
    3c74:	4b21      	ldr	r3, [pc, #132]	; (3cfc <sb_event_handler+0xa0>)
    3c76:	4798      	blx	r3
		sb_uart_write("#03\n");
    3c78:	4b21      	ldr	r3, [pc, #132]	; (3d00 <sb_event_handler+0xa4>)
    3c7a:	0018      	movs	r0, r3
    3c7c:	4b21      	ldr	r3, [pc, #132]	; (3d04 <sb_event_handler+0xa8>)
    3c7e:	4798      	blx	r3
		//Adafruit Soundboard started.
	}
	if (strstr(buffer,"NoFile") != NULL)
    3c80:	4a21      	ldr	r2, [pc, #132]	; (3d08 <sb_event_handler+0xac>)
    3c82:	687b      	ldr	r3, [r7, #4]
    3c84:	0011      	movs	r1, r2
    3c86:	0018      	movs	r0, r3
    3c88:	4b1b      	ldr	r3, [pc, #108]	; (3cf8 <sb_event_handler+0x9c>)
    3c8a:	4798      	blx	r3
	{
		//The file wasn't found.
	}
	if (strstr(buffer,"done") != NULL)
    3c8c:	4a1f      	ldr	r2, [pc, #124]	; (3d0c <sb_event_handler+0xb0>)
    3c8e:	687b      	ldr	r3, [r7, #4]
    3c90:	0011      	movs	r1, r2
    3c92:	0018      	movs	r0, r3
    3c94:	4b18      	ldr	r3, [pc, #96]	; (3cf8 <sb_event_handler+0x9c>)
    3c96:	4798      	blx	r3
	{
		//Finished playing track
	}
	if (strstr(buffer,"play") != NULL)
    3c98:	4a1d      	ldr	r2, [pc, #116]	; (3d10 <sb_event_handler+0xb4>)
    3c9a:	687b      	ldr	r3, [r7, #4]
    3c9c:	0011      	movs	r1, r2
    3c9e:	0018      	movs	r0, r3
    3ca0:	4b15      	ldr	r3, [pc, #84]	; (3cf8 <sb_event_handler+0x9c>)
    3ca2:	4798      	blx	r3
	{
		// strstr(sb_rx_buffer_array,"play") <- returns pointer to..
		//Started playing track
	}
	if (strstr(buffer,"WAV") != NULL || strstr(buffer,"OGG") != NULL)
    3ca4:	4a1b      	ldr	r2, [pc, #108]	; (3d14 <sb_event_handler+0xb8>)
    3ca6:	687b      	ldr	r3, [r7, #4]
    3ca8:	0011      	movs	r1, r2
    3caa:	0018      	movs	r0, r3
    3cac:	4b12      	ldr	r3, [pc, #72]	; (3cf8 <sb_event_handler+0x9c>)
    3cae:	4798      	blx	r3
    3cb0:	1e03      	subs	r3, r0, #0
    3cb2:	d107      	bne.n	3cc4 <sb_event_handler+0x68>
    3cb4:	4a18      	ldr	r2, [pc, #96]	; (3d18 <sb_event_handler+0xbc>)
    3cb6:	687b      	ldr	r3, [r7, #4]
    3cb8:	0011      	movs	r1, r2
    3cba:	0018      	movs	r0, r3
    3cbc:	4b0e      	ldr	r3, [pc, #56]	; (3cf8 <sb_event_handler+0x9c>)
    3cbe:	4798      	blx	r3
    3cc0:	1e03      	subs	r3, r0, #0
    3cc2:	d012      	beq.n	3cea <sb_event_handler+0x8e>
	{
		int track;
		int no;
		char filename[3];
		sscanf(buffer,"\r\n\rplay\t%d\tT%d     %[^\n]",&track,&no,filename);
    3cc4:	2310      	movs	r3, #16
    3cc6:	18fc      	adds	r4, r7, r3
    3cc8:	2314      	movs	r3, #20
    3cca:	18fa      	adds	r2, r7, r3
    3ccc:	4913      	ldr	r1, [pc, #76]	; (3d1c <sb_event_handler+0xc0>)
    3cce:	6878      	ldr	r0, [r7, #4]
    3cd0:	230c      	movs	r3, #12
    3cd2:	18fb      	adds	r3, r7, r3
    3cd4:	9300      	str	r3, [sp, #0]
    3cd6:	0023      	movs	r3, r4
    3cd8:	4c11      	ldr	r4, [pc, #68]	; (3d20 <sb_event_handler+0xc4>)
    3cda:	47a0      	blx	r4
		soundboard_instance.tracks[no].is_playing = true;
    3cdc:	693b      	ldr	r3, [r7, #16]
    3cde:	4a11      	ldr	r2, [pc, #68]	; (3d24 <sb_event_handler+0xc8>)
    3ce0:	011b      	lsls	r3, r3, #4
    3ce2:	18d3      	adds	r3, r2, r3
    3ce4:	3304      	adds	r3, #4
    3ce6:	2201      	movs	r2, #1
    3ce8:	701a      	strb	r2, [r3, #0]
		//soundboard_instance.tracks[no].filetype = filename;
	}
	
}
    3cea:	46c0      	nop			; (mov r8, r8)
    3cec:	46bd      	mov	sp, r7
    3cee:	b007      	add	sp, #28
    3cf0:	bd90      	pop	{r4, r7, pc}
    3cf2:	46c0      	nop			; (mov r8, r8)
    3cf4:	00006f34 	.word	0x00006f34
    3cf8:	0000595f 	.word	0x0000595f
    3cfc:	0000405d 	.word	0x0000405d
    3d00:	00006f4c 	.word	0x00006f4c
    3d04:	00004015 	.word	0x00004015
    3d08:	00006f54 	.word	0x00006f54
    3d0c:	00006f5c 	.word	0x00006f5c
    3d10:	00006f64 	.word	0x00006f64
    3d14:	00006f6c 	.word	0x00006f6c
    3d18:	00006f70 	.word	0x00006f70
    3d1c:	00006f74 	.word	0x00006f74
    3d20:	000058d9 	.word	0x000058d9
    3d24:	20000164 	.word	0x20000164

00003d28 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3d28:	b580      	push	{r7, lr}
    3d2a:	b082      	sub	sp, #8
    3d2c:	af00      	add	r7, sp, #0
    3d2e:	0002      	movs	r2, r0
    3d30:	1dfb      	adds	r3, r7, #7
    3d32:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    3d34:	4b06      	ldr	r3, [pc, #24]	; (3d50 <NVIC_EnableIRQ+0x28>)
    3d36:	1dfa      	adds	r2, r7, #7
    3d38:	7812      	ldrb	r2, [r2, #0]
    3d3a:	0011      	movs	r1, r2
    3d3c:	221f      	movs	r2, #31
    3d3e:	400a      	ands	r2, r1
    3d40:	2101      	movs	r1, #1
    3d42:	4091      	lsls	r1, r2
    3d44:	000a      	movs	r2, r1
    3d46:	601a      	str	r2, [r3, #0]
}
    3d48:	46c0      	nop			; (mov r8, r8)
    3d4a:	46bd      	mov	sp, r7
    3d4c:	b002      	add	sp, #8
    3d4e:	bd80      	pop	{r7, pc}
    3d50:	e000e100 	.word	0xe000e100

00003d54 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    3d54:	b5b0      	push	{r4, r5, r7, lr}
    3d56:	b082      	sub	sp, #8
    3d58:	af00      	add	r7, sp, #0
    3d5a:	0002      	movs	r2, r0
    3d5c:	6039      	str	r1, [r7, #0]
    3d5e:	1dfb      	adds	r3, r7, #7
    3d60:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    3d62:	1dfb      	adds	r3, r7, #7
    3d64:	781b      	ldrb	r3, [r3, #0]
    3d66:	2b7f      	cmp	r3, #127	; 0x7f
    3d68:	d932      	bls.n	3dd0 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3d6a:	4c2f      	ldr	r4, [pc, #188]	; (3e28 <NVIC_SetPriority+0xd4>)
    3d6c:	1dfb      	adds	r3, r7, #7
    3d6e:	781b      	ldrb	r3, [r3, #0]
    3d70:	001a      	movs	r2, r3
    3d72:	230f      	movs	r3, #15
    3d74:	4013      	ands	r3, r2
    3d76:	3b08      	subs	r3, #8
    3d78:	0899      	lsrs	r1, r3, #2
    3d7a:	4a2b      	ldr	r2, [pc, #172]	; (3e28 <NVIC_SetPriority+0xd4>)
    3d7c:	1dfb      	adds	r3, r7, #7
    3d7e:	781b      	ldrb	r3, [r3, #0]
    3d80:	0018      	movs	r0, r3
    3d82:	230f      	movs	r3, #15
    3d84:	4003      	ands	r3, r0
    3d86:	3b08      	subs	r3, #8
    3d88:	089b      	lsrs	r3, r3, #2
    3d8a:	3306      	adds	r3, #6
    3d8c:	009b      	lsls	r3, r3, #2
    3d8e:	18d3      	adds	r3, r2, r3
    3d90:	3304      	adds	r3, #4
    3d92:	681b      	ldr	r3, [r3, #0]
    3d94:	1dfa      	adds	r2, r7, #7
    3d96:	7812      	ldrb	r2, [r2, #0]
    3d98:	0010      	movs	r0, r2
    3d9a:	2203      	movs	r2, #3
    3d9c:	4002      	ands	r2, r0
    3d9e:	00d2      	lsls	r2, r2, #3
    3da0:	20ff      	movs	r0, #255	; 0xff
    3da2:	4090      	lsls	r0, r2
    3da4:	0002      	movs	r2, r0
    3da6:	43d2      	mvns	r2, r2
    3da8:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    3daa:	683b      	ldr	r3, [r7, #0]
    3dac:	019b      	lsls	r3, r3, #6
    3dae:	20ff      	movs	r0, #255	; 0xff
    3db0:	4018      	ands	r0, r3
    3db2:	1dfb      	adds	r3, r7, #7
    3db4:	781b      	ldrb	r3, [r3, #0]
    3db6:	001d      	movs	r5, r3
    3db8:	2303      	movs	r3, #3
    3dba:	402b      	ands	r3, r5
    3dbc:	00db      	lsls	r3, r3, #3
    3dbe:	4098      	lsls	r0, r3
    3dc0:	0003      	movs	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3dc2:	431a      	orrs	r2, r3
    3dc4:	1d8b      	adds	r3, r1, #6
    3dc6:	009b      	lsls	r3, r3, #2
    3dc8:	18e3      	adds	r3, r4, r3
    3dca:	3304      	adds	r3, #4
    3dcc:	601a      	str	r2, [r3, #0]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    3dce:	e027      	b.n	3e20 <NVIC_SetPriority+0xcc>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3dd0:	4c16      	ldr	r4, [pc, #88]	; (3e2c <NVIC_SetPriority+0xd8>)
    3dd2:	1dfb      	adds	r3, r7, #7
    3dd4:	781b      	ldrb	r3, [r3, #0]
    3dd6:	b25b      	sxtb	r3, r3
    3dd8:	089b      	lsrs	r3, r3, #2
    3dda:	4914      	ldr	r1, [pc, #80]	; (3e2c <NVIC_SetPriority+0xd8>)
    3ddc:	1dfa      	adds	r2, r7, #7
    3dde:	7812      	ldrb	r2, [r2, #0]
    3de0:	b252      	sxtb	r2, r2
    3de2:	0892      	lsrs	r2, r2, #2
    3de4:	32c0      	adds	r2, #192	; 0xc0
    3de6:	0092      	lsls	r2, r2, #2
    3de8:	5852      	ldr	r2, [r2, r1]
    3dea:	1df9      	adds	r1, r7, #7
    3dec:	7809      	ldrb	r1, [r1, #0]
    3dee:	0008      	movs	r0, r1
    3df0:	2103      	movs	r1, #3
    3df2:	4001      	ands	r1, r0
    3df4:	00c9      	lsls	r1, r1, #3
    3df6:	20ff      	movs	r0, #255	; 0xff
    3df8:	4088      	lsls	r0, r1
    3dfa:	0001      	movs	r1, r0
    3dfc:	43c9      	mvns	r1, r1
    3dfe:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    3e00:	683a      	ldr	r2, [r7, #0]
    3e02:	0192      	lsls	r2, r2, #6
    3e04:	20ff      	movs	r0, #255	; 0xff
    3e06:	4010      	ands	r0, r2
    3e08:	1dfa      	adds	r2, r7, #7
    3e0a:	7812      	ldrb	r2, [r2, #0]
    3e0c:	0015      	movs	r5, r2
    3e0e:	2203      	movs	r2, #3
    3e10:	402a      	ands	r2, r5
    3e12:	00d2      	lsls	r2, r2, #3
    3e14:	4090      	lsls	r0, r2
    3e16:	0002      	movs	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3e18:	430a      	orrs	r2, r1
    3e1a:	33c0      	adds	r3, #192	; 0xc0
    3e1c:	009b      	lsls	r3, r3, #2
    3e1e:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    3e20:	46c0      	nop			; (mov r8, r8)
    3e22:	46bd      	mov	sp, r7
    3e24:	b002      	add	sp, #8
    3e26:	bdb0      	pop	{r4, r5, r7, pc}
    3e28:	e000ed00 	.word	0xe000ed00
    3e2c:	e000e100 	.word	0xe000e100

00003e30 <sb_uart_clk_init>:
 *  Configure console.
 */


void sb_uart_clk_init(void)
{
    3e30:	b580      	push	{r7, lr}
    3e32:	af00      	add	r7, sp, #0
	// Start the Software Reset and wait for it to finish
	CONF_STDIO_USART_MODULE->USART.CTRLA.bit.SWRST = 1 ;
    3e34:	4a13      	ldr	r2, [pc, #76]	; (3e84 <sb_uart_clk_init+0x54>)
    3e36:	6813      	ldr	r3, [r2, #0]
    3e38:	2101      	movs	r1, #1
    3e3a:	430b      	orrs	r3, r1
    3e3c:	6013      	str	r3, [r2, #0]
	while ( CONF_STDIO_USART_MODULE->USART.CTRLA.bit.SWRST || CONF_STDIO_USART_MODULE->USART.SYNCBUSY.bit.SWRST );
    3e3e:	46c0      	nop			; (mov r8, r8)
    3e40:	4b10      	ldr	r3, [pc, #64]	; (3e84 <sb_uart_clk_init+0x54>)
    3e42:	681b      	ldr	r3, [r3, #0]
    3e44:	07db      	lsls	r3, r3, #31
    3e46:	0fdb      	lsrs	r3, r3, #31
    3e48:	b2db      	uxtb	r3, r3
    3e4a:	2b00      	cmp	r3, #0
    3e4c:	d1f8      	bne.n	3e40 <sb_uart_clk_init+0x10>
    3e4e:	4b0d      	ldr	r3, [pc, #52]	; (3e84 <sb_uart_clk_init+0x54>)
    3e50:	69db      	ldr	r3, [r3, #28]
    3e52:	07db      	lsls	r3, r3, #31
    3e54:	0fdb      	lsrs	r3, r3, #31
    3e56:	b2db      	uxtb	r3, r3
    3e58:	2b00      	cmp	r3, #0
    3e5a:	d1f1      	bne.n	3e40 <sb_uart_clk_init+0x10>
	
	// Turn on peripheral clock for SERCOM being used
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM1;
    3e5c:	4b0a      	ldr	r3, [pc, #40]	; (3e88 <sb_uart_clk_init+0x58>)
    3e5e:	4a0a      	ldr	r2, [pc, #40]	; (3e88 <sb_uart_clk_init+0x58>)
    3e60:	6a12      	ldr	r2, [r2, #32]
    3e62:	2108      	movs	r1, #8
    3e64:	430a      	orrs	r2, r1
    3e66:	621a      	str	r2, [r3, #32]

	//Setting clock
	GCLK->CLKCTRL.reg =
    3e68:	4b08      	ldr	r3, [pc, #32]	; (3e8c <sb_uart_clk_init+0x5c>)
    3e6a:	4a09      	ldr	r2, [pc, #36]	; (3e90 <sb_uart_clk_init+0x60>)
    3e6c:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID( 0x15U )	|	// connected  SERCOMx to
	GCLK_CLKCTRL_GEN_GCLK0		|	// generic Clock Generator 3
	GCLK_CLKCTRL_CLKEN;			// and enable it

	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY ); // Wait for synchronization
    3e6e:	46c0      	nop			; (mov r8, r8)
    3e70:	4b06      	ldr	r3, [pc, #24]	; (3e8c <sb_uart_clk_init+0x5c>)
    3e72:	785b      	ldrb	r3, [r3, #1]
    3e74:	b2db      	uxtb	r3, r3
    3e76:	b25b      	sxtb	r3, r3
    3e78:	2b00      	cmp	r3, #0
    3e7a:	dbf9      	blt.n	3e70 <sb_uart_clk_init+0x40>
}
    3e7c:	46c0      	nop			; (mov r8, r8)
    3e7e:	46bd      	mov	sp, r7
    3e80:	bd80      	pop	{r7, pc}
    3e82:	46c0      	nop			; (mov r8, r8)
    3e84:	42000c00 	.word	0x42000c00
    3e88:	40000400 	.word	0x40000400
    3e8c:	40000c00 	.word	0x40000c00
    3e90:	00004015 	.word	0x00004015

00003e94 <sb_uart_pin_init>:

void sb_uart_pin_init(void)
{
    3e94:	b580      	push	{r7, lr}
    3e96:	b082      	sub	sp, #8
    3e98:	af00      	add	r7, sp, #0
	PORT->Group[PORTGROUP_A].DIRCLR.reg = PORT_PA16;	// RX as input
    3e9a:	4b1c      	ldr	r3, [pc, #112]	; (3f0c <sb_uart_pin_init+0x78>)
    3e9c:	2280      	movs	r2, #128	; 0x80
    3e9e:	0252      	lsls	r2, r2, #9
    3ea0:	605a      	str	r2, [r3, #4]
	
	PORT->Group[PORTGROUP_A].DIRSET.reg = PORT_PA18;	// TX as output
    3ea2:	4b1a      	ldr	r3, [pc, #104]	; (3f0c <sb_uart_pin_init+0x78>)
    3ea4:	2280      	movs	r2, #128	; 0x80
    3ea6:	02d2      	lsls	r2, r2, #11
    3ea8:	609a      	str	r2, [r3, #8]
	PORT->Group[PORTGROUP_A].OUTSET.reg = PORT_PA18;	// TX idle state is high
    3eaa:	4b18      	ldr	r3, [pc, #96]	; (3f0c <sb_uart_pin_init+0x78>)
    3eac:	2280      	movs	r2, #128	; 0x80
    3eae:	02d2      	lsls	r2, r2, #11
    3eb0:	619a      	str	r2, [r3, #24]

	// set port multiplexer for peripheral TX
	// =======================================
	uint32_t temp = (PORT->Group[PORTGROUP_A].PMUX[TX_PIN>>1].reg) & PORT_PMUX_PMUXO( PORT_PMUX_PMUXO_C_Val );
    3eb2:	4a16      	ldr	r2, [pc, #88]	; (3f0c <sb_uart_pin_init+0x78>)
    3eb4:	2339      	movs	r3, #57	; 0x39
    3eb6:	5cd3      	ldrb	r3, [r2, r3]
    3eb8:	b2db      	uxtb	r3, r3
    3eba:	001a      	movs	r2, r3
    3ebc:	2320      	movs	r3, #32
    3ebe:	4013      	ands	r3, r2
    3ec0:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[TX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( PORT_PMUX_PMUXE_C_Val );
    3ec2:	4a12      	ldr	r2, [pc, #72]	; (3f0c <sb_uart_pin_init+0x78>)
    3ec4:	687b      	ldr	r3, [r7, #4]
    3ec6:	b2db      	uxtb	r3, r3
    3ec8:	2102      	movs	r1, #2
    3eca:	430b      	orrs	r3, r1
    3ecc:	b2d9      	uxtb	r1, r3
    3ece:	2339      	movs	r3, #57	; 0x39
    3ed0:	54d1      	strb	r1, [r2, r3]
	
	PORT->Group[PORTGROUP_A].PINCFG[TX_PIN].reg = PORT_PINCFG_PMUXEN ; // Enable port mux
    3ed2:	4a0e      	ldr	r2, [pc, #56]	; (3f0c <sb_uart_pin_init+0x78>)
    3ed4:	2352      	movs	r3, #82	; 0x52
    3ed6:	2101      	movs	r1, #1
    3ed8:	54d1      	strb	r1, [r2, r3]
	temp = (PORT->Group[PORTGROUP_A].PMUX[RX_PIN>>1].reg) & PORT_PMUX_PMUXO( PORT_PMUX_PMUXO_C_Val );
    3eda:	4a0c      	ldr	r2, [pc, #48]	; (3f0c <sb_uart_pin_init+0x78>)
    3edc:	2338      	movs	r3, #56	; 0x38
    3ede:	5cd3      	ldrb	r3, [r2, r3]
    3ee0:	b2db      	uxtb	r3, r3
    3ee2:	001a      	movs	r2, r3
    3ee4:	2320      	movs	r3, #32
    3ee6:	4013      	ands	r3, r2
    3ee8:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_A].PMUX[RX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( PORT_PMUX_PMUXE_C_Val );
    3eea:	4a08      	ldr	r2, [pc, #32]	; (3f0c <sb_uart_pin_init+0x78>)
    3eec:	687b      	ldr	r3, [r7, #4]
    3eee:	b2db      	uxtb	r3, r3
    3ef0:	2102      	movs	r1, #2
    3ef2:	430b      	orrs	r3, r1
    3ef4:	b2d9      	uxtb	r1, r3
    3ef6:	2338      	movs	r3, #56	; 0x38
    3ef8:	54d1      	strb	r1, [r2, r3]
	PORT->Group[PORTGROUP_A].PINCFG[RX_PIN].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN; // Enable port mux
    3efa:	4a04      	ldr	r2, [pc, #16]	; (3f0c <sb_uart_pin_init+0x78>)
    3efc:	2350      	movs	r3, #80	; 0x50
    3efe:	2103      	movs	r1, #3
    3f00:	54d1      	strb	r1, [r2, r3]
}
    3f02:	46c0      	nop			; (mov r8, r8)
    3f04:	46bd      	mov	sp, r7
    3f06:	b002      	add	sp, #8
    3f08:	bd80      	pop	{r7, pc}
    3f0a:	46c0      	nop			; (mov r8, r8)
    3f0c:	41004400 	.word	0x41004400

00003f10 <sb_uart_init>:

void sb_uart_init(void)
{
    3f10:	b580      	push	{r7, lr}
    3f12:	af00      	add	r7, sp, #0
	sb_uart_clk_init();
    3f14:	4b19      	ldr	r3, [pc, #100]	; (3f7c <sb_uart_init+0x6c>)
    3f16:	4798      	blx	r3
	sb_uart_pin_init();
    3f18:	4b19      	ldr	r3, [pc, #100]	; (3f80 <sb_uart_init+0x70>)
    3f1a:	4798      	blx	r3
	
	sb_buff_count = 0;
    3f1c:	4b19      	ldr	r3, [pc, #100]	; (3f84 <sb_uart_init+0x74>)
    3f1e:	2200      	movs	r2, #0
    3f20:	601a      	str	r2, [r3, #0]
	
	CONF_STDIO_USART_MODULE->USART.CTRLA.reg =
    3f22:	4b19      	ldr	r3, [pc, #100]	; (3f88 <sb_uart_init+0x78>)
    3f24:	4a19      	ldr	r2, [pc, #100]	; (3f8c <sb_uart_init+0x7c>)
    3f26:	601a      	str	r2, [r3, #0]
	
	
	// Asynchronous arithmetic mode
	// 65535 * ( 1 - sampleRateValue * baudrate / SystemCoreClock);
	// 65535 - 65535 * (sampleRateValue * baudrate / SystemCoreClock));
	CONF_STDIO_USART_MODULE->USART.BAUD.reg = 65535.0f * ( 1.0f - (16.0 * (float)(9600)) / (float)(SYSTEM_CLK));
    3f28:	4b17      	ldr	r3, [pc, #92]	; (3f88 <sb_uart_init+0x78>)
    3f2a:	4a19      	ldr	r2, [pc, #100]	; (3f90 <sb_uart_init+0x80>)
    3f2c:	819a      	strh	r2, [r3, #12]
	//BLE_UART_SERCOM->USART.BAUD.bit.BAUD = 9600;
	
	CONF_STDIO_USART_MODULE->USART.CTRLB.reg =
    3f2e:	4b16      	ldr	r3, [pc, #88]	; (3f88 <sb_uart_init+0x78>)
    3f30:	22c0      	movs	r2, #192	; 0xc0
    3f32:	0292      	lsls	r2, r2, #10
    3f34:	605a      	str	r2, [r3, #4]
	SERCOM_USART_CTRLB_CHSIZE(0)	|	// 8 bit character size
	SERCOM_USART_CTRLB_TXEN			|	// Enable Transmit
	SERCOM_USART_CTRLB_RXEN;			// Enable Receive

	// Get Synced
	while (CONF_STDIO_USART_MODULE->USART.SYNCBUSY.bit.CTRLB);
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	4b13      	ldr	r3, [pc, #76]	; (3f88 <sb_uart_init+0x78>)
    3f3a:	69db      	ldr	r3, [r3, #28]
    3f3c:	075b      	lsls	r3, r3, #29
    3f3e:	0fdb      	lsrs	r3, r3, #31
    3f40:	b2db      	uxtb	r3, r3
    3f42:	2b00      	cmp	r3, #0
    3f44:	d1f8      	bne.n	3f38 <sb_uart_init+0x28>

	//Set the Interrupt to use
	CONF_STDIO_USART_MODULE->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;	// Interrupt on received complete
    3f46:	4b10      	ldr	r3, [pc, #64]	; (3f88 <sb_uart_init+0x78>)
    3f48:	2204      	movs	r2, #4
    3f4a:	759a      	strb	r2, [r3, #22]
	
	// Enable interrupts
	NVIC_EnableIRQ(SERCOM1_IRQn);
    3f4c:	200a      	movs	r0, #10
    3f4e:	4b11      	ldr	r3, [pc, #68]	; (3f94 <sb_uart_init+0x84>)
    3f50:	4798      	blx	r3
	NVIC_SetPriority(SERCOM1_IRQn,1);
    3f52:	2101      	movs	r1, #1
    3f54:	200a      	movs	r0, #10
    3f56:	4b10      	ldr	r3, [pc, #64]	; (3f98 <sb_uart_init+0x88>)
    3f58:	4798      	blx	r3
	
	// enable the peripheral block
	CONF_STDIO_USART_MODULE->USART.CTRLA.bit.ENABLE = 0x1u;
    3f5a:	4a0b      	ldr	r2, [pc, #44]	; (3f88 <sb_uart_init+0x78>)
    3f5c:	6813      	ldr	r3, [r2, #0]
    3f5e:	2102      	movs	r1, #2
    3f60:	430b      	orrs	r3, r1
    3f62:	6013      	str	r3, [r2, #0]
	
	// Wait for sercom to enable
	while(CONF_STDIO_USART_MODULE->USART.SYNCBUSY.bit.ENABLE);
    3f64:	46c0      	nop			; (mov r8, r8)
    3f66:	4b08      	ldr	r3, [pc, #32]	; (3f88 <sb_uart_init+0x78>)
    3f68:	69db      	ldr	r3, [r3, #28]
    3f6a:	079b      	lsls	r3, r3, #30
    3f6c:	0fdb      	lsrs	r3, r3, #31
    3f6e:	b2db      	uxtb	r3, r3
    3f70:	2b00      	cmp	r3, #0
    3f72:	d1f8      	bne.n	3f66 <sb_uart_init+0x56>
}
    3f74:	46c0      	nop			; (mov r8, r8)
    3f76:	46bd      	mov	sp, r7
    3f78:	bd80      	pop	{r7, pc}
    3f7a:	46c0      	nop			; (mov r8, r8)
    3f7c:	00003e31 	.word	0x00003e31
    3f80:	00003e95 	.word	0x00003e95
    3f84:	200002a8 	.word	0x200002a8
    3f88:	42000c00 	.word	0x42000c00
    3f8c:	40200084 	.word	0x40200084
    3f90:	fffffb14 	.word	0xfffffb14
    3f94:	00003d29 	.word	0x00003d29
    3f98:	00003d55 	.word	0x00003d55

00003f9c <SERCOM1_Handler>:


void SERCOM1_Handler()
{
    3f9c:	b580      	push	{r7, lr}
    3f9e:	b082      	sub	sp, #8
    3fa0:	af00      	add	r7, sp, #0
	if (CONF_STDIO_USART_MODULE->USART.INTFLAG.bit.RXC)
    3fa2:	4b18      	ldr	r3, [pc, #96]	; (4004 <SERCOM1_Handler+0x68>)
    3fa4:	7e1b      	ldrb	r3, [r3, #24]
    3fa6:	075b      	lsls	r3, r3, #29
    3fa8:	0fdb      	lsrs	r3, r3, #31
    3faa:	b2db      	uxtb	r3, r3
    3fac:	2b00      	cmp	r3, #0
    3fae:	d025      	beq.n	3ffc <SERCOM1_Handler+0x60>
	{
		char temp = (uint8_t) CONF_STDIO_USART_MODULE->USART.DATA.reg;
    3fb0:	4b14      	ldr	r3, [pc, #80]	; (4004 <SERCOM1_Handler+0x68>)
    3fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3fb4:	b29a      	uxth	r2, r3
    3fb6:	1dfb      	adds	r3, r7, #7
    3fb8:	701a      	strb	r2, [r3, #0]
		if (temp != '\0')
    3fba:	1dfb      	adds	r3, r7, #7
    3fbc:	781b      	ldrb	r3, [r3, #0]
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d01c      	beq.n	3ffc <SERCOM1_Handler+0x60>
		{
			// Got a character
			if (sb_buff_count > sizeof(sb_rx_buffer_array)-1)
    3fc2:	4b11      	ldr	r3, [pc, #68]	; (4008 <SERCOM1_Handler+0x6c>)
    3fc4:	681b      	ldr	r3, [r3, #0]
    3fc6:	1e1a      	subs	r2, r3, #0
    3fc8:	4b10      	ldr	r3, [pc, #64]	; (400c <SERCOM1_Handler+0x70>)
    3fca:	429a      	cmp	r2, r3
    3fcc:	d90b      	bls.n	3fe6 <SERCOM1_Handler+0x4a>
			{
				sb_buff_count = 0;
    3fce:	4b0e      	ldr	r3, [pc, #56]	; (4008 <SERCOM1_Handler+0x6c>)
    3fd0:	2200      	movs	r2, #0
    3fd2:	601a      	str	r2, [r3, #0]
				sb_rx_buffer_array[sb_buff_count] = (uint8_t) CONF_STDIO_USART_MODULE->USART.DATA.reg;
    3fd4:	4b0c      	ldr	r3, [pc, #48]	; (4008 <SERCOM1_Handler+0x6c>)
    3fd6:	681b      	ldr	r3, [r3, #0]
    3fd8:	4a0a      	ldr	r2, [pc, #40]	; (4004 <SERCOM1_Handler+0x68>)
    3fda:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    3fdc:	b292      	uxth	r2, r2
    3fde:	b2d1      	uxtb	r1, r2
    3fe0:	4a0b      	ldr	r2, [pc, #44]	; (4010 <SERCOM1_Handler+0x74>)
    3fe2:	54d1      	strb	r1, [r2, r3]
				sb_rx_buffer_array[sb_buff_count++] = (uint8_t)CONF_STDIO_USART_MODULE->USART.DATA.reg;
			}
		}

	}
}
    3fe4:	e00a      	b.n	3ffc <SERCOM1_Handler+0x60>
				sb_buff_count = 0;
				sb_rx_buffer_array[sb_buff_count] = (uint8_t) CONF_STDIO_USART_MODULE->USART.DATA.reg;
			}
			else
			{
				sb_rx_buffer_array[sb_buff_count++] = (uint8_t)CONF_STDIO_USART_MODULE->USART.DATA.reg;
    3fe6:	4b08      	ldr	r3, [pc, #32]	; (4008 <SERCOM1_Handler+0x6c>)
    3fe8:	681b      	ldr	r3, [r3, #0]
    3fea:	1c59      	adds	r1, r3, #1
    3fec:	4a06      	ldr	r2, [pc, #24]	; (4008 <SERCOM1_Handler+0x6c>)
    3fee:	6011      	str	r1, [r2, #0]
    3ff0:	4a04      	ldr	r2, [pc, #16]	; (4004 <SERCOM1_Handler+0x68>)
    3ff2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    3ff4:	b292      	uxth	r2, r2
    3ff6:	b2d1      	uxtb	r1, r2
    3ff8:	4a05      	ldr	r2, [pc, #20]	; (4010 <SERCOM1_Handler+0x74>)
    3ffa:	54d1      	strb	r1, [r2, r3]
			}
		}

	}
}
    3ffc:	46c0      	nop			; (mov r8, r8)
    3ffe:	46bd      	mov	sp, r7
    4000:	b002      	add	sp, #8
    4002:	bd80      	pop	{r7, pc}
    4004:	42000c00 	.word	0x42000c00
    4008:	200002a8 	.word	0x200002a8
    400c:	000003ff 	.word	0x000003ff
    4010:	200007fc 	.word	0x200007fc

00004014 <sb_uart_write>:

void sb_uart_write(char buffer[])
{
    4014:	b580      	push	{r7, lr}
    4016:	b084      	sub	sp, #16
    4018:	af00      	add	r7, sp, #0
    401a:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
    401c:	2300      	movs	r3, #0
    401e:	60fb      	str	r3, [r7, #12]
	while(buffer[i] != '\0')
    4020:	e00f      	b.n	4042 <sb_uart_write+0x2e>
	{
		if(CONF_STDIO_USART_MODULE->USART.INTFLAG.bit.DRE == 1)
    4022:	4b0d      	ldr	r3, [pc, #52]	; (4058 <sb_uart_write+0x44>)
    4024:	7e1b      	ldrb	r3, [r3, #24]
    4026:	07db      	lsls	r3, r3, #31
    4028:	0fdb      	lsrs	r3, r3, #31
    402a:	b2db      	uxtb	r3, r3
    402c:	2b01      	cmp	r3, #1
    402e:	d108      	bne.n	4042 <sb_uart_write+0x2e>
		{
			CONF_STDIO_USART_MODULE->USART.DATA.reg = (uint16_t)buffer[i++];
    4030:	4909      	ldr	r1, [pc, #36]	; (4058 <sb_uart_write+0x44>)
    4032:	68fb      	ldr	r3, [r7, #12]
    4034:	1c5a      	adds	r2, r3, #1
    4036:	60fa      	str	r2, [r7, #12]
    4038:	687a      	ldr	r2, [r7, #4]
    403a:	18d3      	adds	r3, r2, r3
    403c:	781b      	ldrb	r3, [r3, #0]
    403e:	b29b      	uxth	r3, r3
    4040:	850b      	strh	r3, [r1, #40]	; 0x28
}

void sb_uart_write(char buffer[])
{
	uint32_t i = 0;
	while(buffer[i] != '\0')
    4042:	687a      	ldr	r2, [r7, #4]
    4044:	68fb      	ldr	r3, [r7, #12]
    4046:	18d3      	adds	r3, r2, r3
    4048:	781b      	ldrb	r3, [r3, #0]
    404a:	2b00      	cmp	r3, #0
    404c:	d1e9      	bne.n	4022 <sb_uart_write+0xe>
		if(CONF_STDIO_USART_MODULE->USART.INTFLAG.bit.DRE == 1)
		{
			CONF_STDIO_USART_MODULE->USART.DATA.reg = (uint16_t)buffer[i++];
		}
	}
}
    404e:	46c0      	nop			; (mov r8, r8)
    4050:	46bd      	mov	sp, r7
    4052:	b004      	add	sp, #16
    4054:	bd80      	pop	{r7, pc}
    4056:	46c0      	nop			; (mov r8, r8)
    4058:	42000c00 	.word	0x42000c00

0000405c <sb_reset_buffers>:

void sb_reset_buffers(void)
{
    405c:	b580      	push	{r7, lr}
    405e:	b082      	sub	sp, #8
    4060:	af00      	add	r7, sp, #0
	for (uint32_t k=0;k<sizeof(sb_rx_buffer_array);k++)
    4062:	2300      	movs	r3, #0
    4064:	607b      	str	r3, [r7, #4]
    4066:	e007      	b.n	4078 <sb_reset_buffers+0x1c>
	{
		sb_rx_buffer_array[k] = 0;
    4068:	4a09      	ldr	r2, [pc, #36]	; (4090 <sb_reset_buffers+0x34>)
    406a:	687b      	ldr	r3, [r7, #4]
    406c:	18d3      	adds	r3, r2, r3
    406e:	2200      	movs	r2, #0
    4070:	701a      	strb	r2, [r3, #0]
	}
}

void sb_reset_buffers(void)
{
	for (uint32_t k=0;k<sizeof(sb_rx_buffer_array);k++)
    4072:	687b      	ldr	r3, [r7, #4]
    4074:	3301      	adds	r3, #1
    4076:	607b      	str	r3, [r7, #4]
    4078:	687b      	ldr	r3, [r7, #4]
    407a:	4a06      	ldr	r2, [pc, #24]	; (4094 <sb_reset_buffers+0x38>)
    407c:	4293      	cmp	r3, r2
    407e:	d9f3      	bls.n	4068 <sb_reset_buffers+0xc>
	{
		sb_rx_buffer_array[k] = 0;
	}
	sb_buff_count = 0;
    4080:	4b05      	ldr	r3, [pc, #20]	; (4098 <sb_reset_buffers+0x3c>)
    4082:	2200      	movs	r2, #0
    4084:	601a      	str	r2, [r3, #0]
}
    4086:	46c0      	nop			; (mov r8, r8)
    4088:	46bd      	mov	sp, r7
    408a:	b002      	add	sp, #8
    408c:	bd80      	pop	{r7, pc}
    408e:	46c0      	nop			; (mov r8, r8)
    4090:	200007fc 	.word	0x200007fc
    4094:	000003ff 	.word	0x000003ff
    4098:	200002a8 	.word	0x200002a8

0000409c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    409c:	b580      	push	{r7, lr}
    409e:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    40a0:	46c0      	nop			; (mov r8, r8)
    40a2:	46bd      	mov	sp, r7
    40a4:	bd80      	pop	{r7, pc}
    40a6:	46c0      	nop			; (mov r8, r8)

000040a8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    40a8:	b580      	push	{r7, lr}
    40aa:	b082      	sub	sp, #8
    40ac:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    40ae:	4b10      	ldr	r3, [pc, #64]	; (40f0 <cpu_irq_enter_critical+0x48>)
    40b0:	681b      	ldr	r3, [r3, #0]
    40b2:	2b00      	cmp	r3, #0
    40b4:	d112      	bne.n	40dc <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    40b6:	f3ef 8310 	mrs	r3, PRIMASK
    40ba:	607b      	str	r3, [r7, #4]
  return(result);
    40bc:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    40be:	2b00      	cmp	r3, #0
    40c0:	d109      	bne.n	40d6 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    40c2:	b672      	cpsid	i
    40c4:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    40c8:	4b0a      	ldr	r3, [pc, #40]	; (40f4 <cpu_irq_enter_critical+0x4c>)
    40ca:	2200      	movs	r2, #0
    40cc:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    40ce:	4b0a      	ldr	r3, [pc, #40]	; (40f8 <cpu_irq_enter_critical+0x50>)
    40d0:	2201      	movs	r2, #1
    40d2:	701a      	strb	r2, [r3, #0]
    40d4:	e002      	b.n	40dc <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    40d6:	4b08      	ldr	r3, [pc, #32]	; (40f8 <cpu_irq_enter_critical+0x50>)
    40d8:	2200      	movs	r2, #0
    40da:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    40dc:	4b04      	ldr	r3, [pc, #16]	; (40f0 <cpu_irq_enter_critical+0x48>)
    40de:	681b      	ldr	r3, [r3, #0]
    40e0:	1c5a      	adds	r2, r3, #1
    40e2:	4b03      	ldr	r3, [pc, #12]	; (40f0 <cpu_irq_enter_critical+0x48>)
    40e4:	601a      	str	r2, [r3, #0]
}
    40e6:	46c0      	nop			; (mov r8, r8)
    40e8:	46bd      	mov	sp, r7
    40ea:	b002      	add	sp, #8
    40ec:	bd80      	pop	{r7, pc}
    40ee:	46c0      	nop			; (mov r8, r8)
    40f0:	200002ac 	.word	0x200002ac
    40f4:	20000218 	.word	0x20000218
    40f8:	200002b0 	.word	0x200002b0

000040fc <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    40fc:	b580      	push	{r7, lr}
    40fe:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4100:	4b0b      	ldr	r3, [pc, #44]	; (4130 <cpu_irq_leave_critical+0x34>)
    4102:	681b      	ldr	r3, [r3, #0]
    4104:	1e5a      	subs	r2, r3, #1
    4106:	4b0a      	ldr	r3, [pc, #40]	; (4130 <cpu_irq_leave_critical+0x34>)
    4108:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    410a:	4b09      	ldr	r3, [pc, #36]	; (4130 <cpu_irq_leave_critical+0x34>)
    410c:	681b      	ldr	r3, [r3, #0]
    410e:	2b00      	cmp	r3, #0
    4110:	d10a      	bne.n	4128 <cpu_irq_leave_critical+0x2c>
    4112:	4b08      	ldr	r3, [pc, #32]	; (4134 <cpu_irq_leave_critical+0x38>)
    4114:	781b      	ldrb	r3, [r3, #0]
    4116:	b2db      	uxtb	r3, r3
    4118:	2b00      	cmp	r3, #0
    411a:	d005      	beq.n	4128 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    411c:	4b06      	ldr	r3, [pc, #24]	; (4138 <cpu_irq_leave_critical+0x3c>)
    411e:	2201      	movs	r2, #1
    4120:	701a      	strb	r2, [r3, #0]
    4122:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4126:	b662      	cpsie	i
	}
}
    4128:	46c0      	nop			; (mov r8, r8)
    412a:	46bd      	mov	sp, r7
    412c:	bd80      	pop	{r7, pc}
    412e:	46c0      	nop			; (mov r8, r8)
    4130:	200002ac 	.word	0x200002ac
    4134:	200002b0 	.word	0x200002b0
    4138:	20000218 	.word	0x20000218

0000413c <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    413c:	b580      	push	{r7, lr}
    413e:	b082      	sub	sp, #8
    4140:	af00      	add	r7, sp, #0
    4142:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4144:	687b      	ldr	r3, [r7, #4]
    4146:	2201      	movs	r2, #1
    4148:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    414a:	687b      	ldr	r3, [r7, #4]
    414c:	2200      	movs	r2, #0
    414e:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4150:	687b      	ldr	r3, [r7, #4]
    4152:	2206      	movs	r2, #6
    4154:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    4156:	687b      	ldr	r3, [r7, #4]
    4158:	2200      	movs	r2, #0
    415a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    415c:	687b      	ldr	r3, [r7, #4]
    415e:	2200      	movs	r2, #0
    4160:	725a      	strb	r2, [r3, #9]
}
    4162:	46c0      	nop			; (mov r8, r8)
    4164:	46bd      	mov	sp, r7
    4166:	b002      	add	sp, #8
    4168:	bd80      	pop	{r7, pc}
    416a:	46c0      	nop			; (mov r8, r8)

0000416c <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    416c:	b580      	push	{r7, lr}
    416e:	b082      	sub	sp, #8
    4170:	af00      	add	r7, sp, #0
    4172:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    4174:	687b      	ldr	r3, [r7, #4]
    4176:	2203      	movs	r2, #3
    4178:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    417a:	687b      	ldr	r3, [r7, #4]
    417c:	2200      	movs	r2, #0
    417e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	2201      	movs	r2, #1
    4184:	709a      	strb	r2, [r3, #2]
}
    4186:	46c0      	nop			; (mov r8, r8)
    4188:	46bd      	mov	sp, r7
    418a:	b002      	add	sp, #8
    418c:	bd80      	pop	{r7, pc}
    418e:	46c0      	nop			; (mov r8, r8)

00004190 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    4190:	b580      	push	{r7, lr}
    4192:	b082      	sub	sp, #8
    4194:	af00      	add	r7, sp, #0
    4196:	0002      	movs	r2, r0
    4198:	1dfb      	adds	r3, r7, #7
    419a:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    419c:	4a03      	ldr	r2, [pc, #12]	; (41ac <system_cpu_clock_set_divider+0x1c>)
    419e:	1dfb      	adds	r3, r7, #7
    41a0:	781b      	ldrb	r3, [r3, #0]
    41a2:	7213      	strb	r3, [r2, #8]
}
    41a4:	46c0      	nop			; (mov r8, r8)
    41a6:	46bd      	mov	sp, r7
    41a8:	b002      	add	sp, #8
    41aa:	bd80      	pop	{r7, pc}
    41ac:	40000400 	.word	0x40000400

000041b0 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    41b0:	b580      	push	{r7, lr}
    41b2:	b082      	sub	sp, #8
    41b4:	af00      	add	r7, sp, #0
    41b6:	0002      	movs	r2, r0
    41b8:	1dfb      	adds	r3, r7, #7
    41ba:	701a      	strb	r2, [r3, #0]
    41bc:	1dbb      	adds	r3, r7, #6
    41be:	1c0a      	adds	r2, r1, #0
    41c0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    41c2:	1dfb      	adds	r3, r7, #7
    41c4:	781b      	ldrb	r3, [r3, #0]
    41c6:	2b01      	cmp	r3, #1
    41c8:	d008      	beq.n	41dc <system_apb_clock_set_divider+0x2c>
    41ca:	2b02      	cmp	r3, #2
    41cc:	d00b      	beq.n	41e6 <system_apb_clock_set_divider+0x36>
    41ce:	2b00      	cmp	r3, #0
    41d0:	d10e      	bne.n	41f0 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    41d2:	4a0b      	ldr	r2, [pc, #44]	; (4200 <system_apb_clock_set_divider+0x50>)
    41d4:	1dbb      	adds	r3, r7, #6
    41d6:	781b      	ldrb	r3, [r3, #0]
    41d8:	7253      	strb	r3, [r2, #9]
			break;
    41da:	e00b      	b.n	41f4 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    41dc:	4a08      	ldr	r2, [pc, #32]	; (4200 <system_apb_clock_set_divider+0x50>)
    41de:	1dbb      	adds	r3, r7, #6
    41e0:	781b      	ldrb	r3, [r3, #0]
    41e2:	7293      	strb	r3, [r2, #10]
			break;
    41e4:	e006      	b.n	41f4 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    41e6:	4a06      	ldr	r2, [pc, #24]	; (4200 <system_apb_clock_set_divider+0x50>)
    41e8:	1dbb      	adds	r3, r7, #6
    41ea:	781b      	ldrb	r3, [r3, #0]
    41ec:	72d3      	strb	r3, [r2, #11]
			break;
    41ee:	e001      	b.n	41f4 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    41f0:	2317      	movs	r3, #23
    41f2:	e000      	b.n	41f6 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    41f4:	2300      	movs	r3, #0
}
    41f6:	0018      	movs	r0, r3
    41f8:	46bd      	mov	sp, r7
    41fa:	b002      	add	sp, #8
    41fc:	bd80      	pop	{r7, pc}
    41fe:	46c0      	nop			; (mov r8, r8)
    4200:	40000400 	.word	0x40000400

00004204 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    4204:	b580      	push	{r7, lr}
    4206:	b082      	sub	sp, #8
    4208:	af00      	add	r7, sp, #0
    420a:	0002      	movs	r2, r0
    420c:	1dfb      	adds	r3, r7, #7
    420e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4210:	4a08      	ldr	r2, [pc, #32]	; (4234 <system_flash_set_waitstates+0x30>)
    4212:	1dfb      	adds	r3, r7, #7
    4214:	781b      	ldrb	r3, [r3, #0]
    4216:	210f      	movs	r1, #15
    4218:	400b      	ands	r3, r1
    421a:	b2d9      	uxtb	r1, r3
    421c:	6853      	ldr	r3, [r2, #4]
    421e:	200f      	movs	r0, #15
    4220:	4001      	ands	r1, r0
    4222:	0049      	lsls	r1, r1, #1
    4224:	201e      	movs	r0, #30
    4226:	4383      	bics	r3, r0
    4228:	430b      	orrs	r3, r1
    422a:	6053      	str	r3, [r2, #4]
}
    422c:	46c0      	nop			; (mov r8, r8)
    422e:	46bd      	mov	sp, r7
    4230:	b002      	add	sp, #8
    4232:	bd80      	pop	{r7, pc}
    4234:	41004000 	.word	0x41004000

00004238 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    4238:	b580      	push	{r7, lr}
    423a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    423c:	46c0      	nop			; (mov r8, r8)
    423e:	4b04      	ldr	r3, [pc, #16]	; (4250 <_system_dfll_wait_for_sync+0x18>)
    4240:	68db      	ldr	r3, [r3, #12]
    4242:	2210      	movs	r2, #16
    4244:	4013      	ands	r3, r2
    4246:	d0fa      	beq.n	423e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    4248:	46c0      	nop			; (mov r8, r8)
    424a:	46bd      	mov	sp, r7
    424c:	bd80      	pop	{r7, pc}
    424e:	46c0      	nop			; (mov r8, r8)
    4250:	40000800 	.word	0x40000800

00004254 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    4254:	b580      	push	{r7, lr}
    4256:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4258:	4b0c      	ldr	r3, [pc, #48]	; (428c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    425a:	2202      	movs	r2, #2
    425c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    425e:	4b0c      	ldr	r3, [pc, #48]	; (4290 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4260:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4262:	4a0a      	ldr	r2, [pc, #40]	; (428c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4264:	4b0b      	ldr	r3, [pc, #44]	; (4294 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4266:	689b      	ldr	r3, [r3, #8]
    4268:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    426a:	4a08      	ldr	r2, [pc, #32]	; (428c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    426c:	4b09      	ldr	r3, [pc, #36]	; (4294 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    426e:	685b      	ldr	r3, [r3, #4]
    4270:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    4272:	4b06      	ldr	r3, [pc, #24]	; (428c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4274:	2200      	movs	r2, #0
    4276:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4278:	4b05      	ldr	r3, [pc, #20]	; (4290 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    427a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    427c:	4a03      	ldr	r2, [pc, #12]	; (428c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    427e:	4b05      	ldr	r3, [pc, #20]	; (4294 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4280:	681b      	ldr	r3, [r3, #0]
    4282:	b29b      	uxth	r3, r3
    4284:	8493      	strh	r3, [r2, #36]	; 0x24
}
    4286:	46c0      	nop			; (mov r8, r8)
    4288:	46bd      	mov	sp, r7
    428a:	bd80      	pop	{r7, pc}
    428c:	40000800 	.word	0x40000800
    4290:	00004239 	.word	0x00004239
    4294:	200002b4 	.word	0x200002b4

00004298 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4298:	b580      	push	{r7, lr}
    429a:	b082      	sub	sp, #8
    429c:	af00      	add	r7, sp, #0
    429e:	0002      	movs	r2, r0
    42a0:	1dfb      	adds	r3, r7, #7
    42a2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    42a4:	1dfb      	adds	r3, r7, #7
    42a6:	781b      	ldrb	r3, [r3, #0]
    42a8:	2b08      	cmp	r3, #8
    42aa:	d840      	bhi.n	432e <system_clock_source_get_hz+0x96>
    42ac:	009a      	lsls	r2, r3, #2
    42ae:	4b22      	ldr	r3, [pc, #136]	; (4338 <system_clock_source_get_hz+0xa0>)
    42b0:	18d3      	adds	r3, r2, r3
    42b2:	681b      	ldr	r3, [r3, #0]
    42b4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    42b6:	4b21      	ldr	r3, [pc, #132]	; (433c <system_clock_source_get_hz+0xa4>)
    42b8:	691b      	ldr	r3, [r3, #16]
    42ba:	e039      	b.n	4330 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    42bc:	4b20      	ldr	r3, [pc, #128]	; (4340 <system_clock_source_get_hz+0xa8>)
    42be:	6a1b      	ldr	r3, [r3, #32]
    42c0:	059b      	lsls	r3, r3, #22
    42c2:	0f9b      	lsrs	r3, r3, #30
    42c4:	b2db      	uxtb	r3, r3
    42c6:	001a      	movs	r2, r3
    42c8:	4b1e      	ldr	r3, [pc, #120]	; (4344 <system_clock_source_get_hz+0xac>)
    42ca:	40d3      	lsrs	r3, r2
    42cc:	e030      	b.n	4330 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    42ce:	2380      	movs	r3, #128	; 0x80
    42d0:	021b      	lsls	r3, r3, #8
    42d2:	e02d      	b.n	4330 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    42d4:	2380      	movs	r3, #128	; 0x80
    42d6:	021b      	lsls	r3, r3, #8
    42d8:	e02a      	b.n	4330 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    42da:	4b18      	ldr	r3, [pc, #96]	; (433c <system_clock_source_get_hz+0xa4>)
    42dc:	695b      	ldr	r3, [r3, #20]
    42de:	e027      	b.n	4330 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    42e0:	4b16      	ldr	r3, [pc, #88]	; (433c <system_clock_source_get_hz+0xa4>)
    42e2:	681b      	ldr	r3, [r3, #0]
    42e4:	2202      	movs	r2, #2
    42e6:	4013      	ands	r3, r2
    42e8:	d101      	bne.n	42ee <system_clock_source_get_hz+0x56>
			return 0;
    42ea:	2300      	movs	r3, #0
    42ec:	e020      	b.n	4330 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    42ee:	4b16      	ldr	r3, [pc, #88]	; (4348 <system_clock_source_get_hz+0xb0>)
    42f0:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    42f2:	4b12      	ldr	r3, [pc, #72]	; (433c <system_clock_source_get_hz+0xa4>)
    42f4:	681b      	ldr	r3, [r3, #0]
    42f6:	2204      	movs	r2, #4
    42f8:	4013      	ands	r3, r2
    42fa:	d009      	beq.n	4310 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    42fc:	2000      	movs	r0, #0
    42fe:	4b13      	ldr	r3, [pc, #76]	; (434c <system_clock_source_get_hz+0xb4>)
    4300:	4798      	blx	r3
    4302:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    4304:	4b0d      	ldr	r3, [pc, #52]	; (433c <system_clock_source_get_hz+0xa4>)
    4306:	689b      	ldr	r3, [r3, #8]
    4308:	041b      	lsls	r3, r3, #16
    430a:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    430c:	4353      	muls	r3, r2
    430e:	e00f      	b.n	4330 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    4310:	4b0f      	ldr	r3, [pc, #60]	; (4350 <system_clock_source_get_hz+0xb8>)
    4312:	e00d      	b.n	4330 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4314:	4a0a      	ldr	r2, [pc, #40]	; (4340 <system_clock_source_get_hz+0xa8>)
    4316:	2350      	movs	r3, #80	; 0x50
    4318:	5cd3      	ldrb	r3, [r2, r3]
    431a:	b2db      	uxtb	r3, r3
    431c:	001a      	movs	r2, r3
    431e:	2304      	movs	r3, #4
    4320:	4013      	ands	r3, r2
    4322:	d101      	bne.n	4328 <system_clock_source_get_hz+0x90>
			return 0;
    4324:	2300      	movs	r3, #0
    4326:	e003      	b.n	4330 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    4328:	4b04      	ldr	r3, [pc, #16]	; (433c <system_clock_source_get_hz+0xa4>)
    432a:	68db      	ldr	r3, [r3, #12]
    432c:	e000      	b.n	4330 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    432e:	2300      	movs	r3, #0
	}
}
    4330:	0018      	movs	r0, r3
    4332:	46bd      	mov	sp, r7
    4334:	b002      	add	sp, #8
    4336:	bd80      	pop	{r7, pc}
    4338:	00006f9c 	.word	0x00006f9c
    433c:	200002b4 	.word	0x200002b4
    4340:	40000800 	.word	0x40000800
    4344:	007a1200 	.word	0x007a1200
    4348:	00004239 	.word	0x00004239
    434c:	00004b0d 	.word	0x00004b0d
    4350:	02dc6c00 	.word	0x02dc6c00

00004354 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4354:	b580      	push	{r7, lr}
    4356:	b084      	sub	sp, #16
    4358:	af00      	add	r7, sp, #0
    435a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    435c:	4b1a      	ldr	r3, [pc, #104]	; (43c8 <system_clock_source_osc8m_set_config+0x74>)
    435e:	6a1b      	ldr	r3, [r3, #32]
    4360:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4362:	687b      	ldr	r3, [r7, #4]
    4364:	781b      	ldrb	r3, [r3, #0]
    4366:	1c1a      	adds	r2, r3, #0
    4368:	2303      	movs	r3, #3
    436a:	4013      	ands	r3, r2
    436c:	b2da      	uxtb	r2, r3
    436e:	230d      	movs	r3, #13
    4370:	18fb      	adds	r3, r7, r3
    4372:	2103      	movs	r1, #3
    4374:	400a      	ands	r2, r1
    4376:	0010      	movs	r0, r2
    4378:	781a      	ldrb	r2, [r3, #0]
    437a:	2103      	movs	r1, #3
    437c:	438a      	bics	r2, r1
    437e:	1c11      	adds	r1, r2, #0
    4380:	1c02      	adds	r2, r0, #0
    4382:	430a      	orrs	r2, r1
    4384:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4386:	687b      	ldr	r3, [r7, #4]
    4388:	789a      	ldrb	r2, [r3, #2]
    438a:	230c      	movs	r3, #12
    438c:	18fb      	adds	r3, r7, r3
    438e:	01d0      	lsls	r0, r2, #7
    4390:	781a      	ldrb	r2, [r3, #0]
    4392:	217f      	movs	r1, #127	; 0x7f
    4394:	400a      	ands	r2, r1
    4396:	1c11      	adds	r1, r2, #0
    4398:	1c02      	adds	r2, r0, #0
    439a:	430a      	orrs	r2, r1
    439c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    439e:	687b      	ldr	r3, [r7, #4]
    43a0:	785a      	ldrb	r2, [r3, #1]
    43a2:	230c      	movs	r3, #12
    43a4:	18fb      	adds	r3, r7, r3
    43a6:	2101      	movs	r1, #1
    43a8:	400a      	ands	r2, r1
    43aa:	0190      	lsls	r0, r2, #6
    43ac:	781a      	ldrb	r2, [r3, #0]
    43ae:	2140      	movs	r1, #64	; 0x40
    43b0:	438a      	bics	r2, r1
    43b2:	1c11      	adds	r1, r2, #0
    43b4:	1c02      	adds	r2, r0, #0
    43b6:	430a      	orrs	r2, r1
    43b8:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    43ba:	4b03      	ldr	r3, [pc, #12]	; (43c8 <system_clock_source_osc8m_set_config+0x74>)
    43bc:	68fa      	ldr	r2, [r7, #12]
    43be:	621a      	str	r2, [r3, #32]
}
    43c0:	46c0      	nop			; (mov r8, r8)
    43c2:	46bd      	mov	sp, r7
    43c4:	b004      	add	sp, #16
    43c6:	bd80      	pop	{r7, pc}
    43c8:	40000800 	.word	0x40000800

000043cc <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    43cc:	b580      	push	{r7, lr}
    43ce:	b082      	sub	sp, #8
    43d0:	af00      	add	r7, sp, #0
    43d2:	0002      	movs	r2, r0
    43d4:	1dfb      	adds	r3, r7, #7
    43d6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    43d8:	1dfb      	adds	r3, r7, #7
    43da:	781b      	ldrb	r3, [r3, #0]
    43dc:	2b08      	cmp	r3, #8
    43de:	d83b      	bhi.n	4458 <system_clock_source_enable+0x8c>
    43e0:	009a      	lsls	r2, r3, #2
    43e2:	4b21      	ldr	r3, [pc, #132]	; (4468 <system_clock_source_enable+0x9c>)
    43e4:	18d3      	adds	r3, r2, r3
    43e6:	681b      	ldr	r3, [r3, #0]
    43e8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    43ea:	4b20      	ldr	r3, [pc, #128]	; (446c <system_clock_source_enable+0xa0>)
    43ec:	4a1f      	ldr	r2, [pc, #124]	; (446c <system_clock_source_enable+0xa0>)
    43ee:	6a12      	ldr	r2, [r2, #32]
    43f0:	2102      	movs	r1, #2
    43f2:	430a      	orrs	r2, r1
    43f4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    43f6:	2300      	movs	r3, #0
    43f8:	e031      	b.n	445e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    43fa:	4b1c      	ldr	r3, [pc, #112]	; (446c <system_clock_source_enable+0xa0>)
    43fc:	4a1b      	ldr	r2, [pc, #108]	; (446c <system_clock_source_enable+0xa0>)
    43fe:	6992      	ldr	r2, [r2, #24]
    4400:	2102      	movs	r1, #2
    4402:	430a      	orrs	r2, r1
    4404:	619a      	str	r2, [r3, #24]
		break;
    4406:	e029      	b.n	445c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4408:	4a18      	ldr	r2, [pc, #96]	; (446c <system_clock_source_enable+0xa0>)
    440a:	4b18      	ldr	r3, [pc, #96]	; (446c <system_clock_source_enable+0xa0>)
    440c:	8a1b      	ldrh	r3, [r3, #16]
    440e:	b29b      	uxth	r3, r3
    4410:	2102      	movs	r1, #2
    4412:	430b      	orrs	r3, r1
    4414:	b29b      	uxth	r3, r3
    4416:	8213      	strh	r3, [r2, #16]
		break;
    4418:	e020      	b.n	445c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    441a:	4a14      	ldr	r2, [pc, #80]	; (446c <system_clock_source_enable+0xa0>)
    441c:	4b13      	ldr	r3, [pc, #76]	; (446c <system_clock_source_enable+0xa0>)
    441e:	8a9b      	ldrh	r3, [r3, #20]
    4420:	b29b      	uxth	r3, r3
    4422:	2102      	movs	r1, #2
    4424:	430b      	orrs	r3, r1
    4426:	b29b      	uxth	r3, r3
    4428:	8293      	strh	r3, [r2, #20]
		break;
    442a:	e017      	b.n	445c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    442c:	4b10      	ldr	r3, [pc, #64]	; (4470 <system_clock_source_enable+0xa4>)
    442e:	681b      	ldr	r3, [r3, #0]
    4430:	2202      	movs	r2, #2
    4432:	431a      	orrs	r2, r3
    4434:	4b0e      	ldr	r3, [pc, #56]	; (4470 <system_clock_source_enable+0xa4>)
    4436:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    4438:	4b0e      	ldr	r3, [pc, #56]	; (4474 <system_clock_source_enable+0xa8>)
    443a:	4798      	blx	r3
		break;
    443c:	e00e      	b.n	445c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    443e:	4a0b      	ldr	r2, [pc, #44]	; (446c <system_clock_source_enable+0xa0>)
    4440:	490a      	ldr	r1, [pc, #40]	; (446c <system_clock_source_enable+0xa0>)
    4442:	2344      	movs	r3, #68	; 0x44
    4444:	5ccb      	ldrb	r3, [r1, r3]
    4446:	b2db      	uxtb	r3, r3
    4448:	2102      	movs	r1, #2
    444a:	430b      	orrs	r3, r1
    444c:	b2d9      	uxtb	r1, r3
    444e:	2344      	movs	r3, #68	; 0x44
    4450:	54d1      	strb	r1, [r2, r3]
		break;
    4452:	e003      	b.n	445c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4454:	2300      	movs	r3, #0
    4456:	e002      	b.n	445e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4458:	2317      	movs	r3, #23
    445a:	e000      	b.n	445e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    445c:	2300      	movs	r3, #0
}
    445e:	0018      	movs	r0, r3
    4460:	46bd      	mov	sp, r7
    4462:	b002      	add	sp, #8
    4464:	bd80      	pop	{r7, pc}
    4466:	46c0      	nop			; (mov r8, r8)
    4468:	00006fc0 	.word	0x00006fc0
    446c:	40000800 	.word	0x40000800
    4470:	200002b4 	.word	0x200002b4
    4474:	00004255 	.word	0x00004255

00004478 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    4478:	b580      	push	{r7, lr}
    447a:	b082      	sub	sp, #8
    447c:	af00      	add	r7, sp, #0
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
#elif CONF_CLOCK_GCLK_5_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    447e:	003b      	movs	r3, r7
    4480:	2205      	movs	r2, #5
    4482:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4484:	2300      	movs	r3, #0
    4486:	607b      	str	r3, [r7, #4]
    4488:	e009      	b.n	449e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    448a:	687b      	ldr	r3, [r7, #4]
    448c:	b2db      	uxtb	r3, r3
    448e:	003a      	movs	r2, r7
    4490:	0011      	movs	r1, r2
    4492:	0018      	movs	r0, r3
    4494:	4b05      	ldr	r3, [pc, #20]	; (44ac <_switch_peripheral_gclk+0x34>)
    4496:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4498:	687b      	ldr	r3, [r7, #4]
    449a:	3301      	adds	r3, #1
    449c:	607b      	str	r3, [r7, #4]
    449e:	687b      	ldr	r3, [r7, #4]
    44a0:	2b24      	cmp	r3, #36	; 0x24
    44a2:	d9f2      	bls.n	448a <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    44a4:	46c0      	nop			; (mov r8, r8)
    44a6:	46bd      	mov	sp, r7
    44a8:	b002      	add	sp, #8
    44aa:	bd80      	pop	{r7, pc}
    44ac:	000049a1 	.word	0x000049a1

000044b0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    44b0:	b580      	push	{r7, lr}
    44b2:	b0a0      	sub	sp, #128	; 0x80
    44b4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    44b6:	4b63      	ldr	r3, [pc, #396]	; (4644 <system_clock_init+0x194>)
    44b8:	22c2      	movs	r2, #194	; 0xc2
    44ba:	00d2      	lsls	r2, r2, #3
    44bc:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    44be:	2000      	movs	r0, #0
    44c0:	4b61      	ldr	r3, [pc, #388]	; (4648 <system_clock_init+0x198>)
    44c2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    44c4:	4b61      	ldr	r3, [pc, #388]	; (464c <system_clock_init+0x19c>)
    44c6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    44c8:	237c      	movs	r3, #124	; 0x7c
    44ca:	18fb      	adds	r3, r7, r3
    44cc:	0018      	movs	r0, r3
    44ce:	4b60      	ldr	r3, [pc, #384]	; (4650 <system_clock_init+0x1a0>)
    44d0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    44d2:	237c      	movs	r3, #124	; 0x7c
    44d4:	18fb      	adds	r3, r7, r3
    44d6:	2200      	movs	r2, #0
    44d8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    44da:	237c      	movs	r3, #124	; 0x7c
    44dc:	18fb      	adds	r3, r7, r3
    44de:	2201      	movs	r2, #1
    44e0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    44e2:	237c      	movs	r3, #124	; 0x7c
    44e4:	18fb      	adds	r3, r7, r3
    44e6:	2200      	movs	r2, #0
    44e8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    44ea:	237c      	movs	r3, #124	; 0x7c
    44ec:	18fb      	adds	r3, r7, r3
    44ee:	0018      	movs	r0, r3
    44f0:	4b58      	ldr	r3, [pc, #352]	; (4654 <system_clock_init+0x1a4>)
    44f2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    44f4:	2006      	movs	r0, #6
    44f6:	4b58      	ldr	r3, [pc, #352]	; (4658 <system_clock_init+0x1a8>)
    44f8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    44fa:	4b58      	ldr	r3, [pc, #352]	; (465c <system_clock_init+0x1ac>)
    44fc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    44fe:	2364      	movs	r3, #100	; 0x64
    4500:	18fb      	adds	r3, r7, r3
    4502:	0018      	movs	r0, r3
    4504:	4b56      	ldr	r3, [pc, #344]	; (4660 <system_clock_init+0x1b0>)
    4506:	4798      	blx	r3
    4508:	2364      	movs	r3, #100	; 0x64
    450a:	18fb      	adds	r3, r7, r3
    450c:	2206      	movs	r2, #6
    450e:	701a      	strb	r2, [r3, #0]
    4510:	2364      	movs	r3, #100	; 0x64
    4512:	18fb      	adds	r3, r7, r3
    4514:	2201      	movs	r2, #1
    4516:	605a      	str	r2, [r3, #4]
    4518:	2364      	movs	r3, #100	; 0x64
    451a:	18fb      	adds	r3, r7, r3
    451c:	2201      	movs	r2, #1
    451e:	721a      	strb	r2, [r3, #8]
    4520:	2364      	movs	r3, #100	; 0x64
    4522:	18fb      	adds	r3, r7, r3
    4524:	2200      	movs	r2, #0
    4526:	725a      	strb	r2, [r3, #9]
    4528:	2364      	movs	r3, #100	; 0x64
    452a:	18fb      	adds	r3, r7, r3
    452c:	0019      	movs	r1, r3
    452e:	2001      	movs	r0, #1
    4530:	4b4c      	ldr	r3, [pc, #304]	; (4664 <system_clock_init+0x1b4>)
    4532:	4798      	blx	r3
    4534:	2001      	movs	r0, #1
    4536:	4b4c      	ldr	r3, [pc, #304]	; (4668 <system_clock_init+0x1b8>)
    4538:	4798      	blx	r3
    453a:	2358      	movs	r3, #88	; 0x58
    453c:	18fb      	adds	r3, r7, r3
    453e:	0018      	movs	r0, r3
    4540:	4b47      	ldr	r3, [pc, #284]	; (4660 <system_clock_init+0x1b0>)
    4542:	4798      	blx	r3
    4544:	2358      	movs	r3, #88	; 0x58
    4546:	18fb      	adds	r3, r7, r3
    4548:	2206      	movs	r2, #6
    454a:	701a      	strb	r2, [r3, #0]
    454c:	2358      	movs	r3, #88	; 0x58
    454e:	18fb      	adds	r3, r7, r3
    4550:	2201      	movs	r2, #1
    4552:	605a      	str	r2, [r3, #4]
    4554:	2358      	movs	r3, #88	; 0x58
    4556:	18fb      	adds	r3, r7, r3
    4558:	2201      	movs	r2, #1
    455a:	721a      	strb	r2, [r3, #8]
    455c:	2358      	movs	r3, #88	; 0x58
    455e:	18fb      	adds	r3, r7, r3
    4560:	2200      	movs	r2, #0
    4562:	725a      	strb	r2, [r3, #9]
    4564:	2358      	movs	r3, #88	; 0x58
    4566:	18fb      	adds	r3, r7, r3
    4568:	0019      	movs	r1, r3
    456a:	2002      	movs	r0, #2
    456c:	4b3d      	ldr	r3, [pc, #244]	; (4664 <system_clock_init+0x1b4>)
    456e:	4798      	blx	r3
    4570:	2002      	movs	r0, #2
    4572:	4b3d      	ldr	r3, [pc, #244]	; (4668 <system_clock_init+0x1b8>)
    4574:	4798      	blx	r3
    4576:	234c      	movs	r3, #76	; 0x4c
    4578:	18fb      	adds	r3, r7, r3
    457a:	0018      	movs	r0, r3
    457c:	4b38      	ldr	r3, [pc, #224]	; (4660 <system_clock_init+0x1b0>)
    457e:	4798      	blx	r3
    4580:	234c      	movs	r3, #76	; 0x4c
    4582:	18fb      	adds	r3, r7, r3
    4584:	2206      	movs	r2, #6
    4586:	701a      	strb	r2, [r3, #0]
    4588:	234c      	movs	r3, #76	; 0x4c
    458a:	18fb      	adds	r3, r7, r3
    458c:	2201      	movs	r2, #1
    458e:	605a      	str	r2, [r3, #4]
    4590:	234c      	movs	r3, #76	; 0x4c
    4592:	18fb      	adds	r3, r7, r3
    4594:	2201      	movs	r2, #1
    4596:	721a      	strb	r2, [r3, #8]
    4598:	234c      	movs	r3, #76	; 0x4c
    459a:	18fb      	adds	r3, r7, r3
    459c:	2200      	movs	r2, #0
    459e:	725a      	strb	r2, [r3, #9]
    45a0:	234c      	movs	r3, #76	; 0x4c
    45a2:	18fb      	adds	r3, r7, r3
    45a4:	0019      	movs	r1, r3
    45a6:	2003      	movs	r0, #3
    45a8:	4b2e      	ldr	r3, [pc, #184]	; (4664 <system_clock_init+0x1b4>)
    45aa:	4798      	blx	r3
    45ac:	2003      	movs	r0, #3
    45ae:	4b2e      	ldr	r3, [pc, #184]	; (4668 <system_clock_init+0x1b8>)
    45b0:	4798      	blx	r3
    45b2:	2340      	movs	r3, #64	; 0x40
    45b4:	18fb      	adds	r3, r7, r3
    45b6:	0018      	movs	r0, r3
    45b8:	4b29      	ldr	r3, [pc, #164]	; (4660 <system_clock_init+0x1b0>)
    45ba:	4798      	blx	r3
    45bc:	2340      	movs	r3, #64	; 0x40
    45be:	18fb      	adds	r3, r7, r3
    45c0:	2206      	movs	r2, #6
    45c2:	701a      	strb	r2, [r3, #0]
    45c4:	2340      	movs	r3, #64	; 0x40
    45c6:	18fb      	adds	r3, r7, r3
    45c8:	2201      	movs	r2, #1
    45ca:	605a      	str	r2, [r3, #4]
    45cc:	2340      	movs	r3, #64	; 0x40
    45ce:	18fb      	adds	r3, r7, r3
    45d0:	2200      	movs	r2, #0
    45d2:	721a      	strb	r2, [r3, #8]
    45d4:	2340      	movs	r3, #64	; 0x40
    45d6:	18fb      	adds	r3, r7, r3
    45d8:	2200      	movs	r2, #0
    45da:	725a      	strb	r2, [r3, #9]
    45dc:	2340      	movs	r3, #64	; 0x40
    45de:	18fb      	adds	r3, r7, r3
    45e0:	0019      	movs	r1, r3
    45e2:	2004      	movs	r0, #4
    45e4:	4b1f      	ldr	r3, [pc, #124]	; (4664 <system_clock_init+0x1b4>)
    45e6:	4798      	blx	r3
    45e8:	2004      	movs	r0, #4
    45ea:	4b1f      	ldr	r3, [pc, #124]	; (4668 <system_clock_init+0x1b8>)
    45ec:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    45ee:	2000      	movs	r0, #0
    45f0:	4b1e      	ldr	r3, [pc, #120]	; (466c <system_clock_init+0x1bc>)
    45f2:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    45f4:	2100      	movs	r1, #0
    45f6:	2000      	movs	r0, #0
    45f8:	4b1d      	ldr	r3, [pc, #116]	; (4670 <system_clock_init+0x1c0>)
    45fa:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    45fc:	2100      	movs	r1, #0
    45fe:	2001      	movs	r0, #1
    4600:	4b1b      	ldr	r3, [pc, #108]	; (4670 <system_clock_init+0x1c0>)
    4602:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    4604:	2100      	movs	r1, #0
    4606:	2002      	movs	r0, #2
    4608:	4b19      	ldr	r3, [pc, #100]	; (4670 <system_clock_init+0x1c0>)
    460a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    460c:	1d3b      	adds	r3, r7, #4
    460e:	0018      	movs	r0, r3
    4610:	4b13      	ldr	r3, [pc, #76]	; (4660 <system_clock_init+0x1b0>)
    4612:	4798      	blx	r3
    4614:	1d3b      	adds	r3, r7, #4
    4616:	2206      	movs	r2, #6
    4618:	701a      	strb	r2, [r3, #0]
    461a:	1d3b      	adds	r3, r7, #4
    461c:	2201      	movs	r2, #1
    461e:	605a      	str	r2, [r3, #4]
    4620:	1d3b      	adds	r3, r7, #4
    4622:	2201      	movs	r2, #1
    4624:	721a      	strb	r2, [r3, #8]
    4626:	1d3b      	adds	r3, r7, #4
    4628:	2200      	movs	r2, #0
    462a:	725a      	strb	r2, [r3, #9]
    462c:	1d3b      	adds	r3, r7, #4
    462e:	0019      	movs	r1, r3
    4630:	2000      	movs	r0, #0
    4632:	4b0c      	ldr	r3, [pc, #48]	; (4664 <system_clock_init+0x1b4>)
    4634:	4798      	blx	r3
    4636:	2000      	movs	r0, #0
    4638:	4b0b      	ldr	r3, [pc, #44]	; (4668 <system_clock_init+0x1b8>)
    463a:	4798      	blx	r3
#endif
}
    463c:	46c0      	nop			; (mov r8, r8)
    463e:	46bd      	mov	sp, r7
    4640:	b020      	add	sp, #128	; 0x80
    4642:	bd80      	pop	{r7, pc}
    4644:	40000800 	.word	0x40000800
    4648:	00004205 	.word	0x00004205
    464c:	00004479 	.word	0x00004479
    4650:	0000416d 	.word	0x0000416d
    4654:	00004355 	.word	0x00004355
    4658:	000043cd 	.word	0x000043cd
    465c:	00004719 	.word	0x00004719
    4660:	0000413d 	.word	0x0000413d
    4664:	00004749 	.word	0x00004749
    4668:	0000486d 	.word	0x0000486d
    466c:	00004191 	.word	0x00004191
    4670:	000041b1 	.word	0x000041b1

00004674 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4674:	b580      	push	{r7, lr}
    4676:	b082      	sub	sp, #8
    4678:	af00      	add	r7, sp, #0
    467a:	0002      	movs	r2, r0
    467c:	6039      	str	r1, [r7, #0]
    467e:	1dfb      	adds	r3, r7, #7
    4680:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4682:	1dfb      	adds	r3, r7, #7
    4684:	781b      	ldrb	r3, [r3, #0]
    4686:	2b01      	cmp	r3, #1
    4688:	d00a      	beq.n	46a0 <system_apb_clock_set_mask+0x2c>
    468a:	2b02      	cmp	r3, #2
    468c:	d00f      	beq.n	46ae <system_apb_clock_set_mask+0x3a>
    468e:	2b00      	cmp	r3, #0
    4690:	d114      	bne.n	46bc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4692:	4b0e      	ldr	r3, [pc, #56]	; (46cc <system_apb_clock_set_mask+0x58>)
    4694:	4a0d      	ldr	r2, [pc, #52]	; (46cc <system_apb_clock_set_mask+0x58>)
    4696:	6991      	ldr	r1, [r2, #24]
    4698:	683a      	ldr	r2, [r7, #0]
    469a:	430a      	orrs	r2, r1
    469c:	619a      	str	r2, [r3, #24]
			break;
    469e:	e00f      	b.n	46c0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    46a0:	4b0a      	ldr	r3, [pc, #40]	; (46cc <system_apb_clock_set_mask+0x58>)
    46a2:	4a0a      	ldr	r2, [pc, #40]	; (46cc <system_apb_clock_set_mask+0x58>)
    46a4:	69d1      	ldr	r1, [r2, #28]
    46a6:	683a      	ldr	r2, [r7, #0]
    46a8:	430a      	orrs	r2, r1
    46aa:	61da      	str	r2, [r3, #28]
			break;
    46ac:	e008      	b.n	46c0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    46ae:	4b07      	ldr	r3, [pc, #28]	; (46cc <system_apb_clock_set_mask+0x58>)
    46b0:	4a06      	ldr	r2, [pc, #24]	; (46cc <system_apb_clock_set_mask+0x58>)
    46b2:	6a11      	ldr	r1, [r2, #32]
    46b4:	683a      	ldr	r2, [r7, #0]
    46b6:	430a      	orrs	r2, r1
    46b8:	621a      	str	r2, [r3, #32]
			break;
    46ba:	e001      	b.n	46c0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    46bc:	2317      	movs	r3, #23
    46be:	e000      	b.n	46c2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    46c0:	2300      	movs	r3, #0
}
    46c2:	0018      	movs	r0, r3
    46c4:	46bd      	mov	sp, r7
    46c6:	b002      	add	sp, #8
    46c8:	bd80      	pop	{r7, pc}
    46ca:	46c0      	nop			; (mov r8, r8)
    46cc:	40000400 	.word	0x40000400

000046d0 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    46d0:	b580      	push	{r7, lr}
    46d2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    46d4:	4b02      	ldr	r3, [pc, #8]	; (46e0 <system_interrupt_enter_critical_section+0x10>)
    46d6:	4798      	blx	r3
}
    46d8:	46c0      	nop			; (mov r8, r8)
    46da:	46bd      	mov	sp, r7
    46dc:	bd80      	pop	{r7, pc}
    46de:	46c0      	nop			; (mov r8, r8)
    46e0:	000040a9 	.word	0x000040a9

000046e4 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    46e4:	b580      	push	{r7, lr}
    46e6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    46e8:	4b02      	ldr	r3, [pc, #8]	; (46f4 <system_interrupt_leave_critical_section+0x10>)
    46ea:	4798      	blx	r3
}
    46ec:	46c0      	nop			; (mov r8, r8)
    46ee:	46bd      	mov	sp, r7
    46f0:	bd80      	pop	{r7, pc}
    46f2:	46c0      	nop			; (mov r8, r8)
    46f4:	000040fd 	.word	0x000040fd

000046f8 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    46f8:	b580      	push	{r7, lr}
    46fa:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    46fc:	4b05      	ldr	r3, [pc, #20]	; (4714 <system_gclk_is_syncing+0x1c>)
    46fe:	785b      	ldrb	r3, [r3, #1]
    4700:	b2db      	uxtb	r3, r3
    4702:	b25b      	sxtb	r3, r3
    4704:	2b00      	cmp	r3, #0
    4706:	da01      	bge.n	470c <system_gclk_is_syncing+0x14>
		return true;
    4708:	2301      	movs	r3, #1
    470a:	e000      	b.n	470e <system_gclk_is_syncing+0x16>
	}

	return false;
    470c:	2300      	movs	r3, #0
}
    470e:	0018      	movs	r0, r3
    4710:	46bd      	mov	sp, r7
    4712:	bd80      	pop	{r7, pc}
    4714:	40000c00 	.word	0x40000c00

00004718 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    4718:	b580      	push	{r7, lr}
    471a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    471c:	2108      	movs	r1, #8
    471e:	2000      	movs	r0, #0
    4720:	4b07      	ldr	r3, [pc, #28]	; (4740 <system_gclk_init+0x28>)
    4722:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4724:	4b07      	ldr	r3, [pc, #28]	; (4744 <system_gclk_init+0x2c>)
    4726:	2201      	movs	r2, #1
    4728:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    472a:	46c0      	nop			; (mov r8, r8)
    472c:	4b05      	ldr	r3, [pc, #20]	; (4744 <system_gclk_init+0x2c>)
    472e:	781b      	ldrb	r3, [r3, #0]
    4730:	b2db      	uxtb	r3, r3
    4732:	001a      	movs	r2, r3
    4734:	2301      	movs	r3, #1
    4736:	4013      	ands	r3, r2
    4738:	d1f8      	bne.n	472c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    473a:	46c0      	nop			; (mov r8, r8)
    473c:	46bd      	mov	sp, r7
    473e:	bd80      	pop	{r7, pc}
    4740:	00004675 	.word	0x00004675
    4744:	40000c00 	.word	0x40000c00

00004748 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4748:	b580      	push	{r7, lr}
    474a:	b086      	sub	sp, #24
    474c:	af00      	add	r7, sp, #0
    474e:	0002      	movs	r2, r0
    4750:	6039      	str	r1, [r7, #0]
    4752:	1dfb      	adds	r3, r7, #7
    4754:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4756:	1dfb      	adds	r3, r7, #7
    4758:	781b      	ldrb	r3, [r3, #0]
    475a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    475c:	1dfb      	adds	r3, r7, #7
    475e:	781b      	ldrb	r3, [r3, #0]
    4760:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4762:	683b      	ldr	r3, [r7, #0]
    4764:	781b      	ldrb	r3, [r3, #0]
    4766:	021b      	lsls	r3, r3, #8
    4768:	001a      	movs	r2, r3
    476a:	697b      	ldr	r3, [r7, #20]
    476c:	4313      	orrs	r3, r2
    476e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4770:	683b      	ldr	r3, [r7, #0]
    4772:	785b      	ldrb	r3, [r3, #1]
    4774:	2b00      	cmp	r3, #0
    4776:	d004      	beq.n	4782 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4778:	697b      	ldr	r3, [r7, #20]
    477a:	2280      	movs	r2, #128	; 0x80
    477c:	02d2      	lsls	r2, r2, #11
    477e:	4313      	orrs	r3, r2
    4780:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4782:	683b      	ldr	r3, [r7, #0]
    4784:	7a5b      	ldrb	r3, [r3, #9]
    4786:	2b00      	cmp	r3, #0
    4788:	d004      	beq.n	4794 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    478a:	697b      	ldr	r3, [r7, #20]
    478c:	2280      	movs	r2, #128	; 0x80
    478e:	0312      	lsls	r2, r2, #12
    4790:	4313      	orrs	r3, r2
    4792:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4794:	683b      	ldr	r3, [r7, #0]
    4796:	685b      	ldr	r3, [r3, #4]
    4798:	2b01      	cmp	r3, #1
    479a:	d92c      	bls.n	47f6 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    479c:	683b      	ldr	r3, [r7, #0]
    479e:	685a      	ldr	r2, [r3, #4]
    47a0:	683b      	ldr	r3, [r7, #0]
    47a2:	685b      	ldr	r3, [r3, #4]
    47a4:	3b01      	subs	r3, #1
    47a6:	4013      	ands	r3, r2
    47a8:	d11a      	bne.n	47e0 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    47aa:	2300      	movs	r3, #0
    47ac:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    47ae:	2302      	movs	r3, #2
    47b0:	60bb      	str	r3, [r7, #8]
    47b2:	e005      	b.n	47c0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    47b4:	68fb      	ldr	r3, [r7, #12]
    47b6:	3301      	adds	r3, #1
    47b8:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    47ba:	68bb      	ldr	r3, [r7, #8]
    47bc:	005b      	lsls	r3, r3, #1
    47be:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    47c0:	683b      	ldr	r3, [r7, #0]
    47c2:	685a      	ldr	r2, [r3, #4]
    47c4:	68bb      	ldr	r3, [r7, #8]
    47c6:	429a      	cmp	r2, r3
    47c8:	d8f4      	bhi.n	47b4 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    47ca:	68fb      	ldr	r3, [r7, #12]
    47cc:	021b      	lsls	r3, r3, #8
    47ce:	693a      	ldr	r2, [r7, #16]
    47d0:	4313      	orrs	r3, r2
    47d2:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    47d4:	697b      	ldr	r3, [r7, #20]
    47d6:	2280      	movs	r2, #128	; 0x80
    47d8:	0352      	lsls	r2, r2, #13
    47da:	4313      	orrs	r3, r2
    47dc:	617b      	str	r3, [r7, #20]
    47de:	e00a      	b.n	47f6 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    47e0:	683b      	ldr	r3, [r7, #0]
    47e2:	685b      	ldr	r3, [r3, #4]
    47e4:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    47e6:	693a      	ldr	r2, [r7, #16]
    47e8:	4313      	orrs	r3, r2
    47ea:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    47ec:	697b      	ldr	r3, [r7, #20]
    47ee:	2280      	movs	r2, #128	; 0x80
    47f0:	0292      	lsls	r2, r2, #10
    47f2:	4313      	orrs	r3, r2
    47f4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    47f6:	683b      	ldr	r3, [r7, #0]
    47f8:	7a1b      	ldrb	r3, [r3, #8]
    47fa:	2b00      	cmp	r3, #0
    47fc:	d004      	beq.n	4808 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    47fe:	697b      	ldr	r3, [r7, #20]
    4800:	2280      	movs	r2, #128	; 0x80
    4802:	0392      	lsls	r2, r2, #14
    4804:	4313      	orrs	r3, r2
    4806:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    4808:	46c0      	nop			; (mov r8, r8)
    480a:	4b13      	ldr	r3, [pc, #76]	; (4858 <system_gclk_gen_set_config+0x110>)
    480c:	4798      	blx	r3
    480e:	1e03      	subs	r3, r0, #0
    4810:	d1fb      	bne.n	480a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4812:	4b12      	ldr	r3, [pc, #72]	; (485c <system_gclk_gen_set_config+0x114>)
    4814:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4816:	4a12      	ldr	r2, [pc, #72]	; (4860 <system_gclk_gen_set_config+0x118>)
    4818:	1dfb      	adds	r3, r7, #7
    481a:	781b      	ldrb	r3, [r3, #0]
    481c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    481e:	46c0      	nop			; (mov r8, r8)
    4820:	4b0d      	ldr	r3, [pc, #52]	; (4858 <system_gclk_gen_set_config+0x110>)
    4822:	4798      	blx	r3
    4824:	1e03      	subs	r3, r0, #0
    4826:	d1fb      	bne.n	4820 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4828:	4b0e      	ldr	r3, [pc, #56]	; (4864 <system_gclk_gen_set_config+0x11c>)
    482a:	693a      	ldr	r2, [r7, #16]
    482c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    482e:	46c0      	nop			; (mov r8, r8)
    4830:	4b09      	ldr	r3, [pc, #36]	; (4858 <system_gclk_gen_set_config+0x110>)
    4832:	4798      	blx	r3
    4834:	1e03      	subs	r3, r0, #0
    4836:	d1fb      	bne.n	4830 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4838:	4b0a      	ldr	r3, [pc, #40]	; (4864 <system_gclk_gen_set_config+0x11c>)
    483a:	4a0a      	ldr	r2, [pc, #40]	; (4864 <system_gclk_gen_set_config+0x11c>)
    483c:	6851      	ldr	r1, [r2, #4]
    483e:	2280      	movs	r2, #128	; 0x80
    4840:	0252      	lsls	r2, r2, #9
    4842:	4011      	ands	r1, r2
    4844:	697a      	ldr	r2, [r7, #20]
    4846:	430a      	orrs	r2, r1
    4848:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    484a:	4b07      	ldr	r3, [pc, #28]	; (4868 <system_gclk_gen_set_config+0x120>)
    484c:	4798      	blx	r3
}
    484e:	46c0      	nop			; (mov r8, r8)
    4850:	46bd      	mov	sp, r7
    4852:	b006      	add	sp, #24
    4854:	bd80      	pop	{r7, pc}
    4856:	46c0      	nop			; (mov r8, r8)
    4858:	000046f9 	.word	0x000046f9
    485c:	000046d1 	.word	0x000046d1
    4860:	40000c08 	.word	0x40000c08
    4864:	40000c00 	.word	0x40000c00
    4868:	000046e5 	.word	0x000046e5

0000486c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    486c:	b580      	push	{r7, lr}
    486e:	b082      	sub	sp, #8
    4870:	af00      	add	r7, sp, #0
    4872:	0002      	movs	r2, r0
    4874:	1dfb      	adds	r3, r7, #7
    4876:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4878:	46c0      	nop			; (mov r8, r8)
    487a:	4b0e      	ldr	r3, [pc, #56]	; (48b4 <system_gclk_gen_enable+0x48>)
    487c:	4798      	blx	r3
    487e:	1e03      	subs	r3, r0, #0
    4880:	d1fb      	bne.n	487a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4882:	4b0d      	ldr	r3, [pc, #52]	; (48b8 <system_gclk_gen_enable+0x4c>)
    4884:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4886:	4a0d      	ldr	r2, [pc, #52]	; (48bc <system_gclk_gen_enable+0x50>)
    4888:	1dfb      	adds	r3, r7, #7
    488a:	781b      	ldrb	r3, [r3, #0]
    488c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    488e:	46c0      	nop			; (mov r8, r8)
    4890:	4b08      	ldr	r3, [pc, #32]	; (48b4 <system_gclk_gen_enable+0x48>)
    4892:	4798      	blx	r3
    4894:	1e03      	subs	r3, r0, #0
    4896:	d1fb      	bne.n	4890 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4898:	4b09      	ldr	r3, [pc, #36]	; (48c0 <system_gclk_gen_enable+0x54>)
    489a:	4a09      	ldr	r2, [pc, #36]	; (48c0 <system_gclk_gen_enable+0x54>)
    489c:	6852      	ldr	r2, [r2, #4]
    489e:	2180      	movs	r1, #128	; 0x80
    48a0:	0249      	lsls	r1, r1, #9
    48a2:	430a      	orrs	r2, r1
    48a4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    48a6:	4b07      	ldr	r3, [pc, #28]	; (48c4 <system_gclk_gen_enable+0x58>)
    48a8:	4798      	blx	r3
}
    48aa:	46c0      	nop			; (mov r8, r8)
    48ac:	46bd      	mov	sp, r7
    48ae:	b002      	add	sp, #8
    48b0:	bd80      	pop	{r7, pc}
    48b2:	46c0      	nop			; (mov r8, r8)
    48b4:	000046f9 	.word	0x000046f9
    48b8:	000046d1 	.word	0x000046d1
    48bc:	40000c04 	.word	0x40000c04
    48c0:	40000c00 	.word	0x40000c00
    48c4:	000046e5 	.word	0x000046e5

000048c8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    48c8:	b580      	push	{r7, lr}
    48ca:	b086      	sub	sp, #24
    48cc:	af00      	add	r7, sp, #0
    48ce:	0002      	movs	r2, r0
    48d0:	1dfb      	adds	r3, r7, #7
    48d2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    48d4:	46c0      	nop			; (mov r8, r8)
    48d6:	4b2a      	ldr	r3, [pc, #168]	; (4980 <system_gclk_gen_get_hz+0xb8>)
    48d8:	4798      	blx	r3
    48da:	1e03      	subs	r3, r0, #0
    48dc:	d1fb      	bne.n	48d6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    48de:	4b29      	ldr	r3, [pc, #164]	; (4984 <system_gclk_gen_get_hz+0xbc>)
    48e0:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    48e2:	4a29      	ldr	r2, [pc, #164]	; (4988 <system_gclk_gen_get_hz+0xc0>)
    48e4:	1dfb      	adds	r3, r7, #7
    48e6:	781b      	ldrb	r3, [r3, #0]
    48e8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    48ea:	46c0      	nop			; (mov r8, r8)
    48ec:	4b24      	ldr	r3, [pc, #144]	; (4980 <system_gclk_gen_get_hz+0xb8>)
    48ee:	4798      	blx	r3
    48f0:	1e03      	subs	r3, r0, #0
    48f2:	d1fb      	bne.n	48ec <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    48f4:	4b25      	ldr	r3, [pc, #148]	; (498c <system_gclk_gen_get_hz+0xc4>)
    48f6:	685b      	ldr	r3, [r3, #4]
    48f8:	04db      	lsls	r3, r3, #19
    48fa:	0edb      	lsrs	r3, r3, #27
    48fc:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    48fe:	0018      	movs	r0, r3
    4900:	4b23      	ldr	r3, [pc, #140]	; (4990 <system_gclk_gen_get_hz+0xc8>)
    4902:	4798      	blx	r3
    4904:	0003      	movs	r3, r0
    4906:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4908:	4a1f      	ldr	r2, [pc, #124]	; (4988 <system_gclk_gen_get_hz+0xc0>)
    490a:	1dfb      	adds	r3, r7, #7
    490c:	781b      	ldrb	r3, [r3, #0]
    490e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4910:	4b1e      	ldr	r3, [pc, #120]	; (498c <system_gclk_gen_get_hz+0xc4>)
    4912:	685b      	ldr	r3, [r3, #4]
    4914:	02db      	lsls	r3, r3, #11
    4916:	0fdb      	lsrs	r3, r3, #31
    4918:	b2da      	uxtb	r2, r3
    491a:	2313      	movs	r3, #19
    491c:	18fb      	adds	r3, r7, r3
    491e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4920:	4a1c      	ldr	r2, [pc, #112]	; (4994 <system_gclk_gen_get_hz+0xcc>)
    4922:	1dfb      	adds	r3, r7, #7
    4924:	781b      	ldrb	r3, [r3, #0]
    4926:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4928:	46c0      	nop			; (mov r8, r8)
    492a:	4b15      	ldr	r3, [pc, #84]	; (4980 <system_gclk_gen_get_hz+0xb8>)
    492c:	4798      	blx	r3
    492e:	1e03      	subs	r3, r0, #0
    4930:	d1fb      	bne.n	492a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4932:	4b16      	ldr	r3, [pc, #88]	; (498c <system_gclk_gen_get_hz+0xc4>)
    4934:	689b      	ldr	r3, [r3, #8]
    4936:	021b      	lsls	r3, r3, #8
    4938:	0c1b      	lsrs	r3, r3, #16
    493a:	b29b      	uxth	r3, r3
    493c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    493e:	4b16      	ldr	r3, [pc, #88]	; (4998 <system_gclk_gen_get_hz+0xd0>)
    4940:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4942:	2313      	movs	r3, #19
    4944:	18fb      	adds	r3, r7, r3
    4946:	781b      	ldrb	r3, [r3, #0]
    4948:	2b00      	cmp	r3, #0
    494a:	d109      	bne.n	4960 <system_gclk_gen_get_hz+0x98>
    494c:	68fb      	ldr	r3, [r7, #12]
    494e:	2b01      	cmp	r3, #1
    4950:	d906      	bls.n	4960 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    4952:	4b12      	ldr	r3, [pc, #72]	; (499c <system_gclk_gen_get_hz+0xd4>)
    4954:	68f9      	ldr	r1, [r7, #12]
    4956:	6978      	ldr	r0, [r7, #20]
    4958:	4798      	blx	r3
    495a:	0003      	movs	r3, r0
    495c:	617b      	str	r3, [r7, #20]
    495e:	e00a      	b.n	4976 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    4960:	2313      	movs	r3, #19
    4962:	18fb      	adds	r3, r7, r3
    4964:	781b      	ldrb	r3, [r3, #0]
    4966:	2b00      	cmp	r3, #0
    4968:	d005      	beq.n	4976 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    496a:	68fb      	ldr	r3, [r7, #12]
    496c:	3301      	adds	r3, #1
    496e:	697a      	ldr	r2, [r7, #20]
    4970:	40da      	lsrs	r2, r3
    4972:	0013      	movs	r3, r2
    4974:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    4976:	697b      	ldr	r3, [r7, #20]
}
    4978:	0018      	movs	r0, r3
    497a:	46bd      	mov	sp, r7
    497c:	b006      	add	sp, #24
    497e:	bd80      	pop	{r7, pc}
    4980:	000046f9 	.word	0x000046f9
    4984:	000046d1 	.word	0x000046d1
    4988:	40000c04 	.word	0x40000c04
    498c:	40000c00 	.word	0x40000c00
    4990:	00004299 	.word	0x00004299
    4994:	40000c08 	.word	0x40000c08
    4998:	000046e5 	.word	0x000046e5
    499c:	000052dd 	.word	0x000052dd

000049a0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    49a0:	b580      	push	{r7, lr}
    49a2:	b084      	sub	sp, #16
    49a4:	af00      	add	r7, sp, #0
    49a6:	0002      	movs	r2, r0
    49a8:	6039      	str	r1, [r7, #0]
    49aa:	1dfb      	adds	r3, r7, #7
    49ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    49ae:	1dfb      	adds	r3, r7, #7
    49b0:	781b      	ldrb	r3, [r3, #0]
    49b2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    49b4:	683b      	ldr	r3, [r7, #0]
    49b6:	781b      	ldrb	r3, [r3, #0]
    49b8:	021b      	lsls	r3, r3, #8
    49ba:	001a      	movs	r2, r3
    49bc:	68fb      	ldr	r3, [r7, #12]
    49be:	4313      	orrs	r3, r2
    49c0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    49c2:	1dfb      	adds	r3, r7, #7
    49c4:	781b      	ldrb	r3, [r3, #0]
    49c6:	0018      	movs	r0, r3
    49c8:	4b04      	ldr	r3, [pc, #16]	; (49dc <system_gclk_chan_set_config+0x3c>)
    49ca:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    49cc:	4b04      	ldr	r3, [pc, #16]	; (49e0 <system_gclk_chan_set_config+0x40>)
    49ce:	68fa      	ldr	r2, [r7, #12]
    49d0:	b292      	uxth	r2, r2
    49d2:	805a      	strh	r2, [r3, #2]
}
    49d4:	46c0      	nop			; (mov r8, r8)
    49d6:	46bd      	mov	sp, r7
    49d8:	b004      	add	sp, #16
    49da:	bd80      	pop	{r7, pc}
    49dc:	00004a2d 	.word	0x00004a2d
    49e0:	40000c00 	.word	0x40000c00

000049e4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    49e4:	b580      	push	{r7, lr}
    49e6:	b082      	sub	sp, #8
    49e8:	af00      	add	r7, sp, #0
    49ea:	0002      	movs	r2, r0
    49ec:	1dfb      	adds	r3, r7, #7
    49ee:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    49f0:	4b0a      	ldr	r3, [pc, #40]	; (4a1c <system_gclk_chan_enable+0x38>)
    49f2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    49f4:	4a0a      	ldr	r2, [pc, #40]	; (4a20 <system_gclk_chan_enable+0x3c>)
    49f6:	1dfb      	adds	r3, r7, #7
    49f8:	781b      	ldrb	r3, [r3, #0]
    49fa:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    49fc:	4909      	ldr	r1, [pc, #36]	; (4a24 <system_gclk_chan_enable+0x40>)
    49fe:	4b09      	ldr	r3, [pc, #36]	; (4a24 <system_gclk_chan_enable+0x40>)
    4a00:	885b      	ldrh	r3, [r3, #2]
    4a02:	b29b      	uxth	r3, r3
    4a04:	2280      	movs	r2, #128	; 0x80
    4a06:	01d2      	lsls	r2, r2, #7
    4a08:	4313      	orrs	r3, r2
    4a0a:	b29b      	uxth	r3, r3
    4a0c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    4a0e:	4b06      	ldr	r3, [pc, #24]	; (4a28 <system_gclk_chan_enable+0x44>)
    4a10:	4798      	blx	r3
}
    4a12:	46c0      	nop			; (mov r8, r8)
    4a14:	46bd      	mov	sp, r7
    4a16:	b002      	add	sp, #8
    4a18:	bd80      	pop	{r7, pc}
    4a1a:	46c0      	nop			; (mov r8, r8)
    4a1c:	000046d1 	.word	0x000046d1
    4a20:	40000c02 	.word	0x40000c02
    4a24:	40000c00 	.word	0x40000c00
    4a28:	000046e5 	.word	0x000046e5

00004a2c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4a2c:	b580      	push	{r7, lr}
    4a2e:	b084      	sub	sp, #16
    4a30:	af00      	add	r7, sp, #0
    4a32:	0002      	movs	r2, r0
    4a34:	1dfb      	adds	r3, r7, #7
    4a36:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4a38:	4b1c      	ldr	r3, [pc, #112]	; (4aac <system_gclk_chan_disable+0x80>)
    4a3a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a3c:	4a1c      	ldr	r2, [pc, #112]	; (4ab0 <system_gclk_chan_disable+0x84>)
    4a3e:	1dfb      	adds	r3, r7, #7
    4a40:	781b      	ldrb	r3, [r3, #0]
    4a42:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4a44:	4b1b      	ldr	r3, [pc, #108]	; (4ab4 <system_gclk_chan_disable+0x88>)
    4a46:	885b      	ldrh	r3, [r3, #2]
    4a48:	051b      	lsls	r3, r3, #20
    4a4a:	0f1b      	lsrs	r3, r3, #28
    4a4c:	b2db      	uxtb	r3, r3
    4a4e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    4a50:	4a18      	ldr	r2, [pc, #96]	; (4ab4 <system_gclk_chan_disable+0x88>)
    4a52:	8853      	ldrh	r3, [r2, #2]
    4a54:	4918      	ldr	r1, [pc, #96]	; (4ab8 <system_gclk_chan_disable+0x8c>)
    4a56:	400b      	ands	r3, r1
    4a58:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4a5a:	4a16      	ldr	r2, [pc, #88]	; (4ab4 <system_gclk_chan_disable+0x88>)
    4a5c:	4b15      	ldr	r3, [pc, #84]	; (4ab4 <system_gclk_chan_disable+0x88>)
    4a5e:	885b      	ldrh	r3, [r3, #2]
    4a60:	b29b      	uxth	r3, r3
    4a62:	4916      	ldr	r1, [pc, #88]	; (4abc <system_gclk_chan_disable+0x90>)
    4a64:	400b      	ands	r3, r1
    4a66:	b29b      	uxth	r3, r3
    4a68:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4a6a:	46c0      	nop			; (mov r8, r8)
    4a6c:	4b11      	ldr	r3, [pc, #68]	; (4ab4 <system_gclk_chan_disable+0x88>)
    4a6e:	885b      	ldrh	r3, [r3, #2]
    4a70:	b29b      	uxth	r3, r3
    4a72:	001a      	movs	r2, r3
    4a74:	2380      	movs	r3, #128	; 0x80
    4a76:	01db      	lsls	r3, r3, #7
    4a78:	4013      	ands	r3, r2
    4a7a:	d1f7      	bne.n	4a6c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4a7c:	4a0d      	ldr	r2, [pc, #52]	; (4ab4 <system_gclk_chan_disable+0x88>)
    4a7e:	68fb      	ldr	r3, [r7, #12]
    4a80:	b2db      	uxtb	r3, r3
    4a82:	1c19      	adds	r1, r3, #0
    4a84:	230f      	movs	r3, #15
    4a86:	400b      	ands	r3, r1
    4a88:	b2d9      	uxtb	r1, r3
    4a8a:	8853      	ldrh	r3, [r2, #2]
    4a8c:	1c08      	adds	r0, r1, #0
    4a8e:	210f      	movs	r1, #15
    4a90:	4001      	ands	r1, r0
    4a92:	0208      	lsls	r0, r1, #8
    4a94:	4908      	ldr	r1, [pc, #32]	; (4ab8 <system_gclk_chan_disable+0x8c>)
    4a96:	400b      	ands	r3, r1
    4a98:	1c19      	adds	r1, r3, #0
    4a9a:	1c03      	adds	r3, r0, #0
    4a9c:	430b      	orrs	r3, r1
    4a9e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    4aa0:	4b07      	ldr	r3, [pc, #28]	; (4ac0 <system_gclk_chan_disable+0x94>)
    4aa2:	4798      	blx	r3
}
    4aa4:	46c0      	nop			; (mov r8, r8)
    4aa6:	46bd      	mov	sp, r7
    4aa8:	b004      	add	sp, #16
    4aaa:	bd80      	pop	{r7, pc}
    4aac:	000046d1 	.word	0x000046d1
    4ab0:	40000c02 	.word	0x40000c02
    4ab4:	40000c00 	.word	0x40000c00
    4ab8:	fffff0ff 	.word	0xfffff0ff
    4abc:	ffffbfff 	.word	0xffffbfff
    4ac0:	000046e5 	.word	0x000046e5

00004ac4 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    4ac4:	b580      	push	{r7, lr}
    4ac6:	b082      	sub	sp, #8
    4ac8:	af00      	add	r7, sp, #0
    4aca:	0002      	movs	r2, r0
    4acc:	1dfb      	adds	r3, r7, #7
    4ace:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4ad0:	4b09      	ldr	r3, [pc, #36]	; (4af8 <system_gclk_chan_lock+0x34>)
    4ad2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4ad4:	4a09      	ldr	r2, [pc, #36]	; (4afc <system_gclk_chan_lock+0x38>)
    4ad6:	1dfb      	adds	r3, r7, #7
    4ad8:	781b      	ldrb	r3, [r3, #0]
    4ada:	7013      	strb	r3, [r2, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    4adc:	4a08      	ldr	r2, [pc, #32]	; (4b00 <system_gclk_chan_lock+0x3c>)
    4ade:	4b08      	ldr	r3, [pc, #32]	; (4b00 <system_gclk_chan_lock+0x3c>)
    4ae0:	885b      	ldrh	r3, [r3, #2]
    4ae2:	b29b      	uxth	r3, r3
    4ae4:	4907      	ldr	r1, [pc, #28]	; (4b04 <system_gclk_chan_lock+0x40>)
    4ae6:	430b      	orrs	r3, r1
    4ae8:	b29b      	uxth	r3, r3
    4aea:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    4aec:	4b06      	ldr	r3, [pc, #24]	; (4b08 <system_gclk_chan_lock+0x44>)
    4aee:	4798      	blx	r3
}
    4af0:	46c0      	nop			; (mov r8, r8)
    4af2:	46bd      	mov	sp, r7
    4af4:	b002      	add	sp, #8
    4af6:	bd80      	pop	{r7, pc}
    4af8:	000046d1 	.word	0x000046d1
    4afc:	40000c02 	.word	0x40000c02
    4b00:	40000c00 	.word	0x40000c00
    4b04:	ffffc000 	.word	0xffffc000
    4b08:	000046e5 	.word	0x000046e5

00004b0c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4b0c:	b580      	push	{r7, lr}
    4b0e:	b084      	sub	sp, #16
    4b10:	af00      	add	r7, sp, #0
    4b12:	0002      	movs	r2, r0
    4b14:	1dfb      	adds	r3, r7, #7
    4b16:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4b18:	4b0d      	ldr	r3, [pc, #52]	; (4b50 <system_gclk_chan_get_hz+0x44>)
    4b1a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4b1c:	4a0d      	ldr	r2, [pc, #52]	; (4b54 <system_gclk_chan_get_hz+0x48>)
    4b1e:	1dfb      	adds	r3, r7, #7
    4b20:	781b      	ldrb	r3, [r3, #0]
    4b22:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4b24:	4b0c      	ldr	r3, [pc, #48]	; (4b58 <system_gclk_chan_get_hz+0x4c>)
    4b26:	885b      	ldrh	r3, [r3, #2]
    4b28:	051b      	lsls	r3, r3, #20
    4b2a:	0f1b      	lsrs	r3, r3, #28
    4b2c:	b2da      	uxtb	r2, r3
    4b2e:	230f      	movs	r3, #15
    4b30:	18fb      	adds	r3, r7, r3
    4b32:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    4b34:	4b09      	ldr	r3, [pc, #36]	; (4b5c <system_gclk_chan_get_hz+0x50>)
    4b36:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4b38:	230f      	movs	r3, #15
    4b3a:	18fb      	adds	r3, r7, r3
    4b3c:	781b      	ldrb	r3, [r3, #0]
    4b3e:	0018      	movs	r0, r3
    4b40:	4b07      	ldr	r3, [pc, #28]	; (4b60 <system_gclk_chan_get_hz+0x54>)
    4b42:	4798      	blx	r3
    4b44:	0003      	movs	r3, r0
}
    4b46:	0018      	movs	r0, r3
    4b48:	46bd      	mov	sp, r7
    4b4a:	b004      	add	sp, #16
    4b4c:	bd80      	pop	{r7, pc}
    4b4e:	46c0      	nop			; (mov r8, r8)
    4b50:	000046d1 	.word	0x000046d1
    4b54:	40000c02 	.word	0x40000c02
    4b58:	40000c00 	.word	0x40000c00
    4b5c:	000046e5 	.word	0x000046e5
    4b60:	000048c9 	.word	0x000048c9

00004b64 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4b64:	b580      	push	{r7, lr}
    4b66:	b084      	sub	sp, #16
    4b68:	af00      	add	r7, sp, #0
    4b6a:	0002      	movs	r2, r0
    4b6c:	1dfb      	adds	r3, r7, #7
    4b6e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4b70:	230f      	movs	r3, #15
    4b72:	18fb      	adds	r3, r7, r3
    4b74:	1dfa      	adds	r2, r7, #7
    4b76:	7812      	ldrb	r2, [r2, #0]
    4b78:	09d2      	lsrs	r2, r2, #7
    4b7a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4b7c:	230e      	movs	r3, #14
    4b7e:	18fb      	adds	r3, r7, r3
    4b80:	1dfa      	adds	r2, r7, #7
    4b82:	7812      	ldrb	r2, [r2, #0]
    4b84:	0952      	lsrs	r2, r2, #5
    4b86:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4b88:	4b0d      	ldr	r3, [pc, #52]	; (4bc0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4b8a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4b8c:	230f      	movs	r3, #15
    4b8e:	18fb      	adds	r3, r7, r3
    4b90:	781b      	ldrb	r3, [r3, #0]
    4b92:	2b00      	cmp	r3, #0
    4b94:	d10f      	bne.n	4bb6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4b96:	230f      	movs	r3, #15
    4b98:	18fb      	adds	r3, r7, r3
    4b9a:	781b      	ldrb	r3, [r3, #0]
    4b9c:	009b      	lsls	r3, r3, #2
    4b9e:	2210      	movs	r2, #16
    4ba0:	4694      	mov	ip, r2
    4ba2:	44bc      	add	ip, r7
    4ba4:	4463      	add	r3, ip
    4ba6:	3b08      	subs	r3, #8
    4ba8:	681a      	ldr	r2, [r3, #0]
    4baa:	230e      	movs	r3, #14
    4bac:	18fb      	adds	r3, r7, r3
    4bae:	781b      	ldrb	r3, [r3, #0]
    4bb0:	01db      	lsls	r3, r3, #7
    4bb2:	18d3      	adds	r3, r2, r3
    4bb4:	e000      	b.n	4bb8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4bb6:	2300      	movs	r3, #0
	}
}
    4bb8:	0018      	movs	r0, r3
    4bba:	46bd      	mov	sp, r7
    4bbc:	b004      	add	sp, #16
    4bbe:	bd80      	pop	{r7, pc}
    4bc0:	41004400 	.word	0x41004400

00004bc4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4bc4:	b580      	push	{r7, lr}
    4bc6:	b088      	sub	sp, #32
    4bc8:	af00      	add	r7, sp, #0
    4bca:	60f8      	str	r0, [r7, #12]
    4bcc:	60b9      	str	r1, [r7, #8]
    4bce:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4bd0:	2300      	movs	r3, #0
    4bd2:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4bd4:	687b      	ldr	r3, [r7, #4]
    4bd6:	78db      	ldrb	r3, [r3, #3]
    4bd8:	2201      	movs	r2, #1
    4bda:	4053      	eors	r3, r2
    4bdc:	b2db      	uxtb	r3, r3
    4bde:	2b00      	cmp	r3, #0
    4be0:	d035      	beq.n	4c4e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4be2:	687b      	ldr	r3, [r7, #4]
    4be4:	781b      	ldrb	r3, [r3, #0]
    4be6:	2b80      	cmp	r3, #128	; 0x80
    4be8:	d00b      	beq.n	4c02 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    4bea:	69fb      	ldr	r3, [r7, #28]
    4bec:	2280      	movs	r2, #128	; 0x80
    4bee:	0252      	lsls	r2, r2, #9
    4bf0:	4313      	orrs	r3, r2
    4bf2:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4bf4:	687b      	ldr	r3, [r7, #4]
    4bf6:	781b      	ldrb	r3, [r3, #0]
    4bf8:	061b      	lsls	r3, r3, #24
    4bfa:	001a      	movs	r2, r3
    4bfc:	69fb      	ldr	r3, [r7, #28]
    4bfe:	4313      	orrs	r3, r2
    4c00:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	785b      	ldrb	r3, [r3, #1]
    4c06:	2b00      	cmp	r3, #0
    4c08:	d003      	beq.n	4c12 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4c0a:	687b      	ldr	r3, [r7, #4]
    4c0c:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4c0e:	2b02      	cmp	r3, #2
    4c10:	d110      	bne.n	4c34 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4c12:	69fb      	ldr	r3, [r7, #28]
    4c14:	2280      	movs	r2, #128	; 0x80
    4c16:	0292      	lsls	r2, r2, #10
    4c18:	4313      	orrs	r3, r2
    4c1a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4c1c:	687b      	ldr	r3, [r7, #4]
    4c1e:	789b      	ldrb	r3, [r3, #2]
    4c20:	2b00      	cmp	r3, #0
    4c22:	d004      	beq.n	4c2e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4c24:	69fb      	ldr	r3, [r7, #28]
    4c26:	2280      	movs	r2, #128	; 0x80
    4c28:	02d2      	lsls	r2, r2, #11
    4c2a:	4313      	orrs	r3, r2
    4c2c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4c2e:	68fb      	ldr	r3, [r7, #12]
    4c30:	68ba      	ldr	r2, [r7, #8]
    4c32:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4c34:	687b      	ldr	r3, [r7, #4]
    4c36:	785b      	ldrb	r3, [r3, #1]
    4c38:	2b01      	cmp	r3, #1
    4c3a:	d003      	beq.n	4c44 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4c3c:	687b      	ldr	r3, [r7, #4]
    4c3e:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4c40:	2b02      	cmp	r3, #2
    4c42:	d107      	bne.n	4c54 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4c44:	69fb      	ldr	r3, [r7, #28]
    4c46:	4a22      	ldr	r2, [pc, #136]	; (4cd0 <_system_pinmux_config+0x10c>)
    4c48:	4013      	ands	r3, r2
    4c4a:	61fb      	str	r3, [r7, #28]
    4c4c:	e002      	b.n	4c54 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4c4e:	68fb      	ldr	r3, [r7, #12]
    4c50:	68ba      	ldr	r2, [r7, #8]
    4c52:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4c54:	68bb      	ldr	r3, [r7, #8]
    4c56:	041b      	lsls	r3, r3, #16
    4c58:	0c1b      	lsrs	r3, r3, #16
    4c5a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4c5c:	68bb      	ldr	r3, [r7, #8]
    4c5e:	0c1b      	lsrs	r3, r3, #16
    4c60:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4c62:	69ba      	ldr	r2, [r7, #24]
    4c64:	69fb      	ldr	r3, [r7, #28]
    4c66:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4c68:	22a0      	movs	r2, #160	; 0xa0
    4c6a:	05d2      	lsls	r2, r2, #23
    4c6c:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4c6e:	68fb      	ldr	r3, [r7, #12]
    4c70:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4c72:	697a      	ldr	r2, [r7, #20]
    4c74:	69fb      	ldr	r3, [r7, #28]
    4c76:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4c78:	22d0      	movs	r2, #208	; 0xd0
    4c7a:	0612      	lsls	r2, r2, #24
    4c7c:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4c7e:	68fb      	ldr	r3, [r7, #12]
    4c80:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4c82:	687b      	ldr	r3, [r7, #4]
    4c84:	78db      	ldrb	r3, [r3, #3]
    4c86:	2201      	movs	r2, #1
    4c88:	4053      	eors	r3, r2
    4c8a:	b2db      	uxtb	r3, r3
    4c8c:	2b00      	cmp	r3, #0
    4c8e:	d01a      	beq.n	4cc6 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4c90:	69fa      	ldr	r2, [r7, #28]
    4c92:	2380      	movs	r3, #128	; 0x80
    4c94:	02db      	lsls	r3, r3, #11
    4c96:	4013      	ands	r3, r2
    4c98:	d00a      	beq.n	4cb0 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4c9a:	687b      	ldr	r3, [r7, #4]
    4c9c:	789b      	ldrb	r3, [r3, #2]
    4c9e:	2b01      	cmp	r3, #1
    4ca0:	d103      	bne.n	4caa <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    4ca2:	68fb      	ldr	r3, [r7, #12]
    4ca4:	68ba      	ldr	r2, [r7, #8]
    4ca6:	619a      	str	r2, [r3, #24]
    4ca8:	e002      	b.n	4cb0 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    4caa:	68fb      	ldr	r3, [r7, #12]
    4cac:	68ba      	ldr	r2, [r7, #8]
    4cae:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4cb0:	687b      	ldr	r3, [r7, #4]
    4cb2:	785b      	ldrb	r3, [r3, #1]
    4cb4:	2b01      	cmp	r3, #1
    4cb6:	d003      	beq.n	4cc0 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4cbc:	2b02      	cmp	r3, #2
    4cbe:	d102      	bne.n	4cc6 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4cc0:	68fb      	ldr	r3, [r7, #12]
    4cc2:	68ba      	ldr	r2, [r7, #8]
    4cc4:	609a      	str	r2, [r3, #8]
		}
	}
}
    4cc6:	46c0      	nop			; (mov r8, r8)
    4cc8:	46bd      	mov	sp, r7
    4cca:	b008      	add	sp, #32
    4ccc:	bd80      	pop	{r7, pc}
    4cce:	46c0      	nop			; (mov r8, r8)
    4cd0:	fffbffff 	.word	0xfffbffff

00004cd4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4cd4:	b580      	push	{r7, lr}
    4cd6:	b084      	sub	sp, #16
    4cd8:	af00      	add	r7, sp, #0
    4cda:	0002      	movs	r2, r0
    4cdc:	6039      	str	r1, [r7, #0]
    4cde:	1dfb      	adds	r3, r7, #7
    4ce0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4ce2:	1dfb      	adds	r3, r7, #7
    4ce4:	781b      	ldrb	r3, [r3, #0]
    4ce6:	0018      	movs	r0, r3
    4ce8:	4b0a      	ldr	r3, [pc, #40]	; (4d14 <system_pinmux_pin_set_config+0x40>)
    4cea:	4798      	blx	r3
    4cec:	0003      	movs	r3, r0
    4cee:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4cf0:	1dfb      	adds	r3, r7, #7
    4cf2:	781b      	ldrb	r3, [r3, #0]
    4cf4:	221f      	movs	r2, #31
    4cf6:	4013      	ands	r3, r2
    4cf8:	2201      	movs	r2, #1
    4cfa:	409a      	lsls	r2, r3
    4cfc:	0013      	movs	r3, r2
    4cfe:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    4d00:	683a      	ldr	r2, [r7, #0]
    4d02:	68b9      	ldr	r1, [r7, #8]
    4d04:	68fb      	ldr	r3, [r7, #12]
    4d06:	0018      	movs	r0, r3
    4d08:	4b03      	ldr	r3, [pc, #12]	; (4d18 <system_pinmux_pin_set_config+0x44>)
    4d0a:	4798      	blx	r3
}
    4d0c:	46c0      	nop			; (mov r8, r8)
    4d0e:	46bd      	mov	sp, r7
    4d10:	b004      	add	sp, #16
    4d12:	bd80      	pop	{r7, pc}
    4d14:	00004b65 	.word	0x00004b65
    4d18:	00004bc5 	.word	0x00004bc5

00004d1c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    4d1c:	b580      	push	{r7, lr}
    4d1e:	af00      	add	r7, sp, #0
	return;
    4d20:	46c0      	nop			; (mov r8, r8)
}
    4d22:	46bd      	mov	sp, r7
    4d24:	bd80      	pop	{r7, pc}
    4d26:	46c0      	nop			; (mov r8, r8)

00004d28 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4d28:	b580      	push	{r7, lr}
    4d2a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4d2c:	4b06      	ldr	r3, [pc, #24]	; (4d48 <system_init+0x20>)
    4d2e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4d30:	4b06      	ldr	r3, [pc, #24]	; (4d4c <system_init+0x24>)
    4d32:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4d34:	4b06      	ldr	r3, [pc, #24]	; (4d50 <system_init+0x28>)
    4d36:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4d38:	4b06      	ldr	r3, [pc, #24]	; (4d54 <system_init+0x2c>)
    4d3a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4d3c:	4b06      	ldr	r3, [pc, #24]	; (4d58 <system_init+0x30>)
    4d3e:	4798      	blx	r3
}
    4d40:	46c0      	nop			; (mov r8, r8)
    4d42:	46bd      	mov	sp, r7
    4d44:	bd80      	pop	{r7, pc}
    4d46:	46c0      	nop			; (mov r8, r8)
    4d48:	000044b1 	.word	0x000044b1
    4d4c:	0000409d 	.word	0x0000409d
    4d50:	00004d1d 	.word	0x00004d1d
    4d54:	000003ad 	.word	0x000003ad
    4d58:	00004d1d 	.word	0x00004d1d

00004d5c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4d5c:	b580      	push	{r7, lr}
    4d5e:	b082      	sub	sp, #8
    4d60:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    4d62:	4b2f      	ldr	r3, [pc, #188]	; (4e20 <Reset_Handler+0xc4>)
    4d64:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    4d66:	4b2f      	ldr	r3, [pc, #188]	; (4e24 <Reset_Handler+0xc8>)
    4d68:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    4d6a:	687a      	ldr	r2, [r7, #4]
    4d6c:	683b      	ldr	r3, [r7, #0]
    4d6e:	429a      	cmp	r2, r3
    4d70:	d00c      	beq.n	4d8c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    4d72:	e007      	b.n	4d84 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    4d74:	683b      	ldr	r3, [r7, #0]
    4d76:	1d1a      	adds	r2, r3, #4
    4d78:	603a      	str	r2, [r7, #0]
    4d7a:	687a      	ldr	r2, [r7, #4]
    4d7c:	1d11      	adds	r1, r2, #4
    4d7e:	6079      	str	r1, [r7, #4]
    4d80:	6812      	ldr	r2, [r2, #0]
    4d82:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4d84:	683a      	ldr	r2, [r7, #0]
    4d86:	4b28      	ldr	r3, [pc, #160]	; (4e28 <Reset_Handler+0xcc>)
    4d88:	429a      	cmp	r2, r3
    4d8a:	d3f3      	bcc.n	4d74 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4d8c:	4b27      	ldr	r3, [pc, #156]	; (4e2c <Reset_Handler+0xd0>)
    4d8e:	603b      	str	r3, [r7, #0]
    4d90:	e004      	b.n	4d9c <Reset_Handler+0x40>
                *pDest++ = 0;
    4d92:	683b      	ldr	r3, [r7, #0]
    4d94:	1d1a      	adds	r2, r3, #4
    4d96:	603a      	str	r2, [r7, #0]
    4d98:	2200      	movs	r2, #0
    4d9a:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4d9c:	683a      	ldr	r2, [r7, #0]
    4d9e:	4b24      	ldr	r3, [pc, #144]	; (4e30 <Reset_Handler+0xd4>)
    4da0:	429a      	cmp	r2, r3
    4da2:	d3f6      	bcc.n	4d92 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    4da4:	4b23      	ldr	r3, [pc, #140]	; (4e34 <Reset_Handler+0xd8>)
    4da6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4da8:	4b23      	ldr	r3, [pc, #140]	; (4e38 <Reset_Handler+0xdc>)
    4daa:	687a      	ldr	r2, [r7, #4]
    4dac:	21ff      	movs	r1, #255	; 0xff
    4dae:	438a      	bics	r2, r1
    4db0:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4db2:	4a22      	ldr	r2, [pc, #136]	; (4e3c <Reset_Handler+0xe0>)
    4db4:	2390      	movs	r3, #144	; 0x90
    4db6:	005b      	lsls	r3, r3, #1
    4db8:	2102      	movs	r1, #2
    4dba:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4dbc:	4a20      	ldr	r2, [pc, #128]	; (4e40 <Reset_Handler+0xe4>)
    4dbe:	78d3      	ldrb	r3, [r2, #3]
    4dc0:	2103      	movs	r1, #3
    4dc2:	438b      	bics	r3, r1
    4dc4:	1c19      	adds	r1, r3, #0
    4dc6:	2302      	movs	r3, #2
    4dc8:	430b      	orrs	r3, r1
    4dca:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4dcc:	4a1c      	ldr	r2, [pc, #112]	; (4e40 <Reset_Handler+0xe4>)
    4dce:	78d3      	ldrb	r3, [r2, #3]
    4dd0:	210c      	movs	r1, #12
    4dd2:	438b      	bics	r3, r1
    4dd4:	1c19      	adds	r1, r3, #0
    4dd6:	2308      	movs	r3, #8
    4dd8:	430b      	orrs	r3, r1
    4dda:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    4ddc:	4a19      	ldr	r2, [pc, #100]	; (4e44 <Reset_Handler+0xe8>)
    4dde:	7b93      	ldrb	r3, [r2, #14]
    4de0:	2130      	movs	r1, #48	; 0x30
    4de2:	438b      	bics	r3, r1
    4de4:	1c19      	adds	r1, r3, #0
    4de6:	2320      	movs	r3, #32
    4de8:	430b      	orrs	r3, r1
    4dea:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4dec:	4a15      	ldr	r2, [pc, #84]	; (4e44 <Reset_Handler+0xe8>)
    4dee:	7b93      	ldrb	r3, [r2, #14]
    4df0:	210c      	movs	r1, #12
    4df2:	438b      	bics	r3, r1
    4df4:	1c19      	adds	r1, r3, #0
    4df6:	2308      	movs	r3, #8
    4df8:	430b      	orrs	r3, r1
    4dfa:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4dfc:	4a11      	ldr	r2, [pc, #68]	; (4e44 <Reset_Handler+0xe8>)
    4dfe:	7b93      	ldrb	r3, [r2, #14]
    4e00:	2103      	movs	r1, #3
    4e02:	438b      	bics	r3, r1
    4e04:	1c19      	adds	r1, r3, #0
    4e06:	2302      	movs	r3, #2
    4e08:	430b      	orrs	r3, r1
    4e0a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    4e0c:	4a0e      	ldr	r2, [pc, #56]	; (4e48 <Reset_Handler+0xec>)
    4e0e:	6853      	ldr	r3, [r2, #4]
    4e10:	2180      	movs	r1, #128	; 0x80
    4e12:	430b      	orrs	r3, r1
    4e14:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    4e16:	4b0d      	ldr	r3, [pc, #52]	; (4e4c <Reset_Handler+0xf0>)
    4e18:	4798      	blx	r3

        /* Branch to main function */
        main();
    4e1a:	4b0d      	ldr	r3, [pc, #52]	; (4e50 <Reset_Handler+0xf4>)
    4e1c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    4e1e:	e7fe      	b.n	4e1e <Reset_Handler+0xc2>
    4e20:	000071d8 	.word	0x000071d8
    4e24:	20000000 	.word	0x20000000
    4e28:	20000284 	.word	0x20000284
    4e2c:	20000284 	.word	0x20000284
    4e30:	20001094 	.word	0x20001094
    4e34:	00000000 	.word	0x00000000
    4e38:	e000ed00 	.word	0xe000ed00
    4e3c:	41007000 	.word	0x41007000
    4e40:	41005000 	.word	0x41005000
    4e44:	41004800 	.word	0x41004800
    4e48:	41004000 	.word	0x41004000
    4e4c:	00005835 	.word	0x00005835
    4e50:	00004ee5 	.word	0x00004ee5

00004e54 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4e54:	b580      	push	{r7, lr}
    4e56:	b082      	sub	sp, #8
    4e58:	af00      	add	r7, sp, #0
	int32_t phantomISR = 9999;
    4e5a:	4b04      	ldr	r3, [pc, #16]	; (4e6c <Dummy_Handler+0x18>)
    4e5c:	607b      	str	r3, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4e5e:	f3ef 8305 	mrs	r3, IPSR
    4e62:	603b      	str	r3, [r7, #0]
  return(result);
    4e64:	683b      	ldr	r3, [r7, #0]
        while (1) {
			phantomISR = __get_IPSR();
    4e66:	607b      	str	r3, [r7, #4]
        }
    4e68:	e7f9      	b.n	4e5e <Dummy_Handler+0xa>
    4e6a:	46c0      	nop			; (mov r8, r8)
    4e6c:	0000270f 	.word	0x0000270f

00004e70 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4e70:	b580      	push	{r7, lr}
    4e72:	b084      	sub	sp, #16
    4e74:	af00      	add	r7, sp, #0
    4e76:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4e78:	4b0a      	ldr	r3, [pc, #40]	; (4ea4 <_sbrk+0x34>)
    4e7a:	681b      	ldr	r3, [r3, #0]
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	d102      	bne.n	4e86 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    4e80:	4b08      	ldr	r3, [pc, #32]	; (4ea4 <_sbrk+0x34>)
    4e82:	4a09      	ldr	r2, [pc, #36]	; (4ea8 <_sbrk+0x38>)
    4e84:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    4e86:	4b07      	ldr	r3, [pc, #28]	; (4ea4 <_sbrk+0x34>)
    4e88:	681b      	ldr	r3, [r3, #0]
    4e8a:	60fb      	str	r3, [r7, #12]

	heap += incr;
    4e8c:	4b05      	ldr	r3, [pc, #20]	; (4ea4 <_sbrk+0x34>)
    4e8e:	681a      	ldr	r2, [r3, #0]
    4e90:	687b      	ldr	r3, [r7, #4]
    4e92:	18d2      	adds	r2, r2, r3
    4e94:	4b03      	ldr	r3, [pc, #12]	; (4ea4 <_sbrk+0x34>)
    4e96:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    4e98:	68fb      	ldr	r3, [r7, #12]
}
    4e9a:	0018      	movs	r0, r3
    4e9c:	46bd      	mov	sp, r7
    4e9e:	b004      	add	sp, #16
    4ea0:	bd80      	pop	{r7, pc}
    4ea2:	46c0      	nop			; (mov r8, r8)
    4ea4:	200002cc 	.word	0x200002cc
    4ea8:	20003098 	.word	0x20003098

00004eac <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    4eac:	b580      	push	{r7, lr}
    4eae:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    4eb0:	4b04      	ldr	r3, [pc, #16]	; (4ec4 <system_interrupt_enable_global+0x18>)
    4eb2:	2201      	movs	r2, #1
    4eb4:	701a      	strb	r2, [r3, #0]
    4eb6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4eba:	b662      	cpsie	i
}
    4ebc:	46c0      	nop			; (mov r8, r8)
    4ebe:	46bd      	mov	sp, r7
    4ec0:	bd80      	pop	{r7, pc}
    4ec2:	46c0      	nop			; (mov r8, r8)
    4ec4:	20000218 	.word	0x20000218

00004ec8 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    4ec8:	b580      	push	{r7, lr}
    4eca:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4ecc:	b672      	cpsid	i
    4ece:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4ed2:	4b03      	ldr	r3, [pc, #12]	; (4ee0 <system_interrupt_disable_global+0x18>)
    4ed4:	2200      	movs	r2, #0
    4ed6:	701a      	strb	r2, [r3, #0]
}
    4ed8:	46c0      	nop			; (mov r8, r8)
    4eda:	46bd      	mov	sp, r7
    4edc:	bd80      	pop	{r7, pc}
    4ede:	46c0      	nop			; (mov r8, r8)
    4ee0:	20000218 	.word	0x20000218

00004ee4 <main>:
char buffer[32];



int main (void)
{
    4ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ee6:	b08f      	sub	sp, #60	; 0x3c
    4ee8:	af00      	add	r7, sp, #0
	
	system_init();
    4eea:	4bdb      	ldr	r3, [pc, #876]	; (5258 <main+0x374>)
    4eec:	4798      	blx	r3
	delay_init();
    4eee:	4bdb      	ldr	r3, [pc, #876]	; (525c <main+0x378>)
    4ef0:	4798      	blx	r3
	//ble_uart_init();
	//uart_init();
	sb_reset_buffers();
    4ef2:	4bdb      	ldr	r3, [pc, #876]	; (5260 <main+0x37c>)
    4ef4:	4798      	blx	r3
	sb_uart_init();
    4ef6:	4bdb      	ldr	r3, [pc, #876]	; (5264 <main+0x380>)
    4ef8:	4798      	blx	r3
	
	
	sounds_init_pins();
    4efa:	4bdb      	ldr	r3, [pc, #876]	; (5268 <main+0x384>)
    4efc:	4798      	blx	r3
	sounds_reset();
    4efe:	4bdb      	ldr	r3, [pc, #876]	; (526c <main+0x388>)
    4f00:	4798      	blx	r3
	delay_ms(500);
    4f02:	2000      	movs	r0, #0
    4f04:	4bda      	ldr	r3, [pc, #872]	; (5270 <main+0x38c>)
    4f06:	4798      	blx	r3
    4f08:	0003      	movs	r3, r0
    4f0a:	001d      	movs	r5, r3
    4f0c:	2300      	movs	r3, #0
    4f0e:	001e      	movs	r6, r3
    4f10:	4cd8      	ldr	r4, [pc, #864]	; (5274 <main+0x390>)
    4f12:	22fa      	movs	r2, #250	; 0xfa
    4f14:	0052      	lsls	r2, r2, #1
    4f16:	2300      	movs	r3, #0
    4f18:	0028      	movs	r0, r5
    4f1a:	0031      	movs	r1, r6
    4f1c:	47a0      	blx	r4
    4f1e:	0003      	movs	r3, r0
    4f20:	000c      	movs	r4, r1
    4f22:	0019      	movs	r1, r3
    4f24:	0022      	movs	r2, r4
    4f26:	4bd4      	ldr	r3, [pc, #848]	; (5278 <main+0x394>)
    4f28:	2400      	movs	r4, #0
    4f2a:	18c9      	adds	r1, r1, r3
    4f2c:	4162      	adcs	r2, r4
    4f2e:	0008      	movs	r0, r1
    4f30:	0011      	movs	r1, r2
    4f32:	4cd2      	ldr	r4, [pc, #840]	; (527c <main+0x398>)
    4f34:	4ad2      	ldr	r2, [pc, #840]	; (5280 <main+0x39c>)
    4f36:	2300      	movs	r3, #0
    4f38:	47a0      	blx	r4
    4f3a:	0003      	movs	r3, r0
    4f3c:	000c      	movs	r4, r1
    4f3e:	0018      	movs	r0, r3
    4f40:	4bd0      	ldr	r3, [pc, #832]	; (5284 <main+0x3a0>)
    4f42:	4798      	blx	r3
	party_thresholds[5] = 2000;
	party_thresholds[6] = 2375;
	 
	*/
	
	int sound_no = 0;
    4f44:	2300      	movs	r3, #0
    4f46:	633b      	str	r3, [r7, #48]	; 0x30
	
	while (1)
	{
		for (uint32_t i=0;i<sizeof(rx_buffer_array)-1;i++)
    4f48:	2300      	movs	r3, #0
    4f4a:	637b      	str	r3, [r7, #52]	; 0x34
    4f4c:	e025      	b.n	4f9a <main+0xb6>
		{
			if (rx_buffer_array[i] == '\n' & rx_buffer_array[i+1] == 0)//'\n')
    4f4e:	4ace      	ldr	r2, [pc, #824]	; (5288 <main+0x3a4>)
    4f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4f52:	18d3      	adds	r3, r2, r3
    4f54:	781b      	ldrb	r3, [r3, #0]
    4f56:	b2db      	uxtb	r3, r3
    4f58:	3b0a      	subs	r3, #10
    4f5a:	425a      	negs	r2, r3
    4f5c:	4153      	adcs	r3, r2
    4f5e:	b2d9      	uxtb	r1, r3
    4f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4f62:	1c5a      	adds	r2, r3, #1
    4f64:	4bc8      	ldr	r3, [pc, #800]	; (5288 <main+0x3a4>)
    4f66:	5c9b      	ldrb	r3, [r3, r2]
    4f68:	b2db      	uxtb	r3, r3
    4f6a:	425a      	negs	r2, r3
    4f6c:	4153      	adcs	r3, r2
    4f6e:	b2db      	uxtb	r3, r3
    4f70:	400b      	ands	r3, r1
    4f72:	b2db      	uxtb	r3, r3
    4f74:	2b00      	cmp	r3, #0
    4f76:	d006      	beq.n	4f86 <main+0xa2>
			{
				data_handler(rx_buffer_array);
    4f78:	4bc3      	ldr	r3, [pc, #780]	; (5288 <main+0x3a4>)
    4f7a:	0018      	movs	r0, r3
    4f7c:	4bc3      	ldr	r3, [pc, #780]	; (528c <main+0x3a8>)
    4f7e:	4798      	blx	r3
				reset_buffers();
    4f80:	4bc3      	ldr	r3, [pc, #780]	; (5290 <main+0x3ac>)
    4f82:	4798      	blx	r3
    4f84:	e006      	b.n	4f94 <main+0xb0>
			}
			else if (rx_buffer_array[i] == 0)
    4f86:	4ac0      	ldr	r2, [pc, #768]	; (5288 <main+0x3a4>)
    4f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4f8a:	18d3      	adds	r3, r2, r3
    4f8c:	781b      	ldrb	r3, [r3, #0]
    4f8e:	b2db      	uxtb	r3, r3
    4f90:	2b00      	cmp	r3, #0
    4f92:	d007      	beq.n	4fa4 <main+0xc0>
	
	int sound_no = 0;
	
	while (1)
	{
		for (uint32_t i=0;i<sizeof(rx_buffer_array)-1;i++)
    4f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4f96:	3301      	adds	r3, #1
    4f98:	637b      	str	r3, [r7, #52]	; 0x34
    4f9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4f9c:	4bbd      	ldr	r3, [pc, #756]	; (5294 <main+0x3b0>)
    4f9e:	429a      	cmp	r2, r3
    4fa0:	d9d5      	bls.n	4f4e <main+0x6a>
    4fa2:	e000      	b.n	4fa6 <main+0xc2>
				data_handler(rx_buffer_array);
				reset_buffers();
			}
			else if (rx_buffer_array[i] == 0)
			{
				break;
    4fa4:	46c0      	nop			; (mov r8, r8)
			}
		}
		sb_event_handler(sb_rx_buffer_array);
    4fa6:	4bbc      	ldr	r3, [pc, #752]	; (5298 <main+0x3b4>)
    4fa8:	0018      	movs	r0, r3
    4faa:	4bbc      	ldr	r3, [pc, #752]	; (529c <main+0x3b8>)
    4fac:	4798      	blx	r3
				delay_ms(250);
				sb_play_track_by_number(2);
			}
			//sb_uart_write(buffer);
		}*/
		if (should_update)
    4fae:	4bbc      	ldr	r3, [pc, #752]	; (52a0 <main+0x3bc>)
    4fb0:	781b      	ldrb	r3, [r3, #0]
    4fb2:	2b00      	cmp	r3, #0
    4fb4:	d006      	beq.n	4fc4 <main+0xe0>
		{
			should_update = false;
    4fb6:	4aba      	ldr	r2, [pc, #744]	; (52a0 <main+0x3bc>)
    4fb8:	2300      	movs	r3, #0
    4fba:	7013      	strb	r3, [r2, #0]
			things_to_do();
    4fbc:	4bb9      	ldr	r3, [pc, #740]	; (52a4 <main+0x3c0>)
    4fbe:	4798      	blx	r3
			update_all_ports();
    4fc0:	4bb9      	ldr	r3, [pc, #740]	; (52a8 <main+0x3c4>)
    4fc2:	4798      	blx	r3
		}
		if (execute_order_66)
    4fc4:	4bb9      	ldr	r3, [pc, #740]	; (52ac <main+0x3c8>)
    4fc6:	781b      	ldrb	r3, [r3, #0]
    4fc8:	2b00      	cmp	r3, #0
    4fca:	d00e      	beq.n	4fea <main+0x106>
		{
			system_interrupt_disable_global();
    4fcc:	4bb8      	ldr	r3, [pc, #736]	; (52b0 <main+0x3cc>)
    4fce:	4798      	blx	r3
			ble_uart_write("EXEC ORDER 66\n");
    4fd0:	4bb8      	ldr	r3, [pc, #736]	; (52b4 <main+0x3d0>)
    4fd2:	0018      	movs	r0, r3
    4fd4:	4bb8      	ldr	r3, [pc, #736]	; (52b8 <main+0x3d4>)
    4fd6:	4798      	blx	r3
			execute_order_66 = false;
    4fd8:	4ab4      	ldr	r2, [pc, #720]	; (52ac <main+0x3c8>)
    4fda:	2300      	movs	r3, #0
    4fdc:	7013      	strb	r3, [r2, #0]
			//init_all_ports();
			mcp23017_reset();
    4fde:	4bb7      	ldr	r3, [pc, #732]	; (52bc <main+0x3d8>)
    4fe0:	4798      	blx	r3
			a_okay();
    4fe2:	4bb7      	ldr	r3, [pc, #732]	; (52c0 <main+0x3dc>)
    4fe4:	4798      	blx	r3
			system_interrupt_enable_global();
    4fe6:	4bb7      	ldr	r3, [pc, #732]	; (52c4 <main+0x3e0>)
    4fe8:	4798      	blx	r3
		}
		
		if (valve_open)
    4fea:	4bb7      	ldr	r3, [pc, #732]	; (52c8 <main+0x3e4>)
    4fec:	781b      	ldrb	r3, [r3, #0]
    4fee:	b2db      	uxtb	r3, r3
    4ff0:	2b00      	cmp	r3, #0
    4ff2:	d100      	bne.n	4ff6 <main+0x112>
    4ff4:	e08f      	b.n	5116 <main+0x232>
		{
			system_interrupt_disable_global();
    4ff6:	4bae      	ldr	r3, [pc, #696]	; (52b0 <main+0x3cc>)
    4ff8:	4798      	blx	r3
			valve_open = false;
    4ffa:	4ab3      	ldr	r2, [pc, #716]	; (52c8 <main+0x3e4>)
    4ffc:	2300      	movs	r3, #0
    4ffe:	7013      	strb	r3, [r2, #0]
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,true);
    5000:	2301      	movs	r3, #1
    5002:	2200      	movs	r2, #0
    5004:	2105      	movs	r1, #5
    5006:	2000      	movs	r0, #0
    5008:	4cb0      	ldr	r4, [pc, #704]	; (52cc <main+0x3e8>)
    500a:	47a0      	blx	r4
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    500c:	2300      	movs	r3, #0
    500e:	2201      	movs	r2, #1
    5010:	2105      	movs	r1, #5
    5012:	2000      	movs	r0, #0
    5014:	4cad      	ldr	r4, [pc, #692]	; (52cc <main+0x3e8>)
    5016:	47a0      	blx	r4
			update_all_ports();
    5018:	4ba3      	ldr	r3, [pc, #652]	; (52a8 <main+0x3c4>)
    501a:	4798      	blx	r3
			delay_ms(300);
    501c:	2000      	movs	r0, #0
    501e:	4b94      	ldr	r3, [pc, #592]	; (5270 <main+0x38c>)
    5020:	4798      	blx	r3
    5022:	0003      	movs	r3, r0
    5024:	62bb      	str	r3, [r7, #40]	; 0x28
    5026:	2300      	movs	r3, #0
    5028:	62fb      	str	r3, [r7, #44]	; 0x2c
    502a:	4c92      	ldr	r4, [pc, #584]	; (5274 <main+0x390>)
    502c:	2296      	movs	r2, #150	; 0x96
    502e:	0052      	lsls	r2, r2, #1
    5030:	2300      	movs	r3, #0
    5032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5034:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    5036:	47a0      	blx	r4
    5038:	0003      	movs	r3, r0
    503a:	000c      	movs	r4, r1
    503c:	0019      	movs	r1, r3
    503e:	0022      	movs	r2, r4
    5040:	4b8d      	ldr	r3, [pc, #564]	; (5278 <main+0x394>)
    5042:	2400      	movs	r4, #0
    5044:	18c9      	adds	r1, r1, r3
    5046:	4162      	adcs	r2, r4
    5048:	0008      	movs	r0, r1
    504a:	0011      	movs	r1, r2
    504c:	4c8b      	ldr	r4, [pc, #556]	; (527c <main+0x398>)
    504e:	4a8c      	ldr	r2, [pc, #560]	; (5280 <main+0x39c>)
    5050:	2300      	movs	r3, #0
    5052:	47a0      	blx	r4
    5054:	0003      	movs	r3, r0
    5056:	000c      	movs	r4, r1
    5058:	0018      	movs	r0, r3
    505a:	4b8a      	ldr	r3, [pc, #552]	; (5284 <main+0x3a0>)
    505c:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    505e:	2300      	movs	r3, #0
    5060:	2200      	movs	r2, #0
    5062:	2105      	movs	r1, #5
    5064:	2000      	movs	r0, #0
    5066:	4c99      	ldr	r4, [pc, #612]	; (52cc <main+0x3e8>)
    5068:	47a0      	blx	r4
			update_all_ports();
    506a:	4b8f      	ldr	r3, [pc, #572]	; (52a8 <main+0x3c4>)
    506c:	4798      	blx	r3
			delay_ms(4000);
    506e:	2000      	movs	r0, #0
    5070:	4b7f      	ldr	r3, [pc, #508]	; (5270 <main+0x38c>)
    5072:	4798      	blx	r3
    5074:	0003      	movs	r3, r0
    5076:	623b      	str	r3, [r7, #32]
    5078:	2300      	movs	r3, #0
    507a:	627b      	str	r3, [r7, #36]	; 0x24
    507c:	4c7d      	ldr	r4, [pc, #500]	; (5274 <main+0x390>)
    507e:	22fa      	movs	r2, #250	; 0xfa
    5080:	0112      	lsls	r2, r2, #4
    5082:	2300      	movs	r3, #0
    5084:	6a38      	ldr	r0, [r7, #32]
    5086:	6a79      	ldr	r1, [r7, #36]	; 0x24
    5088:	47a0      	blx	r4
    508a:	0003      	movs	r3, r0
    508c:	000c      	movs	r4, r1
    508e:	0019      	movs	r1, r3
    5090:	0022      	movs	r2, r4
    5092:	4b79      	ldr	r3, [pc, #484]	; (5278 <main+0x394>)
    5094:	2400      	movs	r4, #0
    5096:	18c9      	adds	r1, r1, r3
    5098:	4162      	adcs	r2, r4
    509a:	0008      	movs	r0, r1
    509c:	0011      	movs	r1, r2
    509e:	4c77      	ldr	r4, [pc, #476]	; (527c <main+0x398>)
    50a0:	4a77      	ldr	r2, [pc, #476]	; (5280 <main+0x39c>)
    50a2:	2300      	movs	r3, #0
    50a4:	47a0      	blx	r4
    50a6:	0003      	movs	r3, r0
    50a8:	000c      	movs	r4, r1
    50aa:	0018      	movs	r0, r3
    50ac:	4b75      	ldr	r3, [pc, #468]	; (5284 <main+0x3a0>)
    50ae:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,true);
    50b0:	2301      	movs	r3, #1
    50b2:	2200      	movs	r2, #0
    50b4:	2105      	movs	r1, #5
    50b6:	2000      	movs	r0, #0
    50b8:	4c84      	ldr	r4, [pc, #528]	; (52cc <main+0x3e8>)
    50ba:	47a0      	blx	r4
			update_all_ports();
    50bc:	4b7a      	ldr	r3, [pc, #488]	; (52a8 <main+0x3c4>)
    50be:	4798      	blx	r3
			delay_ms(300);
    50c0:	2000      	movs	r0, #0
    50c2:	4b6b      	ldr	r3, [pc, #428]	; (5270 <main+0x38c>)
    50c4:	4798      	blx	r3
    50c6:	0003      	movs	r3, r0
    50c8:	61bb      	str	r3, [r7, #24]
    50ca:	2300      	movs	r3, #0
    50cc:	61fb      	str	r3, [r7, #28]
    50ce:	4c69      	ldr	r4, [pc, #420]	; (5274 <main+0x390>)
    50d0:	2296      	movs	r2, #150	; 0x96
    50d2:	0052      	lsls	r2, r2, #1
    50d4:	2300      	movs	r3, #0
    50d6:	69b8      	ldr	r0, [r7, #24]
    50d8:	69f9      	ldr	r1, [r7, #28]
    50da:	47a0      	blx	r4
    50dc:	0003      	movs	r3, r0
    50de:	000c      	movs	r4, r1
    50e0:	0019      	movs	r1, r3
    50e2:	0022      	movs	r2, r4
    50e4:	4b64      	ldr	r3, [pc, #400]	; (5278 <main+0x394>)
    50e6:	2400      	movs	r4, #0
    50e8:	18c9      	adds	r1, r1, r3
    50ea:	4162      	adcs	r2, r4
    50ec:	0008      	movs	r0, r1
    50ee:	0011      	movs	r1, r2
    50f0:	4c62      	ldr	r4, [pc, #392]	; (527c <main+0x398>)
    50f2:	4a63      	ldr	r2, [pc, #396]	; (5280 <main+0x39c>)
    50f4:	2300      	movs	r3, #0
    50f6:	47a0      	blx	r4
    50f8:	0003      	movs	r3, r0
    50fa:	000c      	movs	r4, r1
    50fc:	0018      	movs	r0, r3
    50fe:	4b61      	ldr	r3, [pc, #388]	; (5284 <main+0x3a0>)
    5100:	4798      	blx	r3
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    5102:	2300      	movs	r3, #0
    5104:	2200      	movs	r2, #0
    5106:	2105      	movs	r1, #5
    5108:	2000      	movs	r0, #0
    510a:	4c70      	ldr	r4, [pc, #448]	; (52cc <main+0x3e8>)
    510c:	47a0      	blx	r4
			update_all_ports();
    510e:	4b66      	ldr	r3, [pc, #408]	; (52a8 <main+0x3c4>)
    5110:	4798      	blx	r3
			system_interrupt_enable_global();
    5112:	4b6c      	ldr	r3, [pc, #432]	; (52c4 <main+0x3e0>)
    5114:	4798      	blx	r3
		}
		if (valve_close)
    5116:	4b6e      	ldr	r3, [pc, #440]	; (52d0 <main+0x3ec>)
    5118:	781b      	ldrb	r3, [r3, #0]
    511a:	b2db      	uxtb	r3, r3
    511c:	2b00      	cmp	r3, #0
    511e:	d100      	bne.n	5122 <main+0x23e>
    5120:	e08f      	b.n	5242 <main+0x35e>
		{
			system_interrupt_disable_global();
    5122:	4b63      	ldr	r3, [pc, #396]	; (52b0 <main+0x3cc>)
    5124:	4798      	blx	r3
			valve_close = false;
    5126:	4a6a      	ldr	r2, [pc, #424]	; (52d0 <main+0x3ec>)
    5128:	2300      	movs	r3, #0
    512a:	7013      	strb	r3, [r2, #0]
			configure_pin(VALVE_OPEN_PORT,VALVE_OPEN_ADR,VALVE_OPEN_PIN,false);
    512c:	2300      	movs	r3, #0
    512e:	2200      	movs	r2, #0
    5130:	2105      	movs	r1, #5
    5132:	2000      	movs	r0, #0
    5134:	4c65      	ldr	r4, [pc, #404]	; (52cc <main+0x3e8>)
    5136:	47a0      	blx	r4
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,true);
    5138:	2301      	movs	r3, #1
    513a:	2201      	movs	r2, #1
    513c:	2105      	movs	r1, #5
    513e:	2000      	movs	r0, #0
    5140:	4c62      	ldr	r4, [pc, #392]	; (52cc <main+0x3e8>)
    5142:	47a0      	blx	r4
			update_all_ports();
    5144:	4b58      	ldr	r3, [pc, #352]	; (52a8 <main+0x3c4>)
    5146:	4798      	blx	r3
			delay_ms(300);
    5148:	2000      	movs	r0, #0
    514a:	4b49      	ldr	r3, [pc, #292]	; (5270 <main+0x38c>)
    514c:	4798      	blx	r3
    514e:	0003      	movs	r3, r0
    5150:	613b      	str	r3, [r7, #16]
    5152:	2300      	movs	r3, #0
    5154:	617b      	str	r3, [r7, #20]
    5156:	4c47      	ldr	r4, [pc, #284]	; (5274 <main+0x390>)
    5158:	2296      	movs	r2, #150	; 0x96
    515a:	0052      	lsls	r2, r2, #1
    515c:	2300      	movs	r3, #0
    515e:	6938      	ldr	r0, [r7, #16]
    5160:	6979      	ldr	r1, [r7, #20]
    5162:	47a0      	blx	r4
    5164:	0003      	movs	r3, r0
    5166:	000c      	movs	r4, r1
    5168:	0019      	movs	r1, r3
    516a:	0022      	movs	r2, r4
    516c:	4b42      	ldr	r3, [pc, #264]	; (5278 <main+0x394>)
    516e:	2400      	movs	r4, #0
    5170:	18c9      	adds	r1, r1, r3
    5172:	4162      	adcs	r2, r4
    5174:	0008      	movs	r0, r1
    5176:	0011      	movs	r1, r2
    5178:	4c40      	ldr	r4, [pc, #256]	; (527c <main+0x398>)
    517a:	4a41      	ldr	r2, [pc, #260]	; (5280 <main+0x39c>)
    517c:	2300      	movs	r3, #0
    517e:	47a0      	blx	r4
    5180:	0003      	movs	r3, r0
    5182:	000c      	movs	r4, r1
    5184:	0018      	movs	r0, r3
    5186:	4b3f      	ldr	r3, [pc, #252]	; (5284 <main+0x3a0>)
    5188:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    518a:	2300      	movs	r3, #0
    518c:	2201      	movs	r2, #1
    518e:	2105      	movs	r1, #5
    5190:	2000      	movs	r0, #0
    5192:	4c4e      	ldr	r4, [pc, #312]	; (52cc <main+0x3e8>)
    5194:	47a0      	blx	r4
			update_all_ports();
    5196:	4b44      	ldr	r3, [pc, #272]	; (52a8 <main+0x3c4>)
    5198:	4798      	blx	r3
			delay_ms(4000);
    519a:	2000      	movs	r0, #0
    519c:	4b34      	ldr	r3, [pc, #208]	; (5270 <main+0x38c>)
    519e:	4798      	blx	r3
    51a0:	0003      	movs	r3, r0
    51a2:	60bb      	str	r3, [r7, #8]
    51a4:	2300      	movs	r3, #0
    51a6:	60fb      	str	r3, [r7, #12]
    51a8:	4c32      	ldr	r4, [pc, #200]	; (5274 <main+0x390>)
    51aa:	22fa      	movs	r2, #250	; 0xfa
    51ac:	0112      	lsls	r2, r2, #4
    51ae:	2300      	movs	r3, #0
    51b0:	68b8      	ldr	r0, [r7, #8]
    51b2:	68f9      	ldr	r1, [r7, #12]
    51b4:	47a0      	blx	r4
    51b6:	0003      	movs	r3, r0
    51b8:	000c      	movs	r4, r1
    51ba:	0019      	movs	r1, r3
    51bc:	0022      	movs	r2, r4
    51be:	4b2e      	ldr	r3, [pc, #184]	; (5278 <main+0x394>)
    51c0:	2400      	movs	r4, #0
    51c2:	18c9      	adds	r1, r1, r3
    51c4:	4162      	adcs	r2, r4
    51c6:	0008      	movs	r0, r1
    51c8:	0011      	movs	r1, r2
    51ca:	4c2c      	ldr	r4, [pc, #176]	; (527c <main+0x398>)
    51cc:	4a2c      	ldr	r2, [pc, #176]	; (5280 <main+0x39c>)
    51ce:	2300      	movs	r3, #0
    51d0:	47a0      	blx	r4
    51d2:	0003      	movs	r3, r0
    51d4:	000c      	movs	r4, r1
    51d6:	0018      	movs	r0, r3
    51d8:	4b2a      	ldr	r3, [pc, #168]	; (5284 <main+0x3a0>)
    51da:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,true);
    51dc:	2301      	movs	r3, #1
    51de:	2201      	movs	r2, #1
    51e0:	2105      	movs	r1, #5
    51e2:	2000      	movs	r0, #0
    51e4:	4c39      	ldr	r4, [pc, #228]	; (52cc <main+0x3e8>)
    51e6:	47a0      	blx	r4
			update_all_ports();
    51e8:	4b2f      	ldr	r3, [pc, #188]	; (52a8 <main+0x3c4>)
    51ea:	4798      	blx	r3
			delay_ms(300);
    51ec:	2000      	movs	r0, #0
    51ee:	4b20      	ldr	r3, [pc, #128]	; (5270 <main+0x38c>)
    51f0:	4798      	blx	r3
    51f2:	0003      	movs	r3, r0
    51f4:	603b      	str	r3, [r7, #0]
    51f6:	2300      	movs	r3, #0
    51f8:	607b      	str	r3, [r7, #4]
    51fa:	4c1e      	ldr	r4, [pc, #120]	; (5274 <main+0x390>)
    51fc:	2296      	movs	r2, #150	; 0x96
    51fe:	0052      	lsls	r2, r2, #1
    5200:	2300      	movs	r3, #0
    5202:	6838      	ldr	r0, [r7, #0]
    5204:	6879      	ldr	r1, [r7, #4]
    5206:	47a0      	blx	r4
    5208:	0003      	movs	r3, r0
    520a:	000c      	movs	r4, r1
    520c:	0019      	movs	r1, r3
    520e:	0022      	movs	r2, r4
    5210:	4b19      	ldr	r3, [pc, #100]	; (5278 <main+0x394>)
    5212:	2400      	movs	r4, #0
    5214:	18c9      	adds	r1, r1, r3
    5216:	4162      	adcs	r2, r4
    5218:	0008      	movs	r0, r1
    521a:	0011      	movs	r1, r2
    521c:	4c17      	ldr	r4, [pc, #92]	; (527c <main+0x398>)
    521e:	4a18      	ldr	r2, [pc, #96]	; (5280 <main+0x39c>)
    5220:	2300      	movs	r3, #0
    5222:	47a0      	blx	r4
    5224:	0003      	movs	r3, r0
    5226:	000c      	movs	r4, r1
    5228:	0018      	movs	r0, r3
    522a:	4b16      	ldr	r3, [pc, #88]	; (5284 <main+0x3a0>)
    522c:	4798      	blx	r3
			configure_pin(VALVE_CLOSE_PORT,VALVE_CLOSE_ADR,VALVE_CLOSE_PIN,false);
    522e:	2300      	movs	r3, #0
    5230:	2201      	movs	r2, #1
    5232:	2105      	movs	r1, #5
    5234:	2000      	movs	r0, #0
    5236:	4c25      	ldr	r4, [pc, #148]	; (52cc <main+0x3e8>)
    5238:	47a0      	blx	r4
			update_all_ports();
    523a:	4b1b      	ldr	r3, [pc, #108]	; (52a8 <main+0x3c4>)
    523c:	4798      	blx	r3
			system_interrupt_enable_global();
    523e:	4b21      	ldr	r3, [pc, #132]	; (52c4 <main+0x3e0>)
    5240:	4798      	blx	r3
		}
		
		if (should_check)
    5242:	4b24      	ldr	r3, [pc, #144]	; (52d4 <main+0x3f0>)
    5244:	781b      	ldrb	r3, [r3, #0]
    5246:	2b00      	cmp	r3, #0
    5248:	d100      	bne.n	524c <main+0x368>
    524a:	e67d      	b.n	4f48 <main+0x64>
		{
			should_check = false;
    524c:	4a21      	ldr	r2, [pc, #132]	; (52d4 <main+0x3f0>)
    524e:	2300      	movs	r3, #0
    5250:	7013      	strb	r3, [r2, #0]
			mcp23017_check_all();
    5252:	4b21      	ldr	r3, [pc, #132]	; (52d8 <main+0x3f4>)
    5254:	4798      	blx	r3
		}
	}
    5256:	e677      	b.n	4f48 <main+0x64>
    5258:	00004d29 	.word	0x00004d29
    525c:	00000181 	.word	0x00000181
    5260:	0000405d 	.word	0x0000405d
    5264:	00003f11 	.word	0x00003f11
    5268:	00003a09 	.word	0x00003a09
    526c:	00003b19 	.word	0x00003b19
    5270:	000048c9 	.word	0x000048c9
    5274:	00005609 	.word	0x00005609
    5278:	00001b57 	.word	0x00001b57
    527c:	000055c9 	.word	0x000055c9
    5280:	00001b58 	.word	0x00001b58
    5284:	20000001 	.word	0x20000001
    5288:	20000350 	.word	0x20000350
    528c:	00000ef1 	.word	0x00000ef1
    5290:	00000e79 	.word	0x00000e79
    5294:	000003fe 	.word	0x000003fe
    5298:	200007fc 	.word	0x200007fc
    529c:	00003c5d 	.word	0x00003c5d
    52a0:	20000bfc 	.word	0x20000bfc
    52a4:	00003811 	.word	0x00003811
    52a8:	000020c9 	.word	0x000020c9
    52ac:	200007f8 	.word	0x200007f8
    52b0:	00004ec9 	.word	0x00004ec9
    52b4:	00006fe4 	.word	0x00006fe4
    52b8:	00000dbd 	.word	0x00000dbd
    52bc:	00003265 	.word	0x00003265
    52c0:	00002a3d 	.word	0x00002a3d
    52c4:	00004ead 	.word	0x00004ead
    52c8:	2000033b 	.word	0x2000033b
    52cc:	00002c75 	.word	0x00002c75
    52d0:	20000338 	.word	0x20000338
    52d4:	20000c0c 	.word	0x20000c0c
    52d8:	00002d31 	.word	0x00002d31

000052dc <__aeabi_uidiv>:
    52dc:	2200      	movs	r2, #0
    52de:	0843      	lsrs	r3, r0, #1
    52e0:	428b      	cmp	r3, r1
    52e2:	d374      	bcc.n	53ce <__aeabi_uidiv+0xf2>
    52e4:	0903      	lsrs	r3, r0, #4
    52e6:	428b      	cmp	r3, r1
    52e8:	d35f      	bcc.n	53aa <__aeabi_uidiv+0xce>
    52ea:	0a03      	lsrs	r3, r0, #8
    52ec:	428b      	cmp	r3, r1
    52ee:	d344      	bcc.n	537a <__aeabi_uidiv+0x9e>
    52f0:	0b03      	lsrs	r3, r0, #12
    52f2:	428b      	cmp	r3, r1
    52f4:	d328      	bcc.n	5348 <__aeabi_uidiv+0x6c>
    52f6:	0c03      	lsrs	r3, r0, #16
    52f8:	428b      	cmp	r3, r1
    52fa:	d30d      	bcc.n	5318 <__aeabi_uidiv+0x3c>
    52fc:	22ff      	movs	r2, #255	; 0xff
    52fe:	0209      	lsls	r1, r1, #8
    5300:	ba12      	rev	r2, r2
    5302:	0c03      	lsrs	r3, r0, #16
    5304:	428b      	cmp	r3, r1
    5306:	d302      	bcc.n	530e <__aeabi_uidiv+0x32>
    5308:	1212      	asrs	r2, r2, #8
    530a:	0209      	lsls	r1, r1, #8
    530c:	d065      	beq.n	53da <__aeabi_uidiv+0xfe>
    530e:	0b03      	lsrs	r3, r0, #12
    5310:	428b      	cmp	r3, r1
    5312:	d319      	bcc.n	5348 <__aeabi_uidiv+0x6c>
    5314:	e000      	b.n	5318 <__aeabi_uidiv+0x3c>
    5316:	0a09      	lsrs	r1, r1, #8
    5318:	0bc3      	lsrs	r3, r0, #15
    531a:	428b      	cmp	r3, r1
    531c:	d301      	bcc.n	5322 <__aeabi_uidiv+0x46>
    531e:	03cb      	lsls	r3, r1, #15
    5320:	1ac0      	subs	r0, r0, r3
    5322:	4152      	adcs	r2, r2
    5324:	0b83      	lsrs	r3, r0, #14
    5326:	428b      	cmp	r3, r1
    5328:	d301      	bcc.n	532e <__aeabi_uidiv+0x52>
    532a:	038b      	lsls	r3, r1, #14
    532c:	1ac0      	subs	r0, r0, r3
    532e:	4152      	adcs	r2, r2
    5330:	0b43      	lsrs	r3, r0, #13
    5332:	428b      	cmp	r3, r1
    5334:	d301      	bcc.n	533a <__aeabi_uidiv+0x5e>
    5336:	034b      	lsls	r3, r1, #13
    5338:	1ac0      	subs	r0, r0, r3
    533a:	4152      	adcs	r2, r2
    533c:	0b03      	lsrs	r3, r0, #12
    533e:	428b      	cmp	r3, r1
    5340:	d301      	bcc.n	5346 <__aeabi_uidiv+0x6a>
    5342:	030b      	lsls	r3, r1, #12
    5344:	1ac0      	subs	r0, r0, r3
    5346:	4152      	adcs	r2, r2
    5348:	0ac3      	lsrs	r3, r0, #11
    534a:	428b      	cmp	r3, r1
    534c:	d301      	bcc.n	5352 <__aeabi_uidiv+0x76>
    534e:	02cb      	lsls	r3, r1, #11
    5350:	1ac0      	subs	r0, r0, r3
    5352:	4152      	adcs	r2, r2
    5354:	0a83      	lsrs	r3, r0, #10
    5356:	428b      	cmp	r3, r1
    5358:	d301      	bcc.n	535e <__aeabi_uidiv+0x82>
    535a:	028b      	lsls	r3, r1, #10
    535c:	1ac0      	subs	r0, r0, r3
    535e:	4152      	adcs	r2, r2
    5360:	0a43      	lsrs	r3, r0, #9
    5362:	428b      	cmp	r3, r1
    5364:	d301      	bcc.n	536a <__aeabi_uidiv+0x8e>
    5366:	024b      	lsls	r3, r1, #9
    5368:	1ac0      	subs	r0, r0, r3
    536a:	4152      	adcs	r2, r2
    536c:	0a03      	lsrs	r3, r0, #8
    536e:	428b      	cmp	r3, r1
    5370:	d301      	bcc.n	5376 <__aeabi_uidiv+0x9a>
    5372:	020b      	lsls	r3, r1, #8
    5374:	1ac0      	subs	r0, r0, r3
    5376:	4152      	adcs	r2, r2
    5378:	d2cd      	bcs.n	5316 <__aeabi_uidiv+0x3a>
    537a:	09c3      	lsrs	r3, r0, #7
    537c:	428b      	cmp	r3, r1
    537e:	d301      	bcc.n	5384 <__aeabi_uidiv+0xa8>
    5380:	01cb      	lsls	r3, r1, #7
    5382:	1ac0      	subs	r0, r0, r3
    5384:	4152      	adcs	r2, r2
    5386:	0983      	lsrs	r3, r0, #6
    5388:	428b      	cmp	r3, r1
    538a:	d301      	bcc.n	5390 <__aeabi_uidiv+0xb4>
    538c:	018b      	lsls	r3, r1, #6
    538e:	1ac0      	subs	r0, r0, r3
    5390:	4152      	adcs	r2, r2
    5392:	0943      	lsrs	r3, r0, #5
    5394:	428b      	cmp	r3, r1
    5396:	d301      	bcc.n	539c <__aeabi_uidiv+0xc0>
    5398:	014b      	lsls	r3, r1, #5
    539a:	1ac0      	subs	r0, r0, r3
    539c:	4152      	adcs	r2, r2
    539e:	0903      	lsrs	r3, r0, #4
    53a0:	428b      	cmp	r3, r1
    53a2:	d301      	bcc.n	53a8 <__aeabi_uidiv+0xcc>
    53a4:	010b      	lsls	r3, r1, #4
    53a6:	1ac0      	subs	r0, r0, r3
    53a8:	4152      	adcs	r2, r2
    53aa:	08c3      	lsrs	r3, r0, #3
    53ac:	428b      	cmp	r3, r1
    53ae:	d301      	bcc.n	53b4 <__aeabi_uidiv+0xd8>
    53b0:	00cb      	lsls	r3, r1, #3
    53b2:	1ac0      	subs	r0, r0, r3
    53b4:	4152      	adcs	r2, r2
    53b6:	0883      	lsrs	r3, r0, #2
    53b8:	428b      	cmp	r3, r1
    53ba:	d301      	bcc.n	53c0 <__aeabi_uidiv+0xe4>
    53bc:	008b      	lsls	r3, r1, #2
    53be:	1ac0      	subs	r0, r0, r3
    53c0:	4152      	adcs	r2, r2
    53c2:	0843      	lsrs	r3, r0, #1
    53c4:	428b      	cmp	r3, r1
    53c6:	d301      	bcc.n	53cc <__aeabi_uidiv+0xf0>
    53c8:	004b      	lsls	r3, r1, #1
    53ca:	1ac0      	subs	r0, r0, r3
    53cc:	4152      	adcs	r2, r2
    53ce:	1a41      	subs	r1, r0, r1
    53d0:	d200      	bcs.n	53d4 <__aeabi_uidiv+0xf8>
    53d2:	4601      	mov	r1, r0
    53d4:	4152      	adcs	r2, r2
    53d6:	4610      	mov	r0, r2
    53d8:	4770      	bx	lr
    53da:	e7ff      	b.n	53dc <__aeabi_uidiv+0x100>
    53dc:	b501      	push	{r0, lr}
    53de:	2000      	movs	r0, #0
    53e0:	f000 f8f0 	bl	55c4 <__aeabi_idiv0>
    53e4:	bd02      	pop	{r1, pc}
    53e6:	46c0      	nop			; (mov r8, r8)

000053e8 <__aeabi_uidivmod>:
    53e8:	2900      	cmp	r1, #0
    53ea:	d0f7      	beq.n	53dc <__aeabi_uidiv+0x100>
    53ec:	e776      	b.n	52dc <__aeabi_uidiv>
    53ee:	4770      	bx	lr

000053f0 <__aeabi_idiv>:
    53f0:	4603      	mov	r3, r0
    53f2:	430b      	orrs	r3, r1
    53f4:	d47f      	bmi.n	54f6 <__aeabi_idiv+0x106>
    53f6:	2200      	movs	r2, #0
    53f8:	0843      	lsrs	r3, r0, #1
    53fa:	428b      	cmp	r3, r1
    53fc:	d374      	bcc.n	54e8 <__aeabi_idiv+0xf8>
    53fe:	0903      	lsrs	r3, r0, #4
    5400:	428b      	cmp	r3, r1
    5402:	d35f      	bcc.n	54c4 <__aeabi_idiv+0xd4>
    5404:	0a03      	lsrs	r3, r0, #8
    5406:	428b      	cmp	r3, r1
    5408:	d344      	bcc.n	5494 <__aeabi_idiv+0xa4>
    540a:	0b03      	lsrs	r3, r0, #12
    540c:	428b      	cmp	r3, r1
    540e:	d328      	bcc.n	5462 <__aeabi_idiv+0x72>
    5410:	0c03      	lsrs	r3, r0, #16
    5412:	428b      	cmp	r3, r1
    5414:	d30d      	bcc.n	5432 <__aeabi_idiv+0x42>
    5416:	22ff      	movs	r2, #255	; 0xff
    5418:	0209      	lsls	r1, r1, #8
    541a:	ba12      	rev	r2, r2
    541c:	0c03      	lsrs	r3, r0, #16
    541e:	428b      	cmp	r3, r1
    5420:	d302      	bcc.n	5428 <__aeabi_idiv+0x38>
    5422:	1212      	asrs	r2, r2, #8
    5424:	0209      	lsls	r1, r1, #8
    5426:	d065      	beq.n	54f4 <__aeabi_idiv+0x104>
    5428:	0b03      	lsrs	r3, r0, #12
    542a:	428b      	cmp	r3, r1
    542c:	d319      	bcc.n	5462 <__aeabi_idiv+0x72>
    542e:	e000      	b.n	5432 <__aeabi_idiv+0x42>
    5430:	0a09      	lsrs	r1, r1, #8
    5432:	0bc3      	lsrs	r3, r0, #15
    5434:	428b      	cmp	r3, r1
    5436:	d301      	bcc.n	543c <__aeabi_idiv+0x4c>
    5438:	03cb      	lsls	r3, r1, #15
    543a:	1ac0      	subs	r0, r0, r3
    543c:	4152      	adcs	r2, r2
    543e:	0b83      	lsrs	r3, r0, #14
    5440:	428b      	cmp	r3, r1
    5442:	d301      	bcc.n	5448 <__aeabi_idiv+0x58>
    5444:	038b      	lsls	r3, r1, #14
    5446:	1ac0      	subs	r0, r0, r3
    5448:	4152      	adcs	r2, r2
    544a:	0b43      	lsrs	r3, r0, #13
    544c:	428b      	cmp	r3, r1
    544e:	d301      	bcc.n	5454 <__aeabi_idiv+0x64>
    5450:	034b      	lsls	r3, r1, #13
    5452:	1ac0      	subs	r0, r0, r3
    5454:	4152      	adcs	r2, r2
    5456:	0b03      	lsrs	r3, r0, #12
    5458:	428b      	cmp	r3, r1
    545a:	d301      	bcc.n	5460 <__aeabi_idiv+0x70>
    545c:	030b      	lsls	r3, r1, #12
    545e:	1ac0      	subs	r0, r0, r3
    5460:	4152      	adcs	r2, r2
    5462:	0ac3      	lsrs	r3, r0, #11
    5464:	428b      	cmp	r3, r1
    5466:	d301      	bcc.n	546c <__aeabi_idiv+0x7c>
    5468:	02cb      	lsls	r3, r1, #11
    546a:	1ac0      	subs	r0, r0, r3
    546c:	4152      	adcs	r2, r2
    546e:	0a83      	lsrs	r3, r0, #10
    5470:	428b      	cmp	r3, r1
    5472:	d301      	bcc.n	5478 <__aeabi_idiv+0x88>
    5474:	028b      	lsls	r3, r1, #10
    5476:	1ac0      	subs	r0, r0, r3
    5478:	4152      	adcs	r2, r2
    547a:	0a43      	lsrs	r3, r0, #9
    547c:	428b      	cmp	r3, r1
    547e:	d301      	bcc.n	5484 <__aeabi_idiv+0x94>
    5480:	024b      	lsls	r3, r1, #9
    5482:	1ac0      	subs	r0, r0, r3
    5484:	4152      	adcs	r2, r2
    5486:	0a03      	lsrs	r3, r0, #8
    5488:	428b      	cmp	r3, r1
    548a:	d301      	bcc.n	5490 <__aeabi_idiv+0xa0>
    548c:	020b      	lsls	r3, r1, #8
    548e:	1ac0      	subs	r0, r0, r3
    5490:	4152      	adcs	r2, r2
    5492:	d2cd      	bcs.n	5430 <__aeabi_idiv+0x40>
    5494:	09c3      	lsrs	r3, r0, #7
    5496:	428b      	cmp	r3, r1
    5498:	d301      	bcc.n	549e <__aeabi_idiv+0xae>
    549a:	01cb      	lsls	r3, r1, #7
    549c:	1ac0      	subs	r0, r0, r3
    549e:	4152      	adcs	r2, r2
    54a0:	0983      	lsrs	r3, r0, #6
    54a2:	428b      	cmp	r3, r1
    54a4:	d301      	bcc.n	54aa <__aeabi_idiv+0xba>
    54a6:	018b      	lsls	r3, r1, #6
    54a8:	1ac0      	subs	r0, r0, r3
    54aa:	4152      	adcs	r2, r2
    54ac:	0943      	lsrs	r3, r0, #5
    54ae:	428b      	cmp	r3, r1
    54b0:	d301      	bcc.n	54b6 <__aeabi_idiv+0xc6>
    54b2:	014b      	lsls	r3, r1, #5
    54b4:	1ac0      	subs	r0, r0, r3
    54b6:	4152      	adcs	r2, r2
    54b8:	0903      	lsrs	r3, r0, #4
    54ba:	428b      	cmp	r3, r1
    54bc:	d301      	bcc.n	54c2 <__aeabi_idiv+0xd2>
    54be:	010b      	lsls	r3, r1, #4
    54c0:	1ac0      	subs	r0, r0, r3
    54c2:	4152      	adcs	r2, r2
    54c4:	08c3      	lsrs	r3, r0, #3
    54c6:	428b      	cmp	r3, r1
    54c8:	d301      	bcc.n	54ce <__aeabi_idiv+0xde>
    54ca:	00cb      	lsls	r3, r1, #3
    54cc:	1ac0      	subs	r0, r0, r3
    54ce:	4152      	adcs	r2, r2
    54d0:	0883      	lsrs	r3, r0, #2
    54d2:	428b      	cmp	r3, r1
    54d4:	d301      	bcc.n	54da <__aeabi_idiv+0xea>
    54d6:	008b      	lsls	r3, r1, #2
    54d8:	1ac0      	subs	r0, r0, r3
    54da:	4152      	adcs	r2, r2
    54dc:	0843      	lsrs	r3, r0, #1
    54de:	428b      	cmp	r3, r1
    54e0:	d301      	bcc.n	54e6 <__aeabi_idiv+0xf6>
    54e2:	004b      	lsls	r3, r1, #1
    54e4:	1ac0      	subs	r0, r0, r3
    54e6:	4152      	adcs	r2, r2
    54e8:	1a41      	subs	r1, r0, r1
    54ea:	d200      	bcs.n	54ee <__aeabi_idiv+0xfe>
    54ec:	4601      	mov	r1, r0
    54ee:	4152      	adcs	r2, r2
    54f0:	4610      	mov	r0, r2
    54f2:	4770      	bx	lr
    54f4:	e05d      	b.n	55b2 <__aeabi_idiv+0x1c2>
    54f6:	0fca      	lsrs	r2, r1, #31
    54f8:	d000      	beq.n	54fc <__aeabi_idiv+0x10c>
    54fa:	4249      	negs	r1, r1
    54fc:	1003      	asrs	r3, r0, #32
    54fe:	d300      	bcc.n	5502 <__aeabi_idiv+0x112>
    5500:	4240      	negs	r0, r0
    5502:	4053      	eors	r3, r2
    5504:	2200      	movs	r2, #0
    5506:	469c      	mov	ip, r3
    5508:	0903      	lsrs	r3, r0, #4
    550a:	428b      	cmp	r3, r1
    550c:	d32d      	bcc.n	556a <__aeabi_idiv+0x17a>
    550e:	0a03      	lsrs	r3, r0, #8
    5510:	428b      	cmp	r3, r1
    5512:	d312      	bcc.n	553a <__aeabi_idiv+0x14a>
    5514:	22fc      	movs	r2, #252	; 0xfc
    5516:	0189      	lsls	r1, r1, #6
    5518:	ba12      	rev	r2, r2
    551a:	0a03      	lsrs	r3, r0, #8
    551c:	428b      	cmp	r3, r1
    551e:	d30c      	bcc.n	553a <__aeabi_idiv+0x14a>
    5520:	0189      	lsls	r1, r1, #6
    5522:	1192      	asrs	r2, r2, #6
    5524:	428b      	cmp	r3, r1
    5526:	d308      	bcc.n	553a <__aeabi_idiv+0x14a>
    5528:	0189      	lsls	r1, r1, #6
    552a:	1192      	asrs	r2, r2, #6
    552c:	428b      	cmp	r3, r1
    552e:	d304      	bcc.n	553a <__aeabi_idiv+0x14a>
    5530:	0189      	lsls	r1, r1, #6
    5532:	d03a      	beq.n	55aa <__aeabi_idiv+0x1ba>
    5534:	1192      	asrs	r2, r2, #6
    5536:	e000      	b.n	553a <__aeabi_idiv+0x14a>
    5538:	0989      	lsrs	r1, r1, #6
    553a:	09c3      	lsrs	r3, r0, #7
    553c:	428b      	cmp	r3, r1
    553e:	d301      	bcc.n	5544 <__aeabi_idiv+0x154>
    5540:	01cb      	lsls	r3, r1, #7
    5542:	1ac0      	subs	r0, r0, r3
    5544:	4152      	adcs	r2, r2
    5546:	0983      	lsrs	r3, r0, #6
    5548:	428b      	cmp	r3, r1
    554a:	d301      	bcc.n	5550 <__aeabi_idiv+0x160>
    554c:	018b      	lsls	r3, r1, #6
    554e:	1ac0      	subs	r0, r0, r3
    5550:	4152      	adcs	r2, r2
    5552:	0943      	lsrs	r3, r0, #5
    5554:	428b      	cmp	r3, r1
    5556:	d301      	bcc.n	555c <__aeabi_idiv+0x16c>
    5558:	014b      	lsls	r3, r1, #5
    555a:	1ac0      	subs	r0, r0, r3
    555c:	4152      	adcs	r2, r2
    555e:	0903      	lsrs	r3, r0, #4
    5560:	428b      	cmp	r3, r1
    5562:	d301      	bcc.n	5568 <__aeabi_idiv+0x178>
    5564:	010b      	lsls	r3, r1, #4
    5566:	1ac0      	subs	r0, r0, r3
    5568:	4152      	adcs	r2, r2
    556a:	08c3      	lsrs	r3, r0, #3
    556c:	428b      	cmp	r3, r1
    556e:	d301      	bcc.n	5574 <__aeabi_idiv+0x184>
    5570:	00cb      	lsls	r3, r1, #3
    5572:	1ac0      	subs	r0, r0, r3
    5574:	4152      	adcs	r2, r2
    5576:	0883      	lsrs	r3, r0, #2
    5578:	428b      	cmp	r3, r1
    557a:	d301      	bcc.n	5580 <__aeabi_idiv+0x190>
    557c:	008b      	lsls	r3, r1, #2
    557e:	1ac0      	subs	r0, r0, r3
    5580:	4152      	adcs	r2, r2
    5582:	d2d9      	bcs.n	5538 <__aeabi_idiv+0x148>
    5584:	0843      	lsrs	r3, r0, #1
    5586:	428b      	cmp	r3, r1
    5588:	d301      	bcc.n	558e <__aeabi_idiv+0x19e>
    558a:	004b      	lsls	r3, r1, #1
    558c:	1ac0      	subs	r0, r0, r3
    558e:	4152      	adcs	r2, r2
    5590:	1a41      	subs	r1, r0, r1
    5592:	d200      	bcs.n	5596 <__aeabi_idiv+0x1a6>
    5594:	4601      	mov	r1, r0
    5596:	4663      	mov	r3, ip
    5598:	4152      	adcs	r2, r2
    559a:	105b      	asrs	r3, r3, #1
    559c:	4610      	mov	r0, r2
    559e:	d301      	bcc.n	55a4 <__aeabi_idiv+0x1b4>
    55a0:	4240      	negs	r0, r0
    55a2:	2b00      	cmp	r3, #0
    55a4:	d500      	bpl.n	55a8 <__aeabi_idiv+0x1b8>
    55a6:	4249      	negs	r1, r1
    55a8:	4770      	bx	lr
    55aa:	4663      	mov	r3, ip
    55ac:	105b      	asrs	r3, r3, #1
    55ae:	d300      	bcc.n	55b2 <__aeabi_idiv+0x1c2>
    55b0:	4240      	negs	r0, r0
    55b2:	b501      	push	{r0, lr}
    55b4:	2000      	movs	r0, #0
    55b6:	f000 f805 	bl	55c4 <__aeabi_idiv0>
    55ba:	bd02      	pop	{r1, pc}

000055bc <__aeabi_idivmod>:
    55bc:	2900      	cmp	r1, #0
    55be:	d0f8      	beq.n	55b2 <__aeabi_idiv+0x1c2>
    55c0:	e716      	b.n	53f0 <__aeabi_idiv>
    55c2:	4770      	bx	lr

000055c4 <__aeabi_idiv0>:
    55c4:	4770      	bx	lr
    55c6:	46c0      	nop			; (mov r8, r8)

000055c8 <__aeabi_uldivmod>:
    55c8:	2b00      	cmp	r3, #0
    55ca:	d111      	bne.n	55f0 <__aeabi_uldivmod+0x28>
    55cc:	2a00      	cmp	r2, #0
    55ce:	d10f      	bne.n	55f0 <__aeabi_uldivmod+0x28>
    55d0:	2900      	cmp	r1, #0
    55d2:	d100      	bne.n	55d6 <__aeabi_uldivmod+0xe>
    55d4:	2800      	cmp	r0, #0
    55d6:	d002      	beq.n	55de <__aeabi_uldivmod+0x16>
    55d8:	2100      	movs	r1, #0
    55da:	43c9      	mvns	r1, r1
    55dc:	1c08      	adds	r0, r1, #0
    55de:	b407      	push	{r0, r1, r2}
    55e0:	4802      	ldr	r0, [pc, #8]	; (55ec <__aeabi_uldivmod+0x24>)
    55e2:	a102      	add	r1, pc, #8	; (adr r1, 55ec <__aeabi_uldivmod+0x24>)
    55e4:	1840      	adds	r0, r0, r1
    55e6:	9002      	str	r0, [sp, #8]
    55e8:	bd03      	pop	{r0, r1, pc}
    55ea:	46c0      	nop			; (mov r8, r8)
    55ec:	ffffffd9 	.word	0xffffffd9
    55f0:	b403      	push	{r0, r1}
    55f2:	4668      	mov	r0, sp
    55f4:	b501      	push	{r0, lr}
    55f6:	9802      	ldr	r0, [sp, #8]
    55f8:	f000 f832 	bl	5660 <__udivmoddi4>
    55fc:	9b01      	ldr	r3, [sp, #4]
    55fe:	469e      	mov	lr, r3
    5600:	b002      	add	sp, #8
    5602:	bc0c      	pop	{r2, r3}
    5604:	4770      	bx	lr
    5606:	46c0      	nop			; (mov r8, r8)

00005608 <__aeabi_lmul>:
    5608:	b5f0      	push	{r4, r5, r6, r7, lr}
    560a:	464f      	mov	r7, r9
    560c:	4646      	mov	r6, r8
    560e:	b4c0      	push	{r6, r7}
    5610:	0416      	lsls	r6, r2, #16
    5612:	0c36      	lsrs	r6, r6, #16
    5614:	4699      	mov	r9, r3
    5616:	0033      	movs	r3, r6
    5618:	0405      	lsls	r5, r0, #16
    561a:	0c2c      	lsrs	r4, r5, #16
    561c:	0c07      	lsrs	r7, r0, #16
    561e:	0c15      	lsrs	r5, r2, #16
    5620:	4363      	muls	r3, r4
    5622:	437e      	muls	r6, r7
    5624:	436f      	muls	r7, r5
    5626:	4365      	muls	r5, r4
    5628:	0c1c      	lsrs	r4, r3, #16
    562a:	19ad      	adds	r5, r5, r6
    562c:	1964      	adds	r4, r4, r5
    562e:	469c      	mov	ip, r3
    5630:	42a6      	cmp	r6, r4
    5632:	d903      	bls.n	563c <__aeabi_lmul+0x34>
    5634:	2380      	movs	r3, #128	; 0x80
    5636:	025b      	lsls	r3, r3, #9
    5638:	4698      	mov	r8, r3
    563a:	4447      	add	r7, r8
    563c:	4663      	mov	r3, ip
    563e:	0c25      	lsrs	r5, r4, #16
    5640:	19ef      	adds	r7, r5, r7
    5642:	041d      	lsls	r5, r3, #16
    5644:	464b      	mov	r3, r9
    5646:	434a      	muls	r2, r1
    5648:	4343      	muls	r3, r0
    564a:	0c2d      	lsrs	r5, r5, #16
    564c:	0424      	lsls	r4, r4, #16
    564e:	1964      	adds	r4, r4, r5
    5650:	1899      	adds	r1, r3, r2
    5652:	19c9      	adds	r1, r1, r7
    5654:	0020      	movs	r0, r4
    5656:	bc0c      	pop	{r2, r3}
    5658:	4690      	mov	r8, r2
    565a:	4699      	mov	r9, r3
    565c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    565e:	46c0      	nop			; (mov r8, r8)

00005660 <__udivmoddi4>:
    5660:	b5f0      	push	{r4, r5, r6, r7, lr}
    5662:	464d      	mov	r5, r9
    5664:	4656      	mov	r6, sl
    5666:	4644      	mov	r4, r8
    5668:	465f      	mov	r7, fp
    566a:	b4f0      	push	{r4, r5, r6, r7}
    566c:	4692      	mov	sl, r2
    566e:	b083      	sub	sp, #12
    5670:	0004      	movs	r4, r0
    5672:	000d      	movs	r5, r1
    5674:	4699      	mov	r9, r3
    5676:	428b      	cmp	r3, r1
    5678:	d82f      	bhi.n	56da <__udivmoddi4+0x7a>
    567a:	d02c      	beq.n	56d6 <__udivmoddi4+0x76>
    567c:	4649      	mov	r1, r9
    567e:	4650      	mov	r0, sl
    5680:	f000 f8cc 	bl	581c <__clzdi2>
    5684:	0029      	movs	r1, r5
    5686:	0006      	movs	r6, r0
    5688:	0020      	movs	r0, r4
    568a:	f000 f8c7 	bl	581c <__clzdi2>
    568e:	1a33      	subs	r3, r6, r0
    5690:	4698      	mov	r8, r3
    5692:	3b20      	subs	r3, #32
    5694:	469b      	mov	fp, r3
    5696:	d500      	bpl.n	569a <__udivmoddi4+0x3a>
    5698:	e074      	b.n	5784 <__udivmoddi4+0x124>
    569a:	4653      	mov	r3, sl
    569c:	465a      	mov	r2, fp
    569e:	4093      	lsls	r3, r2
    56a0:	001f      	movs	r7, r3
    56a2:	4653      	mov	r3, sl
    56a4:	4642      	mov	r2, r8
    56a6:	4093      	lsls	r3, r2
    56a8:	001e      	movs	r6, r3
    56aa:	42af      	cmp	r7, r5
    56ac:	d829      	bhi.n	5702 <__udivmoddi4+0xa2>
    56ae:	d026      	beq.n	56fe <__udivmoddi4+0x9e>
    56b0:	465b      	mov	r3, fp
    56b2:	1ba4      	subs	r4, r4, r6
    56b4:	41bd      	sbcs	r5, r7
    56b6:	2b00      	cmp	r3, #0
    56b8:	da00      	bge.n	56bc <__udivmoddi4+0x5c>
    56ba:	e079      	b.n	57b0 <__udivmoddi4+0x150>
    56bc:	2200      	movs	r2, #0
    56be:	2300      	movs	r3, #0
    56c0:	9200      	str	r2, [sp, #0]
    56c2:	9301      	str	r3, [sp, #4]
    56c4:	2301      	movs	r3, #1
    56c6:	465a      	mov	r2, fp
    56c8:	4093      	lsls	r3, r2
    56ca:	9301      	str	r3, [sp, #4]
    56cc:	2301      	movs	r3, #1
    56ce:	4642      	mov	r2, r8
    56d0:	4093      	lsls	r3, r2
    56d2:	9300      	str	r3, [sp, #0]
    56d4:	e019      	b.n	570a <__udivmoddi4+0xaa>
    56d6:	4282      	cmp	r2, r0
    56d8:	d9d0      	bls.n	567c <__udivmoddi4+0x1c>
    56da:	2200      	movs	r2, #0
    56dc:	2300      	movs	r3, #0
    56de:	9200      	str	r2, [sp, #0]
    56e0:	9301      	str	r3, [sp, #4]
    56e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    56e4:	2b00      	cmp	r3, #0
    56e6:	d001      	beq.n	56ec <__udivmoddi4+0x8c>
    56e8:	601c      	str	r4, [r3, #0]
    56ea:	605d      	str	r5, [r3, #4]
    56ec:	9800      	ldr	r0, [sp, #0]
    56ee:	9901      	ldr	r1, [sp, #4]
    56f0:	b003      	add	sp, #12
    56f2:	bc3c      	pop	{r2, r3, r4, r5}
    56f4:	4690      	mov	r8, r2
    56f6:	4699      	mov	r9, r3
    56f8:	46a2      	mov	sl, r4
    56fa:	46ab      	mov	fp, r5
    56fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56fe:	42a3      	cmp	r3, r4
    5700:	d9d6      	bls.n	56b0 <__udivmoddi4+0x50>
    5702:	2200      	movs	r2, #0
    5704:	2300      	movs	r3, #0
    5706:	9200      	str	r2, [sp, #0]
    5708:	9301      	str	r3, [sp, #4]
    570a:	4643      	mov	r3, r8
    570c:	2b00      	cmp	r3, #0
    570e:	d0e8      	beq.n	56e2 <__udivmoddi4+0x82>
    5710:	07fb      	lsls	r3, r7, #31
    5712:	0872      	lsrs	r2, r6, #1
    5714:	431a      	orrs	r2, r3
    5716:	4646      	mov	r6, r8
    5718:	087b      	lsrs	r3, r7, #1
    571a:	e00e      	b.n	573a <__udivmoddi4+0xda>
    571c:	42ab      	cmp	r3, r5
    571e:	d101      	bne.n	5724 <__udivmoddi4+0xc4>
    5720:	42a2      	cmp	r2, r4
    5722:	d80c      	bhi.n	573e <__udivmoddi4+0xde>
    5724:	1aa4      	subs	r4, r4, r2
    5726:	419d      	sbcs	r5, r3
    5728:	2001      	movs	r0, #1
    572a:	1924      	adds	r4, r4, r4
    572c:	416d      	adcs	r5, r5
    572e:	2100      	movs	r1, #0
    5730:	3e01      	subs	r6, #1
    5732:	1824      	adds	r4, r4, r0
    5734:	414d      	adcs	r5, r1
    5736:	2e00      	cmp	r6, #0
    5738:	d006      	beq.n	5748 <__udivmoddi4+0xe8>
    573a:	42ab      	cmp	r3, r5
    573c:	d9ee      	bls.n	571c <__udivmoddi4+0xbc>
    573e:	3e01      	subs	r6, #1
    5740:	1924      	adds	r4, r4, r4
    5742:	416d      	adcs	r5, r5
    5744:	2e00      	cmp	r6, #0
    5746:	d1f8      	bne.n	573a <__udivmoddi4+0xda>
    5748:	465b      	mov	r3, fp
    574a:	9800      	ldr	r0, [sp, #0]
    574c:	9901      	ldr	r1, [sp, #4]
    574e:	1900      	adds	r0, r0, r4
    5750:	4169      	adcs	r1, r5
    5752:	2b00      	cmp	r3, #0
    5754:	db22      	blt.n	579c <__udivmoddi4+0x13c>
    5756:	002b      	movs	r3, r5
    5758:	465a      	mov	r2, fp
    575a:	40d3      	lsrs	r3, r2
    575c:	002a      	movs	r2, r5
    575e:	4644      	mov	r4, r8
    5760:	40e2      	lsrs	r2, r4
    5762:	001c      	movs	r4, r3
    5764:	465b      	mov	r3, fp
    5766:	0015      	movs	r5, r2
    5768:	2b00      	cmp	r3, #0
    576a:	db2c      	blt.n	57c6 <__udivmoddi4+0x166>
    576c:	0026      	movs	r6, r4
    576e:	409e      	lsls	r6, r3
    5770:	0033      	movs	r3, r6
    5772:	0026      	movs	r6, r4
    5774:	4647      	mov	r7, r8
    5776:	40be      	lsls	r6, r7
    5778:	0032      	movs	r2, r6
    577a:	1a80      	subs	r0, r0, r2
    577c:	4199      	sbcs	r1, r3
    577e:	9000      	str	r0, [sp, #0]
    5780:	9101      	str	r1, [sp, #4]
    5782:	e7ae      	b.n	56e2 <__udivmoddi4+0x82>
    5784:	4642      	mov	r2, r8
    5786:	2320      	movs	r3, #32
    5788:	1a9b      	subs	r3, r3, r2
    578a:	4652      	mov	r2, sl
    578c:	40da      	lsrs	r2, r3
    578e:	4641      	mov	r1, r8
    5790:	0013      	movs	r3, r2
    5792:	464a      	mov	r2, r9
    5794:	408a      	lsls	r2, r1
    5796:	0017      	movs	r7, r2
    5798:	431f      	orrs	r7, r3
    579a:	e782      	b.n	56a2 <__udivmoddi4+0x42>
    579c:	4642      	mov	r2, r8
    579e:	2320      	movs	r3, #32
    57a0:	1a9b      	subs	r3, r3, r2
    57a2:	002a      	movs	r2, r5
    57a4:	4646      	mov	r6, r8
    57a6:	409a      	lsls	r2, r3
    57a8:	0023      	movs	r3, r4
    57aa:	40f3      	lsrs	r3, r6
    57ac:	4313      	orrs	r3, r2
    57ae:	e7d5      	b.n	575c <__udivmoddi4+0xfc>
    57b0:	4642      	mov	r2, r8
    57b2:	2320      	movs	r3, #32
    57b4:	2100      	movs	r1, #0
    57b6:	1a9b      	subs	r3, r3, r2
    57b8:	2200      	movs	r2, #0
    57ba:	9100      	str	r1, [sp, #0]
    57bc:	9201      	str	r2, [sp, #4]
    57be:	2201      	movs	r2, #1
    57c0:	40da      	lsrs	r2, r3
    57c2:	9201      	str	r2, [sp, #4]
    57c4:	e782      	b.n	56cc <__udivmoddi4+0x6c>
    57c6:	4642      	mov	r2, r8
    57c8:	2320      	movs	r3, #32
    57ca:	0026      	movs	r6, r4
    57cc:	1a9b      	subs	r3, r3, r2
    57ce:	40de      	lsrs	r6, r3
    57d0:	002f      	movs	r7, r5
    57d2:	46b4      	mov	ip, r6
    57d4:	4097      	lsls	r7, r2
    57d6:	4666      	mov	r6, ip
    57d8:	003b      	movs	r3, r7
    57da:	4333      	orrs	r3, r6
    57dc:	e7c9      	b.n	5772 <__udivmoddi4+0x112>
    57de:	46c0      	nop			; (mov r8, r8)

000057e0 <__clzsi2>:
    57e0:	211c      	movs	r1, #28
    57e2:	2301      	movs	r3, #1
    57e4:	041b      	lsls	r3, r3, #16
    57e6:	4298      	cmp	r0, r3
    57e8:	d301      	bcc.n	57ee <__clzsi2+0xe>
    57ea:	0c00      	lsrs	r0, r0, #16
    57ec:	3910      	subs	r1, #16
    57ee:	0a1b      	lsrs	r3, r3, #8
    57f0:	4298      	cmp	r0, r3
    57f2:	d301      	bcc.n	57f8 <__clzsi2+0x18>
    57f4:	0a00      	lsrs	r0, r0, #8
    57f6:	3908      	subs	r1, #8
    57f8:	091b      	lsrs	r3, r3, #4
    57fa:	4298      	cmp	r0, r3
    57fc:	d301      	bcc.n	5802 <__clzsi2+0x22>
    57fe:	0900      	lsrs	r0, r0, #4
    5800:	3904      	subs	r1, #4
    5802:	a202      	add	r2, pc, #8	; (adr r2, 580c <__clzsi2+0x2c>)
    5804:	5c10      	ldrb	r0, [r2, r0]
    5806:	1840      	adds	r0, r0, r1
    5808:	4770      	bx	lr
    580a:	46c0      	nop			; (mov r8, r8)
    580c:	02020304 	.word	0x02020304
    5810:	01010101 	.word	0x01010101
	...

0000581c <__clzdi2>:
    581c:	b510      	push	{r4, lr}
    581e:	2900      	cmp	r1, #0
    5820:	d103      	bne.n	582a <__clzdi2+0xe>
    5822:	f7ff ffdd 	bl	57e0 <__clzsi2>
    5826:	3020      	adds	r0, #32
    5828:	e002      	b.n	5830 <__clzdi2+0x14>
    582a:	1c08      	adds	r0, r1, #0
    582c:	f7ff ffd8 	bl	57e0 <__clzsi2>
    5830:	bd10      	pop	{r4, pc}
    5832:	46c0      	nop			; (mov r8, r8)

00005834 <__libc_init_array>:
    5834:	4b0e      	ldr	r3, [pc, #56]	; (5870 <__libc_init_array+0x3c>)
    5836:	b570      	push	{r4, r5, r6, lr}
    5838:	2500      	movs	r5, #0
    583a:	001e      	movs	r6, r3
    583c:	4c0d      	ldr	r4, [pc, #52]	; (5874 <__libc_init_array+0x40>)
    583e:	1ae4      	subs	r4, r4, r3
    5840:	10a4      	asrs	r4, r4, #2
    5842:	42a5      	cmp	r5, r4
    5844:	d004      	beq.n	5850 <__libc_init_array+0x1c>
    5846:	00ab      	lsls	r3, r5, #2
    5848:	58f3      	ldr	r3, [r6, r3]
    584a:	4798      	blx	r3
    584c:	3501      	adds	r5, #1
    584e:	e7f8      	b.n	5842 <__libc_init_array+0xe>
    5850:	f001 fcae 	bl	71b0 <_init>
    5854:	4b08      	ldr	r3, [pc, #32]	; (5878 <__libc_init_array+0x44>)
    5856:	2500      	movs	r5, #0
    5858:	001e      	movs	r6, r3
    585a:	4c08      	ldr	r4, [pc, #32]	; (587c <__libc_init_array+0x48>)
    585c:	1ae4      	subs	r4, r4, r3
    585e:	10a4      	asrs	r4, r4, #2
    5860:	42a5      	cmp	r5, r4
    5862:	d004      	beq.n	586e <__libc_init_array+0x3a>
    5864:	00ab      	lsls	r3, r5, #2
    5866:	58f3      	ldr	r3, [r6, r3]
    5868:	4798      	blx	r3
    586a:	3501      	adds	r5, #1
    586c:	e7f8      	b.n	5860 <__libc_init_array+0x2c>
    586e:	bd70      	pop	{r4, r5, r6, pc}
    5870:	000071bc 	.word	0x000071bc
    5874:	000071bc 	.word	0x000071bc
    5878:	000071bc 	.word	0x000071bc
    587c:	000071c0 	.word	0x000071c0

00005880 <memcpy>:
    5880:	2300      	movs	r3, #0
    5882:	b510      	push	{r4, lr}
    5884:	429a      	cmp	r2, r3
    5886:	d003      	beq.n	5890 <memcpy+0x10>
    5888:	5ccc      	ldrb	r4, [r1, r3]
    588a:	54c4      	strb	r4, [r0, r3]
    588c:	3301      	adds	r3, #1
    588e:	e7f9      	b.n	5884 <memcpy+0x4>
    5890:	bd10      	pop	{r4, pc}
	...

00005894 <siprintf>:
    5894:	b40e      	push	{r1, r2, r3}
    5896:	b510      	push	{r4, lr}
    5898:	b09d      	sub	sp, #116	; 0x74
    589a:	a902      	add	r1, sp, #8
    589c:	9002      	str	r0, [sp, #8]
    589e:	6108      	str	r0, [r1, #16]
    58a0:	480b      	ldr	r0, [pc, #44]	; (58d0 <siprintf+0x3c>)
    58a2:	2482      	movs	r4, #130	; 0x82
    58a4:	6088      	str	r0, [r1, #8]
    58a6:	6148      	str	r0, [r1, #20]
    58a8:	2001      	movs	r0, #1
    58aa:	4240      	negs	r0, r0
    58ac:	ab1f      	add	r3, sp, #124	; 0x7c
    58ae:	81c8      	strh	r0, [r1, #14]
    58b0:	4808      	ldr	r0, [pc, #32]	; (58d4 <siprintf+0x40>)
    58b2:	cb04      	ldmia	r3!, {r2}
    58b4:	00a4      	lsls	r4, r4, #2
    58b6:	6800      	ldr	r0, [r0, #0]
    58b8:	9301      	str	r3, [sp, #4]
    58ba:	818c      	strh	r4, [r1, #12]
    58bc:	f000 f8cc 	bl	5a58 <_svfiprintf_r>
    58c0:	2300      	movs	r3, #0
    58c2:	9a02      	ldr	r2, [sp, #8]
    58c4:	7013      	strb	r3, [r2, #0]
    58c6:	b01d      	add	sp, #116	; 0x74
    58c8:	bc10      	pop	{r4}
    58ca:	bc08      	pop	{r3}
    58cc:	b003      	add	sp, #12
    58ce:	4718      	bx	r3
    58d0:	7fffffff 	.word	0x7fffffff
    58d4:	2000027c 	.word	0x2000027c

000058d8 <siscanf>:
    58d8:	b40e      	push	{r1, r2, r3}
    58da:	2381      	movs	r3, #129	; 0x81
    58dc:	b570      	push	{r4, r5, r6, lr}
    58de:	b09d      	sub	sp, #116	; 0x74
    58e0:	ac02      	add	r4, sp, #8
    58e2:	ad21      	add	r5, sp, #132	; 0x84
    58e4:	009b      	lsls	r3, r3, #2
    58e6:	cd40      	ldmia	r5!, {r6}
    58e8:	81a3      	strh	r3, [r4, #12]
    58ea:	9002      	str	r0, [sp, #8]
    58ec:	9006      	str	r0, [sp, #24]
    58ee:	f000 f81d 	bl	592c <strlen>
    58f2:	4b0b      	ldr	r3, [pc, #44]	; (5920 <siscanf+0x48>)
    58f4:	6060      	str	r0, [r4, #4]
    58f6:	6263      	str	r3, [r4, #36]	; 0x24
    58f8:	2300      	movs	r3, #0
    58fa:	6160      	str	r0, [r4, #20]
    58fc:	4809      	ldr	r0, [pc, #36]	; (5924 <siscanf+0x4c>)
    58fe:	6363      	str	r3, [r4, #52]	; 0x34
    5900:	64a3      	str	r3, [r4, #72]	; 0x48
    5902:	3b01      	subs	r3, #1
    5904:	81e3      	strh	r3, [r4, #14]
    5906:	0032      	movs	r2, r6
    5908:	002b      	movs	r3, r5
    590a:	0021      	movs	r1, r4
    590c:	6800      	ldr	r0, [r0, #0]
    590e:	9501      	str	r5, [sp, #4]
    5910:	f000 f9fc 	bl	5d0c <__ssvfiscanf_r>
    5914:	b01d      	add	sp, #116	; 0x74
    5916:	bc70      	pop	{r4, r5, r6}
    5918:	bc08      	pop	{r3}
    591a:	b003      	add	sp, #12
    591c:	4718      	bx	r3
    591e:	46c0      	nop			; (mov r8, r8)
    5920:	00005929 	.word	0x00005929
    5924:	2000027c 	.word	0x2000027c

00005928 <__seofread>:
    5928:	2000      	movs	r0, #0
    592a:	4770      	bx	lr

0000592c <strlen>:
    592c:	2300      	movs	r3, #0
    592e:	5cc2      	ldrb	r2, [r0, r3]
    5930:	3301      	adds	r3, #1
    5932:	2a00      	cmp	r2, #0
    5934:	d1fb      	bne.n	592e <strlen+0x2>
    5936:	1e58      	subs	r0, r3, #1
    5938:	4770      	bx	lr

0000593a <strncmp>:
    593a:	2300      	movs	r3, #0
    593c:	b530      	push	{r4, r5, lr}
    593e:	429a      	cmp	r2, r3
    5940:	d00b      	beq.n	595a <strncmp+0x20>
    5942:	3a01      	subs	r2, #1
    5944:	5cc4      	ldrb	r4, [r0, r3]
    5946:	5ccd      	ldrb	r5, [r1, r3]
    5948:	42ac      	cmp	r4, r5
    594a:	d105      	bne.n	5958 <strncmp+0x1e>
    594c:	429a      	cmp	r2, r3
    594e:	d002      	beq.n	5956 <strncmp+0x1c>
    5950:	3301      	adds	r3, #1
    5952:	2c00      	cmp	r4, #0
    5954:	d1f6      	bne.n	5944 <strncmp+0xa>
    5956:	0025      	movs	r5, r4
    5958:	1b63      	subs	r3, r4, r5
    595a:	0018      	movs	r0, r3
    595c:	bd30      	pop	{r4, r5, pc}

0000595e <strstr>:
    595e:	b510      	push	{r4, lr}
    5960:	7803      	ldrb	r3, [r0, #0]
    5962:	0002      	movs	r2, r0
    5964:	2b00      	cmp	r3, #0
    5966:	d105      	bne.n	5974 <strstr+0x16>
    5968:	7809      	ldrb	r1, [r1, #0]
    596a:	0018      	movs	r0, r3
    596c:	2900      	cmp	r1, #0
    596e:	d00d      	beq.n	598c <strstr+0x2e>
    5970:	e00f      	b.n	5992 <strstr+0x34>
    5972:	3201      	adds	r2, #1
    5974:	7813      	ldrb	r3, [r2, #0]
    5976:	2b00      	cmp	r3, #0
    5978:	d00a      	beq.n	5990 <strstr+0x32>
    597a:	2300      	movs	r3, #0
    597c:	5cc8      	ldrb	r0, [r1, r3]
    597e:	2800      	cmp	r0, #0
    5980:	d004      	beq.n	598c <strstr+0x2e>
    5982:	5cd4      	ldrb	r4, [r2, r3]
    5984:	4284      	cmp	r4, r0
    5986:	d1f4      	bne.n	5972 <strstr+0x14>
    5988:	3301      	adds	r3, #1
    598a:	e7f7      	b.n	597c <strstr+0x1e>
    598c:	0010      	movs	r0, r2
    598e:	e000      	b.n	5992 <strstr+0x34>
    5990:	0018      	movs	r0, r3
    5992:	bd10      	pop	{r4, pc}

00005994 <__ssputs_r>:
    5994:	b5f0      	push	{r4, r5, r6, r7, lr}
    5996:	688e      	ldr	r6, [r1, #8]
    5998:	b085      	sub	sp, #20
    599a:	0007      	movs	r7, r0
    599c:	000c      	movs	r4, r1
    599e:	9203      	str	r2, [sp, #12]
    59a0:	9301      	str	r3, [sp, #4]
    59a2:	429e      	cmp	r6, r3
    59a4:	d843      	bhi.n	5a2e <__ssputs_r+0x9a>
    59a6:	2390      	movs	r3, #144	; 0x90
    59a8:	898a      	ldrh	r2, [r1, #12]
    59aa:	00db      	lsls	r3, r3, #3
    59ac:	421a      	tst	r2, r3
    59ae:	d03e      	beq.n	5a2e <__ssputs_r+0x9a>
    59b0:	2503      	movs	r5, #3
    59b2:	6909      	ldr	r1, [r1, #16]
    59b4:	6823      	ldr	r3, [r4, #0]
    59b6:	9801      	ldr	r0, [sp, #4]
    59b8:	1a5b      	subs	r3, r3, r1
    59ba:	9302      	str	r3, [sp, #8]
    59bc:	6963      	ldr	r3, [r4, #20]
    59be:	435d      	muls	r5, r3
    59c0:	0feb      	lsrs	r3, r5, #31
    59c2:	195d      	adds	r5, r3, r5
    59c4:	9b02      	ldr	r3, [sp, #8]
    59c6:	106d      	asrs	r5, r5, #1
    59c8:	3301      	adds	r3, #1
    59ca:	181b      	adds	r3, r3, r0
    59cc:	42ab      	cmp	r3, r5
    59ce:	d900      	bls.n	59d2 <__ssputs_r+0x3e>
    59d0:	001d      	movs	r5, r3
    59d2:	0553      	lsls	r3, r2, #21
    59d4:	d510      	bpl.n	59f8 <__ssputs_r+0x64>
    59d6:	0029      	movs	r1, r5
    59d8:	0038      	movs	r0, r7
    59da:	f000 fff3 	bl	69c4 <_malloc_r>
    59de:	1e06      	subs	r6, r0, #0
    59e0:	d014      	beq.n	5a0c <__ssputs_r+0x78>
    59e2:	9a02      	ldr	r2, [sp, #8]
    59e4:	6921      	ldr	r1, [r4, #16]
    59e6:	f7ff ff4b 	bl	5880 <memcpy>
    59ea:	89a2      	ldrh	r2, [r4, #12]
    59ec:	4b19      	ldr	r3, [pc, #100]	; (5a54 <__ssputs_r+0xc0>)
    59ee:	4013      	ands	r3, r2
    59f0:	2280      	movs	r2, #128	; 0x80
    59f2:	4313      	orrs	r3, r2
    59f4:	81a3      	strh	r3, [r4, #12]
    59f6:	e012      	b.n	5a1e <__ssputs_r+0x8a>
    59f8:	002a      	movs	r2, r5
    59fa:	0038      	movs	r0, r7
    59fc:	f001 f838 	bl	6a70 <_realloc_r>
    5a00:	1e06      	subs	r6, r0, #0
    5a02:	d10c      	bne.n	5a1e <__ssputs_r+0x8a>
    5a04:	6921      	ldr	r1, [r4, #16]
    5a06:	0038      	movs	r0, r7
    5a08:	f000 ff96 	bl	6938 <_free_r>
    5a0c:	230c      	movs	r3, #12
    5a0e:	2240      	movs	r2, #64	; 0x40
    5a10:	2001      	movs	r0, #1
    5a12:	603b      	str	r3, [r7, #0]
    5a14:	89a3      	ldrh	r3, [r4, #12]
    5a16:	4240      	negs	r0, r0
    5a18:	4313      	orrs	r3, r2
    5a1a:	81a3      	strh	r3, [r4, #12]
    5a1c:	e017      	b.n	5a4e <__ssputs_r+0xba>
    5a1e:	9b02      	ldr	r3, [sp, #8]
    5a20:	6126      	str	r6, [r4, #16]
    5a22:	18f6      	adds	r6, r6, r3
    5a24:	6026      	str	r6, [r4, #0]
    5a26:	6165      	str	r5, [r4, #20]
    5a28:	9e01      	ldr	r6, [sp, #4]
    5a2a:	1aed      	subs	r5, r5, r3
    5a2c:	60a5      	str	r5, [r4, #8]
    5a2e:	9b01      	ldr	r3, [sp, #4]
    5a30:	42b3      	cmp	r3, r6
    5a32:	d200      	bcs.n	5a36 <__ssputs_r+0xa2>
    5a34:	001e      	movs	r6, r3
    5a36:	0032      	movs	r2, r6
    5a38:	9903      	ldr	r1, [sp, #12]
    5a3a:	6820      	ldr	r0, [r4, #0]
    5a3c:	f000 ff67 	bl	690e <memmove>
    5a40:	2000      	movs	r0, #0
    5a42:	68a3      	ldr	r3, [r4, #8]
    5a44:	1b9b      	subs	r3, r3, r6
    5a46:	60a3      	str	r3, [r4, #8]
    5a48:	6823      	ldr	r3, [r4, #0]
    5a4a:	199e      	adds	r6, r3, r6
    5a4c:	6026      	str	r6, [r4, #0]
    5a4e:	b005      	add	sp, #20
    5a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a52:	46c0      	nop			; (mov r8, r8)
    5a54:	fffffb7f 	.word	0xfffffb7f

00005a58 <_svfiprintf_r>:
    5a58:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a5a:	b09f      	sub	sp, #124	; 0x7c
    5a5c:	9002      	str	r0, [sp, #8]
    5a5e:	9305      	str	r3, [sp, #20]
    5a60:	898b      	ldrh	r3, [r1, #12]
    5a62:	000f      	movs	r7, r1
    5a64:	0016      	movs	r6, r2
    5a66:	061b      	lsls	r3, r3, #24
    5a68:	d510      	bpl.n	5a8c <_svfiprintf_r+0x34>
    5a6a:	690b      	ldr	r3, [r1, #16]
    5a6c:	2b00      	cmp	r3, #0
    5a6e:	d10d      	bne.n	5a8c <_svfiprintf_r+0x34>
    5a70:	2140      	movs	r1, #64	; 0x40
    5a72:	f000 ffa7 	bl	69c4 <_malloc_r>
    5a76:	6038      	str	r0, [r7, #0]
    5a78:	6138      	str	r0, [r7, #16]
    5a7a:	2800      	cmp	r0, #0
    5a7c:	d104      	bne.n	5a88 <_svfiprintf_r+0x30>
    5a7e:	230c      	movs	r3, #12
    5a80:	9a02      	ldr	r2, [sp, #8]
    5a82:	3801      	subs	r0, #1
    5a84:	6013      	str	r3, [r2, #0]
    5a86:	e0d8      	b.n	5c3a <_svfiprintf_r+0x1e2>
    5a88:	2340      	movs	r3, #64	; 0x40
    5a8a:	617b      	str	r3, [r7, #20]
    5a8c:	2300      	movs	r3, #0
    5a8e:	ad06      	add	r5, sp, #24
    5a90:	616b      	str	r3, [r5, #20]
    5a92:	3320      	adds	r3, #32
    5a94:	766b      	strb	r3, [r5, #25]
    5a96:	3310      	adds	r3, #16
    5a98:	76ab      	strb	r3, [r5, #26]
    5a9a:	0034      	movs	r4, r6
    5a9c:	7823      	ldrb	r3, [r4, #0]
    5a9e:	2b00      	cmp	r3, #0
    5aa0:	d103      	bne.n	5aaa <_svfiprintf_r+0x52>
    5aa2:	1ba3      	subs	r3, r4, r6
    5aa4:	9304      	str	r3, [sp, #16]
    5aa6:	d012      	beq.n	5ace <_svfiprintf_r+0x76>
    5aa8:	e003      	b.n	5ab2 <_svfiprintf_r+0x5a>
    5aaa:	2b25      	cmp	r3, #37	; 0x25
    5aac:	d0f9      	beq.n	5aa2 <_svfiprintf_r+0x4a>
    5aae:	3401      	adds	r4, #1
    5ab0:	e7f4      	b.n	5a9c <_svfiprintf_r+0x44>
    5ab2:	1ba3      	subs	r3, r4, r6
    5ab4:	0032      	movs	r2, r6
    5ab6:	0039      	movs	r1, r7
    5ab8:	9802      	ldr	r0, [sp, #8]
    5aba:	f7ff ff6b 	bl	5994 <__ssputs_r>
    5abe:	1c43      	adds	r3, r0, #1
    5ac0:	d100      	bne.n	5ac4 <_svfiprintf_r+0x6c>
    5ac2:	e0b4      	b.n	5c2e <_svfiprintf_r+0x1d6>
    5ac4:	696a      	ldr	r2, [r5, #20]
    5ac6:	9b04      	ldr	r3, [sp, #16]
    5ac8:	4694      	mov	ip, r2
    5aca:	4463      	add	r3, ip
    5acc:	616b      	str	r3, [r5, #20]
    5ace:	7823      	ldrb	r3, [r4, #0]
    5ad0:	2b00      	cmp	r3, #0
    5ad2:	d100      	bne.n	5ad6 <_svfiprintf_r+0x7e>
    5ad4:	e0ab      	b.n	5c2e <_svfiprintf_r+0x1d6>
    5ad6:	2201      	movs	r2, #1
    5ad8:	2300      	movs	r3, #0
    5ada:	4252      	negs	r2, r2
    5adc:	606a      	str	r2, [r5, #4]
    5ade:	a902      	add	r1, sp, #8
    5ae0:	3254      	adds	r2, #84	; 0x54
    5ae2:	1852      	adds	r2, r2, r1
    5ae4:	3401      	adds	r4, #1
    5ae6:	602b      	str	r3, [r5, #0]
    5ae8:	60eb      	str	r3, [r5, #12]
    5aea:	60ab      	str	r3, [r5, #8]
    5aec:	7013      	strb	r3, [r2, #0]
    5aee:	65ab      	str	r3, [r5, #88]	; 0x58
    5af0:	4e53      	ldr	r6, [pc, #332]	; (5c40 <_svfiprintf_r+0x1e8>)
    5af2:	7821      	ldrb	r1, [r4, #0]
    5af4:	2205      	movs	r2, #5
    5af6:	0030      	movs	r0, r6
    5af8:	f000 fefe 	bl	68f8 <memchr>
    5afc:	2800      	cmp	r0, #0
    5afe:	d007      	beq.n	5b10 <_svfiprintf_r+0xb8>
    5b00:	2301      	movs	r3, #1
    5b02:	1b80      	subs	r0, r0, r6
    5b04:	4083      	lsls	r3, r0
    5b06:	682a      	ldr	r2, [r5, #0]
    5b08:	3401      	adds	r4, #1
    5b0a:	4313      	orrs	r3, r2
    5b0c:	602b      	str	r3, [r5, #0]
    5b0e:	e7ef      	b.n	5af0 <_svfiprintf_r+0x98>
    5b10:	682b      	ldr	r3, [r5, #0]
    5b12:	06da      	lsls	r2, r3, #27
    5b14:	d504      	bpl.n	5b20 <_svfiprintf_r+0xc8>
    5b16:	2253      	movs	r2, #83	; 0x53
    5b18:	2120      	movs	r1, #32
    5b1a:	a802      	add	r0, sp, #8
    5b1c:	1812      	adds	r2, r2, r0
    5b1e:	7011      	strb	r1, [r2, #0]
    5b20:	071a      	lsls	r2, r3, #28
    5b22:	d504      	bpl.n	5b2e <_svfiprintf_r+0xd6>
    5b24:	2253      	movs	r2, #83	; 0x53
    5b26:	212b      	movs	r1, #43	; 0x2b
    5b28:	a802      	add	r0, sp, #8
    5b2a:	1812      	adds	r2, r2, r0
    5b2c:	7011      	strb	r1, [r2, #0]
    5b2e:	7822      	ldrb	r2, [r4, #0]
    5b30:	2a2a      	cmp	r2, #42	; 0x2a
    5b32:	d003      	beq.n	5b3c <_svfiprintf_r+0xe4>
    5b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5b36:	2000      	movs	r0, #0
    5b38:	210a      	movs	r1, #10
    5b3a:	e00e      	b.n	5b5a <_svfiprintf_r+0x102>
    5b3c:	9a05      	ldr	r2, [sp, #20]
    5b3e:	1d11      	adds	r1, r2, #4
    5b40:	6812      	ldr	r2, [r2, #0]
    5b42:	9105      	str	r1, [sp, #20]
    5b44:	2a00      	cmp	r2, #0
    5b46:	db01      	blt.n	5b4c <_svfiprintf_r+0xf4>
    5b48:	9209      	str	r2, [sp, #36]	; 0x24
    5b4a:	e004      	b.n	5b56 <_svfiprintf_r+0xfe>
    5b4c:	4252      	negs	r2, r2
    5b4e:	60ea      	str	r2, [r5, #12]
    5b50:	2202      	movs	r2, #2
    5b52:	4313      	orrs	r3, r2
    5b54:	602b      	str	r3, [r5, #0]
    5b56:	3401      	adds	r4, #1
    5b58:	e00b      	b.n	5b72 <_svfiprintf_r+0x11a>
    5b5a:	7822      	ldrb	r2, [r4, #0]
    5b5c:	3a30      	subs	r2, #48	; 0x30
    5b5e:	2a09      	cmp	r2, #9
    5b60:	d804      	bhi.n	5b6c <_svfiprintf_r+0x114>
    5b62:	434b      	muls	r3, r1
    5b64:	3401      	adds	r4, #1
    5b66:	189b      	adds	r3, r3, r2
    5b68:	2001      	movs	r0, #1
    5b6a:	e7f6      	b.n	5b5a <_svfiprintf_r+0x102>
    5b6c:	2800      	cmp	r0, #0
    5b6e:	d000      	beq.n	5b72 <_svfiprintf_r+0x11a>
    5b70:	9309      	str	r3, [sp, #36]	; 0x24
    5b72:	7823      	ldrb	r3, [r4, #0]
    5b74:	2b2e      	cmp	r3, #46	; 0x2e
    5b76:	d11e      	bne.n	5bb6 <_svfiprintf_r+0x15e>
    5b78:	7863      	ldrb	r3, [r4, #1]
    5b7a:	2b2a      	cmp	r3, #42	; 0x2a
    5b7c:	d10a      	bne.n	5b94 <_svfiprintf_r+0x13c>
    5b7e:	9b05      	ldr	r3, [sp, #20]
    5b80:	3402      	adds	r4, #2
    5b82:	1d1a      	adds	r2, r3, #4
    5b84:	681b      	ldr	r3, [r3, #0]
    5b86:	9205      	str	r2, [sp, #20]
    5b88:	2b00      	cmp	r3, #0
    5b8a:	da01      	bge.n	5b90 <_svfiprintf_r+0x138>
    5b8c:	2301      	movs	r3, #1
    5b8e:	425b      	negs	r3, r3
    5b90:	9307      	str	r3, [sp, #28]
    5b92:	e010      	b.n	5bb6 <_svfiprintf_r+0x15e>
    5b94:	2300      	movs	r3, #0
    5b96:	200a      	movs	r0, #10
    5b98:	001a      	movs	r2, r3
    5b9a:	3401      	adds	r4, #1
    5b9c:	606b      	str	r3, [r5, #4]
    5b9e:	7821      	ldrb	r1, [r4, #0]
    5ba0:	3930      	subs	r1, #48	; 0x30
    5ba2:	2909      	cmp	r1, #9
    5ba4:	d804      	bhi.n	5bb0 <_svfiprintf_r+0x158>
    5ba6:	4342      	muls	r2, r0
    5ba8:	3401      	adds	r4, #1
    5baa:	1852      	adds	r2, r2, r1
    5bac:	2301      	movs	r3, #1
    5bae:	e7f6      	b.n	5b9e <_svfiprintf_r+0x146>
    5bb0:	2b00      	cmp	r3, #0
    5bb2:	d000      	beq.n	5bb6 <_svfiprintf_r+0x15e>
    5bb4:	9207      	str	r2, [sp, #28]
    5bb6:	4e23      	ldr	r6, [pc, #140]	; (5c44 <_svfiprintf_r+0x1ec>)
    5bb8:	7821      	ldrb	r1, [r4, #0]
    5bba:	2203      	movs	r2, #3
    5bbc:	0030      	movs	r0, r6
    5bbe:	f000 fe9b 	bl	68f8 <memchr>
    5bc2:	2800      	cmp	r0, #0
    5bc4:	d006      	beq.n	5bd4 <_svfiprintf_r+0x17c>
    5bc6:	2340      	movs	r3, #64	; 0x40
    5bc8:	1b80      	subs	r0, r0, r6
    5bca:	4083      	lsls	r3, r0
    5bcc:	682a      	ldr	r2, [r5, #0]
    5bce:	3401      	adds	r4, #1
    5bd0:	4313      	orrs	r3, r2
    5bd2:	602b      	str	r3, [r5, #0]
    5bd4:	7821      	ldrb	r1, [r4, #0]
    5bd6:	2206      	movs	r2, #6
    5bd8:	481b      	ldr	r0, [pc, #108]	; (5c48 <_svfiprintf_r+0x1f0>)
    5bda:	1c66      	adds	r6, r4, #1
    5bdc:	7629      	strb	r1, [r5, #24]
    5bde:	f000 fe8b 	bl	68f8 <memchr>
    5be2:	2800      	cmp	r0, #0
    5be4:	d012      	beq.n	5c0c <_svfiprintf_r+0x1b4>
    5be6:	4b19      	ldr	r3, [pc, #100]	; (5c4c <_svfiprintf_r+0x1f4>)
    5be8:	2b00      	cmp	r3, #0
    5bea:	d106      	bne.n	5bfa <_svfiprintf_r+0x1a2>
    5bec:	2207      	movs	r2, #7
    5bee:	9b05      	ldr	r3, [sp, #20]
    5bf0:	3307      	adds	r3, #7
    5bf2:	4393      	bics	r3, r2
    5bf4:	3308      	adds	r3, #8
    5bf6:	9305      	str	r3, [sp, #20]
    5bf8:	e014      	b.n	5c24 <_svfiprintf_r+0x1cc>
    5bfa:	ab05      	add	r3, sp, #20
    5bfc:	9300      	str	r3, [sp, #0]
    5bfe:	003a      	movs	r2, r7
    5c00:	4b13      	ldr	r3, [pc, #76]	; (5c50 <_svfiprintf_r+0x1f8>)
    5c02:	0029      	movs	r1, r5
    5c04:	9802      	ldr	r0, [sp, #8]
    5c06:	e000      	b.n	5c0a <_svfiprintf_r+0x1b2>
    5c08:	bf00      	nop
    5c0a:	e007      	b.n	5c1c <_svfiprintf_r+0x1c4>
    5c0c:	ab05      	add	r3, sp, #20
    5c0e:	9300      	str	r3, [sp, #0]
    5c10:	003a      	movs	r2, r7
    5c12:	4b0f      	ldr	r3, [pc, #60]	; (5c50 <_svfiprintf_r+0x1f8>)
    5c14:	0029      	movs	r1, r5
    5c16:	9802      	ldr	r0, [sp, #8]
    5c18:	f000 fa64 	bl	60e4 <_printf_i>
    5c1c:	9003      	str	r0, [sp, #12]
    5c1e:	9b03      	ldr	r3, [sp, #12]
    5c20:	3301      	adds	r3, #1
    5c22:	d004      	beq.n	5c2e <_svfiprintf_r+0x1d6>
    5c24:	696b      	ldr	r3, [r5, #20]
    5c26:	9a03      	ldr	r2, [sp, #12]
    5c28:	189b      	adds	r3, r3, r2
    5c2a:	616b      	str	r3, [r5, #20]
    5c2c:	e735      	b.n	5a9a <_svfiprintf_r+0x42>
    5c2e:	89bb      	ldrh	r3, [r7, #12]
    5c30:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5c32:	065b      	lsls	r3, r3, #25
    5c34:	d501      	bpl.n	5c3a <_svfiprintf_r+0x1e2>
    5c36:	2001      	movs	r0, #1
    5c38:	4240      	negs	r0, r0
    5c3a:	b01f      	add	sp, #124	; 0x7c
    5c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c3e:	46c0      	nop			; (mov r8, r8)
    5c40:	00006ff5 	.word	0x00006ff5
    5c44:	00006ffb 	.word	0x00006ffb
    5c48:	00006fff 	.word	0x00006fff
    5c4c:	00000000 	.word	0x00000000
    5c50:	00005995 	.word	0x00005995

00005c54 <_sungetc_r>:
    5c54:	b570      	push	{r4, r5, r6, lr}
    5c56:	000e      	movs	r6, r1
    5c58:	0014      	movs	r4, r2
    5c5a:	1c4b      	adds	r3, r1, #1
    5c5c:	d102      	bne.n	5c64 <_sungetc_r+0x10>
    5c5e:	2001      	movs	r0, #1
    5c60:	4240      	negs	r0, r0
    5c62:	e032      	b.n	5cca <_sungetc_r+0x76>
    5c64:	8993      	ldrh	r3, [r2, #12]
    5c66:	2220      	movs	r2, #32
    5c68:	4393      	bics	r3, r2
    5c6a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    5c6c:	81a3      	strh	r3, [r4, #12]
    5c6e:	b2cd      	uxtb	r5, r1
    5c70:	6863      	ldr	r3, [r4, #4]
    5c72:	2a00      	cmp	r2, #0
    5c74:	d00e      	beq.n	5c94 <_sungetc_r+0x40>
    5c76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    5c78:	4293      	cmp	r3, r2
    5c7a:	da05      	bge.n	5c88 <_sungetc_r+0x34>
    5c7c:	6823      	ldr	r3, [r4, #0]
    5c7e:	3b01      	subs	r3, #1
    5c80:	6023      	str	r3, [r4, #0]
    5c82:	701e      	strb	r6, [r3, #0]
    5c84:	6863      	ldr	r3, [r4, #4]
    5c86:	e010      	b.n	5caa <_sungetc_r+0x56>
    5c88:	0021      	movs	r1, r4
    5c8a:	f000 fdf7 	bl	687c <__submore>
    5c8e:	2800      	cmp	r0, #0
    5c90:	d0f4      	beq.n	5c7c <_sungetc_r+0x28>
    5c92:	e7e4      	b.n	5c5e <_sungetc_r+0xa>
    5c94:	6921      	ldr	r1, [r4, #16]
    5c96:	6822      	ldr	r2, [r4, #0]
    5c98:	2900      	cmp	r1, #0
    5c9a:	d008      	beq.n	5cae <_sungetc_r+0x5a>
    5c9c:	4291      	cmp	r1, r2
    5c9e:	d206      	bcs.n	5cae <_sungetc_r+0x5a>
    5ca0:	1e51      	subs	r1, r2, #1
    5ca2:	7808      	ldrb	r0, [r1, #0]
    5ca4:	4285      	cmp	r5, r0
    5ca6:	d102      	bne.n	5cae <_sungetc_r+0x5a>
    5ca8:	6021      	str	r1, [r4, #0]
    5caa:	3301      	adds	r3, #1
    5cac:	e00b      	b.n	5cc6 <_sungetc_r+0x72>
    5cae:	6423      	str	r3, [r4, #64]	; 0x40
    5cb0:	0023      	movs	r3, r4
    5cb2:	3344      	adds	r3, #68	; 0x44
    5cb4:	6363      	str	r3, [r4, #52]	; 0x34
    5cb6:	2303      	movs	r3, #3
    5cb8:	63a3      	str	r3, [r4, #56]	; 0x38
    5cba:	0023      	movs	r3, r4
    5cbc:	3346      	adds	r3, #70	; 0x46
    5cbe:	63e2      	str	r2, [r4, #60]	; 0x3c
    5cc0:	701e      	strb	r6, [r3, #0]
    5cc2:	6023      	str	r3, [r4, #0]
    5cc4:	2301      	movs	r3, #1
    5cc6:	0028      	movs	r0, r5
    5cc8:	6063      	str	r3, [r4, #4]
    5cca:	bd70      	pop	{r4, r5, r6, pc}

00005ccc <__ssrefill_r>:
    5ccc:	b510      	push	{r4, lr}
    5cce:	000c      	movs	r4, r1
    5cd0:	6b49      	ldr	r1, [r1, #52]	; 0x34
    5cd2:	2900      	cmp	r1, #0
    5cd4:	d00e      	beq.n	5cf4 <__ssrefill_r+0x28>
    5cd6:	0023      	movs	r3, r4
    5cd8:	3344      	adds	r3, #68	; 0x44
    5cda:	4299      	cmp	r1, r3
    5cdc:	d001      	beq.n	5ce2 <__ssrefill_r+0x16>
    5cde:	f000 fe2b 	bl	6938 <_free_r>
    5ce2:	2000      	movs	r0, #0
    5ce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5ce6:	6360      	str	r0, [r4, #52]	; 0x34
    5ce8:	6063      	str	r3, [r4, #4]
    5cea:	4283      	cmp	r3, r0
    5cec:	d002      	beq.n	5cf4 <__ssrefill_r+0x28>
    5cee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5cf0:	6023      	str	r3, [r4, #0]
    5cf2:	e009      	b.n	5d08 <__ssrefill_r+0x3c>
    5cf4:	6923      	ldr	r3, [r4, #16]
    5cf6:	2220      	movs	r2, #32
    5cf8:	6023      	str	r3, [r4, #0]
    5cfa:	2300      	movs	r3, #0
    5cfc:	2001      	movs	r0, #1
    5cfe:	6063      	str	r3, [r4, #4]
    5d00:	89a3      	ldrh	r3, [r4, #12]
    5d02:	4240      	negs	r0, r0
    5d04:	4313      	orrs	r3, r2
    5d06:	81a3      	strh	r3, [r4, #12]
    5d08:	bd10      	pop	{r4, pc}
	...

00005d0c <__ssvfiscanf_r>:
    5d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d0e:	4cb8      	ldr	r4, [pc, #736]	; (5ff0 <__ssvfiscanf_r+0x2e4>)
    5d10:	000d      	movs	r5, r1
    5d12:	44a5      	add	sp, r4
    5d14:	9303      	str	r3, [sp, #12]
    5d16:	2300      	movs	r3, #0
    5d18:	9000      	str	r0, [sp, #0]
    5d1a:	9348      	str	r3, [sp, #288]	; 0x120
    5d1c:	9349      	str	r3, [sp, #292]	; 0x124
    5d1e:	2086      	movs	r0, #134	; 0x86
    5d20:	ab05      	add	r3, sp, #20
    5d22:	934a      	str	r3, [sp, #296]	; 0x128
    5d24:	23be      	movs	r3, #190	; 0xbe
    5d26:	0040      	lsls	r0, r0, #1
    5d28:	9201      	str	r2, [sp, #4]
    5d2a:	a902      	add	r1, sp, #8
    5d2c:	4ab1      	ldr	r2, [pc, #708]	; (5ff4 <__ssvfiscanf_r+0x2e8>)
    5d2e:	005b      	lsls	r3, r3, #1
    5d30:	1809      	adds	r1, r1, r0
    5d32:	50ca      	str	r2, [r1, r3]
    5d34:	3304      	adds	r3, #4
    5d36:	001e      	movs	r6, r3
    5d38:	4aaf      	ldr	r2, [pc, #700]	; (5ff8 <__ssvfiscanf_r+0x2ec>)
    5d3a:	a902      	add	r1, sp, #8
    5d3c:	1809      	adds	r1, r1, r0
    5d3e:	50ca      	str	r2, [r1, r3]
    5d40:	9b01      	ldr	r3, [sp, #4]
    5d42:	781a      	ldrb	r2, [r3, #0]
    5d44:	2a00      	cmp	r2, #0
    5d46:	d100      	bne.n	5d4a <__ssvfiscanf_r+0x3e>
    5d48:	e149      	b.n	5fde <__ssvfiscanf_r+0x2d2>
    5d4a:	2108      	movs	r1, #8
    5d4c:	4cab      	ldr	r4, [pc, #684]	; (5ffc <__ssvfiscanf_r+0x2f0>)
    5d4e:	6823      	ldr	r3, [r4, #0]
    5d50:	189b      	adds	r3, r3, r2
    5d52:	785b      	ldrb	r3, [r3, #1]
    5d54:	400b      	ands	r3, r1
    5d56:	d023      	beq.n	5da0 <__ssvfiscanf_r+0x94>
    5d58:	686b      	ldr	r3, [r5, #4]
    5d5a:	2b00      	cmp	r3, #0
    5d5c:	dd11      	ble.n	5d82 <__ssvfiscanf_r+0x76>
    5d5e:	682b      	ldr	r3, [r5, #0]
    5d60:	6821      	ldr	r1, [r4, #0]
    5d62:	781a      	ldrb	r2, [r3, #0]
    5d64:	188a      	adds	r2, r1, r2
    5d66:	2108      	movs	r1, #8
    5d68:	7852      	ldrb	r2, [r2, #1]
    5d6a:	420a      	tst	r2, r1
    5d6c:	d014      	beq.n	5d98 <__ssvfiscanf_r+0x8c>
    5d6e:	9a49      	ldr	r2, [sp, #292]	; 0x124
    5d70:	3301      	adds	r3, #1
    5d72:	9202      	str	r2, [sp, #8]
    5d74:	3201      	adds	r2, #1
    5d76:	9249      	str	r2, [sp, #292]	; 0x124
    5d78:	686a      	ldr	r2, [r5, #4]
    5d7a:	602b      	str	r3, [r5, #0]
    5d7c:	3a01      	subs	r2, #1
    5d7e:	606a      	str	r2, [r5, #4]
    5d80:	e7ea      	b.n	5d58 <__ssvfiscanf_r+0x4c>
    5d82:	2286      	movs	r2, #134	; 0x86
    5d84:	ab02      	add	r3, sp, #8
    5d86:	0052      	lsls	r2, r2, #1
    5d88:	189b      	adds	r3, r3, r2
    5d8a:	599b      	ldr	r3, [r3, r6]
    5d8c:	0029      	movs	r1, r5
    5d8e:	9800      	ldr	r0, [sp, #0]
    5d90:	9302      	str	r3, [sp, #8]
    5d92:	4798      	blx	r3
    5d94:	2800      	cmp	r0, #0
    5d96:	d0e2      	beq.n	5d5e <__ssvfiscanf_r+0x52>
    5d98:	9f01      	ldr	r7, [sp, #4]
    5d9a:	3701      	adds	r7, #1
    5d9c:	9701      	str	r7, [sp, #4]
    5d9e:	e7cf      	b.n	5d40 <__ssvfiscanf_r+0x34>
    5da0:	9901      	ldr	r1, [sp, #4]
    5da2:	0014      	movs	r4, r2
    5da4:	1c4f      	adds	r7, r1, #1
    5da6:	2a25      	cmp	r2, #37	; 0x25
    5da8:	d155      	bne.n	5e56 <__ssvfiscanf_r+0x14a>
    5daa:	9347      	str	r3, [sp, #284]	; 0x11c
    5dac:	9345      	str	r3, [sp, #276]	; 0x114
    5dae:	784b      	ldrb	r3, [r1, #1]
    5db0:	2b2a      	cmp	r3, #42	; 0x2a
    5db2:	d102      	bne.n	5dba <__ssvfiscanf_r+0xae>
    5db4:	3b1a      	subs	r3, #26
    5db6:	9345      	str	r3, [sp, #276]	; 0x114
    5db8:	3701      	adds	r7, #1
    5dba:	003c      	movs	r4, r7
    5dbc:	220a      	movs	r2, #10
    5dbe:	7821      	ldrb	r1, [r4, #0]
    5dc0:	000b      	movs	r3, r1
    5dc2:	3b30      	subs	r3, #48	; 0x30
    5dc4:	2b09      	cmp	r3, #9
    5dc6:	d807      	bhi.n	5dd8 <__ssvfiscanf_r+0xcc>
    5dc8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    5dca:	3401      	adds	r4, #1
    5dcc:	9301      	str	r3, [sp, #4]
    5dce:	4353      	muls	r3, r2
    5dd0:	3b30      	subs	r3, #48	; 0x30
    5dd2:	1859      	adds	r1, r3, r1
    5dd4:	9147      	str	r1, [sp, #284]	; 0x11c
    5dd6:	e7f2      	b.n	5dbe <__ssvfiscanf_r+0xb2>
    5dd8:	4f89      	ldr	r7, [pc, #548]	; (6000 <__ssvfiscanf_r+0x2f4>)
    5dda:	2203      	movs	r2, #3
    5ddc:	0038      	movs	r0, r7
    5dde:	f000 fd8b 	bl	68f8 <memchr>
    5de2:	2800      	cmp	r0, #0
    5de4:	d007      	beq.n	5df6 <__ssvfiscanf_r+0xea>
    5de6:	2301      	movs	r3, #1
    5de8:	1bc0      	subs	r0, r0, r7
    5dea:	4083      	lsls	r3, r0
    5dec:	9a45      	ldr	r2, [sp, #276]	; 0x114
    5dee:	3401      	adds	r4, #1
    5df0:	4313      	orrs	r3, r2
    5df2:	9201      	str	r2, [sp, #4]
    5df4:	9345      	str	r3, [sp, #276]	; 0x114
    5df6:	1c67      	adds	r7, r4, #1
    5df8:	7824      	ldrb	r4, [r4, #0]
    5dfa:	2c67      	cmp	r4, #103	; 0x67
    5dfc:	d818      	bhi.n	5e30 <__ssvfiscanf_r+0x124>
    5dfe:	2c65      	cmp	r4, #101	; 0x65
    5e00:	d300      	bcc.n	5e04 <__ssvfiscanf_r+0xf8>
    5e02:	e08b      	b.n	5f1c <__ssvfiscanf_r+0x210>
    5e04:	2c47      	cmp	r4, #71	; 0x47
    5e06:	d808      	bhi.n	5e1a <__ssvfiscanf_r+0x10e>
    5e08:	2c45      	cmp	r4, #69	; 0x45
    5e0a:	d300      	bcc.n	5e0e <__ssvfiscanf_r+0x102>
    5e0c:	e086      	b.n	5f1c <__ssvfiscanf_r+0x210>
    5e0e:	2c00      	cmp	r4, #0
    5e10:	d100      	bne.n	5e14 <__ssvfiscanf_r+0x108>
    5e12:	e0e6      	b.n	5fe2 <__ssvfiscanf_r+0x2d6>
    5e14:	2c25      	cmp	r4, #37	; 0x25
    5e16:	d01e      	beq.n	5e56 <__ssvfiscanf_r+0x14a>
    5e18:	e082      	b.n	5f20 <__ssvfiscanf_r+0x214>
    5e1a:	2c5b      	cmp	r4, #91	; 0x5b
    5e1c:	d056      	beq.n	5ecc <__ssvfiscanf_r+0x1c0>
    5e1e:	d802      	bhi.n	5e26 <__ssvfiscanf_r+0x11a>
    5e20:	2c58      	cmp	r4, #88	; 0x58
    5e22:	d041      	beq.n	5ea8 <__ssvfiscanf_r+0x19c>
    5e24:	e07c      	b.n	5f20 <__ssvfiscanf_r+0x214>
    5e26:	2c63      	cmp	r4, #99	; 0x63
    5e28:	d05e      	beq.n	5ee8 <__ssvfiscanf_r+0x1dc>
    5e2a:	2c64      	cmp	r4, #100	; 0x64
    5e2c:	d045      	beq.n	5eba <__ssvfiscanf_r+0x1ae>
    5e2e:	e077      	b.n	5f20 <__ssvfiscanf_r+0x214>
    5e30:	2c70      	cmp	r4, #112	; 0x70
    5e32:	d033      	beq.n	5e9c <__ssvfiscanf_r+0x190>
    5e34:	d807      	bhi.n	5e46 <__ssvfiscanf_r+0x13a>
    5e36:	2c6e      	cmp	r4, #110	; 0x6e
    5e38:	d05e      	beq.n	5ef8 <__ssvfiscanf_r+0x1ec>
    5e3a:	d840      	bhi.n	5ebe <__ssvfiscanf_r+0x1b2>
    5e3c:	2c69      	cmp	r4, #105	; 0x69
    5e3e:	d16f      	bne.n	5f20 <__ssvfiscanf_r+0x214>
    5e40:	2300      	movs	r3, #0
    5e42:	9346      	str	r3, [sp, #280]	; 0x118
    5e44:	e040      	b.n	5ec8 <__ssvfiscanf_r+0x1bc>
    5e46:	2c75      	cmp	r4, #117	; 0x75
    5e48:	d037      	beq.n	5eba <__ssvfiscanf_r+0x1ae>
    5e4a:	2c78      	cmp	r4, #120	; 0x78
    5e4c:	d02c      	beq.n	5ea8 <__ssvfiscanf_r+0x19c>
    5e4e:	2302      	movs	r3, #2
    5e50:	2c73      	cmp	r4, #115	; 0x73
    5e52:	d047      	beq.n	5ee4 <__ssvfiscanf_r+0x1d8>
    5e54:	e064      	b.n	5f20 <__ssvfiscanf_r+0x214>
    5e56:	686b      	ldr	r3, [r5, #4]
    5e58:	2b00      	cmp	r3, #0
    5e5a:	dd0e      	ble.n	5e7a <__ssvfiscanf_r+0x16e>
    5e5c:	682b      	ldr	r3, [r5, #0]
    5e5e:	781a      	ldrb	r2, [r3, #0]
    5e60:	4294      	cmp	r4, r2
    5e62:	d000      	beq.n	5e66 <__ssvfiscanf_r+0x15a>
    5e64:	e0bb      	b.n	5fde <__ssvfiscanf_r+0x2d2>
    5e66:	3301      	adds	r3, #1
    5e68:	686a      	ldr	r2, [r5, #4]
    5e6a:	602b      	str	r3, [r5, #0]
    5e6c:	9b49      	ldr	r3, [sp, #292]	; 0x124
    5e6e:	3a01      	subs	r2, #1
    5e70:	9301      	str	r3, [sp, #4]
    5e72:	3301      	adds	r3, #1
    5e74:	606a      	str	r2, [r5, #4]
    5e76:	9349      	str	r3, [sp, #292]	; 0x124
    5e78:	e790      	b.n	5d9c <__ssvfiscanf_r+0x90>
    5e7a:	2286      	movs	r2, #134	; 0x86
    5e7c:	ab02      	add	r3, sp, #8
    5e7e:	0052      	lsls	r2, r2, #1
    5e80:	189b      	adds	r3, r3, r2
    5e82:	599b      	ldr	r3, [r3, r6]
    5e84:	0029      	movs	r1, r5
    5e86:	9800      	ldr	r0, [sp, #0]
    5e88:	9301      	str	r3, [sp, #4]
    5e8a:	4798      	blx	r3
    5e8c:	2800      	cmp	r0, #0
    5e8e:	d0e5      	beq.n	5e5c <__ssvfiscanf_r+0x150>
    5e90:	9848      	ldr	r0, [sp, #288]	; 0x120
    5e92:	2800      	cmp	r0, #0
    5e94:	d000      	beq.n	5e98 <__ssvfiscanf_r+0x18c>
    5e96:	e09e      	b.n	5fd6 <__ssvfiscanf_r+0x2ca>
    5e98:	3801      	subs	r0, #1
    5e9a:	e0a4      	b.n	5fe6 <__ssvfiscanf_r+0x2da>
    5e9c:	9b45      	ldr	r3, [sp, #276]	; 0x114
    5e9e:	9301      	str	r3, [sp, #4]
    5ea0:	2320      	movs	r3, #32
    5ea2:	9a01      	ldr	r2, [sp, #4]
    5ea4:	4313      	orrs	r3, r2
    5ea6:	9345      	str	r3, [sp, #276]	; 0x114
    5ea8:	9b45      	ldr	r3, [sp, #276]	; 0x114
    5eaa:	9301      	str	r3, [sp, #4]
    5eac:	2380      	movs	r3, #128	; 0x80
    5eae:	9a01      	ldr	r2, [sp, #4]
    5eb0:	009b      	lsls	r3, r3, #2
    5eb2:	4313      	orrs	r3, r2
    5eb4:	9345      	str	r3, [sp, #276]	; 0x114
    5eb6:	2310      	movs	r3, #16
    5eb8:	e002      	b.n	5ec0 <__ssvfiscanf_r+0x1b4>
    5eba:	230a      	movs	r3, #10
    5ebc:	e000      	b.n	5ec0 <__ssvfiscanf_r+0x1b4>
    5ebe:	2308      	movs	r3, #8
    5ec0:	9346      	str	r3, [sp, #280]	; 0x118
    5ec2:	2304      	movs	r3, #4
    5ec4:	2c6e      	cmp	r4, #110	; 0x6e
    5ec6:	dc0d      	bgt.n	5ee4 <__ssvfiscanf_r+0x1d8>
    5ec8:	2303      	movs	r3, #3
    5eca:	e00b      	b.n	5ee4 <__ssvfiscanf_r+0x1d8>
    5ecc:	0039      	movs	r1, r7
    5ece:	a805      	add	r0, sp, #20
    5ed0:	f000 fb8c 	bl	65ec <__sccl>
    5ed4:	9b45      	ldr	r3, [sp, #276]	; 0x114
    5ed6:	0007      	movs	r7, r0
    5ed8:	9301      	str	r3, [sp, #4]
    5eda:	2340      	movs	r3, #64	; 0x40
    5edc:	9a01      	ldr	r2, [sp, #4]
    5ede:	4313      	orrs	r3, r2
    5ee0:	9345      	str	r3, [sp, #276]	; 0x114
    5ee2:	2301      	movs	r3, #1
    5ee4:	934b      	str	r3, [sp, #300]	; 0x12c
    5ee6:	e01f      	b.n	5f28 <__ssvfiscanf_r+0x21c>
    5ee8:	9b45      	ldr	r3, [sp, #276]	; 0x114
    5eea:	9301      	str	r3, [sp, #4]
    5eec:	2340      	movs	r3, #64	; 0x40
    5eee:	9a01      	ldr	r2, [sp, #4]
    5ef0:	4313      	orrs	r3, r2
    5ef2:	9345      	str	r3, [sp, #276]	; 0x114
    5ef4:	2300      	movs	r3, #0
    5ef6:	e7f5      	b.n	5ee4 <__ssvfiscanf_r+0x1d8>
    5ef8:	9945      	ldr	r1, [sp, #276]	; 0x114
    5efa:	06cb      	lsls	r3, r1, #27
    5efc:	d500      	bpl.n	5f00 <__ssvfiscanf_r+0x1f4>
    5efe:	e74d      	b.n	5d9c <__ssvfiscanf_r+0x90>
    5f00:	9b03      	ldr	r3, [sp, #12]
    5f02:	9a49      	ldr	r2, [sp, #292]	; 0x124
    5f04:	07c8      	lsls	r0, r1, #31
    5f06:	d504      	bpl.n	5f12 <__ssvfiscanf_r+0x206>
    5f08:	1d19      	adds	r1, r3, #4
    5f0a:	9103      	str	r1, [sp, #12]
    5f0c:	681b      	ldr	r3, [r3, #0]
    5f0e:	801a      	strh	r2, [r3, #0]
    5f10:	e744      	b.n	5d9c <__ssvfiscanf_r+0x90>
    5f12:	1d19      	adds	r1, r3, #4
    5f14:	9103      	str	r1, [sp, #12]
    5f16:	681b      	ldr	r3, [r3, #0]
    5f18:	601a      	str	r2, [r3, #0]
    5f1a:	e73f      	b.n	5d9c <__ssvfiscanf_r+0x90>
    5f1c:	2305      	movs	r3, #5
    5f1e:	e7e1      	b.n	5ee4 <__ssvfiscanf_r+0x1d8>
    5f20:	2303      	movs	r3, #3
    5f22:	934b      	str	r3, [sp, #300]	; 0x12c
    5f24:	3307      	adds	r3, #7
    5f26:	9346      	str	r3, [sp, #280]	; 0x118
    5f28:	686b      	ldr	r3, [r5, #4]
    5f2a:	2b00      	cmp	r3, #0
    5f2c:	dd04      	ble.n	5f38 <__ssvfiscanf_r+0x22c>
    5f2e:	9b45      	ldr	r3, [sp, #276]	; 0x114
    5f30:	9301      	str	r3, [sp, #4]
    5f32:	065b      	lsls	r3, r3, #25
    5f34:	d517      	bpl.n	5f66 <__ssvfiscanf_r+0x25a>
    5f36:	e01f      	b.n	5f78 <__ssvfiscanf_r+0x26c>
    5f38:	2286      	movs	r2, #134	; 0x86
    5f3a:	ab02      	add	r3, sp, #8
    5f3c:	0052      	lsls	r2, r2, #1
    5f3e:	189b      	adds	r3, r3, r2
    5f40:	599b      	ldr	r3, [r3, r6]
    5f42:	0029      	movs	r1, r5
    5f44:	9800      	ldr	r0, [sp, #0]
    5f46:	9301      	str	r3, [sp, #4]
    5f48:	4798      	blx	r3
    5f4a:	2800      	cmp	r0, #0
    5f4c:	d0ef      	beq.n	5f2e <__ssvfiscanf_r+0x222>
    5f4e:	e79f      	b.n	5e90 <__ssvfiscanf_r+0x184>
    5f50:	9a49      	ldr	r2, [sp, #292]	; 0x124
    5f52:	9201      	str	r2, [sp, #4]
    5f54:	3201      	adds	r2, #1
    5f56:	9249      	str	r2, [sp, #292]	; 0x124
    5f58:	686a      	ldr	r2, [r5, #4]
    5f5a:	3a01      	subs	r2, #1
    5f5c:	606a      	str	r2, [r5, #4]
    5f5e:	2a00      	cmp	r2, #0
    5f60:	dd14      	ble.n	5f8c <__ssvfiscanf_r+0x280>
    5f62:	3301      	adds	r3, #1
    5f64:	602b      	str	r3, [r5, #0]
    5f66:	682b      	ldr	r3, [r5, #0]
    5f68:	4924      	ldr	r1, [pc, #144]	; (5ffc <__ssvfiscanf_r+0x2f0>)
    5f6a:	781a      	ldrb	r2, [r3, #0]
    5f6c:	6809      	ldr	r1, [r1, #0]
    5f6e:	188a      	adds	r2, r1, r2
    5f70:	2108      	movs	r1, #8
    5f72:	7852      	ldrb	r2, [r2, #1]
    5f74:	420a      	tst	r2, r1
    5f76:	d1eb      	bne.n	5f50 <__ssvfiscanf_r+0x244>
    5f78:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    5f7a:	2b02      	cmp	r3, #2
    5f7c:	dc12      	bgt.n	5fa4 <__ssvfiscanf_r+0x298>
    5f7e:	ab03      	add	r3, sp, #12
    5f80:	002a      	movs	r2, r5
    5f82:	a945      	add	r1, sp, #276	; 0x114
    5f84:	9800      	ldr	r0, [sp, #0]
    5f86:	f000 f9cf 	bl	6328 <_scanf_chars>
    5f8a:	e01e      	b.n	5fca <__ssvfiscanf_r+0x2be>
    5f8c:	2286      	movs	r2, #134	; 0x86
    5f8e:	ab02      	add	r3, sp, #8
    5f90:	0052      	lsls	r2, r2, #1
    5f92:	189b      	adds	r3, r3, r2
    5f94:	599b      	ldr	r3, [r3, r6]
    5f96:	0029      	movs	r1, r5
    5f98:	9800      	ldr	r0, [sp, #0]
    5f9a:	9301      	str	r3, [sp, #4]
    5f9c:	4798      	blx	r3
    5f9e:	2800      	cmp	r0, #0
    5fa0:	d0e1      	beq.n	5f66 <__ssvfiscanf_r+0x25a>
    5fa2:	e775      	b.n	5e90 <__ssvfiscanf_r+0x184>
    5fa4:	2b04      	cmp	r3, #4
    5fa6:	dc06      	bgt.n	5fb6 <__ssvfiscanf_r+0x2aa>
    5fa8:	ab03      	add	r3, sp, #12
    5faa:	002a      	movs	r2, r5
    5fac:	a945      	add	r1, sp, #276	; 0x114
    5fae:	9800      	ldr	r0, [sp, #0]
    5fb0:	f000 fa1c 	bl	63ec <_scanf_i>
    5fb4:	e009      	b.n	5fca <__ssvfiscanf_r+0x2be>
    5fb6:	4b13      	ldr	r3, [pc, #76]	; (6004 <__ssvfiscanf_r+0x2f8>)
    5fb8:	2b00      	cmp	r3, #0
    5fba:	d100      	bne.n	5fbe <__ssvfiscanf_r+0x2b2>
    5fbc:	e6ee      	b.n	5d9c <__ssvfiscanf_r+0x90>
    5fbe:	ab03      	add	r3, sp, #12
    5fc0:	002a      	movs	r2, r5
    5fc2:	a945      	add	r1, sp, #276	; 0x114
    5fc4:	9800      	ldr	r0, [sp, #0]
    5fc6:	e000      	b.n	5fca <__ssvfiscanf_r+0x2be>
    5fc8:	bf00      	nop
    5fca:	2801      	cmp	r0, #1
    5fcc:	d007      	beq.n	5fde <__ssvfiscanf_r+0x2d2>
    5fce:	2802      	cmp	r0, #2
    5fd0:	d000      	beq.n	5fd4 <__ssvfiscanf_r+0x2c8>
    5fd2:	e6e3      	b.n	5d9c <__ssvfiscanf_r+0x90>
    5fd4:	e75c      	b.n	5e90 <__ssvfiscanf_r+0x184>
    5fd6:	89ab      	ldrh	r3, [r5, #12]
    5fd8:	065b      	lsls	r3, r3, #25
    5fda:	d504      	bpl.n	5fe6 <__ssvfiscanf_r+0x2da>
    5fdc:	e001      	b.n	5fe2 <__ssvfiscanf_r+0x2d6>
    5fde:	9848      	ldr	r0, [sp, #288]	; 0x120
    5fe0:	e001      	b.n	5fe6 <__ssvfiscanf_r+0x2da>
    5fe2:	2001      	movs	r0, #1
    5fe4:	4240      	negs	r0, r0
    5fe6:	23a7      	movs	r3, #167	; 0xa7
    5fe8:	009b      	lsls	r3, r3, #2
    5fea:	449d      	add	sp, r3
    5fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fee:	46c0      	nop			; (mov r8, r8)
    5ff0:	fffffd64 	.word	0xfffffd64
    5ff4:	00005c55 	.word	0x00005c55
    5ff8:	00005ccd 	.word	0x00005ccd
    5ffc:	20000280 	.word	0x20000280
    6000:	00006ffb 	.word	0x00006ffb
    6004:	00000000 	.word	0x00000000

00006008 <_printf_common>:
    6008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    600a:	0017      	movs	r7, r2
    600c:	9301      	str	r3, [sp, #4]
    600e:	688a      	ldr	r2, [r1, #8]
    6010:	690b      	ldr	r3, [r1, #16]
    6012:	9000      	str	r0, [sp, #0]
    6014:	000c      	movs	r4, r1
    6016:	4293      	cmp	r3, r2
    6018:	da00      	bge.n	601c <_printf_common+0x14>
    601a:	0013      	movs	r3, r2
    601c:	0022      	movs	r2, r4
    601e:	603b      	str	r3, [r7, #0]
    6020:	3243      	adds	r2, #67	; 0x43
    6022:	7812      	ldrb	r2, [r2, #0]
    6024:	2a00      	cmp	r2, #0
    6026:	d001      	beq.n	602c <_printf_common+0x24>
    6028:	3301      	adds	r3, #1
    602a:	603b      	str	r3, [r7, #0]
    602c:	6823      	ldr	r3, [r4, #0]
    602e:	069b      	lsls	r3, r3, #26
    6030:	d502      	bpl.n	6038 <_printf_common+0x30>
    6032:	683b      	ldr	r3, [r7, #0]
    6034:	3302      	adds	r3, #2
    6036:	603b      	str	r3, [r7, #0]
    6038:	2506      	movs	r5, #6
    603a:	6823      	ldr	r3, [r4, #0]
    603c:	401d      	ands	r5, r3
    603e:	d01e      	beq.n	607e <_printf_common+0x76>
    6040:	0023      	movs	r3, r4
    6042:	3343      	adds	r3, #67	; 0x43
    6044:	781b      	ldrb	r3, [r3, #0]
    6046:	1e5a      	subs	r2, r3, #1
    6048:	4193      	sbcs	r3, r2
    604a:	6822      	ldr	r2, [r4, #0]
    604c:	0692      	lsls	r2, r2, #26
    604e:	d51c      	bpl.n	608a <_printf_common+0x82>
    6050:	2030      	movs	r0, #48	; 0x30
    6052:	18e1      	adds	r1, r4, r3
    6054:	3143      	adds	r1, #67	; 0x43
    6056:	7008      	strb	r0, [r1, #0]
    6058:	0021      	movs	r1, r4
    605a:	1c5a      	adds	r2, r3, #1
    605c:	3145      	adds	r1, #69	; 0x45
    605e:	7809      	ldrb	r1, [r1, #0]
    6060:	18a2      	adds	r2, r4, r2
    6062:	3243      	adds	r2, #67	; 0x43
    6064:	3302      	adds	r3, #2
    6066:	7011      	strb	r1, [r2, #0]
    6068:	e00f      	b.n	608a <_printf_common+0x82>
    606a:	0022      	movs	r2, r4
    606c:	2301      	movs	r3, #1
    606e:	3219      	adds	r2, #25
    6070:	9901      	ldr	r1, [sp, #4]
    6072:	9800      	ldr	r0, [sp, #0]
    6074:	9e08      	ldr	r6, [sp, #32]
    6076:	47b0      	blx	r6
    6078:	1c43      	adds	r3, r0, #1
    607a:	d00e      	beq.n	609a <_printf_common+0x92>
    607c:	3501      	adds	r5, #1
    607e:	68e3      	ldr	r3, [r4, #12]
    6080:	683a      	ldr	r2, [r7, #0]
    6082:	1a9b      	subs	r3, r3, r2
    6084:	429d      	cmp	r5, r3
    6086:	dbf0      	blt.n	606a <_printf_common+0x62>
    6088:	e7da      	b.n	6040 <_printf_common+0x38>
    608a:	0022      	movs	r2, r4
    608c:	9901      	ldr	r1, [sp, #4]
    608e:	3243      	adds	r2, #67	; 0x43
    6090:	9800      	ldr	r0, [sp, #0]
    6092:	9d08      	ldr	r5, [sp, #32]
    6094:	47a8      	blx	r5
    6096:	1c43      	adds	r3, r0, #1
    6098:	d102      	bne.n	60a0 <_printf_common+0x98>
    609a:	2001      	movs	r0, #1
    609c:	4240      	negs	r0, r0
    609e:	e020      	b.n	60e2 <_printf_common+0xda>
    60a0:	2306      	movs	r3, #6
    60a2:	6820      	ldr	r0, [r4, #0]
    60a4:	68e1      	ldr	r1, [r4, #12]
    60a6:	683a      	ldr	r2, [r7, #0]
    60a8:	4003      	ands	r3, r0
    60aa:	2500      	movs	r5, #0
    60ac:	2b04      	cmp	r3, #4
    60ae:	d103      	bne.n	60b8 <_printf_common+0xb0>
    60b0:	1a8d      	subs	r5, r1, r2
    60b2:	43eb      	mvns	r3, r5
    60b4:	17db      	asrs	r3, r3, #31
    60b6:	401d      	ands	r5, r3
    60b8:	68a3      	ldr	r3, [r4, #8]
    60ba:	6922      	ldr	r2, [r4, #16]
    60bc:	4293      	cmp	r3, r2
    60be:	dd01      	ble.n	60c4 <_printf_common+0xbc>
    60c0:	1a9b      	subs	r3, r3, r2
    60c2:	18ed      	adds	r5, r5, r3
    60c4:	2700      	movs	r7, #0
    60c6:	42bd      	cmp	r5, r7
    60c8:	d00a      	beq.n	60e0 <_printf_common+0xd8>
    60ca:	0022      	movs	r2, r4
    60cc:	2301      	movs	r3, #1
    60ce:	321a      	adds	r2, #26
    60d0:	9901      	ldr	r1, [sp, #4]
    60d2:	9800      	ldr	r0, [sp, #0]
    60d4:	9e08      	ldr	r6, [sp, #32]
    60d6:	47b0      	blx	r6
    60d8:	1c43      	adds	r3, r0, #1
    60da:	d0de      	beq.n	609a <_printf_common+0x92>
    60dc:	3701      	adds	r7, #1
    60de:	e7f2      	b.n	60c6 <_printf_common+0xbe>
    60e0:	2000      	movs	r0, #0
    60e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000060e4 <_printf_i>:
    60e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    60e6:	b08b      	sub	sp, #44	; 0x2c
    60e8:	9206      	str	r2, [sp, #24]
    60ea:	000a      	movs	r2, r1
    60ec:	3243      	adds	r2, #67	; 0x43
    60ee:	9307      	str	r3, [sp, #28]
    60f0:	9005      	str	r0, [sp, #20]
    60f2:	9204      	str	r2, [sp, #16]
    60f4:	7e0a      	ldrb	r2, [r1, #24]
    60f6:	000c      	movs	r4, r1
    60f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    60fa:	2a6e      	cmp	r2, #110	; 0x6e
    60fc:	d100      	bne.n	6100 <_printf_i+0x1c>
    60fe:	e0ab      	b.n	6258 <_printf_i+0x174>
    6100:	d811      	bhi.n	6126 <_printf_i+0x42>
    6102:	2a63      	cmp	r2, #99	; 0x63
    6104:	d022      	beq.n	614c <_printf_i+0x68>
    6106:	d809      	bhi.n	611c <_printf_i+0x38>
    6108:	2a00      	cmp	r2, #0
    610a:	d100      	bne.n	610e <_printf_i+0x2a>
    610c:	e0b5      	b.n	627a <_printf_i+0x196>
    610e:	2a58      	cmp	r2, #88	; 0x58
    6110:	d000      	beq.n	6114 <_printf_i+0x30>
    6112:	e0c5      	b.n	62a0 <_printf_i+0x1bc>
    6114:	3145      	adds	r1, #69	; 0x45
    6116:	700a      	strb	r2, [r1, #0]
    6118:	4a81      	ldr	r2, [pc, #516]	; (6320 <_printf_i+0x23c>)
    611a:	e04f      	b.n	61bc <_printf_i+0xd8>
    611c:	2a64      	cmp	r2, #100	; 0x64
    611e:	d01d      	beq.n	615c <_printf_i+0x78>
    6120:	2a69      	cmp	r2, #105	; 0x69
    6122:	d01b      	beq.n	615c <_printf_i+0x78>
    6124:	e0bc      	b.n	62a0 <_printf_i+0x1bc>
    6126:	2a73      	cmp	r2, #115	; 0x73
    6128:	d100      	bne.n	612c <_printf_i+0x48>
    612a:	e0aa      	b.n	6282 <_printf_i+0x19e>
    612c:	d809      	bhi.n	6142 <_printf_i+0x5e>
    612e:	2a6f      	cmp	r2, #111	; 0x6f
    6130:	d029      	beq.n	6186 <_printf_i+0xa2>
    6132:	2a70      	cmp	r2, #112	; 0x70
    6134:	d000      	beq.n	6138 <_printf_i+0x54>
    6136:	e0b3      	b.n	62a0 <_printf_i+0x1bc>
    6138:	2220      	movs	r2, #32
    613a:	6809      	ldr	r1, [r1, #0]
    613c:	430a      	orrs	r2, r1
    613e:	6022      	str	r2, [r4, #0]
    6140:	e037      	b.n	61b2 <_printf_i+0xce>
    6142:	2a75      	cmp	r2, #117	; 0x75
    6144:	d01f      	beq.n	6186 <_printf_i+0xa2>
    6146:	2a78      	cmp	r2, #120	; 0x78
    6148:	d033      	beq.n	61b2 <_printf_i+0xce>
    614a:	e0a9      	b.n	62a0 <_printf_i+0x1bc>
    614c:	000e      	movs	r6, r1
    614e:	681a      	ldr	r2, [r3, #0]
    6150:	3642      	adds	r6, #66	; 0x42
    6152:	1d11      	adds	r1, r2, #4
    6154:	6019      	str	r1, [r3, #0]
    6156:	6813      	ldr	r3, [r2, #0]
    6158:	7033      	strb	r3, [r6, #0]
    615a:	e0a4      	b.n	62a6 <_printf_i+0x1c2>
    615c:	6821      	ldr	r1, [r4, #0]
    615e:	681a      	ldr	r2, [r3, #0]
    6160:	0608      	lsls	r0, r1, #24
    6162:	d406      	bmi.n	6172 <_printf_i+0x8e>
    6164:	0649      	lsls	r1, r1, #25
    6166:	d504      	bpl.n	6172 <_printf_i+0x8e>
    6168:	1d11      	adds	r1, r2, #4
    616a:	6019      	str	r1, [r3, #0]
    616c:	2300      	movs	r3, #0
    616e:	5ed5      	ldrsh	r5, [r2, r3]
    6170:	e002      	b.n	6178 <_printf_i+0x94>
    6172:	1d11      	adds	r1, r2, #4
    6174:	6019      	str	r1, [r3, #0]
    6176:	6815      	ldr	r5, [r2, #0]
    6178:	2d00      	cmp	r5, #0
    617a:	da3b      	bge.n	61f4 <_printf_i+0x110>
    617c:	232d      	movs	r3, #45	; 0x2d
    617e:	9a04      	ldr	r2, [sp, #16]
    6180:	426d      	negs	r5, r5
    6182:	7013      	strb	r3, [r2, #0]
    6184:	e036      	b.n	61f4 <_printf_i+0x110>
    6186:	6821      	ldr	r1, [r4, #0]
    6188:	681a      	ldr	r2, [r3, #0]
    618a:	0608      	lsls	r0, r1, #24
    618c:	d406      	bmi.n	619c <_printf_i+0xb8>
    618e:	0649      	lsls	r1, r1, #25
    6190:	d504      	bpl.n	619c <_printf_i+0xb8>
    6192:	6815      	ldr	r5, [r2, #0]
    6194:	1d11      	adds	r1, r2, #4
    6196:	6019      	str	r1, [r3, #0]
    6198:	b2ad      	uxth	r5, r5
    619a:	e002      	b.n	61a2 <_printf_i+0xbe>
    619c:	1d11      	adds	r1, r2, #4
    619e:	6019      	str	r1, [r3, #0]
    61a0:	6815      	ldr	r5, [r2, #0]
    61a2:	4b5f      	ldr	r3, [pc, #380]	; (6320 <_printf_i+0x23c>)
    61a4:	7e22      	ldrb	r2, [r4, #24]
    61a6:	9303      	str	r3, [sp, #12]
    61a8:	2708      	movs	r7, #8
    61aa:	2a6f      	cmp	r2, #111	; 0x6f
    61ac:	d01d      	beq.n	61ea <_printf_i+0x106>
    61ae:	270a      	movs	r7, #10
    61b0:	e01b      	b.n	61ea <_printf_i+0x106>
    61b2:	0022      	movs	r2, r4
    61b4:	2178      	movs	r1, #120	; 0x78
    61b6:	3245      	adds	r2, #69	; 0x45
    61b8:	7011      	strb	r1, [r2, #0]
    61ba:	4a5a      	ldr	r2, [pc, #360]	; (6324 <_printf_i+0x240>)
    61bc:	6819      	ldr	r1, [r3, #0]
    61be:	9203      	str	r2, [sp, #12]
    61c0:	1d08      	adds	r0, r1, #4
    61c2:	6822      	ldr	r2, [r4, #0]
    61c4:	6018      	str	r0, [r3, #0]
    61c6:	680d      	ldr	r5, [r1, #0]
    61c8:	0610      	lsls	r0, r2, #24
    61ca:	d402      	bmi.n	61d2 <_printf_i+0xee>
    61cc:	0650      	lsls	r0, r2, #25
    61ce:	d500      	bpl.n	61d2 <_printf_i+0xee>
    61d0:	b2ad      	uxth	r5, r5
    61d2:	07d3      	lsls	r3, r2, #31
    61d4:	d502      	bpl.n	61dc <_printf_i+0xf8>
    61d6:	2320      	movs	r3, #32
    61d8:	431a      	orrs	r2, r3
    61da:	6022      	str	r2, [r4, #0]
    61dc:	2710      	movs	r7, #16
    61de:	2d00      	cmp	r5, #0
    61e0:	d103      	bne.n	61ea <_printf_i+0x106>
    61e2:	2320      	movs	r3, #32
    61e4:	6822      	ldr	r2, [r4, #0]
    61e6:	439a      	bics	r2, r3
    61e8:	6022      	str	r2, [r4, #0]
    61ea:	0023      	movs	r3, r4
    61ec:	2200      	movs	r2, #0
    61ee:	3343      	adds	r3, #67	; 0x43
    61f0:	701a      	strb	r2, [r3, #0]
    61f2:	e002      	b.n	61fa <_printf_i+0x116>
    61f4:	270a      	movs	r7, #10
    61f6:	4b4a      	ldr	r3, [pc, #296]	; (6320 <_printf_i+0x23c>)
    61f8:	9303      	str	r3, [sp, #12]
    61fa:	6863      	ldr	r3, [r4, #4]
    61fc:	60a3      	str	r3, [r4, #8]
    61fe:	2b00      	cmp	r3, #0
    6200:	db09      	blt.n	6216 <_printf_i+0x132>
    6202:	2204      	movs	r2, #4
    6204:	6821      	ldr	r1, [r4, #0]
    6206:	4391      	bics	r1, r2
    6208:	6021      	str	r1, [r4, #0]
    620a:	2d00      	cmp	r5, #0
    620c:	d105      	bne.n	621a <_printf_i+0x136>
    620e:	9e04      	ldr	r6, [sp, #16]
    6210:	2b00      	cmp	r3, #0
    6212:	d011      	beq.n	6238 <_printf_i+0x154>
    6214:	e07b      	b.n	630e <_printf_i+0x22a>
    6216:	2d00      	cmp	r5, #0
    6218:	d079      	beq.n	630e <_printf_i+0x22a>
    621a:	9e04      	ldr	r6, [sp, #16]
    621c:	0028      	movs	r0, r5
    621e:	0039      	movs	r1, r7
    6220:	f7ff f8e2 	bl	53e8 <__aeabi_uidivmod>
    6224:	9b03      	ldr	r3, [sp, #12]
    6226:	3e01      	subs	r6, #1
    6228:	5c5b      	ldrb	r3, [r3, r1]
    622a:	0028      	movs	r0, r5
    622c:	7033      	strb	r3, [r6, #0]
    622e:	0039      	movs	r1, r7
    6230:	f7ff f854 	bl	52dc <__aeabi_uidiv>
    6234:	1e05      	subs	r5, r0, #0
    6236:	d1f1      	bne.n	621c <_printf_i+0x138>
    6238:	2f08      	cmp	r7, #8
    623a:	d109      	bne.n	6250 <_printf_i+0x16c>
    623c:	6823      	ldr	r3, [r4, #0]
    623e:	07db      	lsls	r3, r3, #31
    6240:	d506      	bpl.n	6250 <_printf_i+0x16c>
    6242:	6863      	ldr	r3, [r4, #4]
    6244:	6922      	ldr	r2, [r4, #16]
    6246:	4293      	cmp	r3, r2
    6248:	dc02      	bgt.n	6250 <_printf_i+0x16c>
    624a:	2330      	movs	r3, #48	; 0x30
    624c:	3e01      	subs	r6, #1
    624e:	7033      	strb	r3, [r6, #0]
    6250:	9b04      	ldr	r3, [sp, #16]
    6252:	1b9b      	subs	r3, r3, r6
    6254:	6123      	str	r3, [r4, #16]
    6256:	e02b      	b.n	62b0 <_printf_i+0x1cc>
    6258:	6809      	ldr	r1, [r1, #0]
    625a:	681a      	ldr	r2, [r3, #0]
    625c:	0608      	lsls	r0, r1, #24
    625e:	d407      	bmi.n	6270 <_printf_i+0x18c>
    6260:	0649      	lsls	r1, r1, #25
    6262:	d505      	bpl.n	6270 <_printf_i+0x18c>
    6264:	1d11      	adds	r1, r2, #4
    6266:	6019      	str	r1, [r3, #0]
    6268:	6813      	ldr	r3, [r2, #0]
    626a:	8aa2      	ldrh	r2, [r4, #20]
    626c:	801a      	strh	r2, [r3, #0]
    626e:	e004      	b.n	627a <_printf_i+0x196>
    6270:	1d11      	adds	r1, r2, #4
    6272:	6019      	str	r1, [r3, #0]
    6274:	6813      	ldr	r3, [r2, #0]
    6276:	6962      	ldr	r2, [r4, #20]
    6278:	601a      	str	r2, [r3, #0]
    627a:	2300      	movs	r3, #0
    627c:	9e04      	ldr	r6, [sp, #16]
    627e:	6123      	str	r3, [r4, #16]
    6280:	e016      	b.n	62b0 <_printf_i+0x1cc>
    6282:	681a      	ldr	r2, [r3, #0]
    6284:	1d11      	adds	r1, r2, #4
    6286:	6019      	str	r1, [r3, #0]
    6288:	6816      	ldr	r6, [r2, #0]
    628a:	2100      	movs	r1, #0
    628c:	6862      	ldr	r2, [r4, #4]
    628e:	0030      	movs	r0, r6
    6290:	f000 fb32 	bl	68f8 <memchr>
    6294:	2800      	cmp	r0, #0
    6296:	d001      	beq.n	629c <_printf_i+0x1b8>
    6298:	1b80      	subs	r0, r0, r6
    629a:	6060      	str	r0, [r4, #4]
    629c:	6863      	ldr	r3, [r4, #4]
    629e:	e003      	b.n	62a8 <_printf_i+0x1c4>
    62a0:	0026      	movs	r6, r4
    62a2:	3642      	adds	r6, #66	; 0x42
    62a4:	7032      	strb	r2, [r6, #0]
    62a6:	2301      	movs	r3, #1
    62a8:	6123      	str	r3, [r4, #16]
    62aa:	2300      	movs	r3, #0
    62ac:	9a04      	ldr	r2, [sp, #16]
    62ae:	7013      	strb	r3, [r2, #0]
    62b0:	9b07      	ldr	r3, [sp, #28]
    62b2:	aa09      	add	r2, sp, #36	; 0x24
    62b4:	9300      	str	r3, [sp, #0]
    62b6:	0021      	movs	r1, r4
    62b8:	9b06      	ldr	r3, [sp, #24]
    62ba:	9805      	ldr	r0, [sp, #20]
    62bc:	f7ff fea4 	bl	6008 <_printf_common>
    62c0:	1c43      	adds	r3, r0, #1
    62c2:	d102      	bne.n	62ca <_printf_i+0x1e6>
    62c4:	2001      	movs	r0, #1
    62c6:	4240      	negs	r0, r0
    62c8:	e027      	b.n	631a <_printf_i+0x236>
    62ca:	6923      	ldr	r3, [r4, #16]
    62cc:	0032      	movs	r2, r6
    62ce:	9906      	ldr	r1, [sp, #24]
    62d0:	9805      	ldr	r0, [sp, #20]
    62d2:	9d07      	ldr	r5, [sp, #28]
    62d4:	47a8      	blx	r5
    62d6:	1c43      	adds	r3, r0, #1
    62d8:	d0f4      	beq.n	62c4 <_printf_i+0x1e0>
    62da:	6823      	ldr	r3, [r4, #0]
    62dc:	2500      	movs	r5, #0
    62de:	079b      	lsls	r3, r3, #30
    62e0:	d40f      	bmi.n	6302 <_printf_i+0x21e>
    62e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    62e4:	68e0      	ldr	r0, [r4, #12]
    62e6:	4298      	cmp	r0, r3
    62e8:	da17      	bge.n	631a <_printf_i+0x236>
    62ea:	0018      	movs	r0, r3
    62ec:	e015      	b.n	631a <_printf_i+0x236>
    62ee:	0022      	movs	r2, r4
    62f0:	2301      	movs	r3, #1
    62f2:	3219      	adds	r2, #25
    62f4:	9906      	ldr	r1, [sp, #24]
    62f6:	9805      	ldr	r0, [sp, #20]
    62f8:	9e07      	ldr	r6, [sp, #28]
    62fa:	47b0      	blx	r6
    62fc:	1c43      	adds	r3, r0, #1
    62fe:	d0e1      	beq.n	62c4 <_printf_i+0x1e0>
    6300:	3501      	adds	r5, #1
    6302:	68e3      	ldr	r3, [r4, #12]
    6304:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6306:	1a9b      	subs	r3, r3, r2
    6308:	429d      	cmp	r5, r3
    630a:	dbf0      	blt.n	62ee <_printf_i+0x20a>
    630c:	e7e9      	b.n	62e2 <_printf_i+0x1fe>
    630e:	0026      	movs	r6, r4
    6310:	9b03      	ldr	r3, [sp, #12]
    6312:	3642      	adds	r6, #66	; 0x42
    6314:	781b      	ldrb	r3, [r3, #0]
    6316:	7033      	strb	r3, [r6, #0]
    6318:	e78e      	b.n	6238 <_printf_i+0x154>
    631a:	b00b      	add	sp, #44	; 0x2c
    631c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    631e:	46c0      	nop			; (mov r8, r8)
    6320:	00007006 	.word	0x00007006
    6324:	00007017 	.word	0x00007017

00006328 <_scanf_chars>:
    6328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    632a:	0015      	movs	r5, r2
    632c:	688a      	ldr	r2, [r1, #8]
    632e:	9001      	str	r0, [sp, #4]
    6330:	000c      	movs	r4, r1
    6332:	2a00      	cmp	r2, #0
    6334:	d106      	bne.n	6344 <_scanf_chars+0x1c>
    6336:	698a      	ldr	r2, [r1, #24]
    6338:	1e51      	subs	r1, r2, #1
    633a:	418a      	sbcs	r2, r1
    633c:	2101      	movs	r1, #1
    633e:	4252      	negs	r2, r2
    6340:	430a      	orrs	r2, r1
    6342:	60a2      	str	r2, [r4, #8]
    6344:	6822      	ldr	r2, [r4, #0]
    6346:	06d2      	lsls	r2, r2, #27
    6348:	d403      	bmi.n	6352 <_scanf_chars+0x2a>
    634a:	681a      	ldr	r2, [r3, #0]
    634c:	1d11      	adds	r1, r2, #4
    634e:	6019      	str	r1, [r3, #0]
    6350:	6817      	ldr	r7, [r2, #0]
    6352:	2600      	movs	r6, #0
    6354:	69a0      	ldr	r0, [r4, #24]
    6356:	2800      	cmp	r0, #0
    6358:	d11e      	bne.n	6398 <_scanf_chars+0x70>
    635a:	2210      	movs	r2, #16
    635c:	6823      	ldr	r3, [r4, #0]
    635e:	3601      	adds	r6, #1
    6360:	4213      	tst	r3, r2
    6362:	d103      	bne.n	636c <_scanf_chars+0x44>
    6364:	682b      	ldr	r3, [r5, #0]
    6366:	781b      	ldrb	r3, [r3, #0]
    6368:	703b      	strb	r3, [r7, #0]
    636a:	3701      	adds	r7, #1
    636c:	682a      	ldr	r2, [r5, #0]
    636e:	686b      	ldr	r3, [r5, #4]
    6370:	3201      	adds	r2, #1
    6372:	602a      	str	r2, [r5, #0]
    6374:	68a2      	ldr	r2, [r4, #8]
    6376:	3b01      	subs	r3, #1
    6378:	3a01      	subs	r2, #1
    637a:	606b      	str	r3, [r5, #4]
    637c:	60a2      	str	r2, [r4, #8]
    637e:	2a00      	cmp	r2, #0
    6380:	d01e      	beq.n	63c0 <_scanf_chars+0x98>
    6382:	2b00      	cmp	r3, #0
    6384:	dce6      	bgt.n	6354 <_scanf_chars+0x2c>
    6386:	23c0      	movs	r3, #192	; 0xc0
    6388:	005b      	lsls	r3, r3, #1
    638a:	58e3      	ldr	r3, [r4, r3]
    638c:	0029      	movs	r1, r5
    638e:	9801      	ldr	r0, [sp, #4]
    6390:	4798      	blx	r3
    6392:	2800      	cmp	r0, #0
    6394:	d0de      	beq.n	6354 <_scanf_chars+0x2c>
    6396:	e013      	b.n	63c0 <_scanf_chars+0x98>
    6398:	2801      	cmp	r0, #1
    639a:	d106      	bne.n	63aa <_scanf_chars+0x82>
    639c:	682b      	ldr	r3, [r5, #0]
    639e:	6962      	ldr	r2, [r4, #20]
    63a0:	781b      	ldrb	r3, [r3, #0]
    63a2:	5cd3      	ldrb	r3, [r2, r3]
    63a4:	2b00      	cmp	r3, #0
    63a6:	d1d8      	bne.n	635a <_scanf_chars+0x32>
    63a8:	e01a      	b.n	63e0 <_scanf_chars+0xb8>
    63aa:	2802      	cmp	r0, #2
    63ac:	d108      	bne.n	63c0 <_scanf_chars+0x98>
    63ae:	682b      	ldr	r3, [r5, #0]
    63b0:	4a0d      	ldr	r2, [pc, #52]	; (63e8 <_scanf_chars+0xc0>)
    63b2:	781b      	ldrb	r3, [r3, #0]
    63b4:	6812      	ldr	r2, [r2, #0]
    63b6:	18d3      	adds	r3, r2, r3
    63b8:	2208      	movs	r2, #8
    63ba:	785b      	ldrb	r3, [r3, #1]
    63bc:	4213      	tst	r3, r2
    63be:	d0cc      	beq.n	635a <_scanf_chars+0x32>
    63c0:	2310      	movs	r3, #16
    63c2:	6822      	ldr	r2, [r4, #0]
    63c4:	4013      	ands	r3, r2
    63c6:	d106      	bne.n	63d6 <_scanf_chars+0xae>
    63c8:	68e2      	ldr	r2, [r4, #12]
    63ca:	3201      	adds	r2, #1
    63cc:	60e2      	str	r2, [r4, #12]
    63ce:	69a2      	ldr	r2, [r4, #24]
    63d0:	2a00      	cmp	r2, #0
    63d2:	d000      	beq.n	63d6 <_scanf_chars+0xae>
    63d4:	703b      	strb	r3, [r7, #0]
    63d6:	6923      	ldr	r3, [r4, #16]
    63d8:	2000      	movs	r0, #0
    63da:	199e      	adds	r6, r3, r6
    63dc:	6126      	str	r6, [r4, #16]
    63de:	e001      	b.n	63e4 <_scanf_chars+0xbc>
    63e0:	2e00      	cmp	r6, #0
    63e2:	d1ed      	bne.n	63c0 <_scanf_chars+0x98>
    63e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    63e6:	46c0      	nop			; (mov r8, r8)
    63e8:	20000280 	.word	0x20000280

000063ec <_scanf_i>:
    63ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    63ee:	000c      	movs	r4, r1
    63f0:	b08d      	sub	sp, #52	; 0x34
    63f2:	9302      	str	r3, [sp, #8]
    63f4:	4b77      	ldr	r3, [pc, #476]	; (65d4 <_scanf_i+0x1e8>)
    63f6:	9005      	str	r0, [sp, #20]
    63f8:	0016      	movs	r6, r2
    63fa:	aa09      	add	r2, sp, #36	; 0x24
    63fc:	cb23      	ldmia	r3!, {r0, r1, r5}
    63fe:	c223      	stmia	r2!, {r0, r1, r5}
    6400:	4b75      	ldr	r3, [pc, #468]	; (65d8 <_scanf_i+0x1ec>)
    6402:	9306      	str	r3, [sp, #24]
    6404:	69a3      	ldr	r3, [r4, #24]
    6406:	2b03      	cmp	r3, #3
    6408:	d001      	beq.n	640e <_scanf_i+0x22>
    640a:	4b74      	ldr	r3, [pc, #464]	; (65dc <_scanf_i+0x1f0>)
    640c:	9306      	str	r3, [sp, #24]
    640e:	2200      	movs	r2, #0
    6410:	68a3      	ldr	r3, [r4, #8]
    6412:	9204      	str	r2, [sp, #16]
    6414:	325d      	adds	r2, #93	; 0x5d
    6416:	1e59      	subs	r1, r3, #1
    6418:	32ff      	adds	r2, #255	; 0xff
    641a:	4291      	cmp	r1, r2
    641c:	d905      	bls.n	642a <_scanf_i+0x3e>
    641e:	3b5e      	subs	r3, #94	; 0x5e
    6420:	3bff      	subs	r3, #255	; 0xff
    6422:	9304      	str	r3, [sp, #16]
    6424:	235e      	movs	r3, #94	; 0x5e
    6426:	33ff      	adds	r3, #255	; 0xff
    6428:	60a3      	str	r3, [r4, #8]
    642a:	0023      	movs	r3, r4
    642c:	331c      	adds	r3, #28
    642e:	9301      	str	r3, [sp, #4]
    6430:	23d0      	movs	r3, #208	; 0xd0
    6432:	2700      	movs	r7, #0
    6434:	6822      	ldr	r2, [r4, #0]
    6436:	011b      	lsls	r3, r3, #4
    6438:	4313      	orrs	r3, r2
    643a:	6023      	str	r3, [r4, #0]
    643c:	9b01      	ldr	r3, [sp, #4]
    643e:	9303      	str	r3, [sp, #12]
    6440:	6833      	ldr	r3, [r6, #0]
    6442:	a809      	add	r0, sp, #36	; 0x24
    6444:	7819      	ldrb	r1, [r3, #0]
    6446:	00bb      	lsls	r3, r7, #2
    6448:	2202      	movs	r2, #2
    644a:	5818      	ldr	r0, [r3, r0]
    644c:	f000 fa54 	bl	68f8 <memchr>
    6450:	2800      	cmp	r0, #0
    6452:	d03b      	beq.n	64cc <_scanf_i+0xe0>
    6454:	2f01      	cmp	r7, #1
    6456:	d10d      	bne.n	6474 <_scanf_i+0x88>
    6458:	6863      	ldr	r3, [r4, #4]
    645a:	2b00      	cmp	r3, #0
    645c:	d106      	bne.n	646c <_scanf_i+0x80>
    645e:	3308      	adds	r3, #8
    6460:	6822      	ldr	r2, [r4, #0]
    6462:	6063      	str	r3, [r4, #4]
    6464:	33f9      	adds	r3, #249	; 0xf9
    6466:	33ff      	adds	r3, #255	; 0xff
    6468:	4313      	orrs	r3, r2
    646a:	6023      	str	r3, [r4, #0]
    646c:	4b5c      	ldr	r3, [pc, #368]	; (65e0 <_scanf_i+0x1f4>)
    646e:	6822      	ldr	r2, [r4, #0]
    6470:	4013      	ands	r3, r2
    6472:	e00e      	b.n	6492 <_scanf_i+0xa6>
    6474:	2f02      	cmp	r7, #2
    6476:	d10d      	bne.n	6494 <_scanf_i+0xa8>
    6478:	21c0      	movs	r1, #192	; 0xc0
    647a:	2280      	movs	r2, #128	; 0x80
    647c:	6823      	ldr	r3, [r4, #0]
    647e:	00c9      	lsls	r1, r1, #3
    6480:	4019      	ands	r1, r3
    6482:	0092      	lsls	r2, r2, #2
    6484:	4291      	cmp	r1, r2
    6486:	d124      	bne.n	64d2 <_scanf_i+0xe6>
    6488:	3af1      	subs	r2, #241	; 0xf1
    648a:	3aff      	subs	r2, #255	; 0xff
    648c:	6062      	str	r2, [r4, #4]
    648e:	32f0      	adds	r2, #240	; 0xf0
    6490:	4313      	orrs	r3, r2
    6492:	6023      	str	r3, [r4, #0]
    6494:	68a3      	ldr	r3, [r4, #8]
    6496:	1e5a      	subs	r2, r3, #1
    6498:	60a2      	str	r2, [r4, #8]
    649a:	2b00      	cmp	r3, #0
    649c:	d016      	beq.n	64cc <_scanf_i+0xe0>
    649e:	9b03      	ldr	r3, [sp, #12]
    64a0:	1c5d      	adds	r5, r3, #1
    64a2:	6833      	ldr	r3, [r6, #0]
    64a4:	1c5a      	adds	r2, r3, #1
    64a6:	6032      	str	r2, [r6, #0]
    64a8:	781b      	ldrb	r3, [r3, #0]
    64aa:	9a03      	ldr	r2, [sp, #12]
    64ac:	9503      	str	r5, [sp, #12]
    64ae:	7013      	strb	r3, [r2, #0]
    64b0:	6873      	ldr	r3, [r6, #4]
    64b2:	3b01      	subs	r3, #1
    64b4:	6073      	str	r3, [r6, #4]
    64b6:	2b00      	cmp	r3, #0
    64b8:	dc08      	bgt.n	64cc <_scanf_i+0xe0>
    64ba:	23c0      	movs	r3, #192	; 0xc0
    64bc:	005b      	lsls	r3, r3, #1
    64be:	58e3      	ldr	r3, [r4, r3]
    64c0:	0031      	movs	r1, r6
    64c2:	9805      	ldr	r0, [sp, #20]
    64c4:	9307      	str	r3, [sp, #28]
    64c6:	4798      	blx	r3
    64c8:	2800      	cmp	r0, #0
    64ca:	d147      	bne.n	655c <_scanf_i+0x170>
    64cc:	3701      	adds	r7, #1
    64ce:	2f03      	cmp	r7, #3
    64d0:	d1b6      	bne.n	6440 <_scanf_i+0x54>
    64d2:	6863      	ldr	r3, [r4, #4]
    64d4:	2b00      	cmp	r3, #0
    64d6:	d101      	bne.n	64dc <_scanf_i+0xf0>
    64d8:	330a      	adds	r3, #10
    64da:	6063      	str	r3, [r4, #4]
    64dc:	2110      	movs	r1, #16
    64de:	2700      	movs	r7, #0
    64e0:	6863      	ldr	r3, [r4, #4]
    64e2:	6960      	ldr	r0, [r4, #20]
    64e4:	1ac9      	subs	r1, r1, r3
    64e6:	4b3f      	ldr	r3, [pc, #252]	; (65e4 <_scanf_i+0x1f8>)
    64e8:	18c9      	adds	r1, r1, r3
    64ea:	f000 f87f 	bl	65ec <__sccl>
    64ee:	9d03      	ldr	r5, [sp, #12]
    64f0:	68a3      	ldr	r3, [r4, #8]
    64f2:	2b00      	cmp	r3, #0
    64f4:	d033      	beq.n	655e <_scanf_i+0x172>
    64f6:	6832      	ldr	r2, [r6, #0]
    64f8:	6960      	ldr	r0, [r4, #20]
    64fa:	7811      	ldrb	r1, [r2, #0]
    64fc:	5c40      	ldrb	r0, [r0, r1]
    64fe:	2800      	cmp	r0, #0
    6500:	d02d      	beq.n	655e <_scanf_i+0x172>
    6502:	2930      	cmp	r1, #48	; 0x30
    6504:	d10d      	bne.n	6522 <_scanf_i+0x136>
    6506:	2080      	movs	r0, #128	; 0x80
    6508:	6821      	ldr	r1, [r4, #0]
    650a:	0100      	lsls	r0, r0, #4
    650c:	4201      	tst	r1, r0
    650e:	d008      	beq.n	6522 <_scanf_i+0x136>
    6510:	9a04      	ldr	r2, [sp, #16]
    6512:	3701      	adds	r7, #1
    6514:	2a00      	cmp	r2, #0
    6516:	d00b      	beq.n	6530 <_scanf_i+0x144>
    6518:	3a01      	subs	r2, #1
    651a:	3301      	adds	r3, #1
    651c:	9204      	str	r2, [sp, #16]
    651e:	60a3      	str	r3, [r4, #8]
    6520:	e006      	b.n	6530 <_scanf_i+0x144>
    6522:	6821      	ldr	r1, [r4, #0]
    6524:	4b30      	ldr	r3, [pc, #192]	; (65e8 <_scanf_i+0x1fc>)
    6526:	400b      	ands	r3, r1
    6528:	6023      	str	r3, [r4, #0]
    652a:	7813      	ldrb	r3, [r2, #0]
    652c:	702b      	strb	r3, [r5, #0]
    652e:	3501      	adds	r5, #1
    6530:	6873      	ldr	r3, [r6, #4]
    6532:	3b01      	subs	r3, #1
    6534:	6073      	str	r3, [r6, #4]
    6536:	2b00      	cmp	r3, #0
    6538:	dd03      	ble.n	6542 <_scanf_i+0x156>
    653a:	6833      	ldr	r3, [r6, #0]
    653c:	3301      	adds	r3, #1
    653e:	6033      	str	r3, [r6, #0]
    6540:	e008      	b.n	6554 <_scanf_i+0x168>
    6542:	23c0      	movs	r3, #192	; 0xc0
    6544:	005b      	lsls	r3, r3, #1
    6546:	58e3      	ldr	r3, [r4, r3]
    6548:	0031      	movs	r1, r6
    654a:	9805      	ldr	r0, [sp, #20]
    654c:	9303      	str	r3, [sp, #12]
    654e:	4798      	blx	r3
    6550:	2800      	cmp	r0, #0
    6552:	d104      	bne.n	655e <_scanf_i+0x172>
    6554:	68a3      	ldr	r3, [r4, #8]
    6556:	3b01      	subs	r3, #1
    6558:	60a3      	str	r3, [r4, #8]
    655a:	e7c9      	b.n	64f0 <_scanf_i+0x104>
    655c:	2700      	movs	r7, #0
    655e:	6823      	ldr	r3, [r4, #0]
    6560:	05db      	lsls	r3, r3, #23
    6562:	d50e      	bpl.n	6582 <_scanf_i+0x196>
    6564:	9b01      	ldr	r3, [sp, #4]
    6566:	429d      	cmp	r5, r3
    6568:	d907      	bls.n	657a <_scanf_i+0x18e>
    656a:	23be      	movs	r3, #190	; 0xbe
    656c:	3d01      	subs	r5, #1
    656e:	005b      	lsls	r3, r3, #1
    6570:	7829      	ldrb	r1, [r5, #0]
    6572:	58e3      	ldr	r3, [r4, r3]
    6574:	0032      	movs	r2, r6
    6576:	9805      	ldr	r0, [sp, #20]
    6578:	4798      	blx	r3
    657a:	9b01      	ldr	r3, [sp, #4]
    657c:	2001      	movs	r0, #1
    657e:	429d      	cmp	r5, r3
    6580:	d025      	beq.n	65ce <_scanf_i+0x1e2>
    6582:	2210      	movs	r2, #16
    6584:	6823      	ldr	r3, [r4, #0]
    6586:	401a      	ands	r2, r3
    6588:	d11a      	bne.n	65c0 <_scanf_i+0x1d4>
    658a:	702a      	strb	r2, [r5, #0]
    658c:	6863      	ldr	r3, [r4, #4]
    658e:	9901      	ldr	r1, [sp, #4]
    6590:	9805      	ldr	r0, [sp, #20]
    6592:	9e06      	ldr	r6, [sp, #24]
    6594:	47b0      	blx	r6
    6596:	9b02      	ldr	r3, [sp, #8]
    6598:	6822      	ldr	r2, [r4, #0]
    659a:	681b      	ldr	r3, [r3, #0]
    659c:	0691      	lsls	r1, r2, #26
    659e:	d407      	bmi.n	65b0 <_scanf_i+0x1c4>
    65a0:	07d1      	lsls	r1, r2, #31
    65a2:	d505      	bpl.n	65b0 <_scanf_i+0x1c4>
    65a4:	9902      	ldr	r1, [sp, #8]
    65a6:	1d1a      	adds	r2, r3, #4
    65a8:	600a      	str	r2, [r1, #0]
    65aa:	681b      	ldr	r3, [r3, #0]
    65ac:	8018      	strh	r0, [r3, #0]
    65ae:	e004      	b.n	65ba <_scanf_i+0x1ce>
    65b0:	9902      	ldr	r1, [sp, #8]
    65b2:	1d1a      	adds	r2, r3, #4
    65b4:	600a      	str	r2, [r1, #0]
    65b6:	681b      	ldr	r3, [r3, #0]
    65b8:	6018      	str	r0, [r3, #0]
    65ba:	68e3      	ldr	r3, [r4, #12]
    65bc:	3301      	adds	r3, #1
    65be:	60e3      	str	r3, [r4, #12]
    65c0:	2000      	movs	r0, #0
    65c2:	9b01      	ldr	r3, [sp, #4]
    65c4:	1aed      	subs	r5, r5, r3
    65c6:	6923      	ldr	r3, [r4, #16]
    65c8:	19ed      	adds	r5, r5, r7
    65ca:	195d      	adds	r5, r3, r5
    65cc:	6125      	str	r5, [r4, #16]
    65ce:	b00d      	add	sp, #52	; 0x34
    65d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    65d2:	46c0      	nop			; (mov r8, r8)
    65d4:	00007028 	.word	0x00007028
    65d8:	00006651 	.word	0x00006651
    65dc:	00006775 	.word	0x00006775
    65e0:	fffffaff 	.word	0xfffffaff
    65e4:	00007034 	.word	0x00007034
    65e8:	fffff6ff 	.word	0xfffff6ff

000065ec <__sccl>:
    65ec:	b570      	push	{r4, r5, r6, lr}
    65ee:	780b      	ldrb	r3, [r1, #0]
    65f0:	2b5e      	cmp	r3, #94	; 0x5e
    65f2:	d002      	beq.n	65fa <__sccl+0xe>
    65f4:	1c4a      	adds	r2, r1, #1
    65f6:	2500      	movs	r5, #0
    65f8:	e002      	b.n	6600 <__sccl+0x14>
    65fa:	2501      	movs	r5, #1
    65fc:	784b      	ldrb	r3, [r1, #1]
    65fe:	1c8a      	adds	r2, r1, #2
    6600:	0001      	movs	r1, r0
    6602:	1c44      	adds	r4, r0, #1
    6604:	34ff      	adds	r4, #255	; 0xff
    6606:	700d      	strb	r5, [r1, #0]
    6608:	3101      	adds	r1, #1
    660a:	42a1      	cmp	r1, r4
    660c:	d1fb      	bne.n	6606 <__sccl+0x1a>
    660e:	2b00      	cmp	r3, #0
    6610:	d101      	bne.n	6616 <__sccl+0x2a>
    6612:	1e50      	subs	r0, r2, #1
    6614:	e01b      	b.n	664e <__sccl+0x62>
    6616:	2101      	movs	r1, #1
    6618:	404d      	eors	r5, r1
    661a:	0011      	movs	r1, r2
    661c:	54c5      	strb	r5, [r0, r3]
    661e:	780c      	ldrb	r4, [r1, #0]
    6620:	1c4a      	adds	r2, r1, #1
    6622:	2c2d      	cmp	r4, #45	; 0x2d
    6624:	d007      	beq.n	6636 <__sccl+0x4a>
    6626:	2c5d      	cmp	r4, #93	; 0x5d
    6628:	d010      	beq.n	664c <__sccl+0x60>
    662a:	2c00      	cmp	r4, #0
    662c:	d001      	beq.n	6632 <__sccl+0x46>
    662e:	0023      	movs	r3, r4
    6630:	e7f3      	b.n	661a <__sccl+0x2e>
    6632:	0008      	movs	r0, r1
    6634:	e00b      	b.n	664e <__sccl+0x62>
    6636:	784e      	ldrb	r6, [r1, #1]
    6638:	2e5d      	cmp	r6, #93	; 0x5d
    663a:	d0f8      	beq.n	662e <__sccl+0x42>
    663c:	42b3      	cmp	r3, r6
    663e:	dcf6      	bgt.n	662e <__sccl+0x42>
    6640:	3102      	adds	r1, #2
    6642:	3301      	adds	r3, #1
    6644:	54c5      	strb	r5, [r0, r3]
    6646:	429e      	cmp	r6, r3
    6648:	dcfb      	bgt.n	6642 <__sccl+0x56>
    664a:	e7e8      	b.n	661e <__sccl+0x32>
    664c:	0010      	movs	r0, r2
    664e:	bd70      	pop	{r4, r5, r6, pc}

00006650 <_strtol_r>:
    6650:	b5f0      	push	{r4, r5, r6, r7, lr}
    6652:	001e      	movs	r6, r3
    6654:	4b45      	ldr	r3, [pc, #276]	; (676c <_strtol_r+0x11c>)
    6656:	b087      	sub	sp, #28
    6658:	681b      	ldr	r3, [r3, #0]
    665a:	9201      	str	r2, [sp, #4]
    665c:	9302      	str	r3, [sp, #8]
    665e:	2208      	movs	r2, #8
    6660:	000b      	movs	r3, r1
    6662:	9005      	str	r0, [sp, #20]
    6664:	9103      	str	r1, [sp, #12]
    6666:	781c      	ldrb	r4, [r3, #0]
    6668:	9902      	ldr	r1, [sp, #8]
    666a:	1c5d      	adds	r5, r3, #1
    666c:	1909      	adds	r1, r1, r4
    666e:	7848      	ldrb	r0, [r1, #1]
    6670:	4010      	ands	r0, r2
    6672:	d001      	beq.n	6678 <_strtol_r+0x28>
    6674:	002b      	movs	r3, r5
    6676:	e7f6      	b.n	6666 <_strtol_r+0x16>
    6678:	2c2d      	cmp	r4, #45	; 0x2d
    667a:	d104      	bne.n	6686 <_strtol_r+0x36>
    667c:	1c9d      	adds	r5, r3, #2
    667e:	785c      	ldrb	r4, [r3, #1]
    6680:	2301      	movs	r3, #1
    6682:	9300      	str	r3, [sp, #0]
    6684:	e004      	b.n	6690 <_strtol_r+0x40>
    6686:	9000      	str	r0, [sp, #0]
    6688:	2c2b      	cmp	r4, #43	; 0x2b
    668a:	d101      	bne.n	6690 <_strtol_r+0x40>
    668c:	785c      	ldrb	r4, [r3, #1]
    668e:	1c9d      	adds	r5, r3, #2
    6690:	2e00      	cmp	r6, #0
    6692:	d002      	beq.n	669a <_strtol_r+0x4a>
    6694:	2e10      	cmp	r6, #16
    6696:	d10a      	bne.n	66ae <_strtol_r+0x5e>
    6698:	e062      	b.n	6760 <_strtol_r+0x110>
    669a:	2c30      	cmp	r4, #48	; 0x30
    669c:	d15e      	bne.n	675c <_strtol_r+0x10c>
    669e:	2220      	movs	r2, #32
    66a0:	782b      	ldrb	r3, [r5, #0]
    66a2:	4393      	bics	r3, r2
    66a4:	2b58      	cmp	r3, #88	; 0x58
    66a6:	d154      	bne.n	6752 <_strtol_r+0x102>
    66a8:	2610      	movs	r6, #16
    66aa:	786c      	ldrb	r4, [r5, #1]
    66ac:	3502      	adds	r5, #2
    66ae:	9f00      	ldr	r7, [sp, #0]
    66b0:	0031      	movs	r1, r6
    66b2:	1e7b      	subs	r3, r7, #1
    66b4:	419f      	sbcs	r7, r3
    66b6:	4b2e      	ldr	r3, [pc, #184]	; (6770 <_strtol_r+0x120>)
    66b8:	18ff      	adds	r7, r7, r3
    66ba:	0038      	movs	r0, r7
    66bc:	f7fe fe94 	bl	53e8 <__aeabi_uidivmod>
    66c0:	0038      	movs	r0, r7
    66c2:	9104      	str	r1, [sp, #16]
    66c4:	0031      	movs	r1, r6
    66c6:	f7fe fe09 	bl	52dc <__aeabi_uidiv>
    66ca:	2300      	movs	r3, #0
    66cc:	2203      	movs	r2, #3
    66ce:	0007      	movs	r7, r0
    66d0:	4694      	mov	ip, r2
    66d2:	0018      	movs	r0, r3
    66d4:	9a02      	ldr	r2, [sp, #8]
    66d6:	1912      	adds	r2, r2, r4
    66d8:	7851      	ldrb	r1, [r2, #1]
    66da:	2204      	movs	r2, #4
    66dc:	4211      	tst	r1, r2
    66de:	d001      	beq.n	66e4 <_strtol_r+0x94>
    66e0:	3c30      	subs	r4, #48	; 0x30
    66e2:	e007      	b.n	66f4 <_strtol_r+0xa4>
    66e4:	4662      	mov	r2, ip
    66e6:	4011      	ands	r1, r2
    66e8:	d017      	beq.n	671a <_strtol_r+0xca>
    66ea:	2237      	movs	r2, #55	; 0x37
    66ec:	2901      	cmp	r1, #1
    66ee:	d000      	beq.n	66f2 <_strtol_r+0xa2>
    66f0:	3220      	adds	r2, #32
    66f2:	1aa4      	subs	r4, r4, r2
    66f4:	42a6      	cmp	r6, r4
    66f6:	dd10      	ble.n	671a <_strtol_r+0xca>
    66f8:	1c5a      	adds	r2, r3, #1
    66fa:	d00b      	beq.n	6714 <_strtol_r+0xc4>
    66fc:	42b8      	cmp	r0, r7
    66fe:	d807      	bhi.n	6710 <_strtol_r+0xc0>
    6700:	d102      	bne.n	6708 <_strtol_r+0xb8>
    6702:	9b04      	ldr	r3, [sp, #16]
    6704:	429c      	cmp	r4, r3
    6706:	dc03      	bgt.n	6710 <_strtol_r+0xc0>
    6708:	4370      	muls	r0, r6
    670a:	2301      	movs	r3, #1
    670c:	1820      	adds	r0, r4, r0
    670e:	e001      	b.n	6714 <_strtol_r+0xc4>
    6710:	2301      	movs	r3, #1
    6712:	425b      	negs	r3, r3
    6714:	782c      	ldrb	r4, [r5, #0]
    6716:	3501      	adds	r5, #1
    6718:	e7dc      	b.n	66d4 <_strtol_r+0x84>
    671a:	1c5a      	adds	r2, r3, #1
    671c:	d10b      	bne.n	6736 <_strtol_r+0xe6>
    671e:	9800      	ldr	r0, [sp, #0]
    6720:	9a05      	ldr	r2, [sp, #20]
    6722:	1e43      	subs	r3, r0, #1
    6724:	4198      	sbcs	r0, r3
    6726:	4b12      	ldr	r3, [pc, #72]	; (6770 <_strtol_r+0x120>)
    6728:	18c0      	adds	r0, r0, r3
    672a:	2322      	movs	r3, #34	; 0x22
    672c:	6013      	str	r3, [r2, #0]
    672e:	9b01      	ldr	r3, [sp, #4]
    6730:	2b00      	cmp	r3, #0
    6732:	d10a      	bne.n	674a <_strtol_r+0xfa>
    6734:	e017      	b.n	6766 <_strtol_r+0x116>
    6736:	9a00      	ldr	r2, [sp, #0]
    6738:	2a00      	cmp	r2, #0
    673a:	d000      	beq.n	673e <_strtol_r+0xee>
    673c:	4240      	negs	r0, r0
    673e:	9a01      	ldr	r2, [sp, #4]
    6740:	2a00      	cmp	r2, #0
    6742:	d010      	beq.n	6766 <_strtol_r+0x116>
    6744:	9a03      	ldr	r2, [sp, #12]
    6746:	2b00      	cmp	r3, #0
    6748:	d000      	beq.n	674c <_strtol_r+0xfc>
    674a:	1e6a      	subs	r2, r5, #1
    674c:	9b01      	ldr	r3, [sp, #4]
    674e:	601a      	str	r2, [r3, #0]
    6750:	e009      	b.n	6766 <_strtol_r+0x116>
    6752:	2430      	movs	r4, #48	; 0x30
    6754:	2e00      	cmp	r6, #0
    6756:	d1aa      	bne.n	66ae <_strtol_r+0x5e>
    6758:	2608      	movs	r6, #8
    675a:	e7a8      	b.n	66ae <_strtol_r+0x5e>
    675c:	260a      	movs	r6, #10
    675e:	e7a6      	b.n	66ae <_strtol_r+0x5e>
    6760:	2c30      	cmp	r4, #48	; 0x30
    6762:	d09c      	beq.n	669e <_strtol_r+0x4e>
    6764:	e7a3      	b.n	66ae <_strtol_r+0x5e>
    6766:	b007      	add	sp, #28
    6768:	bdf0      	pop	{r4, r5, r6, r7, pc}
    676a:	46c0      	nop			; (mov r8, r8)
    676c:	20000280 	.word	0x20000280
    6770:	7fffffff 	.word	0x7fffffff

00006774 <_strtoul_r>:
    6774:	b5f0      	push	{r4, r5, r6, r7, lr}
    6776:	001e      	movs	r6, r3
    6778:	4b3f      	ldr	r3, [pc, #252]	; (6878 <_strtoul_r+0x104>)
    677a:	b087      	sub	sp, #28
    677c:	681b      	ldr	r3, [r3, #0]
    677e:	9104      	str	r1, [sp, #16]
    6780:	9302      	str	r3, [sp, #8]
    6782:	0017      	movs	r7, r2
    6784:	000b      	movs	r3, r1
    6786:	2108      	movs	r1, #8
    6788:	9005      	str	r0, [sp, #20]
    678a:	781c      	ldrb	r4, [r3, #0]
    678c:	9a02      	ldr	r2, [sp, #8]
    678e:	1c5d      	adds	r5, r3, #1
    6790:	1912      	adds	r2, r2, r4
    6792:	7852      	ldrb	r2, [r2, #1]
    6794:	400a      	ands	r2, r1
    6796:	d001      	beq.n	679c <_strtoul_r+0x28>
    6798:	002b      	movs	r3, r5
    679a:	e7f6      	b.n	678a <_strtoul_r+0x16>
    679c:	2c2d      	cmp	r4, #45	; 0x2d
    679e:	d104      	bne.n	67aa <_strtoul_r+0x36>
    67a0:	1c9d      	adds	r5, r3, #2
    67a2:	785c      	ldrb	r4, [r3, #1]
    67a4:	2301      	movs	r3, #1
    67a6:	9301      	str	r3, [sp, #4]
    67a8:	e004      	b.n	67b4 <_strtoul_r+0x40>
    67aa:	9201      	str	r2, [sp, #4]
    67ac:	2c2b      	cmp	r4, #43	; 0x2b
    67ae:	d101      	bne.n	67b4 <_strtoul_r+0x40>
    67b0:	785c      	ldrb	r4, [r3, #1]
    67b2:	1c9d      	adds	r5, r3, #2
    67b4:	2e00      	cmp	r6, #0
    67b6:	d002      	beq.n	67be <_strtoul_r+0x4a>
    67b8:	2e10      	cmp	r6, #16
    67ba:	d10a      	bne.n	67d2 <_strtoul_r+0x5e>
    67bc:	e057      	b.n	686e <_strtoul_r+0xfa>
    67be:	2c30      	cmp	r4, #48	; 0x30
    67c0:	d153      	bne.n	686a <_strtoul_r+0xf6>
    67c2:	2220      	movs	r2, #32
    67c4:	782b      	ldrb	r3, [r5, #0]
    67c6:	4393      	bics	r3, r2
    67c8:	2b58      	cmp	r3, #88	; 0x58
    67ca:	d149      	bne.n	6860 <_strtoul_r+0xec>
    67cc:	2610      	movs	r6, #16
    67ce:	786c      	ldrb	r4, [r5, #1]
    67d0:	3502      	adds	r5, #2
    67d2:	2001      	movs	r0, #1
    67d4:	0031      	movs	r1, r6
    67d6:	4240      	negs	r0, r0
    67d8:	f7fe fd80 	bl	52dc <__aeabi_uidiv>
    67dc:	9003      	str	r0, [sp, #12]
    67de:	2001      	movs	r0, #1
    67e0:	0031      	movs	r1, r6
    67e2:	4240      	negs	r0, r0
    67e4:	f7fe fe00 	bl	53e8 <__aeabi_uidivmod>
    67e8:	2300      	movs	r3, #0
    67ea:	468c      	mov	ip, r1
    67ec:	0018      	movs	r0, r3
    67ee:	9a02      	ldr	r2, [sp, #8]
    67f0:	1912      	adds	r2, r2, r4
    67f2:	7851      	ldrb	r1, [r2, #1]
    67f4:	2204      	movs	r2, #4
    67f6:	4211      	tst	r1, r2
    67f8:	d001      	beq.n	67fe <_strtoul_r+0x8a>
    67fa:	3c30      	subs	r4, #48	; 0x30
    67fc:	e007      	b.n	680e <_strtoul_r+0x9a>
    67fe:	2203      	movs	r2, #3
    6800:	4011      	ands	r1, r2
    6802:	d017      	beq.n	6834 <_strtoul_r+0xc0>
    6804:	3234      	adds	r2, #52	; 0x34
    6806:	2901      	cmp	r1, #1
    6808:	d000      	beq.n	680c <_strtoul_r+0x98>
    680a:	3220      	adds	r2, #32
    680c:	1aa4      	subs	r4, r4, r2
    680e:	42a6      	cmp	r6, r4
    6810:	dd10      	ble.n	6834 <_strtoul_r+0xc0>
    6812:	2b00      	cmp	r3, #0
    6814:	db09      	blt.n	682a <_strtoul_r+0xb6>
    6816:	9b03      	ldr	r3, [sp, #12]
    6818:	4298      	cmp	r0, r3
    681a:	d806      	bhi.n	682a <_strtoul_r+0xb6>
    681c:	d101      	bne.n	6822 <_strtoul_r+0xae>
    681e:	4564      	cmp	r4, ip
    6820:	dc03      	bgt.n	682a <_strtoul_r+0xb6>
    6822:	4370      	muls	r0, r6
    6824:	2301      	movs	r3, #1
    6826:	1820      	adds	r0, r4, r0
    6828:	e001      	b.n	682e <_strtoul_r+0xba>
    682a:	2301      	movs	r3, #1
    682c:	425b      	negs	r3, r3
    682e:	782c      	ldrb	r4, [r5, #0]
    6830:	3501      	adds	r5, #1
    6832:	e7dc      	b.n	67ee <_strtoul_r+0x7a>
    6834:	2b00      	cmp	r3, #0
    6836:	da07      	bge.n	6848 <_strtoul_r+0xd4>
    6838:	2322      	movs	r3, #34	; 0x22
    683a:	2001      	movs	r0, #1
    683c:	9a05      	ldr	r2, [sp, #20]
    683e:	4240      	negs	r0, r0
    6840:	6013      	str	r3, [r2, #0]
    6842:	2f00      	cmp	r7, #0
    6844:	d109      	bne.n	685a <_strtoul_r+0xe6>
    6846:	e015      	b.n	6874 <_strtoul_r+0x100>
    6848:	9a01      	ldr	r2, [sp, #4]
    684a:	2a00      	cmp	r2, #0
    684c:	d000      	beq.n	6850 <_strtoul_r+0xdc>
    684e:	4240      	negs	r0, r0
    6850:	2f00      	cmp	r7, #0
    6852:	d00f      	beq.n	6874 <_strtoul_r+0x100>
    6854:	9a04      	ldr	r2, [sp, #16]
    6856:	2b00      	cmp	r3, #0
    6858:	d000      	beq.n	685c <_strtoul_r+0xe8>
    685a:	1e6a      	subs	r2, r5, #1
    685c:	603a      	str	r2, [r7, #0]
    685e:	e009      	b.n	6874 <_strtoul_r+0x100>
    6860:	2430      	movs	r4, #48	; 0x30
    6862:	2e00      	cmp	r6, #0
    6864:	d1b5      	bne.n	67d2 <_strtoul_r+0x5e>
    6866:	2608      	movs	r6, #8
    6868:	e7b3      	b.n	67d2 <_strtoul_r+0x5e>
    686a:	260a      	movs	r6, #10
    686c:	e7b1      	b.n	67d2 <_strtoul_r+0x5e>
    686e:	2c30      	cmp	r4, #48	; 0x30
    6870:	d0a7      	beq.n	67c2 <_strtoul_r+0x4e>
    6872:	e7ae      	b.n	67d2 <_strtoul_r+0x5e>
    6874:	b007      	add	sp, #28
    6876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6878:	20000280 	.word	0x20000280

0000687c <__submore>:
    687c:	000b      	movs	r3, r1
    687e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6880:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    6882:	3344      	adds	r3, #68	; 0x44
    6884:	000c      	movs	r4, r1
    6886:	429d      	cmp	r5, r3
    6888:	d11b      	bne.n	68c2 <__submore+0x46>
    688a:	2680      	movs	r6, #128	; 0x80
    688c:	00f6      	lsls	r6, r6, #3
    688e:	0031      	movs	r1, r6
    6890:	f000 f898 	bl	69c4 <_malloc_r>
    6894:	2800      	cmp	r0, #0
    6896:	d102      	bne.n	689e <__submore+0x22>
    6898:	2001      	movs	r0, #1
    689a:	4240      	negs	r0, r0
    689c:	e025      	b.n	68ea <__submore+0x6e>
    689e:	0023      	movs	r3, r4
    68a0:	6360      	str	r0, [r4, #52]	; 0x34
    68a2:	63a6      	str	r6, [r4, #56]	; 0x38
    68a4:	3346      	adds	r3, #70	; 0x46
    68a6:	781a      	ldrb	r2, [r3, #0]
    68a8:	4b10      	ldr	r3, [pc, #64]	; (68ec <__submore+0x70>)
    68aa:	54c2      	strb	r2, [r0, r3]
    68ac:	0023      	movs	r3, r4
    68ae:	3345      	adds	r3, #69	; 0x45
    68b0:	781a      	ldrb	r2, [r3, #0]
    68b2:	4b0f      	ldr	r3, [pc, #60]	; (68f0 <__submore+0x74>)
    68b4:	54c2      	strb	r2, [r0, r3]
    68b6:	782a      	ldrb	r2, [r5, #0]
    68b8:	4b0e      	ldr	r3, [pc, #56]	; (68f4 <__submore+0x78>)
    68ba:	54c2      	strb	r2, [r0, r3]
    68bc:	18c0      	adds	r0, r0, r3
    68be:	6020      	str	r0, [r4, #0]
    68c0:	e012      	b.n	68e8 <__submore+0x6c>
    68c2:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    68c4:	0029      	movs	r1, r5
    68c6:	0073      	lsls	r3, r6, #1
    68c8:	001a      	movs	r2, r3
    68ca:	9301      	str	r3, [sp, #4]
    68cc:	f000 f8d0 	bl	6a70 <_realloc_r>
    68d0:	1e05      	subs	r5, r0, #0
    68d2:	d0e1      	beq.n	6898 <__submore+0x1c>
    68d4:	1987      	adds	r7, r0, r6
    68d6:	0001      	movs	r1, r0
    68d8:	0032      	movs	r2, r6
    68da:	0038      	movs	r0, r7
    68dc:	f7fe ffd0 	bl	5880 <memcpy>
    68e0:	9b01      	ldr	r3, [sp, #4]
    68e2:	6027      	str	r7, [r4, #0]
    68e4:	6365      	str	r5, [r4, #52]	; 0x34
    68e6:	63a3      	str	r3, [r4, #56]	; 0x38
    68e8:	2000      	movs	r0, #0
    68ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    68ec:	000003ff 	.word	0x000003ff
    68f0:	000003fe 	.word	0x000003fe
    68f4:	000003fd 	.word	0x000003fd

000068f8 <memchr>:
    68f8:	b2c9      	uxtb	r1, r1
    68fa:	1882      	adds	r2, r0, r2
    68fc:	4290      	cmp	r0, r2
    68fe:	d004      	beq.n	690a <memchr+0x12>
    6900:	7803      	ldrb	r3, [r0, #0]
    6902:	428b      	cmp	r3, r1
    6904:	d002      	beq.n	690c <memchr+0x14>
    6906:	3001      	adds	r0, #1
    6908:	e7f8      	b.n	68fc <memchr+0x4>
    690a:	2000      	movs	r0, #0
    690c:	4770      	bx	lr

0000690e <memmove>:
    690e:	b510      	push	{r4, lr}
    6910:	4288      	cmp	r0, r1
    6912:	d902      	bls.n	691a <memmove+0xc>
    6914:	188b      	adds	r3, r1, r2
    6916:	4298      	cmp	r0, r3
    6918:	d301      	bcc.n	691e <memmove+0x10>
    691a:	2300      	movs	r3, #0
    691c:	e005      	b.n	692a <memmove+0x1c>
    691e:	1a9b      	subs	r3, r3, r2
    6920:	3a01      	subs	r2, #1
    6922:	d308      	bcc.n	6936 <memmove+0x28>
    6924:	5c99      	ldrb	r1, [r3, r2]
    6926:	5481      	strb	r1, [r0, r2]
    6928:	e7fa      	b.n	6920 <memmove+0x12>
    692a:	4293      	cmp	r3, r2
    692c:	d003      	beq.n	6936 <memmove+0x28>
    692e:	5ccc      	ldrb	r4, [r1, r3]
    6930:	54c4      	strb	r4, [r0, r3]
    6932:	3301      	adds	r3, #1
    6934:	e7f9      	b.n	692a <memmove+0x1c>
    6936:	bd10      	pop	{r4, pc}

00006938 <_free_r>:
    6938:	b530      	push	{r4, r5, lr}
    693a:	2900      	cmp	r1, #0
    693c:	d03e      	beq.n	69bc <_free_r+0x84>
    693e:	3904      	subs	r1, #4
    6940:	680b      	ldr	r3, [r1, #0]
    6942:	2b00      	cmp	r3, #0
    6944:	da00      	bge.n	6948 <_free_r+0x10>
    6946:	18c9      	adds	r1, r1, r3
    6948:	4a1d      	ldr	r2, [pc, #116]	; (69c0 <_free_r+0x88>)
    694a:	6813      	ldr	r3, [r2, #0]
    694c:	0014      	movs	r4, r2
    694e:	2b00      	cmp	r3, #0
    6950:	d102      	bne.n	6958 <_free_r+0x20>
    6952:	604b      	str	r3, [r1, #4]
    6954:	6011      	str	r1, [r2, #0]
    6956:	e031      	b.n	69bc <_free_r+0x84>
    6958:	428b      	cmp	r3, r1
    695a:	d90d      	bls.n	6978 <_free_r+0x40>
    695c:	680a      	ldr	r2, [r1, #0]
    695e:	1888      	adds	r0, r1, r2
    6960:	4283      	cmp	r3, r0
    6962:	d103      	bne.n	696c <_free_r+0x34>
    6964:	6818      	ldr	r0, [r3, #0]
    6966:	685b      	ldr	r3, [r3, #4]
    6968:	1882      	adds	r2, r0, r2
    696a:	600a      	str	r2, [r1, #0]
    696c:	604b      	str	r3, [r1, #4]
    696e:	6021      	str	r1, [r4, #0]
    6970:	e024      	b.n	69bc <_free_r+0x84>
    6972:	428a      	cmp	r2, r1
    6974:	d803      	bhi.n	697e <_free_r+0x46>
    6976:	0013      	movs	r3, r2
    6978:	685a      	ldr	r2, [r3, #4]
    697a:	2a00      	cmp	r2, #0
    697c:	d1f9      	bne.n	6972 <_free_r+0x3a>
    697e:	681d      	ldr	r5, [r3, #0]
    6980:	195c      	adds	r4, r3, r5
    6982:	428c      	cmp	r4, r1
    6984:	d10b      	bne.n	699e <_free_r+0x66>
    6986:	6809      	ldr	r1, [r1, #0]
    6988:	1869      	adds	r1, r5, r1
    698a:	1858      	adds	r0, r3, r1
    698c:	6019      	str	r1, [r3, #0]
    698e:	4282      	cmp	r2, r0
    6990:	d114      	bne.n	69bc <_free_r+0x84>
    6992:	6810      	ldr	r0, [r2, #0]
    6994:	6852      	ldr	r2, [r2, #4]
    6996:	1841      	adds	r1, r0, r1
    6998:	6019      	str	r1, [r3, #0]
    699a:	605a      	str	r2, [r3, #4]
    699c:	e00e      	b.n	69bc <_free_r+0x84>
    699e:	428c      	cmp	r4, r1
    69a0:	d902      	bls.n	69a8 <_free_r+0x70>
    69a2:	230c      	movs	r3, #12
    69a4:	6003      	str	r3, [r0, #0]
    69a6:	e009      	b.n	69bc <_free_r+0x84>
    69a8:	6808      	ldr	r0, [r1, #0]
    69aa:	180c      	adds	r4, r1, r0
    69ac:	42a2      	cmp	r2, r4
    69ae:	d103      	bne.n	69b8 <_free_r+0x80>
    69b0:	6814      	ldr	r4, [r2, #0]
    69b2:	6852      	ldr	r2, [r2, #4]
    69b4:	1820      	adds	r0, r4, r0
    69b6:	6008      	str	r0, [r1, #0]
    69b8:	604a      	str	r2, [r1, #4]
    69ba:	6059      	str	r1, [r3, #4]
    69bc:	bd30      	pop	{r4, r5, pc}
    69be:	46c0      	nop			; (mov r8, r8)
    69c0:	200002d4 	.word	0x200002d4

000069c4 <_malloc_r>:
    69c4:	2303      	movs	r3, #3
    69c6:	b570      	push	{r4, r5, r6, lr}
    69c8:	1ccd      	adds	r5, r1, #3
    69ca:	439d      	bics	r5, r3
    69cc:	3508      	adds	r5, #8
    69ce:	0006      	movs	r6, r0
    69d0:	2d0c      	cmp	r5, #12
    69d2:	d201      	bcs.n	69d8 <_malloc_r+0x14>
    69d4:	250c      	movs	r5, #12
    69d6:	e005      	b.n	69e4 <_malloc_r+0x20>
    69d8:	2d00      	cmp	r5, #0
    69da:	da03      	bge.n	69e4 <_malloc_r+0x20>
    69dc:	230c      	movs	r3, #12
    69de:	2000      	movs	r0, #0
    69e0:	6033      	str	r3, [r6, #0]
    69e2:	e040      	b.n	6a66 <_malloc_r+0xa2>
    69e4:	42a9      	cmp	r1, r5
    69e6:	d8f9      	bhi.n	69dc <_malloc_r+0x18>
    69e8:	4b1f      	ldr	r3, [pc, #124]	; (6a68 <_malloc_r+0xa4>)
    69ea:	681c      	ldr	r4, [r3, #0]
    69ec:	001a      	movs	r2, r3
    69ee:	0021      	movs	r1, r4
    69f0:	2900      	cmp	r1, #0
    69f2:	d013      	beq.n	6a1c <_malloc_r+0x58>
    69f4:	680b      	ldr	r3, [r1, #0]
    69f6:	1b5b      	subs	r3, r3, r5
    69f8:	d40d      	bmi.n	6a16 <_malloc_r+0x52>
    69fa:	2b0b      	cmp	r3, #11
    69fc:	d902      	bls.n	6a04 <_malloc_r+0x40>
    69fe:	600b      	str	r3, [r1, #0]
    6a00:	18cc      	adds	r4, r1, r3
    6a02:	e01e      	b.n	6a42 <_malloc_r+0x7e>
    6a04:	428c      	cmp	r4, r1
    6a06:	d102      	bne.n	6a0e <_malloc_r+0x4a>
    6a08:	6863      	ldr	r3, [r4, #4]
    6a0a:	6013      	str	r3, [r2, #0]
    6a0c:	e01a      	b.n	6a44 <_malloc_r+0x80>
    6a0e:	684b      	ldr	r3, [r1, #4]
    6a10:	6063      	str	r3, [r4, #4]
    6a12:	000c      	movs	r4, r1
    6a14:	e016      	b.n	6a44 <_malloc_r+0x80>
    6a16:	000c      	movs	r4, r1
    6a18:	6849      	ldr	r1, [r1, #4]
    6a1a:	e7e9      	b.n	69f0 <_malloc_r+0x2c>
    6a1c:	4c13      	ldr	r4, [pc, #76]	; (6a6c <_malloc_r+0xa8>)
    6a1e:	6823      	ldr	r3, [r4, #0]
    6a20:	2b00      	cmp	r3, #0
    6a22:	d103      	bne.n	6a2c <_malloc_r+0x68>
    6a24:	0030      	movs	r0, r6
    6a26:	f000 f849 	bl	6abc <_sbrk_r>
    6a2a:	6020      	str	r0, [r4, #0]
    6a2c:	0029      	movs	r1, r5
    6a2e:	0030      	movs	r0, r6
    6a30:	f000 f844 	bl	6abc <_sbrk_r>
    6a34:	1c43      	adds	r3, r0, #1
    6a36:	d0d1      	beq.n	69dc <_malloc_r+0x18>
    6a38:	2303      	movs	r3, #3
    6a3a:	1cc4      	adds	r4, r0, #3
    6a3c:	439c      	bics	r4, r3
    6a3e:	42a0      	cmp	r0, r4
    6a40:	d10a      	bne.n	6a58 <_malloc_r+0x94>
    6a42:	6025      	str	r5, [r4, #0]
    6a44:	0020      	movs	r0, r4
    6a46:	2207      	movs	r2, #7
    6a48:	300b      	adds	r0, #11
    6a4a:	1d23      	adds	r3, r4, #4
    6a4c:	4390      	bics	r0, r2
    6a4e:	1ac3      	subs	r3, r0, r3
    6a50:	d009      	beq.n	6a66 <_malloc_r+0xa2>
    6a52:	425a      	negs	r2, r3
    6a54:	50e2      	str	r2, [r4, r3]
    6a56:	e006      	b.n	6a66 <_malloc_r+0xa2>
    6a58:	1a21      	subs	r1, r4, r0
    6a5a:	0030      	movs	r0, r6
    6a5c:	f000 f82e 	bl	6abc <_sbrk_r>
    6a60:	1c43      	adds	r3, r0, #1
    6a62:	d1ee      	bne.n	6a42 <_malloc_r+0x7e>
    6a64:	e7ba      	b.n	69dc <_malloc_r+0x18>
    6a66:	bd70      	pop	{r4, r5, r6, pc}
    6a68:	200002d4 	.word	0x200002d4
    6a6c:	200002d0 	.word	0x200002d0

00006a70 <_realloc_r>:
    6a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a72:	0006      	movs	r6, r0
    6a74:	000c      	movs	r4, r1
    6a76:	0015      	movs	r5, r2
    6a78:	2900      	cmp	r1, #0
    6a7a:	d104      	bne.n	6a86 <_realloc_r+0x16>
    6a7c:	0011      	movs	r1, r2
    6a7e:	f7ff ffa1 	bl	69c4 <_malloc_r>
    6a82:	0004      	movs	r4, r0
    6a84:	e018      	b.n	6ab8 <_realloc_r+0x48>
    6a86:	2a00      	cmp	r2, #0
    6a88:	d103      	bne.n	6a92 <_realloc_r+0x22>
    6a8a:	f7ff ff55 	bl	6938 <_free_r>
    6a8e:	002c      	movs	r4, r5
    6a90:	e012      	b.n	6ab8 <_realloc_r+0x48>
    6a92:	f000 f825 	bl	6ae0 <_malloc_usable_size_r>
    6a96:	4285      	cmp	r5, r0
    6a98:	d90e      	bls.n	6ab8 <_realloc_r+0x48>
    6a9a:	0029      	movs	r1, r5
    6a9c:	0030      	movs	r0, r6
    6a9e:	f7ff ff91 	bl	69c4 <_malloc_r>
    6aa2:	1e07      	subs	r7, r0, #0
    6aa4:	d007      	beq.n	6ab6 <_realloc_r+0x46>
    6aa6:	0021      	movs	r1, r4
    6aa8:	002a      	movs	r2, r5
    6aaa:	f7fe fee9 	bl	5880 <memcpy>
    6aae:	0021      	movs	r1, r4
    6ab0:	0030      	movs	r0, r6
    6ab2:	f7ff ff41 	bl	6938 <_free_r>
    6ab6:	003c      	movs	r4, r7
    6ab8:	0020      	movs	r0, r4
    6aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006abc <_sbrk_r>:
    6abc:	2300      	movs	r3, #0
    6abe:	b570      	push	{r4, r5, r6, lr}
    6ac0:	4c06      	ldr	r4, [pc, #24]	; (6adc <_sbrk_r+0x20>)
    6ac2:	0005      	movs	r5, r0
    6ac4:	0008      	movs	r0, r1
    6ac6:	6023      	str	r3, [r4, #0]
    6ac8:	f7fe f9d2 	bl	4e70 <_sbrk>
    6acc:	1c43      	adds	r3, r0, #1
    6ace:	d103      	bne.n	6ad8 <_sbrk_r+0x1c>
    6ad0:	6823      	ldr	r3, [r4, #0]
    6ad2:	2b00      	cmp	r3, #0
    6ad4:	d000      	beq.n	6ad8 <_sbrk_r+0x1c>
    6ad6:	602b      	str	r3, [r5, #0]
    6ad8:	bd70      	pop	{r4, r5, r6, pc}
    6ada:	46c0      	nop			; (mov r8, r8)
    6adc:	20001090 	.word	0x20001090

00006ae0 <_malloc_usable_size_r>:
    6ae0:	1f0b      	subs	r3, r1, #4
    6ae2:	681a      	ldr	r2, [r3, #0]
    6ae4:	1f10      	subs	r0, r2, #4
    6ae6:	2a00      	cmp	r2, #0
    6ae8:	da04      	bge.n	6af4 <_malloc_usable_size_r+0x14>
    6aea:	1889      	adds	r1, r1, r2
    6aec:	3904      	subs	r1, #4
    6aee:	680b      	ldr	r3, [r1, #0]
    6af0:	18d0      	adds	r0, r2, r3
    6af2:	3804      	subs	r0, #4
    6af4:	4770      	bx	lr
    6af6:	0000      	movs	r0, r0
    6af8:	410d0a0d 	.word	0x410d0a0d
    6afc:	72666164 	.word	0x72666164
    6b00:	00746975 	.word	0x00746975
    6b04:	0a313023 	.word	0x0a313023
    6b08:	00000000 	.word	0x00000000
    6b0c:	00303054 	.word	0x00303054
    6b10:	00000a4c 	.word	0x00000a4c
    6b14:	64253054 	.word	0x64253054
    6b18:	00000000 	.word	0x00000000
    6b1c:	20626f62 	.word	0x20626f62
    6b20:	20736177 	.word	0x20736177
    6b24:	6e756f66 	.word	0x6e756f66
    6b28:	00000064 	.word	0x00000064
    6b2c:	204d5750 	.word	0x204d5750
    6b30:	00006425 	.word	0x00006425
    6b34:	6425203a 	.word	0x6425203a
    6b38:	00000000 	.word	0x00000000
    6b3c:	31414846 	.word	0x31414846
    6b40:	00000000 	.word	0x00000000
    6b44:	00202d20 	.word	0x00202d20
    6b48:	004b4341 	.word	0x004b4341
    6b4c:	30414846 	.word	0x30414846
    6b50:	00000000 	.word	0x00000000
    6b54:	20414b42 	.word	0x20414b42
    6b58:	00000031 	.word	0x00000031
    6b5c:	20414b42 	.word	0x20414b42
    6b60:	00000030 	.word	0x00000030
    6b64:	204c4b42 	.word	0x204c4b42
    6b68:	00000031 	.word	0x00000031
    6b6c:	204c4b42 	.word	0x204c4b42
    6b70:	00000030 	.word	0x00000030
    6b74:	20524b42 	.word	0x20524b42
    6b78:	00000031 	.word	0x00000031
    6b7c:	20524b42 	.word	0x20524b42
    6b80:	00000030 	.word	0x00000030
    6b84:	314e5248 	.word	0x314e5248
    6b88:	00003120 	.word	0x00003120
    6b8c:	314e5248 	.word	0x314e5248
    6b90:	00003020 	.word	0x00003020
    6b94:	324e5248 	.word	0x324e5248
    6b98:	00003120 	.word	0x00003120
    6b9c:	324e5248 	.word	0x324e5248
    6ba0:	00003020 	.word	0x00003020
    6ba4:	334e5248 	.word	0x334e5248
    6ba8:	00003120 	.word	0x00003120
    6bac:	334e5248 	.word	0x334e5248
    6bb0:	00003020 	.word	0x00003020
    6bb4:	344e5248 	.word	0x344e5248
    6bb8:	00003120 	.word	0x00003120
    6bbc:	344e5248 	.word	0x344e5248
    6bc0:	00003020 	.word	0x00003020
    6bc4:	30304253 	.word	0x30304253
    6bc8:	00003120 	.word	0x00003120
    6bcc:	30304253 	.word	0x30304253
    6bd0:	00003020 	.word	0x00003020
    6bd4:	31304253 	.word	0x31304253
    6bd8:	00003120 	.word	0x00003120
    6bdc:	31304253 	.word	0x31304253
    6be0:	00003020 	.word	0x00003020
    6be4:	32304253 	.word	0x32304253
    6be8:	00003120 	.word	0x00003120
    6bec:	32304253 	.word	0x32304253
    6bf0:	00003020 	.word	0x00003020
    6bf4:	33304253 	.word	0x33304253
    6bf8:	00003120 	.word	0x00003120
    6bfc:	33304253 	.word	0x33304253
    6c00:	00003020 	.word	0x00003020
    6c04:	34304253 	.word	0x34304253
    6c08:	00003120 	.word	0x00003120
    6c0c:	34304253 	.word	0x34304253
    6c10:	00003020 	.word	0x00003020
    6c14:	35304253 	.word	0x35304253
    6c18:	00003120 	.word	0x00003120
    6c1c:	35304253 	.word	0x35304253
    6c20:	00003020 	.word	0x00003020
    6c24:	36304253 	.word	0x36304253
    6c28:	00003120 	.word	0x00003120
    6c2c:	36304253 	.word	0x36304253
    6c30:	00003020 	.word	0x00003020
    6c34:	37304253 	.word	0x37304253
    6c38:	00003120 	.word	0x00003120
    6c3c:	37304253 	.word	0x37304253
    6c40:	00003020 	.word	0x00003020
    6c44:	38304253 	.word	0x38304253
    6c48:	00003120 	.word	0x00003120
    6c4c:	38304253 	.word	0x38304253
    6c50:	00003020 	.word	0x00003020
    6c54:	39304253 	.word	0x39304253
    6c58:	00003120 	.word	0x00003120
    6c5c:	39304253 	.word	0x39304253
    6c60:	00003020 	.word	0x00003020
    6c64:	30314253 	.word	0x30314253
    6c68:	00003120 	.word	0x00003120
    6c6c:	30314253 	.word	0x30314253
    6c70:	00003020 	.word	0x00003020
    6c74:	53524253 	.word	0x53524253
    6c78:	32342054 	.word	0x32342054
    6c7c:	00000000 	.word	0x00000000
    6c80:	203a4253 	.word	0x203a4253
    6c84:	45534552 	.word	0x45534552
    6c88:	4e495454 	.word	0x4e495454
    6c8c:	00000047 	.word	0x00000047
    6c90:	20545250 	.word	0x20545250
    6c94:	00000031 	.word	0x00000031
    6c98:	20545250 	.word	0x20545250
    6c9c:	00000030 	.word	0x00000030
    6ca0:	20525457 	.word	0x20525457
    6ca4:	00000031 	.word	0x00000031
    6ca8:	20415453 	.word	0x20415453
    6cac:	00000031 	.word	0x00000031
    6cb0:	20415453 	.word	0x20415453
    6cb4:	00000030 	.word	0x00000030
    6cb8:	2044454c 	.word	0x2044454c
    6cbc:	00000031 	.word	0x00000031
    6cc0:	2044454c 	.word	0x2044454c
    6cc4:	00000030 	.word	0x00000030
    6cc8:	204c4448 	.word	0x204c4448
    6ccc:	00000031 	.word	0x00000031
    6cd0:	204c4448 	.word	0x204c4448
    6cd4:	00000030 	.word	0x00000030
    6cd8:	41495242 	.word	0x41495242
    6cdc:	0031204e 	.word	0x0031204e
    6ce0:	41495242 	.word	0x41495242
    6ce4:	0030204e 	.word	0x0030204e
    6ce8:	48534c46 	.word	0x48534c46
    6cec:	00312031 	.word	0x00312031
    6cf0:	48534c46 	.word	0x48534c46
    6cf4:	00302031 	.word	0x00302031
    6cf8:	48534c46 	.word	0x48534c46
    6cfc:	00312032 	.word	0x00312032
    6d00:	48534c46 	.word	0x48534c46
    6d04:	00302032 	.word	0x00302032
    6d08:	48534c46 	.word	0x48534c46
    6d0c:	00312033 	.word	0x00312033
    6d10:	48534c46 	.word	0x48534c46
    6d14:	00302033 	.word	0x00302033
    6d18:	48534c46 	.word	0x48534c46
    6d1c:	31204446 	.word	0x31204446
    6d20:	00000000 	.word	0x00000000
    6d24:	48534c46 	.word	0x48534c46
    6d28:	30204446 	.word	0x30204446
    6d2c:	00000000 	.word	0x00000000
    6d30:	5254534d 	.word	0x5254534d
    6d34:	20545352 	.word	0x20545352
    6d38:	00003234 	.word	0x00003234
    6d3c:	45534552 	.word	0x45534552
    6d40:	43412054 	.word	0x43412054
    6d44:	00000a4b 	.word	0x00000a4b
    6d48:	52524e4d 	.word	0x52524e4d
    6d4c:	34205453 	.word	0x34205453
    6d50:	00000032 	.word	0x00000032
    6d54:	4f4e494d 	.word	0x4f4e494d
    6d58:	45522052 	.word	0x45522052
    6d5c:	20544553 	.word	0x20544553
    6d60:	0a4b4341 	.word	0x0a4b4341
    6d64:	00000000 	.word	0x00000000
    6d68:	4f4e494d 	.word	0x4f4e494d
    6d6c:	45522052 	.word	0x45522052
    6d70:	20544553 	.word	0x20544553
    6d74:	454e4f44 	.word	0x454e4f44
    6d78:	0000000a 	.word	0x0000000a
    6d7c:	54545250 	.word	0x54545250
    6d80:	30485352 	.word	0x30485352
    6d84:	00000000 	.word	0x00000000
    6d88:	54545250 	.word	0x54545250
    6d8c:	30485352 	.word	0x30485352
    6d90:	00642520 	.word	0x00642520
    6d94:	54545250 	.word	0x54545250
    6d98:	31485352 	.word	0x31485352
    6d9c:	00000000 	.word	0x00000000
    6da0:	54545250 	.word	0x54545250
    6da4:	31485352 	.word	0x31485352
    6da8:	00642520 	.word	0x00642520
    6dac:	54545250 	.word	0x54545250
    6db0:	32485352 	.word	0x32485352
    6db4:	00000000 	.word	0x00000000
    6db8:	54545250 	.word	0x54545250
    6dbc:	32485352 	.word	0x32485352
    6dc0:	00642520 	.word	0x00642520
    6dc4:	54545250 	.word	0x54545250
    6dc8:	33485352 	.word	0x33485352
    6dcc:	00000000 	.word	0x00000000
    6dd0:	54545250 	.word	0x54545250
    6dd4:	33485352 	.word	0x33485352
    6dd8:	00642520 	.word	0x00642520
    6ddc:	54545250 	.word	0x54545250
    6de0:	34485352 	.word	0x34485352
    6de4:	00000000 	.word	0x00000000
    6de8:	54545250 	.word	0x54545250
    6dec:	34485352 	.word	0x34485352
    6df0:	00642520 	.word	0x00642520
    6df4:	54545250 	.word	0x54545250
    6df8:	35485352 	.word	0x35485352
    6dfc:	00000000 	.word	0x00000000
    6e00:	54545250 	.word	0x54545250
    6e04:	35485352 	.word	0x35485352
    6e08:	00642520 	.word	0x00642520
    6e0c:	54545250 	.word	0x54545250
    6e10:	36485352 	.word	0x36485352
    6e14:	00000000 	.word	0x00000000
    6e18:	54545250 	.word	0x54545250
    6e1c:	36485352 	.word	0x36485352
    6e20:	00642520 	.word	0x00642520
    6e24:	54545250 	.word	0x54545250
    6e28:	37485352 	.word	0x37485352
    6e2c:	00000000 	.word	0x00000000
    6e30:	54545250 	.word	0x54545250
    6e34:	37485352 	.word	0x37485352
    6e38:	00642520 	.word	0x00642520
    6e3c:	20564f43 	.word	0x20564f43
    6e40:	00000031 	.word	0x00000031
    6e44:	20564f43 	.word	0x20564f43
    6e48:	00000030 	.word	0x00000030
    6e4c:	52545250 	.word	0x52545250
    6e50:	00313256 	.word	0x00313256
    6e54:	52545250 	.word	0x52545250
    6e58:	20313256 	.word	0x20313256
    6e5c:	00006425 	.word	0x00006425
    6e60:	52545250 	.word	0x52545250
    6e64:	00303256 	.word	0x00303256
    6e68:	5254534d 	.word	0x5254534d
    6e6c:	20545354 	.word	0x20545354
    6e70:	00003234 	.word	0x00003234
    6e74:	52444441 	.word	0x52444441
    6e78:	6425203a 	.word	0x6425203a
    6e7c:	203e2d20 	.word	0x203e2d20
    6e80:	000a6425 	.word	0x000a6425
    6e84:	3a525245 	.word	0x3a525245
    6e88:	25642520 	.word	0x25642520
    6e8c:	25642564 	.word	0x25642564
    6e90:	25642564 	.word	0x25642564
    6e94:	25642564 	.word	0x25642564
    6e98:	000a0d64 	.word	0x000a0d64
    6e9c:	25203a45 	.word	0x25203a45
    6ea0:	202d2064 	.word	0x202d2064
    6ea4:	000a6425 	.word	0x000a6425
    6ea8:	204c4c41 	.word	0x204c4c41
    6eac:	00004b4f 	.word	0x00004b4f
    6eb0:	000023fc 	.word	0x000023fc
    6eb4:	0000240e 	.word	0x0000240e
    6eb8:	00002420 	.word	0x00002420
    6ebc:	00002432 	.word	0x00002432
    6ec0:	00002450 	.word	0x00002450
    6ec4:	00002462 	.word	0x00002462
    6ec8:	00002474 	.word	0x00002474
    6ecc:	00002486 	.word	0x00002486
    6ed0:	00002498 	.word	0x00002498
    6ed4:	000024aa 	.word	0x000024aa
    6ed8:	000024bc 	.word	0x000024bc
    6edc:	000024ce 	.word	0x000024ce
    6ee0:	000024e0 	.word	0x000024e0
    6ee4:	00002534 	.word	0x00002534
    6ee8:	00002552 	.word	0x00002552
    6eec:	0000256c 	.word	0x0000256c
    6ef0:	00002586 	.word	0x00002586
    6ef4:	000025a0 	.word	0x000025a0
    6ef8:	000025ba 	.word	0x000025ba
    6efc:	000025d4 	.word	0x000025d4
    6f00:	00002612 	.word	0x00002612
    6f04:	00002668 	.word	0x00002668
    6f08:	000026be 	.word	0x000026be
    6f0c:	00002714 	.word	0x00002714
    6f10:	64343025 	.word	0x64343025
    6f14:	34302520 	.word	0x34302520
    6f18:	30252064 	.word	0x30252064
    6f1c:	25206434 	.word	0x25206434
    6f20:	20643430 	.word	0x20643430
    6f24:	64343025 	.word	0x64343025
    6f28:	34302520 	.word	0x34302520
    6f2c:	000a0d64 	.word	0x000a0d64
    6f30:	00000000 	.word	0x00000000
    6f34:	66616441 	.word	0x66616441
    6f38:	74697572 	.word	0x74697572
    6f3c:	20584620 	.word	0x20584620
    6f40:	6e756f53 	.word	0x6e756f53
    6f44:	6f422064 	.word	0x6f422064
    6f48:	00647261 	.word	0x00647261
    6f4c:	0a333023 	.word	0x0a333023
    6f50:	00000000 	.word	0x00000000
    6f54:	69466f4e 	.word	0x69466f4e
    6f58:	0000656c 	.word	0x0000656c
    6f5c:	656e6f64 	.word	0x656e6f64
    6f60:	00000000 	.word	0x00000000
    6f64:	79616c70 	.word	0x79616c70
    6f68:	00000000 	.word	0x00000000
    6f6c:	00564157 	.word	0x00564157
    6f70:	0047474f 	.word	0x0047474f
    6f74:	700d0a0d 	.word	0x700d0a0d
    6f78:	0979616c 	.word	0x0979616c
    6f7c:	54096425 	.word	0x54096425
    6f80:	20206425 	.word	0x20206425
    6f84:	25202020 	.word	0x25202020
    6f88:	5d0a5e5b 	.word	0x5d0a5e5b
    6f8c:	00000000 	.word	0x00000000
    6f90:	0a642523 	.word	0x0a642523
    6f94:	00000000 	.word	0x00000000
    6f98:	00000a71 	.word	0x00000a71
    6f9c:	000042b6 	.word	0x000042b6
    6fa0:	0000432e 	.word	0x0000432e
    6fa4:	0000432e 	.word	0x0000432e
    6fa8:	000042d4 	.word	0x000042d4
    6fac:	000042ce 	.word	0x000042ce
    6fb0:	000042da 	.word	0x000042da
    6fb4:	000042bc 	.word	0x000042bc
    6fb8:	000042e0 	.word	0x000042e0
    6fbc:	00004314 	.word	0x00004314
    6fc0:	00004408 	.word	0x00004408
    6fc4:	00004458 	.word	0x00004458
    6fc8:	00004458 	.word	0x00004458
    6fcc:	00004454 	.word	0x00004454
    6fd0:	000043fa 	.word	0x000043fa
    6fd4:	0000441a 	.word	0x0000441a
    6fd8:	000043ea 	.word	0x000043ea
    6fdc:	0000442c 	.word	0x0000442c
    6fe0:	0000443e 	.word	0x0000443e
    6fe4:	43455845 	.word	0x43455845
    6fe8:	44524f20 	.word	0x44524f20
    6fec:	36205245 	.word	0x36205245
    6ff0:	0a36      	.short	0x0a36
    6ff2:	00          	.byte	0x00
    6ff3:	43          	.byte	0x43
    6ff4:	00          	.byte	0x00
    6ff5:	23          	.byte	0x23
    6ff6:	302d      	.short	0x302d
    6ff8:	6800202b 	.word	0x6800202b
    6ffc:	65004c6c 	.word	0x65004c6c
    7000:	46456766 	.word	0x46456766
    7004:	0047      	.short	0x0047
    7006:	3130      	.short	0x3130
    7008:	35343332 	.word	0x35343332
    700c:	39383736 	.word	0x39383736
    7010:	44434241 	.word	0x44434241
    7014:	30004645 	.word	0x30004645
    7018:	34333231 	.word	0x34333231
    701c:	38373635 	.word	0x38373635
    7020:	63626139 	.word	0x63626139
    7024:	00666564 	.word	0x00666564
    7028:	00007046 	.word	0x00007046
    702c:	00007049 	.word	0x00007049
    7030:	0000704c 	.word	0x0000704c
    7034:	61462d41 	.word	0x61462d41
    7038:	3938662d 	.word	0x3938662d
    703c:	33323130 	.word	0x33323130
    7040:	37363534 	.word	0x37363534
    7044:	2d2b005d 	.word	0x2d2b005d
    7048:	00303000 	.word	0x00303000
    704c:	5878      	.short	0x5878
	...

0000704f <_ctype_>:
    704f:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    705f:	2020 2020 2020 2020 2020 2020 2020 2020                     
    706f:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    707f:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    708f:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    709f:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    70af:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    70bf:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    70cf:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00007150 <__sf_fake_stdin>:
	...

00007170 <__sf_fake_stdout>:
	...

00007190 <__sf_fake_stderr>:
	...

000071b0 <_init>:
    71b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71b2:	46c0      	nop			; (mov r8, r8)
    71b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    71b6:	bc08      	pop	{r3}
    71b8:	469e      	mov	lr, r3
    71ba:	4770      	bx	lr

000071bc <__init_array_start>:
    71bc:	000000dd 	.word	0x000000dd

000071c0 <_fini>:
    71c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71c2:	46c0      	nop			; (mov r8, r8)
    71c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    71c6:	bc08      	pop	{r3}
    71c8:	469e      	mov	lr, r3
    71ca:	4770      	bx	lr

000071cc <__fini_array_start>:
    71cc:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <test_bob>:
2000000c:	5750 004d                                   PWM.

20000010 <bool_map_1>:
	...
20000018:	0100 0000 0000 0000 0000 0001 0000 0000     ................
20000028:	0000 0100 0000 0000 0000 0000 0001 0000     ................
20000038:	0000 0000 0100 0000 0000 0000 0000 0001     ................
20000048:	0000 0000 0000 0100 0000 0000 0000 0001     ................
20000058:	0000 0000 0100 0000 0000 0000 0001 0000     ................
20000068:	0000 0100 0000 0000 0000 0001 0000 0000     ................
20000078:	0100 0000 0000 0000 0001 0000 0000 0000     ................
20000088:	0000 0100 0001 0000 0000 0001 0100 0000     ................
20000098:	0100 0000 0000 0001 0001 0000 0000 0100     ................
200000a8:	0100 0000 0000 0001 0000 0001 0100 0000     ................
200000b8:	0000 0100 0001 0000 0000 0000 0000 0000     ................
200000c8:	0000 0100 0001 0000 0000 0000 0000 0000     ................
200000d8:	0101 0101 0101 0101                         ........

200000e0 <mcp23017_data>:
200000e0:	0000 0000 0020 0000 0000 0000 0000 0000     .... ...........
200000f0:	0001 0000 0021 0000 0000 0000 0000 0000     ....!...........
20000100:	0001 0000 0022 0000 0000 0000 0000 0000     ...."...........
20000110:	0001 0000 0023 0000 0000 0000 0000 0000     ....#...........
20000120:	0001 0000 0024 0000 0000 0000 0000 0000     ....$...........
20000130:	0001 0000 0025 0000 0000 0000 0000 0000     ....%...........
20000140:	0000 0000 0026 0000 0000 0000 0000 0000     ....&...........
20000150:	0000 0000 0027 0000 0000 0000 0000 0000     ....'...........

20000160 <duty_cycle.13719>:
20000160:	003e 0000                                   >...

20000164 <soundboard_instance>:
	...
20000170:	6f30 0000 2020 0020 0000 0000 0001 0000     0o..   .........
20000180:	6f30 0000 2020 0020 0000 0000 0002 0000     0o..   .........
20000190:	6f30 0000 2020 0020 0000 0000 0003 0000     0o..   .........
200001a0:	6f30 0000 2020 0020 0000 0000 0004 0000     0o..   .........
200001b0:	6f30 0000 2020 0020 0000 0000 0005 0000     0o..   .........
200001c0:	6f30 0000 2020 0020 0000 0000 0006 0000     0o..   .........
200001d0:	6f30 0000 2020 0020 0000 0000 0007 0000     0o..   .........
200001e0:	0000 0000 2020 0020 0000 0000 0008 0000     ....   .........
200001f0:	6f30 0000 2020 0020 0000 0000 0009 0000     0o..   .........
20000200:	6f30 0000 2020 0020 0000 0000 000a 0000     0o..   .........
20000210:	6f30 0000 2020 0020                         0o..   .

20000218 <g_interrupt_enabled>:
20000218:	0001 0000                                   ....

2000021c <impure_data>:
2000021c:	0000 0000 7150 0000 7170 0000 7190 0000     ....Pq..pq...q..
	...
2000023c:	6ff3 0000 0000 0000 0000 0000 0000 0000     .o..............
	...

2000027c <_impure_ptr>:
2000027c:	021c 2000                                   ... 

20000280 <__ctype_ptr__>:
20000280:	704f 0000                                   Op..
